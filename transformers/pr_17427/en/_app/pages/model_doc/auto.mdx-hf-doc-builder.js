import{S as ESt,i as CSt,s as wSt,e as a,k as l,w as F,t as o,M as ASt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as ySt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Czr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as te}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function LSt(L){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,P6,bf,De,We,_i,yn,B6,Ln,xn,I6,ui,$n,N6,bi,vf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),gi=a("code"),uf=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),hi=a("code"),pi=o('"new-model"'),P6=o(")."),bf=l(),De=a("p"),We=o("Likewise, if your "),_i=a("code"),yn=o("NewModel"),B6=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),I6=o(`, make sure its
`),ui=a("code"),$n=o("config_class"),N6=o(` attribute is set to the same class you use when registering the model (here
`),bi=a("code"),vf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var tk=s(p);m=r(tk,"NewModelConfig"),tk.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var vi=s(d);h=r(vi,"PretrainedConfig"),vi.forEach(t),Mo=r(Ae,`, make sure its
`),gi=n(Ae,"CODE",{});var ak=s(gi);uf=r(ak,"model_type"),ak.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),hi=n(Ae,"CODE",{});var nk=s(hi);pi=r(nk,'"new-model"'),nk.forEach(t),P6=r(Ae,")."),Ae.forEach(t),bf=i(Qe),De=n(Qe,"P",{});var Eo=s(De);We=r(Eo,"Likewise, if your "),_i=n(Eo,"CODE",{});var Aa=s(_i);yn=r(Aa,"NewModel"),Aa.forEach(t),B6=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var sk=s(Ln);xn=r(sk,"PreTrainedModel"),sk.forEach(t),I6=r(Eo,`, make sure its
`),ui=n(Eo,"CODE",{});var Ff=s(ui);$n=r(Ff,"config_class"),Ff.forEach(t),N6=r(Eo,` attribute is set to the same class you use when registering the model (here
`),bi=n(Eo,"CODE",{});var lk=s(bi);vf=r(lk,"NewModelConfig"),lk.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,gi),e(gi,uf),e(g,tt),e(g,hi),e(hi,pi),e(g,P6),b(Qe,bf,Ae),b(Qe,De,Ae),e(De,We),e(De,_i),e(_i,yn),e(De,B6),e(De,Ln),e(Ln,xn),e(De,I6),e(De,ui),e(ui,$n),e(De,N6),e(De,bi),e(bi,vf),e(De,wa)},d(Qe){Qe&&t(g),Qe&&t(bf),Qe&&t(De)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function SSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RSt(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function PSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ISt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function USt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ERt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ARt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Rt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ORt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function URt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZRt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ePt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Pt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CPt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wPt(L){let g,v,p,m,_,d,h,Mo,gi,uf,tt,hi,pi,P6,bf,De,We,_i,yn,B6,Ln,xn,I6,ui,$n,N6,bi,vf,wa,Qe,Ae,tk,vi,ak,nk,Eo,Aa,sk,Ff,lk,eVe,Vqe,Fi,Tf,$oe,q6,oVe,koe,rVe,Xqe,kn,tVe,Soe,aVe,nVe,Roe,sVe,lVe,zqe,j6,Wqe,ik,iVe,Qqe,Mf,Hqe,Ti,Ef,Poe,D6,dVe,Boe,cVe,Uqe,Co,G6,fVe,O6,mVe,dk,gVe,hVe,pVe,V6,_Ve,Ioe,uVe,bVe,vVe,Er,X6,FVe,Noe,TVe,MVe,Mi,EVe,qoe,CVe,wVe,joe,AVe,yVe,LVe,A,Cf,Doe,xVe,$Ve,ck,kVe,SVe,RVe,wf,Goe,PVe,BVe,fk,IVe,NVe,qVe,Af,Ooe,jVe,DVe,mk,GVe,OVe,VVe,yf,Voe,XVe,zVe,gk,WVe,QVe,HVe,Lf,Xoe,UVe,JVe,hk,YVe,KVe,ZVe,xf,zoe,eXe,oXe,pk,rXe,tXe,aXe,$f,Woe,nXe,sXe,_k,lXe,iXe,dXe,kf,Qoe,cXe,fXe,uk,mXe,gXe,hXe,Sf,Hoe,pXe,_Xe,bk,uXe,bXe,vXe,Rf,Uoe,FXe,TXe,vk,MXe,EXe,CXe,Pf,Joe,wXe,AXe,Fk,yXe,LXe,xXe,Bf,Yoe,$Xe,kXe,Tk,SXe,RXe,PXe,If,Koe,BXe,IXe,Mk,NXe,qXe,jXe,Nf,Zoe,DXe,GXe,Ek,OXe,VXe,XXe,qf,ere,zXe,WXe,Ck,QXe,HXe,UXe,jf,ore,JXe,YXe,wk,KXe,ZXe,eze,Df,rre,oze,rze,Ak,tze,aze,nze,Gf,tre,sze,lze,yk,ize,dze,cze,Of,are,fze,mze,Lk,gze,hze,pze,Vf,nre,_ze,uze,xk,bze,vze,Fze,Xf,sre,Tze,Mze,$k,Eze,Cze,wze,zf,lre,Aze,yze,kk,Lze,xze,$ze,Wf,ire,kze,Sze,Sk,Rze,Pze,Bze,Qf,dre,Ize,Nze,Rk,qze,jze,Dze,Hf,cre,Gze,Oze,Pk,Vze,Xze,zze,Uf,fre,Wze,Qze,Bk,Hze,Uze,Jze,Jf,mre,Yze,Kze,Ik,Zze,eWe,oWe,Yf,gre,rWe,tWe,Nk,aWe,nWe,sWe,Kf,hre,lWe,iWe,qk,dWe,cWe,fWe,Zf,pre,mWe,gWe,jk,hWe,pWe,_We,em,_re,uWe,bWe,Dk,vWe,FWe,TWe,om,ure,MWe,EWe,Gk,CWe,wWe,AWe,rm,bre,yWe,LWe,Ok,xWe,$We,kWe,tm,vre,SWe,RWe,Vk,PWe,BWe,IWe,am,Fre,NWe,qWe,Xk,jWe,DWe,GWe,nm,Tre,OWe,VWe,zk,XWe,zWe,WWe,sm,Mre,QWe,HWe,Wk,UWe,JWe,YWe,lm,Ere,KWe,ZWe,Qk,eQe,oQe,rQe,im,Cre,tQe,aQe,Hk,nQe,sQe,lQe,dm,wre,iQe,dQe,Uk,cQe,fQe,mQe,cm,Are,gQe,hQe,Jk,pQe,_Qe,uQe,fm,yre,bQe,vQe,Yk,FQe,TQe,MQe,mm,Lre,EQe,CQe,Kk,wQe,AQe,yQe,gm,xre,LQe,xQe,Zk,$Qe,kQe,SQe,hm,$re,RQe,PQe,eS,BQe,IQe,NQe,pm,kre,qQe,jQe,oS,DQe,GQe,OQe,_m,Sre,VQe,XQe,rS,zQe,WQe,QQe,um,Rre,HQe,UQe,tS,JQe,YQe,KQe,bm,Pre,ZQe,eHe,aS,oHe,rHe,tHe,vm,Bre,aHe,nHe,nS,sHe,lHe,iHe,Fm,Ire,dHe,cHe,sS,fHe,mHe,gHe,Tm,Nre,hHe,pHe,lS,_He,uHe,bHe,Mm,qre,vHe,FHe,iS,THe,MHe,EHe,Em,jre,CHe,wHe,dS,AHe,yHe,LHe,Cm,Dre,xHe,$He,cS,kHe,SHe,RHe,wm,Gre,PHe,BHe,fS,IHe,NHe,qHe,Am,Ore,jHe,DHe,mS,GHe,OHe,VHe,ym,Vre,XHe,zHe,gS,WHe,QHe,HHe,Lm,Xre,UHe,JHe,hS,YHe,KHe,ZHe,xm,zre,eUe,oUe,pS,rUe,tUe,aUe,$m,Wre,nUe,sUe,_S,lUe,iUe,dUe,km,Qre,cUe,fUe,uS,mUe,gUe,hUe,Sm,Hre,pUe,_Ue,bS,uUe,bUe,vUe,Rm,Ure,FUe,TUe,vS,MUe,EUe,CUe,Pm,Jre,wUe,AUe,FS,yUe,LUe,xUe,Bm,Yre,$Ue,kUe,TS,SUe,RUe,PUe,Im,Kre,BUe,IUe,MS,NUe,qUe,jUe,Nm,Zre,DUe,GUe,ES,OUe,VUe,XUe,qm,ete,zUe,WUe,CS,QUe,HUe,UUe,jm,ote,JUe,YUe,wS,KUe,ZUe,eJe,Dm,rte,oJe,rJe,AS,tJe,aJe,nJe,Gm,tte,sJe,lJe,yS,iJe,dJe,cJe,Om,ate,fJe,mJe,LS,gJe,hJe,pJe,Vm,nte,_Je,uJe,xS,bJe,vJe,FJe,Xm,ste,TJe,MJe,$S,EJe,CJe,wJe,zm,lte,AJe,yJe,kS,LJe,xJe,$Je,Wm,ite,kJe,SJe,SS,RJe,PJe,BJe,Qm,dte,IJe,NJe,RS,qJe,jJe,DJe,Hm,cte,GJe,OJe,PS,VJe,XJe,zJe,Um,fte,WJe,QJe,BS,HJe,UJe,JJe,Jm,mte,YJe,KJe,IS,ZJe,eYe,oYe,Ym,gte,rYe,tYe,NS,aYe,nYe,sYe,Km,hte,lYe,iYe,qS,dYe,cYe,fYe,Zm,pte,mYe,gYe,jS,hYe,pYe,_Ye,eg,_te,uYe,bYe,DS,vYe,FYe,TYe,og,ute,MYe,EYe,GS,CYe,wYe,AYe,rg,bte,yYe,LYe,OS,xYe,$Ye,kYe,tg,vte,SYe,RYe,VS,PYe,BYe,IYe,ag,Fte,NYe,qYe,XS,jYe,DYe,GYe,ng,Tte,OYe,VYe,zS,XYe,zYe,WYe,sg,Mte,QYe,HYe,WS,UYe,JYe,YYe,lg,Ete,KYe,ZYe,QS,eKe,oKe,rKe,ig,Cte,tKe,aKe,HS,nKe,sKe,lKe,dg,wte,iKe,dKe,US,cKe,fKe,mKe,cg,Ate,gKe,hKe,JS,pKe,_Ke,uKe,fg,yte,bKe,vKe,YS,FKe,TKe,MKe,mg,Lte,EKe,CKe,KS,wKe,AKe,yKe,gg,xte,LKe,xKe,ZS,$Ke,kKe,SKe,hg,$te,RKe,PKe,eR,BKe,IKe,NKe,pg,kte,qKe,jKe,oR,DKe,GKe,OKe,_g,Ste,VKe,XKe,rR,zKe,WKe,QKe,ug,Rte,HKe,UKe,tR,JKe,YKe,KKe,bg,Pte,ZKe,eZe,aR,oZe,rZe,tZe,vg,Bte,aZe,nZe,nR,sZe,lZe,iZe,Fg,Ite,dZe,cZe,sR,fZe,mZe,gZe,Tg,Nte,hZe,pZe,lR,_Ze,uZe,bZe,Mg,qte,vZe,FZe,iR,TZe,MZe,EZe,Eg,jte,CZe,wZe,dR,AZe,yZe,LZe,Cg,Dte,xZe,$Ze,cR,kZe,SZe,RZe,wg,Gte,PZe,BZe,fR,IZe,NZe,qZe,Ag,jZe,yg,z6,DZe,Ote,GZe,Jqe,Ei,Lg,Vte,W6,OZe,Xte,VZe,Yqe,wo,Q6,XZe,H6,zZe,mR,WZe,QZe,HZe,U6,UZe,zte,JZe,YZe,KZe,Cr,J6,ZZe,Wte,eeo,oeo,ya,reo,Qte,teo,aeo,Hte,neo,seo,Ute,leo,ieo,deo,k,Sn,Jte,ceo,feo,gR,meo,geo,hR,heo,peo,_eo,Rn,Yte,ueo,beo,pR,veo,Feo,_R,Teo,Meo,Eeo,Pn,Kte,Ceo,weo,uR,Aeo,yeo,bR,Leo,xeo,$eo,xg,Zte,keo,Seo,vR,Reo,Peo,Beo,Bn,eae,Ieo,Neo,FR,qeo,jeo,TR,Deo,Geo,Oeo,$g,oae,Veo,Xeo,MR,zeo,Weo,Qeo,kg,rae,Heo,Ueo,ER,Jeo,Yeo,Keo,Sg,tae,Zeo,eoo,CR,ooo,roo,too,In,aae,aoo,noo,wR,soo,loo,AR,ioo,doo,coo,Nn,nae,foo,moo,yR,goo,hoo,LR,poo,_oo,uoo,qn,sae,boo,voo,xR,Foo,Too,$R,Moo,Eoo,Coo,Rg,lae,woo,Aoo,kR,yoo,Loo,xoo,Pg,iae,$oo,koo,SR,Soo,Roo,Poo,jn,dae,Boo,Ioo,RR,Noo,qoo,PR,joo,Doo,Goo,Bg,cae,Ooo,Voo,BR,Xoo,zoo,Woo,Dn,fae,Qoo,Hoo,IR,Uoo,Joo,NR,Yoo,Koo,Zoo,Gn,mae,ero,oro,qR,rro,tro,jR,aro,nro,sro,On,gae,lro,iro,DR,dro,cro,GR,fro,mro,gro,Ig,hae,hro,pro,OR,_ro,uro,bro,Vn,pae,vro,Fro,VR,Tro,Mro,XR,Ero,Cro,wro,Xn,_ae,Aro,yro,zR,Lro,xro,WR,$ro,kro,Sro,zn,uae,Rro,Pro,QR,Bro,Iro,HR,Nro,qro,jro,Wn,bae,Dro,Gro,UR,Oro,Vro,JR,Xro,zro,Wro,Qn,vae,Qro,Hro,YR,Uro,Jro,KR,Yro,Kro,Zro,Hn,Fae,eto,oto,ZR,rto,tto,eP,ato,nto,sto,Ng,Tae,lto,ito,oP,dto,cto,fto,Un,Mae,mto,gto,rP,hto,pto,tP,_to,uto,bto,qg,Eae,vto,Fto,aP,Tto,Mto,Eto,Jn,Cae,Cto,wto,nP,Ato,yto,sP,Lto,xto,$to,Yn,wae,kto,Sto,lP,Rto,Pto,iP,Bto,Ito,Nto,Kn,Aae,qto,jto,dP,Dto,Gto,cP,Oto,Vto,Xto,jg,yae,zto,Wto,fP,Qto,Hto,Uto,Zn,Lae,Jto,Yto,mP,Kto,Zto,gP,eao,oao,rao,es,xae,tao,aao,hP,nao,sao,pP,lao,iao,dao,Dg,$ae,cao,fao,_P,mao,gao,hao,os,kae,pao,_ao,uP,uao,bao,bP,vao,Fao,Tao,rs,Sae,Mao,Eao,vP,Cao,wao,FP,Aao,yao,Lao,ts,Rae,xao,$ao,TP,kao,Sao,MP,Rao,Pao,Bao,as,Pae,Iao,Nao,EP,qao,jao,CP,Dao,Gao,Oao,ns,Bae,Vao,Xao,wP,zao,Wao,AP,Qao,Hao,Uao,ss,Iae,Jao,Yao,yP,Kao,Zao,LP,eno,ono,rno,ls,Nae,tno,ano,xP,nno,sno,$P,lno,ino,dno,Gg,qae,cno,fno,kP,mno,gno,hno,is,jae,pno,_no,SP,uno,bno,RP,vno,Fno,Tno,Og,Dae,Mno,Eno,PP,Cno,wno,Ano,Vg,Gae,yno,Lno,BP,xno,$no,kno,ds,Oae,Sno,Rno,IP,Pno,Bno,NP,Ino,Nno,qno,cs,Vae,jno,Dno,qP,Gno,Ono,jP,Vno,Xno,zno,fs,Xae,Wno,Qno,DP,Hno,Uno,GP,Jno,Yno,Kno,Xg,zae,Zno,eso,OP,oso,rso,tso,ms,Wae,aso,nso,VP,sso,lso,XP,iso,dso,cso,gs,Qae,fso,mso,zP,gso,hso,WP,pso,_so,uso,hs,Hae,bso,vso,QP,Fso,Tso,HP,Mso,Eso,Cso,ps,Uae,wso,Aso,UP,yso,Lso,JP,xso,$so,kso,_s,Jae,Sso,Rso,YP,Pso,Bso,KP,Iso,Nso,qso,zg,Yae,jso,Dso,ZP,Gso,Oso,Vso,us,Kae,Xso,zso,eB,Wso,Qso,oB,Hso,Uso,Jso,Wg,Zae,Yso,Kso,rB,Zso,elo,olo,Qg,ene,rlo,tlo,tB,alo,nlo,slo,Hg,one,llo,ilo,aB,dlo,clo,flo,Ug,rne,mlo,glo,nB,hlo,plo,_lo,bs,tne,ulo,blo,sB,vlo,Flo,lB,Tlo,Mlo,Elo,Jg,ane,Clo,wlo,iB,Alo,ylo,Llo,vs,nne,xlo,$lo,dB,klo,Slo,cB,Rlo,Plo,Blo,Fs,sne,Ilo,Nlo,fB,qlo,jlo,mB,Dlo,Glo,Olo,Ts,lne,Vlo,Xlo,gB,zlo,Wlo,hB,Qlo,Hlo,Ulo,Ms,ine,Jlo,Ylo,pB,Klo,Zlo,_B,eio,oio,rio,Es,dne,tio,aio,uB,nio,sio,bB,lio,iio,dio,Cs,cne,cio,fio,vB,mio,gio,FB,hio,pio,_io,Yg,fne,uio,bio,TB,vio,Fio,Tio,Kg,mne,Mio,Eio,MB,Cio,wio,Aio,ws,gne,yio,Lio,EB,xio,$io,CB,kio,Sio,Rio,As,hne,Pio,Bio,wB,Iio,Nio,AB,qio,jio,Dio,ys,pne,Gio,Oio,yB,Vio,Xio,LB,zio,Wio,Qio,Zg,_ne,Hio,Uio,xB,Jio,Yio,Kio,eh,une,Zio,edo,$B,odo,rdo,tdo,oh,bne,ado,ndo,kB,sdo,ldo,ido,Ls,vne,ddo,cdo,SB,fdo,mdo,RB,gdo,hdo,pdo,rh,Fne,_do,udo,PB,bdo,vdo,Fdo,th,Tne,Tdo,Mdo,BB,Edo,Cdo,wdo,ah,Mne,Ado,ydo,IB,Ldo,xdo,$do,xs,Ene,kdo,Sdo,NB,Rdo,Pdo,qB,Bdo,Ido,Ndo,nh,Cne,qdo,jdo,jB,Ddo,Gdo,Odo,sh,wne,Vdo,Xdo,DB,zdo,Wdo,Qdo,$s,Ane,Hdo,Udo,GB,Jdo,Ydo,OB,Kdo,Zdo,eco,ks,yne,oco,rco,VB,tco,aco,XB,nco,sco,lco,Ss,Lne,ico,dco,zB,cco,fco,WB,mco,gco,hco,Rs,xne,pco,_co,QB,uco,bco,HB,vco,Fco,Tco,lh,Mco,ih,Y6,Eco,$ne,Cco,Kqe,Ci,dh,kne,K6,wco,Sne,Aco,Zqe,Ao,Z6,yco,ey,Lco,UB,xco,$co,kco,oy,Sco,Rne,Rco,Pco,Bco,He,ry,Ico,Pne,Nco,qco,La,jco,Bne,Dco,Gco,Ine,Oco,Vco,Nne,Xco,zco,Wco,Y,ch,qne,Qco,Hco,JB,Uco,Jco,Yco,fh,jne,Kco,Zco,YB,efo,ofo,rfo,mh,Dne,tfo,afo,KB,nfo,sfo,lfo,gh,Gne,ifo,dfo,ZB,cfo,ffo,mfo,hh,One,gfo,hfo,eI,pfo,_fo,ufo,ph,Vne,bfo,vfo,oI,Ffo,Tfo,Mfo,_h,Xne,Efo,Cfo,rI,wfo,Afo,yfo,uh,zne,Lfo,xfo,tI,$fo,kfo,Sfo,bh,Wne,Rfo,Pfo,aI,Bfo,Ifo,Nfo,vh,Qne,qfo,jfo,nI,Dfo,Gfo,Ofo,Fh,Hne,Vfo,Xfo,sI,zfo,Wfo,Qfo,Th,Une,Hfo,Ufo,lI,Jfo,Yfo,Kfo,Mh,Jne,Zfo,emo,iI,omo,rmo,tmo,Eh,Yne,amo,nmo,dI,smo,lmo,imo,Ch,Kne,dmo,cmo,cI,fmo,mmo,gmo,wh,Zne,hmo,pmo,fI,_mo,umo,bmo,Ah,ese,vmo,Fmo,mI,Tmo,Mmo,Emo,yh,ose,Cmo,wmo,gI,Amo,ymo,Lmo,Lh,rse,xmo,$mo,hI,kmo,Smo,Rmo,xh,tse,Pmo,Bmo,pI,Imo,Nmo,qmo,$h,ase,jmo,Dmo,_I,Gmo,Omo,Vmo,kh,nse,Xmo,zmo,uI,Wmo,Qmo,Hmo,Sh,sse,Umo,Jmo,bI,Ymo,Kmo,Zmo,Rh,lse,ego,ogo,vI,rgo,tgo,ago,Ph,ise,ngo,sgo,FI,lgo,igo,dgo,Bh,dse,cgo,fgo,TI,mgo,ggo,hgo,Ih,cse,pgo,_go,MI,ugo,bgo,vgo,Nh,fse,Fgo,Tgo,EI,Mgo,Ego,Cgo,qh,mse,wgo,Ago,CI,ygo,Lgo,xgo,jh,gse,$go,kgo,wI,Sgo,Rgo,Pgo,Dh,Bgo,Gh,Igo,Oh,ty,Ngo,hse,qgo,eje,wi,Vh,pse,ay,jgo,_se,Dgo,oje,yo,ny,Ggo,sy,Ogo,AI,Vgo,Xgo,zgo,ly,Wgo,use,Qgo,Hgo,Ugo,Ue,iy,Jgo,bse,Ygo,Kgo,Ai,Zgo,vse,eho,oho,Fse,rho,tho,aho,he,Xh,Tse,nho,sho,yI,lho,iho,dho,zh,Mse,cho,fho,Ese,mho,gho,hho,Wh,Cse,pho,_ho,LI,uho,bho,vho,Qh,wse,Fho,Tho,xI,Mho,Eho,Cho,Hh,Ase,who,Aho,$I,yho,Lho,xho,Uh,yse,$ho,kho,kI,Sho,Rho,Pho,Jh,Lse,Bho,Iho,SI,Nho,qho,jho,Yh,xse,Dho,Gho,RI,Oho,Vho,Xho,Kh,$se,zho,Who,PI,Qho,Hho,Uho,Zh,kse,Jho,Yho,BI,Kho,Zho,epo,ep,Sse,opo,rpo,II,tpo,apo,npo,op,Rse,spo,lpo,NI,ipo,dpo,cpo,rp,Pse,fpo,mpo,qI,gpo,hpo,ppo,tp,Bse,_po,upo,jI,bpo,vpo,Fpo,ap,Ise,Tpo,Mpo,DI,Epo,Cpo,wpo,np,Nse,Apo,ypo,GI,Lpo,xpo,$po,sp,qse,kpo,Spo,OI,Rpo,Ppo,Bpo,lp,Ipo,ip,Npo,dp,dy,qpo,jse,jpo,rje,yi,cp,Dse,cy,Dpo,Gse,Gpo,tje,Lo,fy,Opo,Li,Vpo,VI,Xpo,zpo,XI,Wpo,Qpo,Hpo,my,Upo,Ose,Jpo,Ypo,Kpo,at,gy,Zpo,Vse,e_o,o_o,xi,r_o,Xse,t_o,a_o,zI,n_o,s_o,l_o,fp,i_o,Je,hy,d_o,zse,c_o,f_o,xa,m_o,Wse,g_o,h_o,Qse,p_o,__o,Hse,u_o,b_o,v_o,x,mp,Use,F_o,T_o,WI,M_o,E_o,C_o,gp,Jse,w_o,A_o,QI,y_o,L_o,x_o,hp,Yse,$_o,k_o,HI,S_o,R_o,P_o,pp,Kse,B_o,I_o,UI,N_o,q_o,j_o,_p,Zse,D_o,G_o,JI,O_o,V_o,X_o,up,ele,z_o,W_o,YI,Q_o,H_o,U_o,bp,ole,J_o,Y_o,KI,K_o,Z_o,euo,vp,rle,ouo,ruo,ZI,tuo,auo,nuo,Fp,tle,suo,luo,eN,iuo,duo,cuo,Tp,ale,fuo,muo,oN,guo,huo,puo,Mp,nle,_uo,uuo,rN,buo,vuo,Fuo,Ep,sle,Tuo,Muo,tN,Euo,Cuo,wuo,Cp,lle,Auo,yuo,aN,Luo,xuo,$uo,wp,ile,kuo,Suo,nN,Ruo,Puo,Buo,Ap,dle,Iuo,Nuo,sN,quo,juo,Duo,yp,cle,Guo,Ouo,lN,Vuo,Xuo,zuo,Lp,fle,Wuo,Quo,iN,Huo,Uuo,Juo,xp,mle,Yuo,Kuo,dN,Zuo,e2o,o2o,$p,gle,r2o,t2o,cN,a2o,n2o,s2o,kp,hle,l2o,i2o,fN,d2o,c2o,f2o,Sp,ple,m2o,g2o,mN,h2o,p2o,_2o,Rp,_le,u2o,b2o,gN,v2o,F2o,T2o,Pp,ule,M2o,E2o,hN,C2o,w2o,A2o,Bp,ble,y2o,L2o,pN,x2o,$2o,k2o,Ip,vle,S2o,R2o,_N,P2o,B2o,I2o,Np,Fle,N2o,q2o,uN,j2o,D2o,G2o,qp,Tle,O2o,V2o,bN,X2o,z2o,W2o,jp,Mle,Q2o,H2o,vN,U2o,J2o,Y2o,Dp,Ele,K2o,Z2o,FN,e1o,o1o,r1o,Gp,Cle,t1o,a1o,TN,n1o,s1o,l1o,Op,wle,i1o,d1o,MN,c1o,f1o,m1o,Vp,Ale,g1o,h1o,EN,p1o,_1o,u1o,Ps,yle,b1o,v1o,CN,F1o,T1o,wN,M1o,E1o,C1o,Xp,Lle,w1o,A1o,AN,y1o,L1o,x1o,zp,xle,$1o,k1o,yN,S1o,R1o,P1o,Wp,$le,B1o,I1o,LN,N1o,q1o,j1o,Qp,kle,D1o,G1o,xN,O1o,V1o,X1o,Hp,Sle,z1o,W1o,$N,Q1o,H1o,U1o,Up,Rle,J1o,Y1o,kN,K1o,Z1o,e7o,Jp,Ple,o7o,r7o,SN,t7o,a7o,n7o,Yp,Ble,s7o,l7o,RN,i7o,d7o,c7o,Kp,Ile,f7o,m7o,PN,g7o,h7o,p7o,Zp,Nle,_7o,u7o,BN,b7o,v7o,F7o,e_,qle,T7o,M7o,IN,E7o,C7o,w7o,o_,jle,A7o,y7o,NN,L7o,x7o,$7o,r_,Dle,k7o,S7o,qN,R7o,P7o,B7o,t_,Gle,I7o,N7o,jN,q7o,j7o,D7o,a_,Ole,G7o,O7o,DN,V7o,X7o,z7o,n_,Vle,W7o,Q7o,GN,H7o,U7o,J7o,s_,Xle,Y7o,K7o,ON,Z7o,ebo,obo,l_,zle,rbo,tbo,VN,abo,nbo,sbo,i_,Wle,lbo,ibo,XN,dbo,cbo,fbo,d_,Qle,mbo,gbo,zN,hbo,pbo,_bo,c_,Hle,ubo,bbo,WN,vbo,Fbo,Tbo,f_,Ule,Mbo,Ebo,QN,Cbo,wbo,Abo,m_,Jle,ybo,Lbo,HN,xbo,$bo,kbo,g_,Yle,Sbo,Rbo,UN,Pbo,Bbo,Ibo,h_,Kle,Nbo,qbo,JN,jbo,Dbo,Gbo,p_,Zle,Obo,Vbo,YN,Xbo,zbo,Wbo,__,eie,Qbo,Hbo,KN,Ubo,Jbo,Ybo,u_,oie,Kbo,Zbo,ZN,e4o,o4o,r4o,b_,rie,t4o,a4o,eq,n4o,s4o,l4o,v_,tie,i4o,d4o,oq,c4o,f4o,m4o,F_,aie,g4o,h4o,rq,p4o,_4o,u4o,T_,nie,b4o,v4o,tq,F4o,T4o,M4o,M_,sie,E4o,C4o,aq,w4o,A4o,y4o,E_,lie,L4o,x4o,nq,$4o,k4o,S4o,C_,iie,R4o,P4o,sq,B4o,I4o,N4o,w_,die,q4o,j4o,lq,D4o,G4o,O4o,A_,cie,V4o,X4o,iq,z4o,W4o,Q4o,y_,fie,H4o,U4o,dq,J4o,Y4o,K4o,L_,mie,Z4o,evo,cq,ovo,rvo,tvo,x_,gie,avo,nvo,fq,svo,lvo,ivo,$_,hie,dvo,cvo,mq,fvo,mvo,gvo,k_,pie,hvo,pvo,gq,_vo,uvo,bvo,S_,_ie,vvo,Fvo,hq,Tvo,Mvo,Evo,R_,uie,Cvo,wvo,pq,Avo,yvo,Lvo,P_,bie,xvo,$vo,_q,kvo,Svo,Rvo,B_,vie,Pvo,Bvo,uq,Ivo,Nvo,qvo,I_,Fie,jvo,Dvo,bq,Gvo,Ovo,Vvo,N_,Tie,Xvo,zvo,vq,Wvo,Qvo,Hvo,q_,Mie,Uvo,Jvo,Fq,Yvo,Kvo,Zvo,j_,Eie,eFo,oFo,Tq,rFo,tFo,aFo,D_,Cie,nFo,sFo,Mq,lFo,iFo,dFo,G_,wie,cFo,fFo,Eq,mFo,gFo,hFo,O_,Aie,pFo,_Fo,Cq,uFo,bFo,vFo,V_,yie,FFo,TFo,wq,MFo,EFo,CFo,X_,Lie,wFo,AFo,Aq,yFo,LFo,xFo,z_,xie,$Fo,kFo,yq,SFo,RFo,PFo,W_,$ie,BFo,IFo,Lq,NFo,qFo,jFo,Q_,kie,DFo,GFo,xq,OFo,VFo,XFo,H_,Sie,zFo,WFo,$q,QFo,HFo,UFo,U_,Rie,JFo,YFo,kq,KFo,ZFo,eTo,J_,Pie,oTo,rTo,Sq,tTo,aTo,nTo,Y_,Bie,sTo,lTo,Rq,iTo,dTo,cTo,K_,Iie,fTo,mTo,Pq,gTo,hTo,pTo,Z_,Nie,_To,uTo,Bq,bTo,vTo,FTo,eu,qie,TTo,MTo,Iq,ETo,CTo,wTo,ou,jie,ATo,yTo,Nq,LTo,xTo,$To,ru,Die,kTo,STo,qq,RTo,PTo,BTo,tu,Gie,ITo,NTo,jq,qTo,jTo,DTo,au,Oie,GTo,OTo,Dq,VTo,XTo,zTo,nu,Vie,WTo,QTo,Gq,HTo,UTo,JTo,su,YTo,Xie,KTo,ZTo,zie,eMo,oMo,lu,aje,$i,iu,Wie,py,rMo,Qie,tMo,nje,xo,_y,aMo,ki,nMo,Oq,sMo,lMo,Vq,iMo,dMo,cMo,uy,fMo,Hie,mMo,gMo,hMo,nt,by,pMo,Uie,_Mo,uMo,Si,bMo,Jie,vMo,FMo,Xq,TMo,MMo,EMo,du,CMo,Ye,vy,wMo,Yie,AMo,yMo,$a,LMo,Kie,xMo,$Mo,Zie,kMo,SMo,ede,RMo,PMo,BMo,G,cu,ode,IMo,NMo,zq,qMo,jMo,DMo,fu,rde,GMo,OMo,Wq,VMo,XMo,zMo,mu,tde,WMo,QMo,Qq,HMo,UMo,JMo,gu,ade,YMo,KMo,Hq,ZMo,eEo,oEo,hu,nde,rEo,tEo,Uq,aEo,nEo,sEo,pu,sde,lEo,iEo,Jq,dEo,cEo,fEo,_u,lde,mEo,gEo,Yq,hEo,pEo,_Eo,uu,ide,uEo,bEo,Kq,vEo,FEo,TEo,bu,dde,MEo,EEo,Zq,CEo,wEo,AEo,vu,cde,yEo,LEo,ej,xEo,$Eo,kEo,Fu,fde,SEo,REo,oj,PEo,BEo,IEo,Tu,mde,NEo,qEo,rj,jEo,DEo,GEo,Mu,gde,OEo,VEo,tj,XEo,zEo,WEo,Eu,hde,QEo,HEo,aj,UEo,JEo,YEo,Cu,pde,KEo,ZEo,nj,eCo,oCo,rCo,wu,_de,tCo,aCo,sj,nCo,sCo,lCo,Au,ude,iCo,dCo,lj,cCo,fCo,mCo,yu,bde,gCo,hCo,ij,pCo,_Co,uCo,Lu,vde,bCo,vCo,dj,FCo,TCo,MCo,xu,Fde,ECo,CCo,cj,wCo,ACo,yCo,$u,Tde,LCo,xCo,fj,$Co,kCo,SCo,ku,Mde,RCo,PCo,mj,BCo,ICo,NCo,Su,Ede,qCo,jCo,gj,DCo,GCo,OCo,Ru,Cde,VCo,XCo,hj,zCo,WCo,QCo,Pu,wde,HCo,UCo,pj,JCo,YCo,KCo,Bu,Ade,ZCo,e5o,_j,o5o,r5o,t5o,Iu,yde,a5o,n5o,uj,s5o,l5o,i5o,Nu,Lde,d5o,c5o,bj,f5o,m5o,g5o,qu,xde,h5o,p5o,vj,_5o,u5o,b5o,ju,$de,v5o,F5o,Fj,T5o,M5o,E5o,Du,kde,C5o,w5o,Tj,A5o,y5o,L5o,Gu,Sde,x5o,$5o,Mj,k5o,S5o,R5o,Ou,Rde,P5o,B5o,Ej,I5o,N5o,q5o,Vu,Pde,j5o,D5o,Cj,G5o,O5o,V5o,Xu,Bde,X5o,z5o,wj,W5o,Q5o,H5o,zu,Ide,U5o,J5o,Aj,Y5o,K5o,Z5o,Wu,Nde,e3o,o3o,yj,r3o,t3o,a3o,Qu,qde,n3o,s3o,Lj,l3o,i3o,d3o,Hu,jde,c3o,f3o,xj,m3o,g3o,h3o,Uu,Dde,p3o,_3o,$j,u3o,b3o,v3o,Ju,Gde,F3o,T3o,kj,M3o,E3o,C3o,Yu,Ode,w3o,A3o,Sj,y3o,L3o,x3o,Ku,$3o,Vde,k3o,S3o,Xde,R3o,P3o,Zu,sje,Ri,e2,zde,Fy,B3o,Wde,I3o,lje,$o,Ty,N3o,Pi,q3o,Rj,j3o,D3o,Pj,G3o,O3o,V3o,My,X3o,Qde,z3o,W3o,Q3o,st,Ey,H3o,Hde,U3o,J3o,Bi,Y3o,Ude,K3o,Z3o,Bj,e0o,o0o,r0o,o2,t0o,Ke,Cy,a0o,Jde,n0o,s0o,ka,l0o,Yde,i0o,d0o,Kde,c0o,f0o,Zde,m0o,g0o,h0o,z,r2,ece,p0o,_0o,Ij,u0o,b0o,v0o,t2,oce,F0o,T0o,Nj,M0o,E0o,C0o,a2,rce,w0o,A0o,qj,y0o,L0o,x0o,n2,tce,$0o,k0o,jj,S0o,R0o,P0o,s2,ace,B0o,I0o,Dj,N0o,q0o,j0o,l2,nce,D0o,G0o,Gj,O0o,V0o,X0o,i2,sce,z0o,W0o,Oj,Q0o,H0o,U0o,d2,lce,J0o,Y0o,Vj,K0o,Z0o,ewo,c2,ice,owo,rwo,Xj,two,awo,nwo,f2,dce,swo,lwo,zj,iwo,dwo,cwo,m2,cce,fwo,mwo,Wj,gwo,hwo,pwo,g2,fce,_wo,uwo,Qj,bwo,vwo,Fwo,h2,mce,Two,Mwo,Hj,Ewo,Cwo,wwo,p2,gce,Awo,ywo,Uj,Lwo,xwo,$wo,_2,hce,kwo,Swo,Jj,Rwo,Pwo,Bwo,u2,pce,Iwo,Nwo,Yj,qwo,jwo,Dwo,b2,_ce,Gwo,Owo,Kj,Vwo,Xwo,zwo,v2,uce,Wwo,Qwo,Zj,Hwo,Uwo,Jwo,F2,bce,Ywo,Kwo,eD,Zwo,eAo,oAo,T2,vce,rAo,tAo,oD,aAo,nAo,sAo,M2,Fce,lAo,iAo,rD,dAo,cAo,fAo,E2,Tce,mAo,gAo,tD,hAo,pAo,_Ao,C2,Mce,uAo,bAo,aD,vAo,FAo,TAo,w2,Ece,MAo,EAo,nD,CAo,wAo,AAo,A2,Cce,yAo,LAo,sD,xAo,$Ao,kAo,y2,wce,SAo,RAo,lD,PAo,BAo,IAo,L2,Ace,NAo,qAo,iD,jAo,DAo,GAo,x2,yce,OAo,VAo,dD,XAo,zAo,WAo,$2,Lce,QAo,HAo,cD,UAo,JAo,YAo,k2,xce,KAo,ZAo,fD,e6o,o6o,r6o,S2,$ce,t6o,a6o,mD,n6o,s6o,l6o,R2,kce,i6o,d6o,gD,c6o,f6o,m6o,P2,Sce,g6o,h6o,hD,p6o,_6o,u6o,B2,Rce,b6o,v6o,pD,F6o,T6o,M6o,I2,Pce,E6o,C6o,_D,w6o,A6o,y6o,N2,Bce,L6o,x6o,uD,$6o,k6o,S6o,q2,Ice,R6o,P6o,bD,B6o,I6o,N6o,j2,q6o,Nce,j6o,D6o,qce,G6o,O6o,D2,ije,Ii,G2,jce,wy,V6o,Dce,X6o,dje,ko,Ay,z6o,Ni,W6o,vD,Q6o,H6o,FD,U6o,J6o,Y6o,yy,K6o,Gce,Z6o,eyo,oyo,lt,Ly,ryo,Oce,tyo,ayo,qi,nyo,Vce,syo,lyo,TD,iyo,dyo,cyo,O2,fyo,Ze,xy,myo,Xce,gyo,hyo,Sa,pyo,zce,_yo,uyo,Wce,byo,vyo,Qce,Fyo,Tyo,Myo,W,V2,Hce,Eyo,Cyo,MD,wyo,Ayo,yyo,X2,Uce,Lyo,xyo,ED,$yo,kyo,Syo,z2,Jce,Ryo,Pyo,CD,Byo,Iyo,Nyo,W2,Yce,qyo,jyo,wD,Dyo,Gyo,Oyo,Q2,Kce,Vyo,Xyo,AD,zyo,Wyo,Qyo,H2,Zce,Hyo,Uyo,yD,Jyo,Yyo,Kyo,U2,efe,Zyo,eLo,LD,oLo,rLo,tLo,J2,ofe,aLo,nLo,xD,sLo,lLo,iLo,Y2,rfe,dLo,cLo,$D,fLo,mLo,gLo,K2,tfe,hLo,pLo,kD,_Lo,uLo,bLo,Z2,afe,vLo,FLo,SD,TLo,MLo,ELo,e1,nfe,CLo,wLo,RD,ALo,yLo,LLo,o1,sfe,xLo,$Lo,PD,kLo,SLo,RLo,r1,lfe,PLo,BLo,BD,ILo,NLo,qLo,t1,ife,jLo,DLo,ID,GLo,OLo,VLo,a1,dfe,XLo,zLo,ND,WLo,QLo,HLo,n1,cfe,ULo,JLo,qD,YLo,KLo,ZLo,s1,ffe,e8o,o8o,jD,r8o,t8o,a8o,l1,mfe,n8o,s8o,DD,l8o,i8o,d8o,i1,gfe,c8o,f8o,GD,m8o,g8o,h8o,d1,hfe,p8o,_8o,OD,u8o,b8o,v8o,c1,pfe,F8o,T8o,VD,M8o,E8o,C8o,f1,_fe,w8o,A8o,XD,y8o,L8o,x8o,m1,ufe,$8o,k8o,zD,S8o,R8o,P8o,g1,bfe,B8o,I8o,WD,N8o,q8o,j8o,h1,vfe,D8o,G8o,QD,O8o,V8o,X8o,p1,Ffe,z8o,W8o,HD,Q8o,H8o,U8o,_1,Tfe,J8o,Y8o,UD,K8o,Z8o,e9o,u1,Mfe,o9o,r9o,JD,t9o,a9o,n9o,b1,Efe,s9o,l9o,YD,i9o,d9o,c9o,v1,Cfe,f9o,m9o,KD,g9o,h9o,p9o,F1,wfe,_9o,u9o,Afe,b9o,v9o,F9o,T1,yfe,T9o,M9o,ZD,E9o,C9o,w9o,M1,Lfe,A9o,y9o,eG,L9o,x9o,$9o,E1,xfe,k9o,S9o,oG,R9o,P9o,B9o,C1,$fe,I9o,N9o,rG,q9o,j9o,D9o,w1,G9o,kfe,O9o,V9o,Sfe,X9o,z9o,A1,cje,ji,y1,Rfe,$y,W9o,Pfe,Q9o,fje,So,ky,H9o,Di,U9o,tG,J9o,Y9o,aG,K9o,Z9o,exo,Sy,oxo,Bfe,rxo,txo,axo,it,Ry,nxo,Ife,sxo,lxo,Gi,ixo,Nfe,dxo,cxo,nG,fxo,mxo,gxo,L1,hxo,eo,Py,pxo,qfe,_xo,uxo,Ra,bxo,jfe,vxo,Fxo,Dfe,Txo,Mxo,Gfe,Exo,Cxo,wxo,_e,x1,Ofe,Axo,yxo,sG,Lxo,xxo,$xo,$1,Vfe,kxo,Sxo,lG,Rxo,Pxo,Bxo,k1,Xfe,Ixo,Nxo,iG,qxo,jxo,Dxo,S1,zfe,Gxo,Oxo,dG,Vxo,Xxo,zxo,R1,Wfe,Wxo,Qxo,cG,Hxo,Uxo,Jxo,P1,Qfe,Yxo,Kxo,fG,Zxo,e$o,o$o,B1,Hfe,r$o,t$o,mG,a$o,n$o,s$o,I1,Ufe,l$o,i$o,gG,d$o,c$o,f$o,N1,Jfe,m$o,g$o,hG,h$o,p$o,_$o,q1,Yfe,u$o,b$o,pG,v$o,F$o,T$o,j1,Kfe,M$o,E$o,_G,C$o,w$o,A$o,D1,Zfe,y$o,L$o,uG,x$o,$$o,k$o,G1,eme,S$o,R$o,bG,P$o,B$o,I$o,O1,ome,N$o,q$o,vG,j$o,D$o,G$o,V1,rme,O$o,V$o,FG,X$o,z$o,W$o,X1,tme,Q$o,H$o,TG,U$o,J$o,Y$o,z1,K$o,ame,Z$o,eko,nme,oko,rko,W1,mje,Oi,Q1,sme,By,tko,lme,ako,gje,Ro,Iy,nko,Vi,sko,MG,lko,iko,EG,dko,cko,fko,Ny,mko,ime,gko,hko,pko,dt,qy,_ko,dme,uko,bko,Xi,vko,cme,Fko,Tko,CG,Mko,Eko,Cko,H1,wko,oo,jy,Ako,fme,yko,Lko,Pa,xko,mme,$ko,kko,gme,Sko,Rko,hme,Pko,Bko,Iko,q,U1,pme,Nko,qko,wG,jko,Dko,Gko,J1,_me,Oko,Vko,AG,Xko,zko,Wko,Y1,ume,Qko,Hko,yG,Uko,Jko,Yko,K1,bme,Kko,Zko,LG,eSo,oSo,rSo,Z1,vme,tSo,aSo,xG,nSo,sSo,lSo,e7,Fme,iSo,dSo,$G,cSo,fSo,mSo,o7,Tme,gSo,hSo,kG,pSo,_So,uSo,r7,Mme,bSo,vSo,SG,FSo,TSo,MSo,t7,Eme,ESo,CSo,RG,wSo,ASo,ySo,a7,Cme,LSo,xSo,PG,$So,kSo,SSo,n7,wme,RSo,PSo,BG,BSo,ISo,NSo,s7,Ame,qSo,jSo,IG,DSo,GSo,OSo,l7,yme,VSo,XSo,NG,zSo,WSo,QSo,i7,Lme,HSo,USo,qG,JSo,YSo,KSo,d7,xme,ZSo,eRo,jG,oRo,rRo,tRo,c7,$me,aRo,nRo,DG,sRo,lRo,iRo,f7,kme,dRo,cRo,GG,fRo,mRo,gRo,m7,Sme,hRo,pRo,OG,_Ro,uRo,bRo,g7,Rme,vRo,FRo,VG,TRo,MRo,ERo,h7,Pme,CRo,wRo,XG,ARo,yRo,LRo,p7,Bme,xRo,$Ro,zG,kRo,SRo,RRo,_7,Ime,PRo,BRo,WG,IRo,NRo,qRo,u7,Nme,jRo,DRo,QG,GRo,ORo,VRo,b7,qme,XRo,zRo,HG,WRo,QRo,HRo,v7,jme,URo,JRo,UG,YRo,KRo,ZRo,F7,Dme,ePo,oPo,JG,rPo,tPo,aPo,T7,Gme,nPo,sPo,YG,lPo,iPo,dPo,M7,Ome,cPo,fPo,KG,mPo,gPo,hPo,E7,Vme,pPo,_Po,ZG,uPo,bPo,vPo,C7,Xme,FPo,TPo,eO,MPo,EPo,CPo,w7,zme,wPo,APo,oO,yPo,LPo,xPo,A7,Wme,$Po,kPo,rO,SPo,RPo,PPo,y7,Qme,BPo,IPo,tO,NPo,qPo,jPo,L7,Hme,DPo,GPo,aO,OPo,VPo,XPo,x7,Ume,zPo,WPo,nO,QPo,HPo,UPo,$7,Jme,JPo,YPo,sO,KPo,ZPo,eBo,k7,Yme,oBo,rBo,lO,tBo,aBo,nBo,S7,Kme,sBo,lBo,iO,iBo,dBo,cBo,R7,Zme,fBo,mBo,dO,gBo,hBo,pBo,P7,ege,_Bo,uBo,cO,bBo,vBo,FBo,B7,oge,TBo,MBo,fO,EBo,CBo,wBo,I7,rge,ABo,yBo,mO,LBo,xBo,$Bo,N7,tge,kBo,SBo,gO,RBo,PBo,BBo,q7,age,IBo,NBo,hO,qBo,jBo,DBo,j7,nge,GBo,OBo,pO,VBo,XBo,zBo,D7,sge,WBo,QBo,_O,HBo,UBo,JBo,G7,lge,YBo,KBo,uO,ZBo,eIo,oIo,O7,rIo,ige,tIo,aIo,dge,nIo,sIo,V7,hje,zi,X7,cge,Dy,lIo,fge,iIo,pje,Po,Gy,dIo,Wi,cIo,bO,fIo,mIo,vO,gIo,hIo,pIo,Oy,_Io,mge,uIo,bIo,vIo,ct,Vy,FIo,gge,TIo,MIo,Qi,EIo,hge,CIo,wIo,FO,AIo,yIo,LIo,z7,xIo,ro,Xy,$Io,pge,kIo,SIo,Ba,RIo,_ge,PIo,BIo,uge,IIo,NIo,bge,qIo,jIo,DIo,K,W7,vge,GIo,OIo,TO,VIo,XIo,zIo,Q7,Fge,WIo,QIo,MO,HIo,UIo,JIo,H7,Tge,YIo,KIo,EO,ZIo,eNo,oNo,U7,Mge,rNo,tNo,CO,aNo,nNo,sNo,J7,Ege,lNo,iNo,wO,dNo,cNo,fNo,Y7,Cge,mNo,gNo,AO,hNo,pNo,_No,K7,wge,uNo,bNo,yO,vNo,FNo,TNo,Z7,Age,MNo,ENo,LO,CNo,wNo,ANo,eb,yge,yNo,LNo,xO,xNo,$No,kNo,ob,Lge,SNo,RNo,$O,PNo,BNo,INo,rb,xge,NNo,qNo,kO,jNo,DNo,GNo,tb,$ge,ONo,VNo,SO,XNo,zNo,WNo,ab,kge,QNo,HNo,RO,UNo,JNo,YNo,nb,Sge,KNo,ZNo,PO,eqo,oqo,rqo,sb,Rge,tqo,aqo,BO,nqo,sqo,lqo,lb,Pge,iqo,dqo,IO,cqo,fqo,mqo,ib,Bge,gqo,hqo,NO,pqo,_qo,uqo,db,Ige,bqo,vqo,qO,Fqo,Tqo,Mqo,cb,Nge,Eqo,Cqo,jO,wqo,Aqo,yqo,fb,qge,Lqo,xqo,DO,$qo,kqo,Sqo,mb,jge,Rqo,Pqo,GO,Bqo,Iqo,Nqo,gb,Dge,qqo,jqo,OO,Dqo,Gqo,Oqo,hb,Gge,Vqo,Xqo,VO,zqo,Wqo,Qqo,pb,Oge,Hqo,Uqo,XO,Jqo,Yqo,Kqo,_b,Vge,Zqo,ejo,zO,ojo,rjo,tjo,ub,Xge,ajo,njo,WO,sjo,ljo,ijo,bb,zge,djo,cjo,QO,fjo,mjo,gjo,vb,Wge,hjo,pjo,HO,_jo,ujo,bjo,Fb,Qge,vjo,Fjo,UO,Tjo,Mjo,Ejo,Tb,Cjo,Hge,wjo,Ajo,Uge,yjo,Ljo,Mb,_je,Hi,Eb,Jge,zy,xjo,Yge,$jo,uje,Bo,Wy,kjo,Ui,Sjo,JO,Rjo,Pjo,YO,Bjo,Ijo,Njo,Qy,qjo,Kge,jjo,Djo,Gjo,ft,Hy,Ojo,Zge,Vjo,Xjo,Ji,zjo,ehe,Wjo,Qjo,KO,Hjo,Ujo,Jjo,Cb,Yjo,to,Uy,Kjo,ohe,Zjo,eDo,Ia,oDo,rhe,rDo,tDo,the,aDo,nDo,ahe,sDo,lDo,iDo,Yr,wb,nhe,dDo,cDo,ZO,fDo,mDo,gDo,Ab,she,hDo,pDo,eV,_Do,uDo,bDo,yb,lhe,vDo,FDo,oV,TDo,MDo,EDo,Lb,ihe,CDo,wDo,rV,ADo,yDo,LDo,xb,dhe,xDo,$Do,tV,kDo,SDo,RDo,$b,PDo,che,BDo,IDo,fhe,NDo,qDo,kb,bje,Yi,Sb,mhe,Jy,jDo,ghe,DDo,vje,Io,Yy,GDo,Ki,ODo,aV,VDo,XDo,nV,zDo,WDo,QDo,Ky,HDo,hhe,UDo,JDo,YDo,mt,Zy,KDo,phe,ZDo,eGo,Zi,oGo,_he,rGo,tGo,sV,aGo,nGo,sGo,Rb,lGo,ao,eL,iGo,uhe,dGo,cGo,Na,fGo,bhe,mGo,gGo,vhe,hGo,pGo,Fhe,_Go,uGo,bGo,U,Pb,The,vGo,FGo,lV,TGo,MGo,EGo,Bb,Mhe,CGo,wGo,iV,AGo,yGo,LGo,Ib,Ehe,xGo,$Go,dV,kGo,SGo,RGo,Nb,Che,PGo,BGo,cV,IGo,NGo,qGo,qb,whe,jGo,DGo,fV,GGo,OGo,VGo,jb,Ahe,XGo,zGo,mV,WGo,QGo,HGo,Db,yhe,UGo,JGo,gV,YGo,KGo,ZGo,Gb,Lhe,eOo,oOo,hV,rOo,tOo,aOo,Ob,xhe,nOo,sOo,pV,lOo,iOo,dOo,Vb,$he,cOo,fOo,_V,mOo,gOo,hOo,Xb,khe,pOo,_Oo,uV,uOo,bOo,vOo,zb,She,FOo,TOo,bV,MOo,EOo,COo,Wb,Rhe,wOo,AOo,vV,yOo,LOo,xOo,Qb,Phe,$Oo,kOo,FV,SOo,ROo,POo,Hb,Bhe,BOo,IOo,TV,NOo,qOo,jOo,Ub,Ihe,DOo,GOo,MV,OOo,VOo,XOo,Jb,Nhe,zOo,WOo,EV,QOo,HOo,UOo,Yb,qhe,JOo,YOo,CV,KOo,ZOo,eVo,Kb,jhe,oVo,rVo,wV,tVo,aVo,nVo,Zb,Dhe,sVo,lVo,AV,iVo,dVo,cVo,e4,Ghe,fVo,mVo,yV,gVo,hVo,pVo,o4,Ohe,_Vo,uVo,LV,bVo,vVo,FVo,r4,Vhe,TVo,MVo,xV,EVo,CVo,wVo,t4,Xhe,AVo,yVo,$V,LVo,xVo,$Vo,a4,zhe,kVo,SVo,kV,RVo,PVo,BVo,n4,Whe,IVo,NVo,SV,qVo,jVo,DVo,s4,Qhe,GVo,OVo,RV,VVo,XVo,zVo,l4,Hhe,WVo,QVo,PV,HVo,UVo,JVo,i4,Uhe,YVo,KVo,BV,ZVo,eXo,oXo,d4,Jhe,rXo,tXo,IV,aXo,nXo,sXo,c4,Yhe,lXo,iXo,NV,dXo,cXo,fXo,f4,Khe,mXo,gXo,qV,hXo,pXo,_Xo,m4,Zhe,uXo,bXo,jV,vXo,FXo,TXo,g4,epe,MXo,EXo,DV,CXo,wXo,AXo,h4,yXo,ope,LXo,xXo,rpe,$Xo,kXo,p4,Fje,ed,_4,tpe,oL,SXo,ape,RXo,Tje,No,rL,PXo,od,BXo,GV,IXo,NXo,OV,qXo,jXo,DXo,tL,GXo,npe,OXo,VXo,XXo,gt,aL,zXo,spe,WXo,QXo,rd,HXo,lpe,UXo,JXo,VV,YXo,KXo,ZXo,u4,ezo,no,nL,ozo,ipe,rzo,tzo,qa,azo,dpe,nzo,szo,cpe,lzo,izo,fpe,dzo,czo,fzo,V,b4,mpe,mzo,gzo,XV,hzo,pzo,_zo,v4,gpe,uzo,bzo,zV,vzo,Fzo,Tzo,F4,hpe,Mzo,Ezo,WV,Czo,wzo,Azo,T4,ppe,yzo,Lzo,QV,xzo,$zo,kzo,M4,_pe,Szo,Rzo,HV,Pzo,Bzo,Izo,E4,upe,Nzo,qzo,UV,jzo,Dzo,Gzo,C4,bpe,Ozo,Vzo,JV,Xzo,zzo,Wzo,w4,vpe,Qzo,Hzo,YV,Uzo,Jzo,Yzo,A4,Fpe,Kzo,Zzo,KV,eWo,oWo,rWo,y4,Tpe,tWo,aWo,ZV,nWo,sWo,lWo,L4,Mpe,iWo,dWo,eX,cWo,fWo,mWo,x4,Epe,gWo,hWo,oX,pWo,_Wo,uWo,$4,Cpe,bWo,vWo,rX,FWo,TWo,MWo,k4,wpe,EWo,CWo,tX,wWo,AWo,yWo,S4,Ape,LWo,xWo,aX,$Wo,kWo,SWo,R4,ype,RWo,PWo,nX,BWo,IWo,NWo,P4,Lpe,qWo,jWo,sX,DWo,GWo,OWo,B4,xpe,VWo,XWo,lX,zWo,WWo,QWo,I4,$pe,HWo,UWo,iX,JWo,YWo,KWo,N4,kpe,ZWo,eQo,dX,oQo,rQo,tQo,q4,Spe,aQo,nQo,cX,sQo,lQo,iQo,j4,Rpe,dQo,cQo,fX,fQo,mQo,gQo,D4,Ppe,hQo,pQo,mX,_Qo,uQo,bQo,G4,Bpe,vQo,FQo,gX,TQo,MQo,EQo,O4,Ipe,CQo,wQo,hX,AQo,yQo,LQo,V4,Npe,xQo,$Qo,pX,kQo,SQo,RQo,X4,qpe,PQo,BQo,_X,IQo,NQo,qQo,z4,jpe,jQo,DQo,uX,GQo,OQo,VQo,W4,Dpe,XQo,zQo,bX,WQo,QQo,HQo,Q4,Gpe,UQo,JQo,vX,YQo,KQo,ZQo,H4,Ope,eHo,oHo,FX,rHo,tHo,aHo,U4,Vpe,nHo,sHo,TX,lHo,iHo,dHo,J4,Xpe,cHo,fHo,MX,mHo,gHo,hHo,Y4,zpe,pHo,_Ho,EX,uHo,bHo,vHo,K4,Wpe,FHo,THo,CX,MHo,EHo,CHo,Z4,Qpe,wHo,AHo,wX,yHo,LHo,xHo,ev,Hpe,$Ho,kHo,AX,SHo,RHo,PHo,ov,Upe,BHo,IHo,yX,NHo,qHo,jHo,rv,Jpe,DHo,GHo,LX,OHo,VHo,XHo,tv,Ype,zHo,WHo,xX,QHo,HHo,UHo,av,JHo,Kpe,YHo,KHo,Zpe,ZHo,eUo,nv,Mje,td,sv,e_e,sL,oUo,o_e,rUo,Eje,qo,lL,tUo,ad,aUo,$X,nUo,sUo,kX,lUo,iUo,dUo,iL,cUo,r_e,fUo,mUo,gUo,ht,dL,hUo,t_e,pUo,_Uo,nd,uUo,a_e,bUo,vUo,SX,FUo,TUo,MUo,lv,EUo,so,cL,CUo,n_e,wUo,AUo,ja,yUo,s_e,LUo,xUo,l_e,$Uo,kUo,i_e,SUo,RUo,PUo,d_e,iv,c_e,BUo,IUo,RX,NUo,qUo,jUo,dv,DUo,f_e,GUo,OUo,m_e,VUo,XUo,cv,Cje,sd,fv,g_e,fL,zUo,h_e,WUo,wje,jo,mL,QUo,ld,HUo,PX,UUo,JUo,BX,YUo,KUo,ZUo,gL,eJo,p_e,oJo,rJo,tJo,pt,hL,aJo,__e,nJo,sJo,id,lJo,u_e,iJo,dJo,IX,cJo,fJo,mJo,mv,gJo,lo,pL,hJo,b_e,pJo,_Jo,Da,uJo,v_e,bJo,vJo,F_e,FJo,TJo,T_e,MJo,EJo,CJo,ve,gv,M_e,wJo,AJo,NX,yJo,LJo,xJo,hv,E_e,$Jo,kJo,qX,SJo,RJo,PJo,pv,C_e,BJo,IJo,jX,NJo,qJo,jJo,_v,w_e,DJo,GJo,DX,OJo,VJo,XJo,Bs,A_e,zJo,WJo,GX,QJo,HJo,OX,UJo,JJo,YJo,uv,y_e,KJo,ZJo,VX,eYo,oYo,rYo,Is,L_e,tYo,aYo,XX,nYo,sYo,zX,lYo,iYo,dYo,_t,x_e,cYo,fYo,WX,mYo,gYo,QX,hYo,pYo,HX,_Yo,uYo,bYo,bv,$_e,vYo,FYo,UX,TYo,MYo,EYo,vv,k_e,CYo,wYo,JX,AYo,yYo,LYo,Fv,S_e,xYo,$Yo,YX,kYo,SYo,RYo,Tv,R_e,PYo,BYo,KX,IYo,NYo,qYo,Mv,P_e,jYo,DYo,ZX,GYo,OYo,VYo,Ev,B_e,XYo,zYo,ez,WYo,QYo,HYo,Cv,I_e,UYo,JYo,oz,YYo,KYo,ZYo,wv,eKo,N_e,oKo,rKo,q_e,tKo,aKo,Av,Aje,dd,yv,j_e,_L,nKo,D_e,sKo,yje,Do,uL,lKo,cd,iKo,rz,dKo,cKo,tz,fKo,mKo,gKo,bL,hKo,G_e,pKo,_Ko,uKo,ut,vL,bKo,O_e,vKo,FKo,fd,TKo,V_e,MKo,EKo,az,CKo,wKo,AKo,Lv,yKo,io,FL,LKo,X_e,xKo,$Ko,Ga,kKo,z_e,SKo,RKo,W_e,PKo,BKo,Q_e,IKo,NKo,qKo,H_e,xv,U_e,jKo,DKo,nz,GKo,OKo,VKo,$v,XKo,J_e,zKo,WKo,Y_e,QKo,HKo,kv,Lje,md,Sv,K_e,TL,UKo,Z_e,JKo,xje,Go,ML,YKo,gd,KKo,sz,ZKo,eZo,lz,oZo,rZo,tZo,EL,aZo,eue,nZo,sZo,lZo,bt,CL,iZo,oue,dZo,cZo,hd,fZo,rue,mZo,gZo,iz,hZo,pZo,_Zo,Rv,uZo,co,wL,bZo,tue,vZo,FZo,Oa,TZo,aue,MZo,EZo,nue,CZo,wZo,sue,AZo,yZo,LZo,Se,Pv,lue,xZo,$Zo,dz,kZo,SZo,RZo,Bv,iue,PZo,BZo,cz,IZo,NZo,qZo,Iv,due,jZo,DZo,fz,GZo,OZo,VZo,Nv,cue,XZo,zZo,mz,WZo,QZo,HZo,qv,fue,UZo,JZo,gz,YZo,KZo,ZZo,jv,mue,eer,oer,hz,rer,ter,aer,Dv,gue,ner,ser,pz,ler,ier,der,Gv,hue,cer,fer,_z,mer,ger,her,Ov,pue,per,_er,uz,uer,ber,ver,Vv,Fer,_ue,Ter,Mer,uue,Eer,Cer,Xv,$je,pd,zv,bue,AL,wer,vue,Aer,kje,Oo,yL,yer,_d,Ler,bz,xer,$er,vz,ker,Ser,Rer,LL,Per,Fue,Ber,Ier,Ner,vt,xL,qer,Tue,jer,Der,ud,Ger,Mue,Oer,Ver,Fz,Xer,zer,Wer,Wv,Qer,fo,$L,Her,Eue,Uer,Jer,Va,Yer,Cue,Ker,Zer,wue,eor,oor,Aue,ror,tor,aor,Kr,Qv,yue,nor,sor,Tz,lor,ior,dor,Hv,Lue,cor,mor,Mz,gor,hor,por,Uv,xue,_or,uor,Ez,bor,vor,For,Jv,$ue,Tor,Mor,Cz,Eor,Cor,wor,Yv,kue,Aor,yor,wz,Lor,xor,$or,Kv,kor,Sue,Sor,Ror,Rue,Por,Bor,Zv,Sje,bd,eF,Pue,kL,Ior,Bue,Nor,Rje,Vo,SL,qor,vd,jor,Az,Dor,Gor,yz,Oor,Vor,Xor,RL,zor,Iue,Wor,Qor,Hor,Ft,PL,Uor,Nue,Jor,Yor,Fd,Kor,que,Zor,err,Lz,orr,rrr,trr,oF,arr,mo,BL,nrr,jue,srr,lrr,Xa,irr,Due,drr,crr,Gue,frr,mrr,Oue,grr,hrr,prr,Re,rF,Vue,_rr,urr,xz,brr,vrr,Frr,tF,Xue,Trr,Mrr,$z,Err,Crr,wrr,aF,zue,Arr,yrr,kz,Lrr,xrr,$rr,nF,Wue,krr,Srr,Sz,Rrr,Prr,Brr,sF,Que,Irr,Nrr,Rz,qrr,jrr,Drr,lF,Hue,Grr,Orr,Pz,Vrr,Xrr,zrr,iF,Uue,Wrr,Qrr,Bz,Hrr,Urr,Jrr,dF,Jue,Yrr,Krr,Iz,Zrr,etr,otr,cF,Yue,rtr,ttr,Nz,atr,ntr,str,fF,ltr,Kue,itr,dtr,Zue,ctr,ftr,mF,Pje,Td,gF,e2e,IL,mtr,o2e,gtr,Bje,Xo,NL,htr,Md,ptr,qz,_tr,utr,jz,btr,vtr,Ftr,qL,Ttr,r2e,Mtr,Etr,Ctr,Tt,jL,wtr,t2e,Atr,ytr,Ed,Ltr,a2e,xtr,$tr,Dz,ktr,Str,Rtr,hF,Ptr,go,DL,Btr,n2e,Itr,Ntr,za,qtr,s2e,jtr,Dtr,l2e,Gtr,Otr,i2e,Vtr,Xtr,ztr,GL,pF,d2e,Wtr,Qtr,Gz,Htr,Utr,Jtr,_F,c2e,Ytr,Ktr,Oz,Ztr,ear,oar,uF,rar,f2e,tar,aar,m2e,nar,sar,bF,Ije,Cd,vF,g2e,OL,lar,h2e,iar,Nje,zo,VL,dar,wd,car,Vz,far,mar,Xz,gar,har,par,XL,_ar,p2e,uar,bar,Far,Mt,zL,Tar,_2e,Mar,Ear,Ad,Car,u2e,war,Aar,zz,yar,Lar,xar,FF,$ar,ho,WL,kar,b2e,Sar,Rar,Wa,Par,v2e,Bar,Iar,F2e,Nar,qar,T2e,jar,Dar,Gar,Zr,TF,M2e,Oar,Var,Wz,Xar,zar,War,MF,E2e,Qar,Har,Qz,Uar,Jar,Yar,EF,C2e,Kar,Zar,Hz,enr,onr,rnr,CF,w2e,tnr,anr,Uz,nnr,snr,lnr,wF,A2e,inr,dnr,Jz,cnr,fnr,mnr,AF,gnr,y2e,hnr,pnr,L2e,_nr,unr,yF,qje,yd,LF,x2e,QL,bnr,$2e,vnr,jje,Wo,HL,Fnr,Ld,Tnr,Yz,Mnr,Enr,Kz,Cnr,wnr,Anr,UL,ynr,k2e,Lnr,xnr,$nr,Et,JL,knr,S2e,Snr,Rnr,xd,Pnr,R2e,Bnr,Inr,Zz,Nnr,qnr,jnr,xF,Dnr,po,YL,Gnr,P2e,Onr,Vnr,Qa,Xnr,B2e,znr,Wnr,I2e,Qnr,Hnr,N2e,Unr,Jnr,Ynr,$d,$F,q2e,Knr,Znr,eW,esr,osr,rsr,kF,j2e,tsr,asr,oW,nsr,ssr,lsr,SF,D2e,isr,dsr,rW,csr,fsr,msr,RF,gsr,G2e,hsr,psr,O2e,_sr,usr,PF,Dje,kd,BF,V2e,KL,bsr,X2e,vsr,Gje,Qo,ZL,Fsr,Sd,Tsr,tW,Msr,Esr,aW,Csr,wsr,Asr,e8,ysr,z2e,Lsr,xsr,$sr,Ct,o8,ksr,W2e,Ssr,Rsr,Rd,Psr,Q2e,Bsr,Isr,nW,Nsr,qsr,jsr,IF,Dsr,_o,r8,Gsr,H2e,Osr,Vsr,Ha,Xsr,U2e,zsr,Wsr,J2e,Qsr,Hsr,Y2e,Usr,Jsr,Ysr,t8,NF,K2e,Ksr,Zsr,sW,elr,olr,rlr,qF,Z2e,tlr,alr,lW,nlr,slr,llr,jF,ilr,e1e,dlr,clr,o1e,flr,mlr,DF,Oje,Pd,GF,r1e,a8,glr,t1e,hlr,Vje,Ho,n8,plr,Bd,_lr,iW,ulr,blr,dW,vlr,Flr,Tlr,s8,Mlr,a1e,Elr,Clr,wlr,wt,l8,Alr,n1e,ylr,Llr,Id,xlr,s1e,$lr,klr,cW,Slr,Rlr,Plr,OF,Blr,uo,i8,Ilr,l1e,Nlr,qlr,Ua,jlr,i1e,Dlr,Glr,d1e,Olr,Vlr,c1e,Xlr,zlr,Wlr,f1e,VF,m1e,Qlr,Hlr,fW,Ulr,Jlr,Ylr,XF,Klr,g1e,Zlr,eir,h1e,oir,rir,zF,Xje,Nd,WF,p1e,d8,tir,_1e,air,zje,Uo,c8,nir,qd,sir,mW,lir,iir,gW,dir,cir,fir,f8,mir,u1e,gir,hir,pir,At,m8,_ir,b1e,uir,bir,jd,vir,v1e,Fir,Tir,hW,Mir,Eir,Cir,QF,wir,bo,g8,Air,F1e,yir,Lir,Ja,xir,T1e,$ir,kir,M1e,Sir,Rir,E1e,Pir,Bir,Iir,Ya,HF,C1e,Nir,qir,pW,jir,Dir,Gir,UF,w1e,Oir,Vir,_W,Xir,zir,Wir,JF,A1e,Qir,Hir,uW,Uir,Jir,Yir,YF,y1e,Kir,Zir,bW,edr,odr,rdr,KF,tdr,L1e,adr,ndr,x1e,sdr,ldr,ZF,Wje,Dd,eT,$1e,h8,idr,k1e,ddr,Qje,Jo,p8,cdr,Gd,fdr,vW,mdr,gdr,FW,hdr,pdr,_dr,_8,udr,S1e,bdr,vdr,Fdr,yt,u8,Tdr,R1e,Mdr,Edr,Od,Cdr,P1e,wdr,Adr,TW,ydr,Ldr,xdr,oT,$dr,vo,b8,kdr,B1e,Sdr,Rdr,Ka,Pdr,I1e,Bdr,Idr,N1e,Ndr,qdr,q1e,jdr,Ddr,Gdr,j1e,rT,D1e,Odr,Vdr,MW,Xdr,zdr,Wdr,tT,Qdr,G1e,Hdr,Udr,O1e,Jdr,Ydr,aT,Hje,Vd,nT,V1e,v8,Kdr,X1e,Zdr,Uje,Yo,F8,ecr,Xd,ocr,EW,rcr,tcr,CW,acr,ncr,scr,T8,lcr,z1e,icr,dcr,ccr,Lt,M8,fcr,W1e,mcr,gcr,zd,hcr,Q1e,pcr,_cr,wW,ucr,bcr,vcr,sT,Fcr,wr,E8,Tcr,H1e,Mcr,Ecr,Za,Ccr,U1e,wcr,Acr,J1e,ycr,Lcr,Y1e,xcr,$cr,kcr,N,lT,K1e,Scr,Rcr,AW,Pcr,Bcr,Icr,iT,Z1e,Ncr,qcr,yW,jcr,Dcr,Gcr,dT,e7e,Ocr,Vcr,LW,Xcr,zcr,Wcr,cT,o7e,Qcr,Hcr,xW,Ucr,Jcr,Ycr,fT,r7e,Kcr,Zcr,$W,efr,ofr,rfr,mT,t7e,tfr,afr,kW,nfr,sfr,lfr,gT,a7e,ifr,dfr,SW,cfr,ffr,mfr,hT,n7e,gfr,hfr,RW,pfr,_fr,ufr,pT,s7e,bfr,vfr,PW,Ffr,Tfr,Mfr,_T,l7e,Efr,Cfr,BW,wfr,Afr,yfr,uT,i7e,Lfr,xfr,IW,$fr,kfr,Sfr,bT,d7e,Rfr,Pfr,NW,Bfr,Ifr,Nfr,vT,c7e,qfr,jfr,qW,Dfr,Gfr,Ofr,FT,f7e,Vfr,Xfr,jW,zfr,Wfr,Qfr,TT,m7e,Hfr,Ufr,DW,Jfr,Yfr,Kfr,MT,g7e,Zfr,emr,GW,omr,rmr,tmr,ET,h7e,amr,nmr,OW,smr,lmr,imr,Ns,p7e,dmr,cmr,VW,fmr,mmr,XW,gmr,hmr,pmr,CT,_7e,_mr,umr,zW,bmr,vmr,Fmr,wT,u7e,Tmr,Mmr,WW,Emr,Cmr,wmr,AT,b7e,Amr,ymr,QW,Lmr,xmr,$mr,yT,v7e,kmr,Smr,HW,Rmr,Pmr,Bmr,LT,F7e,Imr,Nmr,UW,qmr,jmr,Dmr,xT,T7e,Gmr,Omr,JW,Vmr,Xmr,zmr,$T,M7e,Wmr,Qmr,YW,Hmr,Umr,Jmr,kT,E7e,Ymr,Kmr,KW,Zmr,egr,ogr,ST,C7e,rgr,tgr,ZW,agr,ngr,sgr,RT,w7e,lgr,igr,eQ,dgr,cgr,fgr,PT,A7e,mgr,ggr,oQ,hgr,pgr,_gr,BT,y7e,ugr,bgr,rQ,vgr,Fgr,Tgr,IT,L7e,Mgr,Egr,tQ,Cgr,wgr,Agr,NT,x7e,ygr,Lgr,aQ,xgr,$gr,kgr,qT,$7e,Sgr,Rgr,nQ,Pgr,Bgr,Igr,jT,k7e,Ngr,qgr,sQ,jgr,Dgr,Ggr,DT,S7e,Ogr,Vgr,lQ,Xgr,zgr,Wgr,GT,R7e,Qgr,Hgr,iQ,Ugr,Jgr,Ygr,OT,P7e,Kgr,Zgr,dQ,ehr,ohr,rhr,VT,B7e,thr,ahr,cQ,nhr,shr,lhr,XT,I7e,ihr,dhr,fQ,chr,fhr,mhr,zT,N7e,ghr,hhr,mQ,phr,_hr,uhr,WT,q7e,bhr,vhr,gQ,Fhr,Thr,Mhr,QT,j7e,Ehr,Chr,hQ,whr,Ahr,yhr,HT,D7e,Lhr,xhr,pQ,$hr,khr,Shr,UT,G7e,Rhr,Phr,_Q,Bhr,Ihr,Nhr,JT,O7e,qhr,jhr,uQ,Dhr,Ghr,Ohr,YT,V7e,Vhr,Xhr,bQ,zhr,Whr,Qhr,KT,X7e,Hhr,Uhr,vQ,Jhr,Yhr,Khr,ZT,z7e,Zhr,epr,FQ,opr,rpr,tpr,eM,Jje,Wd,oM,W7e,C8,apr,Q7e,npr,Yje,Ko,w8,spr,Qd,lpr,TQ,ipr,dpr,MQ,cpr,fpr,mpr,A8,gpr,H7e,hpr,ppr,_pr,xt,y8,upr,U7e,bpr,vpr,Hd,Fpr,J7e,Tpr,Mpr,EQ,Epr,Cpr,wpr,rM,Apr,Ar,L8,ypr,Y7e,Lpr,xpr,en,$pr,K7e,kpr,Spr,Z7e,Rpr,Ppr,ebe,Bpr,Ipr,Npr,se,tM,obe,qpr,jpr,CQ,Dpr,Gpr,Opr,aM,rbe,Vpr,Xpr,wQ,zpr,Wpr,Qpr,nM,tbe,Hpr,Upr,AQ,Jpr,Ypr,Kpr,sM,abe,Zpr,e_r,yQ,o_r,r_r,t_r,lM,nbe,a_r,n_r,LQ,s_r,l_r,i_r,iM,sbe,d_r,c_r,xQ,f_r,m_r,g_r,dM,lbe,h_r,p_r,$Q,__r,u_r,b_r,cM,ibe,v_r,F_r,kQ,T_r,M_r,E_r,fM,dbe,C_r,w_r,SQ,A_r,y_r,L_r,mM,cbe,x_r,$_r,RQ,k_r,S_r,R_r,gM,fbe,P_r,B_r,PQ,I_r,N_r,q_r,hM,mbe,j_r,D_r,BQ,G_r,O_r,V_r,pM,gbe,X_r,z_r,IQ,W_r,Q_r,H_r,_M,hbe,U_r,J_r,NQ,Y_r,K_r,Z_r,uM,pbe,eur,our,qQ,rur,tur,aur,bM,_be,nur,sur,jQ,lur,iur,dur,vM,ube,cur,fur,DQ,mur,gur,hur,FM,bbe,pur,_ur,GQ,uur,bur,vur,TM,vbe,Fur,Tur,OQ,Mur,Eur,Cur,MM,Fbe,wur,Aur,VQ,yur,Lur,xur,EM,Tbe,$ur,kur,XQ,Sur,Rur,Pur,CM,Mbe,Bur,Iur,zQ,Nur,qur,jur,wM,Ebe,Dur,Gur,WQ,Our,Vur,Xur,AM,Kje,Ud,yM,Cbe,x8,zur,wbe,Wur,Zje,Zo,$8,Qur,Jd,Hur,QQ,Uur,Jur,HQ,Yur,Kur,Zur,k8,e2r,Abe,o2r,r2r,t2r,$t,S8,a2r,ybe,n2r,s2r,Yd,l2r,Lbe,i2r,d2r,UQ,c2r,f2r,m2r,LM,g2r,yr,R8,h2r,xbe,p2r,_2r,on,u2r,$be,b2r,v2r,kbe,F2r,T2r,Sbe,M2r,E2r,C2r,Me,xM,Rbe,w2r,A2r,JQ,y2r,L2r,x2r,$M,Pbe,$2r,k2r,YQ,S2r,R2r,P2r,kM,Bbe,B2r,I2r,KQ,N2r,q2r,j2r,SM,Ibe,D2r,G2r,ZQ,O2r,V2r,X2r,RM,Nbe,z2r,W2r,eH,Q2r,H2r,U2r,PM,qbe,J2r,Y2r,oH,K2r,Z2r,e1r,BM,jbe,o1r,r1r,rH,t1r,a1r,n1r,IM,Dbe,s1r,l1r,tH,i1r,d1r,c1r,NM,Gbe,f1r,m1r,aH,g1r,h1r,p1r,qM,Obe,_1r,u1r,nH,b1r,v1r,F1r,jM,Vbe,T1r,M1r,sH,E1r,C1r,w1r,DM,Xbe,A1r,y1r,lH,L1r,x1r,$1r,GM,zbe,k1r,S1r,iH,R1r,P1r,B1r,OM,eDe,Kd,VM,Wbe,P8,I1r,Qbe,N1r,oDe,er,B8,q1r,Zd,j1r,dH,D1r,G1r,cH,O1r,V1r,X1r,I8,z1r,Hbe,W1r,Q1r,H1r,kt,N8,U1r,Ube,J1r,Y1r,ec,K1r,Jbe,Z1r,e7r,fH,o7r,r7r,t7r,XM,a7r,Lr,q8,n7r,Ybe,s7r,l7r,rn,i7r,Kbe,d7r,c7r,Zbe,f7r,m7r,e4e,g7r,h7r,p7r,et,zM,o4e,_7r,u7r,mH,b7r,v7r,F7r,WM,r4e,T7r,M7r,gH,E7r,C7r,w7r,QM,t4e,A7r,y7r,hH,L7r,x7r,$7r,HM,a4e,k7r,S7r,pH,R7r,P7r,B7r,UM,n4e,I7r,N7r,_H,q7r,j7r,D7r,JM,rDe,oc,YM,s4e,j8,G7r,l4e,O7r,tDe,or,D8,V7r,rc,X7r,uH,z7r,W7r,bH,Q7r,H7r,U7r,G8,J7r,i4e,Y7r,K7r,Z7r,St,O8,ebr,d4e,obr,rbr,tc,tbr,c4e,abr,nbr,vH,sbr,lbr,ibr,KM,dbr,xr,V8,cbr,f4e,fbr,mbr,tn,gbr,m4e,hbr,pbr,g4e,_br,ubr,h4e,bbr,vbr,Fbr,ie,ZM,p4e,Tbr,Mbr,FH,Ebr,Cbr,wbr,eE,_4e,Abr,ybr,TH,Lbr,xbr,$br,oE,u4e,kbr,Sbr,MH,Rbr,Pbr,Bbr,rE,b4e,Ibr,Nbr,EH,qbr,jbr,Dbr,tE,v4e,Gbr,Obr,CH,Vbr,Xbr,zbr,aE,F4e,Wbr,Qbr,wH,Hbr,Ubr,Jbr,nE,T4e,Ybr,Kbr,AH,Zbr,e4r,o4r,sE,M4e,r4r,t4r,yH,a4r,n4r,s4r,lE,E4e,l4r,i4r,LH,d4r,c4r,f4r,iE,C4e,m4r,g4r,xH,h4r,p4r,_4r,dE,w4e,u4r,b4r,$H,v4r,F4r,T4r,cE,A4e,M4r,E4r,kH,C4r,w4r,A4r,fE,y4e,y4r,L4r,SH,x4r,$4r,k4r,mE,L4e,S4r,R4r,RH,P4r,B4r,I4r,gE,x4e,N4r,q4r,PH,j4r,D4r,G4r,hE,$4e,O4r,V4r,BH,X4r,z4r,W4r,pE,k4e,Q4r,H4r,IH,U4r,J4r,Y4r,_E,S4e,K4r,Z4r,NH,evr,ovr,rvr,uE,R4e,tvr,avr,qH,nvr,svr,lvr,bE,P4e,ivr,dvr,jH,cvr,fvr,mvr,vE,aDe,ac,FE,B4e,X8,gvr,I4e,hvr,nDe,rr,z8,pvr,nc,_vr,DH,uvr,bvr,GH,vvr,Fvr,Tvr,W8,Mvr,N4e,Evr,Cvr,wvr,Rt,Q8,Avr,q4e,yvr,Lvr,sc,xvr,j4e,$vr,kvr,OH,Svr,Rvr,Pvr,TE,Bvr,$r,H8,Ivr,D4e,Nvr,qvr,an,jvr,G4e,Dvr,Gvr,O4e,Ovr,Vvr,V4e,Xvr,zvr,Wvr,ye,ME,X4e,Qvr,Hvr,VH,Uvr,Jvr,Yvr,EE,z4e,Kvr,Zvr,XH,eFr,oFr,rFr,CE,W4e,tFr,aFr,zH,nFr,sFr,lFr,wE,Q4e,iFr,dFr,WH,cFr,fFr,mFr,AE,H4e,gFr,hFr,QH,pFr,_Fr,uFr,yE,U4e,bFr,vFr,HH,FFr,TFr,MFr,LE,J4e,EFr,CFr,UH,wFr,AFr,yFr,xE,Y4e,LFr,xFr,JH,$Fr,kFr,SFr,$E,K4e,RFr,PFr,YH,BFr,IFr,NFr,kE,Z4e,qFr,jFr,KH,DFr,GFr,OFr,SE,sDe,lc,RE,eve,U8,VFr,ove,XFr,lDe,tr,J8,zFr,ic,WFr,ZH,QFr,HFr,eU,UFr,JFr,YFr,Y8,KFr,rve,ZFr,eTr,oTr,Pt,K8,rTr,tve,tTr,aTr,dc,nTr,ave,sTr,lTr,oU,iTr,dTr,cTr,PE,fTr,kr,Z8,mTr,nve,gTr,hTr,nn,pTr,sve,_Tr,uTr,lve,bTr,vTr,ive,FTr,TTr,MTr,oe,BE,dve,ETr,CTr,rU,wTr,ATr,yTr,IE,cve,LTr,xTr,tU,$Tr,kTr,STr,NE,fve,RTr,PTr,aU,BTr,ITr,NTr,qE,mve,qTr,jTr,nU,DTr,GTr,OTr,jE,gve,VTr,XTr,sU,zTr,WTr,QTr,DE,hve,HTr,UTr,lU,JTr,YTr,KTr,GE,pve,ZTr,eMr,iU,oMr,rMr,tMr,OE,_ve,aMr,nMr,dU,sMr,lMr,iMr,VE,uve,dMr,cMr,cU,fMr,mMr,gMr,XE,bve,hMr,pMr,fU,_Mr,uMr,bMr,zE,vve,vMr,FMr,mU,TMr,MMr,EMr,WE,Fve,CMr,wMr,gU,AMr,yMr,LMr,QE,Tve,xMr,$Mr,hU,kMr,SMr,RMr,HE,Mve,PMr,BMr,pU,IMr,NMr,qMr,UE,Eve,jMr,DMr,_U,GMr,OMr,VMr,JE,Cve,XMr,zMr,uU,WMr,QMr,HMr,YE,wve,UMr,JMr,bU,YMr,KMr,ZMr,KE,Ave,eEr,oEr,vU,rEr,tEr,aEr,ZE,yve,nEr,sEr,FU,lEr,iEr,dEr,eC,Lve,cEr,fEr,TU,mEr,gEr,hEr,oC,xve,pEr,_Er,MU,uEr,bEr,vEr,rC,$ve,FEr,TEr,EU,MEr,EEr,CEr,tC,kve,wEr,AEr,CU,yEr,LEr,xEr,aC,Sve,$Er,kEr,wU,SEr,REr,PEr,nC,Rve,BEr,IEr,AU,NEr,qEr,jEr,sC,Pve,DEr,GEr,yU,OEr,VEr,XEr,lC,iDe,cc,iC,Bve,e9,zEr,Ive,WEr,dDe,ar,o9,QEr,fc,HEr,LU,UEr,JEr,xU,YEr,KEr,ZEr,r9,eCr,Nve,oCr,rCr,tCr,Bt,t9,aCr,qve,nCr,sCr,mc,lCr,jve,iCr,dCr,$U,cCr,fCr,mCr,dC,gCr,Sr,a9,hCr,Dve,pCr,_Cr,sn,uCr,Gve,bCr,vCr,Ove,FCr,TCr,Vve,MCr,ECr,CCr,pe,cC,Xve,wCr,ACr,kU,yCr,LCr,xCr,fC,zve,$Cr,kCr,SU,SCr,RCr,PCr,mC,Wve,BCr,ICr,RU,NCr,qCr,jCr,gC,Qve,DCr,GCr,PU,OCr,VCr,XCr,hC,Hve,zCr,WCr,BU,QCr,HCr,UCr,pC,Uve,JCr,YCr,IU,KCr,ZCr,e5r,_C,Jve,o5r,r5r,NU,t5r,a5r,n5r,uC,Yve,s5r,l5r,qU,i5r,d5r,c5r,bC,Kve,f5r,m5r,jU,g5r,h5r,p5r,vC,Zve,_5r,u5r,DU,b5r,v5r,F5r,FC,eFe,T5r,M5r,GU,E5r,C5r,w5r,TC,oFe,A5r,y5r,OU,L5r,x5r,$5r,MC,rFe,k5r,S5r,VU,R5r,P5r,B5r,EC,tFe,I5r,N5r,XU,q5r,j5r,D5r,CC,aFe,G5r,O5r,zU,V5r,X5r,z5r,wC,nFe,W5r,Q5r,WU,H5r,U5r,J5r,AC,sFe,Y5r,K5r,QU,Z5r,e3r,o3r,yC,cDe,gc,LC,lFe,n9,r3r,iFe,t3r,fDe,nr,s9,a3r,hc,n3r,HU,s3r,l3r,UU,i3r,d3r,c3r,l9,f3r,dFe,m3r,g3r,h3r,It,i9,p3r,cFe,_3r,u3r,pc,b3r,fFe,v3r,F3r,JU,T3r,M3r,E3r,xC,C3r,Rr,d9,w3r,mFe,A3r,y3r,ln,L3r,gFe,x3r,$3r,hFe,k3r,S3r,pFe,R3r,P3r,B3r,c9,$C,_Fe,I3r,N3r,YU,q3r,j3r,D3r,kC,uFe,G3r,O3r,KU,V3r,X3r,z3r,SC,mDe,_c,RC,bFe,f9,W3r,vFe,Q3r,gDe,sr,m9,H3r,uc,U3r,ZU,J3r,Y3r,eJ,K3r,Z3r,e0r,g9,o0r,FFe,r0r,t0r,a0r,Nt,h9,n0r,TFe,s0r,l0r,bc,i0r,MFe,d0r,c0r,oJ,f0r,m0r,g0r,PC,h0r,Pr,p9,p0r,EFe,_0r,u0r,dn,b0r,CFe,v0r,F0r,wFe,T0r,M0r,AFe,E0r,C0r,w0r,yFe,BC,LFe,A0r,y0r,rJ,L0r,x0r,$0r,IC,hDe,vc,NC,xFe,_9,k0r,$Fe,S0r,pDe,lr,u9,R0r,Fc,P0r,tJ,B0r,I0r,aJ,N0r,q0r,j0r,b9,D0r,kFe,G0r,O0r,V0r,qt,v9,X0r,SFe,z0r,W0r,Tc,Q0r,RFe,H0r,U0r,nJ,J0r,Y0r,K0r,qC,Z0r,Br,F9,ewr,PFe,owr,rwr,cn,twr,BFe,awr,nwr,IFe,swr,lwr,NFe,iwr,dwr,cwr,de,jC,qFe,fwr,mwr,sJ,gwr,hwr,pwr,DC,jFe,_wr,uwr,lJ,bwr,vwr,Fwr,GC,DFe,Twr,Mwr,iJ,Ewr,Cwr,wwr,OC,GFe,Awr,ywr,dJ,Lwr,xwr,$wr,VC,OFe,kwr,Swr,cJ,Rwr,Pwr,Bwr,XC,VFe,Iwr,Nwr,fJ,qwr,jwr,Dwr,zC,XFe,Gwr,Owr,mJ,Vwr,Xwr,zwr,WC,zFe,Wwr,Qwr,gJ,Hwr,Uwr,Jwr,QC,WFe,Ywr,Kwr,hJ,Zwr,eAr,oAr,HC,QFe,rAr,tAr,pJ,aAr,nAr,sAr,UC,HFe,lAr,iAr,_J,dAr,cAr,fAr,JC,UFe,mAr,gAr,uJ,hAr,pAr,_Ar,YC,JFe,uAr,bAr,bJ,vAr,FAr,TAr,KC,YFe,MAr,EAr,vJ,CAr,wAr,AAr,ZC,KFe,yAr,LAr,FJ,xAr,$Ar,kAr,e5,ZFe,SAr,RAr,TJ,PAr,BAr,IAr,o5,eTe,NAr,qAr,MJ,jAr,DAr,GAr,r5,oTe,OAr,VAr,EJ,XAr,zAr,WAr,t5,rTe,QAr,HAr,CJ,UAr,JAr,YAr,a5,tTe,KAr,ZAr,wJ,e6r,o6r,r6r,n5,_De,Mc,s5,aTe,T9,t6r,nTe,a6r,uDe,ir,M9,n6r,Ec,s6r,AJ,l6r,i6r,yJ,d6r,c6r,f6r,E9,m6r,sTe,g6r,h6r,p6r,jt,C9,_6r,lTe,u6r,b6r,Cc,v6r,iTe,F6r,T6r,LJ,M6r,E6r,C6r,l5,w6r,Ir,w9,A6r,dTe,y6r,L6r,fn,x6r,cTe,$6r,k6r,fTe,S6r,R6r,mTe,P6r,B6r,I6r,ce,i5,gTe,N6r,q6r,xJ,j6r,D6r,G6r,d5,hTe,O6r,V6r,$J,X6r,z6r,W6r,c5,pTe,Q6r,H6r,kJ,U6r,J6r,Y6r,f5,_Te,K6r,Z6r,SJ,eyr,oyr,ryr,m5,uTe,tyr,ayr,RJ,nyr,syr,lyr,g5,bTe,iyr,dyr,PJ,cyr,fyr,myr,h5,vTe,gyr,hyr,BJ,pyr,_yr,uyr,p5,FTe,byr,vyr,IJ,Fyr,Tyr,Myr,_5,TTe,Eyr,Cyr,NJ,wyr,Ayr,yyr,u5,MTe,Lyr,xyr,qJ,$yr,kyr,Syr,b5,ETe,Ryr,Pyr,jJ,Byr,Iyr,Nyr,v5,CTe,qyr,jyr,DJ,Dyr,Gyr,Oyr,F5,wTe,Vyr,Xyr,GJ,zyr,Wyr,Qyr,T5,ATe,Hyr,Uyr,OJ,Jyr,Yyr,Kyr,M5,yTe,Zyr,eLr,VJ,oLr,rLr,tLr,E5,LTe,aLr,nLr,XJ,sLr,lLr,iLr,C5,xTe,dLr,cLr,zJ,fLr,mLr,gLr,w5,$Te,hLr,pLr,WJ,_Lr,uLr,bLr,A5,kTe,vLr,FLr,QJ,TLr,MLr,ELr,y5,STe,CLr,wLr,HJ,ALr,yLr,LLr,L5,bDe,wc,x5,RTe,A9,xLr,PTe,$Lr,vDe,dr,y9,kLr,Ac,SLr,UJ,RLr,PLr,JJ,BLr,ILr,NLr,L9,qLr,BTe,jLr,DLr,GLr,Dt,x9,OLr,ITe,VLr,XLr,yc,zLr,NTe,WLr,QLr,YJ,HLr,ULr,JLr,$5,YLr,Nr,$9,KLr,qTe,ZLr,e8r,mn,o8r,jTe,r8r,t8r,DTe,a8r,n8r,GTe,s8r,l8r,i8r,OTe,k5,VTe,d8r,c8r,KJ,f8r,m8r,g8r,S5,FDe,Lc,R5,XTe,k9,h8r,zTe,p8r,TDe,cr,S9,_8r,xc,u8r,ZJ,b8r,v8r,eY,F8r,T8r,M8r,R9,E8r,WTe,C8r,w8r,A8r,Gt,P9,y8r,QTe,L8r,x8r,$c,$8r,HTe,k8r,S8r,oY,R8r,P8r,B8r,P5,I8r,qr,B9,N8r,UTe,q8r,j8r,gn,D8r,JTe,G8r,O8r,YTe,V8r,X8r,KTe,z8r,W8r,Q8r,ZTe,B5,eMe,H8r,U8r,rY,J8r,Y8r,K8r,I5,MDe,kc,N5,oMe,I9,Z8r,rMe,e9r,EDe,fr,N9,o9r,Sc,r9r,tY,t9r,a9r,aY,n9r,s9r,l9r,q9,i9r,tMe,d9r,c9r,f9r,Ot,j9,m9r,aMe,g9r,h9r,Rc,p9r,nMe,_9r,u9r,nY,b9r,v9r,F9r,q5,T9r,jr,D9,M9r,sMe,E9r,C9r,hn,w9r,lMe,A9r,y9r,iMe,L9r,x9r,dMe,$9r,k9r,S9r,re,j5,cMe,R9r,P9r,sY,B9r,I9r,N9r,D5,fMe,q9r,j9r,lY,D9r,G9r,O9r,G5,mMe,V9r,X9r,iY,z9r,W9r,Q9r,O5,gMe,H9r,U9r,dY,J9r,Y9r,K9r,V5,hMe,Z9r,exr,cY,oxr,rxr,txr,X5,pMe,axr,nxr,fY,sxr,lxr,ixr,z5,_Me,dxr,cxr,mY,fxr,mxr,gxr,W5,uMe,hxr,pxr,gY,_xr,uxr,bxr,Q5,bMe,vxr,Fxr,hY,Txr,Mxr,Exr,H5,vMe,Cxr,wxr,pY,Axr,yxr,Lxr,U5,FMe,xxr,$xr,_Y,kxr,Sxr,Rxr,J5,TMe,Pxr,Bxr,uY,Ixr,Nxr,qxr,Y5,MMe,jxr,Dxr,bY,Gxr,Oxr,Vxr,K5,EMe,Xxr,zxr,vY,Wxr,Qxr,Hxr,Z5,CMe,Uxr,Jxr,FY,Yxr,Kxr,Zxr,e3,wMe,e$r,o$r,TY,r$r,t$r,a$r,o3,AMe,n$r,s$r,MY,l$r,i$r,d$r,r3,yMe,c$r,f$r,EY,m$r,g$r,h$r,t3,LMe,p$r,_$r,CY,u$r,b$r,v$r,a3,xMe,F$r,T$r,wY,M$r,E$r,C$r,n3,$Me,w$r,A$r,AY,y$r,L$r,x$r,s3,kMe,$$r,k$r,yY,S$r,R$r,P$r,l3,SMe,B$r,I$r,LY,N$r,q$r,j$r,i3,RMe,D$r,G$r,xY,O$r,V$r,X$r,d3,PMe,z$r,W$r,$Y,Q$r,H$r,U$r,c3,BMe,J$r,Y$r,kY,K$r,Z$r,ekr,f3,CDe,Pc,m3,IMe,G9,okr,NMe,rkr,wDe,mr,O9,tkr,Bc,akr,SY,nkr,skr,RY,lkr,ikr,dkr,V9,ckr,qMe,fkr,mkr,gkr,Vt,X9,hkr,jMe,pkr,_kr,Ic,ukr,DMe,bkr,vkr,PY,Fkr,Tkr,Mkr,g3,Ekr,Dr,z9,Ckr,GMe,wkr,Akr,pn,ykr,OMe,Lkr,xkr,VMe,$kr,kkr,XMe,Skr,Rkr,Pkr,Le,h3,zMe,Bkr,Ikr,BY,Nkr,qkr,jkr,p3,WMe,Dkr,Gkr,IY,Okr,Vkr,Xkr,_3,QMe,zkr,Wkr,NY,Qkr,Hkr,Ukr,u3,HMe,Jkr,Ykr,qY,Kkr,Zkr,eSr,b3,UMe,oSr,rSr,jY,tSr,aSr,nSr,v3,JMe,sSr,lSr,DY,iSr,dSr,cSr,F3,YMe,fSr,mSr,GY,gSr,hSr,pSr,T3,KMe,_Sr,uSr,OY,bSr,vSr,FSr,M3,ZMe,TSr,MSr,VY,ESr,CSr,wSr,E3,eEe,ASr,ySr,XY,LSr,xSr,$Sr,C3,ADe,Nc,w3,oEe,W9,kSr,rEe,SSr,yDe,gr,Q9,RSr,qc,PSr,zY,BSr,ISr,WY,NSr,qSr,jSr,H9,DSr,tEe,GSr,OSr,VSr,Xt,U9,XSr,aEe,zSr,WSr,jc,QSr,nEe,HSr,USr,QY,JSr,YSr,KSr,A3,ZSr,Gr,J9,eRr,sEe,oRr,rRr,_n,tRr,lEe,aRr,nRr,iEe,sRr,lRr,dEe,iRr,dRr,cRr,Ee,y3,cEe,fRr,mRr,HY,gRr,hRr,pRr,L3,fEe,_Rr,uRr,UY,bRr,vRr,FRr,x3,mEe,TRr,MRr,JY,ERr,CRr,wRr,$3,gEe,ARr,yRr,YY,LRr,xRr,$Rr,k3,hEe,kRr,SRr,KY,RRr,PRr,BRr,S3,pEe,IRr,NRr,ZY,qRr,jRr,DRr,R3,_Ee,GRr,ORr,eK,VRr,XRr,zRr,P3,uEe,WRr,QRr,oK,HRr,URr,JRr,B3,bEe,YRr,KRr,rK,ZRr,ePr,oPr,I3,vEe,rPr,tPr,tK,aPr,nPr,sPr,N3,FEe,lPr,iPr,aK,dPr,cPr,fPr,q3,TEe,mPr,gPr,nK,hPr,pPr,_Pr,j3,LDe,Dc,D3,MEe,Y9,uPr,EEe,bPr,xDe,hr,K9,vPr,Gc,FPr,sK,TPr,MPr,lK,EPr,CPr,wPr,Z9,APr,CEe,yPr,LPr,xPr,zt,ex,$Pr,wEe,kPr,SPr,Oc,RPr,AEe,PPr,BPr,iK,IPr,NPr,qPr,G3,jPr,Or,ox,DPr,yEe,GPr,OPr,un,VPr,LEe,XPr,zPr,xEe,WPr,QPr,$Ee,HPr,UPr,JPr,xe,O3,kEe,YPr,KPr,dK,ZPr,eBr,oBr,V3,SEe,rBr,tBr,cK,aBr,nBr,sBr,X3,REe,lBr,iBr,fK,dBr,cBr,fBr,z3,PEe,mBr,gBr,mK,hBr,pBr,_Br,W3,BEe,uBr,bBr,gK,vBr,FBr,TBr,Q3,IEe,MBr,EBr,hK,CBr,wBr,ABr,H3,NEe,yBr,LBr,pK,xBr,$Br,kBr,U3,qEe,SBr,RBr,_K,PBr,BBr,IBr,J3,jEe,NBr,qBr,uK,jBr,DBr,GBr,Y3,DEe,OBr,VBr,bK,XBr,zBr,WBr,K3,$De,Vc,Z3,GEe,rx,QBr,OEe,HBr,kDe,pr,tx,UBr,Xc,JBr,vK,YBr,KBr,FK,ZBr,eIr,oIr,ax,rIr,VEe,tIr,aIr,nIr,Wt,nx,sIr,XEe,lIr,iIr,zc,dIr,zEe,cIr,fIr,TK,mIr,gIr,hIr,e0,pIr,Vr,sx,_Ir,WEe,uIr,bIr,bn,vIr,QEe,FIr,TIr,HEe,MIr,EIr,UEe,CIr,wIr,AIr,Pe,o0,JEe,yIr,LIr,MK,xIr,$Ir,kIr,r0,YEe,SIr,RIr,EK,PIr,BIr,IIr,t0,KEe,NIr,qIr,CK,jIr,DIr,GIr,a0,ZEe,OIr,VIr,wK,XIr,zIr,WIr,n0,eCe,QIr,HIr,AK,UIr,JIr,YIr,s0,oCe,KIr,ZIr,yK,eNr,oNr,rNr,l0,rCe,tNr,aNr,LK,nNr,sNr,lNr,i0,tCe,iNr,dNr,xK,cNr,fNr,mNr,d0,aCe,gNr,hNr,$K,pNr,_Nr,uNr,c0,SDe,Wc,f0,nCe,lx,bNr,sCe,vNr,RDe,_r,ix,FNr,Qc,TNr,kK,MNr,ENr,SK,CNr,wNr,ANr,dx,yNr,lCe,LNr,xNr,$Nr,Qt,cx,kNr,iCe,SNr,RNr,Hc,PNr,dCe,BNr,INr,RK,NNr,qNr,jNr,m0,DNr,Xr,fx,GNr,cCe,ONr,VNr,vn,XNr,fCe,zNr,WNr,mCe,QNr,HNr,gCe,UNr,JNr,YNr,$e,g0,hCe,KNr,ZNr,PK,eqr,oqr,rqr,h0,pCe,tqr,aqr,BK,nqr,sqr,lqr,p0,_Ce,iqr,dqr,IK,cqr,fqr,mqr,_0,uCe,gqr,hqr,NK,pqr,_qr,uqr,u0,bCe,bqr,vqr,qK,Fqr,Tqr,Mqr,b0,vCe,Eqr,Cqr,jK,wqr,Aqr,yqr,v0,FCe,Lqr,xqr,DK,$qr,kqr,Sqr,F0,TCe,Rqr,Pqr,GK,Bqr,Iqr,Nqr,T0,MCe,qqr,jqr,OK,Dqr,Gqr,Oqr,M0,ECe,Vqr,Xqr,VK,zqr,Wqr,Qqr,E0,PDe,Uc,C0,CCe,mx,Hqr,wCe,Uqr,BDe,ur,gx,Jqr,Jc,Yqr,XK,Kqr,Zqr,zK,ejr,ojr,rjr,hx,tjr,ACe,ajr,njr,sjr,Ht,px,ljr,yCe,ijr,djr,Yc,cjr,LCe,fjr,mjr,WK,gjr,hjr,pjr,w0,_jr,zr,_x,ujr,xCe,bjr,vjr,Fn,Fjr,$Ce,Tjr,Mjr,kCe,Ejr,Cjr,SCe,wjr,Ajr,yjr,ke,A0,RCe,Ljr,xjr,QK,$jr,kjr,Sjr,y0,PCe,Rjr,Pjr,HK,Bjr,Ijr,Njr,L0,BCe,qjr,jjr,UK,Djr,Gjr,Ojr,x0,ICe,Vjr,Xjr,JK,zjr,Wjr,Qjr,$0,NCe,Hjr,Ujr,YK,Jjr,Yjr,Kjr,k0,qCe,Zjr,eDr,KK,oDr,rDr,tDr,S0,jCe,aDr,nDr,ZK,sDr,lDr,iDr,R0,DCe,dDr,cDr,eZ,fDr,mDr,gDr,P0,GCe,hDr,pDr,oZ,_Dr,uDr,bDr,B0,OCe,vDr,FDr,rZ,TDr,MDr,EDr,I0,IDe,Kc,N0,VCe,ux,CDr,XCe,wDr,NDe,br,bx,ADr,Zc,yDr,tZ,LDr,xDr,aZ,$Dr,kDr,SDr,vx,RDr,zCe,PDr,BDr,IDr,Ut,Fx,NDr,WCe,qDr,jDr,ef,DDr,QCe,GDr,ODr,nZ,VDr,XDr,zDr,q0,WDr,Wr,Tx,QDr,HCe,HDr,UDr,Tn,JDr,UCe,YDr,KDr,JCe,ZDr,eGr,YCe,oGr,rGr,tGr,Ge,j0,KCe,aGr,nGr,sZ,sGr,lGr,iGr,D0,ZCe,dGr,cGr,lZ,fGr,mGr,gGr,G0,e5e,hGr,pGr,iZ,_Gr,uGr,bGr,O0,o5e,vGr,FGr,dZ,TGr,MGr,EGr,V0,r5e,CGr,wGr,cZ,AGr,yGr,LGr,X0,t5e,xGr,$Gr,fZ,kGr,SGr,RGr,z0,a5e,PGr,BGr,mZ,IGr,NGr,qGr,W0,n5e,jGr,DGr,gZ,GGr,OGr,VGr,Q0,qDe,of,H0,s5e,Mx,XGr,l5e,zGr,jDe,vr,Ex,WGr,rf,QGr,hZ,HGr,UGr,pZ,JGr,YGr,KGr,Cx,ZGr,i5e,eOr,oOr,rOr,Jt,wx,tOr,d5e,aOr,nOr,tf,sOr,c5e,lOr,iOr,_Z,dOr,cOr,fOr,U0,mOr,Qr,Ax,gOr,f5e,hOr,pOr,Mn,_Or,m5e,uOr,bOr,g5e,vOr,FOr,h5e,TOr,MOr,EOr,Oe,J0,p5e,COr,wOr,uZ,AOr,yOr,LOr,Y0,_5e,xOr,$Or,bZ,kOr,SOr,ROr,K0,u5e,POr,BOr,vZ,IOr,NOr,qOr,Z0,b5e,jOr,DOr,FZ,GOr,OOr,VOr,ew,v5e,XOr,zOr,TZ,WOr,QOr,HOr,ow,F5e,UOr,JOr,MZ,YOr,KOr,ZOr,rw,T5e,eVr,oVr,EZ,rVr,tVr,aVr,tw,M5e,nVr,sVr,CZ,lVr,iVr,dVr,aw,DDe,af,nw,E5e,yx,cVr,C5e,fVr,GDe,Fr,Lx,mVr,nf,gVr,wZ,hVr,pVr,AZ,_Vr,uVr,bVr,xx,vVr,w5e,FVr,TVr,MVr,Yt,$x,EVr,A5e,CVr,wVr,sf,AVr,y5e,yVr,LVr,yZ,xVr,$Vr,kVr,sw,SVr,Hr,kx,RVr,L5e,PVr,BVr,En,IVr,x5e,NVr,qVr,$5e,jVr,DVr,k5e,GVr,OVr,VVr,S5e,lw,R5e,XVr,zVr,LZ,WVr,QVr,HVr,iw,ODe,lf,dw,P5e,Sx,UVr,B5e,JVr,VDe,Tr,Rx,YVr,df,KVr,xZ,ZVr,eXr,$Z,oXr,rXr,tXr,Px,aXr,I5e,nXr,sXr,lXr,Kt,Bx,iXr,N5e,dXr,cXr,cf,fXr,q5e,mXr,gXr,kZ,hXr,pXr,_Xr,cw,uXr,Ur,Ix,bXr,j5e,vXr,FXr,Cn,TXr,D5e,MXr,EXr,G5e,CXr,wXr,O5e,AXr,yXr,LXr,Nx,fw,V5e,xXr,$Xr,SZ,kXr,SXr,RXr,mw,X5e,PXr,BXr,RZ,IXr,NXr,qXr,gw,XDe,ff,hw,z5e,qx,jXr,W5e,DXr,zDe,Mr,jx,GXr,mf,OXr,PZ,VXr,XXr,BZ,zXr,WXr,QXr,Dx,HXr,Q5e,UXr,JXr,YXr,Zt,Gx,KXr,H5e,ZXr,ezr,gf,ozr,U5e,rzr,tzr,IZ,azr,nzr,szr,pw,lzr,Jr,Ox,izr,J5e,dzr,czr,wn,fzr,Y5e,mzr,gzr,K5e,hzr,pzr,Z5e,_zr,uzr,bzr,e3e,_w,o3e,vzr,Fzr,NZ,Tzr,Mzr,Ezr,uw,WDe;return d=new te({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),q6=new te({}),j6=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Mf=new Czr({props:{warning:!0,$$slots:{default:[LSt]},$$scope:{ctx:L}}}),D6=new te({}),G6=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L587"}}),X6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L610"}}),Ag=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),z6=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L733"}}),W6=new te({}),Q6=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L390"}}),J6=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17427/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L404"}}),lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[$St]},$$scope:{ctx:L}}}),Y6=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L603"}}),K6=new te({}),Z6=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L205"}}),Dh=new Czr({props:{$$slots:{default:[kSt]},$$scope:{ctx:L}}}),Gh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[SSt]},$$scope:{ctx:L}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L332"}}),ay=new te({}),ny=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L88"}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L102"}}),lp=new Czr({props:{$$slots:{default:[RSt]},$$scope:{ctx:L}}}),ip=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[PSt]},$$scope:{ctx:L}}}),dy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L255"}}),cy=new te({}),fy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L739"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),fp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[BSt]},$$scope:{ctx:L}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),lu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[ISt]},$$scope:{ctx:L}}}),py=new te({}),_y=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L746"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),du=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[NSt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Zu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[qSt]},$$scope:{ctx:L}}}),Fy=new te({}),Ty=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L761"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),o2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[jSt]},$$scope:{ctx:L}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[DSt]},$$scope:{ctx:L}}}),wy=new te({}),Ay=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L768"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[GSt]},$$scope:{ctx:L}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),A1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[OSt]},$$scope:{ctx:L}}}),$y=new te({}),ky=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L775"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),L1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[VSt]},$$scope:{ctx:L}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),W1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[XSt]},$$scope:{ctx:L}}}),By=new te({}),Iy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L784"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),H1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[zSt]},$$scope:{ctx:L}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),V7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[WSt]},$$scope:{ctx:L}}}),Dy=new te({}),Gy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L818"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),z7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[QSt]},$$scope:{ctx:L}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[HSt]},$$scope:{ctx:L}}}),zy=new te({}),Wy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L825"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Cb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[USt]},$$scope:{ctx:L}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),kb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[JSt]},$$scope:{ctx:L}}}),Jy=new te({}),Yy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L811"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Rb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[YSt]},$$scope:{ctx:L}}}),eL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),p4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[KSt]},$$scope:{ctx:L}}}),oL=new te({}),rL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L793"}}),aL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[ZSt]},$$scope:{ctx:L}}}),nL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[eRt]},$$scope:{ctx:L}}}),sL=new te({}),lL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L800"}}),dL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[oRt]},$$scope:{ctx:L}}}),cL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),cv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[rRt]},$$scope:{ctx:L}}}),fL=new te({}),mL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L834"}}),hL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),mv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[tRt]},$$scope:{ctx:L}}}),pL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[aRt]},$$scope:{ctx:L}}}),_L=new te({}),uL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L873"}}),vL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[nRt]},$$scope:{ctx:L}}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[sRt]},$$scope:{ctx:L}}}),TL=new te({}),ML=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L880"}}),CL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[lRt]},$$scope:{ctx:L}}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Xv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[iRt]},$$scope:{ctx:L}}}),AL=new te({}),yL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L903"}}),xL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Wv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[dRt]},$$scope:{ctx:L}}}),$L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Zv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[cRt]},$$scope:{ctx:L}}}),kL=new te({}),SL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L887"}}),PL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),oF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[fRt]},$$scope:{ctx:L}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[mRt]},$$scope:{ctx:L}}}),IL=new te({}),NL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L894"}}),jL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),hF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[gRt]},$$scope:{ctx:L}}}),DL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[hRt]},$$scope:{ctx:L}}}),OL=new te({}),VL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L912"}}),zL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[pRt]},$$scope:{ctx:L}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),yF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[_Rt]},$$scope:{ctx:L}}}),QL=new te({}),HL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L919"}}),JL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[uRt]},$$scope:{ctx:L}}}),YL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[bRt]},$$scope:{ctx:L}}}),KL=new te({}),ZL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L866"}}),o8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),IF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[vRt]},$$scope:{ctx:L}}}),r8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[FRt]},$$scope:{ctx:L}}}),a8=new te({}),n8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L841"}}),l8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[TRt]},$$scope:{ctx:L}}}),i8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[MRt]},$$scope:{ctx:L}}}),d8=new te({}),c8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L848"}}),m8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),QF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[ERt]},$$scope:{ctx:L}}}),g8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[CRt]},$$scope:{ctx:L}}}),h8=new te({}),p8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L857"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[wRt]},$$scope:{ctx:L}}}),b8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),aT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[ARt]},$$scope:{ctx:L}}}),v8=new te({}),F8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L398"}}),M8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),sT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[yRt]},$$scope:{ctx:L}}}),E8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),eM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[LRt]},$$scope:{ctx:L}}}),C8=new te({}),w8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),rM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[xRt]},$$scope:{ctx:L}}}),L8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$Rt]},$$scope:{ctx:L}}}),x8=new te({}),$8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),S8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[kRt]},$$scope:{ctx:L}}}),R8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),OM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[SRt]},$$scope:{ctx:L}}}),P8=new te({}),B8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L436"}}),N8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),XM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[RRt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),JM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[PRt]},$$scope:{ctx:L}}}),j8=new te({}),D8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L452"}}),O8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),KM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[BRt]},$$scope:{ctx:L}}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[IRt]},$$scope:{ctx:L}}}),X8=new te({}),z8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L459"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[NRt]},$$scope:{ctx:L}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qRt]},$$scope:{ctx:L}}}),U8=new te({}),J8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L468"}}),K8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[jRt]},$$scope:{ctx:L}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[DRt]},$$scope:{ctx:L}}}),e9=new te({}),o9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L504"}}),t9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[GRt]},$$scope:{ctx:L}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ORt]},$$scope:{ctx:L}}}),n9=new te({}),s9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L511"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[VRt]},$$scope:{ctx:L}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[XRt]},$$scope:{ctx:L}}}),f9=new te({}),m9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L484"}}),h9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zRt]},$$scope:{ctx:L}}}),p9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[WRt]},$$scope:{ctx:L}}}),_9=new te({}),u9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L495"}}),v9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[QRt]},$$scope:{ctx:L}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),n5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HRt]},$$scope:{ctx:L}}}),T9=new te({}),M9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L477"}}),C9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[URt]},$$scope:{ctx:L}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),L5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[JRt]},$$scope:{ctx:L}}}),A9=new te({}),y9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L445"}}),x9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),$5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[YRt]},$$scope:{ctx:L}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),S5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[KRt]},$$scope:{ctx:L}}}),k9=new te({}),S9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L520"}}),P9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),P5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[ZRt]},$$scope:{ctx:L}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),I5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ePt]},$$scope:{ctx:L}}}),I9=new te({}),N9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),j9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[oPt]},$$scope:{ctx:L}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[rPt]},$$scope:{ctx:L}}}),G9=new te({}),O9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),X9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[tPt]},$$scope:{ctx:L}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),C3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[aPt]},$$scope:{ctx:L}}}),W9=new te({}),Q9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),U9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),A3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[nPt]},$$scope:{ctx:L}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sPt]},$$scope:{ctx:L}}}),Y9=new te({}),K9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[lPt]},$$scope:{ctx:L}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[iPt]},$$scope:{ctx:L}}}),rx=new te({}),tx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),nx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[dPt]},$$scope:{ctx:L}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[cPt]},$$scope:{ctx:L}}}),lx=new te({}),ix=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),cx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[fPt]},$$scope:{ctx:L}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[mPt]},$$scope:{ctx:L}}}),mx=new te({}),gx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),px=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[gPt]},$$scope:{ctx:L}}}),_x=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),I0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[hPt]},$$scope:{ctx:L}}}),ux=new te({}),bx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[pPt]},$$scope:{ctx:L}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[_Pt]},$$scope:{ctx:L}}}),Mx=new te({}),Ex=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),U0=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[uPt]},$$scope:{ctx:L}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[bPt]},$$scope:{ctx:L}}}),yx=new te({}),Lx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[vPt]},$$scope:{ctx:L}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[FPt]},$$scope:{ctx:L}}}),Sx=new te({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[TPt]},$$scope:{ctx:L}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[MPt]},$$scope:{ctx:L}}}),qx=new te({}),jx=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[EPt]},$$scope:{ctx:L}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[CPt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),gi=o("Auto Classes"),uf=l(),tt=a("p"),hi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=a("code"),P6=o("from_pretrained()"),bf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),De=l(),We=a("p"),_i=o("Instantiating one of "),yn=a("a"),B6=o("AutoConfig"),Ln=o(", "),xn=a("a"),I6=o("AutoModel"),ui=o(`, and
`),$n=a("a"),N6=o("AutoTokenizer"),bi=o(" will directly create a class of the relevant architecture. For instance"),vf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),tk=o("will create a model that is an instance of "),vi=a("a"),ak=o("BertModel"),nk=o("."),Eo=l(),Aa=a("p"),sk=o("There is one class of "),Ff=a("code"),lk=o("AutoModel"),eVe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Vqe=l(),Fi=a("h2"),Tf=a("a"),$oe=a("span"),F(q6.$$.fragment),oVe=l(),koe=a("span"),rVe=o("Extending the Auto Classes"),Xqe=l(),kn=a("p"),tVe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Soe=a("code"),aVe=o("NewModel"),nVe=o(", make sure you have a "),Roe=a("code"),sVe=o("NewModelConfig"),lVe=o(` then you can add those to the auto
classes like this:`),zqe=l(),F(j6.$$.fragment),Wqe=l(),ik=a("p"),iVe=o("You will then be able to use the auto classes like you would usually do!"),Qqe=l(),F(Mf.$$.fragment),Hqe=l(),Ti=a("h2"),Ef=a("a"),Poe=a("span"),F(D6.$$.fragment),dVe=l(),Boe=a("span"),cVe=o("AutoConfig"),Uqe=l(),Co=a("div"),F(G6.$$.fragment),fVe=l(),O6=a("p"),mVe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),dk=a("a"),gVe=o("from_pretrained()"),hVe=o(" class method."),pVe=l(),V6=a("p"),_Ve=o("This class cannot be instantiated directly using "),Ioe=a("code"),uVe=o("__init__()"),bVe=o(" (throws an error)."),vVe=l(),Er=a("div"),F(X6.$$.fragment),FVe=l(),Noe=a("p"),TVe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),MVe=l(),Mi=a("p"),EVe=o("The configuration class to instantiate is selected based on the "),qoe=a("code"),CVe=o("model_type"),wVe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),joe=a("code"),AVe=o("pretrained_model_name_or_path"),yVe=o(":"),LVe=l(),A=a("ul"),Cf=a("li"),Doe=a("strong"),xVe=o("albert"),$Ve=o(" \u2014 "),ck=a("a"),kVe=o("AlbertConfig"),SVe=o(" (ALBERT model)"),RVe=l(),wf=a("li"),Goe=a("strong"),PVe=o("bart"),BVe=o(" \u2014 "),fk=a("a"),IVe=o("BartConfig"),NVe=o(" (BART model)"),qVe=l(),Af=a("li"),Ooe=a("strong"),jVe=o("beit"),DVe=o(" \u2014 "),mk=a("a"),GVe=o("BeitConfig"),OVe=o(" (BEiT model)"),VVe=l(),yf=a("li"),Voe=a("strong"),XVe=o("bert"),zVe=o(" \u2014 "),gk=a("a"),WVe=o("BertConfig"),QVe=o(" (BERT model)"),HVe=l(),Lf=a("li"),Xoe=a("strong"),UVe=o("bert-generation"),JVe=o(" \u2014 "),hk=a("a"),YVe=o("BertGenerationConfig"),KVe=o(" (Bert Generation model)"),ZVe=l(),xf=a("li"),zoe=a("strong"),eXe=o("big_bird"),oXe=o(" \u2014 "),pk=a("a"),rXe=o("BigBirdConfig"),tXe=o(" (BigBird model)"),aXe=l(),$f=a("li"),Woe=a("strong"),nXe=o("bigbird_pegasus"),sXe=o(" \u2014 "),_k=a("a"),lXe=o("BigBirdPegasusConfig"),iXe=o(" (BigBird-Pegasus model)"),dXe=l(),kf=a("li"),Qoe=a("strong"),cXe=o("blenderbot"),fXe=o(" \u2014 "),uk=a("a"),mXe=o("BlenderbotConfig"),gXe=o(" (Blenderbot model)"),hXe=l(),Sf=a("li"),Hoe=a("strong"),pXe=o("blenderbot-small"),_Xe=o(" \u2014 "),bk=a("a"),uXe=o("BlenderbotSmallConfig"),bXe=o(" (BlenderbotSmall model)"),vXe=l(),Rf=a("li"),Uoe=a("strong"),FXe=o("camembert"),TXe=o(" \u2014 "),vk=a("a"),MXe=o("CamembertConfig"),EXe=o(" (CamemBERT model)"),CXe=l(),Pf=a("li"),Joe=a("strong"),wXe=o("canine"),AXe=o(" \u2014 "),Fk=a("a"),yXe=o("CanineConfig"),LXe=o(" (CANINE model)"),xXe=l(),Bf=a("li"),Yoe=a("strong"),$Xe=o("clip"),kXe=o(" \u2014 "),Tk=a("a"),SXe=o("CLIPConfig"),RXe=o(" (CLIP model)"),PXe=l(),If=a("li"),Koe=a("strong"),BXe=o("convbert"),IXe=o(" \u2014 "),Mk=a("a"),NXe=o("ConvBertConfig"),qXe=o(" (ConvBERT model)"),jXe=l(),Nf=a("li"),Zoe=a("strong"),DXe=o("convnext"),GXe=o(" \u2014 "),Ek=a("a"),OXe=o("ConvNextConfig"),VXe=o(" (ConvNeXT model)"),XXe=l(),qf=a("li"),ere=a("strong"),zXe=o("ctrl"),WXe=o(" \u2014 "),Ck=a("a"),QXe=o("CTRLConfig"),HXe=o(" (CTRL model)"),UXe=l(),jf=a("li"),ore=a("strong"),JXe=o("cvt"),YXe=o(" \u2014 "),wk=a("a"),KXe=o("CvtConfig"),ZXe=o(" (CvT model)"),eze=l(),Df=a("li"),rre=a("strong"),oze=o("data2vec-audio"),rze=o(" \u2014 "),Ak=a("a"),tze=o("Data2VecAudioConfig"),aze=o(" (Data2VecAudio model)"),nze=l(),Gf=a("li"),tre=a("strong"),sze=o("data2vec-text"),lze=o(" \u2014 "),yk=a("a"),ize=o("Data2VecTextConfig"),dze=o(" (Data2VecText model)"),cze=l(),Of=a("li"),are=a("strong"),fze=o("data2vec-vision"),mze=o(" \u2014 "),Lk=a("a"),gze=o("Data2VecVisionConfig"),hze=o(" (Data2VecVision model)"),pze=l(),Vf=a("li"),nre=a("strong"),_ze=o("deberta"),uze=o(" \u2014 "),xk=a("a"),bze=o("DebertaConfig"),vze=o(" (DeBERTa model)"),Fze=l(),Xf=a("li"),sre=a("strong"),Tze=o("deberta-v2"),Mze=o(" \u2014 "),$k=a("a"),Eze=o("DebertaV2Config"),Cze=o(" (DeBERTa-v2 model)"),wze=l(),zf=a("li"),lre=a("strong"),Aze=o("decision_transformer"),yze=o(" \u2014 "),kk=a("a"),Lze=o("DecisionTransformerConfig"),xze=o(" (Decision Transformer model)"),$ze=l(),Wf=a("li"),ire=a("strong"),kze=o("deit"),Sze=o(" \u2014 "),Sk=a("a"),Rze=o("DeiTConfig"),Pze=o(" (DeiT model)"),Bze=l(),Qf=a("li"),dre=a("strong"),Ize=o("detr"),Nze=o(" \u2014 "),Rk=a("a"),qze=o("DetrConfig"),jze=o(" (DETR model)"),Dze=l(),Hf=a("li"),cre=a("strong"),Gze=o("distilbert"),Oze=o(" \u2014 "),Pk=a("a"),Vze=o("DistilBertConfig"),Xze=o(" (DistilBERT model)"),zze=l(),Uf=a("li"),fre=a("strong"),Wze=o("dpr"),Qze=o(" \u2014 "),Bk=a("a"),Hze=o("DPRConfig"),Uze=o(" (DPR model)"),Jze=l(),Jf=a("li"),mre=a("strong"),Yze=o("dpt"),Kze=o(" \u2014 "),Ik=a("a"),Zze=o("DPTConfig"),eWe=o(" (DPT model)"),oWe=l(),Yf=a("li"),gre=a("strong"),rWe=o("electra"),tWe=o(" \u2014 "),Nk=a("a"),aWe=o("ElectraConfig"),nWe=o(" (ELECTRA model)"),sWe=l(),Kf=a("li"),hre=a("strong"),lWe=o("encoder-decoder"),iWe=o(" \u2014 "),qk=a("a"),dWe=o("EncoderDecoderConfig"),cWe=o(" (Encoder decoder model)"),fWe=l(),Zf=a("li"),pre=a("strong"),mWe=o("flaubert"),gWe=o(" \u2014 "),jk=a("a"),hWe=o("FlaubertConfig"),pWe=o(" (FlauBERT model)"),_We=l(),em=a("li"),_re=a("strong"),uWe=o("flava"),bWe=o(" \u2014 "),Dk=a("a"),vWe=o("FlavaConfig"),FWe=o(" (FLAVA model)"),TWe=l(),om=a("li"),ure=a("strong"),MWe=o("fnet"),EWe=o(" \u2014 "),Gk=a("a"),CWe=o("FNetConfig"),wWe=o(" (FNet model)"),AWe=l(),rm=a("li"),bre=a("strong"),yWe=o("fsmt"),LWe=o(" \u2014 "),Ok=a("a"),xWe=o("FSMTConfig"),$We=o(" (FairSeq Machine-Translation model)"),kWe=l(),tm=a("li"),vre=a("strong"),SWe=o("funnel"),RWe=o(" \u2014 "),Vk=a("a"),PWe=o("FunnelConfig"),BWe=o(" (Funnel Transformer model)"),IWe=l(),am=a("li"),Fre=a("strong"),NWe=o("glpn"),qWe=o(" \u2014 "),Xk=a("a"),jWe=o("GLPNConfig"),DWe=o(" (GLPN model)"),GWe=l(),nm=a("li"),Tre=a("strong"),OWe=o("gpt2"),VWe=o(" \u2014 "),zk=a("a"),XWe=o("GPT2Config"),zWe=o(" (OpenAI GPT-2 model)"),WWe=l(),sm=a("li"),Mre=a("strong"),QWe=o("gpt_neo"),HWe=o(" \u2014 "),Wk=a("a"),UWe=o("GPTNeoConfig"),JWe=o(" (GPT Neo model)"),YWe=l(),lm=a("li"),Ere=a("strong"),KWe=o("gpt_neox"),ZWe=o(" \u2014 "),Qk=a("a"),eQe=o("GPTNeoXConfig"),oQe=o(" (GPT NeoX model)"),rQe=l(),im=a("li"),Cre=a("strong"),tQe=o("gptj"),aQe=o(" \u2014 "),Hk=a("a"),nQe=o("GPTJConfig"),sQe=o(" (GPT-J model)"),lQe=l(),dm=a("li"),wre=a("strong"),iQe=o("hubert"),dQe=o(" \u2014 "),Uk=a("a"),cQe=o("HubertConfig"),fQe=o(" (Hubert model)"),mQe=l(),cm=a("li"),Are=a("strong"),gQe=o("ibert"),hQe=o(" \u2014 "),Jk=a("a"),pQe=o("IBertConfig"),_Qe=o(" (I-BERT model)"),uQe=l(),fm=a("li"),yre=a("strong"),bQe=o("imagegpt"),vQe=o(" \u2014 "),Yk=a("a"),FQe=o("ImageGPTConfig"),TQe=o(" (ImageGPT model)"),MQe=l(),mm=a("li"),Lre=a("strong"),EQe=o("layoutlm"),CQe=o(" \u2014 "),Kk=a("a"),wQe=o("LayoutLMConfig"),AQe=o(" (LayoutLM model)"),yQe=l(),gm=a("li"),xre=a("strong"),LQe=o("layoutlmv2"),xQe=o(" \u2014 "),Zk=a("a"),$Qe=o("LayoutLMv2Config"),kQe=o(" (LayoutLMv2 model)"),SQe=l(),hm=a("li"),$re=a("strong"),RQe=o("layoutlmv3"),PQe=o(" \u2014 "),eS=a("a"),BQe=o("LayoutLMv3Config"),IQe=o(" (LayoutLMv3 model)"),NQe=l(),pm=a("li"),kre=a("strong"),qQe=o("led"),jQe=o(" \u2014 "),oS=a("a"),DQe=o("LEDConfig"),GQe=o(" (LED model)"),OQe=l(),_m=a("li"),Sre=a("strong"),VQe=o("levit"),XQe=o(" \u2014 "),rS=a("a"),zQe=o("LevitConfig"),WQe=o(" (LeViT model)"),QQe=l(),um=a("li"),Rre=a("strong"),HQe=o("longformer"),UQe=o(" \u2014 "),tS=a("a"),JQe=o("LongformerConfig"),YQe=o(" (Longformer model)"),KQe=l(),bm=a("li"),Pre=a("strong"),ZQe=o("luke"),eHe=o(" \u2014 "),aS=a("a"),oHe=o("LukeConfig"),rHe=o(" (LUKE model)"),tHe=l(),vm=a("li"),Bre=a("strong"),aHe=o("lxmert"),nHe=o(" \u2014 "),nS=a("a"),sHe=o("LxmertConfig"),lHe=o(" (LXMERT model)"),iHe=l(),Fm=a("li"),Ire=a("strong"),dHe=o("m2m_100"),cHe=o(" \u2014 "),sS=a("a"),fHe=o("M2M100Config"),mHe=o(" (M2M100 model)"),gHe=l(),Tm=a("li"),Nre=a("strong"),hHe=o("marian"),pHe=o(" \u2014 "),lS=a("a"),_He=o("MarianConfig"),uHe=o(" (Marian model)"),bHe=l(),Mm=a("li"),qre=a("strong"),vHe=o("maskformer"),FHe=o(" \u2014 "),iS=a("a"),THe=o("MaskFormerConfig"),MHe=o(" (MaskFormer model)"),EHe=l(),Em=a("li"),jre=a("strong"),CHe=o("mbart"),wHe=o(" \u2014 "),dS=a("a"),AHe=o("MBartConfig"),yHe=o(" (mBART model)"),LHe=l(),Cm=a("li"),Dre=a("strong"),xHe=o("megatron-bert"),$He=o(" \u2014 "),cS=a("a"),kHe=o("MegatronBertConfig"),SHe=o(" (Megatron-BERT model)"),RHe=l(),wm=a("li"),Gre=a("strong"),PHe=o("mobilebert"),BHe=o(" \u2014 "),fS=a("a"),IHe=o("MobileBertConfig"),NHe=o(" (MobileBERT model)"),qHe=l(),Am=a("li"),Ore=a("strong"),jHe=o("mpnet"),DHe=o(" \u2014 "),mS=a("a"),GHe=o("MPNetConfig"),OHe=o(" (MPNet model)"),VHe=l(),ym=a("li"),Vre=a("strong"),XHe=o("mt5"),zHe=o(" \u2014 "),gS=a("a"),WHe=o("MT5Config"),QHe=o(" (MT5 model)"),HHe=l(),Lm=a("li"),Xre=a("strong"),UHe=o("nystromformer"),JHe=o(" \u2014 "),hS=a("a"),YHe=o("NystromformerConfig"),KHe=o(" (Nystr\xF6mformer model)"),ZHe=l(),xm=a("li"),zre=a("strong"),eUe=o("openai-gpt"),oUe=o(" \u2014 "),pS=a("a"),rUe=o("OpenAIGPTConfig"),tUe=o(" (OpenAI GPT model)"),aUe=l(),$m=a("li"),Wre=a("strong"),nUe=o("opt"),sUe=o(" \u2014 "),_S=a("a"),lUe=o("OPTConfig"),iUe=o(" (OPT model)"),dUe=l(),km=a("li"),Qre=a("strong"),cUe=o("pegasus"),fUe=o(" \u2014 "),uS=a("a"),mUe=o("PegasusConfig"),gUe=o(" (Pegasus model)"),hUe=l(),Sm=a("li"),Hre=a("strong"),pUe=o("perceiver"),_Ue=o(" \u2014 "),bS=a("a"),uUe=o("PerceiverConfig"),bUe=o(" (Perceiver model)"),vUe=l(),Rm=a("li"),Ure=a("strong"),FUe=o("plbart"),TUe=o(" \u2014 "),vS=a("a"),MUe=o("PLBartConfig"),EUe=o(" (PLBart model)"),CUe=l(),Pm=a("li"),Jre=a("strong"),wUe=o("poolformer"),AUe=o(" \u2014 "),FS=a("a"),yUe=o("PoolFormerConfig"),LUe=o(" (PoolFormer model)"),xUe=l(),Bm=a("li"),Yre=a("strong"),$Ue=o("prophetnet"),kUe=o(" \u2014 "),TS=a("a"),SUe=o("ProphetNetConfig"),RUe=o(" (ProphetNet model)"),PUe=l(),Im=a("li"),Kre=a("strong"),BUe=o("qdqbert"),IUe=o(" \u2014 "),MS=a("a"),NUe=o("QDQBertConfig"),qUe=o(" (QDQBert model)"),jUe=l(),Nm=a("li"),Zre=a("strong"),DUe=o("rag"),GUe=o(" \u2014 "),ES=a("a"),OUe=o("RagConfig"),VUe=o(" (RAG model)"),XUe=l(),qm=a("li"),ete=a("strong"),zUe=o("realm"),WUe=o(" \u2014 "),CS=a("a"),QUe=o("RealmConfig"),HUe=o(" (REALM model)"),UUe=l(),jm=a("li"),ote=a("strong"),JUe=o("reformer"),YUe=o(" \u2014 "),wS=a("a"),KUe=o("ReformerConfig"),ZUe=o(" (Reformer model)"),eJe=l(),Dm=a("li"),rte=a("strong"),oJe=o("regnet"),rJe=o(" \u2014 "),AS=a("a"),tJe=o("RegNetConfig"),aJe=o(" (RegNet model)"),nJe=l(),Gm=a("li"),tte=a("strong"),sJe=o("rembert"),lJe=o(" \u2014 "),yS=a("a"),iJe=o("RemBertConfig"),dJe=o(" (RemBERT model)"),cJe=l(),Om=a("li"),ate=a("strong"),fJe=o("resnet"),mJe=o(" \u2014 "),LS=a("a"),gJe=o("ResNetConfig"),hJe=o(" (ResNet model)"),pJe=l(),Vm=a("li"),nte=a("strong"),_Je=o("retribert"),uJe=o(" \u2014 "),xS=a("a"),bJe=o("RetriBertConfig"),vJe=o(" (RetriBERT model)"),FJe=l(),Xm=a("li"),ste=a("strong"),TJe=o("roberta"),MJe=o(" \u2014 "),$S=a("a"),EJe=o("RobertaConfig"),CJe=o(" (RoBERTa model)"),wJe=l(),zm=a("li"),lte=a("strong"),AJe=o("roformer"),yJe=o(" \u2014 "),kS=a("a"),LJe=o("RoFormerConfig"),xJe=o(" (RoFormer model)"),$Je=l(),Wm=a("li"),ite=a("strong"),kJe=o("segformer"),SJe=o(" \u2014 "),SS=a("a"),RJe=o("SegformerConfig"),PJe=o(" (SegFormer model)"),BJe=l(),Qm=a("li"),dte=a("strong"),IJe=o("sew"),NJe=o(" \u2014 "),RS=a("a"),qJe=o("SEWConfig"),jJe=o(" (SEW model)"),DJe=l(),Hm=a("li"),cte=a("strong"),GJe=o("sew-d"),OJe=o(" \u2014 "),PS=a("a"),VJe=o("SEWDConfig"),XJe=o(" (SEW-D model)"),zJe=l(),Um=a("li"),fte=a("strong"),WJe=o("speech-encoder-decoder"),QJe=o(" \u2014 "),BS=a("a"),HJe=o("SpeechEncoderDecoderConfig"),UJe=o(" (Speech Encoder decoder model)"),JJe=l(),Jm=a("li"),mte=a("strong"),YJe=o("speech_to_text"),KJe=o(" \u2014 "),IS=a("a"),ZJe=o("Speech2TextConfig"),eYe=o(" (Speech2Text model)"),oYe=l(),Ym=a("li"),gte=a("strong"),rYe=o("speech_to_text_2"),tYe=o(" \u2014 "),NS=a("a"),aYe=o("Speech2Text2Config"),nYe=o(" (Speech2Text2 model)"),sYe=l(),Km=a("li"),hte=a("strong"),lYe=o("splinter"),iYe=o(" \u2014 "),qS=a("a"),dYe=o("SplinterConfig"),cYe=o(" (Splinter model)"),fYe=l(),Zm=a("li"),pte=a("strong"),mYe=o("squeezebert"),gYe=o(" \u2014 "),jS=a("a"),hYe=o("SqueezeBertConfig"),pYe=o(" (SqueezeBERT model)"),_Ye=l(),eg=a("li"),_te=a("strong"),uYe=o("swin"),bYe=o(" \u2014 "),DS=a("a"),vYe=o("SwinConfig"),FYe=o(" (Swin Transformer model)"),TYe=l(),og=a("li"),ute=a("strong"),MYe=o("t5"),EYe=o(" \u2014 "),GS=a("a"),CYe=o("T5Config"),wYe=o(" (T5 model)"),AYe=l(),rg=a("li"),bte=a("strong"),yYe=o("tapas"),LYe=o(" \u2014 "),OS=a("a"),xYe=o("TapasConfig"),$Ye=o(" (TAPAS model)"),kYe=l(),tg=a("li"),vte=a("strong"),SYe=o("trajectory_transformer"),RYe=o(" \u2014 "),VS=a("a"),PYe=o("TrajectoryTransformerConfig"),BYe=o(" (Trajectory Transformer model)"),IYe=l(),ag=a("li"),Fte=a("strong"),NYe=o("transfo-xl"),qYe=o(" \u2014 "),XS=a("a"),jYe=o("TransfoXLConfig"),DYe=o(" (Transformer-XL model)"),GYe=l(),ng=a("li"),Tte=a("strong"),OYe=o("trocr"),VYe=o(" \u2014 "),zS=a("a"),XYe=o("TrOCRConfig"),zYe=o(" (TrOCR model)"),WYe=l(),sg=a("li"),Mte=a("strong"),QYe=o("unispeech"),HYe=o(" \u2014 "),WS=a("a"),UYe=o("UniSpeechConfig"),JYe=o(" (UniSpeech model)"),YYe=l(),lg=a("li"),Ete=a("strong"),KYe=o("unispeech-sat"),ZYe=o(" \u2014 "),QS=a("a"),eKe=o("UniSpeechSatConfig"),oKe=o(" (UniSpeechSat model)"),rKe=l(),ig=a("li"),Cte=a("strong"),tKe=o("van"),aKe=o(" \u2014 "),HS=a("a"),nKe=o("VanConfig"),sKe=o(" (VAN model)"),lKe=l(),dg=a("li"),wte=a("strong"),iKe=o("vilt"),dKe=o(" \u2014 "),US=a("a"),cKe=o("ViltConfig"),fKe=o(" (ViLT model)"),mKe=l(),cg=a("li"),Ate=a("strong"),gKe=o("vision-encoder-decoder"),hKe=o(" \u2014 "),JS=a("a"),pKe=o("VisionEncoderDecoderConfig"),_Ke=o(" (Vision Encoder decoder model)"),uKe=l(),fg=a("li"),yte=a("strong"),bKe=o("vision-text-dual-encoder"),vKe=o(" \u2014 "),YS=a("a"),FKe=o("VisionTextDualEncoderConfig"),TKe=o(" (VisionTextDualEncoder model)"),MKe=l(),mg=a("li"),Lte=a("strong"),EKe=o("visual_bert"),CKe=o(" \u2014 "),KS=a("a"),wKe=o("VisualBertConfig"),AKe=o(" (VisualBERT model)"),yKe=l(),gg=a("li"),xte=a("strong"),LKe=o("vit"),xKe=o(" \u2014 "),ZS=a("a"),$Ke=o("ViTConfig"),kKe=o(" (ViT model)"),SKe=l(),hg=a("li"),$te=a("strong"),RKe=o("vit_mae"),PKe=o(" \u2014 "),eR=a("a"),BKe=o("ViTMAEConfig"),IKe=o(" (ViTMAE model)"),NKe=l(),pg=a("li"),kte=a("strong"),qKe=o("wav2vec2"),jKe=o(" \u2014 "),oR=a("a"),DKe=o("Wav2Vec2Config"),GKe=o(" (Wav2Vec2 model)"),OKe=l(),_g=a("li"),Ste=a("strong"),VKe=o("wav2vec2-conformer"),XKe=o(" \u2014 "),rR=a("a"),zKe=o("Wav2Vec2ConformerConfig"),WKe=o(" (Wav2Vec2-Conformer model)"),QKe=l(),ug=a("li"),Rte=a("strong"),HKe=o("wavlm"),UKe=o(" \u2014 "),tR=a("a"),JKe=o("WavLMConfig"),YKe=o(" (WavLM model)"),KKe=l(),bg=a("li"),Pte=a("strong"),ZKe=o("xglm"),eZe=o(" \u2014 "),aR=a("a"),oZe=o("XGLMConfig"),rZe=o(" (XGLM model)"),tZe=l(),vg=a("li"),Bte=a("strong"),aZe=o("xlm"),nZe=o(" \u2014 "),nR=a("a"),sZe=o("XLMConfig"),lZe=o(" (XLM model)"),iZe=l(),Fg=a("li"),Ite=a("strong"),dZe=o("xlm-prophetnet"),cZe=o(" \u2014 "),sR=a("a"),fZe=o("XLMProphetNetConfig"),mZe=o(" (XLM-ProphetNet model)"),gZe=l(),Tg=a("li"),Nte=a("strong"),hZe=o("xlm-roberta"),pZe=o(" \u2014 "),lR=a("a"),_Ze=o("XLMRobertaConfig"),uZe=o(" (XLM-RoBERTa model)"),bZe=l(),Mg=a("li"),qte=a("strong"),vZe=o("xlm-roberta-xl"),FZe=o(" \u2014 "),iR=a("a"),TZe=o("XLMRobertaXLConfig"),MZe=o(" (XLM-RoBERTa-XL model)"),EZe=l(),Eg=a("li"),jte=a("strong"),CZe=o("xlnet"),wZe=o(" \u2014 "),dR=a("a"),AZe=o("XLNetConfig"),yZe=o(" (XLNet model)"),LZe=l(),Cg=a("li"),Dte=a("strong"),xZe=o("yolos"),$Ze=o(" \u2014 "),cR=a("a"),kZe=o("YolosConfig"),SZe=o(" (YOLOS model)"),RZe=l(),wg=a("li"),Gte=a("strong"),PZe=o("yoso"),BZe=o(" \u2014 "),fR=a("a"),IZe=o("YosoConfig"),NZe=o(" (YOSO model)"),qZe=l(),F(Ag.$$.fragment),jZe=l(),yg=a("div"),F(z6.$$.fragment),DZe=l(),Ote=a("p"),GZe=o("Register a new configuration for this class."),Jqe=l(),Ei=a("h2"),Lg=a("a"),Vte=a("span"),F(W6.$$.fragment),OZe=l(),Xte=a("span"),VZe=o("AutoTokenizer"),Yqe=l(),wo=a("div"),F(Q6.$$.fragment),XZe=l(),H6=a("p"),zZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mR=a("a"),WZe=o("AutoTokenizer.from_pretrained()"),QZe=o(" class method."),HZe=l(),U6=a("p"),UZe=o("This class cannot be instantiated directly using "),zte=a("code"),JZe=o("__init__()"),YZe=o(" (throws an error)."),KZe=l(),Cr=a("div"),F(J6.$$.fragment),ZZe=l(),Wte=a("p"),eeo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),oeo=l(),ya=a("p"),reo=o("The tokenizer class to instantiate is selected based on the "),Qte=a("code"),teo=o("model_type"),aeo=o(` property of the config object (either
passed as an argument or loaded from `),Hte=a("code"),neo=o("pretrained_model_name_or_path"),seo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ute=a("code"),leo=o("pretrained_model_name_or_path"),ieo=o(":"),deo=l(),k=a("ul"),Sn=a("li"),Jte=a("strong"),ceo=o("albert"),feo=o(" \u2014 "),gR=a("a"),meo=o("AlbertTokenizer"),geo=o(" or "),hR=a("a"),heo=o("AlbertTokenizerFast"),peo=o(" (ALBERT model)"),_eo=l(),Rn=a("li"),Yte=a("strong"),ueo=o("bart"),beo=o(" \u2014 "),pR=a("a"),veo=o("BartTokenizer"),Feo=o(" or "),_R=a("a"),Teo=o("BartTokenizerFast"),Meo=o(" (BART model)"),Eeo=l(),Pn=a("li"),Kte=a("strong"),Ceo=o("barthez"),weo=o(" \u2014 "),uR=a("a"),Aeo=o("BarthezTokenizer"),yeo=o(" or "),bR=a("a"),Leo=o("BarthezTokenizerFast"),xeo=o(" (BARThez model)"),$eo=l(),xg=a("li"),Zte=a("strong"),keo=o("bartpho"),Seo=o(" \u2014 "),vR=a("a"),Reo=o("BartphoTokenizer"),Peo=o(" (BARTpho model)"),Beo=l(),Bn=a("li"),eae=a("strong"),Ieo=o("bert"),Neo=o(" \u2014 "),FR=a("a"),qeo=o("BertTokenizer"),jeo=o(" or "),TR=a("a"),Deo=o("BertTokenizerFast"),Geo=o(" (BERT model)"),Oeo=l(),$g=a("li"),oae=a("strong"),Veo=o("bert-generation"),Xeo=o(" \u2014 "),MR=a("a"),zeo=o("BertGenerationTokenizer"),Weo=o(" (Bert Generation model)"),Qeo=l(),kg=a("li"),rae=a("strong"),Heo=o("bert-japanese"),Ueo=o(" \u2014 "),ER=a("a"),Jeo=o("BertJapaneseTokenizer"),Yeo=o(" (BertJapanese model)"),Keo=l(),Sg=a("li"),tae=a("strong"),Zeo=o("bertweet"),eoo=o(" \u2014 "),CR=a("a"),ooo=o("BertweetTokenizer"),roo=o(" (BERTweet model)"),too=l(),In=a("li"),aae=a("strong"),aoo=o("big_bird"),noo=o(" \u2014 "),wR=a("a"),soo=o("BigBirdTokenizer"),loo=o(" or "),AR=a("a"),ioo=o("BigBirdTokenizerFast"),doo=o(" (BigBird model)"),coo=l(),Nn=a("li"),nae=a("strong"),foo=o("bigbird_pegasus"),moo=o(" \u2014 "),yR=a("a"),goo=o("PegasusTokenizer"),hoo=o(" or "),LR=a("a"),poo=o("PegasusTokenizerFast"),_oo=o(" (BigBird-Pegasus model)"),uoo=l(),qn=a("li"),sae=a("strong"),boo=o("blenderbot"),voo=o(" \u2014 "),xR=a("a"),Foo=o("BlenderbotTokenizer"),Too=o(" or "),$R=a("a"),Moo=o("BlenderbotTokenizerFast"),Eoo=o(" (Blenderbot model)"),Coo=l(),Rg=a("li"),lae=a("strong"),woo=o("blenderbot-small"),Aoo=o(" \u2014 "),kR=a("a"),yoo=o("BlenderbotSmallTokenizer"),Loo=o(" (BlenderbotSmall model)"),xoo=l(),Pg=a("li"),iae=a("strong"),$oo=o("byt5"),koo=o(" \u2014 "),SR=a("a"),Soo=o("ByT5Tokenizer"),Roo=o(" (ByT5 model)"),Poo=l(),jn=a("li"),dae=a("strong"),Boo=o("camembert"),Ioo=o(" \u2014 "),RR=a("a"),Noo=o("CamembertTokenizer"),qoo=o(" or "),PR=a("a"),joo=o("CamembertTokenizerFast"),Doo=o(" (CamemBERT model)"),Goo=l(),Bg=a("li"),cae=a("strong"),Ooo=o("canine"),Voo=o(" \u2014 "),BR=a("a"),Xoo=o("CanineTokenizer"),zoo=o(" (CANINE model)"),Woo=l(),Dn=a("li"),fae=a("strong"),Qoo=o("clip"),Hoo=o(" \u2014 "),IR=a("a"),Uoo=o("CLIPTokenizer"),Joo=o(" or "),NR=a("a"),Yoo=o("CLIPTokenizerFast"),Koo=o(" (CLIP model)"),Zoo=l(),Gn=a("li"),mae=a("strong"),ero=o("convbert"),oro=o(" \u2014 "),qR=a("a"),rro=o("ConvBertTokenizer"),tro=o(" or "),jR=a("a"),aro=o("ConvBertTokenizerFast"),nro=o(" (ConvBERT model)"),sro=l(),On=a("li"),gae=a("strong"),lro=o("cpm"),iro=o(" \u2014 "),DR=a("a"),dro=o("CpmTokenizer"),cro=o(" or "),GR=a("a"),fro=o("CpmTokenizerFast"),mro=o(" (CPM model)"),gro=l(),Ig=a("li"),hae=a("strong"),hro=o("ctrl"),pro=o(" \u2014 "),OR=a("a"),_ro=o("CTRLTokenizer"),uro=o(" (CTRL model)"),bro=l(),Vn=a("li"),pae=a("strong"),vro=o("data2vec-text"),Fro=o(" \u2014 "),VR=a("a"),Tro=o("RobertaTokenizer"),Mro=o(" or "),XR=a("a"),Ero=o("RobertaTokenizerFast"),Cro=o(" (Data2VecText model)"),wro=l(),Xn=a("li"),_ae=a("strong"),Aro=o("deberta"),yro=o(" \u2014 "),zR=a("a"),Lro=o("DebertaTokenizer"),xro=o(" or "),WR=a("a"),$ro=o("DebertaTokenizerFast"),kro=o(" (DeBERTa model)"),Sro=l(),zn=a("li"),uae=a("strong"),Rro=o("deberta-v2"),Pro=o(" \u2014 "),QR=a("a"),Bro=o("DebertaV2Tokenizer"),Iro=o(" or "),HR=a("a"),Nro=o("DebertaV2TokenizerFast"),qro=o(" (DeBERTa-v2 model)"),jro=l(),Wn=a("li"),bae=a("strong"),Dro=o("distilbert"),Gro=o(" \u2014 "),UR=a("a"),Oro=o("DistilBertTokenizer"),Vro=o(" or "),JR=a("a"),Xro=o("DistilBertTokenizerFast"),zro=o(" (DistilBERT model)"),Wro=l(),Qn=a("li"),vae=a("strong"),Qro=o("dpr"),Hro=o(" \u2014 "),YR=a("a"),Uro=o("DPRQuestionEncoderTokenizer"),Jro=o(" or "),KR=a("a"),Yro=o("DPRQuestionEncoderTokenizerFast"),Kro=o(" (DPR model)"),Zro=l(),Hn=a("li"),Fae=a("strong"),eto=o("electra"),oto=o(" \u2014 "),ZR=a("a"),rto=o("ElectraTokenizer"),tto=o(" or "),eP=a("a"),ato=o("ElectraTokenizerFast"),nto=o(" (ELECTRA model)"),sto=l(),Ng=a("li"),Tae=a("strong"),lto=o("flaubert"),ito=o(" \u2014 "),oP=a("a"),dto=o("FlaubertTokenizer"),cto=o(" (FlauBERT model)"),fto=l(),Un=a("li"),Mae=a("strong"),mto=o("fnet"),gto=o(" \u2014 "),rP=a("a"),hto=o("FNetTokenizer"),pto=o(" or "),tP=a("a"),_to=o("FNetTokenizerFast"),uto=o(" (FNet model)"),bto=l(),qg=a("li"),Eae=a("strong"),vto=o("fsmt"),Fto=o(" \u2014 "),aP=a("a"),Tto=o("FSMTTokenizer"),Mto=o(" (FairSeq Machine-Translation model)"),Eto=l(),Jn=a("li"),Cae=a("strong"),Cto=o("funnel"),wto=o(" \u2014 "),nP=a("a"),Ato=o("FunnelTokenizer"),yto=o(" or "),sP=a("a"),Lto=o("FunnelTokenizerFast"),xto=o(" (Funnel Transformer model)"),$to=l(),Yn=a("li"),wae=a("strong"),kto=o("gpt2"),Sto=o(" \u2014 "),lP=a("a"),Rto=o("GPT2Tokenizer"),Pto=o(" or "),iP=a("a"),Bto=o("GPT2TokenizerFast"),Ito=o(" (OpenAI GPT-2 model)"),Nto=l(),Kn=a("li"),Aae=a("strong"),qto=o("gpt_neo"),jto=o(" \u2014 "),dP=a("a"),Dto=o("GPT2Tokenizer"),Gto=o(" or "),cP=a("a"),Oto=o("GPT2TokenizerFast"),Vto=o(" (GPT Neo model)"),Xto=l(),jg=a("li"),yae=a("strong"),zto=o("gpt_neox"),Wto=o(" \u2014 "),fP=a("a"),Qto=o("GPTNeoXTokenizerFast"),Hto=o(" (GPT NeoX model)"),Uto=l(),Zn=a("li"),Lae=a("strong"),Jto=o("gptj"),Yto=o(" \u2014 "),mP=a("a"),Kto=o("GPT2Tokenizer"),Zto=o(" or "),gP=a("a"),eao=o("GPT2TokenizerFast"),oao=o(" (GPT-J model)"),rao=l(),es=a("li"),xae=a("strong"),tao=o("herbert"),aao=o(" \u2014 "),hP=a("a"),nao=o("HerbertTokenizer"),sao=o(" or "),pP=a("a"),lao=o("HerbertTokenizerFast"),iao=o(" (HerBERT model)"),dao=l(),Dg=a("li"),$ae=a("strong"),cao=o("hubert"),fao=o(" \u2014 "),_P=a("a"),mao=o("Wav2Vec2CTCTokenizer"),gao=o(" (Hubert model)"),hao=l(),os=a("li"),kae=a("strong"),pao=o("ibert"),_ao=o(" \u2014 "),uP=a("a"),uao=o("RobertaTokenizer"),bao=o(" or "),bP=a("a"),vao=o("RobertaTokenizerFast"),Fao=o(" (I-BERT model)"),Tao=l(),rs=a("li"),Sae=a("strong"),Mao=o("layoutlm"),Eao=o(" \u2014 "),vP=a("a"),Cao=o("LayoutLMTokenizer"),wao=o(" or "),FP=a("a"),Aao=o("LayoutLMTokenizerFast"),yao=o(" (LayoutLM model)"),Lao=l(),ts=a("li"),Rae=a("strong"),xao=o("layoutlmv2"),$ao=o(" \u2014 "),TP=a("a"),kao=o("LayoutLMv2Tokenizer"),Sao=o(" or "),MP=a("a"),Rao=o("LayoutLMv2TokenizerFast"),Pao=o(" (LayoutLMv2 model)"),Bao=l(),as=a("li"),Pae=a("strong"),Iao=o("layoutlmv3"),Nao=o(" \u2014 "),EP=a("a"),qao=o("LayoutLMv3Tokenizer"),jao=o(" or "),CP=a("a"),Dao=o("LayoutLMv3TokenizerFast"),Gao=o(" (LayoutLMv3 model)"),Oao=l(),ns=a("li"),Bae=a("strong"),Vao=o("layoutxlm"),Xao=o(" \u2014 "),wP=a("a"),zao=o("LayoutXLMTokenizer"),Wao=o(" or "),AP=a("a"),Qao=o("LayoutXLMTokenizerFast"),Hao=o(" (LayoutXLM model)"),Uao=l(),ss=a("li"),Iae=a("strong"),Jao=o("led"),Yao=o(" \u2014 "),yP=a("a"),Kao=o("LEDTokenizer"),Zao=o(" or "),LP=a("a"),eno=o("LEDTokenizerFast"),ono=o(" (LED model)"),rno=l(),ls=a("li"),Nae=a("strong"),tno=o("longformer"),ano=o(" \u2014 "),xP=a("a"),nno=o("LongformerTokenizer"),sno=o(" or "),$P=a("a"),lno=o("LongformerTokenizerFast"),ino=o(" (Longformer model)"),dno=l(),Gg=a("li"),qae=a("strong"),cno=o("luke"),fno=o(" \u2014 "),kP=a("a"),mno=o("LukeTokenizer"),gno=o(" (LUKE model)"),hno=l(),is=a("li"),jae=a("strong"),pno=o("lxmert"),_no=o(" \u2014 "),SP=a("a"),uno=o("LxmertTokenizer"),bno=o(" or "),RP=a("a"),vno=o("LxmertTokenizerFast"),Fno=o(" (LXMERT model)"),Tno=l(),Og=a("li"),Dae=a("strong"),Mno=o("m2m_100"),Eno=o(" \u2014 "),PP=a("a"),Cno=o("M2M100Tokenizer"),wno=o(" (M2M100 model)"),Ano=l(),Vg=a("li"),Gae=a("strong"),yno=o("marian"),Lno=o(" \u2014 "),BP=a("a"),xno=o("MarianTokenizer"),$no=o(" (Marian model)"),kno=l(),ds=a("li"),Oae=a("strong"),Sno=o("mbart"),Rno=o(" \u2014 "),IP=a("a"),Pno=o("MBartTokenizer"),Bno=o(" or "),NP=a("a"),Ino=o("MBartTokenizerFast"),Nno=o(" (mBART model)"),qno=l(),cs=a("li"),Vae=a("strong"),jno=o("mbart50"),Dno=o(" \u2014 "),qP=a("a"),Gno=o("MBart50Tokenizer"),Ono=o(" or "),jP=a("a"),Vno=o("MBart50TokenizerFast"),Xno=o(" (mBART-50 model)"),zno=l(),fs=a("li"),Xae=a("strong"),Wno=o("megatron-bert"),Qno=o(" \u2014 "),DP=a("a"),Hno=o("BertTokenizer"),Uno=o(" or "),GP=a("a"),Jno=o("BertTokenizerFast"),Yno=o(" (Megatron-BERT model)"),Kno=l(),Xg=a("li"),zae=a("strong"),Zno=o("mluke"),eso=o(" \u2014 "),OP=a("a"),oso=o("MLukeTokenizer"),rso=o(" (mLUKE model)"),tso=l(),ms=a("li"),Wae=a("strong"),aso=o("mobilebert"),nso=o(" \u2014 "),VP=a("a"),sso=o("MobileBertTokenizer"),lso=o(" or "),XP=a("a"),iso=o("MobileBertTokenizerFast"),dso=o(" (MobileBERT model)"),cso=l(),gs=a("li"),Qae=a("strong"),fso=o("mpnet"),mso=o(" \u2014 "),zP=a("a"),gso=o("MPNetTokenizer"),hso=o(" or "),WP=a("a"),pso=o("MPNetTokenizerFast"),_so=o(" (MPNet model)"),uso=l(),hs=a("li"),Hae=a("strong"),bso=o("mt5"),vso=o(" \u2014 "),QP=a("a"),Fso=o("MT5Tokenizer"),Tso=o(" or "),HP=a("a"),Mso=o("MT5TokenizerFast"),Eso=o(" (MT5 model)"),Cso=l(),ps=a("li"),Uae=a("strong"),wso=o("nystromformer"),Aso=o(" \u2014 "),UP=a("a"),yso=o("AlbertTokenizer"),Lso=o(" or "),JP=a("a"),xso=o("AlbertTokenizerFast"),$so=o(" (Nystr\xF6mformer model)"),kso=l(),_s=a("li"),Jae=a("strong"),Sso=o("openai-gpt"),Rso=o(" \u2014 "),YP=a("a"),Pso=o("OpenAIGPTTokenizer"),Bso=o(" or "),KP=a("a"),Iso=o("OpenAIGPTTokenizerFast"),Nso=o(" (OpenAI GPT model)"),qso=l(),zg=a("li"),Yae=a("strong"),jso=o("opt"),Dso=o(" \u2014 "),ZP=a("a"),Gso=o("GPT2Tokenizer"),Oso=o(" (OPT model)"),Vso=l(),us=a("li"),Kae=a("strong"),Xso=o("pegasus"),zso=o(" \u2014 "),eB=a("a"),Wso=o("PegasusTokenizer"),Qso=o(" or "),oB=a("a"),Hso=o("PegasusTokenizerFast"),Uso=o(" (Pegasus model)"),Jso=l(),Wg=a("li"),Zae=a("strong"),Yso=o("perceiver"),Kso=o(" \u2014 "),rB=a("a"),Zso=o("PerceiverTokenizer"),elo=o(" (Perceiver model)"),olo=l(),Qg=a("li"),ene=a("strong"),rlo=o("phobert"),tlo=o(" \u2014 "),tB=a("a"),alo=o("PhobertTokenizer"),nlo=o(" (PhoBERT model)"),slo=l(),Hg=a("li"),one=a("strong"),llo=o("plbart"),ilo=o(" \u2014 "),aB=a("a"),dlo=o("PLBartTokenizer"),clo=o(" (PLBart model)"),flo=l(),Ug=a("li"),rne=a("strong"),mlo=o("prophetnet"),glo=o(" \u2014 "),nB=a("a"),hlo=o("ProphetNetTokenizer"),plo=o(" (ProphetNet model)"),_lo=l(),bs=a("li"),tne=a("strong"),ulo=o("qdqbert"),blo=o(" \u2014 "),sB=a("a"),vlo=o("BertTokenizer"),Flo=o(" or "),lB=a("a"),Tlo=o("BertTokenizerFast"),Mlo=o(" (QDQBert model)"),Elo=l(),Jg=a("li"),ane=a("strong"),Clo=o("rag"),wlo=o(" \u2014 "),iB=a("a"),Alo=o("RagTokenizer"),ylo=o(" (RAG model)"),Llo=l(),vs=a("li"),nne=a("strong"),xlo=o("realm"),$lo=o(" \u2014 "),dB=a("a"),klo=o("RealmTokenizer"),Slo=o(" or "),cB=a("a"),Rlo=o("RealmTokenizerFast"),Plo=o(" (REALM model)"),Blo=l(),Fs=a("li"),sne=a("strong"),Ilo=o("reformer"),Nlo=o(" \u2014 "),fB=a("a"),qlo=o("ReformerTokenizer"),jlo=o(" or "),mB=a("a"),Dlo=o("ReformerTokenizerFast"),Glo=o(" (Reformer model)"),Olo=l(),Ts=a("li"),lne=a("strong"),Vlo=o("rembert"),Xlo=o(" \u2014 "),gB=a("a"),zlo=o("RemBertTokenizer"),Wlo=o(" or "),hB=a("a"),Qlo=o("RemBertTokenizerFast"),Hlo=o(" (RemBERT model)"),Ulo=l(),Ms=a("li"),ine=a("strong"),Jlo=o("retribert"),Ylo=o(" \u2014 "),pB=a("a"),Klo=o("RetriBertTokenizer"),Zlo=o(" or "),_B=a("a"),eio=o("RetriBertTokenizerFast"),oio=o(" (RetriBERT model)"),rio=l(),Es=a("li"),dne=a("strong"),tio=o("roberta"),aio=o(" \u2014 "),uB=a("a"),nio=o("RobertaTokenizer"),sio=o(" or "),bB=a("a"),lio=o("RobertaTokenizerFast"),iio=o(" (RoBERTa model)"),dio=l(),Cs=a("li"),cne=a("strong"),cio=o("roformer"),fio=o(" \u2014 "),vB=a("a"),mio=o("RoFormerTokenizer"),gio=o(" or "),FB=a("a"),hio=o("RoFormerTokenizerFast"),pio=o(" (RoFormer model)"),_io=l(),Yg=a("li"),fne=a("strong"),uio=o("speech_to_text"),bio=o(" \u2014 "),TB=a("a"),vio=o("Speech2TextTokenizer"),Fio=o(" (Speech2Text model)"),Tio=l(),Kg=a("li"),mne=a("strong"),Mio=o("speech_to_text_2"),Eio=o(" \u2014 "),MB=a("a"),Cio=o("Speech2Text2Tokenizer"),wio=o(" (Speech2Text2 model)"),Aio=l(),ws=a("li"),gne=a("strong"),yio=o("splinter"),Lio=o(" \u2014 "),EB=a("a"),xio=o("SplinterTokenizer"),$io=o(" or "),CB=a("a"),kio=o("SplinterTokenizerFast"),Sio=o(" (Splinter model)"),Rio=l(),As=a("li"),hne=a("strong"),Pio=o("squeezebert"),Bio=o(" \u2014 "),wB=a("a"),Iio=o("SqueezeBertTokenizer"),Nio=o(" or "),AB=a("a"),qio=o("SqueezeBertTokenizerFast"),jio=o(" (SqueezeBERT model)"),Dio=l(),ys=a("li"),pne=a("strong"),Gio=o("t5"),Oio=o(" \u2014 "),yB=a("a"),Vio=o("T5Tokenizer"),Xio=o(" or "),LB=a("a"),zio=o("T5TokenizerFast"),Wio=o(" (T5 model)"),Qio=l(),Zg=a("li"),_ne=a("strong"),Hio=o("tapas"),Uio=o(" \u2014 "),xB=a("a"),Jio=o("TapasTokenizer"),Yio=o(" (TAPAS model)"),Kio=l(),eh=a("li"),une=a("strong"),Zio=o("tapex"),edo=o(" \u2014 "),$B=a("a"),odo=o("TapexTokenizer"),rdo=o(" (TAPEX model)"),tdo=l(),oh=a("li"),bne=a("strong"),ado=o("transfo-xl"),ndo=o(" \u2014 "),kB=a("a"),sdo=o("TransfoXLTokenizer"),ldo=o(" (Transformer-XL model)"),ido=l(),Ls=a("li"),vne=a("strong"),ddo=o("visual_bert"),cdo=o(" \u2014 "),SB=a("a"),fdo=o("BertTokenizer"),mdo=o(" or "),RB=a("a"),gdo=o("BertTokenizerFast"),hdo=o(" (VisualBERT model)"),pdo=l(),rh=a("li"),Fne=a("strong"),_do=o("wav2vec2"),udo=o(" \u2014 "),PB=a("a"),bdo=o("Wav2Vec2CTCTokenizer"),vdo=o(" (Wav2Vec2 model)"),Fdo=l(),th=a("li"),Tne=a("strong"),Tdo=o("wav2vec2-conformer"),Mdo=o(" \u2014 "),BB=a("a"),Edo=o("Wav2Vec2CTCTokenizer"),Cdo=o(" (Wav2Vec2-Conformer model)"),wdo=l(),ah=a("li"),Mne=a("strong"),Ado=o("wav2vec2_phoneme"),ydo=o(" \u2014 "),IB=a("a"),Ldo=o("Wav2Vec2PhonemeCTCTokenizer"),xdo=o(" (Wav2Vec2Phoneme model)"),$do=l(),xs=a("li"),Ene=a("strong"),kdo=o("xglm"),Sdo=o(" \u2014 "),NB=a("a"),Rdo=o("XGLMTokenizer"),Pdo=o(" or "),qB=a("a"),Bdo=o("XGLMTokenizerFast"),Ido=o(" (XGLM model)"),Ndo=l(),nh=a("li"),Cne=a("strong"),qdo=o("xlm"),jdo=o(" \u2014 "),jB=a("a"),Ddo=o("XLMTokenizer"),Gdo=o(" (XLM model)"),Odo=l(),sh=a("li"),wne=a("strong"),Vdo=o("xlm-prophetnet"),Xdo=o(" \u2014 "),DB=a("a"),zdo=o("XLMProphetNetTokenizer"),Wdo=o(" (XLM-ProphetNet model)"),Qdo=l(),$s=a("li"),Ane=a("strong"),Hdo=o("xlm-roberta"),Udo=o(" \u2014 "),GB=a("a"),Jdo=o("XLMRobertaTokenizer"),Ydo=o(" or "),OB=a("a"),Kdo=o("XLMRobertaTokenizerFast"),Zdo=o(" (XLM-RoBERTa model)"),eco=l(),ks=a("li"),yne=a("strong"),oco=o("xlm-roberta-xl"),rco=o(" \u2014 "),VB=a("a"),tco=o("RobertaTokenizer"),aco=o(" or "),XB=a("a"),nco=o("RobertaTokenizerFast"),sco=o(" (XLM-RoBERTa-XL model)"),lco=l(),Ss=a("li"),Lne=a("strong"),ico=o("xlnet"),dco=o(" \u2014 "),zB=a("a"),cco=o("XLNetTokenizer"),fco=o(" or "),WB=a("a"),mco=o("XLNetTokenizerFast"),gco=o(" (XLNet model)"),hco=l(),Rs=a("li"),xne=a("strong"),pco=o("yoso"),_co=o(" \u2014 "),QB=a("a"),uco=o("AlbertTokenizer"),bco=o(" or "),HB=a("a"),vco=o("AlbertTokenizerFast"),Fco=o(" (YOSO model)"),Tco=l(),F(lh.$$.fragment),Mco=l(),ih=a("div"),F(Y6.$$.fragment),Eco=l(),$ne=a("p"),Cco=o("Register a new tokenizer in this mapping."),Kqe=l(),Ci=a("h2"),dh=a("a"),kne=a("span"),F(K6.$$.fragment),wco=l(),Sne=a("span"),Aco=o("AutoFeatureExtractor"),Zqe=l(),Ao=a("div"),F(Z6.$$.fragment),yco=l(),ey=a("p"),Lco=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UB=a("a"),xco=o("AutoFeatureExtractor.from_pretrained()"),$co=o(" class method."),kco=l(),oy=a("p"),Sco=o("This class cannot be instantiated directly using "),Rne=a("code"),Rco=o("__init__()"),Pco=o(" (throws an error)."),Bco=l(),He=a("div"),F(ry.$$.fragment),Ico=l(),Pne=a("p"),Nco=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qco=l(),La=a("p"),jco=o("The feature extractor class to instantiate is selected based on the "),Bne=a("code"),Dco=o("model_type"),Gco=o(` property of the config object
(either passed as an argument or loaded from `),Ine=a("code"),Oco=o("pretrained_model_name_or_path"),Vco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Nne=a("code"),Xco=o("pretrained_model_name_or_path"),zco=o(":"),Wco=l(),Y=a("ul"),ch=a("li"),qne=a("strong"),Qco=o("beit"),Hco=o(" \u2014 "),JB=a("a"),Uco=o("BeitFeatureExtractor"),Jco=o(" (BEiT model)"),Yco=l(),fh=a("li"),jne=a("strong"),Kco=o("clip"),Zco=o(" \u2014 "),YB=a("a"),efo=o("CLIPFeatureExtractor"),ofo=o(" (CLIP model)"),rfo=l(),mh=a("li"),Dne=a("strong"),tfo=o("convnext"),afo=o(" \u2014 "),KB=a("a"),nfo=o("ConvNextFeatureExtractor"),sfo=o(" (ConvNeXT model)"),lfo=l(),gh=a("li"),Gne=a("strong"),ifo=o("cvt"),dfo=o(" \u2014 "),ZB=a("a"),cfo=o("ConvNextFeatureExtractor"),ffo=o(" (CvT model)"),mfo=l(),hh=a("li"),One=a("strong"),gfo=o("data2vec-audio"),hfo=o(" \u2014 "),eI=a("a"),pfo=o("Wav2Vec2FeatureExtractor"),_fo=o(" (Data2VecAudio model)"),ufo=l(),ph=a("li"),Vne=a("strong"),bfo=o("data2vec-vision"),vfo=o(" \u2014 "),oI=a("a"),Ffo=o("BeitFeatureExtractor"),Tfo=o(" (Data2VecVision model)"),Mfo=l(),_h=a("li"),Xne=a("strong"),Efo=o("deit"),Cfo=o(" \u2014 "),rI=a("a"),wfo=o("DeiTFeatureExtractor"),Afo=o(" (DeiT model)"),yfo=l(),uh=a("li"),zne=a("strong"),Lfo=o("detr"),xfo=o(" \u2014 "),tI=a("a"),$fo=o("DetrFeatureExtractor"),kfo=o(" (DETR model)"),Sfo=l(),bh=a("li"),Wne=a("strong"),Rfo=o("dpt"),Pfo=o(" \u2014 "),aI=a("a"),Bfo=o("DPTFeatureExtractor"),Ifo=o(" (DPT model)"),Nfo=l(),vh=a("li"),Qne=a("strong"),qfo=o("flava"),jfo=o(" \u2014 "),nI=a("a"),Dfo=o("FlavaFeatureExtractor"),Gfo=o(" (FLAVA model)"),Ofo=l(),Fh=a("li"),Hne=a("strong"),Vfo=o("glpn"),Xfo=o(" \u2014 "),sI=a("a"),zfo=o("GLPNFeatureExtractor"),Wfo=o(" (GLPN model)"),Qfo=l(),Th=a("li"),Une=a("strong"),Hfo=o("hubert"),Ufo=o(" \u2014 "),lI=a("a"),Jfo=o("Wav2Vec2FeatureExtractor"),Yfo=o(" (Hubert model)"),Kfo=l(),Mh=a("li"),Jne=a("strong"),Zfo=o("imagegpt"),emo=o(" \u2014 "),iI=a("a"),omo=o("ImageGPTFeatureExtractor"),rmo=o(" (ImageGPT model)"),tmo=l(),Eh=a("li"),Yne=a("strong"),amo=o("layoutlmv2"),nmo=o(" \u2014 "),dI=a("a"),smo=o("LayoutLMv2FeatureExtractor"),lmo=o(" (LayoutLMv2 model)"),imo=l(),Ch=a("li"),Kne=a("strong"),dmo=o("layoutlmv3"),cmo=o(" \u2014 "),cI=a("a"),fmo=o("LayoutLMv3FeatureExtractor"),mmo=o(" (LayoutLMv3 model)"),gmo=l(),wh=a("li"),Zne=a("strong"),hmo=o("levit"),pmo=o(" \u2014 "),fI=a("a"),_mo=o("LevitFeatureExtractor"),umo=o(" (LeViT model)"),bmo=l(),Ah=a("li"),ese=a("strong"),vmo=o("maskformer"),Fmo=o(" \u2014 "),mI=a("a"),Tmo=o("MaskFormerFeatureExtractor"),Mmo=o(" (MaskFormer model)"),Emo=l(),yh=a("li"),ose=a("strong"),Cmo=o("perceiver"),wmo=o(" \u2014 "),gI=a("a"),Amo=o("PerceiverFeatureExtractor"),ymo=o(" (Perceiver model)"),Lmo=l(),Lh=a("li"),rse=a("strong"),xmo=o("poolformer"),$mo=o(" \u2014 "),hI=a("a"),kmo=o("PoolFormerFeatureExtractor"),Smo=o(" (PoolFormer model)"),Rmo=l(),xh=a("li"),tse=a("strong"),Pmo=o("regnet"),Bmo=o(" \u2014 "),pI=a("a"),Imo=o("ConvNextFeatureExtractor"),Nmo=o(" (RegNet model)"),qmo=l(),$h=a("li"),ase=a("strong"),jmo=o("resnet"),Dmo=o(" \u2014 "),_I=a("a"),Gmo=o("ConvNextFeatureExtractor"),Omo=o(" (ResNet model)"),Vmo=l(),kh=a("li"),nse=a("strong"),Xmo=o("segformer"),zmo=o(" \u2014 "),uI=a("a"),Wmo=o("SegformerFeatureExtractor"),Qmo=o(" (SegFormer model)"),Hmo=l(),Sh=a("li"),sse=a("strong"),Umo=o("speech_to_text"),Jmo=o(" \u2014 "),bI=a("a"),Ymo=o("Speech2TextFeatureExtractor"),Kmo=o(" (Speech2Text model)"),Zmo=l(),Rh=a("li"),lse=a("strong"),ego=o("swin"),ogo=o(" \u2014 "),vI=a("a"),rgo=o("ViTFeatureExtractor"),tgo=o(" (Swin Transformer model)"),ago=l(),Ph=a("li"),ise=a("strong"),ngo=o("van"),sgo=o(" \u2014 "),FI=a("a"),lgo=o("ConvNextFeatureExtractor"),igo=o(" (VAN model)"),dgo=l(),Bh=a("li"),dse=a("strong"),cgo=o("vit"),fgo=o(" \u2014 "),TI=a("a"),mgo=o("ViTFeatureExtractor"),ggo=o(" (ViT model)"),hgo=l(),Ih=a("li"),cse=a("strong"),pgo=o("vit_mae"),_go=o(" \u2014 "),MI=a("a"),ugo=o("ViTFeatureExtractor"),bgo=o(" (ViTMAE model)"),vgo=l(),Nh=a("li"),fse=a("strong"),Fgo=o("wav2vec2"),Tgo=o(" \u2014 "),EI=a("a"),Mgo=o("Wav2Vec2FeatureExtractor"),Ego=o(" (Wav2Vec2 model)"),Cgo=l(),qh=a("li"),mse=a("strong"),wgo=o("wav2vec2-conformer"),Ago=o(" \u2014 "),CI=a("a"),ygo=o("Wav2Vec2FeatureExtractor"),Lgo=o(" (Wav2Vec2-Conformer model)"),xgo=l(),jh=a("li"),gse=a("strong"),$go=o("yolos"),kgo=o(" \u2014 "),wI=a("a"),Sgo=o("YolosFeatureExtractor"),Rgo=o(" (YOLOS model)"),Pgo=l(),F(Dh.$$.fragment),Bgo=l(),F(Gh.$$.fragment),Igo=l(),Oh=a("div"),F(ty.$$.fragment),Ngo=l(),hse=a("p"),qgo=o("Register a new feature extractor for this class."),eje=l(),wi=a("h2"),Vh=a("a"),pse=a("span"),F(ay.$$.fragment),jgo=l(),_se=a("span"),Dgo=o("AutoProcessor"),oje=l(),yo=a("div"),F(ny.$$.fragment),Ggo=l(),sy=a("p"),Ogo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AI=a("a"),Vgo=o("AutoProcessor.from_pretrained()"),Xgo=o(" class method."),zgo=l(),ly=a("p"),Wgo=o("This class cannot be instantiated directly using "),use=a("code"),Qgo=o("__init__()"),Hgo=o(" (throws an error)."),Ugo=l(),Ue=a("div"),F(iy.$$.fragment),Jgo=l(),bse=a("p"),Ygo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Kgo=l(),Ai=a("p"),Zgo=o("The processor class to instantiate is selected based on the "),vse=a("code"),eho=o("model_type"),oho=o(` property of the config object (either
passed as an argument or loaded from `),Fse=a("code"),rho=o("pretrained_model_name_or_path"),tho=o(" if possible):"),aho=l(),he=a("ul"),Xh=a("li"),Tse=a("strong"),nho=o("clip"),sho=o(" \u2014 "),yI=a("a"),lho=o("CLIPProcessor"),iho=o(" (CLIP model)"),dho=l(),zh=a("li"),Mse=a("strong"),cho=o("flava"),fho=o(" \u2014 "),Ese=a("code"),mho=o("FLAVAProcessor"),gho=o(" (FLAVA model)"),hho=l(),Wh=a("li"),Cse=a("strong"),pho=o("layoutlmv2"),_ho=o(" \u2014 "),LI=a("a"),uho=o("LayoutLMv2Processor"),bho=o(" (LayoutLMv2 model)"),vho=l(),Qh=a("li"),wse=a("strong"),Fho=o("layoutlmv3"),Tho=o(" \u2014 "),xI=a("a"),Mho=o("LayoutLMv3Processor"),Eho=o(" (LayoutLMv3 model)"),Cho=l(),Hh=a("li"),Ase=a("strong"),who=o("layoutxlm"),Aho=o(" \u2014 "),$I=a("a"),yho=o("LayoutXLMProcessor"),Lho=o(" (LayoutXLM model)"),xho=l(),Uh=a("li"),yse=a("strong"),$ho=o("sew"),kho=o(" \u2014 "),kI=a("a"),Sho=o("Wav2Vec2Processor"),Rho=o(" (SEW model)"),Pho=l(),Jh=a("li"),Lse=a("strong"),Bho=o("sew-d"),Iho=o(" \u2014 "),SI=a("a"),Nho=o("Wav2Vec2Processor"),qho=o(" (SEW-D model)"),jho=l(),Yh=a("li"),xse=a("strong"),Dho=o("speech_to_text"),Gho=o(" \u2014 "),RI=a("a"),Oho=o("Speech2TextProcessor"),Vho=o(" (Speech2Text model)"),Xho=l(),Kh=a("li"),$se=a("strong"),zho=o("speech_to_text_2"),Who=o(" \u2014 "),PI=a("a"),Qho=o("Speech2Text2Processor"),Hho=o(" (Speech2Text2 model)"),Uho=l(),Zh=a("li"),kse=a("strong"),Jho=o("trocr"),Yho=o(" \u2014 "),BI=a("a"),Kho=o("TrOCRProcessor"),Zho=o(" (TrOCR model)"),epo=l(),ep=a("li"),Sse=a("strong"),opo=o("unispeech"),rpo=o(" \u2014 "),II=a("a"),tpo=o("Wav2Vec2Processor"),apo=o(" (UniSpeech model)"),npo=l(),op=a("li"),Rse=a("strong"),spo=o("unispeech-sat"),lpo=o(" \u2014 "),NI=a("a"),ipo=o("Wav2Vec2Processor"),dpo=o(" (UniSpeechSat model)"),cpo=l(),rp=a("li"),Pse=a("strong"),fpo=o("vilt"),mpo=o(" \u2014 "),qI=a("a"),gpo=o("ViltProcessor"),hpo=o(" (ViLT model)"),ppo=l(),tp=a("li"),Bse=a("strong"),_po=o("vision-text-dual-encoder"),upo=o(" \u2014 "),jI=a("a"),bpo=o("VisionTextDualEncoderProcessor"),vpo=o(" (VisionTextDualEncoder model)"),Fpo=l(),ap=a("li"),Ise=a("strong"),Tpo=o("wav2vec2"),Mpo=o(" \u2014 "),DI=a("a"),Epo=o("Wav2Vec2Processor"),Cpo=o(" (Wav2Vec2 model)"),wpo=l(),np=a("li"),Nse=a("strong"),Apo=o("wav2vec2-conformer"),ypo=o(" \u2014 "),GI=a("a"),Lpo=o("Wav2Vec2Processor"),xpo=o(" (Wav2Vec2-Conformer model)"),$po=l(),sp=a("li"),qse=a("strong"),kpo=o("wavlm"),Spo=o(" \u2014 "),OI=a("a"),Rpo=o("Wav2Vec2Processor"),Ppo=o(" (WavLM model)"),Bpo=l(),F(lp.$$.fragment),Ipo=l(),F(ip.$$.fragment),Npo=l(),dp=a("div"),F(dy.$$.fragment),qpo=l(),jse=a("p"),jpo=o("Register a new processor for this class."),rje=l(),yi=a("h2"),cp=a("a"),Dse=a("span"),F(cy.$$.fragment),Dpo=l(),Gse=a("span"),Gpo=o("AutoModel"),tje=l(),Lo=a("div"),F(fy.$$.fragment),Opo=l(),Li=a("p"),Vpo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VI=a("a"),Xpo=o("from_pretrained()"),zpo=o(" class method or the "),XI=a("a"),Wpo=o("from_config()"),Qpo=o(` class
method.`),Hpo=l(),my=a("p"),Upo=o("This class cannot be instantiated directly using "),Ose=a("code"),Jpo=o("__init__()"),Ypo=o(" (throws an error)."),Kpo=l(),at=a("div"),F(gy.$$.fragment),Zpo=l(),Vse=a("p"),e_o=o("Instantiates one of the base model classes of the library from a configuration."),o_o=l(),xi=a("p"),r_o=o(`Note:
Loading a model from its configuration file does `),Xse=a("strong"),t_o=o("not"),a_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zI=a("a"),n_o=o("from_pretrained()"),s_o=o(" to load the model weights."),l_o=l(),F(fp.$$.fragment),i_o=l(),Je=a("div"),F(hy.$$.fragment),d_o=l(),zse=a("p"),c_o=o("Instantiate one of the base model classes of the library from a pretrained model."),f_o=l(),xa=a("p"),m_o=o("The model class to instantiate is selected based on the "),Wse=a("code"),g_o=o("model_type"),h_o=o(` property of the config object (either
passed as an argument or loaded from `),Qse=a("code"),p_o=o("pretrained_model_name_or_path"),__o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=a("code"),u_o=o("pretrained_model_name_or_path"),b_o=o(":"),v_o=l(),x=a("ul"),mp=a("li"),Use=a("strong"),F_o=o("albert"),T_o=o(" \u2014 "),WI=a("a"),M_o=o("AlbertModel"),E_o=o(" (ALBERT model)"),C_o=l(),gp=a("li"),Jse=a("strong"),w_o=o("bart"),A_o=o(" \u2014 "),QI=a("a"),y_o=o("BartModel"),L_o=o(" (BART model)"),x_o=l(),hp=a("li"),Yse=a("strong"),$_o=o("beit"),k_o=o(" \u2014 "),HI=a("a"),S_o=o("BeitModel"),R_o=o(" (BEiT model)"),P_o=l(),pp=a("li"),Kse=a("strong"),B_o=o("bert"),I_o=o(" \u2014 "),UI=a("a"),N_o=o("BertModel"),q_o=o(" (BERT model)"),j_o=l(),_p=a("li"),Zse=a("strong"),D_o=o("bert-generation"),G_o=o(" \u2014 "),JI=a("a"),O_o=o("BertGenerationEncoder"),V_o=o(" (Bert Generation model)"),X_o=l(),up=a("li"),ele=a("strong"),z_o=o("big_bird"),W_o=o(" \u2014 "),YI=a("a"),Q_o=o("BigBirdModel"),H_o=o(" (BigBird model)"),U_o=l(),bp=a("li"),ole=a("strong"),J_o=o("bigbird_pegasus"),Y_o=o(" \u2014 "),KI=a("a"),K_o=o("BigBirdPegasusModel"),Z_o=o(" (BigBird-Pegasus model)"),euo=l(),vp=a("li"),rle=a("strong"),ouo=o("blenderbot"),ruo=o(" \u2014 "),ZI=a("a"),tuo=o("BlenderbotModel"),auo=o(" (Blenderbot model)"),nuo=l(),Fp=a("li"),tle=a("strong"),suo=o("blenderbot-small"),luo=o(" \u2014 "),eN=a("a"),iuo=o("BlenderbotSmallModel"),duo=o(" (BlenderbotSmall model)"),cuo=l(),Tp=a("li"),ale=a("strong"),fuo=o("camembert"),muo=o(" \u2014 "),oN=a("a"),guo=o("CamembertModel"),huo=o(" (CamemBERT model)"),puo=l(),Mp=a("li"),nle=a("strong"),_uo=o("canine"),uuo=o(" \u2014 "),rN=a("a"),buo=o("CanineModel"),vuo=o(" (CANINE model)"),Fuo=l(),Ep=a("li"),sle=a("strong"),Tuo=o("clip"),Muo=o(" \u2014 "),tN=a("a"),Euo=o("CLIPModel"),Cuo=o(" (CLIP model)"),wuo=l(),Cp=a("li"),lle=a("strong"),Auo=o("convbert"),yuo=o(" \u2014 "),aN=a("a"),Luo=o("ConvBertModel"),xuo=o(" (ConvBERT model)"),$uo=l(),wp=a("li"),ile=a("strong"),kuo=o("convnext"),Suo=o(" \u2014 "),nN=a("a"),Ruo=o("ConvNextModel"),Puo=o(" (ConvNeXT model)"),Buo=l(),Ap=a("li"),dle=a("strong"),Iuo=o("ctrl"),Nuo=o(" \u2014 "),sN=a("a"),quo=o("CTRLModel"),juo=o(" (CTRL model)"),Duo=l(),yp=a("li"),cle=a("strong"),Guo=o("cvt"),Ouo=o(" \u2014 "),lN=a("a"),Vuo=o("CvtModel"),Xuo=o(" (CvT model)"),zuo=l(),Lp=a("li"),fle=a("strong"),Wuo=o("data2vec-audio"),Quo=o(" \u2014 "),iN=a("a"),Huo=o("Data2VecAudioModel"),Uuo=o(" (Data2VecAudio model)"),Juo=l(),xp=a("li"),mle=a("strong"),Yuo=o("data2vec-text"),Kuo=o(" \u2014 "),dN=a("a"),Zuo=o("Data2VecTextModel"),e2o=o(" (Data2VecText model)"),o2o=l(),$p=a("li"),gle=a("strong"),r2o=o("data2vec-vision"),t2o=o(" \u2014 "),cN=a("a"),a2o=o("Data2VecVisionModel"),n2o=o(" (Data2VecVision model)"),s2o=l(),kp=a("li"),hle=a("strong"),l2o=o("deberta"),i2o=o(" \u2014 "),fN=a("a"),d2o=o("DebertaModel"),c2o=o(" (DeBERTa model)"),f2o=l(),Sp=a("li"),ple=a("strong"),m2o=o("deberta-v2"),g2o=o(" \u2014 "),mN=a("a"),h2o=o("DebertaV2Model"),p2o=o(" (DeBERTa-v2 model)"),_2o=l(),Rp=a("li"),_le=a("strong"),u2o=o("decision_transformer"),b2o=o(" \u2014 "),gN=a("a"),v2o=o("DecisionTransformerModel"),F2o=o(" (Decision Transformer model)"),T2o=l(),Pp=a("li"),ule=a("strong"),M2o=o("deit"),E2o=o(" \u2014 "),hN=a("a"),C2o=o("DeiTModel"),w2o=o(" (DeiT model)"),A2o=l(),Bp=a("li"),ble=a("strong"),y2o=o("detr"),L2o=o(" \u2014 "),pN=a("a"),x2o=o("DetrModel"),$2o=o(" (DETR model)"),k2o=l(),Ip=a("li"),vle=a("strong"),S2o=o("distilbert"),R2o=o(" \u2014 "),_N=a("a"),P2o=o("DistilBertModel"),B2o=o(" (DistilBERT model)"),I2o=l(),Np=a("li"),Fle=a("strong"),N2o=o("dpr"),q2o=o(" \u2014 "),uN=a("a"),j2o=o("DPRQuestionEncoder"),D2o=o(" (DPR model)"),G2o=l(),qp=a("li"),Tle=a("strong"),O2o=o("dpt"),V2o=o(" \u2014 "),bN=a("a"),X2o=o("DPTModel"),z2o=o(" (DPT model)"),W2o=l(),jp=a("li"),Mle=a("strong"),Q2o=o("electra"),H2o=o(" \u2014 "),vN=a("a"),U2o=o("ElectraModel"),J2o=o(" (ELECTRA model)"),Y2o=l(),Dp=a("li"),Ele=a("strong"),K2o=o("flaubert"),Z2o=o(" \u2014 "),FN=a("a"),e1o=o("FlaubertModel"),o1o=o(" (FlauBERT model)"),r1o=l(),Gp=a("li"),Cle=a("strong"),t1o=o("flava"),a1o=o(" \u2014 "),TN=a("a"),n1o=o("FlavaModel"),s1o=o(" (FLAVA model)"),l1o=l(),Op=a("li"),wle=a("strong"),i1o=o("fnet"),d1o=o(" \u2014 "),MN=a("a"),c1o=o("FNetModel"),f1o=o(" (FNet model)"),m1o=l(),Vp=a("li"),Ale=a("strong"),g1o=o("fsmt"),h1o=o(" \u2014 "),EN=a("a"),p1o=o("FSMTModel"),_1o=o(" (FairSeq Machine-Translation model)"),u1o=l(),Ps=a("li"),yle=a("strong"),b1o=o("funnel"),v1o=o(" \u2014 "),CN=a("a"),F1o=o("FunnelModel"),T1o=o(" or "),wN=a("a"),M1o=o("FunnelBaseModel"),E1o=o(" (Funnel Transformer model)"),C1o=l(),Xp=a("li"),Lle=a("strong"),w1o=o("glpn"),A1o=o(" \u2014 "),AN=a("a"),y1o=o("GLPNModel"),L1o=o(" (GLPN model)"),x1o=l(),zp=a("li"),xle=a("strong"),$1o=o("gpt2"),k1o=o(" \u2014 "),yN=a("a"),S1o=o("GPT2Model"),R1o=o(" (OpenAI GPT-2 model)"),P1o=l(),Wp=a("li"),$le=a("strong"),B1o=o("gpt_neo"),I1o=o(" \u2014 "),LN=a("a"),N1o=o("GPTNeoModel"),q1o=o(" (GPT Neo model)"),j1o=l(),Qp=a("li"),kle=a("strong"),D1o=o("gpt_neox"),G1o=o(" \u2014 "),xN=a("a"),O1o=o("GPTNeoXModel"),V1o=o(" (GPT NeoX model)"),X1o=l(),Hp=a("li"),Sle=a("strong"),z1o=o("gptj"),W1o=o(" \u2014 "),$N=a("a"),Q1o=o("GPTJModel"),H1o=o(" (GPT-J model)"),U1o=l(),Up=a("li"),Rle=a("strong"),J1o=o("hubert"),Y1o=o(" \u2014 "),kN=a("a"),K1o=o("HubertModel"),Z1o=o(" (Hubert model)"),e7o=l(),Jp=a("li"),Ple=a("strong"),o7o=o("ibert"),r7o=o(" \u2014 "),SN=a("a"),t7o=o("IBertModel"),a7o=o(" (I-BERT model)"),n7o=l(),Yp=a("li"),Ble=a("strong"),s7o=o("imagegpt"),l7o=o(" \u2014 "),RN=a("a"),i7o=o("ImageGPTModel"),d7o=o(" (ImageGPT model)"),c7o=l(),Kp=a("li"),Ile=a("strong"),f7o=o("layoutlm"),m7o=o(" \u2014 "),PN=a("a"),g7o=o("LayoutLMModel"),h7o=o(" (LayoutLM model)"),p7o=l(),Zp=a("li"),Nle=a("strong"),_7o=o("layoutlmv2"),u7o=o(" \u2014 "),BN=a("a"),b7o=o("LayoutLMv2Model"),v7o=o(" (LayoutLMv2 model)"),F7o=l(),e_=a("li"),qle=a("strong"),T7o=o("layoutlmv3"),M7o=o(" \u2014 "),IN=a("a"),E7o=o("LayoutLMv3Model"),C7o=o(" (LayoutLMv3 model)"),w7o=l(),o_=a("li"),jle=a("strong"),A7o=o("led"),y7o=o(" \u2014 "),NN=a("a"),L7o=o("LEDModel"),x7o=o(" (LED model)"),$7o=l(),r_=a("li"),Dle=a("strong"),k7o=o("levit"),S7o=o(" \u2014 "),qN=a("a"),R7o=o("LevitModel"),P7o=o(" (LeViT model)"),B7o=l(),t_=a("li"),Gle=a("strong"),I7o=o("longformer"),N7o=o(" \u2014 "),jN=a("a"),q7o=o("LongformerModel"),j7o=o(" (Longformer model)"),D7o=l(),a_=a("li"),Ole=a("strong"),G7o=o("luke"),O7o=o(" \u2014 "),DN=a("a"),V7o=o("LukeModel"),X7o=o(" (LUKE model)"),z7o=l(),n_=a("li"),Vle=a("strong"),W7o=o("lxmert"),Q7o=o(" \u2014 "),GN=a("a"),H7o=o("LxmertModel"),U7o=o(" (LXMERT model)"),J7o=l(),s_=a("li"),Xle=a("strong"),Y7o=o("m2m_100"),K7o=o(" \u2014 "),ON=a("a"),Z7o=o("M2M100Model"),ebo=o(" (M2M100 model)"),obo=l(),l_=a("li"),zle=a("strong"),rbo=o("marian"),tbo=o(" \u2014 "),VN=a("a"),abo=o("MarianModel"),nbo=o(" (Marian model)"),sbo=l(),i_=a("li"),Wle=a("strong"),lbo=o("maskformer"),ibo=o(" \u2014 "),XN=a("a"),dbo=o("MaskFormerModel"),cbo=o(" (MaskFormer model)"),fbo=l(),d_=a("li"),Qle=a("strong"),mbo=o("mbart"),gbo=o(" \u2014 "),zN=a("a"),hbo=o("MBartModel"),pbo=o(" (mBART model)"),_bo=l(),c_=a("li"),Hle=a("strong"),ubo=o("megatron-bert"),bbo=o(" \u2014 "),WN=a("a"),vbo=o("MegatronBertModel"),Fbo=o(" (Megatron-BERT model)"),Tbo=l(),f_=a("li"),Ule=a("strong"),Mbo=o("mobilebert"),Ebo=o(" \u2014 "),QN=a("a"),Cbo=o("MobileBertModel"),wbo=o(" (MobileBERT model)"),Abo=l(),m_=a("li"),Jle=a("strong"),ybo=o("mpnet"),Lbo=o(" \u2014 "),HN=a("a"),xbo=o("MPNetModel"),$bo=o(" (MPNet model)"),kbo=l(),g_=a("li"),Yle=a("strong"),Sbo=o("mt5"),Rbo=o(" \u2014 "),UN=a("a"),Pbo=o("MT5Model"),Bbo=o(" (MT5 model)"),Ibo=l(),h_=a("li"),Kle=a("strong"),Nbo=o("nystromformer"),qbo=o(" \u2014 "),JN=a("a"),jbo=o("NystromformerModel"),Dbo=o(" (Nystr\xF6mformer model)"),Gbo=l(),p_=a("li"),Zle=a("strong"),Obo=o("openai-gpt"),Vbo=o(" \u2014 "),YN=a("a"),Xbo=o("OpenAIGPTModel"),zbo=o(" (OpenAI GPT model)"),Wbo=l(),__=a("li"),eie=a("strong"),Qbo=o("opt"),Hbo=o(" \u2014 "),KN=a("a"),Ubo=o("OPTModel"),Jbo=o(" (OPT model)"),Ybo=l(),u_=a("li"),oie=a("strong"),Kbo=o("pegasus"),Zbo=o(" \u2014 "),ZN=a("a"),e4o=o("PegasusModel"),o4o=o(" (Pegasus model)"),r4o=l(),b_=a("li"),rie=a("strong"),t4o=o("perceiver"),a4o=o(" \u2014 "),eq=a("a"),n4o=o("PerceiverModel"),s4o=o(" (Perceiver model)"),l4o=l(),v_=a("li"),tie=a("strong"),i4o=o("plbart"),d4o=o(" \u2014 "),oq=a("a"),c4o=o("PLBartModel"),f4o=o(" (PLBart model)"),m4o=l(),F_=a("li"),aie=a("strong"),g4o=o("poolformer"),h4o=o(" \u2014 "),rq=a("a"),p4o=o("PoolFormerModel"),_4o=o(" (PoolFormer model)"),u4o=l(),T_=a("li"),nie=a("strong"),b4o=o("prophetnet"),v4o=o(" \u2014 "),tq=a("a"),F4o=o("ProphetNetModel"),T4o=o(" (ProphetNet model)"),M4o=l(),M_=a("li"),sie=a("strong"),E4o=o("qdqbert"),C4o=o(" \u2014 "),aq=a("a"),w4o=o("QDQBertModel"),A4o=o(" (QDQBert model)"),y4o=l(),E_=a("li"),lie=a("strong"),L4o=o("reformer"),x4o=o(" \u2014 "),nq=a("a"),$4o=o("ReformerModel"),k4o=o(" (Reformer model)"),S4o=l(),C_=a("li"),iie=a("strong"),R4o=o("regnet"),P4o=o(" \u2014 "),sq=a("a"),B4o=o("RegNetModel"),I4o=o(" (RegNet model)"),N4o=l(),w_=a("li"),die=a("strong"),q4o=o("rembert"),j4o=o(" \u2014 "),lq=a("a"),D4o=o("RemBertModel"),G4o=o(" (RemBERT model)"),O4o=l(),A_=a("li"),cie=a("strong"),V4o=o("resnet"),X4o=o(" \u2014 "),iq=a("a"),z4o=o("ResNetModel"),W4o=o(" (ResNet model)"),Q4o=l(),y_=a("li"),fie=a("strong"),H4o=o("retribert"),U4o=o(" \u2014 "),dq=a("a"),J4o=o("RetriBertModel"),Y4o=o(" (RetriBERT model)"),K4o=l(),L_=a("li"),mie=a("strong"),Z4o=o("roberta"),evo=o(" \u2014 "),cq=a("a"),ovo=o("RobertaModel"),rvo=o(" (RoBERTa model)"),tvo=l(),x_=a("li"),gie=a("strong"),avo=o("roformer"),nvo=o(" \u2014 "),fq=a("a"),svo=o("RoFormerModel"),lvo=o(" (RoFormer model)"),ivo=l(),$_=a("li"),hie=a("strong"),dvo=o("segformer"),cvo=o(" \u2014 "),mq=a("a"),fvo=o("SegformerModel"),mvo=o(" (SegFormer model)"),gvo=l(),k_=a("li"),pie=a("strong"),hvo=o("sew"),pvo=o(" \u2014 "),gq=a("a"),_vo=o("SEWModel"),uvo=o(" (SEW model)"),bvo=l(),S_=a("li"),_ie=a("strong"),vvo=o("sew-d"),Fvo=o(" \u2014 "),hq=a("a"),Tvo=o("SEWDModel"),Mvo=o(" (SEW-D model)"),Evo=l(),R_=a("li"),uie=a("strong"),Cvo=o("speech_to_text"),wvo=o(" \u2014 "),pq=a("a"),Avo=o("Speech2TextModel"),yvo=o(" (Speech2Text model)"),Lvo=l(),P_=a("li"),bie=a("strong"),xvo=o("splinter"),$vo=o(" \u2014 "),_q=a("a"),kvo=o("SplinterModel"),Svo=o(" (Splinter model)"),Rvo=l(),B_=a("li"),vie=a("strong"),Pvo=o("squeezebert"),Bvo=o(" \u2014 "),uq=a("a"),Ivo=o("SqueezeBertModel"),Nvo=o(" (SqueezeBERT model)"),qvo=l(),I_=a("li"),Fie=a("strong"),jvo=o("swin"),Dvo=o(" \u2014 "),bq=a("a"),Gvo=o("SwinModel"),Ovo=o(" (Swin Transformer model)"),Vvo=l(),N_=a("li"),Tie=a("strong"),Xvo=o("t5"),zvo=o(" \u2014 "),vq=a("a"),Wvo=o("T5Model"),Qvo=o(" (T5 model)"),Hvo=l(),q_=a("li"),Mie=a("strong"),Uvo=o("tapas"),Jvo=o(" \u2014 "),Fq=a("a"),Yvo=o("TapasModel"),Kvo=o(" (TAPAS model)"),Zvo=l(),j_=a("li"),Eie=a("strong"),eFo=o("trajectory_transformer"),oFo=o(" \u2014 "),Tq=a("a"),rFo=o("TrajectoryTransformerModel"),tFo=o(" (Trajectory Transformer model)"),aFo=l(),D_=a("li"),Cie=a("strong"),nFo=o("transfo-xl"),sFo=o(" \u2014 "),Mq=a("a"),lFo=o("TransfoXLModel"),iFo=o(" (Transformer-XL model)"),dFo=l(),G_=a("li"),wie=a("strong"),cFo=o("unispeech"),fFo=o(" \u2014 "),Eq=a("a"),mFo=o("UniSpeechModel"),gFo=o(" (UniSpeech model)"),hFo=l(),O_=a("li"),Aie=a("strong"),pFo=o("unispeech-sat"),_Fo=o(" \u2014 "),Cq=a("a"),uFo=o("UniSpeechSatModel"),bFo=o(" (UniSpeechSat model)"),vFo=l(),V_=a("li"),yie=a("strong"),FFo=o("van"),TFo=o(" \u2014 "),wq=a("a"),MFo=o("VanModel"),EFo=o(" (VAN model)"),CFo=l(),X_=a("li"),Lie=a("strong"),wFo=o("vilt"),AFo=o(" \u2014 "),Aq=a("a"),yFo=o("ViltModel"),LFo=o(" (ViLT model)"),xFo=l(),z_=a("li"),xie=a("strong"),$Fo=o("vision-text-dual-encoder"),kFo=o(" \u2014 "),yq=a("a"),SFo=o("VisionTextDualEncoderModel"),RFo=o(" (VisionTextDualEncoder model)"),PFo=l(),W_=a("li"),$ie=a("strong"),BFo=o("visual_bert"),IFo=o(" \u2014 "),Lq=a("a"),NFo=o("VisualBertModel"),qFo=o(" (VisualBERT model)"),jFo=l(),Q_=a("li"),kie=a("strong"),DFo=o("vit"),GFo=o(" \u2014 "),xq=a("a"),OFo=o("ViTModel"),VFo=o(" (ViT model)"),XFo=l(),H_=a("li"),Sie=a("strong"),zFo=o("vit_mae"),WFo=o(" \u2014 "),$q=a("a"),QFo=o("ViTMAEModel"),HFo=o(" (ViTMAE model)"),UFo=l(),U_=a("li"),Rie=a("strong"),JFo=o("wav2vec2"),YFo=o(" \u2014 "),kq=a("a"),KFo=o("Wav2Vec2Model"),ZFo=o(" (Wav2Vec2 model)"),eTo=l(),J_=a("li"),Pie=a("strong"),oTo=o("wav2vec2-conformer"),rTo=o(" \u2014 "),Sq=a("a"),tTo=o("Wav2Vec2ConformerModel"),aTo=o(" (Wav2Vec2-Conformer model)"),nTo=l(),Y_=a("li"),Bie=a("strong"),sTo=o("wavlm"),lTo=o(" \u2014 "),Rq=a("a"),iTo=o("WavLMModel"),dTo=o(" (WavLM model)"),cTo=l(),K_=a("li"),Iie=a("strong"),fTo=o("xglm"),mTo=o(" \u2014 "),Pq=a("a"),gTo=o("XGLMModel"),hTo=o(" (XGLM model)"),pTo=l(),Z_=a("li"),Nie=a("strong"),_To=o("xlm"),uTo=o(" \u2014 "),Bq=a("a"),bTo=o("XLMModel"),vTo=o(" (XLM model)"),FTo=l(),eu=a("li"),qie=a("strong"),TTo=o("xlm-prophetnet"),MTo=o(" \u2014 "),Iq=a("a"),ETo=o("XLMProphetNetModel"),CTo=o(" (XLM-ProphetNet model)"),wTo=l(),ou=a("li"),jie=a("strong"),ATo=o("xlm-roberta"),yTo=o(" \u2014 "),Nq=a("a"),LTo=o("XLMRobertaModel"),xTo=o(" (XLM-RoBERTa model)"),$To=l(),ru=a("li"),Die=a("strong"),kTo=o("xlm-roberta-xl"),STo=o(" \u2014 "),qq=a("a"),RTo=o("XLMRobertaXLModel"),PTo=o(" (XLM-RoBERTa-XL model)"),BTo=l(),tu=a("li"),Gie=a("strong"),ITo=o("xlnet"),NTo=o(" \u2014 "),jq=a("a"),qTo=o("XLNetModel"),jTo=o(" (XLNet model)"),DTo=l(),au=a("li"),Oie=a("strong"),GTo=o("yolos"),OTo=o(" \u2014 "),Dq=a("a"),VTo=o("YolosModel"),XTo=o(" (YOLOS model)"),zTo=l(),nu=a("li"),Vie=a("strong"),WTo=o("yoso"),QTo=o(" \u2014 "),Gq=a("a"),HTo=o("YosoModel"),UTo=o(" (YOSO model)"),JTo=l(),su=a("p"),YTo=o("The model is set in evaluation mode by default using "),Xie=a("code"),KTo=o("model.eval()"),ZTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=a("code"),eMo=o("model.train()"),oMo=l(),F(lu.$$.fragment),aje=l(),$i=a("h2"),iu=a("a"),Wie=a("span"),F(py.$$.fragment),rMo=l(),Qie=a("span"),tMo=o("AutoModelForPreTraining"),nje=l(),xo=a("div"),F(_y.$$.fragment),aMo=l(),ki=a("p"),nMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oq=a("a"),sMo=o("from_pretrained()"),lMo=o(" class method or the "),Vq=a("a"),iMo=o("from_config()"),dMo=o(` class
method.`),cMo=l(),uy=a("p"),fMo=o("This class cannot be instantiated directly using "),Hie=a("code"),mMo=o("__init__()"),gMo=o(" (throws an error)."),hMo=l(),nt=a("div"),F(by.$$.fragment),pMo=l(),Uie=a("p"),_Mo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uMo=l(),Si=a("p"),bMo=o(`Note:
Loading a model from its configuration file does `),Jie=a("strong"),vMo=o("not"),FMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=a("a"),TMo=o("from_pretrained()"),MMo=o(" to load the model weights."),EMo=l(),F(du.$$.fragment),CMo=l(),Ye=a("div"),F(vy.$$.fragment),wMo=l(),Yie=a("p"),AMo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),yMo=l(),$a=a("p"),LMo=o("The model class to instantiate is selected based on the "),Kie=a("code"),xMo=o("model_type"),$Mo=o(` property of the config object (either
passed as an argument or loaded from `),Zie=a("code"),kMo=o("pretrained_model_name_or_path"),SMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=a("code"),RMo=o("pretrained_model_name_or_path"),PMo=o(":"),BMo=l(),G=a("ul"),cu=a("li"),ode=a("strong"),IMo=o("albert"),NMo=o(" \u2014 "),zq=a("a"),qMo=o("AlbertForPreTraining"),jMo=o(" (ALBERT model)"),DMo=l(),fu=a("li"),rde=a("strong"),GMo=o("bart"),OMo=o(" \u2014 "),Wq=a("a"),VMo=o("BartForConditionalGeneration"),XMo=o(" (BART model)"),zMo=l(),mu=a("li"),tde=a("strong"),WMo=o("bert"),QMo=o(" \u2014 "),Qq=a("a"),HMo=o("BertForPreTraining"),UMo=o(" (BERT model)"),JMo=l(),gu=a("li"),ade=a("strong"),YMo=o("big_bird"),KMo=o(" \u2014 "),Hq=a("a"),ZMo=o("BigBirdForPreTraining"),eEo=o(" (BigBird model)"),oEo=l(),hu=a("li"),nde=a("strong"),rEo=o("camembert"),tEo=o(" \u2014 "),Uq=a("a"),aEo=o("CamembertForMaskedLM"),nEo=o(" (CamemBERT model)"),sEo=l(),pu=a("li"),sde=a("strong"),lEo=o("ctrl"),iEo=o(" \u2014 "),Jq=a("a"),dEo=o("CTRLLMHeadModel"),cEo=o(" (CTRL model)"),fEo=l(),_u=a("li"),lde=a("strong"),mEo=o("data2vec-text"),gEo=o(" \u2014 "),Yq=a("a"),hEo=o("Data2VecTextForMaskedLM"),pEo=o(" (Data2VecText model)"),_Eo=l(),uu=a("li"),ide=a("strong"),uEo=o("deberta"),bEo=o(" \u2014 "),Kq=a("a"),vEo=o("DebertaForMaskedLM"),FEo=o(" (DeBERTa model)"),TEo=l(),bu=a("li"),dde=a("strong"),MEo=o("deberta-v2"),EEo=o(" \u2014 "),Zq=a("a"),CEo=o("DebertaV2ForMaskedLM"),wEo=o(" (DeBERTa-v2 model)"),AEo=l(),vu=a("li"),cde=a("strong"),yEo=o("distilbert"),LEo=o(" \u2014 "),ej=a("a"),xEo=o("DistilBertForMaskedLM"),$Eo=o(" (DistilBERT model)"),kEo=l(),Fu=a("li"),fde=a("strong"),SEo=o("electra"),REo=o(" \u2014 "),oj=a("a"),PEo=o("ElectraForPreTraining"),BEo=o(" (ELECTRA model)"),IEo=l(),Tu=a("li"),mde=a("strong"),NEo=o("flaubert"),qEo=o(" \u2014 "),rj=a("a"),jEo=o("FlaubertWithLMHeadModel"),DEo=o(" (FlauBERT model)"),GEo=l(),Mu=a("li"),gde=a("strong"),OEo=o("flava"),VEo=o(" \u2014 "),tj=a("a"),XEo=o("FlavaForPreTraining"),zEo=o(" (FLAVA model)"),WEo=l(),Eu=a("li"),hde=a("strong"),QEo=o("fnet"),HEo=o(" \u2014 "),aj=a("a"),UEo=o("FNetForPreTraining"),JEo=o(" (FNet model)"),YEo=l(),Cu=a("li"),pde=a("strong"),KEo=o("fsmt"),ZEo=o(" \u2014 "),nj=a("a"),eCo=o("FSMTForConditionalGeneration"),oCo=o(" (FairSeq Machine-Translation model)"),rCo=l(),wu=a("li"),_de=a("strong"),tCo=o("funnel"),aCo=o(" \u2014 "),sj=a("a"),nCo=o("FunnelForPreTraining"),sCo=o(" (Funnel Transformer model)"),lCo=l(),Au=a("li"),ude=a("strong"),iCo=o("gpt2"),dCo=o(" \u2014 "),lj=a("a"),cCo=o("GPT2LMHeadModel"),fCo=o(" (OpenAI GPT-2 model)"),mCo=l(),yu=a("li"),bde=a("strong"),gCo=o("ibert"),hCo=o(" \u2014 "),ij=a("a"),pCo=o("IBertForMaskedLM"),_Co=o(" (I-BERT model)"),uCo=l(),Lu=a("li"),vde=a("strong"),bCo=o("layoutlm"),vCo=o(" \u2014 "),dj=a("a"),FCo=o("LayoutLMForMaskedLM"),TCo=o(" (LayoutLM model)"),MCo=l(),xu=a("li"),Fde=a("strong"),ECo=o("longformer"),CCo=o(" \u2014 "),cj=a("a"),wCo=o("LongformerForMaskedLM"),ACo=o(" (Longformer model)"),yCo=l(),$u=a("li"),Tde=a("strong"),LCo=o("lxmert"),xCo=o(" \u2014 "),fj=a("a"),$Co=o("LxmertForPreTraining"),kCo=o(" (LXMERT model)"),SCo=l(),ku=a("li"),Mde=a("strong"),RCo=o("megatron-bert"),PCo=o(" \u2014 "),mj=a("a"),BCo=o("MegatronBertForPreTraining"),ICo=o(" (Megatron-BERT model)"),NCo=l(),Su=a("li"),Ede=a("strong"),qCo=o("mobilebert"),jCo=o(" \u2014 "),gj=a("a"),DCo=o("MobileBertForPreTraining"),GCo=o(" (MobileBERT model)"),OCo=l(),Ru=a("li"),Cde=a("strong"),VCo=o("mpnet"),XCo=o(" \u2014 "),hj=a("a"),zCo=o("MPNetForMaskedLM"),WCo=o(" (MPNet model)"),QCo=l(),Pu=a("li"),wde=a("strong"),HCo=o("openai-gpt"),UCo=o(" \u2014 "),pj=a("a"),JCo=o("OpenAIGPTLMHeadModel"),YCo=o(" (OpenAI GPT model)"),KCo=l(),Bu=a("li"),Ade=a("strong"),ZCo=o("retribert"),e5o=o(" \u2014 "),_j=a("a"),o5o=o("RetriBertModel"),r5o=o(" (RetriBERT model)"),t5o=l(),Iu=a("li"),yde=a("strong"),a5o=o("roberta"),n5o=o(" \u2014 "),uj=a("a"),s5o=o("RobertaForMaskedLM"),l5o=o(" (RoBERTa model)"),i5o=l(),Nu=a("li"),Lde=a("strong"),d5o=o("splinter"),c5o=o(" \u2014 "),bj=a("a"),f5o=o("SplinterForPreTraining"),m5o=o(" (Splinter model)"),g5o=l(),qu=a("li"),xde=a("strong"),h5o=o("squeezebert"),p5o=o(" \u2014 "),vj=a("a"),_5o=o("SqueezeBertForMaskedLM"),u5o=o(" (SqueezeBERT model)"),b5o=l(),ju=a("li"),$de=a("strong"),v5o=o("t5"),F5o=o(" \u2014 "),Fj=a("a"),T5o=o("T5ForConditionalGeneration"),M5o=o(" (T5 model)"),E5o=l(),Du=a("li"),kde=a("strong"),C5o=o("tapas"),w5o=o(" \u2014 "),Tj=a("a"),A5o=o("TapasForMaskedLM"),y5o=o(" (TAPAS model)"),L5o=l(),Gu=a("li"),Sde=a("strong"),x5o=o("transfo-xl"),$5o=o(" \u2014 "),Mj=a("a"),k5o=o("TransfoXLLMHeadModel"),S5o=o(" (Transformer-XL model)"),R5o=l(),Ou=a("li"),Rde=a("strong"),P5o=o("unispeech"),B5o=o(" \u2014 "),Ej=a("a"),I5o=o("UniSpeechForPreTraining"),N5o=o(" (UniSpeech model)"),q5o=l(),Vu=a("li"),Pde=a("strong"),j5o=o("unispeech-sat"),D5o=o(" \u2014 "),Cj=a("a"),G5o=o("UniSpeechSatForPreTraining"),O5o=o(" (UniSpeechSat model)"),V5o=l(),Xu=a("li"),Bde=a("strong"),X5o=o("visual_bert"),z5o=o(" \u2014 "),wj=a("a"),W5o=o("VisualBertForPreTraining"),Q5o=o(" (VisualBERT model)"),H5o=l(),zu=a("li"),Ide=a("strong"),U5o=o("vit_mae"),J5o=o(" \u2014 "),Aj=a("a"),Y5o=o("ViTMAEForPreTraining"),K5o=o(" (ViTMAE model)"),Z5o=l(),Wu=a("li"),Nde=a("strong"),e3o=o("wav2vec2"),o3o=o(" \u2014 "),yj=a("a"),r3o=o("Wav2Vec2ForPreTraining"),t3o=o(" (Wav2Vec2 model)"),a3o=l(),Qu=a("li"),qde=a("strong"),n3o=o("wav2vec2-conformer"),s3o=o(" \u2014 "),Lj=a("a"),l3o=o("Wav2Vec2ConformerForPreTraining"),i3o=o(" (Wav2Vec2-Conformer model)"),d3o=l(),Hu=a("li"),jde=a("strong"),c3o=o("xlm"),f3o=o(" \u2014 "),xj=a("a"),m3o=o("XLMWithLMHeadModel"),g3o=o(" (XLM model)"),h3o=l(),Uu=a("li"),Dde=a("strong"),p3o=o("xlm-roberta"),_3o=o(" \u2014 "),$j=a("a"),u3o=o("XLMRobertaForMaskedLM"),b3o=o(" (XLM-RoBERTa model)"),v3o=l(),Ju=a("li"),Gde=a("strong"),F3o=o("xlm-roberta-xl"),T3o=o(" \u2014 "),kj=a("a"),M3o=o("XLMRobertaXLForMaskedLM"),E3o=o(" (XLM-RoBERTa-XL model)"),C3o=l(),Yu=a("li"),Ode=a("strong"),w3o=o("xlnet"),A3o=o(" \u2014 "),Sj=a("a"),y3o=o("XLNetLMHeadModel"),L3o=o(" (XLNet model)"),x3o=l(),Ku=a("p"),$3o=o("The model is set in evaluation mode by default using "),Vde=a("code"),k3o=o("model.eval()"),S3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=a("code"),R3o=o("model.train()"),P3o=l(),F(Zu.$$.fragment),sje=l(),Ri=a("h2"),e2=a("a"),zde=a("span"),F(Fy.$$.fragment),B3o=l(),Wde=a("span"),I3o=o("AutoModelForCausalLM"),lje=l(),$o=a("div"),F(Ty.$$.fragment),N3o=l(),Pi=a("p"),q3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rj=a("a"),j3o=o("from_pretrained()"),D3o=o(" class method or the "),Pj=a("a"),G3o=o("from_config()"),O3o=o(` class
method.`),V3o=l(),My=a("p"),X3o=o("This class cannot be instantiated directly using "),Qde=a("code"),z3o=o("__init__()"),W3o=o(" (throws an error)."),Q3o=l(),st=a("div"),F(Ey.$$.fragment),H3o=l(),Hde=a("p"),U3o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),J3o=l(),Bi=a("p"),Y3o=o(`Note:
Loading a model from its configuration file does `),Ude=a("strong"),K3o=o("not"),Z3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bj=a("a"),e0o=o("from_pretrained()"),o0o=o(" to load the model weights."),r0o=l(),F(o2.$$.fragment),t0o=l(),Ke=a("div"),F(Cy.$$.fragment),a0o=l(),Jde=a("p"),n0o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s0o=l(),ka=a("p"),l0o=o("The model class to instantiate is selected based on the "),Yde=a("code"),i0o=o("model_type"),d0o=o(` property of the config object (either
passed as an argument or loaded from `),Kde=a("code"),c0o=o("pretrained_model_name_or_path"),f0o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=a("code"),m0o=o("pretrained_model_name_or_path"),g0o=o(":"),h0o=l(),z=a("ul"),r2=a("li"),ece=a("strong"),p0o=o("bart"),_0o=o(" \u2014 "),Ij=a("a"),u0o=o("BartForCausalLM"),b0o=o(" (BART model)"),v0o=l(),t2=a("li"),oce=a("strong"),F0o=o("bert"),T0o=o(" \u2014 "),Nj=a("a"),M0o=o("BertLMHeadModel"),E0o=o(" (BERT model)"),C0o=l(),a2=a("li"),rce=a("strong"),w0o=o("bert-generation"),A0o=o(" \u2014 "),qj=a("a"),y0o=o("BertGenerationDecoder"),L0o=o(" (Bert Generation model)"),x0o=l(),n2=a("li"),tce=a("strong"),$0o=o("big_bird"),k0o=o(" \u2014 "),jj=a("a"),S0o=o("BigBirdForCausalLM"),R0o=o(" (BigBird model)"),P0o=l(),s2=a("li"),ace=a("strong"),B0o=o("bigbird_pegasus"),I0o=o(" \u2014 "),Dj=a("a"),N0o=o("BigBirdPegasusForCausalLM"),q0o=o(" (BigBird-Pegasus model)"),j0o=l(),l2=a("li"),nce=a("strong"),D0o=o("blenderbot"),G0o=o(" \u2014 "),Gj=a("a"),O0o=o("BlenderbotForCausalLM"),V0o=o(" (Blenderbot model)"),X0o=l(),i2=a("li"),sce=a("strong"),z0o=o("blenderbot-small"),W0o=o(" \u2014 "),Oj=a("a"),Q0o=o("BlenderbotSmallForCausalLM"),H0o=o(" (BlenderbotSmall model)"),U0o=l(),d2=a("li"),lce=a("strong"),J0o=o("camembert"),Y0o=o(" \u2014 "),Vj=a("a"),K0o=o("CamembertForCausalLM"),Z0o=o(" (CamemBERT model)"),ewo=l(),c2=a("li"),ice=a("strong"),owo=o("ctrl"),rwo=o(" \u2014 "),Xj=a("a"),two=o("CTRLLMHeadModel"),awo=o(" (CTRL model)"),nwo=l(),f2=a("li"),dce=a("strong"),swo=o("data2vec-text"),lwo=o(" \u2014 "),zj=a("a"),iwo=o("Data2VecTextForCausalLM"),dwo=o(" (Data2VecText model)"),cwo=l(),m2=a("li"),cce=a("strong"),fwo=o("electra"),mwo=o(" \u2014 "),Wj=a("a"),gwo=o("ElectraForCausalLM"),hwo=o(" (ELECTRA model)"),pwo=l(),g2=a("li"),fce=a("strong"),_wo=o("gpt2"),uwo=o(" \u2014 "),Qj=a("a"),bwo=o("GPT2LMHeadModel"),vwo=o(" (OpenAI GPT-2 model)"),Fwo=l(),h2=a("li"),mce=a("strong"),Two=o("gpt_neo"),Mwo=o(" \u2014 "),Hj=a("a"),Ewo=o("GPTNeoForCausalLM"),Cwo=o(" (GPT Neo model)"),wwo=l(),p2=a("li"),gce=a("strong"),Awo=o("gpt_neox"),ywo=o(" \u2014 "),Uj=a("a"),Lwo=o("GPTNeoXForCausalLM"),xwo=o(" (GPT NeoX model)"),$wo=l(),_2=a("li"),hce=a("strong"),kwo=o("gptj"),Swo=o(" \u2014 "),Jj=a("a"),Rwo=o("GPTJForCausalLM"),Pwo=o(" (GPT-J model)"),Bwo=l(),u2=a("li"),pce=a("strong"),Iwo=o("marian"),Nwo=o(" \u2014 "),Yj=a("a"),qwo=o("MarianForCausalLM"),jwo=o(" (Marian model)"),Dwo=l(),b2=a("li"),_ce=a("strong"),Gwo=o("mbart"),Owo=o(" \u2014 "),Kj=a("a"),Vwo=o("MBartForCausalLM"),Xwo=o(" (mBART model)"),zwo=l(),v2=a("li"),uce=a("strong"),Wwo=o("megatron-bert"),Qwo=o(" \u2014 "),Zj=a("a"),Hwo=o("MegatronBertForCausalLM"),Uwo=o(" (Megatron-BERT model)"),Jwo=l(),F2=a("li"),bce=a("strong"),Ywo=o("openai-gpt"),Kwo=o(" \u2014 "),eD=a("a"),Zwo=o("OpenAIGPTLMHeadModel"),eAo=o(" (OpenAI GPT model)"),oAo=l(),T2=a("li"),vce=a("strong"),rAo=o("opt"),tAo=o(" \u2014 "),oD=a("a"),aAo=o("OPTForCausalLM"),nAo=o(" (OPT model)"),sAo=l(),M2=a("li"),Fce=a("strong"),lAo=o("pegasus"),iAo=o(" \u2014 "),rD=a("a"),dAo=o("PegasusForCausalLM"),cAo=o(" (Pegasus model)"),fAo=l(),E2=a("li"),Tce=a("strong"),mAo=o("plbart"),gAo=o(" \u2014 "),tD=a("a"),hAo=o("PLBartForCausalLM"),pAo=o(" (PLBart model)"),_Ao=l(),C2=a("li"),Mce=a("strong"),uAo=o("prophetnet"),bAo=o(" \u2014 "),aD=a("a"),vAo=o("ProphetNetForCausalLM"),FAo=o(" (ProphetNet model)"),TAo=l(),w2=a("li"),Ece=a("strong"),MAo=o("qdqbert"),EAo=o(" \u2014 "),nD=a("a"),CAo=o("QDQBertLMHeadModel"),wAo=o(" (QDQBert model)"),AAo=l(),A2=a("li"),Cce=a("strong"),yAo=o("reformer"),LAo=o(" \u2014 "),sD=a("a"),xAo=o("ReformerModelWithLMHead"),$Ao=o(" (Reformer model)"),kAo=l(),y2=a("li"),wce=a("strong"),SAo=o("rembert"),RAo=o(" \u2014 "),lD=a("a"),PAo=o("RemBertForCausalLM"),BAo=o(" (RemBERT model)"),IAo=l(),L2=a("li"),Ace=a("strong"),NAo=o("roberta"),qAo=o(" \u2014 "),iD=a("a"),jAo=o("RobertaForCausalLM"),DAo=o(" (RoBERTa model)"),GAo=l(),x2=a("li"),yce=a("strong"),OAo=o("roformer"),VAo=o(" \u2014 "),dD=a("a"),XAo=o("RoFormerForCausalLM"),zAo=o(" (RoFormer model)"),WAo=l(),$2=a("li"),Lce=a("strong"),QAo=o("speech_to_text_2"),HAo=o(" \u2014 "),cD=a("a"),UAo=o("Speech2Text2ForCausalLM"),JAo=o(" (Speech2Text2 model)"),YAo=l(),k2=a("li"),xce=a("strong"),KAo=o("transfo-xl"),ZAo=o(" \u2014 "),fD=a("a"),e6o=o("TransfoXLLMHeadModel"),o6o=o(" (Transformer-XL model)"),r6o=l(),S2=a("li"),$ce=a("strong"),t6o=o("trocr"),a6o=o(" \u2014 "),mD=a("a"),n6o=o("TrOCRForCausalLM"),s6o=o(" (TrOCR model)"),l6o=l(),R2=a("li"),kce=a("strong"),i6o=o("xglm"),d6o=o(" \u2014 "),gD=a("a"),c6o=o("XGLMForCausalLM"),f6o=o(" (XGLM model)"),m6o=l(),P2=a("li"),Sce=a("strong"),g6o=o("xlm"),h6o=o(" \u2014 "),hD=a("a"),p6o=o("XLMWithLMHeadModel"),_6o=o(" (XLM model)"),u6o=l(),B2=a("li"),Rce=a("strong"),b6o=o("xlm-prophetnet"),v6o=o(" \u2014 "),pD=a("a"),F6o=o("XLMProphetNetForCausalLM"),T6o=o(" (XLM-ProphetNet model)"),M6o=l(),I2=a("li"),Pce=a("strong"),E6o=o("xlm-roberta"),C6o=o(" \u2014 "),_D=a("a"),w6o=o("XLMRobertaForCausalLM"),A6o=o(" (XLM-RoBERTa model)"),y6o=l(),N2=a("li"),Bce=a("strong"),L6o=o("xlm-roberta-xl"),x6o=o(" \u2014 "),uD=a("a"),$6o=o("XLMRobertaXLForCausalLM"),k6o=o(" (XLM-RoBERTa-XL model)"),S6o=l(),q2=a("li"),Ice=a("strong"),R6o=o("xlnet"),P6o=o(" \u2014 "),bD=a("a"),B6o=o("XLNetLMHeadModel"),I6o=o(" (XLNet model)"),N6o=l(),j2=a("p"),q6o=o("The model is set in evaluation mode by default using "),Nce=a("code"),j6o=o("model.eval()"),D6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qce=a("code"),G6o=o("model.train()"),O6o=l(),F(D2.$$.fragment),ije=l(),Ii=a("h2"),G2=a("a"),jce=a("span"),F(wy.$$.fragment),V6o=l(),Dce=a("span"),X6o=o("AutoModelForMaskedLM"),dje=l(),ko=a("div"),F(Ay.$$.fragment),z6o=l(),Ni=a("p"),W6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vD=a("a"),Q6o=o("from_pretrained()"),H6o=o(" class method or the "),FD=a("a"),U6o=o("from_config()"),J6o=o(` class
method.`),Y6o=l(),yy=a("p"),K6o=o("This class cannot be instantiated directly using "),Gce=a("code"),Z6o=o("__init__()"),eyo=o(" (throws an error)."),oyo=l(),lt=a("div"),F(Ly.$$.fragment),ryo=l(),Oce=a("p"),tyo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ayo=l(),qi=a("p"),nyo=o(`Note:
Loading a model from its configuration file does `),Vce=a("strong"),syo=o("not"),lyo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=a("a"),iyo=o("from_pretrained()"),dyo=o(" to load the model weights."),cyo=l(),F(O2.$$.fragment),fyo=l(),Ze=a("div"),F(xy.$$.fragment),myo=l(),Xce=a("p"),gyo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),hyo=l(),Sa=a("p"),pyo=o("The model class to instantiate is selected based on the "),zce=a("code"),_yo=o("model_type"),uyo=o(` property of the config object (either
passed as an argument or loaded from `),Wce=a("code"),byo=o("pretrained_model_name_or_path"),vyo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=a("code"),Fyo=o("pretrained_model_name_or_path"),Tyo=o(":"),Myo=l(),W=a("ul"),V2=a("li"),Hce=a("strong"),Eyo=o("albert"),Cyo=o(" \u2014 "),MD=a("a"),wyo=o("AlbertForMaskedLM"),Ayo=o(" (ALBERT model)"),yyo=l(),X2=a("li"),Uce=a("strong"),Lyo=o("bart"),xyo=o(" \u2014 "),ED=a("a"),$yo=o("BartForConditionalGeneration"),kyo=o(" (BART model)"),Syo=l(),z2=a("li"),Jce=a("strong"),Ryo=o("bert"),Pyo=o(" \u2014 "),CD=a("a"),Byo=o("BertForMaskedLM"),Iyo=o(" (BERT model)"),Nyo=l(),W2=a("li"),Yce=a("strong"),qyo=o("big_bird"),jyo=o(" \u2014 "),wD=a("a"),Dyo=o("BigBirdForMaskedLM"),Gyo=o(" (BigBird model)"),Oyo=l(),Q2=a("li"),Kce=a("strong"),Vyo=o("camembert"),Xyo=o(" \u2014 "),AD=a("a"),zyo=o("CamembertForMaskedLM"),Wyo=o(" (CamemBERT model)"),Qyo=l(),H2=a("li"),Zce=a("strong"),Hyo=o("convbert"),Uyo=o(" \u2014 "),yD=a("a"),Jyo=o("ConvBertForMaskedLM"),Yyo=o(" (ConvBERT model)"),Kyo=l(),U2=a("li"),efe=a("strong"),Zyo=o("data2vec-text"),eLo=o(" \u2014 "),LD=a("a"),oLo=o("Data2VecTextForMaskedLM"),rLo=o(" (Data2VecText model)"),tLo=l(),J2=a("li"),ofe=a("strong"),aLo=o("deberta"),nLo=o(" \u2014 "),xD=a("a"),sLo=o("DebertaForMaskedLM"),lLo=o(" (DeBERTa model)"),iLo=l(),Y2=a("li"),rfe=a("strong"),dLo=o("deberta-v2"),cLo=o(" \u2014 "),$D=a("a"),fLo=o("DebertaV2ForMaskedLM"),mLo=o(" (DeBERTa-v2 model)"),gLo=l(),K2=a("li"),tfe=a("strong"),hLo=o("distilbert"),pLo=o(" \u2014 "),kD=a("a"),_Lo=o("DistilBertForMaskedLM"),uLo=o(" (DistilBERT model)"),bLo=l(),Z2=a("li"),afe=a("strong"),vLo=o("electra"),FLo=o(" \u2014 "),SD=a("a"),TLo=o("ElectraForMaskedLM"),MLo=o(" (ELECTRA model)"),ELo=l(),e1=a("li"),nfe=a("strong"),CLo=o("flaubert"),wLo=o(" \u2014 "),RD=a("a"),ALo=o("FlaubertWithLMHeadModel"),yLo=o(" (FlauBERT model)"),LLo=l(),o1=a("li"),sfe=a("strong"),xLo=o("fnet"),$Lo=o(" \u2014 "),PD=a("a"),kLo=o("FNetForMaskedLM"),SLo=o(" (FNet model)"),RLo=l(),r1=a("li"),lfe=a("strong"),PLo=o("funnel"),BLo=o(" \u2014 "),BD=a("a"),ILo=o("FunnelForMaskedLM"),NLo=o(" (Funnel Transformer model)"),qLo=l(),t1=a("li"),ife=a("strong"),jLo=o("ibert"),DLo=o(" \u2014 "),ID=a("a"),GLo=o("IBertForMaskedLM"),OLo=o(" (I-BERT model)"),VLo=l(),a1=a("li"),dfe=a("strong"),XLo=o("layoutlm"),zLo=o(" \u2014 "),ND=a("a"),WLo=o("LayoutLMForMaskedLM"),QLo=o(" (LayoutLM model)"),HLo=l(),n1=a("li"),cfe=a("strong"),ULo=o("longformer"),JLo=o(" \u2014 "),qD=a("a"),YLo=o("LongformerForMaskedLM"),KLo=o(" (Longformer model)"),ZLo=l(),s1=a("li"),ffe=a("strong"),e8o=o("luke"),o8o=o(" \u2014 "),jD=a("a"),r8o=o("LukeForMaskedLM"),t8o=o(" (LUKE model)"),a8o=l(),l1=a("li"),mfe=a("strong"),n8o=o("mbart"),s8o=o(" \u2014 "),DD=a("a"),l8o=o("MBartForConditionalGeneration"),i8o=o(" (mBART model)"),d8o=l(),i1=a("li"),gfe=a("strong"),c8o=o("megatron-bert"),f8o=o(" \u2014 "),GD=a("a"),m8o=o("MegatronBertForMaskedLM"),g8o=o(" (Megatron-BERT model)"),h8o=l(),d1=a("li"),hfe=a("strong"),p8o=o("mobilebert"),_8o=o(" \u2014 "),OD=a("a"),u8o=o("MobileBertForMaskedLM"),b8o=o(" (MobileBERT model)"),v8o=l(),c1=a("li"),pfe=a("strong"),F8o=o("mpnet"),T8o=o(" \u2014 "),VD=a("a"),M8o=o("MPNetForMaskedLM"),E8o=o(" (MPNet model)"),C8o=l(),f1=a("li"),_fe=a("strong"),w8o=o("nystromformer"),A8o=o(" \u2014 "),XD=a("a"),y8o=o("NystromformerForMaskedLM"),L8o=o(" (Nystr\xF6mformer model)"),x8o=l(),m1=a("li"),ufe=a("strong"),$8o=o("perceiver"),k8o=o(" \u2014 "),zD=a("a"),S8o=o("PerceiverForMaskedLM"),R8o=o(" (Perceiver model)"),P8o=l(),g1=a("li"),bfe=a("strong"),B8o=o("qdqbert"),I8o=o(" \u2014 "),WD=a("a"),N8o=o("QDQBertForMaskedLM"),q8o=o(" (QDQBert model)"),j8o=l(),h1=a("li"),vfe=a("strong"),D8o=o("reformer"),G8o=o(" \u2014 "),QD=a("a"),O8o=o("ReformerForMaskedLM"),V8o=o(" (Reformer model)"),X8o=l(),p1=a("li"),Ffe=a("strong"),z8o=o("rembert"),W8o=o(" \u2014 "),HD=a("a"),Q8o=o("RemBertForMaskedLM"),H8o=o(" (RemBERT model)"),U8o=l(),_1=a("li"),Tfe=a("strong"),J8o=o("roberta"),Y8o=o(" \u2014 "),UD=a("a"),K8o=o("RobertaForMaskedLM"),Z8o=o(" (RoBERTa model)"),e9o=l(),u1=a("li"),Mfe=a("strong"),o9o=o("roformer"),r9o=o(" \u2014 "),JD=a("a"),t9o=o("RoFormerForMaskedLM"),a9o=o(" (RoFormer model)"),n9o=l(),b1=a("li"),Efe=a("strong"),s9o=o("squeezebert"),l9o=o(" \u2014 "),YD=a("a"),i9o=o("SqueezeBertForMaskedLM"),d9o=o(" (SqueezeBERT model)"),c9o=l(),v1=a("li"),Cfe=a("strong"),f9o=o("tapas"),m9o=o(" \u2014 "),KD=a("a"),g9o=o("TapasForMaskedLM"),h9o=o(" (TAPAS model)"),p9o=l(),F1=a("li"),wfe=a("strong"),_9o=o("wav2vec2"),u9o=o(" \u2014 "),Afe=a("code"),b9o=o("Wav2Vec2ForMaskedLM"),v9o=o(" (Wav2Vec2 model)"),F9o=l(),T1=a("li"),yfe=a("strong"),T9o=o("xlm"),M9o=o(" \u2014 "),ZD=a("a"),E9o=o("XLMWithLMHeadModel"),C9o=o(" (XLM model)"),w9o=l(),M1=a("li"),Lfe=a("strong"),A9o=o("xlm-roberta"),y9o=o(" \u2014 "),eG=a("a"),L9o=o("XLMRobertaForMaskedLM"),x9o=o(" (XLM-RoBERTa model)"),$9o=l(),E1=a("li"),xfe=a("strong"),k9o=o("xlm-roberta-xl"),S9o=o(" \u2014 "),oG=a("a"),R9o=o("XLMRobertaXLForMaskedLM"),P9o=o(" (XLM-RoBERTa-XL model)"),B9o=l(),C1=a("li"),$fe=a("strong"),I9o=o("yoso"),N9o=o(" \u2014 "),rG=a("a"),q9o=o("YosoForMaskedLM"),j9o=o(" (YOSO model)"),D9o=l(),w1=a("p"),G9o=o("The model is set in evaluation mode by default using "),kfe=a("code"),O9o=o("model.eval()"),V9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=a("code"),X9o=o("model.train()"),z9o=l(),F(A1.$$.fragment),cje=l(),ji=a("h2"),y1=a("a"),Rfe=a("span"),F($y.$$.fragment),W9o=l(),Pfe=a("span"),Q9o=o("AutoModelForSeq2SeqLM"),fje=l(),So=a("div"),F(ky.$$.fragment),H9o=l(),Di=a("p"),U9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tG=a("a"),J9o=o("from_pretrained()"),Y9o=o(" class method or the "),aG=a("a"),K9o=o("from_config()"),Z9o=o(` class
method.`),exo=l(),Sy=a("p"),oxo=o("This class cannot be instantiated directly using "),Bfe=a("code"),rxo=o("__init__()"),txo=o(" (throws an error)."),axo=l(),it=a("div"),F(Ry.$$.fragment),nxo=l(),Ife=a("p"),sxo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lxo=l(),Gi=a("p"),ixo=o(`Note:
Loading a model from its configuration file does `),Nfe=a("strong"),dxo=o("not"),cxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=a("a"),fxo=o("from_pretrained()"),mxo=o(" to load the model weights."),gxo=l(),F(L1.$$.fragment),hxo=l(),eo=a("div"),F(Py.$$.fragment),pxo=l(),qfe=a("p"),_xo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),uxo=l(),Ra=a("p"),bxo=o("The model class to instantiate is selected based on the "),jfe=a("code"),vxo=o("model_type"),Fxo=o(` property of the config object (either
passed as an argument or loaded from `),Dfe=a("code"),Txo=o("pretrained_model_name_or_path"),Mxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=a("code"),Exo=o("pretrained_model_name_or_path"),Cxo=o(":"),wxo=l(),_e=a("ul"),x1=a("li"),Ofe=a("strong"),Axo=o("bart"),yxo=o(" \u2014 "),sG=a("a"),Lxo=o("BartForConditionalGeneration"),xxo=o(" (BART model)"),$xo=l(),$1=a("li"),Vfe=a("strong"),kxo=o("bigbird_pegasus"),Sxo=o(" \u2014 "),lG=a("a"),Rxo=o("BigBirdPegasusForConditionalGeneration"),Pxo=o(" (BigBird-Pegasus model)"),Bxo=l(),k1=a("li"),Xfe=a("strong"),Ixo=o("blenderbot"),Nxo=o(" \u2014 "),iG=a("a"),qxo=o("BlenderbotForConditionalGeneration"),jxo=o(" (Blenderbot model)"),Dxo=l(),S1=a("li"),zfe=a("strong"),Gxo=o("blenderbot-small"),Oxo=o(" \u2014 "),dG=a("a"),Vxo=o("BlenderbotSmallForConditionalGeneration"),Xxo=o(" (BlenderbotSmall model)"),zxo=l(),R1=a("li"),Wfe=a("strong"),Wxo=o("encoder-decoder"),Qxo=o(" \u2014 "),cG=a("a"),Hxo=o("EncoderDecoderModel"),Uxo=o(" (Encoder decoder model)"),Jxo=l(),P1=a("li"),Qfe=a("strong"),Yxo=o("fsmt"),Kxo=o(" \u2014 "),fG=a("a"),Zxo=o("FSMTForConditionalGeneration"),e$o=o(" (FairSeq Machine-Translation model)"),o$o=l(),B1=a("li"),Hfe=a("strong"),r$o=o("led"),t$o=o(" \u2014 "),mG=a("a"),a$o=o("LEDForConditionalGeneration"),n$o=o(" (LED model)"),s$o=l(),I1=a("li"),Ufe=a("strong"),l$o=o("m2m_100"),i$o=o(" \u2014 "),gG=a("a"),d$o=o("M2M100ForConditionalGeneration"),c$o=o(" (M2M100 model)"),f$o=l(),N1=a("li"),Jfe=a("strong"),m$o=o("marian"),g$o=o(" \u2014 "),hG=a("a"),h$o=o("MarianMTModel"),p$o=o(" (Marian model)"),_$o=l(),q1=a("li"),Yfe=a("strong"),u$o=o("mbart"),b$o=o(" \u2014 "),pG=a("a"),v$o=o("MBartForConditionalGeneration"),F$o=o(" (mBART model)"),T$o=l(),j1=a("li"),Kfe=a("strong"),M$o=o("mt5"),E$o=o(" \u2014 "),_G=a("a"),C$o=o("MT5ForConditionalGeneration"),w$o=o(" (MT5 model)"),A$o=l(),D1=a("li"),Zfe=a("strong"),y$o=o("pegasus"),L$o=o(" \u2014 "),uG=a("a"),x$o=o("PegasusForConditionalGeneration"),$$o=o(" (Pegasus model)"),k$o=l(),G1=a("li"),eme=a("strong"),S$o=o("plbart"),R$o=o(" \u2014 "),bG=a("a"),P$o=o("PLBartForConditionalGeneration"),B$o=o(" (PLBart model)"),I$o=l(),O1=a("li"),ome=a("strong"),N$o=o("prophetnet"),q$o=o(" \u2014 "),vG=a("a"),j$o=o("ProphetNetForConditionalGeneration"),D$o=o(" (ProphetNet model)"),G$o=l(),V1=a("li"),rme=a("strong"),O$o=o("t5"),V$o=o(" \u2014 "),FG=a("a"),X$o=o("T5ForConditionalGeneration"),z$o=o(" (T5 model)"),W$o=l(),X1=a("li"),tme=a("strong"),Q$o=o("xlm-prophetnet"),H$o=o(" \u2014 "),TG=a("a"),U$o=o("XLMProphetNetForConditionalGeneration"),J$o=o(" (XLM-ProphetNet model)"),Y$o=l(),z1=a("p"),K$o=o("The model is set in evaluation mode by default using "),ame=a("code"),Z$o=o("model.eval()"),eko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=a("code"),oko=o("model.train()"),rko=l(),F(W1.$$.fragment),mje=l(),Oi=a("h2"),Q1=a("a"),sme=a("span"),F(By.$$.fragment),tko=l(),lme=a("span"),ako=o("AutoModelForSequenceClassification"),gje=l(),Ro=a("div"),F(Iy.$$.fragment),nko=l(),Vi=a("p"),sko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MG=a("a"),lko=o("from_pretrained()"),iko=o(" class method or the "),EG=a("a"),dko=o("from_config()"),cko=o(` class
method.`),fko=l(),Ny=a("p"),mko=o("This class cannot be instantiated directly using "),ime=a("code"),gko=o("__init__()"),hko=o(" (throws an error)."),pko=l(),dt=a("div"),F(qy.$$.fragment),_ko=l(),dme=a("p"),uko=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bko=l(),Xi=a("p"),vko=o(`Note:
Loading a model from its configuration file does `),cme=a("strong"),Fko=o("not"),Tko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),Mko=o("from_pretrained()"),Eko=o(" to load the model weights."),Cko=l(),F(H1.$$.fragment),wko=l(),oo=a("div"),F(jy.$$.fragment),Ako=l(),fme=a("p"),yko=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lko=l(),Pa=a("p"),xko=o("The model class to instantiate is selected based on the "),mme=a("code"),$ko=o("model_type"),kko=o(` property of the config object (either
passed as an argument or loaded from `),gme=a("code"),Sko=o("pretrained_model_name_or_path"),Rko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=a("code"),Pko=o("pretrained_model_name_or_path"),Bko=o(":"),Iko=l(),q=a("ul"),U1=a("li"),pme=a("strong"),Nko=o("albert"),qko=o(" \u2014 "),wG=a("a"),jko=o("AlbertForSequenceClassification"),Dko=o(" (ALBERT model)"),Gko=l(),J1=a("li"),_me=a("strong"),Oko=o("bart"),Vko=o(" \u2014 "),AG=a("a"),Xko=o("BartForSequenceClassification"),zko=o(" (BART model)"),Wko=l(),Y1=a("li"),ume=a("strong"),Qko=o("bert"),Hko=o(" \u2014 "),yG=a("a"),Uko=o("BertForSequenceClassification"),Jko=o(" (BERT model)"),Yko=l(),K1=a("li"),bme=a("strong"),Kko=o("big_bird"),Zko=o(" \u2014 "),LG=a("a"),eSo=o("BigBirdForSequenceClassification"),oSo=o(" (BigBird model)"),rSo=l(),Z1=a("li"),vme=a("strong"),tSo=o("bigbird_pegasus"),aSo=o(" \u2014 "),xG=a("a"),nSo=o("BigBirdPegasusForSequenceClassification"),sSo=o(" (BigBird-Pegasus model)"),lSo=l(),e7=a("li"),Fme=a("strong"),iSo=o("camembert"),dSo=o(" \u2014 "),$G=a("a"),cSo=o("CamembertForSequenceClassification"),fSo=o(" (CamemBERT model)"),mSo=l(),o7=a("li"),Tme=a("strong"),gSo=o("canine"),hSo=o(" \u2014 "),kG=a("a"),pSo=o("CanineForSequenceClassification"),_So=o(" (CANINE model)"),uSo=l(),r7=a("li"),Mme=a("strong"),bSo=o("convbert"),vSo=o(" \u2014 "),SG=a("a"),FSo=o("ConvBertForSequenceClassification"),TSo=o(" (ConvBERT model)"),MSo=l(),t7=a("li"),Eme=a("strong"),ESo=o("ctrl"),CSo=o(" \u2014 "),RG=a("a"),wSo=o("CTRLForSequenceClassification"),ASo=o(" (CTRL model)"),ySo=l(),a7=a("li"),Cme=a("strong"),LSo=o("data2vec-text"),xSo=o(" \u2014 "),PG=a("a"),$So=o("Data2VecTextForSequenceClassification"),kSo=o(" (Data2VecText model)"),SSo=l(),n7=a("li"),wme=a("strong"),RSo=o("deberta"),PSo=o(" \u2014 "),BG=a("a"),BSo=o("DebertaForSequenceClassification"),ISo=o(" (DeBERTa model)"),NSo=l(),s7=a("li"),Ame=a("strong"),qSo=o("deberta-v2"),jSo=o(" \u2014 "),IG=a("a"),DSo=o("DebertaV2ForSequenceClassification"),GSo=o(" (DeBERTa-v2 model)"),OSo=l(),l7=a("li"),yme=a("strong"),VSo=o("distilbert"),XSo=o(" \u2014 "),NG=a("a"),zSo=o("DistilBertForSequenceClassification"),WSo=o(" (DistilBERT model)"),QSo=l(),i7=a("li"),Lme=a("strong"),HSo=o("electra"),USo=o(" \u2014 "),qG=a("a"),JSo=o("ElectraForSequenceClassification"),YSo=o(" (ELECTRA model)"),KSo=l(),d7=a("li"),xme=a("strong"),ZSo=o("flaubert"),eRo=o(" \u2014 "),jG=a("a"),oRo=o("FlaubertForSequenceClassification"),rRo=o(" (FlauBERT model)"),tRo=l(),c7=a("li"),$me=a("strong"),aRo=o("fnet"),nRo=o(" \u2014 "),DG=a("a"),sRo=o("FNetForSequenceClassification"),lRo=o(" (FNet model)"),iRo=l(),f7=a("li"),kme=a("strong"),dRo=o("funnel"),cRo=o(" \u2014 "),GG=a("a"),fRo=o("FunnelForSequenceClassification"),mRo=o(" (Funnel Transformer model)"),gRo=l(),m7=a("li"),Sme=a("strong"),hRo=o("gpt2"),pRo=o(" \u2014 "),OG=a("a"),_Ro=o("GPT2ForSequenceClassification"),uRo=o(" (OpenAI GPT-2 model)"),bRo=l(),g7=a("li"),Rme=a("strong"),vRo=o("gpt_neo"),FRo=o(" \u2014 "),VG=a("a"),TRo=o("GPTNeoForSequenceClassification"),MRo=o(" (GPT Neo model)"),ERo=l(),h7=a("li"),Pme=a("strong"),CRo=o("gptj"),wRo=o(" \u2014 "),XG=a("a"),ARo=o("GPTJForSequenceClassification"),yRo=o(" (GPT-J model)"),LRo=l(),p7=a("li"),Bme=a("strong"),xRo=o("ibert"),$Ro=o(" \u2014 "),zG=a("a"),kRo=o("IBertForSequenceClassification"),SRo=o(" (I-BERT model)"),RRo=l(),_7=a("li"),Ime=a("strong"),PRo=o("layoutlm"),BRo=o(" \u2014 "),WG=a("a"),IRo=o("LayoutLMForSequenceClassification"),NRo=o(" (LayoutLM model)"),qRo=l(),u7=a("li"),Nme=a("strong"),jRo=o("layoutlmv2"),DRo=o(" \u2014 "),QG=a("a"),GRo=o("LayoutLMv2ForSequenceClassification"),ORo=o(" (LayoutLMv2 model)"),VRo=l(),b7=a("li"),qme=a("strong"),XRo=o("layoutlmv3"),zRo=o(" \u2014 "),HG=a("a"),WRo=o("LayoutLMv3ForSequenceClassification"),QRo=o(" (LayoutLMv3 model)"),HRo=l(),v7=a("li"),jme=a("strong"),URo=o("led"),JRo=o(" \u2014 "),UG=a("a"),YRo=o("LEDForSequenceClassification"),KRo=o(" (LED model)"),ZRo=l(),F7=a("li"),Dme=a("strong"),ePo=o("longformer"),oPo=o(" \u2014 "),JG=a("a"),rPo=o("LongformerForSequenceClassification"),tPo=o(" (Longformer model)"),aPo=l(),T7=a("li"),Gme=a("strong"),nPo=o("mbart"),sPo=o(" \u2014 "),YG=a("a"),lPo=o("MBartForSequenceClassification"),iPo=o(" (mBART model)"),dPo=l(),M7=a("li"),Ome=a("strong"),cPo=o("megatron-bert"),fPo=o(" \u2014 "),KG=a("a"),mPo=o("MegatronBertForSequenceClassification"),gPo=o(" (Megatron-BERT model)"),hPo=l(),E7=a("li"),Vme=a("strong"),pPo=o("mobilebert"),_Po=o(" \u2014 "),ZG=a("a"),uPo=o("MobileBertForSequenceClassification"),bPo=o(" (MobileBERT model)"),vPo=l(),C7=a("li"),Xme=a("strong"),FPo=o("mpnet"),TPo=o(" \u2014 "),eO=a("a"),MPo=o("MPNetForSequenceClassification"),EPo=o(" (MPNet model)"),CPo=l(),w7=a("li"),zme=a("strong"),wPo=o("nystromformer"),APo=o(" \u2014 "),oO=a("a"),yPo=o("NystromformerForSequenceClassification"),LPo=o(" (Nystr\xF6mformer model)"),xPo=l(),A7=a("li"),Wme=a("strong"),$Po=o("openai-gpt"),kPo=o(" \u2014 "),rO=a("a"),SPo=o("OpenAIGPTForSequenceClassification"),RPo=o(" (OpenAI GPT model)"),PPo=l(),y7=a("li"),Qme=a("strong"),BPo=o("perceiver"),IPo=o(" \u2014 "),tO=a("a"),NPo=o("PerceiverForSequenceClassification"),qPo=o(" (Perceiver model)"),jPo=l(),L7=a("li"),Hme=a("strong"),DPo=o("plbart"),GPo=o(" \u2014 "),aO=a("a"),OPo=o("PLBartForSequenceClassification"),VPo=o(" (PLBart model)"),XPo=l(),x7=a("li"),Ume=a("strong"),zPo=o("qdqbert"),WPo=o(" \u2014 "),nO=a("a"),QPo=o("QDQBertForSequenceClassification"),HPo=o(" (QDQBert model)"),UPo=l(),$7=a("li"),Jme=a("strong"),JPo=o("reformer"),YPo=o(" \u2014 "),sO=a("a"),KPo=o("ReformerForSequenceClassification"),ZPo=o(" (Reformer model)"),eBo=l(),k7=a("li"),Yme=a("strong"),oBo=o("rembert"),rBo=o(" \u2014 "),lO=a("a"),tBo=o("RemBertForSequenceClassification"),aBo=o(" (RemBERT model)"),nBo=l(),S7=a("li"),Kme=a("strong"),sBo=o("roberta"),lBo=o(" \u2014 "),iO=a("a"),iBo=o("RobertaForSequenceClassification"),dBo=o(" (RoBERTa model)"),cBo=l(),R7=a("li"),Zme=a("strong"),fBo=o("roformer"),mBo=o(" \u2014 "),dO=a("a"),gBo=o("RoFormerForSequenceClassification"),hBo=o(" (RoFormer model)"),pBo=l(),P7=a("li"),ege=a("strong"),_Bo=o("squeezebert"),uBo=o(" \u2014 "),cO=a("a"),bBo=o("SqueezeBertForSequenceClassification"),vBo=o(" (SqueezeBERT model)"),FBo=l(),B7=a("li"),oge=a("strong"),TBo=o("tapas"),MBo=o(" \u2014 "),fO=a("a"),EBo=o("TapasForSequenceClassification"),CBo=o(" (TAPAS model)"),wBo=l(),I7=a("li"),rge=a("strong"),ABo=o("transfo-xl"),yBo=o(" \u2014 "),mO=a("a"),LBo=o("TransfoXLForSequenceClassification"),xBo=o(" (Transformer-XL model)"),$Bo=l(),N7=a("li"),tge=a("strong"),kBo=o("xlm"),SBo=o(" \u2014 "),gO=a("a"),RBo=o("XLMForSequenceClassification"),PBo=o(" (XLM model)"),BBo=l(),q7=a("li"),age=a("strong"),IBo=o("xlm-roberta"),NBo=o(" \u2014 "),hO=a("a"),qBo=o("XLMRobertaForSequenceClassification"),jBo=o(" (XLM-RoBERTa model)"),DBo=l(),j7=a("li"),nge=a("strong"),GBo=o("xlm-roberta-xl"),OBo=o(" \u2014 "),pO=a("a"),VBo=o("XLMRobertaXLForSequenceClassification"),XBo=o(" (XLM-RoBERTa-XL model)"),zBo=l(),D7=a("li"),sge=a("strong"),WBo=o("xlnet"),QBo=o(" \u2014 "),_O=a("a"),HBo=o("XLNetForSequenceClassification"),UBo=o(" (XLNet model)"),JBo=l(),G7=a("li"),lge=a("strong"),YBo=o("yoso"),KBo=o(" \u2014 "),uO=a("a"),ZBo=o("YosoForSequenceClassification"),eIo=o(" (YOSO model)"),oIo=l(),O7=a("p"),rIo=o("The model is set in evaluation mode by default using "),ige=a("code"),tIo=o("model.eval()"),aIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),nIo=o("model.train()"),sIo=l(),F(V7.$$.fragment),hje=l(),zi=a("h2"),X7=a("a"),cge=a("span"),F(Dy.$$.fragment),lIo=l(),fge=a("span"),iIo=o("AutoModelForMultipleChoice"),pje=l(),Po=a("div"),F(Gy.$$.fragment),dIo=l(),Wi=a("p"),cIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bO=a("a"),fIo=o("from_pretrained()"),mIo=o(" class method or the "),vO=a("a"),gIo=o("from_config()"),hIo=o(` class
method.`),pIo=l(),Oy=a("p"),_Io=o("This class cannot be instantiated directly using "),mge=a("code"),uIo=o("__init__()"),bIo=o(" (throws an error)."),vIo=l(),ct=a("div"),F(Vy.$$.fragment),FIo=l(),gge=a("p"),TIo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MIo=l(),Qi=a("p"),EIo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),CIo=o("not"),wIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),AIo=o("from_pretrained()"),yIo=o(" to load the model weights."),LIo=l(),F(z7.$$.fragment),xIo=l(),ro=a("div"),F(Xy.$$.fragment),$Io=l(),pge=a("p"),kIo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SIo=l(),Ba=a("p"),RIo=o("The model class to instantiate is selected based on the "),_ge=a("code"),PIo=o("model_type"),BIo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),IIo=o("pretrained_model_name_or_path"),NIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),qIo=o("pretrained_model_name_or_path"),jIo=o(":"),DIo=l(),K=a("ul"),W7=a("li"),vge=a("strong"),GIo=o("albert"),OIo=o(" \u2014 "),TO=a("a"),VIo=o("AlbertForMultipleChoice"),XIo=o(" (ALBERT model)"),zIo=l(),Q7=a("li"),Fge=a("strong"),WIo=o("bert"),QIo=o(" \u2014 "),MO=a("a"),HIo=o("BertForMultipleChoice"),UIo=o(" (BERT model)"),JIo=l(),H7=a("li"),Tge=a("strong"),YIo=o("big_bird"),KIo=o(" \u2014 "),EO=a("a"),ZIo=o("BigBirdForMultipleChoice"),eNo=o(" (BigBird model)"),oNo=l(),U7=a("li"),Mge=a("strong"),rNo=o("camembert"),tNo=o(" \u2014 "),CO=a("a"),aNo=o("CamembertForMultipleChoice"),nNo=o(" (CamemBERT model)"),sNo=l(),J7=a("li"),Ege=a("strong"),lNo=o("canine"),iNo=o(" \u2014 "),wO=a("a"),dNo=o("CanineForMultipleChoice"),cNo=o(" (CANINE model)"),fNo=l(),Y7=a("li"),Cge=a("strong"),mNo=o("convbert"),gNo=o(" \u2014 "),AO=a("a"),hNo=o("ConvBertForMultipleChoice"),pNo=o(" (ConvBERT model)"),_No=l(),K7=a("li"),wge=a("strong"),uNo=o("data2vec-text"),bNo=o(" \u2014 "),yO=a("a"),vNo=o("Data2VecTextForMultipleChoice"),FNo=o(" (Data2VecText model)"),TNo=l(),Z7=a("li"),Age=a("strong"),MNo=o("deberta-v2"),ENo=o(" \u2014 "),LO=a("a"),CNo=o("DebertaV2ForMultipleChoice"),wNo=o(" (DeBERTa-v2 model)"),ANo=l(),eb=a("li"),yge=a("strong"),yNo=o("distilbert"),LNo=o(" \u2014 "),xO=a("a"),xNo=o("DistilBertForMultipleChoice"),$No=o(" (DistilBERT model)"),kNo=l(),ob=a("li"),Lge=a("strong"),SNo=o("electra"),RNo=o(" \u2014 "),$O=a("a"),PNo=o("ElectraForMultipleChoice"),BNo=o(" (ELECTRA model)"),INo=l(),rb=a("li"),xge=a("strong"),NNo=o("flaubert"),qNo=o(" \u2014 "),kO=a("a"),jNo=o("FlaubertForMultipleChoice"),DNo=o(" (FlauBERT model)"),GNo=l(),tb=a("li"),$ge=a("strong"),ONo=o("fnet"),VNo=o(" \u2014 "),SO=a("a"),XNo=o("FNetForMultipleChoice"),zNo=o(" (FNet model)"),WNo=l(),ab=a("li"),kge=a("strong"),QNo=o("funnel"),HNo=o(" \u2014 "),RO=a("a"),UNo=o("FunnelForMultipleChoice"),JNo=o(" (Funnel Transformer model)"),YNo=l(),nb=a("li"),Sge=a("strong"),KNo=o("ibert"),ZNo=o(" \u2014 "),PO=a("a"),eqo=o("IBertForMultipleChoice"),oqo=o(" (I-BERT model)"),rqo=l(),sb=a("li"),Rge=a("strong"),tqo=o("longformer"),aqo=o(" \u2014 "),BO=a("a"),nqo=o("LongformerForMultipleChoice"),sqo=o(" (Longformer model)"),lqo=l(),lb=a("li"),Pge=a("strong"),iqo=o("megatron-bert"),dqo=o(" \u2014 "),IO=a("a"),cqo=o("MegatronBertForMultipleChoice"),fqo=o(" (Megatron-BERT model)"),mqo=l(),ib=a("li"),Bge=a("strong"),gqo=o("mobilebert"),hqo=o(" \u2014 "),NO=a("a"),pqo=o("MobileBertForMultipleChoice"),_qo=o(" (MobileBERT model)"),uqo=l(),db=a("li"),Ige=a("strong"),bqo=o("mpnet"),vqo=o(" \u2014 "),qO=a("a"),Fqo=o("MPNetForMultipleChoice"),Tqo=o(" (MPNet model)"),Mqo=l(),cb=a("li"),Nge=a("strong"),Eqo=o("nystromformer"),Cqo=o(" \u2014 "),jO=a("a"),wqo=o("NystromformerForMultipleChoice"),Aqo=o(" (Nystr\xF6mformer model)"),yqo=l(),fb=a("li"),qge=a("strong"),Lqo=o("qdqbert"),xqo=o(" \u2014 "),DO=a("a"),$qo=o("QDQBertForMultipleChoice"),kqo=o(" (QDQBert model)"),Sqo=l(),mb=a("li"),jge=a("strong"),Rqo=o("rembert"),Pqo=o(" \u2014 "),GO=a("a"),Bqo=o("RemBertForMultipleChoice"),Iqo=o(" (RemBERT model)"),Nqo=l(),gb=a("li"),Dge=a("strong"),qqo=o("roberta"),jqo=o(" \u2014 "),OO=a("a"),Dqo=o("RobertaForMultipleChoice"),Gqo=o(" (RoBERTa model)"),Oqo=l(),hb=a("li"),Gge=a("strong"),Vqo=o("roformer"),Xqo=o(" \u2014 "),VO=a("a"),zqo=o("RoFormerForMultipleChoice"),Wqo=o(" (RoFormer model)"),Qqo=l(),pb=a("li"),Oge=a("strong"),Hqo=o("squeezebert"),Uqo=o(" \u2014 "),XO=a("a"),Jqo=o("SqueezeBertForMultipleChoice"),Yqo=o(" (SqueezeBERT model)"),Kqo=l(),_b=a("li"),Vge=a("strong"),Zqo=o("xlm"),ejo=o(" \u2014 "),zO=a("a"),ojo=o("XLMForMultipleChoice"),rjo=o(" (XLM model)"),tjo=l(),ub=a("li"),Xge=a("strong"),ajo=o("xlm-roberta"),njo=o(" \u2014 "),WO=a("a"),sjo=o("XLMRobertaForMultipleChoice"),ljo=o(" (XLM-RoBERTa model)"),ijo=l(),bb=a("li"),zge=a("strong"),djo=o("xlm-roberta-xl"),cjo=o(" \u2014 "),QO=a("a"),fjo=o("XLMRobertaXLForMultipleChoice"),mjo=o(" (XLM-RoBERTa-XL model)"),gjo=l(),vb=a("li"),Wge=a("strong"),hjo=o("xlnet"),pjo=o(" \u2014 "),HO=a("a"),_jo=o("XLNetForMultipleChoice"),ujo=o(" (XLNet model)"),bjo=l(),Fb=a("li"),Qge=a("strong"),vjo=o("yoso"),Fjo=o(" \u2014 "),UO=a("a"),Tjo=o("YosoForMultipleChoice"),Mjo=o(" (YOSO model)"),Ejo=l(),Tb=a("p"),Cjo=o("The model is set in evaluation mode by default using "),Hge=a("code"),wjo=o("model.eval()"),Ajo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=a("code"),yjo=o("model.train()"),Ljo=l(),F(Mb.$$.fragment),_je=l(),Hi=a("h2"),Eb=a("a"),Jge=a("span"),F(zy.$$.fragment),xjo=l(),Yge=a("span"),$jo=o("AutoModelForNextSentencePrediction"),uje=l(),Bo=a("div"),F(Wy.$$.fragment),kjo=l(),Ui=a("p"),Sjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JO=a("a"),Rjo=o("from_pretrained()"),Pjo=o(" class method or the "),YO=a("a"),Bjo=o("from_config()"),Ijo=o(` class
method.`),Njo=l(),Qy=a("p"),qjo=o("This class cannot be instantiated directly using "),Kge=a("code"),jjo=o("__init__()"),Djo=o(" (throws an error)."),Gjo=l(),ft=a("div"),F(Hy.$$.fragment),Ojo=l(),Zge=a("p"),Vjo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Xjo=l(),Ji=a("p"),zjo=o(`Note:
Loading a model from its configuration file does `),ehe=a("strong"),Wjo=o("not"),Qjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=a("a"),Hjo=o("from_pretrained()"),Ujo=o(" to load the model weights."),Jjo=l(),F(Cb.$$.fragment),Yjo=l(),to=a("div"),F(Uy.$$.fragment),Kjo=l(),ohe=a("p"),Zjo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eDo=l(),Ia=a("p"),oDo=o("The model class to instantiate is selected based on the "),rhe=a("code"),rDo=o("model_type"),tDo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),aDo=o("pretrained_model_name_or_path"),nDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),sDo=o("pretrained_model_name_or_path"),lDo=o(":"),iDo=l(),Yr=a("ul"),wb=a("li"),nhe=a("strong"),dDo=o("bert"),cDo=o(" \u2014 "),ZO=a("a"),fDo=o("BertForNextSentencePrediction"),mDo=o(" (BERT model)"),gDo=l(),Ab=a("li"),she=a("strong"),hDo=o("fnet"),pDo=o(" \u2014 "),eV=a("a"),_Do=o("FNetForNextSentencePrediction"),uDo=o(" (FNet model)"),bDo=l(),yb=a("li"),lhe=a("strong"),vDo=o("megatron-bert"),FDo=o(" \u2014 "),oV=a("a"),TDo=o("MegatronBertForNextSentencePrediction"),MDo=o(" (Megatron-BERT model)"),EDo=l(),Lb=a("li"),ihe=a("strong"),CDo=o("mobilebert"),wDo=o(" \u2014 "),rV=a("a"),ADo=o("MobileBertForNextSentencePrediction"),yDo=o(" (MobileBERT model)"),LDo=l(),xb=a("li"),dhe=a("strong"),xDo=o("qdqbert"),$Do=o(" \u2014 "),tV=a("a"),kDo=o("QDQBertForNextSentencePrediction"),SDo=o(" (QDQBert model)"),RDo=l(),$b=a("p"),PDo=o("The model is set in evaluation mode by default using "),che=a("code"),BDo=o("model.eval()"),IDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=a("code"),NDo=o("model.train()"),qDo=l(),F(kb.$$.fragment),bje=l(),Yi=a("h2"),Sb=a("a"),mhe=a("span"),F(Jy.$$.fragment),jDo=l(),ghe=a("span"),DDo=o("AutoModelForTokenClassification"),vje=l(),Io=a("div"),F(Yy.$$.fragment),GDo=l(),Ki=a("p"),ODo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aV=a("a"),VDo=o("from_pretrained()"),XDo=o(" class method or the "),nV=a("a"),zDo=o("from_config()"),WDo=o(` class
method.`),QDo=l(),Ky=a("p"),HDo=o("This class cannot be instantiated directly using "),hhe=a("code"),UDo=o("__init__()"),JDo=o(" (throws an error)."),YDo=l(),mt=a("div"),F(Zy.$$.fragment),KDo=l(),phe=a("p"),ZDo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eGo=l(),Zi=a("p"),oGo=o(`Note:
Loading a model from its configuration file does `),_he=a("strong"),rGo=o("not"),tGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),aGo=o("from_pretrained()"),nGo=o(" to load the model weights."),sGo=l(),F(Rb.$$.fragment),lGo=l(),ao=a("div"),F(eL.$$.fragment),iGo=l(),uhe=a("p"),dGo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),cGo=l(),Na=a("p"),fGo=o("The model class to instantiate is selected based on the "),bhe=a("code"),mGo=o("model_type"),gGo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),hGo=o("pretrained_model_name_or_path"),pGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),_Go=o("pretrained_model_name_or_path"),uGo=o(":"),bGo=l(),U=a("ul"),Pb=a("li"),The=a("strong"),vGo=o("albert"),FGo=o(" \u2014 "),lV=a("a"),TGo=o("AlbertForTokenClassification"),MGo=o(" (ALBERT model)"),EGo=l(),Bb=a("li"),Mhe=a("strong"),CGo=o("bert"),wGo=o(" \u2014 "),iV=a("a"),AGo=o("BertForTokenClassification"),yGo=o(" (BERT model)"),LGo=l(),Ib=a("li"),Ehe=a("strong"),xGo=o("big_bird"),$Go=o(" \u2014 "),dV=a("a"),kGo=o("BigBirdForTokenClassification"),SGo=o(" (BigBird model)"),RGo=l(),Nb=a("li"),Che=a("strong"),PGo=o("camembert"),BGo=o(" \u2014 "),cV=a("a"),IGo=o("CamembertForTokenClassification"),NGo=o(" (CamemBERT model)"),qGo=l(),qb=a("li"),whe=a("strong"),jGo=o("canine"),DGo=o(" \u2014 "),fV=a("a"),GGo=o("CanineForTokenClassification"),OGo=o(" (CANINE model)"),VGo=l(),jb=a("li"),Ahe=a("strong"),XGo=o("convbert"),zGo=o(" \u2014 "),mV=a("a"),WGo=o("ConvBertForTokenClassification"),QGo=o(" (ConvBERT model)"),HGo=l(),Db=a("li"),yhe=a("strong"),UGo=o("data2vec-text"),JGo=o(" \u2014 "),gV=a("a"),YGo=o("Data2VecTextForTokenClassification"),KGo=o(" (Data2VecText model)"),ZGo=l(),Gb=a("li"),Lhe=a("strong"),eOo=o("deberta"),oOo=o(" \u2014 "),hV=a("a"),rOo=o("DebertaForTokenClassification"),tOo=o(" (DeBERTa model)"),aOo=l(),Ob=a("li"),xhe=a("strong"),nOo=o("deberta-v2"),sOo=o(" \u2014 "),pV=a("a"),lOo=o("DebertaV2ForTokenClassification"),iOo=o(" (DeBERTa-v2 model)"),dOo=l(),Vb=a("li"),$he=a("strong"),cOo=o("distilbert"),fOo=o(" \u2014 "),_V=a("a"),mOo=o("DistilBertForTokenClassification"),gOo=o(" (DistilBERT model)"),hOo=l(),Xb=a("li"),khe=a("strong"),pOo=o("electra"),_Oo=o(" \u2014 "),uV=a("a"),uOo=o("ElectraForTokenClassification"),bOo=o(" (ELECTRA model)"),vOo=l(),zb=a("li"),She=a("strong"),FOo=o("flaubert"),TOo=o(" \u2014 "),bV=a("a"),MOo=o("FlaubertForTokenClassification"),EOo=o(" (FlauBERT model)"),COo=l(),Wb=a("li"),Rhe=a("strong"),wOo=o("fnet"),AOo=o(" \u2014 "),vV=a("a"),yOo=o("FNetForTokenClassification"),LOo=o(" (FNet model)"),xOo=l(),Qb=a("li"),Phe=a("strong"),$Oo=o("funnel"),kOo=o(" \u2014 "),FV=a("a"),SOo=o("FunnelForTokenClassification"),ROo=o(" (Funnel Transformer model)"),POo=l(),Hb=a("li"),Bhe=a("strong"),BOo=o("gpt2"),IOo=o(" \u2014 "),TV=a("a"),NOo=o("GPT2ForTokenClassification"),qOo=o(" (OpenAI GPT-2 model)"),jOo=l(),Ub=a("li"),Ihe=a("strong"),DOo=o("ibert"),GOo=o(" \u2014 "),MV=a("a"),OOo=o("IBertForTokenClassification"),VOo=o(" (I-BERT model)"),XOo=l(),Jb=a("li"),Nhe=a("strong"),zOo=o("layoutlm"),WOo=o(" \u2014 "),EV=a("a"),QOo=o("LayoutLMForTokenClassification"),HOo=o(" (LayoutLM model)"),UOo=l(),Yb=a("li"),qhe=a("strong"),JOo=o("layoutlmv2"),YOo=o(" \u2014 "),CV=a("a"),KOo=o("LayoutLMv2ForTokenClassification"),ZOo=o(" (LayoutLMv2 model)"),eVo=l(),Kb=a("li"),jhe=a("strong"),oVo=o("layoutlmv3"),rVo=o(" \u2014 "),wV=a("a"),tVo=o("LayoutLMv3ForTokenClassification"),aVo=o(" (LayoutLMv3 model)"),nVo=l(),Zb=a("li"),Dhe=a("strong"),sVo=o("longformer"),lVo=o(" \u2014 "),AV=a("a"),iVo=o("LongformerForTokenClassification"),dVo=o(" (Longformer model)"),cVo=l(),e4=a("li"),Ghe=a("strong"),fVo=o("megatron-bert"),mVo=o(" \u2014 "),yV=a("a"),gVo=o("MegatronBertForTokenClassification"),hVo=o(" (Megatron-BERT model)"),pVo=l(),o4=a("li"),Ohe=a("strong"),_Vo=o("mobilebert"),uVo=o(" \u2014 "),LV=a("a"),bVo=o("MobileBertForTokenClassification"),vVo=o(" (MobileBERT model)"),FVo=l(),r4=a("li"),Vhe=a("strong"),TVo=o("mpnet"),MVo=o(" \u2014 "),xV=a("a"),EVo=o("MPNetForTokenClassification"),CVo=o(" (MPNet model)"),wVo=l(),t4=a("li"),Xhe=a("strong"),AVo=o("nystromformer"),yVo=o(" \u2014 "),$V=a("a"),LVo=o("NystromformerForTokenClassification"),xVo=o(" (Nystr\xF6mformer model)"),$Vo=l(),a4=a("li"),zhe=a("strong"),kVo=o("qdqbert"),SVo=o(" \u2014 "),kV=a("a"),RVo=o("QDQBertForTokenClassification"),PVo=o(" (QDQBert model)"),BVo=l(),n4=a("li"),Whe=a("strong"),IVo=o("rembert"),NVo=o(" \u2014 "),SV=a("a"),qVo=o("RemBertForTokenClassification"),jVo=o(" (RemBERT model)"),DVo=l(),s4=a("li"),Qhe=a("strong"),GVo=o("roberta"),OVo=o(" \u2014 "),RV=a("a"),VVo=o("RobertaForTokenClassification"),XVo=o(" (RoBERTa model)"),zVo=l(),l4=a("li"),Hhe=a("strong"),WVo=o("roformer"),QVo=o(" \u2014 "),PV=a("a"),HVo=o("RoFormerForTokenClassification"),UVo=o(" (RoFormer model)"),JVo=l(),i4=a("li"),Uhe=a("strong"),YVo=o("squeezebert"),KVo=o(" \u2014 "),BV=a("a"),ZVo=o("SqueezeBertForTokenClassification"),eXo=o(" (SqueezeBERT model)"),oXo=l(),d4=a("li"),Jhe=a("strong"),rXo=o("xlm"),tXo=o(" \u2014 "),IV=a("a"),aXo=o("XLMForTokenClassification"),nXo=o(" (XLM model)"),sXo=l(),c4=a("li"),Yhe=a("strong"),lXo=o("xlm-roberta"),iXo=o(" \u2014 "),NV=a("a"),dXo=o("XLMRobertaForTokenClassification"),cXo=o(" (XLM-RoBERTa model)"),fXo=l(),f4=a("li"),Khe=a("strong"),mXo=o("xlm-roberta-xl"),gXo=o(" \u2014 "),qV=a("a"),hXo=o("XLMRobertaXLForTokenClassification"),pXo=o(" (XLM-RoBERTa-XL model)"),_Xo=l(),m4=a("li"),Zhe=a("strong"),uXo=o("xlnet"),bXo=o(" \u2014 "),jV=a("a"),vXo=o("XLNetForTokenClassification"),FXo=o(" (XLNet model)"),TXo=l(),g4=a("li"),epe=a("strong"),MXo=o("yoso"),EXo=o(" \u2014 "),DV=a("a"),CXo=o("YosoForTokenClassification"),wXo=o(" (YOSO model)"),AXo=l(),h4=a("p"),yXo=o("The model is set in evaluation mode by default using "),ope=a("code"),LXo=o("model.eval()"),xXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),$Xo=o("model.train()"),kXo=l(),F(p4.$$.fragment),Fje=l(),ed=a("h2"),_4=a("a"),tpe=a("span"),F(oL.$$.fragment),SXo=l(),ape=a("span"),RXo=o("AutoModelForQuestionAnswering"),Tje=l(),No=a("div"),F(rL.$$.fragment),PXo=l(),od=a("p"),BXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GV=a("a"),IXo=o("from_pretrained()"),NXo=o(" class method or the "),OV=a("a"),qXo=o("from_config()"),jXo=o(` class
method.`),DXo=l(),tL=a("p"),GXo=o("This class cannot be instantiated directly using "),npe=a("code"),OXo=o("__init__()"),VXo=o(" (throws an error)."),XXo=l(),gt=a("div"),F(aL.$$.fragment),zXo=l(),spe=a("p"),WXo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QXo=l(),rd=a("p"),HXo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),UXo=o("not"),JXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),YXo=o("from_pretrained()"),KXo=o(" to load the model weights."),ZXo=l(),F(u4.$$.fragment),ezo=l(),no=a("div"),F(nL.$$.fragment),ozo=l(),ipe=a("p"),rzo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tzo=l(),qa=a("p"),azo=o("The model class to instantiate is selected based on the "),dpe=a("code"),nzo=o("model_type"),szo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),lzo=o("pretrained_model_name_or_path"),izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),dzo=o("pretrained_model_name_or_path"),czo=o(":"),fzo=l(),V=a("ul"),b4=a("li"),mpe=a("strong"),mzo=o("albert"),gzo=o(" \u2014 "),XV=a("a"),hzo=o("AlbertForQuestionAnswering"),pzo=o(" (ALBERT model)"),_zo=l(),v4=a("li"),gpe=a("strong"),uzo=o("bart"),bzo=o(" \u2014 "),zV=a("a"),vzo=o("BartForQuestionAnswering"),Fzo=o(" (BART model)"),Tzo=l(),F4=a("li"),hpe=a("strong"),Mzo=o("bert"),Ezo=o(" \u2014 "),WV=a("a"),Czo=o("BertForQuestionAnswering"),wzo=o(" (BERT model)"),Azo=l(),T4=a("li"),ppe=a("strong"),yzo=o("big_bird"),Lzo=o(" \u2014 "),QV=a("a"),xzo=o("BigBirdForQuestionAnswering"),$zo=o(" (BigBird model)"),kzo=l(),M4=a("li"),_pe=a("strong"),Szo=o("bigbird_pegasus"),Rzo=o(" \u2014 "),HV=a("a"),Pzo=o("BigBirdPegasusForQuestionAnswering"),Bzo=o(" (BigBird-Pegasus model)"),Izo=l(),E4=a("li"),upe=a("strong"),Nzo=o("camembert"),qzo=o(" \u2014 "),UV=a("a"),jzo=o("CamembertForQuestionAnswering"),Dzo=o(" (CamemBERT model)"),Gzo=l(),C4=a("li"),bpe=a("strong"),Ozo=o("canine"),Vzo=o(" \u2014 "),JV=a("a"),Xzo=o("CanineForQuestionAnswering"),zzo=o(" (CANINE model)"),Wzo=l(),w4=a("li"),vpe=a("strong"),Qzo=o("convbert"),Hzo=o(" \u2014 "),YV=a("a"),Uzo=o("ConvBertForQuestionAnswering"),Jzo=o(" (ConvBERT model)"),Yzo=l(),A4=a("li"),Fpe=a("strong"),Kzo=o("data2vec-text"),Zzo=o(" \u2014 "),KV=a("a"),eWo=o("Data2VecTextForQuestionAnswering"),oWo=o(" (Data2VecText model)"),rWo=l(),y4=a("li"),Tpe=a("strong"),tWo=o("deberta"),aWo=o(" \u2014 "),ZV=a("a"),nWo=o("DebertaForQuestionAnswering"),sWo=o(" (DeBERTa model)"),lWo=l(),L4=a("li"),Mpe=a("strong"),iWo=o("deberta-v2"),dWo=o(" \u2014 "),eX=a("a"),cWo=o("DebertaV2ForQuestionAnswering"),fWo=o(" (DeBERTa-v2 model)"),mWo=l(),x4=a("li"),Epe=a("strong"),gWo=o("distilbert"),hWo=o(" \u2014 "),oX=a("a"),pWo=o("DistilBertForQuestionAnswering"),_Wo=o(" (DistilBERT model)"),uWo=l(),$4=a("li"),Cpe=a("strong"),bWo=o("electra"),vWo=o(" \u2014 "),rX=a("a"),FWo=o("ElectraForQuestionAnswering"),TWo=o(" (ELECTRA model)"),MWo=l(),k4=a("li"),wpe=a("strong"),EWo=o("flaubert"),CWo=o(" \u2014 "),tX=a("a"),wWo=o("FlaubertForQuestionAnsweringSimple"),AWo=o(" (FlauBERT model)"),yWo=l(),S4=a("li"),Ape=a("strong"),LWo=o("fnet"),xWo=o(" \u2014 "),aX=a("a"),$Wo=o("FNetForQuestionAnswering"),kWo=o(" (FNet model)"),SWo=l(),R4=a("li"),ype=a("strong"),RWo=o("funnel"),PWo=o(" \u2014 "),nX=a("a"),BWo=o("FunnelForQuestionAnswering"),IWo=o(" (Funnel Transformer model)"),NWo=l(),P4=a("li"),Lpe=a("strong"),qWo=o("gptj"),jWo=o(" \u2014 "),sX=a("a"),DWo=o("GPTJForQuestionAnswering"),GWo=o(" (GPT-J model)"),OWo=l(),B4=a("li"),xpe=a("strong"),VWo=o("ibert"),XWo=o(" \u2014 "),lX=a("a"),zWo=o("IBertForQuestionAnswering"),WWo=o(" (I-BERT model)"),QWo=l(),I4=a("li"),$pe=a("strong"),HWo=o("layoutlmv2"),UWo=o(" \u2014 "),iX=a("a"),JWo=o("LayoutLMv2ForQuestionAnswering"),YWo=o(" (LayoutLMv2 model)"),KWo=l(),N4=a("li"),kpe=a("strong"),ZWo=o("layoutlmv3"),eQo=o(" \u2014 "),dX=a("a"),oQo=o("LayoutLMv3ForQuestionAnswering"),rQo=o(" (LayoutLMv3 model)"),tQo=l(),q4=a("li"),Spe=a("strong"),aQo=o("led"),nQo=o(" \u2014 "),cX=a("a"),sQo=o("LEDForQuestionAnswering"),lQo=o(" (LED model)"),iQo=l(),j4=a("li"),Rpe=a("strong"),dQo=o("longformer"),cQo=o(" \u2014 "),fX=a("a"),fQo=o("LongformerForQuestionAnswering"),mQo=o(" (Longformer model)"),gQo=l(),D4=a("li"),Ppe=a("strong"),hQo=o("lxmert"),pQo=o(" \u2014 "),mX=a("a"),_Qo=o("LxmertForQuestionAnswering"),uQo=o(" (LXMERT model)"),bQo=l(),G4=a("li"),Bpe=a("strong"),vQo=o("mbart"),FQo=o(" \u2014 "),gX=a("a"),TQo=o("MBartForQuestionAnswering"),MQo=o(" (mBART model)"),EQo=l(),O4=a("li"),Ipe=a("strong"),CQo=o("megatron-bert"),wQo=o(" \u2014 "),hX=a("a"),AQo=o("MegatronBertForQuestionAnswering"),yQo=o(" (Megatron-BERT model)"),LQo=l(),V4=a("li"),Npe=a("strong"),xQo=o("mobilebert"),$Qo=o(" \u2014 "),pX=a("a"),kQo=o("MobileBertForQuestionAnswering"),SQo=o(" (MobileBERT model)"),RQo=l(),X4=a("li"),qpe=a("strong"),PQo=o("mpnet"),BQo=o(" \u2014 "),_X=a("a"),IQo=o("MPNetForQuestionAnswering"),NQo=o(" (MPNet model)"),qQo=l(),z4=a("li"),jpe=a("strong"),jQo=o("nystromformer"),DQo=o(" \u2014 "),uX=a("a"),GQo=o("NystromformerForQuestionAnswering"),OQo=o(" (Nystr\xF6mformer model)"),VQo=l(),W4=a("li"),Dpe=a("strong"),XQo=o("qdqbert"),zQo=o(" \u2014 "),bX=a("a"),WQo=o("QDQBertForQuestionAnswering"),QQo=o(" (QDQBert model)"),HQo=l(),Q4=a("li"),Gpe=a("strong"),UQo=o("reformer"),JQo=o(" \u2014 "),vX=a("a"),YQo=o("ReformerForQuestionAnswering"),KQo=o(" (Reformer model)"),ZQo=l(),H4=a("li"),Ope=a("strong"),eHo=o("rembert"),oHo=o(" \u2014 "),FX=a("a"),rHo=o("RemBertForQuestionAnswering"),tHo=o(" (RemBERT model)"),aHo=l(),U4=a("li"),Vpe=a("strong"),nHo=o("roberta"),sHo=o(" \u2014 "),TX=a("a"),lHo=o("RobertaForQuestionAnswering"),iHo=o(" (RoBERTa model)"),dHo=l(),J4=a("li"),Xpe=a("strong"),cHo=o("roformer"),fHo=o(" \u2014 "),MX=a("a"),mHo=o("RoFormerForQuestionAnswering"),gHo=o(" (RoFormer model)"),hHo=l(),Y4=a("li"),zpe=a("strong"),pHo=o("splinter"),_Ho=o(" \u2014 "),EX=a("a"),uHo=o("SplinterForQuestionAnswering"),bHo=o(" (Splinter model)"),vHo=l(),K4=a("li"),Wpe=a("strong"),FHo=o("squeezebert"),THo=o(" \u2014 "),CX=a("a"),MHo=o("SqueezeBertForQuestionAnswering"),EHo=o(" (SqueezeBERT model)"),CHo=l(),Z4=a("li"),Qpe=a("strong"),wHo=o("xlm"),AHo=o(" \u2014 "),wX=a("a"),yHo=o("XLMForQuestionAnsweringSimple"),LHo=o(" (XLM model)"),xHo=l(),ev=a("li"),Hpe=a("strong"),$Ho=o("xlm-roberta"),kHo=o(" \u2014 "),AX=a("a"),SHo=o("XLMRobertaForQuestionAnswering"),RHo=o(" (XLM-RoBERTa model)"),PHo=l(),ov=a("li"),Upe=a("strong"),BHo=o("xlm-roberta-xl"),IHo=o(" \u2014 "),yX=a("a"),NHo=o("XLMRobertaXLForQuestionAnswering"),qHo=o(" (XLM-RoBERTa-XL model)"),jHo=l(),rv=a("li"),Jpe=a("strong"),DHo=o("xlnet"),GHo=o(" \u2014 "),LX=a("a"),OHo=o("XLNetForQuestionAnsweringSimple"),VHo=o(" (XLNet model)"),XHo=l(),tv=a("li"),Ype=a("strong"),zHo=o("yoso"),WHo=o(" \u2014 "),xX=a("a"),QHo=o("YosoForQuestionAnswering"),HHo=o(" (YOSO model)"),UHo=l(),av=a("p"),JHo=o("The model is set in evaluation mode by default using "),Kpe=a("code"),YHo=o("model.eval()"),KHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=a("code"),ZHo=o("model.train()"),eUo=l(),F(nv.$$.fragment),Mje=l(),td=a("h2"),sv=a("a"),e_e=a("span"),F(sL.$$.fragment),oUo=l(),o_e=a("span"),rUo=o("AutoModelForTableQuestionAnswering"),Eje=l(),qo=a("div"),F(lL.$$.fragment),tUo=l(),ad=a("p"),aUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$X=a("a"),nUo=o("from_pretrained()"),sUo=o(" class method or the "),kX=a("a"),lUo=o("from_config()"),iUo=o(` class
method.`),dUo=l(),iL=a("p"),cUo=o("This class cannot be instantiated directly using "),r_e=a("code"),fUo=o("__init__()"),mUo=o(" (throws an error)."),gUo=l(),ht=a("div"),F(dL.$$.fragment),hUo=l(),t_e=a("p"),pUo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_Uo=l(),nd=a("p"),uUo=o(`Note:
Loading a model from its configuration file does `),a_e=a("strong"),bUo=o("not"),vUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=a("a"),FUo=o("from_pretrained()"),TUo=o(" to load the model weights."),MUo=l(),F(lv.$$.fragment),EUo=l(),so=a("div"),F(cL.$$.fragment),CUo=l(),n_e=a("p"),wUo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),AUo=l(),ja=a("p"),yUo=o("The model class to instantiate is selected based on the "),s_e=a("code"),LUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),l_e=a("code"),$Uo=o("pretrained_model_name_or_path"),kUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=a("code"),SUo=o("pretrained_model_name_or_path"),RUo=o(":"),PUo=l(),d_e=a("ul"),iv=a("li"),c_e=a("strong"),BUo=o("tapas"),IUo=o(" \u2014 "),RX=a("a"),NUo=o("TapasForQuestionAnswering"),qUo=o(" (TAPAS model)"),jUo=l(),dv=a("p"),DUo=o("The model is set in evaluation mode by default using "),f_e=a("code"),GUo=o("model.eval()"),OUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=a("code"),VUo=o("model.train()"),XUo=l(),F(cv.$$.fragment),Cje=l(),sd=a("h2"),fv=a("a"),g_e=a("span"),F(fL.$$.fragment),zUo=l(),h_e=a("span"),WUo=o("AutoModelForImageClassification"),wje=l(),jo=a("div"),F(mL.$$.fragment),QUo=l(),ld=a("p"),HUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PX=a("a"),UUo=o("from_pretrained()"),JUo=o(" class method or the "),BX=a("a"),YUo=o("from_config()"),KUo=o(` class
method.`),ZUo=l(),gL=a("p"),eJo=o("This class cannot be instantiated directly using "),p_e=a("code"),oJo=o("__init__()"),rJo=o(" (throws an error)."),tJo=l(),pt=a("div"),F(hL.$$.fragment),aJo=l(),__e=a("p"),nJo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sJo=l(),id=a("p"),lJo=o(`Note:
Loading a model from its configuration file does `),u_e=a("strong"),iJo=o("not"),dJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),cJo=o("from_pretrained()"),fJo=o(" to load the model weights."),mJo=l(),F(mv.$$.fragment),gJo=l(),lo=a("div"),F(pL.$$.fragment),hJo=l(),b_e=a("p"),pJo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_Jo=l(),Da=a("p"),uJo=o("The model class to instantiate is selected based on the "),v_e=a("code"),bJo=o("model_type"),vJo=o(` property of the config object (either
passed as an argument or loaded from `),F_e=a("code"),FJo=o("pretrained_model_name_or_path"),TJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),MJo=o("pretrained_model_name_or_path"),EJo=o(":"),CJo=l(),ve=a("ul"),gv=a("li"),M_e=a("strong"),wJo=o("beit"),AJo=o(" \u2014 "),NX=a("a"),yJo=o("BeitForImageClassification"),LJo=o(" (BEiT model)"),xJo=l(),hv=a("li"),E_e=a("strong"),$Jo=o("convnext"),kJo=o(" \u2014 "),qX=a("a"),SJo=o("ConvNextForImageClassification"),RJo=o(" (ConvNeXT model)"),PJo=l(),pv=a("li"),C_e=a("strong"),BJo=o("cvt"),IJo=o(" \u2014 "),jX=a("a"),NJo=o("CvtForImageClassification"),qJo=o(" (CvT model)"),jJo=l(),_v=a("li"),w_e=a("strong"),DJo=o("data2vec-vision"),GJo=o(" \u2014 "),DX=a("a"),OJo=o("Data2VecVisionForImageClassification"),VJo=o(" (Data2VecVision model)"),XJo=l(),Bs=a("li"),A_e=a("strong"),zJo=o("deit"),WJo=o(" \u2014 "),GX=a("a"),QJo=o("DeiTForImageClassification"),HJo=o(" or "),OX=a("a"),UJo=o("DeiTForImageClassificationWithTeacher"),JJo=o(" (DeiT model)"),YJo=l(),uv=a("li"),y_e=a("strong"),KJo=o("imagegpt"),ZJo=o(" \u2014 "),VX=a("a"),eYo=o("ImageGPTForImageClassification"),oYo=o(" (ImageGPT model)"),rYo=l(),Is=a("li"),L_e=a("strong"),tYo=o("levit"),aYo=o(" \u2014 "),XX=a("a"),nYo=o("LevitForImageClassification"),sYo=o(" or "),zX=a("a"),lYo=o("LevitForImageClassificationWithTeacher"),iYo=o(" (LeViT model)"),dYo=l(),_t=a("li"),x_e=a("strong"),cYo=o("perceiver"),fYo=o(" \u2014 "),WX=a("a"),mYo=o("PerceiverForImageClassificationLearned"),gYo=o(" or "),QX=a("a"),hYo=o("PerceiverForImageClassificationFourier"),pYo=o(" or "),HX=a("a"),_Yo=o("PerceiverForImageClassificationConvProcessing"),uYo=o(" (Perceiver model)"),bYo=l(),bv=a("li"),$_e=a("strong"),vYo=o("poolformer"),FYo=o(" \u2014 "),UX=a("a"),TYo=o("PoolFormerForImageClassification"),MYo=o(" (PoolFormer model)"),EYo=l(),vv=a("li"),k_e=a("strong"),CYo=o("regnet"),wYo=o(" \u2014 "),JX=a("a"),AYo=o("RegNetForImageClassification"),yYo=o(" (RegNet model)"),LYo=l(),Fv=a("li"),S_e=a("strong"),xYo=o("resnet"),$Yo=o(" \u2014 "),YX=a("a"),kYo=o("ResNetForImageClassification"),SYo=o(" (ResNet model)"),RYo=l(),Tv=a("li"),R_e=a("strong"),PYo=o("segformer"),BYo=o(" \u2014 "),KX=a("a"),IYo=o("SegformerForImageClassification"),NYo=o(" (SegFormer model)"),qYo=l(),Mv=a("li"),P_e=a("strong"),jYo=o("swin"),DYo=o(" \u2014 "),ZX=a("a"),GYo=o("SwinForImageClassification"),OYo=o(" (Swin Transformer model)"),VYo=l(),Ev=a("li"),B_e=a("strong"),XYo=o("van"),zYo=o(" \u2014 "),ez=a("a"),WYo=o("VanForImageClassification"),QYo=o(" (VAN model)"),HYo=l(),Cv=a("li"),I_e=a("strong"),UYo=o("vit"),JYo=o(" \u2014 "),oz=a("a"),YYo=o("ViTForImageClassification"),KYo=o(" (ViT model)"),ZYo=l(),wv=a("p"),eKo=o("The model is set in evaluation mode by default using "),N_e=a("code"),oKo=o("model.eval()"),rKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),tKo=o("model.train()"),aKo=l(),F(Av.$$.fragment),Aje=l(),dd=a("h2"),yv=a("a"),j_e=a("span"),F(_L.$$.fragment),nKo=l(),D_e=a("span"),sKo=o("AutoModelForVision2Seq"),yje=l(),Do=a("div"),F(uL.$$.fragment),lKo=l(),cd=a("p"),iKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rz=a("a"),dKo=o("from_pretrained()"),cKo=o(" class method or the "),tz=a("a"),fKo=o("from_config()"),mKo=o(` class
method.`),gKo=l(),bL=a("p"),hKo=o("This class cannot be instantiated directly using "),G_e=a("code"),pKo=o("__init__()"),_Ko=o(" (throws an error)."),uKo=l(),ut=a("div"),F(vL.$$.fragment),bKo=l(),O_e=a("p"),vKo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),FKo=l(),fd=a("p"),TKo=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),MKo=o("not"),EKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),CKo=o("from_pretrained()"),wKo=o(" to load the model weights."),AKo=l(),F(Lv.$$.fragment),yKo=l(),io=a("div"),F(FL.$$.fragment),LKo=l(),X_e=a("p"),xKo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$Ko=l(),Ga=a("p"),kKo=o("The model class to instantiate is selected based on the "),z_e=a("code"),SKo=o("model_type"),RKo=o(` property of the config object (either
passed as an argument or loaded from `),W_e=a("code"),PKo=o("pretrained_model_name_or_path"),BKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=a("code"),IKo=o("pretrained_model_name_or_path"),NKo=o(":"),qKo=l(),H_e=a("ul"),xv=a("li"),U_e=a("strong"),jKo=o("vision-encoder-decoder"),DKo=o(" \u2014 "),nz=a("a"),GKo=o("VisionEncoderDecoderModel"),OKo=o(" (Vision Encoder decoder model)"),VKo=l(),$v=a("p"),XKo=o("The model is set in evaluation mode by default using "),J_e=a("code"),zKo=o("model.eval()"),WKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=a("code"),QKo=o("model.train()"),HKo=l(),F(kv.$$.fragment),Lje=l(),md=a("h2"),Sv=a("a"),K_e=a("span"),F(TL.$$.fragment),UKo=l(),Z_e=a("span"),JKo=o("AutoModelForAudioClassification"),xje=l(),Go=a("div"),F(ML.$$.fragment),YKo=l(),gd=a("p"),KKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sz=a("a"),ZKo=o("from_pretrained()"),eZo=o(" class method or the "),lz=a("a"),oZo=o("from_config()"),rZo=o(` class
method.`),tZo=l(),EL=a("p"),aZo=o("This class cannot be instantiated directly using "),eue=a("code"),nZo=o("__init__()"),sZo=o(" (throws an error)."),lZo=l(),bt=a("div"),F(CL.$$.fragment),iZo=l(),oue=a("p"),dZo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),cZo=l(),hd=a("p"),fZo=o(`Note:
Loading a model from its configuration file does `),rue=a("strong"),mZo=o("not"),gZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=a("a"),hZo=o("from_pretrained()"),pZo=o(" to load the model weights."),_Zo=l(),F(Rv.$$.fragment),uZo=l(),co=a("div"),F(wL.$$.fragment),bZo=l(),tue=a("p"),vZo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),FZo=l(),Oa=a("p"),TZo=o("The model class to instantiate is selected based on the "),aue=a("code"),MZo=o("model_type"),EZo=o(` property of the config object (either
passed as an argument or loaded from `),nue=a("code"),CZo=o("pretrained_model_name_or_path"),wZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=a("code"),AZo=o("pretrained_model_name_or_path"),yZo=o(":"),LZo=l(),Se=a("ul"),Pv=a("li"),lue=a("strong"),xZo=o("data2vec-audio"),$Zo=o(" \u2014 "),dz=a("a"),kZo=o("Data2VecAudioForSequenceClassification"),SZo=o(" (Data2VecAudio model)"),RZo=l(),Bv=a("li"),iue=a("strong"),PZo=o("hubert"),BZo=o(" \u2014 "),cz=a("a"),IZo=o("HubertForSequenceClassification"),NZo=o(" (Hubert model)"),qZo=l(),Iv=a("li"),due=a("strong"),jZo=o("sew"),DZo=o(" \u2014 "),fz=a("a"),GZo=o("SEWForSequenceClassification"),OZo=o(" (SEW model)"),VZo=l(),Nv=a("li"),cue=a("strong"),XZo=o("sew-d"),zZo=o(" \u2014 "),mz=a("a"),WZo=o("SEWDForSequenceClassification"),QZo=o(" (SEW-D model)"),HZo=l(),qv=a("li"),fue=a("strong"),UZo=o("unispeech"),JZo=o(" \u2014 "),gz=a("a"),YZo=o("UniSpeechForSequenceClassification"),KZo=o(" (UniSpeech model)"),ZZo=l(),jv=a("li"),mue=a("strong"),eer=o("unispeech-sat"),oer=o(" \u2014 "),hz=a("a"),rer=o("UniSpeechSatForSequenceClassification"),ter=o(" (UniSpeechSat model)"),aer=l(),Dv=a("li"),gue=a("strong"),ner=o("wav2vec2"),ser=o(" \u2014 "),pz=a("a"),ler=o("Wav2Vec2ForSequenceClassification"),ier=o(" (Wav2Vec2 model)"),der=l(),Gv=a("li"),hue=a("strong"),cer=o("wav2vec2-conformer"),fer=o(" \u2014 "),_z=a("a"),mer=o("Wav2Vec2ConformerForSequenceClassification"),ger=o(" (Wav2Vec2-Conformer model)"),her=l(),Ov=a("li"),pue=a("strong"),per=o("wavlm"),_er=o(" \u2014 "),uz=a("a"),uer=o("WavLMForSequenceClassification"),ber=o(" (WavLM model)"),ver=l(),Vv=a("p"),Fer=o("The model is set in evaluation mode by default using "),_ue=a("code"),Ter=o("model.eval()"),Mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=a("code"),Eer=o("model.train()"),Cer=l(),F(Xv.$$.fragment),$je=l(),pd=a("h2"),zv=a("a"),bue=a("span"),F(AL.$$.fragment),wer=l(),vue=a("span"),Aer=o("AutoModelForAudioFrameClassification"),kje=l(),Oo=a("div"),F(yL.$$.fragment),yer=l(),_d=a("p"),Ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bz=a("a"),xer=o("from_pretrained()"),$er=o(" class method or the "),vz=a("a"),ker=o("from_config()"),Ser=o(` class
method.`),Rer=l(),LL=a("p"),Per=o("This class cannot be instantiated directly using "),Fue=a("code"),Ber=o("__init__()"),Ier=o(" (throws an error)."),Ner=l(),vt=a("div"),F(xL.$$.fragment),qer=l(),Tue=a("p"),jer=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Der=l(),ud=a("p"),Ger=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),Oer=o("not"),Ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),Xer=o("from_pretrained()"),zer=o(" to load the model weights."),Wer=l(),F(Wv.$$.fragment),Qer=l(),fo=a("div"),F($L.$$.fragment),Her=l(),Eue=a("p"),Uer=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Jer=l(),Va=a("p"),Yer=o("The model class to instantiate is selected based on the "),Cue=a("code"),Ker=o("model_type"),Zer=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(":"),aor=l(),Kr=a("ul"),Qv=a("li"),yue=a("strong"),nor=o("data2vec-audio"),sor=o(" \u2014 "),Tz=a("a"),lor=o("Data2VecAudioForAudioFrameClassification"),ior=o(" (Data2VecAudio model)"),dor=l(),Hv=a("li"),Lue=a("strong"),cor=o("unispeech-sat"),mor=o(" \u2014 "),Mz=a("a"),gor=o("UniSpeechSatForAudioFrameClassification"),hor=o(" (UniSpeechSat model)"),por=l(),Uv=a("li"),xue=a("strong"),_or=o("wav2vec2"),uor=o(" \u2014 "),Ez=a("a"),bor=o("Wav2Vec2ForAudioFrameClassification"),vor=o(" (Wav2Vec2 model)"),For=l(),Jv=a("li"),$ue=a("strong"),Tor=o("wav2vec2-conformer"),Mor=o(" \u2014 "),Cz=a("a"),Eor=o("Wav2Vec2ConformerForAudioFrameClassification"),Cor=o(" (Wav2Vec2-Conformer model)"),wor=l(),Yv=a("li"),kue=a("strong"),Aor=o("wavlm"),yor=o(" \u2014 "),wz=a("a"),Lor=o("WavLMForAudioFrameClassification"),xor=o(" (WavLM model)"),$or=l(),Kv=a("p"),kor=o("The model is set in evaluation mode by default using "),Sue=a("code"),Sor=o("model.eval()"),Ror=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),Por=o("model.train()"),Bor=l(),F(Zv.$$.fragment),Sje=l(),bd=a("h2"),eF=a("a"),Pue=a("span"),F(kL.$$.fragment),Ior=l(),Bue=a("span"),Nor=o("AutoModelForCTC"),Rje=l(),Vo=a("div"),F(SL.$$.fragment),qor=l(),vd=a("p"),jor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Az=a("a"),Dor=o("from_pretrained()"),Gor=o(" class method or the "),yz=a("a"),Oor=o("from_config()"),Vor=o(` class
method.`),Xor=l(),RL=a("p"),zor=o("This class cannot be instantiated directly using "),Iue=a("code"),Wor=o("__init__()"),Qor=o(" (throws an error)."),Hor=l(),Ft=a("div"),F(PL.$$.fragment),Uor=l(),Nue=a("p"),Jor=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Yor=l(),Fd=a("p"),Kor=o(`Note:
Loading a model from its configuration file does `),que=a("strong"),Zor=o("not"),err=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=a("a"),orr=o("from_pretrained()"),rrr=o(" to load the model weights."),trr=l(),F(oF.$$.fragment),arr=l(),mo=a("div"),F(BL.$$.fragment),nrr=l(),jue=a("p"),srr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),lrr=l(),Xa=a("p"),irr=o("The model class to instantiate is selected based on the "),Due=a("code"),drr=o("model_type"),crr=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),frr=o("pretrained_model_name_or_path"),mrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),grr=o("pretrained_model_name_or_path"),hrr=o(":"),prr=l(),Re=a("ul"),rF=a("li"),Vue=a("strong"),_rr=o("data2vec-audio"),urr=o(" \u2014 "),xz=a("a"),brr=o("Data2VecAudioForCTC"),vrr=o(" (Data2VecAudio model)"),Frr=l(),tF=a("li"),Xue=a("strong"),Trr=o("hubert"),Mrr=o(" \u2014 "),$z=a("a"),Err=o("HubertForCTC"),Crr=o(" (Hubert model)"),wrr=l(),aF=a("li"),zue=a("strong"),Arr=o("sew"),yrr=o(" \u2014 "),kz=a("a"),Lrr=o("SEWForCTC"),xrr=o(" (SEW model)"),$rr=l(),nF=a("li"),Wue=a("strong"),krr=o("sew-d"),Srr=o(" \u2014 "),Sz=a("a"),Rrr=o("SEWDForCTC"),Prr=o(" (SEW-D model)"),Brr=l(),sF=a("li"),Que=a("strong"),Irr=o("unispeech"),Nrr=o(" \u2014 "),Rz=a("a"),qrr=o("UniSpeechForCTC"),jrr=o(" (UniSpeech model)"),Drr=l(),lF=a("li"),Hue=a("strong"),Grr=o("unispeech-sat"),Orr=o(" \u2014 "),Pz=a("a"),Vrr=o("UniSpeechSatForCTC"),Xrr=o(" (UniSpeechSat model)"),zrr=l(),iF=a("li"),Uue=a("strong"),Wrr=o("wav2vec2"),Qrr=o(" \u2014 "),Bz=a("a"),Hrr=o("Wav2Vec2ForCTC"),Urr=o(" (Wav2Vec2 model)"),Jrr=l(),dF=a("li"),Jue=a("strong"),Yrr=o("wav2vec2-conformer"),Krr=o(" \u2014 "),Iz=a("a"),Zrr=o("Wav2Vec2ConformerForCTC"),etr=o(" (Wav2Vec2-Conformer model)"),otr=l(),cF=a("li"),Yue=a("strong"),rtr=o("wavlm"),ttr=o(" \u2014 "),Nz=a("a"),atr=o("WavLMForCTC"),ntr=o(" (WavLM model)"),str=l(),fF=a("p"),ltr=o("The model is set in evaluation mode by default using "),Kue=a("code"),itr=o("model.eval()"),dtr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),ctr=o("model.train()"),ftr=l(),F(mF.$$.fragment),Pje=l(),Td=a("h2"),gF=a("a"),e2e=a("span"),F(IL.$$.fragment),mtr=l(),o2e=a("span"),gtr=o("AutoModelForSpeechSeq2Seq"),Bje=l(),Xo=a("div"),F(NL.$$.fragment),htr=l(),Md=a("p"),ptr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qz=a("a"),_tr=o("from_pretrained()"),utr=o(" class method or the "),jz=a("a"),btr=o("from_config()"),vtr=o(` class
method.`),Ftr=l(),qL=a("p"),Ttr=o("This class cannot be instantiated directly using "),r2e=a("code"),Mtr=o("__init__()"),Etr=o(" (throws an error)."),Ctr=l(),Tt=a("div"),F(jL.$$.fragment),wtr=l(),t2e=a("p"),Atr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ytr=l(),Ed=a("p"),Ltr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),xtr=o("not"),$tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),ktr=o("from_pretrained()"),Str=o(" to load the model weights."),Rtr=l(),F(hF.$$.fragment),Ptr=l(),go=a("div"),F(DL.$$.fragment),Btr=l(),n2e=a("p"),Itr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ntr=l(),za=a("p"),qtr=o("The model class to instantiate is selected based on the "),s2e=a("code"),jtr=o("model_type"),Dtr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),Gtr=o("pretrained_model_name_or_path"),Otr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),Vtr=o("pretrained_model_name_or_path"),Xtr=o(":"),ztr=l(),GL=a("ul"),pF=a("li"),d2e=a("strong"),Wtr=o("speech-encoder-decoder"),Qtr=o(" \u2014 "),Gz=a("a"),Htr=o("SpeechEncoderDecoderModel"),Utr=o(" (Speech Encoder decoder model)"),Jtr=l(),_F=a("li"),c2e=a("strong"),Ytr=o("speech_to_text"),Ktr=o(" \u2014 "),Oz=a("a"),Ztr=o("Speech2TextForConditionalGeneration"),ear=o(" (Speech2Text model)"),oar=l(),uF=a("p"),rar=o("The model is set in evaluation mode by default using "),f2e=a("code"),tar=o("model.eval()"),aar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),nar=o("model.train()"),sar=l(),F(bF.$$.fragment),Ije=l(),Cd=a("h2"),vF=a("a"),g2e=a("span"),F(OL.$$.fragment),lar=l(),h2e=a("span"),iar=o("AutoModelForAudioXVector"),Nje=l(),zo=a("div"),F(VL.$$.fragment),dar=l(),wd=a("p"),car=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Vz=a("a"),far=o("from_pretrained()"),mar=o(" class method or the "),Xz=a("a"),gar=o("from_config()"),har=o(` class
method.`),par=l(),XL=a("p"),_ar=o("This class cannot be instantiated directly using "),p2e=a("code"),uar=o("__init__()"),bar=o(" (throws an error)."),Far=l(),Mt=a("div"),F(zL.$$.fragment),Tar=l(),_2e=a("p"),Mar=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Ear=l(),Ad=a("p"),Car=o(`Note:
Loading a model from its configuration file does `),u2e=a("strong"),war=o("not"),Aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=a("a"),yar=o("from_pretrained()"),Lar=o(" to load the model weights."),xar=l(),F(FF.$$.fragment),$ar=l(),ho=a("div"),F(WL.$$.fragment),kar=l(),b2e=a("p"),Sar=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Rar=l(),Wa=a("p"),Par=o("The model class to instantiate is selected based on the "),v2e=a("code"),Bar=o("model_type"),Iar=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),Nar=o("pretrained_model_name_or_path"),qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),jar=o("pretrained_model_name_or_path"),Dar=o(":"),Gar=l(),Zr=a("ul"),TF=a("li"),M2e=a("strong"),Oar=o("data2vec-audio"),Var=o(" \u2014 "),Wz=a("a"),Xar=o("Data2VecAudioForXVector"),zar=o(" (Data2VecAudio model)"),War=l(),MF=a("li"),E2e=a("strong"),Qar=o("unispeech-sat"),Har=o(" \u2014 "),Qz=a("a"),Uar=o("UniSpeechSatForXVector"),Jar=o(" (UniSpeechSat model)"),Yar=l(),EF=a("li"),C2e=a("strong"),Kar=o("wav2vec2"),Zar=o(" \u2014 "),Hz=a("a"),enr=o("Wav2Vec2ForXVector"),onr=o(" (Wav2Vec2 model)"),rnr=l(),CF=a("li"),w2e=a("strong"),tnr=o("wav2vec2-conformer"),anr=o(" \u2014 "),Uz=a("a"),nnr=o("Wav2Vec2ConformerForXVector"),snr=o(" (Wav2Vec2-Conformer model)"),lnr=l(),wF=a("li"),A2e=a("strong"),inr=o("wavlm"),dnr=o(" \u2014 "),Jz=a("a"),cnr=o("WavLMForXVector"),fnr=o(" (WavLM model)"),mnr=l(),AF=a("p"),gnr=o("The model is set in evaluation mode by default using "),y2e=a("code"),hnr=o("model.eval()"),pnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=a("code"),_nr=o("model.train()"),unr=l(),F(yF.$$.fragment),qje=l(),yd=a("h2"),LF=a("a"),x2e=a("span"),F(QL.$$.fragment),bnr=l(),$2e=a("span"),vnr=o("AutoModelForMaskedImageModeling"),jje=l(),Wo=a("div"),F(HL.$$.fragment),Fnr=l(),Ld=a("p"),Tnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Yz=a("a"),Mnr=o("from_pretrained()"),Enr=o(" class method or the "),Kz=a("a"),Cnr=o("from_config()"),wnr=o(` class
method.`),Anr=l(),UL=a("p"),ynr=o("This class cannot be instantiated directly using "),k2e=a("code"),Lnr=o("__init__()"),xnr=o(" (throws an error)."),$nr=l(),Et=a("div"),F(JL.$$.fragment),knr=l(),S2e=a("p"),Snr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Rnr=l(),xd=a("p"),Pnr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),Bnr=o("not"),Inr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),Nnr=o("from_pretrained()"),qnr=o(" to load the model weights."),jnr=l(),F(xF.$$.fragment),Dnr=l(),po=a("div"),F(YL.$$.fragment),Gnr=l(),P2e=a("p"),Onr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Vnr=l(),Qa=a("p"),Xnr=o("The model class to instantiate is selected based on the "),B2e=a("code"),znr=o("model_type"),Wnr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),Qnr=o("pretrained_model_name_or_path"),Hnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=a("code"),Unr=o("pretrained_model_name_or_path"),Jnr=o(":"),Ynr=l(),$d=a("ul"),$F=a("li"),q2e=a("strong"),Knr=o("deit"),Znr=o(" \u2014 "),eW=a("a"),esr=o("DeiTForMaskedImageModeling"),osr=o(" (DeiT model)"),rsr=l(),kF=a("li"),j2e=a("strong"),tsr=o("swin"),asr=o(" \u2014 "),oW=a("a"),nsr=o("SwinForMaskedImageModeling"),ssr=o(" (Swin Transformer model)"),lsr=l(),SF=a("li"),D2e=a("strong"),isr=o("vit"),dsr=o(" \u2014 "),rW=a("a"),csr=o("ViTForMaskedImageModeling"),fsr=o(" (ViT model)"),msr=l(),RF=a("p"),gsr=o("The model is set in evaluation mode by default using "),G2e=a("code"),hsr=o("model.eval()"),psr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=a("code"),_sr=o("model.train()"),usr=l(),F(PF.$$.fragment),Dje=l(),kd=a("h2"),BF=a("a"),V2e=a("span"),F(KL.$$.fragment),bsr=l(),X2e=a("span"),vsr=o("AutoModelForObjectDetection"),Gje=l(),Qo=a("div"),F(ZL.$$.fragment),Fsr=l(),Sd=a("p"),Tsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tW=a("a"),Msr=o("from_pretrained()"),Esr=o(" class method or the "),aW=a("a"),Csr=o("from_config()"),wsr=o(` class
method.`),Asr=l(),e8=a("p"),ysr=o("This class cannot be instantiated directly using "),z2e=a("code"),Lsr=o("__init__()"),xsr=o(" (throws an error)."),$sr=l(),Ct=a("div"),F(o8.$$.fragment),ksr=l(),W2e=a("p"),Ssr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Rsr=l(),Rd=a("p"),Psr=o(`Note:
Loading a model from its configuration file does `),Q2e=a("strong"),Bsr=o("not"),Isr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),Nsr=o("from_pretrained()"),qsr=o(" to load the model weights."),jsr=l(),F(IF.$$.fragment),Dsr=l(),_o=a("div"),F(r8.$$.fragment),Gsr=l(),H2e=a("p"),Osr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Vsr=l(),Ha=a("p"),Xsr=o("The model class to instantiate is selected based on the "),U2e=a("code"),zsr=o("model_type"),Wsr=o(` property of the config object (either
passed as an argument or loaded from `),J2e=a("code"),Qsr=o("pretrained_model_name_or_path"),Hsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=a("code"),Usr=o("pretrained_model_name_or_path"),Jsr=o(":"),Ysr=l(),t8=a("ul"),NF=a("li"),K2e=a("strong"),Ksr=o("detr"),Zsr=o(" \u2014 "),sW=a("a"),elr=o("DetrForObjectDetection"),olr=o(" (DETR model)"),rlr=l(),qF=a("li"),Z2e=a("strong"),tlr=o("yolos"),alr=o(" \u2014 "),lW=a("a"),nlr=o("YolosForObjectDetection"),slr=o(" (YOLOS model)"),llr=l(),jF=a("p"),ilr=o("The model is set in evaluation mode by default using "),e1e=a("code"),dlr=o("model.eval()"),clr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=a("code"),flr=o("model.train()"),mlr=l(),F(DF.$$.fragment),Oje=l(),Pd=a("h2"),GF=a("a"),r1e=a("span"),F(a8.$$.fragment),glr=l(),t1e=a("span"),hlr=o("AutoModelForImageSegmentation"),Vje=l(),Ho=a("div"),F(n8.$$.fragment),plr=l(),Bd=a("p"),_lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iW=a("a"),ulr=o("from_pretrained()"),blr=o(" class method or the "),dW=a("a"),vlr=o("from_config()"),Flr=o(` class
method.`),Tlr=l(),s8=a("p"),Mlr=o("This class cannot be instantiated directly using "),a1e=a("code"),Elr=o("__init__()"),Clr=o(" (throws an error)."),wlr=l(),wt=a("div"),F(l8.$$.fragment),Alr=l(),n1e=a("p"),ylr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Llr=l(),Id=a("p"),xlr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),$lr=o("not"),klr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Slr=o("from_pretrained()"),Rlr=o(" to load the model weights."),Plr=l(),F(OF.$$.fragment),Blr=l(),uo=a("div"),F(i8.$$.fragment),Ilr=l(),l1e=a("p"),Nlr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),qlr=l(),Ua=a("p"),jlr=o("The model class to instantiate is selected based on the "),i1e=a("code"),Dlr=o("model_type"),Glr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),Olr=o("pretrained_model_name_or_path"),Vlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),Xlr=o("pretrained_model_name_or_path"),zlr=o(":"),Wlr=l(),f1e=a("ul"),VF=a("li"),m1e=a("strong"),Qlr=o("detr"),Hlr=o(" \u2014 "),fW=a("a"),Ulr=o("DetrForSegmentation"),Jlr=o(" (DETR model)"),Ylr=l(),XF=a("p"),Klr=o("The model is set in evaluation mode by default using "),g1e=a("code"),Zlr=o("model.eval()"),eir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=a("code"),oir=o("model.train()"),rir=l(),F(zF.$$.fragment),Xje=l(),Nd=a("h2"),WF=a("a"),p1e=a("span"),F(d8.$$.fragment),tir=l(),_1e=a("span"),air=o("AutoModelForSemanticSegmentation"),zje=l(),Uo=a("div"),F(c8.$$.fragment),nir=l(),qd=a("p"),sir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mW=a("a"),lir=o("from_pretrained()"),iir=o(" class method or the "),gW=a("a"),dir=o("from_config()"),cir=o(` class
method.`),fir=l(),f8=a("p"),mir=o("This class cannot be instantiated directly using "),u1e=a("code"),gir=o("__init__()"),hir=o(" (throws an error)."),pir=l(),At=a("div"),F(m8.$$.fragment),_ir=l(),b1e=a("p"),uir=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),bir=l(),jd=a("p"),vir=o(`Note:
Loading a model from its configuration file does `),v1e=a("strong"),Fir=o("not"),Tir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),Mir=o("from_pretrained()"),Eir=o(" to load the model weights."),Cir=l(),F(QF.$$.fragment),wir=l(),bo=a("div"),F(g8.$$.fragment),Air=l(),F1e=a("p"),yir=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Lir=l(),Ja=a("p"),xir=o("The model class to instantiate is selected based on the "),T1e=a("code"),$ir=o("model_type"),kir=o(` property of the config object (either
passed as an argument or loaded from `),M1e=a("code"),Sir=o("pretrained_model_name_or_path"),Rir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=a("code"),Pir=o("pretrained_model_name_or_path"),Bir=o(":"),Iir=l(),Ya=a("ul"),HF=a("li"),C1e=a("strong"),Nir=o("beit"),qir=o(" \u2014 "),pW=a("a"),jir=o("BeitForSemanticSegmentation"),Dir=o(" (BEiT model)"),Gir=l(),UF=a("li"),w1e=a("strong"),Oir=o("data2vec-vision"),Vir=o(" \u2014 "),_W=a("a"),Xir=o("Data2VecVisionForSemanticSegmentation"),zir=o(" (Data2VecVision model)"),Wir=l(),JF=a("li"),A1e=a("strong"),Qir=o("dpt"),Hir=o(" \u2014 "),uW=a("a"),Uir=o("DPTForSemanticSegmentation"),Jir=o(" (DPT model)"),Yir=l(),YF=a("li"),y1e=a("strong"),Kir=o("segformer"),Zir=o(" \u2014 "),bW=a("a"),edr=o("SegformerForSemanticSegmentation"),odr=o(" (SegFormer model)"),rdr=l(),KF=a("p"),tdr=o("The model is set in evaluation mode by default using "),L1e=a("code"),adr=o("model.eval()"),ndr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=a("code"),sdr=o("model.train()"),ldr=l(),F(ZF.$$.fragment),Wje=l(),Dd=a("h2"),eT=a("a"),$1e=a("span"),F(h8.$$.fragment),idr=l(),k1e=a("span"),ddr=o("AutoModelForInstanceSegmentation"),Qje=l(),Jo=a("div"),F(p8.$$.fragment),cdr=l(),Gd=a("p"),fdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vW=a("a"),mdr=o("from_pretrained()"),gdr=o(" class method or the "),FW=a("a"),hdr=o("from_config()"),pdr=o(` class
method.`),_dr=l(),_8=a("p"),udr=o("This class cannot be instantiated directly using "),S1e=a("code"),bdr=o("__init__()"),vdr=o(" (throws an error)."),Fdr=l(),yt=a("div"),F(u8.$$.fragment),Tdr=l(),R1e=a("p"),Mdr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Edr=l(),Od=a("p"),Cdr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),wdr=o("not"),Adr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=a("a"),ydr=o("from_pretrained()"),Ldr=o(" to load the model weights."),xdr=l(),F(oT.$$.fragment),$dr=l(),vo=a("div"),F(b8.$$.fragment),kdr=l(),B1e=a("p"),Sdr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Rdr=l(),Ka=a("p"),Pdr=o("The model class to instantiate is selected based on the "),I1e=a("code"),Bdr=o("model_type"),Idr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),Ndr=o("pretrained_model_name_or_path"),qdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=a("code"),jdr=o("pretrained_model_name_or_path"),Ddr=o(":"),Gdr=l(),j1e=a("ul"),rT=a("li"),D1e=a("strong"),Odr=o("maskformer"),Vdr=o(" \u2014 "),MW=a("a"),Xdr=o("MaskFormerForInstanceSegmentation"),zdr=o(" (MaskFormer model)"),Wdr=l(),tT=a("p"),Qdr=o("The model is set in evaluation mode by default using "),G1e=a("code"),Hdr=o("model.eval()"),Udr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=a("code"),Jdr=o("model.train()"),Ydr=l(),F(aT.$$.fragment),Hje=l(),Vd=a("h2"),nT=a("a"),V1e=a("span"),F(v8.$$.fragment),Kdr=l(),X1e=a("span"),Zdr=o("TFAutoModel"),Uje=l(),Yo=a("div"),F(F8.$$.fragment),ecr=l(),Xd=a("p"),ocr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EW=a("a"),rcr=o("from_pretrained()"),tcr=o(" class method or the "),CW=a("a"),acr=o("from_config()"),ncr=o(` class
method.`),scr=l(),T8=a("p"),lcr=o("This class cannot be instantiated directly using "),z1e=a("code"),icr=o("__init__()"),dcr=o(" (throws an error)."),ccr=l(),Lt=a("div"),F(M8.$$.fragment),fcr=l(),W1e=a("p"),mcr=o("Instantiates one of the base model classes of the library from a configuration."),gcr=l(),zd=a("p"),hcr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),pcr=o("not"),_cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=a("a"),ucr=o("from_pretrained()"),bcr=o(" to load the model weights."),vcr=l(),F(sT.$$.fragment),Fcr=l(),wr=a("div"),F(E8.$$.fragment),Tcr=l(),H1e=a("p"),Mcr=o("Instantiate one of the base model classes of the library from a pretrained model."),Ecr=l(),Za=a("p"),Ccr=o("The model class to instantiate is selected based on the "),U1e=a("code"),wcr=o("model_type"),Acr=o(` property of the config object (either
passed as an argument or loaded from `),J1e=a("code"),ycr=o("pretrained_model_name_or_path"),Lcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=a("code"),xcr=o("pretrained_model_name_or_path"),$cr=o(":"),kcr=l(),N=a("ul"),lT=a("li"),K1e=a("strong"),Scr=o("albert"),Rcr=o(" \u2014 "),AW=a("a"),Pcr=o("TFAlbertModel"),Bcr=o(" (ALBERT model)"),Icr=l(),iT=a("li"),Z1e=a("strong"),Ncr=o("bart"),qcr=o(" \u2014 "),yW=a("a"),jcr=o("TFBartModel"),Dcr=o(" (BART model)"),Gcr=l(),dT=a("li"),e7e=a("strong"),Ocr=o("bert"),Vcr=o(" \u2014 "),LW=a("a"),Xcr=o("TFBertModel"),zcr=o(" (BERT model)"),Wcr=l(),cT=a("li"),o7e=a("strong"),Qcr=o("blenderbot"),Hcr=o(" \u2014 "),xW=a("a"),Ucr=o("TFBlenderbotModel"),Jcr=o(" (Blenderbot model)"),Ycr=l(),fT=a("li"),r7e=a("strong"),Kcr=o("blenderbot-small"),Zcr=o(" \u2014 "),$W=a("a"),efr=o("TFBlenderbotSmallModel"),ofr=o(" (BlenderbotSmall model)"),rfr=l(),mT=a("li"),t7e=a("strong"),tfr=o("camembert"),afr=o(" \u2014 "),kW=a("a"),nfr=o("TFCamembertModel"),sfr=o(" (CamemBERT model)"),lfr=l(),gT=a("li"),a7e=a("strong"),ifr=o("clip"),dfr=o(" \u2014 "),SW=a("a"),cfr=o("TFCLIPModel"),ffr=o(" (CLIP model)"),mfr=l(),hT=a("li"),n7e=a("strong"),gfr=o("convbert"),hfr=o(" \u2014 "),RW=a("a"),pfr=o("TFConvBertModel"),_fr=o(" (ConvBERT model)"),ufr=l(),pT=a("li"),s7e=a("strong"),bfr=o("convnext"),vfr=o(" \u2014 "),PW=a("a"),Ffr=o("TFConvNextModel"),Tfr=o(" (ConvNeXT model)"),Mfr=l(),_T=a("li"),l7e=a("strong"),Efr=o("ctrl"),Cfr=o(" \u2014 "),BW=a("a"),wfr=o("TFCTRLModel"),Afr=o(" (CTRL model)"),yfr=l(),uT=a("li"),i7e=a("strong"),Lfr=o("data2vec-vision"),xfr=o(" \u2014 "),IW=a("a"),$fr=o("TFData2VecVisionModel"),kfr=o(" (Data2VecVision model)"),Sfr=l(),bT=a("li"),d7e=a("strong"),Rfr=o("deberta"),Pfr=o(" \u2014 "),NW=a("a"),Bfr=o("TFDebertaModel"),Ifr=o(" (DeBERTa model)"),Nfr=l(),vT=a("li"),c7e=a("strong"),qfr=o("deberta-v2"),jfr=o(" \u2014 "),qW=a("a"),Dfr=o("TFDebertaV2Model"),Gfr=o(" (DeBERTa-v2 model)"),Ofr=l(),FT=a("li"),f7e=a("strong"),Vfr=o("distilbert"),Xfr=o(" \u2014 "),jW=a("a"),zfr=o("TFDistilBertModel"),Wfr=o(" (DistilBERT model)"),Qfr=l(),TT=a("li"),m7e=a("strong"),Hfr=o("dpr"),Ufr=o(" \u2014 "),DW=a("a"),Jfr=o("TFDPRQuestionEncoder"),Yfr=o(" (DPR model)"),Kfr=l(),MT=a("li"),g7e=a("strong"),Zfr=o("electra"),emr=o(" \u2014 "),GW=a("a"),omr=o("TFElectraModel"),rmr=o(" (ELECTRA model)"),tmr=l(),ET=a("li"),h7e=a("strong"),amr=o("flaubert"),nmr=o(" \u2014 "),OW=a("a"),smr=o("TFFlaubertModel"),lmr=o(" (FlauBERT model)"),imr=l(),Ns=a("li"),p7e=a("strong"),dmr=o("funnel"),cmr=o(" \u2014 "),VW=a("a"),fmr=o("TFFunnelModel"),mmr=o(" or "),XW=a("a"),gmr=o("TFFunnelBaseModel"),hmr=o(" (Funnel Transformer model)"),pmr=l(),CT=a("li"),_7e=a("strong"),_mr=o("gpt2"),umr=o(" \u2014 "),zW=a("a"),bmr=o("TFGPT2Model"),vmr=o(" (OpenAI GPT-2 model)"),Fmr=l(),wT=a("li"),u7e=a("strong"),Tmr=o("gptj"),Mmr=o(" \u2014 "),WW=a("a"),Emr=o("TFGPTJModel"),Cmr=o(" (GPT-J model)"),wmr=l(),AT=a("li"),b7e=a("strong"),Amr=o("hubert"),ymr=o(" \u2014 "),QW=a("a"),Lmr=o("TFHubertModel"),xmr=o(" (Hubert model)"),$mr=l(),yT=a("li"),v7e=a("strong"),kmr=o("layoutlm"),Smr=o(" \u2014 "),HW=a("a"),Rmr=o("TFLayoutLMModel"),Pmr=o(" (LayoutLM model)"),Bmr=l(),LT=a("li"),F7e=a("strong"),Imr=o("led"),Nmr=o(" \u2014 "),UW=a("a"),qmr=o("TFLEDModel"),jmr=o(" (LED model)"),Dmr=l(),xT=a("li"),T7e=a("strong"),Gmr=o("longformer"),Omr=o(" \u2014 "),JW=a("a"),Vmr=o("TFLongformerModel"),Xmr=o(" (Longformer model)"),zmr=l(),$T=a("li"),M7e=a("strong"),Wmr=o("lxmert"),Qmr=o(" \u2014 "),YW=a("a"),Hmr=o("TFLxmertModel"),Umr=o(" (LXMERT model)"),Jmr=l(),kT=a("li"),E7e=a("strong"),Ymr=o("marian"),Kmr=o(" \u2014 "),KW=a("a"),Zmr=o("TFMarianModel"),egr=o(" (Marian model)"),ogr=l(),ST=a("li"),C7e=a("strong"),rgr=o("mbart"),tgr=o(" \u2014 "),ZW=a("a"),agr=o("TFMBartModel"),ngr=o(" (mBART model)"),sgr=l(),RT=a("li"),w7e=a("strong"),lgr=o("mobilebert"),igr=o(" \u2014 "),eQ=a("a"),dgr=o("TFMobileBertModel"),cgr=o(" (MobileBERT model)"),fgr=l(),PT=a("li"),A7e=a("strong"),mgr=o("mpnet"),ggr=o(" \u2014 "),oQ=a("a"),hgr=o("TFMPNetModel"),pgr=o(" (MPNet model)"),_gr=l(),BT=a("li"),y7e=a("strong"),ugr=o("mt5"),bgr=o(" \u2014 "),rQ=a("a"),vgr=o("TFMT5Model"),Fgr=o(" (MT5 model)"),Tgr=l(),IT=a("li"),L7e=a("strong"),Mgr=o("openai-gpt"),Egr=o(" \u2014 "),tQ=a("a"),Cgr=o("TFOpenAIGPTModel"),wgr=o(" (OpenAI GPT model)"),Agr=l(),NT=a("li"),x7e=a("strong"),ygr=o("opt"),Lgr=o(" \u2014 "),aQ=a("a"),xgr=o("TFOPTModel"),$gr=o(" (OPT model)"),kgr=l(),qT=a("li"),$7e=a("strong"),Sgr=o("pegasus"),Rgr=o(" \u2014 "),nQ=a("a"),Pgr=o("TFPegasusModel"),Bgr=o(" (Pegasus model)"),Igr=l(),jT=a("li"),k7e=a("strong"),Ngr=o("rembert"),qgr=o(" \u2014 "),sQ=a("a"),jgr=o("TFRemBertModel"),Dgr=o(" (RemBERT model)"),Ggr=l(),DT=a("li"),S7e=a("strong"),Ogr=o("resnet"),Vgr=o(" \u2014 "),lQ=a("a"),Xgr=o("TFResNetModel"),zgr=o(" (ResNet model)"),Wgr=l(),GT=a("li"),R7e=a("strong"),Qgr=o("roberta"),Hgr=o(" \u2014 "),iQ=a("a"),Ugr=o("TFRobertaModel"),Jgr=o(" (RoBERTa model)"),Ygr=l(),OT=a("li"),P7e=a("strong"),Kgr=o("roformer"),Zgr=o(" \u2014 "),dQ=a("a"),ehr=o("TFRoFormerModel"),ohr=o(" (RoFormer model)"),rhr=l(),VT=a("li"),B7e=a("strong"),thr=o("speech_to_text"),ahr=o(" \u2014 "),cQ=a("a"),nhr=o("TFSpeech2TextModel"),shr=o(" (Speech2Text model)"),lhr=l(),XT=a("li"),I7e=a("strong"),ihr=o("swin"),dhr=o(" \u2014 "),fQ=a("a"),chr=o("TFSwinModel"),fhr=o(" (Swin Transformer model)"),mhr=l(),zT=a("li"),N7e=a("strong"),ghr=o("t5"),hhr=o(" \u2014 "),mQ=a("a"),phr=o("TFT5Model"),_hr=o(" (T5 model)"),uhr=l(),WT=a("li"),q7e=a("strong"),bhr=o("tapas"),vhr=o(" \u2014 "),gQ=a("a"),Fhr=o("TFTapasModel"),Thr=o(" (TAPAS model)"),Mhr=l(),QT=a("li"),j7e=a("strong"),Ehr=o("transfo-xl"),Chr=o(" \u2014 "),hQ=a("a"),whr=o("TFTransfoXLModel"),Ahr=o(" (Transformer-XL model)"),yhr=l(),HT=a("li"),D7e=a("strong"),Lhr=o("vit"),xhr=o(" \u2014 "),pQ=a("a"),$hr=o("TFViTModel"),khr=o(" (ViT model)"),Shr=l(),UT=a("li"),G7e=a("strong"),Rhr=o("vit_mae"),Phr=o(" \u2014 "),_Q=a("a"),Bhr=o("TFViTMAEModel"),Ihr=o(" (ViTMAE model)"),Nhr=l(),JT=a("li"),O7e=a("strong"),qhr=o("wav2vec2"),jhr=o(" \u2014 "),uQ=a("a"),Dhr=o("TFWav2Vec2Model"),Ghr=o(" (Wav2Vec2 model)"),Ohr=l(),YT=a("li"),V7e=a("strong"),Vhr=o("xlm"),Xhr=o(" \u2014 "),bQ=a("a"),zhr=o("TFXLMModel"),Whr=o(" (XLM model)"),Qhr=l(),KT=a("li"),X7e=a("strong"),Hhr=o("xlm-roberta"),Uhr=o(" \u2014 "),vQ=a("a"),Jhr=o("TFXLMRobertaModel"),Yhr=o(" (XLM-RoBERTa model)"),Khr=l(),ZT=a("li"),z7e=a("strong"),Zhr=o("xlnet"),epr=o(" \u2014 "),FQ=a("a"),opr=o("TFXLNetModel"),rpr=o(" (XLNet model)"),tpr=l(),F(eM.$$.fragment),Jje=l(),Wd=a("h2"),oM=a("a"),W7e=a("span"),F(C8.$$.fragment),apr=l(),Q7e=a("span"),npr=o("TFAutoModelForPreTraining"),Yje=l(),Ko=a("div"),F(w8.$$.fragment),spr=l(),Qd=a("p"),lpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TQ=a("a"),ipr=o("from_pretrained()"),dpr=o(" class method or the "),MQ=a("a"),cpr=o("from_config()"),fpr=o(` class
method.`),mpr=l(),A8=a("p"),gpr=o("This class cannot be instantiated directly using "),H7e=a("code"),hpr=o("__init__()"),ppr=o(" (throws an error)."),_pr=l(),xt=a("div"),F(y8.$$.fragment),upr=l(),U7e=a("p"),bpr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vpr=l(),Hd=a("p"),Fpr=o(`Note:
Loading a model from its configuration file does `),J7e=a("strong"),Tpr=o("not"),Mpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),Epr=o("from_pretrained()"),Cpr=o(" to load the model weights."),wpr=l(),F(rM.$$.fragment),Apr=l(),Ar=a("div"),F(L8.$$.fragment),ypr=l(),Y7e=a("p"),Lpr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xpr=l(),en=a("p"),$pr=o("The model class to instantiate is selected based on the "),K7e=a("code"),kpr=o("model_type"),Spr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),Rpr=o("pretrained_model_name_or_path"),Ppr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),Bpr=o("pretrained_model_name_or_path"),Ipr=o(":"),Npr=l(),se=a("ul"),tM=a("li"),obe=a("strong"),qpr=o("albert"),jpr=o(" \u2014 "),CQ=a("a"),Dpr=o("TFAlbertForPreTraining"),Gpr=o(" (ALBERT model)"),Opr=l(),aM=a("li"),rbe=a("strong"),Vpr=o("bart"),Xpr=o(" \u2014 "),wQ=a("a"),zpr=o("TFBartForConditionalGeneration"),Wpr=o(" (BART model)"),Qpr=l(),nM=a("li"),tbe=a("strong"),Hpr=o("bert"),Upr=o(" \u2014 "),AQ=a("a"),Jpr=o("TFBertForPreTraining"),Ypr=o(" (BERT model)"),Kpr=l(),sM=a("li"),abe=a("strong"),Zpr=o("camembert"),e_r=o(" \u2014 "),yQ=a("a"),o_r=o("TFCamembertForMaskedLM"),r_r=o(" (CamemBERT model)"),t_r=l(),lM=a("li"),nbe=a("strong"),a_r=o("ctrl"),n_r=o(" \u2014 "),LQ=a("a"),s_r=o("TFCTRLLMHeadModel"),l_r=o(" (CTRL model)"),i_r=l(),iM=a("li"),sbe=a("strong"),d_r=o("distilbert"),c_r=o(" \u2014 "),xQ=a("a"),f_r=o("TFDistilBertForMaskedLM"),m_r=o(" (DistilBERT model)"),g_r=l(),dM=a("li"),lbe=a("strong"),h_r=o("electra"),p_r=o(" \u2014 "),$Q=a("a"),__r=o("TFElectraForPreTraining"),u_r=o(" (ELECTRA model)"),b_r=l(),cM=a("li"),ibe=a("strong"),v_r=o("flaubert"),F_r=o(" \u2014 "),kQ=a("a"),T_r=o("TFFlaubertWithLMHeadModel"),M_r=o(" (FlauBERT model)"),E_r=l(),fM=a("li"),dbe=a("strong"),C_r=o("funnel"),w_r=o(" \u2014 "),SQ=a("a"),A_r=o("TFFunnelForPreTraining"),y_r=o(" (Funnel Transformer model)"),L_r=l(),mM=a("li"),cbe=a("strong"),x_r=o("gpt2"),$_r=o(" \u2014 "),RQ=a("a"),k_r=o("TFGPT2LMHeadModel"),S_r=o(" (OpenAI GPT-2 model)"),R_r=l(),gM=a("li"),fbe=a("strong"),P_r=o("layoutlm"),B_r=o(" \u2014 "),PQ=a("a"),I_r=o("TFLayoutLMForMaskedLM"),N_r=o(" (LayoutLM model)"),q_r=l(),hM=a("li"),mbe=a("strong"),j_r=o("lxmert"),D_r=o(" \u2014 "),BQ=a("a"),G_r=o("TFLxmertForPreTraining"),O_r=o(" (LXMERT model)"),V_r=l(),pM=a("li"),gbe=a("strong"),X_r=o("mobilebert"),z_r=o(" \u2014 "),IQ=a("a"),W_r=o("TFMobileBertForPreTraining"),Q_r=o(" (MobileBERT model)"),H_r=l(),_M=a("li"),hbe=a("strong"),U_r=o("mpnet"),J_r=o(" \u2014 "),NQ=a("a"),Y_r=o("TFMPNetForMaskedLM"),K_r=o(" (MPNet model)"),Z_r=l(),uM=a("li"),pbe=a("strong"),eur=o("openai-gpt"),our=o(" \u2014 "),qQ=a("a"),rur=o("TFOpenAIGPTLMHeadModel"),tur=o(" (OpenAI GPT model)"),aur=l(),bM=a("li"),_be=a("strong"),nur=o("roberta"),sur=o(" \u2014 "),jQ=a("a"),lur=o("TFRobertaForMaskedLM"),iur=o(" (RoBERTa model)"),dur=l(),vM=a("li"),ube=a("strong"),cur=o("t5"),fur=o(" \u2014 "),DQ=a("a"),mur=o("TFT5ForConditionalGeneration"),gur=o(" (T5 model)"),hur=l(),FM=a("li"),bbe=a("strong"),pur=o("tapas"),_ur=o(" \u2014 "),GQ=a("a"),uur=o("TFTapasForMaskedLM"),bur=o(" (TAPAS model)"),vur=l(),TM=a("li"),vbe=a("strong"),Fur=o("transfo-xl"),Tur=o(" \u2014 "),OQ=a("a"),Mur=o("TFTransfoXLLMHeadModel"),Eur=o(" (Transformer-XL model)"),Cur=l(),MM=a("li"),Fbe=a("strong"),wur=o("vit_mae"),Aur=o(" \u2014 "),VQ=a("a"),yur=o("TFViTMAEForPreTraining"),Lur=o(" (ViTMAE model)"),xur=l(),EM=a("li"),Tbe=a("strong"),$ur=o("xlm"),kur=o(" \u2014 "),XQ=a("a"),Sur=o("TFXLMWithLMHeadModel"),Rur=o(" (XLM model)"),Pur=l(),CM=a("li"),Mbe=a("strong"),Bur=o("xlm-roberta"),Iur=o(" \u2014 "),zQ=a("a"),Nur=o("TFXLMRobertaForMaskedLM"),qur=o(" (XLM-RoBERTa model)"),jur=l(),wM=a("li"),Ebe=a("strong"),Dur=o("xlnet"),Gur=o(" \u2014 "),WQ=a("a"),Our=o("TFXLNetLMHeadModel"),Vur=o(" (XLNet model)"),Xur=l(),F(AM.$$.fragment),Kje=l(),Ud=a("h2"),yM=a("a"),Cbe=a("span"),F(x8.$$.fragment),zur=l(),wbe=a("span"),Wur=o("TFAutoModelForCausalLM"),Zje=l(),Zo=a("div"),F($8.$$.fragment),Qur=l(),Jd=a("p"),Hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QQ=a("a"),Uur=o("from_pretrained()"),Jur=o(" class method or the "),HQ=a("a"),Yur=o("from_config()"),Kur=o(` class
method.`),Zur=l(),k8=a("p"),e2r=o("This class cannot be instantiated directly using "),Abe=a("code"),o2r=o("__init__()"),r2r=o(" (throws an error)."),t2r=l(),$t=a("div"),F(S8.$$.fragment),a2r=l(),ybe=a("p"),n2r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s2r=l(),Yd=a("p"),l2r=o(`Note:
Loading a model from its configuration file does `),Lbe=a("strong"),i2r=o("not"),d2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),c2r=o("from_pretrained()"),f2r=o(" to load the model weights."),m2r=l(),F(LM.$$.fragment),g2r=l(),yr=a("div"),F(R8.$$.fragment),h2r=l(),xbe=a("p"),p2r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_2r=l(),on=a("p"),u2r=o("The model class to instantiate is selected based on the "),$be=a("code"),b2r=o("model_type"),v2r=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),F2r=o("pretrained_model_name_or_path"),T2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(":"),C2r=l(),Me=a("ul"),xM=a("li"),Rbe=a("strong"),w2r=o("bert"),A2r=o(" \u2014 "),JQ=a("a"),y2r=o("TFBertLMHeadModel"),L2r=o(" (BERT model)"),x2r=l(),$M=a("li"),Pbe=a("strong"),$2r=o("camembert"),k2r=o(" \u2014 "),YQ=a("a"),S2r=o("TFCamembertForCausalLM"),R2r=o(" (CamemBERT model)"),P2r=l(),kM=a("li"),Bbe=a("strong"),B2r=o("ctrl"),I2r=o(" \u2014 "),KQ=a("a"),N2r=o("TFCTRLLMHeadModel"),q2r=o(" (CTRL model)"),j2r=l(),SM=a("li"),Ibe=a("strong"),D2r=o("gpt2"),G2r=o(" \u2014 "),ZQ=a("a"),O2r=o("TFGPT2LMHeadModel"),V2r=o(" (OpenAI GPT-2 model)"),X2r=l(),RM=a("li"),Nbe=a("strong"),z2r=o("gptj"),W2r=o(" \u2014 "),eH=a("a"),Q2r=o("TFGPTJForCausalLM"),H2r=o(" (GPT-J model)"),U2r=l(),PM=a("li"),qbe=a("strong"),J2r=o("openai-gpt"),Y2r=o(" \u2014 "),oH=a("a"),K2r=o("TFOpenAIGPTLMHeadModel"),Z2r=o(" (OpenAI GPT model)"),e1r=l(),BM=a("li"),jbe=a("strong"),o1r=o("opt"),r1r=o(" \u2014 "),rH=a("a"),t1r=o("TFOPTForCausalLM"),a1r=o(" (OPT model)"),n1r=l(),IM=a("li"),Dbe=a("strong"),s1r=o("rembert"),l1r=o(" \u2014 "),tH=a("a"),i1r=o("TFRemBertForCausalLM"),d1r=o(" (RemBERT model)"),c1r=l(),NM=a("li"),Gbe=a("strong"),f1r=o("roberta"),m1r=o(" \u2014 "),aH=a("a"),g1r=o("TFRobertaForCausalLM"),h1r=o(" (RoBERTa model)"),p1r=l(),qM=a("li"),Obe=a("strong"),_1r=o("roformer"),u1r=o(" \u2014 "),nH=a("a"),b1r=o("TFRoFormerForCausalLM"),v1r=o(" (RoFormer model)"),F1r=l(),jM=a("li"),Vbe=a("strong"),T1r=o("transfo-xl"),M1r=o(" \u2014 "),sH=a("a"),E1r=o("TFTransfoXLLMHeadModel"),C1r=o(" (Transformer-XL model)"),w1r=l(),DM=a("li"),Xbe=a("strong"),A1r=o("xlm"),y1r=o(" \u2014 "),lH=a("a"),L1r=o("TFXLMWithLMHeadModel"),x1r=o(" (XLM model)"),$1r=l(),GM=a("li"),zbe=a("strong"),k1r=o("xlnet"),S1r=o(" \u2014 "),iH=a("a"),R1r=o("TFXLNetLMHeadModel"),P1r=o(" (XLNet model)"),B1r=l(),F(OM.$$.fragment),eDe=l(),Kd=a("h2"),VM=a("a"),Wbe=a("span"),F(P8.$$.fragment),I1r=l(),Qbe=a("span"),N1r=o("TFAutoModelForImageClassification"),oDe=l(),er=a("div"),F(B8.$$.fragment),q1r=l(),Zd=a("p"),j1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dH=a("a"),D1r=o("from_pretrained()"),G1r=o(" class method or the "),cH=a("a"),O1r=o("from_config()"),V1r=o(` class
method.`),X1r=l(),I8=a("p"),z1r=o("This class cannot be instantiated directly using "),Hbe=a("code"),W1r=o("__init__()"),Q1r=o(" (throws an error)."),H1r=l(),kt=a("div"),F(N8.$$.fragment),U1r=l(),Ube=a("p"),J1r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Y1r=l(),ec=a("p"),K1r=o(`Note:
Loading a model from its configuration file does `),Jbe=a("strong"),Z1r=o("not"),e7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),o7r=o("from_pretrained()"),r7r=o(" to load the model weights."),t7r=l(),F(XM.$$.fragment),a7r=l(),Lr=a("div"),F(q8.$$.fragment),n7r=l(),Ybe=a("p"),s7r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),l7r=l(),rn=a("p"),i7r=o("The model class to instantiate is selected based on the "),Kbe=a("code"),d7r=o("model_type"),c7r=o(` property of the config object (either
passed as an argument or loaded from `),Zbe=a("code"),f7r=o("pretrained_model_name_or_path"),m7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=a("code"),g7r=o("pretrained_model_name_or_path"),h7r=o(":"),p7r=l(),et=a("ul"),zM=a("li"),o4e=a("strong"),_7r=o("convnext"),u7r=o(" \u2014 "),mH=a("a"),b7r=o("TFConvNextForImageClassification"),v7r=o(" (ConvNeXT model)"),F7r=l(),WM=a("li"),r4e=a("strong"),T7r=o("data2vec-vision"),M7r=o(" \u2014 "),gH=a("a"),E7r=o("TFData2VecVisionForImageClassification"),C7r=o(" (Data2VecVision model)"),w7r=l(),QM=a("li"),t4e=a("strong"),A7r=o("resnet"),y7r=o(" \u2014 "),hH=a("a"),L7r=o("TFResNetForImageClassification"),x7r=o(" (ResNet model)"),$7r=l(),HM=a("li"),a4e=a("strong"),k7r=o("swin"),S7r=o(" \u2014 "),pH=a("a"),R7r=o("TFSwinForImageClassification"),P7r=o(" (Swin Transformer model)"),B7r=l(),UM=a("li"),n4e=a("strong"),I7r=o("vit"),N7r=o(" \u2014 "),_H=a("a"),q7r=o("TFViTForImageClassification"),j7r=o(" (ViT model)"),D7r=l(),F(JM.$$.fragment),rDe=l(),oc=a("h2"),YM=a("a"),s4e=a("span"),F(j8.$$.fragment),G7r=l(),l4e=a("span"),O7r=o("TFAutoModelForMaskedLM"),tDe=l(),or=a("div"),F(D8.$$.fragment),V7r=l(),rc=a("p"),X7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uH=a("a"),z7r=o("from_pretrained()"),W7r=o(" class method or the "),bH=a("a"),Q7r=o("from_config()"),H7r=o(` class
method.`),U7r=l(),G8=a("p"),J7r=o("This class cannot be instantiated directly using "),i4e=a("code"),Y7r=o("__init__()"),K7r=o(" (throws an error)."),Z7r=l(),St=a("div"),F(O8.$$.fragment),ebr=l(),d4e=a("p"),obr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rbr=l(),tc=a("p"),tbr=o(`Note:
Loading a model from its configuration file does `),c4e=a("strong"),abr=o("not"),nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),sbr=o("from_pretrained()"),lbr=o(" to load the model weights."),ibr=l(),F(KM.$$.fragment),dbr=l(),xr=a("div"),F(V8.$$.fragment),cbr=l(),f4e=a("p"),fbr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mbr=l(),tn=a("p"),gbr=o("The model class to instantiate is selected based on the "),m4e=a("code"),hbr=o("model_type"),pbr=o(` property of the config object (either
passed as an argument or loaded from `),g4e=a("code"),_br=o("pretrained_model_name_or_path"),ubr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=a("code"),bbr=o("pretrained_model_name_or_path"),vbr=o(":"),Fbr=l(),ie=a("ul"),ZM=a("li"),p4e=a("strong"),Tbr=o("albert"),Mbr=o(" \u2014 "),FH=a("a"),Ebr=o("TFAlbertForMaskedLM"),Cbr=o(" (ALBERT model)"),wbr=l(),eE=a("li"),_4e=a("strong"),Abr=o("bert"),ybr=o(" \u2014 "),TH=a("a"),Lbr=o("TFBertForMaskedLM"),xbr=o(" (BERT model)"),$br=l(),oE=a("li"),u4e=a("strong"),kbr=o("camembert"),Sbr=o(" \u2014 "),MH=a("a"),Rbr=o("TFCamembertForMaskedLM"),Pbr=o(" (CamemBERT model)"),Bbr=l(),rE=a("li"),b4e=a("strong"),Ibr=o("convbert"),Nbr=o(" \u2014 "),EH=a("a"),qbr=o("TFConvBertForMaskedLM"),jbr=o(" (ConvBERT model)"),Dbr=l(),tE=a("li"),v4e=a("strong"),Gbr=o("deberta"),Obr=o(" \u2014 "),CH=a("a"),Vbr=o("TFDebertaForMaskedLM"),Xbr=o(" (DeBERTa model)"),zbr=l(),aE=a("li"),F4e=a("strong"),Wbr=o("deberta-v2"),Qbr=o(" \u2014 "),wH=a("a"),Hbr=o("TFDebertaV2ForMaskedLM"),Ubr=o(" (DeBERTa-v2 model)"),Jbr=l(),nE=a("li"),T4e=a("strong"),Ybr=o("distilbert"),Kbr=o(" \u2014 "),AH=a("a"),Zbr=o("TFDistilBertForMaskedLM"),e4r=o(" (DistilBERT model)"),o4r=l(),sE=a("li"),M4e=a("strong"),r4r=o("electra"),t4r=o(" \u2014 "),yH=a("a"),a4r=o("TFElectraForMaskedLM"),n4r=o(" (ELECTRA model)"),s4r=l(),lE=a("li"),E4e=a("strong"),l4r=o("flaubert"),i4r=o(" \u2014 "),LH=a("a"),d4r=o("TFFlaubertWithLMHeadModel"),c4r=o(" (FlauBERT model)"),f4r=l(),iE=a("li"),C4e=a("strong"),m4r=o("funnel"),g4r=o(" \u2014 "),xH=a("a"),h4r=o("TFFunnelForMaskedLM"),p4r=o(" (Funnel Transformer model)"),_4r=l(),dE=a("li"),w4e=a("strong"),u4r=o("layoutlm"),b4r=o(" \u2014 "),$H=a("a"),v4r=o("TFLayoutLMForMaskedLM"),F4r=o(" (LayoutLM model)"),T4r=l(),cE=a("li"),A4e=a("strong"),M4r=o("longformer"),E4r=o(" \u2014 "),kH=a("a"),C4r=o("TFLongformerForMaskedLM"),w4r=o(" (Longformer model)"),A4r=l(),fE=a("li"),y4e=a("strong"),y4r=o("mobilebert"),L4r=o(" \u2014 "),SH=a("a"),x4r=o("TFMobileBertForMaskedLM"),$4r=o(" (MobileBERT model)"),k4r=l(),mE=a("li"),L4e=a("strong"),S4r=o("mpnet"),R4r=o(" \u2014 "),RH=a("a"),P4r=o("TFMPNetForMaskedLM"),B4r=o(" (MPNet model)"),I4r=l(),gE=a("li"),x4e=a("strong"),N4r=o("rembert"),q4r=o(" \u2014 "),PH=a("a"),j4r=o("TFRemBertForMaskedLM"),D4r=o(" (RemBERT model)"),G4r=l(),hE=a("li"),$4e=a("strong"),O4r=o("roberta"),V4r=o(" \u2014 "),BH=a("a"),X4r=o("TFRobertaForMaskedLM"),z4r=o(" (RoBERTa model)"),W4r=l(),pE=a("li"),k4e=a("strong"),Q4r=o("roformer"),H4r=o(" \u2014 "),IH=a("a"),U4r=o("TFRoFormerForMaskedLM"),J4r=o(" (RoFormer model)"),Y4r=l(),_E=a("li"),S4e=a("strong"),K4r=o("tapas"),Z4r=o(" \u2014 "),NH=a("a"),evr=o("TFTapasForMaskedLM"),ovr=o(" (TAPAS model)"),rvr=l(),uE=a("li"),R4e=a("strong"),tvr=o("xlm"),avr=o(" \u2014 "),qH=a("a"),nvr=o("TFXLMWithLMHeadModel"),svr=o(" (XLM model)"),lvr=l(),bE=a("li"),P4e=a("strong"),ivr=o("xlm-roberta"),dvr=o(" \u2014 "),jH=a("a"),cvr=o("TFXLMRobertaForMaskedLM"),fvr=o(" (XLM-RoBERTa model)"),mvr=l(),F(vE.$$.fragment),aDe=l(),ac=a("h2"),FE=a("a"),B4e=a("span"),F(X8.$$.fragment),gvr=l(),I4e=a("span"),hvr=o("TFAutoModelForSeq2SeqLM"),nDe=l(),rr=a("div"),F(z8.$$.fragment),pvr=l(),nc=a("p"),_vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DH=a("a"),uvr=o("from_pretrained()"),bvr=o(" class method or the "),GH=a("a"),vvr=o("from_config()"),Fvr=o(` class
method.`),Tvr=l(),W8=a("p"),Mvr=o("This class cannot be instantiated directly using "),N4e=a("code"),Evr=o("__init__()"),Cvr=o(" (throws an error)."),wvr=l(),Rt=a("div"),F(Q8.$$.fragment),Avr=l(),q4e=a("p"),yvr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Lvr=l(),sc=a("p"),xvr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),$vr=o("not"),kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),Svr=o("from_pretrained()"),Rvr=o(" to load the model weights."),Pvr=l(),F(TE.$$.fragment),Bvr=l(),$r=a("div"),F(H8.$$.fragment),Ivr=l(),D4e=a("p"),Nvr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qvr=l(),an=a("p"),jvr=o("The model class to instantiate is selected based on the "),G4e=a("code"),Dvr=o("model_type"),Gvr=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(":"),Wvr=l(),ye=a("ul"),ME=a("li"),X4e=a("strong"),Qvr=o("bart"),Hvr=o(" \u2014 "),VH=a("a"),Uvr=o("TFBartForConditionalGeneration"),Jvr=o(" (BART model)"),Yvr=l(),EE=a("li"),z4e=a("strong"),Kvr=o("blenderbot"),Zvr=o(" \u2014 "),XH=a("a"),eFr=o("TFBlenderbotForConditionalGeneration"),oFr=o(" (Blenderbot model)"),rFr=l(),CE=a("li"),W4e=a("strong"),tFr=o("blenderbot-small"),aFr=o(" \u2014 "),zH=a("a"),nFr=o("TFBlenderbotSmallForConditionalGeneration"),sFr=o(" (BlenderbotSmall model)"),lFr=l(),wE=a("li"),Q4e=a("strong"),iFr=o("encoder-decoder"),dFr=o(" \u2014 "),WH=a("a"),cFr=o("TFEncoderDecoderModel"),fFr=o(" (Encoder decoder model)"),mFr=l(),AE=a("li"),H4e=a("strong"),gFr=o("led"),hFr=o(" \u2014 "),QH=a("a"),pFr=o("TFLEDForConditionalGeneration"),_Fr=o(" (LED model)"),uFr=l(),yE=a("li"),U4e=a("strong"),bFr=o("marian"),vFr=o(" \u2014 "),HH=a("a"),FFr=o("TFMarianMTModel"),TFr=o(" (Marian model)"),MFr=l(),LE=a("li"),J4e=a("strong"),EFr=o("mbart"),CFr=o(" \u2014 "),UH=a("a"),wFr=o("TFMBartForConditionalGeneration"),AFr=o(" (mBART model)"),yFr=l(),xE=a("li"),Y4e=a("strong"),LFr=o("mt5"),xFr=o(" \u2014 "),JH=a("a"),$Fr=o("TFMT5ForConditionalGeneration"),kFr=o(" (MT5 model)"),SFr=l(),$E=a("li"),K4e=a("strong"),RFr=o("pegasus"),PFr=o(" \u2014 "),YH=a("a"),BFr=o("TFPegasusForConditionalGeneration"),IFr=o(" (Pegasus model)"),NFr=l(),kE=a("li"),Z4e=a("strong"),qFr=o("t5"),jFr=o(" \u2014 "),KH=a("a"),DFr=o("TFT5ForConditionalGeneration"),GFr=o(" (T5 model)"),OFr=l(),F(SE.$$.fragment),sDe=l(),lc=a("h2"),RE=a("a"),eve=a("span"),F(U8.$$.fragment),VFr=l(),ove=a("span"),XFr=o("TFAutoModelForSequenceClassification"),lDe=l(),tr=a("div"),F(J8.$$.fragment),zFr=l(),ic=a("p"),WFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZH=a("a"),QFr=o("from_pretrained()"),HFr=o(" class method or the "),eU=a("a"),UFr=o("from_config()"),JFr=o(` class
method.`),YFr=l(),Y8=a("p"),KFr=o("This class cannot be instantiated directly using "),rve=a("code"),ZFr=o("__init__()"),eTr=o(" (throws an error)."),oTr=l(),Pt=a("div"),F(K8.$$.fragment),rTr=l(),tve=a("p"),tTr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aTr=l(),dc=a("p"),nTr=o(`Note:
Loading a model from its configuration file does `),ave=a("strong"),sTr=o("not"),lTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),iTr=o("from_pretrained()"),dTr=o(" to load the model weights."),cTr=l(),F(PE.$$.fragment),fTr=l(),kr=a("div"),F(Z8.$$.fragment),mTr=l(),nve=a("p"),gTr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hTr=l(),nn=a("p"),pTr=o("The model class to instantiate is selected based on the "),sve=a("code"),_Tr=o("model_type"),uTr=o(` property of the config object (either
passed as an argument or loaded from `),lve=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=a("code"),FTr=o("pretrained_model_name_or_path"),TTr=o(":"),MTr=l(),oe=a("ul"),BE=a("li"),dve=a("strong"),ETr=o("albert"),CTr=o(" \u2014 "),rU=a("a"),wTr=o("TFAlbertForSequenceClassification"),ATr=o(" (ALBERT model)"),yTr=l(),IE=a("li"),cve=a("strong"),LTr=o("bert"),xTr=o(" \u2014 "),tU=a("a"),$Tr=o("TFBertForSequenceClassification"),kTr=o(" (BERT model)"),STr=l(),NE=a("li"),fve=a("strong"),RTr=o("camembert"),PTr=o(" \u2014 "),aU=a("a"),BTr=o("TFCamembertForSequenceClassification"),ITr=o(" (CamemBERT model)"),NTr=l(),qE=a("li"),mve=a("strong"),qTr=o("convbert"),jTr=o(" \u2014 "),nU=a("a"),DTr=o("TFConvBertForSequenceClassification"),GTr=o(" (ConvBERT model)"),OTr=l(),jE=a("li"),gve=a("strong"),VTr=o("ctrl"),XTr=o(" \u2014 "),sU=a("a"),zTr=o("TFCTRLForSequenceClassification"),WTr=o(" (CTRL model)"),QTr=l(),DE=a("li"),hve=a("strong"),HTr=o("deberta"),UTr=o(" \u2014 "),lU=a("a"),JTr=o("TFDebertaForSequenceClassification"),YTr=o(" (DeBERTa model)"),KTr=l(),GE=a("li"),pve=a("strong"),ZTr=o("deberta-v2"),eMr=o(" \u2014 "),iU=a("a"),oMr=o("TFDebertaV2ForSequenceClassification"),rMr=o(" (DeBERTa-v2 model)"),tMr=l(),OE=a("li"),_ve=a("strong"),aMr=o("distilbert"),nMr=o(" \u2014 "),dU=a("a"),sMr=o("TFDistilBertForSequenceClassification"),lMr=o(" (DistilBERT model)"),iMr=l(),VE=a("li"),uve=a("strong"),dMr=o("electra"),cMr=o(" \u2014 "),cU=a("a"),fMr=o("TFElectraForSequenceClassification"),mMr=o(" (ELECTRA model)"),gMr=l(),XE=a("li"),bve=a("strong"),hMr=o("flaubert"),pMr=o(" \u2014 "),fU=a("a"),_Mr=o("TFFlaubertForSequenceClassification"),uMr=o(" (FlauBERT model)"),bMr=l(),zE=a("li"),vve=a("strong"),vMr=o("funnel"),FMr=o(" \u2014 "),mU=a("a"),TMr=o("TFFunnelForSequenceClassification"),MMr=o(" (Funnel Transformer model)"),EMr=l(),WE=a("li"),Fve=a("strong"),CMr=o("gpt2"),wMr=o(" \u2014 "),gU=a("a"),AMr=o("TFGPT2ForSequenceClassification"),yMr=o(" (OpenAI GPT-2 model)"),LMr=l(),QE=a("li"),Tve=a("strong"),xMr=o("gptj"),$Mr=o(" \u2014 "),hU=a("a"),kMr=o("TFGPTJForSequenceClassification"),SMr=o(" (GPT-J model)"),RMr=l(),HE=a("li"),Mve=a("strong"),PMr=o("layoutlm"),BMr=o(" \u2014 "),pU=a("a"),IMr=o("TFLayoutLMForSequenceClassification"),NMr=o(" (LayoutLM model)"),qMr=l(),UE=a("li"),Eve=a("strong"),jMr=o("longformer"),DMr=o(" \u2014 "),_U=a("a"),GMr=o("TFLongformerForSequenceClassification"),OMr=o(" (Longformer model)"),VMr=l(),JE=a("li"),Cve=a("strong"),XMr=o("mobilebert"),zMr=o(" \u2014 "),uU=a("a"),WMr=o("TFMobileBertForSequenceClassification"),QMr=o(" (MobileBERT model)"),HMr=l(),YE=a("li"),wve=a("strong"),UMr=o("mpnet"),JMr=o(" \u2014 "),bU=a("a"),YMr=o("TFMPNetForSequenceClassification"),KMr=o(" (MPNet model)"),ZMr=l(),KE=a("li"),Ave=a("strong"),eEr=o("openai-gpt"),oEr=o(" \u2014 "),vU=a("a"),rEr=o("TFOpenAIGPTForSequenceClassification"),tEr=o(" (OpenAI GPT model)"),aEr=l(),ZE=a("li"),yve=a("strong"),nEr=o("rembert"),sEr=o(" \u2014 "),FU=a("a"),lEr=o("TFRemBertForSequenceClassification"),iEr=o(" (RemBERT model)"),dEr=l(),eC=a("li"),Lve=a("strong"),cEr=o("roberta"),fEr=o(" \u2014 "),TU=a("a"),mEr=o("TFRobertaForSequenceClassification"),gEr=o(" (RoBERTa model)"),hEr=l(),oC=a("li"),xve=a("strong"),pEr=o("roformer"),_Er=o(" \u2014 "),MU=a("a"),uEr=o("TFRoFormerForSequenceClassification"),bEr=o(" (RoFormer model)"),vEr=l(),rC=a("li"),$ve=a("strong"),FEr=o("tapas"),TEr=o(" \u2014 "),EU=a("a"),MEr=o("TFTapasForSequenceClassification"),EEr=o(" (TAPAS model)"),CEr=l(),tC=a("li"),kve=a("strong"),wEr=o("transfo-xl"),AEr=o(" \u2014 "),CU=a("a"),yEr=o("TFTransfoXLForSequenceClassification"),LEr=o(" (Transformer-XL model)"),xEr=l(),aC=a("li"),Sve=a("strong"),$Er=o("xlm"),kEr=o(" \u2014 "),wU=a("a"),SEr=o("TFXLMForSequenceClassification"),REr=o(" (XLM model)"),PEr=l(),nC=a("li"),Rve=a("strong"),BEr=o("xlm-roberta"),IEr=o(" \u2014 "),AU=a("a"),NEr=o("TFXLMRobertaForSequenceClassification"),qEr=o(" (XLM-RoBERTa model)"),jEr=l(),sC=a("li"),Pve=a("strong"),DEr=o("xlnet"),GEr=o(" \u2014 "),yU=a("a"),OEr=o("TFXLNetForSequenceClassification"),VEr=o(" (XLNet model)"),XEr=l(),F(lC.$$.fragment),iDe=l(),cc=a("h2"),iC=a("a"),Bve=a("span"),F(e9.$$.fragment),zEr=l(),Ive=a("span"),WEr=o("TFAutoModelForMultipleChoice"),dDe=l(),ar=a("div"),F(o9.$$.fragment),QEr=l(),fc=a("p"),HEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LU=a("a"),UEr=o("from_pretrained()"),JEr=o(" class method or the "),xU=a("a"),YEr=o("from_config()"),KEr=o(` class
method.`),ZEr=l(),r9=a("p"),eCr=o("This class cannot be instantiated directly using "),Nve=a("code"),oCr=o("__init__()"),rCr=o(" (throws an error)."),tCr=l(),Bt=a("div"),F(t9.$$.fragment),aCr=l(),qve=a("p"),nCr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),sCr=l(),mc=a("p"),lCr=o(`Note:
Loading a model from its configuration file does `),jve=a("strong"),iCr=o("not"),dCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=a("a"),cCr=o("from_pretrained()"),fCr=o(" to load the model weights."),mCr=l(),F(dC.$$.fragment),gCr=l(),Sr=a("div"),F(a9.$$.fragment),hCr=l(),Dve=a("p"),pCr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_Cr=l(),sn=a("p"),uCr=o("The model class to instantiate is selected based on the "),Gve=a("code"),bCr=o("model_type"),vCr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),FCr=o("pretrained_model_name_or_path"),TCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),MCr=o("pretrained_model_name_or_path"),ECr=o(":"),CCr=l(),pe=a("ul"),cC=a("li"),Xve=a("strong"),wCr=o("albert"),ACr=o(" \u2014 "),kU=a("a"),yCr=o("TFAlbertForMultipleChoice"),LCr=o(" (ALBERT model)"),xCr=l(),fC=a("li"),zve=a("strong"),$Cr=o("bert"),kCr=o(" \u2014 "),SU=a("a"),SCr=o("TFBertForMultipleChoice"),RCr=o(" (BERT model)"),PCr=l(),mC=a("li"),Wve=a("strong"),BCr=o("camembert"),ICr=o(" \u2014 "),RU=a("a"),NCr=o("TFCamembertForMultipleChoice"),qCr=o(" (CamemBERT model)"),jCr=l(),gC=a("li"),Qve=a("strong"),DCr=o("convbert"),GCr=o(" \u2014 "),PU=a("a"),OCr=o("TFConvBertForMultipleChoice"),VCr=o(" (ConvBERT model)"),XCr=l(),hC=a("li"),Hve=a("strong"),zCr=o("distilbert"),WCr=o(" \u2014 "),BU=a("a"),QCr=o("TFDistilBertForMultipleChoice"),HCr=o(" (DistilBERT model)"),UCr=l(),pC=a("li"),Uve=a("strong"),JCr=o("electra"),YCr=o(" \u2014 "),IU=a("a"),KCr=o("TFElectraForMultipleChoice"),ZCr=o(" (ELECTRA model)"),e5r=l(),_C=a("li"),Jve=a("strong"),o5r=o("flaubert"),r5r=o(" \u2014 "),NU=a("a"),t5r=o("TFFlaubertForMultipleChoice"),a5r=o(" (FlauBERT model)"),n5r=l(),uC=a("li"),Yve=a("strong"),s5r=o("funnel"),l5r=o(" \u2014 "),qU=a("a"),i5r=o("TFFunnelForMultipleChoice"),d5r=o(" (Funnel Transformer model)"),c5r=l(),bC=a("li"),Kve=a("strong"),f5r=o("longformer"),m5r=o(" \u2014 "),jU=a("a"),g5r=o("TFLongformerForMultipleChoice"),h5r=o(" (Longformer model)"),p5r=l(),vC=a("li"),Zve=a("strong"),_5r=o("mobilebert"),u5r=o(" \u2014 "),DU=a("a"),b5r=o("TFMobileBertForMultipleChoice"),v5r=o(" (MobileBERT model)"),F5r=l(),FC=a("li"),eFe=a("strong"),T5r=o("mpnet"),M5r=o(" \u2014 "),GU=a("a"),E5r=o("TFMPNetForMultipleChoice"),C5r=o(" (MPNet model)"),w5r=l(),TC=a("li"),oFe=a("strong"),A5r=o("rembert"),y5r=o(" \u2014 "),OU=a("a"),L5r=o("TFRemBertForMultipleChoice"),x5r=o(" (RemBERT model)"),$5r=l(),MC=a("li"),rFe=a("strong"),k5r=o("roberta"),S5r=o(" \u2014 "),VU=a("a"),R5r=o("TFRobertaForMultipleChoice"),P5r=o(" (RoBERTa model)"),B5r=l(),EC=a("li"),tFe=a("strong"),I5r=o("roformer"),N5r=o(" \u2014 "),XU=a("a"),q5r=o("TFRoFormerForMultipleChoice"),j5r=o(" (RoFormer model)"),D5r=l(),CC=a("li"),aFe=a("strong"),G5r=o("xlm"),O5r=o(" \u2014 "),zU=a("a"),V5r=o("TFXLMForMultipleChoice"),X5r=o(" (XLM model)"),z5r=l(),wC=a("li"),nFe=a("strong"),W5r=o("xlm-roberta"),Q5r=o(" \u2014 "),WU=a("a"),H5r=o("TFXLMRobertaForMultipleChoice"),U5r=o(" (XLM-RoBERTa model)"),J5r=l(),AC=a("li"),sFe=a("strong"),Y5r=o("xlnet"),K5r=o(" \u2014 "),QU=a("a"),Z5r=o("TFXLNetForMultipleChoice"),e3r=o(" (XLNet model)"),o3r=l(),F(yC.$$.fragment),cDe=l(),gc=a("h2"),LC=a("a"),lFe=a("span"),F(n9.$$.fragment),r3r=l(),iFe=a("span"),t3r=o("TFAutoModelForNextSentencePrediction"),fDe=l(),nr=a("div"),F(s9.$$.fragment),a3r=l(),hc=a("p"),n3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HU=a("a"),s3r=o("from_pretrained()"),l3r=o(" class method or the "),UU=a("a"),i3r=o("from_config()"),d3r=o(` class
method.`),c3r=l(),l9=a("p"),f3r=o("This class cannot be instantiated directly using "),dFe=a("code"),m3r=o("__init__()"),g3r=o(" (throws an error)."),h3r=l(),It=a("div"),F(i9.$$.fragment),p3r=l(),cFe=a("p"),_3r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u3r=l(),pc=a("p"),b3r=o(`Note:
Loading a model from its configuration file does `),fFe=a("strong"),v3r=o("not"),F3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=a("a"),T3r=o("from_pretrained()"),M3r=o(" to load the model weights."),E3r=l(),F(xC.$$.fragment),C3r=l(),Rr=a("div"),F(d9.$$.fragment),w3r=l(),mFe=a("p"),A3r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),y3r=l(),ln=a("p"),L3r=o("The model class to instantiate is selected based on the "),gFe=a("code"),x3r=o("model_type"),$3r=o(` property of the config object (either
passed as an argument or loaded from `),hFe=a("code"),k3r=o("pretrained_model_name_or_path"),S3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=a("code"),R3r=o("pretrained_model_name_or_path"),P3r=o(":"),B3r=l(),c9=a("ul"),$C=a("li"),_Fe=a("strong"),I3r=o("bert"),N3r=o(" \u2014 "),YU=a("a"),q3r=o("TFBertForNextSentencePrediction"),j3r=o(" (BERT model)"),D3r=l(),kC=a("li"),uFe=a("strong"),G3r=o("mobilebert"),O3r=o(" \u2014 "),KU=a("a"),V3r=o("TFMobileBertForNextSentencePrediction"),X3r=o(" (MobileBERT model)"),z3r=l(),F(SC.$$.fragment),mDe=l(),_c=a("h2"),RC=a("a"),bFe=a("span"),F(f9.$$.fragment),W3r=l(),vFe=a("span"),Q3r=o("TFAutoModelForTableQuestionAnswering"),gDe=l(),sr=a("div"),F(m9.$$.fragment),H3r=l(),uc=a("p"),U3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZU=a("a"),J3r=o("from_pretrained()"),Y3r=o(" class method or the "),eJ=a("a"),K3r=o("from_config()"),Z3r=o(` class
method.`),e0r=l(),g9=a("p"),o0r=o("This class cannot be instantiated directly using "),FFe=a("code"),r0r=o("__init__()"),t0r=o(" (throws an error)."),a0r=l(),Nt=a("div"),F(h9.$$.fragment),n0r=l(),TFe=a("p"),s0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),l0r=l(),bc=a("p"),i0r=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),d0r=o("not"),c0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=a("a"),f0r=o("from_pretrained()"),m0r=o(" to load the model weights."),g0r=l(),F(PC.$$.fragment),h0r=l(),Pr=a("div"),F(p9.$$.fragment),p0r=l(),EFe=a("p"),_0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),u0r=l(),dn=a("p"),b0r=o("The model class to instantiate is selected based on the "),CFe=a("code"),v0r=o("model_type"),F0r=o(` property of the config object (either
passed as an argument or loaded from `),wFe=a("code"),T0r=o("pretrained_model_name_or_path"),M0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(":"),w0r=l(),yFe=a("ul"),BC=a("li"),LFe=a("strong"),A0r=o("tapas"),y0r=o(" \u2014 "),rJ=a("a"),L0r=o("TFTapasForQuestionAnswering"),x0r=o(" (TAPAS model)"),$0r=l(),F(IC.$$.fragment),hDe=l(),vc=a("h2"),NC=a("a"),xFe=a("span"),F(_9.$$.fragment),k0r=l(),$Fe=a("span"),S0r=o("TFAutoModelForTokenClassification"),pDe=l(),lr=a("div"),F(u9.$$.fragment),R0r=l(),Fc=a("p"),P0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tJ=a("a"),B0r=o("from_pretrained()"),I0r=o(" class method or the "),aJ=a("a"),N0r=o("from_config()"),q0r=o(` class
method.`),j0r=l(),b9=a("p"),D0r=o("This class cannot be instantiated directly using "),kFe=a("code"),G0r=o("__init__()"),O0r=o(" (throws an error)."),V0r=l(),qt=a("div"),F(v9.$$.fragment),X0r=l(),SFe=a("p"),z0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),W0r=l(),Tc=a("p"),Q0r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),H0r=o("not"),U0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),J0r=o("from_pretrained()"),Y0r=o(" to load the model weights."),K0r=l(),F(qC.$$.fragment),Z0r=l(),Br=a("div"),F(F9.$$.fragment),ewr=l(),PFe=a("p"),owr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rwr=l(),cn=a("p"),twr=o("The model class to instantiate is selected based on the "),BFe=a("code"),awr=o("model_type"),nwr=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),swr=o("pretrained_model_name_or_path"),lwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),iwr=o("pretrained_model_name_or_path"),dwr=o(":"),cwr=l(),de=a("ul"),jC=a("li"),qFe=a("strong"),fwr=o("albert"),mwr=o(" \u2014 "),sJ=a("a"),gwr=o("TFAlbertForTokenClassification"),hwr=o(" (ALBERT model)"),pwr=l(),DC=a("li"),jFe=a("strong"),_wr=o("bert"),uwr=o(" \u2014 "),lJ=a("a"),bwr=o("TFBertForTokenClassification"),vwr=o(" (BERT model)"),Fwr=l(),GC=a("li"),DFe=a("strong"),Twr=o("camembert"),Mwr=o(" \u2014 "),iJ=a("a"),Ewr=o("TFCamembertForTokenClassification"),Cwr=o(" (CamemBERT model)"),wwr=l(),OC=a("li"),GFe=a("strong"),Awr=o("convbert"),ywr=o(" \u2014 "),dJ=a("a"),Lwr=o("TFConvBertForTokenClassification"),xwr=o(" (ConvBERT model)"),$wr=l(),VC=a("li"),OFe=a("strong"),kwr=o("deberta"),Swr=o(" \u2014 "),cJ=a("a"),Rwr=o("TFDebertaForTokenClassification"),Pwr=o(" (DeBERTa model)"),Bwr=l(),XC=a("li"),VFe=a("strong"),Iwr=o("deberta-v2"),Nwr=o(" \u2014 "),fJ=a("a"),qwr=o("TFDebertaV2ForTokenClassification"),jwr=o(" (DeBERTa-v2 model)"),Dwr=l(),zC=a("li"),XFe=a("strong"),Gwr=o("distilbert"),Owr=o(" \u2014 "),mJ=a("a"),Vwr=o("TFDistilBertForTokenClassification"),Xwr=o(" (DistilBERT model)"),zwr=l(),WC=a("li"),zFe=a("strong"),Wwr=o("electra"),Qwr=o(" \u2014 "),gJ=a("a"),Hwr=o("TFElectraForTokenClassification"),Uwr=o(" (ELECTRA model)"),Jwr=l(),QC=a("li"),WFe=a("strong"),Ywr=o("flaubert"),Kwr=o(" \u2014 "),hJ=a("a"),Zwr=o("TFFlaubertForTokenClassification"),eAr=o(" (FlauBERT model)"),oAr=l(),HC=a("li"),QFe=a("strong"),rAr=o("funnel"),tAr=o(" \u2014 "),pJ=a("a"),aAr=o("TFFunnelForTokenClassification"),nAr=o(" (Funnel Transformer model)"),sAr=l(),UC=a("li"),HFe=a("strong"),lAr=o("layoutlm"),iAr=o(" \u2014 "),_J=a("a"),dAr=o("TFLayoutLMForTokenClassification"),cAr=o(" (LayoutLM model)"),fAr=l(),JC=a("li"),UFe=a("strong"),mAr=o("longformer"),gAr=o(" \u2014 "),uJ=a("a"),hAr=o("TFLongformerForTokenClassification"),pAr=o(" (Longformer model)"),_Ar=l(),YC=a("li"),JFe=a("strong"),uAr=o("mobilebert"),bAr=o(" \u2014 "),bJ=a("a"),vAr=o("TFMobileBertForTokenClassification"),FAr=o(" (MobileBERT model)"),TAr=l(),KC=a("li"),YFe=a("strong"),MAr=o("mpnet"),EAr=o(" \u2014 "),vJ=a("a"),CAr=o("TFMPNetForTokenClassification"),wAr=o(" (MPNet model)"),AAr=l(),ZC=a("li"),KFe=a("strong"),yAr=o("rembert"),LAr=o(" \u2014 "),FJ=a("a"),xAr=o("TFRemBertForTokenClassification"),$Ar=o(" (RemBERT model)"),kAr=l(),e5=a("li"),ZFe=a("strong"),SAr=o("roberta"),RAr=o(" \u2014 "),TJ=a("a"),PAr=o("TFRobertaForTokenClassification"),BAr=o(" (RoBERTa model)"),IAr=l(),o5=a("li"),eTe=a("strong"),NAr=o("roformer"),qAr=o(" \u2014 "),MJ=a("a"),jAr=o("TFRoFormerForTokenClassification"),DAr=o(" (RoFormer model)"),GAr=l(),r5=a("li"),oTe=a("strong"),OAr=o("xlm"),VAr=o(" \u2014 "),EJ=a("a"),XAr=o("TFXLMForTokenClassification"),zAr=o(" (XLM model)"),WAr=l(),t5=a("li"),rTe=a("strong"),QAr=o("xlm-roberta"),HAr=o(" \u2014 "),CJ=a("a"),UAr=o("TFXLMRobertaForTokenClassification"),JAr=o(" (XLM-RoBERTa model)"),YAr=l(),a5=a("li"),tTe=a("strong"),KAr=o("xlnet"),ZAr=o(" \u2014 "),wJ=a("a"),e6r=o("TFXLNetForTokenClassification"),o6r=o(" (XLNet model)"),r6r=l(),F(n5.$$.fragment),_De=l(),Mc=a("h2"),s5=a("a"),aTe=a("span"),F(T9.$$.fragment),t6r=l(),nTe=a("span"),a6r=o("TFAutoModelForQuestionAnswering"),uDe=l(),ir=a("div"),F(M9.$$.fragment),n6r=l(),Ec=a("p"),s6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AJ=a("a"),l6r=o("from_pretrained()"),i6r=o(" class method or the "),yJ=a("a"),d6r=o("from_config()"),c6r=o(` class
method.`),f6r=l(),E9=a("p"),m6r=o("This class cannot be instantiated directly using "),sTe=a("code"),g6r=o("__init__()"),h6r=o(" (throws an error)."),p6r=l(),jt=a("div"),F(C9.$$.fragment),_6r=l(),lTe=a("p"),u6r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),b6r=l(),Cc=a("p"),v6r=o(`Note:
Loading a model from its configuration file does `),iTe=a("strong"),F6r=o("not"),T6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=a("a"),M6r=o("from_pretrained()"),E6r=o(" to load the model weights."),C6r=l(),F(l5.$$.fragment),w6r=l(),Ir=a("div"),F(w9.$$.fragment),A6r=l(),dTe=a("p"),y6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),L6r=l(),fn=a("p"),x6r=o("The model class to instantiate is selected based on the "),cTe=a("code"),$6r=o("model_type"),k6r=o(` property of the config object (either
passed as an argument or loaded from `),fTe=a("code"),S6r=o("pretrained_model_name_or_path"),R6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=a("code"),P6r=o("pretrained_model_name_or_path"),B6r=o(":"),I6r=l(),ce=a("ul"),i5=a("li"),gTe=a("strong"),N6r=o("albert"),q6r=o(" \u2014 "),xJ=a("a"),j6r=o("TFAlbertForQuestionAnswering"),D6r=o(" (ALBERT model)"),G6r=l(),d5=a("li"),hTe=a("strong"),O6r=o("bert"),V6r=o(" \u2014 "),$J=a("a"),X6r=o("TFBertForQuestionAnswering"),z6r=o(" (BERT model)"),W6r=l(),c5=a("li"),pTe=a("strong"),Q6r=o("camembert"),H6r=o(" \u2014 "),kJ=a("a"),U6r=o("TFCamembertForQuestionAnswering"),J6r=o(" (CamemBERT model)"),Y6r=l(),f5=a("li"),_Te=a("strong"),K6r=o("convbert"),Z6r=o(" \u2014 "),SJ=a("a"),eyr=o("TFConvBertForQuestionAnswering"),oyr=o(" (ConvBERT model)"),ryr=l(),m5=a("li"),uTe=a("strong"),tyr=o("deberta"),ayr=o(" \u2014 "),RJ=a("a"),nyr=o("TFDebertaForQuestionAnswering"),syr=o(" (DeBERTa model)"),lyr=l(),g5=a("li"),bTe=a("strong"),iyr=o("deberta-v2"),dyr=o(" \u2014 "),PJ=a("a"),cyr=o("TFDebertaV2ForQuestionAnswering"),fyr=o(" (DeBERTa-v2 model)"),myr=l(),h5=a("li"),vTe=a("strong"),gyr=o("distilbert"),hyr=o(" \u2014 "),BJ=a("a"),pyr=o("TFDistilBertForQuestionAnswering"),_yr=o(" (DistilBERT model)"),uyr=l(),p5=a("li"),FTe=a("strong"),byr=o("electra"),vyr=o(" \u2014 "),IJ=a("a"),Fyr=o("TFElectraForQuestionAnswering"),Tyr=o(" (ELECTRA model)"),Myr=l(),_5=a("li"),TTe=a("strong"),Eyr=o("flaubert"),Cyr=o(" \u2014 "),NJ=a("a"),wyr=o("TFFlaubertForQuestionAnsweringSimple"),Ayr=o(" (FlauBERT model)"),yyr=l(),u5=a("li"),MTe=a("strong"),Lyr=o("funnel"),xyr=o(" \u2014 "),qJ=a("a"),$yr=o("TFFunnelForQuestionAnswering"),kyr=o(" (Funnel Transformer model)"),Syr=l(),b5=a("li"),ETe=a("strong"),Ryr=o("gptj"),Pyr=o(" \u2014 "),jJ=a("a"),Byr=o("TFGPTJForQuestionAnswering"),Iyr=o(" (GPT-J model)"),Nyr=l(),v5=a("li"),CTe=a("strong"),qyr=o("longformer"),jyr=o(" \u2014 "),DJ=a("a"),Dyr=o("TFLongformerForQuestionAnswering"),Gyr=o(" (Longformer model)"),Oyr=l(),F5=a("li"),wTe=a("strong"),Vyr=o("mobilebert"),Xyr=o(" \u2014 "),GJ=a("a"),zyr=o("TFMobileBertForQuestionAnswering"),Wyr=o(" (MobileBERT model)"),Qyr=l(),T5=a("li"),ATe=a("strong"),Hyr=o("mpnet"),Uyr=o(" \u2014 "),OJ=a("a"),Jyr=o("TFMPNetForQuestionAnswering"),Yyr=o(" (MPNet model)"),Kyr=l(),M5=a("li"),yTe=a("strong"),Zyr=o("rembert"),eLr=o(" \u2014 "),VJ=a("a"),oLr=o("TFRemBertForQuestionAnswering"),rLr=o(" (RemBERT model)"),tLr=l(),E5=a("li"),LTe=a("strong"),aLr=o("roberta"),nLr=o(" \u2014 "),XJ=a("a"),sLr=o("TFRobertaForQuestionAnswering"),lLr=o(" (RoBERTa model)"),iLr=l(),C5=a("li"),xTe=a("strong"),dLr=o("roformer"),cLr=o(" \u2014 "),zJ=a("a"),fLr=o("TFRoFormerForQuestionAnswering"),mLr=o(" (RoFormer model)"),gLr=l(),w5=a("li"),$Te=a("strong"),hLr=o("xlm"),pLr=o(" \u2014 "),WJ=a("a"),_Lr=o("TFXLMForQuestionAnsweringSimple"),uLr=o(" (XLM model)"),bLr=l(),A5=a("li"),kTe=a("strong"),vLr=o("xlm-roberta"),FLr=o(" \u2014 "),QJ=a("a"),TLr=o("TFXLMRobertaForQuestionAnswering"),MLr=o(" (XLM-RoBERTa model)"),ELr=l(),y5=a("li"),STe=a("strong"),CLr=o("xlnet"),wLr=o(" \u2014 "),HJ=a("a"),ALr=o("TFXLNetForQuestionAnsweringSimple"),yLr=o(" (XLNet model)"),LLr=l(),F(L5.$$.fragment),bDe=l(),wc=a("h2"),x5=a("a"),RTe=a("span"),F(A9.$$.fragment),xLr=l(),PTe=a("span"),$Lr=o("TFAutoModelForVision2Seq"),vDe=l(),dr=a("div"),F(y9.$$.fragment),kLr=l(),Ac=a("p"),SLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UJ=a("a"),RLr=o("from_pretrained()"),PLr=o(" class method or the "),JJ=a("a"),BLr=o("from_config()"),ILr=o(` class
method.`),NLr=l(),L9=a("p"),qLr=o("This class cannot be instantiated directly using "),BTe=a("code"),jLr=o("__init__()"),DLr=o(" (throws an error)."),GLr=l(),Dt=a("div"),F(x9.$$.fragment),OLr=l(),ITe=a("p"),VLr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XLr=l(),yc=a("p"),zLr=o(`Note:
Loading a model from its configuration file does `),NTe=a("strong"),WLr=o("not"),QLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),HLr=o("from_pretrained()"),ULr=o(" to load the model weights."),JLr=l(),F($5.$$.fragment),YLr=l(),Nr=a("div"),F($9.$$.fragment),KLr=l(),qTe=a("p"),ZLr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),e8r=l(),mn=a("p"),o8r=o("The model class to instantiate is selected based on the "),jTe=a("code"),r8r=o("model_type"),t8r=o(` property of the config object (either
passed as an argument or loaded from `),DTe=a("code"),a8r=o("pretrained_model_name_or_path"),n8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=a("code"),s8r=o("pretrained_model_name_or_path"),l8r=o(":"),i8r=l(),OTe=a("ul"),k5=a("li"),VTe=a("strong"),d8r=o("vision-encoder-decoder"),c8r=o(" \u2014 "),KJ=a("a"),f8r=o("TFVisionEncoderDecoderModel"),m8r=o(" (Vision Encoder decoder model)"),g8r=l(),F(S5.$$.fragment),FDe=l(),Lc=a("h2"),R5=a("a"),XTe=a("span"),F(k9.$$.fragment),h8r=l(),zTe=a("span"),p8r=o("TFAutoModelForSpeechSeq2Seq"),TDe=l(),cr=a("div"),F(S9.$$.fragment),_8r=l(),xc=a("p"),u8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZJ=a("a"),b8r=o("from_pretrained()"),v8r=o(" class method or the "),eY=a("a"),F8r=o("from_config()"),T8r=o(` class
method.`),M8r=l(),R9=a("p"),E8r=o("This class cannot be instantiated directly using "),WTe=a("code"),C8r=o("__init__()"),w8r=o(" (throws an error)."),A8r=l(),Gt=a("div"),F(P9.$$.fragment),y8r=l(),QTe=a("p"),L8r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),x8r=l(),$c=a("p"),$8r=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),k8r=o("not"),S8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),R8r=o("from_pretrained()"),P8r=o(" to load the model weights."),B8r=l(),F(P5.$$.fragment),I8r=l(),qr=a("div"),F(B9.$$.fragment),N8r=l(),UTe=a("p"),q8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),j8r=l(),gn=a("p"),D8r=o("The model class to instantiate is selected based on the "),JTe=a("code"),G8r=o("model_type"),O8r=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),V8r=o("pretrained_model_name_or_path"),X8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),z8r=o("pretrained_model_name_or_path"),W8r=o(":"),Q8r=l(),ZTe=a("ul"),B5=a("li"),eMe=a("strong"),H8r=o("speech_to_text"),U8r=o(" \u2014 "),rY=a("a"),J8r=o("TFSpeech2TextForConditionalGeneration"),Y8r=o(" (Speech2Text model)"),K8r=l(),F(I5.$$.fragment),MDe=l(),kc=a("h2"),N5=a("a"),oMe=a("span"),F(I9.$$.fragment),Z8r=l(),rMe=a("span"),e9r=o("FlaxAutoModel"),EDe=l(),fr=a("div"),F(N9.$$.fragment),o9r=l(),Sc=a("p"),r9r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tY=a("a"),t9r=o("from_pretrained()"),a9r=o(" class method or the "),aY=a("a"),n9r=o("from_config()"),s9r=o(` class
method.`),l9r=l(),q9=a("p"),i9r=o("This class cannot be instantiated directly using "),tMe=a("code"),d9r=o("__init__()"),c9r=o(" (throws an error)."),f9r=l(),Ot=a("div"),F(j9.$$.fragment),m9r=l(),aMe=a("p"),g9r=o("Instantiates one of the base model classes of the library from a configuration."),h9r=l(),Rc=a("p"),p9r=o(`Note:
Loading a model from its configuration file does `),nMe=a("strong"),_9r=o("not"),u9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),b9r=o("from_pretrained()"),v9r=o(" to load the model weights."),F9r=l(),F(q5.$$.fragment),T9r=l(),jr=a("div"),F(D9.$$.fragment),M9r=l(),sMe=a("p"),E9r=o("Instantiate one of the base model classes of the library from a pretrained model."),C9r=l(),hn=a("p"),w9r=o("The model class to instantiate is selected based on the "),lMe=a("code"),A9r=o("model_type"),y9r=o(` property of the config object (either
passed as an argument or loaded from `),iMe=a("code"),L9r=o("pretrained_model_name_or_path"),x9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=a("code"),$9r=o("pretrained_model_name_or_path"),k9r=o(":"),S9r=l(),re=a("ul"),j5=a("li"),cMe=a("strong"),R9r=o("albert"),P9r=o(" \u2014 "),sY=a("a"),B9r=o("FlaxAlbertModel"),I9r=o(" (ALBERT model)"),N9r=l(),D5=a("li"),fMe=a("strong"),q9r=o("bart"),j9r=o(" \u2014 "),lY=a("a"),D9r=o("FlaxBartModel"),G9r=o(" (BART model)"),O9r=l(),G5=a("li"),mMe=a("strong"),V9r=o("beit"),X9r=o(" \u2014 "),iY=a("a"),z9r=o("FlaxBeitModel"),W9r=o(" (BEiT model)"),Q9r=l(),O5=a("li"),gMe=a("strong"),H9r=o("bert"),U9r=o(" \u2014 "),dY=a("a"),J9r=o("FlaxBertModel"),Y9r=o(" (BERT model)"),K9r=l(),V5=a("li"),hMe=a("strong"),Z9r=o("big_bird"),exr=o(" \u2014 "),cY=a("a"),oxr=o("FlaxBigBirdModel"),rxr=o(" (BigBird model)"),txr=l(),X5=a("li"),pMe=a("strong"),axr=o("blenderbot"),nxr=o(" \u2014 "),fY=a("a"),sxr=o("FlaxBlenderbotModel"),lxr=o(" (Blenderbot model)"),ixr=l(),z5=a("li"),_Me=a("strong"),dxr=o("blenderbot-small"),cxr=o(" \u2014 "),mY=a("a"),fxr=o("FlaxBlenderbotSmallModel"),mxr=o(" (BlenderbotSmall model)"),gxr=l(),W5=a("li"),uMe=a("strong"),hxr=o("clip"),pxr=o(" \u2014 "),gY=a("a"),_xr=o("FlaxCLIPModel"),uxr=o(" (CLIP model)"),bxr=l(),Q5=a("li"),bMe=a("strong"),vxr=o("distilbert"),Fxr=o(" \u2014 "),hY=a("a"),Txr=o("FlaxDistilBertModel"),Mxr=o(" (DistilBERT model)"),Exr=l(),H5=a("li"),vMe=a("strong"),Cxr=o("electra"),wxr=o(" \u2014 "),pY=a("a"),Axr=o("FlaxElectraModel"),yxr=o(" (ELECTRA model)"),Lxr=l(),U5=a("li"),FMe=a("strong"),xxr=o("gpt2"),$xr=o(" \u2014 "),_Y=a("a"),kxr=o("FlaxGPT2Model"),Sxr=o(" (OpenAI GPT-2 model)"),Rxr=l(),J5=a("li"),TMe=a("strong"),Pxr=o("gpt_neo"),Bxr=o(" \u2014 "),uY=a("a"),Ixr=o("FlaxGPTNeoModel"),Nxr=o(" (GPT Neo model)"),qxr=l(),Y5=a("li"),MMe=a("strong"),jxr=o("gptj"),Dxr=o(" \u2014 "),bY=a("a"),Gxr=o("FlaxGPTJModel"),Oxr=o(" (GPT-J model)"),Vxr=l(),K5=a("li"),EMe=a("strong"),Xxr=o("marian"),zxr=o(" \u2014 "),vY=a("a"),Wxr=o("FlaxMarianModel"),Qxr=o(" (Marian model)"),Hxr=l(),Z5=a("li"),CMe=a("strong"),Uxr=o("mbart"),Jxr=o(" \u2014 "),FY=a("a"),Yxr=o("FlaxMBartModel"),Kxr=o(" (mBART model)"),Zxr=l(),e3=a("li"),wMe=a("strong"),e$r=o("mt5"),o$r=o(" \u2014 "),TY=a("a"),r$r=o("FlaxMT5Model"),t$r=o(" (MT5 model)"),a$r=l(),o3=a("li"),AMe=a("strong"),n$r=o("opt"),s$r=o(" \u2014 "),MY=a("a"),l$r=o("FlaxOPTModel"),i$r=o(" (OPT model)"),d$r=l(),r3=a("li"),yMe=a("strong"),c$r=o("pegasus"),f$r=o(" \u2014 "),EY=a("a"),m$r=o("FlaxPegasusModel"),g$r=o(" (Pegasus model)"),h$r=l(),t3=a("li"),LMe=a("strong"),p$r=o("roberta"),_$r=o(" \u2014 "),CY=a("a"),u$r=o("FlaxRobertaModel"),b$r=o(" (RoBERTa model)"),v$r=l(),a3=a("li"),xMe=a("strong"),F$r=o("roformer"),T$r=o(" \u2014 "),wY=a("a"),M$r=o("FlaxRoFormerModel"),E$r=o(" (RoFormer model)"),C$r=l(),n3=a("li"),$Me=a("strong"),w$r=o("t5"),A$r=o(" \u2014 "),AY=a("a"),y$r=o("FlaxT5Model"),L$r=o(" (T5 model)"),x$r=l(),s3=a("li"),kMe=a("strong"),$$r=o("vision-text-dual-encoder"),k$r=o(" \u2014 "),yY=a("a"),S$r=o("FlaxVisionTextDualEncoderModel"),R$r=o(" (VisionTextDualEncoder model)"),P$r=l(),l3=a("li"),SMe=a("strong"),B$r=o("vit"),I$r=o(" \u2014 "),LY=a("a"),N$r=o("FlaxViTModel"),q$r=o(" (ViT model)"),j$r=l(),i3=a("li"),RMe=a("strong"),D$r=o("wav2vec2"),G$r=o(" \u2014 "),xY=a("a"),O$r=o("FlaxWav2Vec2Model"),V$r=o(" (Wav2Vec2 model)"),X$r=l(),d3=a("li"),PMe=a("strong"),z$r=o("xglm"),W$r=o(" \u2014 "),$Y=a("a"),Q$r=o("FlaxXGLMModel"),H$r=o(" (XGLM model)"),U$r=l(),c3=a("li"),BMe=a("strong"),J$r=o("xlm-roberta"),Y$r=o(" \u2014 "),kY=a("a"),K$r=o("FlaxXLMRobertaModel"),Z$r=o(" (XLM-RoBERTa model)"),ekr=l(),F(f3.$$.fragment),CDe=l(),Pc=a("h2"),m3=a("a"),IMe=a("span"),F(G9.$$.fragment),okr=l(),NMe=a("span"),rkr=o("FlaxAutoModelForCausalLM"),wDe=l(),mr=a("div"),F(O9.$$.fragment),tkr=l(),Bc=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SY=a("a"),nkr=o("from_pretrained()"),skr=o(" class method or the "),RY=a("a"),lkr=o("from_config()"),ikr=o(` class
method.`),dkr=l(),V9=a("p"),ckr=o("This class cannot be instantiated directly using "),qMe=a("code"),fkr=o("__init__()"),mkr=o(" (throws an error)."),gkr=l(),Vt=a("div"),F(X9.$$.fragment),hkr=l(),jMe=a("p"),pkr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_kr=l(),Ic=a("p"),ukr=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" to load the model weights."),Mkr=l(),F(g3.$$.fragment),Ekr=l(),Dr=a("div"),F(z9.$$.fragment),Ckr=l(),GMe=a("p"),wkr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Akr=l(),pn=a("p"),ykr=o("The model class to instantiate is selected based on the "),OMe=a("code"),Lkr=o("model_type"),xkr=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),$kr=o("pretrained_model_name_or_path"),kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(":"),Pkr=l(),Le=a("ul"),h3=a("li"),zMe=a("strong"),Bkr=o("bart"),Ikr=o(" \u2014 "),BY=a("a"),Nkr=o("FlaxBartForCausalLM"),qkr=o(" (BART model)"),jkr=l(),p3=a("li"),WMe=a("strong"),Dkr=o("bert"),Gkr=o(" \u2014 "),IY=a("a"),Okr=o("FlaxBertForCausalLM"),Vkr=o(" (BERT model)"),Xkr=l(),_3=a("li"),QMe=a("strong"),zkr=o("big_bird"),Wkr=o(" \u2014 "),NY=a("a"),Qkr=o("FlaxBigBirdForCausalLM"),Hkr=o(" (BigBird model)"),Ukr=l(),u3=a("li"),HMe=a("strong"),Jkr=o("electra"),Ykr=o(" \u2014 "),qY=a("a"),Kkr=o("FlaxElectraForCausalLM"),Zkr=o(" (ELECTRA model)"),eSr=l(),b3=a("li"),UMe=a("strong"),oSr=o("gpt2"),rSr=o(" \u2014 "),jY=a("a"),tSr=o("FlaxGPT2LMHeadModel"),aSr=o(" (OpenAI GPT-2 model)"),nSr=l(),v3=a("li"),JMe=a("strong"),sSr=o("gpt_neo"),lSr=o(" \u2014 "),DY=a("a"),iSr=o("FlaxGPTNeoForCausalLM"),dSr=o(" (GPT Neo model)"),cSr=l(),F3=a("li"),YMe=a("strong"),fSr=o("gptj"),mSr=o(" \u2014 "),GY=a("a"),gSr=o("FlaxGPTJForCausalLM"),hSr=o(" (GPT-J model)"),pSr=l(),T3=a("li"),KMe=a("strong"),_Sr=o("opt"),uSr=o(" \u2014 "),OY=a("a"),bSr=o("FlaxOPTForCausalLM"),vSr=o(" (OPT model)"),FSr=l(),M3=a("li"),ZMe=a("strong"),TSr=o("roberta"),MSr=o(" \u2014 "),VY=a("a"),ESr=o("FlaxRobertaForCausalLM"),CSr=o(" (RoBERTa model)"),wSr=l(),E3=a("li"),eEe=a("strong"),ASr=o("xglm"),ySr=o(" \u2014 "),XY=a("a"),LSr=o("FlaxXGLMForCausalLM"),xSr=o(" (XGLM model)"),$Sr=l(),F(C3.$$.fragment),ADe=l(),Nc=a("h2"),w3=a("a"),oEe=a("span"),F(W9.$$.fragment),kSr=l(),rEe=a("span"),SSr=o("FlaxAutoModelForPreTraining"),yDe=l(),gr=a("div"),F(Q9.$$.fragment),RSr=l(),qc=a("p"),PSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zY=a("a"),BSr=o("from_pretrained()"),ISr=o(" class method or the "),WY=a("a"),NSr=o("from_config()"),qSr=o(` class
method.`),jSr=l(),H9=a("p"),DSr=o("This class cannot be instantiated directly using "),tEe=a("code"),GSr=o("__init__()"),OSr=o(" (throws an error)."),VSr=l(),Xt=a("div"),F(U9.$$.fragment),XSr=l(),aEe=a("p"),zSr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),WSr=l(),jc=a("p"),QSr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),HSr=o("not"),USr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),JSr=o("from_pretrained()"),YSr=o(" to load the model weights."),KSr=l(),F(A3.$$.fragment),ZSr=l(),Gr=a("div"),F(J9.$$.fragment),eRr=l(),sEe=a("p"),oRr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rRr=l(),_n=a("p"),tRr=o("The model class to instantiate is selected based on the "),lEe=a("code"),aRr=o("model_type"),nRr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),sRr=o("pretrained_model_name_or_path"),lRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),iRr=o("pretrained_model_name_or_path"),dRr=o(":"),cRr=l(),Ee=a("ul"),y3=a("li"),cEe=a("strong"),fRr=o("albert"),mRr=o(" \u2014 "),HY=a("a"),gRr=o("FlaxAlbertForPreTraining"),hRr=o(" (ALBERT model)"),pRr=l(),L3=a("li"),fEe=a("strong"),_Rr=o("bart"),uRr=o(" \u2014 "),UY=a("a"),bRr=o("FlaxBartForConditionalGeneration"),vRr=o(" (BART model)"),FRr=l(),x3=a("li"),mEe=a("strong"),TRr=o("bert"),MRr=o(" \u2014 "),JY=a("a"),ERr=o("FlaxBertForPreTraining"),CRr=o(" (BERT model)"),wRr=l(),$3=a("li"),gEe=a("strong"),ARr=o("big_bird"),yRr=o(" \u2014 "),YY=a("a"),LRr=o("FlaxBigBirdForPreTraining"),xRr=o(" (BigBird model)"),$Rr=l(),k3=a("li"),hEe=a("strong"),kRr=o("electra"),SRr=o(" \u2014 "),KY=a("a"),RRr=o("FlaxElectraForPreTraining"),PRr=o(" (ELECTRA model)"),BRr=l(),S3=a("li"),pEe=a("strong"),IRr=o("mbart"),NRr=o(" \u2014 "),ZY=a("a"),qRr=o("FlaxMBartForConditionalGeneration"),jRr=o(" (mBART model)"),DRr=l(),R3=a("li"),_Ee=a("strong"),GRr=o("mt5"),ORr=o(" \u2014 "),eK=a("a"),VRr=o("FlaxMT5ForConditionalGeneration"),XRr=o(" (MT5 model)"),zRr=l(),P3=a("li"),uEe=a("strong"),WRr=o("roberta"),QRr=o(" \u2014 "),oK=a("a"),HRr=o("FlaxRobertaForMaskedLM"),URr=o(" (RoBERTa model)"),JRr=l(),B3=a("li"),bEe=a("strong"),YRr=o("roformer"),KRr=o(" \u2014 "),rK=a("a"),ZRr=o("FlaxRoFormerForMaskedLM"),ePr=o(" (RoFormer model)"),oPr=l(),I3=a("li"),vEe=a("strong"),rPr=o("t5"),tPr=o(" \u2014 "),tK=a("a"),aPr=o("FlaxT5ForConditionalGeneration"),nPr=o(" (T5 model)"),sPr=l(),N3=a("li"),FEe=a("strong"),lPr=o("wav2vec2"),iPr=o(" \u2014 "),aK=a("a"),dPr=o("FlaxWav2Vec2ForPreTraining"),cPr=o(" (Wav2Vec2 model)"),fPr=l(),q3=a("li"),TEe=a("strong"),mPr=o("xlm-roberta"),gPr=o(" \u2014 "),nK=a("a"),hPr=o("FlaxXLMRobertaForMaskedLM"),pPr=o(" (XLM-RoBERTa model)"),_Pr=l(),F(j3.$$.fragment),LDe=l(),Dc=a("h2"),D3=a("a"),MEe=a("span"),F(Y9.$$.fragment),uPr=l(),EEe=a("span"),bPr=o("FlaxAutoModelForMaskedLM"),xDe=l(),hr=a("div"),F(K9.$$.fragment),vPr=l(),Gc=a("p"),FPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sK=a("a"),TPr=o("from_pretrained()"),MPr=o(" class method or the "),lK=a("a"),EPr=o("from_config()"),CPr=o(` class
method.`),wPr=l(),Z9=a("p"),APr=o("This class cannot be instantiated directly using "),CEe=a("code"),yPr=o("__init__()"),LPr=o(" (throws an error)."),xPr=l(),zt=a("div"),F(ex.$$.fragment),$Pr=l(),wEe=a("p"),kPr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),SPr=l(),Oc=a("p"),RPr=o(`Note:
Loading a model from its configuration file does `),AEe=a("strong"),PPr=o("not"),BPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=a("a"),IPr=o("from_pretrained()"),NPr=o(" to load the model weights."),qPr=l(),F(G3.$$.fragment),jPr=l(),Or=a("div"),F(ox.$$.fragment),DPr=l(),yEe=a("p"),GPr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),OPr=l(),un=a("p"),VPr=o("The model class to instantiate is selected based on the "),LEe=a("code"),XPr=o("model_type"),zPr=o(` property of the config object (either
passed as an argument or loaded from `),xEe=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=a("code"),HPr=o("pretrained_model_name_or_path"),UPr=o(":"),JPr=l(),xe=a("ul"),O3=a("li"),kEe=a("strong"),YPr=o("albert"),KPr=o(" \u2014 "),dK=a("a"),ZPr=o("FlaxAlbertForMaskedLM"),eBr=o(" (ALBERT model)"),oBr=l(),V3=a("li"),SEe=a("strong"),rBr=o("bart"),tBr=o(" \u2014 "),cK=a("a"),aBr=o("FlaxBartForConditionalGeneration"),nBr=o(" (BART model)"),sBr=l(),X3=a("li"),REe=a("strong"),lBr=o("bert"),iBr=o(" \u2014 "),fK=a("a"),dBr=o("FlaxBertForMaskedLM"),cBr=o(" (BERT model)"),fBr=l(),z3=a("li"),PEe=a("strong"),mBr=o("big_bird"),gBr=o(" \u2014 "),mK=a("a"),hBr=o("FlaxBigBirdForMaskedLM"),pBr=o(" (BigBird model)"),_Br=l(),W3=a("li"),BEe=a("strong"),uBr=o("distilbert"),bBr=o(" \u2014 "),gK=a("a"),vBr=o("FlaxDistilBertForMaskedLM"),FBr=o(" (DistilBERT model)"),TBr=l(),Q3=a("li"),IEe=a("strong"),MBr=o("electra"),EBr=o(" \u2014 "),hK=a("a"),CBr=o("FlaxElectraForMaskedLM"),wBr=o(" (ELECTRA model)"),ABr=l(),H3=a("li"),NEe=a("strong"),yBr=o("mbart"),LBr=o(" \u2014 "),pK=a("a"),xBr=o("FlaxMBartForConditionalGeneration"),$Br=o(" (mBART model)"),kBr=l(),U3=a("li"),qEe=a("strong"),SBr=o("roberta"),RBr=o(" \u2014 "),_K=a("a"),PBr=o("FlaxRobertaForMaskedLM"),BBr=o(" (RoBERTa model)"),IBr=l(),J3=a("li"),jEe=a("strong"),NBr=o("roformer"),qBr=o(" \u2014 "),uK=a("a"),jBr=o("FlaxRoFormerForMaskedLM"),DBr=o(" (RoFormer model)"),GBr=l(),Y3=a("li"),DEe=a("strong"),OBr=o("xlm-roberta"),VBr=o(" \u2014 "),bK=a("a"),XBr=o("FlaxXLMRobertaForMaskedLM"),zBr=o(" (XLM-RoBERTa model)"),WBr=l(),F(K3.$$.fragment),$De=l(),Vc=a("h2"),Z3=a("a"),GEe=a("span"),F(rx.$$.fragment),QBr=l(),OEe=a("span"),HBr=o("FlaxAutoModelForSeq2SeqLM"),kDe=l(),pr=a("div"),F(tx.$$.fragment),UBr=l(),Xc=a("p"),JBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vK=a("a"),YBr=o("from_pretrained()"),KBr=o(" class method or the "),FK=a("a"),ZBr=o("from_config()"),eIr=o(` class
method.`),oIr=l(),ax=a("p"),rIr=o("This class cannot be instantiated directly using "),VEe=a("code"),tIr=o("__init__()"),aIr=o(" (throws an error)."),nIr=l(),Wt=a("div"),F(nx.$$.fragment),sIr=l(),XEe=a("p"),lIr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iIr=l(),zc=a("p"),dIr=o(`Note:
Loading a model from its configuration file does `),zEe=a("strong"),cIr=o("not"),fIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),mIr=o("from_pretrained()"),gIr=o(" to load the model weights."),hIr=l(),F(e0.$$.fragment),pIr=l(),Vr=a("div"),F(sx.$$.fragment),_Ir=l(),WEe=a("p"),uIr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bIr=l(),bn=a("p"),vIr=o("The model class to instantiate is selected based on the "),QEe=a("code"),FIr=o("model_type"),TIr=o(` property of the config object (either
passed as an argument or loaded from `),HEe=a("code"),MIr=o("pretrained_model_name_or_path"),EIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=a("code"),CIr=o("pretrained_model_name_or_path"),wIr=o(":"),AIr=l(),Pe=a("ul"),o0=a("li"),JEe=a("strong"),yIr=o("bart"),LIr=o(" \u2014 "),MK=a("a"),xIr=o("FlaxBartForConditionalGeneration"),$Ir=o(" (BART model)"),kIr=l(),r0=a("li"),YEe=a("strong"),SIr=o("blenderbot"),RIr=o(" \u2014 "),EK=a("a"),PIr=o("FlaxBlenderbotForConditionalGeneration"),BIr=o(" (Blenderbot model)"),IIr=l(),t0=a("li"),KEe=a("strong"),NIr=o("blenderbot-small"),qIr=o(" \u2014 "),CK=a("a"),jIr=o("FlaxBlenderbotSmallForConditionalGeneration"),DIr=o(" (BlenderbotSmall model)"),GIr=l(),a0=a("li"),ZEe=a("strong"),OIr=o("encoder-decoder"),VIr=o(" \u2014 "),wK=a("a"),XIr=o("FlaxEncoderDecoderModel"),zIr=o(" (Encoder decoder model)"),WIr=l(),n0=a("li"),eCe=a("strong"),QIr=o("marian"),HIr=o(" \u2014 "),AK=a("a"),UIr=o("FlaxMarianMTModel"),JIr=o(" (Marian model)"),YIr=l(),s0=a("li"),oCe=a("strong"),KIr=o("mbart"),ZIr=o(" \u2014 "),yK=a("a"),eNr=o("FlaxMBartForConditionalGeneration"),oNr=o(" (mBART model)"),rNr=l(),l0=a("li"),rCe=a("strong"),tNr=o("mt5"),aNr=o(" \u2014 "),LK=a("a"),nNr=o("FlaxMT5ForConditionalGeneration"),sNr=o(" (MT5 model)"),lNr=l(),i0=a("li"),tCe=a("strong"),iNr=o("pegasus"),dNr=o(" \u2014 "),xK=a("a"),cNr=o("FlaxPegasusForConditionalGeneration"),fNr=o(" (Pegasus model)"),mNr=l(),d0=a("li"),aCe=a("strong"),gNr=o("t5"),hNr=o(" \u2014 "),$K=a("a"),pNr=o("FlaxT5ForConditionalGeneration"),_Nr=o(" (T5 model)"),uNr=l(),F(c0.$$.fragment),SDe=l(),Wc=a("h2"),f0=a("a"),nCe=a("span"),F(lx.$$.fragment),bNr=l(),sCe=a("span"),vNr=o("FlaxAutoModelForSequenceClassification"),RDe=l(),_r=a("div"),F(ix.$$.fragment),FNr=l(),Qc=a("p"),TNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kK=a("a"),MNr=o("from_pretrained()"),ENr=o(" class method or the "),SK=a("a"),CNr=o("from_config()"),wNr=o(` class
method.`),ANr=l(),dx=a("p"),yNr=o("This class cannot be instantiated directly using "),lCe=a("code"),LNr=o("__init__()"),xNr=o(" (throws an error)."),$Nr=l(),Qt=a("div"),F(cx.$$.fragment),kNr=l(),iCe=a("p"),SNr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),RNr=l(),Hc=a("p"),PNr=o(`Note:
Loading a model from its configuration file does `),dCe=a("strong"),BNr=o("not"),INr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),NNr=o("from_pretrained()"),qNr=o(" to load the model weights."),jNr=l(),F(m0.$$.fragment),DNr=l(),Xr=a("div"),F(fx.$$.fragment),GNr=l(),cCe=a("p"),ONr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VNr=l(),vn=a("p"),XNr=o("The model class to instantiate is selected based on the "),fCe=a("code"),zNr=o("model_type"),WNr=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),QNr=o("pretrained_model_name_or_path"),HNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(":"),YNr=l(),$e=a("ul"),g0=a("li"),hCe=a("strong"),KNr=o("albert"),ZNr=o(" \u2014 "),PK=a("a"),eqr=o("FlaxAlbertForSequenceClassification"),oqr=o(" (ALBERT model)"),rqr=l(),h0=a("li"),pCe=a("strong"),tqr=o("bart"),aqr=o(" \u2014 "),BK=a("a"),nqr=o("FlaxBartForSequenceClassification"),sqr=o(" (BART model)"),lqr=l(),p0=a("li"),_Ce=a("strong"),iqr=o("bert"),dqr=o(" \u2014 "),IK=a("a"),cqr=o("FlaxBertForSequenceClassification"),fqr=o(" (BERT model)"),mqr=l(),_0=a("li"),uCe=a("strong"),gqr=o("big_bird"),hqr=o(" \u2014 "),NK=a("a"),pqr=o("FlaxBigBirdForSequenceClassification"),_qr=o(" (BigBird model)"),uqr=l(),u0=a("li"),bCe=a("strong"),bqr=o("distilbert"),vqr=o(" \u2014 "),qK=a("a"),Fqr=o("FlaxDistilBertForSequenceClassification"),Tqr=o(" (DistilBERT model)"),Mqr=l(),b0=a("li"),vCe=a("strong"),Eqr=o("electra"),Cqr=o(" \u2014 "),jK=a("a"),wqr=o("FlaxElectraForSequenceClassification"),Aqr=o(" (ELECTRA model)"),yqr=l(),v0=a("li"),FCe=a("strong"),Lqr=o("mbart"),xqr=o(" \u2014 "),DK=a("a"),$qr=o("FlaxMBartForSequenceClassification"),kqr=o(" (mBART model)"),Sqr=l(),F0=a("li"),TCe=a("strong"),Rqr=o("roberta"),Pqr=o(" \u2014 "),GK=a("a"),Bqr=o("FlaxRobertaForSequenceClassification"),Iqr=o(" (RoBERTa model)"),Nqr=l(),T0=a("li"),MCe=a("strong"),qqr=o("roformer"),jqr=o(" \u2014 "),OK=a("a"),Dqr=o("FlaxRoFormerForSequenceClassification"),Gqr=o(" (RoFormer model)"),Oqr=l(),M0=a("li"),ECe=a("strong"),Vqr=o("xlm-roberta"),Xqr=o(" \u2014 "),VK=a("a"),zqr=o("FlaxXLMRobertaForSequenceClassification"),Wqr=o(" (XLM-RoBERTa model)"),Qqr=l(),F(E0.$$.fragment),PDe=l(),Uc=a("h2"),C0=a("a"),CCe=a("span"),F(mx.$$.fragment),Hqr=l(),wCe=a("span"),Uqr=o("FlaxAutoModelForQuestionAnswering"),BDe=l(),ur=a("div"),F(gx.$$.fragment),Jqr=l(),Jc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XK=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),zK=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),hx=a("p"),tjr=o("This class cannot be instantiated directly using "),ACe=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Ht=a("div"),F(px.$$.fragment),ljr=l(),yCe=a("p"),ijr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),djr=l(),Yc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),LCe=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(w0.$$.fragment),_jr=l(),zr=a("div"),F(_x.$$.fragment),ujr=l(),xCe=a("p"),bjr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vjr=l(),Fn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),$Ce=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),kCe=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),yjr=l(),ke=a("ul"),A0=a("li"),RCe=a("strong"),Ljr=o("albert"),xjr=o(" \u2014 "),QK=a("a"),$jr=o("FlaxAlbertForQuestionAnswering"),kjr=o(" (ALBERT model)"),Sjr=l(),y0=a("li"),PCe=a("strong"),Rjr=o("bart"),Pjr=o(" \u2014 "),HK=a("a"),Bjr=o("FlaxBartForQuestionAnswering"),Ijr=o(" (BART model)"),Njr=l(),L0=a("li"),BCe=a("strong"),qjr=o("bert"),jjr=o(" \u2014 "),UK=a("a"),Djr=o("FlaxBertForQuestionAnswering"),Gjr=o(" (BERT model)"),Ojr=l(),x0=a("li"),ICe=a("strong"),Vjr=o("big_bird"),Xjr=o(" \u2014 "),JK=a("a"),zjr=o("FlaxBigBirdForQuestionAnswering"),Wjr=o(" (BigBird model)"),Qjr=l(),$0=a("li"),NCe=a("strong"),Hjr=o("distilbert"),Ujr=o(" \u2014 "),YK=a("a"),Jjr=o("FlaxDistilBertForQuestionAnswering"),Yjr=o(" (DistilBERT model)"),Kjr=l(),k0=a("li"),qCe=a("strong"),Zjr=o("electra"),eDr=o(" \u2014 "),KK=a("a"),oDr=o("FlaxElectraForQuestionAnswering"),rDr=o(" (ELECTRA model)"),tDr=l(),S0=a("li"),jCe=a("strong"),aDr=o("mbart"),nDr=o(" \u2014 "),ZK=a("a"),sDr=o("FlaxMBartForQuestionAnswering"),lDr=o(" (mBART model)"),iDr=l(),R0=a("li"),DCe=a("strong"),dDr=o("roberta"),cDr=o(" \u2014 "),eZ=a("a"),fDr=o("FlaxRobertaForQuestionAnswering"),mDr=o(" (RoBERTa model)"),gDr=l(),P0=a("li"),GCe=a("strong"),hDr=o("roformer"),pDr=o(" \u2014 "),oZ=a("a"),_Dr=o("FlaxRoFormerForQuestionAnswering"),uDr=o(" (RoFormer model)"),bDr=l(),B0=a("li"),OCe=a("strong"),vDr=o("xlm-roberta"),FDr=o(" \u2014 "),rZ=a("a"),TDr=o("FlaxXLMRobertaForQuestionAnswering"),MDr=o(" (XLM-RoBERTa model)"),EDr=l(),F(I0.$$.fragment),IDe=l(),Kc=a("h2"),N0=a("a"),VCe=a("span"),F(ux.$$.fragment),CDr=l(),XCe=a("span"),wDr=o("FlaxAutoModelForTokenClassification"),NDe=l(),br=a("div"),F(bx.$$.fragment),ADr=l(),Zc=a("p"),yDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tZ=a("a"),LDr=o("from_pretrained()"),xDr=o(" class method or the "),aZ=a("a"),$Dr=o("from_config()"),kDr=o(` class
method.`),SDr=l(),vx=a("p"),RDr=o("This class cannot be instantiated directly using "),zCe=a("code"),PDr=o("__init__()"),BDr=o(" (throws an error)."),IDr=l(),Ut=a("div"),F(Fx.$$.fragment),NDr=l(),WCe=a("p"),qDr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jDr=l(),ef=a("p"),DDr=o(`Note:
Loading a model from its configuration file does `),QCe=a("strong"),GDr=o("not"),ODr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=a("a"),VDr=o("from_pretrained()"),XDr=o(" to load the model weights."),zDr=l(),F(q0.$$.fragment),WDr=l(),Wr=a("div"),F(Tx.$$.fragment),QDr=l(),HCe=a("p"),HDr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),UDr=l(),Tn=a("p"),JDr=o("The model class to instantiate is selected based on the "),UCe=a("code"),YDr=o("model_type"),KDr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),ZDr=o("pretrained_model_name_or_path"),eGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),oGr=o("pretrained_model_name_or_path"),rGr=o(":"),tGr=l(),Ge=a("ul"),j0=a("li"),KCe=a("strong"),aGr=o("albert"),nGr=o(" \u2014 "),sZ=a("a"),sGr=o("FlaxAlbertForTokenClassification"),lGr=o(" (ALBERT model)"),iGr=l(),D0=a("li"),ZCe=a("strong"),dGr=o("bert"),cGr=o(" \u2014 "),lZ=a("a"),fGr=o("FlaxBertForTokenClassification"),mGr=o(" (BERT model)"),gGr=l(),G0=a("li"),e5e=a("strong"),hGr=o("big_bird"),pGr=o(" \u2014 "),iZ=a("a"),_Gr=o("FlaxBigBirdForTokenClassification"),uGr=o(" (BigBird model)"),bGr=l(),O0=a("li"),o5e=a("strong"),vGr=o("distilbert"),FGr=o(" \u2014 "),dZ=a("a"),TGr=o("FlaxDistilBertForTokenClassification"),MGr=o(" (DistilBERT model)"),EGr=l(),V0=a("li"),r5e=a("strong"),CGr=o("electra"),wGr=o(" \u2014 "),cZ=a("a"),AGr=o("FlaxElectraForTokenClassification"),yGr=o(" (ELECTRA model)"),LGr=l(),X0=a("li"),t5e=a("strong"),xGr=o("roberta"),$Gr=o(" \u2014 "),fZ=a("a"),kGr=o("FlaxRobertaForTokenClassification"),SGr=o(" (RoBERTa model)"),RGr=l(),z0=a("li"),a5e=a("strong"),PGr=o("roformer"),BGr=o(" \u2014 "),mZ=a("a"),IGr=o("FlaxRoFormerForTokenClassification"),NGr=o(" (RoFormer model)"),qGr=l(),W0=a("li"),n5e=a("strong"),jGr=o("xlm-roberta"),DGr=o(" \u2014 "),gZ=a("a"),GGr=o("FlaxXLMRobertaForTokenClassification"),OGr=o(" (XLM-RoBERTa model)"),VGr=l(),F(Q0.$$.fragment),qDe=l(),of=a("h2"),H0=a("a"),s5e=a("span"),F(Mx.$$.fragment),XGr=l(),l5e=a("span"),zGr=o("FlaxAutoModelForMultipleChoice"),jDe=l(),vr=a("div"),F(Ex.$$.fragment),WGr=l(),rf=a("p"),QGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hZ=a("a"),HGr=o("from_pretrained()"),UGr=o(" class method or the "),pZ=a("a"),JGr=o("from_config()"),YGr=o(` class
method.`),KGr=l(),Cx=a("p"),ZGr=o("This class cannot be instantiated directly using "),i5e=a("code"),eOr=o("__init__()"),oOr=o(" (throws an error)."),rOr=l(),Jt=a("div"),F(wx.$$.fragment),tOr=l(),d5e=a("p"),aOr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nOr=l(),tf=a("p"),sOr=o(`Note:
Loading a model from its configuration file does `),c5e=a("strong"),lOr=o("not"),iOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),dOr=o("from_pretrained()"),cOr=o(" to load the model weights."),fOr=l(),F(U0.$$.fragment),mOr=l(),Qr=a("div"),F(Ax.$$.fragment),gOr=l(),f5e=a("p"),hOr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),pOr=l(),Mn=a("p"),_Or=o("The model class to instantiate is selected based on the "),m5e=a("code"),uOr=o("model_type"),bOr=o(` property of the config object (either
passed as an argument or loaded from `),g5e=a("code"),vOr=o("pretrained_model_name_or_path"),FOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=a("code"),TOr=o("pretrained_model_name_or_path"),MOr=o(":"),EOr=l(),Oe=a("ul"),J0=a("li"),p5e=a("strong"),COr=o("albert"),wOr=o(" \u2014 "),uZ=a("a"),AOr=o("FlaxAlbertForMultipleChoice"),yOr=o(" (ALBERT model)"),LOr=l(),Y0=a("li"),_5e=a("strong"),xOr=o("bert"),$Or=o(" \u2014 "),bZ=a("a"),kOr=o("FlaxBertForMultipleChoice"),SOr=o(" (BERT model)"),ROr=l(),K0=a("li"),u5e=a("strong"),POr=o("big_bird"),BOr=o(" \u2014 "),vZ=a("a"),IOr=o("FlaxBigBirdForMultipleChoice"),NOr=o(" (BigBird model)"),qOr=l(),Z0=a("li"),b5e=a("strong"),jOr=o("distilbert"),DOr=o(" \u2014 "),FZ=a("a"),GOr=o("FlaxDistilBertForMultipleChoice"),OOr=o(" (DistilBERT model)"),VOr=l(),ew=a("li"),v5e=a("strong"),XOr=o("electra"),zOr=o(" \u2014 "),TZ=a("a"),WOr=o("FlaxElectraForMultipleChoice"),QOr=o(" (ELECTRA model)"),HOr=l(),ow=a("li"),F5e=a("strong"),UOr=o("roberta"),JOr=o(" \u2014 "),MZ=a("a"),YOr=o("FlaxRobertaForMultipleChoice"),KOr=o(" (RoBERTa model)"),ZOr=l(),rw=a("li"),T5e=a("strong"),eVr=o("roformer"),oVr=o(" \u2014 "),EZ=a("a"),rVr=o("FlaxRoFormerForMultipleChoice"),tVr=o(" (RoFormer model)"),aVr=l(),tw=a("li"),M5e=a("strong"),nVr=o("xlm-roberta"),sVr=o(" \u2014 "),CZ=a("a"),lVr=o("FlaxXLMRobertaForMultipleChoice"),iVr=o(" (XLM-RoBERTa model)"),dVr=l(),F(aw.$$.fragment),DDe=l(),af=a("h2"),nw=a("a"),E5e=a("span"),F(yx.$$.fragment),cVr=l(),C5e=a("span"),fVr=o("FlaxAutoModelForNextSentencePrediction"),GDe=l(),Fr=a("div"),F(Lx.$$.fragment),mVr=l(),nf=a("p"),gVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wZ=a("a"),hVr=o("from_pretrained()"),pVr=o(" class method or the "),AZ=a("a"),_Vr=o("from_config()"),uVr=o(` class
method.`),bVr=l(),xx=a("p"),vVr=o("This class cannot be instantiated directly using "),w5e=a("code"),FVr=o("__init__()"),TVr=o(" (throws an error)."),MVr=l(),Yt=a("div"),F($x.$$.fragment),EVr=l(),A5e=a("p"),CVr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wVr=l(),sf=a("p"),AVr=o(`Note:
Loading a model from its configuration file does `),y5e=a("strong"),yVr=o("not"),LVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),xVr=o("from_pretrained()"),$Vr=o(" to load the model weights."),kVr=l(),F(sw.$$.fragment),SVr=l(),Hr=a("div"),F(kx.$$.fragment),RVr=l(),L5e=a("p"),PVr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),BVr=l(),En=a("p"),IVr=o("The model class to instantiate is selected based on the "),x5e=a("code"),NVr=o("model_type"),qVr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),jVr=o("pretrained_model_name_or_path"),DVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),GVr=o("pretrained_model_name_or_path"),OVr=o(":"),VVr=l(),S5e=a("ul"),lw=a("li"),R5e=a("strong"),XVr=o("bert"),zVr=o(" \u2014 "),LZ=a("a"),WVr=o("FlaxBertForNextSentencePrediction"),QVr=o(" (BERT model)"),HVr=l(),F(iw.$$.fragment),ODe=l(),lf=a("h2"),dw=a("a"),P5e=a("span"),F(Sx.$$.fragment),UVr=l(),B5e=a("span"),JVr=o("FlaxAutoModelForImageClassification"),VDe=l(),Tr=a("div"),F(Rx.$$.fragment),YVr=l(),df=a("p"),KVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xZ=a("a"),ZVr=o("from_pretrained()"),eXr=o(" class method or the "),$Z=a("a"),oXr=o("from_config()"),rXr=o(` class
method.`),tXr=l(),Px=a("p"),aXr=o("This class cannot be instantiated directly using "),I5e=a("code"),nXr=o("__init__()"),sXr=o(" (throws an error)."),lXr=l(),Kt=a("div"),F(Bx.$$.fragment),iXr=l(),N5e=a("p"),dXr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cXr=l(),cf=a("p"),fXr=o(`Note:
Loading a model from its configuration file does `),q5e=a("strong"),mXr=o("not"),gXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=a("a"),hXr=o("from_pretrained()"),pXr=o(" to load the model weights."),_Xr=l(),F(cw.$$.fragment),uXr=l(),Ur=a("div"),F(Ix.$$.fragment),bXr=l(),j5e=a("p"),vXr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),FXr=l(),Cn=a("p"),TXr=o("The model class to instantiate is selected based on the "),D5e=a("code"),MXr=o("model_type"),EXr=o(` property of the config object (either
passed as an argument or loaded from `),G5e=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=a("code"),AXr=o("pretrained_model_name_or_path"),yXr=o(":"),LXr=l(),Nx=a("ul"),fw=a("li"),V5e=a("strong"),xXr=o("beit"),$Xr=o(" \u2014 "),SZ=a("a"),kXr=o("FlaxBeitForImageClassification"),SXr=o(" (BEiT model)"),RXr=l(),mw=a("li"),X5e=a("strong"),PXr=o("vit"),BXr=o(" \u2014 "),RZ=a("a"),IXr=o("FlaxViTForImageClassification"),NXr=o(" (ViT model)"),qXr=l(),F(gw.$$.fragment),XDe=l(),ff=a("h2"),hw=a("a"),z5e=a("span"),F(qx.$$.fragment),jXr=l(),W5e=a("span"),DXr=o("FlaxAutoModelForVision2Seq"),zDe=l(),Mr=a("div"),F(jx.$$.fragment),GXr=l(),mf=a("p"),OXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PZ=a("a"),VXr=o("from_pretrained()"),XXr=o(" class method or the "),BZ=a("a"),zXr=o("from_config()"),WXr=o(` class
method.`),QXr=l(),Dx=a("p"),HXr=o("This class cannot be instantiated directly using "),Q5e=a("code"),UXr=o("__init__()"),JXr=o(" (throws an error)."),YXr=l(),Zt=a("div"),F(Gx.$$.fragment),KXr=l(),H5e=a("p"),ZXr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ezr=l(),gf=a("p"),ozr=o(`Note:
Loading a model from its configuration file does `),U5e=a("strong"),rzr=o("not"),tzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=a("a"),azr=o("from_pretrained()"),nzr=o(" to load the model weights."),szr=l(),F(pw.$$.fragment),lzr=l(),Jr=a("div"),F(Ox.$$.fragment),izr=l(),J5e=a("p"),dzr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),czr=l(),wn=a("p"),fzr=o("The model class to instantiate is selected based on the "),Y5e=a("code"),mzr=o("model_type"),gzr=o(` property of the config object (either
passed as an argument or loaded from `),K5e=a("code"),hzr=o("pretrained_model_name_or_path"),pzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=a("code"),_zr=o("pretrained_model_name_or_path"),uzr=o(":"),bzr=l(),e3e=a("ul"),_w=a("li"),o3e=a("strong"),vzr=o("vision-encoder-decoder"),Fzr=o(" \u2014 "),NZ=a("a"),Tzr=o("FlaxVisionEncoderDecoderModel"),Mzr=o(" (Vision Encoder decoder model)"),Ezr=l(),F(uw.$$.fragment),this.h()},l(f){const u=ASt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Vx=s(p);m=n(Vx,"A",{id:!0,class:!0,href:!0});var r3e=s(m);_=n(r3e,"SPAN",{});var t3e=s(_);T(d.$$.fragment,t3e),t3e.forEach(t),r3e.forEach(t),h=i(Vx),Mo=n(Vx,"SPAN",{});var a3e=s(Mo);gi=r(a3e,"Auto Classes"),a3e.forEach(t),Vx.forEach(t),uf=i(f),tt=n(f,"P",{});var Xx=s(tt);hi=r(Xx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),pi=n(Xx,"CODE",{});var n3e=s(pi);P6=r(n3e,"from_pretrained()"),n3e.forEach(t),bf=r(Xx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Xx.forEach(t),De=i(f),We=n(f,"P",{});var An=s(We);_i=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var s3e=s(yn);B6=r(s3e,"AutoConfig"),s3e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var l3e=s(xn);I6=r(l3e,"AutoModel"),l3e.forEach(t),ui=r(An,`, and
`),$n=n(An,"A",{href:!0});var i3e=s($n);N6=r(i3e,"AutoTokenizer"),i3e.forEach(t),bi=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),vf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var zx=s(Ae);tk=r(zx,"will create a model that is an instance of "),vi=n(zx,"A",{href:!0});var d3e=s(vi);ak=r(d3e,"BertModel"),d3e.forEach(t),nk=r(zx,"."),zx.forEach(t),Eo=i(f),Aa=n(f,"P",{});var Wx=s(Aa);sk=r(Wx,"There is one class of "),Ff=n(Wx,"CODE",{});var c3e=s(Ff);lk=r(c3e,"AutoModel"),c3e.forEach(t),eVe=r(Wx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Wx.forEach(t),Vqe=i(f),Fi=n(f,"H2",{class:!0});var Qx=s(Fi);Tf=n(Qx,"A",{id:!0,class:!0,href:!0});var f3e=s(Tf);$oe=n(f3e,"SPAN",{});var m3e=s($oe);T(q6.$$.fragment,m3e),m3e.forEach(t),f3e.forEach(t),oVe=i(Qx),koe=n(Qx,"SPAN",{});var g3e=s(koe);rVe=r(g3e,"Extending the Auto Classes"),g3e.forEach(t),Qx.forEach(t),Xqe=i(f),kn=n(f,"P",{});var hf=s(kn);tVe=r(hf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Soe=n(hf,"CODE",{});var h3e=s(Soe);aVe=r(h3e,"NewModel"),h3e.forEach(t),nVe=r(hf,", make sure you have a "),Roe=n(hf,"CODE",{});var p3e=s(Roe);sVe=r(p3e,"NewModelConfig"),p3e.forEach(t),lVe=r(hf,` then you can add those to the auto
classes like this:`),hf.forEach(t),zqe=i(f),T(j6.$$.fragment,f),Wqe=i(f),ik=n(f,"P",{});var _3e=s(ik);iVe=r(_3e,"You will then be able to use the auto classes like you would usually do!"),_3e.forEach(t),Qqe=i(f),T(Mf.$$.fragment,f),Hqe=i(f),Ti=n(f,"H2",{class:!0});var Hx=s(Ti);Ef=n(Hx,"A",{id:!0,class:!0,href:!0});var u3e=s(Ef);Poe=n(u3e,"SPAN",{});var b3e=s(Poe);T(D6.$$.fragment,b3e),b3e.forEach(t),u3e.forEach(t),dVe=i(Hx),Boe=n(Hx,"SPAN",{});var v3e=s(Boe);cVe=r(v3e,"AutoConfig"),v3e.forEach(t),Hx.forEach(t),Uqe=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(G6.$$.fragment,ot),fVe=i(ot),O6=n(ot,"P",{});var Ux=s(O6);mVe=r(Ux,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),dk=n(Ux,"A",{href:!0});var F3e=s(dk);gVe=r(F3e,"from_pretrained()"),F3e.forEach(t),hVe=r(Ux," class method."),Ux.forEach(t),pVe=i(ot),V6=n(ot,"P",{});var Jx=s(V6);_Ve=r(Jx,"This class cannot be instantiated directly using "),Ioe=n(Jx,"CODE",{});var T3e=s(Ioe);uVe=r(T3e,"__init__()"),T3e.forEach(t),bVe=r(Jx," (throws an error)."),Jx.forEach(t),vVe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(X6.$$.fragment,rt),FVe=i(rt),Noe=n(rt,"P",{});var M3e=s(Noe);TVe=r(M3e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),M3e.forEach(t),MVe=i(rt),Mi=n(rt,"P",{});var pf=s(Mi);EVe=r(pf,"The configuration class to instantiate is selected based on the "),qoe=n(pf,"CODE",{});var E3e=s(qoe);CVe=r(E3e,"model_type"),E3e.forEach(t),wVe=r(pf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),joe=n(pf,"CODE",{});var C3e=s(joe);AVe=r(C3e,"pretrained_model_name_or_path"),C3e.forEach(t),yVe=r(pf,":"),pf.forEach(t),LVe=i(rt),A=n(rt,"UL",{});var y=s(A);Cf=n(y,"LI",{});var bw=s(Cf);Doe=n(bw,"STRONG",{});var w3e=s(Doe);xVe=r(w3e,"albert"),w3e.forEach(t),$Ve=r(bw," \u2014 "),ck=n(bw,"A",{href:!0});var A3e=s(ck);kVe=r(A3e,"AlbertConfig"),A3e.forEach(t),SVe=r(bw," (ALBERT model)"),bw.forEach(t),RVe=i(y),wf=n(y,"LI",{});var vw=s(wf);Goe=n(vw,"STRONG",{});var y3e=s(Goe);PVe=r(y3e,"bart"),y3e.forEach(t),BVe=r(vw," \u2014 "),fk=n(vw,"A",{href:!0});var L3e=s(fk);IVe=r(L3e,"BartConfig"),L3e.forEach(t),NVe=r(vw," (BART model)"),vw.forEach(t),qVe=i(y),Af=n(y,"LI",{});var Fw=s(Af);Ooe=n(Fw,"STRONG",{});var x3e=s(Ooe);jVe=r(x3e,"beit"),x3e.forEach(t),DVe=r(Fw," \u2014 "),mk=n(Fw,"A",{href:!0});var $3e=s(mk);GVe=r($3e,"BeitConfig"),$3e.forEach(t),OVe=r(Fw," (BEiT model)"),Fw.forEach(t),VVe=i(y),yf=n(y,"LI",{});var Tw=s(yf);Voe=n(Tw,"STRONG",{});var k3e=s(Voe);XVe=r(k3e,"bert"),k3e.forEach(t),zVe=r(Tw," \u2014 "),gk=n(Tw,"A",{href:!0});var S3e=s(gk);WVe=r(S3e,"BertConfig"),S3e.forEach(t),QVe=r(Tw," (BERT model)"),Tw.forEach(t),HVe=i(y),Lf=n(y,"LI",{});var Mw=s(Lf);Xoe=n(Mw,"STRONG",{});var R3e=s(Xoe);UVe=r(R3e,"bert-generation"),R3e.forEach(t),JVe=r(Mw," \u2014 "),hk=n(Mw,"A",{href:!0});var P3e=s(hk);YVe=r(P3e,"BertGenerationConfig"),P3e.forEach(t),KVe=r(Mw," (Bert Generation model)"),Mw.forEach(t),ZVe=i(y),xf=n(y,"LI",{});var Ew=s(xf);zoe=n(Ew,"STRONG",{});var B3e=s(zoe);eXe=r(B3e,"big_bird"),B3e.forEach(t),oXe=r(Ew," \u2014 "),pk=n(Ew,"A",{href:!0});var I3e=s(pk);rXe=r(I3e,"BigBirdConfig"),I3e.forEach(t),tXe=r(Ew," (BigBird model)"),Ew.forEach(t),aXe=i(y),$f=n(y,"LI",{});var Cw=s($f);Woe=n(Cw,"STRONG",{});var N3e=s(Woe);nXe=r(N3e,"bigbird_pegasus"),N3e.forEach(t),sXe=r(Cw," \u2014 "),_k=n(Cw,"A",{href:!0});var q3e=s(_k);lXe=r(q3e,"BigBirdPegasusConfig"),q3e.forEach(t),iXe=r(Cw," (BigBird-Pegasus model)"),Cw.forEach(t),dXe=i(y),kf=n(y,"LI",{});var ww=s(kf);Qoe=n(ww,"STRONG",{});var j3e=s(Qoe);cXe=r(j3e,"blenderbot"),j3e.forEach(t),fXe=r(ww," \u2014 "),uk=n(ww,"A",{href:!0});var D3e=s(uk);mXe=r(D3e,"BlenderbotConfig"),D3e.forEach(t),gXe=r(ww," (Blenderbot model)"),ww.forEach(t),hXe=i(y),Sf=n(y,"LI",{});var Aw=s(Sf);Hoe=n(Aw,"STRONG",{});var G3e=s(Hoe);pXe=r(G3e,"blenderbot-small"),G3e.forEach(t),_Xe=r(Aw," \u2014 "),bk=n(Aw,"A",{href:!0});var O3e=s(bk);uXe=r(O3e,"BlenderbotSmallConfig"),O3e.forEach(t),bXe=r(Aw," (BlenderbotSmall model)"),Aw.forEach(t),vXe=i(y),Rf=n(y,"LI",{});var yw=s(Rf);Uoe=n(yw,"STRONG",{});var V3e=s(Uoe);FXe=r(V3e,"camembert"),V3e.forEach(t),TXe=r(yw," \u2014 "),vk=n(yw,"A",{href:!0});var X3e=s(vk);MXe=r(X3e,"CamembertConfig"),X3e.forEach(t),EXe=r(yw," (CamemBERT model)"),yw.forEach(t),CXe=i(y),Pf=n(y,"LI",{});var Lw=s(Pf);Joe=n(Lw,"STRONG",{});var z3e=s(Joe);wXe=r(z3e,"canine"),z3e.forEach(t),AXe=r(Lw," \u2014 "),Fk=n(Lw,"A",{href:!0});var W3e=s(Fk);yXe=r(W3e,"CanineConfig"),W3e.forEach(t),LXe=r(Lw," (CANINE model)"),Lw.forEach(t),xXe=i(y),Bf=n(y,"LI",{});var xw=s(Bf);Yoe=n(xw,"STRONG",{});var Q3e=s(Yoe);$Xe=r(Q3e,"clip"),Q3e.forEach(t),kXe=r(xw," \u2014 "),Tk=n(xw,"A",{href:!0});var H3e=s(Tk);SXe=r(H3e,"CLIPConfig"),H3e.forEach(t),RXe=r(xw," (CLIP model)"),xw.forEach(t),PXe=i(y),If=n(y,"LI",{});var $w=s(If);Koe=n($w,"STRONG",{});var U3e=s(Koe);BXe=r(U3e,"convbert"),U3e.forEach(t),IXe=r($w," \u2014 "),Mk=n($w,"A",{href:!0});var J3e=s(Mk);NXe=r(J3e,"ConvBertConfig"),J3e.forEach(t),qXe=r($w," (ConvBERT model)"),$w.forEach(t),jXe=i(y),Nf=n(y,"LI",{});var kw=s(Nf);Zoe=n(kw,"STRONG",{});var Y3e=s(Zoe);DXe=r(Y3e,"convnext"),Y3e.forEach(t),GXe=r(kw," \u2014 "),Ek=n(kw,"A",{href:!0});var K3e=s(Ek);OXe=r(K3e,"ConvNextConfig"),K3e.forEach(t),VXe=r(kw," (ConvNeXT model)"),kw.forEach(t),XXe=i(y),qf=n(y,"LI",{});var Sw=s(qf);ere=n(Sw,"STRONG",{});var Z3e=s(ere);zXe=r(Z3e,"ctrl"),Z3e.forEach(t),WXe=r(Sw," \u2014 "),Ck=n(Sw,"A",{href:!0});var e0e=s(Ck);QXe=r(e0e,"CTRLConfig"),e0e.forEach(t),HXe=r(Sw," (CTRL model)"),Sw.forEach(t),UXe=i(y),jf=n(y,"LI",{});var Rw=s(jf);ore=n(Rw,"STRONG",{});var o0e=s(ore);JXe=r(o0e,"cvt"),o0e.forEach(t),YXe=r(Rw," \u2014 "),wk=n(Rw,"A",{href:!0});var r0e=s(wk);KXe=r(r0e,"CvtConfig"),r0e.forEach(t),ZXe=r(Rw," (CvT model)"),Rw.forEach(t),eze=i(y),Df=n(y,"LI",{});var Pw=s(Df);rre=n(Pw,"STRONG",{});var t0e=s(rre);oze=r(t0e,"data2vec-audio"),t0e.forEach(t),rze=r(Pw," \u2014 "),Ak=n(Pw,"A",{href:!0});var a0e=s(Ak);tze=r(a0e,"Data2VecAudioConfig"),a0e.forEach(t),aze=r(Pw," (Data2VecAudio model)"),Pw.forEach(t),nze=i(y),Gf=n(y,"LI",{});var Bw=s(Gf);tre=n(Bw,"STRONG",{});var n0e=s(tre);sze=r(n0e,"data2vec-text"),n0e.forEach(t),lze=r(Bw," \u2014 "),yk=n(Bw,"A",{href:!0});var s0e=s(yk);ize=r(s0e,"Data2VecTextConfig"),s0e.forEach(t),dze=r(Bw," (Data2VecText model)"),Bw.forEach(t),cze=i(y),Of=n(y,"LI",{});var Iw=s(Of);are=n(Iw,"STRONG",{});var l0e=s(are);fze=r(l0e,"data2vec-vision"),l0e.forEach(t),mze=r(Iw," \u2014 "),Lk=n(Iw,"A",{href:!0});var i0e=s(Lk);gze=r(i0e,"Data2VecVisionConfig"),i0e.forEach(t),hze=r(Iw," (Data2VecVision model)"),Iw.forEach(t),pze=i(y),Vf=n(y,"LI",{});var Nw=s(Vf);nre=n(Nw,"STRONG",{});var d0e=s(nre);_ze=r(d0e,"deberta"),d0e.forEach(t),uze=r(Nw," \u2014 "),xk=n(Nw,"A",{href:!0});var c0e=s(xk);bze=r(c0e,"DebertaConfig"),c0e.forEach(t),vze=r(Nw," (DeBERTa model)"),Nw.forEach(t),Fze=i(y),Xf=n(y,"LI",{});var qw=s(Xf);sre=n(qw,"STRONG",{});var f0e=s(sre);Tze=r(f0e,"deberta-v2"),f0e.forEach(t),Mze=r(qw," \u2014 "),$k=n(qw,"A",{href:!0});var m0e=s($k);Eze=r(m0e,"DebertaV2Config"),m0e.forEach(t),Cze=r(qw," (DeBERTa-v2 model)"),qw.forEach(t),wze=i(y),zf=n(y,"LI",{});var jw=s(zf);lre=n(jw,"STRONG",{});var g0e=s(lre);Aze=r(g0e,"decision_transformer"),g0e.forEach(t),yze=r(jw," \u2014 "),kk=n(jw,"A",{href:!0});var h0e=s(kk);Lze=r(h0e,"DecisionTransformerConfig"),h0e.forEach(t),xze=r(jw," (Decision Transformer model)"),jw.forEach(t),$ze=i(y),Wf=n(y,"LI",{});var Dw=s(Wf);ire=n(Dw,"STRONG",{});var p0e=s(ire);kze=r(p0e,"deit"),p0e.forEach(t),Sze=r(Dw," \u2014 "),Sk=n(Dw,"A",{href:!0});var wzr=s(Sk);Rze=r(wzr,"DeiTConfig"),wzr.forEach(t),Pze=r(Dw," (DeiT model)"),Dw.forEach(t),Bze=i(y),Qf=n(y,"LI",{});var _0e=s(Qf);dre=n(_0e,"STRONG",{});var Azr=s(dre);Ize=r(Azr,"detr"),Azr.forEach(t),Nze=r(_0e," \u2014 "),Rk=n(_0e,"A",{href:!0});var yzr=s(Rk);qze=r(yzr,"DetrConfig"),yzr.forEach(t),jze=r(_0e," (DETR model)"),_0e.forEach(t),Dze=i(y),Hf=n(y,"LI",{});var u0e=s(Hf);cre=n(u0e,"STRONG",{});var Lzr=s(cre);Gze=r(Lzr,"distilbert"),Lzr.forEach(t),Oze=r(u0e," \u2014 "),Pk=n(u0e,"A",{href:!0});var xzr=s(Pk);Vze=r(xzr,"DistilBertConfig"),xzr.forEach(t),Xze=r(u0e," (DistilBERT model)"),u0e.forEach(t),zze=i(y),Uf=n(y,"LI",{});var b0e=s(Uf);fre=n(b0e,"STRONG",{});var $zr=s(fre);Wze=r($zr,"dpr"),$zr.forEach(t),Qze=r(b0e," \u2014 "),Bk=n(b0e,"A",{href:!0});var kzr=s(Bk);Hze=r(kzr,"DPRConfig"),kzr.forEach(t),Uze=r(b0e," (DPR model)"),b0e.forEach(t),Jze=i(y),Jf=n(y,"LI",{});var v0e=s(Jf);mre=n(v0e,"STRONG",{});var Szr=s(mre);Yze=r(Szr,"dpt"),Szr.forEach(t),Kze=r(v0e," \u2014 "),Ik=n(v0e,"A",{href:!0});var Rzr=s(Ik);Zze=r(Rzr,"DPTConfig"),Rzr.forEach(t),eWe=r(v0e," (DPT model)"),v0e.forEach(t),oWe=i(y),Yf=n(y,"LI",{});var F0e=s(Yf);gre=n(F0e,"STRONG",{});var Pzr=s(gre);rWe=r(Pzr,"electra"),Pzr.forEach(t),tWe=r(F0e," \u2014 "),Nk=n(F0e,"A",{href:!0});var Bzr=s(Nk);aWe=r(Bzr,"ElectraConfig"),Bzr.forEach(t),nWe=r(F0e," (ELECTRA model)"),F0e.forEach(t),sWe=i(y),Kf=n(y,"LI",{});var T0e=s(Kf);hre=n(T0e,"STRONG",{});var Izr=s(hre);lWe=r(Izr,"encoder-decoder"),Izr.forEach(t),iWe=r(T0e," \u2014 "),qk=n(T0e,"A",{href:!0});var Nzr=s(qk);dWe=r(Nzr,"EncoderDecoderConfig"),Nzr.forEach(t),cWe=r(T0e," (Encoder decoder model)"),T0e.forEach(t),fWe=i(y),Zf=n(y,"LI",{});var M0e=s(Zf);pre=n(M0e,"STRONG",{});var qzr=s(pre);mWe=r(qzr,"flaubert"),qzr.forEach(t),gWe=r(M0e," \u2014 "),jk=n(M0e,"A",{href:!0});var jzr=s(jk);hWe=r(jzr,"FlaubertConfig"),jzr.forEach(t),pWe=r(M0e," (FlauBERT model)"),M0e.forEach(t),_We=i(y),em=n(y,"LI",{});var E0e=s(em);_re=n(E0e,"STRONG",{});var Dzr=s(_re);uWe=r(Dzr,"flava"),Dzr.forEach(t),bWe=r(E0e," \u2014 "),Dk=n(E0e,"A",{href:!0});var Gzr=s(Dk);vWe=r(Gzr,"FlavaConfig"),Gzr.forEach(t),FWe=r(E0e," (FLAVA model)"),E0e.forEach(t),TWe=i(y),om=n(y,"LI",{});var C0e=s(om);ure=n(C0e,"STRONG",{});var Ozr=s(ure);MWe=r(Ozr,"fnet"),Ozr.forEach(t),EWe=r(C0e," \u2014 "),Gk=n(C0e,"A",{href:!0});var Vzr=s(Gk);CWe=r(Vzr,"FNetConfig"),Vzr.forEach(t),wWe=r(C0e," (FNet model)"),C0e.forEach(t),AWe=i(y),rm=n(y,"LI",{});var w0e=s(rm);bre=n(w0e,"STRONG",{});var Xzr=s(bre);yWe=r(Xzr,"fsmt"),Xzr.forEach(t),LWe=r(w0e," \u2014 "),Ok=n(w0e,"A",{href:!0});var zzr=s(Ok);xWe=r(zzr,"FSMTConfig"),zzr.forEach(t),$We=r(w0e," (FairSeq Machine-Translation model)"),w0e.forEach(t),kWe=i(y),tm=n(y,"LI",{});var A0e=s(tm);vre=n(A0e,"STRONG",{});var Wzr=s(vre);SWe=r(Wzr,"funnel"),Wzr.forEach(t),RWe=r(A0e," \u2014 "),Vk=n(A0e,"A",{href:!0});var Qzr=s(Vk);PWe=r(Qzr,"FunnelConfig"),Qzr.forEach(t),BWe=r(A0e," (Funnel Transformer model)"),A0e.forEach(t),IWe=i(y),am=n(y,"LI",{});var y0e=s(am);Fre=n(y0e,"STRONG",{});var Hzr=s(Fre);NWe=r(Hzr,"glpn"),Hzr.forEach(t),qWe=r(y0e," \u2014 "),Xk=n(y0e,"A",{href:!0});var Uzr=s(Xk);jWe=r(Uzr,"GLPNConfig"),Uzr.forEach(t),DWe=r(y0e," (GLPN model)"),y0e.forEach(t),GWe=i(y),nm=n(y,"LI",{});var L0e=s(nm);Tre=n(L0e,"STRONG",{});var Jzr=s(Tre);OWe=r(Jzr,"gpt2"),Jzr.forEach(t),VWe=r(L0e," \u2014 "),zk=n(L0e,"A",{href:!0});var Yzr=s(zk);XWe=r(Yzr,"GPT2Config"),Yzr.forEach(t),zWe=r(L0e," (OpenAI GPT-2 model)"),L0e.forEach(t),WWe=i(y),sm=n(y,"LI",{});var x0e=s(sm);Mre=n(x0e,"STRONG",{});var Kzr=s(Mre);QWe=r(Kzr,"gpt_neo"),Kzr.forEach(t),HWe=r(x0e," \u2014 "),Wk=n(x0e,"A",{href:!0});var Zzr=s(Wk);UWe=r(Zzr,"GPTNeoConfig"),Zzr.forEach(t),JWe=r(x0e," (GPT Neo model)"),x0e.forEach(t),YWe=i(y),lm=n(y,"LI",{});var $0e=s(lm);Ere=n($0e,"STRONG",{});var eWr=s(Ere);KWe=r(eWr,"gpt_neox"),eWr.forEach(t),ZWe=r($0e," \u2014 "),Qk=n($0e,"A",{href:!0});var oWr=s(Qk);eQe=r(oWr,"GPTNeoXConfig"),oWr.forEach(t),oQe=r($0e," (GPT NeoX model)"),$0e.forEach(t),rQe=i(y),im=n(y,"LI",{});var k0e=s(im);Cre=n(k0e,"STRONG",{});var rWr=s(Cre);tQe=r(rWr,"gptj"),rWr.forEach(t),aQe=r(k0e," \u2014 "),Hk=n(k0e,"A",{href:!0});var tWr=s(Hk);nQe=r(tWr,"GPTJConfig"),tWr.forEach(t),sQe=r(k0e," (GPT-J model)"),k0e.forEach(t),lQe=i(y),dm=n(y,"LI",{});var S0e=s(dm);wre=n(S0e,"STRONG",{});var aWr=s(wre);iQe=r(aWr,"hubert"),aWr.forEach(t),dQe=r(S0e," \u2014 "),Uk=n(S0e,"A",{href:!0});var nWr=s(Uk);cQe=r(nWr,"HubertConfig"),nWr.forEach(t),fQe=r(S0e," (Hubert model)"),S0e.forEach(t),mQe=i(y),cm=n(y,"LI",{});var R0e=s(cm);Are=n(R0e,"STRONG",{});var sWr=s(Are);gQe=r(sWr,"ibert"),sWr.forEach(t),hQe=r(R0e," \u2014 "),Jk=n(R0e,"A",{href:!0});var lWr=s(Jk);pQe=r(lWr,"IBertConfig"),lWr.forEach(t),_Qe=r(R0e," (I-BERT model)"),R0e.forEach(t),uQe=i(y),fm=n(y,"LI",{});var P0e=s(fm);yre=n(P0e,"STRONG",{});var iWr=s(yre);bQe=r(iWr,"imagegpt"),iWr.forEach(t),vQe=r(P0e," \u2014 "),Yk=n(P0e,"A",{href:!0});var dWr=s(Yk);FQe=r(dWr,"ImageGPTConfig"),dWr.forEach(t),TQe=r(P0e," (ImageGPT model)"),P0e.forEach(t),MQe=i(y),mm=n(y,"LI",{});var B0e=s(mm);Lre=n(B0e,"STRONG",{});var cWr=s(Lre);EQe=r(cWr,"layoutlm"),cWr.forEach(t),CQe=r(B0e," \u2014 "),Kk=n(B0e,"A",{href:!0});var fWr=s(Kk);wQe=r(fWr,"LayoutLMConfig"),fWr.forEach(t),AQe=r(B0e," (LayoutLM model)"),B0e.forEach(t),yQe=i(y),gm=n(y,"LI",{});var I0e=s(gm);xre=n(I0e,"STRONG",{});var mWr=s(xre);LQe=r(mWr,"layoutlmv2"),mWr.forEach(t),xQe=r(I0e," \u2014 "),Zk=n(I0e,"A",{href:!0});var gWr=s(Zk);$Qe=r(gWr,"LayoutLMv2Config"),gWr.forEach(t),kQe=r(I0e," (LayoutLMv2 model)"),I0e.forEach(t),SQe=i(y),hm=n(y,"LI",{});var N0e=s(hm);$re=n(N0e,"STRONG",{});var hWr=s($re);RQe=r(hWr,"layoutlmv3"),hWr.forEach(t),PQe=r(N0e," \u2014 "),eS=n(N0e,"A",{href:!0});var pWr=s(eS);BQe=r(pWr,"LayoutLMv3Config"),pWr.forEach(t),IQe=r(N0e," (LayoutLMv3 model)"),N0e.forEach(t),NQe=i(y),pm=n(y,"LI",{});var q0e=s(pm);kre=n(q0e,"STRONG",{});var _Wr=s(kre);qQe=r(_Wr,"led"),_Wr.forEach(t),jQe=r(q0e," \u2014 "),oS=n(q0e,"A",{href:!0});var uWr=s(oS);DQe=r(uWr,"LEDConfig"),uWr.forEach(t),GQe=r(q0e," (LED model)"),q0e.forEach(t),OQe=i(y),_m=n(y,"LI",{});var j0e=s(_m);Sre=n(j0e,"STRONG",{});var bWr=s(Sre);VQe=r(bWr,"levit"),bWr.forEach(t),XQe=r(j0e," \u2014 "),rS=n(j0e,"A",{href:!0});var vWr=s(rS);zQe=r(vWr,"LevitConfig"),vWr.forEach(t),WQe=r(j0e," (LeViT model)"),j0e.forEach(t),QQe=i(y),um=n(y,"LI",{});var D0e=s(um);Rre=n(D0e,"STRONG",{});var FWr=s(Rre);HQe=r(FWr,"longformer"),FWr.forEach(t),UQe=r(D0e," \u2014 "),tS=n(D0e,"A",{href:!0});var TWr=s(tS);JQe=r(TWr,"LongformerConfig"),TWr.forEach(t),YQe=r(D0e," (Longformer model)"),D0e.forEach(t),KQe=i(y),bm=n(y,"LI",{});var G0e=s(bm);Pre=n(G0e,"STRONG",{});var MWr=s(Pre);ZQe=r(MWr,"luke"),MWr.forEach(t),eHe=r(G0e," \u2014 "),aS=n(G0e,"A",{href:!0});var EWr=s(aS);oHe=r(EWr,"LukeConfig"),EWr.forEach(t),rHe=r(G0e," (LUKE model)"),G0e.forEach(t),tHe=i(y),vm=n(y,"LI",{});var O0e=s(vm);Bre=n(O0e,"STRONG",{});var CWr=s(Bre);aHe=r(CWr,"lxmert"),CWr.forEach(t),nHe=r(O0e," \u2014 "),nS=n(O0e,"A",{href:!0});var wWr=s(nS);sHe=r(wWr,"LxmertConfig"),wWr.forEach(t),lHe=r(O0e," (LXMERT model)"),O0e.forEach(t),iHe=i(y),Fm=n(y,"LI",{});var V0e=s(Fm);Ire=n(V0e,"STRONG",{});var AWr=s(Ire);dHe=r(AWr,"m2m_100"),AWr.forEach(t),cHe=r(V0e," \u2014 "),sS=n(V0e,"A",{href:!0});var yWr=s(sS);fHe=r(yWr,"M2M100Config"),yWr.forEach(t),mHe=r(V0e," (M2M100 model)"),V0e.forEach(t),gHe=i(y),Tm=n(y,"LI",{});var X0e=s(Tm);Nre=n(X0e,"STRONG",{});var LWr=s(Nre);hHe=r(LWr,"marian"),LWr.forEach(t),pHe=r(X0e," \u2014 "),lS=n(X0e,"A",{href:!0});var xWr=s(lS);_He=r(xWr,"MarianConfig"),xWr.forEach(t),uHe=r(X0e," (Marian model)"),X0e.forEach(t),bHe=i(y),Mm=n(y,"LI",{});var z0e=s(Mm);qre=n(z0e,"STRONG",{});var $Wr=s(qre);vHe=r($Wr,"maskformer"),$Wr.forEach(t),FHe=r(z0e," \u2014 "),iS=n(z0e,"A",{href:!0});var kWr=s(iS);THe=r(kWr,"MaskFormerConfig"),kWr.forEach(t),MHe=r(z0e," (MaskFormer model)"),z0e.forEach(t),EHe=i(y),Em=n(y,"LI",{});var W0e=s(Em);jre=n(W0e,"STRONG",{});var SWr=s(jre);CHe=r(SWr,"mbart"),SWr.forEach(t),wHe=r(W0e," \u2014 "),dS=n(W0e,"A",{href:!0});var RWr=s(dS);AHe=r(RWr,"MBartConfig"),RWr.forEach(t),yHe=r(W0e," (mBART model)"),W0e.forEach(t),LHe=i(y),Cm=n(y,"LI",{});var Q0e=s(Cm);Dre=n(Q0e,"STRONG",{});var PWr=s(Dre);xHe=r(PWr,"megatron-bert"),PWr.forEach(t),$He=r(Q0e," \u2014 "),cS=n(Q0e,"A",{href:!0});var BWr=s(cS);kHe=r(BWr,"MegatronBertConfig"),BWr.forEach(t),SHe=r(Q0e," (Megatron-BERT model)"),Q0e.forEach(t),RHe=i(y),wm=n(y,"LI",{});var H0e=s(wm);Gre=n(H0e,"STRONG",{});var IWr=s(Gre);PHe=r(IWr,"mobilebert"),IWr.forEach(t),BHe=r(H0e," \u2014 "),fS=n(H0e,"A",{href:!0});var NWr=s(fS);IHe=r(NWr,"MobileBertConfig"),NWr.forEach(t),NHe=r(H0e," (MobileBERT model)"),H0e.forEach(t),qHe=i(y),Am=n(y,"LI",{});var U0e=s(Am);Ore=n(U0e,"STRONG",{});var qWr=s(Ore);jHe=r(qWr,"mpnet"),qWr.forEach(t),DHe=r(U0e," \u2014 "),mS=n(U0e,"A",{href:!0});var jWr=s(mS);GHe=r(jWr,"MPNetConfig"),jWr.forEach(t),OHe=r(U0e," (MPNet model)"),U0e.forEach(t),VHe=i(y),ym=n(y,"LI",{});var J0e=s(ym);Vre=n(J0e,"STRONG",{});var DWr=s(Vre);XHe=r(DWr,"mt5"),DWr.forEach(t),zHe=r(J0e," \u2014 "),gS=n(J0e,"A",{href:!0});var GWr=s(gS);WHe=r(GWr,"MT5Config"),GWr.forEach(t),QHe=r(J0e," (MT5 model)"),J0e.forEach(t),HHe=i(y),Lm=n(y,"LI",{});var Y0e=s(Lm);Xre=n(Y0e,"STRONG",{});var OWr=s(Xre);UHe=r(OWr,"nystromformer"),OWr.forEach(t),JHe=r(Y0e," \u2014 "),hS=n(Y0e,"A",{href:!0});var VWr=s(hS);YHe=r(VWr,"NystromformerConfig"),VWr.forEach(t),KHe=r(Y0e," (Nystr\xF6mformer model)"),Y0e.forEach(t),ZHe=i(y),xm=n(y,"LI",{});var K0e=s(xm);zre=n(K0e,"STRONG",{});var XWr=s(zre);eUe=r(XWr,"openai-gpt"),XWr.forEach(t),oUe=r(K0e," \u2014 "),pS=n(K0e,"A",{href:!0});var zWr=s(pS);rUe=r(zWr,"OpenAIGPTConfig"),zWr.forEach(t),tUe=r(K0e," (OpenAI GPT model)"),K0e.forEach(t),aUe=i(y),$m=n(y,"LI",{});var Z0e=s($m);Wre=n(Z0e,"STRONG",{});var WWr=s(Wre);nUe=r(WWr,"opt"),WWr.forEach(t),sUe=r(Z0e," \u2014 "),_S=n(Z0e,"A",{href:!0});var QWr=s(_S);lUe=r(QWr,"OPTConfig"),QWr.forEach(t),iUe=r(Z0e," (OPT model)"),Z0e.forEach(t),dUe=i(y),km=n(y,"LI",{});var ewe=s(km);Qre=n(ewe,"STRONG",{});var HWr=s(Qre);cUe=r(HWr,"pegasus"),HWr.forEach(t),fUe=r(ewe," \u2014 "),uS=n(ewe,"A",{href:!0});var UWr=s(uS);mUe=r(UWr,"PegasusConfig"),UWr.forEach(t),gUe=r(ewe," (Pegasus model)"),ewe.forEach(t),hUe=i(y),Sm=n(y,"LI",{});var owe=s(Sm);Hre=n(owe,"STRONG",{});var JWr=s(Hre);pUe=r(JWr,"perceiver"),JWr.forEach(t),_Ue=r(owe," \u2014 "),bS=n(owe,"A",{href:!0});var YWr=s(bS);uUe=r(YWr,"PerceiverConfig"),YWr.forEach(t),bUe=r(owe," (Perceiver model)"),owe.forEach(t),vUe=i(y),Rm=n(y,"LI",{});var rwe=s(Rm);Ure=n(rwe,"STRONG",{});var KWr=s(Ure);FUe=r(KWr,"plbart"),KWr.forEach(t),TUe=r(rwe," \u2014 "),vS=n(rwe,"A",{href:!0});var ZWr=s(vS);MUe=r(ZWr,"PLBartConfig"),ZWr.forEach(t),EUe=r(rwe," (PLBart model)"),rwe.forEach(t),CUe=i(y),Pm=n(y,"LI",{});var twe=s(Pm);Jre=n(twe,"STRONG",{});var eQr=s(Jre);wUe=r(eQr,"poolformer"),eQr.forEach(t),AUe=r(twe," \u2014 "),FS=n(twe,"A",{href:!0});var oQr=s(FS);yUe=r(oQr,"PoolFormerConfig"),oQr.forEach(t),LUe=r(twe," (PoolFormer model)"),twe.forEach(t),xUe=i(y),Bm=n(y,"LI",{});var awe=s(Bm);Yre=n(awe,"STRONG",{});var rQr=s(Yre);$Ue=r(rQr,"prophetnet"),rQr.forEach(t),kUe=r(awe," \u2014 "),TS=n(awe,"A",{href:!0});var tQr=s(TS);SUe=r(tQr,"ProphetNetConfig"),tQr.forEach(t),RUe=r(awe," (ProphetNet model)"),awe.forEach(t),PUe=i(y),Im=n(y,"LI",{});var nwe=s(Im);Kre=n(nwe,"STRONG",{});var aQr=s(Kre);BUe=r(aQr,"qdqbert"),aQr.forEach(t),IUe=r(nwe," \u2014 "),MS=n(nwe,"A",{href:!0});var nQr=s(MS);NUe=r(nQr,"QDQBertConfig"),nQr.forEach(t),qUe=r(nwe," (QDQBert model)"),nwe.forEach(t),jUe=i(y),Nm=n(y,"LI",{});var swe=s(Nm);Zre=n(swe,"STRONG",{});var sQr=s(Zre);DUe=r(sQr,"rag"),sQr.forEach(t),GUe=r(swe," \u2014 "),ES=n(swe,"A",{href:!0});var lQr=s(ES);OUe=r(lQr,"RagConfig"),lQr.forEach(t),VUe=r(swe," (RAG model)"),swe.forEach(t),XUe=i(y),qm=n(y,"LI",{});var lwe=s(qm);ete=n(lwe,"STRONG",{});var iQr=s(ete);zUe=r(iQr,"realm"),iQr.forEach(t),WUe=r(lwe," \u2014 "),CS=n(lwe,"A",{href:!0});var dQr=s(CS);QUe=r(dQr,"RealmConfig"),dQr.forEach(t),HUe=r(lwe," (REALM model)"),lwe.forEach(t),UUe=i(y),jm=n(y,"LI",{});var iwe=s(jm);ote=n(iwe,"STRONG",{});var cQr=s(ote);JUe=r(cQr,"reformer"),cQr.forEach(t),YUe=r(iwe," \u2014 "),wS=n(iwe,"A",{href:!0});var fQr=s(wS);KUe=r(fQr,"ReformerConfig"),fQr.forEach(t),ZUe=r(iwe," (Reformer model)"),iwe.forEach(t),eJe=i(y),Dm=n(y,"LI",{});var dwe=s(Dm);rte=n(dwe,"STRONG",{});var mQr=s(rte);oJe=r(mQr,"regnet"),mQr.forEach(t),rJe=r(dwe," \u2014 "),AS=n(dwe,"A",{href:!0});var gQr=s(AS);tJe=r(gQr,"RegNetConfig"),gQr.forEach(t),aJe=r(dwe," (RegNet model)"),dwe.forEach(t),nJe=i(y),Gm=n(y,"LI",{});var cwe=s(Gm);tte=n(cwe,"STRONG",{});var hQr=s(tte);sJe=r(hQr,"rembert"),hQr.forEach(t),lJe=r(cwe," \u2014 "),yS=n(cwe,"A",{href:!0});var pQr=s(yS);iJe=r(pQr,"RemBertConfig"),pQr.forEach(t),dJe=r(cwe," (RemBERT model)"),cwe.forEach(t),cJe=i(y),Om=n(y,"LI",{});var fwe=s(Om);ate=n(fwe,"STRONG",{});var _Qr=s(ate);fJe=r(_Qr,"resnet"),_Qr.forEach(t),mJe=r(fwe," \u2014 "),LS=n(fwe,"A",{href:!0});var uQr=s(LS);gJe=r(uQr,"ResNetConfig"),uQr.forEach(t),hJe=r(fwe," (ResNet model)"),fwe.forEach(t),pJe=i(y),Vm=n(y,"LI",{});var mwe=s(Vm);nte=n(mwe,"STRONG",{});var bQr=s(nte);_Je=r(bQr,"retribert"),bQr.forEach(t),uJe=r(mwe," \u2014 "),xS=n(mwe,"A",{href:!0});var vQr=s(xS);bJe=r(vQr,"RetriBertConfig"),vQr.forEach(t),vJe=r(mwe," (RetriBERT model)"),mwe.forEach(t),FJe=i(y),Xm=n(y,"LI",{});var gwe=s(Xm);ste=n(gwe,"STRONG",{});var FQr=s(ste);TJe=r(FQr,"roberta"),FQr.forEach(t),MJe=r(gwe," \u2014 "),$S=n(gwe,"A",{href:!0});var TQr=s($S);EJe=r(TQr,"RobertaConfig"),TQr.forEach(t),CJe=r(gwe," (RoBERTa model)"),gwe.forEach(t),wJe=i(y),zm=n(y,"LI",{});var hwe=s(zm);lte=n(hwe,"STRONG",{});var MQr=s(lte);AJe=r(MQr,"roformer"),MQr.forEach(t),yJe=r(hwe," \u2014 "),kS=n(hwe,"A",{href:!0});var EQr=s(kS);LJe=r(EQr,"RoFormerConfig"),EQr.forEach(t),xJe=r(hwe," (RoFormer model)"),hwe.forEach(t),$Je=i(y),Wm=n(y,"LI",{});var pwe=s(Wm);ite=n(pwe,"STRONG",{});var CQr=s(ite);kJe=r(CQr,"segformer"),CQr.forEach(t),SJe=r(pwe," \u2014 "),SS=n(pwe,"A",{href:!0});var wQr=s(SS);RJe=r(wQr,"SegformerConfig"),wQr.forEach(t),PJe=r(pwe," (SegFormer model)"),pwe.forEach(t),BJe=i(y),Qm=n(y,"LI",{});var _we=s(Qm);dte=n(_we,"STRONG",{});var AQr=s(dte);IJe=r(AQr,"sew"),AQr.forEach(t),NJe=r(_we," \u2014 "),RS=n(_we,"A",{href:!0});var yQr=s(RS);qJe=r(yQr,"SEWConfig"),yQr.forEach(t),jJe=r(_we," (SEW model)"),_we.forEach(t),DJe=i(y),Hm=n(y,"LI",{});var uwe=s(Hm);cte=n(uwe,"STRONG",{});var LQr=s(cte);GJe=r(LQr,"sew-d"),LQr.forEach(t),OJe=r(uwe," \u2014 "),PS=n(uwe,"A",{href:!0});var xQr=s(PS);VJe=r(xQr,"SEWDConfig"),xQr.forEach(t),XJe=r(uwe," (SEW-D model)"),uwe.forEach(t),zJe=i(y),Um=n(y,"LI",{});var bwe=s(Um);fte=n(bwe,"STRONG",{});var $Qr=s(fte);WJe=r($Qr,"speech-encoder-decoder"),$Qr.forEach(t),QJe=r(bwe," \u2014 "),BS=n(bwe,"A",{href:!0});var kQr=s(BS);HJe=r(kQr,"SpeechEncoderDecoderConfig"),kQr.forEach(t),UJe=r(bwe," (Speech Encoder decoder model)"),bwe.forEach(t),JJe=i(y),Jm=n(y,"LI",{});var vwe=s(Jm);mte=n(vwe,"STRONG",{});var SQr=s(mte);YJe=r(SQr,"speech_to_text"),SQr.forEach(t),KJe=r(vwe," \u2014 "),IS=n(vwe,"A",{href:!0});var RQr=s(IS);ZJe=r(RQr,"Speech2TextConfig"),RQr.forEach(t),eYe=r(vwe," (Speech2Text model)"),vwe.forEach(t),oYe=i(y),Ym=n(y,"LI",{});var Fwe=s(Ym);gte=n(Fwe,"STRONG",{});var PQr=s(gte);rYe=r(PQr,"speech_to_text_2"),PQr.forEach(t),tYe=r(Fwe," \u2014 "),NS=n(Fwe,"A",{href:!0});var BQr=s(NS);aYe=r(BQr,"Speech2Text2Config"),BQr.forEach(t),nYe=r(Fwe," (Speech2Text2 model)"),Fwe.forEach(t),sYe=i(y),Km=n(y,"LI",{});var Twe=s(Km);hte=n(Twe,"STRONG",{});var IQr=s(hte);lYe=r(IQr,"splinter"),IQr.forEach(t),iYe=r(Twe," \u2014 "),qS=n(Twe,"A",{href:!0});var NQr=s(qS);dYe=r(NQr,"SplinterConfig"),NQr.forEach(t),cYe=r(Twe," (Splinter model)"),Twe.forEach(t),fYe=i(y),Zm=n(y,"LI",{});var Mwe=s(Zm);pte=n(Mwe,"STRONG",{});var qQr=s(pte);mYe=r(qQr,"squeezebert"),qQr.forEach(t),gYe=r(Mwe," \u2014 "),jS=n(Mwe,"A",{href:!0});var jQr=s(jS);hYe=r(jQr,"SqueezeBertConfig"),jQr.forEach(t),pYe=r(Mwe," (SqueezeBERT model)"),Mwe.forEach(t),_Ye=i(y),eg=n(y,"LI",{});var Ewe=s(eg);_te=n(Ewe,"STRONG",{});var DQr=s(_te);uYe=r(DQr,"swin"),DQr.forEach(t),bYe=r(Ewe," \u2014 "),DS=n(Ewe,"A",{href:!0});var GQr=s(DS);vYe=r(GQr,"SwinConfig"),GQr.forEach(t),FYe=r(Ewe," (Swin Transformer model)"),Ewe.forEach(t),TYe=i(y),og=n(y,"LI",{});var Cwe=s(og);ute=n(Cwe,"STRONG",{});var OQr=s(ute);MYe=r(OQr,"t5"),OQr.forEach(t),EYe=r(Cwe," \u2014 "),GS=n(Cwe,"A",{href:!0});var VQr=s(GS);CYe=r(VQr,"T5Config"),VQr.forEach(t),wYe=r(Cwe," (T5 model)"),Cwe.forEach(t),AYe=i(y),rg=n(y,"LI",{});var wwe=s(rg);bte=n(wwe,"STRONG",{});var XQr=s(bte);yYe=r(XQr,"tapas"),XQr.forEach(t),LYe=r(wwe," \u2014 "),OS=n(wwe,"A",{href:!0});var zQr=s(OS);xYe=r(zQr,"TapasConfig"),zQr.forEach(t),$Ye=r(wwe," (TAPAS model)"),wwe.forEach(t),kYe=i(y),tg=n(y,"LI",{});var Awe=s(tg);vte=n(Awe,"STRONG",{});var WQr=s(vte);SYe=r(WQr,"trajectory_transformer"),WQr.forEach(t),RYe=r(Awe," \u2014 "),VS=n(Awe,"A",{href:!0});var QQr=s(VS);PYe=r(QQr,"TrajectoryTransformerConfig"),QQr.forEach(t),BYe=r(Awe," (Trajectory Transformer model)"),Awe.forEach(t),IYe=i(y),ag=n(y,"LI",{});var ywe=s(ag);Fte=n(ywe,"STRONG",{});var HQr=s(Fte);NYe=r(HQr,"transfo-xl"),HQr.forEach(t),qYe=r(ywe," \u2014 "),XS=n(ywe,"A",{href:!0});var UQr=s(XS);jYe=r(UQr,"TransfoXLConfig"),UQr.forEach(t),DYe=r(ywe," (Transformer-XL model)"),ywe.forEach(t),GYe=i(y),ng=n(y,"LI",{});var Lwe=s(ng);Tte=n(Lwe,"STRONG",{});var JQr=s(Tte);OYe=r(JQr,"trocr"),JQr.forEach(t),VYe=r(Lwe," \u2014 "),zS=n(Lwe,"A",{href:!0});var YQr=s(zS);XYe=r(YQr,"TrOCRConfig"),YQr.forEach(t),zYe=r(Lwe," (TrOCR model)"),Lwe.forEach(t),WYe=i(y),sg=n(y,"LI",{});var xwe=s(sg);Mte=n(xwe,"STRONG",{});var KQr=s(Mte);QYe=r(KQr,"unispeech"),KQr.forEach(t),HYe=r(xwe," \u2014 "),WS=n(xwe,"A",{href:!0});var ZQr=s(WS);UYe=r(ZQr,"UniSpeechConfig"),ZQr.forEach(t),JYe=r(xwe," (UniSpeech model)"),xwe.forEach(t),YYe=i(y),lg=n(y,"LI",{});var $we=s(lg);Ete=n($we,"STRONG",{});var eHr=s(Ete);KYe=r(eHr,"unispeech-sat"),eHr.forEach(t),ZYe=r($we," \u2014 "),QS=n($we,"A",{href:!0});var oHr=s(QS);eKe=r(oHr,"UniSpeechSatConfig"),oHr.forEach(t),oKe=r($we," (UniSpeechSat model)"),$we.forEach(t),rKe=i(y),ig=n(y,"LI",{});var kwe=s(ig);Cte=n(kwe,"STRONG",{});var rHr=s(Cte);tKe=r(rHr,"van"),rHr.forEach(t),aKe=r(kwe," \u2014 "),HS=n(kwe,"A",{href:!0});var tHr=s(HS);nKe=r(tHr,"VanConfig"),tHr.forEach(t),sKe=r(kwe," (VAN model)"),kwe.forEach(t),lKe=i(y),dg=n(y,"LI",{});var Swe=s(dg);wte=n(Swe,"STRONG",{});var aHr=s(wte);iKe=r(aHr,"vilt"),aHr.forEach(t),dKe=r(Swe," \u2014 "),US=n(Swe,"A",{href:!0});var nHr=s(US);cKe=r(nHr,"ViltConfig"),nHr.forEach(t),fKe=r(Swe," (ViLT model)"),Swe.forEach(t),mKe=i(y),cg=n(y,"LI",{});var Rwe=s(cg);Ate=n(Rwe,"STRONG",{});var sHr=s(Ate);gKe=r(sHr,"vision-encoder-decoder"),sHr.forEach(t),hKe=r(Rwe," \u2014 "),JS=n(Rwe,"A",{href:!0});var lHr=s(JS);pKe=r(lHr,"VisionEncoderDecoderConfig"),lHr.forEach(t),_Ke=r(Rwe," (Vision Encoder decoder model)"),Rwe.forEach(t),uKe=i(y),fg=n(y,"LI",{});var Pwe=s(fg);yte=n(Pwe,"STRONG",{});var iHr=s(yte);bKe=r(iHr,"vision-text-dual-encoder"),iHr.forEach(t),vKe=r(Pwe," \u2014 "),YS=n(Pwe,"A",{href:!0});var dHr=s(YS);FKe=r(dHr,"VisionTextDualEncoderConfig"),dHr.forEach(t),TKe=r(Pwe," (VisionTextDualEncoder model)"),Pwe.forEach(t),MKe=i(y),mg=n(y,"LI",{});var Bwe=s(mg);Lte=n(Bwe,"STRONG",{});var cHr=s(Lte);EKe=r(cHr,"visual_bert"),cHr.forEach(t),CKe=r(Bwe," \u2014 "),KS=n(Bwe,"A",{href:!0});var fHr=s(KS);wKe=r(fHr,"VisualBertConfig"),fHr.forEach(t),AKe=r(Bwe," (VisualBERT model)"),Bwe.forEach(t),yKe=i(y),gg=n(y,"LI",{});var Iwe=s(gg);xte=n(Iwe,"STRONG",{});var mHr=s(xte);LKe=r(mHr,"vit"),mHr.forEach(t),xKe=r(Iwe," \u2014 "),ZS=n(Iwe,"A",{href:!0});var gHr=s(ZS);$Ke=r(gHr,"ViTConfig"),gHr.forEach(t),kKe=r(Iwe," (ViT model)"),Iwe.forEach(t),SKe=i(y),hg=n(y,"LI",{});var Nwe=s(hg);$te=n(Nwe,"STRONG",{});var hHr=s($te);RKe=r(hHr,"vit_mae"),hHr.forEach(t),PKe=r(Nwe," \u2014 "),eR=n(Nwe,"A",{href:!0});var pHr=s(eR);BKe=r(pHr,"ViTMAEConfig"),pHr.forEach(t),IKe=r(Nwe," (ViTMAE model)"),Nwe.forEach(t),NKe=i(y),pg=n(y,"LI",{});var qwe=s(pg);kte=n(qwe,"STRONG",{});var _Hr=s(kte);qKe=r(_Hr,"wav2vec2"),_Hr.forEach(t),jKe=r(qwe," \u2014 "),oR=n(qwe,"A",{href:!0});var uHr=s(oR);DKe=r(uHr,"Wav2Vec2Config"),uHr.forEach(t),GKe=r(qwe," (Wav2Vec2 model)"),qwe.forEach(t),OKe=i(y),_g=n(y,"LI",{});var jwe=s(_g);Ste=n(jwe,"STRONG",{});var bHr=s(Ste);VKe=r(bHr,"wav2vec2-conformer"),bHr.forEach(t),XKe=r(jwe," \u2014 "),rR=n(jwe,"A",{href:!0});var vHr=s(rR);zKe=r(vHr,"Wav2Vec2ConformerConfig"),vHr.forEach(t),WKe=r(jwe," (Wav2Vec2-Conformer model)"),jwe.forEach(t),QKe=i(y),ug=n(y,"LI",{});var Dwe=s(ug);Rte=n(Dwe,"STRONG",{});var FHr=s(Rte);HKe=r(FHr,"wavlm"),FHr.forEach(t),UKe=r(Dwe," \u2014 "),tR=n(Dwe,"A",{href:!0});var THr=s(tR);JKe=r(THr,"WavLMConfig"),THr.forEach(t),YKe=r(Dwe," (WavLM model)"),Dwe.forEach(t),KKe=i(y),bg=n(y,"LI",{});var Gwe=s(bg);Pte=n(Gwe,"STRONG",{});var MHr=s(Pte);ZKe=r(MHr,"xglm"),MHr.forEach(t),eZe=r(Gwe," \u2014 "),aR=n(Gwe,"A",{href:!0});var EHr=s(aR);oZe=r(EHr,"XGLMConfig"),EHr.forEach(t),rZe=r(Gwe," (XGLM model)"),Gwe.forEach(t),tZe=i(y),vg=n(y,"LI",{});var Owe=s(vg);Bte=n(Owe,"STRONG",{});var CHr=s(Bte);aZe=r(CHr,"xlm"),CHr.forEach(t),nZe=r(Owe," \u2014 "),nR=n(Owe,"A",{href:!0});var wHr=s(nR);sZe=r(wHr,"XLMConfig"),wHr.forEach(t),lZe=r(Owe," (XLM model)"),Owe.forEach(t),iZe=i(y),Fg=n(y,"LI",{});var Vwe=s(Fg);Ite=n(Vwe,"STRONG",{});var AHr=s(Ite);dZe=r(AHr,"xlm-prophetnet"),AHr.forEach(t),cZe=r(Vwe," \u2014 "),sR=n(Vwe,"A",{href:!0});var yHr=s(sR);fZe=r(yHr,"XLMProphetNetConfig"),yHr.forEach(t),mZe=r(Vwe," (XLM-ProphetNet model)"),Vwe.forEach(t),gZe=i(y),Tg=n(y,"LI",{});var Xwe=s(Tg);Nte=n(Xwe,"STRONG",{});var LHr=s(Nte);hZe=r(LHr,"xlm-roberta"),LHr.forEach(t),pZe=r(Xwe," \u2014 "),lR=n(Xwe,"A",{href:!0});var xHr=s(lR);_Ze=r(xHr,"XLMRobertaConfig"),xHr.forEach(t),uZe=r(Xwe," (XLM-RoBERTa model)"),Xwe.forEach(t),bZe=i(y),Mg=n(y,"LI",{});var zwe=s(Mg);qte=n(zwe,"STRONG",{});var $Hr=s(qte);vZe=r($Hr,"xlm-roberta-xl"),$Hr.forEach(t),FZe=r(zwe," \u2014 "),iR=n(zwe,"A",{href:!0});var kHr=s(iR);TZe=r(kHr,"XLMRobertaXLConfig"),kHr.forEach(t),MZe=r(zwe," (XLM-RoBERTa-XL model)"),zwe.forEach(t),EZe=i(y),Eg=n(y,"LI",{});var Wwe=s(Eg);jte=n(Wwe,"STRONG",{});var SHr=s(jte);CZe=r(SHr,"xlnet"),SHr.forEach(t),wZe=r(Wwe," \u2014 "),dR=n(Wwe,"A",{href:!0});var RHr=s(dR);AZe=r(RHr,"XLNetConfig"),RHr.forEach(t),yZe=r(Wwe," (XLNet model)"),Wwe.forEach(t),LZe=i(y),Cg=n(y,"LI",{});var Qwe=s(Cg);Dte=n(Qwe,"STRONG",{});var PHr=s(Dte);xZe=r(PHr,"yolos"),PHr.forEach(t),$Ze=r(Qwe," \u2014 "),cR=n(Qwe,"A",{href:!0});var BHr=s(cR);kZe=r(BHr,"YolosConfig"),BHr.forEach(t),SZe=r(Qwe," (YOLOS model)"),Qwe.forEach(t),RZe=i(y),wg=n(y,"LI",{});var Hwe=s(wg);Gte=n(Hwe,"STRONG",{});var IHr=s(Gte);PZe=r(IHr,"yoso"),IHr.forEach(t),BZe=r(Hwe," \u2014 "),fR=n(Hwe,"A",{href:!0});var NHr=s(fR);IZe=r(NHr,"YosoConfig"),NHr.forEach(t),NZe=r(Hwe," (YOSO model)"),Hwe.forEach(t),y.forEach(t),qZe=i(rt),T(Ag.$$.fragment,rt),rt.forEach(t),jZe=i(ot),yg=n(ot,"DIV",{class:!0});var QDe=s(yg);T(z6.$$.fragment,QDe),DZe=i(QDe),Ote=n(QDe,"P",{});var qHr=s(Ote);GZe=r(qHr,"Register a new configuration for this class."),qHr.forEach(t),QDe.forEach(t),ot.forEach(t),Jqe=i(f),Ei=n(f,"H2",{class:!0});var HDe=s(Ei);Lg=n(HDe,"A",{id:!0,class:!0,href:!0});var jHr=s(Lg);Vte=n(jHr,"SPAN",{});var DHr=s(Vte);T(W6.$$.fragment,DHr),DHr.forEach(t),jHr.forEach(t),OZe=i(HDe),Xte=n(HDe,"SPAN",{});var GHr=s(Xte);VZe=r(GHr,"AutoTokenizer"),GHr.forEach(t),HDe.forEach(t),Yqe=i(f),wo=n(f,"DIV",{class:!0});var qs=s(wo);T(Q6.$$.fragment,qs),XZe=i(qs),H6=n(qs,"P",{});var UDe=s(H6);zZe=r(UDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),mR=n(UDe,"A",{href:!0});var OHr=s(mR);WZe=r(OHr,"AutoTokenizer.from_pretrained()"),OHr.forEach(t),QZe=r(UDe," class method."),UDe.forEach(t),HZe=i(qs),U6=n(qs,"P",{});var JDe=s(U6);UZe=r(JDe,"This class cannot be instantiated directly using "),zte=n(JDe,"CODE",{});var VHr=s(zte);JZe=r(VHr,"__init__()"),VHr.forEach(t),YZe=r(JDe," (throws an error)."),JDe.forEach(t),KZe=i(qs),Cr=n(qs,"DIV",{class:!0});var js=s(Cr);T(J6.$$.fragment,js),ZZe=i(js),Wte=n(js,"P",{});var XHr=s(Wte);eeo=r(XHr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),XHr.forEach(t),oeo=i(js),ya=n(js,"P",{});var Gw=s(ya);reo=r(Gw,"The tokenizer class to instantiate is selected based on the "),Qte=n(Gw,"CODE",{});var zHr=s(Qte);teo=r(zHr,"model_type"),zHr.forEach(t),aeo=r(Gw,` property of the config object (either
passed as an argument or loaded from `),Hte=n(Gw,"CODE",{});var WHr=s(Hte);neo=r(WHr,"pretrained_model_name_or_path"),WHr.forEach(t),seo=r(Gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ute=n(Gw,"CODE",{});var QHr=s(Ute);leo=r(QHr,"pretrained_model_name_or_path"),QHr.forEach(t),ieo=r(Gw,":"),Gw.forEach(t),deo=i(js),k=n(js,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Yx=s(Sn);Jte=n(Yx,"STRONG",{});var HHr=s(Jte);ceo=r(HHr,"albert"),HHr.forEach(t),feo=r(Yx," \u2014 "),gR=n(Yx,"A",{href:!0});var UHr=s(gR);meo=r(UHr,"AlbertTokenizer"),UHr.forEach(t),geo=r(Yx," or "),hR=n(Yx,"A",{href:!0});var JHr=s(hR);heo=r(JHr,"AlbertTokenizerFast"),JHr.forEach(t),peo=r(Yx," (ALBERT model)"),Yx.forEach(t),_eo=i(S),Rn=n(S,"LI",{});var Kx=s(Rn);Yte=n(Kx,"STRONG",{});var YHr=s(Yte);ueo=r(YHr,"bart"),YHr.forEach(t),beo=r(Kx," \u2014 "),pR=n(Kx,"A",{href:!0});var KHr=s(pR);veo=r(KHr,"BartTokenizer"),KHr.forEach(t),Feo=r(Kx," or "),_R=n(Kx,"A",{href:!0});var ZHr=s(_R);Teo=r(ZHr,"BartTokenizerFast"),ZHr.forEach(t),Meo=r(Kx," (BART model)"),Kx.forEach(t),Eeo=i(S),Pn=n(S,"LI",{});var Zx=s(Pn);Kte=n(Zx,"STRONG",{});var eUr=s(Kte);Ceo=r(eUr,"barthez"),eUr.forEach(t),weo=r(Zx," \u2014 "),uR=n(Zx,"A",{href:!0});var oUr=s(uR);Aeo=r(oUr,"BarthezTokenizer"),oUr.forEach(t),yeo=r(Zx," or "),bR=n(Zx,"A",{href:!0});var rUr=s(bR);Leo=r(rUr,"BarthezTokenizerFast"),rUr.forEach(t),xeo=r(Zx," (BARThez model)"),Zx.forEach(t),$eo=i(S),xg=n(S,"LI",{});var Uwe=s(xg);Zte=n(Uwe,"STRONG",{});var tUr=s(Zte);keo=r(tUr,"bartpho"),tUr.forEach(t),Seo=r(Uwe," \u2014 "),vR=n(Uwe,"A",{href:!0});var aUr=s(vR);Reo=r(aUr,"BartphoTokenizer"),aUr.forEach(t),Peo=r(Uwe," (BARTpho model)"),Uwe.forEach(t),Beo=i(S),Bn=n(S,"LI",{});var e$=s(Bn);eae=n(e$,"STRONG",{});var nUr=s(eae);Ieo=r(nUr,"bert"),nUr.forEach(t),Neo=r(e$," \u2014 "),FR=n(e$,"A",{href:!0});var sUr=s(FR);qeo=r(sUr,"BertTokenizer"),sUr.forEach(t),jeo=r(e$," or "),TR=n(e$,"A",{href:!0});var lUr=s(TR);Deo=r(lUr,"BertTokenizerFast"),lUr.forEach(t),Geo=r(e$," (BERT model)"),e$.forEach(t),Oeo=i(S),$g=n(S,"LI",{});var Jwe=s($g);oae=n(Jwe,"STRONG",{});var iUr=s(oae);Veo=r(iUr,"bert-generation"),iUr.forEach(t),Xeo=r(Jwe," \u2014 "),MR=n(Jwe,"A",{href:!0});var dUr=s(MR);zeo=r(dUr,"BertGenerationTokenizer"),dUr.forEach(t),Weo=r(Jwe," (Bert Generation model)"),Jwe.forEach(t),Qeo=i(S),kg=n(S,"LI",{});var Ywe=s(kg);rae=n(Ywe,"STRONG",{});var cUr=s(rae);Heo=r(cUr,"bert-japanese"),cUr.forEach(t),Ueo=r(Ywe," \u2014 "),ER=n(Ywe,"A",{href:!0});var fUr=s(ER);Jeo=r(fUr,"BertJapaneseTokenizer"),fUr.forEach(t),Yeo=r(Ywe," (BertJapanese model)"),Ywe.forEach(t),Keo=i(S),Sg=n(S,"LI",{});var Kwe=s(Sg);tae=n(Kwe,"STRONG",{});var mUr=s(tae);Zeo=r(mUr,"bertweet"),mUr.forEach(t),eoo=r(Kwe," \u2014 "),CR=n(Kwe,"A",{href:!0});var gUr=s(CR);ooo=r(gUr,"BertweetTokenizer"),gUr.forEach(t),roo=r(Kwe," (BERTweet model)"),Kwe.forEach(t),too=i(S),In=n(S,"LI",{});var o$=s(In);aae=n(o$,"STRONG",{});var hUr=s(aae);aoo=r(hUr,"big_bird"),hUr.forEach(t),noo=r(o$," \u2014 "),wR=n(o$,"A",{href:!0});var pUr=s(wR);soo=r(pUr,"BigBirdTokenizer"),pUr.forEach(t),loo=r(o$," or "),AR=n(o$,"A",{href:!0});var _Ur=s(AR);ioo=r(_Ur,"BigBirdTokenizerFast"),_Ur.forEach(t),doo=r(o$," (BigBird model)"),o$.forEach(t),coo=i(S),Nn=n(S,"LI",{});var r$=s(Nn);nae=n(r$,"STRONG",{});var uUr=s(nae);foo=r(uUr,"bigbird_pegasus"),uUr.forEach(t),moo=r(r$," \u2014 "),yR=n(r$,"A",{href:!0});var bUr=s(yR);goo=r(bUr,"PegasusTokenizer"),bUr.forEach(t),hoo=r(r$," or "),LR=n(r$,"A",{href:!0});var vUr=s(LR);poo=r(vUr,"PegasusTokenizerFast"),vUr.forEach(t),_oo=r(r$," (BigBird-Pegasus model)"),r$.forEach(t),uoo=i(S),qn=n(S,"LI",{});var t$=s(qn);sae=n(t$,"STRONG",{});var FUr=s(sae);boo=r(FUr,"blenderbot"),FUr.forEach(t),voo=r(t$," \u2014 "),xR=n(t$,"A",{href:!0});var TUr=s(xR);Foo=r(TUr,"BlenderbotTokenizer"),TUr.forEach(t),Too=r(t$," or "),$R=n(t$,"A",{href:!0});var MUr=s($R);Moo=r(MUr,"BlenderbotTokenizerFast"),MUr.forEach(t),Eoo=r(t$," (Blenderbot model)"),t$.forEach(t),Coo=i(S),Rg=n(S,"LI",{});var Zwe=s(Rg);lae=n(Zwe,"STRONG",{});var EUr=s(lae);woo=r(EUr,"blenderbot-small"),EUr.forEach(t),Aoo=r(Zwe," \u2014 "),kR=n(Zwe,"A",{href:!0});var CUr=s(kR);yoo=r(CUr,"BlenderbotSmallTokenizer"),CUr.forEach(t),Loo=r(Zwe," (BlenderbotSmall model)"),Zwe.forEach(t),xoo=i(S),Pg=n(S,"LI",{});var eAe=s(Pg);iae=n(eAe,"STRONG",{});var wUr=s(iae);$oo=r(wUr,"byt5"),wUr.forEach(t),koo=r(eAe," \u2014 "),SR=n(eAe,"A",{href:!0});var AUr=s(SR);Soo=r(AUr,"ByT5Tokenizer"),AUr.forEach(t),Roo=r(eAe," (ByT5 model)"),eAe.forEach(t),Poo=i(S),jn=n(S,"LI",{});var a$=s(jn);dae=n(a$,"STRONG",{});var yUr=s(dae);Boo=r(yUr,"camembert"),yUr.forEach(t),Ioo=r(a$," \u2014 "),RR=n(a$,"A",{href:!0});var LUr=s(RR);Noo=r(LUr,"CamembertTokenizer"),LUr.forEach(t),qoo=r(a$," or "),PR=n(a$,"A",{href:!0});var xUr=s(PR);joo=r(xUr,"CamembertTokenizerFast"),xUr.forEach(t),Doo=r(a$," (CamemBERT model)"),a$.forEach(t),Goo=i(S),Bg=n(S,"LI",{});var oAe=s(Bg);cae=n(oAe,"STRONG",{});var $Ur=s(cae);Ooo=r($Ur,"canine"),$Ur.forEach(t),Voo=r(oAe," \u2014 "),BR=n(oAe,"A",{href:!0});var kUr=s(BR);Xoo=r(kUr,"CanineTokenizer"),kUr.forEach(t),zoo=r(oAe," (CANINE model)"),oAe.forEach(t),Woo=i(S),Dn=n(S,"LI",{});var n$=s(Dn);fae=n(n$,"STRONG",{});var SUr=s(fae);Qoo=r(SUr,"clip"),SUr.forEach(t),Hoo=r(n$," \u2014 "),IR=n(n$,"A",{href:!0});var RUr=s(IR);Uoo=r(RUr,"CLIPTokenizer"),RUr.forEach(t),Joo=r(n$," or "),NR=n(n$,"A",{href:!0});var PUr=s(NR);Yoo=r(PUr,"CLIPTokenizerFast"),PUr.forEach(t),Koo=r(n$," (CLIP model)"),n$.forEach(t),Zoo=i(S),Gn=n(S,"LI",{});var s$=s(Gn);mae=n(s$,"STRONG",{});var BUr=s(mae);ero=r(BUr,"convbert"),BUr.forEach(t),oro=r(s$," \u2014 "),qR=n(s$,"A",{href:!0});var IUr=s(qR);rro=r(IUr,"ConvBertTokenizer"),IUr.forEach(t),tro=r(s$," or "),jR=n(s$,"A",{href:!0});var NUr=s(jR);aro=r(NUr,"ConvBertTokenizerFast"),NUr.forEach(t),nro=r(s$," (ConvBERT model)"),s$.forEach(t),sro=i(S),On=n(S,"LI",{});var l$=s(On);gae=n(l$,"STRONG",{});var qUr=s(gae);lro=r(qUr,"cpm"),qUr.forEach(t),iro=r(l$," \u2014 "),DR=n(l$,"A",{href:!0});var jUr=s(DR);dro=r(jUr,"CpmTokenizer"),jUr.forEach(t),cro=r(l$," or "),GR=n(l$,"A",{href:!0});var DUr=s(GR);fro=r(DUr,"CpmTokenizerFast"),DUr.forEach(t),mro=r(l$," (CPM model)"),l$.forEach(t),gro=i(S),Ig=n(S,"LI",{});var rAe=s(Ig);hae=n(rAe,"STRONG",{});var GUr=s(hae);hro=r(GUr,"ctrl"),GUr.forEach(t),pro=r(rAe," \u2014 "),OR=n(rAe,"A",{href:!0});var OUr=s(OR);_ro=r(OUr,"CTRLTokenizer"),OUr.forEach(t),uro=r(rAe," (CTRL model)"),rAe.forEach(t),bro=i(S),Vn=n(S,"LI",{});var i$=s(Vn);pae=n(i$,"STRONG",{});var VUr=s(pae);vro=r(VUr,"data2vec-text"),VUr.forEach(t),Fro=r(i$," \u2014 "),VR=n(i$,"A",{href:!0});var XUr=s(VR);Tro=r(XUr,"RobertaTokenizer"),XUr.forEach(t),Mro=r(i$," or "),XR=n(i$,"A",{href:!0});var zUr=s(XR);Ero=r(zUr,"RobertaTokenizerFast"),zUr.forEach(t),Cro=r(i$," (Data2VecText model)"),i$.forEach(t),wro=i(S),Xn=n(S,"LI",{});var d$=s(Xn);_ae=n(d$,"STRONG",{});var WUr=s(_ae);Aro=r(WUr,"deberta"),WUr.forEach(t),yro=r(d$," \u2014 "),zR=n(d$,"A",{href:!0});var QUr=s(zR);Lro=r(QUr,"DebertaTokenizer"),QUr.forEach(t),xro=r(d$," or "),WR=n(d$,"A",{href:!0});var HUr=s(WR);$ro=r(HUr,"DebertaTokenizerFast"),HUr.forEach(t),kro=r(d$," (DeBERTa model)"),d$.forEach(t),Sro=i(S),zn=n(S,"LI",{});var c$=s(zn);uae=n(c$,"STRONG",{});var UUr=s(uae);Rro=r(UUr,"deberta-v2"),UUr.forEach(t),Pro=r(c$," \u2014 "),QR=n(c$,"A",{href:!0});var JUr=s(QR);Bro=r(JUr,"DebertaV2Tokenizer"),JUr.forEach(t),Iro=r(c$," or "),HR=n(c$,"A",{href:!0});var YUr=s(HR);Nro=r(YUr,"DebertaV2TokenizerFast"),YUr.forEach(t),qro=r(c$," (DeBERTa-v2 model)"),c$.forEach(t),jro=i(S),Wn=n(S,"LI",{});var f$=s(Wn);bae=n(f$,"STRONG",{});var KUr=s(bae);Dro=r(KUr,"distilbert"),KUr.forEach(t),Gro=r(f$," \u2014 "),UR=n(f$,"A",{href:!0});var ZUr=s(UR);Oro=r(ZUr,"DistilBertTokenizer"),ZUr.forEach(t),Vro=r(f$," or "),JR=n(f$,"A",{href:!0});var eJr=s(JR);Xro=r(eJr,"DistilBertTokenizerFast"),eJr.forEach(t),zro=r(f$," (DistilBERT model)"),f$.forEach(t),Wro=i(S),Qn=n(S,"LI",{});var m$=s(Qn);vae=n(m$,"STRONG",{});var oJr=s(vae);Qro=r(oJr,"dpr"),oJr.forEach(t),Hro=r(m$," \u2014 "),YR=n(m$,"A",{href:!0});var rJr=s(YR);Uro=r(rJr,"DPRQuestionEncoderTokenizer"),rJr.forEach(t),Jro=r(m$," or "),KR=n(m$,"A",{href:!0});var tJr=s(KR);Yro=r(tJr,"DPRQuestionEncoderTokenizerFast"),tJr.forEach(t),Kro=r(m$," (DPR model)"),m$.forEach(t),Zro=i(S),Hn=n(S,"LI",{});var g$=s(Hn);Fae=n(g$,"STRONG",{});var aJr=s(Fae);eto=r(aJr,"electra"),aJr.forEach(t),oto=r(g$," \u2014 "),ZR=n(g$,"A",{href:!0});var nJr=s(ZR);rto=r(nJr,"ElectraTokenizer"),nJr.forEach(t),tto=r(g$," or "),eP=n(g$,"A",{href:!0});var sJr=s(eP);ato=r(sJr,"ElectraTokenizerFast"),sJr.forEach(t),nto=r(g$," (ELECTRA model)"),g$.forEach(t),sto=i(S),Ng=n(S,"LI",{});var tAe=s(Ng);Tae=n(tAe,"STRONG",{});var lJr=s(Tae);lto=r(lJr,"flaubert"),lJr.forEach(t),ito=r(tAe," \u2014 "),oP=n(tAe,"A",{href:!0});var iJr=s(oP);dto=r(iJr,"FlaubertTokenizer"),iJr.forEach(t),cto=r(tAe," (FlauBERT model)"),tAe.forEach(t),fto=i(S),Un=n(S,"LI",{});var h$=s(Un);Mae=n(h$,"STRONG",{});var dJr=s(Mae);mto=r(dJr,"fnet"),dJr.forEach(t),gto=r(h$," \u2014 "),rP=n(h$,"A",{href:!0});var cJr=s(rP);hto=r(cJr,"FNetTokenizer"),cJr.forEach(t),pto=r(h$," or "),tP=n(h$,"A",{href:!0});var fJr=s(tP);_to=r(fJr,"FNetTokenizerFast"),fJr.forEach(t),uto=r(h$," (FNet model)"),h$.forEach(t),bto=i(S),qg=n(S,"LI",{});var aAe=s(qg);Eae=n(aAe,"STRONG",{});var mJr=s(Eae);vto=r(mJr,"fsmt"),mJr.forEach(t),Fto=r(aAe," \u2014 "),aP=n(aAe,"A",{href:!0});var gJr=s(aP);Tto=r(gJr,"FSMTTokenizer"),gJr.forEach(t),Mto=r(aAe," (FairSeq Machine-Translation model)"),aAe.forEach(t),Eto=i(S),Jn=n(S,"LI",{});var p$=s(Jn);Cae=n(p$,"STRONG",{});var hJr=s(Cae);Cto=r(hJr,"funnel"),hJr.forEach(t),wto=r(p$," \u2014 "),nP=n(p$,"A",{href:!0});var pJr=s(nP);Ato=r(pJr,"FunnelTokenizer"),pJr.forEach(t),yto=r(p$," or "),sP=n(p$,"A",{href:!0});var _Jr=s(sP);Lto=r(_Jr,"FunnelTokenizerFast"),_Jr.forEach(t),xto=r(p$," (Funnel Transformer model)"),p$.forEach(t),$to=i(S),Yn=n(S,"LI",{});var _$=s(Yn);wae=n(_$,"STRONG",{});var uJr=s(wae);kto=r(uJr,"gpt2"),uJr.forEach(t),Sto=r(_$," \u2014 "),lP=n(_$,"A",{href:!0});var bJr=s(lP);Rto=r(bJr,"GPT2Tokenizer"),bJr.forEach(t),Pto=r(_$," or "),iP=n(_$,"A",{href:!0});var vJr=s(iP);Bto=r(vJr,"GPT2TokenizerFast"),vJr.forEach(t),Ito=r(_$," (OpenAI GPT-2 model)"),_$.forEach(t),Nto=i(S),Kn=n(S,"LI",{});var u$=s(Kn);Aae=n(u$,"STRONG",{});var FJr=s(Aae);qto=r(FJr,"gpt_neo"),FJr.forEach(t),jto=r(u$," \u2014 "),dP=n(u$,"A",{href:!0});var TJr=s(dP);Dto=r(TJr,"GPT2Tokenizer"),TJr.forEach(t),Gto=r(u$," or "),cP=n(u$,"A",{href:!0});var MJr=s(cP);Oto=r(MJr,"GPT2TokenizerFast"),MJr.forEach(t),Vto=r(u$," (GPT Neo model)"),u$.forEach(t),Xto=i(S),jg=n(S,"LI",{});var nAe=s(jg);yae=n(nAe,"STRONG",{});var EJr=s(yae);zto=r(EJr,"gpt_neox"),EJr.forEach(t),Wto=r(nAe," \u2014 "),fP=n(nAe,"A",{href:!0});var CJr=s(fP);Qto=r(CJr,"GPTNeoXTokenizerFast"),CJr.forEach(t),Hto=r(nAe," (GPT NeoX model)"),nAe.forEach(t),Uto=i(S),Zn=n(S,"LI",{});var b$=s(Zn);Lae=n(b$,"STRONG",{});var wJr=s(Lae);Jto=r(wJr,"gptj"),wJr.forEach(t),Yto=r(b$," \u2014 "),mP=n(b$,"A",{href:!0});var AJr=s(mP);Kto=r(AJr,"GPT2Tokenizer"),AJr.forEach(t),Zto=r(b$," or "),gP=n(b$,"A",{href:!0});var yJr=s(gP);eao=r(yJr,"GPT2TokenizerFast"),yJr.forEach(t),oao=r(b$," (GPT-J model)"),b$.forEach(t),rao=i(S),es=n(S,"LI",{});var v$=s(es);xae=n(v$,"STRONG",{});var LJr=s(xae);tao=r(LJr,"herbert"),LJr.forEach(t),aao=r(v$," \u2014 "),hP=n(v$,"A",{href:!0});var xJr=s(hP);nao=r(xJr,"HerbertTokenizer"),xJr.forEach(t),sao=r(v$," or "),pP=n(v$,"A",{href:!0});var $Jr=s(pP);lao=r($Jr,"HerbertTokenizerFast"),$Jr.forEach(t),iao=r(v$," (HerBERT model)"),v$.forEach(t),dao=i(S),Dg=n(S,"LI",{});var sAe=s(Dg);$ae=n(sAe,"STRONG",{});var kJr=s($ae);cao=r(kJr,"hubert"),kJr.forEach(t),fao=r(sAe," \u2014 "),_P=n(sAe,"A",{href:!0});var SJr=s(_P);mao=r(SJr,"Wav2Vec2CTCTokenizer"),SJr.forEach(t),gao=r(sAe," (Hubert model)"),sAe.forEach(t),hao=i(S),os=n(S,"LI",{});var F$=s(os);kae=n(F$,"STRONG",{});var RJr=s(kae);pao=r(RJr,"ibert"),RJr.forEach(t),_ao=r(F$," \u2014 "),uP=n(F$,"A",{href:!0});var PJr=s(uP);uao=r(PJr,"RobertaTokenizer"),PJr.forEach(t),bao=r(F$," or "),bP=n(F$,"A",{href:!0});var BJr=s(bP);vao=r(BJr,"RobertaTokenizerFast"),BJr.forEach(t),Fao=r(F$," (I-BERT model)"),F$.forEach(t),Tao=i(S),rs=n(S,"LI",{});var T$=s(rs);Sae=n(T$,"STRONG",{});var IJr=s(Sae);Mao=r(IJr,"layoutlm"),IJr.forEach(t),Eao=r(T$," \u2014 "),vP=n(T$,"A",{href:!0});var NJr=s(vP);Cao=r(NJr,"LayoutLMTokenizer"),NJr.forEach(t),wao=r(T$," or "),FP=n(T$,"A",{href:!0});var qJr=s(FP);Aao=r(qJr,"LayoutLMTokenizerFast"),qJr.forEach(t),yao=r(T$," (LayoutLM model)"),T$.forEach(t),Lao=i(S),ts=n(S,"LI",{});var M$=s(ts);Rae=n(M$,"STRONG",{});var jJr=s(Rae);xao=r(jJr,"layoutlmv2"),jJr.forEach(t),$ao=r(M$," \u2014 "),TP=n(M$,"A",{href:!0});var DJr=s(TP);kao=r(DJr,"LayoutLMv2Tokenizer"),DJr.forEach(t),Sao=r(M$," or "),MP=n(M$,"A",{href:!0});var GJr=s(MP);Rao=r(GJr,"LayoutLMv2TokenizerFast"),GJr.forEach(t),Pao=r(M$," (LayoutLMv2 model)"),M$.forEach(t),Bao=i(S),as=n(S,"LI",{});var E$=s(as);Pae=n(E$,"STRONG",{});var OJr=s(Pae);Iao=r(OJr,"layoutlmv3"),OJr.forEach(t),Nao=r(E$," \u2014 "),EP=n(E$,"A",{href:!0});var VJr=s(EP);qao=r(VJr,"LayoutLMv3Tokenizer"),VJr.forEach(t),jao=r(E$," or "),CP=n(E$,"A",{href:!0});var XJr=s(CP);Dao=r(XJr,"LayoutLMv3TokenizerFast"),XJr.forEach(t),Gao=r(E$," (LayoutLMv3 model)"),E$.forEach(t),Oao=i(S),ns=n(S,"LI",{});var C$=s(ns);Bae=n(C$,"STRONG",{});var zJr=s(Bae);Vao=r(zJr,"layoutxlm"),zJr.forEach(t),Xao=r(C$," \u2014 "),wP=n(C$,"A",{href:!0});var WJr=s(wP);zao=r(WJr,"LayoutXLMTokenizer"),WJr.forEach(t),Wao=r(C$," or "),AP=n(C$,"A",{href:!0});var QJr=s(AP);Qao=r(QJr,"LayoutXLMTokenizerFast"),QJr.forEach(t),Hao=r(C$," (LayoutXLM model)"),C$.forEach(t),Uao=i(S),ss=n(S,"LI",{});var w$=s(ss);Iae=n(w$,"STRONG",{});var HJr=s(Iae);Jao=r(HJr,"led"),HJr.forEach(t),Yao=r(w$," \u2014 "),yP=n(w$,"A",{href:!0});var UJr=s(yP);Kao=r(UJr,"LEDTokenizer"),UJr.forEach(t),Zao=r(w$," or "),LP=n(w$,"A",{href:!0});var JJr=s(LP);eno=r(JJr,"LEDTokenizerFast"),JJr.forEach(t),ono=r(w$," (LED model)"),w$.forEach(t),rno=i(S),ls=n(S,"LI",{});var A$=s(ls);Nae=n(A$,"STRONG",{});var YJr=s(Nae);tno=r(YJr,"longformer"),YJr.forEach(t),ano=r(A$," \u2014 "),xP=n(A$,"A",{href:!0});var KJr=s(xP);nno=r(KJr,"LongformerTokenizer"),KJr.forEach(t),sno=r(A$," or "),$P=n(A$,"A",{href:!0});var ZJr=s($P);lno=r(ZJr,"LongformerTokenizerFast"),ZJr.forEach(t),ino=r(A$," (Longformer model)"),A$.forEach(t),dno=i(S),Gg=n(S,"LI",{});var lAe=s(Gg);qae=n(lAe,"STRONG",{});var eYr=s(qae);cno=r(eYr,"luke"),eYr.forEach(t),fno=r(lAe," \u2014 "),kP=n(lAe,"A",{href:!0});var oYr=s(kP);mno=r(oYr,"LukeTokenizer"),oYr.forEach(t),gno=r(lAe," (LUKE model)"),lAe.forEach(t),hno=i(S),is=n(S,"LI",{});var y$=s(is);jae=n(y$,"STRONG",{});var rYr=s(jae);pno=r(rYr,"lxmert"),rYr.forEach(t),_no=r(y$," \u2014 "),SP=n(y$,"A",{href:!0});var tYr=s(SP);uno=r(tYr,"LxmertTokenizer"),tYr.forEach(t),bno=r(y$," or "),RP=n(y$,"A",{href:!0});var aYr=s(RP);vno=r(aYr,"LxmertTokenizerFast"),aYr.forEach(t),Fno=r(y$," (LXMERT model)"),y$.forEach(t),Tno=i(S),Og=n(S,"LI",{});var iAe=s(Og);Dae=n(iAe,"STRONG",{});var nYr=s(Dae);Mno=r(nYr,"m2m_100"),nYr.forEach(t),Eno=r(iAe," \u2014 "),PP=n(iAe,"A",{href:!0});var sYr=s(PP);Cno=r(sYr,"M2M100Tokenizer"),sYr.forEach(t),wno=r(iAe," (M2M100 model)"),iAe.forEach(t),Ano=i(S),Vg=n(S,"LI",{});var dAe=s(Vg);Gae=n(dAe,"STRONG",{});var lYr=s(Gae);yno=r(lYr,"marian"),lYr.forEach(t),Lno=r(dAe," \u2014 "),BP=n(dAe,"A",{href:!0});var iYr=s(BP);xno=r(iYr,"MarianTokenizer"),iYr.forEach(t),$no=r(dAe," (Marian model)"),dAe.forEach(t),kno=i(S),ds=n(S,"LI",{});var L$=s(ds);Oae=n(L$,"STRONG",{});var dYr=s(Oae);Sno=r(dYr,"mbart"),dYr.forEach(t),Rno=r(L$," \u2014 "),IP=n(L$,"A",{href:!0});var cYr=s(IP);Pno=r(cYr,"MBartTokenizer"),cYr.forEach(t),Bno=r(L$," or "),NP=n(L$,"A",{href:!0});var fYr=s(NP);Ino=r(fYr,"MBartTokenizerFast"),fYr.forEach(t),Nno=r(L$," (mBART model)"),L$.forEach(t),qno=i(S),cs=n(S,"LI",{});var x$=s(cs);Vae=n(x$,"STRONG",{});var mYr=s(Vae);jno=r(mYr,"mbart50"),mYr.forEach(t),Dno=r(x$," \u2014 "),qP=n(x$,"A",{href:!0});var gYr=s(qP);Gno=r(gYr,"MBart50Tokenizer"),gYr.forEach(t),Ono=r(x$," or "),jP=n(x$,"A",{href:!0});var hYr=s(jP);Vno=r(hYr,"MBart50TokenizerFast"),hYr.forEach(t),Xno=r(x$," (mBART-50 model)"),x$.forEach(t),zno=i(S),fs=n(S,"LI",{});var $$=s(fs);Xae=n($$,"STRONG",{});var pYr=s(Xae);Wno=r(pYr,"megatron-bert"),pYr.forEach(t),Qno=r($$," \u2014 "),DP=n($$,"A",{href:!0});var _Yr=s(DP);Hno=r(_Yr,"BertTokenizer"),_Yr.forEach(t),Uno=r($$," or "),GP=n($$,"A",{href:!0});var uYr=s(GP);Jno=r(uYr,"BertTokenizerFast"),uYr.forEach(t),Yno=r($$," (Megatron-BERT model)"),$$.forEach(t),Kno=i(S),Xg=n(S,"LI",{});var cAe=s(Xg);zae=n(cAe,"STRONG",{});var bYr=s(zae);Zno=r(bYr,"mluke"),bYr.forEach(t),eso=r(cAe," \u2014 "),OP=n(cAe,"A",{href:!0});var vYr=s(OP);oso=r(vYr,"MLukeTokenizer"),vYr.forEach(t),rso=r(cAe," (mLUKE model)"),cAe.forEach(t),tso=i(S),ms=n(S,"LI",{});var k$=s(ms);Wae=n(k$,"STRONG",{});var FYr=s(Wae);aso=r(FYr,"mobilebert"),FYr.forEach(t),nso=r(k$," \u2014 "),VP=n(k$,"A",{href:!0});var TYr=s(VP);sso=r(TYr,"MobileBertTokenizer"),TYr.forEach(t),lso=r(k$," or "),XP=n(k$,"A",{href:!0});var MYr=s(XP);iso=r(MYr,"MobileBertTokenizerFast"),MYr.forEach(t),dso=r(k$," (MobileBERT model)"),k$.forEach(t),cso=i(S),gs=n(S,"LI",{});var S$=s(gs);Qae=n(S$,"STRONG",{});var EYr=s(Qae);fso=r(EYr,"mpnet"),EYr.forEach(t),mso=r(S$," \u2014 "),zP=n(S$,"A",{href:!0});var CYr=s(zP);gso=r(CYr,"MPNetTokenizer"),CYr.forEach(t),hso=r(S$," or "),WP=n(S$,"A",{href:!0});var wYr=s(WP);pso=r(wYr,"MPNetTokenizerFast"),wYr.forEach(t),_so=r(S$," (MPNet model)"),S$.forEach(t),uso=i(S),hs=n(S,"LI",{});var R$=s(hs);Hae=n(R$,"STRONG",{});var AYr=s(Hae);bso=r(AYr,"mt5"),AYr.forEach(t),vso=r(R$," \u2014 "),QP=n(R$,"A",{href:!0});var yYr=s(QP);Fso=r(yYr,"MT5Tokenizer"),yYr.forEach(t),Tso=r(R$," or "),HP=n(R$,"A",{href:!0});var LYr=s(HP);Mso=r(LYr,"MT5TokenizerFast"),LYr.forEach(t),Eso=r(R$," (MT5 model)"),R$.forEach(t),Cso=i(S),ps=n(S,"LI",{});var P$=s(ps);Uae=n(P$,"STRONG",{});var xYr=s(Uae);wso=r(xYr,"nystromformer"),xYr.forEach(t),Aso=r(P$," \u2014 "),UP=n(P$,"A",{href:!0});var $Yr=s(UP);yso=r($Yr,"AlbertTokenizer"),$Yr.forEach(t),Lso=r(P$," or "),JP=n(P$,"A",{href:!0});var kYr=s(JP);xso=r(kYr,"AlbertTokenizerFast"),kYr.forEach(t),$so=r(P$," (Nystr\xF6mformer model)"),P$.forEach(t),kso=i(S),_s=n(S,"LI",{});var B$=s(_s);Jae=n(B$,"STRONG",{});var SYr=s(Jae);Sso=r(SYr,"openai-gpt"),SYr.forEach(t),Rso=r(B$," \u2014 "),YP=n(B$,"A",{href:!0});var RYr=s(YP);Pso=r(RYr,"OpenAIGPTTokenizer"),RYr.forEach(t),Bso=r(B$," or "),KP=n(B$,"A",{href:!0});var PYr=s(KP);Iso=r(PYr,"OpenAIGPTTokenizerFast"),PYr.forEach(t),Nso=r(B$," (OpenAI GPT model)"),B$.forEach(t),qso=i(S),zg=n(S,"LI",{});var fAe=s(zg);Yae=n(fAe,"STRONG",{});var BYr=s(Yae);jso=r(BYr,"opt"),BYr.forEach(t),Dso=r(fAe," \u2014 "),ZP=n(fAe,"A",{href:!0});var IYr=s(ZP);Gso=r(IYr,"GPT2Tokenizer"),IYr.forEach(t),Oso=r(fAe," (OPT model)"),fAe.forEach(t),Vso=i(S),us=n(S,"LI",{});var I$=s(us);Kae=n(I$,"STRONG",{});var NYr=s(Kae);Xso=r(NYr,"pegasus"),NYr.forEach(t),zso=r(I$," \u2014 "),eB=n(I$,"A",{href:!0});var qYr=s(eB);Wso=r(qYr,"PegasusTokenizer"),qYr.forEach(t),Qso=r(I$," or "),oB=n(I$,"A",{href:!0});var jYr=s(oB);Hso=r(jYr,"PegasusTokenizerFast"),jYr.forEach(t),Uso=r(I$," (Pegasus model)"),I$.forEach(t),Jso=i(S),Wg=n(S,"LI",{});var mAe=s(Wg);Zae=n(mAe,"STRONG",{});var DYr=s(Zae);Yso=r(DYr,"perceiver"),DYr.forEach(t),Kso=r(mAe," \u2014 "),rB=n(mAe,"A",{href:!0});var GYr=s(rB);Zso=r(GYr,"PerceiverTokenizer"),GYr.forEach(t),elo=r(mAe," (Perceiver model)"),mAe.forEach(t),olo=i(S),Qg=n(S,"LI",{});var gAe=s(Qg);ene=n(gAe,"STRONG",{});var OYr=s(ene);rlo=r(OYr,"phobert"),OYr.forEach(t),tlo=r(gAe," \u2014 "),tB=n(gAe,"A",{href:!0});var VYr=s(tB);alo=r(VYr,"PhobertTokenizer"),VYr.forEach(t),nlo=r(gAe," (PhoBERT model)"),gAe.forEach(t),slo=i(S),Hg=n(S,"LI",{});var hAe=s(Hg);one=n(hAe,"STRONG",{});var XYr=s(one);llo=r(XYr,"plbart"),XYr.forEach(t),ilo=r(hAe," \u2014 "),aB=n(hAe,"A",{href:!0});var zYr=s(aB);dlo=r(zYr,"PLBartTokenizer"),zYr.forEach(t),clo=r(hAe," (PLBart model)"),hAe.forEach(t),flo=i(S),Ug=n(S,"LI",{});var pAe=s(Ug);rne=n(pAe,"STRONG",{});var WYr=s(rne);mlo=r(WYr,"prophetnet"),WYr.forEach(t),glo=r(pAe," \u2014 "),nB=n(pAe,"A",{href:!0});var QYr=s(nB);hlo=r(QYr,"ProphetNetTokenizer"),QYr.forEach(t),plo=r(pAe," (ProphetNet model)"),pAe.forEach(t),_lo=i(S),bs=n(S,"LI",{});var N$=s(bs);tne=n(N$,"STRONG",{});var HYr=s(tne);ulo=r(HYr,"qdqbert"),HYr.forEach(t),blo=r(N$," \u2014 "),sB=n(N$,"A",{href:!0});var UYr=s(sB);vlo=r(UYr,"BertTokenizer"),UYr.forEach(t),Flo=r(N$," or "),lB=n(N$,"A",{href:!0});var JYr=s(lB);Tlo=r(JYr,"BertTokenizerFast"),JYr.forEach(t),Mlo=r(N$," (QDQBert model)"),N$.forEach(t),Elo=i(S),Jg=n(S,"LI",{});var _Ae=s(Jg);ane=n(_Ae,"STRONG",{});var YYr=s(ane);Clo=r(YYr,"rag"),YYr.forEach(t),wlo=r(_Ae," \u2014 "),iB=n(_Ae,"A",{href:!0});var KYr=s(iB);Alo=r(KYr,"RagTokenizer"),KYr.forEach(t),ylo=r(_Ae," (RAG model)"),_Ae.forEach(t),Llo=i(S),vs=n(S,"LI",{});var q$=s(vs);nne=n(q$,"STRONG",{});var ZYr=s(nne);xlo=r(ZYr,"realm"),ZYr.forEach(t),$lo=r(q$," \u2014 "),dB=n(q$,"A",{href:!0});var eKr=s(dB);klo=r(eKr,"RealmTokenizer"),eKr.forEach(t),Slo=r(q$," or "),cB=n(q$,"A",{href:!0});var oKr=s(cB);Rlo=r(oKr,"RealmTokenizerFast"),oKr.forEach(t),Plo=r(q$," (REALM model)"),q$.forEach(t),Blo=i(S),Fs=n(S,"LI",{});var j$=s(Fs);sne=n(j$,"STRONG",{});var rKr=s(sne);Ilo=r(rKr,"reformer"),rKr.forEach(t),Nlo=r(j$," \u2014 "),fB=n(j$,"A",{href:!0});var tKr=s(fB);qlo=r(tKr,"ReformerTokenizer"),tKr.forEach(t),jlo=r(j$," or "),mB=n(j$,"A",{href:!0});var aKr=s(mB);Dlo=r(aKr,"ReformerTokenizerFast"),aKr.forEach(t),Glo=r(j$," (Reformer model)"),j$.forEach(t),Olo=i(S),Ts=n(S,"LI",{});var D$=s(Ts);lne=n(D$,"STRONG",{});var nKr=s(lne);Vlo=r(nKr,"rembert"),nKr.forEach(t),Xlo=r(D$," \u2014 "),gB=n(D$,"A",{href:!0});var sKr=s(gB);zlo=r(sKr,"RemBertTokenizer"),sKr.forEach(t),Wlo=r(D$," or "),hB=n(D$,"A",{href:!0});var lKr=s(hB);Qlo=r(lKr,"RemBertTokenizerFast"),lKr.forEach(t),Hlo=r(D$," (RemBERT model)"),D$.forEach(t),Ulo=i(S),Ms=n(S,"LI",{});var G$=s(Ms);ine=n(G$,"STRONG",{});var iKr=s(ine);Jlo=r(iKr,"retribert"),iKr.forEach(t),Ylo=r(G$," \u2014 "),pB=n(G$,"A",{href:!0});var dKr=s(pB);Klo=r(dKr,"RetriBertTokenizer"),dKr.forEach(t),Zlo=r(G$," or "),_B=n(G$,"A",{href:!0});var cKr=s(_B);eio=r(cKr,"RetriBertTokenizerFast"),cKr.forEach(t),oio=r(G$," (RetriBERT model)"),G$.forEach(t),rio=i(S),Es=n(S,"LI",{});var O$=s(Es);dne=n(O$,"STRONG",{});var fKr=s(dne);tio=r(fKr,"roberta"),fKr.forEach(t),aio=r(O$," \u2014 "),uB=n(O$,"A",{href:!0});var mKr=s(uB);nio=r(mKr,"RobertaTokenizer"),mKr.forEach(t),sio=r(O$," or "),bB=n(O$,"A",{href:!0});var gKr=s(bB);lio=r(gKr,"RobertaTokenizerFast"),gKr.forEach(t),iio=r(O$," (RoBERTa model)"),O$.forEach(t),dio=i(S),Cs=n(S,"LI",{});var V$=s(Cs);cne=n(V$,"STRONG",{});var hKr=s(cne);cio=r(hKr,"roformer"),hKr.forEach(t),fio=r(V$," \u2014 "),vB=n(V$,"A",{href:!0});var pKr=s(vB);mio=r(pKr,"RoFormerTokenizer"),pKr.forEach(t),gio=r(V$," or "),FB=n(V$,"A",{href:!0});var _Kr=s(FB);hio=r(_Kr,"RoFormerTokenizerFast"),_Kr.forEach(t),pio=r(V$," (RoFormer model)"),V$.forEach(t),_io=i(S),Yg=n(S,"LI",{});var uAe=s(Yg);fne=n(uAe,"STRONG",{});var uKr=s(fne);uio=r(uKr,"speech_to_text"),uKr.forEach(t),bio=r(uAe," \u2014 "),TB=n(uAe,"A",{href:!0});var bKr=s(TB);vio=r(bKr,"Speech2TextTokenizer"),bKr.forEach(t),Fio=r(uAe," (Speech2Text model)"),uAe.forEach(t),Tio=i(S),Kg=n(S,"LI",{});var bAe=s(Kg);mne=n(bAe,"STRONG",{});var vKr=s(mne);Mio=r(vKr,"speech_to_text_2"),vKr.forEach(t),Eio=r(bAe," \u2014 "),MB=n(bAe,"A",{href:!0});var FKr=s(MB);Cio=r(FKr,"Speech2Text2Tokenizer"),FKr.forEach(t),wio=r(bAe," (Speech2Text2 model)"),bAe.forEach(t),Aio=i(S),ws=n(S,"LI",{});var X$=s(ws);gne=n(X$,"STRONG",{});var TKr=s(gne);yio=r(TKr,"splinter"),TKr.forEach(t),Lio=r(X$," \u2014 "),EB=n(X$,"A",{href:!0});var MKr=s(EB);xio=r(MKr,"SplinterTokenizer"),MKr.forEach(t),$io=r(X$," or "),CB=n(X$,"A",{href:!0});var EKr=s(CB);kio=r(EKr,"SplinterTokenizerFast"),EKr.forEach(t),Sio=r(X$," (Splinter model)"),X$.forEach(t),Rio=i(S),As=n(S,"LI",{});var z$=s(As);hne=n(z$,"STRONG",{});var CKr=s(hne);Pio=r(CKr,"squeezebert"),CKr.forEach(t),Bio=r(z$," \u2014 "),wB=n(z$,"A",{href:!0});var wKr=s(wB);Iio=r(wKr,"SqueezeBertTokenizer"),wKr.forEach(t),Nio=r(z$," or "),AB=n(z$,"A",{href:!0});var AKr=s(AB);qio=r(AKr,"SqueezeBertTokenizerFast"),AKr.forEach(t),jio=r(z$," (SqueezeBERT model)"),z$.forEach(t),Dio=i(S),ys=n(S,"LI",{});var W$=s(ys);pne=n(W$,"STRONG",{});var yKr=s(pne);Gio=r(yKr,"t5"),yKr.forEach(t),Oio=r(W$," \u2014 "),yB=n(W$,"A",{href:!0});var LKr=s(yB);Vio=r(LKr,"T5Tokenizer"),LKr.forEach(t),Xio=r(W$," or "),LB=n(W$,"A",{href:!0});var xKr=s(LB);zio=r(xKr,"T5TokenizerFast"),xKr.forEach(t),Wio=r(W$," (T5 model)"),W$.forEach(t),Qio=i(S),Zg=n(S,"LI",{});var vAe=s(Zg);_ne=n(vAe,"STRONG",{});var $Kr=s(_ne);Hio=r($Kr,"tapas"),$Kr.forEach(t),Uio=r(vAe," \u2014 "),xB=n(vAe,"A",{href:!0});var kKr=s(xB);Jio=r(kKr,"TapasTokenizer"),kKr.forEach(t),Yio=r(vAe," (TAPAS model)"),vAe.forEach(t),Kio=i(S),eh=n(S,"LI",{});var FAe=s(eh);une=n(FAe,"STRONG",{});var SKr=s(une);Zio=r(SKr,"tapex"),SKr.forEach(t),edo=r(FAe," \u2014 "),$B=n(FAe,"A",{href:!0});var RKr=s($B);odo=r(RKr,"TapexTokenizer"),RKr.forEach(t),rdo=r(FAe," (TAPEX model)"),FAe.forEach(t),tdo=i(S),oh=n(S,"LI",{});var TAe=s(oh);bne=n(TAe,"STRONG",{});var PKr=s(bne);ado=r(PKr,"transfo-xl"),PKr.forEach(t),ndo=r(TAe," \u2014 "),kB=n(TAe,"A",{href:!0});var BKr=s(kB);sdo=r(BKr,"TransfoXLTokenizer"),BKr.forEach(t),ldo=r(TAe," (Transformer-XL model)"),TAe.forEach(t),ido=i(S),Ls=n(S,"LI",{});var Q$=s(Ls);vne=n(Q$,"STRONG",{});var IKr=s(vne);ddo=r(IKr,"visual_bert"),IKr.forEach(t),cdo=r(Q$," \u2014 "),SB=n(Q$,"A",{href:!0});var NKr=s(SB);fdo=r(NKr,"BertTokenizer"),NKr.forEach(t),mdo=r(Q$," or "),RB=n(Q$,"A",{href:!0});var qKr=s(RB);gdo=r(qKr,"BertTokenizerFast"),qKr.forEach(t),hdo=r(Q$," (VisualBERT model)"),Q$.forEach(t),pdo=i(S),rh=n(S,"LI",{});var MAe=s(rh);Fne=n(MAe,"STRONG",{});var jKr=s(Fne);_do=r(jKr,"wav2vec2"),jKr.forEach(t),udo=r(MAe," \u2014 "),PB=n(MAe,"A",{href:!0});var DKr=s(PB);bdo=r(DKr,"Wav2Vec2CTCTokenizer"),DKr.forEach(t),vdo=r(MAe," (Wav2Vec2 model)"),MAe.forEach(t),Fdo=i(S),th=n(S,"LI",{});var EAe=s(th);Tne=n(EAe,"STRONG",{});var GKr=s(Tne);Tdo=r(GKr,"wav2vec2-conformer"),GKr.forEach(t),Mdo=r(EAe," \u2014 "),BB=n(EAe,"A",{href:!0});var OKr=s(BB);Edo=r(OKr,"Wav2Vec2CTCTokenizer"),OKr.forEach(t),Cdo=r(EAe," (Wav2Vec2-Conformer model)"),EAe.forEach(t),wdo=i(S),ah=n(S,"LI",{});var CAe=s(ah);Mne=n(CAe,"STRONG",{});var VKr=s(Mne);Ado=r(VKr,"wav2vec2_phoneme"),VKr.forEach(t),ydo=r(CAe," \u2014 "),IB=n(CAe,"A",{href:!0});var XKr=s(IB);Ldo=r(XKr,"Wav2Vec2PhonemeCTCTokenizer"),XKr.forEach(t),xdo=r(CAe," (Wav2Vec2Phoneme model)"),CAe.forEach(t),$do=i(S),xs=n(S,"LI",{});var H$=s(xs);Ene=n(H$,"STRONG",{});var zKr=s(Ene);kdo=r(zKr,"xglm"),zKr.forEach(t),Sdo=r(H$," \u2014 "),NB=n(H$,"A",{href:!0});var WKr=s(NB);Rdo=r(WKr,"XGLMTokenizer"),WKr.forEach(t),Pdo=r(H$," or "),qB=n(H$,"A",{href:!0});var QKr=s(qB);Bdo=r(QKr,"XGLMTokenizerFast"),QKr.forEach(t),Ido=r(H$," (XGLM model)"),H$.forEach(t),Ndo=i(S),nh=n(S,"LI",{});var wAe=s(nh);Cne=n(wAe,"STRONG",{});var HKr=s(Cne);qdo=r(HKr,"xlm"),HKr.forEach(t),jdo=r(wAe," \u2014 "),jB=n(wAe,"A",{href:!0});var UKr=s(jB);Ddo=r(UKr,"XLMTokenizer"),UKr.forEach(t),Gdo=r(wAe," (XLM model)"),wAe.forEach(t),Odo=i(S),sh=n(S,"LI",{});var AAe=s(sh);wne=n(AAe,"STRONG",{});var JKr=s(wne);Vdo=r(JKr,"xlm-prophetnet"),JKr.forEach(t),Xdo=r(AAe," \u2014 "),DB=n(AAe,"A",{href:!0});var YKr=s(DB);zdo=r(YKr,"XLMProphetNetTokenizer"),YKr.forEach(t),Wdo=r(AAe," (XLM-ProphetNet model)"),AAe.forEach(t),Qdo=i(S),$s=n(S,"LI",{});var U$=s($s);Ane=n(U$,"STRONG",{});var KKr=s(Ane);Hdo=r(KKr,"xlm-roberta"),KKr.forEach(t),Udo=r(U$," \u2014 "),GB=n(U$,"A",{href:!0});var ZKr=s(GB);Jdo=r(ZKr,"XLMRobertaTokenizer"),ZKr.forEach(t),Ydo=r(U$," or "),OB=n(U$,"A",{href:!0});var eZr=s(OB);Kdo=r(eZr,"XLMRobertaTokenizerFast"),eZr.forEach(t),Zdo=r(U$," (XLM-RoBERTa model)"),U$.forEach(t),eco=i(S),ks=n(S,"LI",{});var J$=s(ks);yne=n(J$,"STRONG",{});var oZr=s(yne);oco=r(oZr,"xlm-roberta-xl"),oZr.forEach(t),rco=r(J$," \u2014 "),VB=n(J$,"A",{href:!0});var rZr=s(VB);tco=r(rZr,"RobertaTokenizer"),rZr.forEach(t),aco=r(J$," or "),XB=n(J$,"A",{href:!0});var tZr=s(XB);nco=r(tZr,"RobertaTokenizerFast"),tZr.forEach(t),sco=r(J$," (XLM-RoBERTa-XL model)"),J$.forEach(t),lco=i(S),Ss=n(S,"LI",{});var Y$=s(Ss);Lne=n(Y$,"STRONG",{});var aZr=s(Lne);ico=r(aZr,"xlnet"),aZr.forEach(t),dco=r(Y$," \u2014 "),zB=n(Y$,"A",{href:!0});var nZr=s(zB);cco=r(nZr,"XLNetTokenizer"),nZr.forEach(t),fco=r(Y$," or "),WB=n(Y$,"A",{href:!0});var sZr=s(WB);mco=r(sZr,"XLNetTokenizerFast"),sZr.forEach(t),gco=r(Y$," (XLNet model)"),Y$.forEach(t),hco=i(S),Rs=n(S,"LI",{});var K$=s(Rs);xne=n(K$,"STRONG",{});var lZr=s(xne);pco=r(lZr,"yoso"),lZr.forEach(t),_co=r(K$," \u2014 "),QB=n(K$,"A",{href:!0});var iZr=s(QB);uco=r(iZr,"AlbertTokenizer"),iZr.forEach(t),bco=r(K$," or "),HB=n(K$,"A",{href:!0});var dZr=s(HB);vco=r(dZr,"AlbertTokenizerFast"),dZr.forEach(t),Fco=r(K$," (YOSO model)"),K$.forEach(t),S.forEach(t),Tco=i(js),T(lh.$$.fragment,js),js.forEach(t),Mco=i(qs),ih=n(qs,"DIV",{class:!0});var YDe=s(ih);T(Y6.$$.fragment,YDe),Eco=i(YDe),$ne=n(YDe,"P",{});var cZr=s($ne);Cco=r(cZr,"Register a new tokenizer in this mapping."),cZr.forEach(t),YDe.forEach(t),qs.forEach(t),Kqe=i(f),Ci=n(f,"H2",{class:!0});var KDe=s(Ci);dh=n(KDe,"A",{id:!0,class:!0,href:!0});var fZr=s(dh);kne=n(fZr,"SPAN",{});var mZr=s(kne);T(K6.$$.fragment,mZr),mZr.forEach(t),fZr.forEach(t),wco=i(KDe),Sne=n(KDe,"SPAN",{});var gZr=s(Sne);Aco=r(gZr,"AutoFeatureExtractor"),gZr.forEach(t),KDe.forEach(t),Zqe=i(f),Ao=n(f,"DIV",{class:!0});var Ds=s(Ao);T(Z6.$$.fragment,Ds),yco=i(Ds),ey=n(Ds,"P",{});var ZDe=s(ey);Lco=r(ZDe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),UB=n(ZDe,"A",{href:!0});var hZr=s(UB);xco=r(hZr,"AutoFeatureExtractor.from_pretrained()"),hZr.forEach(t),$co=r(ZDe," class method."),ZDe.forEach(t),kco=i(Ds),oy=n(Ds,"P",{});var eGe=s(oy);Sco=r(eGe,"This class cannot be instantiated directly using "),Rne=n(eGe,"CODE",{});var pZr=s(Rne);Rco=r(pZr,"__init__()"),pZr.forEach(t),Pco=r(eGe," (throws an error)."),eGe.forEach(t),Bco=i(Ds),He=n(Ds,"DIV",{class:!0});var ea=s(He);T(ry.$$.fragment,ea),Ico=i(ea),Pne=n(ea,"P",{});var _Zr=s(Pne);Nco=r(_Zr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),_Zr.forEach(t),qco=i(ea),La=n(ea,"P",{});var Ow=s(La);jco=r(Ow,"The feature extractor class to instantiate is selected based on the "),Bne=n(Ow,"CODE",{});var uZr=s(Bne);Dco=r(uZr,"model_type"),uZr.forEach(t),Gco=r(Ow,` property of the config object
(either passed as an argument or loaded from `),Ine=n(Ow,"CODE",{});var bZr=s(Ine);Oco=r(bZr,"pretrained_model_name_or_path"),bZr.forEach(t),Vco=r(Ow,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Nne=n(Ow,"CODE",{});var vZr=s(Nne);Xco=r(vZr,"pretrained_model_name_or_path"),vZr.forEach(t),zco=r(Ow,":"),Ow.forEach(t),Wco=i(ea),Y=n(ea,"UL",{});var Z=s(Y);ch=n(Z,"LI",{});var yAe=s(ch);qne=n(yAe,"STRONG",{});var FZr=s(qne);Qco=r(FZr,"beit"),FZr.forEach(t),Hco=r(yAe," \u2014 "),JB=n(yAe,"A",{href:!0});var TZr=s(JB);Uco=r(TZr,"BeitFeatureExtractor"),TZr.forEach(t),Jco=r(yAe," (BEiT model)"),yAe.forEach(t),Yco=i(Z),fh=n(Z,"LI",{});var LAe=s(fh);jne=n(LAe,"STRONG",{});var MZr=s(jne);Kco=r(MZr,"clip"),MZr.forEach(t),Zco=r(LAe," \u2014 "),YB=n(LAe,"A",{href:!0});var EZr=s(YB);efo=r(EZr,"CLIPFeatureExtractor"),EZr.forEach(t),ofo=r(LAe," (CLIP model)"),LAe.forEach(t),rfo=i(Z),mh=n(Z,"LI",{});var xAe=s(mh);Dne=n(xAe,"STRONG",{});var CZr=s(Dne);tfo=r(CZr,"convnext"),CZr.forEach(t),afo=r(xAe," \u2014 "),KB=n(xAe,"A",{href:!0});var wZr=s(KB);nfo=r(wZr,"ConvNextFeatureExtractor"),wZr.forEach(t),sfo=r(xAe," (ConvNeXT model)"),xAe.forEach(t),lfo=i(Z),gh=n(Z,"LI",{});var $Ae=s(gh);Gne=n($Ae,"STRONG",{});var AZr=s(Gne);ifo=r(AZr,"cvt"),AZr.forEach(t),dfo=r($Ae," \u2014 "),ZB=n($Ae,"A",{href:!0});var yZr=s(ZB);cfo=r(yZr,"ConvNextFeatureExtractor"),yZr.forEach(t),ffo=r($Ae," (CvT model)"),$Ae.forEach(t),mfo=i(Z),hh=n(Z,"LI",{});var kAe=s(hh);One=n(kAe,"STRONG",{});var LZr=s(One);gfo=r(LZr,"data2vec-audio"),LZr.forEach(t),hfo=r(kAe," \u2014 "),eI=n(kAe,"A",{href:!0});var xZr=s(eI);pfo=r(xZr,"Wav2Vec2FeatureExtractor"),xZr.forEach(t),_fo=r(kAe," (Data2VecAudio model)"),kAe.forEach(t),ufo=i(Z),ph=n(Z,"LI",{});var SAe=s(ph);Vne=n(SAe,"STRONG",{});var $Zr=s(Vne);bfo=r($Zr,"data2vec-vision"),$Zr.forEach(t),vfo=r(SAe," \u2014 "),oI=n(SAe,"A",{href:!0});var kZr=s(oI);Ffo=r(kZr,"BeitFeatureExtractor"),kZr.forEach(t),Tfo=r(SAe," (Data2VecVision model)"),SAe.forEach(t),Mfo=i(Z),_h=n(Z,"LI",{});var RAe=s(_h);Xne=n(RAe,"STRONG",{});var SZr=s(Xne);Efo=r(SZr,"deit"),SZr.forEach(t),Cfo=r(RAe," \u2014 "),rI=n(RAe,"A",{href:!0});var RZr=s(rI);wfo=r(RZr,"DeiTFeatureExtractor"),RZr.forEach(t),Afo=r(RAe," (DeiT model)"),RAe.forEach(t),yfo=i(Z),uh=n(Z,"LI",{});var PAe=s(uh);zne=n(PAe,"STRONG",{});var PZr=s(zne);Lfo=r(PZr,"detr"),PZr.forEach(t),xfo=r(PAe," \u2014 "),tI=n(PAe,"A",{href:!0});var BZr=s(tI);$fo=r(BZr,"DetrFeatureExtractor"),BZr.forEach(t),kfo=r(PAe," (DETR model)"),PAe.forEach(t),Sfo=i(Z),bh=n(Z,"LI",{});var BAe=s(bh);Wne=n(BAe,"STRONG",{});var IZr=s(Wne);Rfo=r(IZr,"dpt"),IZr.forEach(t),Pfo=r(BAe," \u2014 "),aI=n(BAe,"A",{href:!0});var NZr=s(aI);Bfo=r(NZr,"DPTFeatureExtractor"),NZr.forEach(t),Ifo=r(BAe," (DPT model)"),BAe.forEach(t),Nfo=i(Z),vh=n(Z,"LI",{});var IAe=s(vh);Qne=n(IAe,"STRONG",{});var qZr=s(Qne);qfo=r(qZr,"flava"),qZr.forEach(t),jfo=r(IAe," \u2014 "),nI=n(IAe,"A",{href:!0});var jZr=s(nI);Dfo=r(jZr,"FlavaFeatureExtractor"),jZr.forEach(t),Gfo=r(IAe," (FLAVA model)"),IAe.forEach(t),Ofo=i(Z),Fh=n(Z,"LI",{});var NAe=s(Fh);Hne=n(NAe,"STRONG",{});var DZr=s(Hne);Vfo=r(DZr,"glpn"),DZr.forEach(t),Xfo=r(NAe," \u2014 "),sI=n(NAe,"A",{href:!0});var GZr=s(sI);zfo=r(GZr,"GLPNFeatureExtractor"),GZr.forEach(t),Wfo=r(NAe," (GLPN model)"),NAe.forEach(t),Qfo=i(Z),Th=n(Z,"LI",{});var qAe=s(Th);Une=n(qAe,"STRONG",{});var OZr=s(Une);Hfo=r(OZr,"hubert"),OZr.forEach(t),Ufo=r(qAe," \u2014 "),lI=n(qAe,"A",{href:!0});var VZr=s(lI);Jfo=r(VZr,"Wav2Vec2FeatureExtractor"),VZr.forEach(t),Yfo=r(qAe," (Hubert model)"),qAe.forEach(t),Kfo=i(Z),Mh=n(Z,"LI",{});var jAe=s(Mh);Jne=n(jAe,"STRONG",{});var XZr=s(Jne);Zfo=r(XZr,"imagegpt"),XZr.forEach(t),emo=r(jAe," \u2014 "),iI=n(jAe,"A",{href:!0});var zZr=s(iI);omo=r(zZr,"ImageGPTFeatureExtractor"),zZr.forEach(t),rmo=r(jAe," (ImageGPT model)"),jAe.forEach(t),tmo=i(Z),Eh=n(Z,"LI",{});var DAe=s(Eh);Yne=n(DAe,"STRONG",{});var WZr=s(Yne);amo=r(WZr,"layoutlmv2"),WZr.forEach(t),nmo=r(DAe," \u2014 "),dI=n(DAe,"A",{href:!0});var QZr=s(dI);smo=r(QZr,"LayoutLMv2FeatureExtractor"),QZr.forEach(t),lmo=r(DAe," (LayoutLMv2 model)"),DAe.forEach(t),imo=i(Z),Ch=n(Z,"LI",{});var GAe=s(Ch);Kne=n(GAe,"STRONG",{});var HZr=s(Kne);dmo=r(HZr,"layoutlmv3"),HZr.forEach(t),cmo=r(GAe," \u2014 "),cI=n(GAe,"A",{href:!0});var UZr=s(cI);fmo=r(UZr,"LayoutLMv3FeatureExtractor"),UZr.forEach(t),mmo=r(GAe," (LayoutLMv3 model)"),GAe.forEach(t),gmo=i(Z),wh=n(Z,"LI",{});var OAe=s(wh);Zne=n(OAe,"STRONG",{});var JZr=s(Zne);hmo=r(JZr,"levit"),JZr.forEach(t),pmo=r(OAe," \u2014 "),fI=n(OAe,"A",{href:!0});var YZr=s(fI);_mo=r(YZr,"LevitFeatureExtractor"),YZr.forEach(t),umo=r(OAe," (LeViT model)"),OAe.forEach(t),bmo=i(Z),Ah=n(Z,"LI",{});var VAe=s(Ah);ese=n(VAe,"STRONG",{});var KZr=s(ese);vmo=r(KZr,"maskformer"),KZr.forEach(t),Fmo=r(VAe," \u2014 "),mI=n(VAe,"A",{href:!0});var ZZr=s(mI);Tmo=r(ZZr,"MaskFormerFeatureExtractor"),ZZr.forEach(t),Mmo=r(VAe," (MaskFormer model)"),VAe.forEach(t),Emo=i(Z),yh=n(Z,"LI",{});var XAe=s(yh);ose=n(XAe,"STRONG",{});var eet=s(ose);Cmo=r(eet,"perceiver"),eet.forEach(t),wmo=r(XAe," \u2014 "),gI=n(XAe,"A",{href:!0});var oet=s(gI);Amo=r(oet,"PerceiverFeatureExtractor"),oet.forEach(t),ymo=r(XAe," (Perceiver model)"),XAe.forEach(t),Lmo=i(Z),Lh=n(Z,"LI",{});var zAe=s(Lh);rse=n(zAe,"STRONG",{});var ret=s(rse);xmo=r(ret,"poolformer"),ret.forEach(t),$mo=r(zAe," \u2014 "),hI=n(zAe,"A",{href:!0});var tet=s(hI);kmo=r(tet,"PoolFormerFeatureExtractor"),tet.forEach(t),Smo=r(zAe," (PoolFormer model)"),zAe.forEach(t),Rmo=i(Z),xh=n(Z,"LI",{});var WAe=s(xh);tse=n(WAe,"STRONG",{});var aet=s(tse);Pmo=r(aet,"regnet"),aet.forEach(t),Bmo=r(WAe," \u2014 "),pI=n(WAe,"A",{href:!0});var net=s(pI);Imo=r(net,"ConvNextFeatureExtractor"),net.forEach(t),Nmo=r(WAe," (RegNet model)"),WAe.forEach(t),qmo=i(Z),$h=n(Z,"LI",{});var QAe=s($h);ase=n(QAe,"STRONG",{});var set=s(ase);jmo=r(set,"resnet"),set.forEach(t),Dmo=r(QAe," \u2014 "),_I=n(QAe,"A",{href:!0});var iet=s(_I);Gmo=r(iet,"ConvNextFeatureExtractor"),iet.forEach(t),Omo=r(QAe," (ResNet model)"),QAe.forEach(t),Vmo=i(Z),kh=n(Z,"LI",{});var HAe=s(kh);nse=n(HAe,"STRONG",{});var det=s(nse);Xmo=r(det,"segformer"),det.forEach(t),zmo=r(HAe," \u2014 "),uI=n(HAe,"A",{href:!0});var cet=s(uI);Wmo=r(cet,"SegformerFeatureExtractor"),cet.forEach(t),Qmo=r(HAe," (SegFormer model)"),HAe.forEach(t),Hmo=i(Z),Sh=n(Z,"LI",{});var UAe=s(Sh);sse=n(UAe,"STRONG",{});var fet=s(sse);Umo=r(fet,"speech_to_text"),fet.forEach(t),Jmo=r(UAe," \u2014 "),bI=n(UAe,"A",{href:!0});var met=s(bI);Ymo=r(met,"Speech2TextFeatureExtractor"),met.forEach(t),Kmo=r(UAe," (Speech2Text model)"),UAe.forEach(t),Zmo=i(Z),Rh=n(Z,"LI",{});var JAe=s(Rh);lse=n(JAe,"STRONG",{});var get=s(lse);ego=r(get,"swin"),get.forEach(t),ogo=r(JAe," \u2014 "),vI=n(JAe,"A",{href:!0});var het=s(vI);rgo=r(het,"ViTFeatureExtractor"),het.forEach(t),tgo=r(JAe," (Swin Transformer model)"),JAe.forEach(t),ago=i(Z),Ph=n(Z,"LI",{});var YAe=s(Ph);ise=n(YAe,"STRONG",{});var pet=s(ise);ngo=r(pet,"van"),pet.forEach(t),sgo=r(YAe," \u2014 "),FI=n(YAe,"A",{href:!0});var _et=s(FI);lgo=r(_et,"ConvNextFeatureExtractor"),_et.forEach(t),igo=r(YAe," (VAN model)"),YAe.forEach(t),dgo=i(Z),Bh=n(Z,"LI",{});var KAe=s(Bh);dse=n(KAe,"STRONG",{});var uet=s(dse);cgo=r(uet,"vit"),uet.forEach(t),fgo=r(KAe," \u2014 "),TI=n(KAe,"A",{href:!0});var bet=s(TI);mgo=r(bet,"ViTFeatureExtractor"),bet.forEach(t),ggo=r(KAe," (ViT model)"),KAe.forEach(t),hgo=i(Z),Ih=n(Z,"LI",{});var ZAe=s(Ih);cse=n(ZAe,"STRONG",{});var vet=s(cse);pgo=r(vet,"vit_mae"),vet.forEach(t),_go=r(ZAe," \u2014 "),MI=n(ZAe,"A",{href:!0});var Fet=s(MI);ugo=r(Fet,"ViTFeatureExtractor"),Fet.forEach(t),bgo=r(ZAe," (ViTMAE model)"),ZAe.forEach(t),vgo=i(Z),Nh=n(Z,"LI",{});var e6e=s(Nh);fse=n(e6e,"STRONG",{});var Tet=s(fse);Fgo=r(Tet,"wav2vec2"),Tet.forEach(t),Tgo=r(e6e," \u2014 "),EI=n(e6e,"A",{href:!0});var Met=s(EI);Mgo=r(Met,"Wav2Vec2FeatureExtractor"),Met.forEach(t),Ego=r(e6e," (Wav2Vec2 model)"),e6e.forEach(t),Cgo=i(Z),qh=n(Z,"LI",{});var o6e=s(qh);mse=n(o6e,"STRONG",{});var Eet=s(mse);wgo=r(Eet,"wav2vec2-conformer"),Eet.forEach(t),Ago=r(o6e," \u2014 "),CI=n(o6e,"A",{href:!0});var Cet=s(CI);ygo=r(Cet,"Wav2Vec2FeatureExtractor"),Cet.forEach(t),Lgo=r(o6e," (Wav2Vec2-Conformer model)"),o6e.forEach(t),xgo=i(Z),jh=n(Z,"LI",{});var r6e=s(jh);gse=n(r6e,"STRONG",{});var wet=s(gse);$go=r(wet,"yolos"),wet.forEach(t),kgo=r(r6e," \u2014 "),wI=n(r6e,"A",{href:!0});var Aet=s(wI);Sgo=r(Aet,"YolosFeatureExtractor"),Aet.forEach(t),Rgo=r(r6e," (YOLOS model)"),r6e.forEach(t),Z.forEach(t),Pgo=i(ea),T(Dh.$$.fragment,ea),Bgo=i(ea),T(Gh.$$.fragment,ea),ea.forEach(t),Igo=i(Ds),Oh=n(Ds,"DIV",{class:!0});var oGe=s(Oh);T(ty.$$.fragment,oGe),Ngo=i(oGe),hse=n(oGe,"P",{});var yet=s(hse);qgo=r(yet,"Register a new feature extractor for this class."),yet.forEach(t),oGe.forEach(t),Ds.forEach(t),eje=i(f),wi=n(f,"H2",{class:!0});var rGe=s(wi);Vh=n(rGe,"A",{id:!0,class:!0,href:!0});var Let=s(Vh);pse=n(Let,"SPAN",{});var xet=s(pse);T(ay.$$.fragment,xet),xet.forEach(t),Let.forEach(t),jgo=i(rGe),_se=n(rGe,"SPAN",{});var $et=s(_se);Dgo=r($et,"AutoProcessor"),$et.forEach(t),rGe.forEach(t),oje=i(f),yo=n(f,"DIV",{class:!0});var Gs=s(yo);T(ny.$$.fragment,Gs),Ggo=i(Gs),sy=n(Gs,"P",{});var tGe=s(sy);Ogo=r(tGe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AI=n(tGe,"A",{href:!0});var ket=s(AI);Vgo=r(ket,"AutoProcessor.from_pretrained()"),ket.forEach(t),Xgo=r(tGe," class method."),tGe.forEach(t),zgo=i(Gs),ly=n(Gs,"P",{});var aGe=s(ly);Wgo=r(aGe,"This class cannot be instantiated directly using "),use=n(aGe,"CODE",{});var Set=s(use);Qgo=r(Set,"__init__()"),Set.forEach(t),Hgo=r(aGe," (throws an error)."),aGe.forEach(t),Ugo=i(Gs),Ue=n(Gs,"DIV",{class:!0});var oa=s(Ue);T(iy.$$.fragment,oa),Jgo=i(oa),bse=n(oa,"P",{});var Ret=s(bse);Ygo=r(Ret,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ret.forEach(t),Kgo=i(oa),Ai=n(oa,"P",{});var qZ=s(Ai);Zgo=r(qZ,"The processor class to instantiate is selected based on the "),vse=n(qZ,"CODE",{});var Pet=s(vse);eho=r(Pet,"model_type"),Pet.forEach(t),oho=r(qZ,` property of the config object (either
passed as an argument or loaded from `),Fse=n(qZ,"CODE",{});var Bet=s(Fse);rho=r(Bet,"pretrained_model_name_or_path"),Bet.forEach(t),tho=r(qZ," if possible):"),qZ.forEach(t),aho=i(oa),he=n(oa,"UL",{});var ue=s(he);Xh=n(ue,"LI",{});var t6e=s(Xh);Tse=n(t6e,"STRONG",{});var Iet=s(Tse);nho=r(Iet,"clip"),Iet.forEach(t),sho=r(t6e," \u2014 "),yI=n(t6e,"A",{href:!0});var Net=s(yI);lho=r(Net,"CLIPProcessor"),Net.forEach(t),iho=r(t6e," (CLIP model)"),t6e.forEach(t),dho=i(ue),zh=n(ue,"LI",{});var a6e=s(zh);Mse=n(a6e,"STRONG",{});var qet=s(Mse);cho=r(qet,"flava"),qet.forEach(t),fho=r(a6e," \u2014 "),Ese=n(a6e,"CODE",{});var jet=s(Ese);mho=r(jet,"FLAVAProcessor"),jet.forEach(t),gho=r(a6e," (FLAVA model)"),a6e.forEach(t),hho=i(ue),Wh=n(ue,"LI",{});var n6e=s(Wh);Cse=n(n6e,"STRONG",{});var Det=s(Cse);pho=r(Det,"layoutlmv2"),Det.forEach(t),_ho=r(n6e," \u2014 "),LI=n(n6e,"A",{href:!0});var Get=s(LI);uho=r(Get,"LayoutLMv2Processor"),Get.forEach(t),bho=r(n6e," (LayoutLMv2 model)"),n6e.forEach(t),vho=i(ue),Qh=n(ue,"LI",{});var s6e=s(Qh);wse=n(s6e,"STRONG",{});var Oet=s(wse);Fho=r(Oet,"layoutlmv3"),Oet.forEach(t),Tho=r(s6e," \u2014 "),xI=n(s6e,"A",{href:!0});var Vet=s(xI);Mho=r(Vet,"LayoutLMv3Processor"),Vet.forEach(t),Eho=r(s6e," (LayoutLMv3 model)"),s6e.forEach(t),Cho=i(ue),Hh=n(ue,"LI",{});var l6e=s(Hh);Ase=n(l6e,"STRONG",{});var Xet=s(Ase);who=r(Xet,"layoutxlm"),Xet.forEach(t),Aho=r(l6e," \u2014 "),$I=n(l6e,"A",{href:!0});var zet=s($I);yho=r(zet,"LayoutXLMProcessor"),zet.forEach(t),Lho=r(l6e," (LayoutXLM model)"),l6e.forEach(t),xho=i(ue),Uh=n(ue,"LI",{});var i6e=s(Uh);yse=n(i6e,"STRONG",{});var Wet=s(yse);$ho=r(Wet,"sew"),Wet.forEach(t),kho=r(i6e," \u2014 "),kI=n(i6e,"A",{href:!0});var Qet=s(kI);Sho=r(Qet,"Wav2Vec2Processor"),Qet.forEach(t),Rho=r(i6e," (SEW model)"),i6e.forEach(t),Pho=i(ue),Jh=n(ue,"LI",{});var d6e=s(Jh);Lse=n(d6e,"STRONG",{});var Het=s(Lse);Bho=r(Het,"sew-d"),Het.forEach(t),Iho=r(d6e," \u2014 "),SI=n(d6e,"A",{href:!0});var Uet=s(SI);Nho=r(Uet,"Wav2Vec2Processor"),Uet.forEach(t),qho=r(d6e," (SEW-D model)"),d6e.forEach(t),jho=i(ue),Yh=n(ue,"LI",{});var c6e=s(Yh);xse=n(c6e,"STRONG",{});var Jet=s(xse);Dho=r(Jet,"speech_to_text"),Jet.forEach(t),Gho=r(c6e," \u2014 "),RI=n(c6e,"A",{href:!0});var Yet=s(RI);Oho=r(Yet,"Speech2TextProcessor"),Yet.forEach(t),Vho=r(c6e," (Speech2Text model)"),c6e.forEach(t),Xho=i(ue),Kh=n(ue,"LI",{});var f6e=s(Kh);$se=n(f6e,"STRONG",{});var Ket=s($se);zho=r(Ket,"speech_to_text_2"),Ket.forEach(t),Who=r(f6e," \u2014 "),PI=n(f6e,"A",{href:!0});var Zet=s(PI);Qho=r(Zet,"Speech2Text2Processor"),Zet.forEach(t),Hho=r(f6e," (Speech2Text2 model)"),f6e.forEach(t),Uho=i(ue),Zh=n(ue,"LI",{});var m6e=s(Zh);kse=n(m6e,"STRONG",{});var eot=s(kse);Jho=r(eot,"trocr"),eot.forEach(t),Yho=r(m6e," \u2014 "),BI=n(m6e,"A",{href:!0});var oot=s(BI);Kho=r(oot,"TrOCRProcessor"),oot.forEach(t),Zho=r(m6e," (TrOCR model)"),m6e.forEach(t),epo=i(ue),ep=n(ue,"LI",{});var g6e=s(ep);Sse=n(g6e,"STRONG",{});var rot=s(Sse);opo=r(rot,"unispeech"),rot.forEach(t),rpo=r(g6e," \u2014 "),II=n(g6e,"A",{href:!0});var tot=s(II);tpo=r(tot,"Wav2Vec2Processor"),tot.forEach(t),apo=r(g6e," (UniSpeech model)"),g6e.forEach(t),npo=i(ue),op=n(ue,"LI",{});var h6e=s(op);Rse=n(h6e,"STRONG",{});var aot=s(Rse);spo=r(aot,"unispeech-sat"),aot.forEach(t),lpo=r(h6e," \u2014 "),NI=n(h6e,"A",{href:!0});var not=s(NI);ipo=r(not,"Wav2Vec2Processor"),not.forEach(t),dpo=r(h6e," (UniSpeechSat model)"),h6e.forEach(t),cpo=i(ue),rp=n(ue,"LI",{});var p6e=s(rp);Pse=n(p6e,"STRONG",{});var sot=s(Pse);fpo=r(sot,"vilt"),sot.forEach(t),mpo=r(p6e," \u2014 "),qI=n(p6e,"A",{href:!0});var lot=s(qI);gpo=r(lot,"ViltProcessor"),lot.forEach(t),hpo=r(p6e," (ViLT model)"),p6e.forEach(t),ppo=i(ue),tp=n(ue,"LI",{});var _6e=s(tp);Bse=n(_6e,"STRONG",{});var iot=s(Bse);_po=r(iot,"vision-text-dual-encoder"),iot.forEach(t),upo=r(_6e," \u2014 "),jI=n(_6e,"A",{href:!0});var dot=s(jI);bpo=r(dot,"VisionTextDualEncoderProcessor"),dot.forEach(t),vpo=r(_6e," (VisionTextDualEncoder model)"),_6e.forEach(t),Fpo=i(ue),ap=n(ue,"LI",{});var u6e=s(ap);Ise=n(u6e,"STRONG",{});var cot=s(Ise);Tpo=r(cot,"wav2vec2"),cot.forEach(t),Mpo=r(u6e," \u2014 "),DI=n(u6e,"A",{href:!0});var fot=s(DI);Epo=r(fot,"Wav2Vec2Processor"),fot.forEach(t),Cpo=r(u6e," (Wav2Vec2 model)"),u6e.forEach(t),wpo=i(ue),np=n(ue,"LI",{});var b6e=s(np);Nse=n(b6e,"STRONG",{});var mot=s(Nse);Apo=r(mot,"wav2vec2-conformer"),mot.forEach(t),ypo=r(b6e," \u2014 "),GI=n(b6e,"A",{href:!0});var got=s(GI);Lpo=r(got,"Wav2Vec2Processor"),got.forEach(t),xpo=r(b6e," (Wav2Vec2-Conformer model)"),b6e.forEach(t),$po=i(ue),sp=n(ue,"LI",{});var v6e=s(sp);qse=n(v6e,"STRONG",{});var hot=s(qse);kpo=r(hot,"wavlm"),hot.forEach(t),Spo=r(v6e," \u2014 "),OI=n(v6e,"A",{href:!0});var pot=s(OI);Rpo=r(pot,"Wav2Vec2Processor"),pot.forEach(t),Ppo=r(v6e," (WavLM model)"),v6e.forEach(t),ue.forEach(t),Bpo=i(oa),T(lp.$$.fragment,oa),Ipo=i(oa),T(ip.$$.fragment,oa),oa.forEach(t),Npo=i(Gs),dp=n(Gs,"DIV",{class:!0});var nGe=s(dp);T(dy.$$.fragment,nGe),qpo=i(nGe),jse=n(nGe,"P",{});var _ot=s(jse);jpo=r(_ot,"Register a new processor for this class."),_ot.forEach(t),nGe.forEach(t),Gs.forEach(t),rje=i(f),yi=n(f,"H2",{class:!0});var sGe=s(yi);cp=n(sGe,"A",{id:!0,class:!0,href:!0});var uot=s(cp);Dse=n(uot,"SPAN",{});var bot=s(Dse);T(cy.$$.fragment,bot),bot.forEach(t),uot.forEach(t),Dpo=i(sGe),Gse=n(sGe,"SPAN",{});var vot=s(Gse);Gpo=r(vot,"AutoModel"),vot.forEach(t),sGe.forEach(t),tje=i(f),Lo=n(f,"DIV",{class:!0});var Os=s(Lo);T(fy.$$.fragment,Os),Opo=i(Os),Li=n(Os,"P",{});var jZ=s(Li);Vpo=r(jZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),VI=n(jZ,"A",{href:!0});var Fot=s(VI);Xpo=r(Fot,"from_pretrained()"),Fot.forEach(t),zpo=r(jZ," class method or the "),XI=n(jZ,"A",{href:!0});var Tot=s(XI);Wpo=r(Tot,"from_config()"),Tot.forEach(t),Qpo=r(jZ,` class
method.`),jZ.forEach(t),Hpo=i(Os),my=n(Os,"P",{});var lGe=s(my);Upo=r(lGe,"This class cannot be instantiated directly using "),Ose=n(lGe,"CODE",{});var Mot=s(Ose);Jpo=r(Mot,"__init__()"),Mot.forEach(t),Ypo=r(lGe," (throws an error)."),lGe.forEach(t),Kpo=i(Os),at=n(Os,"DIV",{class:!0});var Vw=s(at);T(gy.$$.fragment,Vw),Zpo=i(Vw),Vse=n(Vw,"P",{});var Eot=s(Vse);e_o=r(Eot,"Instantiates one of the base model classes of the library from a configuration."),Eot.forEach(t),o_o=i(Vw),xi=n(Vw,"P",{});var DZ=s(xi);r_o=r(DZ,`Note:
Loading a model from its configuration file does `),Xse=n(DZ,"STRONG",{});var Cot=s(Xse);t_o=r(Cot,"not"),Cot.forEach(t),a_o=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zI=n(DZ,"A",{href:!0});var wot=s(zI);n_o=r(wot,"from_pretrained()"),wot.forEach(t),s_o=r(DZ," to load the model weights."),DZ.forEach(t),l_o=i(Vw),T(fp.$$.fragment,Vw),Vw.forEach(t),i_o=i(Os),Je=n(Os,"DIV",{class:!0});var ra=s(Je);T(hy.$$.fragment,ra),d_o=i(ra),zse=n(ra,"P",{});var Aot=s(zse);c_o=r(Aot,"Instantiate one of the base model classes of the library from a pretrained model."),Aot.forEach(t),f_o=i(ra),xa=n(ra,"P",{});var Xw=s(xa);m_o=r(Xw,"The model class to instantiate is selected based on the "),Wse=n(Xw,"CODE",{});var yot=s(Wse);g_o=r(yot,"model_type"),yot.forEach(t),h_o=r(Xw,` property of the config object (either
passed as an argument or loaded from `),Qse=n(Xw,"CODE",{});var Lot=s(Qse);p_o=r(Lot,"pretrained_model_name_or_path"),Lot.forEach(t),__o=r(Xw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hse=n(Xw,"CODE",{});var xot=s(Hse);u_o=r(xot,"pretrained_model_name_or_path"),xot.forEach(t),b_o=r(Xw,":"),Xw.forEach(t),v_o=i(ra),x=n(ra,"UL",{});var $=s(x);mp=n($,"LI",{});var F6e=s(mp);Use=n(F6e,"STRONG",{});var $ot=s(Use);F_o=r($ot,"albert"),$ot.forEach(t),T_o=r(F6e," \u2014 "),WI=n(F6e,"A",{href:!0});var kot=s(WI);M_o=r(kot,"AlbertModel"),kot.forEach(t),E_o=r(F6e," (ALBERT model)"),F6e.forEach(t),C_o=i($),gp=n($,"LI",{});var T6e=s(gp);Jse=n(T6e,"STRONG",{});var Sot=s(Jse);w_o=r(Sot,"bart"),Sot.forEach(t),A_o=r(T6e," \u2014 "),QI=n(T6e,"A",{href:!0});var Rot=s(QI);y_o=r(Rot,"BartModel"),Rot.forEach(t),L_o=r(T6e," (BART model)"),T6e.forEach(t),x_o=i($),hp=n($,"LI",{});var M6e=s(hp);Yse=n(M6e,"STRONG",{});var Pot=s(Yse);$_o=r(Pot,"beit"),Pot.forEach(t),k_o=r(M6e," \u2014 "),HI=n(M6e,"A",{href:!0});var Bot=s(HI);S_o=r(Bot,"BeitModel"),Bot.forEach(t),R_o=r(M6e," (BEiT model)"),M6e.forEach(t),P_o=i($),pp=n($,"LI",{});var E6e=s(pp);Kse=n(E6e,"STRONG",{});var Iot=s(Kse);B_o=r(Iot,"bert"),Iot.forEach(t),I_o=r(E6e," \u2014 "),UI=n(E6e,"A",{href:!0});var Not=s(UI);N_o=r(Not,"BertModel"),Not.forEach(t),q_o=r(E6e," (BERT model)"),E6e.forEach(t),j_o=i($),_p=n($,"LI",{});var C6e=s(_p);Zse=n(C6e,"STRONG",{});var qot=s(Zse);D_o=r(qot,"bert-generation"),qot.forEach(t),G_o=r(C6e," \u2014 "),JI=n(C6e,"A",{href:!0});var jot=s(JI);O_o=r(jot,"BertGenerationEncoder"),jot.forEach(t),V_o=r(C6e," (Bert Generation model)"),C6e.forEach(t),X_o=i($),up=n($,"LI",{});var w6e=s(up);ele=n(w6e,"STRONG",{});var Dot=s(ele);z_o=r(Dot,"big_bird"),Dot.forEach(t),W_o=r(w6e," \u2014 "),YI=n(w6e,"A",{href:!0});var Got=s(YI);Q_o=r(Got,"BigBirdModel"),Got.forEach(t),H_o=r(w6e," (BigBird model)"),w6e.forEach(t),U_o=i($),bp=n($,"LI",{});var A6e=s(bp);ole=n(A6e,"STRONG",{});var Oot=s(ole);J_o=r(Oot,"bigbird_pegasus"),Oot.forEach(t),Y_o=r(A6e," \u2014 "),KI=n(A6e,"A",{href:!0});var Vot=s(KI);K_o=r(Vot,"BigBirdPegasusModel"),Vot.forEach(t),Z_o=r(A6e," (BigBird-Pegasus model)"),A6e.forEach(t),euo=i($),vp=n($,"LI",{});var y6e=s(vp);rle=n(y6e,"STRONG",{});var Xot=s(rle);ouo=r(Xot,"blenderbot"),Xot.forEach(t),ruo=r(y6e," \u2014 "),ZI=n(y6e,"A",{href:!0});var zot=s(ZI);tuo=r(zot,"BlenderbotModel"),zot.forEach(t),auo=r(y6e," (Blenderbot model)"),y6e.forEach(t),nuo=i($),Fp=n($,"LI",{});var L6e=s(Fp);tle=n(L6e,"STRONG",{});var Wot=s(tle);suo=r(Wot,"blenderbot-small"),Wot.forEach(t),luo=r(L6e," \u2014 "),eN=n(L6e,"A",{href:!0});var Qot=s(eN);iuo=r(Qot,"BlenderbotSmallModel"),Qot.forEach(t),duo=r(L6e," (BlenderbotSmall model)"),L6e.forEach(t),cuo=i($),Tp=n($,"LI",{});var x6e=s(Tp);ale=n(x6e,"STRONG",{});var Hot=s(ale);fuo=r(Hot,"camembert"),Hot.forEach(t),muo=r(x6e," \u2014 "),oN=n(x6e,"A",{href:!0});var Uot=s(oN);guo=r(Uot,"CamembertModel"),Uot.forEach(t),huo=r(x6e," (CamemBERT model)"),x6e.forEach(t),puo=i($),Mp=n($,"LI",{});var $6e=s(Mp);nle=n($6e,"STRONG",{});var Jot=s(nle);_uo=r(Jot,"canine"),Jot.forEach(t),uuo=r($6e," \u2014 "),rN=n($6e,"A",{href:!0});var Yot=s(rN);buo=r(Yot,"CanineModel"),Yot.forEach(t),vuo=r($6e," (CANINE model)"),$6e.forEach(t),Fuo=i($),Ep=n($,"LI",{});var k6e=s(Ep);sle=n(k6e,"STRONG",{});var Kot=s(sle);Tuo=r(Kot,"clip"),Kot.forEach(t),Muo=r(k6e," \u2014 "),tN=n(k6e,"A",{href:!0});var Zot=s(tN);Euo=r(Zot,"CLIPModel"),Zot.forEach(t),Cuo=r(k6e," (CLIP model)"),k6e.forEach(t),wuo=i($),Cp=n($,"LI",{});var S6e=s(Cp);lle=n(S6e,"STRONG",{});var ert=s(lle);Auo=r(ert,"convbert"),ert.forEach(t),yuo=r(S6e," \u2014 "),aN=n(S6e,"A",{href:!0});var ort=s(aN);Luo=r(ort,"ConvBertModel"),ort.forEach(t),xuo=r(S6e," (ConvBERT model)"),S6e.forEach(t),$uo=i($),wp=n($,"LI",{});var R6e=s(wp);ile=n(R6e,"STRONG",{});var rrt=s(ile);kuo=r(rrt,"convnext"),rrt.forEach(t),Suo=r(R6e," \u2014 "),nN=n(R6e,"A",{href:!0});var trt=s(nN);Ruo=r(trt,"ConvNextModel"),trt.forEach(t),Puo=r(R6e," (ConvNeXT model)"),R6e.forEach(t),Buo=i($),Ap=n($,"LI",{});var P6e=s(Ap);dle=n(P6e,"STRONG",{});var art=s(dle);Iuo=r(art,"ctrl"),art.forEach(t),Nuo=r(P6e," \u2014 "),sN=n(P6e,"A",{href:!0});var nrt=s(sN);quo=r(nrt,"CTRLModel"),nrt.forEach(t),juo=r(P6e," (CTRL model)"),P6e.forEach(t),Duo=i($),yp=n($,"LI",{});var B6e=s(yp);cle=n(B6e,"STRONG",{});var srt=s(cle);Guo=r(srt,"cvt"),srt.forEach(t),Ouo=r(B6e," \u2014 "),lN=n(B6e,"A",{href:!0});var lrt=s(lN);Vuo=r(lrt,"CvtModel"),lrt.forEach(t),Xuo=r(B6e," (CvT model)"),B6e.forEach(t),zuo=i($),Lp=n($,"LI",{});var I6e=s(Lp);fle=n(I6e,"STRONG",{});var irt=s(fle);Wuo=r(irt,"data2vec-audio"),irt.forEach(t),Quo=r(I6e," \u2014 "),iN=n(I6e,"A",{href:!0});var drt=s(iN);Huo=r(drt,"Data2VecAudioModel"),drt.forEach(t),Uuo=r(I6e," (Data2VecAudio model)"),I6e.forEach(t),Juo=i($),xp=n($,"LI",{});var N6e=s(xp);mle=n(N6e,"STRONG",{});var crt=s(mle);Yuo=r(crt,"data2vec-text"),crt.forEach(t),Kuo=r(N6e," \u2014 "),dN=n(N6e,"A",{href:!0});var frt=s(dN);Zuo=r(frt,"Data2VecTextModel"),frt.forEach(t),e2o=r(N6e," (Data2VecText model)"),N6e.forEach(t),o2o=i($),$p=n($,"LI",{});var q6e=s($p);gle=n(q6e,"STRONG",{});var mrt=s(gle);r2o=r(mrt,"data2vec-vision"),mrt.forEach(t),t2o=r(q6e," \u2014 "),cN=n(q6e,"A",{href:!0});var grt=s(cN);a2o=r(grt,"Data2VecVisionModel"),grt.forEach(t),n2o=r(q6e," (Data2VecVision model)"),q6e.forEach(t),s2o=i($),kp=n($,"LI",{});var j6e=s(kp);hle=n(j6e,"STRONG",{});var hrt=s(hle);l2o=r(hrt,"deberta"),hrt.forEach(t),i2o=r(j6e," \u2014 "),fN=n(j6e,"A",{href:!0});var prt=s(fN);d2o=r(prt,"DebertaModel"),prt.forEach(t),c2o=r(j6e," (DeBERTa model)"),j6e.forEach(t),f2o=i($),Sp=n($,"LI",{});var D6e=s(Sp);ple=n(D6e,"STRONG",{});var _rt=s(ple);m2o=r(_rt,"deberta-v2"),_rt.forEach(t),g2o=r(D6e," \u2014 "),mN=n(D6e,"A",{href:!0});var urt=s(mN);h2o=r(urt,"DebertaV2Model"),urt.forEach(t),p2o=r(D6e," (DeBERTa-v2 model)"),D6e.forEach(t),_2o=i($),Rp=n($,"LI",{});var G6e=s(Rp);_le=n(G6e,"STRONG",{});var brt=s(_le);u2o=r(brt,"decision_transformer"),brt.forEach(t),b2o=r(G6e," \u2014 "),gN=n(G6e,"A",{href:!0});var vrt=s(gN);v2o=r(vrt,"DecisionTransformerModel"),vrt.forEach(t),F2o=r(G6e," (Decision Transformer model)"),G6e.forEach(t),T2o=i($),Pp=n($,"LI",{});var O6e=s(Pp);ule=n(O6e,"STRONG",{});var Frt=s(ule);M2o=r(Frt,"deit"),Frt.forEach(t),E2o=r(O6e," \u2014 "),hN=n(O6e,"A",{href:!0});var Trt=s(hN);C2o=r(Trt,"DeiTModel"),Trt.forEach(t),w2o=r(O6e," (DeiT model)"),O6e.forEach(t),A2o=i($),Bp=n($,"LI",{});var V6e=s(Bp);ble=n(V6e,"STRONG",{});var Mrt=s(ble);y2o=r(Mrt,"detr"),Mrt.forEach(t),L2o=r(V6e," \u2014 "),pN=n(V6e,"A",{href:!0});var Ert=s(pN);x2o=r(Ert,"DetrModel"),Ert.forEach(t),$2o=r(V6e," (DETR model)"),V6e.forEach(t),k2o=i($),Ip=n($,"LI",{});var X6e=s(Ip);vle=n(X6e,"STRONG",{});var Crt=s(vle);S2o=r(Crt,"distilbert"),Crt.forEach(t),R2o=r(X6e," \u2014 "),_N=n(X6e,"A",{href:!0});var wrt=s(_N);P2o=r(wrt,"DistilBertModel"),wrt.forEach(t),B2o=r(X6e," (DistilBERT model)"),X6e.forEach(t),I2o=i($),Np=n($,"LI",{});var z6e=s(Np);Fle=n(z6e,"STRONG",{});var Art=s(Fle);N2o=r(Art,"dpr"),Art.forEach(t),q2o=r(z6e," \u2014 "),uN=n(z6e,"A",{href:!0});var yrt=s(uN);j2o=r(yrt,"DPRQuestionEncoder"),yrt.forEach(t),D2o=r(z6e," (DPR model)"),z6e.forEach(t),G2o=i($),qp=n($,"LI",{});var W6e=s(qp);Tle=n(W6e,"STRONG",{});var Lrt=s(Tle);O2o=r(Lrt,"dpt"),Lrt.forEach(t),V2o=r(W6e," \u2014 "),bN=n(W6e,"A",{href:!0});var xrt=s(bN);X2o=r(xrt,"DPTModel"),xrt.forEach(t),z2o=r(W6e," (DPT model)"),W6e.forEach(t),W2o=i($),jp=n($,"LI",{});var Q6e=s(jp);Mle=n(Q6e,"STRONG",{});var $rt=s(Mle);Q2o=r($rt,"electra"),$rt.forEach(t),H2o=r(Q6e," \u2014 "),vN=n(Q6e,"A",{href:!0});var krt=s(vN);U2o=r(krt,"ElectraModel"),krt.forEach(t),J2o=r(Q6e," (ELECTRA model)"),Q6e.forEach(t),Y2o=i($),Dp=n($,"LI",{});var H6e=s(Dp);Ele=n(H6e,"STRONG",{});var Srt=s(Ele);K2o=r(Srt,"flaubert"),Srt.forEach(t),Z2o=r(H6e," \u2014 "),FN=n(H6e,"A",{href:!0});var Rrt=s(FN);e1o=r(Rrt,"FlaubertModel"),Rrt.forEach(t),o1o=r(H6e," (FlauBERT model)"),H6e.forEach(t),r1o=i($),Gp=n($,"LI",{});var U6e=s(Gp);Cle=n(U6e,"STRONG",{});var Prt=s(Cle);t1o=r(Prt,"flava"),Prt.forEach(t),a1o=r(U6e," \u2014 "),TN=n(U6e,"A",{href:!0});var Brt=s(TN);n1o=r(Brt,"FlavaModel"),Brt.forEach(t),s1o=r(U6e," (FLAVA model)"),U6e.forEach(t),l1o=i($),Op=n($,"LI",{});var J6e=s(Op);wle=n(J6e,"STRONG",{});var Irt=s(wle);i1o=r(Irt,"fnet"),Irt.forEach(t),d1o=r(J6e," \u2014 "),MN=n(J6e,"A",{href:!0});var Nrt=s(MN);c1o=r(Nrt,"FNetModel"),Nrt.forEach(t),f1o=r(J6e," (FNet model)"),J6e.forEach(t),m1o=i($),Vp=n($,"LI",{});var Y6e=s(Vp);Ale=n(Y6e,"STRONG",{});var qrt=s(Ale);g1o=r(qrt,"fsmt"),qrt.forEach(t),h1o=r(Y6e," \u2014 "),EN=n(Y6e,"A",{href:!0});var jrt=s(EN);p1o=r(jrt,"FSMTModel"),jrt.forEach(t),_1o=r(Y6e," (FairSeq Machine-Translation model)"),Y6e.forEach(t),u1o=i($),Ps=n($,"LI",{});var Z$=s(Ps);yle=n(Z$,"STRONG",{});var Drt=s(yle);b1o=r(Drt,"funnel"),Drt.forEach(t),v1o=r(Z$," \u2014 "),CN=n(Z$,"A",{href:!0});var Grt=s(CN);F1o=r(Grt,"FunnelModel"),Grt.forEach(t),T1o=r(Z$," or "),wN=n(Z$,"A",{href:!0});var Ort=s(wN);M1o=r(Ort,"FunnelBaseModel"),Ort.forEach(t),E1o=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),C1o=i($),Xp=n($,"LI",{});var K6e=s(Xp);Lle=n(K6e,"STRONG",{});var Vrt=s(Lle);w1o=r(Vrt,"glpn"),Vrt.forEach(t),A1o=r(K6e," \u2014 "),AN=n(K6e,"A",{href:!0});var Xrt=s(AN);y1o=r(Xrt,"GLPNModel"),Xrt.forEach(t),L1o=r(K6e," (GLPN model)"),K6e.forEach(t),x1o=i($),zp=n($,"LI",{});var Z6e=s(zp);xle=n(Z6e,"STRONG",{});var zrt=s(xle);$1o=r(zrt,"gpt2"),zrt.forEach(t),k1o=r(Z6e," \u2014 "),yN=n(Z6e,"A",{href:!0});var Wrt=s(yN);S1o=r(Wrt,"GPT2Model"),Wrt.forEach(t),R1o=r(Z6e," (OpenAI GPT-2 model)"),Z6e.forEach(t),P1o=i($),Wp=n($,"LI",{});var eye=s(Wp);$le=n(eye,"STRONG",{});var Qrt=s($le);B1o=r(Qrt,"gpt_neo"),Qrt.forEach(t),I1o=r(eye," \u2014 "),LN=n(eye,"A",{href:!0});var Hrt=s(LN);N1o=r(Hrt,"GPTNeoModel"),Hrt.forEach(t),q1o=r(eye," (GPT Neo model)"),eye.forEach(t),j1o=i($),Qp=n($,"LI",{});var oye=s(Qp);kle=n(oye,"STRONG",{});var Urt=s(kle);D1o=r(Urt,"gpt_neox"),Urt.forEach(t),G1o=r(oye," \u2014 "),xN=n(oye,"A",{href:!0});var Jrt=s(xN);O1o=r(Jrt,"GPTNeoXModel"),Jrt.forEach(t),V1o=r(oye," (GPT NeoX model)"),oye.forEach(t),X1o=i($),Hp=n($,"LI",{});var rye=s(Hp);Sle=n(rye,"STRONG",{});var Yrt=s(Sle);z1o=r(Yrt,"gptj"),Yrt.forEach(t),W1o=r(rye," \u2014 "),$N=n(rye,"A",{href:!0});var Krt=s($N);Q1o=r(Krt,"GPTJModel"),Krt.forEach(t),H1o=r(rye," (GPT-J model)"),rye.forEach(t),U1o=i($),Up=n($,"LI",{});var tye=s(Up);Rle=n(tye,"STRONG",{});var Zrt=s(Rle);J1o=r(Zrt,"hubert"),Zrt.forEach(t),Y1o=r(tye," \u2014 "),kN=n(tye,"A",{href:!0});var ett=s(kN);K1o=r(ett,"HubertModel"),ett.forEach(t),Z1o=r(tye," (Hubert model)"),tye.forEach(t),e7o=i($),Jp=n($,"LI",{});var aye=s(Jp);Ple=n(aye,"STRONG",{});var ott=s(Ple);o7o=r(ott,"ibert"),ott.forEach(t),r7o=r(aye," \u2014 "),SN=n(aye,"A",{href:!0});var rtt=s(SN);t7o=r(rtt,"IBertModel"),rtt.forEach(t),a7o=r(aye," (I-BERT model)"),aye.forEach(t),n7o=i($),Yp=n($,"LI",{});var nye=s(Yp);Ble=n(nye,"STRONG",{});var ttt=s(Ble);s7o=r(ttt,"imagegpt"),ttt.forEach(t),l7o=r(nye," \u2014 "),RN=n(nye,"A",{href:!0});var att=s(RN);i7o=r(att,"ImageGPTModel"),att.forEach(t),d7o=r(nye," (ImageGPT model)"),nye.forEach(t),c7o=i($),Kp=n($,"LI",{});var sye=s(Kp);Ile=n(sye,"STRONG",{});var ntt=s(Ile);f7o=r(ntt,"layoutlm"),ntt.forEach(t),m7o=r(sye," \u2014 "),PN=n(sye,"A",{href:!0});var stt=s(PN);g7o=r(stt,"LayoutLMModel"),stt.forEach(t),h7o=r(sye," (LayoutLM model)"),sye.forEach(t),p7o=i($),Zp=n($,"LI",{});var lye=s(Zp);Nle=n(lye,"STRONG",{});var ltt=s(Nle);_7o=r(ltt,"layoutlmv2"),ltt.forEach(t),u7o=r(lye," \u2014 "),BN=n(lye,"A",{href:!0});var itt=s(BN);b7o=r(itt,"LayoutLMv2Model"),itt.forEach(t),v7o=r(lye," (LayoutLMv2 model)"),lye.forEach(t),F7o=i($),e_=n($,"LI",{});var iye=s(e_);qle=n(iye,"STRONG",{});var dtt=s(qle);T7o=r(dtt,"layoutlmv3"),dtt.forEach(t),M7o=r(iye," \u2014 "),IN=n(iye,"A",{href:!0});var ctt=s(IN);E7o=r(ctt,"LayoutLMv3Model"),ctt.forEach(t),C7o=r(iye," (LayoutLMv3 model)"),iye.forEach(t),w7o=i($),o_=n($,"LI",{});var dye=s(o_);jle=n(dye,"STRONG",{});var ftt=s(jle);A7o=r(ftt,"led"),ftt.forEach(t),y7o=r(dye," \u2014 "),NN=n(dye,"A",{href:!0});var mtt=s(NN);L7o=r(mtt,"LEDModel"),mtt.forEach(t),x7o=r(dye," (LED model)"),dye.forEach(t),$7o=i($),r_=n($,"LI",{});var cye=s(r_);Dle=n(cye,"STRONG",{});var gtt=s(Dle);k7o=r(gtt,"levit"),gtt.forEach(t),S7o=r(cye," \u2014 "),qN=n(cye,"A",{href:!0});var htt=s(qN);R7o=r(htt,"LevitModel"),htt.forEach(t),P7o=r(cye," (LeViT model)"),cye.forEach(t),B7o=i($),t_=n($,"LI",{});var fye=s(t_);Gle=n(fye,"STRONG",{});var ptt=s(Gle);I7o=r(ptt,"longformer"),ptt.forEach(t),N7o=r(fye," \u2014 "),jN=n(fye,"A",{href:!0});var _tt=s(jN);q7o=r(_tt,"LongformerModel"),_tt.forEach(t),j7o=r(fye," (Longformer model)"),fye.forEach(t),D7o=i($),a_=n($,"LI",{});var mye=s(a_);Ole=n(mye,"STRONG",{});var utt=s(Ole);G7o=r(utt,"luke"),utt.forEach(t),O7o=r(mye," \u2014 "),DN=n(mye,"A",{href:!0});var btt=s(DN);V7o=r(btt,"LukeModel"),btt.forEach(t),X7o=r(mye," (LUKE model)"),mye.forEach(t),z7o=i($),n_=n($,"LI",{});var gye=s(n_);Vle=n(gye,"STRONG",{});var vtt=s(Vle);W7o=r(vtt,"lxmert"),vtt.forEach(t),Q7o=r(gye," \u2014 "),GN=n(gye,"A",{href:!0});var Ftt=s(GN);H7o=r(Ftt,"LxmertModel"),Ftt.forEach(t),U7o=r(gye," (LXMERT model)"),gye.forEach(t),J7o=i($),s_=n($,"LI",{});var hye=s(s_);Xle=n(hye,"STRONG",{});var Ttt=s(Xle);Y7o=r(Ttt,"m2m_100"),Ttt.forEach(t),K7o=r(hye," \u2014 "),ON=n(hye,"A",{href:!0});var Mtt=s(ON);Z7o=r(Mtt,"M2M100Model"),Mtt.forEach(t),ebo=r(hye," (M2M100 model)"),hye.forEach(t),obo=i($),l_=n($,"LI",{});var pye=s(l_);zle=n(pye,"STRONG",{});var Ett=s(zle);rbo=r(Ett,"marian"),Ett.forEach(t),tbo=r(pye," \u2014 "),VN=n(pye,"A",{href:!0});var Ctt=s(VN);abo=r(Ctt,"MarianModel"),Ctt.forEach(t),nbo=r(pye," (Marian model)"),pye.forEach(t),sbo=i($),i_=n($,"LI",{});var _ye=s(i_);Wle=n(_ye,"STRONG",{});var wtt=s(Wle);lbo=r(wtt,"maskformer"),wtt.forEach(t),ibo=r(_ye," \u2014 "),XN=n(_ye,"A",{href:!0});var Att=s(XN);dbo=r(Att,"MaskFormerModel"),Att.forEach(t),cbo=r(_ye," (MaskFormer model)"),_ye.forEach(t),fbo=i($),d_=n($,"LI",{});var uye=s(d_);Qle=n(uye,"STRONG",{});var ytt=s(Qle);mbo=r(ytt,"mbart"),ytt.forEach(t),gbo=r(uye," \u2014 "),zN=n(uye,"A",{href:!0});var Ltt=s(zN);hbo=r(Ltt,"MBartModel"),Ltt.forEach(t),pbo=r(uye," (mBART model)"),uye.forEach(t),_bo=i($),c_=n($,"LI",{});var bye=s(c_);Hle=n(bye,"STRONG",{});var xtt=s(Hle);ubo=r(xtt,"megatron-bert"),xtt.forEach(t),bbo=r(bye," \u2014 "),WN=n(bye,"A",{href:!0});var $tt=s(WN);vbo=r($tt,"MegatronBertModel"),$tt.forEach(t),Fbo=r(bye," (Megatron-BERT model)"),bye.forEach(t),Tbo=i($),f_=n($,"LI",{});var vye=s(f_);Ule=n(vye,"STRONG",{});var ktt=s(Ule);Mbo=r(ktt,"mobilebert"),ktt.forEach(t),Ebo=r(vye," \u2014 "),QN=n(vye,"A",{href:!0});var Stt=s(QN);Cbo=r(Stt,"MobileBertModel"),Stt.forEach(t),wbo=r(vye," (MobileBERT model)"),vye.forEach(t),Abo=i($),m_=n($,"LI",{});var Fye=s(m_);Jle=n(Fye,"STRONG",{});var Rtt=s(Jle);ybo=r(Rtt,"mpnet"),Rtt.forEach(t),Lbo=r(Fye," \u2014 "),HN=n(Fye,"A",{href:!0});var Ptt=s(HN);xbo=r(Ptt,"MPNetModel"),Ptt.forEach(t),$bo=r(Fye," (MPNet model)"),Fye.forEach(t),kbo=i($),g_=n($,"LI",{});var Tye=s(g_);Yle=n(Tye,"STRONG",{});var Btt=s(Yle);Sbo=r(Btt,"mt5"),Btt.forEach(t),Rbo=r(Tye," \u2014 "),UN=n(Tye,"A",{href:!0});var Itt=s(UN);Pbo=r(Itt,"MT5Model"),Itt.forEach(t),Bbo=r(Tye," (MT5 model)"),Tye.forEach(t),Ibo=i($),h_=n($,"LI",{});var Mye=s(h_);Kle=n(Mye,"STRONG",{});var Ntt=s(Kle);Nbo=r(Ntt,"nystromformer"),Ntt.forEach(t),qbo=r(Mye," \u2014 "),JN=n(Mye,"A",{href:!0});var qtt=s(JN);jbo=r(qtt,"NystromformerModel"),qtt.forEach(t),Dbo=r(Mye," (Nystr\xF6mformer model)"),Mye.forEach(t),Gbo=i($),p_=n($,"LI",{});var Eye=s(p_);Zle=n(Eye,"STRONG",{});var jtt=s(Zle);Obo=r(jtt,"openai-gpt"),jtt.forEach(t),Vbo=r(Eye," \u2014 "),YN=n(Eye,"A",{href:!0});var Dtt=s(YN);Xbo=r(Dtt,"OpenAIGPTModel"),Dtt.forEach(t),zbo=r(Eye," (OpenAI GPT model)"),Eye.forEach(t),Wbo=i($),__=n($,"LI",{});var Cye=s(__);eie=n(Cye,"STRONG",{});var Gtt=s(eie);Qbo=r(Gtt,"opt"),Gtt.forEach(t),Hbo=r(Cye," \u2014 "),KN=n(Cye,"A",{href:!0});var Ott=s(KN);Ubo=r(Ott,"OPTModel"),Ott.forEach(t),Jbo=r(Cye," (OPT model)"),Cye.forEach(t),Ybo=i($),u_=n($,"LI",{});var wye=s(u_);oie=n(wye,"STRONG",{});var Vtt=s(oie);Kbo=r(Vtt,"pegasus"),Vtt.forEach(t),Zbo=r(wye," \u2014 "),ZN=n(wye,"A",{href:!0});var Xtt=s(ZN);e4o=r(Xtt,"PegasusModel"),Xtt.forEach(t),o4o=r(wye," (Pegasus model)"),wye.forEach(t),r4o=i($),b_=n($,"LI",{});var Aye=s(b_);rie=n(Aye,"STRONG",{});var ztt=s(rie);t4o=r(ztt,"perceiver"),ztt.forEach(t),a4o=r(Aye," \u2014 "),eq=n(Aye,"A",{href:!0});var Wtt=s(eq);n4o=r(Wtt,"PerceiverModel"),Wtt.forEach(t),s4o=r(Aye," (Perceiver model)"),Aye.forEach(t),l4o=i($),v_=n($,"LI",{});var yye=s(v_);tie=n(yye,"STRONG",{});var Qtt=s(tie);i4o=r(Qtt,"plbart"),Qtt.forEach(t),d4o=r(yye," \u2014 "),oq=n(yye,"A",{href:!0});var Htt=s(oq);c4o=r(Htt,"PLBartModel"),Htt.forEach(t),f4o=r(yye," (PLBart model)"),yye.forEach(t),m4o=i($),F_=n($,"LI",{});var Lye=s(F_);aie=n(Lye,"STRONG",{});var Utt=s(aie);g4o=r(Utt,"poolformer"),Utt.forEach(t),h4o=r(Lye," \u2014 "),rq=n(Lye,"A",{href:!0});var Jtt=s(rq);p4o=r(Jtt,"PoolFormerModel"),Jtt.forEach(t),_4o=r(Lye," (PoolFormer model)"),Lye.forEach(t),u4o=i($),T_=n($,"LI",{});var xye=s(T_);nie=n(xye,"STRONG",{});var Ytt=s(nie);b4o=r(Ytt,"prophetnet"),Ytt.forEach(t),v4o=r(xye," \u2014 "),tq=n(xye,"A",{href:!0});var Ktt=s(tq);F4o=r(Ktt,"ProphetNetModel"),Ktt.forEach(t),T4o=r(xye," (ProphetNet model)"),xye.forEach(t),M4o=i($),M_=n($,"LI",{});var $ye=s(M_);sie=n($ye,"STRONG",{});var Ztt=s(sie);E4o=r(Ztt,"qdqbert"),Ztt.forEach(t),C4o=r($ye," \u2014 "),aq=n($ye,"A",{href:!0});var eat=s(aq);w4o=r(eat,"QDQBertModel"),eat.forEach(t),A4o=r($ye," (QDQBert model)"),$ye.forEach(t),y4o=i($),E_=n($,"LI",{});var kye=s(E_);lie=n(kye,"STRONG",{});var oat=s(lie);L4o=r(oat,"reformer"),oat.forEach(t),x4o=r(kye," \u2014 "),nq=n(kye,"A",{href:!0});var rat=s(nq);$4o=r(rat,"ReformerModel"),rat.forEach(t),k4o=r(kye," (Reformer model)"),kye.forEach(t),S4o=i($),C_=n($,"LI",{});var Sye=s(C_);iie=n(Sye,"STRONG",{});var tat=s(iie);R4o=r(tat,"regnet"),tat.forEach(t),P4o=r(Sye," \u2014 "),sq=n(Sye,"A",{href:!0});var aat=s(sq);B4o=r(aat,"RegNetModel"),aat.forEach(t),I4o=r(Sye," (RegNet model)"),Sye.forEach(t),N4o=i($),w_=n($,"LI",{});var Rye=s(w_);die=n(Rye,"STRONG",{});var nat=s(die);q4o=r(nat,"rembert"),nat.forEach(t),j4o=r(Rye," \u2014 "),lq=n(Rye,"A",{href:!0});var sat=s(lq);D4o=r(sat,"RemBertModel"),sat.forEach(t),G4o=r(Rye," (RemBERT model)"),Rye.forEach(t),O4o=i($),A_=n($,"LI",{});var Pye=s(A_);cie=n(Pye,"STRONG",{});var lat=s(cie);V4o=r(lat,"resnet"),lat.forEach(t),X4o=r(Pye," \u2014 "),iq=n(Pye,"A",{href:!0});var iat=s(iq);z4o=r(iat,"ResNetModel"),iat.forEach(t),W4o=r(Pye," (ResNet model)"),Pye.forEach(t),Q4o=i($),y_=n($,"LI",{});var Bye=s(y_);fie=n(Bye,"STRONG",{});var dat=s(fie);H4o=r(dat,"retribert"),dat.forEach(t),U4o=r(Bye," \u2014 "),dq=n(Bye,"A",{href:!0});var cat=s(dq);J4o=r(cat,"RetriBertModel"),cat.forEach(t),Y4o=r(Bye," (RetriBERT model)"),Bye.forEach(t),K4o=i($),L_=n($,"LI",{});var Iye=s(L_);mie=n(Iye,"STRONG",{});var fat=s(mie);Z4o=r(fat,"roberta"),fat.forEach(t),evo=r(Iye," \u2014 "),cq=n(Iye,"A",{href:!0});var mat=s(cq);ovo=r(mat,"RobertaModel"),mat.forEach(t),rvo=r(Iye," (RoBERTa model)"),Iye.forEach(t),tvo=i($),x_=n($,"LI",{});var Nye=s(x_);gie=n(Nye,"STRONG",{});var gat=s(gie);avo=r(gat,"roformer"),gat.forEach(t),nvo=r(Nye," \u2014 "),fq=n(Nye,"A",{href:!0});var hat=s(fq);svo=r(hat,"RoFormerModel"),hat.forEach(t),lvo=r(Nye," (RoFormer model)"),Nye.forEach(t),ivo=i($),$_=n($,"LI",{});var qye=s($_);hie=n(qye,"STRONG",{});var pat=s(hie);dvo=r(pat,"segformer"),pat.forEach(t),cvo=r(qye," \u2014 "),mq=n(qye,"A",{href:!0});var _at=s(mq);fvo=r(_at,"SegformerModel"),_at.forEach(t),mvo=r(qye," (SegFormer model)"),qye.forEach(t),gvo=i($),k_=n($,"LI",{});var jye=s(k_);pie=n(jye,"STRONG",{});var uat=s(pie);hvo=r(uat,"sew"),uat.forEach(t),pvo=r(jye," \u2014 "),gq=n(jye,"A",{href:!0});var bat=s(gq);_vo=r(bat,"SEWModel"),bat.forEach(t),uvo=r(jye," (SEW model)"),jye.forEach(t),bvo=i($),S_=n($,"LI",{});var Dye=s(S_);_ie=n(Dye,"STRONG",{});var vat=s(_ie);vvo=r(vat,"sew-d"),vat.forEach(t),Fvo=r(Dye," \u2014 "),hq=n(Dye,"A",{href:!0});var Fat=s(hq);Tvo=r(Fat,"SEWDModel"),Fat.forEach(t),Mvo=r(Dye," (SEW-D model)"),Dye.forEach(t),Evo=i($),R_=n($,"LI",{});var Gye=s(R_);uie=n(Gye,"STRONG",{});var Tat=s(uie);Cvo=r(Tat,"speech_to_text"),Tat.forEach(t),wvo=r(Gye," \u2014 "),pq=n(Gye,"A",{href:!0});var Mat=s(pq);Avo=r(Mat,"Speech2TextModel"),Mat.forEach(t),yvo=r(Gye," (Speech2Text model)"),Gye.forEach(t),Lvo=i($),P_=n($,"LI",{});var Oye=s(P_);bie=n(Oye,"STRONG",{});var Eat=s(bie);xvo=r(Eat,"splinter"),Eat.forEach(t),$vo=r(Oye," \u2014 "),_q=n(Oye,"A",{href:!0});var Cat=s(_q);kvo=r(Cat,"SplinterModel"),Cat.forEach(t),Svo=r(Oye," (Splinter model)"),Oye.forEach(t),Rvo=i($),B_=n($,"LI",{});var Vye=s(B_);vie=n(Vye,"STRONG",{});var wat=s(vie);Pvo=r(wat,"squeezebert"),wat.forEach(t),Bvo=r(Vye," \u2014 "),uq=n(Vye,"A",{href:!0});var Aat=s(uq);Ivo=r(Aat,"SqueezeBertModel"),Aat.forEach(t),Nvo=r(Vye," (SqueezeBERT model)"),Vye.forEach(t),qvo=i($),I_=n($,"LI",{});var Xye=s(I_);Fie=n(Xye,"STRONG",{});var yat=s(Fie);jvo=r(yat,"swin"),yat.forEach(t),Dvo=r(Xye," \u2014 "),bq=n(Xye,"A",{href:!0});var Lat=s(bq);Gvo=r(Lat,"SwinModel"),Lat.forEach(t),Ovo=r(Xye," (Swin Transformer model)"),Xye.forEach(t),Vvo=i($),N_=n($,"LI",{});var zye=s(N_);Tie=n(zye,"STRONG",{});var xat=s(Tie);Xvo=r(xat,"t5"),xat.forEach(t),zvo=r(zye," \u2014 "),vq=n(zye,"A",{href:!0});var $at=s(vq);Wvo=r($at,"T5Model"),$at.forEach(t),Qvo=r(zye," (T5 model)"),zye.forEach(t),Hvo=i($),q_=n($,"LI",{});var Wye=s(q_);Mie=n(Wye,"STRONG",{});var kat=s(Mie);Uvo=r(kat,"tapas"),kat.forEach(t),Jvo=r(Wye," \u2014 "),Fq=n(Wye,"A",{href:!0});var Sat=s(Fq);Yvo=r(Sat,"TapasModel"),Sat.forEach(t),Kvo=r(Wye," (TAPAS model)"),Wye.forEach(t),Zvo=i($),j_=n($,"LI",{});var Qye=s(j_);Eie=n(Qye,"STRONG",{});var Rat=s(Eie);eFo=r(Rat,"trajectory_transformer"),Rat.forEach(t),oFo=r(Qye," \u2014 "),Tq=n(Qye,"A",{href:!0});var Pat=s(Tq);rFo=r(Pat,"TrajectoryTransformerModel"),Pat.forEach(t),tFo=r(Qye," (Trajectory Transformer model)"),Qye.forEach(t),aFo=i($),D_=n($,"LI",{});var Hye=s(D_);Cie=n(Hye,"STRONG",{});var Bat=s(Cie);nFo=r(Bat,"transfo-xl"),Bat.forEach(t),sFo=r(Hye," \u2014 "),Mq=n(Hye,"A",{href:!0});var Iat=s(Mq);lFo=r(Iat,"TransfoXLModel"),Iat.forEach(t),iFo=r(Hye," (Transformer-XL model)"),Hye.forEach(t),dFo=i($),G_=n($,"LI",{});var Uye=s(G_);wie=n(Uye,"STRONG",{});var Nat=s(wie);cFo=r(Nat,"unispeech"),Nat.forEach(t),fFo=r(Uye," \u2014 "),Eq=n(Uye,"A",{href:!0});var qat=s(Eq);mFo=r(qat,"UniSpeechModel"),qat.forEach(t),gFo=r(Uye," (UniSpeech model)"),Uye.forEach(t),hFo=i($),O_=n($,"LI",{});var Jye=s(O_);Aie=n(Jye,"STRONG",{});var jat=s(Aie);pFo=r(jat,"unispeech-sat"),jat.forEach(t),_Fo=r(Jye," \u2014 "),Cq=n(Jye,"A",{href:!0});var Dat=s(Cq);uFo=r(Dat,"UniSpeechSatModel"),Dat.forEach(t),bFo=r(Jye," (UniSpeechSat model)"),Jye.forEach(t),vFo=i($),V_=n($,"LI",{});var Yye=s(V_);yie=n(Yye,"STRONG",{});var Gat=s(yie);FFo=r(Gat,"van"),Gat.forEach(t),TFo=r(Yye," \u2014 "),wq=n(Yye,"A",{href:!0});var Oat=s(wq);MFo=r(Oat,"VanModel"),Oat.forEach(t),EFo=r(Yye," (VAN model)"),Yye.forEach(t),CFo=i($),X_=n($,"LI",{});var Kye=s(X_);Lie=n(Kye,"STRONG",{});var Vat=s(Lie);wFo=r(Vat,"vilt"),Vat.forEach(t),AFo=r(Kye," \u2014 "),Aq=n(Kye,"A",{href:!0});var Xat=s(Aq);yFo=r(Xat,"ViltModel"),Xat.forEach(t),LFo=r(Kye," (ViLT model)"),Kye.forEach(t),xFo=i($),z_=n($,"LI",{});var Zye=s(z_);xie=n(Zye,"STRONG",{});var zat=s(xie);$Fo=r(zat,"vision-text-dual-encoder"),zat.forEach(t),kFo=r(Zye," \u2014 "),yq=n(Zye,"A",{href:!0});var Wat=s(yq);SFo=r(Wat,"VisionTextDualEncoderModel"),Wat.forEach(t),RFo=r(Zye," (VisionTextDualEncoder model)"),Zye.forEach(t),PFo=i($),W_=n($,"LI",{});var eLe=s(W_);$ie=n(eLe,"STRONG",{});var Qat=s($ie);BFo=r(Qat,"visual_bert"),Qat.forEach(t),IFo=r(eLe," \u2014 "),Lq=n(eLe,"A",{href:!0});var Hat=s(Lq);NFo=r(Hat,"VisualBertModel"),Hat.forEach(t),qFo=r(eLe," (VisualBERT model)"),eLe.forEach(t),jFo=i($),Q_=n($,"LI",{});var oLe=s(Q_);kie=n(oLe,"STRONG",{});var Uat=s(kie);DFo=r(Uat,"vit"),Uat.forEach(t),GFo=r(oLe," \u2014 "),xq=n(oLe,"A",{href:!0});var Jat=s(xq);OFo=r(Jat,"ViTModel"),Jat.forEach(t),VFo=r(oLe," (ViT model)"),oLe.forEach(t),XFo=i($),H_=n($,"LI",{});var rLe=s(H_);Sie=n(rLe,"STRONG",{});var Yat=s(Sie);zFo=r(Yat,"vit_mae"),Yat.forEach(t),WFo=r(rLe," \u2014 "),$q=n(rLe,"A",{href:!0});var Kat=s($q);QFo=r(Kat,"ViTMAEModel"),Kat.forEach(t),HFo=r(rLe," (ViTMAE model)"),rLe.forEach(t),UFo=i($),U_=n($,"LI",{});var tLe=s(U_);Rie=n(tLe,"STRONG",{});var Zat=s(Rie);JFo=r(Zat,"wav2vec2"),Zat.forEach(t),YFo=r(tLe," \u2014 "),kq=n(tLe,"A",{href:!0});var ent=s(kq);KFo=r(ent,"Wav2Vec2Model"),ent.forEach(t),ZFo=r(tLe," (Wav2Vec2 model)"),tLe.forEach(t),eTo=i($),J_=n($,"LI",{});var aLe=s(J_);Pie=n(aLe,"STRONG",{});var ont=s(Pie);oTo=r(ont,"wav2vec2-conformer"),ont.forEach(t),rTo=r(aLe," \u2014 "),Sq=n(aLe,"A",{href:!0});var rnt=s(Sq);tTo=r(rnt,"Wav2Vec2ConformerModel"),rnt.forEach(t),aTo=r(aLe," (Wav2Vec2-Conformer model)"),aLe.forEach(t),nTo=i($),Y_=n($,"LI",{});var nLe=s(Y_);Bie=n(nLe,"STRONG",{});var tnt=s(Bie);sTo=r(tnt,"wavlm"),tnt.forEach(t),lTo=r(nLe," \u2014 "),Rq=n(nLe,"A",{href:!0});var ant=s(Rq);iTo=r(ant,"WavLMModel"),ant.forEach(t),dTo=r(nLe," (WavLM model)"),nLe.forEach(t),cTo=i($),K_=n($,"LI",{});var sLe=s(K_);Iie=n(sLe,"STRONG",{});var nnt=s(Iie);fTo=r(nnt,"xglm"),nnt.forEach(t),mTo=r(sLe," \u2014 "),Pq=n(sLe,"A",{href:!0});var snt=s(Pq);gTo=r(snt,"XGLMModel"),snt.forEach(t),hTo=r(sLe," (XGLM model)"),sLe.forEach(t),pTo=i($),Z_=n($,"LI",{});var lLe=s(Z_);Nie=n(lLe,"STRONG",{});var lnt=s(Nie);_To=r(lnt,"xlm"),lnt.forEach(t),uTo=r(lLe," \u2014 "),Bq=n(lLe,"A",{href:!0});var int=s(Bq);bTo=r(int,"XLMModel"),int.forEach(t),vTo=r(lLe," (XLM model)"),lLe.forEach(t),FTo=i($),eu=n($,"LI",{});var iLe=s(eu);qie=n(iLe,"STRONG",{});var dnt=s(qie);TTo=r(dnt,"xlm-prophetnet"),dnt.forEach(t),MTo=r(iLe," \u2014 "),Iq=n(iLe,"A",{href:!0});var cnt=s(Iq);ETo=r(cnt,"XLMProphetNetModel"),cnt.forEach(t),CTo=r(iLe," (XLM-ProphetNet model)"),iLe.forEach(t),wTo=i($),ou=n($,"LI",{});var dLe=s(ou);jie=n(dLe,"STRONG",{});var fnt=s(jie);ATo=r(fnt,"xlm-roberta"),fnt.forEach(t),yTo=r(dLe," \u2014 "),Nq=n(dLe,"A",{href:!0});var mnt=s(Nq);LTo=r(mnt,"XLMRobertaModel"),mnt.forEach(t),xTo=r(dLe," (XLM-RoBERTa model)"),dLe.forEach(t),$To=i($),ru=n($,"LI",{});var cLe=s(ru);Die=n(cLe,"STRONG",{});var gnt=s(Die);kTo=r(gnt,"xlm-roberta-xl"),gnt.forEach(t),STo=r(cLe," \u2014 "),qq=n(cLe,"A",{href:!0});var hnt=s(qq);RTo=r(hnt,"XLMRobertaXLModel"),hnt.forEach(t),PTo=r(cLe," (XLM-RoBERTa-XL model)"),cLe.forEach(t),BTo=i($),tu=n($,"LI",{});var fLe=s(tu);Gie=n(fLe,"STRONG",{});var pnt=s(Gie);ITo=r(pnt,"xlnet"),pnt.forEach(t),NTo=r(fLe," \u2014 "),jq=n(fLe,"A",{href:!0});var _nt=s(jq);qTo=r(_nt,"XLNetModel"),_nt.forEach(t),jTo=r(fLe," (XLNet model)"),fLe.forEach(t),DTo=i($),au=n($,"LI",{});var mLe=s(au);Oie=n(mLe,"STRONG",{});var unt=s(Oie);GTo=r(unt,"yolos"),unt.forEach(t),OTo=r(mLe," \u2014 "),Dq=n(mLe,"A",{href:!0});var bnt=s(Dq);VTo=r(bnt,"YolosModel"),bnt.forEach(t),XTo=r(mLe," (YOLOS model)"),mLe.forEach(t),zTo=i($),nu=n($,"LI",{});var gLe=s(nu);Vie=n(gLe,"STRONG",{});var vnt=s(Vie);WTo=r(vnt,"yoso"),vnt.forEach(t),QTo=r(gLe," \u2014 "),Gq=n(gLe,"A",{href:!0});var Fnt=s(Gq);HTo=r(Fnt,"YosoModel"),Fnt.forEach(t),UTo=r(gLe," (YOSO model)"),gLe.forEach(t),$.forEach(t),JTo=i(ra),su=n(ra,"P",{});var hLe=s(su);YTo=r(hLe,"The model is set in evaluation mode by default using "),Xie=n(hLe,"CODE",{});var Tnt=s(Xie);KTo=r(Tnt,"model.eval()"),Tnt.forEach(t),ZTo=r(hLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=n(hLe,"CODE",{});var Mnt=s(zie);eMo=r(Mnt,"model.train()"),Mnt.forEach(t),hLe.forEach(t),oMo=i(ra),T(lu.$$.fragment,ra),ra.forEach(t),Os.forEach(t),aje=i(f),$i=n(f,"H2",{class:!0});var iGe=s($i);iu=n(iGe,"A",{id:!0,class:!0,href:!0});var Ent=s(iu);Wie=n(Ent,"SPAN",{});var Cnt=s(Wie);T(py.$$.fragment,Cnt),Cnt.forEach(t),Ent.forEach(t),rMo=i(iGe),Qie=n(iGe,"SPAN",{});var wnt=s(Qie);tMo=r(wnt,"AutoModelForPreTraining"),wnt.forEach(t),iGe.forEach(t),nje=i(f),xo=n(f,"DIV",{class:!0});var Vs=s(xo);T(_y.$$.fragment,Vs),aMo=i(Vs),ki=n(Vs,"P",{});var GZ=s(ki);nMo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Oq=n(GZ,"A",{href:!0});var Ant=s(Oq);sMo=r(Ant,"from_pretrained()"),Ant.forEach(t),lMo=r(GZ," class method or the "),Vq=n(GZ,"A",{href:!0});var ynt=s(Vq);iMo=r(ynt,"from_config()"),ynt.forEach(t),dMo=r(GZ,` class
method.`),GZ.forEach(t),cMo=i(Vs),uy=n(Vs,"P",{});var dGe=s(uy);fMo=r(dGe,"This class cannot be instantiated directly using "),Hie=n(dGe,"CODE",{});var Lnt=s(Hie);mMo=r(Lnt,"__init__()"),Lnt.forEach(t),gMo=r(dGe," (throws an error)."),dGe.forEach(t),hMo=i(Vs),nt=n(Vs,"DIV",{class:!0});var zw=s(nt);T(by.$$.fragment,zw),pMo=i(zw),Uie=n(zw,"P",{});var xnt=s(Uie);_Mo=r(xnt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xnt.forEach(t),uMo=i(zw),Si=n(zw,"P",{});var OZ=s(Si);bMo=r(OZ,`Note:
Loading a model from its configuration file does `),Jie=n(OZ,"STRONG",{});var $nt=s(Jie);vMo=r($nt,"not"),$nt.forEach(t),FMo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xq=n(OZ,"A",{href:!0});var knt=s(Xq);TMo=r(knt,"from_pretrained()"),knt.forEach(t),MMo=r(OZ," to load the model weights."),OZ.forEach(t),EMo=i(zw),T(du.$$.fragment,zw),zw.forEach(t),CMo=i(Vs),Ye=n(Vs,"DIV",{class:!0});var ta=s(Ye);T(vy.$$.fragment,ta),wMo=i(ta),Yie=n(ta,"P",{});var Snt=s(Yie);AMo=r(Snt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Snt.forEach(t),yMo=i(ta),$a=n(ta,"P",{});var Ww=s($a);LMo=r(Ww,"The model class to instantiate is selected based on the "),Kie=n(Ww,"CODE",{});var Rnt=s(Kie);xMo=r(Rnt,"model_type"),Rnt.forEach(t),$Mo=r(Ww,` property of the config object (either
passed as an argument or loaded from `),Zie=n(Ww,"CODE",{});var Pnt=s(Zie);kMo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),SMo=r(Ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ede=n(Ww,"CODE",{});var Bnt=s(ede);RMo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),PMo=r(Ww,":"),Ww.forEach(t),BMo=i(ta),G=n(ta,"UL",{});var O=s(G);cu=n(O,"LI",{});var pLe=s(cu);ode=n(pLe,"STRONG",{});var Int=s(ode);IMo=r(Int,"albert"),Int.forEach(t),NMo=r(pLe," \u2014 "),zq=n(pLe,"A",{href:!0});var Nnt=s(zq);qMo=r(Nnt,"AlbertForPreTraining"),Nnt.forEach(t),jMo=r(pLe," (ALBERT model)"),pLe.forEach(t),DMo=i(O),fu=n(O,"LI",{});var _Le=s(fu);rde=n(_Le,"STRONG",{});var qnt=s(rde);GMo=r(qnt,"bart"),qnt.forEach(t),OMo=r(_Le," \u2014 "),Wq=n(_Le,"A",{href:!0});var jnt=s(Wq);VMo=r(jnt,"BartForConditionalGeneration"),jnt.forEach(t),XMo=r(_Le," (BART model)"),_Le.forEach(t),zMo=i(O),mu=n(O,"LI",{});var uLe=s(mu);tde=n(uLe,"STRONG",{});var Dnt=s(tde);WMo=r(Dnt,"bert"),Dnt.forEach(t),QMo=r(uLe," \u2014 "),Qq=n(uLe,"A",{href:!0});var Gnt=s(Qq);HMo=r(Gnt,"BertForPreTraining"),Gnt.forEach(t),UMo=r(uLe," (BERT model)"),uLe.forEach(t),JMo=i(O),gu=n(O,"LI",{});var bLe=s(gu);ade=n(bLe,"STRONG",{});var Ont=s(ade);YMo=r(Ont,"big_bird"),Ont.forEach(t),KMo=r(bLe," \u2014 "),Hq=n(bLe,"A",{href:!0});var Vnt=s(Hq);ZMo=r(Vnt,"BigBirdForPreTraining"),Vnt.forEach(t),eEo=r(bLe," (BigBird model)"),bLe.forEach(t),oEo=i(O),hu=n(O,"LI",{});var vLe=s(hu);nde=n(vLe,"STRONG",{});var Xnt=s(nde);rEo=r(Xnt,"camembert"),Xnt.forEach(t),tEo=r(vLe," \u2014 "),Uq=n(vLe,"A",{href:!0});var znt=s(Uq);aEo=r(znt,"CamembertForMaskedLM"),znt.forEach(t),nEo=r(vLe," (CamemBERT model)"),vLe.forEach(t),sEo=i(O),pu=n(O,"LI",{});var FLe=s(pu);sde=n(FLe,"STRONG",{});var Wnt=s(sde);lEo=r(Wnt,"ctrl"),Wnt.forEach(t),iEo=r(FLe," \u2014 "),Jq=n(FLe,"A",{href:!0});var Qnt=s(Jq);dEo=r(Qnt,"CTRLLMHeadModel"),Qnt.forEach(t),cEo=r(FLe," (CTRL model)"),FLe.forEach(t),fEo=i(O),_u=n(O,"LI",{});var TLe=s(_u);lde=n(TLe,"STRONG",{});var Hnt=s(lde);mEo=r(Hnt,"data2vec-text"),Hnt.forEach(t),gEo=r(TLe," \u2014 "),Yq=n(TLe,"A",{href:!0});var Unt=s(Yq);hEo=r(Unt,"Data2VecTextForMaskedLM"),Unt.forEach(t),pEo=r(TLe," (Data2VecText model)"),TLe.forEach(t),_Eo=i(O),uu=n(O,"LI",{});var MLe=s(uu);ide=n(MLe,"STRONG",{});var Jnt=s(ide);uEo=r(Jnt,"deberta"),Jnt.forEach(t),bEo=r(MLe," \u2014 "),Kq=n(MLe,"A",{href:!0});var Ynt=s(Kq);vEo=r(Ynt,"DebertaForMaskedLM"),Ynt.forEach(t),FEo=r(MLe," (DeBERTa model)"),MLe.forEach(t),TEo=i(O),bu=n(O,"LI",{});var ELe=s(bu);dde=n(ELe,"STRONG",{});var Knt=s(dde);MEo=r(Knt,"deberta-v2"),Knt.forEach(t),EEo=r(ELe," \u2014 "),Zq=n(ELe,"A",{href:!0});var Znt=s(Zq);CEo=r(Znt,"DebertaV2ForMaskedLM"),Znt.forEach(t),wEo=r(ELe," (DeBERTa-v2 model)"),ELe.forEach(t),AEo=i(O),vu=n(O,"LI",{});var CLe=s(vu);cde=n(CLe,"STRONG",{});var est=s(cde);yEo=r(est,"distilbert"),est.forEach(t),LEo=r(CLe," \u2014 "),ej=n(CLe,"A",{href:!0});var ost=s(ej);xEo=r(ost,"DistilBertForMaskedLM"),ost.forEach(t),$Eo=r(CLe," (DistilBERT model)"),CLe.forEach(t),kEo=i(O),Fu=n(O,"LI",{});var wLe=s(Fu);fde=n(wLe,"STRONG",{});var rst=s(fde);SEo=r(rst,"electra"),rst.forEach(t),REo=r(wLe," \u2014 "),oj=n(wLe,"A",{href:!0});var tst=s(oj);PEo=r(tst,"ElectraForPreTraining"),tst.forEach(t),BEo=r(wLe," (ELECTRA model)"),wLe.forEach(t),IEo=i(O),Tu=n(O,"LI",{});var ALe=s(Tu);mde=n(ALe,"STRONG",{});var ast=s(mde);NEo=r(ast,"flaubert"),ast.forEach(t),qEo=r(ALe," \u2014 "),rj=n(ALe,"A",{href:!0});var nst=s(rj);jEo=r(nst,"FlaubertWithLMHeadModel"),nst.forEach(t),DEo=r(ALe," (FlauBERT model)"),ALe.forEach(t),GEo=i(O),Mu=n(O,"LI",{});var yLe=s(Mu);gde=n(yLe,"STRONG",{});var sst=s(gde);OEo=r(sst,"flava"),sst.forEach(t),VEo=r(yLe," \u2014 "),tj=n(yLe,"A",{href:!0});var lst=s(tj);XEo=r(lst,"FlavaForPreTraining"),lst.forEach(t),zEo=r(yLe," (FLAVA model)"),yLe.forEach(t),WEo=i(O),Eu=n(O,"LI",{});var LLe=s(Eu);hde=n(LLe,"STRONG",{});var ist=s(hde);QEo=r(ist,"fnet"),ist.forEach(t),HEo=r(LLe," \u2014 "),aj=n(LLe,"A",{href:!0});var dst=s(aj);UEo=r(dst,"FNetForPreTraining"),dst.forEach(t),JEo=r(LLe," (FNet model)"),LLe.forEach(t),YEo=i(O),Cu=n(O,"LI",{});var xLe=s(Cu);pde=n(xLe,"STRONG",{});var cst=s(pde);KEo=r(cst,"fsmt"),cst.forEach(t),ZEo=r(xLe," \u2014 "),nj=n(xLe,"A",{href:!0});var fst=s(nj);eCo=r(fst,"FSMTForConditionalGeneration"),fst.forEach(t),oCo=r(xLe," (FairSeq Machine-Translation model)"),xLe.forEach(t),rCo=i(O),wu=n(O,"LI",{});var $Le=s(wu);_de=n($Le,"STRONG",{});var mst=s(_de);tCo=r(mst,"funnel"),mst.forEach(t),aCo=r($Le," \u2014 "),sj=n($Le,"A",{href:!0});var gst=s(sj);nCo=r(gst,"FunnelForPreTraining"),gst.forEach(t),sCo=r($Le," (Funnel Transformer model)"),$Le.forEach(t),lCo=i(O),Au=n(O,"LI",{});var kLe=s(Au);ude=n(kLe,"STRONG",{});var hst=s(ude);iCo=r(hst,"gpt2"),hst.forEach(t),dCo=r(kLe," \u2014 "),lj=n(kLe,"A",{href:!0});var pst=s(lj);cCo=r(pst,"GPT2LMHeadModel"),pst.forEach(t),fCo=r(kLe," (OpenAI GPT-2 model)"),kLe.forEach(t),mCo=i(O),yu=n(O,"LI",{});var SLe=s(yu);bde=n(SLe,"STRONG",{});var _st=s(bde);gCo=r(_st,"ibert"),_st.forEach(t),hCo=r(SLe," \u2014 "),ij=n(SLe,"A",{href:!0});var ust=s(ij);pCo=r(ust,"IBertForMaskedLM"),ust.forEach(t),_Co=r(SLe," (I-BERT model)"),SLe.forEach(t),uCo=i(O),Lu=n(O,"LI",{});var RLe=s(Lu);vde=n(RLe,"STRONG",{});var bst=s(vde);bCo=r(bst,"layoutlm"),bst.forEach(t),vCo=r(RLe," \u2014 "),dj=n(RLe,"A",{href:!0});var vst=s(dj);FCo=r(vst,"LayoutLMForMaskedLM"),vst.forEach(t),TCo=r(RLe," (LayoutLM model)"),RLe.forEach(t),MCo=i(O),xu=n(O,"LI",{});var PLe=s(xu);Fde=n(PLe,"STRONG",{});var Fst=s(Fde);ECo=r(Fst,"longformer"),Fst.forEach(t),CCo=r(PLe," \u2014 "),cj=n(PLe,"A",{href:!0});var Tst=s(cj);wCo=r(Tst,"LongformerForMaskedLM"),Tst.forEach(t),ACo=r(PLe," (Longformer model)"),PLe.forEach(t),yCo=i(O),$u=n(O,"LI",{});var BLe=s($u);Tde=n(BLe,"STRONG",{});var Mst=s(Tde);LCo=r(Mst,"lxmert"),Mst.forEach(t),xCo=r(BLe," \u2014 "),fj=n(BLe,"A",{href:!0});var Est=s(fj);$Co=r(Est,"LxmertForPreTraining"),Est.forEach(t),kCo=r(BLe," (LXMERT model)"),BLe.forEach(t),SCo=i(O),ku=n(O,"LI",{});var ILe=s(ku);Mde=n(ILe,"STRONG",{});var Cst=s(Mde);RCo=r(Cst,"megatron-bert"),Cst.forEach(t),PCo=r(ILe," \u2014 "),mj=n(ILe,"A",{href:!0});var wst=s(mj);BCo=r(wst,"MegatronBertForPreTraining"),wst.forEach(t),ICo=r(ILe," (Megatron-BERT model)"),ILe.forEach(t),NCo=i(O),Su=n(O,"LI",{});var NLe=s(Su);Ede=n(NLe,"STRONG",{});var Ast=s(Ede);qCo=r(Ast,"mobilebert"),Ast.forEach(t),jCo=r(NLe," \u2014 "),gj=n(NLe,"A",{href:!0});var yst=s(gj);DCo=r(yst,"MobileBertForPreTraining"),yst.forEach(t),GCo=r(NLe," (MobileBERT model)"),NLe.forEach(t),OCo=i(O),Ru=n(O,"LI",{});var qLe=s(Ru);Cde=n(qLe,"STRONG",{});var Lst=s(Cde);VCo=r(Lst,"mpnet"),Lst.forEach(t),XCo=r(qLe," \u2014 "),hj=n(qLe,"A",{href:!0});var xst=s(hj);zCo=r(xst,"MPNetForMaskedLM"),xst.forEach(t),WCo=r(qLe," (MPNet model)"),qLe.forEach(t),QCo=i(O),Pu=n(O,"LI",{});var jLe=s(Pu);wde=n(jLe,"STRONG",{});var $st=s(wde);HCo=r($st,"openai-gpt"),$st.forEach(t),UCo=r(jLe," \u2014 "),pj=n(jLe,"A",{href:!0});var kst=s(pj);JCo=r(kst,"OpenAIGPTLMHeadModel"),kst.forEach(t),YCo=r(jLe," (OpenAI GPT model)"),jLe.forEach(t),KCo=i(O),Bu=n(O,"LI",{});var DLe=s(Bu);Ade=n(DLe,"STRONG",{});var Sst=s(Ade);ZCo=r(Sst,"retribert"),Sst.forEach(t),e5o=r(DLe," \u2014 "),_j=n(DLe,"A",{href:!0});var Rst=s(_j);o5o=r(Rst,"RetriBertModel"),Rst.forEach(t),r5o=r(DLe," (RetriBERT model)"),DLe.forEach(t),t5o=i(O),Iu=n(O,"LI",{});var GLe=s(Iu);yde=n(GLe,"STRONG",{});var Pst=s(yde);a5o=r(Pst,"roberta"),Pst.forEach(t),n5o=r(GLe," \u2014 "),uj=n(GLe,"A",{href:!0});var Bst=s(uj);s5o=r(Bst,"RobertaForMaskedLM"),Bst.forEach(t),l5o=r(GLe," (RoBERTa model)"),GLe.forEach(t),i5o=i(O),Nu=n(O,"LI",{});var OLe=s(Nu);Lde=n(OLe,"STRONG",{});var Ist=s(Lde);d5o=r(Ist,"splinter"),Ist.forEach(t),c5o=r(OLe," \u2014 "),bj=n(OLe,"A",{href:!0});var Nst=s(bj);f5o=r(Nst,"SplinterForPreTraining"),Nst.forEach(t),m5o=r(OLe," (Splinter model)"),OLe.forEach(t),g5o=i(O),qu=n(O,"LI",{});var VLe=s(qu);xde=n(VLe,"STRONG",{});var qst=s(xde);h5o=r(qst,"squeezebert"),qst.forEach(t),p5o=r(VLe," \u2014 "),vj=n(VLe,"A",{href:!0});var jst=s(vj);_5o=r(jst,"SqueezeBertForMaskedLM"),jst.forEach(t),u5o=r(VLe," (SqueezeBERT model)"),VLe.forEach(t),b5o=i(O),ju=n(O,"LI",{});var XLe=s(ju);$de=n(XLe,"STRONG",{});var Dst=s($de);v5o=r(Dst,"t5"),Dst.forEach(t),F5o=r(XLe," \u2014 "),Fj=n(XLe,"A",{href:!0});var Gst=s(Fj);T5o=r(Gst,"T5ForConditionalGeneration"),Gst.forEach(t),M5o=r(XLe," (T5 model)"),XLe.forEach(t),E5o=i(O),Du=n(O,"LI",{});var zLe=s(Du);kde=n(zLe,"STRONG",{});var Ost=s(kde);C5o=r(Ost,"tapas"),Ost.forEach(t),w5o=r(zLe," \u2014 "),Tj=n(zLe,"A",{href:!0});var Vst=s(Tj);A5o=r(Vst,"TapasForMaskedLM"),Vst.forEach(t),y5o=r(zLe," (TAPAS model)"),zLe.forEach(t),L5o=i(O),Gu=n(O,"LI",{});var WLe=s(Gu);Sde=n(WLe,"STRONG",{});var Xst=s(Sde);x5o=r(Xst,"transfo-xl"),Xst.forEach(t),$5o=r(WLe," \u2014 "),Mj=n(WLe,"A",{href:!0});var zst=s(Mj);k5o=r(zst,"TransfoXLLMHeadModel"),zst.forEach(t),S5o=r(WLe," (Transformer-XL model)"),WLe.forEach(t),R5o=i(O),Ou=n(O,"LI",{});var QLe=s(Ou);Rde=n(QLe,"STRONG",{});var Wst=s(Rde);P5o=r(Wst,"unispeech"),Wst.forEach(t),B5o=r(QLe," \u2014 "),Ej=n(QLe,"A",{href:!0});var Qst=s(Ej);I5o=r(Qst,"UniSpeechForPreTraining"),Qst.forEach(t),N5o=r(QLe," (UniSpeech model)"),QLe.forEach(t),q5o=i(O),Vu=n(O,"LI",{});var HLe=s(Vu);Pde=n(HLe,"STRONG",{});var Hst=s(Pde);j5o=r(Hst,"unispeech-sat"),Hst.forEach(t),D5o=r(HLe," \u2014 "),Cj=n(HLe,"A",{href:!0});var Ust=s(Cj);G5o=r(Ust,"UniSpeechSatForPreTraining"),Ust.forEach(t),O5o=r(HLe," (UniSpeechSat model)"),HLe.forEach(t),V5o=i(O),Xu=n(O,"LI",{});var ULe=s(Xu);Bde=n(ULe,"STRONG",{});var Jst=s(Bde);X5o=r(Jst,"visual_bert"),Jst.forEach(t),z5o=r(ULe," \u2014 "),wj=n(ULe,"A",{href:!0});var Yst=s(wj);W5o=r(Yst,"VisualBertForPreTraining"),Yst.forEach(t),Q5o=r(ULe," (VisualBERT model)"),ULe.forEach(t),H5o=i(O),zu=n(O,"LI",{});var JLe=s(zu);Ide=n(JLe,"STRONG",{});var Kst=s(Ide);U5o=r(Kst,"vit_mae"),Kst.forEach(t),J5o=r(JLe," \u2014 "),Aj=n(JLe,"A",{href:!0});var Zst=s(Aj);Y5o=r(Zst,"ViTMAEForPreTraining"),Zst.forEach(t),K5o=r(JLe," (ViTMAE model)"),JLe.forEach(t),Z5o=i(O),Wu=n(O,"LI",{});var YLe=s(Wu);Nde=n(YLe,"STRONG",{});var elt=s(Nde);e3o=r(elt,"wav2vec2"),elt.forEach(t),o3o=r(YLe," \u2014 "),yj=n(YLe,"A",{href:!0});var olt=s(yj);r3o=r(olt,"Wav2Vec2ForPreTraining"),olt.forEach(t),t3o=r(YLe," (Wav2Vec2 model)"),YLe.forEach(t),a3o=i(O),Qu=n(O,"LI",{});var KLe=s(Qu);qde=n(KLe,"STRONG",{});var rlt=s(qde);n3o=r(rlt,"wav2vec2-conformer"),rlt.forEach(t),s3o=r(KLe," \u2014 "),Lj=n(KLe,"A",{href:!0});var tlt=s(Lj);l3o=r(tlt,"Wav2Vec2ConformerForPreTraining"),tlt.forEach(t),i3o=r(KLe," (Wav2Vec2-Conformer model)"),KLe.forEach(t),d3o=i(O),Hu=n(O,"LI",{});var ZLe=s(Hu);jde=n(ZLe,"STRONG",{});var alt=s(jde);c3o=r(alt,"xlm"),alt.forEach(t),f3o=r(ZLe," \u2014 "),xj=n(ZLe,"A",{href:!0});var nlt=s(xj);m3o=r(nlt,"XLMWithLMHeadModel"),nlt.forEach(t),g3o=r(ZLe," (XLM model)"),ZLe.forEach(t),h3o=i(O),Uu=n(O,"LI",{});var e8e=s(Uu);Dde=n(e8e,"STRONG",{});var slt=s(Dde);p3o=r(slt,"xlm-roberta"),slt.forEach(t),_3o=r(e8e," \u2014 "),$j=n(e8e,"A",{href:!0});var llt=s($j);u3o=r(llt,"XLMRobertaForMaskedLM"),llt.forEach(t),b3o=r(e8e," (XLM-RoBERTa model)"),e8e.forEach(t),v3o=i(O),Ju=n(O,"LI",{});var o8e=s(Ju);Gde=n(o8e,"STRONG",{});var ilt=s(Gde);F3o=r(ilt,"xlm-roberta-xl"),ilt.forEach(t),T3o=r(o8e," \u2014 "),kj=n(o8e,"A",{href:!0});var dlt=s(kj);M3o=r(dlt,"XLMRobertaXLForMaskedLM"),dlt.forEach(t),E3o=r(o8e," (XLM-RoBERTa-XL model)"),o8e.forEach(t),C3o=i(O),Yu=n(O,"LI",{});var r8e=s(Yu);Ode=n(r8e,"STRONG",{});var clt=s(Ode);w3o=r(clt,"xlnet"),clt.forEach(t),A3o=r(r8e," \u2014 "),Sj=n(r8e,"A",{href:!0});var flt=s(Sj);y3o=r(flt,"XLNetLMHeadModel"),flt.forEach(t),L3o=r(r8e," (XLNet model)"),r8e.forEach(t),O.forEach(t),x3o=i(ta),Ku=n(ta,"P",{});var t8e=s(Ku);$3o=r(t8e,"The model is set in evaluation mode by default using "),Vde=n(t8e,"CODE",{});var mlt=s(Vde);k3o=r(mlt,"model.eval()"),mlt.forEach(t),S3o=r(t8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xde=n(t8e,"CODE",{});var glt=s(Xde);R3o=r(glt,"model.train()"),glt.forEach(t),t8e.forEach(t),P3o=i(ta),T(Zu.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),sje=i(f),Ri=n(f,"H2",{class:!0});var cGe=s(Ri);e2=n(cGe,"A",{id:!0,class:!0,href:!0});var hlt=s(e2);zde=n(hlt,"SPAN",{});var plt=s(zde);T(Fy.$$.fragment,plt),plt.forEach(t),hlt.forEach(t),B3o=i(cGe),Wde=n(cGe,"SPAN",{});var _lt=s(Wde);I3o=r(_lt,"AutoModelForCausalLM"),_lt.forEach(t),cGe.forEach(t),lje=i(f),$o=n(f,"DIV",{class:!0});var Xs=s($o);T(Ty.$$.fragment,Xs),N3o=i(Xs),Pi=n(Xs,"P",{});var VZ=s(Pi);q3o=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Rj=n(VZ,"A",{href:!0});var ult=s(Rj);j3o=r(ult,"from_pretrained()"),ult.forEach(t),D3o=r(VZ," class method or the "),Pj=n(VZ,"A",{href:!0});var blt=s(Pj);G3o=r(blt,"from_config()"),blt.forEach(t),O3o=r(VZ,` class
method.`),VZ.forEach(t),V3o=i(Xs),My=n(Xs,"P",{});var fGe=s(My);X3o=r(fGe,"This class cannot be instantiated directly using "),Qde=n(fGe,"CODE",{});var vlt=s(Qde);z3o=r(vlt,"__init__()"),vlt.forEach(t),W3o=r(fGe," (throws an error)."),fGe.forEach(t),Q3o=i(Xs),st=n(Xs,"DIV",{class:!0});var Qw=s(st);T(Ey.$$.fragment,Qw),H3o=i(Qw),Hde=n(Qw,"P",{});var Flt=s(Hde);U3o=r(Flt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Flt.forEach(t),J3o=i(Qw),Bi=n(Qw,"P",{});var XZ=s(Bi);Y3o=r(XZ,`Note:
Loading a model from its configuration file does `),Ude=n(XZ,"STRONG",{});var Tlt=s(Ude);K3o=r(Tlt,"not"),Tlt.forEach(t),Z3o=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bj=n(XZ,"A",{href:!0});var Mlt=s(Bj);e0o=r(Mlt,"from_pretrained()"),Mlt.forEach(t),o0o=r(XZ," to load the model weights."),XZ.forEach(t),r0o=i(Qw),T(o2.$$.fragment,Qw),Qw.forEach(t),t0o=i(Xs),Ke=n(Xs,"DIV",{class:!0});var aa=s(Ke);T(Cy.$$.fragment,aa),a0o=i(aa),Jde=n(aa,"P",{});var Elt=s(Jde);n0o=r(Elt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Elt.forEach(t),s0o=i(aa),ka=n(aa,"P",{});var Hw=s(ka);l0o=r(Hw,"The model class to instantiate is selected based on the "),Yde=n(Hw,"CODE",{});var Clt=s(Yde);i0o=r(Clt,"model_type"),Clt.forEach(t),d0o=r(Hw,` property of the config object (either
passed as an argument or loaded from `),Kde=n(Hw,"CODE",{});var wlt=s(Kde);c0o=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),f0o=r(Hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zde=n(Hw,"CODE",{});var Alt=s(Zde);m0o=r(Alt,"pretrained_model_name_or_path"),Alt.forEach(t),g0o=r(Hw,":"),Hw.forEach(t),h0o=i(aa),z=n(aa,"UL",{});var Q=s(z);r2=n(Q,"LI",{});var a8e=s(r2);ece=n(a8e,"STRONG",{});var ylt=s(ece);p0o=r(ylt,"bart"),ylt.forEach(t),_0o=r(a8e," \u2014 "),Ij=n(a8e,"A",{href:!0});var Llt=s(Ij);u0o=r(Llt,"BartForCausalLM"),Llt.forEach(t),b0o=r(a8e," (BART model)"),a8e.forEach(t),v0o=i(Q),t2=n(Q,"LI",{});var n8e=s(t2);oce=n(n8e,"STRONG",{});var xlt=s(oce);F0o=r(xlt,"bert"),xlt.forEach(t),T0o=r(n8e," \u2014 "),Nj=n(n8e,"A",{href:!0});var $lt=s(Nj);M0o=r($lt,"BertLMHeadModel"),$lt.forEach(t),E0o=r(n8e," (BERT model)"),n8e.forEach(t),C0o=i(Q),a2=n(Q,"LI",{});var s8e=s(a2);rce=n(s8e,"STRONG",{});var klt=s(rce);w0o=r(klt,"bert-generation"),klt.forEach(t),A0o=r(s8e," \u2014 "),qj=n(s8e,"A",{href:!0});var Slt=s(qj);y0o=r(Slt,"BertGenerationDecoder"),Slt.forEach(t),L0o=r(s8e," (Bert Generation model)"),s8e.forEach(t),x0o=i(Q),n2=n(Q,"LI",{});var l8e=s(n2);tce=n(l8e,"STRONG",{});var Rlt=s(tce);$0o=r(Rlt,"big_bird"),Rlt.forEach(t),k0o=r(l8e," \u2014 "),jj=n(l8e,"A",{href:!0});var Plt=s(jj);S0o=r(Plt,"BigBirdForCausalLM"),Plt.forEach(t),R0o=r(l8e," (BigBird model)"),l8e.forEach(t),P0o=i(Q),s2=n(Q,"LI",{});var i8e=s(s2);ace=n(i8e,"STRONG",{});var Blt=s(ace);B0o=r(Blt,"bigbird_pegasus"),Blt.forEach(t),I0o=r(i8e," \u2014 "),Dj=n(i8e,"A",{href:!0});var Ilt=s(Dj);N0o=r(Ilt,"BigBirdPegasusForCausalLM"),Ilt.forEach(t),q0o=r(i8e," (BigBird-Pegasus model)"),i8e.forEach(t),j0o=i(Q),l2=n(Q,"LI",{});var d8e=s(l2);nce=n(d8e,"STRONG",{});var Nlt=s(nce);D0o=r(Nlt,"blenderbot"),Nlt.forEach(t),G0o=r(d8e," \u2014 "),Gj=n(d8e,"A",{href:!0});var qlt=s(Gj);O0o=r(qlt,"BlenderbotForCausalLM"),qlt.forEach(t),V0o=r(d8e," (Blenderbot model)"),d8e.forEach(t),X0o=i(Q),i2=n(Q,"LI",{});var c8e=s(i2);sce=n(c8e,"STRONG",{});var jlt=s(sce);z0o=r(jlt,"blenderbot-small"),jlt.forEach(t),W0o=r(c8e," \u2014 "),Oj=n(c8e,"A",{href:!0});var Dlt=s(Oj);Q0o=r(Dlt,"BlenderbotSmallForCausalLM"),Dlt.forEach(t),H0o=r(c8e," (BlenderbotSmall model)"),c8e.forEach(t),U0o=i(Q),d2=n(Q,"LI",{});var f8e=s(d2);lce=n(f8e,"STRONG",{});var Glt=s(lce);J0o=r(Glt,"camembert"),Glt.forEach(t),Y0o=r(f8e," \u2014 "),Vj=n(f8e,"A",{href:!0});var Olt=s(Vj);K0o=r(Olt,"CamembertForCausalLM"),Olt.forEach(t),Z0o=r(f8e," (CamemBERT model)"),f8e.forEach(t),ewo=i(Q),c2=n(Q,"LI",{});var m8e=s(c2);ice=n(m8e,"STRONG",{});var Vlt=s(ice);owo=r(Vlt,"ctrl"),Vlt.forEach(t),rwo=r(m8e," \u2014 "),Xj=n(m8e,"A",{href:!0});var Xlt=s(Xj);two=r(Xlt,"CTRLLMHeadModel"),Xlt.forEach(t),awo=r(m8e," (CTRL model)"),m8e.forEach(t),nwo=i(Q),f2=n(Q,"LI",{});var g8e=s(f2);dce=n(g8e,"STRONG",{});var zlt=s(dce);swo=r(zlt,"data2vec-text"),zlt.forEach(t),lwo=r(g8e," \u2014 "),zj=n(g8e,"A",{href:!0});var Wlt=s(zj);iwo=r(Wlt,"Data2VecTextForCausalLM"),Wlt.forEach(t),dwo=r(g8e," (Data2VecText model)"),g8e.forEach(t),cwo=i(Q),m2=n(Q,"LI",{});var h8e=s(m2);cce=n(h8e,"STRONG",{});var Qlt=s(cce);fwo=r(Qlt,"electra"),Qlt.forEach(t),mwo=r(h8e," \u2014 "),Wj=n(h8e,"A",{href:!0});var Hlt=s(Wj);gwo=r(Hlt,"ElectraForCausalLM"),Hlt.forEach(t),hwo=r(h8e," (ELECTRA model)"),h8e.forEach(t),pwo=i(Q),g2=n(Q,"LI",{});var p8e=s(g2);fce=n(p8e,"STRONG",{});var Ult=s(fce);_wo=r(Ult,"gpt2"),Ult.forEach(t),uwo=r(p8e," \u2014 "),Qj=n(p8e,"A",{href:!0});var Jlt=s(Qj);bwo=r(Jlt,"GPT2LMHeadModel"),Jlt.forEach(t),vwo=r(p8e," (OpenAI GPT-2 model)"),p8e.forEach(t),Fwo=i(Q),h2=n(Q,"LI",{});var _8e=s(h2);mce=n(_8e,"STRONG",{});var Ylt=s(mce);Two=r(Ylt,"gpt_neo"),Ylt.forEach(t),Mwo=r(_8e," \u2014 "),Hj=n(_8e,"A",{href:!0});var Klt=s(Hj);Ewo=r(Klt,"GPTNeoForCausalLM"),Klt.forEach(t),Cwo=r(_8e," (GPT Neo model)"),_8e.forEach(t),wwo=i(Q),p2=n(Q,"LI",{});var u8e=s(p2);gce=n(u8e,"STRONG",{});var Zlt=s(gce);Awo=r(Zlt,"gpt_neox"),Zlt.forEach(t),ywo=r(u8e," \u2014 "),Uj=n(u8e,"A",{href:!0});var eit=s(Uj);Lwo=r(eit,"GPTNeoXForCausalLM"),eit.forEach(t),xwo=r(u8e," (GPT NeoX model)"),u8e.forEach(t),$wo=i(Q),_2=n(Q,"LI",{});var b8e=s(_2);hce=n(b8e,"STRONG",{});var oit=s(hce);kwo=r(oit,"gptj"),oit.forEach(t),Swo=r(b8e," \u2014 "),Jj=n(b8e,"A",{href:!0});var rit=s(Jj);Rwo=r(rit,"GPTJForCausalLM"),rit.forEach(t),Pwo=r(b8e," (GPT-J model)"),b8e.forEach(t),Bwo=i(Q),u2=n(Q,"LI",{});var v8e=s(u2);pce=n(v8e,"STRONG",{});var tit=s(pce);Iwo=r(tit,"marian"),tit.forEach(t),Nwo=r(v8e," \u2014 "),Yj=n(v8e,"A",{href:!0});var ait=s(Yj);qwo=r(ait,"MarianForCausalLM"),ait.forEach(t),jwo=r(v8e," (Marian model)"),v8e.forEach(t),Dwo=i(Q),b2=n(Q,"LI",{});var F8e=s(b2);_ce=n(F8e,"STRONG",{});var nit=s(_ce);Gwo=r(nit,"mbart"),nit.forEach(t),Owo=r(F8e," \u2014 "),Kj=n(F8e,"A",{href:!0});var sit=s(Kj);Vwo=r(sit,"MBartForCausalLM"),sit.forEach(t),Xwo=r(F8e," (mBART model)"),F8e.forEach(t),zwo=i(Q),v2=n(Q,"LI",{});var T8e=s(v2);uce=n(T8e,"STRONG",{});var lit=s(uce);Wwo=r(lit,"megatron-bert"),lit.forEach(t),Qwo=r(T8e," \u2014 "),Zj=n(T8e,"A",{href:!0});var iit=s(Zj);Hwo=r(iit,"MegatronBertForCausalLM"),iit.forEach(t),Uwo=r(T8e," (Megatron-BERT model)"),T8e.forEach(t),Jwo=i(Q),F2=n(Q,"LI",{});var M8e=s(F2);bce=n(M8e,"STRONG",{});var dit=s(bce);Ywo=r(dit,"openai-gpt"),dit.forEach(t),Kwo=r(M8e," \u2014 "),eD=n(M8e,"A",{href:!0});var cit=s(eD);Zwo=r(cit,"OpenAIGPTLMHeadModel"),cit.forEach(t),eAo=r(M8e," (OpenAI GPT model)"),M8e.forEach(t),oAo=i(Q),T2=n(Q,"LI",{});var E8e=s(T2);vce=n(E8e,"STRONG",{});var fit=s(vce);rAo=r(fit,"opt"),fit.forEach(t),tAo=r(E8e," \u2014 "),oD=n(E8e,"A",{href:!0});var mit=s(oD);aAo=r(mit,"OPTForCausalLM"),mit.forEach(t),nAo=r(E8e," (OPT model)"),E8e.forEach(t),sAo=i(Q),M2=n(Q,"LI",{});var C8e=s(M2);Fce=n(C8e,"STRONG",{});var git=s(Fce);lAo=r(git,"pegasus"),git.forEach(t),iAo=r(C8e," \u2014 "),rD=n(C8e,"A",{href:!0});var hit=s(rD);dAo=r(hit,"PegasusForCausalLM"),hit.forEach(t),cAo=r(C8e," (Pegasus model)"),C8e.forEach(t),fAo=i(Q),E2=n(Q,"LI",{});var w8e=s(E2);Tce=n(w8e,"STRONG",{});var pit=s(Tce);mAo=r(pit,"plbart"),pit.forEach(t),gAo=r(w8e," \u2014 "),tD=n(w8e,"A",{href:!0});var _it=s(tD);hAo=r(_it,"PLBartForCausalLM"),_it.forEach(t),pAo=r(w8e," (PLBart model)"),w8e.forEach(t),_Ao=i(Q),C2=n(Q,"LI",{});var A8e=s(C2);Mce=n(A8e,"STRONG",{});var uit=s(Mce);uAo=r(uit,"prophetnet"),uit.forEach(t),bAo=r(A8e," \u2014 "),aD=n(A8e,"A",{href:!0});var bit=s(aD);vAo=r(bit,"ProphetNetForCausalLM"),bit.forEach(t),FAo=r(A8e," (ProphetNet model)"),A8e.forEach(t),TAo=i(Q),w2=n(Q,"LI",{});var y8e=s(w2);Ece=n(y8e,"STRONG",{});var vit=s(Ece);MAo=r(vit,"qdqbert"),vit.forEach(t),EAo=r(y8e," \u2014 "),nD=n(y8e,"A",{href:!0});var Fit=s(nD);CAo=r(Fit,"QDQBertLMHeadModel"),Fit.forEach(t),wAo=r(y8e," (QDQBert model)"),y8e.forEach(t),AAo=i(Q),A2=n(Q,"LI",{});var L8e=s(A2);Cce=n(L8e,"STRONG",{});var Tit=s(Cce);yAo=r(Tit,"reformer"),Tit.forEach(t),LAo=r(L8e," \u2014 "),sD=n(L8e,"A",{href:!0});var Mit=s(sD);xAo=r(Mit,"ReformerModelWithLMHead"),Mit.forEach(t),$Ao=r(L8e," (Reformer model)"),L8e.forEach(t),kAo=i(Q),y2=n(Q,"LI",{});var x8e=s(y2);wce=n(x8e,"STRONG",{});var Eit=s(wce);SAo=r(Eit,"rembert"),Eit.forEach(t),RAo=r(x8e," \u2014 "),lD=n(x8e,"A",{href:!0});var Cit=s(lD);PAo=r(Cit,"RemBertForCausalLM"),Cit.forEach(t),BAo=r(x8e," (RemBERT model)"),x8e.forEach(t),IAo=i(Q),L2=n(Q,"LI",{});var $8e=s(L2);Ace=n($8e,"STRONG",{});var wit=s(Ace);NAo=r(wit,"roberta"),wit.forEach(t),qAo=r($8e," \u2014 "),iD=n($8e,"A",{href:!0});var Ait=s(iD);jAo=r(Ait,"RobertaForCausalLM"),Ait.forEach(t),DAo=r($8e," (RoBERTa model)"),$8e.forEach(t),GAo=i(Q),x2=n(Q,"LI",{});var k8e=s(x2);yce=n(k8e,"STRONG",{});var yit=s(yce);OAo=r(yit,"roformer"),yit.forEach(t),VAo=r(k8e," \u2014 "),dD=n(k8e,"A",{href:!0});var Lit=s(dD);XAo=r(Lit,"RoFormerForCausalLM"),Lit.forEach(t),zAo=r(k8e," (RoFormer model)"),k8e.forEach(t),WAo=i(Q),$2=n(Q,"LI",{});var S8e=s($2);Lce=n(S8e,"STRONG",{});var xit=s(Lce);QAo=r(xit,"speech_to_text_2"),xit.forEach(t),HAo=r(S8e," \u2014 "),cD=n(S8e,"A",{href:!0});var $it=s(cD);UAo=r($it,"Speech2Text2ForCausalLM"),$it.forEach(t),JAo=r(S8e," (Speech2Text2 model)"),S8e.forEach(t),YAo=i(Q),k2=n(Q,"LI",{});var R8e=s(k2);xce=n(R8e,"STRONG",{});var kit=s(xce);KAo=r(kit,"transfo-xl"),kit.forEach(t),ZAo=r(R8e," \u2014 "),fD=n(R8e,"A",{href:!0});var Sit=s(fD);e6o=r(Sit,"TransfoXLLMHeadModel"),Sit.forEach(t),o6o=r(R8e," (Transformer-XL model)"),R8e.forEach(t),r6o=i(Q),S2=n(Q,"LI",{});var P8e=s(S2);$ce=n(P8e,"STRONG",{});var Rit=s($ce);t6o=r(Rit,"trocr"),Rit.forEach(t),a6o=r(P8e," \u2014 "),mD=n(P8e,"A",{href:!0});var Pit=s(mD);n6o=r(Pit,"TrOCRForCausalLM"),Pit.forEach(t),s6o=r(P8e," (TrOCR model)"),P8e.forEach(t),l6o=i(Q),R2=n(Q,"LI",{});var B8e=s(R2);kce=n(B8e,"STRONG",{});var Bit=s(kce);i6o=r(Bit,"xglm"),Bit.forEach(t),d6o=r(B8e," \u2014 "),gD=n(B8e,"A",{href:!0});var Iit=s(gD);c6o=r(Iit,"XGLMForCausalLM"),Iit.forEach(t),f6o=r(B8e," (XGLM model)"),B8e.forEach(t),m6o=i(Q),P2=n(Q,"LI",{});var I8e=s(P2);Sce=n(I8e,"STRONG",{});var Nit=s(Sce);g6o=r(Nit,"xlm"),Nit.forEach(t),h6o=r(I8e," \u2014 "),hD=n(I8e,"A",{href:!0});var qit=s(hD);p6o=r(qit,"XLMWithLMHeadModel"),qit.forEach(t),_6o=r(I8e," (XLM model)"),I8e.forEach(t),u6o=i(Q),B2=n(Q,"LI",{});var N8e=s(B2);Rce=n(N8e,"STRONG",{});var jit=s(Rce);b6o=r(jit,"xlm-prophetnet"),jit.forEach(t),v6o=r(N8e," \u2014 "),pD=n(N8e,"A",{href:!0});var Dit=s(pD);F6o=r(Dit,"XLMProphetNetForCausalLM"),Dit.forEach(t),T6o=r(N8e," (XLM-ProphetNet model)"),N8e.forEach(t),M6o=i(Q),I2=n(Q,"LI",{});var q8e=s(I2);Pce=n(q8e,"STRONG",{});var Git=s(Pce);E6o=r(Git,"xlm-roberta"),Git.forEach(t),C6o=r(q8e," \u2014 "),_D=n(q8e,"A",{href:!0});var Oit=s(_D);w6o=r(Oit,"XLMRobertaForCausalLM"),Oit.forEach(t),A6o=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),y6o=i(Q),N2=n(Q,"LI",{});var j8e=s(N2);Bce=n(j8e,"STRONG",{});var Vit=s(Bce);L6o=r(Vit,"xlm-roberta-xl"),Vit.forEach(t),x6o=r(j8e," \u2014 "),uD=n(j8e,"A",{href:!0});var Xit=s(uD);$6o=r(Xit,"XLMRobertaXLForCausalLM"),Xit.forEach(t),k6o=r(j8e," (XLM-RoBERTa-XL model)"),j8e.forEach(t),S6o=i(Q),q2=n(Q,"LI",{});var D8e=s(q2);Ice=n(D8e,"STRONG",{});var zit=s(Ice);R6o=r(zit,"xlnet"),zit.forEach(t),P6o=r(D8e," \u2014 "),bD=n(D8e,"A",{href:!0});var Wit=s(bD);B6o=r(Wit,"XLNetLMHeadModel"),Wit.forEach(t),I6o=r(D8e," (XLNet model)"),D8e.forEach(t),Q.forEach(t),N6o=i(aa),j2=n(aa,"P",{});var G8e=s(j2);q6o=r(G8e,"The model is set in evaluation mode by default using "),Nce=n(G8e,"CODE",{});var Qit=s(Nce);j6o=r(Qit,"model.eval()"),Qit.forEach(t),D6o=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qce=n(G8e,"CODE",{});var Hit=s(qce);G6o=r(Hit,"model.train()"),Hit.forEach(t),G8e.forEach(t),O6o=i(aa),T(D2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),ije=i(f),Ii=n(f,"H2",{class:!0});var mGe=s(Ii);G2=n(mGe,"A",{id:!0,class:!0,href:!0});var Uit=s(G2);jce=n(Uit,"SPAN",{});var Jit=s(jce);T(wy.$$.fragment,Jit),Jit.forEach(t),Uit.forEach(t),V6o=i(mGe),Dce=n(mGe,"SPAN",{});var Yit=s(Dce);X6o=r(Yit,"AutoModelForMaskedLM"),Yit.forEach(t),mGe.forEach(t),dje=i(f),ko=n(f,"DIV",{class:!0});var zs=s(ko);T(Ay.$$.fragment,zs),z6o=i(zs),Ni=n(zs,"P",{});var zZ=s(Ni);W6o=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),vD=n(zZ,"A",{href:!0});var Kit=s(vD);Q6o=r(Kit,"from_pretrained()"),Kit.forEach(t),H6o=r(zZ," class method or the "),FD=n(zZ,"A",{href:!0});var Zit=s(FD);U6o=r(Zit,"from_config()"),Zit.forEach(t),J6o=r(zZ,` class
method.`),zZ.forEach(t),Y6o=i(zs),yy=n(zs,"P",{});var gGe=s(yy);K6o=r(gGe,"This class cannot be instantiated directly using "),Gce=n(gGe,"CODE",{});var edt=s(Gce);Z6o=r(edt,"__init__()"),edt.forEach(t),eyo=r(gGe," (throws an error)."),gGe.forEach(t),oyo=i(zs),lt=n(zs,"DIV",{class:!0});var Uw=s(lt);T(Ly.$$.fragment,Uw),ryo=i(Uw),Oce=n(Uw,"P",{});var odt=s(Oce);tyo=r(odt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),odt.forEach(t),ayo=i(Uw),qi=n(Uw,"P",{});var WZ=s(qi);nyo=r(WZ,`Note:
Loading a model from its configuration file does `),Vce=n(WZ,"STRONG",{});var rdt=s(Vce);syo=r(rdt,"not"),rdt.forEach(t),lyo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),TD=n(WZ,"A",{href:!0});var tdt=s(TD);iyo=r(tdt,"from_pretrained()"),tdt.forEach(t),dyo=r(WZ," to load the model weights."),WZ.forEach(t),cyo=i(Uw),T(O2.$$.fragment,Uw),Uw.forEach(t),fyo=i(zs),Ze=n(zs,"DIV",{class:!0});var na=s(Ze);T(xy.$$.fragment,na),myo=i(na),Xce=n(na,"P",{});var adt=s(Xce);gyo=r(adt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),adt.forEach(t),hyo=i(na),Sa=n(na,"P",{});var Jw=s(Sa);pyo=r(Jw,"The model class to instantiate is selected based on the "),zce=n(Jw,"CODE",{});var ndt=s(zce);_yo=r(ndt,"model_type"),ndt.forEach(t),uyo=r(Jw,` property of the config object (either
passed as an argument or loaded from `),Wce=n(Jw,"CODE",{});var sdt=s(Wce);byo=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),vyo=r(Jw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qce=n(Jw,"CODE",{});var ldt=s(Qce);Fyo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),Tyo=r(Jw,":"),Jw.forEach(t),Myo=i(na),W=n(na,"UL",{});var H=s(W);V2=n(H,"LI",{});var O8e=s(V2);Hce=n(O8e,"STRONG",{});var idt=s(Hce);Eyo=r(idt,"albert"),idt.forEach(t),Cyo=r(O8e," \u2014 "),MD=n(O8e,"A",{href:!0});var ddt=s(MD);wyo=r(ddt,"AlbertForMaskedLM"),ddt.forEach(t),Ayo=r(O8e," (ALBERT model)"),O8e.forEach(t),yyo=i(H),X2=n(H,"LI",{});var V8e=s(X2);Uce=n(V8e,"STRONG",{});var cdt=s(Uce);Lyo=r(cdt,"bart"),cdt.forEach(t),xyo=r(V8e," \u2014 "),ED=n(V8e,"A",{href:!0});var fdt=s(ED);$yo=r(fdt,"BartForConditionalGeneration"),fdt.forEach(t),kyo=r(V8e," (BART model)"),V8e.forEach(t),Syo=i(H),z2=n(H,"LI",{});var X8e=s(z2);Jce=n(X8e,"STRONG",{});var mdt=s(Jce);Ryo=r(mdt,"bert"),mdt.forEach(t),Pyo=r(X8e," \u2014 "),CD=n(X8e,"A",{href:!0});var gdt=s(CD);Byo=r(gdt,"BertForMaskedLM"),gdt.forEach(t),Iyo=r(X8e," (BERT model)"),X8e.forEach(t),Nyo=i(H),W2=n(H,"LI",{});var z8e=s(W2);Yce=n(z8e,"STRONG",{});var hdt=s(Yce);qyo=r(hdt,"big_bird"),hdt.forEach(t),jyo=r(z8e," \u2014 "),wD=n(z8e,"A",{href:!0});var pdt=s(wD);Dyo=r(pdt,"BigBirdForMaskedLM"),pdt.forEach(t),Gyo=r(z8e," (BigBird model)"),z8e.forEach(t),Oyo=i(H),Q2=n(H,"LI",{});var W8e=s(Q2);Kce=n(W8e,"STRONG",{});var _dt=s(Kce);Vyo=r(_dt,"camembert"),_dt.forEach(t),Xyo=r(W8e," \u2014 "),AD=n(W8e,"A",{href:!0});var udt=s(AD);zyo=r(udt,"CamembertForMaskedLM"),udt.forEach(t),Wyo=r(W8e," (CamemBERT model)"),W8e.forEach(t),Qyo=i(H),H2=n(H,"LI",{});var Q8e=s(H2);Zce=n(Q8e,"STRONG",{});var bdt=s(Zce);Hyo=r(bdt,"convbert"),bdt.forEach(t),Uyo=r(Q8e," \u2014 "),yD=n(Q8e,"A",{href:!0});var vdt=s(yD);Jyo=r(vdt,"ConvBertForMaskedLM"),vdt.forEach(t),Yyo=r(Q8e," (ConvBERT model)"),Q8e.forEach(t),Kyo=i(H),U2=n(H,"LI",{});var H8e=s(U2);efe=n(H8e,"STRONG",{});var Fdt=s(efe);Zyo=r(Fdt,"data2vec-text"),Fdt.forEach(t),eLo=r(H8e," \u2014 "),LD=n(H8e,"A",{href:!0});var Tdt=s(LD);oLo=r(Tdt,"Data2VecTextForMaskedLM"),Tdt.forEach(t),rLo=r(H8e," (Data2VecText model)"),H8e.forEach(t),tLo=i(H),J2=n(H,"LI",{});var U8e=s(J2);ofe=n(U8e,"STRONG",{});var Mdt=s(ofe);aLo=r(Mdt,"deberta"),Mdt.forEach(t),nLo=r(U8e," \u2014 "),xD=n(U8e,"A",{href:!0});var Edt=s(xD);sLo=r(Edt,"DebertaForMaskedLM"),Edt.forEach(t),lLo=r(U8e," (DeBERTa model)"),U8e.forEach(t),iLo=i(H),Y2=n(H,"LI",{});var J8e=s(Y2);rfe=n(J8e,"STRONG",{});var Cdt=s(rfe);dLo=r(Cdt,"deberta-v2"),Cdt.forEach(t),cLo=r(J8e," \u2014 "),$D=n(J8e,"A",{href:!0});var wdt=s($D);fLo=r(wdt,"DebertaV2ForMaskedLM"),wdt.forEach(t),mLo=r(J8e," (DeBERTa-v2 model)"),J8e.forEach(t),gLo=i(H),K2=n(H,"LI",{});var Y8e=s(K2);tfe=n(Y8e,"STRONG",{});var Adt=s(tfe);hLo=r(Adt,"distilbert"),Adt.forEach(t),pLo=r(Y8e," \u2014 "),kD=n(Y8e,"A",{href:!0});var ydt=s(kD);_Lo=r(ydt,"DistilBertForMaskedLM"),ydt.forEach(t),uLo=r(Y8e," (DistilBERT model)"),Y8e.forEach(t),bLo=i(H),Z2=n(H,"LI",{});var K8e=s(Z2);afe=n(K8e,"STRONG",{});var Ldt=s(afe);vLo=r(Ldt,"electra"),Ldt.forEach(t),FLo=r(K8e," \u2014 "),SD=n(K8e,"A",{href:!0});var xdt=s(SD);TLo=r(xdt,"ElectraForMaskedLM"),xdt.forEach(t),MLo=r(K8e," (ELECTRA model)"),K8e.forEach(t),ELo=i(H),e1=n(H,"LI",{});var Z8e=s(e1);nfe=n(Z8e,"STRONG",{});var $dt=s(nfe);CLo=r($dt,"flaubert"),$dt.forEach(t),wLo=r(Z8e," \u2014 "),RD=n(Z8e,"A",{href:!0});var kdt=s(RD);ALo=r(kdt,"FlaubertWithLMHeadModel"),kdt.forEach(t),yLo=r(Z8e," (FlauBERT model)"),Z8e.forEach(t),LLo=i(H),o1=n(H,"LI",{});var e9e=s(o1);sfe=n(e9e,"STRONG",{});var Sdt=s(sfe);xLo=r(Sdt,"fnet"),Sdt.forEach(t),$Lo=r(e9e," \u2014 "),PD=n(e9e,"A",{href:!0});var Rdt=s(PD);kLo=r(Rdt,"FNetForMaskedLM"),Rdt.forEach(t),SLo=r(e9e," (FNet model)"),e9e.forEach(t),RLo=i(H),r1=n(H,"LI",{});var o9e=s(r1);lfe=n(o9e,"STRONG",{});var Pdt=s(lfe);PLo=r(Pdt,"funnel"),Pdt.forEach(t),BLo=r(o9e," \u2014 "),BD=n(o9e,"A",{href:!0});var Bdt=s(BD);ILo=r(Bdt,"FunnelForMaskedLM"),Bdt.forEach(t),NLo=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),qLo=i(H),t1=n(H,"LI",{});var r9e=s(t1);ife=n(r9e,"STRONG",{});var Idt=s(ife);jLo=r(Idt,"ibert"),Idt.forEach(t),DLo=r(r9e," \u2014 "),ID=n(r9e,"A",{href:!0});var Ndt=s(ID);GLo=r(Ndt,"IBertForMaskedLM"),Ndt.forEach(t),OLo=r(r9e," (I-BERT model)"),r9e.forEach(t),VLo=i(H),a1=n(H,"LI",{});var t9e=s(a1);dfe=n(t9e,"STRONG",{});var qdt=s(dfe);XLo=r(qdt,"layoutlm"),qdt.forEach(t),zLo=r(t9e," \u2014 "),ND=n(t9e,"A",{href:!0});var jdt=s(ND);WLo=r(jdt,"LayoutLMForMaskedLM"),jdt.forEach(t),QLo=r(t9e," (LayoutLM model)"),t9e.forEach(t),HLo=i(H),n1=n(H,"LI",{});var a9e=s(n1);cfe=n(a9e,"STRONG",{});var Ddt=s(cfe);ULo=r(Ddt,"longformer"),Ddt.forEach(t),JLo=r(a9e," \u2014 "),qD=n(a9e,"A",{href:!0});var Gdt=s(qD);YLo=r(Gdt,"LongformerForMaskedLM"),Gdt.forEach(t),KLo=r(a9e," (Longformer model)"),a9e.forEach(t),ZLo=i(H),s1=n(H,"LI",{});var n9e=s(s1);ffe=n(n9e,"STRONG",{});var Odt=s(ffe);e8o=r(Odt,"luke"),Odt.forEach(t),o8o=r(n9e," \u2014 "),jD=n(n9e,"A",{href:!0});var Vdt=s(jD);r8o=r(Vdt,"LukeForMaskedLM"),Vdt.forEach(t),t8o=r(n9e," (LUKE model)"),n9e.forEach(t),a8o=i(H),l1=n(H,"LI",{});var s9e=s(l1);mfe=n(s9e,"STRONG",{});var Xdt=s(mfe);n8o=r(Xdt,"mbart"),Xdt.forEach(t),s8o=r(s9e," \u2014 "),DD=n(s9e,"A",{href:!0});var zdt=s(DD);l8o=r(zdt,"MBartForConditionalGeneration"),zdt.forEach(t),i8o=r(s9e," (mBART model)"),s9e.forEach(t),d8o=i(H),i1=n(H,"LI",{});var l9e=s(i1);gfe=n(l9e,"STRONG",{});var Wdt=s(gfe);c8o=r(Wdt,"megatron-bert"),Wdt.forEach(t),f8o=r(l9e," \u2014 "),GD=n(l9e,"A",{href:!0});var Qdt=s(GD);m8o=r(Qdt,"MegatronBertForMaskedLM"),Qdt.forEach(t),g8o=r(l9e," (Megatron-BERT model)"),l9e.forEach(t),h8o=i(H),d1=n(H,"LI",{});var i9e=s(d1);hfe=n(i9e,"STRONG",{});var Hdt=s(hfe);p8o=r(Hdt,"mobilebert"),Hdt.forEach(t),_8o=r(i9e," \u2014 "),OD=n(i9e,"A",{href:!0});var Udt=s(OD);u8o=r(Udt,"MobileBertForMaskedLM"),Udt.forEach(t),b8o=r(i9e," (MobileBERT model)"),i9e.forEach(t),v8o=i(H),c1=n(H,"LI",{});var d9e=s(c1);pfe=n(d9e,"STRONG",{});var Jdt=s(pfe);F8o=r(Jdt,"mpnet"),Jdt.forEach(t),T8o=r(d9e," \u2014 "),VD=n(d9e,"A",{href:!0});var Ydt=s(VD);M8o=r(Ydt,"MPNetForMaskedLM"),Ydt.forEach(t),E8o=r(d9e," (MPNet model)"),d9e.forEach(t),C8o=i(H),f1=n(H,"LI",{});var c9e=s(f1);_fe=n(c9e,"STRONG",{});var Kdt=s(_fe);w8o=r(Kdt,"nystromformer"),Kdt.forEach(t),A8o=r(c9e," \u2014 "),XD=n(c9e,"A",{href:!0});var Zdt=s(XD);y8o=r(Zdt,"NystromformerForMaskedLM"),Zdt.forEach(t),L8o=r(c9e," (Nystr\xF6mformer model)"),c9e.forEach(t),x8o=i(H),m1=n(H,"LI",{});var f9e=s(m1);ufe=n(f9e,"STRONG",{});var ect=s(ufe);$8o=r(ect,"perceiver"),ect.forEach(t),k8o=r(f9e," \u2014 "),zD=n(f9e,"A",{href:!0});var oct=s(zD);S8o=r(oct,"PerceiverForMaskedLM"),oct.forEach(t),R8o=r(f9e," (Perceiver model)"),f9e.forEach(t),P8o=i(H),g1=n(H,"LI",{});var m9e=s(g1);bfe=n(m9e,"STRONG",{});var rct=s(bfe);B8o=r(rct,"qdqbert"),rct.forEach(t),I8o=r(m9e," \u2014 "),WD=n(m9e,"A",{href:!0});var tct=s(WD);N8o=r(tct,"QDQBertForMaskedLM"),tct.forEach(t),q8o=r(m9e," (QDQBert model)"),m9e.forEach(t),j8o=i(H),h1=n(H,"LI",{});var g9e=s(h1);vfe=n(g9e,"STRONG",{});var act=s(vfe);D8o=r(act,"reformer"),act.forEach(t),G8o=r(g9e," \u2014 "),QD=n(g9e,"A",{href:!0});var nct=s(QD);O8o=r(nct,"ReformerForMaskedLM"),nct.forEach(t),V8o=r(g9e," (Reformer model)"),g9e.forEach(t),X8o=i(H),p1=n(H,"LI",{});var h9e=s(p1);Ffe=n(h9e,"STRONG",{});var sct=s(Ffe);z8o=r(sct,"rembert"),sct.forEach(t),W8o=r(h9e," \u2014 "),HD=n(h9e,"A",{href:!0});var lct=s(HD);Q8o=r(lct,"RemBertForMaskedLM"),lct.forEach(t),H8o=r(h9e," (RemBERT model)"),h9e.forEach(t),U8o=i(H),_1=n(H,"LI",{});var p9e=s(_1);Tfe=n(p9e,"STRONG",{});var ict=s(Tfe);J8o=r(ict,"roberta"),ict.forEach(t),Y8o=r(p9e," \u2014 "),UD=n(p9e,"A",{href:!0});var dct=s(UD);K8o=r(dct,"RobertaForMaskedLM"),dct.forEach(t),Z8o=r(p9e," (RoBERTa model)"),p9e.forEach(t),e9o=i(H),u1=n(H,"LI",{});var _9e=s(u1);Mfe=n(_9e,"STRONG",{});var cct=s(Mfe);o9o=r(cct,"roformer"),cct.forEach(t),r9o=r(_9e," \u2014 "),JD=n(_9e,"A",{href:!0});var fct=s(JD);t9o=r(fct,"RoFormerForMaskedLM"),fct.forEach(t),a9o=r(_9e," (RoFormer model)"),_9e.forEach(t),n9o=i(H),b1=n(H,"LI",{});var u9e=s(b1);Efe=n(u9e,"STRONG",{});var mct=s(Efe);s9o=r(mct,"squeezebert"),mct.forEach(t),l9o=r(u9e," \u2014 "),YD=n(u9e,"A",{href:!0});var gct=s(YD);i9o=r(gct,"SqueezeBertForMaskedLM"),gct.forEach(t),d9o=r(u9e," (SqueezeBERT model)"),u9e.forEach(t),c9o=i(H),v1=n(H,"LI",{});var b9e=s(v1);Cfe=n(b9e,"STRONG",{});var hct=s(Cfe);f9o=r(hct,"tapas"),hct.forEach(t),m9o=r(b9e," \u2014 "),KD=n(b9e,"A",{href:!0});var pct=s(KD);g9o=r(pct,"TapasForMaskedLM"),pct.forEach(t),h9o=r(b9e," (TAPAS model)"),b9e.forEach(t),p9o=i(H),F1=n(H,"LI",{});var v9e=s(F1);wfe=n(v9e,"STRONG",{});var _ct=s(wfe);_9o=r(_ct,"wav2vec2"),_ct.forEach(t),u9o=r(v9e," \u2014 "),Afe=n(v9e,"CODE",{});var uct=s(Afe);b9o=r(uct,"Wav2Vec2ForMaskedLM"),uct.forEach(t),v9o=r(v9e," (Wav2Vec2 model)"),v9e.forEach(t),F9o=i(H),T1=n(H,"LI",{});var F9e=s(T1);yfe=n(F9e,"STRONG",{});var bct=s(yfe);T9o=r(bct,"xlm"),bct.forEach(t),M9o=r(F9e," \u2014 "),ZD=n(F9e,"A",{href:!0});var vct=s(ZD);E9o=r(vct,"XLMWithLMHeadModel"),vct.forEach(t),C9o=r(F9e," (XLM model)"),F9e.forEach(t),w9o=i(H),M1=n(H,"LI",{});var T9e=s(M1);Lfe=n(T9e,"STRONG",{});var Fct=s(Lfe);A9o=r(Fct,"xlm-roberta"),Fct.forEach(t),y9o=r(T9e," \u2014 "),eG=n(T9e,"A",{href:!0});var Tct=s(eG);L9o=r(Tct,"XLMRobertaForMaskedLM"),Tct.forEach(t),x9o=r(T9e," (XLM-RoBERTa model)"),T9e.forEach(t),$9o=i(H),E1=n(H,"LI",{});var M9e=s(E1);xfe=n(M9e,"STRONG",{});var Mct=s(xfe);k9o=r(Mct,"xlm-roberta-xl"),Mct.forEach(t),S9o=r(M9e," \u2014 "),oG=n(M9e,"A",{href:!0});var Ect=s(oG);R9o=r(Ect,"XLMRobertaXLForMaskedLM"),Ect.forEach(t),P9o=r(M9e," (XLM-RoBERTa-XL model)"),M9e.forEach(t),B9o=i(H),C1=n(H,"LI",{});var E9e=s(C1);$fe=n(E9e,"STRONG",{});var Cct=s($fe);I9o=r(Cct,"yoso"),Cct.forEach(t),N9o=r(E9e," \u2014 "),rG=n(E9e,"A",{href:!0});var wct=s(rG);q9o=r(wct,"YosoForMaskedLM"),wct.forEach(t),j9o=r(E9e," (YOSO model)"),E9e.forEach(t),H.forEach(t),D9o=i(na),w1=n(na,"P",{});var C9e=s(w1);G9o=r(C9e,"The model is set in evaluation mode by default using "),kfe=n(C9e,"CODE",{});var Act=s(kfe);O9o=r(Act,"model.eval()"),Act.forEach(t),V9o=r(C9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sfe=n(C9e,"CODE",{});var yct=s(Sfe);X9o=r(yct,"model.train()"),yct.forEach(t),C9e.forEach(t),z9o=i(na),T(A1.$$.fragment,na),na.forEach(t),zs.forEach(t),cje=i(f),ji=n(f,"H2",{class:!0});var hGe=s(ji);y1=n(hGe,"A",{id:!0,class:!0,href:!0});var Lct=s(y1);Rfe=n(Lct,"SPAN",{});var xct=s(Rfe);T($y.$$.fragment,xct),xct.forEach(t),Lct.forEach(t),W9o=i(hGe),Pfe=n(hGe,"SPAN",{});var $ct=s(Pfe);Q9o=r($ct,"AutoModelForSeq2SeqLM"),$ct.forEach(t),hGe.forEach(t),fje=i(f),So=n(f,"DIV",{class:!0});var Ws=s(So);T(ky.$$.fragment,Ws),H9o=i(Ws),Di=n(Ws,"P",{});var QZ=s(Di);U9o=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),tG=n(QZ,"A",{href:!0});var kct=s(tG);J9o=r(kct,"from_pretrained()"),kct.forEach(t),Y9o=r(QZ," class method or the "),aG=n(QZ,"A",{href:!0});var Sct=s(aG);K9o=r(Sct,"from_config()"),Sct.forEach(t),Z9o=r(QZ,` class
method.`),QZ.forEach(t),exo=i(Ws),Sy=n(Ws,"P",{});var pGe=s(Sy);oxo=r(pGe,"This class cannot be instantiated directly using "),Bfe=n(pGe,"CODE",{});var Rct=s(Bfe);rxo=r(Rct,"__init__()"),Rct.forEach(t),txo=r(pGe," (throws an error)."),pGe.forEach(t),axo=i(Ws),it=n(Ws,"DIV",{class:!0});var Yw=s(it);T(Ry.$$.fragment,Yw),nxo=i(Yw),Ife=n(Yw,"P",{});var Pct=s(Ife);sxo=r(Pct,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pct.forEach(t),lxo=i(Yw),Gi=n(Yw,"P",{});var HZ=s(Gi);ixo=r(HZ,`Note:
Loading a model from its configuration file does `),Nfe=n(HZ,"STRONG",{});var Bct=s(Nfe);dxo=r(Bct,"not"),Bct.forEach(t),cxo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nG=n(HZ,"A",{href:!0});var Ict=s(nG);fxo=r(Ict,"from_pretrained()"),Ict.forEach(t),mxo=r(HZ," to load the model weights."),HZ.forEach(t),gxo=i(Yw),T(L1.$$.fragment,Yw),Yw.forEach(t),hxo=i(Ws),eo=n(Ws,"DIV",{class:!0});var sa=s(eo);T(Py.$$.fragment,sa),pxo=i(sa),qfe=n(sa,"P",{});var Nct=s(qfe);_xo=r(Nct,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nct.forEach(t),uxo=i(sa),Ra=n(sa,"P",{});var Kw=s(Ra);bxo=r(Kw,"The model class to instantiate is selected based on the "),jfe=n(Kw,"CODE",{});var qct=s(jfe);vxo=r(qct,"model_type"),qct.forEach(t),Fxo=r(Kw,` property of the config object (either
passed as an argument or loaded from `),Dfe=n(Kw,"CODE",{});var jct=s(Dfe);Txo=r(jct,"pretrained_model_name_or_path"),jct.forEach(t),Mxo=r(Kw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gfe=n(Kw,"CODE",{});var Dct=s(Gfe);Exo=r(Dct,"pretrained_model_name_or_path"),Dct.forEach(t),Cxo=r(Kw,":"),Kw.forEach(t),wxo=i(sa),_e=n(sa,"UL",{});var Fe=s(_e);x1=n(Fe,"LI",{});var w9e=s(x1);Ofe=n(w9e,"STRONG",{});var Gct=s(Ofe);Axo=r(Gct,"bart"),Gct.forEach(t),yxo=r(w9e," \u2014 "),sG=n(w9e,"A",{href:!0});var Oct=s(sG);Lxo=r(Oct,"BartForConditionalGeneration"),Oct.forEach(t),xxo=r(w9e," (BART model)"),w9e.forEach(t),$xo=i(Fe),$1=n(Fe,"LI",{});var A9e=s($1);Vfe=n(A9e,"STRONG",{});var Vct=s(Vfe);kxo=r(Vct,"bigbird_pegasus"),Vct.forEach(t),Sxo=r(A9e," \u2014 "),lG=n(A9e,"A",{href:!0});var Xct=s(lG);Rxo=r(Xct,"BigBirdPegasusForConditionalGeneration"),Xct.forEach(t),Pxo=r(A9e," (BigBird-Pegasus model)"),A9e.forEach(t),Bxo=i(Fe),k1=n(Fe,"LI",{});var y9e=s(k1);Xfe=n(y9e,"STRONG",{});var zct=s(Xfe);Ixo=r(zct,"blenderbot"),zct.forEach(t),Nxo=r(y9e," \u2014 "),iG=n(y9e,"A",{href:!0});var Wct=s(iG);qxo=r(Wct,"BlenderbotForConditionalGeneration"),Wct.forEach(t),jxo=r(y9e," (Blenderbot model)"),y9e.forEach(t),Dxo=i(Fe),S1=n(Fe,"LI",{});var L9e=s(S1);zfe=n(L9e,"STRONG",{});var Qct=s(zfe);Gxo=r(Qct,"blenderbot-small"),Qct.forEach(t),Oxo=r(L9e," \u2014 "),dG=n(L9e,"A",{href:!0});var Hct=s(dG);Vxo=r(Hct,"BlenderbotSmallForConditionalGeneration"),Hct.forEach(t),Xxo=r(L9e," (BlenderbotSmall model)"),L9e.forEach(t),zxo=i(Fe),R1=n(Fe,"LI",{});var x9e=s(R1);Wfe=n(x9e,"STRONG",{});var Uct=s(Wfe);Wxo=r(Uct,"encoder-decoder"),Uct.forEach(t),Qxo=r(x9e," \u2014 "),cG=n(x9e,"A",{href:!0});var Jct=s(cG);Hxo=r(Jct,"EncoderDecoderModel"),Jct.forEach(t),Uxo=r(x9e," (Encoder decoder model)"),x9e.forEach(t),Jxo=i(Fe),P1=n(Fe,"LI",{});var $9e=s(P1);Qfe=n($9e,"STRONG",{});var Yct=s(Qfe);Yxo=r(Yct,"fsmt"),Yct.forEach(t),Kxo=r($9e," \u2014 "),fG=n($9e,"A",{href:!0});var Kct=s(fG);Zxo=r(Kct,"FSMTForConditionalGeneration"),Kct.forEach(t),e$o=r($9e," (FairSeq Machine-Translation model)"),$9e.forEach(t),o$o=i(Fe),B1=n(Fe,"LI",{});var k9e=s(B1);Hfe=n(k9e,"STRONG",{});var Zct=s(Hfe);r$o=r(Zct,"led"),Zct.forEach(t),t$o=r(k9e," \u2014 "),mG=n(k9e,"A",{href:!0});var eft=s(mG);a$o=r(eft,"LEDForConditionalGeneration"),eft.forEach(t),n$o=r(k9e," (LED model)"),k9e.forEach(t),s$o=i(Fe),I1=n(Fe,"LI",{});var S9e=s(I1);Ufe=n(S9e,"STRONG",{});var oft=s(Ufe);l$o=r(oft,"m2m_100"),oft.forEach(t),i$o=r(S9e," \u2014 "),gG=n(S9e,"A",{href:!0});var rft=s(gG);d$o=r(rft,"M2M100ForConditionalGeneration"),rft.forEach(t),c$o=r(S9e," (M2M100 model)"),S9e.forEach(t),f$o=i(Fe),N1=n(Fe,"LI",{});var R9e=s(N1);Jfe=n(R9e,"STRONG",{});var tft=s(Jfe);m$o=r(tft,"marian"),tft.forEach(t),g$o=r(R9e," \u2014 "),hG=n(R9e,"A",{href:!0});var aft=s(hG);h$o=r(aft,"MarianMTModel"),aft.forEach(t),p$o=r(R9e," (Marian model)"),R9e.forEach(t),_$o=i(Fe),q1=n(Fe,"LI",{});var P9e=s(q1);Yfe=n(P9e,"STRONG",{});var nft=s(Yfe);u$o=r(nft,"mbart"),nft.forEach(t),b$o=r(P9e," \u2014 "),pG=n(P9e,"A",{href:!0});var sft=s(pG);v$o=r(sft,"MBartForConditionalGeneration"),sft.forEach(t),F$o=r(P9e," (mBART model)"),P9e.forEach(t),T$o=i(Fe),j1=n(Fe,"LI",{});var B9e=s(j1);Kfe=n(B9e,"STRONG",{});var lft=s(Kfe);M$o=r(lft,"mt5"),lft.forEach(t),E$o=r(B9e," \u2014 "),_G=n(B9e,"A",{href:!0});var ift=s(_G);C$o=r(ift,"MT5ForConditionalGeneration"),ift.forEach(t),w$o=r(B9e," (MT5 model)"),B9e.forEach(t),A$o=i(Fe),D1=n(Fe,"LI",{});var I9e=s(D1);Zfe=n(I9e,"STRONG",{});var dft=s(Zfe);y$o=r(dft,"pegasus"),dft.forEach(t),L$o=r(I9e," \u2014 "),uG=n(I9e,"A",{href:!0});var cft=s(uG);x$o=r(cft,"PegasusForConditionalGeneration"),cft.forEach(t),$$o=r(I9e," (Pegasus model)"),I9e.forEach(t),k$o=i(Fe),G1=n(Fe,"LI",{});var N9e=s(G1);eme=n(N9e,"STRONG",{});var fft=s(eme);S$o=r(fft,"plbart"),fft.forEach(t),R$o=r(N9e," \u2014 "),bG=n(N9e,"A",{href:!0});var mft=s(bG);P$o=r(mft,"PLBartForConditionalGeneration"),mft.forEach(t),B$o=r(N9e," (PLBart model)"),N9e.forEach(t),I$o=i(Fe),O1=n(Fe,"LI",{});var q9e=s(O1);ome=n(q9e,"STRONG",{});var gft=s(ome);N$o=r(gft,"prophetnet"),gft.forEach(t),q$o=r(q9e," \u2014 "),vG=n(q9e,"A",{href:!0});var hft=s(vG);j$o=r(hft,"ProphetNetForConditionalGeneration"),hft.forEach(t),D$o=r(q9e," (ProphetNet model)"),q9e.forEach(t),G$o=i(Fe),V1=n(Fe,"LI",{});var j9e=s(V1);rme=n(j9e,"STRONG",{});var pft=s(rme);O$o=r(pft,"t5"),pft.forEach(t),V$o=r(j9e," \u2014 "),FG=n(j9e,"A",{href:!0});var _ft=s(FG);X$o=r(_ft,"T5ForConditionalGeneration"),_ft.forEach(t),z$o=r(j9e," (T5 model)"),j9e.forEach(t),W$o=i(Fe),X1=n(Fe,"LI",{});var D9e=s(X1);tme=n(D9e,"STRONG",{});var uft=s(tme);Q$o=r(uft,"xlm-prophetnet"),uft.forEach(t),H$o=r(D9e," \u2014 "),TG=n(D9e,"A",{href:!0});var bft=s(TG);U$o=r(bft,"XLMProphetNetForConditionalGeneration"),bft.forEach(t),J$o=r(D9e," (XLM-ProphetNet model)"),D9e.forEach(t),Fe.forEach(t),Y$o=i(sa),z1=n(sa,"P",{});var G9e=s(z1);K$o=r(G9e,"The model is set in evaluation mode by default using "),ame=n(G9e,"CODE",{});var vft=s(ame);Z$o=r(vft,"model.eval()"),vft.forEach(t),eko=r(G9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nme=n(G9e,"CODE",{});var Fft=s(nme);oko=r(Fft,"model.train()"),Fft.forEach(t),G9e.forEach(t),rko=i(sa),T(W1.$$.fragment,sa),sa.forEach(t),Ws.forEach(t),mje=i(f),Oi=n(f,"H2",{class:!0});var _Ge=s(Oi);Q1=n(_Ge,"A",{id:!0,class:!0,href:!0});var Tft=s(Q1);sme=n(Tft,"SPAN",{});var Mft=s(sme);T(By.$$.fragment,Mft),Mft.forEach(t),Tft.forEach(t),tko=i(_Ge),lme=n(_Ge,"SPAN",{});var Eft=s(lme);ako=r(Eft,"AutoModelForSequenceClassification"),Eft.forEach(t),_Ge.forEach(t),gje=i(f),Ro=n(f,"DIV",{class:!0});var Qs=s(Ro);T(Iy.$$.fragment,Qs),nko=i(Qs),Vi=n(Qs,"P",{});var UZ=s(Vi);sko=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),MG=n(UZ,"A",{href:!0});var Cft=s(MG);lko=r(Cft,"from_pretrained()"),Cft.forEach(t),iko=r(UZ," class method or the "),EG=n(UZ,"A",{href:!0});var wft=s(EG);dko=r(wft,"from_config()"),wft.forEach(t),cko=r(UZ,` class
method.`),UZ.forEach(t),fko=i(Qs),Ny=n(Qs,"P",{});var uGe=s(Ny);mko=r(uGe,"This class cannot be instantiated directly using "),ime=n(uGe,"CODE",{});var Aft=s(ime);gko=r(Aft,"__init__()"),Aft.forEach(t),hko=r(uGe," (throws an error)."),uGe.forEach(t),pko=i(Qs),dt=n(Qs,"DIV",{class:!0});var Zw=s(dt);T(qy.$$.fragment,Zw),_ko=i(Zw),dme=n(Zw,"P",{});var yft=s(dme);uko=r(yft,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),yft.forEach(t),bko=i(Zw),Xi=n(Zw,"P",{});var JZ=s(Xi);vko=r(JZ,`Note:
Loading a model from its configuration file does `),cme=n(JZ,"STRONG",{});var Lft=s(cme);Fko=r(Lft,"not"),Lft.forEach(t),Tko=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(JZ,"A",{href:!0});var xft=s(CG);Mko=r(xft,"from_pretrained()"),xft.forEach(t),Eko=r(JZ," to load the model weights."),JZ.forEach(t),Cko=i(Zw),T(H1.$$.fragment,Zw),Zw.forEach(t),wko=i(Qs),oo=n(Qs,"DIV",{class:!0});var la=s(oo);T(jy.$$.fragment,la),Ako=i(la),fme=n(la,"P",{});var $ft=s(fme);yko=r($ft,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$ft.forEach(t),Lko=i(la),Pa=n(la,"P",{});var eA=s(Pa);xko=r(eA,"The model class to instantiate is selected based on the "),mme=n(eA,"CODE",{});var kft=s(mme);$ko=r(kft,"model_type"),kft.forEach(t),kko=r(eA,` property of the config object (either
passed as an argument or loaded from `),gme=n(eA,"CODE",{});var Sft=s(gme);Sko=r(Sft,"pretrained_model_name_or_path"),Sft.forEach(t),Rko=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hme=n(eA,"CODE",{});var Rft=s(hme);Pko=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),Bko=r(eA,":"),eA.forEach(t),Iko=i(la),q=n(la,"UL",{});var D=s(q);U1=n(D,"LI",{});var O9e=s(U1);pme=n(O9e,"STRONG",{});var Pft=s(pme);Nko=r(Pft,"albert"),Pft.forEach(t),qko=r(O9e," \u2014 "),wG=n(O9e,"A",{href:!0});var Bft=s(wG);jko=r(Bft,"AlbertForSequenceClassification"),Bft.forEach(t),Dko=r(O9e," (ALBERT model)"),O9e.forEach(t),Gko=i(D),J1=n(D,"LI",{});var V9e=s(J1);_me=n(V9e,"STRONG",{});var Ift=s(_me);Oko=r(Ift,"bart"),Ift.forEach(t),Vko=r(V9e," \u2014 "),AG=n(V9e,"A",{href:!0});var Nft=s(AG);Xko=r(Nft,"BartForSequenceClassification"),Nft.forEach(t),zko=r(V9e," (BART model)"),V9e.forEach(t),Wko=i(D),Y1=n(D,"LI",{});var X9e=s(Y1);ume=n(X9e,"STRONG",{});var qft=s(ume);Qko=r(qft,"bert"),qft.forEach(t),Hko=r(X9e," \u2014 "),yG=n(X9e,"A",{href:!0});var jft=s(yG);Uko=r(jft,"BertForSequenceClassification"),jft.forEach(t),Jko=r(X9e," (BERT model)"),X9e.forEach(t),Yko=i(D),K1=n(D,"LI",{});var z9e=s(K1);bme=n(z9e,"STRONG",{});var Dft=s(bme);Kko=r(Dft,"big_bird"),Dft.forEach(t),Zko=r(z9e," \u2014 "),LG=n(z9e,"A",{href:!0});var Gft=s(LG);eSo=r(Gft,"BigBirdForSequenceClassification"),Gft.forEach(t),oSo=r(z9e," (BigBird model)"),z9e.forEach(t),rSo=i(D),Z1=n(D,"LI",{});var W9e=s(Z1);vme=n(W9e,"STRONG",{});var Oft=s(vme);tSo=r(Oft,"bigbird_pegasus"),Oft.forEach(t),aSo=r(W9e," \u2014 "),xG=n(W9e,"A",{href:!0});var Vft=s(xG);nSo=r(Vft,"BigBirdPegasusForSequenceClassification"),Vft.forEach(t),sSo=r(W9e," (BigBird-Pegasus model)"),W9e.forEach(t),lSo=i(D),e7=n(D,"LI",{});var Q9e=s(e7);Fme=n(Q9e,"STRONG",{});var Xft=s(Fme);iSo=r(Xft,"camembert"),Xft.forEach(t),dSo=r(Q9e," \u2014 "),$G=n(Q9e,"A",{href:!0});var zft=s($G);cSo=r(zft,"CamembertForSequenceClassification"),zft.forEach(t),fSo=r(Q9e," (CamemBERT model)"),Q9e.forEach(t),mSo=i(D),o7=n(D,"LI",{});var H9e=s(o7);Tme=n(H9e,"STRONG",{});var Wft=s(Tme);gSo=r(Wft,"canine"),Wft.forEach(t),hSo=r(H9e," \u2014 "),kG=n(H9e,"A",{href:!0});var Qft=s(kG);pSo=r(Qft,"CanineForSequenceClassification"),Qft.forEach(t),_So=r(H9e," (CANINE model)"),H9e.forEach(t),uSo=i(D),r7=n(D,"LI",{});var U9e=s(r7);Mme=n(U9e,"STRONG",{});var Hft=s(Mme);bSo=r(Hft,"convbert"),Hft.forEach(t),vSo=r(U9e," \u2014 "),SG=n(U9e,"A",{href:!0});var Uft=s(SG);FSo=r(Uft,"ConvBertForSequenceClassification"),Uft.forEach(t),TSo=r(U9e," (ConvBERT model)"),U9e.forEach(t),MSo=i(D),t7=n(D,"LI",{});var J9e=s(t7);Eme=n(J9e,"STRONG",{});var Jft=s(Eme);ESo=r(Jft,"ctrl"),Jft.forEach(t),CSo=r(J9e," \u2014 "),RG=n(J9e,"A",{href:!0});var Yft=s(RG);wSo=r(Yft,"CTRLForSequenceClassification"),Yft.forEach(t),ASo=r(J9e," (CTRL model)"),J9e.forEach(t),ySo=i(D),a7=n(D,"LI",{});var Y9e=s(a7);Cme=n(Y9e,"STRONG",{});var Kft=s(Cme);LSo=r(Kft,"data2vec-text"),Kft.forEach(t),xSo=r(Y9e," \u2014 "),PG=n(Y9e,"A",{href:!0});var Zft=s(PG);$So=r(Zft,"Data2VecTextForSequenceClassification"),Zft.forEach(t),kSo=r(Y9e," (Data2VecText model)"),Y9e.forEach(t),SSo=i(D),n7=n(D,"LI",{});var K9e=s(n7);wme=n(K9e,"STRONG",{});var emt=s(wme);RSo=r(emt,"deberta"),emt.forEach(t),PSo=r(K9e," \u2014 "),BG=n(K9e,"A",{href:!0});var omt=s(BG);BSo=r(omt,"DebertaForSequenceClassification"),omt.forEach(t),ISo=r(K9e," (DeBERTa model)"),K9e.forEach(t),NSo=i(D),s7=n(D,"LI",{});var Z9e=s(s7);Ame=n(Z9e,"STRONG",{});var rmt=s(Ame);qSo=r(rmt,"deberta-v2"),rmt.forEach(t),jSo=r(Z9e," \u2014 "),IG=n(Z9e,"A",{href:!0});var tmt=s(IG);DSo=r(tmt,"DebertaV2ForSequenceClassification"),tmt.forEach(t),GSo=r(Z9e," (DeBERTa-v2 model)"),Z9e.forEach(t),OSo=i(D),l7=n(D,"LI",{});var exe=s(l7);yme=n(exe,"STRONG",{});var amt=s(yme);VSo=r(amt,"distilbert"),amt.forEach(t),XSo=r(exe," \u2014 "),NG=n(exe,"A",{href:!0});var nmt=s(NG);zSo=r(nmt,"DistilBertForSequenceClassification"),nmt.forEach(t),WSo=r(exe," (DistilBERT model)"),exe.forEach(t),QSo=i(D),i7=n(D,"LI",{});var oxe=s(i7);Lme=n(oxe,"STRONG",{});var smt=s(Lme);HSo=r(smt,"electra"),smt.forEach(t),USo=r(oxe," \u2014 "),qG=n(oxe,"A",{href:!0});var lmt=s(qG);JSo=r(lmt,"ElectraForSequenceClassification"),lmt.forEach(t),YSo=r(oxe," (ELECTRA model)"),oxe.forEach(t),KSo=i(D),d7=n(D,"LI",{});var rxe=s(d7);xme=n(rxe,"STRONG",{});var imt=s(xme);ZSo=r(imt,"flaubert"),imt.forEach(t),eRo=r(rxe," \u2014 "),jG=n(rxe,"A",{href:!0});var dmt=s(jG);oRo=r(dmt,"FlaubertForSequenceClassification"),dmt.forEach(t),rRo=r(rxe," (FlauBERT model)"),rxe.forEach(t),tRo=i(D),c7=n(D,"LI",{});var txe=s(c7);$me=n(txe,"STRONG",{});var cmt=s($me);aRo=r(cmt,"fnet"),cmt.forEach(t),nRo=r(txe," \u2014 "),DG=n(txe,"A",{href:!0});var fmt=s(DG);sRo=r(fmt,"FNetForSequenceClassification"),fmt.forEach(t),lRo=r(txe," (FNet model)"),txe.forEach(t),iRo=i(D),f7=n(D,"LI",{});var axe=s(f7);kme=n(axe,"STRONG",{});var mmt=s(kme);dRo=r(mmt,"funnel"),mmt.forEach(t),cRo=r(axe," \u2014 "),GG=n(axe,"A",{href:!0});var gmt=s(GG);fRo=r(gmt,"FunnelForSequenceClassification"),gmt.forEach(t),mRo=r(axe," (Funnel Transformer model)"),axe.forEach(t),gRo=i(D),m7=n(D,"LI",{});var nxe=s(m7);Sme=n(nxe,"STRONG",{});var hmt=s(Sme);hRo=r(hmt,"gpt2"),hmt.forEach(t),pRo=r(nxe," \u2014 "),OG=n(nxe,"A",{href:!0});var pmt=s(OG);_Ro=r(pmt,"GPT2ForSequenceClassification"),pmt.forEach(t),uRo=r(nxe," (OpenAI GPT-2 model)"),nxe.forEach(t),bRo=i(D),g7=n(D,"LI",{});var sxe=s(g7);Rme=n(sxe,"STRONG",{});var _mt=s(Rme);vRo=r(_mt,"gpt_neo"),_mt.forEach(t),FRo=r(sxe," \u2014 "),VG=n(sxe,"A",{href:!0});var umt=s(VG);TRo=r(umt,"GPTNeoForSequenceClassification"),umt.forEach(t),MRo=r(sxe," (GPT Neo model)"),sxe.forEach(t),ERo=i(D),h7=n(D,"LI",{});var lxe=s(h7);Pme=n(lxe,"STRONG",{});var bmt=s(Pme);CRo=r(bmt,"gptj"),bmt.forEach(t),wRo=r(lxe," \u2014 "),XG=n(lxe,"A",{href:!0});var vmt=s(XG);ARo=r(vmt,"GPTJForSequenceClassification"),vmt.forEach(t),yRo=r(lxe," (GPT-J model)"),lxe.forEach(t),LRo=i(D),p7=n(D,"LI",{});var ixe=s(p7);Bme=n(ixe,"STRONG",{});var Fmt=s(Bme);xRo=r(Fmt,"ibert"),Fmt.forEach(t),$Ro=r(ixe," \u2014 "),zG=n(ixe,"A",{href:!0});var Tmt=s(zG);kRo=r(Tmt,"IBertForSequenceClassification"),Tmt.forEach(t),SRo=r(ixe," (I-BERT model)"),ixe.forEach(t),RRo=i(D),_7=n(D,"LI",{});var dxe=s(_7);Ime=n(dxe,"STRONG",{});var Mmt=s(Ime);PRo=r(Mmt,"layoutlm"),Mmt.forEach(t),BRo=r(dxe," \u2014 "),WG=n(dxe,"A",{href:!0});var Emt=s(WG);IRo=r(Emt,"LayoutLMForSequenceClassification"),Emt.forEach(t),NRo=r(dxe," (LayoutLM model)"),dxe.forEach(t),qRo=i(D),u7=n(D,"LI",{});var cxe=s(u7);Nme=n(cxe,"STRONG",{});var Cmt=s(Nme);jRo=r(Cmt,"layoutlmv2"),Cmt.forEach(t),DRo=r(cxe," \u2014 "),QG=n(cxe,"A",{href:!0});var wmt=s(QG);GRo=r(wmt,"LayoutLMv2ForSequenceClassification"),wmt.forEach(t),ORo=r(cxe," (LayoutLMv2 model)"),cxe.forEach(t),VRo=i(D),b7=n(D,"LI",{});var fxe=s(b7);qme=n(fxe,"STRONG",{});var Amt=s(qme);XRo=r(Amt,"layoutlmv3"),Amt.forEach(t),zRo=r(fxe," \u2014 "),HG=n(fxe,"A",{href:!0});var ymt=s(HG);WRo=r(ymt,"LayoutLMv3ForSequenceClassification"),ymt.forEach(t),QRo=r(fxe," (LayoutLMv3 model)"),fxe.forEach(t),HRo=i(D),v7=n(D,"LI",{});var mxe=s(v7);jme=n(mxe,"STRONG",{});var Lmt=s(jme);URo=r(Lmt,"led"),Lmt.forEach(t),JRo=r(mxe," \u2014 "),UG=n(mxe,"A",{href:!0});var xmt=s(UG);YRo=r(xmt,"LEDForSequenceClassification"),xmt.forEach(t),KRo=r(mxe," (LED model)"),mxe.forEach(t),ZRo=i(D),F7=n(D,"LI",{});var gxe=s(F7);Dme=n(gxe,"STRONG",{});var $mt=s(Dme);ePo=r($mt,"longformer"),$mt.forEach(t),oPo=r(gxe," \u2014 "),JG=n(gxe,"A",{href:!0});var kmt=s(JG);rPo=r(kmt,"LongformerForSequenceClassification"),kmt.forEach(t),tPo=r(gxe," (Longformer model)"),gxe.forEach(t),aPo=i(D),T7=n(D,"LI",{});var hxe=s(T7);Gme=n(hxe,"STRONG",{});var Smt=s(Gme);nPo=r(Smt,"mbart"),Smt.forEach(t),sPo=r(hxe," \u2014 "),YG=n(hxe,"A",{href:!0});var Rmt=s(YG);lPo=r(Rmt,"MBartForSequenceClassification"),Rmt.forEach(t),iPo=r(hxe," (mBART model)"),hxe.forEach(t),dPo=i(D),M7=n(D,"LI",{});var pxe=s(M7);Ome=n(pxe,"STRONG",{});var Pmt=s(Ome);cPo=r(Pmt,"megatron-bert"),Pmt.forEach(t),fPo=r(pxe," \u2014 "),KG=n(pxe,"A",{href:!0});var Bmt=s(KG);mPo=r(Bmt,"MegatronBertForSequenceClassification"),Bmt.forEach(t),gPo=r(pxe," (Megatron-BERT model)"),pxe.forEach(t),hPo=i(D),E7=n(D,"LI",{});var _xe=s(E7);Vme=n(_xe,"STRONG",{});var Imt=s(Vme);pPo=r(Imt,"mobilebert"),Imt.forEach(t),_Po=r(_xe," \u2014 "),ZG=n(_xe,"A",{href:!0});var Nmt=s(ZG);uPo=r(Nmt,"MobileBertForSequenceClassification"),Nmt.forEach(t),bPo=r(_xe," (MobileBERT model)"),_xe.forEach(t),vPo=i(D),C7=n(D,"LI",{});var uxe=s(C7);Xme=n(uxe,"STRONG",{});var qmt=s(Xme);FPo=r(qmt,"mpnet"),qmt.forEach(t),TPo=r(uxe," \u2014 "),eO=n(uxe,"A",{href:!0});var jmt=s(eO);MPo=r(jmt,"MPNetForSequenceClassification"),jmt.forEach(t),EPo=r(uxe," (MPNet model)"),uxe.forEach(t),CPo=i(D),w7=n(D,"LI",{});var bxe=s(w7);zme=n(bxe,"STRONG",{});var Dmt=s(zme);wPo=r(Dmt,"nystromformer"),Dmt.forEach(t),APo=r(bxe," \u2014 "),oO=n(bxe,"A",{href:!0});var Gmt=s(oO);yPo=r(Gmt,"NystromformerForSequenceClassification"),Gmt.forEach(t),LPo=r(bxe," (Nystr\xF6mformer model)"),bxe.forEach(t),xPo=i(D),A7=n(D,"LI",{});var vxe=s(A7);Wme=n(vxe,"STRONG",{});var Omt=s(Wme);$Po=r(Omt,"openai-gpt"),Omt.forEach(t),kPo=r(vxe," \u2014 "),rO=n(vxe,"A",{href:!0});var Vmt=s(rO);SPo=r(Vmt,"OpenAIGPTForSequenceClassification"),Vmt.forEach(t),RPo=r(vxe," (OpenAI GPT model)"),vxe.forEach(t),PPo=i(D),y7=n(D,"LI",{});var Fxe=s(y7);Qme=n(Fxe,"STRONG",{});var Xmt=s(Qme);BPo=r(Xmt,"perceiver"),Xmt.forEach(t),IPo=r(Fxe," \u2014 "),tO=n(Fxe,"A",{href:!0});var zmt=s(tO);NPo=r(zmt,"PerceiverForSequenceClassification"),zmt.forEach(t),qPo=r(Fxe," (Perceiver model)"),Fxe.forEach(t),jPo=i(D),L7=n(D,"LI",{});var Txe=s(L7);Hme=n(Txe,"STRONG",{});var Wmt=s(Hme);DPo=r(Wmt,"plbart"),Wmt.forEach(t),GPo=r(Txe," \u2014 "),aO=n(Txe,"A",{href:!0});var Qmt=s(aO);OPo=r(Qmt,"PLBartForSequenceClassification"),Qmt.forEach(t),VPo=r(Txe," (PLBart model)"),Txe.forEach(t),XPo=i(D),x7=n(D,"LI",{});var Mxe=s(x7);Ume=n(Mxe,"STRONG",{});var Hmt=s(Ume);zPo=r(Hmt,"qdqbert"),Hmt.forEach(t),WPo=r(Mxe," \u2014 "),nO=n(Mxe,"A",{href:!0});var Umt=s(nO);QPo=r(Umt,"QDQBertForSequenceClassification"),Umt.forEach(t),HPo=r(Mxe," (QDQBert model)"),Mxe.forEach(t),UPo=i(D),$7=n(D,"LI",{});var Exe=s($7);Jme=n(Exe,"STRONG",{});var Jmt=s(Jme);JPo=r(Jmt,"reformer"),Jmt.forEach(t),YPo=r(Exe," \u2014 "),sO=n(Exe,"A",{href:!0});var Ymt=s(sO);KPo=r(Ymt,"ReformerForSequenceClassification"),Ymt.forEach(t),ZPo=r(Exe," (Reformer model)"),Exe.forEach(t),eBo=i(D),k7=n(D,"LI",{});var Cxe=s(k7);Yme=n(Cxe,"STRONG",{});var Kmt=s(Yme);oBo=r(Kmt,"rembert"),Kmt.forEach(t),rBo=r(Cxe," \u2014 "),lO=n(Cxe,"A",{href:!0});var Zmt=s(lO);tBo=r(Zmt,"RemBertForSequenceClassification"),Zmt.forEach(t),aBo=r(Cxe," (RemBERT model)"),Cxe.forEach(t),nBo=i(D),S7=n(D,"LI",{});var wxe=s(S7);Kme=n(wxe,"STRONG",{});var egt=s(Kme);sBo=r(egt,"roberta"),egt.forEach(t),lBo=r(wxe," \u2014 "),iO=n(wxe,"A",{href:!0});var ogt=s(iO);iBo=r(ogt,"RobertaForSequenceClassification"),ogt.forEach(t),dBo=r(wxe," (RoBERTa model)"),wxe.forEach(t),cBo=i(D),R7=n(D,"LI",{});var Axe=s(R7);Zme=n(Axe,"STRONG",{});var rgt=s(Zme);fBo=r(rgt,"roformer"),rgt.forEach(t),mBo=r(Axe," \u2014 "),dO=n(Axe,"A",{href:!0});var tgt=s(dO);gBo=r(tgt,"RoFormerForSequenceClassification"),tgt.forEach(t),hBo=r(Axe," (RoFormer model)"),Axe.forEach(t),pBo=i(D),P7=n(D,"LI",{});var yxe=s(P7);ege=n(yxe,"STRONG",{});var agt=s(ege);_Bo=r(agt,"squeezebert"),agt.forEach(t),uBo=r(yxe," \u2014 "),cO=n(yxe,"A",{href:!0});var ngt=s(cO);bBo=r(ngt,"SqueezeBertForSequenceClassification"),ngt.forEach(t),vBo=r(yxe," (SqueezeBERT model)"),yxe.forEach(t),FBo=i(D),B7=n(D,"LI",{});var Lxe=s(B7);oge=n(Lxe,"STRONG",{});var sgt=s(oge);TBo=r(sgt,"tapas"),sgt.forEach(t),MBo=r(Lxe," \u2014 "),fO=n(Lxe,"A",{href:!0});var lgt=s(fO);EBo=r(lgt,"TapasForSequenceClassification"),lgt.forEach(t),CBo=r(Lxe," (TAPAS model)"),Lxe.forEach(t),wBo=i(D),I7=n(D,"LI",{});var xxe=s(I7);rge=n(xxe,"STRONG",{});var igt=s(rge);ABo=r(igt,"transfo-xl"),igt.forEach(t),yBo=r(xxe," \u2014 "),mO=n(xxe,"A",{href:!0});var dgt=s(mO);LBo=r(dgt,"TransfoXLForSequenceClassification"),dgt.forEach(t),xBo=r(xxe," (Transformer-XL model)"),xxe.forEach(t),$Bo=i(D),N7=n(D,"LI",{});var $xe=s(N7);tge=n($xe,"STRONG",{});var cgt=s(tge);kBo=r(cgt,"xlm"),cgt.forEach(t),SBo=r($xe," \u2014 "),gO=n($xe,"A",{href:!0});var fgt=s(gO);RBo=r(fgt,"XLMForSequenceClassification"),fgt.forEach(t),PBo=r($xe," (XLM model)"),$xe.forEach(t),BBo=i(D),q7=n(D,"LI",{});var kxe=s(q7);age=n(kxe,"STRONG",{});var mgt=s(age);IBo=r(mgt,"xlm-roberta"),mgt.forEach(t),NBo=r(kxe," \u2014 "),hO=n(kxe,"A",{href:!0});var ggt=s(hO);qBo=r(ggt,"XLMRobertaForSequenceClassification"),ggt.forEach(t),jBo=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),DBo=i(D),j7=n(D,"LI",{});var Sxe=s(j7);nge=n(Sxe,"STRONG",{});var hgt=s(nge);GBo=r(hgt,"xlm-roberta-xl"),hgt.forEach(t),OBo=r(Sxe," \u2014 "),pO=n(Sxe,"A",{href:!0});var pgt=s(pO);VBo=r(pgt,"XLMRobertaXLForSequenceClassification"),pgt.forEach(t),XBo=r(Sxe," (XLM-RoBERTa-XL model)"),Sxe.forEach(t),zBo=i(D),D7=n(D,"LI",{});var Rxe=s(D7);sge=n(Rxe,"STRONG",{});var _gt=s(sge);WBo=r(_gt,"xlnet"),_gt.forEach(t),QBo=r(Rxe," \u2014 "),_O=n(Rxe,"A",{href:!0});var ugt=s(_O);HBo=r(ugt,"XLNetForSequenceClassification"),ugt.forEach(t),UBo=r(Rxe," (XLNet model)"),Rxe.forEach(t),JBo=i(D),G7=n(D,"LI",{});var Pxe=s(G7);lge=n(Pxe,"STRONG",{});var bgt=s(lge);YBo=r(bgt,"yoso"),bgt.forEach(t),KBo=r(Pxe," \u2014 "),uO=n(Pxe,"A",{href:!0});var vgt=s(uO);ZBo=r(vgt,"YosoForSequenceClassification"),vgt.forEach(t),eIo=r(Pxe," (YOSO model)"),Pxe.forEach(t),D.forEach(t),oIo=i(la),O7=n(la,"P",{});var Bxe=s(O7);rIo=r(Bxe,"The model is set in evaluation mode by default using "),ige=n(Bxe,"CODE",{});var Fgt=s(ige);tIo=r(Fgt,"model.eval()"),Fgt.forEach(t),aIo=r(Bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n(Bxe,"CODE",{});var Tgt=s(dge);nIo=r(Tgt,"model.train()"),Tgt.forEach(t),Bxe.forEach(t),sIo=i(la),T(V7.$$.fragment,la),la.forEach(t),Qs.forEach(t),hje=i(f),zi=n(f,"H2",{class:!0});var bGe=s(zi);X7=n(bGe,"A",{id:!0,class:!0,href:!0});var Mgt=s(X7);cge=n(Mgt,"SPAN",{});var Egt=s(cge);T(Dy.$$.fragment,Egt),Egt.forEach(t),Mgt.forEach(t),lIo=i(bGe),fge=n(bGe,"SPAN",{});var Cgt=s(fge);iIo=r(Cgt,"AutoModelForMultipleChoice"),Cgt.forEach(t),bGe.forEach(t),pje=i(f),Po=n(f,"DIV",{class:!0});var Hs=s(Po);T(Gy.$$.fragment,Hs),dIo=i(Hs),Wi=n(Hs,"P",{});var YZ=s(Wi);cIo=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bO=n(YZ,"A",{href:!0});var wgt=s(bO);fIo=r(wgt,"from_pretrained()"),wgt.forEach(t),mIo=r(YZ," class method or the "),vO=n(YZ,"A",{href:!0});var Agt=s(vO);gIo=r(Agt,"from_config()"),Agt.forEach(t),hIo=r(YZ,` class
method.`),YZ.forEach(t),pIo=i(Hs),Oy=n(Hs,"P",{});var vGe=s(Oy);_Io=r(vGe,"This class cannot be instantiated directly using "),mge=n(vGe,"CODE",{});var ygt=s(mge);uIo=r(ygt,"__init__()"),ygt.forEach(t),bIo=r(vGe," (throws an error)."),vGe.forEach(t),vIo=i(Hs),ct=n(Hs,"DIV",{class:!0});var oA=s(ct);T(Vy.$$.fragment,oA),FIo=i(oA),gge=n(oA,"P",{});var Lgt=s(gge);TIo=r(Lgt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lgt.forEach(t),MIo=i(oA),Qi=n(oA,"P",{});var KZ=s(Qi);EIo=r(KZ,`Note:
Loading a model from its configuration file does `),hge=n(KZ,"STRONG",{});var xgt=s(hge);CIo=r(xgt,"not"),xgt.forEach(t),wIo=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(KZ,"A",{href:!0});var $gt=s(FO);AIo=r($gt,"from_pretrained()"),$gt.forEach(t),yIo=r(KZ," to load the model weights."),KZ.forEach(t),LIo=i(oA),T(z7.$$.fragment,oA),oA.forEach(t),xIo=i(Hs),ro=n(Hs,"DIV",{class:!0});var ia=s(ro);T(Xy.$$.fragment,ia),$Io=i(ia),pge=n(ia,"P",{});var kgt=s(pge);kIo=r(kgt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),kgt.forEach(t),SIo=i(ia),Ba=n(ia,"P",{});var rA=s(Ba);RIo=r(rA,"The model class to instantiate is selected based on the "),_ge=n(rA,"CODE",{});var Sgt=s(_ge);PIo=r(Sgt,"model_type"),Sgt.forEach(t),BIo=r(rA,` property of the config object (either
passed as an argument or loaded from `),uge=n(rA,"CODE",{});var Rgt=s(uge);IIo=r(Rgt,"pretrained_model_name_or_path"),Rgt.forEach(t),NIo=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(rA,"CODE",{});var Pgt=s(bge);qIo=r(Pgt,"pretrained_model_name_or_path"),Pgt.forEach(t),jIo=r(rA,":"),rA.forEach(t),DIo=i(ia),K=n(ia,"UL",{});var ee=s(K);W7=n(ee,"LI",{});var Ixe=s(W7);vge=n(Ixe,"STRONG",{});var Bgt=s(vge);GIo=r(Bgt,"albert"),Bgt.forEach(t),OIo=r(Ixe," \u2014 "),TO=n(Ixe,"A",{href:!0});var Igt=s(TO);VIo=r(Igt,"AlbertForMultipleChoice"),Igt.forEach(t),XIo=r(Ixe," (ALBERT model)"),Ixe.forEach(t),zIo=i(ee),Q7=n(ee,"LI",{});var Nxe=s(Q7);Fge=n(Nxe,"STRONG",{});var Ngt=s(Fge);WIo=r(Ngt,"bert"),Ngt.forEach(t),QIo=r(Nxe," \u2014 "),MO=n(Nxe,"A",{href:!0});var qgt=s(MO);HIo=r(qgt,"BertForMultipleChoice"),qgt.forEach(t),UIo=r(Nxe," (BERT model)"),Nxe.forEach(t),JIo=i(ee),H7=n(ee,"LI",{});var qxe=s(H7);Tge=n(qxe,"STRONG",{});var jgt=s(Tge);YIo=r(jgt,"big_bird"),jgt.forEach(t),KIo=r(qxe," \u2014 "),EO=n(qxe,"A",{href:!0});var Dgt=s(EO);ZIo=r(Dgt,"BigBirdForMultipleChoice"),Dgt.forEach(t),eNo=r(qxe," (BigBird model)"),qxe.forEach(t),oNo=i(ee),U7=n(ee,"LI",{});var jxe=s(U7);Mge=n(jxe,"STRONG",{});var Ggt=s(Mge);rNo=r(Ggt,"camembert"),Ggt.forEach(t),tNo=r(jxe," \u2014 "),CO=n(jxe,"A",{href:!0});var Ogt=s(CO);aNo=r(Ogt,"CamembertForMultipleChoice"),Ogt.forEach(t),nNo=r(jxe," (CamemBERT model)"),jxe.forEach(t),sNo=i(ee),J7=n(ee,"LI",{});var Dxe=s(J7);Ege=n(Dxe,"STRONG",{});var Vgt=s(Ege);lNo=r(Vgt,"canine"),Vgt.forEach(t),iNo=r(Dxe," \u2014 "),wO=n(Dxe,"A",{href:!0});var Xgt=s(wO);dNo=r(Xgt,"CanineForMultipleChoice"),Xgt.forEach(t),cNo=r(Dxe," (CANINE model)"),Dxe.forEach(t),fNo=i(ee),Y7=n(ee,"LI",{});var Gxe=s(Y7);Cge=n(Gxe,"STRONG",{});var zgt=s(Cge);mNo=r(zgt,"convbert"),zgt.forEach(t),gNo=r(Gxe," \u2014 "),AO=n(Gxe,"A",{href:!0});var Wgt=s(AO);hNo=r(Wgt,"ConvBertForMultipleChoice"),Wgt.forEach(t),pNo=r(Gxe," (ConvBERT model)"),Gxe.forEach(t),_No=i(ee),K7=n(ee,"LI",{});var Oxe=s(K7);wge=n(Oxe,"STRONG",{});var Qgt=s(wge);uNo=r(Qgt,"data2vec-text"),Qgt.forEach(t),bNo=r(Oxe," \u2014 "),yO=n(Oxe,"A",{href:!0});var Hgt=s(yO);vNo=r(Hgt,"Data2VecTextForMultipleChoice"),Hgt.forEach(t),FNo=r(Oxe," (Data2VecText model)"),Oxe.forEach(t),TNo=i(ee),Z7=n(ee,"LI",{});var Vxe=s(Z7);Age=n(Vxe,"STRONG",{});var Ugt=s(Age);MNo=r(Ugt,"deberta-v2"),Ugt.forEach(t),ENo=r(Vxe," \u2014 "),LO=n(Vxe,"A",{href:!0});var Jgt=s(LO);CNo=r(Jgt,"DebertaV2ForMultipleChoice"),Jgt.forEach(t),wNo=r(Vxe," (DeBERTa-v2 model)"),Vxe.forEach(t),ANo=i(ee),eb=n(ee,"LI",{});var Xxe=s(eb);yge=n(Xxe,"STRONG",{});var Ygt=s(yge);yNo=r(Ygt,"distilbert"),Ygt.forEach(t),LNo=r(Xxe," \u2014 "),xO=n(Xxe,"A",{href:!0});var Kgt=s(xO);xNo=r(Kgt,"DistilBertForMultipleChoice"),Kgt.forEach(t),$No=r(Xxe," (DistilBERT model)"),Xxe.forEach(t),kNo=i(ee),ob=n(ee,"LI",{});var zxe=s(ob);Lge=n(zxe,"STRONG",{});var Zgt=s(Lge);SNo=r(Zgt,"electra"),Zgt.forEach(t),RNo=r(zxe," \u2014 "),$O=n(zxe,"A",{href:!0});var eht=s($O);PNo=r(eht,"ElectraForMultipleChoice"),eht.forEach(t),BNo=r(zxe," (ELECTRA model)"),zxe.forEach(t),INo=i(ee),rb=n(ee,"LI",{});var Wxe=s(rb);xge=n(Wxe,"STRONG",{});var oht=s(xge);NNo=r(oht,"flaubert"),oht.forEach(t),qNo=r(Wxe," \u2014 "),kO=n(Wxe,"A",{href:!0});var rht=s(kO);jNo=r(rht,"FlaubertForMultipleChoice"),rht.forEach(t),DNo=r(Wxe," (FlauBERT model)"),Wxe.forEach(t),GNo=i(ee),tb=n(ee,"LI",{});var Qxe=s(tb);$ge=n(Qxe,"STRONG",{});var tht=s($ge);ONo=r(tht,"fnet"),tht.forEach(t),VNo=r(Qxe," \u2014 "),SO=n(Qxe,"A",{href:!0});var aht=s(SO);XNo=r(aht,"FNetForMultipleChoice"),aht.forEach(t),zNo=r(Qxe," (FNet model)"),Qxe.forEach(t),WNo=i(ee),ab=n(ee,"LI",{});var Hxe=s(ab);kge=n(Hxe,"STRONG",{});var nht=s(kge);QNo=r(nht,"funnel"),nht.forEach(t),HNo=r(Hxe," \u2014 "),RO=n(Hxe,"A",{href:!0});var sht=s(RO);UNo=r(sht,"FunnelForMultipleChoice"),sht.forEach(t),JNo=r(Hxe," (Funnel Transformer model)"),Hxe.forEach(t),YNo=i(ee),nb=n(ee,"LI",{});var Uxe=s(nb);Sge=n(Uxe,"STRONG",{});var lht=s(Sge);KNo=r(lht,"ibert"),lht.forEach(t),ZNo=r(Uxe," \u2014 "),PO=n(Uxe,"A",{href:!0});var iht=s(PO);eqo=r(iht,"IBertForMultipleChoice"),iht.forEach(t),oqo=r(Uxe," (I-BERT model)"),Uxe.forEach(t),rqo=i(ee),sb=n(ee,"LI",{});var Jxe=s(sb);Rge=n(Jxe,"STRONG",{});var dht=s(Rge);tqo=r(dht,"longformer"),dht.forEach(t),aqo=r(Jxe," \u2014 "),BO=n(Jxe,"A",{href:!0});var cht=s(BO);nqo=r(cht,"LongformerForMultipleChoice"),cht.forEach(t),sqo=r(Jxe," (Longformer model)"),Jxe.forEach(t),lqo=i(ee),lb=n(ee,"LI",{});var Yxe=s(lb);Pge=n(Yxe,"STRONG",{});var fht=s(Pge);iqo=r(fht,"megatron-bert"),fht.forEach(t),dqo=r(Yxe," \u2014 "),IO=n(Yxe,"A",{href:!0});var mht=s(IO);cqo=r(mht,"MegatronBertForMultipleChoice"),mht.forEach(t),fqo=r(Yxe," (Megatron-BERT model)"),Yxe.forEach(t),mqo=i(ee),ib=n(ee,"LI",{});var Kxe=s(ib);Bge=n(Kxe,"STRONG",{});var ght=s(Bge);gqo=r(ght,"mobilebert"),ght.forEach(t),hqo=r(Kxe," \u2014 "),NO=n(Kxe,"A",{href:!0});var hht=s(NO);pqo=r(hht,"MobileBertForMultipleChoice"),hht.forEach(t),_qo=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),uqo=i(ee),db=n(ee,"LI",{});var Zxe=s(db);Ige=n(Zxe,"STRONG",{});var pht=s(Ige);bqo=r(pht,"mpnet"),pht.forEach(t),vqo=r(Zxe," \u2014 "),qO=n(Zxe,"A",{href:!0});var _ht=s(qO);Fqo=r(_ht,"MPNetForMultipleChoice"),_ht.forEach(t),Tqo=r(Zxe," (MPNet model)"),Zxe.forEach(t),Mqo=i(ee),cb=n(ee,"LI",{});var e$e=s(cb);Nge=n(e$e,"STRONG",{});var uht=s(Nge);Eqo=r(uht,"nystromformer"),uht.forEach(t),Cqo=r(e$e," \u2014 "),jO=n(e$e,"A",{href:!0});var bht=s(jO);wqo=r(bht,"NystromformerForMultipleChoice"),bht.forEach(t),Aqo=r(e$e," (Nystr\xF6mformer model)"),e$e.forEach(t),yqo=i(ee),fb=n(ee,"LI",{});var o$e=s(fb);qge=n(o$e,"STRONG",{});var vht=s(qge);Lqo=r(vht,"qdqbert"),vht.forEach(t),xqo=r(o$e," \u2014 "),DO=n(o$e,"A",{href:!0});var Fht=s(DO);$qo=r(Fht,"QDQBertForMultipleChoice"),Fht.forEach(t),kqo=r(o$e," (QDQBert model)"),o$e.forEach(t),Sqo=i(ee),mb=n(ee,"LI",{});var r$e=s(mb);jge=n(r$e,"STRONG",{});var Tht=s(jge);Rqo=r(Tht,"rembert"),Tht.forEach(t),Pqo=r(r$e," \u2014 "),GO=n(r$e,"A",{href:!0});var Mht=s(GO);Bqo=r(Mht,"RemBertForMultipleChoice"),Mht.forEach(t),Iqo=r(r$e," (RemBERT model)"),r$e.forEach(t),Nqo=i(ee),gb=n(ee,"LI",{});var t$e=s(gb);Dge=n(t$e,"STRONG",{});var Eht=s(Dge);qqo=r(Eht,"roberta"),Eht.forEach(t),jqo=r(t$e," \u2014 "),OO=n(t$e,"A",{href:!0});var Cht=s(OO);Dqo=r(Cht,"RobertaForMultipleChoice"),Cht.forEach(t),Gqo=r(t$e," (RoBERTa model)"),t$e.forEach(t),Oqo=i(ee),hb=n(ee,"LI",{});var a$e=s(hb);Gge=n(a$e,"STRONG",{});var wht=s(Gge);Vqo=r(wht,"roformer"),wht.forEach(t),Xqo=r(a$e," \u2014 "),VO=n(a$e,"A",{href:!0});var Aht=s(VO);zqo=r(Aht,"RoFormerForMultipleChoice"),Aht.forEach(t),Wqo=r(a$e," (RoFormer model)"),a$e.forEach(t),Qqo=i(ee),pb=n(ee,"LI",{});var n$e=s(pb);Oge=n(n$e,"STRONG",{});var yht=s(Oge);Hqo=r(yht,"squeezebert"),yht.forEach(t),Uqo=r(n$e," \u2014 "),XO=n(n$e,"A",{href:!0});var Lht=s(XO);Jqo=r(Lht,"SqueezeBertForMultipleChoice"),Lht.forEach(t),Yqo=r(n$e," (SqueezeBERT model)"),n$e.forEach(t),Kqo=i(ee),_b=n(ee,"LI",{});var s$e=s(_b);Vge=n(s$e,"STRONG",{});var xht=s(Vge);Zqo=r(xht,"xlm"),xht.forEach(t),ejo=r(s$e," \u2014 "),zO=n(s$e,"A",{href:!0});var $ht=s(zO);ojo=r($ht,"XLMForMultipleChoice"),$ht.forEach(t),rjo=r(s$e," (XLM model)"),s$e.forEach(t),tjo=i(ee),ub=n(ee,"LI",{});var l$e=s(ub);Xge=n(l$e,"STRONG",{});var kht=s(Xge);ajo=r(kht,"xlm-roberta"),kht.forEach(t),njo=r(l$e," \u2014 "),WO=n(l$e,"A",{href:!0});var Sht=s(WO);sjo=r(Sht,"XLMRobertaForMultipleChoice"),Sht.forEach(t),ljo=r(l$e," (XLM-RoBERTa model)"),l$e.forEach(t),ijo=i(ee),bb=n(ee,"LI",{});var i$e=s(bb);zge=n(i$e,"STRONG",{});var Rht=s(zge);djo=r(Rht,"xlm-roberta-xl"),Rht.forEach(t),cjo=r(i$e," \u2014 "),QO=n(i$e,"A",{href:!0});var Pht=s(QO);fjo=r(Pht,"XLMRobertaXLForMultipleChoice"),Pht.forEach(t),mjo=r(i$e," (XLM-RoBERTa-XL model)"),i$e.forEach(t),gjo=i(ee),vb=n(ee,"LI",{});var d$e=s(vb);Wge=n(d$e,"STRONG",{});var Bht=s(Wge);hjo=r(Bht,"xlnet"),Bht.forEach(t),pjo=r(d$e," \u2014 "),HO=n(d$e,"A",{href:!0});var Iht=s(HO);_jo=r(Iht,"XLNetForMultipleChoice"),Iht.forEach(t),ujo=r(d$e," (XLNet model)"),d$e.forEach(t),bjo=i(ee),Fb=n(ee,"LI",{});var c$e=s(Fb);Qge=n(c$e,"STRONG",{});var Nht=s(Qge);vjo=r(Nht,"yoso"),Nht.forEach(t),Fjo=r(c$e," \u2014 "),UO=n(c$e,"A",{href:!0});var qht=s(UO);Tjo=r(qht,"YosoForMultipleChoice"),qht.forEach(t),Mjo=r(c$e," (YOSO model)"),c$e.forEach(t),ee.forEach(t),Ejo=i(ia),Tb=n(ia,"P",{});var f$e=s(Tb);Cjo=r(f$e,"The model is set in evaluation mode by default using "),Hge=n(f$e,"CODE",{});var jht=s(Hge);wjo=r(jht,"model.eval()"),jht.forEach(t),Ajo=r(f$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Uge=n(f$e,"CODE",{});var Dht=s(Uge);yjo=r(Dht,"model.train()"),Dht.forEach(t),f$e.forEach(t),Ljo=i(ia),T(Mb.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),_je=i(f),Hi=n(f,"H2",{class:!0});var FGe=s(Hi);Eb=n(FGe,"A",{id:!0,class:!0,href:!0});var Ght=s(Eb);Jge=n(Ght,"SPAN",{});var Oht=s(Jge);T(zy.$$.fragment,Oht),Oht.forEach(t),Ght.forEach(t),xjo=i(FGe),Yge=n(FGe,"SPAN",{});var Vht=s(Yge);$jo=r(Vht,"AutoModelForNextSentencePrediction"),Vht.forEach(t),FGe.forEach(t),uje=i(f),Bo=n(f,"DIV",{class:!0});var Us=s(Bo);T(Wy.$$.fragment,Us),kjo=i(Us),Ui=n(Us,"P",{});var ZZ=s(Ui);Sjo=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),JO=n(ZZ,"A",{href:!0});var Xht=s(JO);Rjo=r(Xht,"from_pretrained()"),Xht.forEach(t),Pjo=r(ZZ," class method or the "),YO=n(ZZ,"A",{href:!0});var zht=s(YO);Bjo=r(zht,"from_config()"),zht.forEach(t),Ijo=r(ZZ,` class
method.`),ZZ.forEach(t),Njo=i(Us),Qy=n(Us,"P",{});var TGe=s(Qy);qjo=r(TGe,"This class cannot be instantiated directly using "),Kge=n(TGe,"CODE",{});var Wht=s(Kge);jjo=r(Wht,"__init__()"),Wht.forEach(t),Djo=r(TGe," (throws an error)."),TGe.forEach(t),Gjo=i(Us),ft=n(Us,"DIV",{class:!0});var tA=s(ft);T(Hy.$$.fragment,tA),Ojo=i(tA),Zge=n(tA,"P",{});var Qht=s(Zge);Vjo=r(Qht,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qht.forEach(t),Xjo=i(tA),Ji=n(tA,"P",{});var eee=s(Ji);zjo=r(eee,`Note:
Loading a model from its configuration file does `),ehe=n(eee,"STRONG",{});var Hht=s(ehe);Wjo=r(Hht,"not"),Hht.forEach(t),Qjo=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KO=n(eee,"A",{href:!0});var Uht=s(KO);Hjo=r(Uht,"from_pretrained()"),Uht.forEach(t),Ujo=r(eee," to load the model weights."),eee.forEach(t),Jjo=i(tA),T(Cb.$$.fragment,tA),tA.forEach(t),Yjo=i(Us),to=n(Us,"DIV",{class:!0});var da=s(to);T(Uy.$$.fragment,da),Kjo=i(da),ohe=n(da,"P",{});var Jht=s(ohe);Zjo=r(Jht,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jht.forEach(t),eDo=i(da),Ia=n(da,"P",{});var aA=s(Ia);oDo=r(aA,"The model class to instantiate is selected based on the "),rhe=n(aA,"CODE",{});var Yht=s(rhe);rDo=r(Yht,"model_type"),Yht.forEach(t),tDo=r(aA,` property of the config object (either
passed as an argument or loaded from `),the=n(aA,"CODE",{});var Kht=s(the);aDo=r(Kht,"pretrained_model_name_or_path"),Kht.forEach(t),nDo=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(aA,"CODE",{});var Zht=s(ahe);sDo=r(Zht,"pretrained_model_name_or_path"),Zht.forEach(t),lDo=r(aA,":"),aA.forEach(t),iDo=i(da),Yr=n(da,"UL",{});var Js=s(Yr);wb=n(Js,"LI",{});var m$e=s(wb);nhe=n(m$e,"STRONG",{});var ept=s(nhe);dDo=r(ept,"bert"),ept.forEach(t),cDo=r(m$e," \u2014 "),ZO=n(m$e,"A",{href:!0});var opt=s(ZO);fDo=r(opt,"BertForNextSentencePrediction"),opt.forEach(t),mDo=r(m$e," (BERT model)"),m$e.forEach(t),gDo=i(Js),Ab=n(Js,"LI",{});var g$e=s(Ab);she=n(g$e,"STRONG",{});var rpt=s(she);hDo=r(rpt,"fnet"),rpt.forEach(t),pDo=r(g$e," \u2014 "),eV=n(g$e,"A",{href:!0});var tpt=s(eV);_Do=r(tpt,"FNetForNextSentencePrediction"),tpt.forEach(t),uDo=r(g$e," (FNet model)"),g$e.forEach(t),bDo=i(Js),yb=n(Js,"LI",{});var h$e=s(yb);lhe=n(h$e,"STRONG",{});var apt=s(lhe);vDo=r(apt,"megatron-bert"),apt.forEach(t),FDo=r(h$e," \u2014 "),oV=n(h$e,"A",{href:!0});var npt=s(oV);TDo=r(npt,"MegatronBertForNextSentencePrediction"),npt.forEach(t),MDo=r(h$e," (Megatron-BERT model)"),h$e.forEach(t),EDo=i(Js),Lb=n(Js,"LI",{});var p$e=s(Lb);ihe=n(p$e,"STRONG",{});var spt=s(ihe);CDo=r(spt,"mobilebert"),spt.forEach(t),wDo=r(p$e," \u2014 "),rV=n(p$e,"A",{href:!0});var lpt=s(rV);ADo=r(lpt,"MobileBertForNextSentencePrediction"),lpt.forEach(t),yDo=r(p$e," (MobileBERT model)"),p$e.forEach(t),LDo=i(Js),xb=n(Js,"LI",{});var _$e=s(xb);dhe=n(_$e,"STRONG",{});var ipt=s(dhe);xDo=r(ipt,"qdqbert"),ipt.forEach(t),$Do=r(_$e," \u2014 "),tV=n(_$e,"A",{href:!0});var dpt=s(tV);kDo=r(dpt,"QDQBertForNextSentencePrediction"),dpt.forEach(t),SDo=r(_$e," (QDQBert model)"),_$e.forEach(t),Js.forEach(t),RDo=i(da),$b=n(da,"P",{});var u$e=s($b);PDo=r(u$e,"The model is set in evaluation mode by default using "),che=n(u$e,"CODE",{});var cpt=s(che);BDo=r(cpt,"model.eval()"),cpt.forEach(t),IDo=r(u$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fhe=n(u$e,"CODE",{});var fpt=s(fhe);NDo=r(fpt,"model.train()"),fpt.forEach(t),u$e.forEach(t),qDo=i(da),T(kb.$$.fragment,da),da.forEach(t),Us.forEach(t),bje=i(f),Yi=n(f,"H2",{class:!0});var MGe=s(Yi);Sb=n(MGe,"A",{id:!0,class:!0,href:!0});var mpt=s(Sb);mhe=n(mpt,"SPAN",{});var gpt=s(mhe);T(Jy.$$.fragment,gpt),gpt.forEach(t),mpt.forEach(t),jDo=i(MGe),ghe=n(MGe,"SPAN",{});var hpt=s(ghe);DDo=r(hpt,"AutoModelForTokenClassification"),hpt.forEach(t),MGe.forEach(t),vje=i(f),Io=n(f,"DIV",{class:!0});var Ys=s(Io);T(Yy.$$.fragment,Ys),GDo=i(Ys),Ki=n(Ys,"P",{});var oee=s(Ki);ODo=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),aV=n(oee,"A",{href:!0});var ppt=s(aV);VDo=r(ppt,"from_pretrained()"),ppt.forEach(t),XDo=r(oee," class method or the "),nV=n(oee,"A",{href:!0});var _pt=s(nV);zDo=r(_pt,"from_config()"),_pt.forEach(t),WDo=r(oee,` class
method.`),oee.forEach(t),QDo=i(Ys),Ky=n(Ys,"P",{});var EGe=s(Ky);HDo=r(EGe,"This class cannot be instantiated directly using "),hhe=n(EGe,"CODE",{});var upt=s(hhe);UDo=r(upt,"__init__()"),upt.forEach(t),JDo=r(EGe," (throws an error)."),EGe.forEach(t),YDo=i(Ys),mt=n(Ys,"DIV",{class:!0});var nA=s(mt);T(Zy.$$.fragment,nA),KDo=i(nA),phe=n(nA,"P",{});var bpt=s(phe);ZDo=r(bpt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bpt.forEach(t),eGo=i(nA),Zi=n(nA,"P",{});var ree=s(Zi);oGo=r(ree,`Note:
Loading a model from its configuration file does `),_he=n(ree,"STRONG",{});var vpt=s(_he);rGo=r(vpt,"not"),vpt.forEach(t),tGo=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(ree,"A",{href:!0});var Fpt=s(sV);aGo=r(Fpt,"from_pretrained()"),Fpt.forEach(t),nGo=r(ree," to load the model weights."),ree.forEach(t),sGo=i(nA),T(Rb.$$.fragment,nA),nA.forEach(t),lGo=i(Ys),ao=n(Ys,"DIV",{class:!0});var ca=s(ao);T(eL.$$.fragment,ca),iGo=i(ca),uhe=n(ca,"P",{});var Tpt=s(uhe);dGo=r(Tpt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tpt.forEach(t),cGo=i(ca),Na=n(ca,"P",{});var sA=s(Na);fGo=r(sA,"The model class to instantiate is selected based on the "),bhe=n(sA,"CODE",{});var Mpt=s(bhe);mGo=r(Mpt,"model_type"),Mpt.forEach(t),gGo=r(sA,` property of the config object (either
passed as an argument or loaded from `),vhe=n(sA,"CODE",{});var Ept=s(vhe);hGo=r(Ept,"pretrained_model_name_or_path"),Ept.forEach(t),pGo=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(sA,"CODE",{});var Cpt=s(Fhe);_Go=r(Cpt,"pretrained_model_name_or_path"),Cpt.forEach(t),uGo=r(sA,":"),sA.forEach(t),bGo=i(ca),U=n(ca,"UL",{});var J=s(U);Pb=n(J,"LI",{});var b$e=s(Pb);The=n(b$e,"STRONG",{});var wpt=s(The);vGo=r(wpt,"albert"),wpt.forEach(t),FGo=r(b$e," \u2014 "),lV=n(b$e,"A",{href:!0});var Apt=s(lV);TGo=r(Apt,"AlbertForTokenClassification"),Apt.forEach(t),MGo=r(b$e," (ALBERT model)"),b$e.forEach(t),EGo=i(J),Bb=n(J,"LI",{});var v$e=s(Bb);Mhe=n(v$e,"STRONG",{});var ypt=s(Mhe);CGo=r(ypt,"bert"),ypt.forEach(t),wGo=r(v$e," \u2014 "),iV=n(v$e,"A",{href:!0});var Lpt=s(iV);AGo=r(Lpt,"BertForTokenClassification"),Lpt.forEach(t),yGo=r(v$e," (BERT model)"),v$e.forEach(t),LGo=i(J),Ib=n(J,"LI",{});var F$e=s(Ib);Ehe=n(F$e,"STRONG",{});var xpt=s(Ehe);xGo=r(xpt,"big_bird"),xpt.forEach(t),$Go=r(F$e," \u2014 "),dV=n(F$e,"A",{href:!0});var $pt=s(dV);kGo=r($pt,"BigBirdForTokenClassification"),$pt.forEach(t),SGo=r(F$e," (BigBird model)"),F$e.forEach(t),RGo=i(J),Nb=n(J,"LI",{});var T$e=s(Nb);Che=n(T$e,"STRONG",{});var kpt=s(Che);PGo=r(kpt,"camembert"),kpt.forEach(t),BGo=r(T$e," \u2014 "),cV=n(T$e,"A",{href:!0});var Spt=s(cV);IGo=r(Spt,"CamembertForTokenClassification"),Spt.forEach(t),NGo=r(T$e," (CamemBERT model)"),T$e.forEach(t),qGo=i(J),qb=n(J,"LI",{});var M$e=s(qb);whe=n(M$e,"STRONG",{});var Rpt=s(whe);jGo=r(Rpt,"canine"),Rpt.forEach(t),DGo=r(M$e," \u2014 "),fV=n(M$e,"A",{href:!0});var Ppt=s(fV);GGo=r(Ppt,"CanineForTokenClassification"),Ppt.forEach(t),OGo=r(M$e," (CANINE model)"),M$e.forEach(t),VGo=i(J),jb=n(J,"LI",{});var E$e=s(jb);Ahe=n(E$e,"STRONG",{});var Bpt=s(Ahe);XGo=r(Bpt,"convbert"),Bpt.forEach(t),zGo=r(E$e," \u2014 "),mV=n(E$e,"A",{href:!0});var Ipt=s(mV);WGo=r(Ipt,"ConvBertForTokenClassification"),Ipt.forEach(t),QGo=r(E$e," (ConvBERT model)"),E$e.forEach(t),HGo=i(J),Db=n(J,"LI",{});var C$e=s(Db);yhe=n(C$e,"STRONG",{});var Npt=s(yhe);UGo=r(Npt,"data2vec-text"),Npt.forEach(t),JGo=r(C$e," \u2014 "),gV=n(C$e,"A",{href:!0});var qpt=s(gV);YGo=r(qpt,"Data2VecTextForTokenClassification"),qpt.forEach(t),KGo=r(C$e," (Data2VecText model)"),C$e.forEach(t),ZGo=i(J),Gb=n(J,"LI",{});var w$e=s(Gb);Lhe=n(w$e,"STRONG",{});var jpt=s(Lhe);eOo=r(jpt,"deberta"),jpt.forEach(t),oOo=r(w$e," \u2014 "),hV=n(w$e,"A",{href:!0});var Dpt=s(hV);rOo=r(Dpt,"DebertaForTokenClassification"),Dpt.forEach(t),tOo=r(w$e," (DeBERTa model)"),w$e.forEach(t),aOo=i(J),Ob=n(J,"LI",{});var A$e=s(Ob);xhe=n(A$e,"STRONG",{});var Gpt=s(xhe);nOo=r(Gpt,"deberta-v2"),Gpt.forEach(t),sOo=r(A$e," \u2014 "),pV=n(A$e,"A",{href:!0});var Opt=s(pV);lOo=r(Opt,"DebertaV2ForTokenClassification"),Opt.forEach(t),iOo=r(A$e," (DeBERTa-v2 model)"),A$e.forEach(t),dOo=i(J),Vb=n(J,"LI",{});var y$e=s(Vb);$he=n(y$e,"STRONG",{});var Vpt=s($he);cOo=r(Vpt,"distilbert"),Vpt.forEach(t),fOo=r(y$e," \u2014 "),_V=n(y$e,"A",{href:!0});var Xpt=s(_V);mOo=r(Xpt,"DistilBertForTokenClassification"),Xpt.forEach(t),gOo=r(y$e," (DistilBERT model)"),y$e.forEach(t),hOo=i(J),Xb=n(J,"LI",{});var L$e=s(Xb);khe=n(L$e,"STRONG",{});var zpt=s(khe);pOo=r(zpt,"electra"),zpt.forEach(t),_Oo=r(L$e," \u2014 "),uV=n(L$e,"A",{href:!0});var Wpt=s(uV);uOo=r(Wpt,"ElectraForTokenClassification"),Wpt.forEach(t),bOo=r(L$e," (ELECTRA model)"),L$e.forEach(t),vOo=i(J),zb=n(J,"LI",{});var x$e=s(zb);She=n(x$e,"STRONG",{});var Qpt=s(She);FOo=r(Qpt,"flaubert"),Qpt.forEach(t),TOo=r(x$e," \u2014 "),bV=n(x$e,"A",{href:!0});var Hpt=s(bV);MOo=r(Hpt,"FlaubertForTokenClassification"),Hpt.forEach(t),EOo=r(x$e," (FlauBERT model)"),x$e.forEach(t),COo=i(J),Wb=n(J,"LI",{});var $$e=s(Wb);Rhe=n($$e,"STRONG",{});var Upt=s(Rhe);wOo=r(Upt,"fnet"),Upt.forEach(t),AOo=r($$e," \u2014 "),vV=n($$e,"A",{href:!0});var Jpt=s(vV);yOo=r(Jpt,"FNetForTokenClassification"),Jpt.forEach(t),LOo=r($$e," (FNet model)"),$$e.forEach(t),xOo=i(J),Qb=n(J,"LI",{});var k$e=s(Qb);Phe=n(k$e,"STRONG",{});var Ypt=s(Phe);$Oo=r(Ypt,"funnel"),Ypt.forEach(t),kOo=r(k$e," \u2014 "),FV=n(k$e,"A",{href:!0});var Kpt=s(FV);SOo=r(Kpt,"FunnelForTokenClassification"),Kpt.forEach(t),ROo=r(k$e," (Funnel Transformer model)"),k$e.forEach(t),POo=i(J),Hb=n(J,"LI",{});var S$e=s(Hb);Bhe=n(S$e,"STRONG",{});var Zpt=s(Bhe);BOo=r(Zpt,"gpt2"),Zpt.forEach(t),IOo=r(S$e," \u2014 "),TV=n(S$e,"A",{href:!0});var e_t=s(TV);NOo=r(e_t,"GPT2ForTokenClassification"),e_t.forEach(t),qOo=r(S$e," (OpenAI GPT-2 model)"),S$e.forEach(t),jOo=i(J),Ub=n(J,"LI",{});var R$e=s(Ub);Ihe=n(R$e,"STRONG",{});var o_t=s(Ihe);DOo=r(o_t,"ibert"),o_t.forEach(t),GOo=r(R$e," \u2014 "),MV=n(R$e,"A",{href:!0});var r_t=s(MV);OOo=r(r_t,"IBertForTokenClassification"),r_t.forEach(t),VOo=r(R$e," (I-BERT model)"),R$e.forEach(t),XOo=i(J),Jb=n(J,"LI",{});var P$e=s(Jb);Nhe=n(P$e,"STRONG",{});var t_t=s(Nhe);zOo=r(t_t,"layoutlm"),t_t.forEach(t),WOo=r(P$e," \u2014 "),EV=n(P$e,"A",{href:!0});var a_t=s(EV);QOo=r(a_t,"LayoutLMForTokenClassification"),a_t.forEach(t),HOo=r(P$e," (LayoutLM model)"),P$e.forEach(t),UOo=i(J),Yb=n(J,"LI",{});var B$e=s(Yb);qhe=n(B$e,"STRONG",{});var n_t=s(qhe);JOo=r(n_t,"layoutlmv2"),n_t.forEach(t),YOo=r(B$e," \u2014 "),CV=n(B$e,"A",{href:!0});var s_t=s(CV);KOo=r(s_t,"LayoutLMv2ForTokenClassification"),s_t.forEach(t),ZOo=r(B$e," (LayoutLMv2 model)"),B$e.forEach(t),eVo=i(J),Kb=n(J,"LI",{});var I$e=s(Kb);jhe=n(I$e,"STRONG",{});var l_t=s(jhe);oVo=r(l_t,"layoutlmv3"),l_t.forEach(t),rVo=r(I$e," \u2014 "),wV=n(I$e,"A",{href:!0});var i_t=s(wV);tVo=r(i_t,"LayoutLMv3ForTokenClassification"),i_t.forEach(t),aVo=r(I$e," (LayoutLMv3 model)"),I$e.forEach(t),nVo=i(J),Zb=n(J,"LI",{});var N$e=s(Zb);Dhe=n(N$e,"STRONG",{});var d_t=s(Dhe);sVo=r(d_t,"longformer"),d_t.forEach(t),lVo=r(N$e," \u2014 "),AV=n(N$e,"A",{href:!0});var c_t=s(AV);iVo=r(c_t,"LongformerForTokenClassification"),c_t.forEach(t),dVo=r(N$e," (Longformer model)"),N$e.forEach(t),cVo=i(J),e4=n(J,"LI",{});var q$e=s(e4);Ghe=n(q$e,"STRONG",{});var f_t=s(Ghe);fVo=r(f_t,"megatron-bert"),f_t.forEach(t),mVo=r(q$e," \u2014 "),yV=n(q$e,"A",{href:!0});var m_t=s(yV);gVo=r(m_t,"MegatronBertForTokenClassification"),m_t.forEach(t),hVo=r(q$e," (Megatron-BERT model)"),q$e.forEach(t),pVo=i(J),o4=n(J,"LI",{});var j$e=s(o4);Ohe=n(j$e,"STRONG",{});var g_t=s(Ohe);_Vo=r(g_t,"mobilebert"),g_t.forEach(t),uVo=r(j$e," \u2014 "),LV=n(j$e,"A",{href:!0});var h_t=s(LV);bVo=r(h_t,"MobileBertForTokenClassification"),h_t.forEach(t),vVo=r(j$e," (MobileBERT model)"),j$e.forEach(t),FVo=i(J),r4=n(J,"LI",{});var D$e=s(r4);Vhe=n(D$e,"STRONG",{});var p_t=s(Vhe);TVo=r(p_t,"mpnet"),p_t.forEach(t),MVo=r(D$e," \u2014 "),xV=n(D$e,"A",{href:!0});var __t=s(xV);EVo=r(__t,"MPNetForTokenClassification"),__t.forEach(t),CVo=r(D$e," (MPNet model)"),D$e.forEach(t),wVo=i(J),t4=n(J,"LI",{});var G$e=s(t4);Xhe=n(G$e,"STRONG",{});var u_t=s(Xhe);AVo=r(u_t,"nystromformer"),u_t.forEach(t),yVo=r(G$e," \u2014 "),$V=n(G$e,"A",{href:!0});var b_t=s($V);LVo=r(b_t,"NystromformerForTokenClassification"),b_t.forEach(t),xVo=r(G$e," (Nystr\xF6mformer model)"),G$e.forEach(t),$Vo=i(J),a4=n(J,"LI",{});var O$e=s(a4);zhe=n(O$e,"STRONG",{});var v_t=s(zhe);kVo=r(v_t,"qdqbert"),v_t.forEach(t),SVo=r(O$e," \u2014 "),kV=n(O$e,"A",{href:!0});var F_t=s(kV);RVo=r(F_t,"QDQBertForTokenClassification"),F_t.forEach(t),PVo=r(O$e," (QDQBert model)"),O$e.forEach(t),BVo=i(J),n4=n(J,"LI",{});var V$e=s(n4);Whe=n(V$e,"STRONG",{});var T_t=s(Whe);IVo=r(T_t,"rembert"),T_t.forEach(t),NVo=r(V$e," \u2014 "),SV=n(V$e,"A",{href:!0});var M_t=s(SV);qVo=r(M_t,"RemBertForTokenClassification"),M_t.forEach(t),jVo=r(V$e," (RemBERT model)"),V$e.forEach(t),DVo=i(J),s4=n(J,"LI",{});var X$e=s(s4);Qhe=n(X$e,"STRONG",{});var E_t=s(Qhe);GVo=r(E_t,"roberta"),E_t.forEach(t),OVo=r(X$e," \u2014 "),RV=n(X$e,"A",{href:!0});var C_t=s(RV);VVo=r(C_t,"RobertaForTokenClassification"),C_t.forEach(t),XVo=r(X$e," (RoBERTa model)"),X$e.forEach(t),zVo=i(J),l4=n(J,"LI",{});var z$e=s(l4);Hhe=n(z$e,"STRONG",{});var w_t=s(Hhe);WVo=r(w_t,"roformer"),w_t.forEach(t),QVo=r(z$e," \u2014 "),PV=n(z$e,"A",{href:!0});var A_t=s(PV);HVo=r(A_t,"RoFormerForTokenClassification"),A_t.forEach(t),UVo=r(z$e," (RoFormer model)"),z$e.forEach(t),JVo=i(J),i4=n(J,"LI",{});var W$e=s(i4);Uhe=n(W$e,"STRONG",{});var y_t=s(Uhe);YVo=r(y_t,"squeezebert"),y_t.forEach(t),KVo=r(W$e," \u2014 "),BV=n(W$e,"A",{href:!0});var L_t=s(BV);ZVo=r(L_t,"SqueezeBertForTokenClassification"),L_t.forEach(t),eXo=r(W$e," (SqueezeBERT model)"),W$e.forEach(t),oXo=i(J),d4=n(J,"LI",{});var Q$e=s(d4);Jhe=n(Q$e,"STRONG",{});var x_t=s(Jhe);rXo=r(x_t,"xlm"),x_t.forEach(t),tXo=r(Q$e," \u2014 "),IV=n(Q$e,"A",{href:!0});var $_t=s(IV);aXo=r($_t,"XLMForTokenClassification"),$_t.forEach(t),nXo=r(Q$e," (XLM model)"),Q$e.forEach(t),sXo=i(J),c4=n(J,"LI",{});var H$e=s(c4);Yhe=n(H$e,"STRONG",{});var k_t=s(Yhe);lXo=r(k_t,"xlm-roberta"),k_t.forEach(t),iXo=r(H$e," \u2014 "),NV=n(H$e,"A",{href:!0});var S_t=s(NV);dXo=r(S_t,"XLMRobertaForTokenClassification"),S_t.forEach(t),cXo=r(H$e," (XLM-RoBERTa model)"),H$e.forEach(t),fXo=i(J),f4=n(J,"LI",{});var U$e=s(f4);Khe=n(U$e,"STRONG",{});var R_t=s(Khe);mXo=r(R_t,"xlm-roberta-xl"),R_t.forEach(t),gXo=r(U$e," \u2014 "),qV=n(U$e,"A",{href:!0});var P_t=s(qV);hXo=r(P_t,"XLMRobertaXLForTokenClassification"),P_t.forEach(t),pXo=r(U$e," (XLM-RoBERTa-XL model)"),U$e.forEach(t),_Xo=i(J),m4=n(J,"LI",{});var J$e=s(m4);Zhe=n(J$e,"STRONG",{});var B_t=s(Zhe);uXo=r(B_t,"xlnet"),B_t.forEach(t),bXo=r(J$e," \u2014 "),jV=n(J$e,"A",{href:!0});var I_t=s(jV);vXo=r(I_t,"XLNetForTokenClassification"),I_t.forEach(t),FXo=r(J$e," (XLNet model)"),J$e.forEach(t),TXo=i(J),g4=n(J,"LI",{});var Y$e=s(g4);epe=n(Y$e,"STRONG",{});var N_t=s(epe);MXo=r(N_t,"yoso"),N_t.forEach(t),EXo=r(Y$e," \u2014 "),DV=n(Y$e,"A",{href:!0});var q_t=s(DV);CXo=r(q_t,"YosoForTokenClassification"),q_t.forEach(t),wXo=r(Y$e," (YOSO model)"),Y$e.forEach(t),J.forEach(t),AXo=i(ca),h4=n(ca,"P",{});var K$e=s(h4);yXo=r(K$e,"The model is set in evaluation mode by default using "),ope=n(K$e,"CODE",{});var j_t=s(ope);LXo=r(j_t,"model.eval()"),j_t.forEach(t),xXo=r(K$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(K$e,"CODE",{});var D_t=s(rpe);$Xo=r(D_t,"model.train()"),D_t.forEach(t),K$e.forEach(t),kXo=i(ca),T(p4.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),Fje=i(f),ed=n(f,"H2",{class:!0});var CGe=s(ed);_4=n(CGe,"A",{id:!0,class:!0,href:!0});var G_t=s(_4);tpe=n(G_t,"SPAN",{});var O_t=s(tpe);T(oL.$$.fragment,O_t),O_t.forEach(t),G_t.forEach(t),SXo=i(CGe),ape=n(CGe,"SPAN",{});var V_t=s(ape);RXo=r(V_t,"AutoModelForQuestionAnswering"),V_t.forEach(t),CGe.forEach(t),Tje=i(f),No=n(f,"DIV",{class:!0});var Ks=s(No);T(rL.$$.fragment,Ks),PXo=i(Ks),od=n(Ks,"P",{});var tee=s(od);BXo=r(tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GV=n(tee,"A",{href:!0});var X_t=s(GV);IXo=r(X_t,"from_pretrained()"),X_t.forEach(t),NXo=r(tee," class method or the "),OV=n(tee,"A",{href:!0});var z_t=s(OV);qXo=r(z_t,"from_config()"),z_t.forEach(t),jXo=r(tee,` class
method.`),tee.forEach(t),DXo=i(Ks),tL=n(Ks,"P",{});var wGe=s(tL);GXo=r(wGe,"This class cannot be instantiated directly using "),npe=n(wGe,"CODE",{});var W_t=s(npe);OXo=r(W_t,"__init__()"),W_t.forEach(t),VXo=r(wGe," (throws an error)."),wGe.forEach(t),XXo=i(Ks),gt=n(Ks,"DIV",{class:!0});var lA=s(gt);T(aL.$$.fragment,lA),zXo=i(lA),spe=n(lA,"P",{});var Q_t=s(spe);WXo=r(Q_t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Q_t.forEach(t),QXo=i(lA),rd=n(lA,"P",{});var aee=s(rd);HXo=r(aee,`Note:
Loading a model from its configuration file does `),lpe=n(aee,"STRONG",{});var H_t=s(lpe);UXo=r(H_t,"not"),H_t.forEach(t),JXo=r(aee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(aee,"A",{href:!0});var U_t=s(VV);YXo=r(U_t,"from_pretrained()"),U_t.forEach(t),KXo=r(aee," to load the model weights."),aee.forEach(t),ZXo=i(lA),T(u4.$$.fragment,lA),lA.forEach(t),ezo=i(Ks),no=n(Ks,"DIV",{class:!0});var fa=s(no);T(nL.$$.fragment,fa),ozo=i(fa),ipe=n(fa,"P",{});var J_t=s(ipe);rzo=r(J_t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),J_t.forEach(t),tzo=i(fa),qa=n(fa,"P",{});var iA=s(qa);azo=r(iA,"The model class to instantiate is selected based on the "),dpe=n(iA,"CODE",{});var Y_t=s(dpe);nzo=r(Y_t,"model_type"),Y_t.forEach(t),szo=r(iA,` property of the config object (either
passed as an argument or loaded from `),cpe=n(iA,"CODE",{});var K_t=s(cpe);lzo=r(K_t,"pretrained_model_name_or_path"),K_t.forEach(t),izo=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(iA,"CODE",{});var Z_t=s(fpe);dzo=r(Z_t,"pretrained_model_name_or_path"),Z_t.forEach(t),czo=r(iA,":"),iA.forEach(t),fzo=i(fa),V=n(fa,"UL",{});var X=s(V);b4=n(X,"LI",{});var Z$e=s(b4);mpe=n(Z$e,"STRONG",{});var eut=s(mpe);mzo=r(eut,"albert"),eut.forEach(t),gzo=r(Z$e," \u2014 "),XV=n(Z$e,"A",{href:!0});var out=s(XV);hzo=r(out,"AlbertForQuestionAnswering"),out.forEach(t),pzo=r(Z$e," (ALBERT model)"),Z$e.forEach(t),_zo=i(X),v4=n(X,"LI",{});var eke=s(v4);gpe=n(eke,"STRONG",{});var rut=s(gpe);uzo=r(rut,"bart"),rut.forEach(t),bzo=r(eke," \u2014 "),zV=n(eke,"A",{href:!0});var tut=s(zV);vzo=r(tut,"BartForQuestionAnswering"),tut.forEach(t),Fzo=r(eke," (BART model)"),eke.forEach(t),Tzo=i(X),F4=n(X,"LI",{});var oke=s(F4);hpe=n(oke,"STRONG",{});var aut=s(hpe);Mzo=r(aut,"bert"),aut.forEach(t),Ezo=r(oke," \u2014 "),WV=n(oke,"A",{href:!0});var nut=s(WV);Czo=r(nut,"BertForQuestionAnswering"),nut.forEach(t),wzo=r(oke," (BERT model)"),oke.forEach(t),Azo=i(X),T4=n(X,"LI",{});var rke=s(T4);ppe=n(rke,"STRONG",{});var sut=s(ppe);yzo=r(sut,"big_bird"),sut.forEach(t),Lzo=r(rke," \u2014 "),QV=n(rke,"A",{href:!0});var lut=s(QV);xzo=r(lut,"BigBirdForQuestionAnswering"),lut.forEach(t),$zo=r(rke," (BigBird model)"),rke.forEach(t),kzo=i(X),M4=n(X,"LI",{});var tke=s(M4);_pe=n(tke,"STRONG",{});var iut=s(_pe);Szo=r(iut,"bigbird_pegasus"),iut.forEach(t),Rzo=r(tke," \u2014 "),HV=n(tke,"A",{href:!0});var dut=s(HV);Pzo=r(dut,"BigBirdPegasusForQuestionAnswering"),dut.forEach(t),Bzo=r(tke," (BigBird-Pegasus model)"),tke.forEach(t),Izo=i(X),E4=n(X,"LI",{});var ake=s(E4);upe=n(ake,"STRONG",{});var cut=s(upe);Nzo=r(cut,"camembert"),cut.forEach(t),qzo=r(ake," \u2014 "),UV=n(ake,"A",{href:!0});var fut=s(UV);jzo=r(fut,"CamembertForQuestionAnswering"),fut.forEach(t),Dzo=r(ake," (CamemBERT model)"),ake.forEach(t),Gzo=i(X),C4=n(X,"LI",{});var nke=s(C4);bpe=n(nke,"STRONG",{});var mut=s(bpe);Ozo=r(mut,"canine"),mut.forEach(t),Vzo=r(nke," \u2014 "),JV=n(nke,"A",{href:!0});var gut=s(JV);Xzo=r(gut,"CanineForQuestionAnswering"),gut.forEach(t),zzo=r(nke," (CANINE model)"),nke.forEach(t),Wzo=i(X),w4=n(X,"LI",{});var ske=s(w4);vpe=n(ske,"STRONG",{});var hut=s(vpe);Qzo=r(hut,"convbert"),hut.forEach(t),Hzo=r(ske," \u2014 "),YV=n(ske,"A",{href:!0});var put=s(YV);Uzo=r(put,"ConvBertForQuestionAnswering"),put.forEach(t),Jzo=r(ske," (ConvBERT model)"),ske.forEach(t),Yzo=i(X),A4=n(X,"LI",{});var lke=s(A4);Fpe=n(lke,"STRONG",{});var _ut=s(Fpe);Kzo=r(_ut,"data2vec-text"),_ut.forEach(t),Zzo=r(lke," \u2014 "),KV=n(lke,"A",{href:!0});var uut=s(KV);eWo=r(uut,"Data2VecTextForQuestionAnswering"),uut.forEach(t),oWo=r(lke," (Data2VecText model)"),lke.forEach(t),rWo=i(X),y4=n(X,"LI",{});var ike=s(y4);Tpe=n(ike,"STRONG",{});var but=s(Tpe);tWo=r(but,"deberta"),but.forEach(t),aWo=r(ike," \u2014 "),ZV=n(ike,"A",{href:!0});var vut=s(ZV);nWo=r(vut,"DebertaForQuestionAnswering"),vut.forEach(t),sWo=r(ike," (DeBERTa model)"),ike.forEach(t),lWo=i(X),L4=n(X,"LI",{});var dke=s(L4);Mpe=n(dke,"STRONG",{});var Fut=s(Mpe);iWo=r(Fut,"deberta-v2"),Fut.forEach(t),dWo=r(dke," \u2014 "),eX=n(dke,"A",{href:!0});var Tut=s(eX);cWo=r(Tut,"DebertaV2ForQuestionAnswering"),Tut.forEach(t),fWo=r(dke," (DeBERTa-v2 model)"),dke.forEach(t),mWo=i(X),x4=n(X,"LI",{});var cke=s(x4);Epe=n(cke,"STRONG",{});var Mut=s(Epe);gWo=r(Mut,"distilbert"),Mut.forEach(t),hWo=r(cke," \u2014 "),oX=n(cke,"A",{href:!0});var Eut=s(oX);pWo=r(Eut,"DistilBertForQuestionAnswering"),Eut.forEach(t),_Wo=r(cke," (DistilBERT model)"),cke.forEach(t),uWo=i(X),$4=n(X,"LI",{});var fke=s($4);Cpe=n(fke,"STRONG",{});var Cut=s(Cpe);bWo=r(Cut,"electra"),Cut.forEach(t),vWo=r(fke," \u2014 "),rX=n(fke,"A",{href:!0});var wut=s(rX);FWo=r(wut,"ElectraForQuestionAnswering"),wut.forEach(t),TWo=r(fke," (ELECTRA model)"),fke.forEach(t),MWo=i(X),k4=n(X,"LI",{});var mke=s(k4);wpe=n(mke,"STRONG",{});var Aut=s(wpe);EWo=r(Aut,"flaubert"),Aut.forEach(t),CWo=r(mke," \u2014 "),tX=n(mke,"A",{href:!0});var yut=s(tX);wWo=r(yut,"FlaubertForQuestionAnsweringSimple"),yut.forEach(t),AWo=r(mke," (FlauBERT model)"),mke.forEach(t),yWo=i(X),S4=n(X,"LI",{});var gke=s(S4);Ape=n(gke,"STRONG",{});var Lut=s(Ape);LWo=r(Lut,"fnet"),Lut.forEach(t),xWo=r(gke," \u2014 "),aX=n(gke,"A",{href:!0});var xut=s(aX);$Wo=r(xut,"FNetForQuestionAnswering"),xut.forEach(t),kWo=r(gke," (FNet model)"),gke.forEach(t),SWo=i(X),R4=n(X,"LI",{});var hke=s(R4);ype=n(hke,"STRONG",{});var $ut=s(ype);RWo=r($ut,"funnel"),$ut.forEach(t),PWo=r(hke," \u2014 "),nX=n(hke,"A",{href:!0});var kut=s(nX);BWo=r(kut,"FunnelForQuestionAnswering"),kut.forEach(t),IWo=r(hke," (Funnel Transformer model)"),hke.forEach(t),NWo=i(X),P4=n(X,"LI",{});var pke=s(P4);Lpe=n(pke,"STRONG",{});var Sut=s(Lpe);qWo=r(Sut,"gptj"),Sut.forEach(t),jWo=r(pke," \u2014 "),sX=n(pke,"A",{href:!0});var Rut=s(sX);DWo=r(Rut,"GPTJForQuestionAnswering"),Rut.forEach(t),GWo=r(pke," (GPT-J model)"),pke.forEach(t),OWo=i(X),B4=n(X,"LI",{});var _ke=s(B4);xpe=n(_ke,"STRONG",{});var Put=s(xpe);VWo=r(Put,"ibert"),Put.forEach(t),XWo=r(_ke," \u2014 "),lX=n(_ke,"A",{href:!0});var But=s(lX);zWo=r(But,"IBertForQuestionAnswering"),But.forEach(t),WWo=r(_ke," (I-BERT model)"),_ke.forEach(t),QWo=i(X),I4=n(X,"LI",{});var uke=s(I4);$pe=n(uke,"STRONG",{});var Iut=s($pe);HWo=r(Iut,"layoutlmv2"),Iut.forEach(t),UWo=r(uke," \u2014 "),iX=n(uke,"A",{href:!0});var Nut=s(iX);JWo=r(Nut,"LayoutLMv2ForQuestionAnswering"),Nut.forEach(t),YWo=r(uke," (LayoutLMv2 model)"),uke.forEach(t),KWo=i(X),N4=n(X,"LI",{});var bke=s(N4);kpe=n(bke,"STRONG",{});var qut=s(kpe);ZWo=r(qut,"layoutlmv3"),qut.forEach(t),eQo=r(bke," \u2014 "),dX=n(bke,"A",{href:!0});var jut=s(dX);oQo=r(jut,"LayoutLMv3ForQuestionAnswering"),jut.forEach(t),rQo=r(bke," (LayoutLMv3 model)"),bke.forEach(t),tQo=i(X),q4=n(X,"LI",{});var vke=s(q4);Spe=n(vke,"STRONG",{});var Dut=s(Spe);aQo=r(Dut,"led"),Dut.forEach(t),nQo=r(vke," \u2014 "),cX=n(vke,"A",{href:!0});var Gut=s(cX);sQo=r(Gut,"LEDForQuestionAnswering"),Gut.forEach(t),lQo=r(vke," (LED model)"),vke.forEach(t),iQo=i(X),j4=n(X,"LI",{});var Fke=s(j4);Rpe=n(Fke,"STRONG",{});var Out=s(Rpe);dQo=r(Out,"longformer"),Out.forEach(t),cQo=r(Fke," \u2014 "),fX=n(Fke,"A",{href:!0});var Vut=s(fX);fQo=r(Vut,"LongformerForQuestionAnswering"),Vut.forEach(t),mQo=r(Fke," (Longformer model)"),Fke.forEach(t),gQo=i(X),D4=n(X,"LI",{});var Tke=s(D4);Ppe=n(Tke,"STRONG",{});var Xut=s(Ppe);hQo=r(Xut,"lxmert"),Xut.forEach(t),pQo=r(Tke," \u2014 "),mX=n(Tke,"A",{href:!0});var zut=s(mX);_Qo=r(zut,"LxmertForQuestionAnswering"),zut.forEach(t),uQo=r(Tke," (LXMERT model)"),Tke.forEach(t),bQo=i(X),G4=n(X,"LI",{});var Mke=s(G4);Bpe=n(Mke,"STRONG",{});var Wut=s(Bpe);vQo=r(Wut,"mbart"),Wut.forEach(t),FQo=r(Mke," \u2014 "),gX=n(Mke,"A",{href:!0});var Qut=s(gX);TQo=r(Qut,"MBartForQuestionAnswering"),Qut.forEach(t),MQo=r(Mke," (mBART model)"),Mke.forEach(t),EQo=i(X),O4=n(X,"LI",{});var Eke=s(O4);Ipe=n(Eke,"STRONG",{});var Hut=s(Ipe);CQo=r(Hut,"megatron-bert"),Hut.forEach(t),wQo=r(Eke," \u2014 "),hX=n(Eke,"A",{href:!0});var Uut=s(hX);AQo=r(Uut,"MegatronBertForQuestionAnswering"),Uut.forEach(t),yQo=r(Eke," (Megatron-BERT model)"),Eke.forEach(t),LQo=i(X),V4=n(X,"LI",{});var Cke=s(V4);Npe=n(Cke,"STRONG",{});var Jut=s(Npe);xQo=r(Jut,"mobilebert"),Jut.forEach(t),$Qo=r(Cke," \u2014 "),pX=n(Cke,"A",{href:!0});var Yut=s(pX);kQo=r(Yut,"MobileBertForQuestionAnswering"),Yut.forEach(t),SQo=r(Cke," (MobileBERT model)"),Cke.forEach(t),RQo=i(X),X4=n(X,"LI",{});var wke=s(X4);qpe=n(wke,"STRONG",{});var Kut=s(qpe);PQo=r(Kut,"mpnet"),Kut.forEach(t),BQo=r(wke," \u2014 "),_X=n(wke,"A",{href:!0});var Zut=s(_X);IQo=r(Zut,"MPNetForQuestionAnswering"),Zut.forEach(t),NQo=r(wke," (MPNet model)"),wke.forEach(t),qQo=i(X),z4=n(X,"LI",{});var Ake=s(z4);jpe=n(Ake,"STRONG",{});var e2t=s(jpe);jQo=r(e2t,"nystromformer"),e2t.forEach(t),DQo=r(Ake," \u2014 "),uX=n(Ake,"A",{href:!0});var o2t=s(uX);GQo=r(o2t,"NystromformerForQuestionAnswering"),o2t.forEach(t),OQo=r(Ake," (Nystr\xF6mformer model)"),Ake.forEach(t),VQo=i(X),W4=n(X,"LI",{});var yke=s(W4);Dpe=n(yke,"STRONG",{});var r2t=s(Dpe);XQo=r(r2t,"qdqbert"),r2t.forEach(t),zQo=r(yke," \u2014 "),bX=n(yke,"A",{href:!0});var t2t=s(bX);WQo=r(t2t,"QDQBertForQuestionAnswering"),t2t.forEach(t),QQo=r(yke," (QDQBert model)"),yke.forEach(t),HQo=i(X),Q4=n(X,"LI",{});var Lke=s(Q4);Gpe=n(Lke,"STRONG",{});var a2t=s(Gpe);UQo=r(a2t,"reformer"),a2t.forEach(t),JQo=r(Lke," \u2014 "),vX=n(Lke,"A",{href:!0});var n2t=s(vX);YQo=r(n2t,"ReformerForQuestionAnswering"),n2t.forEach(t),KQo=r(Lke," (Reformer model)"),Lke.forEach(t),ZQo=i(X),H4=n(X,"LI",{});var xke=s(H4);Ope=n(xke,"STRONG",{});var s2t=s(Ope);eHo=r(s2t,"rembert"),s2t.forEach(t),oHo=r(xke," \u2014 "),FX=n(xke,"A",{href:!0});var l2t=s(FX);rHo=r(l2t,"RemBertForQuestionAnswering"),l2t.forEach(t),tHo=r(xke," (RemBERT model)"),xke.forEach(t),aHo=i(X),U4=n(X,"LI",{});var $ke=s(U4);Vpe=n($ke,"STRONG",{});var i2t=s(Vpe);nHo=r(i2t,"roberta"),i2t.forEach(t),sHo=r($ke," \u2014 "),TX=n($ke,"A",{href:!0});var d2t=s(TX);lHo=r(d2t,"RobertaForQuestionAnswering"),d2t.forEach(t),iHo=r($ke," (RoBERTa model)"),$ke.forEach(t),dHo=i(X),J4=n(X,"LI",{});var kke=s(J4);Xpe=n(kke,"STRONG",{});var c2t=s(Xpe);cHo=r(c2t,"roformer"),c2t.forEach(t),fHo=r(kke," \u2014 "),MX=n(kke,"A",{href:!0});var f2t=s(MX);mHo=r(f2t,"RoFormerForQuestionAnswering"),f2t.forEach(t),gHo=r(kke," (RoFormer model)"),kke.forEach(t),hHo=i(X),Y4=n(X,"LI",{});var Ske=s(Y4);zpe=n(Ske,"STRONG",{});var m2t=s(zpe);pHo=r(m2t,"splinter"),m2t.forEach(t),_Ho=r(Ske," \u2014 "),EX=n(Ske,"A",{href:!0});var g2t=s(EX);uHo=r(g2t,"SplinterForQuestionAnswering"),g2t.forEach(t),bHo=r(Ske," (Splinter model)"),Ske.forEach(t),vHo=i(X),K4=n(X,"LI",{});var Rke=s(K4);Wpe=n(Rke,"STRONG",{});var h2t=s(Wpe);FHo=r(h2t,"squeezebert"),h2t.forEach(t),THo=r(Rke," \u2014 "),CX=n(Rke,"A",{href:!0});var p2t=s(CX);MHo=r(p2t,"SqueezeBertForQuestionAnswering"),p2t.forEach(t),EHo=r(Rke," (SqueezeBERT model)"),Rke.forEach(t),CHo=i(X),Z4=n(X,"LI",{});var Pke=s(Z4);Qpe=n(Pke,"STRONG",{});var _2t=s(Qpe);wHo=r(_2t,"xlm"),_2t.forEach(t),AHo=r(Pke," \u2014 "),wX=n(Pke,"A",{href:!0});var u2t=s(wX);yHo=r(u2t,"XLMForQuestionAnsweringSimple"),u2t.forEach(t),LHo=r(Pke," (XLM model)"),Pke.forEach(t),xHo=i(X),ev=n(X,"LI",{});var Bke=s(ev);Hpe=n(Bke,"STRONG",{});var b2t=s(Hpe);$Ho=r(b2t,"xlm-roberta"),b2t.forEach(t),kHo=r(Bke," \u2014 "),AX=n(Bke,"A",{href:!0});var v2t=s(AX);SHo=r(v2t,"XLMRobertaForQuestionAnswering"),v2t.forEach(t),RHo=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),PHo=i(X),ov=n(X,"LI",{});var Ike=s(ov);Upe=n(Ike,"STRONG",{});var F2t=s(Upe);BHo=r(F2t,"xlm-roberta-xl"),F2t.forEach(t),IHo=r(Ike," \u2014 "),yX=n(Ike,"A",{href:!0});var T2t=s(yX);NHo=r(T2t,"XLMRobertaXLForQuestionAnswering"),T2t.forEach(t),qHo=r(Ike," (XLM-RoBERTa-XL model)"),Ike.forEach(t),jHo=i(X),rv=n(X,"LI",{});var Nke=s(rv);Jpe=n(Nke,"STRONG",{});var M2t=s(Jpe);DHo=r(M2t,"xlnet"),M2t.forEach(t),GHo=r(Nke," \u2014 "),LX=n(Nke,"A",{href:!0});var E2t=s(LX);OHo=r(E2t,"XLNetForQuestionAnsweringSimple"),E2t.forEach(t),VHo=r(Nke," (XLNet model)"),Nke.forEach(t),XHo=i(X),tv=n(X,"LI",{});var qke=s(tv);Ype=n(qke,"STRONG",{});var C2t=s(Ype);zHo=r(C2t,"yoso"),C2t.forEach(t),WHo=r(qke," \u2014 "),xX=n(qke,"A",{href:!0});var w2t=s(xX);QHo=r(w2t,"YosoForQuestionAnswering"),w2t.forEach(t),HHo=r(qke," (YOSO model)"),qke.forEach(t),X.forEach(t),UHo=i(fa),av=n(fa,"P",{});var jke=s(av);JHo=r(jke,"The model is set in evaluation mode by default using "),Kpe=n(jke,"CODE",{});var A2t=s(Kpe);YHo=r(A2t,"model.eval()"),A2t.forEach(t),KHo=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zpe=n(jke,"CODE",{});var y2t=s(Zpe);ZHo=r(y2t,"model.train()"),y2t.forEach(t),jke.forEach(t),eUo=i(fa),T(nv.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),Mje=i(f),td=n(f,"H2",{class:!0});var AGe=s(td);sv=n(AGe,"A",{id:!0,class:!0,href:!0});var L2t=s(sv);e_e=n(L2t,"SPAN",{});var x2t=s(e_e);T(sL.$$.fragment,x2t),x2t.forEach(t),L2t.forEach(t),oUo=i(AGe),o_e=n(AGe,"SPAN",{});var $2t=s(o_e);rUo=r($2t,"AutoModelForTableQuestionAnswering"),$2t.forEach(t),AGe.forEach(t),Eje=i(f),qo=n(f,"DIV",{class:!0});var Zs=s(qo);T(lL.$$.fragment,Zs),tUo=i(Zs),ad=n(Zs,"P",{});var nee=s(ad);aUo=r(nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),$X=n(nee,"A",{href:!0});var k2t=s($X);nUo=r(k2t,"from_pretrained()"),k2t.forEach(t),sUo=r(nee," class method or the "),kX=n(nee,"A",{href:!0});var S2t=s(kX);lUo=r(S2t,"from_config()"),S2t.forEach(t),iUo=r(nee,` class
method.`),nee.forEach(t),dUo=i(Zs),iL=n(Zs,"P",{});var yGe=s(iL);cUo=r(yGe,"This class cannot be instantiated directly using "),r_e=n(yGe,"CODE",{});var R2t=s(r_e);fUo=r(R2t,"__init__()"),R2t.forEach(t),mUo=r(yGe," (throws an error)."),yGe.forEach(t),gUo=i(Zs),ht=n(Zs,"DIV",{class:!0});var dA=s(ht);T(dL.$$.fragment,dA),hUo=i(dA),t_e=n(dA,"P",{});var P2t=s(t_e);pUo=r(P2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P2t.forEach(t),_Uo=i(dA),nd=n(dA,"P",{});var see=s(nd);uUo=r(see,`Note:
Loading a model from its configuration file does `),a_e=n(see,"STRONG",{});var B2t=s(a_e);bUo=r(B2t,"not"),B2t.forEach(t),vUo=r(see,` load the model weights. It only affects the
model\u2019s configuration. Use `),SX=n(see,"A",{href:!0});var I2t=s(SX);FUo=r(I2t,"from_pretrained()"),I2t.forEach(t),TUo=r(see," to load the model weights."),see.forEach(t),MUo=i(dA),T(lv.$$.fragment,dA),dA.forEach(t),EUo=i(Zs),so=n(Zs,"DIV",{class:!0});var ma=s(so);T(cL.$$.fragment,ma),CUo=i(ma),n_e=n(ma,"P",{});var N2t=s(n_e);wUo=r(N2t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),N2t.forEach(t),AUo=i(ma),ja=n(ma,"P",{});var cA=s(ja);yUo=r(cA,"The model class to instantiate is selected based on the "),s_e=n(cA,"CODE",{});var q2t=s(s_e);LUo=r(q2t,"model_type"),q2t.forEach(t),xUo=r(cA,` property of the config object (either
passed as an argument or loaded from `),l_e=n(cA,"CODE",{});var j2t=s(l_e);$Uo=r(j2t,"pretrained_model_name_or_path"),j2t.forEach(t),kUo=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i_e=n(cA,"CODE",{});var D2t=s(i_e);SUo=r(D2t,"pretrained_model_name_or_path"),D2t.forEach(t),RUo=r(cA,":"),cA.forEach(t),PUo=i(ma),d_e=n(ma,"UL",{});var G2t=s(d_e);iv=n(G2t,"LI",{});var Dke=s(iv);c_e=n(Dke,"STRONG",{});var O2t=s(c_e);BUo=r(O2t,"tapas"),O2t.forEach(t),IUo=r(Dke," \u2014 "),RX=n(Dke,"A",{href:!0});var V2t=s(RX);NUo=r(V2t,"TapasForQuestionAnswering"),V2t.forEach(t),qUo=r(Dke," (TAPAS model)"),Dke.forEach(t),G2t.forEach(t),jUo=i(ma),dv=n(ma,"P",{});var Gke=s(dv);DUo=r(Gke,"The model is set in evaluation mode by default using "),f_e=n(Gke,"CODE",{});var X2t=s(f_e);GUo=r(X2t,"model.eval()"),X2t.forEach(t),OUo=r(Gke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m_e=n(Gke,"CODE",{});var z2t=s(m_e);VUo=r(z2t,"model.train()"),z2t.forEach(t),Gke.forEach(t),XUo=i(ma),T(cv.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),Cje=i(f),sd=n(f,"H2",{class:!0});var LGe=s(sd);fv=n(LGe,"A",{id:!0,class:!0,href:!0});var W2t=s(fv);g_e=n(W2t,"SPAN",{});var Q2t=s(g_e);T(fL.$$.fragment,Q2t),Q2t.forEach(t),W2t.forEach(t),zUo=i(LGe),h_e=n(LGe,"SPAN",{});var H2t=s(h_e);WUo=r(H2t,"AutoModelForImageClassification"),H2t.forEach(t),LGe.forEach(t),wje=i(f),jo=n(f,"DIV",{class:!0});var el=s(jo);T(mL.$$.fragment,el),QUo=i(el),ld=n(el,"P",{});var lee=s(ld);HUo=r(lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PX=n(lee,"A",{href:!0});var U2t=s(PX);UUo=r(U2t,"from_pretrained()"),U2t.forEach(t),JUo=r(lee," class method or the "),BX=n(lee,"A",{href:!0});var J2t=s(BX);YUo=r(J2t,"from_config()"),J2t.forEach(t),KUo=r(lee,` class
method.`),lee.forEach(t),ZUo=i(el),gL=n(el,"P",{});var xGe=s(gL);eJo=r(xGe,"This class cannot be instantiated directly using "),p_e=n(xGe,"CODE",{});var Y2t=s(p_e);oJo=r(Y2t,"__init__()"),Y2t.forEach(t),rJo=r(xGe," (throws an error)."),xGe.forEach(t),tJo=i(el),pt=n(el,"DIV",{class:!0});var fA=s(pt);T(hL.$$.fragment,fA),aJo=i(fA),__e=n(fA,"P",{});var K2t=s(__e);nJo=r(K2t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),K2t.forEach(t),sJo=i(fA),id=n(fA,"P",{});var iee=s(id);lJo=r(iee,`Note:
Loading a model from its configuration file does `),u_e=n(iee,"STRONG",{});var Z2t=s(u_e);iJo=r(Z2t,"not"),Z2t.forEach(t),dJo=r(iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(iee,"A",{href:!0});var e1t=s(IX);cJo=r(e1t,"from_pretrained()"),e1t.forEach(t),fJo=r(iee," to load the model weights."),iee.forEach(t),mJo=i(fA),T(mv.$$.fragment,fA),fA.forEach(t),gJo=i(el),lo=n(el,"DIV",{class:!0});var ga=s(lo);T(pL.$$.fragment,ga),hJo=i(ga),b_e=n(ga,"P",{});var o1t=s(b_e);pJo=r(o1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),o1t.forEach(t),_Jo=i(ga),Da=n(ga,"P",{});var mA=s(Da);uJo=r(mA,"The model class to instantiate is selected based on the "),v_e=n(mA,"CODE",{});var r1t=s(v_e);bJo=r(r1t,"model_type"),r1t.forEach(t),vJo=r(mA,` property of the config object (either
passed as an argument or loaded from `),F_e=n(mA,"CODE",{});var t1t=s(F_e);FJo=r(t1t,"pretrained_model_name_or_path"),t1t.forEach(t),TJo=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(mA,"CODE",{});var a1t=s(T_e);MJo=r(a1t,"pretrained_model_name_or_path"),a1t.forEach(t),EJo=r(mA,":"),mA.forEach(t),CJo=i(ga),ve=n(ga,"UL",{});var Te=s(ve);gv=n(Te,"LI",{});var Oke=s(gv);M_e=n(Oke,"STRONG",{});var n1t=s(M_e);wJo=r(n1t,"beit"),n1t.forEach(t),AJo=r(Oke," \u2014 "),NX=n(Oke,"A",{href:!0});var s1t=s(NX);yJo=r(s1t,"BeitForImageClassification"),s1t.forEach(t),LJo=r(Oke," (BEiT model)"),Oke.forEach(t),xJo=i(Te),hv=n(Te,"LI",{});var Vke=s(hv);E_e=n(Vke,"STRONG",{});var l1t=s(E_e);$Jo=r(l1t,"convnext"),l1t.forEach(t),kJo=r(Vke," \u2014 "),qX=n(Vke,"A",{href:!0});var i1t=s(qX);SJo=r(i1t,"ConvNextForImageClassification"),i1t.forEach(t),RJo=r(Vke," (ConvNeXT model)"),Vke.forEach(t),PJo=i(Te),pv=n(Te,"LI",{});var Xke=s(pv);C_e=n(Xke,"STRONG",{});var d1t=s(C_e);BJo=r(d1t,"cvt"),d1t.forEach(t),IJo=r(Xke," \u2014 "),jX=n(Xke,"A",{href:!0});var c1t=s(jX);NJo=r(c1t,"CvtForImageClassification"),c1t.forEach(t),qJo=r(Xke," (CvT model)"),Xke.forEach(t),jJo=i(Te),_v=n(Te,"LI",{});var zke=s(_v);w_e=n(zke,"STRONG",{});var f1t=s(w_e);DJo=r(f1t,"data2vec-vision"),f1t.forEach(t),GJo=r(zke," \u2014 "),DX=n(zke,"A",{href:!0});var m1t=s(DX);OJo=r(m1t,"Data2VecVisionForImageClassification"),m1t.forEach(t),VJo=r(zke," (Data2VecVision model)"),zke.forEach(t),XJo=i(Te),Bs=n(Te,"LI",{});var ek=s(Bs);A_e=n(ek,"STRONG",{});var g1t=s(A_e);zJo=r(g1t,"deit"),g1t.forEach(t),WJo=r(ek," \u2014 "),GX=n(ek,"A",{href:!0});var h1t=s(GX);QJo=r(h1t,"DeiTForImageClassification"),h1t.forEach(t),HJo=r(ek," or "),OX=n(ek,"A",{href:!0});var p1t=s(OX);UJo=r(p1t,"DeiTForImageClassificationWithTeacher"),p1t.forEach(t),JJo=r(ek," (DeiT model)"),ek.forEach(t),YJo=i(Te),uv=n(Te,"LI",{});var Wke=s(uv);y_e=n(Wke,"STRONG",{});var _1t=s(y_e);KJo=r(_1t,"imagegpt"),_1t.forEach(t),ZJo=r(Wke," \u2014 "),VX=n(Wke,"A",{href:!0});var u1t=s(VX);eYo=r(u1t,"ImageGPTForImageClassification"),u1t.forEach(t),oYo=r(Wke," (ImageGPT model)"),Wke.forEach(t),rYo=i(Te),Is=n(Te,"LI",{});var ok=s(Is);L_e=n(ok,"STRONG",{});var b1t=s(L_e);tYo=r(b1t,"levit"),b1t.forEach(t),aYo=r(ok," \u2014 "),XX=n(ok,"A",{href:!0});var v1t=s(XX);nYo=r(v1t,"LevitForImageClassification"),v1t.forEach(t),sYo=r(ok," or "),zX=n(ok,"A",{href:!0});var F1t=s(zX);lYo=r(F1t,"LevitForImageClassificationWithTeacher"),F1t.forEach(t),iYo=r(ok," (LeViT model)"),ok.forEach(t),dYo=i(Te),_t=n(Te,"LI",{});var _f=s(_t);x_e=n(_f,"STRONG",{});var T1t=s(x_e);cYo=r(T1t,"perceiver"),T1t.forEach(t),fYo=r(_f," \u2014 "),WX=n(_f,"A",{href:!0});var M1t=s(WX);mYo=r(M1t,"PerceiverForImageClassificationLearned"),M1t.forEach(t),gYo=r(_f," or "),QX=n(_f,"A",{href:!0});var E1t=s(QX);hYo=r(E1t,"PerceiverForImageClassificationFourier"),E1t.forEach(t),pYo=r(_f," or "),HX=n(_f,"A",{href:!0});var C1t=s(HX);_Yo=r(C1t,"PerceiverForImageClassificationConvProcessing"),C1t.forEach(t),uYo=r(_f," (Perceiver model)"),_f.forEach(t),bYo=i(Te),bv=n(Te,"LI",{});var Qke=s(bv);$_e=n(Qke,"STRONG",{});var w1t=s($_e);vYo=r(w1t,"poolformer"),w1t.forEach(t),FYo=r(Qke," \u2014 "),UX=n(Qke,"A",{href:!0});var A1t=s(UX);TYo=r(A1t,"PoolFormerForImageClassification"),A1t.forEach(t),MYo=r(Qke," (PoolFormer model)"),Qke.forEach(t),EYo=i(Te),vv=n(Te,"LI",{});var Hke=s(vv);k_e=n(Hke,"STRONG",{});var y1t=s(k_e);CYo=r(y1t,"regnet"),y1t.forEach(t),wYo=r(Hke," \u2014 "),JX=n(Hke,"A",{href:!0});var L1t=s(JX);AYo=r(L1t,"RegNetForImageClassification"),L1t.forEach(t),yYo=r(Hke," (RegNet model)"),Hke.forEach(t),LYo=i(Te),Fv=n(Te,"LI",{});var Uke=s(Fv);S_e=n(Uke,"STRONG",{});var x1t=s(S_e);xYo=r(x1t,"resnet"),x1t.forEach(t),$Yo=r(Uke," \u2014 "),YX=n(Uke,"A",{href:!0});var $1t=s(YX);kYo=r($1t,"ResNetForImageClassification"),$1t.forEach(t),SYo=r(Uke," (ResNet model)"),Uke.forEach(t),RYo=i(Te),Tv=n(Te,"LI",{});var Jke=s(Tv);R_e=n(Jke,"STRONG",{});var k1t=s(R_e);PYo=r(k1t,"segformer"),k1t.forEach(t),BYo=r(Jke," \u2014 "),KX=n(Jke,"A",{href:!0});var S1t=s(KX);IYo=r(S1t,"SegformerForImageClassification"),S1t.forEach(t),NYo=r(Jke," (SegFormer model)"),Jke.forEach(t),qYo=i(Te),Mv=n(Te,"LI",{});var Yke=s(Mv);P_e=n(Yke,"STRONG",{});var R1t=s(P_e);jYo=r(R1t,"swin"),R1t.forEach(t),DYo=r(Yke," \u2014 "),ZX=n(Yke,"A",{href:!0});var P1t=s(ZX);GYo=r(P1t,"SwinForImageClassification"),P1t.forEach(t),OYo=r(Yke," (Swin Transformer model)"),Yke.forEach(t),VYo=i(Te),Ev=n(Te,"LI",{});var Kke=s(Ev);B_e=n(Kke,"STRONG",{});var B1t=s(B_e);XYo=r(B1t,"van"),B1t.forEach(t),zYo=r(Kke," \u2014 "),ez=n(Kke,"A",{href:!0});var I1t=s(ez);WYo=r(I1t,"VanForImageClassification"),I1t.forEach(t),QYo=r(Kke," (VAN model)"),Kke.forEach(t),HYo=i(Te),Cv=n(Te,"LI",{});var Zke=s(Cv);I_e=n(Zke,"STRONG",{});var N1t=s(I_e);UYo=r(N1t,"vit"),N1t.forEach(t),JYo=r(Zke," \u2014 "),oz=n(Zke,"A",{href:!0});var q1t=s(oz);YYo=r(q1t,"ViTForImageClassification"),q1t.forEach(t),KYo=r(Zke," (ViT model)"),Zke.forEach(t),Te.forEach(t),ZYo=i(ga),wv=n(ga,"P",{});var eSe=s(wv);eKo=r(eSe,"The model is set in evaluation mode by default using "),N_e=n(eSe,"CODE",{});var j1t=s(N_e);oKo=r(j1t,"model.eval()"),j1t.forEach(t),rKo=r(eSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(eSe,"CODE",{});var D1t=s(q_e);tKo=r(D1t,"model.train()"),D1t.forEach(t),eSe.forEach(t),aKo=i(ga),T(Av.$$.fragment,ga),ga.forEach(t),el.forEach(t),Aje=i(f),dd=n(f,"H2",{class:!0});var $Ge=s(dd);yv=n($Ge,"A",{id:!0,class:!0,href:!0});var G1t=s(yv);j_e=n(G1t,"SPAN",{});var O1t=s(j_e);T(_L.$$.fragment,O1t),O1t.forEach(t),G1t.forEach(t),nKo=i($Ge),D_e=n($Ge,"SPAN",{});var V1t=s(D_e);sKo=r(V1t,"AutoModelForVision2Seq"),V1t.forEach(t),$Ge.forEach(t),yje=i(f),Do=n(f,"DIV",{class:!0});var ol=s(Do);T(uL.$$.fragment,ol),lKo=i(ol),cd=n(ol,"P",{});var dee=s(cd);iKo=r(dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),rz=n(dee,"A",{href:!0});var X1t=s(rz);dKo=r(X1t,"from_pretrained()"),X1t.forEach(t),cKo=r(dee," class method or the "),tz=n(dee,"A",{href:!0});var z1t=s(tz);fKo=r(z1t,"from_config()"),z1t.forEach(t),mKo=r(dee,` class
method.`),dee.forEach(t),gKo=i(ol),bL=n(ol,"P",{});var kGe=s(bL);hKo=r(kGe,"This class cannot be instantiated directly using "),G_e=n(kGe,"CODE",{});var W1t=s(G_e);pKo=r(W1t,"__init__()"),W1t.forEach(t),_Ko=r(kGe," (throws an error)."),kGe.forEach(t),uKo=i(ol),ut=n(ol,"DIV",{class:!0});var gA=s(ut);T(vL.$$.fragment,gA),bKo=i(gA),O_e=n(gA,"P",{});var Q1t=s(O_e);vKo=r(Q1t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q1t.forEach(t),FKo=i(gA),fd=n(gA,"P",{});var cee=s(fd);TKo=r(cee,`Note:
Loading a model from its configuration file does `),V_e=n(cee,"STRONG",{});var H1t=s(V_e);MKo=r(H1t,"not"),H1t.forEach(t),EKo=r(cee,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(cee,"A",{href:!0});var U1t=s(az);CKo=r(U1t,"from_pretrained()"),U1t.forEach(t),wKo=r(cee," to load the model weights."),cee.forEach(t),AKo=i(gA),T(Lv.$$.fragment,gA),gA.forEach(t),yKo=i(ol),io=n(ol,"DIV",{class:!0});var ha=s(io);T(FL.$$.fragment,ha),LKo=i(ha),X_e=n(ha,"P",{});var J1t=s(X_e);xKo=r(J1t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J1t.forEach(t),$Ko=i(ha),Ga=n(ha,"P",{});var hA=s(Ga);kKo=r(hA,"The model class to instantiate is selected based on the "),z_e=n(hA,"CODE",{});var Y1t=s(z_e);SKo=r(Y1t,"model_type"),Y1t.forEach(t),RKo=r(hA,` property of the config object (either
passed as an argument or loaded from `),W_e=n(hA,"CODE",{});var K1t=s(W_e);PKo=r(K1t,"pretrained_model_name_or_path"),K1t.forEach(t),BKo=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q_e=n(hA,"CODE",{});var Z1t=s(Q_e);IKo=r(Z1t,"pretrained_model_name_or_path"),Z1t.forEach(t),NKo=r(hA,":"),hA.forEach(t),qKo=i(ha),H_e=n(ha,"UL",{});var e7t=s(H_e);xv=n(e7t,"LI",{});var oSe=s(xv);U_e=n(oSe,"STRONG",{});var o7t=s(U_e);jKo=r(o7t,"vision-encoder-decoder"),o7t.forEach(t),DKo=r(oSe," \u2014 "),nz=n(oSe,"A",{href:!0});var r7t=s(nz);GKo=r(r7t,"VisionEncoderDecoderModel"),r7t.forEach(t),OKo=r(oSe," (Vision Encoder decoder model)"),oSe.forEach(t),e7t.forEach(t),VKo=i(ha),$v=n(ha,"P",{});var rSe=s($v);XKo=r(rSe,"The model is set in evaluation mode by default using "),J_e=n(rSe,"CODE",{});var t7t=s(J_e);zKo=r(t7t,"model.eval()"),t7t.forEach(t),WKo=r(rSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y_e=n(rSe,"CODE",{});var a7t=s(Y_e);QKo=r(a7t,"model.train()"),a7t.forEach(t),rSe.forEach(t),HKo=i(ha),T(kv.$$.fragment,ha),ha.forEach(t),ol.forEach(t),Lje=i(f),md=n(f,"H2",{class:!0});var SGe=s(md);Sv=n(SGe,"A",{id:!0,class:!0,href:!0});var n7t=s(Sv);K_e=n(n7t,"SPAN",{});var s7t=s(K_e);T(TL.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),UKo=i(SGe),Z_e=n(SGe,"SPAN",{});var l7t=s(Z_e);JKo=r(l7t,"AutoModelForAudioClassification"),l7t.forEach(t),SGe.forEach(t),xje=i(f),Go=n(f,"DIV",{class:!0});var rl=s(Go);T(ML.$$.fragment,rl),YKo=i(rl),gd=n(rl,"P",{});var fee=s(gd);KKo=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sz=n(fee,"A",{href:!0});var i7t=s(sz);ZKo=r(i7t,"from_pretrained()"),i7t.forEach(t),eZo=r(fee," class method or the "),lz=n(fee,"A",{href:!0});var d7t=s(lz);oZo=r(d7t,"from_config()"),d7t.forEach(t),rZo=r(fee,` class
method.`),fee.forEach(t),tZo=i(rl),EL=n(rl,"P",{});var RGe=s(EL);aZo=r(RGe,"This class cannot be instantiated directly using "),eue=n(RGe,"CODE",{});var c7t=s(eue);nZo=r(c7t,"__init__()"),c7t.forEach(t),sZo=r(RGe," (throws an error)."),RGe.forEach(t),lZo=i(rl),bt=n(rl,"DIV",{class:!0});var pA=s(bt);T(CL.$$.fragment,pA),iZo=i(pA),oue=n(pA,"P",{});var f7t=s(oue);dZo=r(f7t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),f7t.forEach(t),cZo=i(pA),hd=n(pA,"P",{});var mee=s(hd);fZo=r(mee,`Note:
Loading a model from its configuration file does `),rue=n(mee,"STRONG",{});var m7t=s(rue);mZo=r(m7t,"not"),m7t.forEach(t),gZo=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),iz=n(mee,"A",{href:!0});var g7t=s(iz);hZo=r(g7t,"from_pretrained()"),g7t.forEach(t),pZo=r(mee," to load the model weights."),mee.forEach(t),_Zo=i(pA),T(Rv.$$.fragment,pA),pA.forEach(t),uZo=i(rl),co=n(rl,"DIV",{class:!0});var pa=s(co);T(wL.$$.fragment,pa),bZo=i(pa),tue=n(pa,"P",{});var h7t=s(tue);vZo=r(h7t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),h7t.forEach(t),FZo=i(pa),Oa=n(pa,"P",{});var _A=s(Oa);TZo=r(_A,"The model class to instantiate is selected based on the "),aue=n(_A,"CODE",{});var p7t=s(aue);MZo=r(p7t,"model_type"),p7t.forEach(t),EZo=r(_A,` property of the config object (either
passed as an argument or loaded from `),nue=n(_A,"CODE",{});var _7t=s(nue);CZo=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),wZo=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sue=n(_A,"CODE",{});var u7t=s(sue);AZo=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),yZo=r(_A,":"),_A.forEach(t),LZo=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);Pv=n(Ve,"LI",{});var tSe=s(Pv);lue=n(tSe,"STRONG",{});var b7t=s(lue);xZo=r(b7t,"data2vec-audio"),b7t.forEach(t),$Zo=r(tSe," \u2014 "),dz=n(tSe,"A",{href:!0});var v7t=s(dz);kZo=r(v7t,"Data2VecAudioForSequenceClassification"),v7t.forEach(t),SZo=r(tSe," (Data2VecAudio model)"),tSe.forEach(t),RZo=i(Ve),Bv=n(Ve,"LI",{});var aSe=s(Bv);iue=n(aSe,"STRONG",{});var F7t=s(iue);PZo=r(F7t,"hubert"),F7t.forEach(t),BZo=r(aSe," \u2014 "),cz=n(aSe,"A",{href:!0});var T7t=s(cz);IZo=r(T7t,"HubertForSequenceClassification"),T7t.forEach(t),NZo=r(aSe," (Hubert model)"),aSe.forEach(t),qZo=i(Ve),Iv=n(Ve,"LI",{});var nSe=s(Iv);due=n(nSe,"STRONG",{});var M7t=s(due);jZo=r(M7t,"sew"),M7t.forEach(t),DZo=r(nSe," \u2014 "),fz=n(nSe,"A",{href:!0});var E7t=s(fz);GZo=r(E7t,"SEWForSequenceClassification"),E7t.forEach(t),OZo=r(nSe," (SEW model)"),nSe.forEach(t),VZo=i(Ve),Nv=n(Ve,"LI",{});var sSe=s(Nv);cue=n(sSe,"STRONG",{});var C7t=s(cue);XZo=r(C7t,"sew-d"),C7t.forEach(t),zZo=r(sSe," \u2014 "),mz=n(sSe,"A",{href:!0});var w7t=s(mz);WZo=r(w7t,"SEWDForSequenceClassification"),w7t.forEach(t),QZo=r(sSe," (SEW-D model)"),sSe.forEach(t),HZo=i(Ve),qv=n(Ve,"LI",{});var lSe=s(qv);fue=n(lSe,"STRONG",{});var A7t=s(fue);UZo=r(A7t,"unispeech"),A7t.forEach(t),JZo=r(lSe," \u2014 "),gz=n(lSe,"A",{href:!0});var y7t=s(gz);YZo=r(y7t,"UniSpeechForSequenceClassification"),y7t.forEach(t),KZo=r(lSe," (UniSpeech model)"),lSe.forEach(t),ZZo=i(Ve),jv=n(Ve,"LI",{});var iSe=s(jv);mue=n(iSe,"STRONG",{});var L7t=s(mue);eer=r(L7t,"unispeech-sat"),L7t.forEach(t),oer=r(iSe," \u2014 "),hz=n(iSe,"A",{href:!0});var x7t=s(hz);rer=r(x7t,"UniSpeechSatForSequenceClassification"),x7t.forEach(t),ter=r(iSe," (UniSpeechSat model)"),iSe.forEach(t),aer=i(Ve),Dv=n(Ve,"LI",{});var dSe=s(Dv);gue=n(dSe,"STRONG",{});var $7t=s(gue);ner=r($7t,"wav2vec2"),$7t.forEach(t),ser=r(dSe," \u2014 "),pz=n(dSe,"A",{href:!0});var k7t=s(pz);ler=r(k7t,"Wav2Vec2ForSequenceClassification"),k7t.forEach(t),ier=r(dSe," (Wav2Vec2 model)"),dSe.forEach(t),der=i(Ve),Gv=n(Ve,"LI",{});var cSe=s(Gv);hue=n(cSe,"STRONG",{});var S7t=s(hue);cer=r(S7t,"wav2vec2-conformer"),S7t.forEach(t),fer=r(cSe," \u2014 "),_z=n(cSe,"A",{href:!0});var R7t=s(_z);mer=r(R7t,"Wav2Vec2ConformerForSequenceClassification"),R7t.forEach(t),ger=r(cSe," (Wav2Vec2-Conformer model)"),cSe.forEach(t),her=i(Ve),Ov=n(Ve,"LI",{});var fSe=s(Ov);pue=n(fSe,"STRONG",{});var P7t=s(pue);per=r(P7t,"wavlm"),P7t.forEach(t),_er=r(fSe," \u2014 "),uz=n(fSe,"A",{href:!0});var B7t=s(uz);uer=r(B7t,"WavLMForSequenceClassification"),B7t.forEach(t),ber=r(fSe," (WavLM model)"),fSe.forEach(t),Ve.forEach(t),ver=i(pa),Vv=n(pa,"P",{});var mSe=s(Vv);Fer=r(mSe,"The model is set in evaluation mode by default using "),_ue=n(mSe,"CODE",{});var I7t=s(_ue);Ter=r(I7t,"model.eval()"),I7t.forEach(t),Mer=r(mSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uue=n(mSe,"CODE",{});var N7t=s(uue);Eer=r(N7t,"model.train()"),N7t.forEach(t),mSe.forEach(t),Cer=i(pa),T(Xv.$$.fragment,pa),pa.forEach(t),rl.forEach(t),$je=i(f),pd=n(f,"H2",{class:!0});var PGe=s(pd);zv=n(PGe,"A",{id:!0,class:!0,href:!0});var q7t=s(zv);bue=n(q7t,"SPAN",{});var j7t=s(bue);T(AL.$$.fragment,j7t),j7t.forEach(t),q7t.forEach(t),wer=i(PGe),vue=n(PGe,"SPAN",{});var D7t=s(vue);Aer=r(D7t,"AutoModelForAudioFrameClassification"),D7t.forEach(t),PGe.forEach(t),kje=i(f),Oo=n(f,"DIV",{class:!0});var tl=s(Oo);T(yL.$$.fragment,tl),yer=i(tl),_d=n(tl,"P",{});var gee=s(_d);Ler=r(gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bz=n(gee,"A",{href:!0});var G7t=s(bz);xer=r(G7t,"from_pretrained()"),G7t.forEach(t),$er=r(gee," class method or the "),vz=n(gee,"A",{href:!0});var O7t=s(vz);ker=r(O7t,"from_config()"),O7t.forEach(t),Ser=r(gee,` class
method.`),gee.forEach(t),Rer=i(tl),LL=n(tl,"P",{});var BGe=s(LL);Per=r(BGe,"This class cannot be instantiated directly using "),Fue=n(BGe,"CODE",{});var V7t=s(Fue);Ber=r(V7t,"__init__()"),V7t.forEach(t),Ier=r(BGe," (throws an error)."),BGe.forEach(t),Ner=i(tl),vt=n(tl,"DIV",{class:!0});var uA=s(vt);T(xL.$$.fragment,uA),qer=i(uA),Tue=n(uA,"P",{});var X7t=s(Tue);jer=r(X7t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),X7t.forEach(t),Der=i(uA),ud=n(uA,"P",{});var hee=s(ud);Ger=r(hee,`Note:
Loading a model from its configuration file does `),Mue=n(hee,"STRONG",{});var z7t=s(Mue);Oer=r(z7t,"not"),z7t.forEach(t),Ver=r(hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(hee,"A",{href:!0});var W7t=s(Fz);Xer=r(W7t,"from_pretrained()"),W7t.forEach(t),zer=r(hee," to load the model weights."),hee.forEach(t),Wer=i(uA),T(Wv.$$.fragment,uA),uA.forEach(t),Qer=i(tl),fo=n(tl,"DIV",{class:!0});var _a=s(fo);T($L.$$.fragment,_a),Her=i(_a),Eue=n(_a,"P",{});var Q7t=s(Eue);Uer=r(Q7t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Q7t.forEach(t),Jer=i(_a),Va=n(_a,"P",{});var bA=s(Va);Yer=r(bA,"The model class to instantiate is selected based on the "),Cue=n(bA,"CODE",{});var H7t=s(Cue);Ker=r(H7t,"model_type"),H7t.forEach(t),Zer=r(bA,` property of the config object (either
passed as an argument or loaded from `),wue=n(bA,"CODE",{});var U7t=s(wue);eor=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),oor=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(bA,"CODE",{});var J7t=s(Aue);ror=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),tor=r(bA,":"),bA.forEach(t),aor=i(_a),Kr=n(_a,"UL",{});var al=s(Kr);Qv=n(al,"LI",{});var gSe=s(Qv);yue=n(gSe,"STRONG",{});var Y7t=s(yue);nor=r(Y7t,"data2vec-audio"),Y7t.forEach(t),sor=r(gSe," \u2014 "),Tz=n(gSe,"A",{href:!0});var K7t=s(Tz);lor=r(K7t,"Data2VecAudioForAudioFrameClassification"),K7t.forEach(t),ior=r(gSe," (Data2VecAudio model)"),gSe.forEach(t),dor=i(al),Hv=n(al,"LI",{});var hSe=s(Hv);Lue=n(hSe,"STRONG",{});var Z7t=s(Lue);cor=r(Z7t,"unispeech-sat"),Z7t.forEach(t),mor=r(hSe," \u2014 "),Mz=n(hSe,"A",{href:!0});var ebt=s(Mz);gor=r(ebt,"UniSpeechSatForAudioFrameClassification"),ebt.forEach(t),hor=r(hSe," (UniSpeechSat model)"),hSe.forEach(t),por=i(al),Uv=n(al,"LI",{});var pSe=s(Uv);xue=n(pSe,"STRONG",{});var obt=s(xue);_or=r(obt,"wav2vec2"),obt.forEach(t),uor=r(pSe," \u2014 "),Ez=n(pSe,"A",{href:!0});var rbt=s(Ez);bor=r(rbt,"Wav2Vec2ForAudioFrameClassification"),rbt.forEach(t),vor=r(pSe," (Wav2Vec2 model)"),pSe.forEach(t),For=i(al),Jv=n(al,"LI",{});var _Se=s(Jv);$ue=n(_Se,"STRONG",{});var tbt=s($ue);Tor=r(tbt,"wav2vec2-conformer"),tbt.forEach(t),Mor=r(_Se," \u2014 "),Cz=n(_Se,"A",{href:!0});var abt=s(Cz);Eor=r(abt,"Wav2Vec2ConformerForAudioFrameClassification"),abt.forEach(t),Cor=r(_Se," (Wav2Vec2-Conformer model)"),_Se.forEach(t),wor=i(al),Yv=n(al,"LI",{});var uSe=s(Yv);kue=n(uSe,"STRONG",{});var nbt=s(kue);Aor=r(nbt,"wavlm"),nbt.forEach(t),yor=r(uSe," \u2014 "),wz=n(uSe,"A",{href:!0});var sbt=s(wz);Lor=r(sbt,"WavLMForAudioFrameClassification"),sbt.forEach(t),xor=r(uSe," (WavLM model)"),uSe.forEach(t),al.forEach(t),$or=i(_a),Kv=n(_a,"P",{});var bSe=s(Kv);kor=r(bSe,"The model is set in evaluation mode by default using "),Sue=n(bSe,"CODE",{});var lbt=s(Sue);Sor=r(lbt,"model.eval()"),lbt.forEach(t),Ror=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(bSe,"CODE",{});var ibt=s(Rue);Por=r(ibt,"model.train()"),ibt.forEach(t),bSe.forEach(t),Bor=i(_a),T(Zv.$$.fragment,_a),_a.forEach(t),tl.forEach(t),Sje=i(f),bd=n(f,"H2",{class:!0});var IGe=s(bd);eF=n(IGe,"A",{id:!0,class:!0,href:!0});var dbt=s(eF);Pue=n(dbt,"SPAN",{});var cbt=s(Pue);T(kL.$$.fragment,cbt),cbt.forEach(t),dbt.forEach(t),Ior=i(IGe),Bue=n(IGe,"SPAN",{});var fbt=s(Bue);Nor=r(fbt,"AutoModelForCTC"),fbt.forEach(t),IGe.forEach(t),Rje=i(f),Vo=n(f,"DIV",{class:!0});var nl=s(Vo);T(SL.$$.fragment,nl),qor=i(nl),vd=n(nl,"P",{});var pee=s(vd);jor=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Az=n(pee,"A",{href:!0});var mbt=s(Az);Dor=r(mbt,"from_pretrained()"),mbt.forEach(t),Gor=r(pee," class method or the "),yz=n(pee,"A",{href:!0});var gbt=s(yz);Oor=r(gbt,"from_config()"),gbt.forEach(t),Vor=r(pee,` class
method.`),pee.forEach(t),Xor=i(nl),RL=n(nl,"P",{});var NGe=s(RL);zor=r(NGe,"This class cannot be instantiated directly using "),Iue=n(NGe,"CODE",{});var hbt=s(Iue);Wor=r(hbt,"__init__()"),hbt.forEach(t),Qor=r(NGe," (throws an error)."),NGe.forEach(t),Hor=i(nl),Ft=n(nl,"DIV",{class:!0});var vA=s(Ft);T(PL.$$.fragment,vA),Uor=i(vA),Nue=n(vA,"P",{});var pbt=s(Nue);Jor=r(pbt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),pbt.forEach(t),Yor=i(vA),Fd=n(vA,"P",{});var _ee=s(Fd);Kor=r(_ee,`Note:
Loading a model from its configuration file does `),que=n(_ee,"STRONG",{});var _bt=s(que);Zor=r(_bt,"not"),_bt.forEach(t),err=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lz=n(_ee,"A",{href:!0});var ubt=s(Lz);orr=r(ubt,"from_pretrained()"),ubt.forEach(t),rrr=r(_ee," to load the model weights."),_ee.forEach(t),trr=i(vA),T(oF.$$.fragment,vA),vA.forEach(t),arr=i(nl),mo=n(nl,"DIV",{class:!0});var ua=s(mo);T(BL.$$.fragment,ua),nrr=i(ua),jue=n(ua,"P",{});var bbt=s(jue);srr=r(bbt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),bbt.forEach(t),lrr=i(ua),Xa=n(ua,"P",{});var FA=s(Xa);irr=r(FA,"The model class to instantiate is selected based on the "),Due=n(FA,"CODE",{});var vbt=s(Due);drr=r(vbt,"model_type"),vbt.forEach(t),crr=r(FA,` property of the config object (either
passed as an argument or loaded from `),Gue=n(FA,"CODE",{});var Fbt=s(Gue);frr=r(Fbt,"pretrained_model_name_or_path"),Fbt.forEach(t),mrr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(FA,"CODE",{});var Tbt=s(Oue);grr=r(Tbt,"pretrained_model_name_or_path"),Tbt.forEach(t),hrr=r(FA,":"),FA.forEach(t),prr=i(ua),Re=n(ua,"UL",{});var Xe=s(Re);rF=n(Xe,"LI",{});var vSe=s(rF);Vue=n(vSe,"STRONG",{});var Mbt=s(Vue);_rr=r(Mbt,"data2vec-audio"),Mbt.forEach(t),urr=r(vSe," \u2014 "),xz=n(vSe,"A",{href:!0});var Ebt=s(xz);brr=r(Ebt,"Data2VecAudioForCTC"),Ebt.forEach(t),vrr=r(vSe," (Data2VecAudio model)"),vSe.forEach(t),Frr=i(Xe),tF=n(Xe,"LI",{});var FSe=s(tF);Xue=n(FSe,"STRONG",{});var Cbt=s(Xue);Trr=r(Cbt,"hubert"),Cbt.forEach(t),Mrr=r(FSe," \u2014 "),$z=n(FSe,"A",{href:!0});var wbt=s($z);Err=r(wbt,"HubertForCTC"),wbt.forEach(t),Crr=r(FSe," (Hubert model)"),FSe.forEach(t),wrr=i(Xe),aF=n(Xe,"LI",{});var TSe=s(aF);zue=n(TSe,"STRONG",{});var Abt=s(zue);Arr=r(Abt,"sew"),Abt.forEach(t),yrr=r(TSe," \u2014 "),kz=n(TSe,"A",{href:!0});var ybt=s(kz);Lrr=r(ybt,"SEWForCTC"),ybt.forEach(t),xrr=r(TSe," (SEW model)"),TSe.forEach(t),$rr=i(Xe),nF=n(Xe,"LI",{});var MSe=s(nF);Wue=n(MSe,"STRONG",{});var Lbt=s(Wue);krr=r(Lbt,"sew-d"),Lbt.forEach(t),Srr=r(MSe," \u2014 "),Sz=n(MSe,"A",{href:!0});var xbt=s(Sz);Rrr=r(xbt,"SEWDForCTC"),xbt.forEach(t),Prr=r(MSe," (SEW-D model)"),MSe.forEach(t),Brr=i(Xe),sF=n(Xe,"LI",{});var ESe=s(sF);Que=n(ESe,"STRONG",{});var $bt=s(Que);Irr=r($bt,"unispeech"),$bt.forEach(t),Nrr=r(ESe," \u2014 "),Rz=n(ESe,"A",{href:!0});var kbt=s(Rz);qrr=r(kbt,"UniSpeechForCTC"),kbt.forEach(t),jrr=r(ESe," (UniSpeech model)"),ESe.forEach(t),Drr=i(Xe),lF=n(Xe,"LI",{});var CSe=s(lF);Hue=n(CSe,"STRONG",{});var Sbt=s(Hue);Grr=r(Sbt,"unispeech-sat"),Sbt.forEach(t),Orr=r(CSe," \u2014 "),Pz=n(CSe,"A",{href:!0});var Rbt=s(Pz);Vrr=r(Rbt,"UniSpeechSatForCTC"),Rbt.forEach(t),Xrr=r(CSe," (UniSpeechSat model)"),CSe.forEach(t),zrr=i(Xe),iF=n(Xe,"LI",{});var wSe=s(iF);Uue=n(wSe,"STRONG",{});var Pbt=s(Uue);Wrr=r(Pbt,"wav2vec2"),Pbt.forEach(t),Qrr=r(wSe," \u2014 "),Bz=n(wSe,"A",{href:!0});var Bbt=s(Bz);Hrr=r(Bbt,"Wav2Vec2ForCTC"),Bbt.forEach(t),Urr=r(wSe," (Wav2Vec2 model)"),wSe.forEach(t),Jrr=i(Xe),dF=n(Xe,"LI",{});var ASe=s(dF);Jue=n(ASe,"STRONG",{});var Ibt=s(Jue);Yrr=r(Ibt,"wav2vec2-conformer"),Ibt.forEach(t),Krr=r(ASe," \u2014 "),Iz=n(ASe,"A",{href:!0});var Nbt=s(Iz);Zrr=r(Nbt,"Wav2Vec2ConformerForCTC"),Nbt.forEach(t),etr=r(ASe," (Wav2Vec2-Conformer model)"),ASe.forEach(t),otr=i(Xe),cF=n(Xe,"LI",{});var ySe=s(cF);Yue=n(ySe,"STRONG",{});var qbt=s(Yue);rtr=r(qbt,"wavlm"),qbt.forEach(t),ttr=r(ySe," \u2014 "),Nz=n(ySe,"A",{href:!0});var jbt=s(Nz);atr=r(jbt,"WavLMForCTC"),jbt.forEach(t),ntr=r(ySe," (WavLM model)"),ySe.forEach(t),Xe.forEach(t),str=i(ua),fF=n(ua,"P",{});var LSe=s(fF);ltr=r(LSe,"The model is set in evaluation mode by default using "),Kue=n(LSe,"CODE",{});var Dbt=s(Kue);itr=r(Dbt,"model.eval()"),Dbt.forEach(t),dtr=r(LSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(LSe,"CODE",{});var Gbt=s(Zue);ctr=r(Gbt,"model.train()"),Gbt.forEach(t),LSe.forEach(t),ftr=i(ua),T(mF.$$.fragment,ua),ua.forEach(t),nl.forEach(t),Pje=i(f),Td=n(f,"H2",{class:!0});var qGe=s(Td);gF=n(qGe,"A",{id:!0,class:!0,href:!0});var Obt=s(gF);e2e=n(Obt,"SPAN",{});var Vbt=s(e2e);T(IL.$$.fragment,Vbt),Vbt.forEach(t),Obt.forEach(t),mtr=i(qGe),o2e=n(qGe,"SPAN",{});var Xbt=s(o2e);gtr=r(Xbt,"AutoModelForSpeechSeq2Seq"),Xbt.forEach(t),qGe.forEach(t),Bje=i(f),Xo=n(f,"DIV",{class:!0});var sl=s(Xo);T(NL.$$.fragment,sl),htr=i(sl),Md=n(sl,"P",{});var uee=s(Md);ptr=r(uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),qz=n(uee,"A",{href:!0});var zbt=s(qz);_tr=r(zbt,"from_pretrained()"),zbt.forEach(t),utr=r(uee," class method or the "),jz=n(uee,"A",{href:!0});var Wbt=s(jz);btr=r(Wbt,"from_config()"),Wbt.forEach(t),vtr=r(uee,` class
method.`),uee.forEach(t),Ftr=i(sl),qL=n(sl,"P",{});var jGe=s(qL);Ttr=r(jGe,"This class cannot be instantiated directly using "),r2e=n(jGe,"CODE",{});var Qbt=s(r2e);Mtr=r(Qbt,"__init__()"),Qbt.forEach(t),Etr=r(jGe," (throws an error)."),jGe.forEach(t),Ctr=i(sl),Tt=n(sl,"DIV",{class:!0});var TA=s(Tt);T(jL.$$.fragment,TA),wtr=i(TA),t2e=n(TA,"P",{});var Hbt=s(t2e);Atr=r(Hbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hbt.forEach(t),ytr=i(TA),Ed=n(TA,"P",{});var bee=s(Ed);Ltr=r(bee,`Note:
Loading a model from its configuration file does `),a2e=n(bee,"STRONG",{});var Ubt=s(a2e);xtr=r(Ubt,"not"),Ubt.forEach(t),$tr=r(bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(bee,"A",{href:!0});var Jbt=s(Dz);ktr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),Str=r(bee," to load the model weights."),bee.forEach(t),Rtr=i(TA),T(hF.$$.fragment,TA),TA.forEach(t),Ptr=i(sl),go=n(sl,"DIV",{class:!0});var ba=s(go);T(DL.$$.fragment,ba),Btr=i(ba),n2e=n(ba,"P",{});var Ybt=s(n2e);Itr=r(Ybt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ybt.forEach(t),Ntr=i(ba),za=n(ba,"P",{});var MA=s(za);qtr=r(MA,"The model class to instantiate is selected based on the "),s2e=n(MA,"CODE",{});var Kbt=s(s2e);jtr=r(Kbt,"model_type"),Kbt.forEach(t),Dtr=r(MA,` property of the config object (either
passed as an argument or loaded from `),l2e=n(MA,"CODE",{});var Zbt=s(l2e);Gtr=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),Otr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(MA,"CODE",{});var e4t=s(i2e);Vtr=r(e4t,"pretrained_model_name_or_path"),e4t.forEach(t),Xtr=r(MA,":"),MA.forEach(t),ztr=i(ba),GL=n(ba,"UL",{});var DGe=s(GL);pF=n(DGe,"LI",{});var xSe=s(pF);d2e=n(xSe,"STRONG",{});var o4t=s(d2e);Wtr=r(o4t,"speech-encoder-decoder"),o4t.forEach(t),Qtr=r(xSe," \u2014 "),Gz=n(xSe,"A",{href:!0});var r4t=s(Gz);Htr=r(r4t,"SpeechEncoderDecoderModel"),r4t.forEach(t),Utr=r(xSe," (Speech Encoder decoder model)"),xSe.forEach(t),Jtr=i(DGe),_F=n(DGe,"LI",{});var $Se=s(_F);c2e=n($Se,"STRONG",{});var t4t=s(c2e);Ytr=r(t4t,"speech_to_text"),t4t.forEach(t),Ktr=r($Se," \u2014 "),Oz=n($Se,"A",{href:!0});var a4t=s(Oz);Ztr=r(a4t,"Speech2TextForConditionalGeneration"),a4t.forEach(t),ear=r($Se," (Speech2Text model)"),$Se.forEach(t),DGe.forEach(t),oar=i(ba),uF=n(ba,"P",{});var kSe=s(uF);rar=r(kSe,"The model is set in evaluation mode by default using "),f2e=n(kSe,"CODE",{});var n4t=s(f2e);tar=r(n4t,"model.eval()"),n4t.forEach(t),aar=r(kSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(kSe,"CODE",{});var s4t=s(m2e);nar=r(s4t,"model.train()"),s4t.forEach(t),kSe.forEach(t),sar=i(ba),T(bF.$$.fragment,ba),ba.forEach(t),sl.forEach(t),Ije=i(f),Cd=n(f,"H2",{class:!0});var GGe=s(Cd);vF=n(GGe,"A",{id:!0,class:!0,href:!0});var l4t=s(vF);g2e=n(l4t,"SPAN",{});var i4t=s(g2e);T(OL.$$.fragment,i4t),i4t.forEach(t),l4t.forEach(t),lar=i(GGe),h2e=n(GGe,"SPAN",{});var d4t=s(h2e);iar=r(d4t,"AutoModelForAudioXVector"),d4t.forEach(t),GGe.forEach(t),Nje=i(f),zo=n(f,"DIV",{class:!0});var ll=s(zo);T(VL.$$.fragment,ll),dar=i(ll),wd=n(ll,"P",{});var vee=s(wd);car=r(vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Vz=n(vee,"A",{href:!0});var c4t=s(Vz);far=r(c4t,"from_pretrained()"),c4t.forEach(t),mar=r(vee," class method or the "),Xz=n(vee,"A",{href:!0});var f4t=s(Xz);gar=r(f4t,"from_config()"),f4t.forEach(t),har=r(vee,` class
method.`),vee.forEach(t),par=i(ll),XL=n(ll,"P",{});var OGe=s(XL);_ar=r(OGe,"This class cannot be instantiated directly using "),p2e=n(OGe,"CODE",{});var m4t=s(p2e);uar=r(m4t,"__init__()"),m4t.forEach(t),bar=r(OGe," (throws an error)."),OGe.forEach(t),Far=i(ll),Mt=n(ll,"DIV",{class:!0});var EA=s(Mt);T(zL.$$.fragment,EA),Tar=i(EA),_2e=n(EA,"P",{});var g4t=s(_2e);Mar=r(g4t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),g4t.forEach(t),Ear=i(EA),Ad=n(EA,"P",{});var Fee=s(Ad);Car=r(Fee,`Note:
Loading a model from its configuration file does `),u2e=n(Fee,"STRONG",{});var h4t=s(u2e);war=r(h4t,"not"),h4t.forEach(t),Aar=r(Fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),zz=n(Fee,"A",{href:!0});var p4t=s(zz);yar=r(p4t,"from_pretrained()"),p4t.forEach(t),Lar=r(Fee," to load the model weights."),Fee.forEach(t),xar=i(EA),T(FF.$$.fragment,EA),EA.forEach(t),$ar=i(ll),ho=n(ll,"DIV",{class:!0});var va=s(ho);T(WL.$$.fragment,va),kar=i(va),b2e=n(va,"P",{});var _4t=s(b2e);Sar=r(_4t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),_4t.forEach(t),Rar=i(va),Wa=n(va,"P",{});var CA=s(Wa);Par=r(CA,"The model class to instantiate is selected based on the "),v2e=n(CA,"CODE",{});var u4t=s(v2e);Bar=r(u4t,"model_type"),u4t.forEach(t),Iar=r(CA,` property of the config object (either
passed as an argument or loaded from `),F2e=n(CA,"CODE",{});var b4t=s(F2e);Nar=r(b4t,"pretrained_model_name_or_path"),b4t.forEach(t),qar=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(CA,"CODE",{});var v4t=s(T2e);jar=r(v4t,"pretrained_model_name_or_path"),v4t.forEach(t),Dar=r(CA,":"),CA.forEach(t),Gar=i(va),Zr=n(va,"UL",{});var il=s(Zr);TF=n(il,"LI",{});var SSe=s(TF);M2e=n(SSe,"STRONG",{});var F4t=s(M2e);Oar=r(F4t,"data2vec-audio"),F4t.forEach(t),Var=r(SSe," \u2014 "),Wz=n(SSe,"A",{href:!0});var T4t=s(Wz);Xar=r(T4t,"Data2VecAudioForXVector"),T4t.forEach(t),zar=r(SSe," (Data2VecAudio model)"),SSe.forEach(t),War=i(il),MF=n(il,"LI",{});var RSe=s(MF);E2e=n(RSe,"STRONG",{});var M4t=s(E2e);Qar=r(M4t,"unispeech-sat"),M4t.forEach(t),Har=r(RSe," \u2014 "),Qz=n(RSe,"A",{href:!0});var E4t=s(Qz);Uar=r(E4t,"UniSpeechSatForXVector"),E4t.forEach(t),Jar=r(RSe," (UniSpeechSat model)"),RSe.forEach(t),Yar=i(il),EF=n(il,"LI",{});var PSe=s(EF);C2e=n(PSe,"STRONG",{});var C4t=s(C2e);Kar=r(C4t,"wav2vec2"),C4t.forEach(t),Zar=r(PSe," \u2014 "),Hz=n(PSe,"A",{href:!0});var w4t=s(Hz);enr=r(w4t,"Wav2Vec2ForXVector"),w4t.forEach(t),onr=r(PSe," (Wav2Vec2 model)"),PSe.forEach(t),rnr=i(il),CF=n(il,"LI",{});var BSe=s(CF);w2e=n(BSe,"STRONG",{});var A4t=s(w2e);tnr=r(A4t,"wav2vec2-conformer"),A4t.forEach(t),anr=r(BSe," \u2014 "),Uz=n(BSe,"A",{href:!0});var y4t=s(Uz);nnr=r(y4t,"Wav2Vec2ConformerForXVector"),y4t.forEach(t),snr=r(BSe," (Wav2Vec2-Conformer model)"),BSe.forEach(t),lnr=i(il),wF=n(il,"LI",{});var ISe=s(wF);A2e=n(ISe,"STRONG",{});var L4t=s(A2e);inr=r(L4t,"wavlm"),L4t.forEach(t),dnr=r(ISe," \u2014 "),Jz=n(ISe,"A",{href:!0});var x4t=s(Jz);cnr=r(x4t,"WavLMForXVector"),x4t.forEach(t),fnr=r(ISe," (WavLM model)"),ISe.forEach(t),il.forEach(t),mnr=i(va),AF=n(va,"P",{});var NSe=s(AF);gnr=r(NSe,"The model is set in evaluation mode by default using "),y2e=n(NSe,"CODE",{});var $4t=s(y2e);hnr=r($4t,"model.eval()"),$4t.forEach(t),pnr=r(NSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L2e=n(NSe,"CODE",{});var k4t=s(L2e);_nr=r(k4t,"model.train()"),k4t.forEach(t),NSe.forEach(t),unr=i(va),T(yF.$$.fragment,va),va.forEach(t),ll.forEach(t),qje=i(f),yd=n(f,"H2",{class:!0});var VGe=s(yd);LF=n(VGe,"A",{id:!0,class:!0,href:!0});var S4t=s(LF);x2e=n(S4t,"SPAN",{});var R4t=s(x2e);T(QL.$$.fragment,R4t),R4t.forEach(t),S4t.forEach(t),bnr=i(VGe),$2e=n(VGe,"SPAN",{});var P4t=s($2e);vnr=r(P4t,"AutoModelForMaskedImageModeling"),P4t.forEach(t),VGe.forEach(t),jje=i(f),Wo=n(f,"DIV",{class:!0});var dl=s(Wo);T(HL.$$.fragment,dl),Fnr=i(dl),Ld=n(dl,"P",{});var Tee=s(Ld);Tnr=r(Tee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Yz=n(Tee,"A",{href:!0});var B4t=s(Yz);Mnr=r(B4t,"from_pretrained()"),B4t.forEach(t),Enr=r(Tee," class method or the "),Kz=n(Tee,"A",{href:!0});var I4t=s(Kz);Cnr=r(I4t,"from_config()"),I4t.forEach(t),wnr=r(Tee,` class
method.`),Tee.forEach(t),Anr=i(dl),UL=n(dl,"P",{});var XGe=s(UL);ynr=r(XGe,"This class cannot be instantiated directly using "),k2e=n(XGe,"CODE",{});var N4t=s(k2e);Lnr=r(N4t,"__init__()"),N4t.forEach(t),xnr=r(XGe," (throws an error)."),XGe.forEach(t),$nr=i(dl),Et=n(dl,"DIV",{class:!0});var wA=s(Et);T(JL.$$.fragment,wA),knr=i(wA),S2e=n(wA,"P",{});var q4t=s(S2e);Snr=r(q4t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),q4t.forEach(t),Rnr=i(wA),xd=n(wA,"P",{});var Mee=s(xd);Pnr=r(Mee,`Note:
Loading a model from its configuration file does `),R2e=n(Mee,"STRONG",{});var j4t=s(R2e);Bnr=r(j4t,"not"),j4t.forEach(t),Inr=r(Mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(Mee,"A",{href:!0});var D4t=s(Zz);Nnr=r(D4t,"from_pretrained()"),D4t.forEach(t),qnr=r(Mee," to load the model weights."),Mee.forEach(t),jnr=i(wA),T(xF.$$.fragment,wA),wA.forEach(t),Dnr=i(dl),po=n(dl,"DIV",{class:!0});var Fa=s(po);T(YL.$$.fragment,Fa),Gnr=i(Fa),P2e=n(Fa,"P",{});var G4t=s(P2e);Onr=r(G4t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),G4t.forEach(t),Vnr=i(Fa),Qa=n(Fa,"P",{});var AA=s(Qa);Xnr=r(AA,"The model class to instantiate is selected based on the "),B2e=n(AA,"CODE",{});var O4t=s(B2e);znr=r(O4t,"model_type"),O4t.forEach(t),Wnr=r(AA,` property of the config object (either
passed as an argument or loaded from `),I2e=n(AA,"CODE",{});var V4t=s(I2e);Qnr=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),Hnr=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N2e=n(AA,"CODE",{});var X4t=s(N2e);Unr=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),Jnr=r(AA,":"),AA.forEach(t),Ynr=i(Fa),$d=n(Fa,"UL",{});var Eee=s($d);$F=n(Eee,"LI",{});var qSe=s($F);q2e=n(qSe,"STRONG",{});var z4t=s(q2e);Knr=r(z4t,"deit"),z4t.forEach(t),Znr=r(qSe," \u2014 "),eW=n(qSe,"A",{href:!0});var W4t=s(eW);esr=r(W4t,"DeiTForMaskedImageModeling"),W4t.forEach(t),osr=r(qSe," (DeiT model)"),qSe.forEach(t),rsr=i(Eee),kF=n(Eee,"LI",{});var jSe=s(kF);j2e=n(jSe,"STRONG",{});var Q4t=s(j2e);tsr=r(Q4t,"swin"),Q4t.forEach(t),asr=r(jSe," \u2014 "),oW=n(jSe,"A",{href:!0});var H4t=s(oW);nsr=r(H4t,"SwinForMaskedImageModeling"),H4t.forEach(t),ssr=r(jSe," (Swin Transformer model)"),jSe.forEach(t),lsr=i(Eee),SF=n(Eee,"LI",{});var DSe=s(SF);D2e=n(DSe,"STRONG",{});var U4t=s(D2e);isr=r(U4t,"vit"),U4t.forEach(t),dsr=r(DSe," \u2014 "),rW=n(DSe,"A",{href:!0});var J4t=s(rW);csr=r(J4t,"ViTForMaskedImageModeling"),J4t.forEach(t),fsr=r(DSe," (ViT model)"),DSe.forEach(t),Eee.forEach(t),msr=i(Fa),RF=n(Fa,"P",{});var GSe=s(RF);gsr=r(GSe,"The model is set in evaluation mode by default using "),G2e=n(GSe,"CODE",{});var Y4t=s(G2e);hsr=r(Y4t,"model.eval()"),Y4t.forEach(t),psr=r(GSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O2e=n(GSe,"CODE",{});var K4t=s(O2e);_sr=r(K4t,"model.train()"),K4t.forEach(t),GSe.forEach(t),usr=i(Fa),T(PF.$$.fragment,Fa),Fa.forEach(t),dl.forEach(t),Dje=i(f),kd=n(f,"H2",{class:!0});var zGe=s(kd);BF=n(zGe,"A",{id:!0,class:!0,href:!0});var Z4t=s(BF);V2e=n(Z4t,"SPAN",{});var evt=s(V2e);T(KL.$$.fragment,evt),evt.forEach(t),Z4t.forEach(t),bsr=i(zGe),X2e=n(zGe,"SPAN",{});var ovt=s(X2e);vsr=r(ovt,"AutoModelForObjectDetection"),ovt.forEach(t),zGe.forEach(t),Gje=i(f),Qo=n(f,"DIV",{class:!0});var cl=s(Qo);T(ZL.$$.fragment,cl),Fsr=i(cl),Sd=n(cl,"P",{});var Cee=s(Sd);Tsr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),tW=n(Cee,"A",{href:!0});var rvt=s(tW);Msr=r(rvt,"from_pretrained()"),rvt.forEach(t),Esr=r(Cee," class method or the "),aW=n(Cee,"A",{href:!0});var tvt=s(aW);Csr=r(tvt,"from_config()"),tvt.forEach(t),wsr=r(Cee,` class
method.`),Cee.forEach(t),Asr=i(cl),e8=n(cl,"P",{});var WGe=s(e8);ysr=r(WGe,"This class cannot be instantiated directly using "),z2e=n(WGe,"CODE",{});var avt=s(z2e);Lsr=r(avt,"__init__()"),avt.forEach(t),xsr=r(WGe," (throws an error)."),WGe.forEach(t),$sr=i(cl),Ct=n(cl,"DIV",{class:!0});var yA=s(Ct);T(o8.$$.fragment,yA),ksr=i(yA),W2e=n(yA,"P",{});var nvt=s(W2e);Ssr=r(nvt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),nvt.forEach(t),Rsr=i(yA),Rd=n(yA,"P",{});var wee=s(Rd);Psr=r(wee,`Note:
Loading a model from its configuration file does `),Q2e=n(wee,"STRONG",{});var svt=s(Q2e);Bsr=r(svt,"not"),svt.forEach(t),Isr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(wee,"A",{href:!0});var lvt=s(nW);Nsr=r(lvt,"from_pretrained()"),lvt.forEach(t),qsr=r(wee," to load the model weights."),wee.forEach(t),jsr=i(yA),T(IF.$$.fragment,yA),yA.forEach(t),Dsr=i(cl),_o=n(cl,"DIV",{class:!0});var Ta=s(_o);T(r8.$$.fragment,Ta),Gsr=i(Ta),H2e=n(Ta,"P",{});var ivt=s(H2e);Osr=r(ivt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ivt.forEach(t),Vsr=i(Ta),Ha=n(Ta,"P",{});var LA=s(Ha);Xsr=r(LA,"The model class to instantiate is selected based on the "),U2e=n(LA,"CODE",{});var dvt=s(U2e);zsr=r(dvt,"model_type"),dvt.forEach(t),Wsr=r(LA,` property of the config object (either
passed as an argument or loaded from `),J2e=n(LA,"CODE",{});var cvt=s(J2e);Qsr=r(cvt,"pretrained_model_name_or_path"),cvt.forEach(t),Hsr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y2e=n(LA,"CODE",{});var fvt=s(Y2e);Usr=r(fvt,"pretrained_model_name_or_path"),fvt.forEach(t),Jsr=r(LA,":"),LA.forEach(t),Ysr=i(Ta),t8=n(Ta,"UL",{});var QGe=s(t8);NF=n(QGe,"LI",{});var OSe=s(NF);K2e=n(OSe,"STRONG",{});var mvt=s(K2e);Ksr=r(mvt,"detr"),mvt.forEach(t),Zsr=r(OSe," \u2014 "),sW=n(OSe,"A",{href:!0});var gvt=s(sW);elr=r(gvt,"DetrForObjectDetection"),gvt.forEach(t),olr=r(OSe," (DETR model)"),OSe.forEach(t),rlr=i(QGe),qF=n(QGe,"LI",{});var VSe=s(qF);Z2e=n(VSe,"STRONG",{});var hvt=s(Z2e);tlr=r(hvt,"yolos"),hvt.forEach(t),alr=r(VSe," \u2014 "),lW=n(VSe,"A",{href:!0});var pvt=s(lW);nlr=r(pvt,"YolosForObjectDetection"),pvt.forEach(t),slr=r(VSe," (YOLOS model)"),VSe.forEach(t),QGe.forEach(t),llr=i(Ta),jF=n(Ta,"P",{});var XSe=s(jF);ilr=r(XSe,"The model is set in evaluation mode by default using "),e1e=n(XSe,"CODE",{});var _vt=s(e1e);dlr=r(_vt,"model.eval()"),_vt.forEach(t),clr=r(XSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),o1e=n(XSe,"CODE",{});var uvt=s(o1e);flr=r(uvt,"model.train()"),uvt.forEach(t),XSe.forEach(t),mlr=i(Ta),T(DF.$$.fragment,Ta),Ta.forEach(t),cl.forEach(t),Oje=i(f),Pd=n(f,"H2",{class:!0});var HGe=s(Pd);GF=n(HGe,"A",{id:!0,class:!0,href:!0});var bvt=s(GF);r1e=n(bvt,"SPAN",{});var vvt=s(r1e);T(a8.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),glr=i(HGe),t1e=n(HGe,"SPAN",{});var Fvt=s(t1e);hlr=r(Fvt,"AutoModelForImageSegmentation"),Fvt.forEach(t),HGe.forEach(t),Vje=i(f),Ho=n(f,"DIV",{class:!0});var fl=s(Ho);T(n8.$$.fragment,fl),plr=i(fl),Bd=n(fl,"P",{});var Aee=s(Bd);_lr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),iW=n(Aee,"A",{href:!0});var Tvt=s(iW);ulr=r(Tvt,"from_pretrained()"),Tvt.forEach(t),blr=r(Aee," class method or the "),dW=n(Aee,"A",{href:!0});var Mvt=s(dW);vlr=r(Mvt,"from_config()"),Mvt.forEach(t),Flr=r(Aee,` class
method.`),Aee.forEach(t),Tlr=i(fl),s8=n(fl,"P",{});var UGe=s(s8);Mlr=r(UGe,"This class cannot be instantiated directly using "),a1e=n(UGe,"CODE",{});var Evt=s(a1e);Elr=r(Evt,"__init__()"),Evt.forEach(t),Clr=r(UGe," (throws an error)."),UGe.forEach(t),wlr=i(fl),wt=n(fl,"DIV",{class:!0});var xA=s(wt);T(l8.$$.fragment,xA),Alr=i(xA),n1e=n(xA,"P",{});var Cvt=s(n1e);ylr=r(Cvt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Cvt.forEach(t),Llr=i(xA),Id=n(xA,"P",{});var yee=s(Id);xlr=r(yee,`Note:
Loading a model from its configuration file does `),s1e=n(yee,"STRONG",{});var wvt=s(s1e);$lr=r(wvt,"not"),wvt.forEach(t),klr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(yee,"A",{href:!0});var Avt=s(cW);Slr=r(Avt,"from_pretrained()"),Avt.forEach(t),Rlr=r(yee," to load the model weights."),yee.forEach(t),Plr=i(xA),T(OF.$$.fragment,xA),xA.forEach(t),Blr=i(fl),uo=n(fl,"DIV",{class:!0});var Ma=s(uo);T(i8.$$.fragment,Ma),Ilr=i(Ma),l1e=n(Ma,"P",{});var yvt=s(l1e);Nlr=r(yvt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),yvt.forEach(t),qlr=i(Ma),Ua=n(Ma,"P",{});var $A=s(Ua);jlr=r($A,"The model class to instantiate is selected based on the "),i1e=n($A,"CODE",{});var Lvt=s(i1e);Dlr=r(Lvt,"model_type"),Lvt.forEach(t),Glr=r($A,` property of the config object (either
passed as an argument or loaded from `),d1e=n($A,"CODE",{});var xvt=s(d1e);Olr=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),Vlr=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n($A,"CODE",{});var $vt=s(c1e);Xlr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),zlr=r($A,":"),$A.forEach(t),Wlr=i(Ma),f1e=n(Ma,"UL",{});var kvt=s(f1e);VF=n(kvt,"LI",{});var zSe=s(VF);m1e=n(zSe,"STRONG",{});var Svt=s(m1e);Qlr=r(Svt,"detr"),Svt.forEach(t),Hlr=r(zSe," \u2014 "),fW=n(zSe,"A",{href:!0});var Rvt=s(fW);Ulr=r(Rvt,"DetrForSegmentation"),Rvt.forEach(t),Jlr=r(zSe," (DETR model)"),zSe.forEach(t),kvt.forEach(t),Ylr=i(Ma),XF=n(Ma,"P",{});var WSe=s(XF);Klr=r(WSe,"The model is set in evaluation mode by default using "),g1e=n(WSe,"CODE",{});var Pvt=s(g1e);Zlr=r(Pvt,"model.eval()"),Pvt.forEach(t),eir=r(WSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),h1e=n(WSe,"CODE",{});var Bvt=s(h1e);oir=r(Bvt,"model.train()"),Bvt.forEach(t),WSe.forEach(t),rir=i(Ma),T(zF.$$.fragment,Ma),Ma.forEach(t),fl.forEach(t),Xje=i(f),Nd=n(f,"H2",{class:!0});var JGe=s(Nd);WF=n(JGe,"A",{id:!0,class:!0,href:!0});var Ivt=s(WF);p1e=n(Ivt,"SPAN",{});var Nvt=s(p1e);T(d8.$$.fragment,Nvt),Nvt.forEach(t),Ivt.forEach(t),tir=i(JGe),_1e=n(JGe,"SPAN",{});var qvt=s(_1e);air=r(qvt,"AutoModelForSemanticSegmentation"),qvt.forEach(t),JGe.forEach(t),zje=i(f),Uo=n(f,"DIV",{class:!0});var ml=s(Uo);T(c8.$$.fragment,ml),nir=i(ml),qd=n(ml,"P",{});var Lee=s(qd);sir=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),mW=n(Lee,"A",{href:!0});var jvt=s(mW);lir=r(jvt,"from_pretrained()"),jvt.forEach(t),iir=r(Lee," class method or the "),gW=n(Lee,"A",{href:!0});var Dvt=s(gW);dir=r(Dvt,"from_config()"),Dvt.forEach(t),cir=r(Lee,` class
method.`),Lee.forEach(t),fir=i(ml),f8=n(ml,"P",{});var YGe=s(f8);mir=r(YGe,"This class cannot be instantiated directly using "),u1e=n(YGe,"CODE",{});var Gvt=s(u1e);gir=r(Gvt,"__init__()"),Gvt.forEach(t),hir=r(YGe," (throws an error)."),YGe.forEach(t),pir=i(ml),At=n(ml,"DIV",{class:!0});var kA=s(At);T(m8.$$.fragment,kA),_ir=i(kA),b1e=n(kA,"P",{});var Ovt=s(b1e);uir=r(Ovt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ovt.forEach(t),bir=i(kA),jd=n(kA,"P",{});var xee=s(jd);vir=r(xee,`Note:
Loading a model from its configuration file does `),v1e=n(xee,"STRONG",{});var Vvt=s(v1e);Fir=r(Vvt,"not"),Vvt.forEach(t),Tir=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(xee,"A",{href:!0});var Xvt=s(hW);Mir=r(Xvt,"from_pretrained()"),Xvt.forEach(t),Eir=r(xee," to load the model weights."),xee.forEach(t),Cir=i(kA),T(QF.$$.fragment,kA),kA.forEach(t),wir=i(ml),bo=n(ml,"DIV",{class:!0});var Ea=s(bo);T(g8.$$.fragment,Ea),Air=i(Ea),F1e=n(Ea,"P",{});var zvt=s(F1e);yir=r(zvt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zvt.forEach(t),Lir=i(Ea),Ja=n(Ea,"P",{});var SA=s(Ja);xir=r(SA,"The model class to instantiate is selected based on the "),T1e=n(SA,"CODE",{});var Wvt=s(T1e);$ir=r(Wvt,"model_type"),Wvt.forEach(t),kir=r(SA,` property of the config object (either
passed as an argument or loaded from `),M1e=n(SA,"CODE",{});var Qvt=s(M1e);Sir=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),Rir=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E1e=n(SA,"CODE",{});var Hvt=s(E1e);Pir=r(Hvt,"pretrained_model_name_or_path"),Hvt.forEach(t),Bir=r(SA,":"),SA.forEach(t),Iir=i(Ea),Ya=n(Ea,"UL",{});var RA=s(Ya);HF=n(RA,"LI",{});var QSe=s(HF);C1e=n(QSe,"STRONG",{});var Uvt=s(C1e);Nir=r(Uvt,"beit"),Uvt.forEach(t),qir=r(QSe," \u2014 "),pW=n(QSe,"A",{href:!0});var Jvt=s(pW);jir=r(Jvt,"BeitForSemanticSegmentation"),Jvt.forEach(t),Dir=r(QSe," (BEiT model)"),QSe.forEach(t),Gir=i(RA),UF=n(RA,"LI",{});var HSe=s(UF);w1e=n(HSe,"STRONG",{});var Yvt=s(w1e);Oir=r(Yvt,"data2vec-vision"),Yvt.forEach(t),Vir=r(HSe," \u2014 "),_W=n(HSe,"A",{href:!0});var Kvt=s(_W);Xir=r(Kvt,"Data2VecVisionForSemanticSegmentation"),Kvt.forEach(t),zir=r(HSe," (Data2VecVision model)"),HSe.forEach(t),Wir=i(RA),JF=n(RA,"LI",{});var USe=s(JF);A1e=n(USe,"STRONG",{});var Zvt=s(A1e);Qir=r(Zvt,"dpt"),Zvt.forEach(t),Hir=r(USe," \u2014 "),uW=n(USe,"A",{href:!0});var eFt=s(uW);Uir=r(eFt,"DPTForSemanticSegmentation"),eFt.forEach(t),Jir=r(USe," (DPT model)"),USe.forEach(t),Yir=i(RA),YF=n(RA,"LI",{});var JSe=s(YF);y1e=n(JSe,"STRONG",{});var oFt=s(y1e);Kir=r(oFt,"segformer"),oFt.forEach(t),Zir=r(JSe," \u2014 "),bW=n(JSe,"A",{href:!0});var rFt=s(bW);edr=r(rFt,"SegformerForSemanticSegmentation"),rFt.forEach(t),odr=r(JSe," (SegFormer model)"),JSe.forEach(t),RA.forEach(t),rdr=i(Ea),KF=n(Ea,"P",{});var YSe=s(KF);tdr=r(YSe,"The model is set in evaluation mode by default using "),L1e=n(YSe,"CODE",{});var tFt=s(L1e);adr=r(tFt,"model.eval()"),tFt.forEach(t),ndr=r(YSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),x1e=n(YSe,"CODE",{});var aFt=s(x1e);sdr=r(aFt,"model.train()"),aFt.forEach(t),YSe.forEach(t),ldr=i(Ea),T(ZF.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),Wje=i(f),Dd=n(f,"H2",{class:!0});var KGe=s(Dd);eT=n(KGe,"A",{id:!0,class:!0,href:!0});var nFt=s(eT);$1e=n(nFt,"SPAN",{});var sFt=s($1e);T(h8.$$.fragment,sFt),sFt.forEach(t),nFt.forEach(t),idr=i(KGe),k1e=n(KGe,"SPAN",{});var lFt=s(k1e);ddr=r(lFt,"AutoModelForInstanceSegmentation"),lFt.forEach(t),KGe.forEach(t),Qje=i(f),Jo=n(f,"DIV",{class:!0});var gl=s(Jo);T(p8.$$.fragment,gl),cdr=i(gl),Gd=n(gl,"P",{});var $ee=s(Gd);fdr=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),vW=n($ee,"A",{href:!0});var iFt=s(vW);mdr=r(iFt,"from_pretrained()"),iFt.forEach(t),gdr=r($ee," class method or the "),FW=n($ee,"A",{href:!0});var dFt=s(FW);hdr=r(dFt,"from_config()"),dFt.forEach(t),pdr=r($ee,` class
method.`),$ee.forEach(t),_dr=i(gl),_8=n(gl,"P",{});var ZGe=s(_8);udr=r(ZGe,"This class cannot be instantiated directly using "),S1e=n(ZGe,"CODE",{});var cFt=s(S1e);bdr=r(cFt,"__init__()"),cFt.forEach(t),vdr=r(ZGe," (throws an error)."),ZGe.forEach(t),Fdr=i(gl),yt=n(gl,"DIV",{class:!0});var PA=s(yt);T(u8.$$.fragment,PA),Tdr=i(PA),R1e=n(PA,"P",{});var fFt=s(R1e);Mdr=r(fFt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),fFt.forEach(t),Edr=i(PA),Od=n(PA,"P",{});var kee=s(Od);Cdr=r(kee,`Note:
Loading a model from its configuration file does `),P1e=n(kee,"STRONG",{});var mFt=s(P1e);wdr=r(mFt,"not"),mFt.forEach(t),Adr=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TW=n(kee,"A",{href:!0});var gFt=s(TW);ydr=r(gFt,"from_pretrained()"),gFt.forEach(t),Ldr=r(kee," to load the model weights."),kee.forEach(t),xdr=i(PA),T(oT.$$.fragment,PA),PA.forEach(t),$dr=i(gl),vo=n(gl,"DIV",{class:!0});var Ca=s(vo);T(b8.$$.fragment,Ca),kdr=i(Ca),B1e=n(Ca,"P",{});var hFt=s(B1e);Sdr=r(hFt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),hFt.forEach(t),Rdr=i(Ca),Ka=n(Ca,"P",{});var BA=s(Ka);Pdr=r(BA,"The model class to instantiate is selected based on the "),I1e=n(BA,"CODE",{});var pFt=s(I1e);Bdr=r(pFt,"model_type"),pFt.forEach(t),Idr=r(BA,` property of the config object (either
passed as an argument or loaded from `),N1e=n(BA,"CODE",{});var _Ft=s(N1e);Ndr=r(_Ft,"pretrained_model_name_or_path"),_Ft.forEach(t),qdr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q1e=n(BA,"CODE",{});var uFt=s(q1e);jdr=r(uFt,"pretrained_model_name_or_path"),uFt.forEach(t),Ddr=r(BA,":"),BA.forEach(t),Gdr=i(Ca),j1e=n(Ca,"UL",{});var bFt=s(j1e);rT=n(bFt,"LI",{});var KSe=s(rT);D1e=n(KSe,"STRONG",{});var vFt=s(D1e);Odr=r(vFt,"maskformer"),vFt.forEach(t),Vdr=r(KSe," \u2014 "),MW=n(KSe,"A",{href:!0});var FFt=s(MW);Xdr=r(FFt,"MaskFormerForInstanceSegmentation"),FFt.forEach(t),zdr=r(KSe," (MaskFormer model)"),KSe.forEach(t),bFt.forEach(t),Wdr=i(Ca),tT=n(Ca,"P",{});var ZSe=s(tT);Qdr=r(ZSe,"The model is set in evaluation mode by default using "),G1e=n(ZSe,"CODE",{});var TFt=s(G1e);Hdr=r(TFt,"model.eval()"),TFt.forEach(t),Udr=r(ZSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),O1e=n(ZSe,"CODE",{});var MFt=s(O1e);Jdr=r(MFt,"model.train()"),MFt.forEach(t),ZSe.forEach(t),Ydr=i(Ca),T(aT.$$.fragment,Ca),Ca.forEach(t),gl.forEach(t),Hje=i(f),Vd=n(f,"H2",{class:!0});var eOe=s(Vd);nT=n(eOe,"A",{id:!0,class:!0,href:!0});var EFt=s(nT);V1e=n(EFt,"SPAN",{});var CFt=s(V1e);T(v8.$$.fragment,CFt),CFt.forEach(t),EFt.forEach(t),Kdr=i(eOe),X1e=n(eOe,"SPAN",{});var wFt=s(X1e);Zdr=r(wFt,"TFAutoModel"),wFt.forEach(t),eOe.forEach(t),Uje=i(f),Yo=n(f,"DIV",{class:!0});var hl=s(Yo);T(F8.$$.fragment,hl),ecr=i(hl),Xd=n(hl,"P",{});var See=s(Xd);ocr=r(See,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),EW=n(See,"A",{href:!0});var AFt=s(EW);rcr=r(AFt,"from_pretrained()"),AFt.forEach(t),tcr=r(See," class method or the "),CW=n(See,"A",{href:!0});var yFt=s(CW);acr=r(yFt,"from_config()"),yFt.forEach(t),ncr=r(See,` class
method.`),See.forEach(t),scr=i(hl),T8=n(hl,"P",{});var oOe=s(T8);lcr=r(oOe,"This class cannot be instantiated directly using "),z1e=n(oOe,"CODE",{});var LFt=s(z1e);icr=r(LFt,"__init__()"),LFt.forEach(t),dcr=r(oOe," (throws an error)."),oOe.forEach(t),ccr=i(hl),Lt=n(hl,"DIV",{class:!0});var IA=s(Lt);T(M8.$$.fragment,IA),fcr=i(IA),W1e=n(IA,"P",{});var xFt=s(W1e);mcr=r(xFt,"Instantiates one of the base model classes of the library from a configuration."),xFt.forEach(t),gcr=i(IA),zd=n(IA,"P",{});var Ree=s(zd);hcr=r(Ree,`Note:
Loading a model from its configuration file does `),Q1e=n(Ree,"STRONG",{});var $Ft=s(Q1e);pcr=r($Ft,"not"),$Ft.forEach(t),_cr=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),wW=n(Ree,"A",{href:!0});var kFt=s(wW);ucr=r(kFt,"from_pretrained()"),kFt.forEach(t),bcr=r(Ree," to load the model weights."),Ree.forEach(t),vcr=i(IA),T(sT.$$.fragment,IA),IA.forEach(t),Fcr=i(hl),wr=n(hl,"DIV",{class:!0});var pl=s(wr);T(E8.$$.fragment,pl),Tcr=i(pl),H1e=n(pl,"P",{});var SFt=s(H1e);Mcr=r(SFt,"Instantiate one of the base model classes of the library from a pretrained model."),SFt.forEach(t),Ecr=i(pl),Za=n(pl,"P",{});var NA=s(Za);Ccr=r(NA,"The model class to instantiate is selected based on the "),U1e=n(NA,"CODE",{});var RFt=s(U1e);wcr=r(RFt,"model_type"),RFt.forEach(t),Acr=r(NA,` property of the config object (either
passed as an argument or loaded from `),J1e=n(NA,"CODE",{});var PFt=s(J1e);ycr=r(PFt,"pretrained_model_name_or_path"),PFt.forEach(t),Lcr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y1e=n(NA,"CODE",{});var BFt=s(Y1e);xcr=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),$cr=r(NA,":"),NA.forEach(t),kcr=i(pl),N=n(pl,"UL",{});var j=s(N);lT=n(j,"LI",{});var eRe=s(lT);K1e=n(eRe,"STRONG",{});var IFt=s(K1e);Scr=r(IFt,"albert"),IFt.forEach(t),Rcr=r(eRe," \u2014 "),AW=n(eRe,"A",{href:!0});var NFt=s(AW);Pcr=r(NFt,"TFAlbertModel"),NFt.forEach(t),Bcr=r(eRe," (ALBERT model)"),eRe.forEach(t),Icr=i(j),iT=n(j,"LI",{});var oRe=s(iT);Z1e=n(oRe,"STRONG",{});var qFt=s(Z1e);Ncr=r(qFt,"bart"),qFt.forEach(t),qcr=r(oRe," \u2014 "),yW=n(oRe,"A",{href:!0});var jFt=s(yW);jcr=r(jFt,"TFBartModel"),jFt.forEach(t),Dcr=r(oRe," (BART model)"),oRe.forEach(t),Gcr=i(j),dT=n(j,"LI",{});var rRe=s(dT);e7e=n(rRe,"STRONG",{});var DFt=s(e7e);Ocr=r(DFt,"bert"),DFt.forEach(t),Vcr=r(rRe," \u2014 "),LW=n(rRe,"A",{href:!0});var GFt=s(LW);Xcr=r(GFt,"TFBertModel"),GFt.forEach(t),zcr=r(rRe," (BERT model)"),rRe.forEach(t),Wcr=i(j),cT=n(j,"LI",{});var tRe=s(cT);o7e=n(tRe,"STRONG",{});var OFt=s(o7e);Qcr=r(OFt,"blenderbot"),OFt.forEach(t),Hcr=r(tRe," \u2014 "),xW=n(tRe,"A",{href:!0});var VFt=s(xW);Ucr=r(VFt,"TFBlenderbotModel"),VFt.forEach(t),Jcr=r(tRe," (Blenderbot model)"),tRe.forEach(t),Ycr=i(j),fT=n(j,"LI",{});var aRe=s(fT);r7e=n(aRe,"STRONG",{});var XFt=s(r7e);Kcr=r(XFt,"blenderbot-small"),XFt.forEach(t),Zcr=r(aRe," \u2014 "),$W=n(aRe,"A",{href:!0});var zFt=s($W);efr=r(zFt,"TFBlenderbotSmallModel"),zFt.forEach(t),ofr=r(aRe," (BlenderbotSmall model)"),aRe.forEach(t),rfr=i(j),mT=n(j,"LI",{});var nRe=s(mT);t7e=n(nRe,"STRONG",{});var WFt=s(t7e);tfr=r(WFt,"camembert"),WFt.forEach(t),afr=r(nRe," \u2014 "),kW=n(nRe,"A",{href:!0});var QFt=s(kW);nfr=r(QFt,"TFCamembertModel"),QFt.forEach(t),sfr=r(nRe," (CamemBERT model)"),nRe.forEach(t),lfr=i(j),gT=n(j,"LI",{});var sRe=s(gT);a7e=n(sRe,"STRONG",{});var HFt=s(a7e);ifr=r(HFt,"clip"),HFt.forEach(t),dfr=r(sRe," \u2014 "),SW=n(sRe,"A",{href:!0});var UFt=s(SW);cfr=r(UFt,"TFCLIPModel"),UFt.forEach(t),ffr=r(sRe," (CLIP model)"),sRe.forEach(t),mfr=i(j),hT=n(j,"LI",{});var lRe=s(hT);n7e=n(lRe,"STRONG",{});var JFt=s(n7e);gfr=r(JFt,"convbert"),JFt.forEach(t),hfr=r(lRe," \u2014 "),RW=n(lRe,"A",{href:!0});var YFt=s(RW);pfr=r(YFt,"TFConvBertModel"),YFt.forEach(t),_fr=r(lRe," (ConvBERT model)"),lRe.forEach(t),ufr=i(j),pT=n(j,"LI",{});var iRe=s(pT);s7e=n(iRe,"STRONG",{});var KFt=s(s7e);bfr=r(KFt,"convnext"),KFt.forEach(t),vfr=r(iRe," \u2014 "),PW=n(iRe,"A",{href:!0});var ZFt=s(PW);Ffr=r(ZFt,"TFConvNextModel"),ZFt.forEach(t),Tfr=r(iRe," (ConvNeXT model)"),iRe.forEach(t),Mfr=i(j),_T=n(j,"LI",{});var dRe=s(_T);l7e=n(dRe,"STRONG",{});var eTt=s(l7e);Efr=r(eTt,"ctrl"),eTt.forEach(t),Cfr=r(dRe," \u2014 "),BW=n(dRe,"A",{href:!0});var oTt=s(BW);wfr=r(oTt,"TFCTRLModel"),oTt.forEach(t),Afr=r(dRe," (CTRL model)"),dRe.forEach(t),yfr=i(j),uT=n(j,"LI",{});var cRe=s(uT);i7e=n(cRe,"STRONG",{});var rTt=s(i7e);Lfr=r(rTt,"data2vec-vision"),rTt.forEach(t),xfr=r(cRe," \u2014 "),IW=n(cRe,"A",{href:!0});var tTt=s(IW);$fr=r(tTt,"TFData2VecVisionModel"),tTt.forEach(t),kfr=r(cRe," (Data2VecVision model)"),cRe.forEach(t),Sfr=i(j),bT=n(j,"LI",{});var fRe=s(bT);d7e=n(fRe,"STRONG",{});var aTt=s(d7e);Rfr=r(aTt,"deberta"),aTt.forEach(t),Pfr=r(fRe," \u2014 "),NW=n(fRe,"A",{href:!0});var nTt=s(NW);Bfr=r(nTt,"TFDebertaModel"),nTt.forEach(t),Ifr=r(fRe," (DeBERTa model)"),fRe.forEach(t),Nfr=i(j),vT=n(j,"LI",{});var mRe=s(vT);c7e=n(mRe,"STRONG",{});var sTt=s(c7e);qfr=r(sTt,"deberta-v2"),sTt.forEach(t),jfr=r(mRe," \u2014 "),qW=n(mRe,"A",{href:!0});var lTt=s(qW);Dfr=r(lTt,"TFDebertaV2Model"),lTt.forEach(t),Gfr=r(mRe," (DeBERTa-v2 model)"),mRe.forEach(t),Ofr=i(j),FT=n(j,"LI",{});var gRe=s(FT);f7e=n(gRe,"STRONG",{});var iTt=s(f7e);Vfr=r(iTt,"distilbert"),iTt.forEach(t),Xfr=r(gRe," \u2014 "),jW=n(gRe,"A",{href:!0});var dTt=s(jW);zfr=r(dTt,"TFDistilBertModel"),dTt.forEach(t),Wfr=r(gRe," (DistilBERT model)"),gRe.forEach(t),Qfr=i(j),TT=n(j,"LI",{});var hRe=s(TT);m7e=n(hRe,"STRONG",{});var cTt=s(m7e);Hfr=r(cTt,"dpr"),cTt.forEach(t),Ufr=r(hRe," \u2014 "),DW=n(hRe,"A",{href:!0});var fTt=s(DW);Jfr=r(fTt,"TFDPRQuestionEncoder"),fTt.forEach(t),Yfr=r(hRe," (DPR model)"),hRe.forEach(t),Kfr=i(j),MT=n(j,"LI",{});var pRe=s(MT);g7e=n(pRe,"STRONG",{});var mTt=s(g7e);Zfr=r(mTt,"electra"),mTt.forEach(t),emr=r(pRe," \u2014 "),GW=n(pRe,"A",{href:!0});var gTt=s(GW);omr=r(gTt,"TFElectraModel"),gTt.forEach(t),rmr=r(pRe," (ELECTRA model)"),pRe.forEach(t),tmr=i(j),ET=n(j,"LI",{});var _Re=s(ET);h7e=n(_Re,"STRONG",{});var hTt=s(h7e);amr=r(hTt,"flaubert"),hTt.forEach(t),nmr=r(_Re," \u2014 "),OW=n(_Re,"A",{href:!0});var pTt=s(OW);smr=r(pTt,"TFFlaubertModel"),pTt.forEach(t),lmr=r(_Re," (FlauBERT model)"),_Re.forEach(t),imr=i(j),Ns=n(j,"LI",{});var rk=s(Ns);p7e=n(rk,"STRONG",{});var _Tt=s(p7e);dmr=r(_Tt,"funnel"),_Tt.forEach(t),cmr=r(rk," \u2014 "),VW=n(rk,"A",{href:!0});var uTt=s(VW);fmr=r(uTt,"TFFunnelModel"),uTt.forEach(t),mmr=r(rk," or "),XW=n(rk,"A",{href:!0});var bTt=s(XW);gmr=r(bTt,"TFFunnelBaseModel"),bTt.forEach(t),hmr=r(rk," (Funnel Transformer model)"),rk.forEach(t),pmr=i(j),CT=n(j,"LI",{});var uRe=s(CT);_7e=n(uRe,"STRONG",{});var vTt=s(_7e);_mr=r(vTt,"gpt2"),vTt.forEach(t),umr=r(uRe," \u2014 "),zW=n(uRe,"A",{href:!0});var FTt=s(zW);bmr=r(FTt,"TFGPT2Model"),FTt.forEach(t),vmr=r(uRe," (OpenAI GPT-2 model)"),uRe.forEach(t),Fmr=i(j),wT=n(j,"LI",{});var bRe=s(wT);u7e=n(bRe,"STRONG",{});var TTt=s(u7e);Tmr=r(TTt,"gptj"),TTt.forEach(t),Mmr=r(bRe," \u2014 "),WW=n(bRe,"A",{href:!0});var MTt=s(WW);Emr=r(MTt,"TFGPTJModel"),MTt.forEach(t),Cmr=r(bRe," (GPT-J model)"),bRe.forEach(t),wmr=i(j),AT=n(j,"LI",{});var vRe=s(AT);b7e=n(vRe,"STRONG",{});var ETt=s(b7e);Amr=r(ETt,"hubert"),ETt.forEach(t),ymr=r(vRe," \u2014 "),QW=n(vRe,"A",{href:!0});var CTt=s(QW);Lmr=r(CTt,"TFHubertModel"),CTt.forEach(t),xmr=r(vRe," (Hubert model)"),vRe.forEach(t),$mr=i(j),yT=n(j,"LI",{});var FRe=s(yT);v7e=n(FRe,"STRONG",{});var wTt=s(v7e);kmr=r(wTt,"layoutlm"),wTt.forEach(t),Smr=r(FRe," \u2014 "),HW=n(FRe,"A",{href:!0});var ATt=s(HW);Rmr=r(ATt,"TFLayoutLMModel"),ATt.forEach(t),Pmr=r(FRe," (LayoutLM model)"),FRe.forEach(t),Bmr=i(j),LT=n(j,"LI",{});var TRe=s(LT);F7e=n(TRe,"STRONG",{});var yTt=s(F7e);Imr=r(yTt,"led"),yTt.forEach(t),Nmr=r(TRe," \u2014 "),UW=n(TRe,"A",{href:!0});var LTt=s(UW);qmr=r(LTt,"TFLEDModel"),LTt.forEach(t),jmr=r(TRe," (LED model)"),TRe.forEach(t),Dmr=i(j),xT=n(j,"LI",{});var MRe=s(xT);T7e=n(MRe,"STRONG",{});var xTt=s(T7e);Gmr=r(xTt,"longformer"),xTt.forEach(t),Omr=r(MRe," \u2014 "),JW=n(MRe,"A",{href:!0});var $Tt=s(JW);Vmr=r($Tt,"TFLongformerModel"),$Tt.forEach(t),Xmr=r(MRe," (Longformer model)"),MRe.forEach(t),zmr=i(j),$T=n(j,"LI",{});var ERe=s($T);M7e=n(ERe,"STRONG",{});var kTt=s(M7e);Wmr=r(kTt,"lxmert"),kTt.forEach(t),Qmr=r(ERe," \u2014 "),YW=n(ERe,"A",{href:!0});var STt=s(YW);Hmr=r(STt,"TFLxmertModel"),STt.forEach(t),Umr=r(ERe," (LXMERT model)"),ERe.forEach(t),Jmr=i(j),kT=n(j,"LI",{});var CRe=s(kT);E7e=n(CRe,"STRONG",{});var RTt=s(E7e);Ymr=r(RTt,"marian"),RTt.forEach(t),Kmr=r(CRe," \u2014 "),KW=n(CRe,"A",{href:!0});var PTt=s(KW);Zmr=r(PTt,"TFMarianModel"),PTt.forEach(t),egr=r(CRe," (Marian model)"),CRe.forEach(t),ogr=i(j),ST=n(j,"LI",{});var wRe=s(ST);C7e=n(wRe,"STRONG",{});var BTt=s(C7e);rgr=r(BTt,"mbart"),BTt.forEach(t),tgr=r(wRe," \u2014 "),ZW=n(wRe,"A",{href:!0});var ITt=s(ZW);agr=r(ITt,"TFMBartModel"),ITt.forEach(t),ngr=r(wRe," (mBART model)"),wRe.forEach(t),sgr=i(j),RT=n(j,"LI",{});var ARe=s(RT);w7e=n(ARe,"STRONG",{});var NTt=s(w7e);lgr=r(NTt,"mobilebert"),NTt.forEach(t),igr=r(ARe," \u2014 "),eQ=n(ARe,"A",{href:!0});var qTt=s(eQ);dgr=r(qTt,"TFMobileBertModel"),qTt.forEach(t),cgr=r(ARe," (MobileBERT model)"),ARe.forEach(t),fgr=i(j),PT=n(j,"LI",{});var yRe=s(PT);A7e=n(yRe,"STRONG",{});var jTt=s(A7e);mgr=r(jTt,"mpnet"),jTt.forEach(t),ggr=r(yRe," \u2014 "),oQ=n(yRe,"A",{href:!0});var DTt=s(oQ);hgr=r(DTt,"TFMPNetModel"),DTt.forEach(t),pgr=r(yRe," (MPNet model)"),yRe.forEach(t),_gr=i(j),BT=n(j,"LI",{});var LRe=s(BT);y7e=n(LRe,"STRONG",{});var GTt=s(y7e);ugr=r(GTt,"mt5"),GTt.forEach(t),bgr=r(LRe," \u2014 "),rQ=n(LRe,"A",{href:!0});var OTt=s(rQ);vgr=r(OTt,"TFMT5Model"),OTt.forEach(t),Fgr=r(LRe," (MT5 model)"),LRe.forEach(t),Tgr=i(j),IT=n(j,"LI",{});var xRe=s(IT);L7e=n(xRe,"STRONG",{});var VTt=s(L7e);Mgr=r(VTt,"openai-gpt"),VTt.forEach(t),Egr=r(xRe," \u2014 "),tQ=n(xRe,"A",{href:!0});var XTt=s(tQ);Cgr=r(XTt,"TFOpenAIGPTModel"),XTt.forEach(t),wgr=r(xRe," (OpenAI GPT model)"),xRe.forEach(t),Agr=i(j),NT=n(j,"LI",{});var $Re=s(NT);x7e=n($Re,"STRONG",{});var zTt=s(x7e);ygr=r(zTt,"opt"),zTt.forEach(t),Lgr=r($Re," \u2014 "),aQ=n($Re,"A",{href:!0});var WTt=s(aQ);xgr=r(WTt,"TFOPTModel"),WTt.forEach(t),$gr=r($Re," (OPT model)"),$Re.forEach(t),kgr=i(j),qT=n(j,"LI",{});var kRe=s(qT);$7e=n(kRe,"STRONG",{});var QTt=s($7e);Sgr=r(QTt,"pegasus"),QTt.forEach(t),Rgr=r(kRe," \u2014 "),nQ=n(kRe,"A",{href:!0});var HTt=s(nQ);Pgr=r(HTt,"TFPegasusModel"),HTt.forEach(t),Bgr=r(kRe," (Pegasus model)"),kRe.forEach(t),Igr=i(j),jT=n(j,"LI",{});var SRe=s(jT);k7e=n(SRe,"STRONG",{});var UTt=s(k7e);Ngr=r(UTt,"rembert"),UTt.forEach(t),qgr=r(SRe," \u2014 "),sQ=n(SRe,"A",{href:!0});var JTt=s(sQ);jgr=r(JTt,"TFRemBertModel"),JTt.forEach(t),Dgr=r(SRe," (RemBERT model)"),SRe.forEach(t),Ggr=i(j),DT=n(j,"LI",{});var RRe=s(DT);S7e=n(RRe,"STRONG",{});var YTt=s(S7e);Ogr=r(YTt,"resnet"),YTt.forEach(t),Vgr=r(RRe," \u2014 "),lQ=n(RRe,"A",{href:!0});var KTt=s(lQ);Xgr=r(KTt,"TFResNetModel"),KTt.forEach(t),zgr=r(RRe," (ResNet model)"),RRe.forEach(t),Wgr=i(j),GT=n(j,"LI",{});var PRe=s(GT);R7e=n(PRe,"STRONG",{});var ZTt=s(R7e);Qgr=r(ZTt,"roberta"),ZTt.forEach(t),Hgr=r(PRe," \u2014 "),iQ=n(PRe,"A",{href:!0});var eMt=s(iQ);Ugr=r(eMt,"TFRobertaModel"),eMt.forEach(t),Jgr=r(PRe," (RoBERTa model)"),PRe.forEach(t),Ygr=i(j),OT=n(j,"LI",{});var BRe=s(OT);P7e=n(BRe,"STRONG",{});var oMt=s(P7e);Kgr=r(oMt,"roformer"),oMt.forEach(t),Zgr=r(BRe," \u2014 "),dQ=n(BRe,"A",{href:!0});var rMt=s(dQ);ehr=r(rMt,"TFRoFormerModel"),rMt.forEach(t),ohr=r(BRe," (RoFormer model)"),BRe.forEach(t),rhr=i(j),VT=n(j,"LI",{});var IRe=s(VT);B7e=n(IRe,"STRONG",{});var tMt=s(B7e);thr=r(tMt,"speech_to_text"),tMt.forEach(t),ahr=r(IRe," \u2014 "),cQ=n(IRe,"A",{href:!0});var aMt=s(cQ);nhr=r(aMt,"TFSpeech2TextModel"),aMt.forEach(t),shr=r(IRe," (Speech2Text model)"),IRe.forEach(t),lhr=i(j),XT=n(j,"LI",{});var NRe=s(XT);I7e=n(NRe,"STRONG",{});var nMt=s(I7e);ihr=r(nMt,"swin"),nMt.forEach(t),dhr=r(NRe," \u2014 "),fQ=n(NRe,"A",{href:!0});var sMt=s(fQ);chr=r(sMt,"TFSwinModel"),sMt.forEach(t),fhr=r(NRe," (Swin Transformer model)"),NRe.forEach(t),mhr=i(j),zT=n(j,"LI",{});var qRe=s(zT);N7e=n(qRe,"STRONG",{});var lMt=s(N7e);ghr=r(lMt,"t5"),lMt.forEach(t),hhr=r(qRe," \u2014 "),mQ=n(qRe,"A",{href:!0});var iMt=s(mQ);phr=r(iMt,"TFT5Model"),iMt.forEach(t),_hr=r(qRe," (T5 model)"),qRe.forEach(t),uhr=i(j),WT=n(j,"LI",{});var jRe=s(WT);q7e=n(jRe,"STRONG",{});var dMt=s(q7e);bhr=r(dMt,"tapas"),dMt.forEach(t),vhr=r(jRe," \u2014 "),gQ=n(jRe,"A",{href:!0});var cMt=s(gQ);Fhr=r(cMt,"TFTapasModel"),cMt.forEach(t),Thr=r(jRe," (TAPAS model)"),jRe.forEach(t),Mhr=i(j),QT=n(j,"LI",{});var DRe=s(QT);j7e=n(DRe,"STRONG",{});var fMt=s(j7e);Ehr=r(fMt,"transfo-xl"),fMt.forEach(t),Chr=r(DRe," \u2014 "),hQ=n(DRe,"A",{href:!0});var mMt=s(hQ);whr=r(mMt,"TFTransfoXLModel"),mMt.forEach(t),Ahr=r(DRe," (Transformer-XL model)"),DRe.forEach(t),yhr=i(j),HT=n(j,"LI",{});var GRe=s(HT);D7e=n(GRe,"STRONG",{});var gMt=s(D7e);Lhr=r(gMt,"vit"),gMt.forEach(t),xhr=r(GRe," \u2014 "),pQ=n(GRe,"A",{href:!0});var hMt=s(pQ);$hr=r(hMt,"TFViTModel"),hMt.forEach(t),khr=r(GRe," (ViT model)"),GRe.forEach(t),Shr=i(j),UT=n(j,"LI",{});var ORe=s(UT);G7e=n(ORe,"STRONG",{});var pMt=s(G7e);Rhr=r(pMt,"vit_mae"),pMt.forEach(t),Phr=r(ORe," \u2014 "),_Q=n(ORe,"A",{href:!0});var _Mt=s(_Q);Bhr=r(_Mt,"TFViTMAEModel"),_Mt.forEach(t),Ihr=r(ORe," (ViTMAE model)"),ORe.forEach(t),Nhr=i(j),JT=n(j,"LI",{});var VRe=s(JT);O7e=n(VRe,"STRONG",{});var uMt=s(O7e);qhr=r(uMt,"wav2vec2"),uMt.forEach(t),jhr=r(VRe," \u2014 "),uQ=n(VRe,"A",{href:!0});var bMt=s(uQ);Dhr=r(bMt,"TFWav2Vec2Model"),bMt.forEach(t),Ghr=r(VRe," (Wav2Vec2 model)"),VRe.forEach(t),Ohr=i(j),YT=n(j,"LI",{});var XRe=s(YT);V7e=n(XRe,"STRONG",{});var vMt=s(V7e);Vhr=r(vMt,"xlm"),vMt.forEach(t),Xhr=r(XRe," \u2014 "),bQ=n(XRe,"A",{href:!0});var FMt=s(bQ);zhr=r(FMt,"TFXLMModel"),FMt.forEach(t),Whr=r(XRe," (XLM model)"),XRe.forEach(t),Qhr=i(j),KT=n(j,"LI",{});var zRe=s(KT);X7e=n(zRe,"STRONG",{});var TMt=s(X7e);Hhr=r(TMt,"xlm-roberta"),TMt.forEach(t),Uhr=r(zRe," \u2014 "),vQ=n(zRe,"A",{href:!0});var MMt=s(vQ);Jhr=r(MMt,"TFXLMRobertaModel"),MMt.forEach(t),Yhr=r(zRe," (XLM-RoBERTa model)"),zRe.forEach(t),Khr=i(j),ZT=n(j,"LI",{});var WRe=s(ZT);z7e=n(WRe,"STRONG",{});var EMt=s(z7e);Zhr=r(EMt,"xlnet"),EMt.forEach(t),epr=r(WRe," \u2014 "),FQ=n(WRe,"A",{href:!0});var CMt=s(FQ);opr=r(CMt,"TFXLNetModel"),CMt.forEach(t),rpr=r(WRe," (XLNet model)"),WRe.forEach(t),j.forEach(t),tpr=i(pl),T(eM.$$.fragment,pl),pl.forEach(t),hl.forEach(t),Jje=i(f),Wd=n(f,"H2",{class:!0});var rOe=s(Wd);oM=n(rOe,"A",{id:!0,class:!0,href:!0});var wMt=s(oM);W7e=n(wMt,"SPAN",{});var AMt=s(W7e);T(C8.$$.fragment,AMt),AMt.forEach(t),wMt.forEach(t),apr=i(rOe),Q7e=n(rOe,"SPAN",{});var yMt=s(Q7e);npr=r(yMt,"TFAutoModelForPreTraining"),yMt.forEach(t),rOe.forEach(t),Yje=i(f),Ko=n(f,"DIV",{class:!0});var _l=s(Ko);T(w8.$$.fragment,_l),spr=i(_l),Qd=n(_l,"P",{});var Pee=s(Qd);lpr=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TQ=n(Pee,"A",{href:!0});var LMt=s(TQ);ipr=r(LMt,"from_pretrained()"),LMt.forEach(t),dpr=r(Pee," class method or the "),MQ=n(Pee,"A",{href:!0});var xMt=s(MQ);cpr=r(xMt,"from_config()"),xMt.forEach(t),fpr=r(Pee,` class
method.`),Pee.forEach(t),mpr=i(_l),A8=n(_l,"P",{});var tOe=s(A8);gpr=r(tOe,"This class cannot be instantiated directly using "),H7e=n(tOe,"CODE",{});var $Mt=s(H7e);hpr=r($Mt,"__init__()"),$Mt.forEach(t),ppr=r(tOe," (throws an error)."),tOe.forEach(t),_pr=i(_l),xt=n(_l,"DIV",{class:!0});var qA=s(xt);T(y8.$$.fragment,qA),upr=i(qA),U7e=n(qA,"P",{});var kMt=s(U7e);bpr=r(kMt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kMt.forEach(t),vpr=i(qA),Hd=n(qA,"P",{});var Bee=s(Hd);Fpr=r(Bee,`Note:
Loading a model from its configuration file does `),J7e=n(Bee,"STRONG",{});var SMt=s(J7e);Tpr=r(SMt,"not"),SMt.forEach(t),Mpr=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(Bee,"A",{href:!0});var RMt=s(EQ);Epr=r(RMt,"from_pretrained()"),RMt.forEach(t),Cpr=r(Bee," to load the model weights."),Bee.forEach(t),wpr=i(qA),T(rM.$$.fragment,qA),qA.forEach(t),Apr=i(_l),Ar=n(_l,"DIV",{class:!0});var ul=s(Ar);T(L8.$$.fragment,ul),ypr=i(ul),Y7e=n(ul,"P",{});var PMt=s(Y7e);Lpr=r(PMt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),PMt.forEach(t),xpr=i(ul),en=n(ul,"P",{});var jA=s(en);$pr=r(jA,"The model class to instantiate is selected based on the "),K7e=n(jA,"CODE",{});var BMt=s(K7e);kpr=r(BMt,"model_type"),BMt.forEach(t),Spr=r(jA,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(jA,"CODE",{});var IMt=s(Z7e);Rpr=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),Ppr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(jA,"CODE",{});var NMt=s(ebe);Bpr=r(NMt,"pretrained_model_name_or_path"),NMt.forEach(t),Ipr=r(jA,":"),jA.forEach(t),Npr=i(ul),se=n(ul,"UL",{});var le=s(se);tM=n(le,"LI",{});var QRe=s(tM);obe=n(QRe,"STRONG",{});var qMt=s(obe);qpr=r(qMt,"albert"),qMt.forEach(t),jpr=r(QRe," \u2014 "),CQ=n(QRe,"A",{href:!0});var jMt=s(CQ);Dpr=r(jMt,"TFAlbertForPreTraining"),jMt.forEach(t),Gpr=r(QRe," (ALBERT model)"),QRe.forEach(t),Opr=i(le),aM=n(le,"LI",{});var HRe=s(aM);rbe=n(HRe,"STRONG",{});var DMt=s(rbe);Vpr=r(DMt,"bart"),DMt.forEach(t),Xpr=r(HRe," \u2014 "),wQ=n(HRe,"A",{href:!0});var GMt=s(wQ);zpr=r(GMt,"TFBartForConditionalGeneration"),GMt.forEach(t),Wpr=r(HRe," (BART model)"),HRe.forEach(t),Qpr=i(le),nM=n(le,"LI",{});var URe=s(nM);tbe=n(URe,"STRONG",{});var OMt=s(tbe);Hpr=r(OMt,"bert"),OMt.forEach(t),Upr=r(URe," \u2014 "),AQ=n(URe,"A",{href:!0});var VMt=s(AQ);Jpr=r(VMt,"TFBertForPreTraining"),VMt.forEach(t),Ypr=r(URe," (BERT model)"),URe.forEach(t),Kpr=i(le),sM=n(le,"LI",{});var JRe=s(sM);abe=n(JRe,"STRONG",{});var XMt=s(abe);Zpr=r(XMt,"camembert"),XMt.forEach(t),e_r=r(JRe," \u2014 "),yQ=n(JRe,"A",{href:!0});var zMt=s(yQ);o_r=r(zMt,"TFCamembertForMaskedLM"),zMt.forEach(t),r_r=r(JRe," (CamemBERT model)"),JRe.forEach(t),t_r=i(le),lM=n(le,"LI",{});var YRe=s(lM);nbe=n(YRe,"STRONG",{});var WMt=s(nbe);a_r=r(WMt,"ctrl"),WMt.forEach(t),n_r=r(YRe," \u2014 "),LQ=n(YRe,"A",{href:!0});var QMt=s(LQ);s_r=r(QMt,"TFCTRLLMHeadModel"),QMt.forEach(t),l_r=r(YRe," (CTRL model)"),YRe.forEach(t),i_r=i(le),iM=n(le,"LI",{});var KRe=s(iM);sbe=n(KRe,"STRONG",{});var HMt=s(sbe);d_r=r(HMt,"distilbert"),HMt.forEach(t),c_r=r(KRe," \u2014 "),xQ=n(KRe,"A",{href:!0});var UMt=s(xQ);f_r=r(UMt,"TFDistilBertForMaskedLM"),UMt.forEach(t),m_r=r(KRe," (DistilBERT model)"),KRe.forEach(t),g_r=i(le),dM=n(le,"LI",{});var ZRe=s(dM);lbe=n(ZRe,"STRONG",{});var JMt=s(lbe);h_r=r(JMt,"electra"),JMt.forEach(t),p_r=r(ZRe," \u2014 "),$Q=n(ZRe,"A",{href:!0});var YMt=s($Q);__r=r(YMt,"TFElectraForPreTraining"),YMt.forEach(t),u_r=r(ZRe," (ELECTRA model)"),ZRe.forEach(t),b_r=i(le),cM=n(le,"LI",{});var ePe=s(cM);ibe=n(ePe,"STRONG",{});var KMt=s(ibe);v_r=r(KMt,"flaubert"),KMt.forEach(t),F_r=r(ePe," \u2014 "),kQ=n(ePe,"A",{href:!0});var ZMt=s(kQ);T_r=r(ZMt,"TFFlaubertWithLMHeadModel"),ZMt.forEach(t),M_r=r(ePe," (FlauBERT model)"),ePe.forEach(t),E_r=i(le),fM=n(le,"LI",{});var oPe=s(fM);dbe=n(oPe,"STRONG",{});var eEt=s(dbe);C_r=r(eEt,"funnel"),eEt.forEach(t),w_r=r(oPe," \u2014 "),SQ=n(oPe,"A",{href:!0});var oEt=s(SQ);A_r=r(oEt,"TFFunnelForPreTraining"),oEt.forEach(t),y_r=r(oPe," (Funnel Transformer model)"),oPe.forEach(t),L_r=i(le),mM=n(le,"LI",{});var rPe=s(mM);cbe=n(rPe,"STRONG",{});var rEt=s(cbe);x_r=r(rEt,"gpt2"),rEt.forEach(t),$_r=r(rPe," \u2014 "),RQ=n(rPe,"A",{href:!0});var tEt=s(RQ);k_r=r(tEt,"TFGPT2LMHeadModel"),tEt.forEach(t),S_r=r(rPe," (OpenAI GPT-2 model)"),rPe.forEach(t),R_r=i(le),gM=n(le,"LI",{});var tPe=s(gM);fbe=n(tPe,"STRONG",{});var aEt=s(fbe);P_r=r(aEt,"layoutlm"),aEt.forEach(t),B_r=r(tPe," \u2014 "),PQ=n(tPe,"A",{href:!0});var nEt=s(PQ);I_r=r(nEt,"TFLayoutLMForMaskedLM"),nEt.forEach(t),N_r=r(tPe," (LayoutLM model)"),tPe.forEach(t),q_r=i(le),hM=n(le,"LI",{});var aPe=s(hM);mbe=n(aPe,"STRONG",{});var sEt=s(mbe);j_r=r(sEt,"lxmert"),sEt.forEach(t),D_r=r(aPe," \u2014 "),BQ=n(aPe,"A",{href:!0});var lEt=s(BQ);G_r=r(lEt,"TFLxmertForPreTraining"),lEt.forEach(t),O_r=r(aPe," (LXMERT model)"),aPe.forEach(t),V_r=i(le),pM=n(le,"LI",{});var nPe=s(pM);gbe=n(nPe,"STRONG",{});var iEt=s(gbe);X_r=r(iEt,"mobilebert"),iEt.forEach(t),z_r=r(nPe," \u2014 "),IQ=n(nPe,"A",{href:!0});var dEt=s(IQ);W_r=r(dEt,"TFMobileBertForPreTraining"),dEt.forEach(t),Q_r=r(nPe," (MobileBERT model)"),nPe.forEach(t),H_r=i(le),_M=n(le,"LI",{});var sPe=s(_M);hbe=n(sPe,"STRONG",{});var cEt=s(hbe);U_r=r(cEt,"mpnet"),cEt.forEach(t),J_r=r(sPe," \u2014 "),NQ=n(sPe,"A",{href:!0});var fEt=s(NQ);Y_r=r(fEt,"TFMPNetForMaskedLM"),fEt.forEach(t),K_r=r(sPe," (MPNet model)"),sPe.forEach(t),Z_r=i(le),uM=n(le,"LI",{});var lPe=s(uM);pbe=n(lPe,"STRONG",{});var mEt=s(pbe);eur=r(mEt,"openai-gpt"),mEt.forEach(t),our=r(lPe," \u2014 "),qQ=n(lPe,"A",{href:!0});var gEt=s(qQ);rur=r(gEt,"TFOpenAIGPTLMHeadModel"),gEt.forEach(t),tur=r(lPe," (OpenAI GPT model)"),lPe.forEach(t),aur=i(le),bM=n(le,"LI",{});var iPe=s(bM);_be=n(iPe,"STRONG",{});var hEt=s(_be);nur=r(hEt,"roberta"),hEt.forEach(t),sur=r(iPe," \u2014 "),jQ=n(iPe,"A",{href:!0});var pEt=s(jQ);lur=r(pEt,"TFRobertaForMaskedLM"),pEt.forEach(t),iur=r(iPe," (RoBERTa model)"),iPe.forEach(t),dur=i(le),vM=n(le,"LI",{});var dPe=s(vM);ube=n(dPe,"STRONG",{});var _Et=s(ube);cur=r(_Et,"t5"),_Et.forEach(t),fur=r(dPe," \u2014 "),DQ=n(dPe,"A",{href:!0});var uEt=s(DQ);mur=r(uEt,"TFT5ForConditionalGeneration"),uEt.forEach(t),gur=r(dPe," (T5 model)"),dPe.forEach(t),hur=i(le),FM=n(le,"LI",{});var cPe=s(FM);bbe=n(cPe,"STRONG",{});var bEt=s(bbe);pur=r(bEt,"tapas"),bEt.forEach(t),_ur=r(cPe," \u2014 "),GQ=n(cPe,"A",{href:!0});var vEt=s(GQ);uur=r(vEt,"TFTapasForMaskedLM"),vEt.forEach(t),bur=r(cPe," (TAPAS model)"),cPe.forEach(t),vur=i(le),TM=n(le,"LI",{});var fPe=s(TM);vbe=n(fPe,"STRONG",{});var FEt=s(vbe);Fur=r(FEt,"transfo-xl"),FEt.forEach(t),Tur=r(fPe," \u2014 "),OQ=n(fPe,"A",{href:!0});var TEt=s(OQ);Mur=r(TEt,"TFTransfoXLLMHeadModel"),TEt.forEach(t),Eur=r(fPe," (Transformer-XL model)"),fPe.forEach(t),Cur=i(le),MM=n(le,"LI",{});var mPe=s(MM);Fbe=n(mPe,"STRONG",{});var MEt=s(Fbe);wur=r(MEt,"vit_mae"),MEt.forEach(t),Aur=r(mPe," \u2014 "),VQ=n(mPe,"A",{href:!0});var EEt=s(VQ);yur=r(EEt,"TFViTMAEForPreTraining"),EEt.forEach(t),Lur=r(mPe," (ViTMAE model)"),mPe.forEach(t),xur=i(le),EM=n(le,"LI",{});var gPe=s(EM);Tbe=n(gPe,"STRONG",{});var CEt=s(Tbe);$ur=r(CEt,"xlm"),CEt.forEach(t),kur=r(gPe," \u2014 "),XQ=n(gPe,"A",{href:!0});var wEt=s(XQ);Sur=r(wEt,"TFXLMWithLMHeadModel"),wEt.forEach(t),Rur=r(gPe," (XLM model)"),gPe.forEach(t),Pur=i(le),CM=n(le,"LI",{});var hPe=s(CM);Mbe=n(hPe,"STRONG",{});var AEt=s(Mbe);Bur=r(AEt,"xlm-roberta"),AEt.forEach(t),Iur=r(hPe," \u2014 "),zQ=n(hPe,"A",{href:!0});var yEt=s(zQ);Nur=r(yEt,"TFXLMRobertaForMaskedLM"),yEt.forEach(t),qur=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),jur=i(le),wM=n(le,"LI",{});var pPe=s(wM);Ebe=n(pPe,"STRONG",{});var LEt=s(Ebe);Dur=r(LEt,"xlnet"),LEt.forEach(t),Gur=r(pPe," \u2014 "),WQ=n(pPe,"A",{href:!0});var xEt=s(WQ);Our=r(xEt,"TFXLNetLMHeadModel"),xEt.forEach(t),Vur=r(pPe," (XLNet model)"),pPe.forEach(t),le.forEach(t),Xur=i(ul),T(AM.$$.fragment,ul),ul.forEach(t),_l.forEach(t),Kje=i(f),Ud=n(f,"H2",{class:!0});var aOe=s(Ud);yM=n(aOe,"A",{id:!0,class:!0,href:!0});var $Et=s(yM);Cbe=n($Et,"SPAN",{});var kEt=s(Cbe);T(x8.$$.fragment,kEt),kEt.forEach(t),$Et.forEach(t),zur=i(aOe),wbe=n(aOe,"SPAN",{});var SEt=s(wbe);Wur=r(SEt,"TFAutoModelForCausalLM"),SEt.forEach(t),aOe.forEach(t),Zje=i(f),Zo=n(f,"DIV",{class:!0});var bl=s(Zo);T($8.$$.fragment,bl),Qur=i(bl),Jd=n(bl,"P",{});var Iee=s(Jd);Hur=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),QQ=n(Iee,"A",{href:!0});var REt=s(QQ);Uur=r(REt,"from_pretrained()"),REt.forEach(t),Jur=r(Iee," class method or the "),HQ=n(Iee,"A",{href:!0});var PEt=s(HQ);Yur=r(PEt,"from_config()"),PEt.forEach(t),Kur=r(Iee,` class
method.`),Iee.forEach(t),Zur=i(bl),k8=n(bl,"P",{});var nOe=s(k8);e2r=r(nOe,"This class cannot be instantiated directly using "),Abe=n(nOe,"CODE",{});var BEt=s(Abe);o2r=r(BEt,"__init__()"),BEt.forEach(t),r2r=r(nOe," (throws an error)."),nOe.forEach(t),t2r=i(bl),$t=n(bl,"DIV",{class:!0});var DA=s($t);T(S8.$$.fragment,DA),a2r=i(DA),ybe=n(DA,"P",{});var IEt=s(ybe);n2r=r(IEt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),IEt.forEach(t),s2r=i(DA),Yd=n(DA,"P",{});var Nee=s(Yd);l2r=r(Nee,`Note:
Loading a model from its configuration file does `),Lbe=n(Nee,"STRONG",{});var NEt=s(Lbe);i2r=r(NEt,"not"),NEt.forEach(t),d2r=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(Nee,"A",{href:!0});var qEt=s(UQ);c2r=r(qEt,"from_pretrained()"),qEt.forEach(t),f2r=r(Nee," to load the model weights."),Nee.forEach(t),m2r=i(DA),T(LM.$$.fragment,DA),DA.forEach(t),g2r=i(bl),yr=n(bl,"DIV",{class:!0});var vl=s(yr);T(R8.$$.fragment,vl),h2r=i(vl),xbe=n(vl,"P",{});var jEt=s(xbe);p2r=r(jEt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jEt.forEach(t),_2r=i(vl),on=n(vl,"P",{});var GA=s(on);u2r=r(GA,"The model class to instantiate is selected based on the "),$be=n(GA,"CODE",{});var DEt=s($be);b2r=r(DEt,"model_type"),DEt.forEach(t),v2r=r(GA,` property of the config object (either
passed as an argument or loaded from `),kbe=n(GA,"CODE",{});var GEt=s(kbe);F2r=r(GEt,"pretrained_model_name_or_path"),GEt.forEach(t),T2r=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(GA,"CODE",{});var OEt=s(Sbe);M2r=r(OEt,"pretrained_model_name_or_path"),OEt.forEach(t),E2r=r(GA,":"),GA.forEach(t),C2r=i(vl),Me=n(vl,"UL",{});var Ce=s(Me);xM=n(Ce,"LI",{});var _Pe=s(xM);Rbe=n(_Pe,"STRONG",{});var VEt=s(Rbe);w2r=r(VEt,"bert"),VEt.forEach(t),A2r=r(_Pe," \u2014 "),JQ=n(_Pe,"A",{href:!0});var XEt=s(JQ);y2r=r(XEt,"TFBertLMHeadModel"),XEt.forEach(t),L2r=r(_Pe," (BERT model)"),_Pe.forEach(t),x2r=i(Ce),$M=n(Ce,"LI",{});var uPe=s($M);Pbe=n(uPe,"STRONG",{});var zEt=s(Pbe);$2r=r(zEt,"camembert"),zEt.forEach(t),k2r=r(uPe," \u2014 "),YQ=n(uPe,"A",{href:!0});var WEt=s(YQ);S2r=r(WEt,"TFCamembertForCausalLM"),WEt.forEach(t),R2r=r(uPe," (CamemBERT model)"),uPe.forEach(t),P2r=i(Ce),kM=n(Ce,"LI",{});var bPe=s(kM);Bbe=n(bPe,"STRONG",{});var QEt=s(Bbe);B2r=r(QEt,"ctrl"),QEt.forEach(t),I2r=r(bPe," \u2014 "),KQ=n(bPe,"A",{href:!0});var HEt=s(KQ);N2r=r(HEt,"TFCTRLLMHeadModel"),HEt.forEach(t),q2r=r(bPe," (CTRL model)"),bPe.forEach(t),j2r=i(Ce),SM=n(Ce,"LI",{});var vPe=s(SM);Ibe=n(vPe,"STRONG",{});var UEt=s(Ibe);D2r=r(UEt,"gpt2"),UEt.forEach(t),G2r=r(vPe," \u2014 "),ZQ=n(vPe,"A",{href:!0});var JEt=s(ZQ);O2r=r(JEt,"TFGPT2LMHeadModel"),JEt.forEach(t),V2r=r(vPe," (OpenAI GPT-2 model)"),vPe.forEach(t),X2r=i(Ce),RM=n(Ce,"LI",{});var FPe=s(RM);Nbe=n(FPe,"STRONG",{});var YEt=s(Nbe);z2r=r(YEt,"gptj"),YEt.forEach(t),W2r=r(FPe," \u2014 "),eH=n(FPe,"A",{href:!0});var KEt=s(eH);Q2r=r(KEt,"TFGPTJForCausalLM"),KEt.forEach(t),H2r=r(FPe," (GPT-J model)"),FPe.forEach(t),U2r=i(Ce),PM=n(Ce,"LI",{});var TPe=s(PM);qbe=n(TPe,"STRONG",{});var ZEt=s(qbe);J2r=r(ZEt,"openai-gpt"),ZEt.forEach(t),Y2r=r(TPe," \u2014 "),oH=n(TPe,"A",{href:!0});var eCt=s(oH);K2r=r(eCt,"TFOpenAIGPTLMHeadModel"),eCt.forEach(t),Z2r=r(TPe," (OpenAI GPT model)"),TPe.forEach(t),e1r=i(Ce),BM=n(Ce,"LI",{});var MPe=s(BM);jbe=n(MPe,"STRONG",{});var oCt=s(jbe);o1r=r(oCt,"opt"),oCt.forEach(t),r1r=r(MPe," \u2014 "),rH=n(MPe,"A",{href:!0});var rCt=s(rH);t1r=r(rCt,"TFOPTForCausalLM"),rCt.forEach(t),a1r=r(MPe," (OPT model)"),MPe.forEach(t),n1r=i(Ce),IM=n(Ce,"LI",{});var EPe=s(IM);Dbe=n(EPe,"STRONG",{});var tCt=s(Dbe);s1r=r(tCt,"rembert"),tCt.forEach(t),l1r=r(EPe," \u2014 "),tH=n(EPe,"A",{href:!0});var aCt=s(tH);i1r=r(aCt,"TFRemBertForCausalLM"),aCt.forEach(t),d1r=r(EPe," (RemBERT model)"),EPe.forEach(t),c1r=i(Ce),NM=n(Ce,"LI",{});var CPe=s(NM);Gbe=n(CPe,"STRONG",{});var nCt=s(Gbe);f1r=r(nCt,"roberta"),nCt.forEach(t),m1r=r(CPe," \u2014 "),aH=n(CPe,"A",{href:!0});var sCt=s(aH);g1r=r(sCt,"TFRobertaForCausalLM"),sCt.forEach(t),h1r=r(CPe," (RoBERTa model)"),CPe.forEach(t),p1r=i(Ce),qM=n(Ce,"LI",{});var wPe=s(qM);Obe=n(wPe,"STRONG",{});var lCt=s(Obe);_1r=r(lCt,"roformer"),lCt.forEach(t),u1r=r(wPe," \u2014 "),nH=n(wPe,"A",{href:!0});var iCt=s(nH);b1r=r(iCt,"TFRoFormerForCausalLM"),iCt.forEach(t),v1r=r(wPe," (RoFormer model)"),wPe.forEach(t),F1r=i(Ce),jM=n(Ce,"LI",{});var APe=s(jM);Vbe=n(APe,"STRONG",{});var dCt=s(Vbe);T1r=r(dCt,"transfo-xl"),dCt.forEach(t),M1r=r(APe," \u2014 "),sH=n(APe,"A",{href:!0});var cCt=s(sH);E1r=r(cCt,"TFTransfoXLLMHeadModel"),cCt.forEach(t),C1r=r(APe," (Transformer-XL model)"),APe.forEach(t),w1r=i(Ce),DM=n(Ce,"LI",{});var yPe=s(DM);Xbe=n(yPe,"STRONG",{});var fCt=s(Xbe);A1r=r(fCt,"xlm"),fCt.forEach(t),y1r=r(yPe," \u2014 "),lH=n(yPe,"A",{href:!0});var mCt=s(lH);L1r=r(mCt,"TFXLMWithLMHeadModel"),mCt.forEach(t),x1r=r(yPe," (XLM model)"),yPe.forEach(t),$1r=i(Ce),GM=n(Ce,"LI",{});var LPe=s(GM);zbe=n(LPe,"STRONG",{});var gCt=s(zbe);k1r=r(gCt,"xlnet"),gCt.forEach(t),S1r=r(LPe," \u2014 "),iH=n(LPe,"A",{href:!0});var hCt=s(iH);R1r=r(hCt,"TFXLNetLMHeadModel"),hCt.forEach(t),P1r=r(LPe," (XLNet model)"),LPe.forEach(t),Ce.forEach(t),B1r=i(vl),T(OM.$$.fragment,vl),vl.forEach(t),bl.forEach(t),eDe=i(f),Kd=n(f,"H2",{class:!0});var sOe=s(Kd);VM=n(sOe,"A",{id:!0,class:!0,href:!0});var pCt=s(VM);Wbe=n(pCt,"SPAN",{});var _Ct=s(Wbe);T(P8.$$.fragment,_Ct),_Ct.forEach(t),pCt.forEach(t),I1r=i(sOe),Qbe=n(sOe,"SPAN",{});var uCt=s(Qbe);N1r=r(uCt,"TFAutoModelForImageClassification"),uCt.forEach(t),sOe.forEach(t),oDe=i(f),er=n(f,"DIV",{class:!0});var Fl=s(er);T(B8.$$.fragment,Fl),q1r=i(Fl),Zd=n(Fl,"P",{});var qee=s(Zd);j1r=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dH=n(qee,"A",{href:!0});var bCt=s(dH);D1r=r(bCt,"from_pretrained()"),bCt.forEach(t),G1r=r(qee," class method or the "),cH=n(qee,"A",{href:!0});var vCt=s(cH);O1r=r(vCt,"from_config()"),vCt.forEach(t),V1r=r(qee,` class
method.`),qee.forEach(t),X1r=i(Fl),I8=n(Fl,"P",{});var lOe=s(I8);z1r=r(lOe,"This class cannot be instantiated directly using "),Hbe=n(lOe,"CODE",{});var FCt=s(Hbe);W1r=r(FCt,"__init__()"),FCt.forEach(t),Q1r=r(lOe," (throws an error)."),lOe.forEach(t),H1r=i(Fl),kt=n(Fl,"DIV",{class:!0});var OA=s(kt);T(N8.$$.fragment,OA),U1r=i(OA),Ube=n(OA,"P",{});var TCt=s(Ube);J1r=r(TCt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),TCt.forEach(t),Y1r=i(OA),ec=n(OA,"P",{});var jee=s(ec);K1r=r(jee,`Note:
Loading a model from its configuration file does `),Jbe=n(jee,"STRONG",{});var MCt=s(Jbe);Z1r=r(MCt,"not"),MCt.forEach(t),e7r=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(jee,"A",{href:!0});var ECt=s(fH);o7r=r(ECt,"from_pretrained()"),ECt.forEach(t),r7r=r(jee," to load the model weights."),jee.forEach(t),t7r=i(OA),T(XM.$$.fragment,OA),OA.forEach(t),a7r=i(Fl),Lr=n(Fl,"DIV",{class:!0});var Tl=s(Lr);T(q8.$$.fragment,Tl),n7r=i(Tl),Ybe=n(Tl,"P",{});var CCt=s(Ybe);s7r=r(CCt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),CCt.forEach(t),l7r=i(Tl),rn=n(Tl,"P",{});var VA=s(rn);i7r=r(VA,"The model class to instantiate is selected based on the "),Kbe=n(VA,"CODE",{});var wCt=s(Kbe);d7r=r(wCt,"model_type"),wCt.forEach(t),c7r=r(VA,` property of the config object (either
passed as an argument or loaded from `),Zbe=n(VA,"CODE",{});var ACt=s(Zbe);f7r=r(ACt,"pretrained_model_name_or_path"),ACt.forEach(t),m7r=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e4e=n(VA,"CODE",{});var yCt=s(e4e);g7r=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),h7r=r(VA,":"),VA.forEach(t),p7r=i(Tl),et=n(Tl,"UL",{});var Ml=s(et);zM=n(Ml,"LI",{});var xPe=s(zM);o4e=n(xPe,"STRONG",{});var LCt=s(o4e);_7r=r(LCt,"convnext"),LCt.forEach(t),u7r=r(xPe," \u2014 "),mH=n(xPe,"A",{href:!0});var xCt=s(mH);b7r=r(xCt,"TFConvNextForImageClassification"),xCt.forEach(t),v7r=r(xPe," (ConvNeXT model)"),xPe.forEach(t),F7r=i(Ml),WM=n(Ml,"LI",{});var $Pe=s(WM);r4e=n($Pe,"STRONG",{});var $Ct=s(r4e);T7r=r($Ct,"data2vec-vision"),$Ct.forEach(t),M7r=r($Pe," \u2014 "),gH=n($Pe,"A",{href:!0});var kCt=s(gH);E7r=r(kCt,"TFData2VecVisionForImageClassification"),kCt.forEach(t),C7r=r($Pe," (Data2VecVision model)"),$Pe.forEach(t),w7r=i(Ml),QM=n(Ml,"LI",{});var kPe=s(QM);t4e=n(kPe,"STRONG",{});var SCt=s(t4e);A7r=r(SCt,"resnet"),SCt.forEach(t),y7r=r(kPe," \u2014 "),hH=n(kPe,"A",{href:!0});var RCt=s(hH);L7r=r(RCt,"TFResNetForImageClassification"),RCt.forEach(t),x7r=r(kPe," (ResNet model)"),kPe.forEach(t),$7r=i(Ml),HM=n(Ml,"LI",{});var SPe=s(HM);a4e=n(SPe,"STRONG",{});var PCt=s(a4e);k7r=r(PCt,"swin"),PCt.forEach(t),S7r=r(SPe," \u2014 "),pH=n(SPe,"A",{href:!0});var BCt=s(pH);R7r=r(BCt,"TFSwinForImageClassification"),BCt.forEach(t),P7r=r(SPe," (Swin Transformer model)"),SPe.forEach(t),B7r=i(Ml),UM=n(Ml,"LI",{});var RPe=s(UM);n4e=n(RPe,"STRONG",{});var ICt=s(n4e);I7r=r(ICt,"vit"),ICt.forEach(t),N7r=r(RPe," \u2014 "),_H=n(RPe,"A",{href:!0});var NCt=s(_H);q7r=r(NCt,"TFViTForImageClassification"),NCt.forEach(t),j7r=r(RPe," (ViT model)"),RPe.forEach(t),Ml.forEach(t),D7r=i(Tl),T(JM.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),rDe=i(f),oc=n(f,"H2",{class:!0});var iOe=s(oc);YM=n(iOe,"A",{id:!0,class:!0,href:!0});var qCt=s(YM);s4e=n(qCt,"SPAN",{});var jCt=s(s4e);T(j8.$$.fragment,jCt),jCt.forEach(t),qCt.forEach(t),G7r=i(iOe),l4e=n(iOe,"SPAN",{});var DCt=s(l4e);O7r=r(DCt,"TFAutoModelForMaskedLM"),DCt.forEach(t),iOe.forEach(t),tDe=i(f),or=n(f,"DIV",{class:!0});var El=s(or);T(D8.$$.fragment,El),V7r=i(El),rc=n(El,"P",{});var Dee=s(rc);X7r=r(Dee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),uH=n(Dee,"A",{href:!0});var GCt=s(uH);z7r=r(GCt,"from_pretrained()"),GCt.forEach(t),W7r=r(Dee," class method or the "),bH=n(Dee,"A",{href:!0});var OCt=s(bH);Q7r=r(OCt,"from_config()"),OCt.forEach(t),H7r=r(Dee,` class
method.`),Dee.forEach(t),U7r=i(El),G8=n(El,"P",{});var dOe=s(G8);J7r=r(dOe,"This class cannot be instantiated directly using "),i4e=n(dOe,"CODE",{});var VCt=s(i4e);Y7r=r(VCt,"__init__()"),VCt.forEach(t),K7r=r(dOe," (throws an error)."),dOe.forEach(t),Z7r=i(El),St=n(El,"DIV",{class:!0});var XA=s(St);T(O8.$$.fragment,XA),ebr=i(XA),d4e=n(XA,"P",{});var XCt=s(d4e);obr=r(XCt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),XCt.forEach(t),rbr=i(XA),tc=n(XA,"P",{});var Gee=s(tc);tbr=r(Gee,`Note:
Loading a model from its configuration file does `),c4e=n(Gee,"STRONG",{});var zCt=s(c4e);abr=r(zCt,"not"),zCt.forEach(t),nbr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(Gee,"A",{href:!0});var WCt=s(vH);sbr=r(WCt,"from_pretrained()"),WCt.forEach(t),lbr=r(Gee," to load the model weights."),Gee.forEach(t),ibr=i(XA),T(KM.$$.fragment,XA),XA.forEach(t),dbr=i(El),xr=n(El,"DIV",{class:!0});var Cl=s(xr);T(V8.$$.fragment,Cl),cbr=i(Cl),f4e=n(Cl,"P",{});var QCt=s(f4e);fbr=r(QCt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QCt.forEach(t),mbr=i(Cl),tn=n(Cl,"P",{});var zA=s(tn);gbr=r(zA,"The model class to instantiate is selected based on the "),m4e=n(zA,"CODE",{});var HCt=s(m4e);hbr=r(HCt,"model_type"),HCt.forEach(t),pbr=r(zA,` property of the config object (either
passed as an argument or loaded from `),g4e=n(zA,"CODE",{});var UCt=s(g4e);_br=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),ubr=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h4e=n(zA,"CODE",{});var JCt=s(h4e);bbr=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),vbr=r(zA,":"),zA.forEach(t),Fbr=i(Cl),ie=n(Cl,"UL",{});var fe=s(ie);ZM=n(fe,"LI",{});var PPe=s(ZM);p4e=n(PPe,"STRONG",{});var YCt=s(p4e);Tbr=r(YCt,"albert"),YCt.forEach(t),Mbr=r(PPe," \u2014 "),FH=n(PPe,"A",{href:!0});var KCt=s(FH);Ebr=r(KCt,"TFAlbertForMaskedLM"),KCt.forEach(t),Cbr=r(PPe," (ALBERT model)"),PPe.forEach(t),wbr=i(fe),eE=n(fe,"LI",{});var BPe=s(eE);_4e=n(BPe,"STRONG",{});var ZCt=s(_4e);Abr=r(ZCt,"bert"),ZCt.forEach(t),ybr=r(BPe," \u2014 "),TH=n(BPe,"A",{href:!0});var e5t=s(TH);Lbr=r(e5t,"TFBertForMaskedLM"),e5t.forEach(t),xbr=r(BPe," (BERT model)"),BPe.forEach(t),$br=i(fe),oE=n(fe,"LI",{});var IPe=s(oE);u4e=n(IPe,"STRONG",{});var o5t=s(u4e);kbr=r(o5t,"camembert"),o5t.forEach(t),Sbr=r(IPe," \u2014 "),MH=n(IPe,"A",{href:!0});var r5t=s(MH);Rbr=r(r5t,"TFCamembertForMaskedLM"),r5t.forEach(t),Pbr=r(IPe," (CamemBERT model)"),IPe.forEach(t),Bbr=i(fe),rE=n(fe,"LI",{});var NPe=s(rE);b4e=n(NPe,"STRONG",{});var t5t=s(b4e);Ibr=r(t5t,"convbert"),t5t.forEach(t),Nbr=r(NPe," \u2014 "),EH=n(NPe,"A",{href:!0});var a5t=s(EH);qbr=r(a5t,"TFConvBertForMaskedLM"),a5t.forEach(t),jbr=r(NPe," (ConvBERT model)"),NPe.forEach(t),Dbr=i(fe),tE=n(fe,"LI",{});var qPe=s(tE);v4e=n(qPe,"STRONG",{});var n5t=s(v4e);Gbr=r(n5t,"deberta"),n5t.forEach(t),Obr=r(qPe," \u2014 "),CH=n(qPe,"A",{href:!0});var s5t=s(CH);Vbr=r(s5t,"TFDebertaForMaskedLM"),s5t.forEach(t),Xbr=r(qPe," (DeBERTa model)"),qPe.forEach(t),zbr=i(fe),aE=n(fe,"LI",{});var jPe=s(aE);F4e=n(jPe,"STRONG",{});var l5t=s(F4e);Wbr=r(l5t,"deberta-v2"),l5t.forEach(t),Qbr=r(jPe," \u2014 "),wH=n(jPe,"A",{href:!0});var i5t=s(wH);Hbr=r(i5t,"TFDebertaV2ForMaskedLM"),i5t.forEach(t),Ubr=r(jPe," (DeBERTa-v2 model)"),jPe.forEach(t),Jbr=i(fe),nE=n(fe,"LI",{});var DPe=s(nE);T4e=n(DPe,"STRONG",{});var d5t=s(T4e);Ybr=r(d5t,"distilbert"),d5t.forEach(t),Kbr=r(DPe," \u2014 "),AH=n(DPe,"A",{href:!0});var c5t=s(AH);Zbr=r(c5t,"TFDistilBertForMaskedLM"),c5t.forEach(t),e4r=r(DPe," (DistilBERT model)"),DPe.forEach(t),o4r=i(fe),sE=n(fe,"LI",{});var GPe=s(sE);M4e=n(GPe,"STRONG",{});var f5t=s(M4e);r4r=r(f5t,"electra"),f5t.forEach(t),t4r=r(GPe," \u2014 "),yH=n(GPe,"A",{href:!0});var m5t=s(yH);a4r=r(m5t,"TFElectraForMaskedLM"),m5t.forEach(t),n4r=r(GPe," (ELECTRA model)"),GPe.forEach(t),s4r=i(fe),lE=n(fe,"LI",{});var OPe=s(lE);E4e=n(OPe,"STRONG",{});var g5t=s(E4e);l4r=r(g5t,"flaubert"),g5t.forEach(t),i4r=r(OPe," \u2014 "),LH=n(OPe,"A",{href:!0});var h5t=s(LH);d4r=r(h5t,"TFFlaubertWithLMHeadModel"),h5t.forEach(t),c4r=r(OPe," (FlauBERT model)"),OPe.forEach(t),f4r=i(fe),iE=n(fe,"LI",{});var VPe=s(iE);C4e=n(VPe,"STRONG",{});var p5t=s(C4e);m4r=r(p5t,"funnel"),p5t.forEach(t),g4r=r(VPe," \u2014 "),xH=n(VPe,"A",{href:!0});var _5t=s(xH);h4r=r(_5t,"TFFunnelForMaskedLM"),_5t.forEach(t),p4r=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),_4r=i(fe),dE=n(fe,"LI",{});var XPe=s(dE);w4e=n(XPe,"STRONG",{});var u5t=s(w4e);u4r=r(u5t,"layoutlm"),u5t.forEach(t),b4r=r(XPe," \u2014 "),$H=n(XPe,"A",{href:!0});var b5t=s($H);v4r=r(b5t,"TFLayoutLMForMaskedLM"),b5t.forEach(t),F4r=r(XPe," (LayoutLM model)"),XPe.forEach(t),T4r=i(fe),cE=n(fe,"LI",{});var zPe=s(cE);A4e=n(zPe,"STRONG",{});var v5t=s(A4e);M4r=r(v5t,"longformer"),v5t.forEach(t),E4r=r(zPe," \u2014 "),kH=n(zPe,"A",{href:!0});var F5t=s(kH);C4r=r(F5t,"TFLongformerForMaskedLM"),F5t.forEach(t),w4r=r(zPe," (Longformer model)"),zPe.forEach(t),A4r=i(fe),fE=n(fe,"LI",{});var WPe=s(fE);y4e=n(WPe,"STRONG",{});var T5t=s(y4e);y4r=r(T5t,"mobilebert"),T5t.forEach(t),L4r=r(WPe," \u2014 "),SH=n(WPe,"A",{href:!0});var M5t=s(SH);x4r=r(M5t,"TFMobileBertForMaskedLM"),M5t.forEach(t),$4r=r(WPe," (MobileBERT model)"),WPe.forEach(t),k4r=i(fe),mE=n(fe,"LI",{});var QPe=s(mE);L4e=n(QPe,"STRONG",{});var E5t=s(L4e);S4r=r(E5t,"mpnet"),E5t.forEach(t),R4r=r(QPe," \u2014 "),RH=n(QPe,"A",{href:!0});var C5t=s(RH);P4r=r(C5t,"TFMPNetForMaskedLM"),C5t.forEach(t),B4r=r(QPe," (MPNet model)"),QPe.forEach(t),I4r=i(fe),gE=n(fe,"LI",{});var HPe=s(gE);x4e=n(HPe,"STRONG",{});var w5t=s(x4e);N4r=r(w5t,"rembert"),w5t.forEach(t),q4r=r(HPe," \u2014 "),PH=n(HPe,"A",{href:!0});var A5t=s(PH);j4r=r(A5t,"TFRemBertForMaskedLM"),A5t.forEach(t),D4r=r(HPe," (RemBERT model)"),HPe.forEach(t),G4r=i(fe),hE=n(fe,"LI",{});var UPe=s(hE);$4e=n(UPe,"STRONG",{});var y5t=s($4e);O4r=r(y5t,"roberta"),y5t.forEach(t),V4r=r(UPe," \u2014 "),BH=n(UPe,"A",{href:!0});var L5t=s(BH);X4r=r(L5t,"TFRobertaForMaskedLM"),L5t.forEach(t),z4r=r(UPe," (RoBERTa model)"),UPe.forEach(t),W4r=i(fe),pE=n(fe,"LI",{});var JPe=s(pE);k4e=n(JPe,"STRONG",{});var x5t=s(k4e);Q4r=r(x5t,"roformer"),x5t.forEach(t),H4r=r(JPe," \u2014 "),IH=n(JPe,"A",{href:!0});var $5t=s(IH);U4r=r($5t,"TFRoFormerForMaskedLM"),$5t.forEach(t),J4r=r(JPe," (RoFormer model)"),JPe.forEach(t),Y4r=i(fe),_E=n(fe,"LI",{});var YPe=s(_E);S4e=n(YPe,"STRONG",{});var k5t=s(S4e);K4r=r(k5t,"tapas"),k5t.forEach(t),Z4r=r(YPe," \u2014 "),NH=n(YPe,"A",{href:!0});var S5t=s(NH);evr=r(S5t,"TFTapasForMaskedLM"),S5t.forEach(t),ovr=r(YPe," (TAPAS model)"),YPe.forEach(t),rvr=i(fe),uE=n(fe,"LI",{});var KPe=s(uE);R4e=n(KPe,"STRONG",{});var R5t=s(R4e);tvr=r(R5t,"xlm"),R5t.forEach(t),avr=r(KPe," \u2014 "),qH=n(KPe,"A",{href:!0});var P5t=s(qH);nvr=r(P5t,"TFXLMWithLMHeadModel"),P5t.forEach(t),svr=r(KPe," (XLM model)"),KPe.forEach(t),lvr=i(fe),bE=n(fe,"LI",{});var ZPe=s(bE);P4e=n(ZPe,"STRONG",{});var B5t=s(P4e);ivr=r(B5t,"xlm-roberta"),B5t.forEach(t),dvr=r(ZPe," \u2014 "),jH=n(ZPe,"A",{href:!0});var I5t=s(jH);cvr=r(I5t,"TFXLMRobertaForMaskedLM"),I5t.forEach(t),fvr=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),fe.forEach(t),mvr=i(Cl),T(vE.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),aDe=i(f),ac=n(f,"H2",{class:!0});var cOe=s(ac);FE=n(cOe,"A",{id:!0,class:!0,href:!0});var N5t=s(FE);B4e=n(N5t,"SPAN",{});var q5t=s(B4e);T(X8.$$.fragment,q5t),q5t.forEach(t),N5t.forEach(t),gvr=i(cOe),I4e=n(cOe,"SPAN",{});var j5t=s(I4e);hvr=r(j5t,"TFAutoModelForSeq2SeqLM"),j5t.forEach(t),cOe.forEach(t),nDe=i(f),rr=n(f,"DIV",{class:!0});var wl=s(rr);T(z8.$$.fragment,wl),pvr=i(wl),nc=n(wl,"P",{});var Oee=s(nc);_vr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DH=n(Oee,"A",{href:!0});var D5t=s(DH);uvr=r(D5t,"from_pretrained()"),D5t.forEach(t),bvr=r(Oee," class method or the "),GH=n(Oee,"A",{href:!0});var G5t=s(GH);vvr=r(G5t,"from_config()"),G5t.forEach(t),Fvr=r(Oee,` class
method.`),Oee.forEach(t),Tvr=i(wl),W8=n(wl,"P",{});var fOe=s(W8);Mvr=r(fOe,"This class cannot be instantiated directly using "),N4e=n(fOe,"CODE",{});var O5t=s(N4e);Evr=r(O5t,"__init__()"),O5t.forEach(t),Cvr=r(fOe," (throws an error)."),fOe.forEach(t),wvr=i(wl),Rt=n(wl,"DIV",{class:!0});var WA=s(Rt);T(Q8.$$.fragment,WA),Avr=i(WA),q4e=n(WA,"P",{});var V5t=s(q4e);yvr=r(V5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),V5t.forEach(t),Lvr=i(WA),sc=n(WA,"P",{});var Vee=s(sc);xvr=r(Vee,`Note:
Loading a model from its configuration file does `),j4e=n(Vee,"STRONG",{});var X5t=s(j4e);$vr=r(X5t,"not"),X5t.forEach(t),kvr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(Vee,"A",{href:!0});var z5t=s(OH);Svr=r(z5t,"from_pretrained()"),z5t.forEach(t),Rvr=r(Vee," to load the model weights."),Vee.forEach(t),Pvr=i(WA),T(TE.$$.fragment,WA),WA.forEach(t),Bvr=i(wl),$r=n(wl,"DIV",{class:!0});var Al=s($r);T(H8.$$.fragment,Al),Ivr=i(Al),D4e=n(Al,"P",{});var W5t=s(D4e);Nvr=r(W5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),W5t.forEach(t),qvr=i(Al),an=n(Al,"P",{});var QA=s(an);jvr=r(QA,"The model class to instantiate is selected based on the "),G4e=n(QA,"CODE",{});var Q5t=s(G4e);Dvr=r(Q5t,"model_type"),Q5t.forEach(t),Gvr=r(QA,` property of the config object (either
passed as an argument or loaded from `),O4e=n(QA,"CODE",{});var H5t=s(O4e);Ovr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),Vvr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V4e=n(QA,"CODE",{});var U5t=s(V4e);Xvr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),zvr=r(QA,":"),QA.forEach(t),Wvr=i(Al),ye=n(Al,"UL",{});var Be=s(ye);ME=n(Be,"LI",{});var eBe=s(ME);X4e=n(eBe,"STRONG",{});var J5t=s(X4e);Qvr=r(J5t,"bart"),J5t.forEach(t),Hvr=r(eBe," \u2014 "),VH=n(eBe,"A",{href:!0});var Y5t=s(VH);Uvr=r(Y5t,"TFBartForConditionalGeneration"),Y5t.forEach(t),Jvr=r(eBe," (BART model)"),eBe.forEach(t),Yvr=i(Be),EE=n(Be,"LI",{});var oBe=s(EE);z4e=n(oBe,"STRONG",{});var K5t=s(z4e);Kvr=r(K5t,"blenderbot"),K5t.forEach(t),Zvr=r(oBe," \u2014 "),XH=n(oBe,"A",{href:!0});var Z5t=s(XH);eFr=r(Z5t,"TFBlenderbotForConditionalGeneration"),Z5t.forEach(t),oFr=r(oBe," (Blenderbot model)"),oBe.forEach(t),rFr=i(Be),CE=n(Be,"LI",{});var rBe=s(CE);W4e=n(rBe,"STRONG",{});var e3t=s(W4e);tFr=r(e3t,"blenderbot-small"),e3t.forEach(t),aFr=r(rBe," \u2014 "),zH=n(rBe,"A",{href:!0});var o3t=s(zH);nFr=r(o3t,"TFBlenderbotSmallForConditionalGeneration"),o3t.forEach(t),sFr=r(rBe," (BlenderbotSmall model)"),rBe.forEach(t),lFr=i(Be),wE=n(Be,"LI",{});var tBe=s(wE);Q4e=n(tBe,"STRONG",{});var r3t=s(Q4e);iFr=r(r3t,"encoder-decoder"),r3t.forEach(t),dFr=r(tBe," \u2014 "),WH=n(tBe,"A",{href:!0});var t3t=s(WH);cFr=r(t3t,"TFEncoderDecoderModel"),t3t.forEach(t),fFr=r(tBe," (Encoder decoder model)"),tBe.forEach(t),mFr=i(Be),AE=n(Be,"LI",{});var aBe=s(AE);H4e=n(aBe,"STRONG",{});var a3t=s(H4e);gFr=r(a3t,"led"),a3t.forEach(t),hFr=r(aBe," \u2014 "),QH=n(aBe,"A",{href:!0});var n3t=s(QH);pFr=r(n3t,"TFLEDForConditionalGeneration"),n3t.forEach(t),_Fr=r(aBe," (LED model)"),aBe.forEach(t),uFr=i(Be),yE=n(Be,"LI",{});var nBe=s(yE);U4e=n(nBe,"STRONG",{});var s3t=s(U4e);bFr=r(s3t,"marian"),s3t.forEach(t),vFr=r(nBe," \u2014 "),HH=n(nBe,"A",{href:!0});var l3t=s(HH);FFr=r(l3t,"TFMarianMTModel"),l3t.forEach(t),TFr=r(nBe," (Marian model)"),nBe.forEach(t),MFr=i(Be),LE=n(Be,"LI",{});var sBe=s(LE);J4e=n(sBe,"STRONG",{});var i3t=s(J4e);EFr=r(i3t,"mbart"),i3t.forEach(t),CFr=r(sBe," \u2014 "),UH=n(sBe,"A",{href:!0});var d3t=s(UH);wFr=r(d3t,"TFMBartForConditionalGeneration"),d3t.forEach(t),AFr=r(sBe," (mBART model)"),sBe.forEach(t),yFr=i(Be),xE=n(Be,"LI",{});var lBe=s(xE);Y4e=n(lBe,"STRONG",{});var c3t=s(Y4e);LFr=r(c3t,"mt5"),c3t.forEach(t),xFr=r(lBe," \u2014 "),JH=n(lBe,"A",{href:!0});var f3t=s(JH);$Fr=r(f3t,"TFMT5ForConditionalGeneration"),f3t.forEach(t),kFr=r(lBe," (MT5 model)"),lBe.forEach(t),SFr=i(Be),$E=n(Be,"LI",{});var iBe=s($E);K4e=n(iBe,"STRONG",{});var m3t=s(K4e);RFr=r(m3t,"pegasus"),m3t.forEach(t),PFr=r(iBe," \u2014 "),YH=n(iBe,"A",{href:!0});var g3t=s(YH);BFr=r(g3t,"TFPegasusForConditionalGeneration"),g3t.forEach(t),IFr=r(iBe," (Pegasus model)"),iBe.forEach(t),NFr=i(Be),kE=n(Be,"LI",{});var dBe=s(kE);Z4e=n(dBe,"STRONG",{});var h3t=s(Z4e);qFr=r(h3t,"t5"),h3t.forEach(t),jFr=r(dBe," \u2014 "),KH=n(dBe,"A",{href:!0});var p3t=s(KH);DFr=r(p3t,"TFT5ForConditionalGeneration"),p3t.forEach(t),GFr=r(dBe," (T5 model)"),dBe.forEach(t),Be.forEach(t),OFr=i(Al),T(SE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),sDe=i(f),lc=n(f,"H2",{class:!0});var mOe=s(lc);RE=n(mOe,"A",{id:!0,class:!0,href:!0});var _3t=s(RE);eve=n(_3t,"SPAN",{});var u3t=s(eve);T(U8.$$.fragment,u3t),u3t.forEach(t),_3t.forEach(t),VFr=i(mOe),ove=n(mOe,"SPAN",{});var b3t=s(ove);XFr=r(b3t,"TFAutoModelForSequenceClassification"),b3t.forEach(t),mOe.forEach(t),lDe=i(f),tr=n(f,"DIV",{class:!0});var yl=s(tr);T(J8.$$.fragment,yl),zFr=i(yl),ic=n(yl,"P",{});var Xee=s(ic);WFr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),ZH=n(Xee,"A",{href:!0});var v3t=s(ZH);QFr=r(v3t,"from_pretrained()"),v3t.forEach(t),HFr=r(Xee," class method or the "),eU=n(Xee,"A",{href:!0});var F3t=s(eU);UFr=r(F3t,"from_config()"),F3t.forEach(t),JFr=r(Xee,` class
method.`),Xee.forEach(t),YFr=i(yl),Y8=n(yl,"P",{});var gOe=s(Y8);KFr=r(gOe,"This class cannot be instantiated directly using "),rve=n(gOe,"CODE",{});var T3t=s(rve);ZFr=r(T3t,"__init__()"),T3t.forEach(t),eTr=r(gOe," (throws an error)."),gOe.forEach(t),oTr=i(yl),Pt=n(yl,"DIV",{class:!0});var HA=s(Pt);T(K8.$$.fragment,HA),rTr=i(HA),tve=n(HA,"P",{});var M3t=s(tve);tTr=r(M3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),M3t.forEach(t),aTr=i(HA),dc=n(HA,"P",{});var zee=s(dc);nTr=r(zee,`Note:
Loading a model from its configuration file does `),ave=n(zee,"STRONG",{});var E3t=s(ave);sTr=r(E3t,"not"),E3t.forEach(t),lTr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(zee,"A",{href:!0});var C3t=s(oU);iTr=r(C3t,"from_pretrained()"),C3t.forEach(t),dTr=r(zee," to load the model weights."),zee.forEach(t),cTr=i(HA),T(PE.$$.fragment,HA),HA.forEach(t),fTr=i(yl),kr=n(yl,"DIV",{class:!0});var Ll=s(kr);T(Z8.$$.fragment,Ll),mTr=i(Ll),nve=n(Ll,"P",{});var w3t=s(nve);gTr=r(w3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),w3t.forEach(t),hTr=i(Ll),nn=n(Ll,"P",{});var UA=s(nn);pTr=r(UA,"The model class to instantiate is selected based on the "),sve=n(UA,"CODE",{});var A3t=s(sve);_Tr=r(A3t,"model_type"),A3t.forEach(t),uTr=r(UA,` property of the config object (either
passed as an argument or loaded from `),lve=n(UA,"CODE",{});var y3t=s(lve);bTr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),vTr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ive=n(UA,"CODE",{});var L3t=s(ive);FTr=r(L3t,"pretrained_model_name_or_path"),L3t.forEach(t),TTr=r(UA,":"),UA.forEach(t),MTr=i(Ll),oe=n(Ll,"UL",{});var ae=s(oe);BE=n(ae,"LI",{});var cBe=s(BE);dve=n(cBe,"STRONG",{});var x3t=s(dve);ETr=r(x3t,"albert"),x3t.forEach(t),CTr=r(cBe," \u2014 "),rU=n(cBe,"A",{href:!0});var $3t=s(rU);wTr=r($3t,"TFAlbertForSequenceClassification"),$3t.forEach(t),ATr=r(cBe," (ALBERT model)"),cBe.forEach(t),yTr=i(ae),IE=n(ae,"LI",{});var fBe=s(IE);cve=n(fBe,"STRONG",{});var k3t=s(cve);LTr=r(k3t,"bert"),k3t.forEach(t),xTr=r(fBe," \u2014 "),tU=n(fBe,"A",{href:!0});var S3t=s(tU);$Tr=r(S3t,"TFBertForSequenceClassification"),S3t.forEach(t),kTr=r(fBe," (BERT model)"),fBe.forEach(t),STr=i(ae),NE=n(ae,"LI",{});var mBe=s(NE);fve=n(mBe,"STRONG",{});var R3t=s(fve);RTr=r(R3t,"camembert"),R3t.forEach(t),PTr=r(mBe," \u2014 "),aU=n(mBe,"A",{href:!0});var P3t=s(aU);BTr=r(P3t,"TFCamembertForSequenceClassification"),P3t.forEach(t),ITr=r(mBe," (CamemBERT model)"),mBe.forEach(t),NTr=i(ae),qE=n(ae,"LI",{});var gBe=s(qE);mve=n(gBe,"STRONG",{});var B3t=s(mve);qTr=r(B3t,"convbert"),B3t.forEach(t),jTr=r(gBe," \u2014 "),nU=n(gBe,"A",{href:!0});var I3t=s(nU);DTr=r(I3t,"TFConvBertForSequenceClassification"),I3t.forEach(t),GTr=r(gBe," (ConvBERT model)"),gBe.forEach(t),OTr=i(ae),jE=n(ae,"LI",{});var hBe=s(jE);gve=n(hBe,"STRONG",{});var N3t=s(gve);VTr=r(N3t,"ctrl"),N3t.forEach(t),XTr=r(hBe," \u2014 "),sU=n(hBe,"A",{href:!0});var q3t=s(sU);zTr=r(q3t,"TFCTRLForSequenceClassification"),q3t.forEach(t),WTr=r(hBe," (CTRL model)"),hBe.forEach(t),QTr=i(ae),DE=n(ae,"LI",{});var pBe=s(DE);hve=n(pBe,"STRONG",{});var j3t=s(hve);HTr=r(j3t,"deberta"),j3t.forEach(t),UTr=r(pBe," \u2014 "),lU=n(pBe,"A",{href:!0});var D3t=s(lU);JTr=r(D3t,"TFDebertaForSequenceClassification"),D3t.forEach(t),YTr=r(pBe," (DeBERTa model)"),pBe.forEach(t),KTr=i(ae),GE=n(ae,"LI",{});var _Be=s(GE);pve=n(_Be,"STRONG",{});var G3t=s(pve);ZTr=r(G3t,"deberta-v2"),G3t.forEach(t),eMr=r(_Be," \u2014 "),iU=n(_Be,"A",{href:!0});var O3t=s(iU);oMr=r(O3t,"TFDebertaV2ForSequenceClassification"),O3t.forEach(t),rMr=r(_Be," (DeBERTa-v2 model)"),_Be.forEach(t),tMr=i(ae),OE=n(ae,"LI",{});var uBe=s(OE);_ve=n(uBe,"STRONG",{});var V3t=s(_ve);aMr=r(V3t,"distilbert"),V3t.forEach(t),nMr=r(uBe," \u2014 "),dU=n(uBe,"A",{href:!0});var X3t=s(dU);sMr=r(X3t,"TFDistilBertForSequenceClassification"),X3t.forEach(t),lMr=r(uBe," (DistilBERT model)"),uBe.forEach(t),iMr=i(ae),VE=n(ae,"LI",{});var bBe=s(VE);uve=n(bBe,"STRONG",{});var z3t=s(uve);dMr=r(z3t,"electra"),z3t.forEach(t),cMr=r(bBe," \u2014 "),cU=n(bBe,"A",{href:!0});var W3t=s(cU);fMr=r(W3t,"TFElectraForSequenceClassification"),W3t.forEach(t),mMr=r(bBe," (ELECTRA model)"),bBe.forEach(t),gMr=i(ae),XE=n(ae,"LI",{});var vBe=s(XE);bve=n(vBe,"STRONG",{});var Q3t=s(bve);hMr=r(Q3t,"flaubert"),Q3t.forEach(t),pMr=r(vBe," \u2014 "),fU=n(vBe,"A",{href:!0});var H3t=s(fU);_Mr=r(H3t,"TFFlaubertForSequenceClassification"),H3t.forEach(t),uMr=r(vBe," (FlauBERT model)"),vBe.forEach(t),bMr=i(ae),zE=n(ae,"LI",{});var FBe=s(zE);vve=n(FBe,"STRONG",{});var U3t=s(vve);vMr=r(U3t,"funnel"),U3t.forEach(t),FMr=r(FBe," \u2014 "),mU=n(FBe,"A",{href:!0});var J3t=s(mU);TMr=r(J3t,"TFFunnelForSequenceClassification"),J3t.forEach(t),MMr=r(FBe," (Funnel Transformer model)"),FBe.forEach(t),EMr=i(ae),WE=n(ae,"LI",{});var TBe=s(WE);Fve=n(TBe,"STRONG",{});var Y3t=s(Fve);CMr=r(Y3t,"gpt2"),Y3t.forEach(t),wMr=r(TBe," \u2014 "),gU=n(TBe,"A",{href:!0});var K3t=s(gU);AMr=r(K3t,"TFGPT2ForSequenceClassification"),K3t.forEach(t),yMr=r(TBe," (OpenAI GPT-2 model)"),TBe.forEach(t),LMr=i(ae),QE=n(ae,"LI",{});var MBe=s(QE);Tve=n(MBe,"STRONG",{});var Z3t=s(Tve);xMr=r(Z3t,"gptj"),Z3t.forEach(t),$Mr=r(MBe," \u2014 "),hU=n(MBe,"A",{href:!0});var e0t=s(hU);kMr=r(e0t,"TFGPTJForSequenceClassification"),e0t.forEach(t),SMr=r(MBe," (GPT-J model)"),MBe.forEach(t),RMr=i(ae),HE=n(ae,"LI",{});var EBe=s(HE);Mve=n(EBe,"STRONG",{});var o0t=s(Mve);PMr=r(o0t,"layoutlm"),o0t.forEach(t),BMr=r(EBe," \u2014 "),pU=n(EBe,"A",{href:!0});var r0t=s(pU);IMr=r(r0t,"TFLayoutLMForSequenceClassification"),r0t.forEach(t),NMr=r(EBe," (LayoutLM model)"),EBe.forEach(t),qMr=i(ae),UE=n(ae,"LI",{});var CBe=s(UE);Eve=n(CBe,"STRONG",{});var t0t=s(Eve);jMr=r(t0t,"longformer"),t0t.forEach(t),DMr=r(CBe," \u2014 "),_U=n(CBe,"A",{href:!0});var a0t=s(_U);GMr=r(a0t,"TFLongformerForSequenceClassification"),a0t.forEach(t),OMr=r(CBe," (Longformer model)"),CBe.forEach(t),VMr=i(ae),JE=n(ae,"LI",{});var wBe=s(JE);Cve=n(wBe,"STRONG",{});var n0t=s(Cve);XMr=r(n0t,"mobilebert"),n0t.forEach(t),zMr=r(wBe," \u2014 "),uU=n(wBe,"A",{href:!0});var s0t=s(uU);WMr=r(s0t,"TFMobileBertForSequenceClassification"),s0t.forEach(t),QMr=r(wBe," (MobileBERT model)"),wBe.forEach(t),HMr=i(ae),YE=n(ae,"LI",{});var ABe=s(YE);wve=n(ABe,"STRONG",{});var l0t=s(wve);UMr=r(l0t,"mpnet"),l0t.forEach(t),JMr=r(ABe," \u2014 "),bU=n(ABe,"A",{href:!0});var i0t=s(bU);YMr=r(i0t,"TFMPNetForSequenceClassification"),i0t.forEach(t),KMr=r(ABe," (MPNet model)"),ABe.forEach(t),ZMr=i(ae),KE=n(ae,"LI",{});var yBe=s(KE);Ave=n(yBe,"STRONG",{});var d0t=s(Ave);eEr=r(d0t,"openai-gpt"),d0t.forEach(t),oEr=r(yBe," \u2014 "),vU=n(yBe,"A",{href:!0});var c0t=s(vU);rEr=r(c0t,"TFOpenAIGPTForSequenceClassification"),c0t.forEach(t),tEr=r(yBe," (OpenAI GPT model)"),yBe.forEach(t),aEr=i(ae),ZE=n(ae,"LI",{});var LBe=s(ZE);yve=n(LBe,"STRONG",{});var f0t=s(yve);nEr=r(f0t,"rembert"),f0t.forEach(t),sEr=r(LBe," \u2014 "),FU=n(LBe,"A",{href:!0});var m0t=s(FU);lEr=r(m0t,"TFRemBertForSequenceClassification"),m0t.forEach(t),iEr=r(LBe," (RemBERT model)"),LBe.forEach(t),dEr=i(ae),eC=n(ae,"LI",{});var xBe=s(eC);Lve=n(xBe,"STRONG",{});var g0t=s(Lve);cEr=r(g0t,"roberta"),g0t.forEach(t),fEr=r(xBe," \u2014 "),TU=n(xBe,"A",{href:!0});var h0t=s(TU);mEr=r(h0t,"TFRobertaForSequenceClassification"),h0t.forEach(t),gEr=r(xBe," (RoBERTa model)"),xBe.forEach(t),hEr=i(ae),oC=n(ae,"LI",{});var $Be=s(oC);xve=n($Be,"STRONG",{});var p0t=s(xve);pEr=r(p0t,"roformer"),p0t.forEach(t),_Er=r($Be," \u2014 "),MU=n($Be,"A",{href:!0});var _0t=s(MU);uEr=r(_0t,"TFRoFormerForSequenceClassification"),_0t.forEach(t),bEr=r($Be," (RoFormer model)"),$Be.forEach(t),vEr=i(ae),rC=n(ae,"LI",{});var kBe=s(rC);$ve=n(kBe,"STRONG",{});var u0t=s($ve);FEr=r(u0t,"tapas"),u0t.forEach(t),TEr=r(kBe," \u2014 "),EU=n(kBe,"A",{href:!0});var b0t=s(EU);MEr=r(b0t,"TFTapasForSequenceClassification"),b0t.forEach(t),EEr=r(kBe," (TAPAS model)"),kBe.forEach(t),CEr=i(ae),tC=n(ae,"LI",{});var SBe=s(tC);kve=n(SBe,"STRONG",{});var v0t=s(kve);wEr=r(v0t,"transfo-xl"),v0t.forEach(t),AEr=r(SBe," \u2014 "),CU=n(SBe,"A",{href:!0});var F0t=s(CU);yEr=r(F0t,"TFTransfoXLForSequenceClassification"),F0t.forEach(t),LEr=r(SBe," (Transformer-XL model)"),SBe.forEach(t),xEr=i(ae),aC=n(ae,"LI",{});var RBe=s(aC);Sve=n(RBe,"STRONG",{});var T0t=s(Sve);$Er=r(T0t,"xlm"),T0t.forEach(t),kEr=r(RBe," \u2014 "),wU=n(RBe,"A",{href:!0});var M0t=s(wU);SEr=r(M0t,"TFXLMForSequenceClassification"),M0t.forEach(t),REr=r(RBe," (XLM model)"),RBe.forEach(t),PEr=i(ae),nC=n(ae,"LI",{});var PBe=s(nC);Rve=n(PBe,"STRONG",{});var E0t=s(Rve);BEr=r(E0t,"xlm-roberta"),E0t.forEach(t),IEr=r(PBe," \u2014 "),AU=n(PBe,"A",{href:!0});var C0t=s(AU);NEr=r(C0t,"TFXLMRobertaForSequenceClassification"),C0t.forEach(t),qEr=r(PBe," (XLM-RoBERTa model)"),PBe.forEach(t),jEr=i(ae),sC=n(ae,"LI",{});var BBe=s(sC);Pve=n(BBe,"STRONG",{});var w0t=s(Pve);DEr=r(w0t,"xlnet"),w0t.forEach(t),GEr=r(BBe," \u2014 "),yU=n(BBe,"A",{href:!0});var A0t=s(yU);OEr=r(A0t,"TFXLNetForSequenceClassification"),A0t.forEach(t),VEr=r(BBe," (XLNet model)"),BBe.forEach(t),ae.forEach(t),XEr=i(Ll),T(lC.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),iDe=i(f),cc=n(f,"H2",{class:!0});var hOe=s(cc);iC=n(hOe,"A",{id:!0,class:!0,href:!0});var y0t=s(iC);Bve=n(y0t,"SPAN",{});var L0t=s(Bve);T(e9.$$.fragment,L0t),L0t.forEach(t),y0t.forEach(t),zEr=i(hOe),Ive=n(hOe,"SPAN",{});var x0t=s(Ive);WEr=r(x0t,"TFAutoModelForMultipleChoice"),x0t.forEach(t),hOe.forEach(t),dDe=i(f),ar=n(f,"DIV",{class:!0});var xl=s(ar);T(o9.$$.fragment,xl),QEr=i(xl),fc=n(xl,"P",{});var Wee=s(fc);HEr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LU=n(Wee,"A",{href:!0});var $0t=s(LU);UEr=r($0t,"from_pretrained()"),$0t.forEach(t),JEr=r(Wee," class method or the "),xU=n(Wee,"A",{href:!0});var k0t=s(xU);YEr=r(k0t,"from_config()"),k0t.forEach(t),KEr=r(Wee,` class
method.`),Wee.forEach(t),ZEr=i(xl),r9=n(xl,"P",{});var pOe=s(r9);eCr=r(pOe,"This class cannot be instantiated directly using "),Nve=n(pOe,"CODE",{});var S0t=s(Nve);oCr=r(S0t,"__init__()"),S0t.forEach(t),rCr=r(pOe," (throws an error)."),pOe.forEach(t),tCr=i(xl),Bt=n(xl,"DIV",{class:!0});var JA=s(Bt);T(t9.$$.fragment,JA),aCr=i(JA),qve=n(JA,"P",{});var R0t=s(qve);nCr=r(R0t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),R0t.forEach(t),sCr=i(JA),mc=n(JA,"P",{});var Qee=s(mc);lCr=r(Qee,`Note:
Loading a model from its configuration file does `),jve=n(Qee,"STRONG",{});var P0t=s(jve);iCr=r(P0t,"not"),P0t.forEach(t),dCr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),$U=n(Qee,"A",{href:!0});var B0t=s($U);cCr=r(B0t,"from_pretrained()"),B0t.forEach(t),fCr=r(Qee," to load the model weights."),Qee.forEach(t),mCr=i(JA),T(dC.$$.fragment,JA),JA.forEach(t),gCr=i(xl),Sr=n(xl,"DIV",{class:!0});var $l=s(Sr);T(a9.$$.fragment,$l),hCr=i($l),Dve=n($l,"P",{});var I0t=s(Dve);pCr=r(I0t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),I0t.forEach(t),_Cr=i($l),sn=n($l,"P",{});var YA=s(sn);uCr=r(YA,"The model class to instantiate is selected based on the "),Gve=n(YA,"CODE",{});var N0t=s(Gve);bCr=r(N0t,"model_type"),N0t.forEach(t),vCr=r(YA,` property of the config object (either
passed as an argument or loaded from `),Ove=n(YA,"CODE",{});var q0t=s(Ove);FCr=r(q0t,"pretrained_model_name_or_path"),q0t.forEach(t),TCr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(YA,"CODE",{});var j0t=s(Vve);MCr=r(j0t,"pretrained_model_name_or_path"),j0t.forEach(t),ECr=r(YA,":"),YA.forEach(t),CCr=i($l),pe=n($l,"UL",{});var be=s(pe);cC=n(be,"LI",{});var IBe=s(cC);Xve=n(IBe,"STRONG",{});var D0t=s(Xve);wCr=r(D0t,"albert"),D0t.forEach(t),ACr=r(IBe," \u2014 "),kU=n(IBe,"A",{href:!0});var G0t=s(kU);yCr=r(G0t,"TFAlbertForMultipleChoice"),G0t.forEach(t),LCr=r(IBe," (ALBERT model)"),IBe.forEach(t),xCr=i(be),fC=n(be,"LI",{});var NBe=s(fC);zve=n(NBe,"STRONG",{});var O0t=s(zve);$Cr=r(O0t,"bert"),O0t.forEach(t),kCr=r(NBe," \u2014 "),SU=n(NBe,"A",{href:!0});var V0t=s(SU);SCr=r(V0t,"TFBertForMultipleChoice"),V0t.forEach(t),RCr=r(NBe," (BERT model)"),NBe.forEach(t),PCr=i(be),mC=n(be,"LI",{});var qBe=s(mC);Wve=n(qBe,"STRONG",{});var X0t=s(Wve);BCr=r(X0t,"camembert"),X0t.forEach(t),ICr=r(qBe," \u2014 "),RU=n(qBe,"A",{href:!0});var z0t=s(RU);NCr=r(z0t,"TFCamembertForMultipleChoice"),z0t.forEach(t),qCr=r(qBe," (CamemBERT model)"),qBe.forEach(t),jCr=i(be),gC=n(be,"LI",{});var jBe=s(gC);Qve=n(jBe,"STRONG",{});var W0t=s(Qve);DCr=r(W0t,"convbert"),W0t.forEach(t),GCr=r(jBe," \u2014 "),PU=n(jBe,"A",{href:!0});var Q0t=s(PU);OCr=r(Q0t,"TFConvBertForMultipleChoice"),Q0t.forEach(t),VCr=r(jBe," (ConvBERT model)"),jBe.forEach(t),XCr=i(be),hC=n(be,"LI",{});var DBe=s(hC);Hve=n(DBe,"STRONG",{});var H0t=s(Hve);zCr=r(H0t,"distilbert"),H0t.forEach(t),WCr=r(DBe," \u2014 "),BU=n(DBe,"A",{href:!0});var U0t=s(BU);QCr=r(U0t,"TFDistilBertForMultipleChoice"),U0t.forEach(t),HCr=r(DBe," (DistilBERT model)"),DBe.forEach(t),UCr=i(be),pC=n(be,"LI",{});var GBe=s(pC);Uve=n(GBe,"STRONG",{});var J0t=s(Uve);JCr=r(J0t,"electra"),J0t.forEach(t),YCr=r(GBe," \u2014 "),IU=n(GBe,"A",{href:!0});var Y0t=s(IU);KCr=r(Y0t,"TFElectraForMultipleChoice"),Y0t.forEach(t),ZCr=r(GBe," (ELECTRA model)"),GBe.forEach(t),e5r=i(be),_C=n(be,"LI",{});var OBe=s(_C);Jve=n(OBe,"STRONG",{});var K0t=s(Jve);o5r=r(K0t,"flaubert"),K0t.forEach(t),r5r=r(OBe," \u2014 "),NU=n(OBe,"A",{href:!0});var Z0t=s(NU);t5r=r(Z0t,"TFFlaubertForMultipleChoice"),Z0t.forEach(t),a5r=r(OBe," (FlauBERT model)"),OBe.forEach(t),n5r=i(be),uC=n(be,"LI",{});var VBe=s(uC);Yve=n(VBe,"STRONG",{});var ewt=s(Yve);s5r=r(ewt,"funnel"),ewt.forEach(t),l5r=r(VBe," \u2014 "),qU=n(VBe,"A",{href:!0});var owt=s(qU);i5r=r(owt,"TFFunnelForMultipleChoice"),owt.forEach(t),d5r=r(VBe," (Funnel Transformer model)"),VBe.forEach(t),c5r=i(be),bC=n(be,"LI",{});var XBe=s(bC);Kve=n(XBe,"STRONG",{});var rwt=s(Kve);f5r=r(rwt,"longformer"),rwt.forEach(t),m5r=r(XBe," \u2014 "),jU=n(XBe,"A",{href:!0});var twt=s(jU);g5r=r(twt,"TFLongformerForMultipleChoice"),twt.forEach(t),h5r=r(XBe," (Longformer model)"),XBe.forEach(t),p5r=i(be),vC=n(be,"LI",{});var zBe=s(vC);Zve=n(zBe,"STRONG",{});var awt=s(Zve);_5r=r(awt,"mobilebert"),awt.forEach(t),u5r=r(zBe," \u2014 "),DU=n(zBe,"A",{href:!0});var nwt=s(DU);b5r=r(nwt,"TFMobileBertForMultipleChoice"),nwt.forEach(t),v5r=r(zBe," (MobileBERT model)"),zBe.forEach(t),F5r=i(be),FC=n(be,"LI",{});var WBe=s(FC);eFe=n(WBe,"STRONG",{});var swt=s(eFe);T5r=r(swt,"mpnet"),swt.forEach(t),M5r=r(WBe," \u2014 "),GU=n(WBe,"A",{href:!0});var lwt=s(GU);E5r=r(lwt,"TFMPNetForMultipleChoice"),lwt.forEach(t),C5r=r(WBe," (MPNet model)"),WBe.forEach(t),w5r=i(be),TC=n(be,"LI",{});var QBe=s(TC);oFe=n(QBe,"STRONG",{});var iwt=s(oFe);A5r=r(iwt,"rembert"),iwt.forEach(t),y5r=r(QBe," \u2014 "),OU=n(QBe,"A",{href:!0});var dwt=s(OU);L5r=r(dwt,"TFRemBertForMultipleChoice"),dwt.forEach(t),x5r=r(QBe," (RemBERT model)"),QBe.forEach(t),$5r=i(be),MC=n(be,"LI",{});var HBe=s(MC);rFe=n(HBe,"STRONG",{});var cwt=s(rFe);k5r=r(cwt,"roberta"),cwt.forEach(t),S5r=r(HBe," \u2014 "),VU=n(HBe,"A",{href:!0});var fwt=s(VU);R5r=r(fwt,"TFRobertaForMultipleChoice"),fwt.forEach(t),P5r=r(HBe," (RoBERTa model)"),HBe.forEach(t),B5r=i(be),EC=n(be,"LI",{});var UBe=s(EC);tFe=n(UBe,"STRONG",{});var mwt=s(tFe);I5r=r(mwt,"roformer"),mwt.forEach(t),N5r=r(UBe," \u2014 "),XU=n(UBe,"A",{href:!0});var gwt=s(XU);q5r=r(gwt,"TFRoFormerForMultipleChoice"),gwt.forEach(t),j5r=r(UBe," (RoFormer model)"),UBe.forEach(t),D5r=i(be),CC=n(be,"LI",{});var JBe=s(CC);aFe=n(JBe,"STRONG",{});var hwt=s(aFe);G5r=r(hwt,"xlm"),hwt.forEach(t),O5r=r(JBe," \u2014 "),zU=n(JBe,"A",{href:!0});var pwt=s(zU);V5r=r(pwt,"TFXLMForMultipleChoice"),pwt.forEach(t),X5r=r(JBe," (XLM model)"),JBe.forEach(t),z5r=i(be),wC=n(be,"LI",{});var YBe=s(wC);nFe=n(YBe,"STRONG",{});var _wt=s(nFe);W5r=r(_wt,"xlm-roberta"),_wt.forEach(t),Q5r=r(YBe," \u2014 "),WU=n(YBe,"A",{href:!0});var uwt=s(WU);H5r=r(uwt,"TFXLMRobertaForMultipleChoice"),uwt.forEach(t),U5r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),J5r=i(be),AC=n(be,"LI",{});var KBe=s(AC);sFe=n(KBe,"STRONG",{});var bwt=s(sFe);Y5r=r(bwt,"xlnet"),bwt.forEach(t),K5r=r(KBe," \u2014 "),QU=n(KBe,"A",{href:!0});var vwt=s(QU);Z5r=r(vwt,"TFXLNetForMultipleChoice"),vwt.forEach(t),e3r=r(KBe," (XLNet model)"),KBe.forEach(t),be.forEach(t),o3r=i($l),T(yC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),cDe=i(f),gc=n(f,"H2",{class:!0});var _Oe=s(gc);LC=n(_Oe,"A",{id:!0,class:!0,href:!0});var Fwt=s(LC);lFe=n(Fwt,"SPAN",{});var Twt=s(lFe);T(n9.$$.fragment,Twt),Twt.forEach(t),Fwt.forEach(t),r3r=i(_Oe),iFe=n(_Oe,"SPAN",{});var Mwt=s(iFe);t3r=r(Mwt,"TFAutoModelForNextSentencePrediction"),Mwt.forEach(t),_Oe.forEach(t),fDe=i(f),nr=n(f,"DIV",{class:!0});var kl=s(nr);T(s9.$$.fragment,kl),a3r=i(kl),hc=n(kl,"P",{});var Hee=s(hc);n3r=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),HU=n(Hee,"A",{href:!0});var Ewt=s(HU);s3r=r(Ewt,"from_pretrained()"),Ewt.forEach(t),l3r=r(Hee," class method or the "),UU=n(Hee,"A",{href:!0});var Cwt=s(UU);i3r=r(Cwt,"from_config()"),Cwt.forEach(t),d3r=r(Hee,` class
method.`),Hee.forEach(t),c3r=i(kl),l9=n(kl,"P",{});var uOe=s(l9);f3r=r(uOe,"This class cannot be instantiated directly using "),dFe=n(uOe,"CODE",{});var wwt=s(dFe);m3r=r(wwt,"__init__()"),wwt.forEach(t),g3r=r(uOe," (throws an error)."),uOe.forEach(t),h3r=i(kl),It=n(kl,"DIV",{class:!0});var KA=s(It);T(i9.$$.fragment,KA),p3r=i(KA),cFe=n(KA,"P",{});var Awt=s(cFe);_3r=r(Awt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Awt.forEach(t),u3r=i(KA),pc=n(KA,"P",{});var Uee=s(pc);b3r=r(Uee,`Note:
Loading a model from its configuration file does `),fFe=n(Uee,"STRONG",{});var ywt=s(fFe);v3r=r(ywt,"not"),ywt.forEach(t),F3r=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JU=n(Uee,"A",{href:!0});var Lwt=s(JU);T3r=r(Lwt,"from_pretrained()"),Lwt.forEach(t),M3r=r(Uee," to load the model weights."),Uee.forEach(t),E3r=i(KA),T(xC.$$.fragment,KA),KA.forEach(t),C3r=i(kl),Rr=n(kl,"DIV",{class:!0});var Sl=s(Rr);T(d9.$$.fragment,Sl),w3r=i(Sl),mFe=n(Sl,"P",{});var xwt=s(mFe);A3r=r(xwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xwt.forEach(t),y3r=i(Sl),ln=n(Sl,"P",{});var ZA=s(ln);L3r=r(ZA,"The model class to instantiate is selected based on the "),gFe=n(ZA,"CODE",{});var $wt=s(gFe);x3r=r($wt,"model_type"),$wt.forEach(t),$3r=r(ZA,` property of the config object (either
passed as an argument or loaded from `),hFe=n(ZA,"CODE",{});var kwt=s(hFe);k3r=r(kwt,"pretrained_model_name_or_path"),kwt.forEach(t),S3r=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pFe=n(ZA,"CODE",{});var Swt=s(pFe);R3r=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),P3r=r(ZA,":"),ZA.forEach(t),B3r=i(Sl),c9=n(Sl,"UL",{});var bOe=s(c9);$C=n(bOe,"LI",{});var ZBe=s($C);_Fe=n(ZBe,"STRONG",{});var Rwt=s(_Fe);I3r=r(Rwt,"bert"),Rwt.forEach(t),N3r=r(ZBe," \u2014 "),YU=n(ZBe,"A",{href:!0});var Pwt=s(YU);q3r=r(Pwt,"TFBertForNextSentencePrediction"),Pwt.forEach(t),j3r=r(ZBe," (BERT model)"),ZBe.forEach(t),D3r=i(bOe),kC=n(bOe,"LI",{});var eIe=s(kC);uFe=n(eIe,"STRONG",{});var Bwt=s(uFe);G3r=r(Bwt,"mobilebert"),Bwt.forEach(t),O3r=r(eIe," \u2014 "),KU=n(eIe,"A",{href:!0});var Iwt=s(KU);V3r=r(Iwt,"TFMobileBertForNextSentencePrediction"),Iwt.forEach(t),X3r=r(eIe," (MobileBERT model)"),eIe.forEach(t),bOe.forEach(t),z3r=i(Sl),T(SC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),mDe=i(f),_c=n(f,"H2",{class:!0});var vOe=s(_c);RC=n(vOe,"A",{id:!0,class:!0,href:!0});var Nwt=s(RC);bFe=n(Nwt,"SPAN",{});var qwt=s(bFe);T(f9.$$.fragment,qwt),qwt.forEach(t),Nwt.forEach(t),W3r=i(vOe),vFe=n(vOe,"SPAN",{});var jwt=s(vFe);Q3r=r(jwt,"TFAutoModelForTableQuestionAnswering"),jwt.forEach(t),vOe.forEach(t),gDe=i(f),sr=n(f,"DIV",{class:!0});var Rl=s(sr);T(m9.$$.fragment,Rl),H3r=i(Rl),uc=n(Rl,"P",{});var Jee=s(uc);U3r=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ZU=n(Jee,"A",{href:!0});var Dwt=s(ZU);J3r=r(Dwt,"from_pretrained()"),Dwt.forEach(t),Y3r=r(Jee," class method or the "),eJ=n(Jee,"A",{href:!0});var Gwt=s(eJ);K3r=r(Gwt,"from_config()"),Gwt.forEach(t),Z3r=r(Jee,` class
method.`),Jee.forEach(t),e0r=i(Rl),g9=n(Rl,"P",{});var FOe=s(g9);o0r=r(FOe,"This class cannot be instantiated directly using "),FFe=n(FOe,"CODE",{});var Owt=s(FFe);r0r=r(Owt,"__init__()"),Owt.forEach(t),t0r=r(FOe," (throws an error)."),FOe.forEach(t),a0r=i(Rl),Nt=n(Rl,"DIV",{class:!0});var e6=s(Nt);T(h9.$$.fragment,e6),n0r=i(e6),TFe=n(e6,"P",{});var Vwt=s(TFe);s0r=r(Vwt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Vwt.forEach(t),l0r=i(e6),bc=n(e6,"P",{});var Yee=s(bc);i0r=r(Yee,`Note:
Loading a model from its configuration file does `),MFe=n(Yee,"STRONG",{});var Xwt=s(MFe);d0r=r(Xwt,"not"),Xwt.forEach(t),c0r=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oJ=n(Yee,"A",{href:!0});var zwt=s(oJ);f0r=r(zwt,"from_pretrained()"),zwt.forEach(t),m0r=r(Yee," to load the model weights."),Yee.forEach(t),g0r=i(e6),T(PC.$$.fragment,e6),e6.forEach(t),h0r=i(Rl),Pr=n(Rl,"DIV",{class:!0});var Pl=s(Pr);T(p9.$$.fragment,Pl),p0r=i(Pl),EFe=n(Pl,"P",{});var Wwt=s(EFe);_0r=r(Wwt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Wwt.forEach(t),u0r=i(Pl),dn=n(Pl,"P",{});var o6=s(dn);b0r=r(o6,"The model class to instantiate is selected based on the "),CFe=n(o6,"CODE",{});var Qwt=s(CFe);v0r=r(Qwt,"model_type"),Qwt.forEach(t),F0r=r(o6,` property of the config object (either
passed as an argument or loaded from `),wFe=n(o6,"CODE",{});var Hwt=s(wFe);T0r=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),M0r=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),AFe=n(o6,"CODE",{});var Uwt=s(AFe);E0r=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),C0r=r(o6,":"),o6.forEach(t),w0r=i(Pl),yFe=n(Pl,"UL",{});var Jwt=s(yFe);BC=n(Jwt,"LI",{});var oIe=s(BC);LFe=n(oIe,"STRONG",{});var Ywt=s(LFe);A0r=r(Ywt,"tapas"),Ywt.forEach(t),y0r=r(oIe," \u2014 "),rJ=n(oIe,"A",{href:!0});var Kwt=s(rJ);L0r=r(Kwt,"TFTapasForQuestionAnswering"),Kwt.forEach(t),x0r=r(oIe," (TAPAS model)"),oIe.forEach(t),Jwt.forEach(t),$0r=i(Pl),T(IC.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),hDe=i(f),vc=n(f,"H2",{class:!0});var TOe=s(vc);NC=n(TOe,"A",{id:!0,class:!0,href:!0});var Zwt=s(NC);xFe=n(Zwt,"SPAN",{});var eAt=s(xFe);T(_9.$$.fragment,eAt),eAt.forEach(t),Zwt.forEach(t),k0r=i(TOe),$Fe=n(TOe,"SPAN",{});var oAt=s($Fe);S0r=r(oAt,"TFAutoModelForTokenClassification"),oAt.forEach(t),TOe.forEach(t),pDe=i(f),lr=n(f,"DIV",{class:!0});var Bl=s(lr);T(u9.$$.fragment,Bl),R0r=i(Bl),Fc=n(Bl,"P",{});var Kee=s(Fc);P0r=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tJ=n(Kee,"A",{href:!0});var rAt=s(tJ);B0r=r(rAt,"from_pretrained()"),rAt.forEach(t),I0r=r(Kee," class method or the "),aJ=n(Kee,"A",{href:!0});var tAt=s(aJ);N0r=r(tAt,"from_config()"),tAt.forEach(t),q0r=r(Kee,` class
method.`),Kee.forEach(t),j0r=i(Bl),b9=n(Bl,"P",{});var MOe=s(b9);D0r=r(MOe,"This class cannot be instantiated directly using "),kFe=n(MOe,"CODE",{});var aAt=s(kFe);G0r=r(aAt,"__init__()"),aAt.forEach(t),O0r=r(MOe," (throws an error)."),MOe.forEach(t),V0r=i(Bl),qt=n(Bl,"DIV",{class:!0});var r6=s(qt);T(v9.$$.fragment,r6),X0r=i(r6),SFe=n(r6,"P",{});var nAt=s(SFe);z0r=r(nAt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),nAt.forEach(t),W0r=i(r6),Tc=n(r6,"P",{});var Zee=s(Tc);Q0r=r(Zee,`Note:
Loading a model from its configuration file does `),RFe=n(Zee,"STRONG",{});var sAt=s(RFe);H0r=r(sAt,"not"),sAt.forEach(t),U0r=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(Zee,"A",{href:!0});var lAt=s(nJ);J0r=r(lAt,"from_pretrained()"),lAt.forEach(t),Y0r=r(Zee," to load the model weights."),Zee.forEach(t),K0r=i(r6),T(qC.$$.fragment,r6),r6.forEach(t),Z0r=i(Bl),Br=n(Bl,"DIV",{class:!0});var Il=s(Br);T(F9.$$.fragment,Il),ewr=i(Il),PFe=n(Il,"P",{});var iAt=s(PFe);owr=r(iAt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),iAt.forEach(t),rwr=i(Il),cn=n(Il,"P",{});var t6=s(cn);twr=r(t6,"The model class to instantiate is selected based on the "),BFe=n(t6,"CODE",{});var dAt=s(BFe);awr=r(dAt,"model_type"),dAt.forEach(t),nwr=r(t6,` property of the config object (either
passed as an argument or loaded from `),IFe=n(t6,"CODE",{});var cAt=s(IFe);swr=r(cAt,"pretrained_model_name_or_path"),cAt.forEach(t),lwr=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(t6,"CODE",{});var fAt=s(NFe);iwr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),dwr=r(t6,":"),t6.forEach(t),cwr=i(Il),de=n(Il,"UL",{});var me=s(de);jC=n(me,"LI",{});var rIe=s(jC);qFe=n(rIe,"STRONG",{});var mAt=s(qFe);fwr=r(mAt,"albert"),mAt.forEach(t),mwr=r(rIe," \u2014 "),sJ=n(rIe,"A",{href:!0});var gAt=s(sJ);gwr=r(gAt,"TFAlbertForTokenClassification"),gAt.forEach(t),hwr=r(rIe," (ALBERT model)"),rIe.forEach(t),pwr=i(me),DC=n(me,"LI",{});var tIe=s(DC);jFe=n(tIe,"STRONG",{});var hAt=s(jFe);_wr=r(hAt,"bert"),hAt.forEach(t),uwr=r(tIe," \u2014 "),lJ=n(tIe,"A",{href:!0});var pAt=s(lJ);bwr=r(pAt,"TFBertForTokenClassification"),pAt.forEach(t),vwr=r(tIe," (BERT model)"),tIe.forEach(t),Fwr=i(me),GC=n(me,"LI",{});var aIe=s(GC);DFe=n(aIe,"STRONG",{});var _At=s(DFe);Twr=r(_At,"camembert"),_At.forEach(t),Mwr=r(aIe," \u2014 "),iJ=n(aIe,"A",{href:!0});var uAt=s(iJ);Ewr=r(uAt,"TFCamembertForTokenClassification"),uAt.forEach(t),Cwr=r(aIe," (CamemBERT model)"),aIe.forEach(t),wwr=i(me),OC=n(me,"LI",{});var nIe=s(OC);GFe=n(nIe,"STRONG",{});var bAt=s(GFe);Awr=r(bAt,"convbert"),bAt.forEach(t),ywr=r(nIe," \u2014 "),dJ=n(nIe,"A",{href:!0});var vAt=s(dJ);Lwr=r(vAt,"TFConvBertForTokenClassification"),vAt.forEach(t),xwr=r(nIe," (ConvBERT model)"),nIe.forEach(t),$wr=i(me),VC=n(me,"LI",{});var sIe=s(VC);OFe=n(sIe,"STRONG",{});var FAt=s(OFe);kwr=r(FAt,"deberta"),FAt.forEach(t),Swr=r(sIe," \u2014 "),cJ=n(sIe,"A",{href:!0});var TAt=s(cJ);Rwr=r(TAt,"TFDebertaForTokenClassification"),TAt.forEach(t),Pwr=r(sIe," (DeBERTa model)"),sIe.forEach(t),Bwr=i(me),XC=n(me,"LI",{});var lIe=s(XC);VFe=n(lIe,"STRONG",{});var MAt=s(VFe);Iwr=r(MAt,"deberta-v2"),MAt.forEach(t),Nwr=r(lIe," \u2014 "),fJ=n(lIe,"A",{href:!0});var EAt=s(fJ);qwr=r(EAt,"TFDebertaV2ForTokenClassification"),EAt.forEach(t),jwr=r(lIe," (DeBERTa-v2 model)"),lIe.forEach(t),Dwr=i(me),zC=n(me,"LI",{});var iIe=s(zC);XFe=n(iIe,"STRONG",{});var CAt=s(XFe);Gwr=r(CAt,"distilbert"),CAt.forEach(t),Owr=r(iIe," \u2014 "),mJ=n(iIe,"A",{href:!0});var wAt=s(mJ);Vwr=r(wAt,"TFDistilBertForTokenClassification"),wAt.forEach(t),Xwr=r(iIe," (DistilBERT model)"),iIe.forEach(t),zwr=i(me),WC=n(me,"LI",{});var dIe=s(WC);zFe=n(dIe,"STRONG",{});var AAt=s(zFe);Wwr=r(AAt,"electra"),AAt.forEach(t),Qwr=r(dIe," \u2014 "),gJ=n(dIe,"A",{href:!0});var yAt=s(gJ);Hwr=r(yAt,"TFElectraForTokenClassification"),yAt.forEach(t),Uwr=r(dIe," (ELECTRA model)"),dIe.forEach(t),Jwr=i(me),QC=n(me,"LI",{});var cIe=s(QC);WFe=n(cIe,"STRONG",{});var LAt=s(WFe);Ywr=r(LAt,"flaubert"),LAt.forEach(t),Kwr=r(cIe," \u2014 "),hJ=n(cIe,"A",{href:!0});var xAt=s(hJ);Zwr=r(xAt,"TFFlaubertForTokenClassification"),xAt.forEach(t),eAr=r(cIe," (FlauBERT model)"),cIe.forEach(t),oAr=i(me),HC=n(me,"LI",{});var fIe=s(HC);QFe=n(fIe,"STRONG",{});var $At=s(QFe);rAr=r($At,"funnel"),$At.forEach(t),tAr=r(fIe," \u2014 "),pJ=n(fIe,"A",{href:!0});var kAt=s(pJ);aAr=r(kAt,"TFFunnelForTokenClassification"),kAt.forEach(t),nAr=r(fIe," (Funnel Transformer model)"),fIe.forEach(t),sAr=i(me),UC=n(me,"LI",{});var mIe=s(UC);HFe=n(mIe,"STRONG",{});var SAt=s(HFe);lAr=r(SAt,"layoutlm"),SAt.forEach(t),iAr=r(mIe," \u2014 "),_J=n(mIe,"A",{href:!0});var RAt=s(_J);dAr=r(RAt,"TFLayoutLMForTokenClassification"),RAt.forEach(t),cAr=r(mIe," (LayoutLM model)"),mIe.forEach(t),fAr=i(me),JC=n(me,"LI",{});var gIe=s(JC);UFe=n(gIe,"STRONG",{});var PAt=s(UFe);mAr=r(PAt,"longformer"),PAt.forEach(t),gAr=r(gIe," \u2014 "),uJ=n(gIe,"A",{href:!0});var BAt=s(uJ);hAr=r(BAt,"TFLongformerForTokenClassification"),BAt.forEach(t),pAr=r(gIe," (Longformer model)"),gIe.forEach(t),_Ar=i(me),YC=n(me,"LI",{});var hIe=s(YC);JFe=n(hIe,"STRONG",{});var IAt=s(JFe);uAr=r(IAt,"mobilebert"),IAt.forEach(t),bAr=r(hIe," \u2014 "),bJ=n(hIe,"A",{href:!0});var NAt=s(bJ);vAr=r(NAt,"TFMobileBertForTokenClassification"),NAt.forEach(t),FAr=r(hIe," (MobileBERT model)"),hIe.forEach(t),TAr=i(me),KC=n(me,"LI",{});var pIe=s(KC);YFe=n(pIe,"STRONG",{});var qAt=s(YFe);MAr=r(qAt,"mpnet"),qAt.forEach(t),EAr=r(pIe," \u2014 "),vJ=n(pIe,"A",{href:!0});var jAt=s(vJ);CAr=r(jAt,"TFMPNetForTokenClassification"),jAt.forEach(t),wAr=r(pIe," (MPNet model)"),pIe.forEach(t),AAr=i(me),ZC=n(me,"LI",{});var _Ie=s(ZC);KFe=n(_Ie,"STRONG",{});var DAt=s(KFe);yAr=r(DAt,"rembert"),DAt.forEach(t),LAr=r(_Ie," \u2014 "),FJ=n(_Ie,"A",{href:!0});var GAt=s(FJ);xAr=r(GAt,"TFRemBertForTokenClassification"),GAt.forEach(t),$Ar=r(_Ie," (RemBERT model)"),_Ie.forEach(t),kAr=i(me),e5=n(me,"LI",{});var uIe=s(e5);ZFe=n(uIe,"STRONG",{});var OAt=s(ZFe);SAr=r(OAt,"roberta"),OAt.forEach(t),RAr=r(uIe," \u2014 "),TJ=n(uIe,"A",{href:!0});var VAt=s(TJ);PAr=r(VAt,"TFRobertaForTokenClassification"),VAt.forEach(t),BAr=r(uIe," (RoBERTa model)"),uIe.forEach(t),IAr=i(me),o5=n(me,"LI",{});var bIe=s(o5);eTe=n(bIe,"STRONG",{});var XAt=s(eTe);NAr=r(XAt,"roformer"),XAt.forEach(t),qAr=r(bIe," \u2014 "),MJ=n(bIe,"A",{href:!0});var zAt=s(MJ);jAr=r(zAt,"TFRoFormerForTokenClassification"),zAt.forEach(t),DAr=r(bIe," (RoFormer model)"),bIe.forEach(t),GAr=i(me),r5=n(me,"LI",{});var vIe=s(r5);oTe=n(vIe,"STRONG",{});var WAt=s(oTe);OAr=r(WAt,"xlm"),WAt.forEach(t),VAr=r(vIe," \u2014 "),EJ=n(vIe,"A",{href:!0});var QAt=s(EJ);XAr=r(QAt,"TFXLMForTokenClassification"),QAt.forEach(t),zAr=r(vIe," (XLM model)"),vIe.forEach(t),WAr=i(me),t5=n(me,"LI",{});var FIe=s(t5);rTe=n(FIe,"STRONG",{});var HAt=s(rTe);QAr=r(HAt,"xlm-roberta"),HAt.forEach(t),HAr=r(FIe," \u2014 "),CJ=n(FIe,"A",{href:!0});var UAt=s(CJ);UAr=r(UAt,"TFXLMRobertaForTokenClassification"),UAt.forEach(t),JAr=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),YAr=i(me),a5=n(me,"LI",{});var TIe=s(a5);tTe=n(TIe,"STRONG",{});var JAt=s(tTe);KAr=r(JAt,"xlnet"),JAt.forEach(t),ZAr=r(TIe," \u2014 "),wJ=n(TIe,"A",{href:!0});var YAt=s(wJ);e6r=r(YAt,"TFXLNetForTokenClassification"),YAt.forEach(t),o6r=r(TIe," (XLNet model)"),TIe.forEach(t),me.forEach(t),r6r=i(Il),T(n5.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),_De=i(f),Mc=n(f,"H2",{class:!0});var EOe=s(Mc);s5=n(EOe,"A",{id:!0,class:!0,href:!0});var KAt=s(s5);aTe=n(KAt,"SPAN",{});var ZAt=s(aTe);T(T9.$$.fragment,ZAt),ZAt.forEach(t),KAt.forEach(t),t6r=i(EOe),nTe=n(EOe,"SPAN",{});var e6t=s(nTe);a6r=r(e6t,"TFAutoModelForQuestionAnswering"),e6t.forEach(t),EOe.forEach(t),uDe=i(f),ir=n(f,"DIV",{class:!0});var Nl=s(ir);T(M9.$$.fragment,Nl),n6r=i(Nl),Ec=n(Nl,"P",{});var eoe=s(Ec);s6r=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),AJ=n(eoe,"A",{href:!0});var o6t=s(AJ);l6r=r(o6t,"from_pretrained()"),o6t.forEach(t),i6r=r(eoe," class method or the "),yJ=n(eoe,"A",{href:!0});var r6t=s(yJ);d6r=r(r6t,"from_config()"),r6t.forEach(t),c6r=r(eoe,` class
method.`),eoe.forEach(t),f6r=i(Nl),E9=n(Nl,"P",{});var COe=s(E9);m6r=r(COe,"This class cannot be instantiated directly using "),sTe=n(COe,"CODE",{});var t6t=s(sTe);g6r=r(t6t,"__init__()"),t6t.forEach(t),h6r=r(COe," (throws an error)."),COe.forEach(t),p6r=i(Nl),jt=n(Nl,"DIV",{class:!0});var a6=s(jt);T(C9.$$.fragment,a6),_6r=i(a6),lTe=n(a6,"P",{});var a6t=s(lTe);u6r=r(a6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),a6t.forEach(t),b6r=i(a6),Cc=n(a6,"P",{});var ooe=s(Cc);v6r=r(ooe,`Note:
Loading a model from its configuration file does `),iTe=n(ooe,"STRONG",{});var n6t=s(iTe);F6r=r(n6t,"not"),n6t.forEach(t),T6r=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LJ=n(ooe,"A",{href:!0});var s6t=s(LJ);M6r=r(s6t,"from_pretrained()"),s6t.forEach(t),E6r=r(ooe," to load the model weights."),ooe.forEach(t),C6r=i(a6),T(l5.$$.fragment,a6),a6.forEach(t),w6r=i(Nl),Ir=n(Nl,"DIV",{class:!0});var ql=s(Ir);T(w9.$$.fragment,ql),A6r=i(ql),dTe=n(ql,"P",{});var l6t=s(dTe);y6r=r(l6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),l6t.forEach(t),L6r=i(ql),fn=n(ql,"P",{});var n6=s(fn);x6r=r(n6,"The model class to instantiate is selected based on the "),cTe=n(n6,"CODE",{});var i6t=s(cTe);$6r=r(i6t,"model_type"),i6t.forEach(t),k6r=r(n6,` property of the config object (either
passed as an argument or loaded from `),fTe=n(n6,"CODE",{});var d6t=s(fTe);S6r=r(d6t,"pretrained_model_name_or_path"),d6t.forEach(t),R6r=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mTe=n(n6,"CODE",{});var c6t=s(mTe);P6r=r(c6t,"pretrained_model_name_or_path"),c6t.forEach(t),B6r=r(n6,":"),n6.forEach(t),I6r=i(ql),ce=n(ql,"UL",{});var ge=s(ce);i5=n(ge,"LI",{});var MIe=s(i5);gTe=n(MIe,"STRONG",{});var f6t=s(gTe);N6r=r(f6t,"albert"),f6t.forEach(t),q6r=r(MIe," \u2014 "),xJ=n(MIe,"A",{href:!0});var m6t=s(xJ);j6r=r(m6t,"TFAlbertForQuestionAnswering"),m6t.forEach(t),D6r=r(MIe," (ALBERT model)"),MIe.forEach(t),G6r=i(ge),d5=n(ge,"LI",{});var EIe=s(d5);hTe=n(EIe,"STRONG",{});var g6t=s(hTe);O6r=r(g6t,"bert"),g6t.forEach(t),V6r=r(EIe," \u2014 "),$J=n(EIe,"A",{href:!0});var h6t=s($J);X6r=r(h6t,"TFBertForQuestionAnswering"),h6t.forEach(t),z6r=r(EIe," (BERT model)"),EIe.forEach(t),W6r=i(ge),c5=n(ge,"LI",{});var CIe=s(c5);pTe=n(CIe,"STRONG",{});var p6t=s(pTe);Q6r=r(p6t,"camembert"),p6t.forEach(t),H6r=r(CIe," \u2014 "),kJ=n(CIe,"A",{href:!0});var _6t=s(kJ);U6r=r(_6t,"TFCamembertForQuestionAnswering"),_6t.forEach(t),J6r=r(CIe," (CamemBERT model)"),CIe.forEach(t),Y6r=i(ge),f5=n(ge,"LI",{});var wIe=s(f5);_Te=n(wIe,"STRONG",{});var u6t=s(_Te);K6r=r(u6t,"convbert"),u6t.forEach(t),Z6r=r(wIe," \u2014 "),SJ=n(wIe,"A",{href:!0});var b6t=s(SJ);eyr=r(b6t,"TFConvBertForQuestionAnswering"),b6t.forEach(t),oyr=r(wIe," (ConvBERT model)"),wIe.forEach(t),ryr=i(ge),m5=n(ge,"LI",{});var AIe=s(m5);uTe=n(AIe,"STRONG",{});var v6t=s(uTe);tyr=r(v6t,"deberta"),v6t.forEach(t),ayr=r(AIe," \u2014 "),RJ=n(AIe,"A",{href:!0});var F6t=s(RJ);nyr=r(F6t,"TFDebertaForQuestionAnswering"),F6t.forEach(t),syr=r(AIe," (DeBERTa model)"),AIe.forEach(t),lyr=i(ge),g5=n(ge,"LI",{});var yIe=s(g5);bTe=n(yIe,"STRONG",{});var T6t=s(bTe);iyr=r(T6t,"deberta-v2"),T6t.forEach(t),dyr=r(yIe," \u2014 "),PJ=n(yIe,"A",{href:!0});var M6t=s(PJ);cyr=r(M6t,"TFDebertaV2ForQuestionAnswering"),M6t.forEach(t),fyr=r(yIe," (DeBERTa-v2 model)"),yIe.forEach(t),myr=i(ge),h5=n(ge,"LI",{});var LIe=s(h5);vTe=n(LIe,"STRONG",{});var E6t=s(vTe);gyr=r(E6t,"distilbert"),E6t.forEach(t),hyr=r(LIe," \u2014 "),BJ=n(LIe,"A",{href:!0});var C6t=s(BJ);pyr=r(C6t,"TFDistilBertForQuestionAnswering"),C6t.forEach(t),_yr=r(LIe," (DistilBERT model)"),LIe.forEach(t),uyr=i(ge),p5=n(ge,"LI",{});var xIe=s(p5);FTe=n(xIe,"STRONG",{});var w6t=s(FTe);byr=r(w6t,"electra"),w6t.forEach(t),vyr=r(xIe," \u2014 "),IJ=n(xIe,"A",{href:!0});var A6t=s(IJ);Fyr=r(A6t,"TFElectraForQuestionAnswering"),A6t.forEach(t),Tyr=r(xIe," (ELECTRA model)"),xIe.forEach(t),Myr=i(ge),_5=n(ge,"LI",{});var $Ie=s(_5);TTe=n($Ie,"STRONG",{});var y6t=s(TTe);Eyr=r(y6t,"flaubert"),y6t.forEach(t),Cyr=r($Ie," \u2014 "),NJ=n($Ie,"A",{href:!0});var L6t=s(NJ);wyr=r(L6t,"TFFlaubertForQuestionAnsweringSimple"),L6t.forEach(t),Ayr=r($Ie," (FlauBERT model)"),$Ie.forEach(t),yyr=i(ge),u5=n(ge,"LI",{});var kIe=s(u5);MTe=n(kIe,"STRONG",{});var x6t=s(MTe);Lyr=r(x6t,"funnel"),x6t.forEach(t),xyr=r(kIe," \u2014 "),qJ=n(kIe,"A",{href:!0});var $6t=s(qJ);$yr=r($6t,"TFFunnelForQuestionAnswering"),$6t.forEach(t),kyr=r(kIe," (Funnel Transformer model)"),kIe.forEach(t),Syr=i(ge),b5=n(ge,"LI",{});var SIe=s(b5);ETe=n(SIe,"STRONG",{});var k6t=s(ETe);Ryr=r(k6t,"gptj"),k6t.forEach(t),Pyr=r(SIe," \u2014 "),jJ=n(SIe,"A",{href:!0});var S6t=s(jJ);Byr=r(S6t,"TFGPTJForQuestionAnswering"),S6t.forEach(t),Iyr=r(SIe," (GPT-J model)"),SIe.forEach(t),Nyr=i(ge),v5=n(ge,"LI",{});var RIe=s(v5);CTe=n(RIe,"STRONG",{});var R6t=s(CTe);qyr=r(R6t,"longformer"),R6t.forEach(t),jyr=r(RIe," \u2014 "),DJ=n(RIe,"A",{href:!0});var P6t=s(DJ);Dyr=r(P6t,"TFLongformerForQuestionAnswering"),P6t.forEach(t),Gyr=r(RIe," (Longformer model)"),RIe.forEach(t),Oyr=i(ge),F5=n(ge,"LI",{});var PIe=s(F5);wTe=n(PIe,"STRONG",{});var B6t=s(wTe);Vyr=r(B6t,"mobilebert"),B6t.forEach(t),Xyr=r(PIe," \u2014 "),GJ=n(PIe,"A",{href:!0});var I6t=s(GJ);zyr=r(I6t,"TFMobileBertForQuestionAnswering"),I6t.forEach(t),Wyr=r(PIe," (MobileBERT model)"),PIe.forEach(t),Qyr=i(ge),T5=n(ge,"LI",{});var BIe=s(T5);ATe=n(BIe,"STRONG",{});var N6t=s(ATe);Hyr=r(N6t,"mpnet"),N6t.forEach(t),Uyr=r(BIe," \u2014 "),OJ=n(BIe,"A",{href:!0});var q6t=s(OJ);Jyr=r(q6t,"TFMPNetForQuestionAnswering"),q6t.forEach(t),Yyr=r(BIe," (MPNet model)"),BIe.forEach(t),Kyr=i(ge),M5=n(ge,"LI",{});var IIe=s(M5);yTe=n(IIe,"STRONG",{});var j6t=s(yTe);Zyr=r(j6t,"rembert"),j6t.forEach(t),eLr=r(IIe," \u2014 "),VJ=n(IIe,"A",{href:!0});var D6t=s(VJ);oLr=r(D6t,"TFRemBertForQuestionAnswering"),D6t.forEach(t),rLr=r(IIe," (RemBERT model)"),IIe.forEach(t),tLr=i(ge),E5=n(ge,"LI",{});var NIe=s(E5);LTe=n(NIe,"STRONG",{});var G6t=s(LTe);aLr=r(G6t,"roberta"),G6t.forEach(t),nLr=r(NIe," \u2014 "),XJ=n(NIe,"A",{href:!0});var O6t=s(XJ);sLr=r(O6t,"TFRobertaForQuestionAnswering"),O6t.forEach(t),lLr=r(NIe," (RoBERTa model)"),NIe.forEach(t),iLr=i(ge),C5=n(ge,"LI",{});var qIe=s(C5);xTe=n(qIe,"STRONG",{});var V6t=s(xTe);dLr=r(V6t,"roformer"),V6t.forEach(t),cLr=r(qIe," \u2014 "),zJ=n(qIe,"A",{href:!0});var X6t=s(zJ);fLr=r(X6t,"TFRoFormerForQuestionAnswering"),X6t.forEach(t),mLr=r(qIe," (RoFormer model)"),qIe.forEach(t),gLr=i(ge),w5=n(ge,"LI",{});var jIe=s(w5);$Te=n(jIe,"STRONG",{});var z6t=s($Te);hLr=r(z6t,"xlm"),z6t.forEach(t),pLr=r(jIe," \u2014 "),WJ=n(jIe,"A",{href:!0});var W6t=s(WJ);_Lr=r(W6t,"TFXLMForQuestionAnsweringSimple"),W6t.forEach(t),uLr=r(jIe," (XLM model)"),jIe.forEach(t),bLr=i(ge),A5=n(ge,"LI",{});var DIe=s(A5);kTe=n(DIe,"STRONG",{});var Q6t=s(kTe);vLr=r(Q6t,"xlm-roberta"),Q6t.forEach(t),FLr=r(DIe," \u2014 "),QJ=n(DIe,"A",{href:!0});var H6t=s(QJ);TLr=r(H6t,"TFXLMRobertaForQuestionAnswering"),H6t.forEach(t),MLr=r(DIe," (XLM-RoBERTa model)"),DIe.forEach(t),ELr=i(ge),y5=n(ge,"LI",{});var GIe=s(y5);STe=n(GIe,"STRONG",{});var U6t=s(STe);CLr=r(U6t,"xlnet"),U6t.forEach(t),wLr=r(GIe," \u2014 "),HJ=n(GIe,"A",{href:!0});var J6t=s(HJ);ALr=r(J6t,"TFXLNetForQuestionAnsweringSimple"),J6t.forEach(t),yLr=r(GIe," (XLNet model)"),GIe.forEach(t),ge.forEach(t),LLr=i(ql),T(L5.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),bDe=i(f),wc=n(f,"H2",{class:!0});var wOe=s(wc);x5=n(wOe,"A",{id:!0,class:!0,href:!0});var Y6t=s(x5);RTe=n(Y6t,"SPAN",{});var K6t=s(RTe);T(A9.$$.fragment,K6t),K6t.forEach(t),Y6t.forEach(t),xLr=i(wOe),PTe=n(wOe,"SPAN",{});var Z6t=s(PTe);$Lr=r(Z6t,"TFAutoModelForVision2Seq"),Z6t.forEach(t),wOe.forEach(t),vDe=i(f),dr=n(f,"DIV",{class:!0});var jl=s(dr);T(y9.$$.fragment,jl),kLr=i(jl),Ac=n(jl,"P",{});var roe=s(Ac);SLr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),UJ=n(roe,"A",{href:!0});var eyt=s(UJ);RLr=r(eyt,"from_pretrained()"),eyt.forEach(t),PLr=r(roe," class method or the "),JJ=n(roe,"A",{href:!0});var oyt=s(JJ);BLr=r(oyt,"from_config()"),oyt.forEach(t),ILr=r(roe,` class
method.`),roe.forEach(t),NLr=i(jl),L9=n(jl,"P",{});var AOe=s(L9);qLr=r(AOe,"This class cannot be instantiated directly using "),BTe=n(AOe,"CODE",{});var ryt=s(BTe);jLr=r(ryt,"__init__()"),ryt.forEach(t),DLr=r(AOe," (throws an error)."),AOe.forEach(t),GLr=i(jl),Dt=n(jl,"DIV",{class:!0});var s6=s(Dt);T(x9.$$.fragment,s6),OLr=i(s6),ITe=n(s6,"P",{});var tyt=s(ITe);VLr=r(tyt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tyt.forEach(t),XLr=i(s6),yc=n(s6,"P",{});var toe=s(yc);zLr=r(toe,`Note:
Loading a model from its configuration file does `),NTe=n(toe,"STRONG",{});var ayt=s(NTe);WLr=r(ayt,"not"),ayt.forEach(t),QLr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(toe,"A",{href:!0});var nyt=s(YJ);HLr=r(nyt,"from_pretrained()"),nyt.forEach(t),ULr=r(toe," to load the model weights."),toe.forEach(t),JLr=i(s6),T($5.$$.fragment,s6),s6.forEach(t),YLr=i(jl),Nr=n(jl,"DIV",{class:!0});var Dl=s(Nr);T($9.$$.fragment,Dl),KLr=i(Dl),qTe=n(Dl,"P",{});var syt=s(qTe);ZLr=r(syt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),syt.forEach(t),e8r=i(Dl),mn=n(Dl,"P",{});var l6=s(mn);o8r=r(l6,"The model class to instantiate is selected based on the "),jTe=n(l6,"CODE",{});var lyt=s(jTe);r8r=r(lyt,"model_type"),lyt.forEach(t),t8r=r(l6,` property of the config object (either
passed as an argument or loaded from `),DTe=n(l6,"CODE",{});var iyt=s(DTe);a8r=r(iyt,"pretrained_model_name_or_path"),iyt.forEach(t),n8r=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GTe=n(l6,"CODE",{});var dyt=s(GTe);s8r=r(dyt,"pretrained_model_name_or_path"),dyt.forEach(t),l8r=r(l6,":"),l6.forEach(t),i8r=i(Dl),OTe=n(Dl,"UL",{});var cyt=s(OTe);k5=n(cyt,"LI",{});var OIe=s(k5);VTe=n(OIe,"STRONG",{});var fyt=s(VTe);d8r=r(fyt,"vision-encoder-decoder"),fyt.forEach(t),c8r=r(OIe," \u2014 "),KJ=n(OIe,"A",{href:!0});var myt=s(KJ);f8r=r(myt,"TFVisionEncoderDecoderModel"),myt.forEach(t),m8r=r(OIe," (Vision Encoder decoder model)"),OIe.forEach(t),cyt.forEach(t),g8r=i(Dl),T(S5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),FDe=i(f),Lc=n(f,"H2",{class:!0});var yOe=s(Lc);R5=n(yOe,"A",{id:!0,class:!0,href:!0});var gyt=s(R5);XTe=n(gyt,"SPAN",{});var hyt=s(XTe);T(k9.$$.fragment,hyt),hyt.forEach(t),gyt.forEach(t),h8r=i(yOe),zTe=n(yOe,"SPAN",{});var pyt=s(zTe);p8r=r(pyt,"TFAutoModelForSpeechSeq2Seq"),pyt.forEach(t),yOe.forEach(t),TDe=i(f),cr=n(f,"DIV",{class:!0});var Gl=s(cr);T(S9.$$.fragment,Gl),_8r=i(Gl),xc=n(Gl,"P",{});var aoe=s(xc);u8r=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZJ=n(aoe,"A",{href:!0});var _yt=s(ZJ);b8r=r(_yt,"from_pretrained()"),_yt.forEach(t),v8r=r(aoe," class method or the "),eY=n(aoe,"A",{href:!0});var uyt=s(eY);F8r=r(uyt,"from_config()"),uyt.forEach(t),T8r=r(aoe,` class
method.`),aoe.forEach(t),M8r=i(Gl),R9=n(Gl,"P",{});var LOe=s(R9);E8r=r(LOe,"This class cannot be instantiated directly using "),WTe=n(LOe,"CODE",{});var byt=s(WTe);C8r=r(byt,"__init__()"),byt.forEach(t),w8r=r(LOe," (throws an error)."),LOe.forEach(t),A8r=i(Gl),Gt=n(Gl,"DIV",{class:!0});var i6=s(Gt);T(P9.$$.fragment,i6),y8r=i(i6),QTe=n(i6,"P",{});var vyt=s(QTe);L8r=r(vyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),vyt.forEach(t),x8r=i(i6),$c=n(i6,"P",{});var noe=s($c);$8r=r(noe,`Note:
Loading a model from its configuration file does `),HTe=n(noe,"STRONG",{});var Fyt=s(HTe);k8r=r(Fyt,"not"),Fyt.forEach(t),S8r=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(noe,"A",{href:!0});var Tyt=s(oY);R8r=r(Tyt,"from_pretrained()"),Tyt.forEach(t),P8r=r(noe," to load the model weights."),noe.forEach(t),B8r=i(i6),T(P5.$$.fragment,i6),i6.forEach(t),I8r=i(Gl),qr=n(Gl,"DIV",{class:!0});var Ol=s(qr);T(B9.$$.fragment,Ol),N8r=i(Ol),UTe=n(Ol,"P",{});var Myt=s(UTe);q8r=r(Myt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Myt.forEach(t),j8r=i(Ol),gn=n(Ol,"P",{});var d6=s(gn);D8r=r(d6,"The model class to instantiate is selected based on the "),JTe=n(d6,"CODE",{});var Eyt=s(JTe);G8r=r(Eyt,"model_type"),Eyt.forEach(t),O8r=r(d6,` property of the config object (either
passed as an argument or loaded from `),YTe=n(d6,"CODE",{});var Cyt=s(YTe);V8r=r(Cyt,"pretrained_model_name_or_path"),Cyt.forEach(t),X8r=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(d6,"CODE",{});var wyt=s(KTe);z8r=r(wyt,"pretrained_model_name_or_path"),wyt.forEach(t),W8r=r(d6,":"),d6.forEach(t),Q8r=i(Ol),ZTe=n(Ol,"UL",{});var Ayt=s(ZTe);B5=n(Ayt,"LI",{});var VIe=s(B5);eMe=n(VIe,"STRONG",{});var yyt=s(eMe);H8r=r(yyt,"speech_to_text"),yyt.forEach(t),U8r=r(VIe," \u2014 "),rY=n(VIe,"A",{href:!0});var Lyt=s(rY);J8r=r(Lyt,"TFSpeech2TextForConditionalGeneration"),Lyt.forEach(t),Y8r=r(VIe," (Speech2Text model)"),VIe.forEach(t),Ayt.forEach(t),K8r=i(Ol),T(I5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),MDe=i(f),kc=n(f,"H2",{class:!0});var xOe=s(kc);N5=n(xOe,"A",{id:!0,class:!0,href:!0});var xyt=s(N5);oMe=n(xyt,"SPAN",{});var $yt=s(oMe);T(I9.$$.fragment,$yt),$yt.forEach(t),xyt.forEach(t),Z8r=i(xOe),rMe=n(xOe,"SPAN",{});var kyt=s(rMe);e9r=r(kyt,"FlaxAutoModel"),kyt.forEach(t),xOe.forEach(t),EDe=i(f),fr=n(f,"DIV",{class:!0});var Vl=s(fr);T(N9.$$.fragment,Vl),o9r=i(Vl),Sc=n(Vl,"P",{});var soe=s(Sc);r9r=r(soe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),tY=n(soe,"A",{href:!0});var Syt=s(tY);t9r=r(Syt,"from_pretrained()"),Syt.forEach(t),a9r=r(soe," class method or the "),aY=n(soe,"A",{href:!0});var Ryt=s(aY);n9r=r(Ryt,"from_config()"),Ryt.forEach(t),s9r=r(soe,` class
method.`),soe.forEach(t),l9r=i(Vl),q9=n(Vl,"P",{});var $Oe=s(q9);i9r=r($Oe,"This class cannot be instantiated directly using "),tMe=n($Oe,"CODE",{});var Pyt=s(tMe);d9r=r(Pyt,"__init__()"),Pyt.forEach(t),c9r=r($Oe," (throws an error)."),$Oe.forEach(t),f9r=i(Vl),Ot=n(Vl,"DIV",{class:!0});var c6=s(Ot);T(j9.$$.fragment,c6),m9r=i(c6),aMe=n(c6,"P",{});var Byt=s(aMe);g9r=r(Byt,"Instantiates one of the base model classes of the library from a configuration."),Byt.forEach(t),h9r=i(c6),Rc=n(c6,"P",{});var loe=s(Rc);p9r=r(loe,`Note:
Loading a model from its configuration file does `),nMe=n(loe,"STRONG",{});var Iyt=s(nMe);_9r=r(Iyt,"not"),Iyt.forEach(t),u9r=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(loe,"A",{href:!0});var Nyt=s(nY);b9r=r(Nyt,"from_pretrained()"),Nyt.forEach(t),v9r=r(loe," to load the model weights."),loe.forEach(t),F9r=i(c6),T(q5.$$.fragment,c6),c6.forEach(t),T9r=i(Vl),jr=n(Vl,"DIV",{class:!0});var Xl=s(jr);T(D9.$$.fragment,Xl),M9r=i(Xl),sMe=n(Xl,"P",{});var qyt=s(sMe);E9r=r(qyt,"Instantiate one of the base model classes of the library from a pretrained model."),qyt.forEach(t),C9r=i(Xl),hn=n(Xl,"P",{});var f6=s(hn);w9r=r(f6,"The model class to instantiate is selected based on the "),lMe=n(f6,"CODE",{});var jyt=s(lMe);A9r=r(jyt,"model_type"),jyt.forEach(t),y9r=r(f6,` property of the config object (either
passed as an argument or loaded from `),iMe=n(f6,"CODE",{});var Dyt=s(iMe);L9r=r(Dyt,"pretrained_model_name_or_path"),Dyt.forEach(t),x9r=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dMe=n(f6,"CODE",{});var Gyt=s(dMe);$9r=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),k9r=r(f6,":"),f6.forEach(t),S9r=i(Xl),re=n(Xl,"UL",{});var ne=s(re);j5=n(ne,"LI",{});var XIe=s(j5);cMe=n(XIe,"STRONG",{});var Oyt=s(cMe);R9r=r(Oyt,"albert"),Oyt.forEach(t),P9r=r(XIe," \u2014 "),sY=n(XIe,"A",{href:!0});var Vyt=s(sY);B9r=r(Vyt,"FlaxAlbertModel"),Vyt.forEach(t),I9r=r(XIe," (ALBERT model)"),XIe.forEach(t),N9r=i(ne),D5=n(ne,"LI",{});var zIe=s(D5);fMe=n(zIe,"STRONG",{});var Xyt=s(fMe);q9r=r(Xyt,"bart"),Xyt.forEach(t),j9r=r(zIe," \u2014 "),lY=n(zIe,"A",{href:!0});var zyt=s(lY);D9r=r(zyt,"FlaxBartModel"),zyt.forEach(t),G9r=r(zIe," (BART model)"),zIe.forEach(t),O9r=i(ne),G5=n(ne,"LI",{});var WIe=s(G5);mMe=n(WIe,"STRONG",{});var Wyt=s(mMe);V9r=r(Wyt,"beit"),Wyt.forEach(t),X9r=r(WIe," \u2014 "),iY=n(WIe,"A",{href:!0});var Qyt=s(iY);z9r=r(Qyt,"FlaxBeitModel"),Qyt.forEach(t),W9r=r(WIe," (BEiT model)"),WIe.forEach(t),Q9r=i(ne),O5=n(ne,"LI",{});var QIe=s(O5);gMe=n(QIe,"STRONG",{});var Hyt=s(gMe);H9r=r(Hyt,"bert"),Hyt.forEach(t),U9r=r(QIe," \u2014 "),dY=n(QIe,"A",{href:!0});var Uyt=s(dY);J9r=r(Uyt,"FlaxBertModel"),Uyt.forEach(t),Y9r=r(QIe," (BERT model)"),QIe.forEach(t),K9r=i(ne),V5=n(ne,"LI",{});var HIe=s(V5);hMe=n(HIe,"STRONG",{});var Jyt=s(hMe);Z9r=r(Jyt,"big_bird"),Jyt.forEach(t),exr=r(HIe," \u2014 "),cY=n(HIe,"A",{href:!0});var Yyt=s(cY);oxr=r(Yyt,"FlaxBigBirdModel"),Yyt.forEach(t),rxr=r(HIe," (BigBird model)"),HIe.forEach(t),txr=i(ne),X5=n(ne,"LI",{});var UIe=s(X5);pMe=n(UIe,"STRONG",{});var Kyt=s(pMe);axr=r(Kyt,"blenderbot"),Kyt.forEach(t),nxr=r(UIe," \u2014 "),fY=n(UIe,"A",{href:!0});var Zyt=s(fY);sxr=r(Zyt,"FlaxBlenderbotModel"),Zyt.forEach(t),lxr=r(UIe," (Blenderbot model)"),UIe.forEach(t),ixr=i(ne),z5=n(ne,"LI",{});var JIe=s(z5);_Me=n(JIe,"STRONG",{});var eLt=s(_Me);dxr=r(eLt,"blenderbot-small"),eLt.forEach(t),cxr=r(JIe," \u2014 "),mY=n(JIe,"A",{href:!0});var oLt=s(mY);fxr=r(oLt,"FlaxBlenderbotSmallModel"),oLt.forEach(t),mxr=r(JIe," (BlenderbotSmall model)"),JIe.forEach(t),gxr=i(ne),W5=n(ne,"LI",{});var YIe=s(W5);uMe=n(YIe,"STRONG",{});var rLt=s(uMe);hxr=r(rLt,"clip"),rLt.forEach(t),pxr=r(YIe," \u2014 "),gY=n(YIe,"A",{href:!0});var tLt=s(gY);_xr=r(tLt,"FlaxCLIPModel"),tLt.forEach(t),uxr=r(YIe," (CLIP model)"),YIe.forEach(t),bxr=i(ne),Q5=n(ne,"LI",{});var KIe=s(Q5);bMe=n(KIe,"STRONG",{});var aLt=s(bMe);vxr=r(aLt,"distilbert"),aLt.forEach(t),Fxr=r(KIe," \u2014 "),hY=n(KIe,"A",{href:!0});var nLt=s(hY);Txr=r(nLt,"FlaxDistilBertModel"),nLt.forEach(t),Mxr=r(KIe," (DistilBERT model)"),KIe.forEach(t),Exr=i(ne),H5=n(ne,"LI",{});var ZIe=s(H5);vMe=n(ZIe,"STRONG",{});var sLt=s(vMe);Cxr=r(sLt,"electra"),sLt.forEach(t),wxr=r(ZIe," \u2014 "),pY=n(ZIe,"A",{href:!0});var lLt=s(pY);Axr=r(lLt,"FlaxElectraModel"),lLt.forEach(t),yxr=r(ZIe," (ELECTRA model)"),ZIe.forEach(t),Lxr=i(ne),U5=n(ne,"LI",{});var eNe=s(U5);FMe=n(eNe,"STRONG",{});var iLt=s(FMe);xxr=r(iLt,"gpt2"),iLt.forEach(t),$xr=r(eNe," \u2014 "),_Y=n(eNe,"A",{href:!0});var dLt=s(_Y);kxr=r(dLt,"FlaxGPT2Model"),dLt.forEach(t),Sxr=r(eNe," (OpenAI GPT-2 model)"),eNe.forEach(t),Rxr=i(ne),J5=n(ne,"LI",{});var oNe=s(J5);TMe=n(oNe,"STRONG",{});var cLt=s(TMe);Pxr=r(cLt,"gpt_neo"),cLt.forEach(t),Bxr=r(oNe," \u2014 "),uY=n(oNe,"A",{href:!0});var fLt=s(uY);Ixr=r(fLt,"FlaxGPTNeoModel"),fLt.forEach(t),Nxr=r(oNe," (GPT Neo model)"),oNe.forEach(t),qxr=i(ne),Y5=n(ne,"LI",{});var rNe=s(Y5);MMe=n(rNe,"STRONG",{});var mLt=s(MMe);jxr=r(mLt,"gptj"),mLt.forEach(t),Dxr=r(rNe," \u2014 "),bY=n(rNe,"A",{href:!0});var gLt=s(bY);Gxr=r(gLt,"FlaxGPTJModel"),gLt.forEach(t),Oxr=r(rNe," (GPT-J model)"),rNe.forEach(t),Vxr=i(ne),K5=n(ne,"LI",{});var tNe=s(K5);EMe=n(tNe,"STRONG",{});var hLt=s(EMe);Xxr=r(hLt,"marian"),hLt.forEach(t),zxr=r(tNe," \u2014 "),vY=n(tNe,"A",{href:!0});var pLt=s(vY);Wxr=r(pLt,"FlaxMarianModel"),pLt.forEach(t),Qxr=r(tNe," (Marian model)"),tNe.forEach(t),Hxr=i(ne),Z5=n(ne,"LI",{});var aNe=s(Z5);CMe=n(aNe,"STRONG",{});var _Lt=s(CMe);Uxr=r(_Lt,"mbart"),_Lt.forEach(t),Jxr=r(aNe," \u2014 "),FY=n(aNe,"A",{href:!0});var uLt=s(FY);Yxr=r(uLt,"FlaxMBartModel"),uLt.forEach(t),Kxr=r(aNe," (mBART model)"),aNe.forEach(t),Zxr=i(ne),e3=n(ne,"LI",{});var nNe=s(e3);wMe=n(nNe,"STRONG",{});var bLt=s(wMe);e$r=r(bLt,"mt5"),bLt.forEach(t),o$r=r(nNe," \u2014 "),TY=n(nNe,"A",{href:!0});var vLt=s(TY);r$r=r(vLt,"FlaxMT5Model"),vLt.forEach(t),t$r=r(nNe," (MT5 model)"),nNe.forEach(t),a$r=i(ne),o3=n(ne,"LI",{});var sNe=s(o3);AMe=n(sNe,"STRONG",{});var FLt=s(AMe);n$r=r(FLt,"opt"),FLt.forEach(t),s$r=r(sNe," \u2014 "),MY=n(sNe,"A",{href:!0});var TLt=s(MY);l$r=r(TLt,"FlaxOPTModel"),TLt.forEach(t),i$r=r(sNe," (OPT model)"),sNe.forEach(t),d$r=i(ne),r3=n(ne,"LI",{});var lNe=s(r3);yMe=n(lNe,"STRONG",{});var MLt=s(yMe);c$r=r(MLt,"pegasus"),MLt.forEach(t),f$r=r(lNe," \u2014 "),EY=n(lNe,"A",{href:!0});var ELt=s(EY);m$r=r(ELt,"FlaxPegasusModel"),ELt.forEach(t),g$r=r(lNe," (Pegasus model)"),lNe.forEach(t),h$r=i(ne),t3=n(ne,"LI",{});var iNe=s(t3);LMe=n(iNe,"STRONG",{});var CLt=s(LMe);p$r=r(CLt,"roberta"),CLt.forEach(t),_$r=r(iNe," \u2014 "),CY=n(iNe,"A",{href:!0});var wLt=s(CY);u$r=r(wLt,"FlaxRobertaModel"),wLt.forEach(t),b$r=r(iNe," (RoBERTa model)"),iNe.forEach(t),v$r=i(ne),a3=n(ne,"LI",{});var dNe=s(a3);xMe=n(dNe,"STRONG",{});var ALt=s(xMe);F$r=r(ALt,"roformer"),ALt.forEach(t),T$r=r(dNe," \u2014 "),wY=n(dNe,"A",{href:!0});var yLt=s(wY);M$r=r(yLt,"FlaxRoFormerModel"),yLt.forEach(t),E$r=r(dNe," (RoFormer model)"),dNe.forEach(t),C$r=i(ne),n3=n(ne,"LI",{});var cNe=s(n3);$Me=n(cNe,"STRONG",{});var LLt=s($Me);w$r=r(LLt,"t5"),LLt.forEach(t),A$r=r(cNe," \u2014 "),AY=n(cNe,"A",{href:!0});var xLt=s(AY);y$r=r(xLt,"FlaxT5Model"),xLt.forEach(t),L$r=r(cNe," (T5 model)"),cNe.forEach(t),x$r=i(ne),s3=n(ne,"LI",{});var fNe=s(s3);kMe=n(fNe,"STRONG",{});var $Lt=s(kMe);$$r=r($Lt,"vision-text-dual-encoder"),$Lt.forEach(t),k$r=r(fNe," \u2014 "),yY=n(fNe,"A",{href:!0});var kLt=s(yY);S$r=r(kLt,"FlaxVisionTextDualEncoderModel"),kLt.forEach(t),R$r=r(fNe," (VisionTextDualEncoder model)"),fNe.forEach(t),P$r=i(ne),l3=n(ne,"LI",{});var mNe=s(l3);SMe=n(mNe,"STRONG",{});var SLt=s(SMe);B$r=r(SLt,"vit"),SLt.forEach(t),I$r=r(mNe," \u2014 "),LY=n(mNe,"A",{href:!0});var RLt=s(LY);N$r=r(RLt,"FlaxViTModel"),RLt.forEach(t),q$r=r(mNe," (ViT model)"),mNe.forEach(t),j$r=i(ne),i3=n(ne,"LI",{});var gNe=s(i3);RMe=n(gNe,"STRONG",{});var PLt=s(RMe);D$r=r(PLt,"wav2vec2"),PLt.forEach(t),G$r=r(gNe," \u2014 "),xY=n(gNe,"A",{href:!0});var BLt=s(xY);O$r=r(BLt,"FlaxWav2Vec2Model"),BLt.forEach(t),V$r=r(gNe," (Wav2Vec2 model)"),gNe.forEach(t),X$r=i(ne),d3=n(ne,"LI",{});var hNe=s(d3);PMe=n(hNe,"STRONG",{});var ILt=s(PMe);z$r=r(ILt,"xglm"),ILt.forEach(t),W$r=r(hNe," \u2014 "),$Y=n(hNe,"A",{href:!0});var NLt=s($Y);Q$r=r(NLt,"FlaxXGLMModel"),NLt.forEach(t),H$r=r(hNe," (XGLM model)"),hNe.forEach(t),U$r=i(ne),c3=n(ne,"LI",{});var pNe=s(c3);BMe=n(pNe,"STRONG",{});var qLt=s(BMe);J$r=r(qLt,"xlm-roberta"),qLt.forEach(t),Y$r=r(pNe," \u2014 "),kY=n(pNe,"A",{href:!0});var jLt=s(kY);K$r=r(jLt,"FlaxXLMRobertaModel"),jLt.forEach(t),Z$r=r(pNe," (XLM-RoBERTa model)"),pNe.forEach(t),ne.forEach(t),ekr=i(Xl),T(f3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),CDe=i(f),Pc=n(f,"H2",{class:!0});var kOe=s(Pc);m3=n(kOe,"A",{id:!0,class:!0,href:!0});var DLt=s(m3);IMe=n(DLt,"SPAN",{});var GLt=s(IMe);T(G9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),okr=i(kOe),NMe=n(kOe,"SPAN",{});var OLt=s(NMe);rkr=r(OLt,"FlaxAutoModelForCausalLM"),OLt.forEach(t),kOe.forEach(t),wDe=i(f),mr=n(f,"DIV",{class:!0});var zl=s(mr);T(O9.$$.fragment,zl),tkr=i(zl),Bc=n(zl,"P",{});var ioe=s(Bc);akr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SY=n(ioe,"A",{href:!0});var VLt=s(SY);nkr=r(VLt,"from_pretrained()"),VLt.forEach(t),skr=r(ioe," class method or the "),RY=n(ioe,"A",{href:!0});var XLt=s(RY);lkr=r(XLt,"from_config()"),XLt.forEach(t),ikr=r(ioe,` class
method.`),ioe.forEach(t),dkr=i(zl),V9=n(zl,"P",{});var SOe=s(V9);ckr=r(SOe,"This class cannot be instantiated directly using "),qMe=n(SOe,"CODE",{});var zLt=s(qMe);fkr=r(zLt,"__init__()"),zLt.forEach(t),mkr=r(SOe," (throws an error)."),SOe.forEach(t),gkr=i(zl),Vt=n(zl,"DIV",{class:!0});var m6=s(Vt);T(X9.$$.fragment,m6),hkr=i(m6),jMe=n(m6,"P",{});var WLt=s(jMe);pkr=r(WLt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),WLt.forEach(t),_kr=i(m6),Ic=n(m6,"P",{});var doe=s(Ic);ukr=r(doe,`Note:
Loading a model from its configuration file does `),DMe=n(doe,"STRONG",{});var QLt=s(DMe);bkr=r(QLt,"not"),QLt.forEach(t),vkr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PY=n(doe,"A",{href:!0});var HLt=s(PY);Fkr=r(HLt,"from_pretrained()"),HLt.forEach(t),Tkr=r(doe," to load the model weights."),doe.forEach(t),Mkr=i(m6),T(g3.$$.fragment,m6),m6.forEach(t),Ekr=i(zl),Dr=n(zl,"DIV",{class:!0});var Wl=s(Dr);T(z9.$$.fragment,Wl),Ckr=i(Wl),GMe=n(Wl,"P",{});var ULt=s(GMe);wkr=r(ULt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ULt.forEach(t),Akr=i(Wl),pn=n(Wl,"P",{});var g6=s(pn);ykr=r(g6,"The model class to instantiate is selected based on the "),OMe=n(g6,"CODE",{});var JLt=s(OMe);Lkr=r(JLt,"model_type"),JLt.forEach(t),xkr=r(g6,` property of the config object (either
passed as an argument or loaded from `),VMe=n(g6,"CODE",{});var YLt=s(VMe);$kr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),kkr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(g6,"CODE",{});var KLt=s(XMe);Skr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),Rkr=r(g6,":"),g6.forEach(t),Pkr=i(Wl),Le=n(Wl,"UL",{});var Ie=s(Le);h3=n(Ie,"LI",{});var _Ne=s(h3);zMe=n(_Ne,"STRONG",{});var ZLt=s(zMe);Bkr=r(ZLt,"bart"),ZLt.forEach(t),Ikr=r(_Ne," \u2014 "),BY=n(_Ne,"A",{href:!0});var e8t=s(BY);Nkr=r(e8t,"FlaxBartForCausalLM"),e8t.forEach(t),qkr=r(_Ne," (BART model)"),_Ne.forEach(t),jkr=i(Ie),p3=n(Ie,"LI",{});var uNe=s(p3);WMe=n(uNe,"STRONG",{});var o8t=s(WMe);Dkr=r(o8t,"bert"),o8t.forEach(t),Gkr=r(uNe," \u2014 "),IY=n(uNe,"A",{href:!0});var r8t=s(IY);Okr=r(r8t,"FlaxBertForCausalLM"),r8t.forEach(t),Vkr=r(uNe," (BERT model)"),uNe.forEach(t),Xkr=i(Ie),_3=n(Ie,"LI",{});var bNe=s(_3);QMe=n(bNe,"STRONG",{});var t8t=s(QMe);zkr=r(t8t,"big_bird"),t8t.forEach(t),Wkr=r(bNe," \u2014 "),NY=n(bNe,"A",{href:!0});var a8t=s(NY);Qkr=r(a8t,"FlaxBigBirdForCausalLM"),a8t.forEach(t),Hkr=r(bNe," (BigBird model)"),bNe.forEach(t),Ukr=i(Ie),u3=n(Ie,"LI",{});var vNe=s(u3);HMe=n(vNe,"STRONG",{});var n8t=s(HMe);Jkr=r(n8t,"electra"),n8t.forEach(t),Ykr=r(vNe," \u2014 "),qY=n(vNe,"A",{href:!0});var s8t=s(qY);Kkr=r(s8t,"FlaxElectraForCausalLM"),s8t.forEach(t),Zkr=r(vNe," (ELECTRA model)"),vNe.forEach(t),eSr=i(Ie),b3=n(Ie,"LI",{});var FNe=s(b3);UMe=n(FNe,"STRONG",{});var l8t=s(UMe);oSr=r(l8t,"gpt2"),l8t.forEach(t),rSr=r(FNe," \u2014 "),jY=n(FNe,"A",{href:!0});var i8t=s(jY);tSr=r(i8t,"FlaxGPT2LMHeadModel"),i8t.forEach(t),aSr=r(FNe," (OpenAI GPT-2 model)"),FNe.forEach(t),nSr=i(Ie),v3=n(Ie,"LI",{});var TNe=s(v3);JMe=n(TNe,"STRONG",{});var d8t=s(JMe);sSr=r(d8t,"gpt_neo"),d8t.forEach(t),lSr=r(TNe," \u2014 "),DY=n(TNe,"A",{href:!0});var c8t=s(DY);iSr=r(c8t,"FlaxGPTNeoForCausalLM"),c8t.forEach(t),dSr=r(TNe," (GPT Neo model)"),TNe.forEach(t),cSr=i(Ie),F3=n(Ie,"LI",{});var MNe=s(F3);YMe=n(MNe,"STRONG",{});var f8t=s(YMe);fSr=r(f8t,"gptj"),f8t.forEach(t),mSr=r(MNe," \u2014 "),GY=n(MNe,"A",{href:!0});var m8t=s(GY);gSr=r(m8t,"FlaxGPTJForCausalLM"),m8t.forEach(t),hSr=r(MNe," (GPT-J model)"),MNe.forEach(t),pSr=i(Ie),T3=n(Ie,"LI",{});var ENe=s(T3);KMe=n(ENe,"STRONG",{});var g8t=s(KMe);_Sr=r(g8t,"opt"),g8t.forEach(t),uSr=r(ENe," \u2014 "),OY=n(ENe,"A",{href:!0});var h8t=s(OY);bSr=r(h8t,"FlaxOPTForCausalLM"),h8t.forEach(t),vSr=r(ENe," (OPT model)"),ENe.forEach(t),FSr=i(Ie),M3=n(Ie,"LI",{});var CNe=s(M3);ZMe=n(CNe,"STRONG",{});var p8t=s(ZMe);TSr=r(p8t,"roberta"),p8t.forEach(t),MSr=r(CNe," \u2014 "),VY=n(CNe,"A",{href:!0});var _8t=s(VY);ESr=r(_8t,"FlaxRobertaForCausalLM"),_8t.forEach(t),CSr=r(CNe," (RoBERTa model)"),CNe.forEach(t),wSr=i(Ie),E3=n(Ie,"LI",{});var wNe=s(E3);eEe=n(wNe,"STRONG",{});var u8t=s(eEe);ASr=r(u8t,"xglm"),u8t.forEach(t),ySr=r(wNe," \u2014 "),XY=n(wNe,"A",{href:!0});var b8t=s(XY);LSr=r(b8t,"FlaxXGLMForCausalLM"),b8t.forEach(t),xSr=r(wNe," (XGLM model)"),wNe.forEach(t),Ie.forEach(t),$Sr=i(Wl),T(C3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),ADe=i(f),Nc=n(f,"H2",{class:!0});var ROe=s(Nc);w3=n(ROe,"A",{id:!0,class:!0,href:!0});var v8t=s(w3);oEe=n(v8t,"SPAN",{});var F8t=s(oEe);T(W9.$$.fragment,F8t),F8t.forEach(t),v8t.forEach(t),kSr=i(ROe),rEe=n(ROe,"SPAN",{});var T8t=s(rEe);SSr=r(T8t,"FlaxAutoModelForPreTraining"),T8t.forEach(t),ROe.forEach(t),yDe=i(f),gr=n(f,"DIV",{class:!0});var Ql=s(gr);T(Q9.$$.fragment,Ql),RSr=i(Ql),qc=n(Ql,"P",{});var coe=s(qc);PSr=r(coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zY=n(coe,"A",{href:!0});var M8t=s(zY);BSr=r(M8t,"from_pretrained()"),M8t.forEach(t),ISr=r(coe," class method or the "),WY=n(coe,"A",{href:!0});var E8t=s(WY);NSr=r(E8t,"from_config()"),E8t.forEach(t),qSr=r(coe,` class
method.`),coe.forEach(t),jSr=i(Ql),H9=n(Ql,"P",{});var POe=s(H9);DSr=r(POe,"This class cannot be instantiated directly using "),tEe=n(POe,"CODE",{});var C8t=s(tEe);GSr=r(C8t,"__init__()"),C8t.forEach(t),OSr=r(POe," (throws an error)."),POe.forEach(t),VSr=i(Ql),Xt=n(Ql,"DIV",{class:!0});var h6=s(Xt);T(U9.$$.fragment,h6),XSr=i(h6),aEe=n(h6,"P",{});var w8t=s(aEe);zSr=r(w8t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),w8t.forEach(t),WSr=i(h6),jc=n(h6,"P",{});var foe=s(jc);QSr=r(foe,`Note:
Loading a model from its configuration file does `),nEe=n(foe,"STRONG",{});var A8t=s(nEe);HSr=r(A8t,"not"),A8t.forEach(t),USr=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(foe,"A",{href:!0});var y8t=s(QY);JSr=r(y8t,"from_pretrained()"),y8t.forEach(t),YSr=r(foe," to load the model weights."),foe.forEach(t),KSr=i(h6),T(A3.$$.fragment,h6),h6.forEach(t),ZSr=i(Ql),Gr=n(Ql,"DIV",{class:!0});var Hl=s(Gr);T(J9.$$.fragment,Hl),eRr=i(Hl),sEe=n(Hl,"P",{});var L8t=s(sEe);oRr=r(L8t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),L8t.forEach(t),rRr=i(Hl),_n=n(Hl,"P",{});var p6=s(_n);tRr=r(p6,"The model class to instantiate is selected based on the "),lEe=n(p6,"CODE",{});var x8t=s(lEe);aRr=r(x8t,"model_type"),x8t.forEach(t),nRr=r(p6,` property of the config object (either
passed as an argument or loaded from `),iEe=n(p6,"CODE",{});var $8t=s(iEe);sRr=r($8t,"pretrained_model_name_or_path"),$8t.forEach(t),lRr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(p6,"CODE",{});var k8t=s(dEe);iRr=r(k8t,"pretrained_model_name_or_path"),k8t.forEach(t),dRr=r(p6,":"),p6.forEach(t),cRr=i(Hl),Ee=n(Hl,"UL",{});var we=s(Ee);y3=n(we,"LI",{});var ANe=s(y3);cEe=n(ANe,"STRONG",{});var S8t=s(cEe);fRr=r(S8t,"albert"),S8t.forEach(t),mRr=r(ANe," \u2014 "),HY=n(ANe,"A",{href:!0});var R8t=s(HY);gRr=r(R8t,"FlaxAlbertForPreTraining"),R8t.forEach(t),hRr=r(ANe," (ALBERT model)"),ANe.forEach(t),pRr=i(we),L3=n(we,"LI",{});var yNe=s(L3);fEe=n(yNe,"STRONG",{});var P8t=s(fEe);_Rr=r(P8t,"bart"),P8t.forEach(t),uRr=r(yNe," \u2014 "),UY=n(yNe,"A",{href:!0});var B8t=s(UY);bRr=r(B8t,"FlaxBartForConditionalGeneration"),B8t.forEach(t),vRr=r(yNe," (BART model)"),yNe.forEach(t),FRr=i(we),x3=n(we,"LI",{});var LNe=s(x3);mEe=n(LNe,"STRONG",{});var I8t=s(mEe);TRr=r(I8t,"bert"),I8t.forEach(t),MRr=r(LNe," \u2014 "),JY=n(LNe,"A",{href:!0});var N8t=s(JY);ERr=r(N8t,"FlaxBertForPreTraining"),N8t.forEach(t),CRr=r(LNe," (BERT model)"),LNe.forEach(t),wRr=i(we),$3=n(we,"LI",{});var xNe=s($3);gEe=n(xNe,"STRONG",{});var q8t=s(gEe);ARr=r(q8t,"big_bird"),q8t.forEach(t),yRr=r(xNe," \u2014 "),YY=n(xNe,"A",{href:!0});var j8t=s(YY);LRr=r(j8t,"FlaxBigBirdForPreTraining"),j8t.forEach(t),xRr=r(xNe," (BigBird model)"),xNe.forEach(t),$Rr=i(we),k3=n(we,"LI",{});var $Ne=s(k3);hEe=n($Ne,"STRONG",{});var D8t=s(hEe);kRr=r(D8t,"electra"),D8t.forEach(t),SRr=r($Ne," \u2014 "),KY=n($Ne,"A",{href:!0});var G8t=s(KY);RRr=r(G8t,"FlaxElectraForPreTraining"),G8t.forEach(t),PRr=r($Ne," (ELECTRA model)"),$Ne.forEach(t),BRr=i(we),S3=n(we,"LI",{});var kNe=s(S3);pEe=n(kNe,"STRONG",{});var O8t=s(pEe);IRr=r(O8t,"mbart"),O8t.forEach(t),NRr=r(kNe," \u2014 "),ZY=n(kNe,"A",{href:!0});var V8t=s(ZY);qRr=r(V8t,"FlaxMBartForConditionalGeneration"),V8t.forEach(t),jRr=r(kNe," (mBART model)"),kNe.forEach(t),DRr=i(we),R3=n(we,"LI",{});var SNe=s(R3);_Ee=n(SNe,"STRONG",{});var X8t=s(_Ee);GRr=r(X8t,"mt5"),X8t.forEach(t),ORr=r(SNe," \u2014 "),eK=n(SNe,"A",{href:!0});var z8t=s(eK);VRr=r(z8t,"FlaxMT5ForConditionalGeneration"),z8t.forEach(t),XRr=r(SNe," (MT5 model)"),SNe.forEach(t),zRr=i(we),P3=n(we,"LI",{});var RNe=s(P3);uEe=n(RNe,"STRONG",{});var W8t=s(uEe);WRr=r(W8t,"roberta"),W8t.forEach(t),QRr=r(RNe," \u2014 "),oK=n(RNe,"A",{href:!0});var Q8t=s(oK);HRr=r(Q8t,"FlaxRobertaForMaskedLM"),Q8t.forEach(t),URr=r(RNe," (RoBERTa model)"),RNe.forEach(t),JRr=i(we),B3=n(we,"LI",{});var PNe=s(B3);bEe=n(PNe,"STRONG",{});var H8t=s(bEe);YRr=r(H8t,"roformer"),H8t.forEach(t),KRr=r(PNe," \u2014 "),rK=n(PNe,"A",{href:!0});var U8t=s(rK);ZRr=r(U8t,"FlaxRoFormerForMaskedLM"),U8t.forEach(t),ePr=r(PNe," (RoFormer model)"),PNe.forEach(t),oPr=i(we),I3=n(we,"LI",{});var BNe=s(I3);vEe=n(BNe,"STRONG",{});var J8t=s(vEe);rPr=r(J8t,"t5"),J8t.forEach(t),tPr=r(BNe," \u2014 "),tK=n(BNe,"A",{href:!0});var Y8t=s(tK);aPr=r(Y8t,"FlaxT5ForConditionalGeneration"),Y8t.forEach(t),nPr=r(BNe," (T5 model)"),BNe.forEach(t),sPr=i(we),N3=n(we,"LI",{});var INe=s(N3);FEe=n(INe,"STRONG",{});var K8t=s(FEe);lPr=r(K8t,"wav2vec2"),K8t.forEach(t),iPr=r(INe," \u2014 "),aK=n(INe,"A",{href:!0});var Z8t=s(aK);dPr=r(Z8t,"FlaxWav2Vec2ForPreTraining"),Z8t.forEach(t),cPr=r(INe," (Wav2Vec2 model)"),INe.forEach(t),fPr=i(we),q3=n(we,"LI",{});var NNe=s(q3);TEe=n(NNe,"STRONG",{});var e9t=s(TEe);mPr=r(e9t,"xlm-roberta"),e9t.forEach(t),gPr=r(NNe," \u2014 "),nK=n(NNe,"A",{href:!0});var o9t=s(nK);hPr=r(o9t,"FlaxXLMRobertaForMaskedLM"),o9t.forEach(t),pPr=r(NNe," (XLM-RoBERTa model)"),NNe.forEach(t),we.forEach(t),_Pr=i(Hl),T(j3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),LDe=i(f),Dc=n(f,"H2",{class:!0});var BOe=s(Dc);D3=n(BOe,"A",{id:!0,class:!0,href:!0});var r9t=s(D3);MEe=n(r9t,"SPAN",{});var t9t=s(MEe);T(Y9.$$.fragment,t9t),t9t.forEach(t),r9t.forEach(t),uPr=i(BOe),EEe=n(BOe,"SPAN",{});var a9t=s(EEe);bPr=r(a9t,"FlaxAutoModelForMaskedLM"),a9t.forEach(t),BOe.forEach(t),xDe=i(f),hr=n(f,"DIV",{class:!0});var Ul=s(hr);T(K9.$$.fragment,Ul),vPr=i(Ul),Gc=n(Ul,"P",{});var moe=s(Gc);FPr=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sK=n(moe,"A",{href:!0});var n9t=s(sK);TPr=r(n9t,"from_pretrained()"),n9t.forEach(t),MPr=r(moe," class method or the "),lK=n(moe,"A",{href:!0});var s9t=s(lK);EPr=r(s9t,"from_config()"),s9t.forEach(t),CPr=r(moe,` class
method.`),moe.forEach(t),wPr=i(Ul),Z9=n(Ul,"P",{});var IOe=s(Z9);APr=r(IOe,"This class cannot be instantiated directly using "),CEe=n(IOe,"CODE",{});var l9t=s(CEe);yPr=r(l9t,"__init__()"),l9t.forEach(t),LPr=r(IOe," (throws an error)."),IOe.forEach(t),xPr=i(Ul),zt=n(Ul,"DIV",{class:!0});var _6=s(zt);T(ex.$$.fragment,_6),$Pr=i(_6),wEe=n(_6,"P",{});var i9t=s(wEe);kPr=r(i9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),i9t.forEach(t),SPr=i(_6),Oc=n(_6,"P",{});var goe=s(Oc);RPr=r(goe,`Note:
Loading a model from its configuration file does `),AEe=n(goe,"STRONG",{});var d9t=s(AEe);PPr=r(d9t,"not"),d9t.forEach(t),BPr=r(goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iK=n(goe,"A",{href:!0});var c9t=s(iK);IPr=r(c9t,"from_pretrained()"),c9t.forEach(t),NPr=r(goe," to load the model weights."),goe.forEach(t),qPr=i(_6),T(G3.$$.fragment,_6),_6.forEach(t),jPr=i(Ul),Or=n(Ul,"DIV",{class:!0});var Jl=s(Or);T(ox.$$.fragment,Jl),DPr=i(Jl),yEe=n(Jl,"P",{});var f9t=s(yEe);GPr=r(f9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f9t.forEach(t),OPr=i(Jl),un=n(Jl,"P",{});var u6=s(un);VPr=r(u6,"The model class to instantiate is selected based on the "),LEe=n(u6,"CODE",{});var m9t=s(LEe);XPr=r(m9t,"model_type"),m9t.forEach(t),zPr=r(u6,` property of the config object (either
passed as an argument or loaded from `),xEe=n(u6,"CODE",{});var g9t=s(xEe);WPr=r(g9t,"pretrained_model_name_or_path"),g9t.forEach(t),QPr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Ee=n(u6,"CODE",{});var h9t=s($Ee);HPr=r(h9t,"pretrained_model_name_or_path"),h9t.forEach(t),UPr=r(u6,":"),u6.forEach(t),JPr=i(Jl),xe=n(Jl,"UL",{});var Ne=s(xe);O3=n(Ne,"LI",{});var qNe=s(O3);kEe=n(qNe,"STRONG",{});var p9t=s(kEe);YPr=r(p9t,"albert"),p9t.forEach(t),KPr=r(qNe," \u2014 "),dK=n(qNe,"A",{href:!0});var _9t=s(dK);ZPr=r(_9t,"FlaxAlbertForMaskedLM"),_9t.forEach(t),eBr=r(qNe," (ALBERT model)"),qNe.forEach(t),oBr=i(Ne),V3=n(Ne,"LI",{});var jNe=s(V3);SEe=n(jNe,"STRONG",{});var u9t=s(SEe);rBr=r(u9t,"bart"),u9t.forEach(t),tBr=r(jNe," \u2014 "),cK=n(jNe,"A",{href:!0});var b9t=s(cK);aBr=r(b9t,"FlaxBartForConditionalGeneration"),b9t.forEach(t),nBr=r(jNe," (BART model)"),jNe.forEach(t),sBr=i(Ne),X3=n(Ne,"LI",{});var DNe=s(X3);REe=n(DNe,"STRONG",{});var v9t=s(REe);lBr=r(v9t,"bert"),v9t.forEach(t),iBr=r(DNe," \u2014 "),fK=n(DNe,"A",{href:!0});var F9t=s(fK);dBr=r(F9t,"FlaxBertForMaskedLM"),F9t.forEach(t),cBr=r(DNe," (BERT model)"),DNe.forEach(t),fBr=i(Ne),z3=n(Ne,"LI",{});var GNe=s(z3);PEe=n(GNe,"STRONG",{});var T9t=s(PEe);mBr=r(T9t,"big_bird"),T9t.forEach(t),gBr=r(GNe," \u2014 "),mK=n(GNe,"A",{href:!0});var M9t=s(mK);hBr=r(M9t,"FlaxBigBirdForMaskedLM"),M9t.forEach(t),pBr=r(GNe," (BigBird model)"),GNe.forEach(t),_Br=i(Ne),W3=n(Ne,"LI",{});var ONe=s(W3);BEe=n(ONe,"STRONG",{});var E9t=s(BEe);uBr=r(E9t,"distilbert"),E9t.forEach(t),bBr=r(ONe," \u2014 "),gK=n(ONe,"A",{href:!0});var C9t=s(gK);vBr=r(C9t,"FlaxDistilBertForMaskedLM"),C9t.forEach(t),FBr=r(ONe," (DistilBERT model)"),ONe.forEach(t),TBr=i(Ne),Q3=n(Ne,"LI",{});var VNe=s(Q3);IEe=n(VNe,"STRONG",{});var w9t=s(IEe);MBr=r(w9t,"electra"),w9t.forEach(t),EBr=r(VNe," \u2014 "),hK=n(VNe,"A",{href:!0});var A9t=s(hK);CBr=r(A9t,"FlaxElectraForMaskedLM"),A9t.forEach(t),wBr=r(VNe," (ELECTRA model)"),VNe.forEach(t),ABr=i(Ne),H3=n(Ne,"LI",{});var XNe=s(H3);NEe=n(XNe,"STRONG",{});var y9t=s(NEe);yBr=r(y9t,"mbart"),y9t.forEach(t),LBr=r(XNe," \u2014 "),pK=n(XNe,"A",{href:!0});var L9t=s(pK);xBr=r(L9t,"FlaxMBartForConditionalGeneration"),L9t.forEach(t),$Br=r(XNe," (mBART model)"),XNe.forEach(t),kBr=i(Ne),U3=n(Ne,"LI",{});var zNe=s(U3);qEe=n(zNe,"STRONG",{});var x9t=s(qEe);SBr=r(x9t,"roberta"),x9t.forEach(t),RBr=r(zNe," \u2014 "),_K=n(zNe,"A",{href:!0});var $9t=s(_K);PBr=r($9t,"FlaxRobertaForMaskedLM"),$9t.forEach(t),BBr=r(zNe," (RoBERTa model)"),zNe.forEach(t),IBr=i(Ne),J3=n(Ne,"LI",{});var WNe=s(J3);jEe=n(WNe,"STRONG",{});var k9t=s(jEe);NBr=r(k9t,"roformer"),k9t.forEach(t),qBr=r(WNe," \u2014 "),uK=n(WNe,"A",{href:!0});var S9t=s(uK);jBr=r(S9t,"FlaxRoFormerForMaskedLM"),S9t.forEach(t),DBr=r(WNe," (RoFormer model)"),WNe.forEach(t),GBr=i(Ne),Y3=n(Ne,"LI",{});var QNe=s(Y3);DEe=n(QNe,"STRONG",{});var R9t=s(DEe);OBr=r(R9t,"xlm-roberta"),R9t.forEach(t),VBr=r(QNe," \u2014 "),bK=n(QNe,"A",{href:!0});var P9t=s(bK);XBr=r(P9t,"FlaxXLMRobertaForMaskedLM"),P9t.forEach(t),zBr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),Ne.forEach(t),WBr=i(Jl),T(K3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),$De=i(f),Vc=n(f,"H2",{class:!0});var NOe=s(Vc);Z3=n(NOe,"A",{id:!0,class:!0,href:!0});var B9t=s(Z3);GEe=n(B9t,"SPAN",{});var I9t=s(GEe);T(rx.$$.fragment,I9t),I9t.forEach(t),B9t.forEach(t),QBr=i(NOe),OEe=n(NOe,"SPAN",{});var N9t=s(OEe);HBr=r(N9t,"FlaxAutoModelForSeq2SeqLM"),N9t.forEach(t),NOe.forEach(t),kDe=i(f),pr=n(f,"DIV",{class:!0});var Yl=s(pr);T(tx.$$.fragment,Yl),UBr=i(Yl),Xc=n(Yl,"P",{});var hoe=s(Xc);JBr=r(hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vK=n(hoe,"A",{href:!0});var q9t=s(vK);YBr=r(q9t,"from_pretrained()"),q9t.forEach(t),KBr=r(hoe," class method or the "),FK=n(hoe,"A",{href:!0});var j9t=s(FK);ZBr=r(j9t,"from_config()"),j9t.forEach(t),eIr=r(hoe,` class
method.`),hoe.forEach(t),oIr=i(Yl),ax=n(Yl,"P",{});var qOe=s(ax);rIr=r(qOe,"This class cannot be instantiated directly using "),VEe=n(qOe,"CODE",{});var D9t=s(VEe);tIr=r(D9t,"__init__()"),D9t.forEach(t),aIr=r(qOe," (throws an error)."),qOe.forEach(t),nIr=i(Yl),Wt=n(Yl,"DIV",{class:!0});var b6=s(Wt);T(nx.$$.fragment,b6),sIr=i(b6),XEe=n(b6,"P",{});var G9t=s(XEe);lIr=r(G9t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),G9t.forEach(t),iIr=i(b6),zc=n(b6,"P",{});var poe=s(zc);dIr=r(poe,`Note:
Loading a model from its configuration file does `),zEe=n(poe,"STRONG",{});var O9t=s(zEe);cIr=r(O9t,"not"),O9t.forEach(t),fIr=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(poe,"A",{href:!0});var V9t=s(TK);mIr=r(V9t,"from_pretrained()"),V9t.forEach(t),gIr=r(poe," to load the model weights."),poe.forEach(t),hIr=i(b6),T(e0.$$.fragment,b6),b6.forEach(t),pIr=i(Yl),Vr=n(Yl,"DIV",{class:!0});var Kl=s(Vr);T(sx.$$.fragment,Kl),_Ir=i(Kl),WEe=n(Kl,"P",{});var X9t=s(WEe);uIr=r(X9t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X9t.forEach(t),bIr=i(Kl),bn=n(Kl,"P",{});var v6=s(bn);vIr=r(v6,"The model class to instantiate is selected based on the "),QEe=n(v6,"CODE",{});var z9t=s(QEe);FIr=r(z9t,"model_type"),z9t.forEach(t),TIr=r(v6,` property of the config object (either
passed as an argument or loaded from `),HEe=n(v6,"CODE",{});var W9t=s(HEe);MIr=r(W9t,"pretrained_model_name_or_path"),W9t.forEach(t),EIr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),UEe=n(v6,"CODE",{});var Q9t=s(UEe);CIr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),wIr=r(v6,":"),v6.forEach(t),AIr=i(Kl),Pe=n(Kl,"UL",{});var ze=s(Pe);o0=n(ze,"LI",{});var HNe=s(o0);JEe=n(HNe,"STRONG",{});var H9t=s(JEe);yIr=r(H9t,"bart"),H9t.forEach(t),LIr=r(HNe," \u2014 "),MK=n(HNe,"A",{href:!0});var U9t=s(MK);xIr=r(U9t,"FlaxBartForConditionalGeneration"),U9t.forEach(t),$Ir=r(HNe," (BART model)"),HNe.forEach(t),kIr=i(ze),r0=n(ze,"LI",{});var UNe=s(r0);YEe=n(UNe,"STRONG",{});var J9t=s(YEe);SIr=r(J9t,"blenderbot"),J9t.forEach(t),RIr=r(UNe," \u2014 "),EK=n(UNe,"A",{href:!0});var Y9t=s(EK);PIr=r(Y9t,"FlaxBlenderbotForConditionalGeneration"),Y9t.forEach(t),BIr=r(UNe," (Blenderbot model)"),UNe.forEach(t),IIr=i(ze),t0=n(ze,"LI",{});var JNe=s(t0);KEe=n(JNe,"STRONG",{});var K9t=s(KEe);NIr=r(K9t,"blenderbot-small"),K9t.forEach(t),qIr=r(JNe," \u2014 "),CK=n(JNe,"A",{href:!0});var Z9t=s(CK);jIr=r(Z9t,"FlaxBlenderbotSmallForConditionalGeneration"),Z9t.forEach(t),DIr=r(JNe," (BlenderbotSmall model)"),JNe.forEach(t),GIr=i(ze),a0=n(ze,"LI",{});var YNe=s(a0);ZEe=n(YNe,"STRONG",{});var ext=s(ZEe);OIr=r(ext,"encoder-decoder"),ext.forEach(t),VIr=r(YNe," \u2014 "),wK=n(YNe,"A",{href:!0});var oxt=s(wK);XIr=r(oxt,"FlaxEncoderDecoderModel"),oxt.forEach(t),zIr=r(YNe," (Encoder decoder model)"),YNe.forEach(t),WIr=i(ze),n0=n(ze,"LI",{});var KNe=s(n0);eCe=n(KNe,"STRONG",{});var rxt=s(eCe);QIr=r(rxt,"marian"),rxt.forEach(t),HIr=r(KNe," \u2014 "),AK=n(KNe,"A",{href:!0});var txt=s(AK);UIr=r(txt,"FlaxMarianMTModel"),txt.forEach(t),JIr=r(KNe," (Marian model)"),KNe.forEach(t),YIr=i(ze),s0=n(ze,"LI",{});var ZNe=s(s0);oCe=n(ZNe,"STRONG",{});var axt=s(oCe);KIr=r(axt,"mbart"),axt.forEach(t),ZIr=r(ZNe," \u2014 "),yK=n(ZNe,"A",{href:!0});var nxt=s(yK);eNr=r(nxt,"FlaxMBartForConditionalGeneration"),nxt.forEach(t),oNr=r(ZNe," (mBART model)"),ZNe.forEach(t),rNr=i(ze),l0=n(ze,"LI",{});var eqe=s(l0);rCe=n(eqe,"STRONG",{});var sxt=s(rCe);tNr=r(sxt,"mt5"),sxt.forEach(t),aNr=r(eqe," \u2014 "),LK=n(eqe,"A",{href:!0});var lxt=s(LK);nNr=r(lxt,"FlaxMT5ForConditionalGeneration"),lxt.forEach(t),sNr=r(eqe," (MT5 model)"),eqe.forEach(t),lNr=i(ze),i0=n(ze,"LI",{});var oqe=s(i0);tCe=n(oqe,"STRONG",{});var ixt=s(tCe);iNr=r(ixt,"pegasus"),ixt.forEach(t),dNr=r(oqe," \u2014 "),xK=n(oqe,"A",{href:!0});var dxt=s(xK);cNr=r(dxt,"FlaxPegasusForConditionalGeneration"),dxt.forEach(t),fNr=r(oqe," (Pegasus model)"),oqe.forEach(t),mNr=i(ze),d0=n(ze,"LI",{});var rqe=s(d0);aCe=n(rqe,"STRONG",{});var cxt=s(aCe);gNr=r(cxt,"t5"),cxt.forEach(t),hNr=r(rqe," \u2014 "),$K=n(rqe,"A",{href:!0});var fxt=s($K);pNr=r(fxt,"FlaxT5ForConditionalGeneration"),fxt.forEach(t),_Nr=r(rqe," (T5 model)"),rqe.forEach(t),ze.forEach(t),uNr=i(Kl),T(c0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),SDe=i(f),Wc=n(f,"H2",{class:!0});var jOe=s(Wc);f0=n(jOe,"A",{id:!0,class:!0,href:!0});var mxt=s(f0);nCe=n(mxt,"SPAN",{});var gxt=s(nCe);T(lx.$$.fragment,gxt),gxt.forEach(t),mxt.forEach(t),bNr=i(jOe),sCe=n(jOe,"SPAN",{});var hxt=s(sCe);vNr=r(hxt,"FlaxAutoModelForSequenceClassification"),hxt.forEach(t),jOe.forEach(t),RDe=i(f),_r=n(f,"DIV",{class:!0});var Zl=s(_r);T(ix.$$.fragment,Zl),FNr=i(Zl),Qc=n(Zl,"P",{});var _oe=s(Qc);TNr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),kK=n(_oe,"A",{href:!0});var pxt=s(kK);MNr=r(pxt,"from_pretrained()"),pxt.forEach(t),ENr=r(_oe," class method or the "),SK=n(_oe,"A",{href:!0});var _xt=s(SK);CNr=r(_xt,"from_config()"),_xt.forEach(t),wNr=r(_oe,` class
method.`),_oe.forEach(t),ANr=i(Zl),dx=n(Zl,"P",{});var DOe=s(dx);yNr=r(DOe,"This class cannot be instantiated directly using "),lCe=n(DOe,"CODE",{});var uxt=s(lCe);LNr=r(uxt,"__init__()"),uxt.forEach(t),xNr=r(DOe," (throws an error)."),DOe.forEach(t),$Nr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var F6=s(Qt);T(cx.$$.fragment,F6),kNr=i(F6),iCe=n(F6,"P",{});var bxt=s(iCe);SNr=r(bxt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bxt.forEach(t),RNr=i(F6),Hc=n(F6,"P",{});var uoe=s(Hc);PNr=r(uoe,`Note:
Loading a model from its configuration file does `),dCe=n(uoe,"STRONG",{});var vxt=s(dCe);BNr=r(vxt,"not"),vxt.forEach(t),INr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(uoe,"A",{href:!0});var Fxt=s(RK);NNr=r(Fxt,"from_pretrained()"),Fxt.forEach(t),qNr=r(uoe," to load the model weights."),uoe.forEach(t),jNr=i(F6),T(m0.$$.fragment,F6),F6.forEach(t),DNr=i(Zl),Xr=n(Zl,"DIV",{class:!0});var ei=s(Xr);T(fx.$$.fragment,ei),GNr=i(ei),cCe=n(ei,"P",{});var Txt=s(cCe);ONr=r(Txt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Txt.forEach(t),VNr=i(ei),vn=n(ei,"P",{});var T6=s(vn);XNr=r(T6,"The model class to instantiate is selected based on the "),fCe=n(T6,"CODE",{});var Mxt=s(fCe);zNr=r(Mxt,"model_type"),Mxt.forEach(t),WNr=r(T6,` property of the config object (either
passed as an argument or loaded from `),mCe=n(T6,"CODE",{});var Ext=s(mCe);QNr=r(Ext,"pretrained_model_name_or_path"),Ext.forEach(t),HNr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gCe=n(T6,"CODE",{});var Cxt=s(gCe);UNr=r(Cxt,"pretrained_model_name_or_path"),Cxt.forEach(t),JNr=r(T6,":"),T6.forEach(t),YNr=i(ei),$e=n(ei,"UL",{});var qe=s($e);g0=n(qe,"LI",{});var tqe=s(g0);hCe=n(tqe,"STRONG",{});var wxt=s(hCe);KNr=r(wxt,"albert"),wxt.forEach(t),ZNr=r(tqe," \u2014 "),PK=n(tqe,"A",{href:!0});var Axt=s(PK);eqr=r(Axt,"FlaxAlbertForSequenceClassification"),Axt.forEach(t),oqr=r(tqe," (ALBERT model)"),tqe.forEach(t),rqr=i(qe),h0=n(qe,"LI",{});var aqe=s(h0);pCe=n(aqe,"STRONG",{});var yxt=s(pCe);tqr=r(yxt,"bart"),yxt.forEach(t),aqr=r(aqe," \u2014 "),BK=n(aqe,"A",{href:!0});var Lxt=s(BK);nqr=r(Lxt,"FlaxBartForSequenceClassification"),Lxt.forEach(t),sqr=r(aqe," (BART model)"),aqe.forEach(t),lqr=i(qe),p0=n(qe,"LI",{});var nqe=s(p0);_Ce=n(nqe,"STRONG",{});var xxt=s(_Ce);iqr=r(xxt,"bert"),xxt.forEach(t),dqr=r(nqe," \u2014 "),IK=n(nqe,"A",{href:!0});var $xt=s(IK);cqr=r($xt,"FlaxBertForSequenceClassification"),$xt.forEach(t),fqr=r(nqe," (BERT model)"),nqe.forEach(t),mqr=i(qe),_0=n(qe,"LI",{});var sqe=s(_0);uCe=n(sqe,"STRONG",{});var kxt=s(uCe);gqr=r(kxt,"big_bird"),kxt.forEach(t),hqr=r(sqe," \u2014 "),NK=n(sqe,"A",{href:!0});var Sxt=s(NK);pqr=r(Sxt,"FlaxBigBirdForSequenceClassification"),Sxt.forEach(t),_qr=r(sqe," (BigBird model)"),sqe.forEach(t),uqr=i(qe),u0=n(qe,"LI",{});var lqe=s(u0);bCe=n(lqe,"STRONG",{});var Rxt=s(bCe);bqr=r(Rxt,"distilbert"),Rxt.forEach(t),vqr=r(lqe," \u2014 "),qK=n(lqe,"A",{href:!0});var Pxt=s(qK);Fqr=r(Pxt,"FlaxDistilBertForSequenceClassification"),Pxt.forEach(t),Tqr=r(lqe," (DistilBERT model)"),lqe.forEach(t),Mqr=i(qe),b0=n(qe,"LI",{});var iqe=s(b0);vCe=n(iqe,"STRONG",{});var Bxt=s(vCe);Eqr=r(Bxt,"electra"),Bxt.forEach(t),Cqr=r(iqe," \u2014 "),jK=n(iqe,"A",{href:!0});var Ixt=s(jK);wqr=r(Ixt,"FlaxElectraForSequenceClassification"),Ixt.forEach(t),Aqr=r(iqe," (ELECTRA model)"),iqe.forEach(t),yqr=i(qe),v0=n(qe,"LI",{});var dqe=s(v0);FCe=n(dqe,"STRONG",{});var Nxt=s(FCe);Lqr=r(Nxt,"mbart"),Nxt.forEach(t),xqr=r(dqe," \u2014 "),DK=n(dqe,"A",{href:!0});var qxt=s(DK);$qr=r(qxt,"FlaxMBartForSequenceClassification"),qxt.forEach(t),kqr=r(dqe," (mBART model)"),dqe.forEach(t),Sqr=i(qe),F0=n(qe,"LI",{});var cqe=s(F0);TCe=n(cqe,"STRONG",{});var jxt=s(TCe);Rqr=r(jxt,"roberta"),jxt.forEach(t),Pqr=r(cqe," \u2014 "),GK=n(cqe,"A",{href:!0});var Dxt=s(GK);Bqr=r(Dxt,"FlaxRobertaForSequenceClassification"),Dxt.forEach(t),Iqr=r(cqe," (RoBERTa model)"),cqe.forEach(t),Nqr=i(qe),T0=n(qe,"LI",{});var fqe=s(T0);MCe=n(fqe,"STRONG",{});var Gxt=s(MCe);qqr=r(Gxt,"roformer"),Gxt.forEach(t),jqr=r(fqe," \u2014 "),OK=n(fqe,"A",{href:!0});var Oxt=s(OK);Dqr=r(Oxt,"FlaxRoFormerForSequenceClassification"),Oxt.forEach(t),Gqr=r(fqe," (RoFormer model)"),fqe.forEach(t),Oqr=i(qe),M0=n(qe,"LI",{});var mqe=s(M0);ECe=n(mqe,"STRONG",{});var Vxt=s(ECe);Vqr=r(Vxt,"xlm-roberta"),Vxt.forEach(t),Xqr=r(mqe," \u2014 "),VK=n(mqe,"A",{href:!0});var Xxt=s(VK);zqr=r(Xxt,"FlaxXLMRobertaForSequenceClassification"),Xxt.forEach(t),Wqr=r(mqe," (XLM-RoBERTa model)"),mqe.forEach(t),qe.forEach(t),Qqr=i(ei),T(E0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),PDe=i(f),Uc=n(f,"H2",{class:!0});var GOe=s(Uc);C0=n(GOe,"A",{id:!0,class:!0,href:!0});var zxt=s(C0);CCe=n(zxt,"SPAN",{});var Wxt=s(CCe);T(mx.$$.fragment,Wxt),Wxt.forEach(t),zxt.forEach(t),Hqr=i(GOe),wCe=n(GOe,"SPAN",{});var Qxt=s(wCe);Uqr=r(Qxt,"FlaxAutoModelForQuestionAnswering"),Qxt.forEach(t),GOe.forEach(t),BDe=i(f),ur=n(f,"DIV",{class:!0});var oi=s(ur);T(gx.$$.fragment,oi),Jqr=i(oi),Jc=n(oi,"P",{});var boe=s(Jc);Yqr=r(boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),XK=n(boe,"A",{href:!0});var Hxt=s(XK);Kqr=r(Hxt,"from_pretrained()"),Hxt.forEach(t),Zqr=r(boe," class method or the "),zK=n(boe,"A",{href:!0});var Uxt=s(zK);ejr=r(Uxt,"from_config()"),Uxt.forEach(t),ojr=r(boe,` class
method.`),boe.forEach(t),rjr=i(oi),hx=n(oi,"P",{});var OOe=s(hx);tjr=r(OOe,"This class cannot be instantiated directly using "),ACe=n(OOe,"CODE",{});var Jxt=s(ACe);ajr=r(Jxt,"__init__()"),Jxt.forEach(t),njr=r(OOe," (throws an error)."),OOe.forEach(t),sjr=i(oi),Ht=n(oi,"DIV",{class:!0});var M6=s(Ht);T(px.$$.fragment,M6),ljr=i(M6),yCe=n(M6,"P",{});var Yxt=s(yCe);ijr=r(Yxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Yxt.forEach(t),djr=i(M6),Yc=n(M6,"P",{});var voe=s(Yc);cjr=r(voe,`Note:
Loading a model from its configuration file does `),LCe=n(voe,"STRONG",{});var Kxt=s(LCe);fjr=r(Kxt,"not"),Kxt.forEach(t),mjr=r(voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(voe,"A",{href:!0});var Zxt=s(WK);gjr=r(Zxt,"from_pretrained()"),Zxt.forEach(t),hjr=r(voe," to load the model weights."),voe.forEach(t),pjr=i(M6),T(w0.$$.fragment,M6),M6.forEach(t),_jr=i(oi),zr=n(oi,"DIV",{class:!0});var ri=s(zr);T(_x.$$.fragment,ri),ujr=i(ri),xCe=n(ri,"P",{});var e$t=s(xCe);bjr=r(e$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),e$t.forEach(t),vjr=i(ri),Fn=n(ri,"P",{});var E6=s(Fn);Fjr=r(E6,"The model class to instantiate is selected based on the "),$Ce=n(E6,"CODE",{});var o$t=s($Ce);Tjr=r(o$t,"model_type"),o$t.forEach(t),Mjr=r(E6,` property of the config object (either
passed as an argument or loaded from `),kCe=n(E6,"CODE",{});var r$t=s(kCe);Ejr=r(r$t,"pretrained_model_name_or_path"),r$t.forEach(t),Cjr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SCe=n(E6,"CODE",{});var t$t=s(SCe);wjr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),Ajr=r(E6,":"),E6.forEach(t),yjr=i(ri),ke=n(ri,"UL",{});var je=s(ke);A0=n(je,"LI",{});var gqe=s(A0);RCe=n(gqe,"STRONG",{});var a$t=s(RCe);Ljr=r(a$t,"albert"),a$t.forEach(t),xjr=r(gqe," \u2014 "),QK=n(gqe,"A",{href:!0});var n$t=s(QK);$jr=r(n$t,"FlaxAlbertForQuestionAnswering"),n$t.forEach(t),kjr=r(gqe," (ALBERT model)"),gqe.forEach(t),Sjr=i(je),y0=n(je,"LI",{});var hqe=s(y0);PCe=n(hqe,"STRONG",{});var s$t=s(PCe);Rjr=r(s$t,"bart"),s$t.forEach(t),Pjr=r(hqe," \u2014 "),HK=n(hqe,"A",{href:!0});var l$t=s(HK);Bjr=r(l$t,"FlaxBartForQuestionAnswering"),l$t.forEach(t),Ijr=r(hqe," (BART model)"),hqe.forEach(t),Njr=i(je),L0=n(je,"LI",{});var pqe=s(L0);BCe=n(pqe,"STRONG",{});var i$t=s(BCe);qjr=r(i$t,"bert"),i$t.forEach(t),jjr=r(pqe," \u2014 "),UK=n(pqe,"A",{href:!0});var d$t=s(UK);Djr=r(d$t,"FlaxBertForQuestionAnswering"),d$t.forEach(t),Gjr=r(pqe," (BERT model)"),pqe.forEach(t),Ojr=i(je),x0=n(je,"LI",{});var _qe=s(x0);ICe=n(_qe,"STRONG",{});var c$t=s(ICe);Vjr=r(c$t,"big_bird"),c$t.forEach(t),Xjr=r(_qe," \u2014 "),JK=n(_qe,"A",{href:!0});var f$t=s(JK);zjr=r(f$t,"FlaxBigBirdForQuestionAnswering"),f$t.forEach(t),Wjr=r(_qe," (BigBird model)"),_qe.forEach(t),Qjr=i(je),$0=n(je,"LI",{});var uqe=s($0);NCe=n(uqe,"STRONG",{});var m$t=s(NCe);Hjr=r(m$t,"distilbert"),m$t.forEach(t),Ujr=r(uqe," \u2014 "),YK=n(uqe,"A",{href:!0});var g$t=s(YK);Jjr=r(g$t,"FlaxDistilBertForQuestionAnswering"),g$t.forEach(t),Yjr=r(uqe," (DistilBERT model)"),uqe.forEach(t),Kjr=i(je),k0=n(je,"LI",{});var bqe=s(k0);qCe=n(bqe,"STRONG",{});var h$t=s(qCe);Zjr=r(h$t,"electra"),h$t.forEach(t),eDr=r(bqe," \u2014 "),KK=n(bqe,"A",{href:!0});var p$t=s(KK);oDr=r(p$t,"FlaxElectraForQuestionAnswering"),p$t.forEach(t),rDr=r(bqe," (ELECTRA model)"),bqe.forEach(t),tDr=i(je),S0=n(je,"LI",{});var vqe=s(S0);jCe=n(vqe,"STRONG",{});var _$t=s(jCe);aDr=r(_$t,"mbart"),_$t.forEach(t),nDr=r(vqe," \u2014 "),ZK=n(vqe,"A",{href:!0});var u$t=s(ZK);sDr=r(u$t,"FlaxMBartForQuestionAnswering"),u$t.forEach(t),lDr=r(vqe," (mBART model)"),vqe.forEach(t),iDr=i(je),R0=n(je,"LI",{});var Fqe=s(R0);DCe=n(Fqe,"STRONG",{});var b$t=s(DCe);dDr=r(b$t,"roberta"),b$t.forEach(t),cDr=r(Fqe," \u2014 "),eZ=n(Fqe,"A",{href:!0});var v$t=s(eZ);fDr=r(v$t,"FlaxRobertaForQuestionAnswering"),v$t.forEach(t),mDr=r(Fqe," (RoBERTa model)"),Fqe.forEach(t),gDr=i(je),P0=n(je,"LI",{});var Tqe=s(P0);GCe=n(Tqe,"STRONG",{});var F$t=s(GCe);hDr=r(F$t,"roformer"),F$t.forEach(t),pDr=r(Tqe," \u2014 "),oZ=n(Tqe,"A",{href:!0});var T$t=s(oZ);_Dr=r(T$t,"FlaxRoFormerForQuestionAnswering"),T$t.forEach(t),uDr=r(Tqe," (RoFormer model)"),Tqe.forEach(t),bDr=i(je),B0=n(je,"LI",{});var Mqe=s(B0);OCe=n(Mqe,"STRONG",{});var M$t=s(OCe);vDr=r(M$t,"xlm-roberta"),M$t.forEach(t),FDr=r(Mqe," \u2014 "),rZ=n(Mqe,"A",{href:!0});var E$t=s(rZ);TDr=r(E$t,"FlaxXLMRobertaForQuestionAnswering"),E$t.forEach(t),MDr=r(Mqe," (XLM-RoBERTa model)"),Mqe.forEach(t),je.forEach(t),EDr=i(ri),T(I0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),IDe=i(f),Kc=n(f,"H2",{class:!0});var VOe=s(Kc);N0=n(VOe,"A",{id:!0,class:!0,href:!0});var C$t=s(N0);VCe=n(C$t,"SPAN",{});var w$t=s(VCe);T(ux.$$.fragment,w$t),w$t.forEach(t),C$t.forEach(t),CDr=i(VOe),XCe=n(VOe,"SPAN",{});var A$t=s(XCe);wDr=r(A$t,"FlaxAutoModelForTokenClassification"),A$t.forEach(t),VOe.forEach(t),NDe=i(f),br=n(f,"DIV",{class:!0});var ti=s(br);T(bx.$$.fragment,ti),ADr=i(ti),Zc=n(ti,"P",{});var Foe=s(Zc);yDr=r(Foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),tZ=n(Foe,"A",{href:!0});var y$t=s(tZ);LDr=r(y$t,"from_pretrained()"),y$t.forEach(t),xDr=r(Foe," class method or the "),aZ=n(Foe,"A",{href:!0});var L$t=s(aZ);$Dr=r(L$t,"from_config()"),L$t.forEach(t),kDr=r(Foe,` class
method.`),Foe.forEach(t),SDr=i(ti),vx=n(ti,"P",{});var XOe=s(vx);RDr=r(XOe,"This class cannot be instantiated directly using "),zCe=n(XOe,"CODE",{});var x$t=s(zCe);PDr=r(x$t,"__init__()"),x$t.forEach(t),BDr=r(XOe," (throws an error)."),XOe.forEach(t),IDr=i(ti),Ut=n(ti,"DIV",{class:!0});var C6=s(Ut);T(Fx.$$.fragment,C6),NDr=i(C6),WCe=n(C6,"P",{});var $$t=s(WCe);qDr=r($$t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),$$t.forEach(t),jDr=i(C6),ef=n(C6,"P",{});var Toe=s(ef);DDr=r(Toe,`Note:
Loading a model from its configuration file does `),QCe=n(Toe,"STRONG",{});var k$t=s(QCe);GDr=r(k$t,"not"),k$t.forEach(t),ODr=r(Toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),nZ=n(Toe,"A",{href:!0});var S$t=s(nZ);VDr=r(S$t,"from_pretrained()"),S$t.forEach(t),XDr=r(Toe," to load the model weights."),Toe.forEach(t),zDr=i(C6),T(q0.$$.fragment,C6),C6.forEach(t),WDr=i(ti),Wr=n(ti,"DIV",{class:!0});var ai=s(Wr);T(Tx.$$.fragment,ai),QDr=i(ai),HCe=n(ai,"P",{});var R$t=s(HCe);HDr=r(R$t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),R$t.forEach(t),UDr=i(ai),Tn=n(ai,"P",{});var w6=s(Tn);JDr=r(w6,"The model class to instantiate is selected based on the "),UCe=n(w6,"CODE",{});var P$t=s(UCe);YDr=r(P$t,"model_type"),P$t.forEach(t),KDr=r(w6,` property of the config object (either
passed as an argument or loaded from `),JCe=n(w6,"CODE",{});var B$t=s(JCe);ZDr=r(B$t,"pretrained_model_name_or_path"),B$t.forEach(t),eGr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(w6,"CODE",{});var I$t=s(YCe);oGr=r(I$t,"pretrained_model_name_or_path"),I$t.forEach(t),rGr=r(w6,":"),w6.forEach(t),tGr=i(ai),Ge=n(ai,"UL",{});var Fo=s(Ge);j0=n(Fo,"LI",{});var Eqe=s(j0);KCe=n(Eqe,"STRONG",{});var N$t=s(KCe);aGr=r(N$t,"albert"),N$t.forEach(t),nGr=r(Eqe," \u2014 "),sZ=n(Eqe,"A",{href:!0});var q$t=s(sZ);sGr=r(q$t,"FlaxAlbertForTokenClassification"),q$t.forEach(t),lGr=r(Eqe," (ALBERT model)"),Eqe.forEach(t),iGr=i(Fo),D0=n(Fo,"LI",{});var Cqe=s(D0);ZCe=n(Cqe,"STRONG",{});var j$t=s(ZCe);dGr=r(j$t,"bert"),j$t.forEach(t),cGr=r(Cqe," \u2014 "),lZ=n(Cqe,"A",{href:!0});var D$t=s(lZ);fGr=r(D$t,"FlaxBertForTokenClassification"),D$t.forEach(t),mGr=r(Cqe," (BERT model)"),Cqe.forEach(t),gGr=i(Fo),G0=n(Fo,"LI",{});var wqe=s(G0);e5e=n(wqe,"STRONG",{});var G$t=s(e5e);hGr=r(G$t,"big_bird"),G$t.forEach(t),pGr=r(wqe," \u2014 "),iZ=n(wqe,"A",{href:!0});var O$t=s(iZ);_Gr=r(O$t,"FlaxBigBirdForTokenClassification"),O$t.forEach(t),uGr=r(wqe," (BigBird model)"),wqe.forEach(t),bGr=i(Fo),O0=n(Fo,"LI",{});var Aqe=s(O0);o5e=n(Aqe,"STRONG",{});var V$t=s(o5e);vGr=r(V$t,"distilbert"),V$t.forEach(t),FGr=r(Aqe," \u2014 "),dZ=n(Aqe,"A",{href:!0});var X$t=s(dZ);TGr=r(X$t,"FlaxDistilBertForTokenClassification"),X$t.forEach(t),MGr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),EGr=i(Fo),V0=n(Fo,"LI",{});var yqe=s(V0);r5e=n(yqe,"STRONG",{});var z$t=s(r5e);CGr=r(z$t,"electra"),z$t.forEach(t),wGr=r(yqe," \u2014 "),cZ=n(yqe,"A",{href:!0});var W$t=s(cZ);AGr=r(W$t,"FlaxElectraForTokenClassification"),W$t.forEach(t),yGr=r(yqe," (ELECTRA model)"),yqe.forEach(t),LGr=i(Fo),X0=n(Fo,"LI",{});var Lqe=s(X0);t5e=n(Lqe,"STRONG",{});var Q$t=s(t5e);xGr=r(Q$t,"roberta"),Q$t.forEach(t),$Gr=r(Lqe," \u2014 "),fZ=n(Lqe,"A",{href:!0});var H$t=s(fZ);kGr=r(H$t,"FlaxRobertaForTokenClassification"),H$t.forEach(t),SGr=r(Lqe," (RoBERTa model)"),Lqe.forEach(t),RGr=i(Fo),z0=n(Fo,"LI",{});var xqe=s(z0);a5e=n(xqe,"STRONG",{});var U$t=s(a5e);PGr=r(U$t,"roformer"),U$t.forEach(t),BGr=r(xqe," \u2014 "),mZ=n(xqe,"A",{href:!0});var J$t=s(mZ);IGr=r(J$t,"FlaxRoFormerForTokenClassification"),J$t.forEach(t),NGr=r(xqe," (RoFormer model)"),xqe.forEach(t),qGr=i(Fo),W0=n(Fo,"LI",{});var $qe=s(W0);n5e=n($qe,"STRONG",{});var Y$t=s(n5e);jGr=r(Y$t,"xlm-roberta"),Y$t.forEach(t),DGr=r($qe," \u2014 "),gZ=n($qe,"A",{href:!0});var K$t=s(gZ);GGr=r(K$t,"FlaxXLMRobertaForTokenClassification"),K$t.forEach(t),OGr=r($qe," (XLM-RoBERTa model)"),$qe.forEach(t),Fo.forEach(t),VGr=i(ai),T(Q0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),qDe=i(f),of=n(f,"H2",{class:!0});var zOe=s(of);H0=n(zOe,"A",{id:!0,class:!0,href:!0});var Z$t=s(H0);s5e=n(Z$t,"SPAN",{});var ekt=s(s5e);T(Mx.$$.fragment,ekt),ekt.forEach(t),Z$t.forEach(t),XGr=i(zOe),l5e=n(zOe,"SPAN",{});var okt=s(l5e);zGr=r(okt,"FlaxAutoModelForMultipleChoice"),okt.forEach(t),zOe.forEach(t),jDe=i(f),vr=n(f,"DIV",{class:!0});var ni=s(vr);T(Ex.$$.fragment,ni),WGr=i(ni),rf=n(ni,"P",{});var Moe=s(rf);QGr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),hZ=n(Moe,"A",{href:!0});var rkt=s(hZ);HGr=r(rkt,"from_pretrained()"),rkt.forEach(t),UGr=r(Moe," class method or the "),pZ=n(Moe,"A",{href:!0});var tkt=s(pZ);JGr=r(tkt,"from_config()"),tkt.forEach(t),YGr=r(Moe,` class
method.`),Moe.forEach(t),KGr=i(ni),Cx=n(ni,"P",{});var WOe=s(Cx);ZGr=r(WOe,"This class cannot be instantiated directly using "),i5e=n(WOe,"CODE",{});var akt=s(i5e);eOr=r(akt,"__init__()"),akt.forEach(t),oOr=r(WOe," (throws an error)."),WOe.forEach(t),rOr=i(ni),Jt=n(ni,"DIV",{class:!0});var A6=s(Jt);T(wx.$$.fragment,A6),tOr=i(A6),d5e=n(A6,"P",{});var nkt=s(d5e);aOr=r(nkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),nkt.forEach(t),nOr=i(A6),tf=n(A6,"P",{});var Eoe=s(tf);sOr=r(Eoe,`Note:
Loading a model from its configuration file does `),c5e=n(Eoe,"STRONG",{});var skt=s(c5e);lOr=r(skt,"not"),skt.forEach(t),iOr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(Eoe,"A",{href:!0});var lkt=s(_Z);dOr=r(lkt,"from_pretrained()"),lkt.forEach(t),cOr=r(Eoe," to load the model weights."),Eoe.forEach(t),fOr=i(A6),T(U0.$$.fragment,A6),A6.forEach(t),mOr=i(ni),Qr=n(ni,"DIV",{class:!0});var si=s(Qr);T(Ax.$$.fragment,si),gOr=i(si),f5e=n(si,"P",{});var ikt=s(f5e);hOr=r(ikt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),ikt.forEach(t),pOr=i(si),Mn=n(si,"P",{});var y6=s(Mn);_Or=r(y6,"The model class to instantiate is selected based on the "),m5e=n(y6,"CODE",{});var dkt=s(m5e);uOr=r(dkt,"model_type"),dkt.forEach(t),bOr=r(y6,` property of the config object (either
passed as an argument or loaded from `),g5e=n(y6,"CODE",{});var ckt=s(g5e);vOr=r(ckt,"pretrained_model_name_or_path"),ckt.forEach(t),FOr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h5e=n(y6,"CODE",{});var fkt=s(h5e);TOr=r(fkt,"pretrained_model_name_or_path"),fkt.forEach(t),MOr=r(y6,":"),y6.forEach(t),EOr=i(si),Oe=n(si,"UL",{});var To=s(Oe);J0=n(To,"LI",{});var kqe=s(J0);p5e=n(kqe,"STRONG",{});var mkt=s(p5e);COr=r(mkt,"albert"),mkt.forEach(t),wOr=r(kqe," \u2014 "),uZ=n(kqe,"A",{href:!0});var gkt=s(uZ);AOr=r(gkt,"FlaxAlbertForMultipleChoice"),gkt.forEach(t),yOr=r(kqe," (ALBERT model)"),kqe.forEach(t),LOr=i(To),Y0=n(To,"LI",{});var Sqe=s(Y0);_5e=n(Sqe,"STRONG",{});var hkt=s(_5e);xOr=r(hkt,"bert"),hkt.forEach(t),$Or=r(Sqe," \u2014 "),bZ=n(Sqe,"A",{href:!0});var pkt=s(bZ);kOr=r(pkt,"FlaxBertForMultipleChoice"),pkt.forEach(t),SOr=r(Sqe," (BERT model)"),Sqe.forEach(t),ROr=i(To),K0=n(To,"LI",{});var Rqe=s(K0);u5e=n(Rqe,"STRONG",{});var _kt=s(u5e);POr=r(_kt,"big_bird"),_kt.forEach(t),BOr=r(Rqe," \u2014 "),vZ=n(Rqe,"A",{href:!0});var ukt=s(vZ);IOr=r(ukt,"FlaxBigBirdForMultipleChoice"),ukt.forEach(t),NOr=r(Rqe," (BigBird model)"),Rqe.forEach(t),qOr=i(To),Z0=n(To,"LI",{});var Pqe=s(Z0);b5e=n(Pqe,"STRONG",{});var bkt=s(b5e);jOr=r(bkt,"distilbert"),bkt.forEach(t),DOr=r(Pqe," \u2014 "),FZ=n(Pqe,"A",{href:!0});var vkt=s(FZ);GOr=r(vkt,"FlaxDistilBertForMultipleChoice"),vkt.forEach(t),OOr=r(Pqe," (DistilBERT model)"),Pqe.forEach(t),VOr=i(To),ew=n(To,"LI",{});var Bqe=s(ew);v5e=n(Bqe,"STRONG",{});var Fkt=s(v5e);XOr=r(Fkt,"electra"),Fkt.forEach(t),zOr=r(Bqe," \u2014 "),TZ=n(Bqe,"A",{href:!0});var Tkt=s(TZ);WOr=r(Tkt,"FlaxElectraForMultipleChoice"),Tkt.forEach(t),QOr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),HOr=i(To),ow=n(To,"LI",{});var Iqe=s(ow);F5e=n(Iqe,"STRONG",{});var Mkt=s(F5e);UOr=r(Mkt,"roberta"),Mkt.forEach(t),JOr=r(Iqe," \u2014 "),MZ=n(Iqe,"A",{href:!0});var Ekt=s(MZ);YOr=r(Ekt,"FlaxRobertaForMultipleChoice"),Ekt.forEach(t),KOr=r(Iqe," (RoBERTa model)"),Iqe.forEach(t),ZOr=i(To),rw=n(To,"LI",{});var Nqe=s(rw);T5e=n(Nqe,"STRONG",{});var Ckt=s(T5e);eVr=r(Ckt,"roformer"),Ckt.forEach(t),oVr=r(Nqe," \u2014 "),EZ=n(Nqe,"A",{href:!0});var wkt=s(EZ);rVr=r(wkt,"FlaxRoFormerForMultipleChoice"),wkt.forEach(t),tVr=r(Nqe," (RoFormer model)"),Nqe.forEach(t),aVr=i(To),tw=n(To,"LI",{});var qqe=s(tw);M5e=n(qqe,"STRONG",{});var Akt=s(M5e);nVr=r(Akt,"xlm-roberta"),Akt.forEach(t),sVr=r(qqe," \u2014 "),CZ=n(qqe,"A",{href:!0});var ykt=s(CZ);lVr=r(ykt,"FlaxXLMRobertaForMultipleChoice"),ykt.forEach(t),iVr=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),To.forEach(t),dVr=i(si),T(aw.$$.fragment,si),si.forEach(t),ni.forEach(t),DDe=i(f),af=n(f,"H2",{class:!0});var QOe=s(af);nw=n(QOe,"A",{id:!0,class:!0,href:!0});var Lkt=s(nw);E5e=n(Lkt,"SPAN",{});var xkt=s(E5e);T(yx.$$.fragment,xkt),xkt.forEach(t),Lkt.forEach(t),cVr=i(QOe),C5e=n(QOe,"SPAN",{});var $kt=s(C5e);fVr=r($kt,"FlaxAutoModelForNextSentencePrediction"),$kt.forEach(t),QOe.forEach(t),GDe=i(f),Fr=n(f,"DIV",{class:!0});var li=s(Fr);T(Lx.$$.fragment,li),mVr=i(li),nf=n(li,"P",{});var Coe=s(nf);gVr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),wZ=n(Coe,"A",{href:!0});var kkt=s(wZ);hVr=r(kkt,"from_pretrained()"),kkt.forEach(t),pVr=r(Coe," class method or the "),AZ=n(Coe,"A",{href:!0});var Skt=s(AZ);_Vr=r(Skt,"from_config()"),Skt.forEach(t),uVr=r(Coe,` class
method.`),Coe.forEach(t),bVr=i(li),xx=n(li,"P",{});var HOe=s(xx);vVr=r(HOe,"This class cannot be instantiated directly using "),w5e=n(HOe,"CODE",{});var Rkt=s(w5e);FVr=r(Rkt,"__init__()"),Rkt.forEach(t),TVr=r(HOe," (throws an error)."),HOe.forEach(t),MVr=i(li),Yt=n(li,"DIV",{class:!0});var L6=s(Yt);T($x.$$.fragment,L6),EVr=i(L6),A5e=n(L6,"P",{});var Pkt=s(A5e);CVr=r(Pkt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Pkt.forEach(t),wVr=i(L6),sf=n(L6,"P",{});var woe=s(sf);AVr=r(woe,`Note:
Loading a model from its configuration file does `),y5e=n(woe,"STRONG",{});var Bkt=s(y5e);yVr=r(Bkt,"not"),Bkt.forEach(t),LVr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(woe,"A",{href:!0});var Ikt=s(yZ);xVr=r(Ikt,"from_pretrained()"),Ikt.forEach(t),$Vr=r(woe," to load the model weights."),woe.forEach(t),kVr=i(L6),T(sw.$$.fragment,L6),L6.forEach(t),SVr=i(li),Hr=n(li,"DIV",{class:!0});var ii=s(Hr);T(kx.$$.fragment,ii),RVr=i(ii),L5e=n(ii,"P",{});var Nkt=s(L5e);PVr=r(Nkt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Nkt.forEach(t),BVr=i(ii),En=n(ii,"P",{});var x6=s(En);IVr=r(x6,"The model class to instantiate is selected based on the "),x5e=n(x6,"CODE",{});var qkt=s(x5e);NVr=r(qkt,"model_type"),qkt.forEach(t),qVr=r(x6,` property of the config object (either
passed as an argument or loaded from `),$5e=n(x6,"CODE",{});var jkt=s($5e);jVr=r(jkt,"pretrained_model_name_or_path"),jkt.forEach(t),DVr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(x6,"CODE",{});var Dkt=s(k5e);GVr=r(Dkt,"pretrained_model_name_or_path"),Dkt.forEach(t),OVr=r(x6,":"),x6.forEach(t),VVr=i(ii),S5e=n(ii,"UL",{});var Gkt=s(S5e);lw=n(Gkt,"LI",{});var jqe=s(lw);R5e=n(jqe,"STRONG",{});var Okt=s(R5e);XVr=r(Okt,"bert"),Okt.forEach(t),zVr=r(jqe," \u2014 "),LZ=n(jqe,"A",{href:!0});var Vkt=s(LZ);WVr=r(Vkt,"FlaxBertForNextSentencePrediction"),Vkt.forEach(t),QVr=r(jqe," (BERT model)"),jqe.forEach(t),Gkt.forEach(t),HVr=i(ii),T(iw.$$.fragment,ii),ii.forEach(t),li.forEach(t),ODe=i(f),lf=n(f,"H2",{class:!0});var UOe=s(lf);dw=n(UOe,"A",{id:!0,class:!0,href:!0});var Xkt=s(dw);P5e=n(Xkt,"SPAN",{});var zkt=s(P5e);T(Sx.$$.fragment,zkt),zkt.forEach(t),Xkt.forEach(t),UVr=i(UOe),B5e=n(UOe,"SPAN",{});var Wkt=s(B5e);JVr=r(Wkt,"FlaxAutoModelForImageClassification"),Wkt.forEach(t),UOe.forEach(t),VDe=i(f),Tr=n(f,"DIV",{class:!0});var di=s(Tr);T(Rx.$$.fragment,di),YVr=i(di),df=n(di,"P",{});var Aoe=s(df);KVr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),xZ=n(Aoe,"A",{href:!0});var Qkt=s(xZ);ZVr=r(Qkt,"from_pretrained()"),Qkt.forEach(t),eXr=r(Aoe," class method or the "),$Z=n(Aoe,"A",{href:!0});var Hkt=s($Z);oXr=r(Hkt,"from_config()"),Hkt.forEach(t),rXr=r(Aoe,` class
method.`),Aoe.forEach(t),tXr=i(di),Px=n(di,"P",{});var JOe=s(Px);aXr=r(JOe,"This class cannot be instantiated directly using "),I5e=n(JOe,"CODE",{});var Ukt=s(I5e);nXr=r(Ukt,"__init__()"),Ukt.forEach(t),sXr=r(JOe," (throws an error)."),JOe.forEach(t),lXr=i(di),Kt=n(di,"DIV",{class:!0});var $6=s(Kt);T(Bx.$$.fragment,$6),iXr=i($6),N5e=n($6,"P",{});var Jkt=s(N5e);dXr=r(Jkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Jkt.forEach(t),cXr=i($6),cf=n($6,"P",{});var yoe=s(cf);fXr=r(yoe,`Note:
Loading a model from its configuration file does `),q5e=n(yoe,"STRONG",{});var Ykt=s(q5e);mXr=r(Ykt,"not"),Ykt.forEach(t),gXr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),kZ=n(yoe,"A",{href:!0});var Kkt=s(kZ);hXr=r(Kkt,"from_pretrained()"),Kkt.forEach(t),pXr=r(yoe," to load the model weights."),yoe.forEach(t),_Xr=i($6),T(cw.$$.fragment,$6),$6.forEach(t),uXr=i(di),Ur=n(di,"DIV",{class:!0});var ci=s(Ur);T(Ix.$$.fragment,ci),bXr=i(ci),j5e=n(ci,"P",{});var Zkt=s(j5e);vXr=r(Zkt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Zkt.forEach(t),FXr=i(ci),Cn=n(ci,"P",{});var k6=s(Cn);TXr=r(k6,"The model class to instantiate is selected based on the "),D5e=n(k6,"CODE",{});var eSt=s(D5e);MXr=r(eSt,"model_type"),eSt.forEach(t),EXr=r(k6,` property of the config object (either
passed as an argument or loaded from `),G5e=n(k6,"CODE",{});var oSt=s(G5e);CXr=r(oSt,"pretrained_model_name_or_path"),oSt.forEach(t),wXr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O5e=n(k6,"CODE",{});var rSt=s(O5e);AXr=r(rSt,"pretrained_model_name_or_path"),rSt.forEach(t),yXr=r(k6,":"),k6.forEach(t),LXr=i(ci),Nx=n(ci,"UL",{});var YOe=s(Nx);fw=n(YOe,"LI",{});var Dqe=s(fw);V5e=n(Dqe,"STRONG",{});var tSt=s(V5e);xXr=r(tSt,"beit"),tSt.forEach(t),$Xr=r(Dqe," \u2014 "),SZ=n(Dqe,"A",{href:!0});var aSt=s(SZ);kXr=r(aSt,"FlaxBeitForImageClassification"),aSt.forEach(t),SXr=r(Dqe," (BEiT model)"),Dqe.forEach(t),RXr=i(YOe),mw=n(YOe,"LI",{});var Gqe=s(mw);X5e=n(Gqe,"STRONG",{});var nSt=s(X5e);PXr=r(nSt,"vit"),nSt.forEach(t),BXr=r(Gqe," \u2014 "),RZ=n(Gqe,"A",{href:!0});var sSt=s(RZ);IXr=r(sSt,"FlaxViTForImageClassification"),sSt.forEach(t),NXr=r(Gqe," (ViT model)"),Gqe.forEach(t),YOe.forEach(t),qXr=i(ci),T(gw.$$.fragment,ci),ci.forEach(t),di.forEach(t),XDe=i(f),ff=n(f,"H2",{class:!0});var KOe=s(ff);hw=n(KOe,"A",{id:!0,class:!0,href:!0});var lSt=s(hw);z5e=n(lSt,"SPAN",{});var iSt=s(z5e);T(qx.$$.fragment,iSt),iSt.forEach(t),lSt.forEach(t),jXr=i(KOe),W5e=n(KOe,"SPAN",{});var dSt=s(W5e);DXr=r(dSt,"FlaxAutoModelForVision2Seq"),dSt.forEach(t),KOe.forEach(t),zDe=i(f),Mr=n(f,"DIV",{class:!0});var fi=s(Mr);T(jx.$$.fragment,fi),GXr=i(fi),mf=n(fi,"P",{});var Loe=s(mf);OXr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PZ=n(Loe,"A",{href:!0});var cSt=s(PZ);VXr=r(cSt,"from_pretrained()"),cSt.forEach(t),XXr=r(Loe," class method or the "),BZ=n(Loe,"A",{href:!0});var fSt=s(BZ);zXr=r(fSt,"from_config()"),fSt.forEach(t),WXr=r(Loe,` class
method.`),Loe.forEach(t),QXr=i(fi),Dx=n(fi,"P",{});var ZOe=s(Dx);HXr=r(ZOe,"This class cannot be instantiated directly using "),Q5e=n(ZOe,"CODE",{});var mSt=s(Q5e);UXr=r(mSt,"__init__()"),mSt.forEach(t),JXr=r(ZOe," (throws an error)."),ZOe.forEach(t),YXr=i(fi),Zt=n(fi,"DIV",{class:!0});var S6=s(Zt);T(Gx.$$.fragment,S6),KXr=i(S6),H5e=n(S6,"P",{});var gSt=s(H5e);ZXr=r(gSt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),gSt.forEach(t),ezr=i(S6),gf=n(S6,"P",{});var xoe=s(gf);ozr=r(xoe,`Note:
Loading a model from its configuration file does `),U5e=n(xoe,"STRONG",{});var hSt=s(U5e);rzr=r(hSt,"not"),hSt.forEach(t),tzr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IZ=n(xoe,"A",{href:!0});var pSt=s(IZ);azr=r(pSt,"from_pretrained()"),pSt.forEach(t),nzr=r(xoe," to load the model weights."),xoe.forEach(t),szr=i(S6),T(pw.$$.fragment,S6),S6.forEach(t),lzr=i(fi),Jr=n(fi,"DIV",{class:!0});var mi=s(Jr);T(Ox.$$.fragment,mi),izr=i(mi),J5e=n(mi,"P",{});var _St=s(J5e);dzr=r(_St,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_St.forEach(t),czr=i(mi),wn=n(mi,"P",{});var R6=s(wn);fzr=r(R6,"The model class to instantiate is selected based on the "),Y5e=n(R6,"CODE",{});var uSt=s(Y5e);mzr=r(uSt,"model_type"),uSt.forEach(t),gzr=r(R6,` property of the config object (either
passed as an argument or loaded from `),K5e=n(R6,"CODE",{});var bSt=s(K5e);hzr=r(bSt,"pretrained_model_name_or_path"),bSt.forEach(t),pzr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z5e=n(R6,"CODE",{});var vSt=s(Z5e);_zr=r(vSt,"pretrained_model_name_or_path"),vSt.forEach(t),uzr=r(R6,":"),R6.forEach(t),bzr=i(mi),e3e=n(mi,"UL",{});var FSt=s(e3e);_w=n(FSt,"LI",{});var Oqe=s(_w);o3e=n(Oqe,"STRONG",{});var TSt=s(o3e);vzr=r(TSt,"vision-encoder-decoder"),TSt.forEach(t),Fzr=r(Oqe," \u2014 "),NZ=n(Oqe,"A",{href:!0});var MSt=s(NZ);Tzr=r(MSt,"FlaxVisionEncoderDecoderModel"),MSt.forEach(t),Mzr=r(Oqe," (Vision Encoder decoder model)"),Oqe.forEach(t),FSt.forEach(t),Ezr=i(mi),T(uw.$$.fragment,mi),mi.forEach(t),fi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(APt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer"),c(vi,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(Tf,"id","extending-the-auto-classes"),c(Tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tf,"href","#extending-the-auto-classes"),c(Fi,"class","relative group"),c(Ef,"id","transformers.AutoConfig"),c(Ef,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ef,"href","#transformers.AutoConfig"),c(Ti,"class","relative group"),c(dk,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ck,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig"),c(fk,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig"),c(mk,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig"),c(gk,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig"),c(hk,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(pk,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig"),c(_k,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(uk,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(bk,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(vk,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig"),c(Fk,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig"),c(Tk,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig"),c(Mk,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig"),c(Ek,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig"),c(Ck,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig"),c(wk,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig"),c(Ak,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(yk,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Lk,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(xk,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig"),c($k,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(kk,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Sk,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig"),c(Rk,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig"),c(Pk,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig"),c(Bk,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig"),c(Ik,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig"),c(Nk,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig"),c(qk,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(jk,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig"),c(Dk,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig"),c(Gk,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig"),c(Ok,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig"),c(Vk,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig"),c(Xk,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig"),c(zk,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config"),c(Wk,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Qk,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(Hk,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig"),c(Uk,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig"),c(Jk,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig"),c(Yk,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Kk,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Zk,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(eS,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(oS,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig"),c(rS,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig"),c(tS,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig"),c(aS,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig"),c(nS,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig"),c(sS,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config"),c(lS,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig"),c(iS,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(dS,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig"),c(cS,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(fS,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(mS,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig"),c(gS,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config"),c(hS,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(pS,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(_S,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig"),c(uS,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig"),c(bS,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig"),c(vS,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig"),c(FS,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(TS,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(MS,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(ES,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagConfig"),c(CS,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmConfig"),c(wS,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig"),c(AS,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig"),c(yS,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig"),c(LS,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig"),c(xS,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig"),c($S,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig"),c(kS,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig"),c(SS,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig"),c(RS,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig"),c(PS,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig"),c(BS,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(IS,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(NS,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(qS,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig"),c(jS,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(DS,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig"),c(GS,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config"),c(OS,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig"),c(VS,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(XS,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(zS,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig"),c(WS,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(QS,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(HS,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig"),c(US,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig"),c(JS,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(YS,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(KS,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(ZS,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig"),c(eR,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(oR,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(rR,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(tR,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig"),c(aR,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig"),c(nR,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig"),c(sR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(lR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(iR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(dR,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig"),c(cR,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig"),c(fR,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lg,"id","transformers.AutoTokenizer"),c(Lg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lg,"href","#transformers.AutoTokenizer"),c(Ei,"class","relative group"),c(mR,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(gR,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(hR,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(pR,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizer"),c(_R,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizerFast"),c(uR,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizer"),c(bR,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(vR,"href","/docs/transformers/pr_17427/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(FR,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(TR,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(MR,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(ER,"href","/docs/transformers/pr_17427/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(CR,"href","/docs/transformers/pr_17427/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(wR,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(AR,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(yR,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(LR,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(xR,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c($R,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(kR,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(SR,"href","/docs/transformers/pr_17427/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(RR,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizer"),c(PR,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(BR,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineTokenizer"),c(IR,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizer"),c(NR,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(qR,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(jR,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizer"),c(GR,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(OR,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(VR,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XR,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zR,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizer"),c(WR,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(QR,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(HR,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(UR,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(JR,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(KR,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizer"),c(eP,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(oP,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(rP,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizer"),c(tP,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(aP,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(nP,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizer"),c(sP,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(lP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(iP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(dP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(cP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(fP,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(mP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(gP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(hP,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizer"),c(pP,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(_P,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(uP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(FP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(TP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(MP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(EP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(CP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(wP,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(AP,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(yP,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizer"),c(LP,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizerFast"),c(xP,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizer"),c($P,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(kP,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeTokenizer"),c(SP,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(RP,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(BP,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianTokenizer"),c(IP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizer"),c(NP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(qP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(jP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(DP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(GP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(OP,"href","/docs/transformers/pr_17427/en/model_doc/mluke#transformers.MLukeTokenizer"),c(VP,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(XP,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(zP,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(WP,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(QP,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(HP,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(UP,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(JP,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(KP,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eB,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(oB,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(rB,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(tB,"href","/docs/transformers/pr_17427/en/model_doc/phobert#transformers.PhobertTokenizer"),c(aB,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartTokenizer"),c(nB,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(sB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(lB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagTokenizer"),c(dB,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizer"),c(cB,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizerFast"),c(fB,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizer"),c(mB,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(gB,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizer"),c(hB,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(pB,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(_B,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(uB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(bB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(vB,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(FB,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(TB,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(MB,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(EB,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizer"),c(CB,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(wB,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(AB,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(LB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(xB,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasTokenizer"),c($B,"href","/docs/transformers/pr_17427/en/model_doc/tapex#transformers.TapexTokenizer"),c(kB,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(SB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(RB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(BB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(IB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(NB,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizer"),c(qB,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(jB,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMTokenizer"),c(DB,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(GB,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(OB,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(VB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(XB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(zB,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(WB,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(QB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(HB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ih,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"id","transformers.AutoFeatureExtractor"),c(dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dh,"href","#transformers.AutoFeatureExtractor"),c(Ci,"class","relative group"),c(UB,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(JB,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(YB,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(eI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oI,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(iI,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(cI,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(fI,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(mI,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(gI,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(hI,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(pI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_I,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(uI,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(bI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(vI,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(TI,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MI,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(EI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(CI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wI,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vh,"id","transformers.AutoProcessor"),c(Vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vh,"href","#transformers.AutoProcessor"),c(wi,"class","relative group"),c(AI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(yI,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPProcessor"),c(LI,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(xI,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c($I,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(kI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(PI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(BI,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRProcessor"),c(II,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qI,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltProcessor"),c(jI,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(DI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cp,"id","transformers.AutoModel"),c(cp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cp,"href","#transformers.AutoModel"),c(yi,"class","relative group"),c(VI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WI,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel"),c(QI,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel"),c(HI,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel"),c(UI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(JI,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(YI,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel"),c(KI,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ZI,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(eN,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(oN,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel"),c(rN,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel"),c(tN,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel"),c(aN,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel"),c(nN,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel"),c(sN,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel"),c(lN,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel"),c(iN,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(dN,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(cN,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(fN,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel"),c(mN,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(gN,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(hN,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel"),c(pN,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel"),c(_N,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel"),c(uN,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(bN,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel"),c(vN,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel"),c(FN,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel"),c(TN,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel"),c(MN,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel"),c(EN,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel"),c(CN,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel"),c(wN,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel"),c(AN,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel"),c(yN,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model"),c(LN,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(xN,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c($N,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel"),c(kN,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel"),c(SN,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel"),c(RN,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(PN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(BN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(IN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(NN,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel"),c(qN,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitModel"),c(jN,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel"),c(DN,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel"),c(GN,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel"),c(ON,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model"),c(VN,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel"),c(XN,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel"),c(zN,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel"),c(WN,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(QN,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel"),c(HN,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel"),c(UN,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model"),c(JN,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel"),c(YN,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(KN,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel"),c(ZN,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel"),c(eq,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel"),c(oq,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel"),c(rq,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel"),c(tq,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(aq,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel"),c(nq,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel"),c(sq,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel"),c(lq,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel"),c(iq,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel"),c(dq,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(cq,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel"),c(fq,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel"),c(mq,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel"),c(gq,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel"),c(hq,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel"),c(pq,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_q,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel"),c(uq,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(bq,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel"),c(vq,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model"),c(Fq,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel"),c(Tq,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Mq,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Eq,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Cq,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(wq,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel"),c(Aq,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel"),c(yq,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Lq,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel"),c(xq,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel"),c($q,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(kq,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Sq,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Rq,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel"),c(Pq,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel"),c(Bq,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel"),c(Iq,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Nq,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(qq,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(jq,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel"),c(Dq,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel"),c(Gq,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iu,"id","transformers.AutoModelForPreTraining"),c(iu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iu,"href","#transformers.AutoModelForPreTraining"),c($i,"class","relative group"),c(Oq,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vq,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xq,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zq,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Wq,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Qq,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining"),c(Hq,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Uq,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Yq,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Zq,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ej,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rj,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tj,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining"),c(aj,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nj,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sj,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lj,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(ij,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dj,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cj,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(fj,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(mj,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gj,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hj,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(pj,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_j,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(uj,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bj,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(vj,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Tj,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Mj,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Ej,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Cj,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(wj,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Aj,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(yj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(Lj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(xj,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($j,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Sj,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e2,"id","transformers.AutoModelForCausalLM"),c(e2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e2,"href","#transformers.AutoModelForCausalLM"),c(Ri,"class","relative group"),c(Rj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ij,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM"),c(Nj,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel"),c(qj,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(jj,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Dj,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Gj,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Oj,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(Vj,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(Xj,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(zj,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Wj,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Qj,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Hj,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Uj,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Jj,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Yj,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM"),c(Kj,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Zj,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(eD,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oD,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM"),c(rD,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(tD,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(aD,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(nD,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(sD,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(lD,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(iD,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(dD,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(cD,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fD,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(mD,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(gD,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(hD,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_D,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(uD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(bD,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForMaskedLM"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForMaskedLM"),c(Ii,"class","relative group"),c(vD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MD,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(ED,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CD,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM"),c(wD,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(AD,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(yD,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(LD,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(xD,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c($D,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(kD,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(SD,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(RD,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(PD,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(BD,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ID,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(ND,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qD,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(jD,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeForMaskedLM"),c(DD,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(GD,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(OD,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(VD,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(XD,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(zD,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(WD,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(QD,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(HD,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(UD,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(JD,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(YD,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(KD,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(ZD,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(eG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(oG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(rG,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForSeq2SeqLM"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForSeq2SeqLM"),c(ji,"class","relative group"),c(tG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sG,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(iG,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(dG,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(cG,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(fG,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(mG,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(gG,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(hG,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel"),c(pG,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(uG,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(bG,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(vG,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(FG,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q1,"id","transformers.AutoModelForSequenceClassification"),c(Q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q1,"href","#transformers.AutoModelForSequenceClassification"),c(Oi,"class","relative group"),c(MG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wG,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c($G,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(aO,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(nO,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(sO,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(lO,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(iO,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(dO,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(cO,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(fO,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(mO,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(gO,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(hO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(pO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(uO,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X7,"id","transformers.AutoModelForMultipleChoice"),c(X7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X7,"href","#transformers.AutoModelForMultipleChoice"),c(zi,"class","relative group"),c(bO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TO,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c($O,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(IO,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(NO,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(qO,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(jO,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(DO,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(GO,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(OO,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(VO,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(XO,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(zO,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(WO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(QO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(HO,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(UO,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eb,"id","transformers.AutoModelForNextSentencePrediction"),c(Eb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Hi,"class","relative group"),c(JO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZO,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(eV,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(oV,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(rV,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(tV,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sb,"id","transformers.AutoModelForTokenClassification"),c(Sb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sb,"href","#transformers.AutoModelForTokenClassification"),c(Yi,"class","relative group"),c(aV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lV,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(iV,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(cV,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(fV,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification"),c(mV,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(gV,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(hV,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(pV,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(_V,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(uV,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(bV,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(FV,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(TV,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(MV,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(EV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(CV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(wV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(AV,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yV,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(LV,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(xV,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($V,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(kV,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(SV,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(RV,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(PV,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(BV,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(IV,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(NV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(qV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(jV,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(DV,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_4,"id","transformers.AutoModelForQuestionAnswering"),c(_4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_4,"href","#transformers.AutoModelForQuestionAnswering"),c(ed,"class","relative group"),c(GV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(aX,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(mX,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(pX,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(_X,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(uX,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(bX,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(vX,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(FX,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(TX,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(MX,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(EX,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(CX,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(wX,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(AX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(yX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(LX,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(xX,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForTableQuestionAnswering"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(td,"class","relative group"),c($X,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RX,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fv,"id","transformers.AutoModelForImageClassification"),c(fv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fv,"href","#transformers.AutoModelForImageClassification"),c(sd,"class","relative group"),c(PX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NX,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification"),c(qX,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(jX,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification"),c(DX,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(GX,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification"),c(OX,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(VX,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(XX,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassification"),c(zX,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(WX,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(QX,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(HX,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(UX,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(JX,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(YX,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(KX,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(ZX,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification"),c(ez,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification"),c(oz,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForVision2Seq"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForVision2Seq"),c(dd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForAudioClassification"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForAudioClassification"),c(md,"class","relative group"),c(sz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(cz,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(fz,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(mz,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(pz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(_z,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(uz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zv,"id","transformers.AutoModelForAudioFrameClassification"),c(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zv,"href","#transformers.AutoModelForAudioFrameClassification"),c(pd,"class","relative group"),c(bz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(Mz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(Ez,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(Cz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(wz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eF,"id","transformers.AutoModelForCTC"),c(eF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eF,"href","#transformers.AutoModelForCTC"),c(bd,"class","relative group"),c(Az,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Lz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c($z,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC"),c(kz,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC"),c(Sz,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC"),c(Rz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(Pz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(Bz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Iz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Nz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(gF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Td,"class","relative group"),c(qz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Oz,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForAudioXVector"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForAudioXVector"),c(Cd,"class","relative group"),c(Vz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(Qz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Hz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Uz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Jz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LF,"id","transformers.AutoModelForMaskedImageModeling"),c(LF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LF,"href","#transformers.AutoModelForMaskedImageModeling"),c(yd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(oW,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(rW,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BF,"id","transformers.AutoModelForObjectDetection"),c(BF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BF,"href","#transformers.AutoModelForObjectDetection"),c(kd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection"),c(lW,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForImageSegmentation"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForImageSegmentation"),c(Pd,"class","relative group"),c(iW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WF,"id","transformers.AutoModelForSemanticSegmentation"),c(WF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Nd,"class","relative group"),c(mW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pW,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(_W,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(uW,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(bW,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.AutoModelForInstanceSegmentation"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Dd,"class","relative group"),c(vW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MW,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nT,"id","transformers.TFAutoModel"),c(nT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nT,"href","#transformers.TFAutoModel"),c(Vd,"class","relative group"),c(EW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AW,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel"),c(yW,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel"),c(LW,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel"),c(xW,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c($W,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(kW,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel"),c(SW,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel"),c(RW,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel"),c(PW,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel"),c(BW,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel"),c(IW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(NW,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel"),c(qW,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(jW,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(DW,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(GW,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel"),c(OW,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(VW,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel"),c(XW,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(zW,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model"),c(WW,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel"),c(QW,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel"),c(HW,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(UW,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel"),c(JW,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel"),c(YW,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel"),c(KW,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel"),c(ZW,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel"),c(eQ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(oQ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel"),c(rQ,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model"),c(tQ,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(aQ,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTModel"),c(nQ,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel"),c(sQ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel"),c(lQ,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel"),c(iQ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel"),c(dQ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cQ,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(fQ,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel"),c(mQ,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model"),c(gQ,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel"),c(hQ,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(pQ,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel"),c(_Q,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(uQ,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel"),c(vQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FQ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oM,"id","transformers.TFAutoModelForPreTraining"),c(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oM,"href","#transformers.TFAutoModelForPreTraining"),c(Wd,"class","relative group"),c(TQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wQ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AQ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining"),c(yQ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(LQ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xQ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kQ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SQ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RQ,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PQ,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BQ,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IQ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(NQ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qQ,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DQ,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GQ,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OQ,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(WQ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yM,"id","transformers.TFAutoModelForCausalLM"),c(yM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yM,"href","#transformers.TFAutoModelForCausalLM"),c(Ud,"class","relative group"),c(QQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JQ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YQ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KQ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZQ,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eH,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oH,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rH,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(tH,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aH,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nH,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sH,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lH,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iH,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VM,"id","transformers.TFAutoModelForImageClassification"),c(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VM,"href","#transformers.TFAutoModelForImageClassification"),c(Kd,"class","relative group"),c(dH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gH,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(hH,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(pH,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(_H,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YM,"id","transformers.TFAutoModelForMaskedLM"),c(YM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YM,"href","#transformers.TFAutoModelForMaskedLM"),c(oc,"class","relative group"),c(uH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(TH,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(MH,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(EH,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(CH,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(wH,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(AH,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(yH,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LH,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xH,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c($H,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kH,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(SH,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(RH,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PH,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(BH,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IH,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(NH,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qH,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jH,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(FE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(ac,"class","relative group"),c(DH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(XH,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(zH,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(WH,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QH,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(HH,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel"),c(UH,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(JH,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(YH,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(KH,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.TFAutoModelForSequenceClassification"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.TFAutoModelForSequenceClassification"),c(lc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(cU,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(fU,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(mU,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(gU,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(hU,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(pU,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(_U,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(uU,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(bU,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(vU,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(FU,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(TU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(MU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(EU,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(CU,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(wU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(AU,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(yU,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForMultipleChoice"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForMultipleChoice"),c(cc,"class","relative group"),c(LU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($U,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kU,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(SU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(RU,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(PU,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(BU,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(IU,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(NU,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(qU,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(jU,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(DU,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(GU,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(OU,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(VU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(XU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(zU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(WU,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QU,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(LC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(gc,"class","relative group"),c(HU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(KU,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(_c,"class","relative group"),c(ZU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rJ,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.TFAutoModelForTokenClassification"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.TFAutoModelForTokenClassification"),c(vc,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(iJ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(dJ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(cJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(fJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(mJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(gJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(hJ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(_J,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(uJ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(bJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(vJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(FJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(TJ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(MJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(EJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(CJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(wJ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s5,"id","transformers.TFAutoModelForQuestionAnswering"),c(s5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Mc,"class","relative group"),c(AJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xJ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(kJ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(SJ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(RJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(PJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(BJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(IJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(NJ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(qJ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(jJ,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(DJ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(GJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(OJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(VJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(XJ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(zJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(WJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(HJ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x5,"id","transformers.TFAutoModelForVision2Seq"),c(x5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x5,"href","#transformers.TFAutoModelForVision2Seq"),c(wc,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(R5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Lc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N5,"id","transformers.FlaxAutoModel"),c(N5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N5,"href","#transformers.FlaxAutoModel"),c(kc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel"),c(lY,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel"),c(iY,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel"),c(dY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel"),c(cY,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(fY,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(mY,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(gY,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel"),c(hY,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(pY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel"),c(_Y,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(uY,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(bY,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(vY,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel"),c(FY,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel"),c(TY,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model"),c(MY,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTModel"),c(EY,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(CY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(wY,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(AY,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model"),c(yY,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(LY,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel"),c(xY,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c($Y,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(kY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModelForCausalLM"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Pc,"class","relative group"),c(SY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(IY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(NY,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(qY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(jY,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(DY,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(GY,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(OY,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(VY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(XY,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w3,"id","transformers.FlaxAutoModelForPreTraining"),c(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Nc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(UY,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(YY,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(KY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ZY,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(eK,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(oK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(rK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(tK,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(nK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.FlaxAutoModelForMaskedLM"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Dc,"class","relative group"),c(sK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(cK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(mK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(gK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(hK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(pK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_K,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(uK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(bK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Vc,"class","relative group"),c(vK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(EK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(CK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(wK,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(AK,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(yK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LK,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(xK,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c($K,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Wc,"class","relative group"),c(kK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(BK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(IK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(NK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(qK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(jK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(DK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(GK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(OK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(VK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Uc,"class","relative group"),c(XK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(HK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(UK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(JK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(YK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(KK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ZK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(eZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(oZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(rZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.FlaxAutoModelForTokenClassification"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Kc,"class","relative group"),c(tZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sZ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(dZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(cZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(fZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(mZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(gZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H0,"id","transformers.FlaxAutoModelForMultipleChoice"),c(H0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H0,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(of,"class","relative group"),c(hZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(bZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(vZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(FZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(TZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(MZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(EZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(CZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(af,"class","relative group"),c(wZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForImageClassification"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForImageClassification"),c(lf,"class","relative group"),c(xZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($Z,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SZ,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(RZ,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForVision2Seq"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(ff,"class","relative group"),c(PZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NZ,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,gi),b(f,uf,u),b(f,tt,u),e(tt,hi),e(tt,pi),e(pi,P6),e(tt,bf),b(f,De,u),b(f,We,u),e(We,_i),e(We,yn),e(yn,B6),e(We,Ln),e(We,xn),e(xn,I6),e(We,ui),e(We,$n),e($n,N6),e(We,bi),b(f,vf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,tk),e(Ae,vi),e(vi,ak),e(Ae,nk),b(f,Eo,u),b(f,Aa,u),e(Aa,sk),e(Aa,Ff),e(Ff,lk),e(Aa,eVe),b(f,Vqe,u),b(f,Fi,u),e(Fi,Tf),e(Tf,$oe),M(q6,$oe,null),e(Fi,oVe),e(Fi,koe),e(koe,rVe),b(f,Xqe,u),b(f,kn,u),e(kn,tVe),e(kn,Soe),e(Soe,aVe),e(kn,nVe),e(kn,Roe),e(Roe,sVe),e(kn,lVe),b(f,zqe,u),M(j6,f,u),b(f,Wqe,u),b(f,ik,u),e(ik,iVe),b(f,Qqe,u),M(Mf,f,u),b(f,Hqe,u),b(f,Ti,u),e(Ti,Ef),e(Ef,Poe),M(D6,Poe,null),e(Ti,dVe),e(Ti,Boe),e(Boe,cVe),b(f,Uqe,u),b(f,Co,u),M(G6,Co,null),e(Co,fVe),e(Co,O6),e(O6,mVe),e(O6,dk),e(dk,gVe),e(O6,hVe),e(Co,pVe),e(Co,V6),e(V6,_Ve),e(V6,Ioe),e(Ioe,uVe),e(V6,bVe),e(Co,vVe),e(Co,Er),M(X6,Er,null),e(Er,FVe),e(Er,Noe),e(Noe,TVe),e(Er,MVe),e(Er,Mi),e(Mi,EVe),e(Mi,qoe),e(qoe,CVe),e(Mi,wVe),e(Mi,joe),e(joe,AVe),e(Mi,yVe),e(Er,LVe),e(Er,A),e(A,Cf),e(Cf,Doe),e(Doe,xVe),e(Cf,$Ve),e(Cf,ck),e(ck,kVe),e(Cf,SVe),e(A,RVe),e(A,wf),e(wf,Goe),e(Goe,PVe),e(wf,BVe),e(wf,fk),e(fk,IVe),e(wf,NVe),e(A,qVe),e(A,Af),e(Af,Ooe),e(Ooe,jVe),e(Af,DVe),e(Af,mk),e(mk,GVe),e(Af,OVe),e(A,VVe),e(A,yf),e(yf,Voe),e(Voe,XVe),e(yf,zVe),e(yf,gk),e(gk,WVe),e(yf,QVe),e(A,HVe),e(A,Lf),e(Lf,Xoe),e(Xoe,UVe),e(Lf,JVe),e(Lf,hk),e(hk,YVe),e(Lf,KVe),e(A,ZVe),e(A,xf),e(xf,zoe),e(zoe,eXe),e(xf,oXe),e(xf,pk),e(pk,rXe),e(xf,tXe),e(A,aXe),e(A,$f),e($f,Woe),e(Woe,nXe),e($f,sXe),e($f,_k),e(_k,lXe),e($f,iXe),e(A,dXe),e(A,kf),e(kf,Qoe),e(Qoe,cXe),e(kf,fXe),e(kf,uk),e(uk,mXe),e(kf,gXe),e(A,hXe),e(A,Sf),e(Sf,Hoe),e(Hoe,pXe),e(Sf,_Xe),e(Sf,bk),e(bk,uXe),e(Sf,bXe),e(A,vXe),e(A,Rf),e(Rf,Uoe),e(Uoe,FXe),e(Rf,TXe),e(Rf,vk),e(vk,MXe),e(Rf,EXe),e(A,CXe),e(A,Pf),e(Pf,Joe),e(Joe,wXe),e(Pf,AXe),e(Pf,Fk),e(Fk,yXe),e(Pf,LXe),e(A,xXe),e(A,Bf),e(Bf,Yoe),e(Yoe,$Xe),e(Bf,kXe),e(Bf,Tk),e(Tk,SXe),e(Bf,RXe),e(A,PXe),e(A,If),e(If,Koe),e(Koe,BXe),e(If,IXe),e(If,Mk),e(Mk,NXe),e(If,qXe),e(A,jXe),e(A,Nf),e(Nf,Zoe),e(Zoe,DXe),e(Nf,GXe),e(Nf,Ek),e(Ek,OXe),e(Nf,VXe),e(A,XXe),e(A,qf),e(qf,ere),e(ere,zXe),e(qf,WXe),e(qf,Ck),e(Ck,QXe),e(qf,HXe),e(A,UXe),e(A,jf),e(jf,ore),e(ore,JXe),e(jf,YXe),e(jf,wk),e(wk,KXe),e(jf,ZXe),e(A,eze),e(A,Df),e(Df,rre),e(rre,oze),e(Df,rze),e(Df,Ak),e(Ak,tze),e(Df,aze),e(A,nze),e(A,Gf),e(Gf,tre),e(tre,sze),e(Gf,lze),e(Gf,yk),e(yk,ize),e(Gf,dze),e(A,cze),e(A,Of),e(Of,are),e(are,fze),e(Of,mze),e(Of,Lk),e(Lk,gze),e(Of,hze),e(A,pze),e(A,Vf),e(Vf,nre),e(nre,_ze),e(Vf,uze),e(Vf,xk),e(xk,bze),e(Vf,vze),e(A,Fze),e(A,Xf),e(Xf,sre),e(sre,Tze),e(Xf,Mze),e(Xf,$k),e($k,Eze),e(Xf,Cze),e(A,wze),e(A,zf),e(zf,lre),e(lre,Aze),e(zf,yze),e(zf,kk),e(kk,Lze),e(zf,xze),e(A,$ze),e(A,Wf),e(Wf,ire),e(ire,kze),e(Wf,Sze),e(Wf,Sk),e(Sk,Rze),e(Wf,Pze),e(A,Bze),e(A,Qf),e(Qf,dre),e(dre,Ize),e(Qf,Nze),e(Qf,Rk),e(Rk,qze),e(Qf,jze),e(A,Dze),e(A,Hf),e(Hf,cre),e(cre,Gze),e(Hf,Oze),e(Hf,Pk),e(Pk,Vze),e(Hf,Xze),e(A,zze),e(A,Uf),e(Uf,fre),e(fre,Wze),e(Uf,Qze),e(Uf,Bk),e(Bk,Hze),e(Uf,Uze),e(A,Jze),e(A,Jf),e(Jf,mre),e(mre,Yze),e(Jf,Kze),e(Jf,Ik),e(Ik,Zze),e(Jf,eWe),e(A,oWe),e(A,Yf),e(Yf,gre),e(gre,rWe),e(Yf,tWe),e(Yf,Nk),e(Nk,aWe),e(Yf,nWe),e(A,sWe),e(A,Kf),e(Kf,hre),e(hre,lWe),e(Kf,iWe),e(Kf,qk),e(qk,dWe),e(Kf,cWe),e(A,fWe),e(A,Zf),e(Zf,pre),e(pre,mWe),e(Zf,gWe),e(Zf,jk),e(jk,hWe),e(Zf,pWe),e(A,_We),e(A,em),e(em,_re),e(_re,uWe),e(em,bWe),e(em,Dk),e(Dk,vWe),e(em,FWe),e(A,TWe),e(A,om),e(om,ure),e(ure,MWe),e(om,EWe),e(om,Gk),e(Gk,CWe),e(om,wWe),e(A,AWe),e(A,rm),e(rm,bre),e(bre,yWe),e(rm,LWe),e(rm,Ok),e(Ok,xWe),e(rm,$We),e(A,kWe),e(A,tm),e(tm,vre),e(vre,SWe),e(tm,RWe),e(tm,Vk),e(Vk,PWe),e(tm,BWe),e(A,IWe),e(A,am),e(am,Fre),e(Fre,NWe),e(am,qWe),e(am,Xk),e(Xk,jWe),e(am,DWe),e(A,GWe),e(A,nm),e(nm,Tre),e(Tre,OWe),e(nm,VWe),e(nm,zk),e(zk,XWe),e(nm,zWe),e(A,WWe),e(A,sm),e(sm,Mre),e(Mre,QWe),e(sm,HWe),e(sm,Wk),e(Wk,UWe),e(sm,JWe),e(A,YWe),e(A,lm),e(lm,Ere),e(Ere,KWe),e(lm,ZWe),e(lm,Qk),e(Qk,eQe),e(lm,oQe),e(A,rQe),e(A,im),e(im,Cre),e(Cre,tQe),e(im,aQe),e(im,Hk),e(Hk,nQe),e(im,sQe),e(A,lQe),e(A,dm),e(dm,wre),e(wre,iQe),e(dm,dQe),e(dm,Uk),e(Uk,cQe),e(dm,fQe),e(A,mQe),e(A,cm),e(cm,Are),e(Are,gQe),e(cm,hQe),e(cm,Jk),e(Jk,pQe),e(cm,_Qe),e(A,uQe),e(A,fm),e(fm,yre),e(yre,bQe),e(fm,vQe),e(fm,Yk),e(Yk,FQe),e(fm,TQe),e(A,MQe),e(A,mm),e(mm,Lre),e(Lre,EQe),e(mm,CQe),e(mm,Kk),e(Kk,wQe),e(mm,AQe),e(A,yQe),e(A,gm),e(gm,xre),e(xre,LQe),e(gm,xQe),e(gm,Zk),e(Zk,$Qe),e(gm,kQe),e(A,SQe),e(A,hm),e(hm,$re),e($re,RQe),e(hm,PQe),e(hm,eS),e(eS,BQe),e(hm,IQe),e(A,NQe),e(A,pm),e(pm,kre),e(kre,qQe),e(pm,jQe),e(pm,oS),e(oS,DQe),e(pm,GQe),e(A,OQe),e(A,_m),e(_m,Sre),e(Sre,VQe),e(_m,XQe),e(_m,rS),e(rS,zQe),e(_m,WQe),e(A,QQe),e(A,um),e(um,Rre),e(Rre,HQe),e(um,UQe),e(um,tS),e(tS,JQe),e(um,YQe),e(A,KQe),e(A,bm),e(bm,Pre),e(Pre,ZQe),e(bm,eHe),e(bm,aS),e(aS,oHe),e(bm,rHe),e(A,tHe),e(A,vm),e(vm,Bre),e(Bre,aHe),e(vm,nHe),e(vm,nS),e(nS,sHe),e(vm,lHe),e(A,iHe),e(A,Fm),e(Fm,Ire),e(Ire,dHe),e(Fm,cHe),e(Fm,sS),e(sS,fHe),e(Fm,mHe),e(A,gHe),e(A,Tm),e(Tm,Nre),e(Nre,hHe),e(Tm,pHe),e(Tm,lS),e(lS,_He),e(Tm,uHe),e(A,bHe),e(A,Mm),e(Mm,qre),e(qre,vHe),e(Mm,FHe),e(Mm,iS),e(iS,THe),e(Mm,MHe),e(A,EHe),e(A,Em),e(Em,jre),e(jre,CHe),e(Em,wHe),e(Em,dS),e(dS,AHe),e(Em,yHe),e(A,LHe),e(A,Cm),e(Cm,Dre),e(Dre,xHe),e(Cm,$He),e(Cm,cS),e(cS,kHe),e(Cm,SHe),e(A,RHe),e(A,wm),e(wm,Gre),e(Gre,PHe),e(wm,BHe),e(wm,fS),e(fS,IHe),e(wm,NHe),e(A,qHe),e(A,Am),e(Am,Ore),e(Ore,jHe),e(Am,DHe),e(Am,mS),e(mS,GHe),e(Am,OHe),e(A,VHe),e(A,ym),e(ym,Vre),e(Vre,XHe),e(ym,zHe),e(ym,gS),e(gS,WHe),e(ym,QHe),e(A,HHe),e(A,Lm),e(Lm,Xre),e(Xre,UHe),e(Lm,JHe),e(Lm,hS),e(hS,YHe),e(Lm,KHe),e(A,ZHe),e(A,xm),e(xm,zre),e(zre,eUe),e(xm,oUe),e(xm,pS),e(pS,rUe),e(xm,tUe),e(A,aUe),e(A,$m),e($m,Wre),e(Wre,nUe),e($m,sUe),e($m,_S),e(_S,lUe),e($m,iUe),e(A,dUe),e(A,km),e(km,Qre),e(Qre,cUe),e(km,fUe),e(km,uS),e(uS,mUe),e(km,gUe),e(A,hUe),e(A,Sm),e(Sm,Hre),e(Hre,pUe),e(Sm,_Ue),e(Sm,bS),e(bS,uUe),e(Sm,bUe),e(A,vUe),e(A,Rm),e(Rm,Ure),e(Ure,FUe),e(Rm,TUe),e(Rm,vS),e(vS,MUe),e(Rm,EUe),e(A,CUe),e(A,Pm),e(Pm,Jre),e(Jre,wUe),e(Pm,AUe),e(Pm,FS),e(FS,yUe),e(Pm,LUe),e(A,xUe),e(A,Bm),e(Bm,Yre),e(Yre,$Ue),e(Bm,kUe),e(Bm,TS),e(TS,SUe),e(Bm,RUe),e(A,PUe),e(A,Im),e(Im,Kre),e(Kre,BUe),e(Im,IUe),e(Im,MS),e(MS,NUe),e(Im,qUe),e(A,jUe),e(A,Nm),e(Nm,Zre),e(Zre,DUe),e(Nm,GUe),e(Nm,ES),e(ES,OUe),e(Nm,VUe),e(A,XUe),e(A,qm),e(qm,ete),e(ete,zUe),e(qm,WUe),e(qm,CS),e(CS,QUe),e(qm,HUe),e(A,UUe),e(A,jm),e(jm,ote),e(ote,JUe),e(jm,YUe),e(jm,wS),e(wS,KUe),e(jm,ZUe),e(A,eJe),e(A,Dm),e(Dm,rte),e(rte,oJe),e(Dm,rJe),e(Dm,AS),e(AS,tJe),e(Dm,aJe),e(A,nJe),e(A,Gm),e(Gm,tte),e(tte,sJe),e(Gm,lJe),e(Gm,yS),e(yS,iJe),e(Gm,dJe),e(A,cJe),e(A,Om),e(Om,ate),e(ate,fJe),e(Om,mJe),e(Om,LS),e(LS,gJe),e(Om,hJe),e(A,pJe),e(A,Vm),e(Vm,nte),e(nte,_Je),e(Vm,uJe),e(Vm,xS),e(xS,bJe),e(Vm,vJe),e(A,FJe),e(A,Xm),e(Xm,ste),e(ste,TJe),e(Xm,MJe),e(Xm,$S),e($S,EJe),e(Xm,CJe),e(A,wJe),e(A,zm),e(zm,lte),e(lte,AJe),e(zm,yJe),e(zm,kS),e(kS,LJe),e(zm,xJe),e(A,$Je),e(A,Wm),e(Wm,ite),e(ite,kJe),e(Wm,SJe),e(Wm,SS),e(SS,RJe),e(Wm,PJe),e(A,BJe),e(A,Qm),e(Qm,dte),e(dte,IJe),e(Qm,NJe),e(Qm,RS),e(RS,qJe),e(Qm,jJe),e(A,DJe),e(A,Hm),e(Hm,cte),e(cte,GJe),e(Hm,OJe),e(Hm,PS),e(PS,VJe),e(Hm,XJe),e(A,zJe),e(A,Um),e(Um,fte),e(fte,WJe),e(Um,QJe),e(Um,BS),e(BS,HJe),e(Um,UJe),e(A,JJe),e(A,Jm),e(Jm,mte),e(mte,YJe),e(Jm,KJe),e(Jm,IS),e(IS,ZJe),e(Jm,eYe),e(A,oYe),e(A,Ym),e(Ym,gte),e(gte,rYe),e(Ym,tYe),e(Ym,NS),e(NS,aYe),e(Ym,nYe),e(A,sYe),e(A,Km),e(Km,hte),e(hte,lYe),e(Km,iYe),e(Km,qS),e(qS,dYe),e(Km,cYe),e(A,fYe),e(A,Zm),e(Zm,pte),e(pte,mYe),e(Zm,gYe),e(Zm,jS),e(jS,hYe),e(Zm,pYe),e(A,_Ye),e(A,eg),e(eg,_te),e(_te,uYe),e(eg,bYe),e(eg,DS),e(DS,vYe),e(eg,FYe),e(A,TYe),e(A,og),e(og,ute),e(ute,MYe),e(og,EYe),e(og,GS),e(GS,CYe),e(og,wYe),e(A,AYe),e(A,rg),e(rg,bte),e(bte,yYe),e(rg,LYe),e(rg,OS),e(OS,xYe),e(rg,$Ye),e(A,kYe),e(A,tg),e(tg,vte),e(vte,SYe),e(tg,RYe),e(tg,VS),e(VS,PYe),e(tg,BYe),e(A,IYe),e(A,ag),e(ag,Fte),e(Fte,NYe),e(ag,qYe),e(ag,XS),e(XS,jYe),e(ag,DYe),e(A,GYe),e(A,ng),e(ng,Tte),e(Tte,OYe),e(ng,VYe),e(ng,zS),e(zS,XYe),e(ng,zYe),e(A,WYe),e(A,sg),e(sg,Mte),e(Mte,QYe),e(sg,HYe),e(sg,WS),e(WS,UYe),e(sg,JYe),e(A,YYe),e(A,lg),e(lg,Ete),e(Ete,KYe),e(lg,ZYe),e(lg,QS),e(QS,eKe),e(lg,oKe),e(A,rKe),e(A,ig),e(ig,Cte),e(Cte,tKe),e(ig,aKe),e(ig,HS),e(HS,nKe),e(ig,sKe),e(A,lKe),e(A,dg),e(dg,wte),e(wte,iKe),e(dg,dKe),e(dg,US),e(US,cKe),e(dg,fKe),e(A,mKe),e(A,cg),e(cg,Ate),e(Ate,gKe),e(cg,hKe),e(cg,JS),e(JS,pKe),e(cg,_Ke),e(A,uKe),e(A,fg),e(fg,yte),e(yte,bKe),e(fg,vKe),e(fg,YS),e(YS,FKe),e(fg,TKe),e(A,MKe),e(A,mg),e(mg,Lte),e(Lte,EKe),e(mg,CKe),e(mg,KS),e(KS,wKe),e(mg,AKe),e(A,yKe),e(A,gg),e(gg,xte),e(xte,LKe),e(gg,xKe),e(gg,ZS),e(ZS,$Ke),e(gg,kKe),e(A,SKe),e(A,hg),e(hg,$te),e($te,RKe),e(hg,PKe),e(hg,eR),e(eR,BKe),e(hg,IKe),e(A,NKe),e(A,pg),e(pg,kte),e(kte,qKe),e(pg,jKe),e(pg,oR),e(oR,DKe),e(pg,GKe),e(A,OKe),e(A,_g),e(_g,Ste),e(Ste,VKe),e(_g,XKe),e(_g,rR),e(rR,zKe),e(_g,WKe),e(A,QKe),e(A,ug),e(ug,Rte),e(Rte,HKe),e(ug,UKe),e(ug,tR),e(tR,JKe),e(ug,YKe),e(A,KKe),e(A,bg),e(bg,Pte),e(Pte,ZKe),e(bg,eZe),e(bg,aR),e(aR,oZe),e(bg,rZe),e(A,tZe),e(A,vg),e(vg,Bte),e(Bte,aZe),e(vg,nZe),e(vg,nR),e(nR,sZe),e(vg,lZe),e(A,iZe),e(A,Fg),e(Fg,Ite),e(Ite,dZe),e(Fg,cZe),e(Fg,sR),e(sR,fZe),e(Fg,mZe),e(A,gZe),e(A,Tg),e(Tg,Nte),e(Nte,hZe),e(Tg,pZe),e(Tg,lR),e(lR,_Ze),e(Tg,uZe),e(A,bZe),e(A,Mg),e(Mg,qte),e(qte,vZe),e(Mg,FZe),e(Mg,iR),e(iR,TZe),e(Mg,MZe),e(A,EZe),e(A,Eg),e(Eg,jte),e(jte,CZe),e(Eg,wZe),e(Eg,dR),e(dR,AZe),e(Eg,yZe),e(A,LZe),e(A,Cg),e(Cg,Dte),e(Dte,xZe),e(Cg,$Ze),e(Cg,cR),e(cR,kZe),e(Cg,SZe),e(A,RZe),e(A,wg),e(wg,Gte),e(Gte,PZe),e(wg,BZe),e(wg,fR),e(fR,IZe),e(wg,NZe),e(Er,qZe),M(Ag,Er,null),e(Co,jZe),e(Co,yg),M(z6,yg,null),e(yg,DZe),e(yg,Ote),e(Ote,GZe),b(f,Jqe,u),b(f,Ei,u),e(Ei,Lg),e(Lg,Vte),M(W6,Vte,null),e(Ei,OZe),e(Ei,Xte),e(Xte,VZe),b(f,Yqe,u),b(f,wo,u),M(Q6,wo,null),e(wo,XZe),e(wo,H6),e(H6,zZe),e(H6,mR),e(mR,WZe),e(H6,QZe),e(wo,HZe),e(wo,U6),e(U6,UZe),e(U6,zte),e(zte,JZe),e(U6,YZe),e(wo,KZe),e(wo,Cr),M(J6,Cr,null),e(Cr,ZZe),e(Cr,Wte),e(Wte,eeo),e(Cr,oeo),e(Cr,ya),e(ya,reo),e(ya,Qte),e(Qte,teo),e(ya,aeo),e(ya,Hte),e(Hte,neo),e(ya,seo),e(ya,Ute),e(Ute,leo),e(ya,ieo),e(Cr,deo),e(Cr,k),e(k,Sn),e(Sn,Jte),e(Jte,ceo),e(Sn,feo),e(Sn,gR),e(gR,meo),e(Sn,geo),e(Sn,hR),e(hR,heo),e(Sn,peo),e(k,_eo),e(k,Rn),e(Rn,Yte),e(Yte,ueo),e(Rn,beo),e(Rn,pR),e(pR,veo),e(Rn,Feo),e(Rn,_R),e(_R,Teo),e(Rn,Meo),e(k,Eeo),e(k,Pn),e(Pn,Kte),e(Kte,Ceo),e(Pn,weo),e(Pn,uR),e(uR,Aeo),e(Pn,yeo),e(Pn,bR),e(bR,Leo),e(Pn,xeo),e(k,$eo),e(k,xg),e(xg,Zte),e(Zte,keo),e(xg,Seo),e(xg,vR),e(vR,Reo),e(xg,Peo),e(k,Beo),e(k,Bn),e(Bn,eae),e(eae,Ieo),e(Bn,Neo),e(Bn,FR),e(FR,qeo),e(Bn,jeo),e(Bn,TR),e(TR,Deo),e(Bn,Geo),e(k,Oeo),e(k,$g),e($g,oae),e(oae,Veo),e($g,Xeo),e($g,MR),e(MR,zeo),e($g,Weo),e(k,Qeo),e(k,kg),e(kg,rae),e(rae,Heo),e(kg,Ueo),e(kg,ER),e(ER,Jeo),e(kg,Yeo),e(k,Keo),e(k,Sg),e(Sg,tae),e(tae,Zeo),e(Sg,eoo),e(Sg,CR),e(CR,ooo),e(Sg,roo),e(k,too),e(k,In),e(In,aae),e(aae,aoo),e(In,noo),e(In,wR),e(wR,soo),e(In,loo),e(In,AR),e(AR,ioo),e(In,doo),e(k,coo),e(k,Nn),e(Nn,nae),e(nae,foo),e(Nn,moo),e(Nn,yR),e(yR,goo),e(Nn,hoo),e(Nn,LR),e(LR,poo),e(Nn,_oo),e(k,uoo),e(k,qn),e(qn,sae),e(sae,boo),e(qn,voo),e(qn,xR),e(xR,Foo),e(qn,Too),e(qn,$R),e($R,Moo),e(qn,Eoo),e(k,Coo),e(k,Rg),e(Rg,lae),e(lae,woo),e(Rg,Aoo),e(Rg,kR),e(kR,yoo),e(Rg,Loo),e(k,xoo),e(k,Pg),e(Pg,iae),e(iae,$oo),e(Pg,koo),e(Pg,SR),e(SR,Soo),e(Pg,Roo),e(k,Poo),e(k,jn),e(jn,dae),e(dae,Boo),e(jn,Ioo),e(jn,RR),e(RR,Noo),e(jn,qoo),e(jn,PR),e(PR,joo),e(jn,Doo),e(k,Goo),e(k,Bg),e(Bg,cae),e(cae,Ooo),e(Bg,Voo),e(Bg,BR),e(BR,Xoo),e(Bg,zoo),e(k,Woo),e(k,Dn),e(Dn,fae),e(fae,Qoo),e(Dn,Hoo),e(Dn,IR),e(IR,Uoo),e(Dn,Joo),e(Dn,NR),e(NR,Yoo),e(Dn,Koo),e(k,Zoo),e(k,Gn),e(Gn,mae),e(mae,ero),e(Gn,oro),e(Gn,qR),e(qR,rro),e(Gn,tro),e(Gn,jR),e(jR,aro),e(Gn,nro),e(k,sro),e(k,On),e(On,gae),e(gae,lro),e(On,iro),e(On,DR),e(DR,dro),e(On,cro),e(On,GR),e(GR,fro),e(On,mro),e(k,gro),e(k,Ig),e(Ig,hae),e(hae,hro),e(Ig,pro),e(Ig,OR),e(OR,_ro),e(Ig,uro),e(k,bro),e(k,Vn),e(Vn,pae),e(pae,vro),e(Vn,Fro),e(Vn,VR),e(VR,Tro),e(Vn,Mro),e(Vn,XR),e(XR,Ero),e(Vn,Cro),e(k,wro),e(k,Xn),e(Xn,_ae),e(_ae,Aro),e(Xn,yro),e(Xn,zR),e(zR,Lro),e(Xn,xro),e(Xn,WR),e(WR,$ro),e(Xn,kro),e(k,Sro),e(k,zn),e(zn,uae),e(uae,Rro),e(zn,Pro),e(zn,QR),e(QR,Bro),e(zn,Iro),e(zn,HR),e(HR,Nro),e(zn,qro),e(k,jro),e(k,Wn),e(Wn,bae),e(bae,Dro),e(Wn,Gro),e(Wn,UR),e(UR,Oro),e(Wn,Vro),e(Wn,JR),e(JR,Xro),e(Wn,zro),e(k,Wro),e(k,Qn),e(Qn,vae),e(vae,Qro),e(Qn,Hro),e(Qn,YR),e(YR,Uro),e(Qn,Jro),e(Qn,KR),e(KR,Yro),e(Qn,Kro),e(k,Zro),e(k,Hn),e(Hn,Fae),e(Fae,eto),e(Hn,oto),e(Hn,ZR),e(ZR,rto),e(Hn,tto),e(Hn,eP),e(eP,ato),e(Hn,nto),e(k,sto),e(k,Ng),e(Ng,Tae),e(Tae,lto),e(Ng,ito),e(Ng,oP),e(oP,dto),e(Ng,cto),e(k,fto),e(k,Un),e(Un,Mae),e(Mae,mto),e(Un,gto),e(Un,rP),e(rP,hto),e(Un,pto),e(Un,tP),e(tP,_to),e(Un,uto),e(k,bto),e(k,qg),e(qg,Eae),e(Eae,vto),e(qg,Fto),e(qg,aP),e(aP,Tto),e(qg,Mto),e(k,Eto),e(k,Jn),e(Jn,Cae),e(Cae,Cto),e(Jn,wto),e(Jn,nP),e(nP,Ato),e(Jn,yto),e(Jn,sP),e(sP,Lto),e(Jn,xto),e(k,$to),e(k,Yn),e(Yn,wae),e(wae,kto),e(Yn,Sto),e(Yn,lP),e(lP,Rto),e(Yn,Pto),e(Yn,iP),e(iP,Bto),e(Yn,Ito),e(k,Nto),e(k,Kn),e(Kn,Aae),e(Aae,qto),e(Kn,jto),e(Kn,dP),e(dP,Dto),e(Kn,Gto),e(Kn,cP),e(cP,Oto),e(Kn,Vto),e(k,Xto),e(k,jg),e(jg,yae),e(yae,zto),e(jg,Wto),e(jg,fP),e(fP,Qto),e(jg,Hto),e(k,Uto),e(k,Zn),e(Zn,Lae),e(Lae,Jto),e(Zn,Yto),e(Zn,mP),e(mP,Kto),e(Zn,Zto),e(Zn,gP),e(gP,eao),e(Zn,oao),e(k,rao),e(k,es),e(es,xae),e(xae,tao),e(es,aao),e(es,hP),e(hP,nao),e(es,sao),e(es,pP),e(pP,lao),e(es,iao),e(k,dao),e(k,Dg),e(Dg,$ae),e($ae,cao),e(Dg,fao),e(Dg,_P),e(_P,mao),e(Dg,gao),e(k,hao),e(k,os),e(os,kae),e(kae,pao),e(os,_ao),e(os,uP),e(uP,uao),e(os,bao),e(os,bP),e(bP,vao),e(os,Fao),e(k,Tao),e(k,rs),e(rs,Sae),e(Sae,Mao),e(rs,Eao),e(rs,vP),e(vP,Cao),e(rs,wao),e(rs,FP),e(FP,Aao),e(rs,yao),e(k,Lao),e(k,ts),e(ts,Rae),e(Rae,xao),e(ts,$ao),e(ts,TP),e(TP,kao),e(ts,Sao),e(ts,MP),e(MP,Rao),e(ts,Pao),e(k,Bao),e(k,as),e(as,Pae),e(Pae,Iao),e(as,Nao),e(as,EP),e(EP,qao),e(as,jao),e(as,CP),e(CP,Dao),e(as,Gao),e(k,Oao),e(k,ns),e(ns,Bae),e(Bae,Vao),e(ns,Xao),e(ns,wP),e(wP,zao),e(ns,Wao),e(ns,AP),e(AP,Qao),e(ns,Hao),e(k,Uao),e(k,ss),e(ss,Iae),e(Iae,Jao),e(ss,Yao),e(ss,yP),e(yP,Kao),e(ss,Zao),e(ss,LP),e(LP,eno),e(ss,ono),e(k,rno),e(k,ls),e(ls,Nae),e(Nae,tno),e(ls,ano),e(ls,xP),e(xP,nno),e(ls,sno),e(ls,$P),e($P,lno),e(ls,ino),e(k,dno),e(k,Gg),e(Gg,qae),e(qae,cno),e(Gg,fno),e(Gg,kP),e(kP,mno),e(Gg,gno),e(k,hno),e(k,is),e(is,jae),e(jae,pno),e(is,_no),e(is,SP),e(SP,uno),e(is,bno),e(is,RP),e(RP,vno),e(is,Fno),e(k,Tno),e(k,Og),e(Og,Dae),e(Dae,Mno),e(Og,Eno),e(Og,PP),e(PP,Cno),e(Og,wno),e(k,Ano),e(k,Vg),e(Vg,Gae),e(Gae,yno),e(Vg,Lno),e(Vg,BP),e(BP,xno),e(Vg,$no),e(k,kno),e(k,ds),e(ds,Oae),e(Oae,Sno),e(ds,Rno),e(ds,IP),e(IP,Pno),e(ds,Bno),e(ds,NP),e(NP,Ino),e(ds,Nno),e(k,qno),e(k,cs),e(cs,Vae),e(Vae,jno),e(cs,Dno),e(cs,qP),e(qP,Gno),e(cs,Ono),e(cs,jP),e(jP,Vno),e(cs,Xno),e(k,zno),e(k,fs),e(fs,Xae),e(Xae,Wno),e(fs,Qno),e(fs,DP),e(DP,Hno),e(fs,Uno),e(fs,GP),e(GP,Jno),e(fs,Yno),e(k,Kno),e(k,Xg),e(Xg,zae),e(zae,Zno),e(Xg,eso),e(Xg,OP),e(OP,oso),e(Xg,rso),e(k,tso),e(k,ms),e(ms,Wae),e(Wae,aso),e(ms,nso),e(ms,VP),e(VP,sso),e(ms,lso),e(ms,XP),e(XP,iso),e(ms,dso),e(k,cso),e(k,gs),e(gs,Qae),e(Qae,fso),e(gs,mso),e(gs,zP),e(zP,gso),e(gs,hso),e(gs,WP),e(WP,pso),e(gs,_so),e(k,uso),e(k,hs),e(hs,Hae),e(Hae,bso),e(hs,vso),e(hs,QP),e(QP,Fso),e(hs,Tso),e(hs,HP),e(HP,Mso),e(hs,Eso),e(k,Cso),e(k,ps),e(ps,Uae),e(Uae,wso),e(ps,Aso),e(ps,UP),e(UP,yso),e(ps,Lso),e(ps,JP),e(JP,xso),e(ps,$so),e(k,kso),e(k,_s),e(_s,Jae),e(Jae,Sso),e(_s,Rso),e(_s,YP),e(YP,Pso),e(_s,Bso),e(_s,KP),e(KP,Iso),e(_s,Nso),e(k,qso),e(k,zg),e(zg,Yae),e(Yae,jso),e(zg,Dso),e(zg,ZP),e(ZP,Gso),e(zg,Oso),e(k,Vso),e(k,us),e(us,Kae),e(Kae,Xso),e(us,zso),e(us,eB),e(eB,Wso),e(us,Qso),e(us,oB),e(oB,Hso),e(us,Uso),e(k,Jso),e(k,Wg),e(Wg,Zae),e(Zae,Yso),e(Wg,Kso),e(Wg,rB),e(rB,Zso),e(Wg,elo),e(k,olo),e(k,Qg),e(Qg,ene),e(ene,rlo),e(Qg,tlo),e(Qg,tB),e(tB,alo),e(Qg,nlo),e(k,slo),e(k,Hg),e(Hg,one),e(one,llo),e(Hg,ilo),e(Hg,aB),e(aB,dlo),e(Hg,clo),e(k,flo),e(k,Ug),e(Ug,rne),e(rne,mlo),e(Ug,glo),e(Ug,nB),e(nB,hlo),e(Ug,plo),e(k,_lo),e(k,bs),e(bs,tne),e(tne,ulo),e(bs,blo),e(bs,sB),e(sB,vlo),e(bs,Flo),e(bs,lB),e(lB,Tlo),e(bs,Mlo),e(k,Elo),e(k,Jg),e(Jg,ane),e(ane,Clo),e(Jg,wlo),e(Jg,iB),e(iB,Alo),e(Jg,ylo),e(k,Llo),e(k,vs),e(vs,nne),e(nne,xlo),e(vs,$lo),e(vs,dB),e(dB,klo),e(vs,Slo),e(vs,cB),e(cB,Rlo),e(vs,Plo),e(k,Blo),e(k,Fs),e(Fs,sne),e(sne,Ilo),e(Fs,Nlo),e(Fs,fB),e(fB,qlo),e(Fs,jlo),e(Fs,mB),e(mB,Dlo),e(Fs,Glo),e(k,Olo),e(k,Ts),e(Ts,lne),e(lne,Vlo),e(Ts,Xlo),e(Ts,gB),e(gB,zlo),e(Ts,Wlo),e(Ts,hB),e(hB,Qlo),e(Ts,Hlo),e(k,Ulo),e(k,Ms),e(Ms,ine),e(ine,Jlo),e(Ms,Ylo),e(Ms,pB),e(pB,Klo),e(Ms,Zlo),e(Ms,_B),e(_B,eio),e(Ms,oio),e(k,rio),e(k,Es),e(Es,dne),e(dne,tio),e(Es,aio),e(Es,uB),e(uB,nio),e(Es,sio),e(Es,bB),e(bB,lio),e(Es,iio),e(k,dio),e(k,Cs),e(Cs,cne),e(cne,cio),e(Cs,fio),e(Cs,vB),e(vB,mio),e(Cs,gio),e(Cs,FB),e(FB,hio),e(Cs,pio),e(k,_io),e(k,Yg),e(Yg,fne),e(fne,uio),e(Yg,bio),e(Yg,TB),e(TB,vio),e(Yg,Fio),e(k,Tio),e(k,Kg),e(Kg,mne),e(mne,Mio),e(Kg,Eio),e(Kg,MB),e(MB,Cio),e(Kg,wio),e(k,Aio),e(k,ws),e(ws,gne),e(gne,yio),e(ws,Lio),e(ws,EB),e(EB,xio),e(ws,$io),e(ws,CB),e(CB,kio),e(ws,Sio),e(k,Rio),e(k,As),e(As,hne),e(hne,Pio),e(As,Bio),e(As,wB),e(wB,Iio),e(As,Nio),e(As,AB),e(AB,qio),e(As,jio),e(k,Dio),e(k,ys),e(ys,pne),e(pne,Gio),e(ys,Oio),e(ys,yB),e(yB,Vio),e(ys,Xio),e(ys,LB),e(LB,zio),e(ys,Wio),e(k,Qio),e(k,Zg),e(Zg,_ne),e(_ne,Hio),e(Zg,Uio),e(Zg,xB),e(xB,Jio),e(Zg,Yio),e(k,Kio),e(k,eh),e(eh,une),e(une,Zio),e(eh,edo),e(eh,$B),e($B,odo),e(eh,rdo),e(k,tdo),e(k,oh),e(oh,bne),e(bne,ado),e(oh,ndo),e(oh,kB),e(kB,sdo),e(oh,ldo),e(k,ido),e(k,Ls),e(Ls,vne),e(vne,ddo),e(Ls,cdo),e(Ls,SB),e(SB,fdo),e(Ls,mdo),e(Ls,RB),e(RB,gdo),e(Ls,hdo),e(k,pdo),e(k,rh),e(rh,Fne),e(Fne,_do),e(rh,udo),e(rh,PB),e(PB,bdo),e(rh,vdo),e(k,Fdo),e(k,th),e(th,Tne),e(Tne,Tdo),e(th,Mdo),e(th,BB),e(BB,Edo),e(th,Cdo),e(k,wdo),e(k,ah),e(ah,Mne),e(Mne,Ado),e(ah,ydo),e(ah,IB),e(IB,Ldo),e(ah,xdo),e(k,$do),e(k,xs),e(xs,Ene),e(Ene,kdo),e(xs,Sdo),e(xs,NB),e(NB,Rdo),e(xs,Pdo),e(xs,qB),e(qB,Bdo),e(xs,Ido),e(k,Ndo),e(k,nh),e(nh,Cne),e(Cne,qdo),e(nh,jdo),e(nh,jB),e(jB,Ddo),e(nh,Gdo),e(k,Odo),e(k,sh),e(sh,wne),e(wne,Vdo),e(sh,Xdo),e(sh,DB),e(DB,zdo),e(sh,Wdo),e(k,Qdo),e(k,$s),e($s,Ane),e(Ane,Hdo),e($s,Udo),e($s,GB),e(GB,Jdo),e($s,Ydo),e($s,OB),e(OB,Kdo),e($s,Zdo),e(k,eco),e(k,ks),e(ks,yne),e(yne,oco),e(ks,rco),e(ks,VB),e(VB,tco),e(ks,aco),e(ks,XB),e(XB,nco),e(ks,sco),e(k,lco),e(k,Ss),e(Ss,Lne),e(Lne,ico),e(Ss,dco),e(Ss,zB),e(zB,cco),e(Ss,fco),e(Ss,WB),e(WB,mco),e(Ss,gco),e(k,hco),e(k,Rs),e(Rs,xne),e(xne,pco),e(Rs,_co),e(Rs,QB),e(QB,uco),e(Rs,bco),e(Rs,HB),e(HB,vco),e(Rs,Fco),e(Cr,Tco),M(lh,Cr,null),e(wo,Mco),e(wo,ih),M(Y6,ih,null),e(ih,Eco),e(ih,$ne),e($ne,Cco),b(f,Kqe,u),b(f,Ci,u),e(Ci,dh),e(dh,kne),M(K6,kne,null),e(Ci,wco),e(Ci,Sne),e(Sne,Aco),b(f,Zqe,u),b(f,Ao,u),M(Z6,Ao,null),e(Ao,yco),e(Ao,ey),e(ey,Lco),e(ey,UB),e(UB,xco),e(ey,$co),e(Ao,kco),e(Ao,oy),e(oy,Sco),e(oy,Rne),e(Rne,Rco),e(oy,Pco),e(Ao,Bco),e(Ao,He),M(ry,He,null),e(He,Ico),e(He,Pne),e(Pne,Nco),e(He,qco),e(He,La),e(La,jco),e(La,Bne),e(Bne,Dco),e(La,Gco),e(La,Ine),e(Ine,Oco),e(La,Vco),e(La,Nne),e(Nne,Xco),e(La,zco),e(He,Wco),e(He,Y),e(Y,ch),e(ch,qne),e(qne,Qco),e(ch,Hco),e(ch,JB),e(JB,Uco),e(ch,Jco),e(Y,Yco),e(Y,fh),e(fh,jne),e(jne,Kco),e(fh,Zco),e(fh,YB),e(YB,efo),e(fh,ofo),e(Y,rfo),e(Y,mh),e(mh,Dne),e(Dne,tfo),e(mh,afo),e(mh,KB),e(KB,nfo),e(mh,sfo),e(Y,lfo),e(Y,gh),e(gh,Gne),e(Gne,ifo),e(gh,dfo),e(gh,ZB),e(ZB,cfo),e(gh,ffo),e(Y,mfo),e(Y,hh),e(hh,One),e(One,gfo),e(hh,hfo),e(hh,eI),e(eI,pfo),e(hh,_fo),e(Y,ufo),e(Y,ph),e(ph,Vne),e(Vne,bfo),e(ph,vfo),e(ph,oI),e(oI,Ffo),e(ph,Tfo),e(Y,Mfo),e(Y,_h),e(_h,Xne),e(Xne,Efo),e(_h,Cfo),e(_h,rI),e(rI,wfo),e(_h,Afo),e(Y,yfo),e(Y,uh),e(uh,zne),e(zne,Lfo),e(uh,xfo),e(uh,tI),e(tI,$fo),e(uh,kfo),e(Y,Sfo),e(Y,bh),e(bh,Wne),e(Wne,Rfo),e(bh,Pfo),e(bh,aI),e(aI,Bfo),e(bh,Ifo),e(Y,Nfo),e(Y,vh),e(vh,Qne),e(Qne,qfo),e(vh,jfo),e(vh,nI),e(nI,Dfo),e(vh,Gfo),e(Y,Ofo),e(Y,Fh),e(Fh,Hne),e(Hne,Vfo),e(Fh,Xfo),e(Fh,sI),e(sI,zfo),e(Fh,Wfo),e(Y,Qfo),e(Y,Th),e(Th,Une),e(Une,Hfo),e(Th,Ufo),e(Th,lI),e(lI,Jfo),e(Th,Yfo),e(Y,Kfo),e(Y,Mh),e(Mh,Jne),e(Jne,Zfo),e(Mh,emo),e(Mh,iI),e(iI,omo),e(Mh,rmo),e(Y,tmo),e(Y,Eh),e(Eh,Yne),e(Yne,amo),e(Eh,nmo),e(Eh,dI),e(dI,smo),e(Eh,lmo),e(Y,imo),e(Y,Ch),e(Ch,Kne),e(Kne,dmo),e(Ch,cmo),e(Ch,cI),e(cI,fmo),e(Ch,mmo),e(Y,gmo),e(Y,wh),e(wh,Zne),e(Zne,hmo),e(wh,pmo),e(wh,fI),e(fI,_mo),e(wh,umo),e(Y,bmo),e(Y,Ah),e(Ah,ese),e(ese,vmo),e(Ah,Fmo),e(Ah,mI),e(mI,Tmo),e(Ah,Mmo),e(Y,Emo),e(Y,yh),e(yh,ose),e(ose,Cmo),e(yh,wmo),e(yh,gI),e(gI,Amo),e(yh,ymo),e(Y,Lmo),e(Y,Lh),e(Lh,rse),e(rse,xmo),e(Lh,$mo),e(Lh,hI),e(hI,kmo),e(Lh,Smo),e(Y,Rmo),e(Y,xh),e(xh,tse),e(tse,Pmo),e(xh,Bmo),e(xh,pI),e(pI,Imo),e(xh,Nmo),e(Y,qmo),e(Y,$h),e($h,ase),e(ase,jmo),e($h,Dmo),e($h,_I),e(_I,Gmo),e($h,Omo),e(Y,Vmo),e(Y,kh),e(kh,nse),e(nse,Xmo),e(kh,zmo),e(kh,uI),e(uI,Wmo),e(kh,Qmo),e(Y,Hmo),e(Y,Sh),e(Sh,sse),e(sse,Umo),e(Sh,Jmo),e(Sh,bI),e(bI,Ymo),e(Sh,Kmo),e(Y,Zmo),e(Y,Rh),e(Rh,lse),e(lse,ego),e(Rh,ogo),e(Rh,vI),e(vI,rgo),e(Rh,tgo),e(Y,ago),e(Y,Ph),e(Ph,ise),e(ise,ngo),e(Ph,sgo),e(Ph,FI),e(FI,lgo),e(Ph,igo),e(Y,dgo),e(Y,Bh),e(Bh,dse),e(dse,cgo),e(Bh,fgo),e(Bh,TI),e(TI,mgo),e(Bh,ggo),e(Y,hgo),e(Y,Ih),e(Ih,cse),e(cse,pgo),e(Ih,_go),e(Ih,MI),e(MI,ugo),e(Ih,bgo),e(Y,vgo),e(Y,Nh),e(Nh,fse),e(fse,Fgo),e(Nh,Tgo),e(Nh,EI),e(EI,Mgo),e(Nh,Ego),e(Y,Cgo),e(Y,qh),e(qh,mse),e(mse,wgo),e(qh,Ago),e(qh,CI),e(CI,ygo),e(qh,Lgo),e(Y,xgo),e(Y,jh),e(jh,gse),e(gse,$go),e(jh,kgo),e(jh,wI),e(wI,Sgo),e(jh,Rgo),e(He,Pgo),M(Dh,He,null),e(He,Bgo),M(Gh,He,null),e(Ao,Igo),e(Ao,Oh),M(ty,Oh,null),e(Oh,Ngo),e(Oh,hse),e(hse,qgo),b(f,eje,u),b(f,wi,u),e(wi,Vh),e(Vh,pse),M(ay,pse,null),e(wi,jgo),e(wi,_se),e(_se,Dgo),b(f,oje,u),b(f,yo,u),M(ny,yo,null),e(yo,Ggo),e(yo,sy),e(sy,Ogo),e(sy,AI),e(AI,Vgo),e(sy,Xgo),e(yo,zgo),e(yo,ly),e(ly,Wgo),e(ly,use),e(use,Qgo),e(ly,Hgo),e(yo,Ugo),e(yo,Ue),M(iy,Ue,null),e(Ue,Jgo),e(Ue,bse),e(bse,Ygo),e(Ue,Kgo),e(Ue,Ai),e(Ai,Zgo),e(Ai,vse),e(vse,eho),e(Ai,oho),e(Ai,Fse),e(Fse,rho),e(Ai,tho),e(Ue,aho),e(Ue,he),e(he,Xh),e(Xh,Tse),e(Tse,nho),e(Xh,sho),e(Xh,yI),e(yI,lho),e(Xh,iho),e(he,dho),e(he,zh),e(zh,Mse),e(Mse,cho),e(zh,fho),e(zh,Ese),e(Ese,mho),e(zh,gho),e(he,hho),e(he,Wh),e(Wh,Cse),e(Cse,pho),e(Wh,_ho),e(Wh,LI),e(LI,uho),e(Wh,bho),e(he,vho),e(he,Qh),e(Qh,wse),e(wse,Fho),e(Qh,Tho),e(Qh,xI),e(xI,Mho),e(Qh,Eho),e(he,Cho),e(he,Hh),e(Hh,Ase),e(Ase,who),e(Hh,Aho),e(Hh,$I),e($I,yho),e(Hh,Lho),e(he,xho),e(he,Uh),e(Uh,yse),e(yse,$ho),e(Uh,kho),e(Uh,kI),e(kI,Sho),e(Uh,Rho),e(he,Pho),e(he,Jh),e(Jh,Lse),e(Lse,Bho),e(Jh,Iho),e(Jh,SI),e(SI,Nho),e(Jh,qho),e(he,jho),e(he,Yh),e(Yh,xse),e(xse,Dho),e(Yh,Gho),e(Yh,RI),e(RI,Oho),e(Yh,Vho),e(he,Xho),e(he,Kh),e(Kh,$se),e($se,zho),e(Kh,Who),e(Kh,PI),e(PI,Qho),e(Kh,Hho),e(he,Uho),e(he,Zh),e(Zh,kse),e(kse,Jho),e(Zh,Yho),e(Zh,BI),e(BI,Kho),e(Zh,Zho),e(he,epo),e(he,ep),e(ep,Sse),e(Sse,opo),e(ep,rpo),e(ep,II),e(II,tpo),e(ep,apo),e(he,npo),e(he,op),e(op,Rse),e(Rse,spo),e(op,lpo),e(op,NI),e(NI,ipo),e(op,dpo),e(he,cpo),e(he,rp),e(rp,Pse),e(Pse,fpo),e(rp,mpo),e(rp,qI),e(qI,gpo),e(rp,hpo),e(he,ppo),e(he,tp),e(tp,Bse),e(Bse,_po),e(tp,upo),e(tp,jI),e(jI,bpo),e(tp,vpo),e(he,Fpo),e(he,ap),e(ap,Ise),e(Ise,Tpo),e(ap,Mpo),e(ap,DI),e(DI,Epo),e(ap,Cpo),e(he,wpo),e(he,np),e(np,Nse),e(Nse,Apo),e(np,ypo),e(np,GI),e(GI,Lpo),e(np,xpo),e(he,$po),e(he,sp),e(sp,qse),e(qse,kpo),e(sp,Spo),e(sp,OI),e(OI,Rpo),e(sp,Ppo),e(Ue,Bpo),M(lp,Ue,null),e(Ue,Ipo),M(ip,Ue,null),e(yo,Npo),e(yo,dp),M(dy,dp,null),e(dp,qpo),e(dp,jse),e(jse,jpo),b(f,rje,u),b(f,yi,u),e(yi,cp),e(cp,Dse),M(cy,Dse,null),e(yi,Dpo),e(yi,Gse),e(Gse,Gpo),b(f,tje,u),b(f,Lo,u),M(fy,Lo,null),e(Lo,Opo),e(Lo,Li),e(Li,Vpo),e(Li,VI),e(VI,Xpo),e(Li,zpo),e(Li,XI),e(XI,Wpo),e(Li,Qpo),e(Lo,Hpo),e(Lo,my),e(my,Upo),e(my,Ose),e(Ose,Jpo),e(my,Ypo),e(Lo,Kpo),e(Lo,at),M(gy,at,null),e(at,Zpo),e(at,Vse),e(Vse,e_o),e(at,o_o),e(at,xi),e(xi,r_o),e(xi,Xse),e(Xse,t_o),e(xi,a_o),e(xi,zI),e(zI,n_o),e(xi,s_o),e(at,l_o),M(fp,at,null),e(Lo,i_o),e(Lo,Je),M(hy,Je,null),e(Je,d_o),e(Je,zse),e(zse,c_o),e(Je,f_o),e(Je,xa),e(xa,m_o),e(xa,Wse),e(Wse,g_o),e(xa,h_o),e(xa,Qse),e(Qse,p_o),e(xa,__o),e(xa,Hse),e(Hse,u_o),e(xa,b_o),e(Je,v_o),e(Je,x),e(x,mp),e(mp,Use),e(Use,F_o),e(mp,T_o),e(mp,WI),e(WI,M_o),e(mp,E_o),e(x,C_o),e(x,gp),e(gp,Jse),e(Jse,w_o),e(gp,A_o),e(gp,QI),e(QI,y_o),e(gp,L_o),e(x,x_o),e(x,hp),e(hp,Yse),e(Yse,$_o),e(hp,k_o),e(hp,HI),e(HI,S_o),e(hp,R_o),e(x,P_o),e(x,pp),e(pp,Kse),e(Kse,B_o),e(pp,I_o),e(pp,UI),e(UI,N_o),e(pp,q_o),e(x,j_o),e(x,_p),e(_p,Zse),e(Zse,D_o),e(_p,G_o),e(_p,JI),e(JI,O_o),e(_p,V_o),e(x,X_o),e(x,up),e(up,ele),e(ele,z_o),e(up,W_o),e(up,YI),e(YI,Q_o),e(up,H_o),e(x,U_o),e(x,bp),e(bp,ole),e(ole,J_o),e(bp,Y_o),e(bp,KI),e(KI,K_o),e(bp,Z_o),e(x,euo),e(x,vp),e(vp,rle),e(rle,ouo),e(vp,ruo),e(vp,ZI),e(ZI,tuo),e(vp,auo),e(x,nuo),e(x,Fp),e(Fp,tle),e(tle,suo),e(Fp,luo),e(Fp,eN),e(eN,iuo),e(Fp,duo),e(x,cuo),e(x,Tp),e(Tp,ale),e(ale,fuo),e(Tp,muo),e(Tp,oN),e(oN,guo),e(Tp,huo),e(x,puo),e(x,Mp),e(Mp,nle),e(nle,_uo),e(Mp,uuo),e(Mp,rN),e(rN,buo),e(Mp,vuo),e(x,Fuo),e(x,Ep),e(Ep,sle),e(sle,Tuo),e(Ep,Muo),e(Ep,tN),e(tN,Euo),e(Ep,Cuo),e(x,wuo),e(x,Cp),e(Cp,lle),e(lle,Auo),e(Cp,yuo),e(Cp,aN),e(aN,Luo),e(Cp,xuo),e(x,$uo),e(x,wp),e(wp,ile),e(ile,kuo),e(wp,Suo),e(wp,nN),e(nN,Ruo),e(wp,Puo),e(x,Buo),e(x,Ap),e(Ap,dle),e(dle,Iuo),e(Ap,Nuo),e(Ap,sN),e(sN,quo),e(Ap,juo),e(x,Duo),e(x,yp),e(yp,cle),e(cle,Guo),e(yp,Ouo),e(yp,lN),e(lN,Vuo),e(yp,Xuo),e(x,zuo),e(x,Lp),e(Lp,fle),e(fle,Wuo),e(Lp,Quo),e(Lp,iN),e(iN,Huo),e(Lp,Uuo),e(x,Juo),e(x,xp),e(xp,mle),e(mle,Yuo),e(xp,Kuo),e(xp,dN),e(dN,Zuo),e(xp,e2o),e(x,o2o),e(x,$p),e($p,gle),e(gle,r2o),e($p,t2o),e($p,cN),e(cN,a2o),e($p,n2o),e(x,s2o),e(x,kp),e(kp,hle),e(hle,l2o),e(kp,i2o),e(kp,fN),e(fN,d2o),e(kp,c2o),e(x,f2o),e(x,Sp),e(Sp,ple),e(ple,m2o),e(Sp,g2o),e(Sp,mN),e(mN,h2o),e(Sp,p2o),e(x,_2o),e(x,Rp),e(Rp,_le),e(_le,u2o),e(Rp,b2o),e(Rp,gN),e(gN,v2o),e(Rp,F2o),e(x,T2o),e(x,Pp),e(Pp,ule),e(ule,M2o),e(Pp,E2o),e(Pp,hN),e(hN,C2o),e(Pp,w2o),e(x,A2o),e(x,Bp),e(Bp,ble),e(ble,y2o),e(Bp,L2o),e(Bp,pN),e(pN,x2o),e(Bp,$2o),e(x,k2o),e(x,Ip),e(Ip,vle),e(vle,S2o),e(Ip,R2o),e(Ip,_N),e(_N,P2o),e(Ip,B2o),e(x,I2o),e(x,Np),e(Np,Fle),e(Fle,N2o),e(Np,q2o),e(Np,uN),e(uN,j2o),e(Np,D2o),e(x,G2o),e(x,qp),e(qp,Tle),e(Tle,O2o),e(qp,V2o),e(qp,bN),e(bN,X2o),e(qp,z2o),e(x,W2o),e(x,jp),e(jp,Mle),e(Mle,Q2o),e(jp,H2o),e(jp,vN),e(vN,U2o),e(jp,J2o),e(x,Y2o),e(x,Dp),e(Dp,Ele),e(Ele,K2o),e(Dp,Z2o),e(Dp,FN),e(FN,e1o),e(Dp,o1o),e(x,r1o),e(x,Gp),e(Gp,Cle),e(Cle,t1o),e(Gp,a1o),e(Gp,TN),e(TN,n1o),e(Gp,s1o),e(x,l1o),e(x,Op),e(Op,wle),e(wle,i1o),e(Op,d1o),e(Op,MN),e(MN,c1o),e(Op,f1o),e(x,m1o),e(x,Vp),e(Vp,Ale),e(Ale,g1o),e(Vp,h1o),e(Vp,EN),e(EN,p1o),e(Vp,_1o),e(x,u1o),e(x,Ps),e(Ps,yle),e(yle,b1o),e(Ps,v1o),e(Ps,CN),e(CN,F1o),e(Ps,T1o),e(Ps,wN),e(wN,M1o),e(Ps,E1o),e(x,C1o),e(x,Xp),e(Xp,Lle),e(Lle,w1o),e(Xp,A1o),e(Xp,AN),e(AN,y1o),e(Xp,L1o),e(x,x1o),e(x,zp),e(zp,xle),e(xle,$1o),e(zp,k1o),e(zp,yN),e(yN,S1o),e(zp,R1o),e(x,P1o),e(x,Wp),e(Wp,$le),e($le,B1o),e(Wp,I1o),e(Wp,LN),e(LN,N1o),e(Wp,q1o),e(x,j1o),e(x,Qp),e(Qp,kle),e(kle,D1o),e(Qp,G1o),e(Qp,xN),e(xN,O1o),e(Qp,V1o),e(x,X1o),e(x,Hp),e(Hp,Sle),e(Sle,z1o),e(Hp,W1o),e(Hp,$N),e($N,Q1o),e(Hp,H1o),e(x,U1o),e(x,Up),e(Up,Rle),e(Rle,J1o),e(Up,Y1o),e(Up,kN),e(kN,K1o),e(Up,Z1o),e(x,e7o),e(x,Jp),e(Jp,Ple),e(Ple,o7o),e(Jp,r7o),e(Jp,SN),e(SN,t7o),e(Jp,a7o),e(x,n7o),e(x,Yp),e(Yp,Ble),e(Ble,s7o),e(Yp,l7o),e(Yp,RN),e(RN,i7o),e(Yp,d7o),e(x,c7o),e(x,Kp),e(Kp,Ile),e(Ile,f7o),e(Kp,m7o),e(Kp,PN),e(PN,g7o),e(Kp,h7o),e(x,p7o),e(x,Zp),e(Zp,Nle),e(Nle,_7o),e(Zp,u7o),e(Zp,BN),e(BN,b7o),e(Zp,v7o),e(x,F7o),e(x,e_),e(e_,qle),e(qle,T7o),e(e_,M7o),e(e_,IN),e(IN,E7o),e(e_,C7o),e(x,w7o),e(x,o_),e(o_,jle),e(jle,A7o),e(o_,y7o),e(o_,NN),e(NN,L7o),e(o_,x7o),e(x,$7o),e(x,r_),e(r_,Dle),e(Dle,k7o),e(r_,S7o),e(r_,qN),e(qN,R7o),e(r_,P7o),e(x,B7o),e(x,t_),e(t_,Gle),e(Gle,I7o),e(t_,N7o),e(t_,jN),e(jN,q7o),e(t_,j7o),e(x,D7o),e(x,a_),e(a_,Ole),e(Ole,G7o),e(a_,O7o),e(a_,DN),e(DN,V7o),e(a_,X7o),e(x,z7o),e(x,n_),e(n_,Vle),e(Vle,W7o),e(n_,Q7o),e(n_,GN),e(GN,H7o),e(n_,U7o),e(x,J7o),e(x,s_),e(s_,Xle),e(Xle,Y7o),e(s_,K7o),e(s_,ON),e(ON,Z7o),e(s_,ebo),e(x,obo),e(x,l_),e(l_,zle),e(zle,rbo),e(l_,tbo),e(l_,VN),e(VN,abo),e(l_,nbo),e(x,sbo),e(x,i_),e(i_,Wle),e(Wle,lbo),e(i_,ibo),e(i_,XN),e(XN,dbo),e(i_,cbo),e(x,fbo),e(x,d_),e(d_,Qle),e(Qle,mbo),e(d_,gbo),e(d_,zN),e(zN,hbo),e(d_,pbo),e(x,_bo),e(x,c_),e(c_,Hle),e(Hle,ubo),e(c_,bbo),e(c_,WN),e(WN,vbo),e(c_,Fbo),e(x,Tbo),e(x,f_),e(f_,Ule),e(Ule,Mbo),e(f_,Ebo),e(f_,QN),e(QN,Cbo),e(f_,wbo),e(x,Abo),e(x,m_),e(m_,Jle),e(Jle,ybo),e(m_,Lbo),e(m_,HN),e(HN,xbo),e(m_,$bo),e(x,kbo),e(x,g_),e(g_,Yle),e(Yle,Sbo),e(g_,Rbo),e(g_,UN),e(UN,Pbo),e(g_,Bbo),e(x,Ibo),e(x,h_),e(h_,Kle),e(Kle,Nbo),e(h_,qbo),e(h_,JN),e(JN,jbo),e(h_,Dbo),e(x,Gbo),e(x,p_),e(p_,Zle),e(Zle,Obo),e(p_,Vbo),e(p_,YN),e(YN,Xbo),e(p_,zbo),e(x,Wbo),e(x,__),e(__,eie),e(eie,Qbo),e(__,Hbo),e(__,KN),e(KN,Ubo),e(__,Jbo),e(x,Ybo),e(x,u_),e(u_,oie),e(oie,Kbo),e(u_,Zbo),e(u_,ZN),e(ZN,e4o),e(u_,o4o),e(x,r4o),e(x,b_),e(b_,rie),e(rie,t4o),e(b_,a4o),e(b_,eq),e(eq,n4o),e(b_,s4o),e(x,l4o),e(x,v_),e(v_,tie),e(tie,i4o),e(v_,d4o),e(v_,oq),e(oq,c4o),e(v_,f4o),e(x,m4o),e(x,F_),e(F_,aie),e(aie,g4o),e(F_,h4o),e(F_,rq),e(rq,p4o),e(F_,_4o),e(x,u4o),e(x,T_),e(T_,nie),e(nie,b4o),e(T_,v4o),e(T_,tq),e(tq,F4o),e(T_,T4o),e(x,M4o),e(x,M_),e(M_,sie),e(sie,E4o),e(M_,C4o),e(M_,aq),e(aq,w4o),e(M_,A4o),e(x,y4o),e(x,E_),e(E_,lie),e(lie,L4o),e(E_,x4o),e(E_,nq),e(nq,$4o),e(E_,k4o),e(x,S4o),e(x,C_),e(C_,iie),e(iie,R4o),e(C_,P4o),e(C_,sq),e(sq,B4o),e(C_,I4o),e(x,N4o),e(x,w_),e(w_,die),e(die,q4o),e(w_,j4o),e(w_,lq),e(lq,D4o),e(w_,G4o),e(x,O4o),e(x,A_),e(A_,cie),e(cie,V4o),e(A_,X4o),e(A_,iq),e(iq,z4o),e(A_,W4o),e(x,Q4o),e(x,y_),e(y_,fie),e(fie,H4o),e(y_,U4o),e(y_,dq),e(dq,J4o),e(y_,Y4o),e(x,K4o),e(x,L_),e(L_,mie),e(mie,Z4o),e(L_,evo),e(L_,cq),e(cq,ovo),e(L_,rvo),e(x,tvo),e(x,x_),e(x_,gie),e(gie,avo),e(x_,nvo),e(x_,fq),e(fq,svo),e(x_,lvo),e(x,ivo),e(x,$_),e($_,hie),e(hie,dvo),e($_,cvo),e($_,mq),e(mq,fvo),e($_,mvo),e(x,gvo),e(x,k_),e(k_,pie),e(pie,hvo),e(k_,pvo),e(k_,gq),e(gq,_vo),e(k_,uvo),e(x,bvo),e(x,S_),e(S_,_ie),e(_ie,vvo),e(S_,Fvo),e(S_,hq),e(hq,Tvo),e(S_,Mvo),e(x,Evo),e(x,R_),e(R_,uie),e(uie,Cvo),e(R_,wvo),e(R_,pq),e(pq,Avo),e(R_,yvo),e(x,Lvo),e(x,P_),e(P_,bie),e(bie,xvo),e(P_,$vo),e(P_,_q),e(_q,kvo),e(P_,Svo),e(x,Rvo),e(x,B_),e(B_,vie),e(vie,Pvo),e(B_,Bvo),e(B_,uq),e(uq,Ivo),e(B_,Nvo),e(x,qvo),e(x,I_),e(I_,Fie),e(Fie,jvo),e(I_,Dvo),e(I_,bq),e(bq,Gvo),e(I_,Ovo),e(x,Vvo),e(x,N_),e(N_,Tie),e(Tie,Xvo),e(N_,zvo),e(N_,vq),e(vq,Wvo),e(N_,Qvo),e(x,Hvo),e(x,q_),e(q_,Mie),e(Mie,Uvo),e(q_,Jvo),e(q_,Fq),e(Fq,Yvo),e(q_,Kvo),e(x,Zvo),e(x,j_),e(j_,Eie),e(Eie,eFo),e(j_,oFo),e(j_,Tq),e(Tq,rFo),e(j_,tFo),e(x,aFo),e(x,D_),e(D_,Cie),e(Cie,nFo),e(D_,sFo),e(D_,Mq),e(Mq,lFo),e(D_,iFo),e(x,dFo),e(x,G_),e(G_,wie),e(wie,cFo),e(G_,fFo),e(G_,Eq),e(Eq,mFo),e(G_,gFo),e(x,hFo),e(x,O_),e(O_,Aie),e(Aie,pFo),e(O_,_Fo),e(O_,Cq),e(Cq,uFo),e(O_,bFo),e(x,vFo),e(x,V_),e(V_,yie),e(yie,FFo),e(V_,TFo),e(V_,wq),e(wq,MFo),e(V_,EFo),e(x,CFo),e(x,X_),e(X_,Lie),e(Lie,wFo),e(X_,AFo),e(X_,Aq),e(Aq,yFo),e(X_,LFo),e(x,xFo),e(x,z_),e(z_,xie),e(xie,$Fo),e(z_,kFo),e(z_,yq),e(yq,SFo),e(z_,RFo),e(x,PFo),e(x,W_),e(W_,$ie),e($ie,BFo),e(W_,IFo),e(W_,Lq),e(Lq,NFo),e(W_,qFo),e(x,jFo),e(x,Q_),e(Q_,kie),e(kie,DFo),e(Q_,GFo),e(Q_,xq),e(xq,OFo),e(Q_,VFo),e(x,XFo),e(x,H_),e(H_,Sie),e(Sie,zFo),e(H_,WFo),e(H_,$q),e($q,QFo),e(H_,HFo),e(x,UFo),e(x,U_),e(U_,Rie),e(Rie,JFo),e(U_,YFo),e(U_,kq),e(kq,KFo),e(U_,ZFo),e(x,eTo),e(x,J_),e(J_,Pie),e(Pie,oTo),e(J_,rTo),e(J_,Sq),e(Sq,tTo),e(J_,aTo),e(x,nTo),e(x,Y_),e(Y_,Bie),e(Bie,sTo),e(Y_,lTo),e(Y_,Rq),e(Rq,iTo),e(Y_,dTo),e(x,cTo),e(x,K_),e(K_,Iie),e(Iie,fTo),e(K_,mTo),e(K_,Pq),e(Pq,gTo),e(K_,hTo),e(x,pTo),e(x,Z_),e(Z_,Nie),e(Nie,_To),e(Z_,uTo),e(Z_,Bq),e(Bq,bTo),e(Z_,vTo),e(x,FTo),e(x,eu),e(eu,qie),e(qie,TTo),e(eu,MTo),e(eu,Iq),e(Iq,ETo),e(eu,CTo),e(x,wTo),e(x,ou),e(ou,jie),e(jie,ATo),e(ou,yTo),e(ou,Nq),e(Nq,LTo),e(ou,xTo),e(x,$To),e(x,ru),e(ru,Die),e(Die,kTo),e(ru,STo),e(ru,qq),e(qq,RTo),e(ru,PTo),e(x,BTo),e(x,tu),e(tu,Gie),e(Gie,ITo),e(tu,NTo),e(tu,jq),e(jq,qTo),e(tu,jTo),e(x,DTo),e(x,au),e(au,Oie),e(Oie,GTo),e(au,OTo),e(au,Dq),e(Dq,VTo),e(au,XTo),e(x,zTo),e(x,nu),e(nu,Vie),e(Vie,WTo),e(nu,QTo),e(nu,Gq),e(Gq,HTo),e(nu,UTo),e(Je,JTo),e(Je,su),e(su,YTo),e(su,Xie),e(Xie,KTo),e(su,ZTo),e(su,zie),e(zie,eMo),e(Je,oMo),M(lu,Je,null),b(f,aje,u),b(f,$i,u),e($i,iu),e(iu,Wie),M(py,Wie,null),e($i,rMo),e($i,Qie),e(Qie,tMo),b(f,nje,u),b(f,xo,u),M(_y,xo,null),e(xo,aMo),e(xo,ki),e(ki,nMo),e(ki,Oq),e(Oq,sMo),e(ki,lMo),e(ki,Vq),e(Vq,iMo),e(ki,dMo),e(xo,cMo),e(xo,uy),e(uy,fMo),e(uy,Hie),e(Hie,mMo),e(uy,gMo),e(xo,hMo),e(xo,nt),M(by,nt,null),e(nt,pMo),e(nt,Uie),e(Uie,_Mo),e(nt,uMo),e(nt,Si),e(Si,bMo),e(Si,Jie),e(Jie,vMo),e(Si,FMo),e(Si,Xq),e(Xq,TMo),e(Si,MMo),e(nt,EMo),M(du,nt,null),e(xo,CMo),e(xo,Ye),M(vy,Ye,null),e(Ye,wMo),e(Ye,Yie),e(Yie,AMo),e(Ye,yMo),e(Ye,$a),e($a,LMo),e($a,Kie),e(Kie,xMo),e($a,$Mo),e($a,Zie),e(Zie,kMo),e($a,SMo),e($a,ede),e(ede,RMo),e($a,PMo),e(Ye,BMo),e(Ye,G),e(G,cu),e(cu,ode),e(ode,IMo),e(cu,NMo),e(cu,zq),e(zq,qMo),e(cu,jMo),e(G,DMo),e(G,fu),e(fu,rde),e(rde,GMo),e(fu,OMo),e(fu,Wq),e(Wq,VMo),e(fu,XMo),e(G,zMo),e(G,mu),e(mu,tde),e(tde,WMo),e(mu,QMo),e(mu,Qq),e(Qq,HMo),e(mu,UMo),e(G,JMo),e(G,gu),e(gu,ade),e(ade,YMo),e(gu,KMo),e(gu,Hq),e(Hq,ZMo),e(gu,eEo),e(G,oEo),e(G,hu),e(hu,nde),e(nde,rEo),e(hu,tEo),e(hu,Uq),e(Uq,aEo),e(hu,nEo),e(G,sEo),e(G,pu),e(pu,sde),e(sde,lEo),e(pu,iEo),e(pu,Jq),e(Jq,dEo),e(pu,cEo),e(G,fEo),e(G,_u),e(_u,lde),e(lde,mEo),e(_u,gEo),e(_u,Yq),e(Yq,hEo),e(_u,pEo),e(G,_Eo),e(G,uu),e(uu,ide),e(ide,uEo),e(uu,bEo),e(uu,Kq),e(Kq,vEo),e(uu,FEo),e(G,TEo),e(G,bu),e(bu,dde),e(dde,MEo),e(bu,EEo),e(bu,Zq),e(Zq,CEo),e(bu,wEo),e(G,AEo),e(G,vu),e(vu,cde),e(cde,yEo),e(vu,LEo),e(vu,ej),e(ej,xEo),e(vu,$Eo),e(G,kEo),e(G,Fu),e(Fu,fde),e(fde,SEo),e(Fu,REo),e(Fu,oj),e(oj,PEo),e(Fu,BEo),e(G,IEo),e(G,Tu),e(Tu,mde),e(mde,NEo),e(Tu,qEo),e(Tu,rj),e(rj,jEo),e(Tu,DEo),e(G,GEo),e(G,Mu),e(Mu,gde),e(gde,OEo),e(Mu,VEo),e(Mu,tj),e(tj,XEo),e(Mu,zEo),e(G,WEo),e(G,Eu),e(Eu,hde),e(hde,QEo),e(Eu,HEo),e(Eu,aj),e(aj,UEo),e(Eu,JEo),e(G,YEo),e(G,Cu),e(Cu,pde),e(pde,KEo),e(Cu,ZEo),e(Cu,nj),e(nj,eCo),e(Cu,oCo),e(G,rCo),e(G,wu),e(wu,_de),e(_de,tCo),e(wu,aCo),e(wu,sj),e(sj,nCo),e(wu,sCo),e(G,lCo),e(G,Au),e(Au,ude),e(ude,iCo),e(Au,dCo),e(Au,lj),e(lj,cCo),e(Au,fCo),e(G,mCo),e(G,yu),e(yu,bde),e(bde,gCo),e(yu,hCo),e(yu,ij),e(ij,pCo),e(yu,_Co),e(G,uCo),e(G,Lu),e(Lu,vde),e(vde,bCo),e(Lu,vCo),e(Lu,dj),e(dj,FCo),e(Lu,TCo),e(G,MCo),e(G,xu),e(xu,Fde),e(Fde,ECo),e(xu,CCo),e(xu,cj),e(cj,wCo),e(xu,ACo),e(G,yCo),e(G,$u),e($u,Tde),e(Tde,LCo),e($u,xCo),e($u,fj),e(fj,$Co),e($u,kCo),e(G,SCo),e(G,ku),e(ku,Mde),e(Mde,RCo),e(ku,PCo),e(ku,mj),e(mj,BCo),e(ku,ICo),e(G,NCo),e(G,Su),e(Su,Ede),e(Ede,qCo),e(Su,jCo),e(Su,gj),e(gj,DCo),e(Su,GCo),e(G,OCo),e(G,Ru),e(Ru,Cde),e(Cde,VCo),e(Ru,XCo),e(Ru,hj),e(hj,zCo),e(Ru,WCo),e(G,QCo),e(G,Pu),e(Pu,wde),e(wde,HCo),e(Pu,UCo),e(Pu,pj),e(pj,JCo),e(Pu,YCo),e(G,KCo),e(G,Bu),e(Bu,Ade),e(Ade,ZCo),e(Bu,e5o),e(Bu,_j),e(_j,o5o),e(Bu,r5o),e(G,t5o),e(G,Iu),e(Iu,yde),e(yde,a5o),e(Iu,n5o),e(Iu,uj),e(uj,s5o),e(Iu,l5o),e(G,i5o),e(G,Nu),e(Nu,Lde),e(Lde,d5o),e(Nu,c5o),e(Nu,bj),e(bj,f5o),e(Nu,m5o),e(G,g5o),e(G,qu),e(qu,xde),e(xde,h5o),e(qu,p5o),e(qu,vj),e(vj,_5o),e(qu,u5o),e(G,b5o),e(G,ju),e(ju,$de),e($de,v5o),e(ju,F5o),e(ju,Fj),e(Fj,T5o),e(ju,M5o),e(G,E5o),e(G,Du),e(Du,kde),e(kde,C5o),e(Du,w5o),e(Du,Tj),e(Tj,A5o),e(Du,y5o),e(G,L5o),e(G,Gu),e(Gu,Sde),e(Sde,x5o),e(Gu,$5o),e(Gu,Mj),e(Mj,k5o),e(Gu,S5o),e(G,R5o),e(G,Ou),e(Ou,Rde),e(Rde,P5o),e(Ou,B5o),e(Ou,Ej),e(Ej,I5o),e(Ou,N5o),e(G,q5o),e(G,Vu),e(Vu,Pde),e(Pde,j5o),e(Vu,D5o),e(Vu,Cj),e(Cj,G5o),e(Vu,O5o),e(G,V5o),e(G,Xu),e(Xu,Bde),e(Bde,X5o),e(Xu,z5o),e(Xu,wj),e(wj,W5o),e(Xu,Q5o),e(G,H5o),e(G,zu),e(zu,Ide),e(Ide,U5o),e(zu,J5o),e(zu,Aj),e(Aj,Y5o),e(zu,K5o),e(G,Z5o),e(G,Wu),e(Wu,Nde),e(Nde,e3o),e(Wu,o3o),e(Wu,yj),e(yj,r3o),e(Wu,t3o),e(G,a3o),e(G,Qu),e(Qu,qde),e(qde,n3o),e(Qu,s3o),e(Qu,Lj),e(Lj,l3o),e(Qu,i3o),e(G,d3o),e(G,Hu),e(Hu,jde),e(jde,c3o),e(Hu,f3o),e(Hu,xj),e(xj,m3o),e(Hu,g3o),e(G,h3o),e(G,Uu),e(Uu,Dde),e(Dde,p3o),e(Uu,_3o),e(Uu,$j),e($j,u3o),e(Uu,b3o),e(G,v3o),e(G,Ju),e(Ju,Gde),e(Gde,F3o),e(Ju,T3o),e(Ju,kj),e(kj,M3o),e(Ju,E3o),e(G,C3o),e(G,Yu),e(Yu,Ode),e(Ode,w3o),e(Yu,A3o),e(Yu,Sj),e(Sj,y3o),e(Yu,L3o),e(Ye,x3o),e(Ye,Ku),e(Ku,$3o),e(Ku,Vde),e(Vde,k3o),e(Ku,S3o),e(Ku,Xde),e(Xde,R3o),e(Ye,P3o),M(Zu,Ye,null),b(f,sje,u),b(f,Ri,u),e(Ri,e2),e(e2,zde),M(Fy,zde,null),e(Ri,B3o),e(Ri,Wde),e(Wde,I3o),b(f,lje,u),b(f,$o,u),M(Ty,$o,null),e($o,N3o),e($o,Pi),e(Pi,q3o),e(Pi,Rj),e(Rj,j3o),e(Pi,D3o),e(Pi,Pj),e(Pj,G3o),e(Pi,O3o),e($o,V3o),e($o,My),e(My,X3o),e(My,Qde),e(Qde,z3o),e(My,W3o),e($o,Q3o),e($o,st),M(Ey,st,null),e(st,H3o),e(st,Hde),e(Hde,U3o),e(st,J3o),e(st,Bi),e(Bi,Y3o),e(Bi,Ude),e(Ude,K3o),e(Bi,Z3o),e(Bi,Bj),e(Bj,e0o),e(Bi,o0o),e(st,r0o),M(o2,st,null),e($o,t0o),e($o,Ke),M(Cy,Ke,null),e(Ke,a0o),e(Ke,Jde),e(Jde,n0o),e(Ke,s0o),e(Ke,ka),e(ka,l0o),e(ka,Yde),e(Yde,i0o),e(ka,d0o),e(ka,Kde),e(Kde,c0o),e(ka,f0o),e(ka,Zde),e(Zde,m0o),e(ka,g0o),e(Ke,h0o),e(Ke,z),e(z,r2),e(r2,ece),e(ece,p0o),e(r2,_0o),e(r2,Ij),e(Ij,u0o),e(r2,b0o),e(z,v0o),e(z,t2),e(t2,oce),e(oce,F0o),e(t2,T0o),e(t2,Nj),e(Nj,M0o),e(t2,E0o),e(z,C0o),e(z,a2),e(a2,rce),e(rce,w0o),e(a2,A0o),e(a2,qj),e(qj,y0o),e(a2,L0o),e(z,x0o),e(z,n2),e(n2,tce),e(tce,$0o),e(n2,k0o),e(n2,jj),e(jj,S0o),e(n2,R0o),e(z,P0o),e(z,s2),e(s2,ace),e(ace,B0o),e(s2,I0o),e(s2,Dj),e(Dj,N0o),e(s2,q0o),e(z,j0o),e(z,l2),e(l2,nce),e(nce,D0o),e(l2,G0o),e(l2,Gj),e(Gj,O0o),e(l2,V0o),e(z,X0o),e(z,i2),e(i2,sce),e(sce,z0o),e(i2,W0o),e(i2,Oj),e(Oj,Q0o),e(i2,H0o),e(z,U0o),e(z,d2),e(d2,lce),e(lce,J0o),e(d2,Y0o),e(d2,Vj),e(Vj,K0o),e(d2,Z0o),e(z,ewo),e(z,c2),e(c2,ice),e(ice,owo),e(c2,rwo),e(c2,Xj),e(Xj,two),e(c2,awo),e(z,nwo),e(z,f2),e(f2,dce),e(dce,swo),e(f2,lwo),e(f2,zj),e(zj,iwo),e(f2,dwo),e(z,cwo),e(z,m2),e(m2,cce),e(cce,fwo),e(m2,mwo),e(m2,Wj),e(Wj,gwo),e(m2,hwo),e(z,pwo),e(z,g2),e(g2,fce),e(fce,_wo),e(g2,uwo),e(g2,Qj),e(Qj,bwo),e(g2,vwo),e(z,Fwo),e(z,h2),e(h2,mce),e(mce,Two),e(h2,Mwo),e(h2,Hj),e(Hj,Ewo),e(h2,Cwo),e(z,wwo),e(z,p2),e(p2,gce),e(gce,Awo),e(p2,ywo),e(p2,Uj),e(Uj,Lwo),e(p2,xwo),e(z,$wo),e(z,_2),e(_2,hce),e(hce,kwo),e(_2,Swo),e(_2,Jj),e(Jj,Rwo),e(_2,Pwo),e(z,Bwo),e(z,u2),e(u2,pce),e(pce,Iwo),e(u2,Nwo),e(u2,Yj),e(Yj,qwo),e(u2,jwo),e(z,Dwo),e(z,b2),e(b2,_ce),e(_ce,Gwo),e(b2,Owo),e(b2,Kj),e(Kj,Vwo),e(b2,Xwo),e(z,zwo),e(z,v2),e(v2,uce),e(uce,Wwo),e(v2,Qwo),e(v2,Zj),e(Zj,Hwo),e(v2,Uwo),e(z,Jwo),e(z,F2),e(F2,bce),e(bce,Ywo),e(F2,Kwo),e(F2,eD),e(eD,Zwo),e(F2,eAo),e(z,oAo),e(z,T2),e(T2,vce),e(vce,rAo),e(T2,tAo),e(T2,oD),e(oD,aAo),e(T2,nAo),e(z,sAo),e(z,M2),e(M2,Fce),e(Fce,lAo),e(M2,iAo),e(M2,rD),e(rD,dAo),e(M2,cAo),e(z,fAo),e(z,E2),e(E2,Tce),e(Tce,mAo),e(E2,gAo),e(E2,tD),e(tD,hAo),e(E2,pAo),e(z,_Ao),e(z,C2),e(C2,Mce),e(Mce,uAo),e(C2,bAo),e(C2,aD),e(aD,vAo),e(C2,FAo),e(z,TAo),e(z,w2),e(w2,Ece),e(Ece,MAo),e(w2,EAo),e(w2,nD),e(nD,CAo),e(w2,wAo),e(z,AAo),e(z,A2),e(A2,Cce),e(Cce,yAo),e(A2,LAo),e(A2,sD),e(sD,xAo),e(A2,$Ao),e(z,kAo),e(z,y2),e(y2,wce),e(wce,SAo),e(y2,RAo),e(y2,lD),e(lD,PAo),e(y2,BAo),e(z,IAo),e(z,L2),e(L2,Ace),e(Ace,NAo),e(L2,qAo),e(L2,iD),e(iD,jAo),e(L2,DAo),e(z,GAo),e(z,x2),e(x2,yce),e(yce,OAo),e(x2,VAo),e(x2,dD),e(dD,XAo),e(x2,zAo),e(z,WAo),e(z,$2),e($2,Lce),e(Lce,QAo),e($2,HAo),e($2,cD),e(cD,UAo),e($2,JAo),e(z,YAo),e(z,k2),e(k2,xce),e(xce,KAo),e(k2,ZAo),e(k2,fD),e(fD,e6o),e(k2,o6o),e(z,r6o),e(z,S2),e(S2,$ce),e($ce,t6o),e(S2,a6o),e(S2,mD),e(mD,n6o),e(S2,s6o),e(z,l6o),e(z,R2),e(R2,kce),e(kce,i6o),e(R2,d6o),e(R2,gD),e(gD,c6o),e(R2,f6o),e(z,m6o),e(z,P2),e(P2,Sce),e(Sce,g6o),e(P2,h6o),e(P2,hD),e(hD,p6o),e(P2,_6o),e(z,u6o),e(z,B2),e(B2,Rce),e(Rce,b6o),e(B2,v6o),e(B2,pD),e(pD,F6o),e(B2,T6o),e(z,M6o),e(z,I2),e(I2,Pce),e(Pce,E6o),e(I2,C6o),e(I2,_D),e(_D,w6o),e(I2,A6o),e(z,y6o),e(z,N2),e(N2,Bce),e(Bce,L6o),e(N2,x6o),e(N2,uD),e(uD,$6o),e(N2,k6o),e(z,S6o),e(z,q2),e(q2,Ice),e(Ice,R6o),e(q2,P6o),e(q2,bD),e(bD,B6o),e(q2,I6o),e(Ke,N6o),e(Ke,j2),e(j2,q6o),e(j2,Nce),e(Nce,j6o),e(j2,D6o),e(j2,qce),e(qce,G6o),e(Ke,O6o),M(D2,Ke,null),b(f,ije,u),b(f,Ii,u),e(Ii,G2),e(G2,jce),M(wy,jce,null),e(Ii,V6o),e(Ii,Dce),e(Dce,X6o),b(f,dje,u),b(f,ko,u),M(Ay,ko,null),e(ko,z6o),e(ko,Ni),e(Ni,W6o),e(Ni,vD),e(vD,Q6o),e(Ni,H6o),e(Ni,FD),e(FD,U6o),e(Ni,J6o),e(ko,Y6o),e(ko,yy),e(yy,K6o),e(yy,Gce),e(Gce,Z6o),e(yy,eyo),e(ko,oyo),e(ko,lt),M(Ly,lt,null),e(lt,ryo),e(lt,Oce),e(Oce,tyo),e(lt,ayo),e(lt,qi),e(qi,nyo),e(qi,Vce),e(Vce,syo),e(qi,lyo),e(qi,TD),e(TD,iyo),e(qi,dyo),e(lt,cyo),M(O2,lt,null),e(ko,fyo),e(ko,Ze),M(xy,Ze,null),e(Ze,myo),e(Ze,Xce),e(Xce,gyo),e(Ze,hyo),e(Ze,Sa),e(Sa,pyo),e(Sa,zce),e(zce,_yo),e(Sa,uyo),e(Sa,Wce),e(Wce,byo),e(Sa,vyo),e(Sa,Qce),e(Qce,Fyo),e(Sa,Tyo),e(Ze,Myo),e(Ze,W),e(W,V2),e(V2,Hce),e(Hce,Eyo),e(V2,Cyo),e(V2,MD),e(MD,wyo),e(V2,Ayo),e(W,yyo),e(W,X2),e(X2,Uce),e(Uce,Lyo),e(X2,xyo),e(X2,ED),e(ED,$yo),e(X2,kyo),e(W,Syo),e(W,z2),e(z2,Jce),e(Jce,Ryo),e(z2,Pyo),e(z2,CD),e(CD,Byo),e(z2,Iyo),e(W,Nyo),e(W,W2),e(W2,Yce),e(Yce,qyo),e(W2,jyo),e(W2,wD),e(wD,Dyo),e(W2,Gyo),e(W,Oyo),e(W,Q2),e(Q2,Kce),e(Kce,Vyo),e(Q2,Xyo),e(Q2,AD),e(AD,zyo),e(Q2,Wyo),e(W,Qyo),e(W,H2),e(H2,Zce),e(Zce,Hyo),e(H2,Uyo),e(H2,yD),e(yD,Jyo),e(H2,Yyo),e(W,Kyo),e(W,U2),e(U2,efe),e(efe,Zyo),e(U2,eLo),e(U2,LD),e(LD,oLo),e(U2,rLo),e(W,tLo),e(W,J2),e(J2,ofe),e(ofe,aLo),e(J2,nLo),e(J2,xD),e(xD,sLo),e(J2,lLo),e(W,iLo),e(W,Y2),e(Y2,rfe),e(rfe,dLo),e(Y2,cLo),e(Y2,$D),e($D,fLo),e(Y2,mLo),e(W,gLo),e(W,K2),e(K2,tfe),e(tfe,hLo),e(K2,pLo),e(K2,kD),e(kD,_Lo),e(K2,uLo),e(W,bLo),e(W,Z2),e(Z2,afe),e(afe,vLo),e(Z2,FLo),e(Z2,SD),e(SD,TLo),e(Z2,MLo),e(W,ELo),e(W,e1),e(e1,nfe),e(nfe,CLo),e(e1,wLo),e(e1,RD),e(RD,ALo),e(e1,yLo),e(W,LLo),e(W,o1),e(o1,sfe),e(sfe,xLo),e(o1,$Lo),e(o1,PD),e(PD,kLo),e(o1,SLo),e(W,RLo),e(W,r1),e(r1,lfe),e(lfe,PLo),e(r1,BLo),e(r1,BD),e(BD,ILo),e(r1,NLo),e(W,qLo),e(W,t1),e(t1,ife),e(ife,jLo),e(t1,DLo),e(t1,ID),e(ID,GLo),e(t1,OLo),e(W,VLo),e(W,a1),e(a1,dfe),e(dfe,XLo),e(a1,zLo),e(a1,ND),e(ND,WLo),e(a1,QLo),e(W,HLo),e(W,n1),e(n1,cfe),e(cfe,ULo),e(n1,JLo),e(n1,qD),e(qD,YLo),e(n1,KLo),e(W,ZLo),e(W,s1),e(s1,ffe),e(ffe,e8o),e(s1,o8o),e(s1,jD),e(jD,r8o),e(s1,t8o),e(W,a8o),e(W,l1),e(l1,mfe),e(mfe,n8o),e(l1,s8o),e(l1,DD),e(DD,l8o),e(l1,i8o),e(W,d8o),e(W,i1),e(i1,gfe),e(gfe,c8o),e(i1,f8o),e(i1,GD),e(GD,m8o),e(i1,g8o),e(W,h8o),e(W,d1),e(d1,hfe),e(hfe,p8o),e(d1,_8o),e(d1,OD),e(OD,u8o),e(d1,b8o),e(W,v8o),e(W,c1),e(c1,pfe),e(pfe,F8o),e(c1,T8o),e(c1,VD),e(VD,M8o),e(c1,E8o),e(W,C8o),e(W,f1),e(f1,_fe),e(_fe,w8o),e(f1,A8o),e(f1,XD),e(XD,y8o),e(f1,L8o),e(W,x8o),e(W,m1),e(m1,ufe),e(ufe,$8o),e(m1,k8o),e(m1,zD),e(zD,S8o),e(m1,R8o),e(W,P8o),e(W,g1),e(g1,bfe),e(bfe,B8o),e(g1,I8o),e(g1,WD),e(WD,N8o),e(g1,q8o),e(W,j8o),e(W,h1),e(h1,vfe),e(vfe,D8o),e(h1,G8o),e(h1,QD),e(QD,O8o),e(h1,V8o),e(W,X8o),e(W,p1),e(p1,Ffe),e(Ffe,z8o),e(p1,W8o),e(p1,HD),e(HD,Q8o),e(p1,H8o),e(W,U8o),e(W,_1),e(_1,Tfe),e(Tfe,J8o),e(_1,Y8o),e(_1,UD),e(UD,K8o),e(_1,Z8o),e(W,e9o),e(W,u1),e(u1,Mfe),e(Mfe,o9o),e(u1,r9o),e(u1,JD),e(JD,t9o),e(u1,a9o),e(W,n9o),e(W,b1),e(b1,Efe),e(Efe,s9o),e(b1,l9o),e(b1,YD),e(YD,i9o),e(b1,d9o),e(W,c9o),e(W,v1),e(v1,Cfe),e(Cfe,f9o),e(v1,m9o),e(v1,KD),e(KD,g9o),e(v1,h9o),e(W,p9o),e(W,F1),e(F1,wfe),e(wfe,_9o),e(F1,u9o),e(F1,Afe),e(Afe,b9o),e(F1,v9o),e(W,F9o),e(W,T1),e(T1,yfe),e(yfe,T9o),e(T1,M9o),e(T1,ZD),e(ZD,E9o),e(T1,C9o),e(W,w9o),e(W,M1),e(M1,Lfe),e(Lfe,A9o),e(M1,y9o),e(M1,eG),e(eG,L9o),e(M1,x9o),e(W,$9o),e(W,E1),e(E1,xfe),e(xfe,k9o),e(E1,S9o),e(E1,oG),e(oG,R9o),e(E1,P9o),e(W,B9o),e(W,C1),e(C1,$fe),e($fe,I9o),e(C1,N9o),e(C1,rG),e(rG,q9o),e(C1,j9o),e(Ze,D9o),e(Ze,w1),e(w1,G9o),e(w1,kfe),e(kfe,O9o),e(w1,V9o),e(w1,Sfe),e(Sfe,X9o),e(Ze,z9o),M(A1,Ze,null),b(f,cje,u),b(f,ji,u),e(ji,y1),e(y1,Rfe),M($y,Rfe,null),e(ji,W9o),e(ji,Pfe),e(Pfe,Q9o),b(f,fje,u),b(f,So,u),M(ky,So,null),e(So,H9o),e(So,Di),e(Di,U9o),e(Di,tG),e(tG,J9o),e(Di,Y9o),e(Di,aG),e(aG,K9o),e(Di,Z9o),e(So,exo),e(So,Sy),e(Sy,oxo),e(Sy,Bfe),e(Bfe,rxo),e(Sy,txo),e(So,axo),e(So,it),M(Ry,it,null),e(it,nxo),e(it,Ife),e(Ife,sxo),e(it,lxo),e(it,Gi),e(Gi,ixo),e(Gi,Nfe),e(Nfe,dxo),e(Gi,cxo),e(Gi,nG),e(nG,fxo),e(Gi,mxo),e(it,gxo),M(L1,it,null),e(So,hxo),e(So,eo),M(Py,eo,null),e(eo,pxo),e(eo,qfe),e(qfe,_xo),e(eo,uxo),e(eo,Ra),e(Ra,bxo),e(Ra,jfe),e(jfe,vxo),e(Ra,Fxo),e(Ra,Dfe),e(Dfe,Txo),e(Ra,Mxo),e(Ra,Gfe),e(Gfe,Exo),e(Ra,Cxo),e(eo,wxo),e(eo,_e),e(_e,x1),e(x1,Ofe),e(Ofe,Axo),e(x1,yxo),e(x1,sG),e(sG,Lxo),e(x1,xxo),e(_e,$xo),e(_e,$1),e($1,Vfe),e(Vfe,kxo),e($1,Sxo),e($1,lG),e(lG,Rxo),e($1,Pxo),e(_e,Bxo),e(_e,k1),e(k1,Xfe),e(Xfe,Ixo),e(k1,Nxo),e(k1,iG),e(iG,qxo),e(k1,jxo),e(_e,Dxo),e(_e,S1),e(S1,zfe),e(zfe,Gxo),e(S1,Oxo),e(S1,dG),e(dG,Vxo),e(S1,Xxo),e(_e,zxo),e(_e,R1),e(R1,Wfe),e(Wfe,Wxo),e(R1,Qxo),e(R1,cG),e(cG,Hxo),e(R1,Uxo),e(_e,Jxo),e(_e,P1),e(P1,Qfe),e(Qfe,Yxo),e(P1,Kxo),e(P1,fG),e(fG,Zxo),e(P1,e$o),e(_e,o$o),e(_e,B1),e(B1,Hfe),e(Hfe,r$o),e(B1,t$o),e(B1,mG),e(mG,a$o),e(B1,n$o),e(_e,s$o),e(_e,I1),e(I1,Ufe),e(Ufe,l$o),e(I1,i$o),e(I1,gG),e(gG,d$o),e(I1,c$o),e(_e,f$o),e(_e,N1),e(N1,Jfe),e(Jfe,m$o),e(N1,g$o),e(N1,hG),e(hG,h$o),e(N1,p$o),e(_e,_$o),e(_e,q1),e(q1,Yfe),e(Yfe,u$o),e(q1,b$o),e(q1,pG),e(pG,v$o),e(q1,F$o),e(_e,T$o),e(_e,j1),e(j1,Kfe),e(Kfe,M$o),e(j1,E$o),e(j1,_G),e(_G,C$o),e(j1,w$o),e(_e,A$o),e(_e,D1),e(D1,Zfe),e(Zfe,y$o),e(D1,L$o),e(D1,uG),e(uG,x$o),e(D1,$$o),e(_e,k$o),e(_e,G1),e(G1,eme),e(eme,S$o),e(G1,R$o),e(G1,bG),e(bG,P$o),e(G1,B$o),e(_e,I$o),e(_e,O1),e(O1,ome),e(ome,N$o),e(O1,q$o),e(O1,vG),e(vG,j$o),e(O1,D$o),e(_e,G$o),e(_e,V1),e(V1,rme),e(rme,O$o),e(V1,V$o),e(V1,FG),e(FG,X$o),e(V1,z$o),e(_e,W$o),e(_e,X1),e(X1,tme),e(tme,Q$o),e(X1,H$o),e(X1,TG),e(TG,U$o),e(X1,J$o),e(eo,Y$o),e(eo,z1),e(z1,K$o),e(z1,ame),e(ame,Z$o),e(z1,eko),e(z1,nme),e(nme,oko),e(eo,rko),M(W1,eo,null),b(f,mje,u),b(f,Oi,u),e(Oi,Q1),e(Q1,sme),M(By,sme,null),e(Oi,tko),e(Oi,lme),e(lme,ako),b(f,gje,u),b(f,Ro,u),M(Iy,Ro,null),e(Ro,nko),e(Ro,Vi),e(Vi,sko),e(Vi,MG),e(MG,lko),e(Vi,iko),e(Vi,EG),e(EG,dko),e(Vi,cko),e(Ro,fko),e(Ro,Ny),e(Ny,mko),e(Ny,ime),e(ime,gko),e(Ny,hko),e(Ro,pko),e(Ro,dt),M(qy,dt,null),e(dt,_ko),e(dt,dme),e(dme,uko),e(dt,bko),e(dt,Xi),e(Xi,vko),e(Xi,cme),e(cme,Fko),e(Xi,Tko),e(Xi,CG),e(CG,Mko),e(Xi,Eko),e(dt,Cko),M(H1,dt,null),e(Ro,wko),e(Ro,oo),M(jy,oo,null),e(oo,Ako),e(oo,fme),e(fme,yko),e(oo,Lko),e(oo,Pa),e(Pa,xko),e(Pa,mme),e(mme,$ko),e(Pa,kko),e(Pa,gme),e(gme,Sko),e(Pa,Rko),e(Pa,hme),e(hme,Pko),e(Pa,Bko),e(oo,Iko),e(oo,q),e(q,U1),e(U1,pme),e(pme,Nko),e(U1,qko),e(U1,wG),e(wG,jko),e(U1,Dko),e(q,Gko),e(q,J1),e(J1,_me),e(_me,Oko),e(J1,Vko),e(J1,AG),e(AG,Xko),e(J1,zko),e(q,Wko),e(q,Y1),e(Y1,ume),e(ume,Qko),e(Y1,Hko),e(Y1,yG),e(yG,Uko),e(Y1,Jko),e(q,Yko),e(q,K1),e(K1,bme),e(bme,Kko),e(K1,Zko),e(K1,LG),e(LG,eSo),e(K1,oSo),e(q,rSo),e(q,Z1),e(Z1,vme),e(vme,tSo),e(Z1,aSo),e(Z1,xG),e(xG,nSo),e(Z1,sSo),e(q,lSo),e(q,e7),e(e7,Fme),e(Fme,iSo),e(e7,dSo),e(e7,$G),e($G,cSo),e(e7,fSo),e(q,mSo),e(q,o7),e(o7,Tme),e(Tme,gSo),e(o7,hSo),e(o7,kG),e(kG,pSo),e(o7,_So),e(q,uSo),e(q,r7),e(r7,Mme),e(Mme,bSo),e(r7,vSo),e(r7,SG),e(SG,FSo),e(r7,TSo),e(q,MSo),e(q,t7),e(t7,Eme),e(Eme,ESo),e(t7,CSo),e(t7,RG),e(RG,wSo),e(t7,ASo),e(q,ySo),e(q,a7),e(a7,Cme),e(Cme,LSo),e(a7,xSo),e(a7,PG),e(PG,$So),e(a7,kSo),e(q,SSo),e(q,n7),e(n7,wme),e(wme,RSo),e(n7,PSo),e(n7,BG),e(BG,BSo),e(n7,ISo),e(q,NSo),e(q,s7),e(s7,Ame),e(Ame,qSo),e(s7,jSo),e(s7,IG),e(IG,DSo),e(s7,GSo),e(q,OSo),e(q,l7),e(l7,yme),e(yme,VSo),e(l7,XSo),e(l7,NG),e(NG,zSo),e(l7,WSo),e(q,QSo),e(q,i7),e(i7,Lme),e(Lme,HSo),e(i7,USo),e(i7,qG),e(qG,JSo),e(i7,YSo),e(q,KSo),e(q,d7),e(d7,xme),e(xme,ZSo),e(d7,eRo),e(d7,jG),e(jG,oRo),e(d7,rRo),e(q,tRo),e(q,c7),e(c7,$me),e($me,aRo),e(c7,nRo),e(c7,DG),e(DG,sRo),e(c7,lRo),e(q,iRo),e(q,f7),e(f7,kme),e(kme,dRo),e(f7,cRo),e(f7,GG),e(GG,fRo),e(f7,mRo),e(q,gRo),e(q,m7),e(m7,Sme),e(Sme,hRo),e(m7,pRo),e(m7,OG),e(OG,_Ro),e(m7,uRo),e(q,bRo),e(q,g7),e(g7,Rme),e(Rme,vRo),e(g7,FRo),e(g7,VG),e(VG,TRo),e(g7,MRo),e(q,ERo),e(q,h7),e(h7,Pme),e(Pme,CRo),e(h7,wRo),e(h7,XG),e(XG,ARo),e(h7,yRo),e(q,LRo),e(q,p7),e(p7,Bme),e(Bme,xRo),e(p7,$Ro),e(p7,zG),e(zG,kRo),e(p7,SRo),e(q,RRo),e(q,_7),e(_7,Ime),e(Ime,PRo),e(_7,BRo),e(_7,WG),e(WG,IRo),e(_7,NRo),e(q,qRo),e(q,u7),e(u7,Nme),e(Nme,jRo),e(u7,DRo),e(u7,QG),e(QG,GRo),e(u7,ORo),e(q,VRo),e(q,b7),e(b7,qme),e(qme,XRo),e(b7,zRo),e(b7,HG),e(HG,WRo),e(b7,QRo),e(q,HRo),e(q,v7),e(v7,jme),e(jme,URo),e(v7,JRo),e(v7,UG),e(UG,YRo),e(v7,KRo),e(q,ZRo),e(q,F7),e(F7,Dme),e(Dme,ePo),e(F7,oPo),e(F7,JG),e(JG,rPo),e(F7,tPo),e(q,aPo),e(q,T7),e(T7,Gme),e(Gme,nPo),e(T7,sPo),e(T7,YG),e(YG,lPo),e(T7,iPo),e(q,dPo),e(q,M7),e(M7,Ome),e(Ome,cPo),e(M7,fPo),e(M7,KG),e(KG,mPo),e(M7,gPo),e(q,hPo),e(q,E7),e(E7,Vme),e(Vme,pPo),e(E7,_Po),e(E7,ZG),e(ZG,uPo),e(E7,bPo),e(q,vPo),e(q,C7),e(C7,Xme),e(Xme,FPo),e(C7,TPo),e(C7,eO),e(eO,MPo),e(C7,EPo),e(q,CPo),e(q,w7),e(w7,zme),e(zme,wPo),e(w7,APo),e(w7,oO),e(oO,yPo),e(w7,LPo),e(q,xPo),e(q,A7),e(A7,Wme),e(Wme,$Po),e(A7,kPo),e(A7,rO),e(rO,SPo),e(A7,RPo),e(q,PPo),e(q,y7),e(y7,Qme),e(Qme,BPo),e(y7,IPo),e(y7,tO),e(tO,NPo),e(y7,qPo),e(q,jPo),e(q,L7),e(L7,Hme),e(Hme,DPo),e(L7,GPo),e(L7,aO),e(aO,OPo),e(L7,VPo),e(q,XPo),e(q,x7),e(x7,Ume),e(Ume,zPo),e(x7,WPo),e(x7,nO),e(nO,QPo),e(x7,HPo),e(q,UPo),e(q,$7),e($7,Jme),e(Jme,JPo),e($7,YPo),e($7,sO),e(sO,KPo),e($7,ZPo),e(q,eBo),e(q,k7),e(k7,Yme),e(Yme,oBo),e(k7,rBo),e(k7,lO),e(lO,tBo),e(k7,aBo),e(q,nBo),e(q,S7),e(S7,Kme),e(Kme,sBo),e(S7,lBo),e(S7,iO),e(iO,iBo),e(S7,dBo),e(q,cBo),e(q,R7),e(R7,Zme),e(Zme,fBo),e(R7,mBo),e(R7,dO),e(dO,gBo),e(R7,hBo),e(q,pBo),e(q,P7),e(P7,ege),e(ege,_Bo),e(P7,uBo),e(P7,cO),e(cO,bBo),e(P7,vBo),e(q,FBo),e(q,B7),e(B7,oge),e(oge,TBo),e(B7,MBo),e(B7,fO),e(fO,EBo),e(B7,CBo),e(q,wBo),e(q,I7),e(I7,rge),e(rge,ABo),e(I7,yBo),e(I7,mO),e(mO,LBo),e(I7,xBo),e(q,$Bo),e(q,N7),e(N7,tge),e(tge,kBo),e(N7,SBo),e(N7,gO),e(gO,RBo),e(N7,PBo),e(q,BBo),e(q,q7),e(q7,age),e(age,IBo),e(q7,NBo),e(q7,hO),e(hO,qBo),e(q7,jBo),e(q,DBo),e(q,j7),e(j7,nge),e(nge,GBo),e(j7,OBo),e(j7,pO),e(pO,VBo),e(j7,XBo),e(q,zBo),e(q,D7),e(D7,sge),e(sge,WBo),e(D7,QBo),e(D7,_O),e(_O,HBo),e(D7,UBo),e(q,JBo),e(q,G7),e(G7,lge),e(lge,YBo),e(G7,KBo),e(G7,uO),e(uO,ZBo),e(G7,eIo),e(oo,oIo),e(oo,O7),e(O7,rIo),e(O7,ige),e(ige,tIo),e(O7,aIo),e(O7,dge),e(dge,nIo),e(oo,sIo),M(V7,oo,null),b(f,hje,u),b(f,zi,u),e(zi,X7),e(X7,cge),M(Dy,cge,null),e(zi,lIo),e(zi,fge),e(fge,iIo),b(f,pje,u),b(f,Po,u),M(Gy,Po,null),e(Po,dIo),e(Po,Wi),e(Wi,cIo),e(Wi,bO),e(bO,fIo),e(Wi,mIo),e(Wi,vO),e(vO,gIo),e(Wi,hIo),e(Po,pIo),e(Po,Oy),e(Oy,_Io),e(Oy,mge),e(mge,uIo),e(Oy,bIo),e(Po,vIo),e(Po,ct),M(Vy,ct,null),e(ct,FIo),e(ct,gge),e(gge,TIo),e(ct,MIo),e(ct,Qi),e(Qi,EIo),e(Qi,hge),e(hge,CIo),e(Qi,wIo),e(Qi,FO),e(FO,AIo),e(Qi,yIo),e(ct,LIo),M(z7,ct,null),e(Po,xIo),e(Po,ro),M(Xy,ro,null),e(ro,$Io),e(ro,pge),e(pge,kIo),e(ro,SIo),e(ro,Ba),e(Ba,RIo),e(Ba,_ge),e(_ge,PIo),e(Ba,BIo),e(Ba,uge),e(uge,IIo),e(Ba,NIo),e(Ba,bge),e(bge,qIo),e(Ba,jIo),e(ro,DIo),e(ro,K),e(K,W7),e(W7,vge),e(vge,GIo),e(W7,OIo),e(W7,TO),e(TO,VIo),e(W7,XIo),e(K,zIo),e(K,Q7),e(Q7,Fge),e(Fge,WIo),e(Q7,QIo),e(Q7,MO),e(MO,HIo),e(Q7,UIo),e(K,JIo),e(K,H7),e(H7,Tge),e(Tge,YIo),e(H7,KIo),e(H7,EO),e(EO,ZIo),e(H7,eNo),e(K,oNo),e(K,U7),e(U7,Mge),e(Mge,rNo),e(U7,tNo),e(U7,CO),e(CO,aNo),e(U7,nNo),e(K,sNo),e(K,J7),e(J7,Ege),e(Ege,lNo),e(J7,iNo),e(J7,wO),e(wO,dNo),e(J7,cNo),e(K,fNo),e(K,Y7),e(Y7,Cge),e(Cge,mNo),e(Y7,gNo),e(Y7,AO),e(AO,hNo),e(Y7,pNo),e(K,_No),e(K,K7),e(K7,wge),e(wge,uNo),e(K7,bNo),e(K7,yO),e(yO,vNo),e(K7,FNo),e(K,TNo),e(K,Z7),e(Z7,Age),e(Age,MNo),e(Z7,ENo),e(Z7,LO),e(LO,CNo),e(Z7,wNo),e(K,ANo),e(K,eb),e(eb,yge),e(yge,yNo),e(eb,LNo),e(eb,xO),e(xO,xNo),e(eb,$No),e(K,kNo),e(K,ob),e(ob,Lge),e(Lge,SNo),e(ob,RNo),e(ob,$O),e($O,PNo),e(ob,BNo),e(K,INo),e(K,rb),e(rb,xge),e(xge,NNo),e(rb,qNo),e(rb,kO),e(kO,jNo),e(rb,DNo),e(K,GNo),e(K,tb),e(tb,$ge),e($ge,ONo),e(tb,VNo),e(tb,SO),e(SO,XNo),e(tb,zNo),e(K,WNo),e(K,ab),e(ab,kge),e(kge,QNo),e(ab,HNo),e(ab,RO),e(RO,UNo),e(ab,JNo),e(K,YNo),e(K,nb),e(nb,Sge),e(Sge,KNo),e(nb,ZNo),e(nb,PO),e(PO,eqo),e(nb,oqo),e(K,rqo),e(K,sb),e(sb,Rge),e(Rge,tqo),e(sb,aqo),e(sb,BO),e(BO,nqo),e(sb,sqo),e(K,lqo),e(K,lb),e(lb,Pge),e(Pge,iqo),e(lb,dqo),e(lb,IO),e(IO,cqo),e(lb,fqo),e(K,mqo),e(K,ib),e(ib,Bge),e(Bge,gqo),e(ib,hqo),e(ib,NO),e(NO,pqo),e(ib,_qo),e(K,uqo),e(K,db),e(db,Ige),e(Ige,bqo),e(db,vqo),e(db,qO),e(qO,Fqo),e(db,Tqo),e(K,Mqo),e(K,cb),e(cb,Nge),e(Nge,Eqo),e(cb,Cqo),e(cb,jO),e(jO,wqo),e(cb,Aqo),e(K,yqo),e(K,fb),e(fb,qge),e(qge,Lqo),e(fb,xqo),e(fb,DO),e(DO,$qo),e(fb,kqo),e(K,Sqo),e(K,mb),e(mb,jge),e(jge,Rqo),e(mb,Pqo),e(mb,GO),e(GO,Bqo),e(mb,Iqo),e(K,Nqo),e(K,gb),e(gb,Dge),e(Dge,qqo),e(gb,jqo),e(gb,OO),e(OO,Dqo),e(gb,Gqo),e(K,Oqo),e(K,hb),e(hb,Gge),e(Gge,Vqo),e(hb,Xqo),e(hb,VO),e(VO,zqo),e(hb,Wqo),e(K,Qqo),e(K,pb),e(pb,Oge),e(Oge,Hqo),e(pb,Uqo),e(pb,XO),e(XO,Jqo),e(pb,Yqo),e(K,Kqo),e(K,_b),e(_b,Vge),e(Vge,Zqo),e(_b,ejo),e(_b,zO),e(zO,ojo),e(_b,rjo),e(K,tjo),e(K,ub),e(ub,Xge),e(Xge,ajo),e(ub,njo),e(ub,WO),e(WO,sjo),e(ub,ljo),e(K,ijo),e(K,bb),e(bb,zge),e(zge,djo),e(bb,cjo),e(bb,QO),e(QO,fjo),e(bb,mjo),e(K,gjo),e(K,vb),e(vb,Wge),e(Wge,hjo),e(vb,pjo),e(vb,HO),e(HO,_jo),e(vb,ujo),e(K,bjo),e(K,Fb),e(Fb,Qge),e(Qge,vjo),e(Fb,Fjo),e(Fb,UO),e(UO,Tjo),e(Fb,Mjo),e(ro,Ejo),e(ro,Tb),e(Tb,Cjo),e(Tb,Hge),e(Hge,wjo),e(Tb,Ajo),e(Tb,Uge),e(Uge,yjo),e(ro,Ljo),M(Mb,ro,null),b(f,_je,u),b(f,Hi,u),e(Hi,Eb),e(Eb,Jge),M(zy,Jge,null),e(Hi,xjo),e(Hi,Yge),e(Yge,$jo),b(f,uje,u),b(f,Bo,u),M(Wy,Bo,null),e(Bo,kjo),e(Bo,Ui),e(Ui,Sjo),e(Ui,JO),e(JO,Rjo),e(Ui,Pjo),e(Ui,YO),e(YO,Bjo),e(Ui,Ijo),e(Bo,Njo),e(Bo,Qy),e(Qy,qjo),e(Qy,Kge),e(Kge,jjo),e(Qy,Djo),e(Bo,Gjo),e(Bo,ft),M(Hy,ft,null),e(ft,Ojo),e(ft,Zge),e(Zge,Vjo),e(ft,Xjo),e(ft,Ji),e(Ji,zjo),e(Ji,ehe),e(ehe,Wjo),e(Ji,Qjo),e(Ji,KO),e(KO,Hjo),e(Ji,Ujo),e(ft,Jjo),M(Cb,ft,null),e(Bo,Yjo),e(Bo,to),M(Uy,to,null),e(to,Kjo),e(to,ohe),e(ohe,Zjo),e(to,eDo),e(to,Ia),e(Ia,oDo),e(Ia,rhe),e(rhe,rDo),e(Ia,tDo),e(Ia,the),e(the,aDo),e(Ia,nDo),e(Ia,ahe),e(ahe,sDo),e(Ia,lDo),e(to,iDo),e(to,Yr),e(Yr,wb),e(wb,nhe),e(nhe,dDo),e(wb,cDo),e(wb,ZO),e(ZO,fDo),e(wb,mDo),e(Yr,gDo),e(Yr,Ab),e(Ab,she),e(she,hDo),e(Ab,pDo),e(Ab,eV),e(eV,_Do),e(Ab,uDo),e(Yr,bDo),e(Yr,yb),e(yb,lhe),e(lhe,vDo),e(yb,FDo),e(yb,oV),e(oV,TDo),e(yb,MDo),e(Yr,EDo),e(Yr,Lb),e(Lb,ihe),e(ihe,CDo),e(Lb,wDo),e(Lb,rV),e(rV,ADo),e(Lb,yDo),e(Yr,LDo),e(Yr,xb),e(xb,dhe),e(dhe,xDo),e(xb,$Do),e(xb,tV),e(tV,kDo),e(xb,SDo),e(to,RDo),e(to,$b),e($b,PDo),e($b,che),e(che,BDo),e($b,IDo),e($b,fhe),e(fhe,NDo),e(to,qDo),M(kb,to,null),b(f,bje,u),b(f,Yi,u),e(Yi,Sb),e(Sb,mhe),M(Jy,mhe,null),e(Yi,jDo),e(Yi,ghe),e(ghe,DDo),b(f,vje,u),b(f,Io,u),M(Yy,Io,null),e(Io,GDo),e(Io,Ki),e(Ki,ODo),e(Ki,aV),e(aV,VDo),e(Ki,XDo),e(Ki,nV),e(nV,zDo),e(Ki,WDo),e(Io,QDo),e(Io,Ky),e(Ky,HDo),e(Ky,hhe),e(hhe,UDo),e(Ky,JDo),e(Io,YDo),e(Io,mt),M(Zy,mt,null),e(mt,KDo),e(mt,phe),e(phe,ZDo),e(mt,eGo),e(mt,Zi),e(Zi,oGo),e(Zi,_he),e(_he,rGo),e(Zi,tGo),e(Zi,sV),e(sV,aGo),e(Zi,nGo),e(mt,sGo),M(Rb,mt,null),e(Io,lGo),e(Io,ao),M(eL,ao,null),e(ao,iGo),e(ao,uhe),e(uhe,dGo),e(ao,cGo),e(ao,Na),e(Na,fGo),e(Na,bhe),e(bhe,mGo),e(Na,gGo),e(Na,vhe),e(vhe,hGo),e(Na,pGo),e(Na,Fhe),e(Fhe,_Go),e(Na,uGo),e(ao,bGo),e(ao,U),e(U,Pb),e(Pb,The),e(The,vGo),e(Pb,FGo),e(Pb,lV),e(lV,TGo),e(Pb,MGo),e(U,EGo),e(U,Bb),e(Bb,Mhe),e(Mhe,CGo),e(Bb,wGo),e(Bb,iV),e(iV,AGo),e(Bb,yGo),e(U,LGo),e(U,Ib),e(Ib,Ehe),e(Ehe,xGo),e(Ib,$Go),e(Ib,dV),e(dV,kGo),e(Ib,SGo),e(U,RGo),e(U,Nb),e(Nb,Che),e(Che,PGo),e(Nb,BGo),e(Nb,cV),e(cV,IGo),e(Nb,NGo),e(U,qGo),e(U,qb),e(qb,whe),e(whe,jGo),e(qb,DGo),e(qb,fV),e(fV,GGo),e(qb,OGo),e(U,VGo),e(U,jb),e(jb,Ahe),e(Ahe,XGo),e(jb,zGo),e(jb,mV),e(mV,WGo),e(jb,QGo),e(U,HGo),e(U,Db),e(Db,yhe),e(yhe,UGo),e(Db,JGo),e(Db,gV),e(gV,YGo),e(Db,KGo),e(U,ZGo),e(U,Gb),e(Gb,Lhe),e(Lhe,eOo),e(Gb,oOo),e(Gb,hV),e(hV,rOo),e(Gb,tOo),e(U,aOo),e(U,Ob),e(Ob,xhe),e(xhe,nOo),e(Ob,sOo),e(Ob,pV),e(pV,lOo),e(Ob,iOo),e(U,dOo),e(U,Vb),e(Vb,$he),e($he,cOo),e(Vb,fOo),e(Vb,_V),e(_V,mOo),e(Vb,gOo),e(U,hOo),e(U,Xb),e(Xb,khe),e(khe,pOo),e(Xb,_Oo),e(Xb,uV),e(uV,uOo),e(Xb,bOo),e(U,vOo),e(U,zb),e(zb,She),e(She,FOo),e(zb,TOo),e(zb,bV),e(bV,MOo),e(zb,EOo),e(U,COo),e(U,Wb),e(Wb,Rhe),e(Rhe,wOo),e(Wb,AOo),e(Wb,vV),e(vV,yOo),e(Wb,LOo),e(U,xOo),e(U,Qb),e(Qb,Phe),e(Phe,$Oo),e(Qb,kOo),e(Qb,FV),e(FV,SOo),e(Qb,ROo),e(U,POo),e(U,Hb),e(Hb,Bhe),e(Bhe,BOo),e(Hb,IOo),e(Hb,TV),e(TV,NOo),e(Hb,qOo),e(U,jOo),e(U,Ub),e(Ub,Ihe),e(Ihe,DOo),e(Ub,GOo),e(Ub,MV),e(MV,OOo),e(Ub,VOo),e(U,XOo),e(U,Jb),e(Jb,Nhe),e(Nhe,zOo),e(Jb,WOo),e(Jb,EV),e(EV,QOo),e(Jb,HOo),e(U,UOo),e(U,Yb),e(Yb,qhe),e(qhe,JOo),e(Yb,YOo),e(Yb,CV),e(CV,KOo),e(Yb,ZOo),e(U,eVo),e(U,Kb),e(Kb,jhe),e(jhe,oVo),e(Kb,rVo),e(Kb,wV),e(wV,tVo),e(Kb,aVo),e(U,nVo),e(U,Zb),e(Zb,Dhe),e(Dhe,sVo),e(Zb,lVo),e(Zb,AV),e(AV,iVo),e(Zb,dVo),e(U,cVo),e(U,e4),e(e4,Ghe),e(Ghe,fVo),e(e4,mVo),e(e4,yV),e(yV,gVo),e(e4,hVo),e(U,pVo),e(U,o4),e(o4,Ohe),e(Ohe,_Vo),e(o4,uVo),e(o4,LV),e(LV,bVo),e(o4,vVo),e(U,FVo),e(U,r4),e(r4,Vhe),e(Vhe,TVo),e(r4,MVo),e(r4,xV),e(xV,EVo),e(r4,CVo),e(U,wVo),e(U,t4),e(t4,Xhe),e(Xhe,AVo),e(t4,yVo),e(t4,$V),e($V,LVo),e(t4,xVo),e(U,$Vo),e(U,a4),e(a4,zhe),e(zhe,kVo),e(a4,SVo),e(a4,kV),e(kV,RVo),e(a4,PVo),e(U,BVo),e(U,n4),e(n4,Whe),e(Whe,IVo),e(n4,NVo),e(n4,SV),e(SV,qVo),e(n4,jVo),e(U,DVo),e(U,s4),e(s4,Qhe),e(Qhe,GVo),e(s4,OVo),e(s4,RV),e(RV,VVo),e(s4,XVo),e(U,zVo),e(U,l4),e(l4,Hhe),e(Hhe,WVo),e(l4,QVo),e(l4,PV),e(PV,HVo),e(l4,UVo),e(U,JVo),e(U,i4),e(i4,Uhe),e(Uhe,YVo),e(i4,KVo),e(i4,BV),e(BV,ZVo),e(i4,eXo),e(U,oXo),e(U,d4),e(d4,Jhe),e(Jhe,rXo),e(d4,tXo),e(d4,IV),e(IV,aXo),e(d4,nXo),e(U,sXo),e(U,c4),e(c4,Yhe),e(Yhe,lXo),e(c4,iXo),e(c4,NV),e(NV,dXo),e(c4,cXo),e(U,fXo),e(U,f4),e(f4,Khe),e(Khe,mXo),e(f4,gXo),e(f4,qV),e(qV,hXo),e(f4,pXo),e(U,_Xo),e(U,m4),e(m4,Zhe),e(Zhe,uXo),e(m4,bXo),e(m4,jV),e(jV,vXo),e(m4,FXo),e(U,TXo),e(U,g4),e(g4,epe),e(epe,MXo),e(g4,EXo),e(g4,DV),e(DV,CXo),e(g4,wXo),e(ao,AXo),e(ao,h4),e(h4,yXo),e(h4,ope),e(ope,LXo),e(h4,xXo),e(h4,rpe),e(rpe,$Xo),e(ao,kXo),M(p4,ao,null),b(f,Fje,u),b(f,ed,u),e(ed,_4),e(_4,tpe),M(oL,tpe,null),e(ed,SXo),e(ed,ape),e(ape,RXo),b(f,Tje,u),b(f,No,u),M(rL,No,null),e(No,PXo),e(No,od),e(od,BXo),e(od,GV),e(GV,IXo),e(od,NXo),e(od,OV),e(OV,qXo),e(od,jXo),e(No,DXo),e(No,tL),e(tL,GXo),e(tL,npe),e(npe,OXo),e(tL,VXo),e(No,XXo),e(No,gt),M(aL,gt,null),e(gt,zXo),e(gt,spe),e(spe,WXo),e(gt,QXo),e(gt,rd),e(rd,HXo),e(rd,lpe),e(lpe,UXo),e(rd,JXo),e(rd,VV),e(VV,YXo),e(rd,KXo),e(gt,ZXo),M(u4,gt,null),e(No,ezo),e(No,no),M(nL,no,null),e(no,ozo),e(no,ipe),e(ipe,rzo),e(no,tzo),e(no,qa),e(qa,azo),e(qa,dpe),e(dpe,nzo),e(qa,szo),e(qa,cpe),e(cpe,lzo),e(qa,izo),e(qa,fpe),e(fpe,dzo),e(qa,czo),e(no,fzo),e(no,V),e(V,b4),e(b4,mpe),e(mpe,mzo),e(b4,gzo),e(b4,XV),e(XV,hzo),e(b4,pzo),e(V,_zo),e(V,v4),e(v4,gpe),e(gpe,uzo),e(v4,bzo),e(v4,zV),e(zV,vzo),e(v4,Fzo),e(V,Tzo),e(V,F4),e(F4,hpe),e(hpe,Mzo),e(F4,Ezo),e(F4,WV),e(WV,Czo),e(F4,wzo),e(V,Azo),e(V,T4),e(T4,ppe),e(ppe,yzo),e(T4,Lzo),e(T4,QV),e(QV,xzo),e(T4,$zo),e(V,kzo),e(V,M4),e(M4,_pe),e(_pe,Szo),e(M4,Rzo),e(M4,HV),e(HV,Pzo),e(M4,Bzo),e(V,Izo),e(V,E4),e(E4,upe),e(upe,Nzo),e(E4,qzo),e(E4,UV),e(UV,jzo),e(E4,Dzo),e(V,Gzo),e(V,C4),e(C4,bpe),e(bpe,Ozo),e(C4,Vzo),e(C4,JV),e(JV,Xzo),e(C4,zzo),e(V,Wzo),e(V,w4),e(w4,vpe),e(vpe,Qzo),e(w4,Hzo),e(w4,YV),e(YV,Uzo),e(w4,Jzo),e(V,Yzo),e(V,A4),e(A4,Fpe),e(Fpe,Kzo),e(A4,Zzo),e(A4,KV),e(KV,eWo),e(A4,oWo),e(V,rWo),e(V,y4),e(y4,Tpe),e(Tpe,tWo),e(y4,aWo),e(y4,ZV),e(ZV,nWo),e(y4,sWo),e(V,lWo),e(V,L4),e(L4,Mpe),e(Mpe,iWo),e(L4,dWo),e(L4,eX),e(eX,cWo),e(L4,fWo),e(V,mWo),e(V,x4),e(x4,Epe),e(Epe,gWo),e(x4,hWo),e(x4,oX),e(oX,pWo),e(x4,_Wo),e(V,uWo),e(V,$4),e($4,Cpe),e(Cpe,bWo),e($4,vWo),e($4,rX),e(rX,FWo),e($4,TWo),e(V,MWo),e(V,k4),e(k4,wpe),e(wpe,EWo),e(k4,CWo),e(k4,tX),e(tX,wWo),e(k4,AWo),e(V,yWo),e(V,S4),e(S4,Ape),e(Ape,LWo),e(S4,xWo),e(S4,aX),e(aX,$Wo),e(S4,kWo),e(V,SWo),e(V,R4),e(R4,ype),e(ype,RWo),e(R4,PWo),e(R4,nX),e(nX,BWo),e(R4,IWo),e(V,NWo),e(V,P4),e(P4,Lpe),e(Lpe,qWo),e(P4,jWo),e(P4,sX),e(sX,DWo),e(P4,GWo),e(V,OWo),e(V,B4),e(B4,xpe),e(xpe,VWo),e(B4,XWo),e(B4,lX),e(lX,zWo),e(B4,WWo),e(V,QWo),e(V,I4),e(I4,$pe),e($pe,HWo),e(I4,UWo),e(I4,iX),e(iX,JWo),e(I4,YWo),e(V,KWo),e(V,N4),e(N4,kpe),e(kpe,ZWo),e(N4,eQo),e(N4,dX),e(dX,oQo),e(N4,rQo),e(V,tQo),e(V,q4),e(q4,Spe),e(Spe,aQo),e(q4,nQo),e(q4,cX),e(cX,sQo),e(q4,lQo),e(V,iQo),e(V,j4),e(j4,Rpe),e(Rpe,dQo),e(j4,cQo),e(j4,fX),e(fX,fQo),e(j4,mQo),e(V,gQo),e(V,D4),e(D4,Ppe),e(Ppe,hQo),e(D4,pQo),e(D4,mX),e(mX,_Qo),e(D4,uQo),e(V,bQo),e(V,G4),e(G4,Bpe),e(Bpe,vQo),e(G4,FQo),e(G4,gX),e(gX,TQo),e(G4,MQo),e(V,EQo),e(V,O4),e(O4,Ipe),e(Ipe,CQo),e(O4,wQo),e(O4,hX),e(hX,AQo),e(O4,yQo),e(V,LQo),e(V,V4),e(V4,Npe),e(Npe,xQo),e(V4,$Qo),e(V4,pX),e(pX,kQo),e(V4,SQo),e(V,RQo),e(V,X4),e(X4,qpe),e(qpe,PQo),e(X4,BQo),e(X4,_X),e(_X,IQo),e(X4,NQo),e(V,qQo),e(V,z4),e(z4,jpe),e(jpe,jQo),e(z4,DQo),e(z4,uX),e(uX,GQo),e(z4,OQo),e(V,VQo),e(V,W4),e(W4,Dpe),e(Dpe,XQo),e(W4,zQo),e(W4,bX),e(bX,WQo),e(W4,QQo),e(V,HQo),e(V,Q4),e(Q4,Gpe),e(Gpe,UQo),e(Q4,JQo),e(Q4,vX),e(vX,YQo),e(Q4,KQo),e(V,ZQo),e(V,H4),e(H4,Ope),e(Ope,eHo),e(H4,oHo),e(H4,FX),e(FX,rHo),e(H4,tHo),e(V,aHo),e(V,U4),e(U4,Vpe),e(Vpe,nHo),e(U4,sHo),e(U4,TX),e(TX,lHo),e(U4,iHo),e(V,dHo),e(V,J4),e(J4,Xpe),e(Xpe,cHo),e(J4,fHo),e(J4,MX),e(MX,mHo),e(J4,gHo),e(V,hHo),e(V,Y4),e(Y4,zpe),e(zpe,pHo),e(Y4,_Ho),e(Y4,EX),e(EX,uHo),e(Y4,bHo),e(V,vHo),e(V,K4),e(K4,Wpe),e(Wpe,FHo),e(K4,THo),e(K4,CX),e(CX,MHo),e(K4,EHo),e(V,CHo),e(V,Z4),e(Z4,Qpe),e(Qpe,wHo),e(Z4,AHo),e(Z4,wX),e(wX,yHo),e(Z4,LHo),e(V,xHo),e(V,ev),e(ev,Hpe),e(Hpe,$Ho),e(ev,kHo),e(ev,AX),e(AX,SHo),e(ev,RHo),e(V,PHo),e(V,ov),e(ov,Upe),e(Upe,BHo),e(ov,IHo),e(ov,yX),e(yX,NHo),e(ov,qHo),e(V,jHo),e(V,rv),e(rv,Jpe),e(Jpe,DHo),e(rv,GHo),e(rv,LX),e(LX,OHo),e(rv,VHo),e(V,XHo),e(V,tv),e(tv,Ype),e(Ype,zHo),e(tv,WHo),e(tv,xX),e(xX,QHo),e(tv,HHo),e(no,UHo),e(no,av),e(av,JHo),e(av,Kpe),e(Kpe,YHo),e(av,KHo),e(av,Zpe),e(Zpe,ZHo),e(no,eUo),M(nv,no,null),b(f,Mje,u),b(f,td,u),e(td,sv),e(sv,e_e),M(sL,e_e,null),e(td,oUo),e(td,o_e),e(o_e,rUo),b(f,Eje,u),b(f,qo,u),M(lL,qo,null),e(qo,tUo),e(qo,ad),e(ad,aUo),e(ad,$X),e($X,nUo),e(ad,sUo),e(ad,kX),e(kX,lUo),e(ad,iUo),e(qo,dUo),e(qo,iL),e(iL,cUo),e(iL,r_e),e(r_e,fUo),e(iL,mUo),e(qo,gUo),e(qo,ht),M(dL,ht,null),e(ht,hUo),e(ht,t_e),e(t_e,pUo),e(ht,_Uo),e(ht,nd),e(nd,uUo),e(nd,a_e),e(a_e,bUo),e(nd,vUo),e(nd,SX),e(SX,FUo),e(nd,TUo),e(ht,MUo),M(lv,ht,null),e(qo,EUo),e(qo,so),M(cL,so,null),e(so,CUo),e(so,n_e),e(n_e,wUo),e(so,AUo),e(so,ja),e(ja,yUo),e(ja,s_e),e(s_e,LUo),e(ja,xUo),e(ja,l_e),e(l_e,$Uo),e(ja,kUo),e(ja,i_e),e(i_e,SUo),e(ja,RUo),e(so,PUo),e(so,d_e),e(d_e,iv),e(iv,c_e),e(c_e,BUo),e(iv,IUo),e(iv,RX),e(RX,NUo),e(iv,qUo),e(so,jUo),e(so,dv),e(dv,DUo),e(dv,f_e),e(f_e,GUo),e(dv,OUo),e(dv,m_e),e(m_e,VUo),e(so,XUo),M(cv,so,null),b(f,Cje,u),b(f,sd,u),e(sd,fv),e(fv,g_e),M(fL,g_e,null),e(sd,zUo),e(sd,h_e),e(h_e,WUo),b(f,wje,u),b(f,jo,u),M(mL,jo,null),e(jo,QUo),e(jo,ld),e(ld,HUo),e(ld,PX),e(PX,UUo),e(ld,JUo),e(ld,BX),e(BX,YUo),e(ld,KUo),e(jo,ZUo),e(jo,gL),e(gL,eJo),e(gL,p_e),e(p_e,oJo),e(gL,rJo),e(jo,tJo),e(jo,pt),M(hL,pt,null),e(pt,aJo),e(pt,__e),e(__e,nJo),e(pt,sJo),e(pt,id),e(id,lJo),e(id,u_e),e(u_e,iJo),e(id,dJo),e(id,IX),e(IX,cJo),e(id,fJo),e(pt,mJo),M(mv,pt,null),e(jo,gJo),e(jo,lo),M(pL,lo,null),e(lo,hJo),e(lo,b_e),e(b_e,pJo),e(lo,_Jo),e(lo,Da),e(Da,uJo),e(Da,v_e),e(v_e,bJo),e(Da,vJo),e(Da,F_e),e(F_e,FJo),e(Da,TJo),e(Da,T_e),e(T_e,MJo),e(Da,EJo),e(lo,CJo),e(lo,ve),e(ve,gv),e(gv,M_e),e(M_e,wJo),e(gv,AJo),e(gv,NX),e(NX,yJo),e(gv,LJo),e(ve,xJo),e(ve,hv),e(hv,E_e),e(E_e,$Jo),e(hv,kJo),e(hv,qX),e(qX,SJo),e(hv,RJo),e(ve,PJo),e(ve,pv),e(pv,C_e),e(C_e,BJo),e(pv,IJo),e(pv,jX),e(jX,NJo),e(pv,qJo),e(ve,jJo),e(ve,_v),e(_v,w_e),e(w_e,DJo),e(_v,GJo),e(_v,DX),e(DX,OJo),e(_v,VJo),e(ve,XJo),e(ve,Bs),e(Bs,A_e),e(A_e,zJo),e(Bs,WJo),e(Bs,GX),e(GX,QJo),e(Bs,HJo),e(Bs,OX),e(OX,UJo),e(Bs,JJo),e(ve,YJo),e(ve,uv),e(uv,y_e),e(y_e,KJo),e(uv,ZJo),e(uv,VX),e(VX,eYo),e(uv,oYo),e(ve,rYo),e(ve,Is),e(Is,L_e),e(L_e,tYo),e(Is,aYo),e(Is,XX),e(XX,nYo),e(Is,sYo),e(Is,zX),e(zX,lYo),e(Is,iYo),e(ve,dYo),e(ve,_t),e(_t,x_e),e(x_e,cYo),e(_t,fYo),e(_t,WX),e(WX,mYo),e(_t,gYo),e(_t,QX),e(QX,hYo),e(_t,pYo),e(_t,HX),e(HX,_Yo),e(_t,uYo),e(ve,bYo),e(ve,bv),e(bv,$_e),e($_e,vYo),e(bv,FYo),e(bv,UX),e(UX,TYo),e(bv,MYo),e(ve,EYo),e(ve,vv),e(vv,k_e),e(k_e,CYo),e(vv,wYo),e(vv,JX),e(JX,AYo),e(vv,yYo),e(ve,LYo),e(ve,Fv),e(Fv,S_e),e(S_e,xYo),e(Fv,$Yo),e(Fv,YX),e(YX,kYo),e(Fv,SYo),e(ve,RYo),e(ve,Tv),e(Tv,R_e),e(R_e,PYo),e(Tv,BYo),e(Tv,KX),e(KX,IYo),e(Tv,NYo),e(ve,qYo),e(ve,Mv),e(Mv,P_e),e(P_e,jYo),e(Mv,DYo),e(Mv,ZX),e(ZX,GYo),e(Mv,OYo),e(ve,VYo),e(ve,Ev),e(Ev,B_e),e(B_e,XYo),e(Ev,zYo),e(Ev,ez),e(ez,WYo),e(Ev,QYo),e(ve,HYo),e(ve,Cv),e(Cv,I_e),e(I_e,UYo),e(Cv,JYo),e(Cv,oz),e(oz,YYo),e(Cv,KYo),e(lo,ZYo),e(lo,wv),e(wv,eKo),e(wv,N_e),e(N_e,oKo),e(wv,rKo),e(wv,q_e),e(q_e,tKo),e(lo,aKo),M(Av,lo,null),b(f,Aje,u),b(f,dd,u),e(dd,yv),e(yv,j_e),M(_L,j_e,null),e(dd,nKo),e(dd,D_e),e(D_e,sKo),b(f,yje,u),b(f,Do,u),M(uL,Do,null),e(Do,lKo),e(Do,cd),e(cd,iKo),e(cd,rz),e(rz,dKo),e(cd,cKo),e(cd,tz),e(tz,fKo),e(cd,mKo),e(Do,gKo),e(Do,bL),e(bL,hKo),e(bL,G_e),e(G_e,pKo),e(bL,_Ko),e(Do,uKo),e(Do,ut),M(vL,ut,null),e(ut,bKo),e(ut,O_e),e(O_e,vKo),e(ut,FKo),e(ut,fd),e(fd,TKo),e(fd,V_e),e(V_e,MKo),e(fd,EKo),e(fd,az),e(az,CKo),e(fd,wKo),e(ut,AKo),M(Lv,ut,null),e(Do,yKo),e(Do,io),M(FL,io,null),e(io,LKo),e(io,X_e),e(X_e,xKo),e(io,$Ko),e(io,Ga),e(Ga,kKo),e(Ga,z_e),e(z_e,SKo),e(Ga,RKo),e(Ga,W_e),e(W_e,PKo),e(Ga,BKo),e(Ga,Q_e),e(Q_e,IKo),e(Ga,NKo),e(io,qKo),e(io,H_e),e(H_e,xv),e(xv,U_e),e(U_e,jKo),e(xv,DKo),e(xv,nz),e(nz,GKo),e(xv,OKo),e(io,VKo),e(io,$v),e($v,XKo),e($v,J_e),e(J_e,zKo),e($v,WKo),e($v,Y_e),e(Y_e,QKo),e(io,HKo),M(kv,io,null),b(f,Lje,u),b(f,md,u),e(md,Sv),e(Sv,K_e),M(TL,K_e,null),e(md,UKo),e(md,Z_e),e(Z_e,JKo),b(f,xje,u),b(f,Go,u),M(ML,Go,null),e(Go,YKo),e(Go,gd),e(gd,KKo),e(gd,sz),e(sz,ZKo),e(gd,eZo),e(gd,lz),e(lz,oZo),e(gd,rZo),e(Go,tZo),e(Go,EL),e(EL,aZo),e(EL,eue),e(eue,nZo),e(EL,sZo),e(Go,lZo),e(Go,bt),M(CL,bt,null),e(bt,iZo),e(bt,oue),e(oue,dZo),e(bt,cZo),e(bt,hd),e(hd,fZo),e(hd,rue),e(rue,mZo),e(hd,gZo),e(hd,iz),e(iz,hZo),e(hd,pZo),e(bt,_Zo),M(Rv,bt,null),e(Go,uZo),e(Go,co),M(wL,co,null),e(co,bZo),e(co,tue),e(tue,vZo),e(co,FZo),e(co,Oa),e(Oa,TZo),e(Oa,aue),e(aue,MZo),e(Oa,EZo),e(Oa,nue),e(nue,CZo),e(Oa,wZo),e(Oa,sue),e(sue,AZo),e(Oa,yZo),e(co,LZo),e(co,Se),e(Se,Pv),e(Pv,lue),e(lue,xZo),e(Pv,$Zo),e(Pv,dz),e(dz,kZo),e(Pv,SZo),e(Se,RZo),e(Se,Bv),e(Bv,iue),e(iue,PZo),e(Bv,BZo),e(Bv,cz),e(cz,IZo),e(Bv,NZo),e(Se,qZo),e(Se,Iv),e(Iv,due),e(due,jZo),e(Iv,DZo),e(Iv,fz),e(fz,GZo),e(Iv,OZo),e(Se,VZo),e(Se,Nv),e(Nv,cue),e(cue,XZo),e(Nv,zZo),e(Nv,mz),e(mz,WZo),e(Nv,QZo),e(Se,HZo),e(Se,qv),e(qv,fue),e(fue,UZo),e(qv,JZo),e(qv,gz),e(gz,YZo),e(qv,KZo),e(Se,ZZo),e(Se,jv),e(jv,mue),e(mue,eer),e(jv,oer),e(jv,hz),e(hz,rer),e(jv,ter),e(Se,aer),e(Se,Dv),e(Dv,gue),e(gue,ner),e(Dv,ser),e(Dv,pz),e(pz,ler),e(Dv,ier),e(Se,der),e(Se,Gv),e(Gv,hue),e(hue,cer),e(Gv,fer),e(Gv,_z),e(_z,mer),e(Gv,ger),e(Se,her),e(Se,Ov),e(Ov,pue),e(pue,per),e(Ov,_er),e(Ov,uz),e(uz,uer),e(Ov,ber),e(co,ver),e(co,Vv),e(Vv,Fer),e(Vv,_ue),e(_ue,Ter),e(Vv,Mer),e(Vv,uue),e(uue,Eer),e(co,Cer),M(Xv,co,null),b(f,$je,u),b(f,pd,u),e(pd,zv),e(zv,bue),M(AL,bue,null),e(pd,wer),e(pd,vue),e(vue,Aer),b(f,kje,u),b(f,Oo,u),M(yL,Oo,null),e(Oo,yer),e(Oo,_d),e(_d,Ler),e(_d,bz),e(bz,xer),e(_d,$er),e(_d,vz),e(vz,ker),e(_d,Ser),e(Oo,Rer),e(Oo,LL),e(LL,Per),e(LL,Fue),e(Fue,Ber),e(LL,Ier),e(Oo,Ner),e(Oo,vt),M(xL,vt,null),e(vt,qer),e(vt,Tue),e(Tue,jer),e(vt,Der),e(vt,ud),e(ud,Ger),e(ud,Mue),e(Mue,Oer),e(ud,Ver),e(ud,Fz),e(Fz,Xer),e(ud,zer),e(vt,Wer),M(Wv,vt,null),e(Oo,Qer),e(Oo,fo),M($L,fo,null),e(fo,Her),e(fo,Eue),e(Eue,Uer),e(fo,Jer),e(fo,Va),e(Va,Yer),e(Va,Cue),e(Cue,Ker),e(Va,Zer),e(Va,wue),e(wue,eor),e(Va,oor),e(Va,Aue),e(Aue,ror),e(Va,tor),e(fo,aor),e(fo,Kr),e(Kr,Qv),e(Qv,yue),e(yue,nor),e(Qv,sor),e(Qv,Tz),e(Tz,lor),e(Qv,ior),e(Kr,dor),e(Kr,Hv),e(Hv,Lue),e(Lue,cor),e(Hv,mor),e(Hv,Mz),e(Mz,gor),e(Hv,hor),e(Kr,por),e(Kr,Uv),e(Uv,xue),e(xue,_or),e(Uv,uor),e(Uv,Ez),e(Ez,bor),e(Uv,vor),e(Kr,For),e(Kr,Jv),e(Jv,$ue),e($ue,Tor),e(Jv,Mor),e(Jv,Cz),e(Cz,Eor),e(Jv,Cor),e(Kr,wor),e(Kr,Yv),e(Yv,kue),e(kue,Aor),e(Yv,yor),e(Yv,wz),e(wz,Lor),e(Yv,xor),e(fo,$or),e(fo,Kv),e(Kv,kor),e(Kv,Sue),e(Sue,Sor),e(Kv,Ror),e(Kv,Rue),e(Rue,Por),e(fo,Bor),M(Zv,fo,null),b(f,Sje,u),b(f,bd,u),e(bd,eF),e(eF,Pue),M(kL,Pue,null),e(bd,Ior),e(bd,Bue),e(Bue,Nor),b(f,Rje,u),b(f,Vo,u),M(SL,Vo,null),e(Vo,qor),e(Vo,vd),e(vd,jor),e(vd,Az),e(Az,Dor),e(vd,Gor),e(vd,yz),e(yz,Oor),e(vd,Vor),e(Vo,Xor),e(Vo,RL),e(RL,zor),e(RL,Iue),e(Iue,Wor),e(RL,Qor),e(Vo,Hor),e(Vo,Ft),M(PL,Ft,null),e(Ft,Uor),e(Ft,Nue),e(Nue,Jor),e(Ft,Yor),e(Ft,Fd),e(Fd,Kor),e(Fd,que),e(que,Zor),e(Fd,err),e(Fd,Lz),e(Lz,orr),e(Fd,rrr),e(Ft,trr),M(oF,Ft,null),e(Vo,arr),e(Vo,mo),M(BL,mo,null),e(mo,nrr),e(mo,jue),e(jue,srr),e(mo,lrr),e(mo,Xa),e(Xa,irr),e(Xa,Due),e(Due,drr),e(Xa,crr),e(Xa,Gue),e(Gue,frr),e(Xa,mrr),e(Xa,Oue),e(Oue,grr),e(Xa,hrr),e(mo,prr),e(mo,Re),e(Re,rF),e(rF,Vue),e(Vue,_rr),e(rF,urr),e(rF,xz),e(xz,brr),e(rF,vrr),e(Re,Frr),e(Re,tF),e(tF,Xue),e(Xue,Trr),e(tF,Mrr),e(tF,$z),e($z,Err),e(tF,Crr),e(Re,wrr),e(Re,aF),e(aF,zue),e(zue,Arr),e(aF,yrr),e(aF,kz),e(kz,Lrr),e(aF,xrr),e(Re,$rr),e(Re,nF),e(nF,Wue),e(Wue,krr),e(nF,Srr),e(nF,Sz),e(Sz,Rrr),e(nF,Prr),e(Re,Brr),e(Re,sF),e(sF,Que),e(Que,Irr),e(sF,Nrr),e(sF,Rz),e(Rz,qrr),e(sF,jrr),e(Re,Drr),e(Re,lF),e(lF,Hue),e(Hue,Grr),e(lF,Orr),e(lF,Pz),e(Pz,Vrr),e(lF,Xrr),e(Re,zrr),e(Re,iF),e(iF,Uue),e(Uue,Wrr),e(iF,Qrr),e(iF,Bz),e(Bz,Hrr),e(iF,Urr),e(Re,Jrr),e(Re,dF),e(dF,Jue),e(Jue,Yrr),e(dF,Krr),e(dF,Iz),e(Iz,Zrr),e(dF,etr),e(Re,otr),e(Re,cF),e(cF,Yue),e(Yue,rtr),e(cF,ttr),e(cF,Nz),e(Nz,atr),e(cF,ntr),e(mo,str),e(mo,fF),e(fF,ltr),e(fF,Kue),e(Kue,itr),e(fF,dtr),e(fF,Zue),e(Zue,ctr),e(mo,ftr),M(mF,mo,null),b(f,Pje,u),b(f,Td,u),e(Td,gF),e(gF,e2e),M(IL,e2e,null),e(Td,mtr),e(Td,o2e),e(o2e,gtr),b(f,Bje,u),b(f,Xo,u),M(NL,Xo,null),e(Xo,htr),e(Xo,Md),e(Md,ptr),e(Md,qz),e(qz,_tr),e(Md,utr),e(Md,jz),e(jz,btr),e(Md,vtr),e(Xo,Ftr),e(Xo,qL),e(qL,Ttr),e(qL,r2e),e(r2e,Mtr),e(qL,Etr),e(Xo,Ctr),e(Xo,Tt),M(jL,Tt,null),e(Tt,wtr),e(Tt,t2e),e(t2e,Atr),e(Tt,ytr),e(Tt,Ed),e(Ed,Ltr),e(Ed,a2e),e(a2e,xtr),e(Ed,$tr),e(Ed,Dz),e(Dz,ktr),e(Ed,Str),e(Tt,Rtr),M(hF,Tt,null),e(Xo,Ptr),e(Xo,go),M(DL,go,null),e(go,Btr),e(go,n2e),e(n2e,Itr),e(go,Ntr),e(go,za),e(za,qtr),e(za,s2e),e(s2e,jtr),e(za,Dtr),e(za,l2e),e(l2e,Gtr),e(za,Otr),e(za,i2e),e(i2e,Vtr),e(za,Xtr),e(go,ztr),e(go,GL),e(GL,pF),e(pF,d2e),e(d2e,Wtr),e(pF,Qtr),e(pF,Gz),e(Gz,Htr),e(pF,Utr),e(GL,Jtr),e(GL,_F),e(_F,c2e),e(c2e,Ytr),e(_F,Ktr),e(_F,Oz),e(Oz,Ztr),e(_F,ear),e(go,oar),e(go,uF),e(uF,rar),e(uF,f2e),e(f2e,tar),e(uF,aar),e(uF,m2e),e(m2e,nar),e(go,sar),M(bF,go,null),b(f,Ije,u),b(f,Cd,u),e(Cd,vF),e(vF,g2e),M(OL,g2e,null),e(Cd,lar),e(Cd,h2e),e(h2e,iar),b(f,Nje,u),b(f,zo,u),M(VL,zo,null),e(zo,dar),e(zo,wd),e(wd,car),e(wd,Vz),e(Vz,far),e(wd,mar),e(wd,Xz),e(Xz,gar),e(wd,har),e(zo,par),e(zo,XL),e(XL,_ar),e(XL,p2e),e(p2e,uar),e(XL,bar),e(zo,Far),e(zo,Mt),M(zL,Mt,null),e(Mt,Tar),e(Mt,_2e),e(_2e,Mar),e(Mt,Ear),e(Mt,Ad),e(Ad,Car),e(Ad,u2e),e(u2e,war),e(Ad,Aar),e(Ad,zz),e(zz,yar),e(Ad,Lar),e(Mt,xar),M(FF,Mt,null),e(zo,$ar),e(zo,ho),M(WL,ho,null),e(ho,kar),e(ho,b2e),e(b2e,Sar),e(ho,Rar),e(ho,Wa),e(Wa,Par),e(Wa,v2e),e(v2e,Bar),e(Wa,Iar),e(Wa,F2e),e(F2e,Nar),e(Wa,qar),e(Wa,T2e),e(T2e,jar),e(Wa,Dar),e(ho,Gar),e(ho,Zr),e(Zr,TF),e(TF,M2e),e(M2e,Oar),e(TF,Var),e(TF,Wz),e(Wz,Xar),e(TF,zar),e(Zr,War),e(Zr,MF),e(MF,E2e),e(E2e,Qar),e(MF,Har),e(MF,Qz),e(Qz,Uar),e(MF,Jar),e(Zr,Yar),e(Zr,EF),e(EF,C2e),e(C2e,Kar),e(EF,Zar),e(EF,Hz),e(Hz,enr),e(EF,onr),e(Zr,rnr),e(Zr,CF),e(CF,w2e),e(w2e,tnr),e(CF,anr),e(CF,Uz),e(Uz,nnr),e(CF,snr),e(Zr,lnr),e(Zr,wF),e(wF,A2e),e(A2e,inr),e(wF,dnr),e(wF,Jz),e(Jz,cnr),e(wF,fnr),e(ho,mnr),e(ho,AF),e(AF,gnr),e(AF,y2e),e(y2e,hnr),e(AF,pnr),e(AF,L2e),e(L2e,_nr),e(ho,unr),M(yF,ho,null),b(f,qje,u),b(f,yd,u),e(yd,LF),e(LF,x2e),M(QL,x2e,null),e(yd,bnr),e(yd,$2e),e($2e,vnr),b(f,jje,u),b(f,Wo,u),M(HL,Wo,null),e(Wo,Fnr),e(Wo,Ld),e(Ld,Tnr),e(Ld,Yz),e(Yz,Mnr),e(Ld,Enr),e(Ld,Kz),e(Kz,Cnr),e(Ld,wnr),e(Wo,Anr),e(Wo,UL),e(UL,ynr),e(UL,k2e),e(k2e,Lnr),e(UL,xnr),e(Wo,$nr),e(Wo,Et),M(JL,Et,null),e(Et,knr),e(Et,S2e),e(S2e,Snr),e(Et,Rnr),e(Et,xd),e(xd,Pnr),e(xd,R2e),e(R2e,Bnr),e(xd,Inr),e(xd,Zz),e(Zz,Nnr),e(xd,qnr),e(Et,jnr),M(xF,Et,null),e(Wo,Dnr),e(Wo,po),M(YL,po,null),e(po,Gnr),e(po,P2e),e(P2e,Onr),e(po,Vnr),e(po,Qa),e(Qa,Xnr),e(Qa,B2e),e(B2e,znr),e(Qa,Wnr),e(Qa,I2e),e(I2e,Qnr),e(Qa,Hnr),e(Qa,N2e),e(N2e,Unr),e(Qa,Jnr),e(po,Ynr),e(po,$d),e($d,$F),e($F,q2e),e(q2e,Knr),e($F,Znr),e($F,eW),e(eW,esr),e($F,osr),e($d,rsr),e($d,kF),e(kF,j2e),e(j2e,tsr),e(kF,asr),e(kF,oW),e(oW,nsr),e(kF,ssr),e($d,lsr),e($d,SF),e(SF,D2e),e(D2e,isr),e(SF,dsr),e(SF,rW),e(rW,csr),e(SF,fsr),e(po,msr),e(po,RF),e(RF,gsr),e(RF,G2e),e(G2e,hsr),e(RF,psr),e(RF,O2e),e(O2e,_sr),e(po,usr),M(PF,po,null),b(f,Dje,u),b(f,kd,u),e(kd,BF),e(BF,V2e),M(KL,V2e,null),e(kd,bsr),e(kd,X2e),e(X2e,vsr),b(f,Gje,u),b(f,Qo,u),M(ZL,Qo,null),e(Qo,Fsr),e(Qo,Sd),e(Sd,Tsr),e(Sd,tW),e(tW,Msr),e(Sd,Esr),e(Sd,aW),e(aW,Csr),e(Sd,wsr),e(Qo,Asr),e(Qo,e8),e(e8,ysr),e(e8,z2e),e(z2e,Lsr),e(e8,xsr),e(Qo,$sr),e(Qo,Ct),M(o8,Ct,null),e(Ct,ksr),e(Ct,W2e),e(W2e,Ssr),e(Ct,Rsr),e(Ct,Rd),e(Rd,Psr),e(Rd,Q2e),e(Q2e,Bsr),e(Rd,Isr),e(Rd,nW),e(nW,Nsr),e(Rd,qsr),e(Ct,jsr),M(IF,Ct,null),e(Qo,Dsr),e(Qo,_o),M(r8,_o,null),e(_o,Gsr),e(_o,H2e),e(H2e,Osr),e(_o,Vsr),e(_o,Ha),e(Ha,Xsr),e(Ha,U2e),e(U2e,zsr),e(Ha,Wsr),e(Ha,J2e),e(J2e,Qsr),e(Ha,Hsr),e(Ha,Y2e),e(Y2e,Usr),e(Ha,Jsr),e(_o,Ysr),e(_o,t8),e(t8,NF),e(NF,K2e),e(K2e,Ksr),e(NF,Zsr),e(NF,sW),e(sW,elr),e(NF,olr),e(t8,rlr),e(t8,qF),e(qF,Z2e),e(Z2e,tlr),e(qF,alr),e(qF,lW),e(lW,nlr),e(qF,slr),e(_o,llr),e(_o,jF),e(jF,ilr),e(jF,e1e),e(e1e,dlr),e(jF,clr),e(jF,o1e),e(o1e,flr),e(_o,mlr),M(DF,_o,null),b(f,Oje,u),b(f,Pd,u),e(Pd,GF),e(GF,r1e),M(a8,r1e,null),e(Pd,glr),e(Pd,t1e),e(t1e,hlr),b(f,Vje,u),b(f,Ho,u),M(n8,Ho,null),e(Ho,plr),e(Ho,Bd),e(Bd,_lr),e(Bd,iW),e(iW,ulr),e(Bd,blr),e(Bd,dW),e(dW,vlr),e(Bd,Flr),e(Ho,Tlr),e(Ho,s8),e(s8,Mlr),e(s8,a1e),e(a1e,Elr),e(s8,Clr),e(Ho,wlr),e(Ho,wt),M(l8,wt,null),e(wt,Alr),e(wt,n1e),e(n1e,ylr),e(wt,Llr),e(wt,Id),e(Id,xlr),e(Id,s1e),e(s1e,$lr),e(Id,klr),e(Id,cW),e(cW,Slr),e(Id,Rlr),e(wt,Plr),M(OF,wt,null),e(Ho,Blr),e(Ho,uo),M(i8,uo,null),e(uo,Ilr),e(uo,l1e),e(l1e,Nlr),e(uo,qlr),e(uo,Ua),e(Ua,jlr),e(Ua,i1e),e(i1e,Dlr),e(Ua,Glr),e(Ua,d1e),e(d1e,Olr),e(Ua,Vlr),e(Ua,c1e),e(c1e,Xlr),e(Ua,zlr),e(uo,Wlr),e(uo,f1e),e(f1e,VF),e(VF,m1e),e(m1e,Qlr),e(VF,Hlr),e(VF,fW),e(fW,Ulr),e(VF,Jlr),e(uo,Ylr),e(uo,XF),e(XF,Klr),e(XF,g1e),e(g1e,Zlr),e(XF,eir),e(XF,h1e),e(h1e,oir),e(uo,rir),M(zF,uo,null),b(f,Xje,u),b(f,Nd,u),e(Nd,WF),e(WF,p1e),M(d8,p1e,null),e(Nd,tir),e(Nd,_1e),e(_1e,air),b(f,zje,u),b(f,Uo,u),M(c8,Uo,null),e(Uo,nir),e(Uo,qd),e(qd,sir),e(qd,mW),e(mW,lir),e(qd,iir),e(qd,gW),e(gW,dir),e(qd,cir),e(Uo,fir),e(Uo,f8),e(f8,mir),e(f8,u1e),e(u1e,gir),e(f8,hir),e(Uo,pir),e(Uo,At),M(m8,At,null),e(At,_ir),e(At,b1e),e(b1e,uir),e(At,bir),e(At,jd),e(jd,vir),e(jd,v1e),e(v1e,Fir),e(jd,Tir),e(jd,hW),e(hW,Mir),e(jd,Eir),e(At,Cir),M(QF,At,null),e(Uo,wir),e(Uo,bo),M(g8,bo,null),e(bo,Air),e(bo,F1e),e(F1e,yir),e(bo,Lir),e(bo,Ja),e(Ja,xir),e(Ja,T1e),e(T1e,$ir),e(Ja,kir),e(Ja,M1e),e(M1e,Sir),e(Ja,Rir),e(Ja,E1e),e(E1e,Pir),e(Ja,Bir),e(bo,Iir),e(bo,Ya),e(Ya,HF),e(HF,C1e),e(C1e,Nir),e(HF,qir),e(HF,pW),e(pW,jir),e(HF,Dir),e(Ya,Gir),e(Ya,UF),e(UF,w1e),e(w1e,Oir),e(UF,Vir),e(UF,_W),e(_W,Xir),e(UF,zir),e(Ya,Wir),e(Ya,JF),e(JF,A1e),e(A1e,Qir),e(JF,Hir),e(JF,uW),e(uW,Uir),e(JF,Jir),e(Ya,Yir),e(Ya,YF),e(YF,y1e),e(y1e,Kir),e(YF,Zir),e(YF,bW),e(bW,edr),e(YF,odr),e(bo,rdr),e(bo,KF),e(KF,tdr),e(KF,L1e),e(L1e,adr),e(KF,ndr),e(KF,x1e),e(x1e,sdr),e(bo,ldr),M(ZF,bo,null),b(f,Wje,u),b(f,Dd,u),e(Dd,eT),e(eT,$1e),M(h8,$1e,null),e(Dd,idr),e(Dd,k1e),e(k1e,ddr),b(f,Qje,u),b(f,Jo,u),M(p8,Jo,null),e(Jo,cdr),e(Jo,Gd),e(Gd,fdr),e(Gd,vW),e(vW,mdr),e(Gd,gdr),e(Gd,FW),e(FW,hdr),e(Gd,pdr),e(Jo,_dr),e(Jo,_8),e(_8,udr),e(_8,S1e),e(S1e,bdr),e(_8,vdr),e(Jo,Fdr),e(Jo,yt),M(u8,yt,null),e(yt,Tdr),e(yt,R1e),e(R1e,Mdr),e(yt,Edr),e(yt,Od),e(Od,Cdr),e(Od,P1e),e(P1e,wdr),e(Od,Adr),e(Od,TW),e(TW,ydr),e(Od,Ldr),e(yt,xdr),M(oT,yt,null),e(Jo,$dr),e(Jo,vo),M(b8,vo,null),e(vo,kdr),e(vo,B1e),e(B1e,Sdr),e(vo,Rdr),e(vo,Ka),e(Ka,Pdr),e(Ka,I1e),e(I1e,Bdr),e(Ka,Idr),e(Ka,N1e),e(N1e,Ndr),e(Ka,qdr),e(Ka,q1e),e(q1e,jdr),e(Ka,Ddr),e(vo,Gdr),e(vo,j1e),e(j1e,rT),e(rT,D1e),e(D1e,Odr),e(rT,Vdr),e(rT,MW),e(MW,Xdr),e(rT,zdr),e(vo,Wdr),e(vo,tT),e(tT,Qdr),e(tT,G1e),e(G1e,Hdr),e(tT,Udr),e(tT,O1e),e(O1e,Jdr),e(vo,Ydr),M(aT,vo,null),b(f,Hje,u),b(f,Vd,u),e(Vd,nT),e(nT,V1e),M(v8,V1e,null),e(Vd,Kdr),e(Vd,X1e),e(X1e,Zdr),b(f,Uje,u),b(f,Yo,u),M(F8,Yo,null),e(Yo,ecr),e(Yo,Xd),e(Xd,ocr),e(Xd,EW),e(EW,rcr),e(Xd,tcr),e(Xd,CW),e(CW,acr),e(Xd,ncr),e(Yo,scr),e(Yo,T8),e(T8,lcr),e(T8,z1e),e(z1e,icr),e(T8,dcr),e(Yo,ccr),e(Yo,Lt),M(M8,Lt,null),e(Lt,fcr),e(Lt,W1e),e(W1e,mcr),e(Lt,gcr),e(Lt,zd),e(zd,hcr),e(zd,Q1e),e(Q1e,pcr),e(zd,_cr),e(zd,wW),e(wW,ucr),e(zd,bcr),e(Lt,vcr),M(sT,Lt,null),e(Yo,Fcr),e(Yo,wr),M(E8,wr,null),e(wr,Tcr),e(wr,H1e),e(H1e,Mcr),e(wr,Ecr),e(wr,Za),e(Za,Ccr),e(Za,U1e),e(U1e,wcr),e(Za,Acr),e(Za,J1e),e(J1e,ycr),e(Za,Lcr),e(Za,Y1e),e(Y1e,xcr),e(Za,$cr),e(wr,kcr),e(wr,N),e(N,lT),e(lT,K1e),e(K1e,Scr),e(lT,Rcr),e(lT,AW),e(AW,Pcr),e(lT,Bcr),e(N,Icr),e(N,iT),e(iT,Z1e),e(Z1e,Ncr),e(iT,qcr),e(iT,yW),e(yW,jcr),e(iT,Dcr),e(N,Gcr),e(N,dT),e(dT,e7e),e(e7e,Ocr),e(dT,Vcr),e(dT,LW),e(LW,Xcr),e(dT,zcr),e(N,Wcr),e(N,cT),e(cT,o7e),e(o7e,Qcr),e(cT,Hcr),e(cT,xW),e(xW,Ucr),e(cT,Jcr),e(N,Ycr),e(N,fT),e(fT,r7e),e(r7e,Kcr),e(fT,Zcr),e(fT,$W),e($W,efr),e(fT,ofr),e(N,rfr),e(N,mT),e(mT,t7e),e(t7e,tfr),e(mT,afr),e(mT,kW),e(kW,nfr),e(mT,sfr),e(N,lfr),e(N,gT),e(gT,a7e),e(a7e,ifr),e(gT,dfr),e(gT,SW),e(SW,cfr),e(gT,ffr),e(N,mfr),e(N,hT),e(hT,n7e),e(n7e,gfr),e(hT,hfr),e(hT,RW),e(RW,pfr),e(hT,_fr),e(N,ufr),e(N,pT),e(pT,s7e),e(s7e,bfr),e(pT,vfr),e(pT,PW),e(PW,Ffr),e(pT,Tfr),e(N,Mfr),e(N,_T),e(_T,l7e),e(l7e,Efr),e(_T,Cfr),e(_T,BW),e(BW,wfr),e(_T,Afr),e(N,yfr),e(N,uT),e(uT,i7e),e(i7e,Lfr),e(uT,xfr),e(uT,IW),e(IW,$fr),e(uT,kfr),e(N,Sfr),e(N,bT),e(bT,d7e),e(d7e,Rfr),e(bT,Pfr),e(bT,NW),e(NW,Bfr),e(bT,Ifr),e(N,Nfr),e(N,vT),e(vT,c7e),e(c7e,qfr),e(vT,jfr),e(vT,qW),e(qW,Dfr),e(vT,Gfr),e(N,Ofr),e(N,FT),e(FT,f7e),e(f7e,Vfr),e(FT,Xfr),e(FT,jW),e(jW,zfr),e(FT,Wfr),e(N,Qfr),e(N,TT),e(TT,m7e),e(m7e,Hfr),e(TT,Ufr),e(TT,DW),e(DW,Jfr),e(TT,Yfr),e(N,Kfr),e(N,MT),e(MT,g7e),e(g7e,Zfr),e(MT,emr),e(MT,GW),e(GW,omr),e(MT,rmr),e(N,tmr),e(N,ET),e(ET,h7e),e(h7e,amr),e(ET,nmr),e(ET,OW),e(OW,smr),e(ET,lmr),e(N,imr),e(N,Ns),e(Ns,p7e),e(p7e,dmr),e(Ns,cmr),e(Ns,VW),e(VW,fmr),e(Ns,mmr),e(Ns,XW),e(XW,gmr),e(Ns,hmr),e(N,pmr),e(N,CT),e(CT,_7e),e(_7e,_mr),e(CT,umr),e(CT,zW),e(zW,bmr),e(CT,vmr),e(N,Fmr),e(N,wT),e(wT,u7e),e(u7e,Tmr),e(wT,Mmr),e(wT,WW),e(WW,Emr),e(wT,Cmr),e(N,wmr),e(N,AT),e(AT,b7e),e(b7e,Amr),e(AT,ymr),e(AT,QW),e(QW,Lmr),e(AT,xmr),e(N,$mr),e(N,yT),e(yT,v7e),e(v7e,kmr),e(yT,Smr),e(yT,HW),e(HW,Rmr),e(yT,Pmr),e(N,Bmr),e(N,LT),e(LT,F7e),e(F7e,Imr),e(LT,Nmr),e(LT,UW),e(UW,qmr),e(LT,jmr),e(N,Dmr),e(N,xT),e(xT,T7e),e(T7e,Gmr),e(xT,Omr),e(xT,JW),e(JW,Vmr),e(xT,Xmr),e(N,zmr),e(N,$T),e($T,M7e),e(M7e,Wmr),e($T,Qmr),e($T,YW),e(YW,Hmr),e($T,Umr),e(N,Jmr),e(N,kT),e(kT,E7e),e(E7e,Ymr),e(kT,Kmr),e(kT,KW),e(KW,Zmr),e(kT,egr),e(N,ogr),e(N,ST),e(ST,C7e),e(C7e,rgr),e(ST,tgr),e(ST,ZW),e(ZW,agr),e(ST,ngr),e(N,sgr),e(N,RT),e(RT,w7e),e(w7e,lgr),e(RT,igr),e(RT,eQ),e(eQ,dgr),e(RT,cgr),e(N,fgr),e(N,PT),e(PT,A7e),e(A7e,mgr),e(PT,ggr),e(PT,oQ),e(oQ,hgr),e(PT,pgr),e(N,_gr),e(N,BT),e(BT,y7e),e(y7e,ugr),e(BT,bgr),e(BT,rQ),e(rQ,vgr),e(BT,Fgr),e(N,Tgr),e(N,IT),e(IT,L7e),e(L7e,Mgr),e(IT,Egr),e(IT,tQ),e(tQ,Cgr),e(IT,wgr),e(N,Agr),e(N,NT),e(NT,x7e),e(x7e,ygr),e(NT,Lgr),e(NT,aQ),e(aQ,xgr),e(NT,$gr),e(N,kgr),e(N,qT),e(qT,$7e),e($7e,Sgr),e(qT,Rgr),e(qT,nQ),e(nQ,Pgr),e(qT,Bgr),e(N,Igr),e(N,jT),e(jT,k7e),e(k7e,Ngr),e(jT,qgr),e(jT,sQ),e(sQ,jgr),e(jT,Dgr),e(N,Ggr),e(N,DT),e(DT,S7e),e(S7e,Ogr),e(DT,Vgr),e(DT,lQ),e(lQ,Xgr),e(DT,zgr),e(N,Wgr),e(N,GT),e(GT,R7e),e(R7e,Qgr),e(GT,Hgr),e(GT,iQ),e(iQ,Ugr),e(GT,Jgr),e(N,Ygr),e(N,OT),e(OT,P7e),e(P7e,Kgr),e(OT,Zgr),e(OT,dQ),e(dQ,ehr),e(OT,ohr),e(N,rhr),e(N,VT),e(VT,B7e),e(B7e,thr),e(VT,ahr),e(VT,cQ),e(cQ,nhr),e(VT,shr),e(N,lhr),e(N,XT),e(XT,I7e),e(I7e,ihr),e(XT,dhr),e(XT,fQ),e(fQ,chr),e(XT,fhr),e(N,mhr),e(N,zT),e(zT,N7e),e(N7e,ghr),e(zT,hhr),e(zT,mQ),e(mQ,phr),e(zT,_hr),e(N,uhr),e(N,WT),e(WT,q7e),e(q7e,bhr),e(WT,vhr),e(WT,gQ),e(gQ,Fhr),e(WT,Thr),e(N,Mhr),e(N,QT),e(QT,j7e),e(j7e,Ehr),e(QT,Chr),e(QT,hQ),e(hQ,whr),e(QT,Ahr),e(N,yhr),e(N,HT),e(HT,D7e),e(D7e,Lhr),e(HT,xhr),e(HT,pQ),e(pQ,$hr),e(HT,khr),e(N,Shr),e(N,UT),e(UT,G7e),e(G7e,Rhr),e(UT,Phr),e(UT,_Q),e(_Q,Bhr),e(UT,Ihr),e(N,Nhr),e(N,JT),e(JT,O7e),e(O7e,qhr),e(JT,jhr),e(JT,uQ),e(uQ,Dhr),e(JT,Ghr),e(N,Ohr),e(N,YT),e(YT,V7e),e(V7e,Vhr),e(YT,Xhr),e(YT,bQ),e(bQ,zhr),e(YT,Whr),e(N,Qhr),e(N,KT),e(KT,X7e),e(X7e,Hhr),e(KT,Uhr),e(KT,vQ),e(vQ,Jhr),e(KT,Yhr),e(N,Khr),e(N,ZT),e(ZT,z7e),e(z7e,Zhr),e(ZT,epr),e(ZT,FQ),e(FQ,opr),e(ZT,rpr),e(wr,tpr),M(eM,wr,null),b(f,Jje,u),b(f,Wd,u),e(Wd,oM),e(oM,W7e),M(C8,W7e,null),e(Wd,apr),e(Wd,Q7e),e(Q7e,npr),b(f,Yje,u),b(f,Ko,u),M(w8,Ko,null),e(Ko,spr),e(Ko,Qd),e(Qd,lpr),e(Qd,TQ),e(TQ,ipr),e(Qd,dpr),e(Qd,MQ),e(MQ,cpr),e(Qd,fpr),e(Ko,mpr),e(Ko,A8),e(A8,gpr),e(A8,H7e),e(H7e,hpr),e(A8,ppr),e(Ko,_pr),e(Ko,xt),M(y8,xt,null),e(xt,upr),e(xt,U7e),e(U7e,bpr),e(xt,vpr),e(xt,Hd),e(Hd,Fpr),e(Hd,J7e),e(J7e,Tpr),e(Hd,Mpr),e(Hd,EQ),e(EQ,Epr),e(Hd,Cpr),e(xt,wpr),M(rM,xt,null),e(Ko,Apr),e(Ko,Ar),M(L8,Ar,null),e(Ar,ypr),e(Ar,Y7e),e(Y7e,Lpr),e(Ar,xpr),e(Ar,en),e(en,$pr),e(en,K7e),e(K7e,kpr),e(en,Spr),e(en,Z7e),e(Z7e,Rpr),e(en,Ppr),e(en,ebe),e(ebe,Bpr),e(en,Ipr),e(Ar,Npr),e(Ar,se),e(se,tM),e(tM,obe),e(obe,qpr),e(tM,jpr),e(tM,CQ),e(CQ,Dpr),e(tM,Gpr),e(se,Opr),e(se,aM),e(aM,rbe),e(rbe,Vpr),e(aM,Xpr),e(aM,wQ),e(wQ,zpr),e(aM,Wpr),e(se,Qpr),e(se,nM),e(nM,tbe),e(tbe,Hpr),e(nM,Upr),e(nM,AQ),e(AQ,Jpr),e(nM,Ypr),e(se,Kpr),e(se,sM),e(sM,abe),e(abe,Zpr),e(sM,e_r),e(sM,yQ),e(yQ,o_r),e(sM,r_r),e(se,t_r),e(se,lM),e(lM,nbe),e(nbe,a_r),e(lM,n_r),e(lM,LQ),e(LQ,s_r),e(lM,l_r),e(se,i_r),e(se,iM),e(iM,sbe),e(sbe,d_r),e(iM,c_r),e(iM,xQ),e(xQ,f_r),e(iM,m_r),e(se,g_r),e(se,dM),e(dM,lbe),e(lbe,h_r),e(dM,p_r),e(dM,$Q),e($Q,__r),e(dM,u_r),e(se,b_r),e(se,cM),e(cM,ibe),e(ibe,v_r),e(cM,F_r),e(cM,kQ),e(kQ,T_r),e(cM,M_r),e(se,E_r),e(se,fM),e(fM,dbe),e(dbe,C_r),e(fM,w_r),e(fM,SQ),e(SQ,A_r),e(fM,y_r),e(se,L_r),e(se,mM),e(mM,cbe),e(cbe,x_r),e(mM,$_r),e(mM,RQ),e(RQ,k_r),e(mM,S_r),e(se,R_r),e(se,gM),e(gM,fbe),e(fbe,P_r),e(gM,B_r),e(gM,PQ),e(PQ,I_r),e(gM,N_r),e(se,q_r),e(se,hM),e(hM,mbe),e(mbe,j_r),e(hM,D_r),e(hM,BQ),e(BQ,G_r),e(hM,O_r),e(se,V_r),e(se,pM),e(pM,gbe),e(gbe,X_r),e(pM,z_r),e(pM,IQ),e(IQ,W_r),e(pM,Q_r),e(se,H_r),e(se,_M),e(_M,hbe),e(hbe,U_r),e(_M,J_r),e(_M,NQ),e(NQ,Y_r),e(_M,K_r),e(se,Z_r),e(se,uM),e(uM,pbe),e(pbe,eur),e(uM,our),e(uM,qQ),e(qQ,rur),e(uM,tur),e(se,aur),e(se,bM),e(bM,_be),e(_be,nur),e(bM,sur),e(bM,jQ),e(jQ,lur),e(bM,iur),e(se,dur),e(se,vM),e(vM,ube),e(ube,cur),e(vM,fur),e(vM,DQ),e(DQ,mur),e(vM,gur),e(se,hur),e(se,FM),e(FM,bbe),e(bbe,pur),e(FM,_ur),e(FM,GQ),e(GQ,uur),e(FM,bur),e(se,vur),e(se,TM),e(TM,vbe),e(vbe,Fur),e(TM,Tur),e(TM,OQ),e(OQ,Mur),e(TM,Eur),e(se,Cur),e(se,MM),e(MM,Fbe),e(Fbe,wur),e(MM,Aur),e(MM,VQ),e(VQ,yur),e(MM,Lur),e(se,xur),e(se,EM),e(EM,Tbe),e(Tbe,$ur),e(EM,kur),e(EM,XQ),e(XQ,Sur),e(EM,Rur),e(se,Pur),e(se,CM),e(CM,Mbe),e(Mbe,Bur),e(CM,Iur),e(CM,zQ),e(zQ,Nur),e(CM,qur),e(se,jur),e(se,wM),e(wM,Ebe),e(Ebe,Dur),e(wM,Gur),e(wM,WQ),e(WQ,Our),e(wM,Vur),e(Ar,Xur),M(AM,Ar,null),b(f,Kje,u),b(f,Ud,u),e(Ud,yM),e(yM,Cbe),M(x8,Cbe,null),e(Ud,zur),e(Ud,wbe),e(wbe,Wur),b(f,Zje,u),b(f,Zo,u),M($8,Zo,null),e(Zo,Qur),e(Zo,Jd),e(Jd,Hur),e(Jd,QQ),e(QQ,Uur),e(Jd,Jur),e(Jd,HQ),e(HQ,Yur),e(Jd,Kur),e(Zo,Zur),e(Zo,k8),e(k8,e2r),e(k8,Abe),e(Abe,o2r),e(k8,r2r),e(Zo,t2r),e(Zo,$t),M(S8,$t,null),e($t,a2r),e($t,ybe),e(ybe,n2r),e($t,s2r),e($t,Yd),e(Yd,l2r),e(Yd,Lbe),e(Lbe,i2r),e(Yd,d2r),e(Yd,UQ),e(UQ,c2r),e(Yd,f2r),e($t,m2r),M(LM,$t,null),e(Zo,g2r),e(Zo,yr),M(R8,yr,null),e(yr,h2r),e(yr,xbe),e(xbe,p2r),e(yr,_2r),e(yr,on),e(on,u2r),e(on,$be),e($be,b2r),e(on,v2r),e(on,kbe),e(kbe,F2r),e(on,T2r),e(on,Sbe),e(Sbe,M2r),e(on,E2r),e(yr,C2r),e(yr,Me),e(Me,xM),e(xM,Rbe),e(Rbe,w2r),e(xM,A2r),e(xM,JQ),e(JQ,y2r),e(xM,L2r),e(Me,x2r),e(Me,$M),e($M,Pbe),e(Pbe,$2r),e($M,k2r),e($M,YQ),e(YQ,S2r),e($M,R2r),e(Me,P2r),e(Me,kM),e(kM,Bbe),e(Bbe,B2r),e(kM,I2r),e(kM,KQ),e(KQ,N2r),e(kM,q2r),e(Me,j2r),e(Me,SM),e(SM,Ibe),e(Ibe,D2r),e(SM,G2r),e(SM,ZQ),e(ZQ,O2r),e(SM,V2r),e(Me,X2r),e(Me,RM),e(RM,Nbe),e(Nbe,z2r),e(RM,W2r),e(RM,eH),e(eH,Q2r),e(RM,H2r),e(Me,U2r),e(Me,PM),e(PM,qbe),e(qbe,J2r),e(PM,Y2r),e(PM,oH),e(oH,K2r),e(PM,Z2r),e(Me,e1r),e(Me,BM),e(BM,jbe),e(jbe,o1r),e(BM,r1r),e(BM,rH),e(rH,t1r),e(BM,a1r),e(Me,n1r),e(Me,IM),e(IM,Dbe),e(Dbe,s1r),e(IM,l1r),e(IM,tH),e(tH,i1r),e(IM,d1r),e(Me,c1r),e(Me,NM),e(NM,Gbe),e(Gbe,f1r),e(NM,m1r),e(NM,aH),e(aH,g1r),e(NM,h1r),e(Me,p1r),e(Me,qM),e(qM,Obe),e(Obe,_1r),e(qM,u1r),e(qM,nH),e(nH,b1r),e(qM,v1r),e(Me,F1r),e(Me,jM),e(jM,Vbe),e(Vbe,T1r),e(jM,M1r),e(jM,sH),e(sH,E1r),e(jM,C1r),e(Me,w1r),e(Me,DM),e(DM,Xbe),e(Xbe,A1r),e(DM,y1r),e(DM,lH),e(lH,L1r),e(DM,x1r),e(Me,$1r),e(Me,GM),e(GM,zbe),e(zbe,k1r),e(GM,S1r),e(GM,iH),e(iH,R1r),e(GM,P1r),e(yr,B1r),M(OM,yr,null),b(f,eDe,u),b(f,Kd,u),e(Kd,VM),e(VM,Wbe),M(P8,Wbe,null),e(Kd,I1r),e(Kd,Qbe),e(Qbe,N1r),b(f,oDe,u),b(f,er,u),M(B8,er,null),e(er,q1r),e(er,Zd),e(Zd,j1r),e(Zd,dH),e(dH,D1r),e(Zd,G1r),e(Zd,cH),e(cH,O1r),e(Zd,V1r),e(er,X1r),e(er,I8),e(I8,z1r),e(I8,Hbe),e(Hbe,W1r),e(I8,Q1r),e(er,H1r),e(er,kt),M(N8,kt,null),e(kt,U1r),e(kt,Ube),e(Ube,J1r),e(kt,Y1r),e(kt,ec),e(ec,K1r),e(ec,Jbe),e(Jbe,Z1r),e(ec,e7r),e(ec,fH),e(fH,o7r),e(ec,r7r),e(kt,t7r),M(XM,kt,null),e(er,a7r),e(er,Lr),M(q8,Lr,null),e(Lr,n7r),e(Lr,Ybe),e(Ybe,s7r),e(Lr,l7r),e(Lr,rn),e(rn,i7r),e(rn,Kbe),e(Kbe,d7r),e(rn,c7r),e(rn,Zbe),e(Zbe,f7r),e(rn,m7r),e(rn,e4e),e(e4e,g7r),e(rn,h7r),e(Lr,p7r),e(Lr,et),e(et,zM),e(zM,o4e),e(o4e,_7r),e(zM,u7r),e(zM,mH),e(mH,b7r),e(zM,v7r),e(et,F7r),e(et,WM),e(WM,r4e),e(r4e,T7r),e(WM,M7r),e(WM,gH),e(gH,E7r),e(WM,C7r),e(et,w7r),e(et,QM),e(QM,t4e),e(t4e,A7r),e(QM,y7r),e(QM,hH),e(hH,L7r),e(QM,x7r),e(et,$7r),e(et,HM),e(HM,a4e),e(a4e,k7r),e(HM,S7r),e(HM,pH),e(pH,R7r),e(HM,P7r),e(et,B7r),e(et,UM),e(UM,n4e),e(n4e,I7r),e(UM,N7r),e(UM,_H),e(_H,q7r),e(UM,j7r),e(Lr,D7r),M(JM,Lr,null),b(f,rDe,u),b(f,oc,u),e(oc,YM),e(YM,s4e),M(j8,s4e,null),e(oc,G7r),e(oc,l4e),e(l4e,O7r),b(f,tDe,u),b(f,or,u),M(D8,or,null),e(or,V7r),e(or,rc),e(rc,X7r),e(rc,uH),e(uH,z7r),e(rc,W7r),e(rc,bH),e(bH,Q7r),e(rc,H7r),e(or,U7r),e(or,G8),e(G8,J7r),e(G8,i4e),e(i4e,Y7r),e(G8,K7r),e(or,Z7r),e(or,St),M(O8,St,null),e(St,ebr),e(St,d4e),e(d4e,obr),e(St,rbr),e(St,tc),e(tc,tbr),e(tc,c4e),e(c4e,abr),e(tc,nbr),e(tc,vH),e(vH,sbr),e(tc,lbr),e(St,ibr),M(KM,St,null),e(or,dbr),e(or,xr),M(V8,xr,null),e(xr,cbr),e(xr,f4e),e(f4e,fbr),e(xr,mbr),e(xr,tn),e(tn,gbr),e(tn,m4e),e(m4e,hbr),e(tn,pbr),e(tn,g4e),e(g4e,_br),e(tn,ubr),e(tn,h4e),e(h4e,bbr),e(tn,vbr),e(xr,Fbr),e(xr,ie),e(ie,ZM),e(ZM,p4e),e(p4e,Tbr),e(ZM,Mbr),e(ZM,FH),e(FH,Ebr),e(ZM,Cbr),e(ie,wbr),e(ie,eE),e(eE,_4e),e(_4e,Abr),e(eE,ybr),e(eE,TH),e(TH,Lbr),e(eE,xbr),e(ie,$br),e(ie,oE),e(oE,u4e),e(u4e,kbr),e(oE,Sbr),e(oE,MH),e(MH,Rbr),e(oE,Pbr),e(ie,Bbr),e(ie,rE),e(rE,b4e),e(b4e,Ibr),e(rE,Nbr),e(rE,EH),e(EH,qbr),e(rE,jbr),e(ie,Dbr),e(ie,tE),e(tE,v4e),e(v4e,Gbr),e(tE,Obr),e(tE,CH),e(CH,Vbr),e(tE,Xbr),e(ie,zbr),e(ie,aE),e(aE,F4e),e(F4e,Wbr),e(aE,Qbr),e(aE,wH),e(wH,Hbr),e(aE,Ubr),e(ie,Jbr),e(ie,nE),e(nE,T4e),e(T4e,Ybr),e(nE,Kbr),e(nE,AH),e(AH,Zbr),e(nE,e4r),e(ie,o4r),e(ie,sE),e(sE,M4e),e(M4e,r4r),e(sE,t4r),e(sE,yH),e(yH,a4r),e(sE,n4r),e(ie,s4r),e(ie,lE),e(lE,E4e),e(E4e,l4r),e(lE,i4r),e(lE,LH),e(LH,d4r),e(lE,c4r),e(ie,f4r),e(ie,iE),e(iE,C4e),e(C4e,m4r),e(iE,g4r),e(iE,xH),e(xH,h4r),e(iE,p4r),e(ie,_4r),e(ie,dE),e(dE,w4e),e(w4e,u4r),e(dE,b4r),e(dE,$H),e($H,v4r),e(dE,F4r),e(ie,T4r),e(ie,cE),e(cE,A4e),e(A4e,M4r),e(cE,E4r),e(cE,kH),e(kH,C4r),e(cE,w4r),e(ie,A4r),e(ie,fE),e(fE,y4e),e(y4e,y4r),e(fE,L4r),e(fE,SH),e(SH,x4r),e(fE,$4r),e(ie,k4r),e(ie,mE),e(mE,L4e),e(L4e,S4r),e(mE,R4r),e(mE,RH),e(RH,P4r),e(mE,B4r),e(ie,I4r),e(ie,gE),e(gE,x4e),e(x4e,N4r),e(gE,q4r),e(gE,PH),e(PH,j4r),e(gE,D4r),e(ie,G4r),e(ie,hE),e(hE,$4e),e($4e,O4r),e(hE,V4r),e(hE,BH),e(BH,X4r),e(hE,z4r),e(ie,W4r),e(ie,pE),e(pE,k4e),e(k4e,Q4r),e(pE,H4r),e(pE,IH),e(IH,U4r),e(pE,J4r),e(ie,Y4r),e(ie,_E),e(_E,S4e),e(S4e,K4r),e(_E,Z4r),e(_E,NH),e(NH,evr),e(_E,ovr),e(ie,rvr),e(ie,uE),e(uE,R4e),e(R4e,tvr),e(uE,avr),e(uE,qH),e(qH,nvr),e(uE,svr),e(ie,lvr),e(ie,bE),e(bE,P4e),e(P4e,ivr),e(bE,dvr),e(bE,jH),e(jH,cvr),e(bE,fvr),e(xr,mvr),M(vE,xr,null),b(f,aDe,u),b(f,ac,u),e(ac,FE),e(FE,B4e),M(X8,B4e,null),e(ac,gvr),e(ac,I4e),e(I4e,hvr),b(f,nDe,u),b(f,rr,u),M(z8,rr,null),e(rr,pvr),e(rr,nc),e(nc,_vr),e(nc,DH),e(DH,uvr),e(nc,bvr),e(nc,GH),e(GH,vvr),e(nc,Fvr),e(rr,Tvr),e(rr,W8),e(W8,Mvr),e(W8,N4e),e(N4e,Evr),e(W8,Cvr),e(rr,wvr),e(rr,Rt),M(Q8,Rt,null),e(Rt,Avr),e(Rt,q4e),e(q4e,yvr),e(Rt,Lvr),e(Rt,sc),e(sc,xvr),e(sc,j4e),e(j4e,$vr),e(sc,kvr),e(sc,OH),e(OH,Svr),e(sc,Rvr),e(Rt,Pvr),M(TE,Rt,null),e(rr,Bvr),e(rr,$r),M(H8,$r,null),e($r,Ivr),e($r,D4e),e(D4e,Nvr),e($r,qvr),e($r,an),e(an,jvr),e(an,G4e),e(G4e,Dvr),e(an,Gvr),e(an,O4e),e(O4e,Ovr),e(an,Vvr),e(an,V4e),e(V4e,Xvr),e(an,zvr),e($r,Wvr),e($r,ye),e(ye,ME),e(ME,X4e),e(X4e,Qvr),e(ME,Hvr),e(ME,VH),e(VH,Uvr),e(ME,Jvr),e(ye,Yvr),e(ye,EE),e(EE,z4e),e(z4e,Kvr),e(EE,Zvr),e(EE,XH),e(XH,eFr),e(EE,oFr),e(ye,rFr),e(ye,CE),e(CE,W4e),e(W4e,tFr),e(CE,aFr),e(CE,zH),e(zH,nFr),e(CE,sFr),e(ye,lFr),e(ye,wE),e(wE,Q4e),e(Q4e,iFr),e(wE,dFr),e(wE,WH),e(WH,cFr),e(wE,fFr),e(ye,mFr),e(ye,AE),e(AE,H4e),e(H4e,gFr),e(AE,hFr),e(AE,QH),e(QH,pFr),e(AE,_Fr),e(ye,uFr),e(ye,yE),e(yE,U4e),e(U4e,bFr),e(yE,vFr),e(yE,HH),e(HH,FFr),e(yE,TFr),e(ye,MFr),e(ye,LE),e(LE,J4e),e(J4e,EFr),e(LE,CFr),e(LE,UH),e(UH,wFr),e(LE,AFr),e(ye,yFr),e(ye,xE),e(xE,Y4e),e(Y4e,LFr),e(xE,xFr),e(xE,JH),e(JH,$Fr),e(xE,kFr),e(ye,SFr),e(ye,$E),e($E,K4e),e(K4e,RFr),e($E,PFr),e($E,YH),e(YH,BFr),e($E,IFr),e(ye,NFr),e(ye,kE),e(kE,Z4e),e(Z4e,qFr),e(kE,jFr),e(kE,KH),e(KH,DFr),e(kE,GFr),e($r,OFr),M(SE,$r,null),b(f,sDe,u),b(f,lc,u),e(lc,RE),e(RE,eve),M(U8,eve,null),e(lc,VFr),e(lc,ove),e(ove,XFr),b(f,lDe,u),b(f,tr,u),M(J8,tr,null),e(tr,zFr),e(tr,ic),e(ic,WFr),e(ic,ZH),e(ZH,QFr),e(ic,HFr),e(ic,eU),e(eU,UFr),e(ic,JFr),e(tr,YFr),e(tr,Y8),e(Y8,KFr),e(Y8,rve),e(rve,ZFr),e(Y8,eTr),e(tr,oTr),e(tr,Pt),M(K8,Pt,null),e(Pt,rTr),e(Pt,tve),e(tve,tTr),e(Pt,aTr),e(Pt,dc),e(dc,nTr),e(dc,ave),e(ave,sTr),e(dc,lTr),e(dc,oU),e(oU,iTr),e(dc,dTr),e(Pt,cTr),M(PE,Pt,null),e(tr,fTr),e(tr,kr),M(Z8,kr,null),e(kr,mTr),e(kr,nve),e(nve,gTr),e(kr,hTr),e(kr,nn),e(nn,pTr),e(nn,sve),e(sve,_Tr),e(nn,uTr),e(nn,lve),e(lve,bTr),e(nn,vTr),e(nn,ive),e(ive,FTr),e(nn,TTr),e(kr,MTr),e(kr,oe),e(oe,BE),e(BE,dve),e(dve,ETr),e(BE,CTr),e(BE,rU),e(rU,wTr),e(BE,ATr),e(oe,yTr),e(oe,IE),e(IE,cve),e(cve,LTr),e(IE,xTr),e(IE,tU),e(tU,$Tr),e(IE,kTr),e(oe,STr),e(oe,NE),e(NE,fve),e(fve,RTr),e(NE,PTr),e(NE,aU),e(aU,BTr),e(NE,ITr),e(oe,NTr),e(oe,qE),e(qE,mve),e(mve,qTr),e(qE,jTr),e(qE,nU),e(nU,DTr),e(qE,GTr),e(oe,OTr),e(oe,jE),e(jE,gve),e(gve,VTr),e(jE,XTr),e(jE,sU),e(sU,zTr),e(jE,WTr),e(oe,QTr),e(oe,DE),e(DE,hve),e(hve,HTr),e(DE,UTr),e(DE,lU),e(lU,JTr),e(DE,YTr),e(oe,KTr),e(oe,GE),e(GE,pve),e(pve,ZTr),e(GE,eMr),e(GE,iU),e(iU,oMr),e(GE,rMr),e(oe,tMr),e(oe,OE),e(OE,_ve),e(_ve,aMr),e(OE,nMr),e(OE,dU),e(dU,sMr),e(OE,lMr),e(oe,iMr),e(oe,VE),e(VE,uve),e(uve,dMr),e(VE,cMr),e(VE,cU),e(cU,fMr),e(VE,mMr),e(oe,gMr),e(oe,XE),e(XE,bve),e(bve,hMr),e(XE,pMr),e(XE,fU),e(fU,_Mr),e(XE,uMr),e(oe,bMr),e(oe,zE),e(zE,vve),e(vve,vMr),e(zE,FMr),e(zE,mU),e(mU,TMr),e(zE,MMr),e(oe,EMr),e(oe,WE),e(WE,Fve),e(Fve,CMr),e(WE,wMr),e(WE,gU),e(gU,AMr),e(WE,yMr),e(oe,LMr),e(oe,QE),e(QE,Tve),e(Tve,xMr),e(QE,$Mr),e(QE,hU),e(hU,kMr),e(QE,SMr),e(oe,RMr),e(oe,HE),e(HE,Mve),e(Mve,PMr),e(HE,BMr),e(HE,pU),e(pU,IMr),e(HE,NMr),e(oe,qMr),e(oe,UE),e(UE,Eve),e(Eve,jMr),e(UE,DMr),e(UE,_U),e(_U,GMr),e(UE,OMr),e(oe,VMr),e(oe,JE),e(JE,Cve),e(Cve,XMr),e(JE,zMr),e(JE,uU),e(uU,WMr),e(JE,QMr),e(oe,HMr),e(oe,YE),e(YE,wve),e(wve,UMr),e(YE,JMr),e(YE,bU),e(bU,YMr),e(YE,KMr),e(oe,ZMr),e(oe,KE),e(KE,Ave),e(Ave,eEr),e(KE,oEr),e(KE,vU),e(vU,rEr),e(KE,tEr),e(oe,aEr),e(oe,ZE),e(ZE,yve),e(yve,nEr),e(ZE,sEr),e(ZE,FU),e(FU,lEr),e(ZE,iEr),e(oe,dEr),e(oe,eC),e(eC,Lve),e(Lve,cEr),e(eC,fEr),e(eC,TU),e(TU,mEr),e(eC,gEr),e(oe,hEr),e(oe,oC),e(oC,xve),e(xve,pEr),e(oC,_Er),e(oC,MU),e(MU,uEr),e(oC,bEr),e(oe,vEr),e(oe,rC),e(rC,$ve),e($ve,FEr),e(rC,TEr),e(rC,EU),e(EU,MEr),e(rC,EEr),e(oe,CEr),e(oe,tC),e(tC,kve),e(kve,wEr),e(tC,AEr),e(tC,CU),e(CU,yEr),e(tC,LEr),e(oe,xEr),e(oe,aC),e(aC,Sve),e(Sve,$Er),e(aC,kEr),e(aC,wU),e(wU,SEr),e(aC,REr),e(oe,PEr),e(oe,nC),e(nC,Rve),e(Rve,BEr),e(nC,IEr),e(nC,AU),e(AU,NEr),e(nC,qEr),e(oe,jEr),e(oe,sC),e(sC,Pve),e(Pve,DEr),e(sC,GEr),e(sC,yU),e(yU,OEr),e(sC,VEr),e(kr,XEr),M(lC,kr,null),b(f,iDe,u),b(f,cc,u),e(cc,iC),e(iC,Bve),M(e9,Bve,null),e(cc,zEr),e(cc,Ive),e(Ive,WEr),b(f,dDe,u),b(f,ar,u),M(o9,ar,null),e(ar,QEr),e(ar,fc),e(fc,HEr),e(fc,LU),e(LU,UEr),e(fc,JEr),e(fc,xU),e(xU,YEr),e(fc,KEr),e(ar,ZEr),e(ar,r9),e(r9,eCr),e(r9,Nve),e(Nve,oCr),e(r9,rCr),e(ar,tCr),e(ar,Bt),M(t9,Bt,null),e(Bt,aCr),e(Bt,qve),e(qve,nCr),e(Bt,sCr),e(Bt,mc),e(mc,lCr),e(mc,jve),e(jve,iCr),e(mc,dCr),e(mc,$U),e($U,cCr),e(mc,fCr),e(Bt,mCr),M(dC,Bt,null),e(ar,gCr),e(ar,Sr),M(a9,Sr,null),e(Sr,hCr),e(Sr,Dve),e(Dve,pCr),e(Sr,_Cr),e(Sr,sn),e(sn,uCr),e(sn,Gve),e(Gve,bCr),e(sn,vCr),e(sn,Ove),e(Ove,FCr),e(sn,TCr),e(sn,Vve),e(Vve,MCr),e(sn,ECr),e(Sr,CCr),e(Sr,pe),e(pe,cC),e(cC,Xve),e(Xve,wCr),e(cC,ACr),e(cC,kU),e(kU,yCr),e(cC,LCr),e(pe,xCr),e(pe,fC),e(fC,zve),e(zve,$Cr),e(fC,kCr),e(fC,SU),e(SU,SCr),e(fC,RCr),e(pe,PCr),e(pe,mC),e(mC,Wve),e(Wve,BCr),e(mC,ICr),e(mC,RU),e(RU,NCr),e(mC,qCr),e(pe,jCr),e(pe,gC),e(gC,Qve),e(Qve,DCr),e(gC,GCr),e(gC,PU),e(PU,OCr),e(gC,VCr),e(pe,XCr),e(pe,hC),e(hC,Hve),e(Hve,zCr),e(hC,WCr),e(hC,BU),e(BU,QCr),e(hC,HCr),e(pe,UCr),e(pe,pC),e(pC,Uve),e(Uve,JCr),e(pC,YCr),e(pC,IU),e(IU,KCr),e(pC,ZCr),e(pe,e5r),e(pe,_C),e(_C,Jve),e(Jve,o5r),e(_C,r5r),e(_C,NU),e(NU,t5r),e(_C,a5r),e(pe,n5r),e(pe,uC),e(uC,Yve),e(Yve,s5r),e(uC,l5r),e(uC,qU),e(qU,i5r),e(uC,d5r),e(pe,c5r),e(pe,bC),e(bC,Kve),e(Kve,f5r),e(bC,m5r),e(bC,jU),e(jU,g5r),e(bC,h5r),e(pe,p5r),e(pe,vC),e(vC,Zve),e(Zve,_5r),e(vC,u5r),e(vC,DU),e(DU,b5r),e(vC,v5r),e(pe,F5r),e(pe,FC),e(FC,eFe),e(eFe,T5r),e(FC,M5r),e(FC,GU),e(GU,E5r),e(FC,C5r),e(pe,w5r),e(pe,TC),e(TC,oFe),e(oFe,A5r),e(TC,y5r),e(TC,OU),e(OU,L5r),e(TC,x5r),e(pe,$5r),e(pe,MC),e(MC,rFe),e(rFe,k5r),e(MC,S5r),e(MC,VU),e(VU,R5r),e(MC,P5r),e(pe,B5r),e(pe,EC),e(EC,tFe),e(tFe,I5r),e(EC,N5r),e(EC,XU),e(XU,q5r),e(EC,j5r),e(pe,D5r),e(pe,CC),e(CC,aFe),e(aFe,G5r),e(CC,O5r),e(CC,zU),e(zU,V5r),e(CC,X5r),e(pe,z5r),e(pe,wC),e(wC,nFe),e(nFe,W5r),e(wC,Q5r),e(wC,WU),e(WU,H5r),e(wC,U5r),e(pe,J5r),e(pe,AC),e(AC,sFe),e(sFe,Y5r),e(AC,K5r),e(AC,QU),e(QU,Z5r),e(AC,e3r),e(Sr,o3r),M(yC,Sr,null),b(f,cDe,u),b(f,gc,u),e(gc,LC),e(LC,lFe),M(n9,lFe,null),e(gc,r3r),e(gc,iFe),e(iFe,t3r),b(f,fDe,u),b(f,nr,u),M(s9,nr,null),e(nr,a3r),e(nr,hc),e(hc,n3r),e(hc,HU),e(HU,s3r),e(hc,l3r),e(hc,UU),e(UU,i3r),e(hc,d3r),e(nr,c3r),e(nr,l9),e(l9,f3r),e(l9,dFe),e(dFe,m3r),e(l9,g3r),e(nr,h3r),e(nr,It),M(i9,It,null),e(It,p3r),e(It,cFe),e(cFe,_3r),e(It,u3r),e(It,pc),e(pc,b3r),e(pc,fFe),e(fFe,v3r),e(pc,F3r),e(pc,JU),e(JU,T3r),e(pc,M3r),e(It,E3r),M(xC,It,null),e(nr,C3r),e(nr,Rr),M(d9,Rr,null),e(Rr,w3r),e(Rr,mFe),e(mFe,A3r),e(Rr,y3r),e(Rr,ln),e(ln,L3r),e(ln,gFe),e(gFe,x3r),e(ln,$3r),e(ln,hFe),e(hFe,k3r),e(ln,S3r),e(ln,pFe),e(pFe,R3r),e(ln,P3r),e(Rr,B3r),e(Rr,c9),e(c9,$C),e($C,_Fe),e(_Fe,I3r),e($C,N3r),e($C,YU),e(YU,q3r),e($C,j3r),e(c9,D3r),e(c9,kC),e(kC,uFe),e(uFe,G3r),e(kC,O3r),e(kC,KU),e(KU,V3r),e(kC,X3r),e(Rr,z3r),M(SC,Rr,null),b(f,mDe,u),b(f,_c,u),e(_c,RC),e(RC,bFe),M(f9,bFe,null),e(_c,W3r),e(_c,vFe),e(vFe,Q3r),b(f,gDe,u),b(f,sr,u),M(m9,sr,null),e(sr,H3r),e(sr,uc),e(uc,U3r),e(uc,ZU),e(ZU,J3r),e(uc,Y3r),e(uc,eJ),e(eJ,K3r),e(uc,Z3r),e(sr,e0r),e(sr,g9),e(g9,o0r),e(g9,FFe),e(FFe,r0r),e(g9,t0r),e(sr,a0r),e(sr,Nt),M(h9,Nt,null),e(Nt,n0r),e(Nt,TFe),e(TFe,s0r),e(Nt,l0r),e(Nt,bc),e(bc,i0r),e(bc,MFe),e(MFe,d0r),e(bc,c0r),e(bc,oJ),e(oJ,f0r),e(bc,m0r),e(Nt,g0r),M(PC,Nt,null),e(sr,h0r),e(sr,Pr),M(p9,Pr,null),e(Pr,p0r),e(Pr,EFe),e(EFe,_0r),e(Pr,u0r),e(Pr,dn),e(dn,b0r),e(dn,CFe),e(CFe,v0r),e(dn,F0r),e(dn,wFe),e(wFe,T0r),e(dn,M0r),e(dn,AFe),e(AFe,E0r),e(dn,C0r),e(Pr,w0r),e(Pr,yFe),e(yFe,BC),e(BC,LFe),e(LFe,A0r),e(BC,y0r),e(BC,rJ),e(rJ,L0r),e(BC,x0r),e(Pr,$0r),M(IC,Pr,null),b(f,hDe,u),b(f,vc,u),e(vc,NC),e(NC,xFe),M(_9,xFe,null),e(vc,k0r),e(vc,$Fe),e($Fe,S0r),b(f,pDe,u),b(f,lr,u),M(u9,lr,null),e(lr,R0r),e(lr,Fc),e(Fc,P0r),e(Fc,tJ),e(tJ,B0r),e(Fc,I0r),e(Fc,aJ),e(aJ,N0r),e(Fc,q0r),e(lr,j0r),e(lr,b9),e(b9,D0r),e(b9,kFe),e(kFe,G0r),e(b9,O0r),e(lr,V0r),e(lr,qt),M(v9,qt,null),e(qt,X0r),e(qt,SFe),e(SFe,z0r),e(qt,W0r),e(qt,Tc),e(Tc,Q0r),e(Tc,RFe),e(RFe,H0r),e(Tc,U0r),e(Tc,nJ),e(nJ,J0r),e(Tc,Y0r),e(qt,K0r),M(qC,qt,null),e(lr,Z0r),e(lr,Br),M(F9,Br,null),e(Br,ewr),e(Br,PFe),e(PFe,owr),e(Br,rwr),e(Br,cn),e(cn,twr),e(cn,BFe),e(BFe,awr),e(cn,nwr),e(cn,IFe),e(IFe,swr),e(cn,lwr),e(cn,NFe),e(NFe,iwr),e(cn,dwr),e(Br,cwr),e(Br,de),e(de,jC),e(jC,qFe),e(qFe,fwr),e(jC,mwr),e(jC,sJ),e(sJ,gwr),e(jC,hwr),e(de,pwr),e(de,DC),e(DC,jFe),e(jFe,_wr),e(DC,uwr),e(DC,lJ),e(lJ,bwr),e(DC,vwr),e(de,Fwr),e(de,GC),e(GC,DFe),e(DFe,Twr),e(GC,Mwr),e(GC,iJ),e(iJ,Ewr),e(GC,Cwr),e(de,wwr),e(de,OC),e(OC,GFe),e(GFe,Awr),e(OC,ywr),e(OC,dJ),e(dJ,Lwr),e(OC,xwr),e(de,$wr),e(de,VC),e(VC,OFe),e(OFe,kwr),e(VC,Swr),e(VC,cJ),e(cJ,Rwr),e(VC,Pwr),e(de,Bwr),e(de,XC),e(XC,VFe),e(VFe,Iwr),e(XC,Nwr),e(XC,fJ),e(fJ,qwr),e(XC,jwr),e(de,Dwr),e(de,zC),e(zC,XFe),e(XFe,Gwr),e(zC,Owr),e(zC,mJ),e(mJ,Vwr),e(zC,Xwr),e(de,zwr),e(de,WC),e(WC,zFe),e(zFe,Wwr),e(WC,Qwr),e(WC,gJ),e(gJ,Hwr),e(WC,Uwr),e(de,Jwr),e(de,QC),e(QC,WFe),e(WFe,Ywr),e(QC,Kwr),e(QC,hJ),e(hJ,Zwr),e(QC,eAr),e(de,oAr),e(de,HC),e(HC,QFe),e(QFe,rAr),e(HC,tAr),e(HC,pJ),e(pJ,aAr),e(HC,nAr),e(de,sAr),e(de,UC),e(UC,HFe),e(HFe,lAr),e(UC,iAr),e(UC,_J),e(_J,dAr),e(UC,cAr),e(de,fAr),e(de,JC),e(JC,UFe),e(UFe,mAr),e(JC,gAr),e(JC,uJ),e(uJ,hAr),e(JC,pAr),e(de,_Ar),e(de,YC),e(YC,JFe),e(JFe,uAr),e(YC,bAr),e(YC,bJ),e(bJ,vAr),e(YC,FAr),e(de,TAr),e(de,KC),e(KC,YFe),e(YFe,MAr),e(KC,EAr),e(KC,vJ),e(vJ,CAr),e(KC,wAr),e(de,AAr),e(de,ZC),e(ZC,KFe),e(KFe,yAr),e(ZC,LAr),e(ZC,FJ),e(FJ,xAr),e(ZC,$Ar),e(de,kAr),e(de,e5),e(e5,ZFe),e(ZFe,SAr),e(e5,RAr),e(e5,TJ),e(TJ,PAr),e(e5,BAr),e(de,IAr),e(de,o5),e(o5,eTe),e(eTe,NAr),e(o5,qAr),e(o5,MJ),e(MJ,jAr),e(o5,DAr),e(de,GAr),e(de,r5),e(r5,oTe),e(oTe,OAr),e(r5,VAr),e(r5,EJ),e(EJ,XAr),e(r5,zAr),e(de,WAr),e(de,t5),e(t5,rTe),e(rTe,QAr),e(t5,HAr),e(t5,CJ),e(CJ,UAr),e(t5,JAr),e(de,YAr),e(de,a5),e(a5,tTe),e(tTe,KAr),e(a5,ZAr),e(a5,wJ),e(wJ,e6r),e(a5,o6r),e(Br,r6r),M(n5,Br,null),b(f,_De,u),b(f,Mc,u),e(Mc,s5),e(s5,aTe),M(T9,aTe,null),e(Mc,t6r),e(Mc,nTe),e(nTe,a6r),b(f,uDe,u),b(f,ir,u),M(M9,ir,null),e(ir,n6r),e(ir,Ec),e(Ec,s6r),e(Ec,AJ),e(AJ,l6r),e(Ec,i6r),e(Ec,yJ),e(yJ,d6r),e(Ec,c6r),e(ir,f6r),e(ir,E9),e(E9,m6r),e(E9,sTe),e(sTe,g6r),e(E9,h6r),e(ir,p6r),e(ir,jt),M(C9,jt,null),e(jt,_6r),e(jt,lTe),e(lTe,u6r),e(jt,b6r),e(jt,Cc),e(Cc,v6r),e(Cc,iTe),e(iTe,F6r),e(Cc,T6r),e(Cc,LJ),e(LJ,M6r),e(Cc,E6r),e(jt,C6r),M(l5,jt,null),e(ir,w6r),e(ir,Ir),M(w9,Ir,null),e(Ir,A6r),e(Ir,dTe),e(dTe,y6r),e(Ir,L6r),e(Ir,fn),e(fn,x6r),e(fn,cTe),e(cTe,$6r),e(fn,k6r),e(fn,fTe),e(fTe,S6r),e(fn,R6r),e(fn,mTe),e(mTe,P6r),e(fn,B6r),e(Ir,I6r),e(Ir,ce),e(ce,i5),e(i5,gTe),e(gTe,N6r),e(i5,q6r),e(i5,xJ),e(xJ,j6r),e(i5,D6r),e(ce,G6r),e(ce,d5),e(d5,hTe),e(hTe,O6r),e(d5,V6r),e(d5,$J),e($J,X6r),e(d5,z6r),e(ce,W6r),e(ce,c5),e(c5,pTe),e(pTe,Q6r),e(c5,H6r),e(c5,kJ),e(kJ,U6r),e(c5,J6r),e(ce,Y6r),e(ce,f5),e(f5,_Te),e(_Te,K6r),e(f5,Z6r),e(f5,SJ),e(SJ,eyr),e(f5,oyr),e(ce,ryr),e(ce,m5),e(m5,uTe),e(uTe,tyr),e(m5,ayr),e(m5,RJ),e(RJ,nyr),e(m5,syr),e(ce,lyr),e(ce,g5),e(g5,bTe),e(bTe,iyr),e(g5,dyr),e(g5,PJ),e(PJ,cyr),e(g5,fyr),e(ce,myr),e(ce,h5),e(h5,vTe),e(vTe,gyr),e(h5,hyr),e(h5,BJ),e(BJ,pyr),e(h5,_yr),e(ce,uyr),e(ce,p5),e(p5,FTe),e(FTe,byr),e(p5,vyr),e(p5,IJ),e(IJ,Fyr),e(p5,Tyr),e(ce,Myr),e(ce,_5),e(_5,TTe),e(TTe,Eyr),e(_5,Cyr),e(_5,NJ),e(NJ,wyr),e(_5,Ayr),e(ce,yyr),e(ce,u5),e(u5,MTe),e(MTe,Lyr),e(u5,xyr),e(u5,qJ),e(qJ,$yr),e(u5,kyr),e(ce,Syr),e(ce,b5),e(b5,ETe),e(ETe,Ryr),e(b5,Pyr),e(b5,jJ),e(jJ,Byr),e(b5,Iyr),e(ce,Nyr),e(ce,v5),e(v5,CTe),e(CTe,qyr),e(v5,jyr),e(v5,DJ),e(DJ,Dyr),e(v5,Gyr),e(ce,Oyr),e(ce,F5),e(F5,wTe),e(wTe,Vyr),e(F5,Xyr),e(F5,GJ),e(GJ,zyr),e(F5,Wyr),e(ce,Qyr),e(ce,T5),e(T5,ATe),e(ATe,Hyr),e(T5,Uyr),e(T5,OJ),e(OJ,Jyr),e(T5,Yyr),e(ce,Kyr),e(ce,M5),e(M5,yTe),e(yTe,Zyr),e(M5,eLr),e(M5,VJ),e(VJ,oLr),e(M5,rLr),e(ce,tLr),e(ce,E5),e(E5,LTe),e(LTe,aLr),e(E5,nLr),e(E5,XJ),e(XJ,sLr),e(E5,lLr),e(ce,iLr),e(ce,C5),e(C5,xTe),e(xTe,dLr),e(C5,cLr),e(C5,zJ),e(zJ,fLr),e(C5,mLr),e(ce,gLr),e(ce,w5),e(w5,$Te),e($Te,hLr),e(w5,pLr),e(w5,WJ),e(WJ,_Lr),e(w5,uLr),e(ce,bLr),e(ce,A5),e(A5,kTe),e(kTe,vLr),e(A5,FLr),e(A5,QJ),e(QJ,TLr),e(A5,MLr),e(ce,ELr),e(ce,y5),e(y5,STe),e(STe,CLr),e(y5,wLr),e(y5,HJ),e(HJ,ALr),e(y5,yLr),e(Ir,LLr),M(L5,Ir,null),b(f,bDe,u),b(f,wc,u),e(wc,x5),e(x5,RTe),M(A9,RTe,null),e(wc,xLr),e(wc,PTe),e(PTe,$Lr),b(f,vDe,u),b(f,dr,u),M(y9,dr,null),e(dr,kLr),e(dr,Ac),e(Ac,SLr),e(Ac,UJ),e(UJ,RLr),e(Ac,PLr),e(Ac,JJ),e(JJ,BLr),e(Ac,ILr),e(dr,NLr),e(dr,L9),e(L9,qLr),e(L9,BTe),e(BTe,jLr),e(L9,DLr),e(dr,GLr),e(dr,Dt),M(x9,Dt,null),e(Dt,OLr),e(Dt,ITe),e(ITe,VLr),e(Dt,XLr),e(Dt,yc),e(yc,zLr),e(yc,NTe),e(NTe,WLr),e(yc,QLr),e(yc,YJ),e(YJ,HLr),e(yc,ULr),e(Dt,JLr),M($5,Dt,null),e(dr,YLr),e(dr,Nr),M($9,Nr,null),e(Nr,KLr),e(Nr,qTe),e(qTe,ZLr),e(Nr,e8r),e(Nr,mn),e(mn,o8r),e(mn,jTe),e(jTe,r8r),e(mn,t8r),e(mn,DTe),e(DTe,a8r),e(mn,n8r),e(mn,GTe),e(GTe,s8r),e(mn,l8r),e(Nr,i8r),e(Nr,OTe),e(OTe,k5),e(k5,VTe),e(VTe,d8r),e(k5,c8r),e(k5,KJ),e(KJ,f8r),e(k5,m8r),e(Nr,g8r),M(S5,Nr,null),b(f,FDe,u),b(f,Lc,u),e(Lc,R5),e(R5,XTe),M(k9,XTe,null),e(Lc,h8r),e(Lc,zTe),e(zTe,p8r),b(f,TDe,u),b(f,cr,u),M(S9,cr,null),e(cr,_8r),e(cr,xc),e(xc,u8r),e(xc,ZJ),e(ZJ,b8r),e(xc,v8r),e(xc,eY),e(eY,F8r),e(xc,T8r),e(cr,M8r),e(cr,R9),e(R9,E8r),e(R9,WTe),e(WTe,C8r),e(R9,w8r),e(cr,A8r),e(cr,Gt),M(P9,Gt,null),e(Gt,y8r),e(Gt,QTe),e(QTe,L8r),e(Gt,x8r),e(Gt,$c),e($c,$8r),e($c,HTe),e(HTe,k8r),e($c,S8r),e($c,oY),e(oY,R8r),e($c,P8r),e(Gt,B8r),M(P5,Gt,null),e(cr,I8r),e(cr,qr),M(B9,qr,null),e(qr,N8r),e(qr,UTe),e(UTe,q8r),e(qr,j8r),e(qr,gn),e(gn,D8r),e(gn,JTe),e(JTe,G8r),e(gn,O8r),e(gn,YTe),e(YTe,V8r),e(gn,X8r),e(gn,KTe),e(KTe,z8r),e(gn,W8r),e(qr,Q8r),e(qr,ZTe),e(ZTe,B5),e(B5,eMe),e(eMe,H8r),e(B5,U8r),e(B5,rY),e(rY,J8r),e(B5,Y8r),e(qr,K8r),M(I5,qr,null),b(f,MDe,u),b(f,kc,u),e(kc,N5),e(N5,oMe),M(I9,oMe,null),e(kc,Z8r),e(kc,rMe),e(rMe,e9r),b(f,EDe,u),b(f,fr,u),M(N9,fr,null),e(fr,o9r),e(fr,Sc),e(Sc,r9r),e(Sc,tY),e(tY,t9r),e(Sc,a9r),e(Sc,aY),e(aY,n9r),e(Sc,s9r),e(fr,l9r),e(fr,q9),e(q9,i9r),e(q9,tMe),e(tMe,d9r),e(q9,c9r),e(fr,f9r),e(fr,Ot),M(j9,Ot,null),e(Ot,m9r),e(Ot,aMe),e(aMe,g9r),e(Ot,h9r),e(Ot,Rc),e(Rc,p9r),e(Rc,nMe),e(nMe,_9r),e(Rc,u9r),e(Rc,nY),e(nY,b9r),e(Rc,v9r),e(Ot,F9r),M(q5,Ot,null),e(fr,T9r),e(fr,jr),M(D9,jr,null),e(jr,M9r),e(jr,sMe),e(sMe,E9r),e(jr,C9r),e(jr,hn),e(hn,w9r),e(hn,lMe),e(lMe,A9r),e(hn,y9r),e(hn,iMe),e(iMe,L9r),e(hn,x9r),e(hn,dMe),e(dMe,$9r),e(hn,k9r),e(jr,S9r),e(jr,re),e(re,j5),e(j5,cMe),e(cMe,R9r),e(j5,P9r),e(j5,sY),e(sY,B9r),e(j5,I9r),e(re,N9r),e(re,D5),e(D5,fMe),e(fMe,q9r),e(D5,j9r),e(D5,lY),e(lY,D9r),e(D5,G9r),e(re,O9r),e(re,G5),e(G5,mMe),e(mMe,V9r),e(G5,X9r),e(G5,iY),e(iY,z9r),e(G5,W9r),e(re,Q9r),e(re,O5),e(O5,gMe),e(gMe,H9r),e(O5,U9r),e(O5,dY),e(dY,J9r),e(O5,Y9r),e(re,K9r),e(re,V5),e(V5,hMe),e(hMe,Z9r),e(V5,exr),e(V5,cY),e(cY,oxr),e(V5,rxr),e(re,txr),e(re,X5),e(X5,pMe),e(pMe,axr),e(X5,nxr),e(X5,fY),e(fY,sxr),e(X5,lxr),e(re,ixr),e(re,z5),e(z5,_Me),e(_Me,dxr),e(z5,cxr),e(z5,mY),e(mY,fxr),e(z5,mxr),e(re,gxr),e(re,W5),e(W5,uMe),e(uMe,hxr),e(W5,pxr),e(W5,gY),e(gY,_xr),e(W5,uxr),e(re,bxr),e(re,Q5),e(Q5,bMe),e(bMe,vxr),e(Q5,Fxr),e(Q5,hY),e(hY,Txr),e(Q5,Mxr),e(re,Exr),e(re,H5),e(H5,vMe),e(vMe,Cxr),e(H5,wxr),e(H5,pY),e(pY,Axr),e(H5,yxr),e(re,Lxr),e(re,U5),e(U5,FMe),e(FMe,xxr),e(U5,$xr),e(U5,_Y),e(_Y,kxr),e(U5,Sxr),e(re,Rxr),e(re,J5),e(J5,TMe),e(TMe,Pxr),e(J5,Bxr),e(J5,uY),e(uY,Ixr),e(J5,Nxr),e(re,qxr),e(re,Y5),e(Y5,MMe),e(MMe,jxr),e(Y5,Dxr),e(Y5,bY),e(bY,Gxr),e(Y5,Oxr),e(re,Vxr),e(re,K5),e(K5,EMe),e(EMe,Xxr),e(K5,zxr),e(K5,vY),e(vY,Wxr),e(K5,Qxr),e(re,Hxr),e(re,Z5),e(Z5,CMe),e(CMe,Uxr),e(Z5,Jxr),e(Z5,FY),e(FY,Yxr),e(Z5,Kxr),e(re,Zxr),e(re,e3),e(e3,wMe),e(wMe,e$r),e(e3,o$r),e(e3,TY),e(TY,r$r),e(e3,t$r),e(re,a$r),e(re,o3),e(o3,AMe),e(AMe,n$r),e(o3,s$r),e(o3,MY),e(MY,l$r),e(o3,i$r),e(re,d$r),e(re,r3),e(r3,yMe),e(yMe,c$r),e(r3,f$r),e(r3,EY),e(EY,m$r),e(r3,g$r),e(re,h$r),e(re,t3),e(t3,LMe),e(LMe,p$r),e(t3,_$r),e(t3,CY),e(CY,u$r),e(t3,b$r),e(re,v$r),e(re,a3),e(a3,xMe),e(xMe,F$r),e(a3,T$r),e(a3,wY),e(wY,M$r),e(a3,E$r),e(re,C$r),e(re,n3),e(n3,$Me),e($Me,w$r),e(n3,A$r),e(n3,AY),e(AY,y$r),e(n3,L$r),e(re,x$r),e(re,s3),e(s3,kMe),e(kMe,$$r),e(s3,k$r),e(s3,yY),e(yY,S$r),e(s3,R$r),e(re,P$r),e(re,l3),e(l3,SMe),e(SMe,B$r),e(l3,I$r),e(l3,LY),e(LY,N$r),e(l3,q$r),e(re,j$r),e(re,i3),e(i3,RMe),e(RMe,D$r),e(i3,G$r),e(i3,xY),e(xY,O$r),e(i3,V$r),e(re,X$r),e(re,d3),e(d3,PMe),e(PMe,z$r),e(d3,W$r),e(d3,$Y),e($Y,Q$r),e(d3,H$r),e(re,U$r),e(re,c3),e(c3,BMe),e(BMe,J$r),e(c3,Y$r),e(c3,kY),e(kY,K$r),e(c3,Z$r),e(jr,ekr),M(f3,jr,null),b(f,CDe,u),b(f,Pc,u),e(Pc,m3),e(m3,IMe),M(G9,IMe,null),e(Pc,okr),e(Pc,NMe),e(NMe,rkr),b(f,wDe,u),b(f,mr,u),M(O9,mr,null),e(mr,tkr),e(mr,Bc),e(Bc,akr),e(Bc,SY),e(SY,nkr),e(Bc,skr),e(Bc,RY),e(RY,lkr),e(Bc,ikr),e(mr,dkr),e(mr,V9),e(V9,ckr),e(V9,qMe),e(qMe,fkr),e(V9,mkr),e(mr,gkr),e(mr,Vt),M(X9,Vt,null),e(Vt,hkr),e(Vt,jMe),e(jMe,pkr),e(Vt,_kr),e(Vt,Ic),e(Ic,ukr),e(Ic,DMe),e(DMe,bkr),e(Ic,vkr),e(Ic,PY),e(PY,Fkr),e(Ic,Tkr),e(Vt,Mkr),M(g3,Vt,null),e(mr,Ekr),e(mr,Dr),M(z9,Dr,null),e(Dr,Ckr),e(Dr,GMe),e(GMe,wkr),e(Dr,Akr),e(Dr,pn),e(pn,ykr),e(pn,OMe),e(OMe,Lkr),e(pn,xkr),e(pn,VMe),e(VMe,$kr),e(pn,kkr),e(pn,XMe),e(XMe,Skr),e(pn,Rkr),e(Dr,Pkr),e(Dr,Le),e(Le,h3),e(h3,zMe),e(zMe,Bkr),e(h3,Ikr),e(h3,BY),e(BY,Nkr),e(h3,qkr),e(Le,jkr),e(Le,p3),e(p3,WMe),e(WMe,Dkr),e(p3,Gkr),e(p3,IY),e(IY,Okr),e(p3,Vkr),e(Le,Xkr),e(Le,_3),e(_3,QMe),e(QMe,zkr),e(_3,Wkr),e(_3,NY),e(NY,Qkr),e(_3,Hkr),e(Le,Ukr),e(Le,u3),e(u3,HMe),e(HMe,Jkr),e(u3,Ykr),e(u3,qY),e(qY,Kkr),e(u3,Zkr),e(Le,eSr),e(Le,b3),e(b3,UMe),e(UMe,oSr),e(b3,rSr),e(b3,jY),e(jY,tSr),e(b3,aSr),e(Le,nSr),e(Le,v3),e(v3,JMe),e(JMe,sSr),e(v3,lSr),e(v3,DY),e(DY,iSr),e(v3,dSr),e(Le,cSr),e(Le,F3),e(F3,YMe),e(YMe,fSr),e(F3,mSr),e(F3,GY),e(GY,gSr),e(F3,hSr),e(Le,pSr),e(Le,T3),e(T3,KMe),e(KMe,_Sr),e(T3,uSr),e(T3,OY),e(OY,bSr),e(T3,vSr),e(Le,FSr),e(Le,M3),e(M3,ZMe),e(ZMe,TSr),e(M3,MSr),e(M3,VY),e(VY,ESr),e(M3,CSr),e(Le,wSr),e(Le,E3),e(E3,eEe),e(eEe,ASr),e(E3,ySr),e(E3,XY),e(XY,LSr),e(E3,xSr),e(Dr,$Sr),M(C3,Dr,null),b(f,ADe,u),b(f,Nc,u),e(Nc,w3),e(w3,oEe),M(W9,oEe,null),e(Nc,kSr),e(Nc,rEe),e(rEe,SSr),b(f,yDe,u),b(f,gr,u),M(Q9,gr,null),e(gr,RSr),e(gr,qc),e(qc,PSr),e(qc,zY),e(zY,BSr),e(qc,ISr),e(qc,WY),e(WY,NSr),e(qc,qSr),e(gr,jSr),e(gr,H9),e(H9,DSr),e(H9,tEe),e(tEe,GSr),e(H9,OSr),e(gr,VSr),e(gr,Xt),M(U9,Xt,null),e(Xt,XSr),e(Xt,aEe),e(aEe,zSr),e(Xt,WSr),e(Xt,jc),e(jc,QSr),e(jc,nEe),e(nEe,HSr),e(jc,USr),e(jc,QY),e(QY,JSr),e(jc,YSr),e(Xt,KSr),M(A3,Xt,null),e(gr,ZSr),e(gr,Gr),M(J9,Gr,null),e(Gr,eRr),e(Gr,sEe),e(sEe,oRr),e(Gr,rRr),e(Gr,_n),e(_n,tRr),e(_n,lEe),e(lEe,aRr),e(_n,nRr),e(_n,iEe),e(iEe,sRr),e(_n,lRr),e(_n,dEe),e(dEe,iRr),e(_n,dRr),e(Gr,cRr),e(Gr,Ee),e(Ee,y3),e(y3,cEe),e(cEe,fRr),e(y3,mRr),e(y3,HY),e(HY,gRr),e(y3,hRr),e(Ee,pRr),e(Ee,L3),e(L3,fEe),e(fEe,_Rr),e(L3,uRr),e(L3,UY),e(UY,bRr),e(L3,vRr),e(Ee,FRr),e(Ee,x3),e(x3,mEe),e(mEe,TRr),e(x3,MRr),e(x3,JY),e(JY,ERr),e(x3,CRr),e(Ee,wRr),e(Ee,$3),e($3,gEe),e(gEe,ARr),e($3,yRr),e($3,YY),e(YY,LRr),e($3,xRr),e(Ee,$Rr),e(Ee,k3),e(k3,hEe),e(hEe,kRr),e(k3,SRr),e(k3,KY),e(KY,RRr),e(k3,PRr),e(Ee,BRr),e(Ee,S3),e(S3,pEe),e(pEe,IRr),e(S3,NRr),e(S3,ZY),e(ZY,qRr),e(S3,jRr),e(Ee,DRr),e(Ee,R3),e(R3,_Ee),e(_Ee,GRr),e(R3,ORr),e(R3,eK),e(eK,VRr),e(R3,XRr),e(Ee,zRr),e(Ee,P3),e(P3,uEe),e(uEe,WRr),e(P3,QRr),e(P3,oK),e(oK,HRr),e(P3,URr),e(Ee,JRr),e(Ee,B3),e(B3,bEe),e(bEe,YRr),e(B3,KRr),e(B3,rK),e(rK,ZRr),e(B3,ePr),e(Ee,oPr),e(Ee,I3),e(I3,vEe),e(vEe,rPr),e(I3,tPr),e(I3,tK),e(tK,aPr),e(I3,nPr),e(Ee,sPr),e(Ee,N3),e(N3,FEe),e(FEe,lPr),e(N3,iPr),e(N3,aK),e(aK,dPr),e(N3,cPr),e(Ee,fPr),e(Ee,q3),e(q3,TEe),e(TEe,mPr),e(q3,gPr),e(q3,nK),e(nK,hPr),e(q3,pPr),e(Gr,_Pr),M(j3,Gr,null),b(f,LDe,u),b(f,Dc,u),e(Dc,D3),e(D3,MEe),M(Y9,MEe,null),e(Dc,uPr),e(Dc,EEe),e(EEe,bPr),b(f,xDe,u),b(f,hr,u),M(K9,hr,null),e(hr,vPr),e(hr,Gc),e(Gc,FPr),e(Gc,sK),e(sK,TPr),e(Gc,MPr),e(Gc,lK),e(lK,EPr),e(Gc,CPr),e(hr,wPr),e(hr,Z9),e(Z9,APr),e(Z9,CEe),e(CEe,yPr),e(Z9,LPr),e(hr,xPr),e(hr,zt),M(ex,zt,null),e(zt,$Pr),e(zt,wEe),e(wEe,kPr),e(zt,SPr),e(zt,Oc),e(Oc,RPr),e(Oc,AEe),e(AEe,PPr),e(Oc,BPr),e(Oc,iK),e(iK,IPr),e(Oc,NPr),e(zt,qPr),M(G3,zt,null),e(hr,jPr),e(hr,Or),M(ox,Or,null),e(Or,DPr),e(Or,yEe),e(yEe,GPr),e(Or,OPr),e(Or,un),e(un,VPr),e(un,LEe),e(LEe,XPr),e(un,zPr),e(un,xEe),e(xEe,WPr),e(un,QPr),e(un,$Ee),e($Ee,HPr),e(un,UPr),e(Or,JPr),e(Or,xe),e(xe,O3),e(O3,kEe),e(kEe,YPr),e(O3,KPr),e(O3,dK),e(dK,ZPr),e(O3,eBr),e(xe,oBr),e(xe,V3),e(V3,SEe),e(SEe,rBr),e(V3,tBr),e(V3,cK),e(cK,aBr),e(V3,nBr),e(xe,sBr),e(xe,X3),e(X3,REe),e(REe,lBr),e(X3,iBr),e(X3,fK),e(fK,dBr),e(X3,cBr),e(xe,fBr),e(xe,z3),e(z3,PEe),e(PEe,mBr),e(z3,gBr),e(z3,mK),e(mK,hBr),e(z3,pBr),e(xe,_Br),e(xe,W3),e(W3,BEe),e(BEe,uBr),e(W3,bBr),e(W3,gK),e(gK,vBr),e(W3,FBr),e(xe,TBr),e(xe,Q3),e(Q3,IEe),e(IEe,MBr),e(Q3,EBr),e(Q3,hK),e(hK,CBr),e(Q3,wBr),e(xe,ABr),e(xe,H3),e(H3,NEe),e(NEe,yBr),e(H3,LBr),e(H3,pK),e(pK,xBr),e(H3,$Br),e(xe,kBr),e(xe,U3),e(U3,qEe),e(qEe,SBr),e(U3,RBr),e(U3,_K),e(_K,PBr),e(U3,BBr),e(xe,IBr),e(xe,J3),e(J3,jEe),e(jEe,NBr),e(J3,qBr),e(J3,uK),e(uK,jBr),e(J3,DBr),e(xe,GBr),e(xe,Y3),e(Y3,DEe),e(DEe,OBr),e(Y3,VBr),e(Y3,bK),e(bK,XBr),e(Y3,zBr),e(Or,WBr),M(K3,Or,null),b(f,$De,u),b(f,Vc,u),e(Vc,Z3),e(Z3,GEe),M(rx,GEe,null),e(Vc,QBr),e(Vc,OEe),e(OEe,HBr),b(f,kDe,u),b(f,pr,u),M(tx,pr,null),e(pr,UBr),e(pr,Xc),e(Xc,JBr),e(Xc,vK),e(vK,YBr),e(Xc,KBr),e(Xc,FK),e(FK,ZBr),e(Xc,eIr),e(pr,oIr),e(pr,ax),e(ax,rIr),e(ax,VEe),e(VEe,tIr),e(ax,aIr),e(pr,nIr),e(pr,Wt),M(nx,Wt,null),e(Wt,sIr),e(Wt,XEe),e(XEe,lIr),e(Wt,iIr),e(Wt,zc),e(zc,dIr),e(zc,zEe),e(zEe,cIr),e(zc,fIr),e(zc,TK),e(TK,mIr),e(zc,gIr),e(Wt,hIr),M(e0,Wt,null),e(pr,pIr),e(pr,Vr),M(sx,Vr,null),e(Vr,_Ir),e(Vr,WEe),e(WEe,uIr),e(Vr,bIr),e(Vr,bn),e(bn,vIr),e(bn,QEe),e(QEe,FIr),e(bn,TIr),e(bn,HEe),e(HEe,MIr),e(bn,EIr),e(bn,UEe),e(UEe,CIr),e(bn,wIr),e(Vr,AIr),e(Vr,Pe),e(Pe,o0),e(o0,JEe),e(JEe,yIr),e(o0,LIr),e(o0,MK),e(MK,xIr),e(o0,$Ir),e(Pe,kIr),e(Pe,r0),e(r0,YEe),e(YEe,SIr),e(r0,RIr),e(r0,EK),e(EK,PIr),e(r0,BIr),e(Pe,IIr),e(Pe,t0),e(t0,KEe),e(KEe,NIr),e(t0,qIr),e(t0,CK),e(CK,jIr),e(t0,DIr),e(Pe,GIr),e(Pe,a0),e(a0,ZEe),e(ZEe,OIr),e(a0,VIr),e(a0,wK),e(wK,XIr),e(a0,zIr),e(Pe,WIr),e(Pe,n0),e(n0,eCe),e(eCe,QIr),e(n0,HIr),e(n0,AK),e(AK,UIr),e(n0,JIr),e(Pe,YIr),e(Pe,s0),e(s0,oCe),e(oCe,KIr),e(s0,ZIr),e(s0,yK),e(yK,eNr),e(s0,oNr),e(Pe,rNr),e(Pe,l0),e(l0,rCe),e(rCe,tNr),e(l0,aNr),e(l0,LK),e(LK,nNr),e(l0,sNr),e(Pe,lNr),e(Pe,i0),e(i0,tCe),e(tCe,iNr),e(i0,dNr),e(i0,xK),e(xK,cNr),e(i0,fNr),e(Pe,mNr),e(Pe,d0),e(d0,aCe),e(aCe,gNr),e(d0,hNr),e(d0,$K),e($K,pNr),e(d0,_Nr),e(Vr,uNr),M(c0,Vr,null),b(f,SDe,u),b(f,Wc,u),e(Wc,f0),e(f0,nCe),M(lx,nCe,null),e(Wc,bNr),e(Wc,sCe),e(sCe,vNr),b(f,RDe,u),b(f,_r,u),M(ix,_r,null),e(_r,FNr),e(_r,Qc),e(Qc,TNr),e(Qc,kK),e(kK,MNr),e(Qc,ENr),e(Qc,SK),e(SK,CNr),e(Qc,wNr),e(_r,ANr),e(_r,dx),e(dx,yNr),e(dx,lCe),e(lCe,LNr),e(dx,xNr),e(_r,$Nr),e(_r,Qt),M(cx,Qt,null),e(Qt,kNr),e(Qt,iCe),e(iCe,SNr),e(Qt,RNr),e(Qt,Hc),e(Hc,PNr),e(Hc,dCe),e(dCe,BNr),e(Hc,INr),e(Hc,RK),e(RK,NNr),e(Hc,qNr),e(Qt,jNr),M(m0,Qt,null),e(_r,DNr),e(_r,Xr),M(fx,Xr,null),e(Xr,GNr),e(Xr,cCe),e(cCe,ONr),e(Xr,VNr),e(Xr,vn),e(vn,XNr),e(vn,fCe),e(fCe,zNr),e(vn,WNr),e(vn,mCe),e(mCe,QNr),e(vn,HNr),e(vn,gCe),e(gCe,UNr),e(vn,JNr),e(Xr,YNr),e(Xr,$e),e($e,g0),e(g0,hCe),e(hCe,KNr),e(g0,ZNr),e(g0,PK),e(PK,eqr),e(g0,oqr),e($e,rqr),e($e,h0),e(h0,pCe),e(pCe,tqr),e(h0,aqr),e(h0,BK),e(BK,nqr),e(h0,sqr),e($e,lqr),e($e,p0),e(p0,_Ce),e(_Ce,iqr),e(p0,dqr),e(p0,IK),e(IK,cqr),e(p0,fqr),e($e,mqr),e($e,_0),e(_0,uCe),e(uCe,gqr),e(_0,hqr),e(_0,NK),e(NK,pqr),e(_0,_qr),e($e,uqr),e($e,u0),e(u0,bCe),e(bCe,bqr),e(u0,vqr),e(u0,qK),e(qK,Fqr),e(u0,Tqr),e($e,Mqr),e($e,b0),e(b0,vCe),e(vCe,Eqr),e(b0,Cqr),e(b0,jK),e(jK,wqr),e(b0,Aqr),e($e,yqr),e($e,v0),e(v0,FCe),e(FCe,Lqr),e(v0,xqr),e(v0,DK),e(DK,$qr),e(v0,kqr),e($e,Sqr),e($e,F0),e(F0,TCe),e(TCe,Rqr),e(F0,Pqr),e(F0,GK),e(GK,Bqr),e(F0,Iqr),e($e,Nqr),e($e,T0),e(T0,MCe),e(MCe,qqr),e(T0,jqr),e(T0,OK),e(OK,Dqr),e(T0,Gqr),e($e,Oqr),e($e,M0),e(M0,ECe),e(ECe,Vqr),e(M0,Xqr),e(M0,VK),e(VK,zqr),e(M0,Wqr),e(Xr,Qqr),M(E0,Xr,null),b(f,PDe,u),b(f,Uc,u),e(Uc,C0),e(C0,CCe),M(mx,CCe,null),e(Uc,Hqr),e(Uc,wCe),e(wCe,Uqr),b(f,BDe,u),b(f,ur,u),M(gx,ur,null),e(ur,Jqr),e(ur,Jc),e(Jc,Yqr),e(Jc,XK),e(XK,Kqr),e(Jc,Zqr),e(Jc,zK),e(zK,ejr),e(Jc,ojr),e(ur,rjr),e(ur,hx),e(hx,tjr),e(hx,ACe),e(ACe,ajr),e(hx,njr),e(ur,sjr),e(ur,Ht),M(px,Ht,null),e(Ht,ljr),e(Ht,yCe),e(yCe,ijr),e(Ht,djr),e(Ht,Yc),e(Yc,cjr),e(Yc,LCe),e(LCe,fjr),e(Yc,mjr),e(Yc,WK),e(WK,gjr),e(Yc,hjr),e(Ht,pjr),M(w0,Ht,null),e(ur,_jr),e(ur,zr),M(_x,zr,null),e(zr,ujr),e(zr,xCe),e(xCe,bjr),e(zr,vjr),e(zr,Fn),e(Fn,Fjr),e(Fn,$Ce),e($Ce,Tjr),e(Fn,Mjr),e(Fn,kCe),e(kCe,Ejr),e(Fn,Cjr),e(Fn,SCe),e(SCe,wjr),e(Fn,Ajr),e(zr,yjr),e(zr,ke),e(ke,A0),e(A0,RCe),e(RCe,Ljr),e(A0,xjr),e(A0,QK),e(QK,$jr),e(A0,kjr),e(ke,Sjr),e(ke,y0),e(y0,PCe),e(PCe,Rjr),e(y0,Pjr),e(y0,HK),e(HK,Bjr),e(y0,Ijr),e(ke,Njr),e(ke,L0),e(L0,BCe),e(BCe,qjr),e(L0,jjr),e(L0,UK),e(UK,Djr),e(L0,Gjr),e(ke,Ojr),e(ke,x0),e(x0,ICe),e(ICe,Vjr),e(x0,Xjr),e(x0,JK),e(JK,zjr),e(x0,Wjr),e(ke,Qjr),e(ke,$0),e($0,NCe),e(NCe,Hjr),e($0,Ujr),e($0,YK),e(YK,Jjr),e($0,Yjr),e(ke,Kjr),e(ke,k0),e(k0,qCe),e(qCe,Zjr),e(k0,eDr),e(k0,KK),e(KK,oDr),e(k0,rDr),e(ke,tDr),e(ke,S0),e(S0,jCe),e(jCe,aDr),e(S0,nDr),e(S0,ZK),e(ZK,sDr),e(S0,lDr),e(ke,iDr),e(ke,R0),e(R0,DCe),e(DCe,dDr),e(R0,cDr),e(R0,eZ),e(eZ,fDr),e(R0,mDr),e(ke,gDr),e(ke,P0),e(P0,GCe),e(GCe,hDr),e(P0,pDr),e(P0,oZ),e(oZ,_Dr),e(P0,uDr),e(ke,bDr),e(ke,B0),e(B0,OCe),e(OCe,vDr),e(B0,FDr),e(B0,rZ),e(rZ,TDr),e(B0,MDr),e(zr,EDr),M(I0,zr,null),b(f,IDe,u),b(f,Kc,u),e(Kc,N0),e(N0,VCe),M(ux,VCe,null),e(Kc,CDr),e(Kc,XCe),e(XCe,wDr),b(f,NDe,u),b(f,br,u),M(bx,br,null),e(br,ADr),e(br,Zc),e(Zc,yDr),e(Zc,tZ),e(tZ,LDr),e(Zc,xDr),e(Zc,aZ),e(aZ,$Dr),e(Zc,kDr),e(br,SDr),e(br,vx),e(vx,RDr),e(vx,zCe),e(zCe,PDr),e(vx,BDr),e(br,IDr),e(br,Ut),M(Fx,Ut,null),e(Ut,NDr),e(Ut,WCe),e(WCe,qDr),e(Ut,jDr),e(Ut,ef),e(ef,DDr),e(ef,QCe),e(QCe,GDr),e(ef,ODr),e(ef,nZ),e(nZ,VDr),e(ef,XDr),e(Ut,zDr),M(q0,Ut,null),e(br,WDr),e(br,Wr),M(Tx,Wr,null),e(Wr,QDr),e(Wr,HCe),e(HCe,HDr),e(Wr,UDr),e(Wr,Tn),e(Tn,JDr),e(Tn,UCe),e(UCe,YDr),e(Tn,KDr),e(Tn,JCe),e(JCe,ZDr),e(Tn,eGr),e(Tn,YCe),e(YCe,oGr),e(Tn,rGr),e(Wr,tGr),e(Wr,Ge),e(Ge,j0),e(j0,KCe),e(KCe,aGr),e(j0,nGr),e(j0,sZ),e(sZ,sGr),e(j0,lGr),e(Ge,iGr),e(Ge,D0),e(D0,ZCe),e(ZCe,dGr),e(D0,cGr),e(D0,lZ),e(lZ,fGr),e(D0,mGr),e(Ge,gGr),e(Ge,G0),e(G0,e5e),e(e5e,hGr),e(G0,pGr),e(G0,iZ),e(iZ,_Gr),e(G0,uGr),e(Ge,bGr),e(Ge,O0),e(O0,o5e),e(o5e,vGr),e(O0,FGr),e(O0,dZ),e(dZ,TGr),e(O0,MGr),e(Ge,EGr),e(Ge,V0),e(V0,r5e),e(r5e,CGr),e(V0,wGr),e(V0,cZ),e(cZ,AGr),e(V0,yGr),e(Ge,LGr),e(Ge,X0),e(X0,t5e),e(t5e,xGr),e(X0,$Gr),e(X0,fZ),e(fZ,kGr),e(X0,SGr),e(Ge,RGr),e(Ge,z0),e(z0,a5e),e(a5e,PGr),e(z0,BGr),e(z0,mZ),e(mZ,IGr),e(z0,NGr),e(Ge,qGr),e(Ge,W0),e(W0,n5e),e(n5e,jGr),e(W0,DGr),e(W0,gZ),e(gZ,GGr),e(W0,OGr),e(Wr,VGr),M(Q0,Wr,null),b(f,qDe,u),b(f,of,u),e(of,H0),e(H0,s5e),M(Mx,s5e,null),e(of,XGr),e(of,l5e),e(l5e,zGr),b(f,jDe,u),b(f,vr,u),M(Ex,vr,null),e(vr,WGr),e(vr,rf),e(rf,QGr),e(rf,hZ),e(hZ,HGr),e(rf,UGr),e(rf,pZ),e(pZ,JGr),e(rf,YGr),e(vr,KGr),e(vr,Cx),e(Cx,ZGr),e(Cx,i5e),e(i5e,eOr),e(Cx,oOr),e(vr,rOr),e(vr,Jt),M(wx,Jt,null),e(Jt,tOr),e(Jt,d5e),e(d5e,aOr),e(Jt,nOr),e(Jt,tf),e(tf,sOr),e(tf,c5e),e(c5e,lOr),e(tf,iOr),e(tf,_Z),e(_Z,dOr),e(tf,cOr),e(Jt,fOr),M(U0,Jt,null),e(vr,mOr),e(vr,Qr),M(Ax,Qr,null),e(Qr,gOr),e(Qr,f5e),e(f5e,hOr),e(Qr,pOr),e(Qr,Mn),e(Mn,_Or),e(Mn,m5e),e(m5e,uOr),e(Mn,bOr),e(Mn,g5e),e(g5e,vOr),e(Mn,FOr),e(Mn,h5e),e(h5e,TOr),e(Mn,MOr),e(Qr,EOr),e(Qr,Oe),e(Oe,J0),e(J0,p5e),e(p5e,COr),e(J0,wOr),e(J0,uZ),e(uZ,AOr),e(J0,yOr),e(Oe,LOr),e(Oe,Y0),e(Y0,_5e),e(_5e,xOr),e(Y0,$Or),e(Y0,bZ),e(bZ,kOr),e(Y0,SOr),e(Oe,ROr),e(Oe,K0),e(K0,u5e),e(u5e,POr),e(K0,BOr),e(K0,vZ),e(vZ,IOr),e(K0,NOr),e(Oe,qOr),e(Oe,Z0),e(Z0,b5e),e(b5e,jOr),e(Z0,DOr),e(Z0,FZ),e(FZ,GOr),e(Z0,OOr),e(Oe,VOr),e(Oe,ew),e(ew,v5e),e(v5e,XOr),e(ew,zOr),e(ew,TZ),e(TZ,WOr),e(ew,QOr),e(Oe,HOr),e(Oe,ow),e(ow,F5e),e(F5e,UOr),e(ow,JOr),e(ow,MZ),e(MZ,YOr),e(ow,KOr),e(Oe,ZOr),e(Oe,rw),e(rw,T5e),e(T5e,eVr),e(rw,oVr),e(rw,EZ),e(EZ,rVr),e(rw,tVr),e(Oe,aVr),e(Oe,tw),e(tw,M5e),e(M5e,nVr),e(tw,sVr),e(tw,CZ),e(CZ,lVr),e(tw,iVr),e(Qr,dVr),M(aw,Qr,null),b(f,DDe,u),b(f,af,u),e(af,nw),e(nw,E5e),M(yx,E5e,null),e(af,cVr),e(af,C5e),e(C5e,fVr),b(f,GDe,u),b(f,Fr,u),M(Lx,Fr,null),e(Fr,mVr),e(Fr,nf),e(nf,gVr),e(nf,wZ),e(wZ,hVr),e(nf,pVr),e(nf,AZ),e(AZ,_Vr),e(nf,uVr),e(Fr,bVr),e(Fr,xx),e(xx,vVr),e(xx,w5e),e(w5e,FVr),e(xx,TVr),e(Fr,MVr),e(Fr,Yt),M($x,Yt,null),e(Yt,EVr),e(Yt,A5e),e(A5e,CVr),e(Yt,wVr),e(Yt,sf),e(sf,AVr),e(sf,y5e),e(y5e,yVr),e(sf,LVr),e(sf,yZ),e(yZ,xVr),e(sf,$Vr),e(Yt,kVr),M(sw,Yt,null),e(Fr,SVr),e(Fr,Hr),M(kx,Hr,null),e(Hr,RVr),e(Hr,L5e),e(L5e,PVr),e(Hr,BVr),e(Hr,En),e(En,IVr),e(En,x5e),e(x5e,NVr),e(En,qVr),e(En,$5e),e($5e,jVr),e(En,DVr),e(En,k5e),e(k5e,GVr),e(En,OVr),e(Hr,VVr),e(Hr,S5e),e(S5e,lw),e(lw,R5e),e(R5e,XVr),e(lw,zVr),e(lw,LZ),e(LZ,WVr),e(lw,QVr),e(Hr,HVr),M(iw,Hr,null),b(f,ODe,u),b(f,lf,u),e(lf,dw),e(dw,P5e),M(Sx,P5e,null),e(lf,UVr),e(lf,B5e),e(B5e,JVr),b(f,VDe,u),b(f,Tr,u),M(Rx,Tr,null),e(Tr,YVr),e(Tr,df),e(df,KVr),e(df,xZ),e(xZ,ZVr),e(df,eXr),e(df,$Z),e($Z,oXr),e(df,rXr),e(Tr,tXr),e(Tr,Px),e(Px,aXr),e(Px,I5e),e(I5e,nXr),e(Px,sXr),e(Tr,lXr),e(Tr,Kt),M(Bx,Kt,null),e(Kt,iXr),e(Kt,N5e),e(N5e,dXr),e(Kt,cXr),e(Kt,cf),e(cf,fXr),e(cf,q5e),e(q5e,mXr),e(cf,gXr),e(cf,kZ),e(kZ,hXr),e(cf,pXr),e(Kt,_Xr),M(cw,Kt,null),e(Tr,uXr),e(Tr,Ur),M(Ix,Ur,null),e(Ur,bXr),e(Ur,j5e),e(j5e,vXr),e(Ur,FXr),e(Ur,Cn),e(Cn,TXr),e(Cn,D5e),e(D5e,MXr),e(Cn,EXr),e(Cn,G5e),e(G5e,CXr),e(Cn,wXr),e(Cn,O5e),e(O5e,AXr),e(Cn,yXr),e(Ur,LXr),e(Ur,Nx),e(Nx,fw),e(fw,V5e),e(V5e,xXr),e(fw,$Xr),e(fw,SZ),e(SZ,kXr),e(fw,SXr),e(Nx,RXr),e(Nx,mw),e(mw,X5e),e(X5e,PXr),e(mw,BXr),e(mw,RZ),e(RZ,IXr),e(mw,NXr),e(Ur,qXr),M(gw,Ur,null),b(f,XDe,u),b(f,ff,u),e(ff,hw),e(hw,z5e),M(qx,z5e,null),e(ff,jXr),e(ff,W5e),e(W5e,DXr),b(f,zDe,u),b(f,Mr,u),M(jx,Mr,null),e(Mr,GXr),e(Mr,mf),e(mf,OXr),e(mf,PZ),e(PZ,VXr),e(mf,XXr),e(mf,BZ),e(BZ,zXr),e(mf,WXr),e(Mr,QXr),e(Mr,Dx),e(Dx,HXr),e(Dx,Q5e),e(Q5e,UXr),e(Dx,JXr),e(Mr,YXr),e(Mr,Zt),M(Gx,Zt,null),e(Zt,KXr),e(Zt,H5e),e(H5e,ZXr),e(Zt,ezr),e(Zt,gf),e(gf,ozr),e(gf,U5e),e(U5e,rzr),e(gf,tzr),e(gf,IZ),e(IZ,azr),e(gf,nzr),e(Zt,szr),M(pw,Zt,null),e(Mr,lzr),e(Mr,Jr),M(Ox,Jr,null),e(Jr,izr),e(Jr,J5e),e(J5e,dzr),e(Jr,czr),e(Jr,wn),e(wn,fzr),e(wn,Y5e),e(Y5e,mzr),e(wn,gzr),e(wn,K5e),e(K5e,hzr),e(wn,pzr),e(wn,Z5e),e(Z5e,_zr),e(wn,uzr),e(Jr,bzr),e(Jr,e3e),e(e3e,_w),e(_w,o3e),e(o3e,vzr),e(_w,Fzr),e(_w,NZ),e(NZ,Tzr),e(_w,Mzr),e(Jr,Ezr),M(uw,Jr,null),WDe=!0},p(f,[u]){const Vx={};u&2&&(Vx.$$scope={dirty:u,ctx:f}),Mf.$set(Vx);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),Ag.$set(r3e);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),lh.$set(t3e);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),Dh.$set(a3e);const Xx={};u&2&&(Xx.$$scope={dirty:u,ctx:f}),Gh.$set(Xx);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),lp.$set(n3e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),ip.$set(An);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),fp.$set(s3e);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),lu.$set(l3e);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),du.$set(i3e);const zx={};u&2&&(zx.$$scope={dirty:u,ctx:f}),Zu.$set(zx);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),o2.$set(d3e);const Wx={};u&2&&(Wx.$$scope={dirty:u,ctx:f}),D2.$set(Wx);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),O2.$set(c3e);const Qx={};u&2&&(Qx.$$scope={dirty:u,ctx:f}),A1.$set(Qx);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),L1.$set(f3e);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),W1.$set(m3e);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),H1.$set(g3e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),V7.$set(hf);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),z7.$set(h3e);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),Mb.$set(p3e);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),Cb.$set(_3e);const Hx={};u&2&&(Hx.$$scope={dirty:u,ctx:f}),kb.$set(Hx);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),Rb.$set(u3e);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),p4.$set(b3e);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),u4.$set(v3e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),nv.$set(ot);const Ux={};u&2&&(Ux.$$scope={dirty:u,ctx:f}),lv.$set(Ux);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),cv.$set(F3e);const Jx={};u&2&&(Jx.$$scope={dirty:u,ctx:f}),mv.$set(Jx);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),Av.$set(T3e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),Lv.$set(rt);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),kv.$set(M3e);const pf={};u&2&&(pf.$$scope={dirty:u,ctx:f}),Rv.$set(pf);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),Xv.$set(E3e);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),Wv.$set(C3e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Zv.$set(y);const bw={};u&2&&(bw.$$scope={dirty:u,ctx:f}),oF.$set(bw);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),mF.$set(w3e);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),hF.$set(A3e);const vw={};u&2&&(vw.$$scope={dirty:u,ctx:f}),bF.$set(vw);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),FF.$set(y3e);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),yF.$set(L3e);const Fw={};u&2&&(Fw.$$scope={dirty:u,ctx:f}),xF.$set(Fw);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),PF.$set(x3e);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),IF.$set($3e);const Tw={};u&2&&(Tw.$$scope={dirty:u,ctx:f}),DF.$set(Tw);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),OF.$set(k3e);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),zF.$set(S3e);const Mw={};u&2&&(Mw.$$scope={dirty:u,ctx:f}),QF.$set(Mw);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),ZF.$set(R3e);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),oT.$set(P3e);const Ew={};u&2&&(Ew.$$scope={dirty:u,ctx:f}),aT.$set(Ew);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),sT.$set(B3e);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),eM.$set(I3e);const Cw={};u&2&&(Cw.$$scope={dirty:u,ctx:f}),rM.$set(Cw);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),AM.$set(N3e);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),LM.$set(q3e);const ww={};u&2&&(ww.$$scope={dirty:u,ctx:f}),OM.$set(ww);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),XM.$set(j3e);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),JM.$set(D3e);const Aw={};u&2&&(Aw.$$scope={dirty:u,ctx:f}),KM.$set(Aw);const G3e={};u&2&&(G3e.$$scope={dirty:u,ctx:f}),vE.$set(G3e);const O3e={};u&2&&(O3e.$$scope={dirty:u,ctx:f}),TE.$set(O3e);const yw={};u&2&&(yw.$$scope={dirty:u,ctx:f}),SE.$set(yw);const V3e={};u&2&&(V3e.$$scope={dirty:u,ctx:f}),PE.$set(V3e);const X3e={};u&2&&(X3e.$$scope={dirty:u,ctx:f}),lC.$set(X3e);const Lw={};u&2&&(Lw.$$scope={dirty:u,ctx:f}),dC.$set(Lw);const z3e={};u&2&&(z3e.$$scope={dirty:u,ctx:f}),yC.$set(z3e);const W3e={};u&2&&(W3e.$$scope={dirty:u,ctx:f}),xC.$set(W3e);const xw={};u&2&&(xw.$$scope={dirty:u,ctx:f}),SC.$set(xw);const Q3e={};u&2&&(Q3e.$$scope={dirty:u,ctx:f}),PC.$set(Q3e);const H3e={};u&2&&(H3e.$$scope={dirty:u,ctx:f}),IC.$set(H3e);const $w={};u&2&&($w.$$scope={dirty:u,ctx:f}),qC.$set($w);const U3e={};u&2&&(U3e.$$scope={dirty:u,ctx:f}),n5.$set(U3e);const J3e={};u&2&&(J3e.$$scope={dirty:u,ctx:f}),l5.$set(J3e);const kw={};u&2&&(kw.$$scope={dirty:u,ctx:f}),L5.$set(kw);const Y3e={};u&2&&(Y3e.$$scope={dirty:u,ctx:f}),$5.$set(Y3e);const K3e={};u&2&&(K3e.$$scope={dirty:u,ctx:f}),S5.$set(K3e);const Sw={};u&2&&(Sw.$$scope={dirty:u,ctx:f}),P5.$set(Sw);const Z3e={};u&2&&(Z3e.$$scope={dirty:u,ctx:f}),I5.$set(Z3e);const e0e={};u&2&&(e0e.$$scope={dirty:u,ctx:f}),q5.$set(e0e);const Rw={};u&2&&(Rw.$$scope={dirty:u,ctx:f}),f3.$set(Rw);const o0e={};u&2&&(o0e.$$scope={dirty:u,ctx:f}),g3.$set(o0e);const r0e={};u&2&&(r0e.$$scope={dirty:u,ctx:f}),C3.$set(r0e);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),A3.$set(Pw);const t0e={};u&2&&(t0e.$$scope={dirty:u,ctx:f}),j3.$set(t0e);const a0e={};u&2&&(a0e.$$scope={dirty:u,ctx:f}),G3.$set(a0e);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),K3.$set(Bw);const n0e={};u&2&&(n0e.$$scope={dirty:u,ctx:f}),e0.$set(n0e);const s0e={};u&2&&(s0e.$$scope={dirty:u,ctx:f}),c0.$set(s0e);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),m0.$set(Iw);const l0e={};u&2&&(l0e.$$scope={dirty:u,ctx:f}),E0.$set(l0e);const i0e={};u&2&&(i0e.$$scope={dirty:u,ctx:f}),w0.$set(i0e);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),I0.$set(Nw);const d0e={};u&2&&(d0e.$$scope={dirty:u,ctx:f}),q0.$set(d0e);const c0e={};u&2&&(c0e.$$scope={dirty:u,ctx:f}),Q0.$set(c0e);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),U0.$set(qw);const f0e={};u&2&&(f0e.$$scope={dirty:u,ctx:f}),aw.$set(f0e);const m0e={};u&2&&(m0e.$$scope={dirty:u,ctx:f}),sw.$set(m0e);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),iw.$set(jw);const g0e={};u&2&&(g0e.$$scope={dirty:u,ctx:f}),cw.$set(g0e);const h0e={};u&2&&(h0e.$$scope={dirty:u,ctx:f}),gw.$set(h0e);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),pw.$set(Dw);const p0e={};u&2&&(p0e.$$scope={dirty:u,ctx:f}),uw.$set(p0e)},i(f){WDe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(q6.$$.fragment,f),E(j6.$$.fragment,f),E(Mf.$$.fragment,f),E(D6.$$.fragment,f),E(G6.$$.fragment,f),E(X6.$$.fragment,f),E(Ag.$$.fragment,f),E(z6.$$.fragment,f),E(W6.$$.fragment,f),E(Q6.$$.fragment,f),E(J6.$$.fragment,f),E(lh.$$.fragment,f),E(Y6.$$.fragment,f),E(K6.$$.fragment,f),E(Z6.$$.fragment,f),E(ry.$$.fragment,f),E(Dh.$$.fragment,f),E(Gh.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(iy.$$.fragment,f),E(lp.$$.fragment,f),E(ip.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(fy.$$.fragment,f),E(gy.$$.fragment,f),E(fp.$$.fragment,f),E(hy.$$.fragment,f),E(lu.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(by.$$.fragment,f),E(du.$$.fragment,f),E(vy.$$.fragment,f),E(Zu.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Ey.$$.fragment,f),E(o2.$$.fragment,f),E(Cy.$$.fragment,f),E(D2.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(O2.$$.fragment,f),E(xy.$$.fragment,f),E(A1.$$.fragment,f),E($y.$$.fragment,f),E(ky.$$.fragment,f),E(Ry.$$.fragment,f),E(L1.$$.fragment,f),E(Py.$$.fragment,f),E(W1.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(qy.$$.fragment,f),E(H1.$$.fragment,f),E(jy.$$.fragment,f),E(V7.$$.fragment,f),E(Dy.$$.fragment,f),E(Gy.$$.fragment,f),E(Vy.$$.fragment,f),E(z7.$$.fragment,f),E(Xy.$$.fragment,f),E(Mb.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(Hy.$$.fragment,f),E(Cb.$$.fragment,f),E(Uy.$$.fragment,f),E(kb.$$.fragment,f),E(Jy.$$.fragment,f),E(Yy.$$.fragment,f),E(Zy.$$.fragment,f),E(Rb.$$.fragment,f),E(eL.$$.fragment,f),E(p4.$$.fragment,f),E(oL.$$.fragment,f),E(rL.$$.fragment,f),E(aL.$$.fragment,f),E(u4.$$.fragment,f),E(nL.$$.fragment,f),E(nv.$$.fragment,f),E(sL.$$.fragment,f),E(lL.$$.fragment,f),E(dL.$$.fragment,f),E(lv.$$.fragment,f),E(cL.$$.fragment,f),E(cv.$$.fragment,f),E(fL.$$.fragment,f),E(mL.$$.fragment,f),E(hL.$$.fragment,f),E(mv.$$.fragment,f),E(pL.$$.fragment,f),E(Av.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(vL.$$.fragment,f),E(Lv.$$.fragment,f),E(FL.$$.fragment,f),E(kv.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(CL.$$.fragment,f),E(Rv.$$.fragment,f),E(wL.$$.fragment,f),E(Xv.$$.fragment,f),E(AL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(Wv.$$.fragment,f),E($L.$$.fragment,f),E(Zv.$$.fragment,f),E(kL.$$.fragment,f),E(SL.$$.fragment,f),E(PL.$$.fragment,f),E(oF.$$.fragment,f),E(BL.$$.fragment,f),E(mF.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(jL.$$.fragment,f),E(hF.$$.fragment,f),E(DL.$$.fragment,f),E(bF.$$.fragment,f),E(OL.$$.fragment,f),E(VL.$$.fragment,f),E(zL.$$.fragment,f),E(FF.$$.fragment,f),E(WL.$$.fragment,f),E(yF.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(JL.$$.fragment,f),E(xF.$$.fragment,f),E(YL.$$.fragment,f),E(PF.$$.fragment,f),E(KL.$$.fragment,f),E(ZL.$$.fragment,f),E(o8.$$.fragment,f),E(IF.$$.fragment,f),E(r8.$$.fragment,f),E(DF.$$.fragment,f),E(a8.$$.fragment,f),E(n8.$$.fragment,f),E(l8.$$.fragment,f),E(OF.$$.fragment,f),E(i8.$$.fragment,f),E(zF.$$.fragment,f),E(d8.$$.fragment,f),E(c8.$$.fragment,f),E(m8.$$.fragment,f),E(QF.$$.fragment,f),E(g8.$$.fragment,f),E(ZF.$$.fragment,f),E(h8.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(oT.$$.fragment,f),E(b8.$$.fragment,f),E(aT.$$.fragment,f),E(v8.$$.fragment,f),E(F8.$$.fragment,f),E(M8.$$.fragment,f),E(sT.$$.fragment,f),E(E8.$$.fragment,f),E(eM.$$.fragment,f),E(C8.$$.fragment,f),E(w8.$$.fragment,f),E(y8.$$.fragment,f),E(rM.$$.fragment,f),E(L8.$$.fragment,f),E(AM.$$.fragment,f),E(x8.$$.fragment,f),E($8.$$.fragment,f),E(S8.$$.fragment,f),E(LM.$$.fragment,f),E(R8.$$.fragment,f),E(OM.$$.fragment,f),E(P8.$$.fragment,f),E(B8.$$.fragment,f),E(N8.$$.fragment,f),E(XM.$$.fragment,f),E(q8.$$.fragment,f),E(JM.$$.fragment,f),E(j8.$$.fragment,f),E(D8.$$.fragment,f),E(O8.$$.fragment,f),E(KM.$$.fragment,f),E(V8.$$.fragment,f),E(vE.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(TE.$$.fragment,f),E(H8.$$.fragment,f),E(SE.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(PE.$$.fragment,f),E(Z8.$$.fragment,f),E(lC.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E(dC.$$.fragment,f),E(a9.$$.fragment,f),E(yC.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(xC.$$.fragment,f),E(d9.$$.fragment,f),E(SC.$$.fragment,f),E(f9.$$.fragment,f),E(m9.$$.fragment,f),E(h9.$$.fragment,f),E(PC.$$.fragment,f),E(p9.$$.fragment,f),E(IC.$$.fragment,f),E(_9.$$.fragment,f),E(u9.$$.fragment,f),E(v9.$$.fragment,f),E(qC.$$.fragment,f),E(F9.$$.fragment,f),E(n5.$$.fragment,f),E(T9.$$.fragment,f),E(M9.$$.fragment,f),E(C9.$$.fragment,f),E(l5.$$.fragment,f),E(w9.$$.fragment,f),E(L5.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(x9.$$.fragment,f),E($5.$$.fragment,f),E($9.$$.fragment,f),E(S5.$$.fragment,f),E(k9.$$.fragment,f),E(S9.$$.fragment,f),E(P9.$$.fragment,f),E(P5.$$.fragment,f),E(B9.$$.fragment,f),E(I5.$$.fragment,f),E(I9.$$.fragment,f),E(N9.$$.fragment,f),E(j9.$$.fragment,f),E(q5.$$.fragment,f),E(D9.$$.fragment,f),E(f3.$$.fragment,f),E(G9.$$.fragment,f),E(O9.$$.fragment,f),E(X9.$$.fragment,f),E(g3.$$.fragment,f),E(z9.$$.fragment,f),E(C3.$$.fragment,f),E(W9.$$.fragment,f),E(Q9.$$.fragment,f),E(U9.$$.fragment,f),E(A3.$$.fragment,f),E(J9.$$.fragment,f),E(j3.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(G3.$$.fragment,f),E(ox.$$.fragment,f),E(K3.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(e0.$$.fragment,f),E(sx.$$.fragment,f),E(c0.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(m0.$$.fragment,f),E(fx.$$.fragment,f),E(E0.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(w0.$$.fragment,f),E(_x.$$.fragment,f),E(I0.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(q0.$$.fragment,f),E(Tx.$$.fragment,f),E(Q0.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(U0.$$.fragment,f),E(Ax.$$.fragment,f),E(aw.$$.fragment,f),E(yx.$$.fragment,f),E(Lx.$$.fragment,f),E($x.$$.fragment,f),E(sw.$$.fragment,f),E(kx.$$.fragment,f),E(iw.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(cw.$$.fragment,f),E(Ix.$$.fragment,f),E(gw.$$.fragment,f),E(qx.$$.fragment,f),E(jx.$$.fragment,f),E(Gx.$$.fragment,f),E(pw.$$.fragment,f),E(Ox.$$.fragment,f),E(uw.$$.fragment,f),WDe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(q6.$$.fragment,f),C(j6.$$.fragment,f),C(Mf.$$.fragment,f),C(D6.$$.fragment,f),C(G6.$$.fragment,f),C(X6.$$.fragment,f),C(Ag.$$.fragment,f),C(z6.$$.fragment,f),C(W6.$$.fragment,f),C(Q6.$$.fragment,f),C(J6.$$.fragment,f),C(lh.$$.fragment,f),C(Y6.$$.fragment,f),C(K6.$$.fragment,f),C(Z6.$$.fragment,f),C(ry.$$.fragment,f),C(Dh.$$.fragment,f),C(Gh.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(iy.$$.fragment,f),C(lp.$$.fragment,f),C(ip.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(fy.$$.fragment,f),C(gy.$$.fragment,f),C(fp.$$.fragment,f),C(hy.$$.fragment,f),C(lu.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(by.$$.fragment,f),C(du.$$.fragment,f),C(vy.$$.fragment,f),C(Zu.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Ey.$$.fragment,f),C(o2.$$.fragment,f),C(Cy.$$.fragment,f),C(D2.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(O2.$$.fragment,f),C(xy.$$.fragment,f),C(A1.$$.fragment,f),C($y.$$.fragment,f),C(ky.$$.fragment,f),C(Ry.$$.fragment,f),C(L1.$$.fragment,f),C(Py.$$.fragment,f),C(W1.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(qy.$$.fragment,f),C(H1.$$.fragment,f),C(jy.$$.fragment,f),C(V7.$$.fragment,f),C(Dy.$$.fragment,f),C(Gy.$$.fragment,f),C(Vy.$$.fragment,f),C(z7.$$.fragment,f),C(Xy.$$.fragment,f),C(Mb.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(Hy.$$.fragment,f),C(Cb.$$.fragment,f),C(Uy.$$.fragment,f),C(kb.$$.fragment,f),C(Jy.$$.fragment,f),C(Yy.$$.fragment,f),C(Zy.$$.fragment,f),C(Rb.$$.fragment,f),C(eL.$$.fragment,f),C(p4.$$.fragment,f),C(oL.$$.fragment,f),C(rL.$$.fragment,f),C(aL.$$.fragment,f),C(u4.$$.fragment,f),C(nL.$$.fragment,f),C(nv.$$.fragment,f),C(sL.$$.fragment,f),C(lL.$$.fragment,f),C(dL.$$.fragment,f),C(lv.$$.fragment,f),C(cL.$$.fragment,f),C(cv.$$.fragment,f),C(fL.$$.fragment,f),C(mL.$$.fragment,f),C(hL.$$.fragment,f),C(mv.$$.fragment,f),C(pL.$$.fragment,f),C(Av.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(vL.$$.fragment,f),C(Lv.$$.fragment,f),C(FL.$$.fragment,f),C(kv.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(CL.$$.fragment,f),C(Rv.$$.fragment,f),C(wL.$$.fragment,f),C(Xv.$$.fragment,f),C(AL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(Wv.$$.fragment,f),C($L.$$.fragment,f),C(Zv.$$.fragment,f),C(kL.$$.fragment,f),C(SL.$$.fragment,f),C(PL.$$.fragment,f),C(oF.$$.fragment,f),C(BL.$$.fragment,f),C(mF.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(jL.$$.fragment,f),C(hF.$$.fragment,f),C(DL.$$.fragment,f),C(bF.$$.fragment,f),C(OL.$$.fragment,f),C(VL.$$.fragment,f),C(zL.$$.fragment,f),C(FF.$$.fragment,f),C(WL.$$.fragment,f),C(yF.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(JL.$$.fragment,f),C(xF.$$.fragment,f),C(YL.$$.fragment,f),C(PF.$$.fragment,f),C(KL.$$.fragment,f),C(ZL.$$.fragment,f),C(o8.$$.fragment,f),C(IF.$$.fragment,f),C(r8.$$.fragment,f),C(DF.$$.fragment,f),C(a8.$$.fragment,f),C(n8.$$.fragment,f),C(l8.$$.fragment,f),C(OF.$$.fragment,f),C(i8.$$.fragment,f),C(zF.$$.fragment,f),C(d8.$$.fragment,f),C(c8.$$.fragment,f),C(m8.$$.fragment,f),C(QF.$$.fragment,f),C(g8.$$.fragment,f),C(ZF.$$.fragment,f),C(h8.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(oT.$$.fragment,f),C(b8.$$.fragment,f),C(aT.$$.fragment,f),C(v8.$$.fragment,f),C(F8.$$.fragment,f),C(M8.$$.fragment,f),C(sT.$$.fragment,f),C(E8.$$.fragment,f),C(eM.$$.fragment,f),C(C8.$$.fragment,f),C(w8.$$.fragment,f),C(y8.$$.fragment,f),C(rM.$$.fragment,f),C(L8.$$.fragment,f),C(AM.$$.fragment,f),C(x8.$$.fragment,f),C($8.$$.fragment,f),C(S8.$$.fragment,f),C(LM.$$.fragment,f),C(R8.$$.fragment,f),C(OM.$$.fragment,f),C(P8.$$.fragment,f),C(B8.$$.fragment,f),C(N8.$$.fragment,f),C(XM.$$.fragment,f),C(q8.$$.fragment,f),C(JM.$$.fragment,f),C(j8.$$.fragment,f),C(D8.$$.fragment,f),C(O8.$$.fragment,f),C(KM.$$.fragment,f),C(V8.$$.fragment,f),C(vE.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(TE.$$.fragment,f),C(H8.$$.fragment,f),C(SE.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(PE.$$.fragment,f),C(Z8.$$.fragment,f),C(lC.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C(dC.$$.fragment,f),C(a9.$$.fragment,f),C(yC.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(xC.$$.fragment,f),C(d9.$$.fragment,f),C(SC.$$.fragment,f),C(f9.$$.fragment,f),C(m9.$$.fragment,f),C(h9.$$.fragment,f),C(PC.$$.fragment,f),C(p9.$$.fragment,f),C(IC.$$.fragment,f),C(_9.$$.fragment,f),C(u9.$$.fragment,f),C(v9.$$.fragment,f),C(qC.$$.fragment,f),C(F9.$$.fragment,f),C(n5.$$.fragment,f),C(T9.$$.fragment,f),C(M9.$$.fragment,f),C(C9.$$.fragment,f),C(l5.$$.fragment,f),C(w9.$$.fragment,f),C(L5.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(x9.$$.fragment,f),C($5.$$.fragment,f),C($9.$$.fragment,f),C(S5.$$.fragment,f),C(k9.$$.fragment,f),C(S9.$$.fragment,f),C(P9.$$.fragment,f),C(P5.$$.fragment,f),C(B9.$$.fragment,f),C(I5.$$.fragment,f),C(I9.$$.fragment,f),C(N9.$$.fragment,f),C(j9.$$.fragment,f),C(q5.$$.fragment,f),C(D9.$$.fragment,f),C(f3.$$.fragment,f),C(G9.$$.fragment,f),C(O9.$$.fragment,f),C(X9.$$.fragment,f),C(g3.$$.fragment,f),C(z9.$$.fragment,f),C(C3.$$.fragment,f),C(W9.$$.fragment,f),C(Q9.$$.fragment,f),C(U9.$$.fragment,f),C(A3.$$.fragment,f),C(J9.$$.fragment,f),C(j3.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(G3.$$.fragment,f),C(ox.$$.fragment,f),C(K3.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(e0.$$.fragment,f),C(sx.$$.fragment,f),C(c0.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(m0.$$.fragment,f),C(fx.$$.fragment,f),C(E0.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(w0.$$.fragment,f),C(_x.$$.fragment,f),C(I0.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(q0.$$.fragment,f),C(Tx.$$.fragment,f),C(Q0.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(U0.$$.fragment,f),C(Ax.$$.fragment,f),C(aw.$$.fragment,f),C(yx.$$.fragment,f),C(Lx.$$.fragment,f),C($x.$$.fragment,f),C(sw.$$.fragment,f),C(kx.$$.fragment,f),C(iw.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(cw.$$.fragment,f),C(Ix.$$.fragment,f),C(gw.$$.fragment,f),C(qx.$$.fragment,f),C(jx.$$.fragment,f),C(Gx.$$.fragment,f),C(pw.$$.fragment,f),C(Ox.$$.fragment,f),C(uw.$$.fragment,f),WDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(uf),f&&t(tt),f&&t(De),f&&t(We),f&&t(vf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(Vqe),f&&t(Fi),w(q6),f&&t(Xqe),f&&t(kn),f&&t(zqe),w(j6,f),f&&t(Wqe),f&&t(ik),f&&t(Qqe),w(Mf,f),f&&t(Hqe),f&&t(Ti),w(D6),f&&t(Uqe),f&&t(Co),w(G6),w(X6),w(Ag),w(z6),f&&t(Jqe),f&&t(Ei),w(W6),f&&t(Yqe),f&&t(wo),w(Q6),w(J6),w(lh),w(Y6),f&&t(Kqe),f&&t(Ci),w(K6),f&&t(Zqe),f&&t(Ao),w(Z6),w(ry),w(Dh),w(Gh),w(ty),f&&t(eje),f&&t(wi),w(ay),f&&t(oje),f&&t(yo),w(ny),w(iy),w(lp),w(ip),w(dy),f&&t(rje),f&&t(yi),w(cy),f&&t(tje),f&&t(Lo),w(fy),w(gy),w(fp),w(hy),w(lu),f&&t(aje),f&&t($i),w(py),f&&t(nje),f&&t(xo),w(_y),w(by),w(du),w(vy),w(Zu),f&&t(sje),f&&t(Ri),w(Fy),f&&t(lje),f&&t($o),w(Ty),w(Ey),w(o2),w(Cy),w(D2),f&&t(ije),f&&t(Ii),w(wy),f&&t(dje),f&&t(ko),w(Ay),w(Ly),w(O2),w(xy),w(A1),f&&t(cje),f&&t(ji),w($y),f&&t(fje),f&&t(So),w(ky),w(Ry),w(L1),w(Py),w(W1),f&&t(mje),f&&t(Oi),w(By),f&&t(gje),f&&t(Ro),w(Iy),w(qy),w(H1),w(jy),w(V7),f&&t(hje),f&&t(zi),w(Dy),f&&t(pje),f&&t(Po),w(Gy),w(Vy),w(z7),w(Xy),w(Mb),f&&t(_je),f&&t(Hi),w(zy),f&&t(uje),f&&t(Bo),w(Wy),w(Hy),w(Cb),w(Uy),w(kb),f&&t(bje),f&&t(Yi),w(Jy),f&&t(vje),f&&t(Io),w(Yy),w(Zy),w(Rb),w(eL),w(p4),f&&t(Fje),f&&t(ed),w(oL),f&&t(Tje),f&&t(No),w(rL),w(aL),w(u4),w(nL),w(nv),f&&t(Mje),f&&t(td),w(sL),f&&t(Eje),f&&t(qo),w(lL),w(dL),w(lv),w(cL),w(cv),f&&t(Cje),f&&t(sd),w(fL),f&&t(wje),f&&t(jo),w(mL),w(hL),w(mv),w(pL),w(Av),f&&t(Aje),f&&t(dd),w(_L),f&&t(yje),f&&t(Do),w(uL),w(vL),w(Lv),w(FL),w(kv),f&&t(Lje),f&&t(md),w(TL),f&&t(xje),f&&t(Go),w(ML),w(CL),w(Rv),w(wL),w(Xv),f&&t($je),f&&t(pd),w(AL),f&&t(kje),f&&t(Oo),w(yL),w(xL),w(Wv),w($L),w(Zv),f&&t(Sje),f&&t(bd),w(kL),f&&t(Rje),f&&t(Vo),w(SL),w(PL),w(oF),w(BL),w(mF),f&&t(Pje),f&&t(Td),w(IL),f&&t(Bje),f&&t(Xo),w(NL),w(jL),w(hF),w(DL),w(bF),f&&t(Ije),f&&t(Cd),w(OL),f&&t(Nje),f&&t(zo),w(VL),w(zL),w(FF),w(WL),w(yF),f&&t(qje),f&&t(yd),w(QL),f&&t(jje),f&&t(Wo),w(HL),w(JL),w(xF),w(YL),w(PF),f&&t(Dje),f&&t(kd),w(KL),f&&t(Gje),f&&t(Qo),w(ZL),w(o8),w(IF),w(r8),w(DF),f&&t(Oje),f&&t(Pd),w(a8),f&&t(Vje),f&&t(Ho),w(n8),w(l8),w(OF),w(i8),w(zF),f&&t(Xje),f&&t(Nd),w(d8),f&&t(zje),f&&t(Uo),w(c8),w(m8),w(QF),w(g8),w(ZF),f&&t(Wje),f&&t(Dd),w(h8),f&&t(Qje),f&&t(Jo),w(p8),w(u8),w(oT),w(b8),w(aT),f&&t(Hje),f&&t(Vd),w(v8),f&&t(Uje),f&&t(Yo),w(F8),w(M8),w(sT),w(E8),w(eM),f&&t(Jje),f&&t(Wd),w(C8),f&&t(Yje),f&&t(Ko),w(w8),w(y8),w(rM),w(L8),w(AM),f&&t(Kje),f&&t(Ud),w(x8),f&&t(Zje),f&&t(Zo),w($8),w(S8),w(LM),w(R8),w(OM),f&&t(eDe),f&&t(Kd),w(P8),f&&t(oDe),f&&t(er),w(B8),w(N8),w(XM),w(q8),w(JM),f&&t(rDe),f&&t(oc),w(j8),f&&t(tDe),f&&t(or),w(D8),w(O8),w(KM),w(V8),w(vE),f&&t(aDe),f&&t(ac),w(X8),f&&t(nDe),f&&t(rr),w(z8),w(Q8),w(TE),w(H8),w(SE),f&&t(sDe),f&&t(lc),w(U8),f&&t(lDe),f&&t(tr),w(J8),w(K8),w(PE),w(Z8),w(lC),f&&t(iDe),f&&t(cc),w(e9),f&&t(dDe),f&&t(ar),w(o9),w(t9),w(dC),w(a9),w(yC),f&&t(cDe),f&&t(gc),w(n9),f&&t(fDe),f&&t(nr),w(s9),w(i9),w(xC),w(d9),w(SC),f&&t(mDe),f&&t(_c),w(f9),f&&t(gDe),f&&t(sr),w(m9),w(h9),w(PC),w(p9),w(IC),f&&t(hDe),f&&t(vc),w(_9),f&&t(pDe),f&&t(lr),w(u9),w(v9),w(qC),w(F9),w(n5),f&&t(_De),f&&t(Mc),w(T9),f&&t(uDe),f&&t(ir),w(M9),w(C9),w(l5),w(w9),w(L5),f&&t(bDe),f&&t(wc),w(A9),f&&t(vDe),f&&t(dr),w(y9),w(x9),w($5),w($9),w(S5),f&&t(FDe),f&&t(Lc),w(k9),f&&t(TDe),f&&t(cr),w(S9),w(P9),w(P5),w(B9),w(I5),f&&t(MDe),f&&t(kc),w(I9),f&&t(EDe),f&&t(fr),w(N9),w(j9),w(q5),w(D9),w(f3),f&&t(CDe),f&&t(Pc),w(G9),f&&t(wDe),f&&t(mr),w(O9),w(X9),w(g3),w(z9),w(C3),f&&t(ADe),f&&t(Nc),w(W9),f&&t(yDe),f&&t(gr),w(Q9),w(U9),w(A3),w(J9),w(j3),f&&t(LDe),f&&t(Dc),w(Y9),f&&t(xDe),f&&t(hr),w(K9),w(ex),w(G3),w(ox),w(K3),f&&t($De),f&&t(Vc),w(rx),f&&t(kDe),f&&t(pr),w(tx),w(nx),w(e0),w(sx),w(c0),f&&t(SDe),f&&t(Wc),w(lx),f&&t(RDe),f&&t(_r),w(ix),w(cx),w(m0),w(fx),w(E0),f&&t(PDe),f&&t(Uc),w(mx),f&&t(BDe),f&&t(ur),w(gx),w(px),w(w0),w(_x),w(I0),f&&t(IDe),f&&t(Kc),w(ux),f&&t(NDe),f&&t(br),w(bx),w(Fx),w(q0),w(Tx),w(Q0),f&&t(qDe),f&&t(of),w(Mx),f&&t(jDe),f&&t(vr),w(Ex),w(wx),w(U0),w(Ax),w(aw),f&&t(DDe),f&&t(af),w(yx),f&&t(GDe),f&&t(Fr),w(Lx),w($x),w(sw),w(kx),w(iw),f&&t(ODe),f&&t(lf),w(Sx),f&&t(VDe),f&&t(Tr),w(Rx),w(Bx),w(cw),w(Ix),w(gw),f&&t(XDe),f&&t(ff),w(qx),f&&t(zDe),f&&t(Mr),w(jx),w(Gx),w(pw),w(Ox),w(uw)}}}const APt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function yPt(L){return ySt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class PPt extends ESt{constructor(g){super();CSt(this,g,yPt,wPt,wSt,{})}}export{PPt as default,APt as metadata};
