import{S as gqt,i as hqt,s as pqt,e as a,k as l,w as F,t as o,M as uqt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as _qt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as gJr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function bqt(y){let g,v,p,m,u,d,h,Eo,Ti,yf,nt,Mi,Ei,pL,xf,Oe,We,Ci,Sn,uL,Rn,Pn,_L,wi,Bn,bL,Ai,$f,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ti=a("code"),yf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Mi=a("code"),Ei=o('"new-model"'),pL=o(")."),xf=l(),Oe=a("p"),We=o("Likewise, if your "),Ci=a("code"),Sn=o("NewModel"),uL=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),_L=o(`, make sure its
`),wi=a("code"),Bn=o("config_class"),bL=o(` attribute is set to the same class you use when registering the model (here
`),Ai=a("code"),$f=o("NewModelConfig"),xa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var zk=s(p);m=r(zk,"NewModelConfig"),zk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Li=s(d);h=r(Li,"PretrainedConfig"),Li.forEach(t),Eo=r(Ae,`, make sure its
`),Ti=n(Ae,"CODE",{});var Wk=s(Ti);yf=r(Wk,"model_type"),Wk.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Mi=n(Ae,"CODE",{});var Qk=s(Mi);Ei=r(Qk,'"new-model"'),Qk.forEach(t),pL=r(Ae,")."),Ae.forEach(t),xf=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ci=n(Co,"CODE",{});var $a=s(Ci);Sn=r($a,"NewModel"),$a.forEach(t),uL=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Hk=s(Rn);Pn=r(Hk,"PreTrainedModel"),Hk.forEach(t),_L=r(Co,`, make sure its
`),wi=n(Co,"CODE",{});var kf=s(wi);Bn=r(kf,"config_class"),kf.forEach(t),bL=r(Co,` attribute is set to the same class you use when registering the model (here
`),Ai=n(Co,"CODE",{});var Uk=s(Ai);$f=r(Uk,"NewModelConfig"),Uk.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Ti),e(Ti,yf),e(g,nt),e(g,Mi),e(Mi,Ei),e(g,pL),b(Qe,xf,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ci),e(Ci,Sn),e(Oe,uL),e(Oe,Rn),e(Rn,Pn),e(Oe,_L),e(Oe,wi),e(wi,Bn),e(Oe,bL),e(Oe,Ai),e(Ai,$f),e(Oe,xa)},d(Qe){Qe&&t(g),Qe&&t(xf),Qe&&t(Oe)}}}function vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Mqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eqt(y){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function Cqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $qt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Uqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zqt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ejt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ajt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ljt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $jt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ijt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Njt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Djt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ojt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ujt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Yjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zjt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uDt(y){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Dt(y){let g,v,p,m,u,d,h,Eo,Ti,yf,nt,Mi,Ei,pL,xf,Oe,We,Ci,Sn,uL,Rn,Pn,_L,wi,Bn,bL,Ai,$f,xa,Qe,Ae,zk,Li,Wk,Qk,Co,$a,Hk,kf,Uk,gze,KDe,yi,Sf,Xre,vL,hze,zre,pze,ZDe,In,uze,Wre,_ze,bze,Qre,vze,Fze,eGe,FL,oGe,Jk,Tze,rGe,Rf,tGe,xi,Pf,Hre,TL,Mze,Ure,Eze,aGe,wo,ML,Cze,EL,wze,Yk,Aze,Lze,yze,CL,xze,Jre,$ze,kze,Sze,wr,wL,Rze,Yre,Pze,Bze,$i,Ize,Kre,Nze,qze,Zre,jze,Dze,Gze,A,Bf,ete,Oze,Vze,Kk,Xze,zze,Wze,If,ote,Qze,Hze,Zk,Uze,Jze,Yze,Nf,rte,Kze,Zze,eS,eWe,oWe,rWe,qf,tte,tWe,aWe,oS,nWe,sWe,lWe,jf,ate,iWe,dWe,rS,cWe,fWe,mWe,Df,nte,gWe,hWe,tS,pWe,uWe,_We,Gf,ste,bWe,vWe,aS,FWe,TWe,MWe,Of,lte,EWe,CWe,nS,wWe,AWe,LWe,Vf,ite,yWe,xWe,sS,$We,kWe,SWe,Xf,dte,RWe,PWe,lS,BWe,IWe,NWe,zf,cte,qWe,jWe,iS,DWe,GWe,OWe,Wf,fte,VWe,XWe,dS,zWe,WWe,QWe,Qf,mte,HWe,UWe,cS,JWe,YWe,KWe,Hf,gte,ZWe,eQe,fS,oQe,rQe,tQe,Uf,hte,aQe,nQe,mS,sQe,lQe,iQe,Jf,pte,dQe,cQe,gS,fQe,mQe,gQe,Yf,ute,hQe,pQe,hS,uQe,_Qe,bQe,Kf,_te,vQe,FQe,pS,TQe,MQe,EQe,Zf,bte,CQe,wQe,uS,AQe,LQe,yQe,em,vte,xQe,$Qe,_S,kQe,SQe,RQe,om,Fte,PQe,BQe,bS,IQe,NQe,qQe,rm,Tte,jQe,DQe,vS,GQe,OQe,VQe,tm,Mte,XQe,zQe,FS,WQe,QQe,HQe,am,Ete,UQe,JQe,TS,YQe,KQe,ZQe,nm,Cte,eHe,oHe,MS,rHe,tHe,aHe,sm,wte,nHe,sHe,ES,lHe,iHe,dHe,lm,Ate,cHe,fHe,CS,mHe,gHe,hHe,im,Lte,pHe,uHe,wS,_He,bHe,vHe,dm,yte,FHe,THe,AS,MHe,EHe,CHe,cm,xte,wHe,AHe,LS,LHe,yHe,xHe,fm,$te,$He,kHe,yS,SHe,RHe,PHe,mm,kte,BHe,IHe,xS,NHe,qHe,jHe,gm,Ste,DHe,GHe,$S,OHe,VHe,XHe,hm,Rte,zHe,WHe,kS,QHe,HHe,UHe,pm,Pte,JHe,YHe,SS,KHe,ZHe,eUe,um,Bte,oUe,rUe,RS,tUe,aUe,nUe,_m,Ite,sUe,lUe,PS,iUe,dUe,cUe,bm,Nte,fUe,mUe,BS,gUe,hUe,pUe,vm,qte,uUe,_Ue,IS,bUe,vUe,FUe,Fm,jte,TUe,MUe,NS,EUe,CUe,wUe,Tm,Dte,AUe,LUe,qS,yUe,xUe,$Ue,Mm,Gte,kUe,SUe,jS,RUe,PUe,BUe,Em,Ote,IUe,NUe,DS,qUe,jUe,DUe,Cm,Vte,GUe,OUe,GS,VUe,XUe,zUe,wm,Xte,WUe,QUe,OS,HUe,UUe,JUe,Am,zte,YUe,KUe,VS,ZUe,eJe,oJe,Lm,Wte,rJe,tJe,XS,aJe,nJe,sJe,ym,Qte,lJe,iJe,zS,dJe,cJe,fJe,xm,Hte,mJe,gJe,WS,hJe,pJe,uJe,$m,Ute,_Je,bJe,QS,vJe,FJe,TJe,km,Jte,MJe,EJe,HS,CJe,wJe,AJe,Sm,Yte,LJe,yJe,US,xJe,$Je,kJe,Rm,Kte,SJe,RJe,JS,PJe,BJe,IJe,Pm,Zte,NJe,qJe,YS,jJe,DJe,GJe,Bm,eae,OJe,VJe,KS,XJe,zJe,WJe,Im,oae,QJe,HJe,ZS,UJe,JJe,YJe,Nm,rae,KJe,ZJe,eR,eYe,oYe,rYe,qm,tae,tYe,aYe,oR,nYe,sYe,lYe,jm,aae,iYe,dYe,rR,cYe,fYe,mYe,Dm,nae,gYe,hYe,tR,pYe,uYe,_Ye,Gm,sae,bYe,vYe,aR,FYe,TYe,MYe,Om,lae,EYe,CYe,nR,wYe,AYe,LYe,Vm,iae,yYe,xYe,sR,$Ye,kYe,SYe,Xm,dae,RYe,PYe,lR,BYe,IYe,NYe,zm,cae,qYe,jYe,iR,DYe,GYe,OYe,Wm,fae,VYe,XYe,dR,zYe,WYe,QYe,Qm,mae,HYe,UYe,cR,JYe,YYe,KYe,Hm,gae,ZYe,eKe,fR,oKe,rKe,tKe,Um,hae,aKe,nKe,mR,sKe,lKe,iKe,Jm,pae,dKe,cKe,gR,fKe,mKe,gKe,Ym,uae,hKe,pKe,hR,uKe,_Ke,bKe,Km,_ae,vKe,FKe,pR,TKe,MKe,EKe,Zm,bae,CKe,wKe,uR,AKe,LKe,yKe,eg,vae,xKe,$Ke,_R,kKe,SKe,RKe,og,Fae,PKe,BKe,bR,IKe,NKe,qKe,rg,Tae,jKe,DKe,vR,GKe,OKe,VKe,tg,Mae,XKe,zKe,FR,WKe,QKe,HKe,ag,Eae,UKe,JKe,TR,YKe,KKe,ZKe,ng,Cae,eZe,oZe,MR,rZe,tZe,aZe,sg,wae,nZe,sZe,ER,lZe,iZe,dZe,lg,Aae,cZe,fZe,CR,mZe,gZe,hZe,ig,Lae,pZe,uZe,wR,_Ze,bZe,vZe,dg,yae,FZe,TZe,AR,MZe,EZe,CZe,cg,xae,wZe,AZe,LR,LZe,yZe,xZe,fg,$ae,$Ze,kZe,yR,SZe,RZe,PZe,mg,kae,BZe,IZe,xR,NZe,qZe,jZe,gg,Sae,DZe,GZe,$R,OZe,VZe,XZe,hg,Rae,zZe,WZe,kR,QZe,HZe,UZe,pg,Pae,JZe,YZe,SR,KZe,ZZe,eeo,ug,Bae,oeo,reo,RR,teo,aeo,neo,_g,Iae,seo,leo,PR,ieo,deo,ceo,bg,Nae,feo,meo,BR,geo,heo,peo,vg,qae,ueo,_eo,IR,beo,veo,Feo,Fg,jae,Teo,Meo,NR,Eeo,Ceo,weo,Tg,Dae,Aeo,Leo,qR,yeo,xeo,$eo,Mg,Gae,keo,Seo,jR,Reo,Peo,Beo,Eg,Oae,Ieo,Neo,DR,qeo,jeo,Deo,Cg,Vae,Geo,Oeo,GR,Veo,Xeo,zeo,wg,Xae,Weo,Qeo,OR,Heo,Ueo,Jeo,Ag,zae,Yeo,Keo,VR,Zeo,eoo,ooo,Lg,Wae,roo,too,XR,aoo,noo,soo,yg,Qae,loo,ioo,zR,doo,coo,foo,xg,Hae,moo,goo,WR,hoo,poo,uoo,$g,Uae,_oo,boo,QR,voo,Foo,Too,kg,Jae,Moo,Eoo,HR,Coo,woo,Aoo,Sg,Yae,Loo,yoo,UR,xoo,$oo,koo,Rg,Kae,Soo,Roo,JR,Poo,Boo,Ioo,Pg,Zae,Noo,qoo,YR,joo,Doo,Goo,Bg,ene,Ooo,Voo,KR,Xoo,zoo,Woo,Ig,one,Qoo,Hoo,ZR,Uoo,Joo,Yoo,Ng,rne,Koo,Zoo,eP,ero,oro,rro,qg,tne,tro,aro,oP,nro,sro,lro,jg,ane,iro,dro,rP,cro,fro,mro,Dg,gro,Gg,AL,hro,nne,pro,nGe,ki,Og,sne,LL,uro,lne,_ro,sGe,Ao,yL,bro,xL,vro,tP,Fro,Tro,Mro,$L,Ero,ine,Cro,wro,Aro,Ar,kL,Lro,dne,yro,xro,ka,$ro,cne,kro,Sro,fne,Rro,Pro,mne,Bro,Iro,Nro,k,Nn,gne,qro,jro,aP,Dro,Gro,nP,Oro,Vro,Xro,qn,hne,zro,Wro,sP,Qro,Hro,lP,Uro,Jro,Yro,jn,pne,Kro,Zro,iP,eto,oto,dP,rto,tto,ato,Vg,une,nto,sto,cP,lto,ito,dto,Dn,_ne,cto,fto,fP,mto,gto,mP,hto,pto,uto,Xg,bne,_to,bto,gP,vto,Fto,Tto,zg,vne,Mto,Eto,hP,Cto,wto,Ato,Wg,Fne,Lto,yto,pP,xto,$to,kto,Gn,Tne,Sto,Rto,uP,Pto,Bto,_P,Ito,Nto,qto,On,Mne,jto,Dto,bP,Gto,Oto,vP,Vto,Xto,zto,Vn,Ene,Wto,Qto,FP,Hto,Uto,TP,Jto,Yto,Kto,Qg,Cne,Zto,eao,MP,oao,rao,tao,Hg,wne,aao,nao,EP,sao,lao,iao,Ug,Ane,dao,cao,CP,fao,mao,gao,Xn,Lne,hao,pao,wP,uao,_ao,AP,bao,vao,Fao,Jg,yne,Tao,Mao,LP,Eao,Cao,wao,zn,xne,Aao,Lao,yP,yao,xao,xP,$ao,kao,Sao,Wn,$ne,Rao,Pao,$P,Bao,Iao,kP,Nao,qao,jao,Qn,kne,Dao,Gao,SP,Oao,Vao,RP,Xao,zao,Wao,Yg,Sne,Qao,Hao,PP,Uao,Jao,Yao,Hn,Rne,Kao,Zao,BP,eno,ono,IP,rno,tno,ano,Un,Pne,nno,sno,NP,lno,ino,qP,dno,cno,fno,Jn,Bne,mno,gno,jP,hno,pno,DP,uno,_no,bno,Yn,Ine,vno,Fno,GP,Tno,Mno,OP,Eno,Cno,wno,Kn,Nne,Ano,Lno,VP,yno,xno,XP,$no,kno,Sno,Zn,qne,Rno,Pno,zP,Bno,Ino,WP,Nno,qno,jno,Kg,jne,Dno,Gno,QP,Ono,Vno,Xno,es,Dne,zno,Wno,HP,Qno,Hno,UP,Uno,Jno,Yno,Zg,Gne,Kno,Zno,JP,eso,oso,rso,os,One,tso,aso,YP,nso,sso,KP,lso,iso,dso,rs,Vne,cso,fso,ZP,mso,gso,eB,hso,pso,uso,ts,Xne,_so,bso,oB,vso,Fso,rB,Tso,Mso,Eso,eh,zne,Cso,wso,tB,Aso,Lso,yso,as,Wne,xso,$so,aB,kso,Sso,nB,Rso,Pso,Bso,ns,Qne,Iso,Nso,sB,qso,jso,lB,Dso,Gso,Oso,oh,Hne,Vso,Xso,iB,zso,Wso,Qso,ss,Une,Hso,Uso,dB,Jso,Yso,cB,Kso,Zso,elo,ls,Jne,olo,rlo,fB,tlo,alo,mB,nlo,slo,llo,is,Yne,ilo,dlo,gB,clo,flo,hB,mlo,glo,hlo,ds,Kne,plo,ulo,pB,_lo,blo,uB,vlo,Flo,Tlo,cs,Zne,Mlo,Elo,_B,Clo,wlo,bB,Alo,Llo,ylo,fs,ese,xlo,$lo,vB,klo,Slo,FB,Rlo,Plo,Blo,ms,ose,Ilo,Nlo,TB,qlo,jlo,MB,Dlo,Glo,Olo,gs,rse,Vlo,Xlo,EB,zlo,Wlo,CB,Qlo,Hlo,Ulo,rh,tse,Jlo,Ylo,wB,Klo,Zlo,eio,hs,ase,oio,rio,AB,tio,aio,LB,nio,sio,lio,th,nse,iio,dio,yB,cio,fio,mio,ah,sse,gio,hio,xB,pio,uio,_io,ps,lse,bio,vio,$B,Fio,Tio,kB,Mio,Eio,Cio,us,ise,wio,Aio,SB,Lio,yio,RB,xio,$io,kio,_s,dse,Sio,Rio,PB,Pio,Bio,BB,Iio,Nio,qio,nh,cse,jio,Dio,IB,Gio,Oio,Vio,bs,fse,Xio,zio,NB,Wio,Qio,qB,Hio,Uio,Jio,vs,mse,Yio,Kio,jB,Zio,edo,DB,odo,rdo,tdo,Fs,gse,ado,ndo,GB,sdo,ldo,OB,ido,ddo,cdo,Ts,hse,fdo,mdo,VB,gdo,hdo,XB,pdo,udo,_do,Ms,pse,bdo,vdo,zB,Fdo,Tdo,WB,Mdo,Edo,Cdo,sh,use,wdo,Ado,QB,Ldo,ydo,xdo,Es,_se,$do,kdo,HB,Sdo,Rdo,UB,Pdo,Bdo,Ido,lh,bse,Ndo,qdo,JB,jdo,Ddo,Gdo,ih,vse,Odo,Vdo,YB,Xdo,zdo,Wdo,dh,Fse,Qdo,Hdo,KB,Udo,Jdo,Ydo,ch,Tse,Kdo,Zdo,ZB,eco,oco,rco,Cs,Mse,tco,aco,eI,nco,sco,oI,lco,ico,dco,fh,Ese,cco,fco,rI,mco,gco,hco,ws,Cse,pco,uco,tI,_co,bco,aI,vco,Fco,Tco,As,wse,Mco,Eco,nI,Cco,wco,sI,Aco,Lco,yco,Ls,Ase,xco,$co,lI,kco,Sco,iI,Rco,Pco,Bco,ys,Lse,Ico,Nco,dI,qco,jco,cI,Dco,Gco,Oco,xs,yse,Vco,Xco,fI,zco,Wco,mI,Qco,Hco,Uco,$s,xse,Jco,Yco,gI,Kco,Zco,hI,efo,ofo,rfo,mh,$se,tfo,afo,pI,nfo,sfo,lfo,gh,kse,ifo,dfo,uI,cfo,ffo,mfo,ks,Sse,gfo,hfo,_I,pfo,ufo,bI,_fo,bfo,vfo,Ss,Rse,Ffo,Tfo,vI,Mfo,Efo,FI,Cfo,wfo,Afo,Rs,Pse,Lfo,yfo,TI,xfo,$fo,MI,kfo,Sfo,Rfo,hh,Bse,Pfo,Bfo,EI,Ifo,Nfo,qfo,ph,Ise,jfo,Dfo,CI,Gfo,Ofo,Vfo,uh,Nse,Xfo,zfo,wI,Wfo,Qfo,Hfo,Ps,qse,Ufo,Jfo,AI,Yfo,Kfo,LI,Zfo,emo,omo,Bs,jse,rmo,tmo,yI,amo,nmo,xI,smo,lmo,imo,_h,Dse,dmo,cmo,$I,fmo,mmo,gmo,bh,Gse,hmo,pmo,kI,umo,_mo,bmo,vh,Ose,vmo,Fmo,SI,Tmo,Mmo,Emo,Is,Vse,Cmo,wmo,RI,Amo,Lmo,PI,ymo,xmo,$mo,Fh,Xse,kmo,Smo,BI,Rmo,Pmo,Bmo,Th,zse,Imo,Nmo,II,qmo,jmo,Dmo,Ns,Wse,Gmo,Omo,NI,Vmo,Xmo,qI,zmo,Wmo,Qmo,qs,Qse,Hmo,Umo,jI,Jmo,Ymo,DI,Kmo,Zmo,ego,js,Hse,ogo,rgo,GI,tgo,ago,OI,ngo,sgo,lgo,Ds,Use,igo,dgo,VI,cgo,fgo,XI,mgo,ggo,hgo,Mh,pgo,Eh,SL,ugo,Jse,_go,lGe,Si,Ch,Yse,RL,bgo,Kse,vgo,iGe,Lo,PL,Fgo,BL,Tgo,zI,Mgo,Ego,Cgo,IL,wgo,Zse,Ago,Lgo,ygo,He,NL,xgo,ele,$go,kgo,Sa,Sgo,ole,Rgo,Pgo,rle,Bgo,Igo,tle,Ngo,qgo,jgo,Y,wh,ale,Dgo,Ggo,WI,Ogo,Vgo,Xgo,Ah,nle,zgo,Wgo,QI,Qgo,Hgo,Ugo,Lh,sle,Jgo,Ygo,HI,Kgo,Zgo,eho,yh,lle,oho,rho,UI,tho,aho,nho,xh,ile,sho,lho,JI,iho,dho,cho,$h,dle,fho,mho,YI,gho,hho,pho,kh,cle,uho,_ho,KI,bho,vho,Fho,Sh,fle,Tho,Mho,ZI,Eho,Cho,who,Rh,mle,Aho,Lho,eN,yho,xho,$ho,Ph,gle,kho,Sho,oN,Rho,Pho,Bho,Bh,hle,Iho,Nho,rN,qho,jho,Dho,Ih,ple,Gho,Oho,tN,Vho,Xho,zho,Nh,ule,Who,Qho,aN,Hho,Uho,Jho,qh,_le,Yho,Kho,nN,Zho,epo,opo,jh,ble,rpo,tpo,sN,apo,npo,spo,Dh,vle,lpo,ipo,lN,dpo,cpo,fpo,Gh,Fle,mpo,gpo,iN,hpo,ppo,upo,Oh,Tle,_po,bpo,dN,vpo,Fpo,Tpo,Vh,Mle,Mpo,Epo,cN,Cpo,wpo,Apo,Xh,Ele,Lpo,ypo,fN,xpo,$po,kpo,zh,Cle,Spo,Rpo,mN,Ppo,Bpo,Ipo,Wh,wle,Npo,qpo,gN,jpo,Dpo,Gpo,Qh,Ale,Opo,Vpo,hN,Xpo,zpo,Wpo,Hh,Lle,Qpo,Hpo,pN,Upo,Jpo,Ypo,Uh,yle,Kpo,Zpo,uN,euo,ouo,ruo,Jh,xle,tuo,auo,_N,nuo,suo,luo,Yh,$le,iuo,duo,bN,cuo,fuo,muo,Kh,kle,guo,huo,vN,puo,uuo,_uo,Zh,Sle,buo,vuo,FN,Fuo,Tuo,Muo,ep,Rle,Euo,Cuo,TN,wuo,Auo,Luo,op,Ple,yuo,xuo,MN,$uo,kuo,Suo,rp,Ble,Ruo,Puo,EN,Buo,Iuo,Nuo,tp,quo,ap,juo,np,qL,Duo,Ile,Guo,dGe,Ri,sp,Nle,jL,Ouo,qle,Vuo,cGe,yo,DL,Xuo,GL,zuo,CN,Wuo,Quo,Huo,OL,Uuo,jle,Juo,Yuo,Kuo,Ue,VL,Zuo,Dle,e_o,o_o,Pi,r_o,Gle,t_o,a_o,Ole,n_o,s_o,l_o,he,lp,Vle,i_o,d_o,wN,c_o,f_o,m_o,ip,Xle,g_o,h_o,zle,p_o,u_o,__o,dp,Wle,b_o,v_o,AN,F_o,T_o,M_o,cp,Qle,E_o,C_o,LN,w_o,A_o,L_o,fp,Hle,y_o,x_o,yN,$_o,k_o,S_o,mp,Ule,R_o,P_o,xN,B_o,I_o,N_o,gp,Jle,q_o,j_o,$N,D_o,G_o,O_o,hp,Yle,V_o,X_o,kN,z_o,W_o,Q_o,pp,Kle,H_o,U_o,SN,J_o,Y_o,K_o,up,Zle,Z_o,e2o,RN,o2o,r2o,t2o,_p,eie,a2o,n2o,PN,s2o,l2o,i2o,bp,oie,d2o,c2o,BN,f2o,m2o,g2o,vp,rie,h2o,p2o,IN,u2o,_2o,b2o,Fp,tie,v2o,F2o,NN,T2o,M2o,E2o,Tp,aie,C2o,w2o,qN,A2o,L2o,y2o,Mp,nie,x2o,$2o,jN,k2o,S2o,R2o,Ep,sie,P2o,B2o,DN,I2o,N2o,q2o,Cp,j2o,wp,D2o,Ap,XL,G2o,lie,O2o,fGe,Bi,Lp,iie,zL,V2o,die,X2o,mGe,xo,WL,z2o,Ii,W2o,GN,Q2o,H2o,ON,U2o,J2o,Y2o,QL,K2o,cie,Z2o,e1o,o1o,st,HL,r1o,fie,t1o,a1o,Ni,n1o,mie,s1o,l1o,VN,i1o,d1o,c1o,yp,f1o,Je,UL,m1o,gie,g1o,h1o,Ra,p1o,hie,u1o,_1o,pie,b1o,v1o,uie,F1o,T1o,M1o,x,xp,_ie,E1o,C1o,XN,w1o,A1o,L1o,$p,bie,y1o,x1o,zN,$1o,k1o,S1o,kp,vie,R1o,P1o,WN,B1o,I1o,N1o,Sp,Fie,q1o,j1o,QN,D1o,G1o,O1o,Rp,Tie,V1o,X1o,HN,z1o,W1o,Q1o,Pp,Mie,H1o,U1o,UN,J1o,Y1o,K1o,Bp,Eie,Z1o,e7o,JN,o7o,r7o,t7o,Ip,Cie,a7o,n7o,YN,s7o,l7o,i7o,Np,wie,d7o,c7o,KN,f7o,m7o,g7o,qp,Aie,h7o,p7o,ZN,u7o,_7o,b7o,jp,Lie,v7o,F7o,eq,T7o,M7o,E7o,Dp,yie,C7o,w7o,oq,A7o,L7o,y7o,Gp,xie,x7o,$7o,rq,k7o,S7o,R7o,Op,$ie,P7o,B7o,tq,I7o,N7o,q7o,Vp,kie,j7o,D7o,aq,G7o,O7o,V7o,Xp,Sie,X7o,z7o,nq,W7o,Q7o,H7o,zp,Rie,U7o,J7o,sq,Y7o,K7o,Z7o,Wp,Pie,ebo,obo,lq,rbo,tbo,abo,Qp,Bie,nbo,sbo,iq,lbo,ibo,dbo,Hp,Iie,cbo,fbo,dq,mbo,gbo,hbo,Up,Nie,pbo,ubo,cq,_bo,bbo,vbo,Jp,qie,Fbo,Tbo,fq,Mbo,Ebo,Cbo,Yp,jie,wbo,Abo,mq,Lbo,ybo,xbo,Kp,Die,$bo,kbo,gq,Sbo,Rbo,Pbo,Zp,Gie,Bbo,Ibo,hq,Nbo,qbo,jbo,eu,Oie,Dbo,Gbo,pq,Obo,Vbo,Xbo,ou,Vie,zbo,Wbo,uq,Qbo,Hbo,Ubo,ru,Xie,Jbo,Ybo,_q,Kbo,Zbo,e4o,tu,zie,o4o,r4o,bq,t4o,a4o,n4o,au,Wie,s4o,l4o,vq,i4o,d4o,c4o,nu,Qie,f4o,m4o,Fq,g4o,h4o,p4o,su,Hie,u4o,_4o,Tq,b4o,v4o,F4o,lu,Uie,T4o,M4o,Mq,E4o,C4o,w4o,Gs,Jie,A4o,L4o,Eq,y4o,x4o,Cq,$4o,k4o,S4o,iu,Yie,R4o,P4o,wq,B4o,I4o,N4o,du,Kie,q4o,j4o,Aq,D4o,G4o,O4o,cu,Zie,V4o,X4o,Lq,z4o,W4o,Q4o,fu,ede,H4o,U4o,yq,J4o,Y4o,K4o,mu,ode,Z4o,evo,xq,ovo,rvo,tvo,gu,rde,avo,nvo,$q,svo,lvo,ivo,hu,tde,dvo,cvo,kq,fvo,mvo,gvo,pu,ade,hvo,pvo,Sq,uvo,_vo,bvo,uu,nde,vvo,Fvo,Rq,Tvo,Mvo,Evo,_u,sde,Cvo,wvo,Pq,Avo,Lvo,yvo,bu,lde,xvo,$vo,Bq,kvo,Svo,Rvo,vu,ide,Pvo,Bvo,Iq,Ivo,Nvo,qvo,Fu,dde,jvo,Dvo,Nq,Gvo,Ovo,Vvo,Tu,cde,Xvo,zvo,qq,Wvo,Qvo,Hvo,Mu,fde,Uvo,Jvo,jq,Yvo,Kvo,Zvo,Eu,mde,eFo,oFo,Dq,rFo,tFo,aFo,Cu,gde,nFo,sFo,Gq,lFo,iFo,dFo,wu,hde,cFo,fFo,Oq,mFo,gFo,hFo,Au,pde,pFo,uFo,Vq,_Fo,bFo,vFo,Lu,ude,FFo,TFo,Xq,MFo,EFo,CFo,yu,_de,wFo,AFo,zq,LFo,yFo,xFo,xu,bde,$Fo,kFo,Wq,SFo,RFo,PFo,$u,vde,BFo,IFo,Qq,NFo,qFo,jFo,ku,Fde,DFo,GFo,Hq,OFo,VFo,XFo,Su,Tde,zFo,WFo,Uq,QFo,HFo,UFo,Ru,Mde,JFo,YFo,Jq,KFo,ZFo,eTo,Pu,Ede,oTo,rTo,Yq,tTo,aTo,nTo,Bu,Cde,sTo,lTo,Kq,iTo,dTo,cTo,Iu,wde,fTo,mTo,Zq,gTo,hTo,pTo,Nu,Ade,uTo,_To,ej,bTo,vTo,FTo,qu,Lde,TTo,MTo,oj,ETo,CTo,wTo,ju,yde,ATo,LTo,rj,yTo,xTo,$To,Du,xde,kTo,STo,tj,RTo,PTo,BTo,Gu,$de,ITo,NTo,aj,qTo,jTo,DTo,Ou,kde,GTo,OTo,nj,VTo,XTo,zTo,Vu,Sde,WTo,QTo,sj,HTo,UTo,JTo,Xu,Rde,YTo,KTo,lj,ZTo,eMo,oMo,zu,Pde,rMo,tMo,ij,aMo,nMo,sMo,Wu,Bde,lMo,iMo,dj,dMo,cMo,fMo,Qu,Ide,mMo,gMo,cj,hMo,pMo,uMo,Hu,Nde,_Mo,bMo,fj,vMo,FMo,TMo,Uu,qde,MMo,EMo,mj,CMo,wMo,AMo,Ju,jde,LMo,yMo,gj,xMo,$Mo,kMo,Yu,Dde,SMo,RMo,hj,PMo,BMo,IMo,Ku,Gde,NMo,qMo,pj,jMo,DMo,GMo,Zu,Ode,OMo,VMo,uj,XMo,zMo,WMo,e_,Vde,QMo,HMo,_j,UMo,JMo,YMo,o_,Xde,KMo,ZMo,bj,eEo,oEo,rEo,r_,zde,tEo,aEo,vj,nEo,sEo,lEo,t_,Wde,iEo,dEo,Fj,cEo,fEo,mEo,a_,Qde,gEo,hEo,Tj,pEo,uEo,_Eo,n_,Hde,bEo,vEo,Mj,FEo,TEo,MEo,s_,Ude,EEo,CEo,Ej,wEo,AEo,LEo,l_,Jde,yEo,xEo,Cj,$Eo,kEo,SEo,i_,Yde,REo,PEo,wj,BEo,IEo,NEo,d_,Kde,qEo,jEo,Aj,DEo,GEo,OEo,c_,Zde,VEo,XEo,Lj,zEo,WEo,QEo,f_,ece,HEo,UEo,yj,JEo,YEo,KEo,m_,oce,ZEo,eCo,xj,oCo,rCo,tCo,g_,rce,aCo,nCo,$j,sCo,lCo,iCo,h_,tce,dCo,cCo,kj,fCo,mCo,gCo,p_,ace,hCo,pCo,Sj,uCo,_Co,bCo,u_,nce,vCo,FCo,Rj,TCo,MCo,ECo,__,sce,CCo,wCo,Pj,ACo,LCo,yCo,b_,lce,xCo,$Co,Bj,kCo,SCo,RCo,v_,ice,PCo,BCo,Ij,ICo,NCo,qCo,F_,dce,jCo,DCo,Nj,GCo,OCo,VCo,T_,cce,XCo,zCo,qj,WCo,QCo,HCo,M_,fce,UCo,JCo,jj,YCo,KCo,ZCo,E_,mce,e5o,o5o,Dj,r5o,t5o,a5o,C_,gce,n5o,s5o,Gj,l5o,i5o,d5o,w_,hce,c5o,f5o,Oj,m5o,g5o,h5o,A_,p5o,pce,u5o,_5o,uce,b5o,v5o,L_,gGe,qi,y_,_ce,JL,F5o,bce,T5o,hGe,$o,YL,M5o,ji,E5o,Vj,C5o,w5o,Xj,A5o,L5o,y5o,KL,x5o,vce,$5o,k5o,S5o,lt,ZL,R5o,Fce,P5o,B5o,Di,I5o,Tce,N5o,q5o,zj,j5o,D5o,G5o,x_,O5o,Ye,ey,V5o,Mce,X5o,z5o,Pa,W5o,Ece,Q5o,H5o,Cce,U5o,J5o,wce,Y5o,K5o,Z5o,G,$_,Ace,e3o,o3o,Wj,r3o,t3o,a3o,k_,Lce,n3o,s3o,Qj,l3o,i3o,d3o,S_,yce,c3o,f3o,Hj,m3o,g3o,h3o,R_,xce,p3o,u3o,Uj,_3o,b3o,v3o,P_,$ce,F3o,T3o,Jj,M3o,E3o,C3o,B_,kce,w3o,A3o,Yj,L3o,y3o,x3o,I_,Sce,$3o,k3o,Kj,S3o,R3o,P3o,N_,Rce,B3o,I3o,Zj,N3o,q3o,j3o,q_,Pce,D3o,G3o,eD,O3o,V3o,X3o,j_,Bce,z3o,W3o,oD,Q3o,H3o,U3o,D_,Ice,J3o,Y3o,rD,K3o,Z3o,e0o,G_,Nce,o0o,r0o,tD,t0o,a0o,n0o,O_,qce,s0o,l0o,aD,i0o,d0o,c0o,V_,jce,f0o,m0o,nD,g0o,h0o,p0o,X_,Dce,u0o,_0o,sD,b0o,v0o,F0o,z_,Gce,T0o,M0o,lD,E0o,C0o,w0o,W_,Oce,A0o,L0o,iD,y0o,x0o,$0o,Q_,Vce,k0o,S0o,dD,R0o,P0o,B0o,H_,Xce,I0o,N0o,cD,q0o,j0o,D0o,U_,zce,G0o,O0o,fD,V0o,X0o,z0o,J_,Wce,W0o,Q0o,mD,H0o,U0o,J0o,Y_,Qce,Y0o,K0o,gD,Z0o,ewo,owo,K_,Hce,rwo,two,hD,awo,nwo,swo,Z_,Uce,lwo,iwo,pD,dwo,cwo,fwo,e2,Jce,mwo,gwo,uD,hwo,pwo,uwo,o2,Yce,_wo,bwo,_D,vwo,Fwo,Two,r2,Kce,Mwo,Ewo,bD,Cwo,wwo,Awo,t2,Zce,Lwo,ywo,vD,xwo,$wo,kwo,a2,efe,Swo,Rwo,FD,Pwo,Bwo,Iwo,n2,ofe,Nwo,qwo,TD,jwo,Dwo,Gwo,s2,rfe,Owo,Vwo,MD,Xwo,zwo,Wwo,l2,tfe,Qwo,Hwo,ED,Uwo,Jwo,Ywo,i2,afe,Kwo,Zwo,CD,eAo,oAo,rAo,d2,nfe,tAo,aAo,wD,nAo,sAo,lAo,c2,sfe,iAo,dAo,AD,cAo,fAo,mAo,f2,lfe,gAo,hAo,LD,pAo,uAo,_Ao,m2,ife,bAo,vAo,yD,FAo,TAo,MAo,g2,dfe,EAo,CAo,xD,wAo,AAo,LAo,h2,cfe,yAo,xAo,$D,$Ao,kAo,SAo,p2,ffe,RAo,PAo,kD,BAo,IAo,NAo,u2,mfe,qAo,jAo,SD,DAo,GAo,OAo,_2,gfe,VAo,XAo,RD,zAo,WAo,QAo,b2,hfe,HAo,UAo,PD,JAo,YAo,KAo,v2,ZAo,pfe,e6o,o6o,ufe,r6o,t6o,F2,pGe,Gi,T2,_fe,oy,a6o,bfe,n6o,uGe,ko,ry,s6o,Oi,l6o,BD,i6o,d6o,ID,c6o,f6o,m6o,ty,g6o,vfe,h6o,p6o,u6o,it,ay,_6o,Ffe,b6o,v6o,Vi,F6o,Tfe,T6o,M6o,ND,E6o,C6o,w6o,M2,A6o,Ke,ny,L6o,Mfe,y6o,x6o,Ba,$6o,Efe,k6o,S6o,Cfe,R6o,P6o,wfe,B6o,I6o,N6o,z,E2,Afe,q6o,j6o,qD,D6o,G6o,O6o,C2,Lfe,V6o,X6o,jD,z6o,W6o,Q6o,w2,yfe,H6o,U6o,DD,J6o,Y6o,K6o,A2,xfe,Z6o,eLo,GD,oLo,rLo,tLo,L2,$fe,aLo,nLo,OD,sLo,lLo,iLo,y2,kfe,dLo,cLo,VD,fLo,mLo,gLo,x2,Sfe,hLo,pLo,XD,uLo,_Lo,bLo,$2,Rfe,vLo,FLo,zD,TLo,MLo,ELo,k2,Pfe,CLo,wLo,WD,ALo,LLo,yLo,S2,Bfe,xLo,$Lo,QD,kLo,SLo,RLo,R2,Ife,PLo,BLo,HD,ILo,NLo,qLo,P2,Nfe,jLo,DLo,UD,GLo,OLo,VLo,B2,qfe,XLo,zLo,JD,WLo,QLo,HLo,I2,jfe,ULo,JLo,YD,YLo,KLo,ZLo,N2,Dfe,eyo,oyo,KD,ryo,tyo,ayo,q2,Gfe,nyo,syo,ZD,lyo,iyo,dyo,j2,Ofe,cyo,fyo,eG,myo,gyo,hyo,D2,Vfe,pyo,uyo,oG,_yo,byo,vyo,G2,Xfe,Fyo,Tyo,rG,Myo,Eyo,Cyo,O2,zfe,wyo,Ayo,tG,Lyo,yyo,xyo,V2,Wfe,$yo,kyo,aG,Syo,Ryo,Pyo,X2,Qfe,Byo,Iyo,nG,Nyo,qyo,jyo,z2,Hfe,Dyo,Gyo,sG,Oyo,Vyo,Xyo,W2,Ufe,zyo,Wyo,lG,Qyo,Hyo,Uyo,Q2,Jfe,Jyo,Yyo,iG,Kyo,Zyo,e8o,H2,Yfe,o8o,r8o,dG,t8o,a8o,n8o,U2,Kfe,s8o,l8o,cG,i8o,d8o,c8o,J2,Zfe,f8o,m8o,fG,g8o,h8o,p8o,Y2,eme,u8o,_8o,mG,b8o,v8o,F8o,K2,ome,T8o,M8o,gG,E8o,C8o,w8o,Z2,rme,A8o,L8o,hG,y8o,x8o,$8o,e1,tme,k8o,S8o,pG,R8o,P8o,B8o,o1,ame,I8o,N8o,uG,q8o,j8o,D8o,r1,nme,G8o,O8o,_G,V8o,X8o,z8o,t1,sme,W8o,Q8o,bG,H8o,U8o,J8o,a1,lme,Y8o,K8o,vG,Z8o,e9o,o9o,n1,ime,r9o,t9o,FG,a9o,n9o,s9o,s1,dme,l9o,i9o,TG,d9o,c9o,f9o,l1,m9o,cme,g9o,h9o,fme,p9o,u9o,i1,_Ge,Xi,d1,mme,sy,_9o,gme,b9o,bGe,So,ly,v9o,zi,F9o,MG,T9o,M9o,EG,E9o,C9o,w9o,iy,A9o,hme,L9o,y9o,x9o,dt,dy,$9o,pme,k9o,S9o,Wi,R9o,ume,P9o,B9o,CG,I9o,N9o,q9o,c1,j9o,Ze,cy,D9o,_me,G9o,O9o,Ia,V9o,bme,X9o,z9o,vme,W9o,Q9o,Fme,H9o,U9o,J9o,Q,f1,Tme,Y9o,K9o,wG,Z9o,exo,oxo,m1,Mme,rxo,txo,AG,axo,nxo,sxo,g1,Eme,lxo,ixo,LG,dxo,cxo,fxo,h1,Cme,mxo,gxo,yG,hxo,pxo,uxo,p1,wme,_xo,bxo,xG,vxo,Fxo,Txo,u1,Ame,Mxo,Exo,$G,Cxo,wxo,Axo,_1,Lme,Lxo,yxo,kG,xxo,$xo,kxo,b1,yme,Sxo,Rxo,SG,Pxo,Bxo,Ixo,v1,xme,Nxo,qxo,RG,jxo,Dxo,Gxo,F1,$me,Oxo,Vxo,PG,Xxo,zxo,Wxo,T1,kme,Qxo,Hxo,BG,Uxo,Jxo,Yxo,M1,Sme,Kxo,Zxo,IG,e$o,o$o,r$o,E1,Rme,t$o,a$o,NG,n$o,s$o,l$o,C1,Pme,i$o,d$o,qG,c$o,f$o,m$o,w1,Bme,g$o,h$o,jG,p$o,u$o,_$o,A1,Ime,b$o,v$o,DG,F$o,T$o,M$o,L1,Nme,E$o,C$o,GG,w$o,A$o,L$o,y1,qme,y$o,x$o,OG,$$o,k$o,S$o,x1,jme,R$o,P$o,VG,B$o,I$o,N$o,$1,Dme,q$o,j$o,XG,D$o,G$o,O$o,k1,Gme,V$o,X$o,zG,z$o,W$o,Q$o,S1,Ome,H$o,U$o,WG,J$o,Y$o,K$o,R1,Vme,Z$o,eko,QG,oko,rko,tko,P1,Xme,ako,nko,HG,sko,lko,iko,B1,zme,dko,cko,UG,fko,mko,gko,I1,Wme,hko,pko,JG,uko,_ko,bko,N1,Qme,vko,Fko,YG,Tko,Mko,Eko,q1,Hme,Cko,wko,KG,Ako,Lko,yko,j1,Ume,xko,$ko,ZG,kko,Sko,Rko,D1,Jme,Pko,Bko,eO,Iko,Nko,qko,G1,Yme,jko,Dko,oO,Gko,Oko,Vko,O1,Kme,Xko,zko,Zme,Wko,Qko,Hko,V1,ege,Uko,Jko,rO,Yko,Kko,Zko,X1,oge,eSo,oSo,tO,rSo,tSo,aSo,z1,rge,nSo,sSo,aO,lSo,iSo,dSo,W1,tge,cSo,fSo,nO,mSo,gSo,hSo,Q1,pSo,age,uSo,_So,nge,bSo,vSo,H1,vGe,Qi,U1,sge,fy,FSo,lge,TSo,FGe,Ro,my,MSo,Hi,ESo,sO,CSo,wSo,lO,ASo,LSo,ySo,gy,xSo,ige,$So,kSo,SSo,ct,hy,RSo,dge,PSo,BSo,Ui,ISo,cge,NSo,qSo,iO,jSo,DSo,GSo,J1,OSo,eo,py,VSo,fge,XSo,zSo,Na,WSo,mge,QSo,HSo,gge,USo,JSo,hge,YSo,KSo,ZSo,pe,Y1,pge,eRo,oRo,dO,rRo,tRo,aRo,K1,uge,nRo,sRo,cO,lRo,iRo,dRo,Z1,_ge,cRo,fRo,fO,mRo,gRo,hRo,e7,bge,pRo,uRo,mO,_Ro,bRo,vRo,o7,vge,FRo,TRo,gO,MRo,ERo,CRo,r7,Fge,wRo,ARo,hO,LRo,yRo,xRo,t7,Tge,$Ro,kRo,pO,SRo,RRo,PRo,a7,Mge,BRo,IRo,uO,NRo,qRo,jRo,n7,Ege,DRo,GRo,_O,ORo,VRo,XRo,s7,Cge,zRo,WRo,bO,QRo,HRo,URo,l7,wge,JRo,YRo,vO,KRo,ZRo,ePo,i7,Age,oPo,rPo,FO,tPo,aPo,nPo,d7,Lge,sPo,lPo,TO,iPo,dPo,cPo,c7,yge,fPo,mPo,MO,gPo,hPo,pPo,f7,xge,uPo,_Po,EO,bPo,vPo,FPo,m7,$ge,TPo,MPo,CO,EPo,CPo,wPo,g7,kge,APo,LPo,wO,yPo,xPo,$Po,h7,kPo,Sge,SPo,RPo,Rge,PPo,BPo,p7,TGe,Ji,u7,Pge,uy,IPo,Bge,NPo,MGe,Po,_y,qPo,Yi,jPo,AO,DPo,GPo,LO,OPo,VPo,XPo,by,zPo,Ige,WPo,QPo,HPo,ft,vy,UPo,Nge,JPo,YPo,Ki,KPo,qge,ZPo,eBo,yO,oBo,rBo,tBo,_7,aBo,oo,Fy,nBo,jge,sBo,lBo,qa,iBo,Dge,dBo,cBo,Gge,fBo,mBo,Oge,gBo,hBo,pBo,q,b7,Vge,uBo,_Bo,xO,bBo,vBo,FBo,v7,Xge,TBo,MBo,$O,EBo,CBo,wBo,F7,zge,ABo,LBo,kO,yBo,xBo,$Bo,T7,Wge,kBo,SBo,SO,RBo,PBo,BBo,M7,Qge,IBo,NBo,RO,qBo,jBo,DBo,E7,Hge,GBo,OBo,PO,VBo,XBo,zBo,C7,Uge,WBo,QBo,BO,HBo,UBo,JBo,w7,Jge,YBo,KBo,IO,ZBo,eIo,oIo,A7,Yge,rIo,tIo,NO,aIo,nIo,sIo,L7,Kge,lIo,iIo,qO,dIo,cIo,fIo,y7,Zge,mIo,gIo,jO,hIo,pIo,uIo,x7,ehe,_Io,bIo,DO,vIo,FIo,TIo,$7,ohe,MIo,EIo,GO,CIo,wIo,AIo,k7,rhe,LIo,yIo,OO,xIo,$Io,kIo,S7,the,SIo,RIo,VO,PIo,BIo,IIo,R7,ahe,NIo,qIo,XO,jIo,DIo,GIo,P7,nhe,OIo,VIo,zO,XIo,zIo,WIo,B7,she,QIo,HIo,WO,UIo,JIo,YIo,I7,lhe,KIo,ZIo,QO,eNo,oNo,rNo,N7,ihe,tNo,aNo,HO,nNo,sNo,lNo,q7,dhe,iNo,dNo,UO,cNo,fNo,mNo,j7,che,gNo,hNo,JO,pNo,uNo,_No,D7,fhe,bNo,vNo,YO,FNo,TNo,MNo,G7,mhe,ENo,CNo,KO,wNo,ANo,LNo,O7,ghe,yNo,xNo,ZO,$No,kNo,SNo,V7,hhe,RNo,PNo,eV,BNo,INo,NNo,X7,phe,qNo,jNo,oV,DNo,GNo,ONo,z7,uhe,VNo,XNo,rV,zNo,WNo,QNo,W7,_he,HNo,UNo,tV,JNo,YNo,KNo,Q7,bhe,ZNo,eqo,aV,oqo,rqo,tqo,H7,vhe,aqo,nqo,nV,sqo,lqo,iqo,U7,Fhe,dqo,cqo,sV,fqo,mqo,gqo,J7,The,hqo,pqo,lV,uqo,_qo,bqo,Y7,Mhe,vqo,Fqo,iV,Tqo,Mqo,Eqo,K7,Ehe,Cqo,wqo,dV,Aqo,Lqo,yqo,Z7,Che,xqo,$qo,cV,kqo,Sqo,Rqo,eb,whe,Pqo,Bqo,fV,Iqo,Nqo,qqo,ob,Ahe,jqo,Dqo,mV,Gqo,Oqo,Vqo,rb,Lhe,Xqo,zqo,gV,Wqo,Qqo,Hqo,tb,yhe,Uqo,Jqo,hV,Yqo,Kqo,Zqo,ab,xhe,ejo,ojo,pV,rjo,tjo,ajo,nb,$he,njo,sjo,uV,ljo,ijo,djo,sb,khe,cjo,fjo,_V,mjo,gjo,hjo,lb,She,pjo,ujo,bV,_jo,bjo,vjo,ib,Rhe,Fjo,Tjo,vV,Mjo,Ejo,Cjo,db,Phe,wjo,Ajo,FV,Ljo,yjo,xjo,cb,Bhe,$jo,kjo,TV,Sjo,Rjo,Pjo,fb,Bjo,Ihe,Ijo,Njo,Nhe,qjo,jjo,mb,EGe,Zi,gb,qhe,Ty,Djo,jhe,Gjo,CGe,Bo,My,Ojo,ed,Vjo,MV,Xjo,zjo,EV,Wjo,Qjo,Hjo,Ey,Ujo,Dhe,Jjo,Yjo,Kjo,mt,Cy,Zjo,Ghe,eDo,oDo,od,rDo,Ohe,tDo,aDo,CV,nDo,sDo,lDo,hb,iDo,ro,wy,dDo,Vhe,cDo,fDo,ja,mDo,Xhe,gDo,hDo,zhe,pDo,uDo,Whe,_Do,bDo,vDo,Z,pb,Qhe,FDo,TDo,wV,MDo,EDo,CDo,ub,Hhe,wDo,ADo,AV,LDo,yDo,xDo,_b,Uhe,$Do,kDo,LV,SDo,RDo,PDo,bb,Jhe,BDo,IDo,yV,NDo,qDo,jDo,vb,Yhe,DDo,GDo,xV,ODo,VDo,XDo,Fb,Khe,zDo,WDo,$V,QDo,HDo,UDo,Tb,Zhe,JDo,YDo,kV,KDo,ZDo,eGo,Mb,epe,oGo,rGo,SV,tGo,aGo,nGo,Eb,ope,sGo,lGo,RV,iGo,dGo,cGo,Cb,rpe,fGo,mGo,PV,gGo,hGo,pGo,wb,tpe,uGo,_Go,BV,bGo,vGo,FGo,Ab,ape,TGo,MGo,IV,EGo,CGo,wGo,Lb,npe,AGo,LGo,NV,yGo,xGo,$Go,yb,spe,kGo,SGo,qV,RGo,PGo,BGo,xb,lpe,IGo,NGo,jV,qGo,jGo,DGo,$b,ipe,GGo,OGo,DV,VGo,XGo,zGo,kb,dpe,WGo,QGo,GV,HGo,UGo,JGo,Sb,cpe,YGo,KGo,OV,ZGo,eOo,oOo,Rb,fpe,rOo,tOo,VV,aOo,nOo,sOo,Pb,mpe,lOo,iOo,XV,dOo,cOo,fOo,Bb,gpe,mOo,gOo,zV,hOo,pOo,uOo,Ib,hpe,_Oo,bOo,WV,vOo,FOo,TOo,Nb,ppe,MOo,EOo,QV,COo,wOo,AOo,qb,upe,LOo,yOo,HV,xOo,$Oo,kOo,jb,_pe,SOo,ROo,UV,POo,BOo,IOo,Db,bpe,NOo,qOo,JV,jOo,DOo,GOo,Gb,vpe,OOo,VOo,YV,XOo,zOo,WOo,Ob,Fpe,QOo,HOo,KV,UOo,JOo,YOo,Vb,Tpe,KOo,ZOo,ZV,eVo,oVo,rVo,Xb,tVo,Mpe,aVo,nVo,Epe,sVo,lVo,zb,wGe,rd,Wb,Cpe,Ay,iVo,wpe,dVo,AGe,Io,Ly,cVo,td,fVo,eX,mVo,gVo,oX,hVo,pVo,uVo,yy,_Vo,Ape,bVo,vVo,FVo,gt,xy,TVo,Lpe,MVo,EVo,ad,CVo,ype,wVo,AVo,rX,LVo,yVo,xVo,Qb,$Vo,to,$y,kVo,xpe,SVo,RVo,Da,PVo,$pe,BVo,IVo,kpe,NVo,qVo,Spe,jVo,DVo,GVo,Zr,Hb,Rpe,OVo,VVo,tX,XVo,zVo,WVo,Ub,Ppe,QVo,HVo,aX,UVo,JVo,YVo,Jb,Bpe,KVo,ZVo,nX,eXo,oXo,rXo,Yb,Ipe,tXo,aXo,sX,nXo,sXo,lXo,Kb,Npe,iXo,dXo,lX,cXo,fXo,mXo,Zb,gXo,qpe,hXo,pXo,jpe,uXo,_Xo,e4,LGe,nd,o4,Dpe,ky,bXo,Gpe,vXo,yGe,No,Sy,FXo,sd,TXo,iX,MXo,EXo,dX,CXo,wXo,AXo,Ry,LXo,Ope,yXo,xXo,$Xo,ht,Py,kXo,Vpe,SXo,RXo,ld,PXo,Xpe,BXo,IXo,cX,NXo,qXo,jXo,r4,DXo,ao,By,GXo,zpe,OXo,VXo,Ga,XXo,Wpe,zXo,WXo,Qpe,QXo,HXo,Hpe,UXo,JXo,YXo,U,t4,Upe,KXo,ZXo,fX,ezo,ozo,rzo,a4,Jpe,tzo,azo,mX,nzo,szo,lzo,n4,Ype,izo,dzo,gX,czo,fzo,mzo,s4,Kpe,gzo,hzo,hX,pzo,uzo,_zo,l4,Zpe,bzo,vzo,pX,Fzo,Tzo,Mzo,i4,eue,Ezo,Czo,uX,wzo,Azo,Lzo,d4,oue,yzo,xzo,_X,$zo,kzo,Szo,c4,rue,Rzo,Pzo,bX,Bzo,Izo,Nzo,f4,tue,qzo,jzo,vX,Dzo,Gzo,Ozo,m4,aue,Vzo,Xzo,FX,zzo,Wzo,Qzo,g4,nue,Hzo,Uzo,TX,Jzo,Yzo,Kzo,h4,sue,Zzo,eWo,MX,oWo,rWo,tWo,p4,lue,aWo,nWo,EX,sWo,lWo,iWo,u4,iue,dWo,cWo,CX,fWo,mWo,gWo,_4,due,hWo,pWo,wX,uWo,_Wo,bWo,b4,cue,vWo,FWo,AX,TWo,MWo,EWo,v4,fue,CWo,wWo,LX,AWo,LWo,yWo,F4,mue,xWo,$Wo,yX,kWo,SWo,RWo,T4,gue,PWo,BWo,xX,IWo,NWo,qWo,M4,hue,jWo,DWo,$X,GWo,OWo,VWo,E4,pue,XWo,zWo,kX,WWo,QWo,HWo,C4,uue,UWo,JWo,SX,YWo,KWo,ZWo,w4,_ue,eQo,oQo,RX,rQo,tQo,aQo,A4,bue,nQo,sQo,PX,lQo,iQo,dQo,L4,vue,cQo,fQo,BX,mQo,gQo,hQo,y4,Fue,pQo,uQo,IX,_Qo,bQo,vQo,x4,Tue,FQo,TQo,NX,MQo,EQo,CQo,$4,Mue,wQo,AQo,qX,LQo,yQo,xQo,k4,Eue,$Qo,kQo,jX,SQo,RQo,PQo,S4,Cue,BQo,IQo,DX,NQo,qQo,jQo,R4,wue,DQo,GQo,GX,OQo,VQo,XQo,P4,Aue,zQo,WQo,OX,QQo,HQo,UQo,B4,Lue,JQo,YQo,VX,KQo,ZQo,eHo,I4,yue,oHo,rHo,XX,tHo,aHo,nHo,N4,sHo,xue,lHo,iHo,$ue,dHo,cHo,q4,xGe,id,j4,kue,Iy,fHo,Sue,mHo,$Ge,qo,Ny,gHo,dd,hHo,zX,pHo,uHo,WX,_Ho,bHo,vHo,qy,FHo,Rue,THo,MHo,EHo,pt,jy,CHo,Pue,wHo,AHo,cd,LHo,Bue,yHo,xHo,QX,$Ho,kHo,SHo,D4,RHo,no,Dy,PHo,Iue,BHo,IHo,Oa,NHo,Nue,qHo,jHo,que,DHo,GHo,jue,OHo,VHo,XHo,V,G4,Due,zHo,WHo,HX,QHo,HHo,UHo,O4,Gue,JHo,YHo,UX,KHo,ZHo,eUo,V4,Oue,oUo,rUo,JX,tUo,aUo,nUo,X4,Vue,sUo,lUo,YX,iUo,dUo,cUo,z4,Xue,fUo,mUo,KX,gUo,hUo,pUo,W4,zue,uUo,_Uo,ZX,bUo,vUo,FUo,Q4,Wue,TUo,MUo,ez,EUo,CUo,wUo,H4,Que,AUo,LUo,oz,yUo,xUo,$Uo,U4,Hue,kUo,SUo,rz,RUo,PUo,BUo,J4,Uue,IUo,NUo,tz,qUo,jUo,DUo,Y4,Jue,GUo,OUo,az,VUo,XUo,zUo,K4,Yue,WUo,QUo,nz,HUo,UUo,JUo,Z4,Kue,YUo,KUo,sz,ZUo,eJo,oJo,ev,Zue,rJo,tJo,lz,aJo,nJo,sJo,ov,e_e,lJo,iJo,iz,dJo,cJo,fJo,rv,o_e,mJo,gJo,dz,hJo,pJo,uJo,tv,r_e,_Jo,bJo,cz,vJo,FJo,TJo,av,t_e,MJo,EJo,fz,CJo,wJo,AJo,nv,a_e,LJo,yJo,mz,xJo,$Jo,kJo,sv,n_e,SJo,RJo,gz,PJo,BJo,IJo,lv,s_e,NJo,qJo,hz,jJo,DJo,GJo,iv,l_e,OJo,VJo,pz,XJo,zJo,WJo,dv,i_e,QJo,HJo,uz,UJo,JJo,YJo,cv,d_e,KJo,ZJo,_z,eYo,oYo,rYo,fv,c_e,tYo,aYo,bz,nYo,sYo,lYo,mv,f_e,iYo,dYo,vz,cYo,fYo,mYo,gv,m_e,gYo,hYo,Fz,pYo,uYo,_Yo,hv,g_e,bYo,vYo,Tz,FYo,TYo,MYo,pv,h_e,EYo,CYo,Mz,wYo,AYo,LYo,uv,p_e,yYo,xYo,Ez,$Yo,kYo,SYo,_v,u_e,RYo,PYo,Cz,BYo,IYo,NYo,bv,__e,qYo,jYo,wz,DYo,GYo,OYo,vv,b_e,VYo,XYo,Az,zYo,WYo,QYo,Fv,v_e,HYo,UYo,Lz,JYo,YYo,KYo,Tv,F_e,ZYo,eKo,yz,oKo,rKo,tKo,Mv,T_e,aKo,nKo,xz,sKo,lKo,iKo,Ev,M_e,dKo,cKo,$z,fKo,mKo,gKo,Cv,E_e,hKo,pKo,kz,uKo,_Ko,bKo,wv,C_e,vKo,FKo,Sz,TKo,MKo,EKo,Av,w_e,CKo,wKo,Rz,AKo,LKo,yKo,Lv,xKo,A_e,$Ko,kKo,L_e,SKo,RKo,yv,kGe,fd,xv,y_e,Gy,PKo,x_e,BKo,SGe,jo,Oy,IKo,md,NKo,Pz,qKo,jKo,Bz,DKo,GKo,OKo,Vy,VKo,$_e,XKo,zKo,WKo,ut,Xy,QKo,k_e,HKo,UKo,gd,JKo,S_e,YKo,KKo,Iz,ZKo,eZo,oZo,$v,rZo,so,zy,tZo,R_e,aZo,nZo,Va,sZo,P_e,lZo,iZo,B_e,dZo,cZo,I_e,fZo,mZo,gZo,N_e,kv,q_e,hZo,pZo,Nz,uZo,_Zo,bZo,Sv,vZo,j_e,FZo,TZo,D_e,MZo,EZo,Rv,RGe,hd,Pv,G_e,Wy,CZo,O_e,wZo,PGe,Do,Qy,AZo,pd,LZo,qz,yZo,xZo,jz,$Zo,kZo,SZo,Hy,RZo,V_e,PZo,BZo,IZo,_t,Uy,NZo,X_e,qZo,jZo,ud,DZo,z_e,GZo,OZo,Dz,VZo,XZo,zZo,Bv,WZo,lo,Jy,QZo,W_e,HZo,UZo,Xa,JZo,Q_e,YZo,KZo,H_e,ZZo,eer,U_e,oer,rer,ter,Fe,Iv,J_e,aer,ner,Gz,ser,ler,ier,Nv,Y_e,der,cer,Oz,fer,mer,ger,qv,K_e,her,per,Vz,uer,_er,ber,jv,Z_e,ver,Fer,Xz,Ter,Mer,Eer,Os,e2e,Cer,wer,zz,Aer,Ler,Wz,yer,xer,$er,Dv,o2e,ker,Ser,Qz,Rer,Per,Ber,Vs,r2e,Ier,Ner,Hz,qer,jer,Uz,Der,Ger,Oer,bt,t2e,Ver,Xer,Jz,zer,Wer,Yz,Qer,Her,Kz,Uer,Jer,Yer,Gv,a2e,Ker,Zer,Zz,eor,oor,ror,Ov,n2e,tor,aor,eW,nor,sor,lor,Vv,s2e,ior,dor,oW,cor,mor,gor,Xv,l2e,hor,por,rW,uor,_or,bor,zv,i2e,vor,For,tW,Tor,Mor,Eor,Wv,d2e,Cor,wor,aW,Aor,Lor,yor,Qv,c2e,xor,$or,nW,kor,Sor,Ror,Hv,Por,f2e,Bor,Ior,m2e,Nor,qor,Uv,BGe,_d,Jv,g2e,Yy,jor,h2e,Dor,IGe,Go,Ky,Gor,bd,Oor,sW,Vor,Xor,lW,zor,Wor,Qor,Zy,Hor,p2e,Uor,Jor,Yor,vt,e8,Kor,u2e,Zor,err,vd,orr,_2e,rrr,trr,iW,arr,nrr,srr,Yv,lrr,io,o8,irr,b2e,drr,crr,za,frr,v2e,mrr,grr,F2e,hrr,prr,T2e,urr,_rr,brr,M2e,Kv,E2e,vrr,Frr,dW,Trr,Mrr,Err,Zv,Crr,C2e,wrr,Arr,w2e,Lrr,yrr,eF,NGe,Fd,oF,A2e,r8,xrr,L2e,$rr,qGe,Oo,t8,krr,Td,Srr,cW,Rrr,Prr,fW,Brr,Irr,Nrr,a8,qrr,y2e,jrr,Drr,Grr,Ft,n8,Orr,x2e,Vrr,Xrr,Md,zrr,$2e,Wrr,Qrr,mW,Hrr,Urr,Jrr,rF,Yrr,co,s8,Krr,k2e,Zrr,etr,Wa,otr,S2e,rtr,ttr,R2e,atr,ntr,P2e,str,ltr,itr,B2e,tF,I2e,dtr,ctr,gW,ftr,mtr,gtr,aF,htr,N2e,ptr,utr,q2e,_tr,btr,nF,jGe,Ed,sF,j2e,l8,vtr,D2e,Ftr,DGe,Vo,i8,Ttr,Cd,Mtr,hW,Etr,Ctr,pW,wtr,Atr,Ltr,d8,ytr,G2e,xtr,$tr,ktr,Tt,c8,Str,O2e,Rtr,Ptr,wd,Btr,V2e,Itr,Ntr,uW,qtr,jtr,Dtr,lF,Gtr,fo,f8,Otr,X2e,Vtr,Xtr,Qa,ztr,z2e,Wtr,Qtr,W2e,Htr,Utr,Q2e,Jtr,Ytr,Ktr,Pe,iF,H2e,Ztr,ear,_W,oar,rar,tar,dF,U2e,aar,nar,bW,sar,lar,iar,cF,J2e,dar,car,vW,far,mar,gar,fF,Y2e,har,par,FW,uar,_ar,bar,mF,K2e,Far,Tar,TW,Mar,Ear,Car,gF,Z2e,war,Aar,MW,Lar,yar,xar,hF,e1e,$ar,kar,EW,Sar,Rar,Par,pF,o1e,Bar,Iar,CW,Nar,qar,jar,uF,r1e,Dar,Gar,wW,Oar,Var,Xar,_F,zar,t1e,War,Qar,a1e,Har,Uar,bF,GGe,Ad,vF,n1e,m8,Jar,s1e,Yar,OGe,Xo,g8,Kar,Ld,Zar,AW,enr,onr,LW,rnr,tnr,anr,h8,nnr,l1e,snr,lnr,inr,Mt,p8,dnr,i1e,cnr,fnr,yd,mnr,d1e,gnr,hnr,yW,pnr,unr,_nr,FF,bnr,mo,u8,vnr,c1e,Fnr,Tnr,Ha,Mnr,f1e,Enr,Cnr,m1e,wnr,Anr,g1e,Lnr,ynr,xnr,et,TF,h1e,$nr,knr,xW,Snr,Rnr,Pnr,MF,p1e,Bnr,Inr,$W,Nnr,qnr,jnr,EF,u1e,Dnr,Gnr,kW,Onr,Vnr,Xnr,CF,_1e,znr,Wnr,SW,Qnr,Hnr,Unr,wF,b1e,Jnr,Ynr,RW,Knr,Znr,esr,AF,osr,v1e,rsr,tsr,F1e,asr,nsr,LF,VGe,xd,yF,T1e,_8,ssr,M1e,lsr,XGe,zo,b8,isr,$d,dsr,PW,csr,fsr,BW,msr,gsr,hsr,v8,psr,E1e,usr,_sr,bsr,Et,F8,vsr,C1e,Fsr,Tsr,kd,Msr,w1e,Esr,Csr,IW,wsr,Asr,Lsr,xF,ysr,go,T8,xsr,A1e,$sr,ksr,Ua,Ssr,L1e,Rsr,Psr,y1e,Bsr,Isr,x1e,Nsr,qsr,jsr,Le,$F,$1e,Dsr,Gsr,NW,Osr,Vsr,Xsr,kF,k1e,zsr,Wsr,qW,Qsr,Hsr,Usr,SF,S1e,Jsr,Ysr,jW,Ksr,Zsr,elr,RF,R1e,olr,rlr,DW,tlr,alr,nlr,PF,P1e,slr,llr,GW,ilr,dlr,clr,BF,B1e,flr,mlr,OW,glr,hlr,plr,IF,I1e,ulr,_lr,VW,blr,vlr,Flr,NF,N1e,Tlr,Mlr,XW,Elr,Clr,wlr,qF,q1e,Alr,Llr,zW,ylr,xlr,$lr,jF,j1e,klr,Slr,WW,Rlr,Plr,Blr,DF,Ilr,D1e,Nlr,qlr,G1e,jlr,Dlr,GF,zGe,Sd,OF,O1e,M8,Glr,V1e,Olr,WGe,Wo,E8,Vlr,Rd,Xlr,QW,zlr,Wlr,HW,Qlr,Hlr,Ulr,C8,Jlr,X1e,Ylr,Klr,Zlr,Ct,w8,eir,z1e,oir,rir,Pd,tir,W1e,air,nir,UW,sir,lir,iir,VF,dir,ho,A8,cir,Q1e,fir,mir,Ja,gir,H1e,hir,pir,U1e,uir,_ir,J1e,bir,vir,Fir,L8,XF,Y1e,Tir,Mir,JW,Eir,Cir,wir,zF,K1e,Air,Lir,YW,yir,xir,$ir,WF,kir,Z1e,Sir,Rir,e7e,Pir,Bir,QF,QGe,Bd,HF,o7e,y8,Iir,r7e,Nir,HGe,Qo,x8,qir,Id,jir,KW,Dir,Gir,ZW,Oir,Vir,Xir,$8,zir,t7e,Wir,Qir,Hir,wt,k8,Uir,a7e,Jir,Yir,Nd,Kir,n7e,Zir,edr,eQ,odr,rdr,tdr,UF,adr,po,S8,ndr,s7e,sdr,ldr,Ya,idr,l7e,ddr,cdr,i7e,fdr,mdr,d7e,gdr,hdr,pdr,ot,JF,c7e,udr,_dr,oQ,bdr,vdr,Fdr,YF,f7e,Tdr,Mdr,rQ,Edr,Cdr,wdr,KF,m7e,Adr,Ldr,tQ,ydr,xdr,$dr,ZF,g7e,kdr,Sdr,aQ,Rdr,Pdr,Bdr,eT,h7e,Idr,Ndr,nQ,qdr,jdr,Ddr,oT,Gdr,p7e,Odr,Vdr,u7e,Xdr,zdr,rT,UGe,qd,tT,_7e,R8,Wdr,b7e,Qdr,JGe,Ho,P8,Hdr,jd,Udr,sQ,Jdr,Ydr,lQ,Kdr,Zdr,ecr,B8,ocr,v7e,rcr,tcr,acr,At,I8,ncr,F7e,scr,lcr,Dd,icr,T7e,dcr,ccr,iQ,fcr,mcr,gcr,aT,hcr,uo,N8,pcr,M7e,ucr,_cr,Ka,bcr,E7e,vcr,Fcr,C7e,Tcr,Mcr,w7e,Ecr,Ccr,wcr,Gd,nT,A7e,Acr,Lcr,dQ,ycr,xcr,$cr,sT,L7e,kcr,Scr,cQ,Rcr,Pcr,Bcr,lT,y7e,Icr,Ncr,fQ,qcr,jcr,Dcr,iT,Gcr,x7e,Ocr,Vcr,$7e,Xcr,zcr,dT,YGe,Od,cT,k7e,q8,Wcr,S7e,Qcr,KGe,Uo,j8,Hcr,Vd,Ucr,mQ,Jcr,Ycr,gQ,Kcr,Zcr,efr,D8,ofr,R7e,rfr,tfr,afr,Lt,G8,nfr,P7e,sfr,lfr,Xd,ifr,B7e,dfr,cfr,hQ,ffr,mfr,gfr,fT,hfr,_o,O8,pfr,I7e,ufr,_fr,Za,bfr,N7e,vfr,Ffr,q7e,Tfr,Mfr,j7e,Efr,Cfr,wfr,V8,mT,D7e,Afr,Lfr,pQ,yfr,xfr,$fr,gT,G7e,kfr,Sfr,uQ,Rfr,Pfr,Bfr,hT,Ifr,O7e,Nfr,qfr,V7e,jfr,Dfr,pT,ZGe,zd,uT,X7e,X8,Gfr,z7e,Ofr,eOe,Jo,z8,Vfr,Wd,Xfr,_Q,zfr,Wfr,bQ,Qfr,Hfr,Ufr,W8,Jfr,W7e,Yfr,Kfr,Zfr,yt,Q8,emr,Q7e,omr,rmr,Qd,tmr,H7e,amr,nmr,vQ,smr,lmr,imr,_T,dmr,bo,H8,cmr,U7e,fmr,mmr,en,gmr,J7e,hmr,pmr,Y7e,umr,_mr,K7e,bmr,vmr,Fmr,Z7e,bT,ebe,Tmr,Mmr,FQ,Emr,Cmr,wmr,vT,Amr,obe,Lmr,ymr,rbe,xmr,$mr,FT,oOe,Hd,TT,tbe,U8,kmr,abe,Smr,rOe,Yo,J8,Rmr,Ud,Pmr,TQ,Bmr,Imr,MQ,Nmr,qmr,jmr,Y8,Dmr,nbe,Gmr,Omr,Vmr,xt,K8,Xmr,sbe,zmr,Wmr,Jd,Qmr,lbe,Hmr,Umr,EQ,Jmr,Ymr,Kmr,MT,Zmr,vo,Z8,egr,ibe,ogr,rgr,on,tgr,dbe,agr,ngr,cbe,sgr,lgr,fbe,igr,dgr,cgr,rn,ET,mbe,fgr,mgr,CQ,ggr,hgr,pgr,CT,gbe,ugr,_gr,wQ,bgr,vgr,Fgr,wT,hbe,Tgr,Mgr,AQ,Egr,Cgr,wgr,AT,pbe,Agr,Lgr,LQ,ygr,xgr,$gr,LT,kgr,ube,Sgr,Rgr,_be,Pgr,Bgr,yT,tOe,Yd,xT,bbe,e9,Igr,vbe,Ngr,aOe,Ko,o9,qgr,Kd,jgr,yQ,Dgr,Ggr,xQ,Ogr,Vgr,Xgr,r9,zgr,Fbe,Wgr,Qgr,Hgr,$t,t9,Ugr,Tbe,Jgr,Ygr,Zd,Kgr,Mbe,Zgr,ehr,$Q,ohr,rhr,thr,$T,ahr,Fo,a9,nhr,Ebe,shr,lhr,tn,ihr,Cbe,dhr,chr,wbe,fhr,mhr,Abe,ghr,hhr,phr,Lbe,kT,ybe,uhr,_hr,kQ,bhr,vhr,Fhr,ST,Thr,xbe,Mhr,Ehr,$be,Chr,whr,RT,nOe,ec,PT,kbe,n9,Ahr,Sbe,Lhr,sOe,Zo,s9,yhr,oc,xhr,SQ,$hr,khr,RQ,Shr,Rhr,Phr,l9,Bhr,Rbe,Ihr,Nhr,qhr,kt,i9,jhr,Pbe,Dhr,Ghr,rc,Ohr,Bbe,Vhr,Xhr,PQ,zhr,Whr,Qhr,BT,Hhr,Lr,d9,Uhr,Ibe,Jhr,Yhr,an,Khr,Nbe,Zhr,epr,qbe,opr,rpr,jbe,tpr,apr,npr,N,IT,Dbe,spr,lpr,BQ,ipr,dpr,cpr,NT,Gbe,fpr,mpr,IQ,gpr,hpr,ppr,qT,Obe,upr,_pr,NQ,bpr,vpr,Fpr,jT,Vbe,Tpr,Mpr,qQ,Epr,Cpr,wpr,DT,Xbe,Apr,Lpr,jQ,ypr,xpr,$pr,GT,zbe,kpr,Spr,DQ,Rpr,Ppr,Bpr,OT,Wbe,Ipr,Npr,GQ,qpr,jpr,Dpr,VT,Qbe,Gpr,Opr,OQ,Vpr,Xpr,zpr,XT,Hbe,Wpr,Qpr,VQ,Hpr,Upr,Jpr,zT,Ube,Ypr,Kpr,XQ,Zpr,eur,our,WT,Jbe,rur,tur,zQ,aur,nur,sur,QT,Ybe,lur,iur,WQ,dur,cur,fur,HT,Kbe,mur,gur,QQ,hur,pur,uur,UT,Zbe,_ur,bur,HQ,vur,Fur,Tur,JT,e4e,Mur,Eur,UQ,Cur,wur,Aur,YT,o4e,Lur,yur,JQ,xur,$ur,kur,KT,r4e,Sur,Rur,YQ,Pur,Bur,Iur,Xs,t4e,Nur,qur,KQ,jur,Dur,ZQ,Gur,Our,Vur,ZT,a4e,Xur,zur,eH,Wur,Qur,Hur,eM,n4e,Uur,Jur,oH,Yur,Kur,Zur,oM,s4e,e_r,o_r,rH,r_r,t_r,a_r,rM,l4e,n_r,s_r,tH,l_r,i_r,d_r,tM,i4e,c_r,f_r,aH,m_r,g_r,h_r,aM,d4e,p_r,u_r,nH,__r,b_r,v_r,nM,c4e,F_r,T_r,sH,M_r,E_r,C_r,sM,f4e,w_r,A_r,lH,L_r,y_r,x_r,lM,m4e,$_r,k_r,iH,S_r,R_r,P_r,iM,g4e,B_r,I_r,dH,N_r,q_r,j_r,dM,h4e,D_r,G_r,cH,O_r,V_r,X_r,cM,p4e,z_r,W_r,fH,Q_r,H_r,U_r,fM,u4e,J_r,Y_r,mH,K_r,Z_r,e2r,mM,_4e,o2r,r2r,gH,t2r,a2r,n2r,gM,b4e,s2r,l2r,hH,i2r,d2r,c2r,hM,v4e,f2r,m2r,pH,g2r,h2r,p2r,pM,F4e,u2r,_2r,uH,b2r,v2r,F2r,uM,T4e,T2r,M2r,_H,E2r,C2r,w2r,_M,M4e,A2r,L2r,bH,y2r,x2r,$2r,bM,E4e,k2r,S2r,vH,R2r,P2r,B2r,vM,C4e,I2r,N2r,FH,q2r,j2r,D2r,FM,w4e,G2r,O2r,TH,V2r,X2r,z2r,TM,A4e,W2r,Q2r,MH,H2r,U2r,J2r,MM,L4e,Y2r,K2r,EH,Z2r,e1r,o1r,EM,y4e,r1r,t1r,CH,a1r,n1r,s1r,CM,x4e,l1r,i1r,wH,d1r,c1r,f1r,wM,$4e,m1r,g1r,AH,h1r,p1r,u1r,AM,k4e,_1r,b1r,LH,v1r,F1r,T1r,LM,S4e,M1r,E1r,yH,C1r,w1r,A1r,yM,R4e,L1r,y1r,xH,x1r,$1r,k1r,xM,lOe,tc,$M,P4e,c9,S1r,B4e,R1r,iOe,er,f9,P1r,ac,B1r,$H,I1r,N1r,kH,q1r,j1r,D1r,m9,G1r,I4e,O1r,V1r,X1r,St,g9,z1r,N4e,W1r,Q1r,nc,H1r,q4e,U1r,J1r,SH,Y1r,K1r,Z1r,kM,e7r,yr,h9,o7r,j4e,r7r,t7r,nn,a7r,D4e,n7r,s7r,G4e,l7r,i7r,O4e,d7r,c7r,f7r,se,SM,V4e,m7r,g7r,RH,h7r,p7r,u7r,RM,X4e,_7r,b7r,PH,v7r,F7r,T7r,PM,z4e,M7r,E7r,BH,C7r,w7r,A7r,BM,W4e,L7r,y7r,IH,x7r,$7r,k7r,IM,Q4e,S7r,R7r,NH,P7r,B7r,I7r,NM,H4e,N7r,q7r,qH,j7r,D7r,G7r,qM,U4e,O7r,V7r,jH,X7r,z7r,W7r,jM,J4e,Q7r,H7r,DH,U7r,J7r,Y7r,DM,Y4e,K7r,Z7r,GH,ebr,obr,rbr,GM,K4e,tbr,abr,OH,nbr,sbr,lbr,OM,Z4e,ibr,dbr,VH,cbr,fbr,mbr,VM,eve,gbr,hbr,XH,pbr,ubr,_br,XM,ove,bbr,vbr,zH,Fbr,Tbr,Mbr,zM,rve,Ebr,Cbr,WH,wbr,Abr,Lbr,WM,tve,ybr,xbr,QH,$br,kbr,Sbr,QM,ave,Rbr,Pbr,HH,Bbr,Ibr,Nbr,HM,nve,qbr,jbr,UH,Dbr,Gbr,Obr,UM,sve,Vbr,Xbr,JH,zbr,Wbr,Qbr,JM,lve,Hbr,Ubr,YH,Jbr,Ybr,Kbr,YM,ive,Zbr,e4r,KH,o4r,r4r,t4r,KM,dve,a4r,n4r,ZH,s4r,l4r,i4r,ZM,cve,d4r,c4r,eU,f4r,m4r,g4r,eE,fve,h4r,p4r,oU,u4r,_4r,b4r,oE,dOe,sc,rE,mve,p9,v4r,gve,F4r,cOe,or,u9,T4r,lc,M4r,rU,E4r,C4r,tU,w4r,A4r,L4r,_9,y4r,hve,x4r,$4r,k4r,Rt,b9,S4r,pve,R4r,P4r,ic,B4r,uve,I4r,N4r,aU,q4r,j4r,D4r,tE,G4r,xr,v9,O4r,_ve,V4r,X4r,sn,z4r,bve,W4r,Q4r,vve,H4r,U4r,Fve,J4r,Y4r,K4r,Me,aE,Tve,Z4r,evr,nU,ovr,rvr,tvr,nE,Mve,avr,nvr,sU,svr,lvr,ivr,sE,Eve,dvr,cvr,lU,fvr,mvr,gvr,lE,Cve,hvr,pvr,iU,uvr,_vr,bvr,iE,wve,vvr,Fvr,dU,Tvr,Mvr,Evr,dE,Ave,Cvr,wvr,cU,Avr,Lvr,yvr,cE,Lve,xvr,$vr,fU,kvr,Svr,Rvr,fE,yve,Pvr,Bvr,mU,Ivr,Nvr,qvr,mE,xve,jvr,Dvr,gU,Gvr,Ovr,Vvr,gE,$ve,Xvr,zvr,hU,Wvr,Qvr,Hvr,hE,kve,Uvr,Jvr,pU,Yvr,Kvr,Zvr,pE,Sve,eFr,oFr,uU,rFr,tFr,aFr,uE,Rve,nFr,sFr,_U,lFr,iFr,dFr,_E,fOe,dc,bE,Pve,F9,cFr,Bve,fFr,mOe,rr,T9,mFr,cc,gFr,bU,hFr,pFr,vU,uFr,_Fr,bFr,M9,vFr,Ive,FFr,TFr,MFr,Pt,E9,EFr,Nve,CFr,wFr,fc,AFr,qve,LFr,yFr,FU,xFr,$Fr,kFr,vE,SFr,$r,C9,RFr,jve,PFr,BFr,ln,IFr,Dve,NFr,qFr,Gve,jFr,DFr,Ove,GFr,OFr,VFr,rt,FE,Vve,XFr,zFr,TU,WFr,QFr,HFr,TE,Xve,UFr,JFr,MU,YFr,KFr,ZFr,ME,zve,eTr,oTr,EU,rTr,tTr,aTr,EE,Wve,nTr,sTr,CU,lTr,iTr,dTr,CE,Qve,cTr,fTr,wU,mTr,gTr,hTr,wE,gOe,mc,AE,Hve,w9,pTr,Uve,uTr,hOe,tr,A9,_Tr,gc,bTr,AU,vTr,FTr,LU,TTr,MTr,ETr,L9,CTr,Jve,wTr,ATr,LTr,Bt,y9,yTr,Yve,xTr,$Tr,hc,kTr,Kve,STr,RTr,yU,PTr,BTr,ITr,LE,NTr,kr,x9,qTr,Zve,jTr,DTr,dn,GTr,eFe,OTr,VTr,oFe,XTr,zTr,rFe,WTr,QTr,HTr,ie,yE,tFe,UTr,JTr,xU,YTr,KTr,ZTr,xE,aFe,eMr,oMr,$U,rMr,tMr,aMr,$E,nFe,nMr,sMr,kU,lMr,iMr,dMr,kE,sFe,cMr,fMr,SU,mMr,gMr,hMr,SE,lFe,pMr,uMr,RU,_Mr,bMr,vMr,RE,iFe,FMr,TMr,PU,MMr,EMr,CMr,PE,dFe,wMr,AMr,BU,LMr,yMr,xMr,BE,cFe,$Mr,kMr,IU,SMr,RMr,PMr,IE,fFe,BMr,IMr,NU,NMr,qMr,jMr,NE,mFe,DMr,GMr,qU,OMr,VMr,XMr,qE,gFe,zMr,WMr,jU,QMr,HMr,UMr,jE,hFe,JMr,YMr,DU,KMr,ZMr,eEr,DE,pFe,oEr,rEr,GU,tEr,aEr,nEr,GE,uFe,sEr,lEr,OU,iEr,dEr,cEr,OE,_Fe,fEr,mEr,VU,gEr,hEr,pEr,VE,bFe,uEr,_Er,XU,bEr,vEr,FEr,XE,vFe,TEr,MEr,zU,EEr,CEr,wEr,zE,FFe,AEr,LEr,WU,yEr,xEr,$Er,WE,TFe,kEr,SEr,QU,REr,PEr,BEr,QE,MFe,IEr,NEr,HU,qEr,jEr,DEr,HE,pOe,pc,UE,EFe,$9,GEr,CFe,OEr,uOe,ar,k9,VEr,uc,XEr,UU,zEr,WEr,JU,QEr,HEr,UEr,S9,JEr,wFe,YEr,KEr,ZEr,It,R9,eCr,AFe,oCr,rCr,_c,tCr,LFe,aCr,nCr,YU,sCr,lCr,iCr,JE,dCr,Sr,P9,cCr,yFe,fCr,mCr,cn,gCr,xFe,hCr,pCr,$Fe,uCr,_Cr,kFe,bCr,vCr,FCr,ye,YE,SFe,TCr,MCr,KU,ECr,CCr,wCr,KE,RFe,ACr,LCr,ZU,yCr,xCr,$Cr,ZE,PFe,kCr,SCr,eJ,RCr,PCr,BCr,eC,BFe,ICr,NCr,oJ,qCr,jCr,DCr,oC,IFe,GCr,OCr,rJ,VCr,XCr,zCr,rC,NFe,WCr,QCr,tJ,HCr,UCr,JCr,tC,qFe,YCr,KCr,aJ,ZCr,e5r,o5r,aC,jFe,r5r,t5r,nJ,a5r,n5r,s5r,nC,DFe,l5r,i5r,sJ,d5r,c5r,f5r,sC,GFe,m5r,g5r,lJ,h5r,p5r,u5r,lC,_Oe,bc,iC,OFe,B9,_5r,VFe,b5r,bOe,nr,I9,v5r,vc,F5r,iJ,T5r,M5r,dJ,E5r,C5r,w5r,N9,A5r,XFe,L5r,y5r,x5r,Nt,q9,$5r,zFe,k5r,S5r,Fc,R5r,WFe,P5r,B5r,cJ,I5r,N5r,q5r,dC,j5r,Rr,j9,D5r,QFe,G5r,O5r,fn,V5r,HFe,X5r,z5r,UFe,W5r,Q5r,JFe,H5r,U5r,J5r,te,cC,YFe,Y5r,K5r,fJ,Z5r,e3r,o3r,fC,KFe,r3r,t3r,mJ,a3r,n3r,s3r,mC,ZFe,l3r,i3r,gJ,d3r,c3r,f3r,gC,eTe,m3r,g3r,hJ,h3r,p3r,u3r,hC,oTe,_3r,b3r,pJ,v3r,F3r,T3r,pC,rTe,M3r,E3r,uJ,C3r,w3r,A3r,uC,tTe,L3r,y3r,_J,x3r,$3r,k3r,_C,aTe,S3r,R3r,bJ,P3r,B3r,I3r,bC,nTe,N3r,q3r,vJ,j3r,D3r,G3r,vC,sTe,O3r,V3r,FJ,X3r,z3r,W3r,FC,lTe,Q3r,H3r,TJ,U3r,J3r,Y3r,TC,iTe,K3r,Z3r,MJ,e0r,o0r,r0r,MC,dTe,t0r,a0r,EJ,n0r,s0r,l0r,EC,cTe,i0r,d0r,CJ,c0r,f0r,m0r,CC,fTe,g0r,h0r,wJ,p0r,u0r,_0r,wC,mTe,b0r,v0r,AJ,F0r,T0r,M0r,AC,gTe,E0r,C0r,LJ,w0r,A0r,L0r,LC,hTe,y0r,x0r,yJ,$0r,k0r,S0r,yC,pTe,R0r,P0r,xJ,B0r,I0r,N0r,xC,uTe,q0r,j0r,$J,D0r,G0r,O0r,$C,_Te,V0r,X0r,kJ,z0r,W0r,Q0r,kC,bTe,H0r,U0r,SJ,J0r,Y0r,K0r,SC,vTe,Z0r,ewr,RJ,owr,rwr,twr,RC,FTe,awr,nwr,PJ,swr,lwr,iwr,PC,TTe,dwr,cwr,BJ,fwr,mwr,gwr,BC,MTe,hwr,pwr,IJ,uwr,_wr,bwr,IC,vOe,Tc,NC,ETe,D9,vwr,CTe,Fwr,FOe,sr,G9,Twr,Mc,Mwr,NJ,Ewr,Cwr,qJ,wwr,Awr,Lwr,O9,ywr,wTe,xwr,$wr,kwr,qt,V9,Swr,ATe,Rwr,Pwr,Ec,Bwr,LTe,Iwr,Nwr,jJ,qwr,jwr,Dwr,qC,Gwr,Pr,X9,Owr,yTe,Vwr,Xwr,mn,zwr,xTe,Wwr,Qwr,$Te,Hwr,Uwr,kTe,Jwr,Ywr,Kwr,ue,jC,STe,Zwr,eAr,DJ,oAr,rAr,tAr,DC,RTe,aAr,nAr,GJ,sAr,lAr,iAr,GC,PTe,dAr,cAr,OJ,fAr,mAr,gAr,OC,BTe,hAr,pAr,VJ,uAr,_Ar,bAr,VC,ITe,vAr,FAr,XJ,TAr,MAr,EAr,XC,NTe,CAr,wAr,zJ,AAr,LAr,yAr,zC,qTe,xAr,$Ar,WJ,kAr,SAr,RAr,WC,jTe,PAr,BAr,QJ,IAr,NAr,qAr,QC,DTe,jAr,DAr,HJ,GAr,OAr,VAr,HC,GTe,XAr,zAr,UJ,WAr,QAr,HAr,UC,OTe,UAr,JAr,JJ,YAr,KAr,ZAr,JC,VTe,e6r,o6r,YJ,r6r,t6r,a6r,YC,XTe,n6r,s6r,KJ,l6r,i6r,d6r,KC,zTe,c6r,f6r,ZJ,m6r,g6r,h6r,ZC,WTe,p6r,u6r,eY,_6r,b6r,v6r,e5,QTe,F6r,T6r,oY,M6r,E6r,C6r,o5,HTe,w6r,A6r,rY,L6r,y6r,x6r,r5,TOe,Cc,t5,UTe,z9,$6r,JTe,k6r,MOe,lr,W9,S6r,wc,R6r,tY,P6r,B6r,aY,I6r,N6r,q6r,Q9,j6r,YTe,D6r,G6r,O6r,jt,H9,V6r,KTe,X6r,z6r,Ac,W6r,ZTe,Q6r,H6r,nY,U6r,J6r,Y6r,a5,K6r,Br,U9,Z6r,eMe,eLr,oLr,gn,rLr,oMe,tLr,aLr,rMe,nLr,sLr,tMe,lLr,iLr,dLr,J9,n5,aMe,cLr,fLr,sY,mLr,gLr,hLr,s5,nMe,pLr,uLr,lY,_Lr,bLr,vLr,l5,EOe,Lc,i5,sMe,Y9,FLr,lMe,TLr,COe,ir,K9,MLr,yc,ELr,iY,CLr,wLr,dY,ALr,LLr,yLr,Z9,xLr,iMe,$Lr,kLr,SLr,Dt,ex,RLr,dMe,PLr,BLr,xc,ILr,cMe,NLr,qLr,cY,jLr,DLr,GLr,d5,OLr,Ir,ox,VLr,fMe,XLr,zLr,hn,WLr,mMe,QLr,HLr,gMe,ULr,JLr,hMe,YLr,KLr,ZLr,pMe,c5,uMe,eyr,oyr,fY,ryr,tyr,ayr,f5,wOe,$c,m5,_Me,rx,nyr,bMe,syr,AOe,dr,tx,lyr,kc,iyr,mY,dyr,cyr,gY,fyr,myr,gyr,ax,hyr,vMe,pyr,uyr,_yr,Gt,nx,byr,FMe,vyr,Fyr,Sc,Tyr,TMe,Myr,Eyr,hY,Cyr,wyr,Ayr,g5,Lyr,Nr,sx,yyr,MMe,xyr,$yr,pn,kyr,EMe,Syr,Ryr,CMe,Pyr,Byr,wMe,Iyr,Nyr,qyr,de,h5,AMe,jyr,Dyr,pY,Gyr,Oyr,Vyr,p5,LMe,Xyr,zyr,uY,Wyr,Qyr,Hyr,u5,yMe,Uyr,Jyr,_Y,Yyr,Kyr,Zyr,_5,xMe,e8r,o8r,bY,r8r,t8r,a8r,b5,$Me,n8r,s8r,vY,l8r,i8r,d8r,v5,kMe,c8r,f8r,FY,m8r,g8r,h8r,F5,SMe,p8r,u8r,TY,_8r,b8r,v8r,T5,RMe,F8r,T8r,MY,M8r,E8r,C8r,M5,PMe,w8r,A8r,EY,L8r,y8r,x8r,E5,BMe,$8r,k8r,CY,S8r,R8r,P8r,C5,IMe,B8r,I8r,wY,N8r,q8r,j8r,w5,NMe,D8r,G8r,AY,O8r,V8r,X8r,A5,qMe,z8r,W8r,LY,Q8r,H8r,U8r,L5,jMe,J8r,Y8r,yY,K8r,Z8r,e9r,y5,DMe,o9r,r9r,xY,t9r,a9r,n9r,x5,GMe,s9r,l9r,$Y,i9r,d9r,c9r,$5,OMe,f9r,m9r,kY,g9r,h9r,p9r,k5,VMe,u9r,_9r,SY,b9r,v9r,F9r,S5,XMe,T9r,M9r,RY,E9r,C9r,w9r,R5,zMe,A9r,L9r,PY,y9r,x9r,$9r,P5,LOe,Rc,B5,WMe,lx,k9r,QMe,S9r,yOe,cr,ix,R9r,Pc,P9r,BY,B9r,I9r,IY,N9r,q9r,j9r,dx,D9r,HMe,G9r,O9r,V9r,Ot,cx,X9r,UMe,z9r,W9r,Bc,Q9r,JMe,H9r,U9r,NY,J9r,Y9r,K9r,I5,Z9r,qr,fx,exr,YMe,oxr,rxr,un,txr,KMe,axr,nxr,ZMe,sxr,lxr,eEe,ixr,dxr,cxr,ce,N5,oEe,fxr,mxr,qY,gxr,hxr,pxr,q5,rEe,uxr,_xr,jY,bxr,vxr,Fxr,j5,tEe,Txr,Mxr,DY,Exr,Cxr,wxr,D5,aEe,Axr,Lxr,GY,yxr,xxr,$xr,G5,nEe,kxr,Sxr,OY,Rxr,Pxr,Bxr,O5,sEe,Ixr,Nxr,VY,qxr,jxr,Dxr,V5,lEe,Gxr,Oxr,XY,Vxr,Xxr,zxr,X5,iEe,Wxr,Qxr,zY,Hxr,Uxr,Jxr,z5,dEe,Yxr,Kxr,WY,Zxr,e$r,o$r,W5,cEe,r$r,t$r,QY,a$r,n$r,s$r,Q5,fEe,l$r,i$r,HY,d$r,c$r,f$r,H5,mEe,m$r,g$r,UY,h$r,p$r,u$r,U5,gEe,_$r,b$r,JY,v$r,F$r,T$r,J5,hEe,M$r,E$r,YY,C$r,w$r,A$r,Y5,pEe,L$r,y$r,KY,x$r,$$r,k$r,K5,uEe,S$r,R$r,ZY,P$r,B$r,I$r,Z5,_Ee,N$r,q$r,eK,j$r,D$r,G$r,e3,bEe,O$r,V$r,oK,X$r,z$r,W$r,o3,vEe,Q$r,H$r,rK,U$r,J$r,Y$r,r3,FEe,K$r,Z$r,tK,ekr,okr,rkr,t3,xOe,Ic,a3,TEe,mx,tkr,MEe,akr,$Oe,fr,gx,nkr,Nc,skr,aK,lkr,ikr,nK,dkr,ckr,fkr,hx,mkr,EEe,gkr,hkr,pkr,Vt,px,ukr,CEe,_kr,bkr,qc,vkr,wEe,Fkr,Tkr,sK,Mkr,Ekr,Ckr,n3,wkr,jr,ux,Akr,AEe,Lkr,ykr,_n,xkr,LEe,$kr,kkr,yEe,Skr,Rkr,xEe,Pkr,Bkr,Ikr,$Ee,s3,kEe,Nkr,qkr,lK,jkr,Dkr,Gkr,l3,kOe,jc,i3,SEe,_x,Okr,REe,Vkr,SOe,mr,bx,Xkr,Dc,zkr,iK,Wkr,Qkr,dK,Hkr,Ukr,Jkr,vx,Ykr,PEe,Kkr,Zkr,eSr,Xt,Fx,oSr,BEe,rSr,tSr,Gc,aSr,IEe,nSr,sSr,cK,lSr,iSr,dSr,d3,cSr,Dr,Tx,fSr,NEe,mSr,gSr,bn,hSr,qEe,pSr,uSr,jEe,_Sr,bSr,DEe,vSr,FSr,TSr,GEe,c3,OEe,MSr,ESr,fK,CSr,wSr,ASr,f3,ROe,Oc,m3,VEe,Mx,LSr,XEe,ySr,POe,gr,Ex,xSr,Vc,$Sr,mK,kSr,SSr,gK,RSr,PSr,BSr,Cx,ISr,zEe,NSr,qSr,jSr,zt,wx,DSr,WEe,GSr,OSr,Xc,VSr,QEe,XSr,zSr,hK,WSr,QSr,HSr,g3,USr,Gr,Ax,JSr,HEe,YSr,KSr,vn,ZSr,UEe,eRr,oRr,JEe,rRr,tRr,YEe,aRr,nRr,sRr,oe,h3,KEe,lRr,iRr,pK,dRr,cRr,fRr,p3,ZEe,mRr,gRr,uK,hRr,pRr,uRr,u3,eCe,_Rr,bRr,_K,vRr,FRr,TRr,_3,oCe,MRr,ERr,bK,CRr,wRr,ARr,b3,rCe,LRr,yRr,vK,xRr,$Rr,kRr,v3,tCe,SRr,RRr,FK,PRr,BRr,IRr,F3,aCe,NRr,qRr,TK,jRr,DRr,GRr,T3,nCe,ORr,VRr,MK,XRr,zRr,WRr,M3,sCe,QRr,HRr,EK,URr,JRr,YRr,E3,lCe,KRr,ZRr,CK,ePr,oPr,rPr,C3,iCe,tPr,aPr,wK,nPr,sPr,lPr,w3,dCe,iPr,dPr,AK,cPr,fPr,mPr,A3,cCe,gPr,hPr,LK,pPr,uPr,_Pr,L3,fCe,bPr,vPr,yK,FPr,TPr,MPr,y3,mCe,EPr,CPr,xK,wPr,APr,LPr,x3,gCe,yPr,xPr,$K,$Pr,kPr,SPr,$3,hCe,RPr,PPr,kK,BPr,IPr,NPr,k3,pCe,qPr,jPr,SK,DPr,GPr,OPr,S3,uCe,VPr,XPr,RK,zPr,WPr,QPr,R3,_Ce,HPr,UPr,PK,JPr,YPr,KPr,P3,bCe,ZPr,eBr,BK,oBr,rBr,tBr,B3,vCe,aBr,nBr,IK,sBr,lBr,iBr,I3,FCe,dBr,cBr,NK,fBr,mBr,gBr,N3,TCe,hBr,pBr,qK,uBr,_Br,bBr,q3,MCe,vBr,FBr,jK,TBr,MBr,EBr,j3,ECe,CBr,wBr,DK,ABr,LBr,yBr,D3,CCe,xBr,$Br,GK,kBr,SBr,RBr,G3,BOe,zc,O3,wCe,Lx,PBr,ACe,BBr,IOe,hr,yx,IBr,Wc,NBr,OK,qBr,jBr,VK,DBr,GBr,OBr,xx,VBr,LCe,XBr,zBr,WBr,Wt,$x,QBr,yCe,HBr,UBr,Qc,JBr,xCe,YBr,KBr,XK,ZBr,eIr,oIr,V3,rIr,Or,kx,tIr,$Ce,aIr,nIr,Fn,sIr,kCe,lIr,iIr,SCe,dIr,cIr,RCe,fIr,mIr,gIr,xe,X3,PCe,hIr,pIr,zK,uIr,_Ir,bIr,z3,BCe,vIr,FIr,WK,TIr,MIr,EIr,W3,ICe,CIr,wIr,QK,AIr,LIr,yIr,Q3,NCe,xIr,$Ir,HK,kIr,SIr,RIr,H3,qCe,PIr,BIr,UK,IIr,NIr,qIr,U3,jCe,jIr,DIr,JK,GIr,OIr,VIr,J3,DCe,XIr,zIr,YK,WIr,QIr,HIr,Y3,GCe,UIr,JIr,KK,YIr,KIr,ZIr,K3,OCe,eNr,oNr,ZK,rNr,tNr,aNr,Z3,VCe,nNr,sNr,eZ,lNr,iNr,dNr,e0,NOe,Hc,o0,XCe,Sx,cNr,zCe,fNr,qOe,pr,Rx,mNr,Uc,gNr,oZ,hNr,pNr,rZ,uNr,_Nr,bNr,Px,vNr,WCe,FNr,TNr,MNr,Qt,Bx,ENr,QCe,CNr,wNr,Jc,ANr,HCe,LNr,yNr,tZ,xNr,$Nr,kNr,r0,SNr,Vr,Ix,RNr,UCe,PNr,BNr,Tn,INr,JCe,NNr,qNr,YCe,jNr,DNr,KCe,GNr,ONr,VNr,Ee,t0,ZCe,XNr,zNr,aZ,WNr,QNr,HNr,a0,e5e,UNr,JNr,nZ,YNr,KNr,ZNr,n0,o5e,eqr,oqr,sZ,rqr,tqr,aqr,s0,r5e,nqr,sqr,lZ,lqr,iqr,dqr,l0,t5e,cqr,fqr,iZ,mqr,gqr,hqr,i0,a5e,pqr,uqr,dZ,_qr,bqr,vqr,d0,n5e,Fqr,Tqr,cZ,Mqr,Eqr,Cqr,c0,s5e,wqr,Aqr,fZ,Lqr,yqr,xqr,f0,l5e,$qr,kqr,mZ,Sqr,Rqr,Pqr,m0,i5e,Bqr,Iqr,gZ,Nqr,qqr,jqr,g0,d5e,Dqr,Gqr,hZ,Oqr,Vqr,Xqr,h0,c5e,zqr,Wqr,pZ,Qqr,Hqr,Uqr,p0,f5e,Jqr,Yqr,uZ,Kqr,Zqr,ejr,u0,jOe,Yc,_0,m5e,Nx,ojr,g5e,rjr,DOe,ur,qx,tjr,Kc,ajr,_Z,njr,sjr,bZ,ljr,ijr,djr,jx,cjr,h5e,fjr,mjr,gjr,Ht,Dx,hjr,p5e,pjr,ujr,Zc,_jr,u5e,bjr,vjr,vZ,Fjr,Tjr,Mjr,b0,Ejr,Xr,Gx,Cjr,_5e,wjr,Ajr,Mn,Ljr,b5e,yjr,xjr,v5e,$jr,kjr,F5e,Sjr,Rjr,Pjr,$e,v0,T5e,Bjr,Ijr,FZ,Njr,qjr,jjr,F0,M5e,Djr,Gjr,TZ,Ojr,Vjr,Xjr,T0,E5e,zjr,Wjr,MZ,Qjr,Hjr,Ujr,M0,C5e,Jjr,Yjr,EZ,Kjr,Zjr,eDr,E0,w5e,oDr,rDr,CZ,tDr,aDr,nDr,C0,A5e,sDr,lDr,wZ,iDr,dDr,cDr,w0,L5e,fDr,mDr,AZ,gDr,hDr,pDr,A0,y5e,uDr,_Dr,LZ,bDr,vDr,FDr,L0,x5e,TDr,MDr,yZ,EDr,CDr,wDr,y0,$5e,ADr,LDr,xZ,yDr,xDr,$Dr,x0,GOe,ef,$0,k5e,Ox,kDr,S5e,SDr,OOe,_r,Vx,RDr,of,PDr,$Z,BDr,IDr,kZ,NDr,qDr,jDr,Xx,DDr,R5e,GDr,ODr,VDr,Ut,zx,XDr,P5e,zDr,WDr,rf,QDr,B5e,HDr,UDr,SZ,JDr,YDr,KDr,k0,ZDr,zr,Wx,eGr,I5e,oGr,rGr,En,tGr,N5e,aGr,nGr,q5e,sGr,lGr,j5e,iGr,dGr,cGr,ke,S0,D5e,fGr,mGr,RZ,gGr,hGr,pGr,R0,G5e,uGr,_Gr,PZ,bGr,vGr,FGr,P0,O5e,TGr,MGr,BZ,EGr,CGr,wGr,B0,V5e,AGr,LGr,IZ,yGr,xGr,$Gr,I0,X5e,kGr,SGr,NZ,RGr,PGr,BGr,N0,z5e,IGr,NGr,qZ,qGr,jGr,DGr,q0,W5e,GGr,OGr,jZ,VGr,XGr,zGr,j0,Q5e,WGr,QGr,DZ,HGr,UGr,JGr,D0,H5e,YGr,KGr,GZ,ZGr,eOr,oOr,G0,U5e,rOr,tOr,OZ,aOr,nOr,sOr,O0,VOe,tf,V0,J5e,Qx,lOr,Y5e,iOr,XOe,br,Hx,dOr,af,cOr,VZ,fOr,mOr,XZ,gOr,hOr,pOr,Ux,uOr,K5e,_Or,bOr,vOr,Jt,Jx,FOr,Z5e,TOr,MOr,nf,EOr,e3e,COr,wOr,zZ,AOr,LOr,yOr,X0,xOr,Wr,Yx,$Or,o3e,kOr,SOr,Cn,ROr,r3e,POr,BOr,t3e,IOr,NOr,a3e,qOr,jOr,DOr,Se,z0,n3e,GOr,OOr,WZ,VOr,XOr,zOr,W0,s3e,WOr,QOr,QZ,HOr,UOr,JOr,Q0,l3e,YOr,KOr,HZ,ZOr,eVr,oVr,H0,i3e,rVr,tVr,UZ,aVr,nVr,sVr,U0,d3e,lVr,iVr,JZ,dVr,cVr,fVr,J0,c3e,mVr,gVr,YZ,hVr,pVr,uVr,Y0,f3e,_Vr,bVr,KZ,vVr,FVr,TVr,K0,m3e,MVr,EVr,ZZ,CVr,wVr,AVr,Z0,g3e,LVr,yVr,eee,xVr,$Vr,kVr,ew,h3e,SVr,RVr,oee,PVr,BVr,IVr,ow,zOe,sf,rw,p3e,Kx,NVr,u3e,qVr,WOe,vr,Zx,jVr,lf,DVr,ree,GVr,OVr,tee,VVr,XVr,zVr,e$,WVr,_3e,QVr,HVr,UVr,Yt,o$,JVr,b3e,YVr,KVr,df,ZVr,v3e,eXr,oXr,aee,rXr,tXr,aXr,tw,nXr,Qr,r$,sXr,F3e,lXr,iXr,wn,dXr,T3e,cXr,fXr,M3e,mXr,gXr,E3e,hXr,pXr,uXr,Re,aw,C3e,_Xr,bXr,nee,vXr,FXr,TXr,nw,w3e,MXr,EXr,see,CXr,wXr,AXr,sw,A3e,LXr,yXr,lee,xXr,$Xr,kXr,lw,L3e,SXr,RXr,iee,PXr,BXr,IXr,iw,y3e,NXr,qXr,dee,jXr,DXr,GXr,dw,x3e,OXr,VXr,cee,XXr,zXr,WXr,cw,$3e,QXr,HXr,fee,UXr,JXr,YXr,fw,k3e,KXr,ZXr,mee,ezr,ozr,rzr,mw,S3e,tzr,azr,gee,nzr,szr,lzr,gw,R3e,izr,dzr,hee,czr,fzr,mzr,hw,QOe,cf,pw,P3e,t$,gzr,B3e,hzr,HOe,Fr,a$,pzr,ff,uzr,pee,_zr,bzr,uee,vzr,Fzr,Tzr,n$,Mzr,I3e,Ezr,Czr,wzr,Kt,s$,Azr,N3e,Lzr,yzr,mf,xzr,q3e,$zr,kzr,_ee,Szr,Rzr,Pzr,uw,Bzr,Hr,l$,Izr,j3e,Nzr,qzr,An,jzr,D3e,Dzr,Gzr,G3e,Ozr,Vzr,O3e,Xzr,zzr,Wzr,Ve,_w,V3e,Qzr,Hzr,bee,Uzr,Jzr,Yzr,bw,X3e,Kzr,Zzr,vee,eWr,oWr,rWr,vw,z3e,tWr,aWr,Fee,nWr,sWr,lWr,Fw,W3e,iWr,dWr,Tee,cWr,fWr,mWr,Tw,Q3e,gWr,hWr,Mee,pWr,uWr,_Wr,Mw,H3e,bWr,vWr,Eee,FWr,TWr,MWr,Ew,U3e,EWr,CWr,Cee,wWr,AWr,LWr,Cw,J3e,yWr,xWr,wee,$Wr,kWr,SWr,ww,UOe,gf,Aw,Y3e,i$,RWr,K3e,PWr,JOe,Tr,d$,BWr,hf,IWr,Aee,NWr,qWr,Lee,jWr,DWr,GWr,c$,OWr,Z3e,VWr,XWr,zWr,Zt,f$,WWr,e0e,QWr,HWr,pf,UWr,o0e,JWr,YWr,yee,KWr,ZWr,eQr,Lw,oQr,Ur,m$,rQr,r0e,tQr,aQr,Ln,nQr,t0e,sQr,lQr,a0e,iQr,dQr,n0e,cQr,fQr,mQr,Xe,yw,s0e,gQr,hQr,xee,pQr,uQr,_Qr,xw,l0e,bQr,vQr,$ee,FQr,TQr,MQr,$w,i0e,EQr,CQr,kee,wQr,AQr,LQr,kw,d0e,yQr,xQr,See,$Qr,kQr,SQr,Sw,c0e,RQr,PQr,Ree,BQr,IQr,NQr,Rw,f0e,qQr,jQr,Pee,DQr,GQr,OQr,Pw,m0e,VQr,XQr,Bee,zQr,WQr,QQr,Bw,g0e,HQr,UQr,Iee,JQr,YQr,KQr,Iw,YOe,uf,Nw,h0e,g$,ZQr,p0e,eHr,KOe,Mr,h$,oHr,_f,rHr,Nee,tHr,aHr,qee,nHr,sHr,lHr,p$,iHr,u0e,dHr,cHr,fHr,ea,u$,mHr,_0e,gHr,hHr,bf,pHr,b0e,uHr,_Hr,jee,bHr,vHr,FHr,qw,THr,Jr,_$,MHr,v0e,EHr,CHr,yn,wHr,F0e,AHr,LHr,T0e,yHr,xHr,M0e,$Hr,kHr,SHr,E0e,jw,C0e,RHr,PHr,Dee,BHr,IHr,NHr,Dw,ZOe,vf,Gw,w0e,b$,qHr,A0e,jHr,eVe,Er,v$,DHr,Ff,GHr,Gee,OHr,VHr,Oee,XHr,zHr,WHr,F$,QHr,L0e,HHr,UHr,JHr,oa,T$,YHr,y0e,KHr,ZHr,Tf,eUr,x0e,oUr,rUr,Vee,tUr,aUr,nUr,Ow,sUr,Yr,M$,lUr,$0e,iUr,dUr,xn,cUr,k0e,fUr,mUr,S0e,gUr,hUr,R0e,pUr,uUr,_Ur,E$,Vw,P0e,bUr,vUr,Xee,FUr,TUr,MUr,Xw,B0e,EUr,CUr,zee,wUr,AUr,LUr,zw,oVe,Mf,Ww,I0e,C$,yUr,N0e,xUr,rVe,Cr,w$,$Ur,Ef,kUr,Wee,SUr,RUr,Qee,PUr,BUr,IUr,A$,NUr,q0e,qUr,jUr,DUr,ra,L$,GUr,j0e,OUr,VUr,Cf,XUr,D0e,zUr,WUr,Hee,QUr,HUr,UUr,Qw,JUr,Kr,y$,YUr,G0e,KUr,ZUr,$n,eJr,O0e,oJr,rJr,V0e,tJr,aJr,X0e,nJr,sJr,lJr,z0e,Hw,W0e,iJr,dJr,Uee,cJr,fJr,mJr,Uw,tVe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),vL=new re({}),FL=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Rf=new gJr({props:{warning:!0,$$slots:{default:[bqt]},$$scope:{ctx:y}}}),TL=new re({}),ML=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L594"}}),wL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L617"}}),Dg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[vqt]},$$scope:{ctx:y}}}),AL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L740"}}),LL=new re({}),yL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L399"}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17427/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L413"}}),Mh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Fqt]},$$scope:{ctx:y}}}),SL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L612"}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),tp=new gJr({props:{$$slots:{default:[Tqt]},$$scope:{ctx:y}}}),ap=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[Mqt]},$$scope:{ctx:y}}}),qL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),jL=new re({}),DL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L88"}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L102"}}),Cp=new gJr({props:{$$slots:{default:[Eqt]},$$scope:{ctx:y}}}),wp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[Cqt]},$$scope:{ctx:y}}}),XL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L255"}}),zL=new re({}),WL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L756"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),yp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[wqt]},$$scope:{ctx:y}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),L_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[Aqt]},$$scope:{ctx:y}}}),JL=new re({}),YL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L763"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),x_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[Lqt]},$$scope:{ctx:y}}}),ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),F2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[yqt]},$$scope:{ctx:y}}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L778"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),M2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[xqt]},$$scope:{ctx:y}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),i1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[$qt]},$$scope:{ctx:y}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L785"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),c1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[kqt]},$$scope:{ctx:y}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),H1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Sqt]},$$scope:{ctx:y}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L792"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),J1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Rqt]},$$scope:{ctx:y}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),p7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Pqt]},$$scope:{ctx:y}}}),uy=new re({}),_y=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L801"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),_7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[Bqt]},$$scope:{ctx:y}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),mb=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Iqt]},$$scope:{ctx:y}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L846"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),hb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[Nqt]},$$scope:{ctx:y}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),zb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[qqt]},$$scope:{ctx:y}}}),Ay=new re({}),Ly=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L853"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Qb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[jqt]},$$scope:{ctx:y}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),e4=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Dqt]},$$scope:{ctx:y}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L839"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),r4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[Gqt]},$$scope:{ctx:y}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),q4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Oqt]},$$scope:{ctx:y}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L810"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),D4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Vqt]},$$scope:{ctx:y}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L817"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[zqt]},$$scope:{ctx:y}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Rv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L862"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Bv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Uv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L901"}}),e8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Yv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),o8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),r8=new re({}),t8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L828"}}),n8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),s8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),nF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),l8=new re({}),i8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L908"}}),c8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),lF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),bF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),m8=new re({}),g8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L931"}}),p8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),FF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),_8=new re({}),b8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L915"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),GF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),M8=new re({}),E8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L922"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),VF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),QF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),y8=new re({}),x8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L940"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),UF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),rT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),R8=new re({}),P8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L947"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),aT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),dT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),q8=new re({}),j8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L894"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),fT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),pT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),X8=new re({}),z8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L869"}}),Q8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),_T=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),FT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),U8=new re({}),J8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L876"}}),K8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),MT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),Z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),yT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),e9=new re({}),o9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L885"}}),t9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),a9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),n9=new re({}),s9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),i9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),d9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),xM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),c9=new re({}),f9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),g9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),kM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),h9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),p9=new re({}),u9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),b9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),tE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),v9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),_E=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),F9=new re({}),T9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),E9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),vE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),C9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),w9=new re({}),A9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),y9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),LE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),x9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),$9=new re({}),k9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),R9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),P9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),B9=new re({}),I9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),j9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),D9=new re({}),G9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),V9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),X9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),z9=new re({}),W9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),H9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),U9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),Y9=new re({}),K9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),ex=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),rx=new re({}),tx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),g5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),P5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),lx=new re({}),ix=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),mx=new re({}),gx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),_x=new re({}),bx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),f3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),Mx=new re({}),Ex=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),wx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),g3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),Lx=new re({}),yx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),$x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ujt]},$$scope:{ctx:y}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Jjt]},$$scope:{ctx:y}}}),Sx=new re({}),Rx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Yjt]},$$scope:{ctx:y}}}),Ix=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Kjt]},$$scope:{ctx:y}}}),Nx=new re({}),qx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Dx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),b0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Zjt]},$$scope:{ctx:y}}}),Gx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[eDt]},$$scope:{ctx:y}}}),Ox=new re({}),Vx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[oDt]},$$scope:{ctx:y}}}),Wx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[rDt]},$$scope:{ctx:y}}}),Qx=new re({}),Hx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Jx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[tDt]},$$scope:{ctx:y}}}),Yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[aDt]},$$scope:{ctx:y}}}),Kx=new re({}),Zx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),o$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[nDt]},$$scope:{ctx:y}}}),r$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[sDt]},$$scope:{ctx:y}}}),t$=new re({}),a$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),s$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[lDt]},$$scope:{ctx:y}}}),l$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ww=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[iDt]},$$scope:{ctx:y}}}),i$=new re({}),d$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),f$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Lw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[dDt]},$$scope:{ctx:y}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[cDt]},$$scope:{ctx:y}}}),g$=new re({}),h$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[fDt]},$$scope:{ctx:y}}}),_$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[mDt]},$$scope:{ctx:y}}}),b$=new re({}),v$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),T$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[gDt]},$$scope:{ctx:y}}}),M$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hDt]},$$scope:{ctx:y}}}),C$=new re({}),w$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),L$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Qw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[pDt]},$$scope:{ctx:y}}}),y$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[uDt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ti=o("Auto Classes"),yf=l(),nt=a("p"),Mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=a("code"),pL=o("from_pretrained()"),xf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ci=o("Instantiating one of "),Sn=a("a"),uL=o("AutoConfig"),Rn=o(", "),Pn=a("a"),_L=o("AutoModel"),wi=o(`, and
`),Bn=a("a"),bL=o("AutoTokenizer"),Ai=o(" will directly create a class of the relevant architecture. For instance"),$f=l(),F(xa.$$.fragment),Qe=l(),Ae=a("p"),zk=o("will create a model that is an instance of "),Li=a("a"),Wk=o("BertModel"),Qk=o("."),Co=l(),$a=a("p"),Hk=o("There is one class of "),kf=a("code"),Uk=o("AutoModel"),gze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),KDe=l(),yi=a("h2"),Sf=a("a"),Xre=a("span"),F(vL.$$.fragment),hze=l(),zre=a("span"),pze=o("Extending the Auto Classes"),ZDe=l(),In=a("p"),uze=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wre=a("code"),_ze=o("NewModel"),bze=o(", make sure you have a "),Qre=a("code"),vze=o("NewModelConfig"),Fze=o(` then you can add those to the auto
classes like this:`),eGe=l(),F(FL.$$.fragment),oGe=l(),Jk=a("p"),Tze=o("You will then be able to use the auto classes like you would usually do!"),rGe=l(),F(Rf.$$.fragment),tGe=l(),xi=a("h2"),Pf=a("a"),Hre=a("span"),F(TL.$$.fragment),Mze=l(),Ure=a("span"),Eze=o("AutoConfig"),aGe=l(),wo=a("div"),F(ML.$$.fragment),Cze=l(),EL=a("p"),wze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Yk=a("a"),Aze=o("from_pretrained()"),Lze=o(" class method."),yze=l(),CL=a("p"),xze=o("This class cannot be instantiated directly using "),Jre=a("code"),$ze=o("__init__()"),kze=o(" (throws an error)."),Sze=l(),wr=a("div"),F(wL.$$.fragment),Rze=l(),Yre=a("p"),Pze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Bze=l(),$i=a("p"),Ize=o("The configuration class to instantiate is selected based on the "),Kre=a("code"),Nze=o("model_type"),qze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zre=a("code"),jze=o("pretrained_model_name_or_path"),Dze=o(":"),Gze=l(),A=a("ul"),Bf=a("li"),ete=a("strong"),Oze=o("albert"),Vze=o(" \u2014 "),Kk=a("a"),Xze=o("AlbertConfig"),zze=o(" (ALBERT model)"),Wze=l(),If=a("li"),ote=a("strong"),Qze=o("bart"),Hze=o(" \u2014 "),Zk=a("a"),Uze=o("BartConfig"),Jze=o(" (BART model)"),Yze=l(),Nf=a("li"),rte=a("strong"),Kze=o("beit"),Zze=o(" \u2014 "),eS=a("a"),eWe=o("BeitConfig"),oWe=o(" (BEiT model)"),rWe=l(),qf=a("li"),tte=a("strong"),tWe=o("bert"),aWe=o(" \u2014 "),oS=a("a"),nWe=o("BertConfig"),sWe=o(" (BERT model)"),lWe=l(),jf=a("li"),ate=a("strong"),iWe=o("bert-generation"),dWe=o(" \u2014 "),rS=a("a"),cWe=o("BertGenerationConfig"),fWe=o(" (Bert Generation model)"),mWe=l(),Df=a("li"),nte=a("strong"),gWe=o("big_bird"),hWe=o(" \u2014 "),tS=a("a"),pWe=o("BigBirdConfig"),uWe=o(" (BigBird model)"),_We=l(),Gf=a("li"),ste=a("strong"),bWe=o("bigbird_pegasus"),vWe=o(" \u2014 "),aS=a("a"),FWe=o("BigBirdPegasusConfig"),TWe=o(" (BigBird-Pegasus model)"),MWe=l(),Of=a("li"),lte=a("strong"),EWe=o("blenderbot"),CWe=o(" \u2014 "),nS=a("a"),wWe=o("BlenderbotConfig"),AWe=o(" (Blenderbot model)"),LWe=l(),Vf=a("li"),ite=a("strong"),yWe=o("blenderbot-small"),xWe=o(" \u2014 "),sS=a("a"),$We=o("BlenderbotSmallConfig"),kWe=o(" (BlenderbotSmall model)"),SWe=l(),Xf=a("li"),dte=a("strong"),RWe=o("bloom"),PWe=o(" \u2014 "),lS=a("a"),BWe=o("BloomConfig"),IWe=o(" (BLOOM model)"),NWe=l(),zf=a("li"),cte=a("strong"),qWe=o("camembert"),jWe=o(" \u2014 "),iS=a("a"),DWe=o("CamembertConfig"),GWe=o(" (CamemBERT model)"),OWe=l(),Wf=a("li"),fte=a("strong"),VWe=o("canine"),XWe=o(" \u2014 "),dS=a("a"),zWe=o("CanineConfig"),WWe=o(" (CANINE model)"),QWe=l(),Qf=a("li"),mte=a("strong"),HWe=o("clip"),UWe=o(" \u2014 "),cS=a("a"),JWe=o("CLIPConfig"),YWe=o(" (CLIP model)"),KWe=l(),Hf=a("li"),gte=a("strong"),ZWe=o("convbert"),eQe=o(" \u2014 "),fS=a("a"),oQe=o("ConvBertConfig"),rQe=o(" (ConvBERT model)"),tQe=l(),Uf=a("li"),hte=a("strong"),aQe=o("convnext"),nQe=o(" \u2014 "),mS=a("a"),sQe=o("ConvNextConfig"),lQe=o(" (ConvNeXT model)"),iQe=l(),Jf=a("li"),pte=a("strong"),dQe=o("ctrl"),cQe=o(" \u2014 "),gS=a("a"),fQe=o("CTRLConfig"),mQe=o(" (CTRL model)"),gQe=l(),Yf=a("li"),ute=a("strong"),hQe=o("cvt"),pQe=o(" \u2014 "),hS=a("a"),uQe=o("CvtConfig"),_Qe=o(" (CvT model)"),bQe=l(),Kf=a("li"),_te=a("strong"),vQe=o("data2vec-audio"),FQe=o(" \u2014 "),pS=a("a"),TQe=o("Data2VecAudioConfig"),MQe=o(" (Data2VecAudio model)"),EQe=l(),Zf=a("li"),bte=a("strong"),CQe=o("data2vec-text"),wQe=o(" \u2014 "),uS=a("a"),AQe=o("Data2VecTextConfig"),LQe=o(" (Data2VecText model)"),yQe=l(),em=a("li"),vte=a("strong"),xQe=o("data2vec-vision"),$Qe=o(" \u2014 "),_S=a("a"),kQe=o("Data2VecVisionConfig"),SQe=o(" (Data2VecVision model)"),RQe=l(),om=a("li"),Fte=a("strong"),PQe=o("deberta"),BQe=o(" \u2014 "),bS=a("a"),IQe=o("DebertaConfig"),NQe=o(" (DeBERTa model)"),qQe=l(),rm=a("li"),Tte=a("strong"),jQe=o("deberta-v2"),DQe=o(" \u2014 "),vS=a("a"),GQe=o("DebertaV2Config"),OQe=o(" (DeBERTa-v2 model)"),VQe=l(),tm=a("li"),Mte=a("strong"),XQe=o("decision_transformer"),zQe=o(" \u2014 "),FS=a("a"),WQe=o("DecisionTransformerConfig"),QQe=o(" (Decision Transformer model)"),HQe=l(),am=a("li"),Ete=a("strong"),UQe=o("deit"),JQe=o(" \u2014 "),TS=a("a"),YQe=o("DeiTConfig"),KQe=o(" (DeiT model)"),ZQe=l(),nm=a("li"),Cte=a("strong"),eHe=o("detr"),oHe=o(" \u2014 "),MS=a("a"),rHe=o("DetrConfig"),tHe=o(" (DETR model)"),aHe=l(),sm=a("li"),wte=a("strong"),nHe=o("distilbert"),sHe=o(" \u2014 "),ES=a("a"),lHe=o("DistilBertConfig"),iHe=o(" (DistilBERT model)"),dHe=l(),lm=a("li"),Ate=a("strong"),cHe=o("dpr"),fHe=o(" \u2014 "),CS=a("a"),mHe=o("DPRConfig"),gHe=o(" (DPR model)"),hHe=l(),im=a("li"),Lte=a("strong"),pHe=o("dpt"),uHe=o(" \u2014 "),wS=a("a"),_He=o("DPTConfig"),bHe=o(" (DPT model)"),vHe=l(),dm=a("li"),yte=a("strong"),FHe=o("electra"),THe=o(" \u2014 "),AS=a("a"),MHe=o("ElectraConfig"),EHe=o(" (ELECTRA model)"),CHe=l(),cm=a("li"),xte=a("strong"),wHe=o("encoder-decoder"),AHe=o(" \u2014 "),LS=a("a"),LHe=o("EncoderDecoderConfig"),yHe=o(" (Encoder decoder model)"),xHe=l(),fm=a("li"),$te=a("strong"),$He=o("flaubert"),kHe=o(" \u2014 "),yS=a("a"),SHe=o("FlaubertConfig"),RHe=o(" (FlauBERT model)"),PHe=l(),mm=a("li"),kte=a("strong"),BHe=o("flava"),IHe=o(" \u2014 "),xS=a("a"),NHe=o("FlavaConfig"),qHe=o(" (FLAVA model)"),jHe=l(),gm=a("li"),Ste=a("strong"),DHe=o("fnet"),GHe=o(" \u2014 "),$S=a("a"),OHe=o("FNetConfig"),VHe=o(" (FNet model)"),XHe=l(),hm=a("li"),Rte=a("strong"),zHe=o("fsmt"),WHe=o(" \u2014 "),kS=a("a"),QHe=o("FSMTConfig"),HHe=o(" (FairSeq Machine-Translation model)"),UHe=l(),pm=a("li"),Pte=a("strong"),JHe=o("funnel"),YHe=o(" \u2014 "),SS=a("a"),KHe=o("FunnelConfig"),ZHe=o(" (Funnel Transformer model)"),eUe=l(),um=a("li"),Bte=a("strong"),oUe=o("glpn"),rUe=o(" \u2014 "),RS=a("a"),tUe=o("GLPNConfig"),aUe=o(" (GLPN model)"),nUe=l(),_m=a("li"),Ite=a("strong"),sUe=o("gpt2"),lUe=o(" \u2014 "),PS=a("a"),iUe=o("GPT2Config"),dUe=o(" (OpenAI GPT-2 model)"),cUe=l(),bm=a("li"),Nte=a("strong"),fUe=o("gpt_neo"),mUe=o(" \u2014 "),BS=a("a"),gUe=o("GPTNeoConfig"),hUe=o(" (GPT Neo model)"),pUe=l(),vm=a("li"),qte=a("strong"),uUe=o("gpt_neox"),_Ue=o(" \u2014 "),IS=a("a"),bUe=o("GPTNeoXConfig"),vUe=o(" (GPT NeoX model)"),FUe=l(),Fm=a("li"),jte=a("strong"),TUe=o("gptj"),MUe=o(" \u2014 "),NS=a("a"),EUe=o("GPTJConfig"),CUe=o(" (GPT-J model)"),wUe=l(),Tm=a("li"),Dte=a("strong"),AUe=o("hubert"),LUe=o(" \u2014 "),qS=a("a"),yUe=o("HubertConfig"),xUe=o(" (Hubert model)"),$Ue=l(),Mm=a("li"),Gte=a("strong"),kUe=o("ibert"),SUe=o(" \u2014 "),jS=a("a"),RUe=o("IBertConfig"),PUe=o(" (I-BERT model)"),BUe=l(),Em=a("li"),Ote=a("strong"),IUe=o("imagegpt"),NUe=o(" \u2014 "),DS=a("a"),qUe=o("ImageGPTConfig"),jUe=o(" (ImageGPT model)"),DUe=l(),Cm=a("li"),Vte=a("strong"),GUe=o("layoutlm"),OUe=o(" \u2014 "),GS=a("a"),VUe=o("LayoutLMConfig"),XUe=o(" (LayoutLM model)"),zUe=l(),wm=a("li"),Xte=a("strong"),WUe=o("layoutlmv2"),QUe=o(" \u2014 "),OS=a("a"),HUe=o("LayoutLMv2Config"),UUe=o(" (LayoutLMv2 model)"),JUe=l(),Am=a("li"),zte=a("strong"),YUe=o("layoutlmv3"),KUe=o(" \u2014 "),VS=a("a"),ZUe=o("LayoutLMv3Config"),eJe=o(" (LayoutLMv3 model)"),oJe=l(),Lm=a("li"),Wte=a("strong"),rJe=o("led"),tJe=o(" \u2014 "),XS=a("a"),aJe=o("LEDConfig"),nJe=o(" (LED model)"),sJe=l(),ym=a("li"),Qte=a("strong"),lJe=o("levit"),iJe=o(" \u2014 "),zS=a("a"),dJe=o("LevitConfig"),cJe=o(" (LeViT model)"),fJe=l(),xm=a("li"),Hte=a("strong"),mJe=o("longformer"),gJe=o(" \u2014 "),WS=a("a"),hJe=o("LongformerConfig"),pJe=o(" (Longformer model)"),uJe=l(),$m=a("li"),Ute=a("strong"),_Je=o("longt5"),bJe=o(" \u2014 "),QS=a("a"),vJe=o("LongT5Config"),FJe=o(" (LongT5 model)"),TJe=l(),km=a("li"),Jte=a("strong"),MJe=o("luke"),EJe=o(" \u2014 "),HS=a("a"),CJe=o("LukeConfig"),wJe=o(" (LUKE model)"),AJe=l(),Sm=a("li"),Yte=a("strong"),LJe=o("lxmert"),yJe=o(" \u2014 "),US=a("a"),xJe=o("LxmertConfig"),$Je=o(" (LXMERT model)"),kJe=l(),Rm=a("li"),Kte=a("strong"),SJe=o("m2m_100"),RJe=o(" \u2014 "),JS=a("a"),PJe=o("M2M100Config"),BJe=o(" (M2M100 model)"),IJe=l(),Pm=a("li"),Zte=a("strong"),NJe=o("marian"),qJe=o(" \u2014 "),YS=a("a"),jJe=o("MarianConfig"),DJe=o(" (Marian model)"),GJe=l(),Bm=a("li"),eae=a("strong"),OJe=o("maskformer"),VJe=o(" \u2014 "),KS=a("a"),XJe=o("MaskFormerConfig"),zJe=o(" (MaskFormer model)"),WJe=l(),Im=a("li"),oae=a("strong"),QJe=o("mbart"),HJe=o(" \u2014 "),ZS=a("a"),UJe=o("MBartConfig"),JJe=o(" (mBART model)"),YJe=l(),Nm=a("li"),rae=a("strong"),KJe=o("mctct"),ZJe=o(" \u2014 "),eR=a("a"),eYe=o("MCTCTConfig"),oYe=o(" (M-CTC-T model)"),rYe=l(),qm=a("li"),tae=a("strong"),tYe=o("megatron-bert"),aYe=o(" \u2014 "),oR=a("a"),nYe=o("MegatronBertConfig"),sYe=o(" (Megatron-BERT model)"),lYe=l(),jm=a("li"),aae=a("strong"),iYe=o("mobilebert"),dYe=o(" \u2014 "),rR=a("a"),cYe=o("MobileBertConfig"),fYe=o(" (MobileBERT model)"),mYe=l(),Dm=a("li"),nae=a("strong"),gYe=o("mpnet"),hYe=o(" \u2014 "),tR=a("a"),pYe=o("MPNetConfig"),uYe=o(" (MPNet model)"),_Ye=l(),Gm=a("li"),sae=a("strong"),bYe=o("mt5"),vYe=o(" \u2014 "),aR=a("a"),FYe=o("MT5Config"),TYe=o(" (MT5 model)"),MYe=l(),Om=a("li"),lae=a("strong"),EYe=o("nystromformer"),CYe=o(" \u2014 "),nR=a("a"),wYe=o("NystromformerConfig"),AYe=o(" (Nystr\xF6mformer model)"),LYe=l(),Vm=a("li"),iae=a("strong"),yYe=o("openai-gpt"),xYe=o(" \u2014 "),sR=a("a"),$Ye=o("OpenAIGPTConfig"),kYe=o(" (OpenAI GPT model)"),SYe=l(),Xm=a("li"),dae=a("strong"),RYe=o("opt"),PYe=o(" \u2014 "),lR=a("a"),BYe=o("OPTConfig"),IYe=o(" (OPT model)"),NYe=l(),zm=a("li"),cae=a("strong"),qYe=o("pegasus"),jYe=o(" \u2014 "),iR=a("a"),DYe=o("PegasusConfig"),GYe=o(" (Pegasus model)"),OYe=l(),Wm=a("li"),fae=a("strong"),VYe=o("perceiver"),XYe=o(" \u2014 "),dR=a("a"),zYe=o("PerceiverConfig"),WYe=o(" (Perceiver model)"),QYe=l(),Qm=a("li"),mae=a("strong"),HYe=o("plbart"),UYe=o(" \u2014 "),cR=a("a"),JYe=o("PLBartConfig"),YYe=o(" (PLBart model)"),KYe=l(),Hm=a("li"),gae=a("strong"),ZYe=o("poolformer"),eKe=o(" \u2014 "),fR=a("a"),oKe=o("PoolFormerConfig"),rKe=o(" (PoolFormer model)"),tKe=l(),Um=a("li"),hae=a("strong"),aKe=o("prophetnet"),nKe=o(" \u2014 "),mR=a("a"),sKe=o("ProphetNetConfig"),lKe=o(" (ProphetNet model)"),iKe=l(),Jm=a("li"),pae=a("strong"),dKe=o("qdqbert"),cKe=o(" \u2014 "),gR=a("a"),fKe=o("QDQBertConfig"),mKe=o(" (QDQBert model)"),gKe=l(),Ym=a("li"),uae=a("strong"),hKe=o("rag"),pKe=o(" \u2014 "),hR=a("a"),uKe=o("RagConfig"),_Ke=o(" (RAG model)"),bKe=l(),Km=a("li"),_ae=a("strong"),vKe=o("realm"),FKe=o(" \u2014 "),pR=a("a"),TKe=o("RealmConfig"),MKe=o(" (REALM model)"),EKe=l(),Zm=a("li"),bae=a("strong"),CKe=o("reformer"),wKe=o(" \u2014 "),uR=a("a"),AKe=o("ReformerConfig"),LKe=o(" (Reformer model)"),yKe=l(),eg=a("li"),vae=a("strong"),xKe=o("regnet"),$Ke=o(" \u2014 "),_R=a("a"),kKe=o("RegNetConfig"),SKe=o(" (RegNet model)"),RKe=l(),og=a("li"),Fae=a("strong"),PKe=o("rembert"),BKe=o(" \u2014 "),bR=a("a"),IKe=o("RemBertConfig"),NKe=o(" (RemBERT model)"),qKe=l(),rg=a("li"),Tae=a("strong"),jKe=o("resnet"),DKe=o(" \u2014 "),vR=a("a"),GKe=o("ResNetConfig"),OKe=o(" (ResNet model)"),VKe=l(),tg=a("li"),Mae=a("strong"),XKe=o("retribert"),zKe=o(" \u2014 "),FR=a("a"),WKe=o("RetriBertConfig"),QKe=o(" (RetriBERT model)"),HKe=l(),ag=a("li"),Eae=a("strong"),UKe=o("roberta"),JKe=o(" \u2014 "),TR=a("a"),YKe=o("RobertaConfig"),KKe=o(" (RoBERTa model)"),ZKe=l(),ng=a("li"),Cae=a("strong"),eZe=o("roformer"),oZe=o(" \u2014 "),MR=a("a"),rZe=o("RoFormerConfig"),tZe=o(" (RoFormer model)"),aZe=l(),sg=a("li"),wae=a("strong"),nZe=o("segformer"),sZe=o(" \u2014 "),ER=a("a"),lZe=o("SegformerConfig"),iZe=o(" (SegFormer model)"),dZe=l(),lg=a("li"),Aae=a("strong"),cZe=o("sew"),fZe=o(" \u2014 "),CR=a("a"),mZe=o("SEWConfig"),gZe=o(" (SEW model)"),hZe=l(),ig=a("li"),Lae=a("strong"),pZe=o("sew-d"),uZe=o(" \u2014 "),wR=a("a"),_Ze=o("SEWDConfig"),bZe=o(" (SEW-D model)"),vZe=l(),dg=a("li"),yae=a("strong"),FZe=o("speech-encoder-decoder"),TZe=o(" \u2014 "),AR=a("a"),MZe=o("SpeechEncoderDecoderConfig"),EZe=o(" (Speech Encoder decoder model)"),CZe=l(),cg=a("li"),xae=a("strong"),wZe=o("speech_to_text"),AZe=o(" \u2014 "),LR=a("a"),LZe=o("Speech2TextConfig"),yZe=o(" (Speech2Text model)"),xZe=l(),fg=a("li"),$ae=a("strong"),$Ze=o("speech_to_text_2"),kZe=o(" \u2014 "),yR=a("a"),SZe=o("Speech2Text2Config"),RZe=o(" (Speech2Text2 model)"),PZe=l(),mg=a("li"),kae=a("strong"),BZe=o("splinter"),IZe=o(" \u2014 "),xR=a("a"),NZe=o("SplinterConfig"),qZe=o(" (Splinter model)"),jZe=l(),gg=a("li"),Sae=a("strong"),DZe=o("squeezebert"),GZe=o(" \u2014 "),$R=a("a"),OZe=o("SqueezeBertConfig"),VZe=o(" (SqueezeBERT model)"),XZe=l(),hg=a("li"),Rae=a("strong"),zZe=o("swin"),WZe=o(" \u2014 "),kR=a("a"),QZe=o("SwinConfig"),HZe=o(" (Swin Transformer model)"),UZe=l(),pg=a("li"),Pae=a("strong"),JZe=o("t5"),YZe=o(" \u2014 "),SR=a("a"),KZe=o("T5Config"),ZZe=o(" (T5 model)"),eeo=l(),ug=a("li"),Bae=a("strong"),oeo=o("tapas"),reo=o(" \u2014 "),RR=a("a"),teo=o("TapasConfig"),aeo=o(" (TAPAS model)"),neo=l(),_g=a("li"),Iae=a("strong"),seo=o("trajectory_transformer"),leo=o(" \u2014 "),PR=a("a"),ieo=o("TrajectoryTransformerConfig"),deo=o(" (Trajectory Transformer model)"),ceo=l(),bg=a("li"),Nae=a("strong"),feo=o("transfo-xl"),meo=o(" \u2014 "),BR=a("a"),geo=o("TransfoXLConfig"),heo=o(" (Transformer-XL model)"),peo=l(),vg=a("li"),qae=a("strong"),ueo=o("trocr"),_eo=o(" \u2014 "),IR=a("a"),beo=o("TrOCRConfig"),veo=o(" (TrOCR model)"),Feo=l(),Fg=a("li"),jae=a("strong"),Teo=o("unispeech"),Meo=o(" \u2014 "),NR=a("a"),Eeo=o("UniSpeechConfig"),Ceo=o(" (UniSpeech model)"),weo=l(),Tg=a("li"),Dae=a("strong"),Aeo=o("unispeech-sat"),Leo=o(" \u2014 "),qR=a("a"),yeo=o("UniSpeechSatConfig"),xeo=o(" (UniSpeechSat model)"),$eo=l(),Mg=a("li"),Gae=a("strong"),keo=o("van"),Seo=o(" \u2014 "),jR=a("a"),Reo=o("VanConfig"),Peo=o(" (VAN model)"),Beo=l(),Eg=a("li"),Oae=a("strong"),Ieo=o("vilt"),Neo=o(" \u2014 "),DR=a("a"),qeo=o("ViltConfig"),jeo=o(" (ViLT model)"),Deo=l(),Cg=a("li"),Vae=a("strong"),Geo=o("vision-encoder-decoder"),Oeo=o(" \u2014 "),GR=a("a"),Veo=o("VisionEncoderDecoderConfig"),Xeo=o(" (Vision Encoder decoder model)"),zeo=l(),wg=a("li"),Xae=a("strong"),Weo=o("vision-text-dual-encoder"),Qeo=o(" \u2014 "),OR=a("a"),Heo=o("VisionTextDualEncoderConfig"),Ueo=o(" (VisionTextDualEncoder model)"),Jeo=l(),Ag=a("li"),zae=a("strong"),Yeo=o("visual_bert"),Keo=o(" \u2014 "),VR=a("a"),Zeo=o("VisualBertConfig"),eoo=o(" (VisualBERT model)"),ooo=l(),Lg=a("li"),Wae=a("strong"),roo=o("vit"),too=o(" \u2014 "),XR=a("a"),aoo=o("ViTConfig"),noo=o(" (ViT model)"),soo=l(),yg=a("li"),Qae=a("strong"),loo=o("vit_mae"),ioo=o(" \u2014 "),zR=a("a"),doo=o("ViTMAEConfig"),coo=o(" (ViTMAE model)"),foo=l(),xg=a("li"),Hae=a("strong"),moo=o("wav2vec2"),goo=o(" \u2014 "),WR=a("a"),hoo=o("Wav2Vec2Config"),poo=o(" (Wav2Vec2 model)"),uoo=l(),$g=a("li"),Uae=a("strong"),_oo=o("wav2vec2-conformer"),boo=o(" \u2014 "),QR=a("a"),voo=o("Wav2Vec2ConformerConfig"),Foo=o(" (Wav2Vec2-Conformer model)"),Too=l(),kg=a("li"),Jae=a("strong"),Moo=o("wavlm"),Eoo=o(" \u2014 "),HR=a("a"),Coo=o("WavLMConfig"),woo=o(" (WavLM model)"),Aoo=l(),Sg=a("li"),Yae=a("strong"),Loo=o("xglm"),yoo=o(" \u2014 "),UR=a("a"),xoo=o("XGLMConfig"),$oo=o(" (XGLM model)"),koo=l(),Rg=a("li"),Kae=a("strong"),Soo=o("xlm"),Roo=o(" \u2014 "),JR=a("a"),Poo=o("XLMConfig"),Boo=o(" (XLM model)"),Ioo=l(),Pg=a("li"),Zae=a("strong"),Noo=o("xlm-prophetnet"),qoo=o(" \u2014 "),YR=a("a"),joo=o("XLMProphetNetConfig"),Doo=o(" (XLM-ProphetNet model)"),Goo=l(),Bg=a("li"),ene=a("strong"),Ooo=o("xlm-roberta"),Voo=o(" \u2014 "),KR=a("a"),Xoo=o("XLMRobertaConfig"),zoo=o(" (XLM-RoBERTa model)"),Woo=l(),Ig=a("li"),one=a("strong"),Qoo=o("xlm-roberta-xl"),Hoo=o(" \u2014 "),ZR=a("a"),Uoo=o("XLMRobertaXLConfig"),Joo=o(" (XLM-RoBERTa-XL model)"),Yoo=l(),Ng=a("li"),rne=a("strong"),Koo=o("xlnet"),Zoo=o(" \u2014 "),eP=a("a"),ero=o("XLNetConfig"),oro=o(" (XLNet model)"),rro=l(),qg=a("li"),tne=a("strong"),tro=o("yolos"),aro=o(" \u2014 "),oP=a("a"),nro=o("YolosConfig"),sro=o(" (YOLOS model)"),lro=l(),jg=a("li"),ane=a("strong"),iro=o("yoso"),dro=o(" \u2014 "),rP=a("a"),cro=o("YosoConfig"),fro=o(" (YOSO model)"),mro=l(),F(Dg.$$.fragment),gro=l(),Gg=a("div"),F(AL.$$.fragment),hro=l(),nne=a("p"),pro=o("Register a new configuration for this class."),nGe=l(),ki=a("h2"),Og=a("a"),sne=a("span"),F(LL.$$.fragment),uro=l(),lne=a("span"),_ro=o("AutoTokenizer"),sGe=l(),Ao=a("div"),F(yL.$$.fragment),bro=l(),xL=a("p"),vro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tP=a("a"),Fro=o("AutoTokenizer.from_pretrained()"),Tro=o(" class method."),Mro=l(),$L=a("p"),Ero=o("This class cannot be instantiated directly using "),ine=a("code"),Cro=o("__init__()"),wro=o(" (throws an error)."),Aro=l(),Ar=a("div"),F(kL.$$.fragment),Lro=l(),dne=a("p"),yro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),xro=l(),ka=a("p"),$ro=o("The tokenizer class to instantiate is selected based on the "),cne=a("code"),kro=o("model_type"),Sro=o(` property of the config object (either
passed as an argument or loaded from `),fne=a("code"),Rro=o("pretrained_model_name_or_path"),Pro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=a("code"),Bro=o("pretrained_model_name_or_path"),Iro=o(":"),Nro=l(),k=a("ul"),Nn=a("li"),gne=a("strong"),qro=o("albert"),jro=o(" \u2014 "),aP=a("a"),Dro=o("AlbertTokenizer"),Gro=o(" or "),nP=a("a"),Oro=o("AlbertTokenizerFast"),Vro=o(" (ALBERT model)"),Xro=l(),qn=a("li"),hne=a("strong"),zro=o("bart"),Wro=o(" \u2014 "),sP=a("a"),Qro=o("BartTokenizer"),Hro=o(" or "),lP=a("a"),Uro=o("BartTokenizerFast"),Jro=o(" (BART model)"),Yro=l(),jn=a("li"),pne=a("strong"),Kro=o("barthez"),Zro=o(" \u2014 "),iP=a("a"),eto=o("BarthezTokenizer"),oto=o(" or "),dP=a("a"),rto=o("BarthezTokenizerFast"),tto=o(" (BARThez model)"),ato=l(),Vg=a("li"),une=a("strong"),nto=o("bartpho"),sto=o(" \u2014 "),cP=a("a"),lto=o("BartphoTokenizer"),ito=o(" (BARTpho model)"),dto=l(),Dn=a("li"),_ne=a("strong"),cto=o("bert"),fto=o(" \u2014 "),fP=a("a"),mto=o("BertTokenizer"),gto=o(" or "),mP=a("a"),hto=o("BertTokenizerFast"),pto=o(" (BERT model)"),uto=l(),Xg=a("li"),bne=a("strong"),_to=o("bert-generation"),bto=o(" \u2014 "),gP=a("a"),vto=o("BertGenerationTokenizer"),Fto=o(" (Bert Generation model)"),Tto=l(),zg=a("li"),vne=a("strong"),Mto=o("bert-japanese"),Eto=o(" \u2014 "),hP=a("a"),Cto=o("BertJapaneseTokenizer"),wto=o(" (BertJapanese model)"),Ato=l(),Wg=a("li"),Fne=a("strong"),Lto=o("bertweet"),yto=o(" \u2014 "),pP=a("a"),xto=o("BertweetTokenizer"),$to=o(" (BERTweet model)"),kto=l(),Gn=a("li"),Tne=a("strong"),Sto=o("big_bird"),Rto=o(" \u2014 "),uP=a("a"),Pto=o("BigBirdTokenizer"),Bto=o(" or "),_P=a("a"),Ito=o("BigBirdTokenizerFast"),Nto=o(" (BigBird model)"),qto=l(),On=a("li"),Mne=a("strong"),jto=o("bigbird_pegasus"),Dto=o(" \u2014 "),bP=a("a"),Gto=o("PegasusTokenizer"),Oto=o(" or "),vP=a("a"),Vto=o("PegasusTokenizerFast"),Xto=o(" (BigBird-Pegasus model)"),zto=l(),Vn=a("li"),Ene=a("strong"),Wto=o("blenderbot"),Qto=o(" \u2014 "),FP=a("a"),Hto=o("BlenderbotTokenizer"),Uto=o(" or "),TP=a("a"),Jto=o("BlenderbotTokenizerFast"),Yto=o(" (Blenderbot model)"),Kto=l(),Qg=a("li"),Cne=a("strong"),Zto=o("blenderbot-small"),eao=o(" \u2014 "),MP=a("a"),oao=o("BlenderbotSmallTokenizer"),rao=o(" (BlenderbotSmall model)"),tao=l(),Hg=a("li"),wne=a("strong"),aao=o("bloom"),nao=o(" \u2014 "),EP=a("a"),sao=o("BloomTokenizerFast"),lao=o(" (BLOOM model)"),iao=l(),Ug=a("li"),Ane=a("strong"),dao=o("byt5"),cao=o(" \u2014 "),CP=a("a"),fao=o("ByT5Tokenizer"),mao=o(" (ByT5 model)"),gao=l(),Xn=a("li"),Lne=a("strong"),hao=o("camembert"),pao=o(" \u2014 "),wP=a("a"),uao=o("CamembertTokenizer"),_ao=o(" or "),AP=a("a"),bao=o("CamembertTokenizerFast"),vao=o(" (CamemBERT model)"),Fao=l(),Jg=a("li"),yne=a("strong"),Tao=o("canine"),Mao=o(" \u2014 "),LP=a("a"),Eao=o("CanineTokenizer"),Cao=o(" (CANINE model)"),wao=l(),zn=a("li"),xne=a("strong"),Aao=o("clip"),Lao=o(" \u2014 "),yP=a("a"),yao=o("CLIPTokenizer"),xao=o(" or "),xP=a("a"),$ao=o("CLIPTokenizerFast"),kao=o(" (CLIP model)"),Sao=l(),Wn=a("li"),$ne=a("strong"),Rao=o("convbert"),Pao=o(" \u2014 "),$P=a("a"),Bao=o("ConvBertTokenizer"),Iao=o(" or "),kP=a("a"),Nao=o("ConvBertTokenizerFast"),qao=o(" (ConvBERT model)"),jao=l(),Qn=a("li"),kne=a("strong"),Dao=o("cpm"),Gao=o(" \u2014 "),SP=a("a"),Oao=o("CpmTokenizer"),Vao=o(" or "),RP=a("a"),Xao=o("CpmTokenizerFast"),zao=o(" (CPM model)"),Wao=l(),Yg=a("li"),Sne=a("strong"),Qao=o("ctrl"),Hao=o(" \u2014 "),PP=a("a"),Uao=o("CTRLTokenizer"),Jao=o(" (CTRL model)"),Yao=l(),Hn=a("li"),Rne=a("strong"),Kao=o("data2vec-text"),Zao=o(" \u2014 "),BP=a("a"),eno=o("RobertaTokenizer"),ono=o(" or "),IP=a("a"),rno=o("RobertaTokenizerFast"),tno=o(" (Data2VecText model)"),ano=l(),Un=a("li"),Pne=a("strong"),nno=o("deberta"),sno=o(" \u2014 "),NP=a("a"),lno=o("DebertaTokenizer"),ino=o(" or "),qP=a("a"),dno=o("DebertaTokenizerFast"),cno=o(" (DeBERTa model)"),fno=l(),Jn=a("li"),Bne=a("strong"),mno=o("deberta-v2"),gno=o(" \u2014 "),jP=a("a"),hno=o("DebertaV2Tokenizer"),pno=o(" or "),DP=a("a"),uno=o("DebertaV2TokenizerFast"),_no=o(" (DeBERTa-v2 model)"),bno=l(),Yn=a("li"),Ine=a("strong"),vno=o("distilbert"),Fno=o(" \u2014 "),GP=a("a"),Tno=o("DistilBertTokenizer"),Mno=o(" or "),OP=a("a"),Eno=o("DistilBertTokenizerFast"),Cno=o(" (DistilBERT model)"),wno=l(),Kn=a("li"),Nne=a("strong"),Ano=o("dpr"),Lno=o(" \u2014 "),VP=a("a"),yno=o("DPRQuestionEncoderTokenizer"),xno=o(" or "),XP=a("a"),$no=o("DPRQuestionEncoderTokenizerFast"),kno=o(" (DPR model)"),Sno=l(),Zn=a("li"),qne=a("strong"),Rno=o("electra"),Pno=o(" \u2014 "),zP=a("a"),Bno=o("ElectraTokenizer"),Ino=o(" or "),WP=a("a"),Nno=o("ElectraTokenizerFast"),qno=o(" (ELECTRA model)"),jno=l(),Kg=a("li"),jne=a("strong"),Dno=o("flaubert"),Gno=o(" \u2014 "),QP=a("a"),Ono=o("FlaubertTokenizer"),Vno=o(" (FlauBERT model)"),Xno=l(),es=a("li"),Dne=a("strong"),zno=o("fnet"),Wno=o(" \u2014 "),HP=a("a"),Qno=o("FNetTokenizer"),Hno=o(" or "),UP=a("a"),Uno=o("FNetTokenizerFast"),Jno=o(" (FNet model)"),Yno=l(),Zg=a("li"),Gne=a("strong"),Kno=o("fsmt"),Zno=o(" \u2014 "),JP=a("a"),eso=o("FSMTTokenizer"),oso=o(" (FairSeq Machine-Translation model)"),rso=l(),os=a("li"),One=a("strong"),tso=o("funnel"),aso=o(" \u2014 "),YP=a("a"),nso=o("FunnelTokenizer"),sso=o(" or "),KP=a("a"),lso=o("FunnelTokenizerFast"),iso=o(" (Funnel Transformer model)"),dso=l(),rs=a("li"),Vne=a("strong"),cso=o("gpt2"),fso=o(" \u2014 "),ZP=a("a"),mso=o("GPT2Tokenizer"),gso=o(" or "),eB=a("a"),hso=o("GPT2TokenizerFast"),pso=o(" (OpenAI GPT-2 model)"),uso=l(),ts=a("li"),Xne=a("strong"),_so=o("gpt_neo"),bso=o(" \u2014 "),oB=a("a"),vso=o("GPT2Tokenizer"),Fso=o(" or "),rB=a("a"),Tso=o("GPT2TokenizerFast"),Mso=o(" (GPT Neo model)"),Eso=l(),eh=a("li"),zne=a("strong"),Cso=o("gpt_neox"),wso=o(" \u2014 "),tB=a("a"),Aso=o("GPTNeoXTokenizerFast"),Lso=o(" (GPT NeoX model)"),yso=l(),as=a("li"),Wne=a("strong"),xso=o("gptj"),$so=o(" \u2014 "),aB=a("a"),kso=o("GPT2Tokenizer"),Sso=o(" or "),nB=a("a"),Rso=o("GPT2TokenizerFast"),Pso=o(" (GPT-J model)"),Bso=l(),ns=a("li"),Qne=a("strong"),Iso=o("herbert"),Nso=o(" \u2014 "),sB=a("a"),qso=o("HerbertTokenizer"),jso=o(" or "),lB=a("a"),Dso=o("HerbertTokenizerFast"),Gso=o(" (HerBERT model)"),Oso=l(),oh=a("li"),Hne=a("strong"),Vso=o("hubert"),Xso=o(" \u2014 "),iB=a("a"),zso=o("Wav2Vec2CTCTokenizer"),Wso=o(" (Hubert model)"),Qso=l(),ss=a("li"),Une=a("strong"),Hso=o("ibert"),Uso=o(" \u2014 "),dB=a("a"),Jso=o("RobertaTokenizer"),Yso=o(" or "),cB=a("a"),Kso=o("RobertaTokenizerFast"),Zso=o(" (I-BERT model)"),elo=l(),ls=a("li"),Jne=a("strong"),olo=o("layoutlm"),rlo=o(" \u2014 "),fB=a("a"),tlo=o("LayoutLMTokenizer"),alo=o(" or "),mB=a("a"),nlo=o("LayoutLMTokenizerFast"),slo=o(" (LayoutLM model)"),llo=l(),is=a("li"),Yne=a("strong"),ilo=o("layoutlmv2"),dlo=o(" \u2014 "),gB=a("a"),clo=o("LayoutLMv2Tokenizer"),flo=o(" or "),hB=a("a"),mlo=o("LayoutLMv2TokenizerFast"),glo=o(" (LayoutLMv2 model)"),hlo=l(),ds=a("li"),Kne=a("strong"),plo=o("layoutlmv3"),ulo=o(" \u2014 "),pB=a("a"),_lo=o("LayoutLMv3Tokenizer"),blo=o(" or "),uB=a("a"),vlo=o("LayoutLMv3TokenizerFast"),Flo=o(" (LayoutLMv3 model)"),Tlo=l(),cs=a("li"),Zne=a("strong"),Mlo=o("layoutxlm"),Elo=o(" \u2014 "),_B=a("a"),Clo=o("LayoutXLMTokenizer"),wlo=o(" or "),bB=a("a"),Alo=o("LayoutXLMTokenizerFast"),Llo=o(" (LayoutXLM model)"),ylo=l(),fs=a("li"),ese=a("strong"),xlo=o("led"),$lo=o(" \u2014 "),vB=a("a"),klo=o("LEDTokenizer"),Slo=o(" or "),FB=a("a"),Rlo=o("LEDTokenizerFast"),Plo=o(" (LED model)"),Blo=l(),ms=a("li"),ose=a("strong"),Ilo=o("longformer"),Nlo=o(" \u2014 "),TB=a("a"),qlo=o("LongformerTokenizer"),jlo=o(" or "),MB=a("a"),Dlo=o("LongformerTokenizerFast"),Glo=o(" (Longformer model)"),Olo=l(),gs=a("li"),rse=a("strong"),Vlo=o("longt5"),Xlo=o(" \u2014 "),EB=a("a"),zlo=o("T5Tokenizer"),Wlo=o(" or "),CB=a("a"),Qlo=o("T5TokenizerFast"),Hlo=o(" (LongT5 model)"),Ulo=l(),rh=a("li"),tse=a("strong"),Jlo=o("luke"),Ylo=o(" \u2014 "),wB=a("a"),Klo=o("LukeTokenizer"),Zlo=o(" (LUKE model)"),eio=l(),hs=a("li"),ase=a("strong"),oio=o("lxmert"),rio=o(" \u2014 "),AB=a("a"),tio=o("LxmertTokenizer"),aio=o(" or "),LB=a("a"),nio=o("LxmertTokenizerFast"),sio=o(" (LXMERT model)"),lio=l(),th=a("li"),nse=a("strong"),iio=o("m2m_100"),dio=o(" \u2014 "),yB=a("a"),cio=o("M2M100Tokenizer"),fio=o(" (M2M100 model)"),mio=l(),ah=a("li"),sse=a("strong"),gio=o("marian"),hio=o(" \u2014 "),xB=a("a"),pio=o("MarianTokenizer"),uio=o(" (Marian model)"),_io=l(),ps=a("li"),lse=a("strong"),bio=o("mbart"),vio=o(" \u2014 "),$B=a("a"),Fio=o("MBartTokenizer"),Tio=o(" or "),kB=a("a"),Mio=o("MBartTokenizerFast"),Eio=o(" (mBART model)"),Cio=l(),us=a("li"),ise=a("strong"),wio=o("mbart50"),Aio=o(" \u2014 "),SB=a("a"),Lio=o("MBart50Tokenizer"),yio=o(" or "),RB=a("a"),xio=o("MBart50TokenizerFast"),$io=o(" (mBART-50 model)"),kio=l(),_s=a("li"),dse=a("strong"),Sio=o("megatron-bert"),Rio=o(" \u2014 "),PB=a("a"),Pio=o("BertTokenizer"),Bio=o(" or "),BB=a("a"),Iio=o("BertTokenizerFast"),Nio=o(" (Megatron-BERT model)"),qio=l(),nh=a("li"),cse=a("strong"),jio=o("mluke"),Dio=o(" \u2014 "),IB=a("a"),Gio=o("MLukeTokenizer"),Oio=o(" (mLUKE model)"),Vio=l(),bs=a("li"),fse=a("strong"),Xio=o("mobilebert"),zio=o(" \u2014 "),NB=a("a"),Wio=o("MobileBertTokenizer"),Qio=o(" or "),qB=a("a"),Hio=o("MobileBertTokenizerFast"),Uio=o(" (MobileBERT model)"),Jio=l(),vs=a("li"),mse=a("strong"),Yio=o("mpnet"),Kio=o(" \u2014 "),jB=a("a"),Zio=o("MPNetTokenizer"),edo=o(" or "),DB=a("a"),odo=o("MPNetTokenizerFast"),rdo=o(" (MPNet model)"),tdo=l(),Fs=a("li"),gse=a("strong"),ado=o("mt5"),ndo=o(" \u2014 "),GB=a("a"),sdo=o("MT5Tokenizer"),ldo=o(" or "),OB=a("a"),ido=o("MT5TokenizerFast"),ddo=o(" (MT5 model)"),cdo=l(),Ts=a("li"),hse=a("strong"),fdo=o("nystromformer"),mdo=o(" \u2014 "),VB=a("a"),gdo=o("AlbertTokenizer"),hdo=o(" or "),XB=a("a"),pdo=o("AlbertTokenizerFast"),udo=o(" (Nystr\xF6mformer model)"),_do=l(),Ms=a("li"),pse=a("strong"),bdo=o("openai-gpt"),vdo=o(" \u2014 "),zB=a("a"),Fdo=o("OpenAIGPTTokenizer"),Tdo=o(" or "),WB=a("a"),Mdo=o("OpenAIGPTTokenizerFast"),Edo=o(" (OpenAI GPT model)"),Cdo=l(),sh=a("li"),use=a("strong"),wdo=o("opt"),Ado=o(" \u2014 "),QB=a("a"),Ldo=o("GPT2Tokenizer"),ydo=o(" (OPT model)"),xdo=l(),Es=a("li"),_se=a("strong"),$do=o("pegasus"),kdo=o(" \u2014 "),HB=a("a"),Sdo=o("PegasusTokenizer"),Rdo=o(" or "),UB=a("a"),Pdo=o("PegasusTokenizerFast"),Bdo=o(" (Pegasus model)"),Ido=l(),lh=a("li"),bse=a("strong"),Ndo=o("perceiver"),qdo=o(" \u2014 "),JB=a("a"),jdo=o("PerceiverTokenizer"),Ddo=o(" (Perceiver model)"),Gdo=l(),ih=a("li"),vse=a("strong"),Odo=o("phobert"),Vdo=o(" \u2014 "),YB=a("a"),Xdo=o("PhobertTokenizer"),zdo=o(" (PhoBERT model)"),Wdo=l(),dh=a("li"),Fse=a("strong"),Qdo=o("plbart"),Hdo=o(" \u2014 "),KB=a("a"),Udo=o("PLBartTokenizer"),Jdo=o(" (PLBart model)"),Ydo=l(),ch=a("li"),Tse=a("strong"),Kdo=o("prophetnet"),Zdo=o(" \u2014 "),ZB=a("a"),eco=o("ProphetNetTokenizer"),oco=o(" (ProphetNet model)"),rco=l(),Cs=a("li"),Mse=a("strong"),tco=o("qdqbert"),aco=o(" \u2014 "),eI=a("a"),nco=o("BertTokenizer"),sco=o(" or "),oI=a("a"),lco=o("BertTokenizerFast"),ico=o(" (QDQBert model)"),dco=l(),fh=a("li"),Ese=a("strong"),cco=o("rag"),fco=o(" \u2014 "),rI=a("a"),mco=o("RagTokenizer"),gco=o(" (RAG model)"),hco=l(),ws=a("li"),Cse=a("strong"),pco=o("realm"),uco=o(" \u2014 "),tI=a("a"),_co=o("RealmTokenizer"),bco=o(" or "),aI=a("a"),vco=o("RealmTokenizerFast"),Fco=o(" (REALM model)"),Tco=l(),As=a("li"),wse=a("strong"),Mco=o("reformer"),Eco=o(" \u2014 "),nI=a("a"),Cco=o("ReformerTokenizer"),wco=o(" or "),sI=a("a"),Aco=o("ReformerTokenizerFast"),Lco=o(" (Reformer model)"),yco=l(),Ls=a("li"),Ase=a("strong"),xco=o("rembert"),$co=o(" \u2014 "),lI=a("a"),kco=o("RemBertTokenizer"),Sco=o(" or "),iI=a("a"),Rco=o("RemBertTokenizerFast"),Pco=o(" (RemBERT model)"),Bco=l(),ys=a("li"),Lse=a("strong"),Ico=o("retribert"),Nco=o(" \u2014 "),dI=a("a"),qco=o("RetriBertTokenizer"),jco=o(" or "),cI=a("a"),Dco=o("RetriBertTokenizerFast"),Gco=o(" (RetriBERT model)"),Oco=l(),xs=a("li"),yse=a("strong"),Vco=o("roberta"),Xco=o(" \u2014 "),fI=a("a"),zco=o("RobertaTokenizer"),Wco=o(" or "),mI=a("a"),Qco=o("RobertaTokenizerFast"),Hco=o(" (RoBERTa model)"),Uco=l(),$s=a("li"),xse=a("strong"),Jco=o("roformer"),Yco=o(" \u2014 "),gI=a("a"),Kco=o("RoFormerTokenizer"),Zco=o(" or "),hI=a("a"),efo=o("RoFormerTokenizerFast"),ofo=o(" (RoFormer model)"),rfo=l(),mh=a("li"),$se=a("strong"),tfo=o("speech_to_text"),afo=o(" \u2014 "),pI=a("a"),nfo=o("Speech2TextTokenizer"),sfo=o(" (Speech2Text model)"),lfo=l(),gh=a("li"),kse=a("strong"),ifo=o("speech_to_text_2"),dfo=o(" \u2014 "),uI=a("a"),cfo=o("Speech2Text2Tokenizer"),ffo=o(" (Speech2Text2 model)"),mfo=l(),ks=a("li"),Sse=a("strong"),gfo=o("splinter"),hfo=o(" \u2014 "),_I=a("a"),pfo=o("SplinterTokenizer"),ufo=o(" or "),bI=a("a"),_fo=o("SplinterTokenizerFast"),bfo=o(" (Splinter model)"),vfo=l(),Ss=a("li"),Rse=a("strong"),Ffo=o("squeezebert"),Tfo=o(" \u2014 "),vI=a("a"),Mfo=o("SqueezeBertTokenizer"),Efo=o(" or "),FI=a("a"),Cfo=o("SqueezeBertTokenizerFast"),wfo=o(" (SqueezeBERT model)"),Afo=l(),Rs=a("li"),Pse=a("strong"),Lfo=o("t5"),yfo=o(" \u2014 "),TI=a("a"),xfo=o("T5Tokenizer"),$fo=o(" or "),MI=a("a"),kfo=o("T5TokenizerFast"),Sfo=o(" (T5 model)"),Rfo=l(),hh=a("li"),Bse=a("strong"),Pfo=o("tapas"),Bfo=o(" \u2014 "),EI=a("a"),Ifo=o("TapasTokenizer"),Nfo=o(" (TAPAS model)"),qfo=l(),ph=a("li"),Ise=a("strong"),jfo=o("tapex"),Dfo=o(" \u2014 "),CI=a("a"),Gfo=o("TapexTokenizer"),Ofo=o(" (TAPEX model)"),Vfo=l(),uh=a("li"),Nse=a("strong"),Xfo=o("transfo-xl"),zfo=o(" \u2014 "),wI=a("a"),Wfo=o("TransfoXLTokenizer"),Qfo=o(" (Transformer-XL model)"),Hfo=l(),Ps=a("li"),qse=a("strong"),Ufo=o("vilt"),Jfo=o(" \u2014 "),AI=a("a"),Yfo=o("BertTokenizer"),Kfo=o(" or "),LI=a("a"),Zfo=o("BertTokenizerFast"),emo=o(" (ViLT model)"),omo=l(),Bs=a("li"),jse=a("strong"),rmo=o("visual_bert"),tmo=o(" \u2014 "),yI=a("a"),amo=o("BertTokenizer"),nmo=o(" or "),xI=a("a"),smo=o("BertTokenizerFast"),lmo=o(" (VisualBERT model)"),imo=l(),_h=a("li"),Dse=a("strong"),dmo=o("wav2vec2"),cmo=o(" \u2014 "),$I=a("a"),fmo=o("Wav2Vec2CTCTokenizer"),mmo=o(" (Wav2Vec2 model)"),gmo=l(),bh=a("li"),Gse=a("strong"),hmo=o("wav2vec2-conformer"),pmo=o(" \u2014 "),kI=a("a"),umo=o("Wav2Vec2CTCTokenizer"),_mo=o(" (Wav2Vec2-Conformer model)"),bmo=l(),vh=a("li"),Ose=a("strong"),vmo=o("wav2vec2_phoneme"),Fmo=o(" \u2014 "),SI=a("a"),Tmo=o("Wav2Vec2PhonemeCTCTokenizer"),Mmo=o(" (Wav2Vec2Phoneme model)"),Emo=l(),Is=a("li"),Vse=a("strong"),Cmo=o("xglm"),wmo=o(" \u2014 "),RI=a("a"),Amo=o("XGLMTokenizer"),Lmo=o(" or "),PI=a("a"),ymo=o("XGLMTokenizerFast"),xmo=o(" (XGLM model)"),$mo=l(),Fh=a("li"),Xse=a("strong"),kmo=o("xlm"),Smo=o(" \u2014 "),BI=a("a"),Rmo=o("XLMTokenizer"),Pmo=o(" (XLM model)"),Bmo=l(),Th=a("li"),zse=a("strong"),Imo=o("xlm-prophetnet"),Nmo=o(" \u2014 "),II=a("a"),qmo=o("XLMProphetNetTokenizer"),jmo=o(" (XLM-ProphetNet model)"),Dmo=l(),Ns=a("li"),Wse=a("strong"),Gmo=o("xlm-roberta"),Omo=o(" \u2014 "),NI=a("a"),Vmo=o("XLMRobertaTokenizer"),Xmo=o(" or "),qI=a("a"),zmo=o("XLMRobertaTokenizerFast"),Wmo=o(" (XLM-RoBERTa model)"),Qmo=l(),qs=a("li"),Qse=a("strong"),Hmo=o("xlm-roberta-xl"),Umo=o(" \u2014 "),jI=a("a"),Jmo=o("RobertaTokenizer"),Ymo=o(" or "),DI=a("a"),Kmo=o("RobertaTokenizerFast"),Zmo=o(" (XLM-RoBERTa-XL model)"),ego=l(),js=a("li"),Hse=a("strong"),ogo=o("xlnet"),rgo=o(" \u2014 "),GI=a("a"),tgo=o("XLNetTokenizer"),ago=o(" or "),OI=a("a"),ngo=o("XLNetTokenizerFast"),sgo=o(" (XLNet model)"),lgo=l(),Ds=a("li"),Use=a("strong"),igo=o("yoso"),dgo=o(" \u2014 "),VI=a("a"),cgo=o("AlbertTokenizer"),fgo=o(" or "),XI=a("a"),mgo=o("AlbertTokenizerFast"),ggo=o(" (YOSO model)"),hgo=l(),F(Mh.$$.fragment),pgo=l(),Eh=a("div"),F(SL.$$.fragment),ugo=l(),Jse=a("p"),_go=o("Register a new tokenizer in this mapping."),lGe=l(),Si=a("h2"),Ch=a("a"),Yse=a("span"),F(RL.$$.fragment),bgo=l(),Kse=a("span"),vgo=o("AutoFeatureExtractor"),iGe=l(),Lo=a("div"),F(PL.$$.fragment),Fgo=l(),BL=a("p"),Tgo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=a("a"),Mgo=o("AutoFeatureExtractor.from_pretrained()"),Ego=o(" class method."),Cgo=l(),IL=a("p"),wgo=o("This class cannot be instantiated directly using "),Zse=a("code"),Ago=o("__init__()"),Lgo=o(" (throws an error)."),ygo=l(),He=a("div"),F(NL.$$.fragment),xgo=l(),ele=a("p"),$go=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kgo=l(),Sa=a("p"),Sgo=o("The feature extractor class to instantiate is selected based on the "),ole=a("code"),Rgo=o("model_type"),Pgo=o(` property of the config object
(either passed as an argument or loaded from `),rle=a("code"),Bgo=o("pretrained_model_name_or_path"),Igo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tle=a("code"),Ngo=o("pretrained_model_name_or_path"),qgo=o(":"),jgo=l(),Y=a("ul"),wh=a("li"),ale=a("strong"),Dgo=o("beit"),Ggo=o(" \u2014 "),WI=a("a"),Ogo=o("BeitFeatureExtractor"),Vgo=o(" (BEiT model)"),Xgo=l(),Ah=a("li"),nle=a("strong"),zgo=o("clip"),Wgo=o(" \u2014 "),QI=a("a"),Qgo=o("CLIPFeatureExtractor"),Hgo=o(" (CLIP model)"),Ugo=l(),Lh=a("li"),sle=a("strong"),Jgo=o("convnext"),Ygo=o(" \u2014 "),HI=a("a"),Kgo=o("ConvNextFeatureExtractor"),Zgo=o(" (ConvNeXT model)"),eho=l(),yh=a("li"),lle=a("strong"),oho=o("cvt"),rho=o(" \u2014 "),UI=a("a"),tho=o("ConvNextFeatureExtractor"),aho=o(" (CvT model)"),nho=l(),xh=a("li"),ile=a("strong"),sho=o("data2vec-audio"),lho=o(" \u2014 "),JI=a("a"),iho=o("Wav2Vec2FeatureExtractor"),dho=o(" (Data2VecAudio model)"),cho=l(),$h=a("li"),dle=a("strong"),fho=o("data2vec-vision"),mho=o(" \u2014 "),YI=a("a"),gho=o("BeitFeatureExtractor"),hho=o(" (Data2VecVision model)"),pho=l(),kh=a("li"),cle=a("strong"),uho=o("deit"),_ho=o(" \u2014 "),KI=a("a"),bho=o("DeiTFeatureExtractor"),vho=o(" (DeiT model)"),Fho=l(),Sh=a("li"),fle=a("strong"),Tho=o("detr"),Mho=o(" \u2014 "),ZI=a("a"),Eho=o("DetrFeatureExtractor"),Cho=o(" (DETR model)"),who=l(),Rh=a("li"),mle=a("strong"),Aho=o("dpt"),Lho=o(" \u2014 "),eN=a("a"),yho=o("DPTFeatureExtractor"),xho=o(" (DPT model)"),$ho=l(),Ph=a("li"),gle=a("strong"),kho=o("flava"),Sho=o(" \u2014 "),oN=a("a"),Rho=o("FlavaFeatureExtractor"),Pho=o(" (FLAVA model)"),Bho=l(),Bh=a("li"),hle=a("strong"),Iho=o("glpn"),Nho=o(" \u2014 "),rN=a("a"),qho=o("GLPNFeatureExtractor"),jho=o(" (GLPN model)"),Dho=l(),Ih=a("li"),ple=a("strong"),Gho=o("hubert"),Oho=o(" \u2014 "),tN=a("a"),Vho=o("Wav2Vec2FeatureExtractor"),Xho=o(" (Hubert model)"),zho=l(),Nh=a("li"),ule=a("strong"),Who=o("imagegpt"),Qho=o(" \u2014 "),aN=a("a"),Hho=o("ImageGPTFeatureExtractor"),Uho=o(" (ImageGPT model)"),Jho=l(),qh=a("li"),_le=a("strong"),Yho=o("layoutlmv2"),Kho=o(" \u2014 "),nN=a("a"),Zho=o("LayoutLMv2FeatureExtractor"),epo=o(" (LayoutLMv2 model)"),opo=l(),jh=a("li"),ble=a("strong"),rpo=o("layoutlmv3"),tpo=o(" \u2014 "),sN=a("a"),apo=o("LayoutLMv3FeatureExtractor"),npo=o(" (LayoutLMv3 model)"),spo=l(),Dh=a("li"),vle=a("strong"),lpo=o("levit"),ipo=o(" \u2014 "),lN=a("a"),dpo=o("LevitFeatureExtractor"),cpo=o(" (LeViT model)"),fpo=l(),Gh=a("li"),Fle=a("strong"),mpo=o("maskformer"),gpo=o(" \u2014 "),iN=a("a"),hpo=o("MaskFormerFeatureExtractor"),ppo=o(" (MaskFormer model)"),upo=l(),Oh=a("li"),Tle=a("strong"),_po=o("mctct"),bpo=o(" \u2014 "),dN=a("a"),vpo=o("MCTCTFeatureExtractor"),Fpo=o(" (M-CTC-T model)"),Tpo=l(),Vh=a("li"),Mle=a("strong"),Mpo=o("perceiver"),Epo=o(" \u2014 "),cN=a("a"),Cpo=o("PerceiverFeatureExtractor"),wpo=o(" (Perceiver model)"),Apo=l(),Xh=a("li"),Ele=a("strong"),Lpo=o("poolformer"),ypo=o(" \u2014 "),fN=a("a"),xpo=o("PoolFormerFeatureExtractor"),$po=o(" (PoolFormer model)"),kpo=l(),zh=a("li"),Cle=a("strong"),Spo=o("regnet"),Rpo=o(" \u2014 "),mN=a("a"),Ppo=o("ConvNextFeatureExtractor"),Bpo=o(" (RegNet model)"),Ipo=l(),Wh=a("li"),wle=a("strong"),Npo=o("resnet"),qpo=o(" \u2014 "),gN=a("a"),jpo=o("ConvNextFeatureExtractor"),Dpo=o(" (ResNet model)"),Gpo=l(),Qh=a("li"),Ale=a("strong"),Opo=o("segformer"),Vpo=o(" \u2014 "),hN=a("a"),Xpo=o("SegformerFeatureExtractor"),zpo=o(" (SegFormer model)"),Wpo=l(),Hh=a("li"),Lle=a("strong"),Qpo=o("speech_to_text"),Hpo=o(" \u2014 "),pN=a("a"),Upo=o("Speech2TextFeatureExtractor"),Jpo=o(" (Speech2Text model)"),Ypo=l(),Uh=a("li"),yle=a("strong"),Kpo=o("swin"),Zpo=o(" \u2014 "),uN=a("a"),euo=o("ViTFeatureExtractor"),ouo=o(" (Swin Transformer model)"),ruo=l(),Jh=a("li"),xle=a("strong"),tuo=o("van"),auo=o(" \u2014 "),_N=a("a"),nuo=o("ConvNextFeatureExtractor"),suo=o(" (VAN model)"),luo=l(),Yh=a("li"),$le=a("strong"),iuo=o("vilt"),duo=o(" \u2014 "),bN=a("a"),cuo=o("ViltFeatureExtractor"),fuo=o(" (ViLT model)"),muo=l(),Kh=a("li"),kle=a("strong"),guo=o("vit"),huo=o(" \u2014 "),vN=a("a"),puo=o("ViTFeatureExtractor"),uuo=o(" (ViT model)"),_uo=l(),Zh=a("li"),Sle=a("strong"),buo=o("vit_mae"),vuo=o(" \u2014 "),FN=a("a"),Fuo=o("ViTFeatureExtractor"),Tuo=o(" (ViTMAE model)"),Muo=l(),ep=a("li"),Rle=a("strong"),Euo=o("wav2vec2"),Cuo=o(" \u2014 "),TN=a("a"),wuo=o("Wav2Vec2FeatureExtractor"),Auo=o(" (Wav2Vec2 model)"),Luo=l(),op=a("li"),Ple=a("strong"),yuo=o("wav2vec2-conformer"),xuo=o(" \u2014 "),MN=a("a"),$uo=o("Wav2Vec2FeatureExtractor"),kuo=o(" (Wav2Vec2-Conformer model)"),Suo=l(),rp=a("li"),Ble=a("strong"),Ruo=o("yolos"),Puo=o(" \u2014 "),EN=a("a"),Buo=o("YolosFeatureExtractor"),Iuo=o(" (YOLOS model)"),Nuo=l(),F(tp.$$.fragment),quo=l(),F(ap.$$.fragment),juo=l(),np=a("div"),F(qL.$$.fragment),Duo=l(),Ile=a("p"),Guo=o("Register a new feature extractor for this class."),dGe=l(),Ri=a("h2"),sp=a("a"),Nle=a("span"),F(jL.$$.fragment),Ouo=l(),qle=a("span"),Vuo=o("AutoProcessor"),cGe=l(),yo=a("div"),F(DL.$$.fragment),Xuo=l(),GL=a("p"),zuo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CN=a("a"),Wuo=o("AutoProcessor.from_pretrained()"),Quo=o(" class method."),Huo=l(),OL=a("p"),Uuo=o("This class cannot be instantiated directly using "),jle=a("code"),Juo=o("__init__()"),Yuo=o(" (throws an error)."),Kuo=l(),Ue=a("div"),F(VL.$$.fragment),Zuo=l(),Dle=a("p"),e_o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),o_o=l(),Pi=a("p"),r_o=o("The processor class to instantiate is selected based on the "),Gle=a("code"),t_o=o("model_type"),a_o=o(` property of the config object (either
passed as an argument or loaded from `),Ole=a("code"),n_o=o("pretrained_model_name_or_path"),s_o=o(" if possible):"),l_o=l(),he=a("ul"),lp=a("li"),Vle=a("strong"),i_o=o("clip"),d_o=o(" \u2014 "),wN=a("a"),c_o=o("CLIPProcessor"),f_o=o(" (CLIP model)"),m_o=l(),ip=a("li"),Xle=a("strong"),g_o=o("flava"),h_o=o(" \u2014 "),zle=a("code"),p_o=o("FLAVAProcessor"),u_o=o(" (FLAVA model)"),__o=l(),dp=a("li"),Wle=a("strong"),b_o=o("layoutlmv2"),v_o=o(" \u2014 "),AN=a("a"),F_o=o("LayoutLMv2Processor"),T_o=o(" (LayoutLMv2 model)"),M_o=l(),cp=a("li"),Qle=a("strong"),E_o=o("layoutlmv3"),C_o=o(" \u2014 "),LN=a("a"),w_o=o("LayoutLMv3Processor"),A_o=o(" (LayoutLMv3 model)"),L_o=l(),fp=a("li"),Hle=a("strong"),y_o=o("layoutxlm"),x_o=o(" \u2014 "),yN=a("a"),$_o=o("LayoutXLMProcessor"),k_o=o(" (LayoutXLM model)"),S_o=l(),mp=a("li"),Ule=a("strong"),R_o=o("sew"),P_o=o(" \u2014 "),xN=a("a"),B_o=o("Wav2Vec2Processor"),I_o=o(" (SEW model)"),N_o=l(),gp=a("li"),Jle=a("strong"),q_o=o("sew-d"),j_o=o(" \u2014 "),$N=a("a"),D_o=o("Wav2Vec2Processor"),G_o=o(" (SEW-D model)"),O_o=l(),hp=a("li"),Yle=a("strong"),V_o=o("speech_to_text"),X_o=o(" \u2014 "),kN=a("a"),z_o=o("Speech2TextProcessor"),W_o=o(" (Speech2Text model)"),Q_o=l(),pp=a("li"),Kle=a("strong"),H_o=o("speech_to_text_2"),U_o=o(" \u2014 "),SN=a("a"),J_o=o("Speech2Text2Processor"),Y_o=o(" (Speech2Text2 model)"),K_o=l(),up=a("li"),Zle=a("strong"),Z_o=o("trocr"),e2o=o(" \u2014 "),RN=a("a"),o2o=o("TrOCRProcessor"),r2o=o(" (TrOCR model)"),t2o=l(),_p=a("li"),eie=a("strong"),a2o=o("unispeech"),n2o=o(" \u2014 "),PN=a("a"),s2o=o("Wav2Vec2Processor"),l2o=o(" (UniSpeech model)"),i2o=l(),bp=a("li"),oie=a("strong"),d2o=o("unispeech-sat"),c2o=o(" \u2014 "),BN=a("a"),f2o=o("Wav2Vec2Processor"),m2o=o(" (UniSpeechSat model)"),g2o=l(),vp=a("li"),rie=a("strong"),h2o=o("vilt"),p2o=o(" \u2014 "),IN=a("a"),u2o=o("ViltProcessor"),_2o=o(" (ViLT model)"),b2o=l(),Fp=a("li"),tie=a("strong"),v2o=o("vision-text-dual-encoder"),F2o=o(" \u2014 "),NN=a("a"),T2o=o("VisionTextDualEncoderProcessor"),M2o=o(" (VisionTextDualEncoder model)"),E2o=l(),Tp=a("li"),aie=a("strong"),C2o=o("wav2vec2"),w2o=o(" \u2014 "),qN=a("a"),A2o=o("Wav2Vec2Processor"),L2o=o(" (Wav2Vec2 model)"),y2o=l(),Mp=a("li"),nie=a("strong"),x2o=o("wav2vec2-conformer"),$2o=o(" \u2014 "),jN=a("a"),k2o=o("Wav2Vec2Processor"),S2o=o(" (Wav2Vec2-Conformer model)"),R2o=l(),Ep=a("li"),sie=a("strong"),P2o=o("wavlm"),B2o=o(" \u2014 "),DN=a("a"),I2o=o("Wav2Vec2Processor"),N2o=o(" (WavLM model)"),q2o=l(),F(Cp.$$.fragment),j2o=l(),F(wp.$$.fragment),D2o=l(),Ap=a("div"),F(XL.$$.fragment),G2o=l(),lie=a("p"),O2o=o("Register a new processor for this class."),fGe=l(),Bi=a("h2"),Lp=a("a"),iie=a("span"),F(zL.$$.fragment),V2o=l(),die=a("span"),X2o=o("AutoModel"),mGe=l(),xo=a("div"),F(WL.$$.fragment),z2o=l(),Ii=a("p"),W2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GN=a("a"),Q2o=o("from_pretrained()"),H2o=o(" class method or the "),ON=a("a"),U2o=o("from_config()"),J2o=o(` class
method.`),Y2o=l(),QL=a("p"),K2o=o("This class cannot be instantiated directly using "),cie=a("code"),Z2o=o("__init__()"),e1o=o(" (throws an error)."),o1o=l(),st=a("div"),F(HL.$$.fragment),r1o=l(),fie=a("p"),t1o=o("Instantiates one of the base model classes of the library from a configuration."),a1o=l(),Ni=a("p"),n1o=o(`Note:
Loading a model from its configuration file does `),mie=a("strong"),s1o=o("not"),l1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=a("a"),i1o=o("from_pretrained()"),d1o=o(" to load the model weights."),c1o=l(),F(yp.$$.fragment),f1o=l(),Je=a("div"),F(UL.$$.fragment),m1o=l(),gie=a("p"),g1o=o("Instantiate one of the base model classes of the library from a pretrained model."),h1o=l(),Ra=a("p"),p1o=o("The model class to instantiate is selected based on the "),hie=a("code"),u1o=o("model_type"),_1o=o(` property of the config object (either
passed as an argument or loaded from `),pie=a("code"),b1o=o("pretrained_model_name_or_path"),v1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),F1o=o("pretrained_model_name_or_path"),T1o=o(":"),M1o=l(),x=a("ul"),xp=a("li"),_ie=a("strong"),E1o=o("albert"),C1o=o(" \u2014 "),XN=a("a"),w1o=o("AlbertModel"),A1o=o(" (ALBERT model)"),L1o=l(),$p=a("li"),bie=a("strong"),y1o=o("bart"),x1o=o(" \u2014 "),zN=a("a"),$1o=o("BartModel"),k1o=o(" (BART model)"),S1o=l(),kp=a("li"),vie=a("strong"),R1o=o("beit"),P1o=o(" \u2014 "),WN=a("a"),B1o=o("BeitModel"),I1o=o(" (BEiT model)"),N1o=l(),Sp=a("li"),Fie=a("strong"),q1o=o("bert"),j1o=o(" \u2014 "),QN=a("a"),D1o=o("BertModel"),G1o=o(" (BERT model)"),O1o=l(),Rp=a("li"),Tie=a("strong"),V1o=o("bert-generation"),X1o=o(" \u2014 "),HN=a("a"),z1o=o("BertGenerationEncoder"),W1o=o(" (Bert Generation model)"),Q1o=l(),Pp=a("li"),Mie=a("strong"),H1o=o("big_bird"),U1o=o(" \u2014 "),UN=a("a"),J1o=o("BigBirdModel"),Y1o=o(" (BigBird model)"),K1o=l(),Bp=a("li"),Eie=a("strong"),Z1o=o("bigbird_pegasus"),e7o=o(" \u2014 "),JN=a("a"),o7o=o("BigBirdPegasusModel"),r7o=o(" (BigBird-Pegasus model)"),t7o=l(),Ip=a("li"),Cie=a("strong"),a7o=o("blenderbot"),n7o=o(" \u2014 "),YN=a("a"),s7o=o("BlenderbotModel"),l7o=o(" (Blenderbot model)"),i7o=l(),Np=a("li"),wie=a("strong"),d7o=o("blenderbot-small"),c7o=o(" \u2014 "),KN=a("a"),f7o=o("BlenderbotSmallModel"),m7o=o(" (BlenderbotSmall model)"),g7o=l(),qp=a("li"),Aie=a("strong"),h7o=o("bloom"),p7o=o(" \u2014 "),ZN=a("a"),u7o=o("BloomModel"),_7o=o(" (BLOOM model)"),b7o=l(),jp=a("li"),Lie=a("strong"),v7o=o("camembert"),F7o=o(" \u2014 "),eq=a("a"),T7o=o("CamembertModel"),M7o=o(" (CamemBERT model)"),E7o=l(),Dp=a("li"),yie=a("strong"),C7o=o("canine"),w7o=o(" \u2014 "),oq=a("a"),A7o=o("CanineModel"),L7o=o(" (CANINE model)"),y7o=l(),Gp=a("li"),xie=a("strong"),x7o=o("clip"),$7o=o(" \u2014 "),rq=a("a"),k7o=o("CLIPModel"),S7o=o(" (CLIP model)"),R7o=l(),Op=a("li"),$ie=a("strong"),P7o=o("convbert"),B7o=o(" \u2014 "),tq=a("a"),I7o=o("ConvBertModel"),N7o=o(" (ConvBERT model)"),q7o=l(),Vp=a("li"),kie=a("strong"),j7o=o("convnext"),D7o=o(" \u2014 "),aq=a("a"),G7o=o("ConvNextModel"),O7o=o(" (ConvNeXT model)"),V7o=l(),Xp=a("li"),Sie=a("strong"),X7o=o("ctrl"),z7o=o(" \u2014 "),nq=a("a"),W7o=o("CTRLModel"),Q7o=o(" (CTRL model)"),H7o=l(),zp=a("li"),Rie=a("strong"),U7o=o("cvt"),J7o=o(" \u2014 "),sq=a("a"),Y7o=o("CvtModel"),K7o=o(" (CvT model)"),Z7o=l(),Wp=a("li"),Pie=a("strong"),ebo=o("data2vec-audio"),obo=o(" \u2014 "),lq=a("a"),rbo=o("Data2VecAudioModel"),tbo=o(" (Data2VecAudio model)"),abo=l(),Qp=a("li"),Bie=a("strong"),nbo=o("data2vec-text"),sbo=o(" \u2014 "),iq=a("a"),lbo=o("Data2VecTextModel"),ibo=o(" (Data2VecText model)"),dbo=l(),Hp=a("li"),Iie=a("strong"),cbo=o("data2vec-vision"),fbo=o(" \u2014 "),dq=a("a"),mbo=o("Data2VecVisionModel"),gbo=o(" (Data2VecVision model)"),hbo=l(),Up=a("li"),Nie=a("strong"),pbo=o("deberta"),ubo=o(" \u2014 "),cq=a("a"),_bo=o("DebertaModel"),bbo=o(" (DeBERTa model)"),vbo=l(),Jp=a("li"),qie=a("strong"),Fbo=o("deberta-v2"),Tbo=o(" \u2014 "),fq=a("a"),Mbo=o("DebertaV2Model"),Ebo=o(" (DeBERTa-v2 model)"),Cbo=l(),Yp=a("li"),jie=a("strong"),wbo=o("decision_transformer"),Abo=o(" \u2014 "),mq=a("a"),Lbo=o("DecisionTransformerModel"),ybo=o(" (Decision Transformer model)"),xbo=l(),Kp=a("li"),Die=a("strong"),$bo=o("deit"),kbo=o(" \u2014 "),gq=a("a"),Sbo=o("DeiTModel"),Rbo=o(" (DeiT model)"),Pbo=l(),Zp=a("li"),Gie=a("strong"),Bbo=o("detr"),Ibo=o(" \u2014 "),hq=a("a"),Nbo=o("DetrModel"),qbo=o(" (DETR model)"),jbo=l(),eu=a("li"),Oie=a("strong"),Dbo=o("distilbert"),Gbo=o(" \u2014 "),pq=a("a"),Obo=o("DistilBertModel"),Vbo=o(" (DistilBERT model)"),Xbo=l(),ou=a("li"),Vie=a("strong"),zbo=o("dpr"),Wbo=o(" \u2014 "),uq=a("a"),Qbo=o("DPRQuestionEncoder"),Hbo=o(" (DPR model)"),Ubo=l(),ru=a("li"),Xie=a("strong"),Jbo=o("dpt"),Ybo=o(" \u2014 "),_q=a("a"),Kbo=o("DPTModel"),Zbo=o(" (DPT model)"),e4o=l(),tu=a("li"),zie=a("strong"),o4o=o("electra"),r4o=o(" \u2014 "),bq=a("a"),t4o=o("ElectraModel"),a4o=o(" (ELECTRA model)"),n4o=l(),au=a("li"),Wie=a("strong"),s4o=o("flaubert"),l4o=o(" \u2014 "),vq=a("a"),i4o=o("FlaubertModel"),d4o=o(" (FlauBERT model)"),c4o=l(),nu=a("li"),Qie=a("strong"),f4o=o("flava"),m4o=o(" \u2014 "),Fq=a("a"),g4o=o("FlavaModel"),h4o=o(" (FLAVA model)"),p4o=l(),su=a("li"),Hie=a("strong"),u4o=o("fnet"),_4o=o(" \u2014 "),Tq=a("a"),b4o=o("FNetModel"),v4o=o(" (FNet model)"),F4o=l(),lu=a("li"),Uie=a("strong"),T4o=o("fsmt"),M4o=o(" \u2014 "),Mq=a("a"),E4o=o("FSMTModel"),C4o=o(" (FairSeq Machine-Translation model)"),w4o=l(),Gs=a("li"),Jie=a("strong"),A4o=o("funnel"),L4o=o(" \u2014 "),Eq=a("a"),y4o=o("FunnelModel"),x4o=o(" or "),Cq=a("a"),$4o=o("FunnelBaseModel"),k4o=o(" (Funnel Transformer model)"),S4o=l(),iu=a("li"),Yie=a("strong"),R4o=o("glpn"),P4o=o(" \u2014 "),wq=a("a"),B4o=o("GLPNModel"),I4o=o(" (GLPN model)"),N4o=l(),du=a("li"),Kie=a("strong"),q4o=o("gpt2"),j4o=o(" \u2014 "),Aq=a("a"),D4o=o("GPT2Model"),G4o=o(" (OpenAI GPT-2 model)"),O4o=l(),cu=a("li"),Zie=a("strong"),V4o=o("gpt_neo"),X4o=o(" \u2014 "),Lq=a("a"),z4o=o("GPTNeoModel"),W4o=o(" (GPT Neo model)"),Q4o=l(),fu=a("li"),ede=a("strong"),H4o=o("gpt_neox"),U4o=o(" \u2014 "),yq=a("a"),J4o=o("GPTNeoXModel"),Y4o=o(" (GPT NeoX model)"),K4o=l(),mu=a("li"),ode=a("strong"),Z4o=o("gptj"),evo=o(" \u2014 "),xq=a("a"),ovo=o("GPTJModel"),rvo=o(" (GPT-J model)"),tvo=l(),gu=a("li"),rde=a("strong"),avo=o("hubert"),nvo=o(" \u2014 "),$q=a("a"),svo=o("HubertModel"),lvo=o(" (Hubert model)"),ivo=l(),hu=a("li"),tde=a("strong"),dvo=o("ibert"),cvo=o(" \u2014 "),kq=a("a"),fvo=o("IBertModel"),mvo=o(" (I-BERT model)"),gvo=l(),pu=a("li"),ade=a("strong"),hvo=o("imagegpt"),pvo=o(" \u2014 "),Sq=a("a"),uvo=o("ImageGPTModel"),_vo=o(" (ImageGPT model)"),bvo=l(),uu=a("li"),nde=a("strong"),vvo=o("layoutlm"),Fvo=o(" \u2014 "),Rq=a("a"),Tvo=o("LayoutLMModel"),Mvo=o(" (LayoutLM model)"),Evo=l(),_u=a("li"),sde=a("strong"),Cvo=o("layoutlmv2"),wvo=o(" \u2014 "),Pq=a("a"),Avo=o("LayoutLMv2Model"),Lvo=o(" (LayoutLMv2 model)"),yvo=l(),bu=a("li"),lde=a("strong"),xvo=o("layoutlmv3"),$vo=o(" \u2014 "),Bq=a("a"),kvo=o("LayoutLMv3Model"),Svo=o(" (LayoutLMv3 model)"),Rvo=l(),vu=a("li"),ide=a("strong"),Pvo=o("led"),Bvo=o(" \u2014 "),Iq=a("a"),Ivo=o("LEDModel"),Nvo=o(" (LED model)"),qvo=l(),Fu=a("li"),dde=a("strong"),jvo=o("levit"),Dvo=o(" \u2014 "),Nq=a("a"),Gvo=o("LevitModel"),Ovo=o(" (LeViT model)"),Vvo=l(),Tu=a("li"),cde=a("strong"),Xvo=o("longformer"),zvo=o(" \u2014 "),qq=a("a"),Wvo=o("LongformerModel"),Qvo=o(" (Longformer model)"),Hvo=l(),Mu=a("li"),fde=a("strong"),Uvo=o("longt5"),Jvo=o(" \u2014 "),jq=a("a"),Yvo=o("LongT5Model"),Kvo=o(" (LongT5 model)"),Zvo=l(),Eu=a("li"),mde=a("strong"),eFo=o("luke"),oFo=o(" \u2014 "),Dq=a("a"),rFo=o("LukeModel"),tFo=o(" (LUKE model)"),aFo=l(),Cu=a("li"),gde=a("strong"),nFo=o("lxmert"),sFo=o(" \u2014 "),Gq=a("a"),lFo=o("LxmertModel"),iFo=o(" (LXMERT model)"),dFo=l(),wu=a("li"),hde=a("strong"),cFo=o("m2m_100"),fFo=o(" \u2014 "),Oq=a("a"),mFo=o("M2M100Model"),gFo=o(" (M2M100 model)"),hFo=l(),Au=a("li"),pde=a("strong"),pFo=o("marian"),uFo=o(" \u2014 "),Vq=a("a"),_Fo=o("MarianModel"),bFo=o(" (Marian model)"),vFo=l(),Lu=a("li"),ude=a("strong"),FFo=o("maskformer"),TFo=o(" \u2014 "),Xq=a("a"),MFo=o("MaskFormerModel"),EFo=o(" (MaskFormer model)"),CFo=l(),yu=a("li"),_de=a("strong"),wFo=o("mbart"),AFo=o(" \u2014 "),zq=a("a"),LFo=o("MBartModel"),yFo=o(" (mBART model)"),xFo=l(),xu=a("li"),bde=a("strong"),$Fo=o("mctct"),kFo=o(" \u2014 "),Wq=a("a"),SFo=o("MCTCTModel"),RFo=o(" (M-CTC-T model)"),PFo=l(),$u=a("li"),vde=a("strong"),BFo=o("megatron-bert"),IFo=o(" \u2014 "),Qq=a("a"),NFo=o("MegatronBertModel"),qFo=o(" (Megatron-BERT model)"),jFo=l(),ku=a("li"),Fde=a("strong"),DFo=o("mobilebert"),GFo=o(" \u2014 "),Hq=a("a"),OFo=o("MobileBertModel"),VFo=o(" (MobileBERT model)"),XFo=l(),Su=a("li"),Tde=a("strong"),zFo=o("mpnet"),WFo=o(" \u2014 "),Uq=a("a"),QFo=o("MPNetModel"),HFo=o(" (MPNet model)"),UFo=l(),Ru=a("li"),Mde=a("strong"),JFo=o("mt5"),YFo=o(" \u2014 "),Jq=a("a"),KFo=o("MT5Model"),ZFo=o(" (MT5 model)"),eTo=l(),Pu=a("li"),Ede=a("strong"),oTo=o("nystromformer"),rTo=o(" \u2014 "),Yq=a("a"),tTo=o("NystromformerModel"),aTo=o(" (Nystr\xF6mformer model)"),nTo=l(),Bu=a("li"),Cde=a("strong"),sTo=o("openai-gpt"),lTo=o(" \u2014 "),Kq=a("a"),iTo=o("OpenAIGPTModel"),dTo=o(" (OpenAI GPT model)"),cTo=l(),Iu=a("li"),wde=a("strong"),fTo=o("opt"),mTo=o(" \u2014 "),Zq=a("a"),gTo=o("OPTModel"),hTo=o(" (OPT model)"),pTo=l(),Nu=a("li"),Ade=a("strong"),uTo=o("pegasus"),_To=o(" \u2014 "),ej=a("a"),bTo=o("PegasusModel"),vTo=o(" (Pegasus model)"),FTo=l(),qu=a("li"),Lde=a("strong"),TTo=o("perceiver"),MTo=o(" \u2014 "),oj=a("a"),ETo=o("PerceiverModel"),CTo=o(" (Perceiver model)"),wTo=l(),ju=a("li"),yde=a("strong"),ATo=o("plbart"),LTo=o(" \u2014 "),rj=a("a"),yTo=o("PLBartModel"),xTo=o(" (PLBart model)"),$To=l(),Du=a("li"),xde=a("strong"),kTo=o("poolformer"),STo=o(" \u2014 "),tj=a("a"),RTo=o("PoolFormerModel"),PTo=o(" (PoolFormer model)"),BTo=l(),Gu=a("li"),$de=a("strong"),ITo=o("prophetnet"),NTo=o(" \u2014 "),aj=a("a"),qTo=o("ProphetNetModel"),jTo=o(" (ProphetNet model)"),DTo=l(),Ou=a("li"),kde=a("strong"),GTo=o("qdqbert"),OTo=o(" \u2014 "),nj=a("a"),VTo=o("QDQBertModel"),XTo=o(" (QDQBert model)"),zTo=l(),Vu=a("li"),Sde=a("strong"),WTo=o("reformer"),QTo=o(" \u2014 "),sj=a("a"),HTo=o("ReformerModel"),UTo=o(" (Reformer model)"),JTo=l(),Xu=a("li"),Rde=a("strong"),YTo=o("regnet"),KTo=o(" \u2014 "),lj=a("a"),ZTo=o("RegNetModel"),eMo=o(" (RegNet model)"),oMo=l(),zu=a("li"),Pde=a("strong"),rMo=o("rembert"),tMo=o(" \u2014 "),ij=a("a"),aMo=o("RemBertModel"),nMo=o(" (RemBERT model)"),sMo=l(),Wu=a("li"),Bde=a("strong"),lMo=o("resnet"),iMo=o(" \u2014 "),dj=a("a"),dMo=o("ResNetModel"),cMo=o(" (ResNet model)"),fMo=l(),Qu=a("li"),Ide=a("strong"),mMo=o("retribert"),gMo=o(" \u2014 "),cj=a("a"),hMo=o("RetriBertModel"),pMo=o(" (RetriBERT model)"),uMo=l(),Hu=a("li"),Nde=a("strong"),_Mo=o("roberta"),bMo=o(" \u2014 "),fj=a("a"),vMo=o("RobertaModel"),FMo=o(" (RoBERTa model)"),TMo=l(),Uu=a("li"),qde=a("strong"),MMo=o("roformer"),EMo=o(" \u2014 "),mj=a("a"),CMo=o("RoFormerModel"),wMo=o(" (RoFormer model)"),AMo=l(),Ju=a("li"),jde=a("strong"),LMo=o("segformer"),yMo=o(" \u2014 "),gj=a("a"),xMo=o("SegformerModel"),$Mo=o(" (SegFormer model)"),kMo=l(),Yu=a("li"),Dde=a("strong"),SMo=o("sew"),RMo=o(" \u2014 "),hj=a("a"),PMo=o("SEWModel"),BMo=o(" (SEW model)"),IMo=l(),Ku=a("li"),Gde=a("strong"),NMo=o("sew-d"),qMo=o(" \u2014 "),pj=a("a"),jMo=o("SEWDModel"),DMo=o(" (SEW-D model)"),GMo=l(),Zu=a("li"),Ode=a("strong"),OMo=o("speech_to_text"),VMo=o(" \u2014 "),uj=a("a"),XMo=o("Speech2TextModel"),zMo=o(" (Speech2Text model)"),WMo=l(),e_=a("li"),Vde=a("strong"),QMo=o("splinter"),HMo=o(" \u2014 "),_j=a("a"),UMo=o("SplinterModel"),JMo=o(" (Splinter model)"),YMo=l(),o_=a("li"),Xde=a("strong"),KMo=o("squeezebert"),ZMo=o(" \u2014 "),bj=a("a"),eEo=o("SqueezeBertModel"),oEo=o(" (SqueezeBERT model)"),rEo=l(),r_=a("li"),zde=a("strong"),tEo=o("swin"),aEo=o(" \u2014 "),vj=a("a"),nEo=o("SwinModel"),sEo=o(" (Swin Transformer model)"),lEo=l(),t_=a("li"),Wde=a("strong"),iEo=o("t5"),dEo=o(" \u2014 "),Fj=a("a"),cEo=o("T5Model"),fEo=o(" (T5 model)"),mEo=l(),a_=a("li"),Qde=a("strong"),gEo=o("tapas"),hEo=o(" \u2014 "),Tj=a("a"),pEo=o("TapasModel"),uEo=o(" (TAPAS model)"),_Eo=l(),n_=a("li"),Hde=a("strong"),bEo=o("trajectory_transformer"),vEo=o(" \u2014 "),Mj=a("a"),FEo=o("TrajectoryTransformerModel"),TEo=o(" (Trajectory Transformer model)"),MEo=l(),s_=a("li"),Ude=a("strong"),EEo=o("transfo-xl"),CEo=o(" \u2014 "),Ej=a("a"),wEo=o("TransfoXLModel"),AEo=o(" (Transformer-XL model)"),LEo=l(),l_=a("li"),Jde=a("strong"),yEo=o("unispeech"),xEo=o(" \u2014 "),Cj=a("a"),$Eo=o("UniSpeechModel"),kEo=o(" (UniSpeech model)"),SEo=l(),i_=a("li"),Yde=a("strong"),REo=o("unispeech-sat"),PEo=o(" \u2014 "),wj=a("a"),BEo=o("UniSpeechSatModel"),IEo=o(" (UniSpeechSat model)"),NEo=l(),d_=a("li"),Kde=a("strong"),qEo=o("van"),jEo=o(" \u2014 "),Aj=a("a"),DEo=o("VanModel"),GEo=o(" (VAN model)"),OEo=l(),c_=a("li"),Zde=a("strong"),VEo=o("vilt"),XEo=o(" \u2014 "),Lj=a("a"),zEo=o("ViltModel"),WEo=o(" (ViLT model)"),QEo=l(),f_=a("li"),ece=a("strong"),HEo=o("vision-text-dual-encoder"),UEo=o(" \u2014 "),yj=a("a"),JEo=o("VisionTextDualEncoderModel"),YEo=o(" (VisionTextDualEncoder model)"),KEo=l(),m_=a("li"),oce=a("strong"),ZEo=o("visual_bert"),eCo=o(" \u2014 "),xj=a("a"),oCo=o("VisualBertModel"),rCo=o(" (VisualBERT model)"),tCo=l(),g_=a("li"),rce=a("strong"),aCo=o("vit"),nCo=o(" \u2014 "),$j=a("a"),sCo=o("ViTModel"),lCo=o(" (ViT model)"),iCo=l(),h_=a("li"),tce=a("strong"),dCo=o("vit_mae"),cCo=o(" \u2014 "),kj=a("a"),fCo=o("ViTMAEModel"),mCo=o(" (ViTMAE model)"),gCo=l(),p_=a("li"),ace=a("strong"),hCo=o("wav2vec2"),pCo=o(" \u2014 "),Sj=a("a"),uCo=o("Wav2Vec2Model"),_Co=o(" (Wav2Vec2 model)"),bCo=l(),u_=a("li"),nce=a("strong"),vCo=o("wav2vec2-conformer"),FCo=o(" \u2014 "),Rj=a("a"),TCo=o("Wav2Vec2ConformerModel"),MCo=o(" (Wav2Vec2-Conformer model)"),ECo=l(),__=a("li"),sce=a("strong"),CCo=o("wavlm"),wCo=o(" \u2014 "),Pj=a("a"),ACo=o("WavLMModel"),LCo=o(" (WavLM model)"),yCo=l(),b_=a("li"),lce=a("strong"),xCo=o("xglm"),$Co=o(" \u2014 "),Bj=a("a"),kCo=o("XGLMModel"),SCo=o(" (XGLM model)"),RCo=l(),v_=a("li"),ice=a("strong"),PCo=o("xlm"),BCo=o(" \u2014 "),Ij=a("a"),ICo=o("XLMModel"),NCo=o(" (XLM model)"),qCo=l(),F_=a("li"),dce=a("strong"),jCo=o("xlm-prophetnet"),DCo=o(" \u2014 "),Nj=a("a"),GCo=o("XLMProphetNetModel"),OCo=o(" (XLM-ProphetNet model)"),VCo=l(),T_=a("li"),cce=a("strong"),XCo=o("xlm-roberta"),zCo=o(" \u2014 "),qj=a("a"),WCo=o("XLMRobertaModel"),QCo=o(" (XLM-RoBERTa model)"),HCo=l(),M_=a("li"),fce=a("strong"),UCo=o("xlm-roberta-xl"),JCo=o(" \u2014 "),jj=a("a"),YCo=o("XLMRobertaXLModel"),KCo=o(" (XLM-RoBERTa-XL model)"),ZCo=l(),E_=a("li"),mce=a("strong"),e5o=o("xlnet"),o5o=o(" \u2014 "),Dj=a("a"),r5o=o("XLNetModel"),t5o=o(" (XLNet model)"),a5o=l(),C_=a("li"),gce=a("strong"),n5o=o("yolos"),s5o=o(" \u2014 "),Gj=a("a"),l5o=o("YolosModel"),i5o=o(" (YOLOS model)"),d5o=l(),w_=a("li"),hce=a("strong"),c5o=o("yoso"),f5o=o(" \u2014 "),Oj=a("a"),m5o=o("YosoModel"),g5o=o(" (YOSO model)"),h5o=l(),A_=a("p"),p5o=o("The model is set in evaluation mode by default using "),pce=a("code"),u5o=o("model.eval()"),_5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=a("code"),b5o=o("model.train()"),v5o=l(),F(L_.$$.fragment),gGe=l(),qi=a("h2"),y_=a("a"),_ce=a("span"),F(JL.$$.fragment),F5o=l(),bce=a("span"),T5o=o("AutoModelForPreTraining"),hGe=l(),$o=a("div"),F(YL.$$.fragment),M5o=l(),ji=a("p"),E5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vj=a("a"),C5o=o("from_pretrained()"),w5o=o(" class method or the "),Xj=a("a"),A5o=o("from_config()"),L5o=o(` class
method.`),y5o=l(),KL=a("p"),x5o=o("This class cannot be instantiated directly using "),vce=a("code"),$5o=o("__init__()"),k5o=o(" (throws an error)."),S5o=l(),lt=a("div"),F(ZL.$$.fragment),R5o=l(),Fce=a("p"),P5o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),B5o=l(),Di=a("p"),I5o=o(`Note:
Loading a model from its configuration file does `),Tce=a("strong"),N5o=o("not"),q5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=a("a"),j5o=o("from_pretrained()"),D5o=o(" to load the model weights."),G5o=l(),F(x_.$$.fragment),O5o=l(),Ye=a("div"),F(ey.$$.fragment),V5o=l(),Mce=a("p"),X5o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),z5o=l(),Pa=a("p"),W5o=o("The model class to instantiate is selected based on the "),Ece=a("code"),Q5o=o("model_type"),H5o=o(` property of the config object (either
passed as an argument or loaded from `),Cce=a("code"),U5o=o("pretrained_model_name_or_path"),J5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=a("code"),Y5o=o("pretrained_model_name_or_path"),K5o=o(":"),Z5o=l(),G=a("ul"),$_=a("li"),Ace=a("strong"),e3o=o("albert"),o3o=o(" \u2014 "),Wj=a("a"),r3o=o("AlbertForPreTraining"),t3o=o(" (ALBERT model)"),a3o=l(),k_=a("li"),Lce=a("strong"),n3o=o("bart"),s3o=o(" \u2014 "),Qj=a("a"),l3o=o("BartForConditionalGeneration"),i3o=o(" (BART model)"),d3o=l(),S_=a("li"),yce=a("strong"),c3o=o("bert"),f3o=o(" \u2014 "),Hj=a("a"),m3o=o("BertForPreTraining"),g3o=o(" (BERT model)"),h3o=l(),R_=a("li"),xce=a("strong"),p3o=o("big_bird"),u3o=o(" \u2014 "),Uj=a("a"),_3o=o("BigBirdForPreTraining"),b3o=o(" (BigBird model)"),v3o=l(),P_=a("li"),$ce=a("strong"),F3o=o("bloom"),T3o=o(" \u2014 "),Jj=a("a"),M3o=o("BloomForCausalLM"),E3o=o(" (BLOOM model)"),C3o=l(),B_=a("li"),kce=a("strong"),w3o=o("camembert"),A3o=o(" \u2014 "),Yj=a("a"),L3o=o("CamembertForMaskedLM"),y3o=o(" (CamemBERT model)"),x3o=l(),I_=a("li"),Sce=a("strong"),$3o=o("ctrl"),k3o=o(" \u2014 "),Kj=a("a"),S3o=o("CTRLLMHeadModel"),R3o=o(" (CTRL model)"),P3o=l(),N_=a("li"),Rce=a("strong"),B3o=o("data2vec-text"),I3o=o(" \u2014 "),Zj=a("a"),N3o=o("Data2VecTextForMaskedLM"),q3o=o(" (Data2VecText model)"),j3o=l(),q_=a("li"),Pce=a("strong"),D3o=o("deberta"),G3o=o(" \u2014 "),eD=a("a"),O3o=o("DebertaForMaskedLM"),V3o=o(" (DeBERTa model)"),X3o=l(),j_=a("li"),Bce=a("strong"),z3o=o("deberta-v2"),W3o=o(" \u2014 "),oD=a("a"),Q3o=o("DebertaV2ForMaskedLM"),H3o=o(" (DeBERTa-v2 model)"),U3o=l(),D_=a("li"),Ice=a("strong"),J3o=o("distilbert"),Y3o=o(" \u2014 "),rD=a("a"),K3o=o("DistilBertForMaskedLM"),Z3o=o(" (DistilBERT model)"),e0o=l(),G_=a("li"),Nce=a("strong"),o0o=o("electra"),r0o=o(" \u2014 "),tD=a("a"),t0o=o("ElectraForPreTraining"),a0o=o(" (ELECTRA model)"),n0o=l(),O_=a("li"),qce=a("strong"),s0o=o("flaubert"),l0o=o(" \u2014 "),aD=a("a"),i0o=o("FlaubertWithLMHeadModel"),d0o=o(" (FlauBERT model)"),c0o=l(),V_=a("li"),jce=a("strong"),f0o=o("flava"),m0o=o(" \u2014 "),nD=a("a"),g0o=o("FlavaForPreTraining"),h0o=o(" (FLAVA model)"),p0o=l(),X_=a("li"),Dce=a("strong"),u0o=o("fnet"),_0o=o(" \u2014 "),sD=a("a"),b0o=o("FNetForPreTraining"),v0o=o(" (FNet model)"),F0o=l(),z_=a("li"),Gce=a("strong"),T0o=o("fsmt"),M0o=o(" \u2014 "),lD=a("a"),E0o=o("FSMTForConditionalGeneration"),C0o=o(" (FairSeq Machine-Translation model)"),w0o=l(),W_=a("li"),Oce=a("strong"),A0o=o("funnel"),L0o=o(" \u2014 "),iD=a("a"),y0o=o("FunnelForPreTraining"),x0o=o(" (Funnel Transformer model)"),$0o=l(),Q_=a("li"),Vce=a("strong"),k0o=o("gpt2"),S0o=o(" \u2014 "),dD=a("a"),R0o=o("GPT2LMHeadModel"),P0o=o(" (OpenAI GPT-2 model)"),B0o=l(),H_=a("li"),Xce=a("strong"),I0o=o("ibert"),N0o=o(" \u2014 "),cD=a("a"),q0o=o("IBertForMaskedLM"),j0o=o(" (I-BERT model)"),D0o=l(),U_=a("li"),zce=a("strong"),G0o=o("layoutlm"),O0o=o(" \u2014 "),fD=a("a"),V0o=o("LayoutLMForMaskedLM"),X0o=o(" (LayoutLM model)"),z0o=l(),J_=a("li"),Wce=a("strong"),W0o=o("longformer"),Q0o=o(" \u2014 "),mD=a("a"),H0o=o("LongformerForMaskedLM"),U0o=o(" (Longformer model)"),J0o=l(),Y_=a("li"),Qce=a("strong"),Y0o=o("lxmert"),K0o=o(" \u2014 "),gD=a("a"),Z0o=o("LxmertForPreTraining"),ewo=o(" (LXMERT model)"),owo=l(),K_=a("li"),Hce=a("strong"),rwo=o("megatron-bert"),two=o(" \u2014 "),hD=a("a"),awo=o("MegatronBertForPreTraining"),nwo=o(" (Megatron-BERT model)"),swo=l(),Z_=a("li"),Uce=a("strong"),lwo=o("mobilebert"),iwo=o(" \u2014 "),pD=a("a"),dwo=o("MobileBertForPreTraining"),cwo=o(" (MobileBERT model)"),fwo=l(),e2=a("li"),Jce=a("strong"),mwo=o("mpnet"),gwo=o(" \u2014 "),uD=a("a"),hwo=o("MPNetForMaskedLM"),pwo=o(" (MPNet model)"),uwo=l(),o2=a("li"),Yce=a("strong"),_wo=o("openai-gpt"),bwo=o(" \u2014 "),_D=a("a"),vwo=o("OpenAIGPTLMHeadModel"),Fwo=o(" (OpenAI GPT model)"),Two=l(),r2=a("li"),Kce=a("strong"),Mwo=o("retribert"),Ewo=o(" \u2014 "),bD=a("a"),Cwo=o("RetriBertModel"),wwo=o(" (RetriBERT model)"),Awo=l(),t2=a("li"),Zce=a("strong"),Lwo=o("roberta"),ywo=o(" \u2014 "),vD=a("a"),xwo=o("RobertaForMaskedLM"),$wo=o(" (RoBERTa model)"),kwo=l(),a2=a("li"),efe=a("strong"),Swo=o("splinter"),Rwo=o(" \u2014 "),FD=a("a"),Pwo=o("SplinterForPreTraining"),Bwo=o(" (Splinter model)"),Iwo=l(),n2=a("li"),ofe=a("strong"),Nwo=o("squeezebert"),qwo=o(" \u2014 "),TD=a("a"),jwo=o("SqueezeBertForMaskedLM"),Dwo=o(" (SqueezeBERT model)"),Gwo=l(),s2=a("li"),rfe=a("strong"),Owo=o("t5"),Vwo=o(" \u2014 "),MD=a("a"),Xwo=o("T5ForConditionalGeneration"),zwo=o(" (T5 model)"),Wwo=l(),l2=a("li"),tfe=a("strong"),Qwo=o("tapas"),Hwo=o(" \u2014 "),ED=a("a"),Uwo=o("TapasForMaskedLM"),Jwo=o(" (TAPAS model)"),Ywo=l(),i2=a("li"),afe=a("strong"),Kwo=o("transfo-xl"),Zwo=o(" \u2014 "),CD=a("a"),eAo=o("TransfoXLLMHeadModel"),oAo=o(" (Transformer-XL model)"),rAo=l(),d2=a("li"),nfe=a("strong"),tAo=o("unispeech"),aAo=o(" \u2014 "),wD=a("a"),nAo=o("UniSpeechForPreTraining"),sAo=o(" (UniSpeech model)"),lAo=l(),c2=a("li"),sfe=a("strong"),iAo=o("unispeech-sat"),dAo=o(" \u2014 "),AD=a("a"),cAo=o("UniSpeechSatForPreTraining"),fAo=o(" (UniSpeechSat model)"),mAo=l(),f2=a("li"),lfe=a("strong"),gAo=o("visual_bert"),hAo=o(" \u2014 "),LD=a("a"),pAo=o("VisualBertForPreTraining"),uAo=o(" (VisualBERT model)"),_Ao=l(),m2=a("li"),ife=a("strong"),bAo=o("vit_mae"),vAo=o(" \u2014 "),yD=a("a"),FAo=o("ViTMAEForPreTraining"),TAo=o(" (ViTMAE model)"),MAo=l(),g2=a("li"),dfe=a("strong"),EAo=o("wav2vec2"),CAo=o(" \u2014 "),xD=a("a"),wAo=o("Wav2Vec2ForPreTraining"),AAo=o(" (Wav2Vec2 model)"),LAo=l(),h2=a("li"),cfe=a("strong"),yAo=o("wav2vec2-conformer"),xAo=o(" \u2014 "),$D=a("a"),$Ao=o("Wav2Vec2ConformerForPreTraining"),kAo=o(" (Wav2Vec2-Conformer model)"),SAo=l(),p2=a("li"),ffe=a("strong"),RAo=o("xlm"),PAo=o(" \u2014 "),kD=a("a"),BAo=o("XLMWithLMHeadModel"),IAo=o(" (XLM model)"),NAo=l(),u2=a("li"),mfe=a("strong"),qAo=o("xlm-roberta"),jAo=o(" \u2014 "),SD=a("a"),DAo=o("XLMRobertaForMaskedLM"),GAo=o(" (XLM-RoBERTa model)"),OAo=l(),_2=a("li"),gfe=a("strong"),VAo=o("xlm-roberta-xl"),XAo=o(" \u2014 "),RD=a("a"),zAo=o("XLMRobertaXLForMaskedLM"),WAo=o(" (XLM-RoBERTa-XL model)"),QAo=l(),b2=a("li"),hfe=a("strong"),HAo=o("xlnet"),UAo=o(" \u2014 "),PD=a("a"),JAo=o("XLNetLMHeadModel"),YAo=o(" (XLNet model)"),KAo=l(),v2=a("p"),ZAo=o("The model is set in evaluation mode by default using "),pfe=a("code"),e6o=o("model.eval()"),o6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),r6o=o("model.train()"),t6o=l(),F(F2.$$.fragment),pGe=l(),Gi=a("h2"),T2=a("a"),_fe=a("span"),F(oy.$$.fragment),a6o=l(),bfe=a("span"),n6o=o("AutoModelForCausalLM"),uGe=l(),ko=a("div"),F(ry.$$.fragment),s6o=l(),Oi=a("p"),l6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BD=a("a"),i6o=o("from_pretrained()"),d6o=o(" class method or the "),ID=a("a"),c6o=o("from_config()"),f6o=o(` class
method.`),m6o=l(),ty=a("p"),g6o=o("This class cannot be instantiated directly using "),vfe=a("code"),h6o=o("__init__()"),p6o=o(" (throws an error)."),u6o=l(),it=a("div"),F(ay.$$.fragment),_6o=l(),Ffe=a("p"),b6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v6o=l(),Vi=a("p"),F6o=o(`Note:
Loading a model from its configuration file does `),Tfe=a("strong"),T6o=o("not"),M6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),E6o=o("from_pretrained()"),C6o=o(" to load the model weights."),w6o=l(),F(M2.$$.fragment),A6o=l(),Ke=a("div"),F(ny.$$.fragment),L6o=l(),Mfe=a("p"),y6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x6o=l(),Ba=a("p"),$6o=o("The model class to instantiate is selected based on the "),Efe=a("code"),k6o=o("model_type"),S6o=o(` property of the config object (either
passed as an argument or loaded from `),Cfe=a("code"),R6o=o("pretrained_model_name_or_path"),P6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=a("code"),B6o=o("pretrained_model_name_or_path"),I6o=o(":"),N6o=l(),z=a("ul"),E2=a("li"),Afe=a("strong"),q6o=o("bart"),j6o=o(" \u2014 "),qD=a("a"),D6o=o("BartForCausalLM"),G6o=o(" (BART model)"),O6o=l(),C2=a("li"),Lfe=a("strong"),V6o=o("bert"),X6o=o(" \u2014 "),jD=a("a"),z6o=o("BertLMHeadModel"),W6o=o(" (BERT model)"),Q6o=l(),w2=a("li"),yfe=a("strong"),H6o=o("bert-generation"),U6o=o(" \u2014 "),DD=a("a"),J6o=o("BertGenerationDecoder"),Y6o=o(" (Bert Generation model)"),K6o=l(),A2=a("li"),xfe=a("strong"),Z6o=o("big_bird"),eLo=o(" \u2014 "),GD=a("a"),oLo=o("BigBirdForCausalLM"),rLo=o(" (BigBird model)"),tLo=l(),L2=a("li"),$fe=a("strong"),aLo=o("bigbird_pegasus"),nLo=o(" \u2014 "),OD=a("a"),sLo=o("BigBirdPegasusForCausalLM"),lLo=o(" (BigBird-Pegasus model)"),iLo=l(),y2=a("li"),kfe=a("strong"),dLo=o("blenderbot"),cLo=o(" \u2014 "),VD=a("a"),fLo=o("BlenderbotForCausalLM"),mLo=o(" (Blenderbot model)"),gLo=l(),x2=a("li"),Sfe=a("strong"),hLo=o("blenderbot-small"),pLo=o(" \u2014 "),XD=a("a"),uLo=o("BlenderbotSmallForCausalLM"),_Lo=o(" (BlenderbotSmall model)"),bLo=l(),$2=a("li"),Rfe=a("strong"),vLo=o("bloom"),FLo=o(" \u2014 "),zD=a("a"),TLo=o("BloomForCausalLM"),MLo=o(" (BLOOM model)"),ELo=l(),k2=a("li"),Pfe=a("strong"),CLo=o("camembert"),wLo=o(" \u2014 "),WD=a("a"),ALo=o("CamembertForCausalLM"),LLo=o(" (CamemBERT model)"),yLo=l(),S2=a("li"),Bfe=a("strong"),xLo=o("ctrl"),$Lo=o(" \u2014 "),QD=a("a"),kLo=o("CTRLLMHeadModel"),SLo=o(" (CTRL model)"),RLo=l(),R2=a("li"),Ife=a("strong"),PLo=o("data2vec-text"),BLo=o(" \u2014 "),HD=a("a"),ILo=o("Data2VecTextForCausalLM"),NLo=o(" (Data2VecText model)"),qLo=l(),P2=a("li"),Nfe=a("strong"),jLo=o("electra"),DLo=o(" \u2014 "),UD=a("a"),GLo=o("ElectraForCausalLM"),OLo=o(" (ELECTRA model)"),VLo=l(),B2=a("li"),qfe=a("strong"),XLo=o("gpt2"),zLo=o(" \u2014 "),JD=a("a"),WLo=o("GPT2LMHeadModel"),QLo=o(" (OpenAI GPT-2 model)"),HLo=l(),I2=a("li"),jfe=a("strong"),ULo=o("gpt_neo"),JLo=o(" \u2014 "),YD=a("a"),YLo=o("GPTNeoForCausalLM"),KLo=o(" (GPT Neo model)"),ZLo=l(),N2=a("li"),Dfe=a("strong"),eyo=o("gpt_neox"),oyo=o(" \u2014 "),KD=a("a"),ryo=o("GPTNeoXForCausalLM"),tyo=o(" (GPT NeoX model)"),ayo=l(),q2=a("li"),Gfe=a("strong"),nyo=o("gptj"),syo=o(" \u2014 "),ZD=a("a"),lyo=o("GPTJForCausalLM"),iyo=o(" (GPT-J model)"),dyo=l(),j2=a("li"),Ofe=a("strong"),cyo=o("marian"),fyo=o(" \u2014 "),eG=a("a"),myo=o("MarianForCausalLM"),gyo=o(" (Marian model)"),hyo=l(),D2=a("li"),Vfe=a("strong"),pyo=o("mbart"),uyo=o(" \u2014 "),oG=a("a"),_yo=o("MBartForCausalLM"),byo=o(" (mBART model)"),vyo=l(),G2=a("li"),Xfe=a("strong"),Fyo=o("megatron-bert"),Tyo=o(" \u2014 "),rG=a("a"),Myo=o("MegatronBertForCausalLM"),Eyo=o(" (Megatron-BERT model)"),Cyo=l(),O2=a("li"),zfe=a("strong"),wyo=o("openai-gpt"),Ayo=o(" \u2014 "),tG=a("a"),Lyo=o("OpenAIGPTLMHeadModel"),yyo=o(" (OpenAI GPT model)"),xyo=l(),V2=a("li"),Wfe=a("strong"),$yo=o("opt"),kyo=o(" \u2014 "),aG=a("a"),Syo=o("OPTForCausalLM"),Ryo=o(" (OPT model)"),Pyo=l(),X2=a("li"),Qfe=a("strong"),Byo=o("pegasus"),Iyo=o(" \u2014 "),nG=a("a"),Nyo=o("PegasusForCausalLM"),qyo=o(" (Pegasus model)"),jyo=l(),z2=a("li"),Hfe=a("strong"),Dyo=o("plbart"),Gyo=o(" \u2014 "),sG=a("a"),Oyo=o("PLBartForCausalLM"),Vyo=o(" (PLBart model)"),Xyo=l(),W2=a("li"),Ufe=a("strong"),zyo=o("prophetnet"),Wyo=o(" \u2014 "),lG=a("a"),Qyo=o("ProphetNetForCausalLM"),Hyo=o(" (ProphetNet model)"),Uyo=l(),Q2=a("li"),Jfe=a("strong"),Jyo=o("qdqbert"),Yyo=o(" \u2014 "),iG=a("a"),Kyo=o("QDQBertLMHeadModel"),Zyo=o(" (QDQBert model)"),e8o=l(),H2=a("li"),Yfe=a("strong"),o8o=o("reformer"),r8o=o(" \u2014 "),dG=a("a"),t8o=o("ReformerModelWithLMHead"),a8o=o(" (Reformer model)"),n8o=l(),U2=a("li"),Kfe=a("strong"),s8o=o("rembert"),l8o=o(" \u2014 "),cG=a("a"),i8o=o("RemBertForCausalLM"),d8o=o(" (RemBERT model)"),c8o=l(),J2=a("li"),Zfe=a("strong"),f8o=o("roberta"),m8o=o(" \u2014 "),fG=a("a"),g8o=o("RobertaForCausalLM"),h8o=o(" (RoBERTa model)"),p8o=l(),Y2=a("li"),eme=a("strong"),u8o=o("roformer"),_8o=o(" \u2014 "),mG=a("a"),b8o=o("RoFormerForCausalLM"),v8o=o(" (RoFormer model)"),F8o=l(),K2=a("li"),ome=a("strong"),T8o=o("speech_to_text_2"),M8o=o(" \u2014 "),gG=a("a"),E8o=o("Speech2Text2ForCausalLM"),C8o=o(" (Speech2Text2 model)"),w8o=l(),Z2=a("li"),rme=a("strong"),A8o=o("transfo-xl"),L8o=o(" \u2014 "),hG=a("a"),y8o=o("TransfoXLLMHeadModel"),x8o=o(" (Transformer-XL model)"),$8o=l(),e1=a("li"),tme=a("strong"),k8o=o("trocr"),S8o=o(" \u2014 "),pG=a("a"),R8o=o("TrOCRForCausalLM"),P8o=o(" (TrOCR model)"),B8o=l(),o1=a("li"),ame=a("strong"),I8o=o("xglm"),N8o=o(" \u2014 "),uG=a("a"),q8o=o("XGLMForCausalLM"),j8o=o(" (XGLM model)"),D8o=l(),r1=a("li"),nme=a("strong"),G8o=o("xlm"),O8o=o(" \u2014 "),_G=a("a"),V8o=o("XLMWithLMHeadModel"),X8o=o(" (XLM model)"),z8o=l(),t1=a("li"),sme=a("strong"),W8o=o("xlm-prophetnet"),Q8o=o(" \u2014 "),bG=a("a"),H8o=o("XLMProphetNetForCausalLM"),U8o=o(" (XLM-ProphetNet model)"),J8o=l(),a1=a("li"),lme=a("strong"),Y8o=o("xlm-roberta"),K8o=o(" \u2014 "),vG=a("a"),Z8o=o("XLMRobertaForCausalLM"),e9o=o(" (XLM-RoBERTa model)"),o9o=l(),n1=a("li"),ime=a("strong"),r9o=o("xlm-roberta-xl"),t9o=o(" \u2014 "),FG=a("a"),a9o=o("XLMRobertaXLForCausalLM"),n9o=o(" (XLM-RoBERTa-XL model)"),s9o=l(),s1=a("li"),dme=a("strong"),l9o=o("xlnet"),i9o=o(" \u2014 "),TG=a("a"),d9o=o("XLNetLMHeadModel"),c9o=o(" (XLNet model)"),f9o=l(),l1=a("p"),m9o=o("The model is set in evaluation mode by default using "),cme=a("code"),g9o=o("model.eval()"),h9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),p9o=o("model.train()"),u9o=l(),F(i1.$$.fragment),_Ge=l(),Xi=a("h2"),d1=a("a"),mme=a("span"),F(sy.$$.fragment),_9o=l(),gme=a("span"),b9o=o("AutoModelForMaskedLM"),bGe=l(),So=a("div"),F(ly.$$.fragment),v9o=l(),zi=a("p"),F9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MG=a("a"),T9o=o("from_pretrained()"),M9o=o(" class method or the "),EG=a("a"),E9o=o("from_config()"),C9o=o(` class
method.`),w9o=l(),iy=a("p"),A9o=o("This class cannot be instantiated directly using "),hme=a("code"),L9o=o("__init__()"),y9o=o(" (throws an error)."),x9o=l(),dt=a("div"),F(dy.$$.fragment),$9o=l(),pme=a("p"),k9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),S9o=l(),Wi=a("p"),R9o=o(`Note:
Loading a model from its configuration file does `),ume=a("strong"),P9o=o("not"),B9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=a("a"),I9o=o("from_pretrained()"),N9o=o(" to load the model weights."),q9o=l(),F(c1.$$.fragment),j9o=l(),Ze=a("div"),F(cy.$$.fragment),D9o=l(),_me=a("p"),G9o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),O9o=l(),Ia=a("p"),V9o=o("The model class to instantiate is selected based on the "),bme=a("code"),X9o=o("model_type"),z9o=o(` property of the config object (either
passed as an argument or loaded from `),vme=a("code"),W9o=o("pretrained_model_name_or_path"),Q9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=a("code"),H9o=o("pretrained_model_name_or_path"),U9o=o(":"),J9o=l(),Q=a("ul"),f1=a("li"),Tme=a("strong"),Y9o=o("albert"),K9o=o(" \u2014 "),wG=a("a"),Z9o=o("AlbertForMaskedLM"),exo=o(" (ALBERT model)"),oxo=l(),m1=a("li"),Mme=a("strong"),rxo=o("bart"),txo=o(" \u2014 "),AG=a("a"),axo=o("BartForConditionalGeneration"),nxo=o(" (BART model)"),sxo=l(),g1=a("li"),Eme=a("strong"),lxo=o("bert"),ixo=o(" \u2014 "),LG=a("a"),dxo=o("BertForMaskedLM"),cxo=o(" (BERT model)"),fxo=l(),h1=a("li"),Cme=a("strong"),mxo=o("big_bird"),gxo=o(" \u2014 "),yG=a("a"),hxo=o("BigBirdForMaskedLM"),pxo=o(" (BigBird model)"),uxo=l(),p1=a("li"),wme=a("strong"),_xo=o("camembert"),bxo=o(" \u2014 "),xG=a("a"),vxo=o("CamembertForMaskedLM"),Fxo=o(" (CamemBERT model)"),Txo=l(),u1=a("li"),Ame=a("strong"),Mxo=o("convbert"),Exo=o(" \u2014 "),$G=a("a"),Cxo=o("ConvBertForMaskedLM"),wxo=o(" (ConvBERT model)"),Axo=l(),_1=a("li"),Lme=a("strong"),Lxo=o("data2vec-text"),yxo=o(" \u2014 "),kG=a("a"),xxo=o("Data2VecTextForMaskedLM"),$xo=o(" (Data2VecText model)"),kxo=l(),b1=a("li"),yme=a("strong"),Sxo=o("deberta"),Rxo=o(" \u2014 "),SG=a("a"),Pxo=o("DebertaForMaskedLM"),Bxo=o(" (DeBERTa model)"),Ixo=l(),v1=a("li"),xme=a("strong"),Nxo=o("deberta-v2"),qxo=o(" \u2014 "),RG=a("a"),jxo=o("DebertaV2ForMaskedLM"),Dxo=o(" (DeBERTa-v2 model)"),Gxo=l(),F1=a("li"),$me=a("strong"),Oxo=o("distilbert"),Vxo=o(" \u2014 "),PG=a("a"),Xxo=o("DistilBertForMaskedLM"),zxo=o(" (DistilBERT model)"),Wxo=l(),T1=a("li"),kme=a("strong"),Qxo=o("electra"),Hxo=o(" \u2014 "),BG=a("a"),Uxo=o("ElectraForMaskedLM"),Jxo=o(" (ELECTRA model)"),Yxo=l(),M1=a("li"),Sme=a("strong"),Kxo=o("flaubert"),Zxo=o(" \u2014 "),IG=a("a"),e$o=o("FlaubertWithLMHeadModel"),o$o=o(" (FlauBERT model)"),r$o=l(),E1=a("li"),Rme=a("strong"),t$o=o("fnet"),a$o=o(" \u2014 "),NG=a("a"),n$o=o("FNetForMaskedLM"),s$o=o(" (FNet model)"),l$o=l(),C1=a("li"),Pme=a("strong"),i$o=o("funnel"),d$o=o(" \u2014 "),qG=a("a"),c$o=o("FunnelForMaskedLM"),f$o=o(" (Funnel Transformer model)"),m$o=l(),w1=a("li"),Bme=a("strong"),g$o=o("ibert"),h$o=o(" \u2014 "),jG=a("a"),p$o=o("IBertForMaskedLM"),u$o=o(" (I-BERT model)"),_$o=l(),A1=a("li"),Ime=a("strong"),b$o=o("layoutlm"),v$o=o(" \u2014 "),DG=a("a"),F$o=o("LayoutLMForMaskedLM"),T$o=o(" (LayoutLM model)"),M$o=l(),L1=a("li"),Nme=a("strong"),E$o=o("longformer"),C$o=o(" \u2014 "),GG=a("a"),w$o=o("LongformerForMaskedLM"),A$o=o(" (Longformer model)"),L$o=l(),y1=a("li"),qme=a("strong"),y$o=o("luke"),x$o=o(" \u2014 "),OG=a("a"),$$o=o("LukeForMaskedLM"),k$o=o(" (LUKE model)"),S$o=l(),x1=a("li"),jme=a("strong"),R$o=o("mbart"),P$o=o(" \u2014 "),VG=a("a"),B$o=o("MBartForConditionalGeneration"),I$o=o(" (mBART model)"),N$o=l(),$1=a("li"),Dme=a("strong"),q$o=o("megatron-bert"),j$o=o(" \u2014 "),XG=a("a"),D$o=o("MegatronBertForMaskedLM"),G$o=o(" (Megatron-BERT model)"),O$o=l(),k1=a("li"),Gme=a("strong"),V$o=o("mobilebert"),X$o=o(" \u2014 "),zG=a("a"),z$o=o("MobileBertForMaskedLM"),W$o=o(" (MobileBERT model)"),Q$o=l(),S1=a("li"),Ome=a("strong"),H$o=o("mpnet"),U$o=o(" \u2014 "),WG=a("a"),J$o=o("MPNetForMaskedLM"),Y$o=o(" (MPNet model)"),K$o=l(),R1=a("li"),Vme=a("strong"),Z$o=o("nystromformer"),eko=o(" \u2014 "),QG=a("a"),oko=o("NystromformerForMaskedLM"),rko=o(" (Nystr\xF6mformer model)"),tko=l(),P1=a("li"),Xme=a("strong"),ako=o("perceiver"),nko=o(" \u2014 "),HG=a("a"),sko=o("PerceiverForMaskedLM"),lko=o(" (Perceiver model)"),iko=l(),B1=a("li"),zme=a("strong"),dko=o("qdqbert"),cko=o(" \u2014 "),UG=a("a"),fko=o("QDQBertForMaskedLM"),mko=o(" (QDQBert model)"),gko=l(),I1=a("li"),Wme=a("strong"),hko=o("reformer"),pko=o(" \u2014 "),JG=a("a"),uko=o("ReformerForMaskedLM"),_ko=o(" (Reformer model)"),bko=l(),N1=a("li"),Qme=a("strong"),vko=o("rembert"),Fko=o(" \u2014 "),YG=a("a"),Tko=o("RemBertForMaskedLM"),Mko=o(" (RemBERT model)"),Eko=l(),q1=a("li"),Hme=a("strong"),Cko=o("roberta"),wko=o(" \u2014 "),KG=a("a"),Ako=o("RobertaForMaskedLM"),Lko=o(" (RoBERTa model)"),yko=l(),j1=a("li"),Ume=a("strong"),xko=o("roformer"),$ko=o(" \u2014 "),ZG=a("a"),kko=o("RoFormerForMaskedLM"),Sko=o(" (RoFormer model)"),Rko=l(),D1=a("li"),Jme=a("strong"),Pko=o("squeezebert"),Bko=o(" \u2014 "),eO=a("a"),Iko=o("SqueezeBertForMaskedLM"),Nko=o(" (SqueezeBERT model)"),qko=l(),G1=a("li"),Yme=a("strong"),jko=o("tapas"),Dko=o(" \u2014 "),oO=a("a"),Gko=o("TapasForMaskedLM"),Oko=o(" (TAPAS model)"),Vko=l(),O1=a("li"),Kme=a("strong"),Xko=o("wav2vec2"),zko=o(" \u2014 "),Zme=a("code"),Wko=o("Wav2Vec2ForMaskedLM"),Qko=o(" (Wav2Vec2 model)"),Hko=l(),V1=a("li"),ege=a("strong"),Uko=o("xlm"),Jko=o(" \u2014 "),rO=a("a"),Yko=o("XLMWithLMHeadModel"),Kko=o(" (XLM model)"),Zko=l(),X1=a("li"),oge=a("strong"),eSo=o("xlm-roberta"),oSo=o(" \u2014 "),tO=a("a"),rSo=o("XLMRobertaForMaskedLM"),tSo=o(" (XLM-RoBERTa model)"),aSo=l(),z1=a("li"),rge=a("strong"),nSo=o("xlm-roberta-xl"),sSo=o(" \u2014 "),aO=a("a"),lSo=o("XLMRobertaXLForMaskedLM"),iSo=o(" (XLM-RoBERTa-XL model)"),dSo=l(),W1=a("li"),tge=a("strong"),cSo=o("yoso"),fSo=o(" \u2014 "),nO=a("a"),mSo=o("YosoForMaskedLM"),gSo=o(" (YOSO model)"),hSo=l(),Q1=a("p"),pSo=o("The model is set in evaluation mode by default using "),age=a("code"),uSo=o("model.eval()"),_So=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=a("code"),bSo=o("model.train()"),vSo=l(),F(H1.$$.fragment),vGe=l(),Qi=a("h2"),U1=a("a"),sge=a("span"),F(fy.$$.fragment),FSo=l(),lge=a("span"),TSo=o("AutoModelForSeq2SeqLM"),FGe=l(),Ro=a("div"),F(my.$$.fragment),MSo=l(),Hi=a("p"),ESo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sO=a("a"),CSo=o("from_pretrained()"),wSo=o(" class method or the "),lO=a("a"),ASo=o("from_config()"),LSo=o(` class
method.`),ySo=l(),gy=a("p"),xSo=o("This class cannot be instantiated directly using "),ige=a("code"),$So=o("__init__()"),kSo=o(" (throws an error)."),SSo=l(),ct=a("div"),F(hy.$$.fragment),RSo=l(),dge=a("p"),PSo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BSo=l(),Ui=a("p"),ISo=o(`Note:
Loading a model from its configuration file does `),cge=a("strong"),NSo=o("not"),qSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),jSo=o("from_pretrained()"),DSo=o(" to load the model weights."),GSo=l(),F(J1.$$.fragment),OSo=l(),eo=a("div"),F(py.$$.fragment),VSo=l(),fge=a("p"),XSo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zSo=l(),Na=a("p"),WSo=o("The model class to instantiate is selected based on the "),mge=a("code"),QSo=o("model_type"),HSo=o(` property of the config object (either
passed as an argument or loaded from `),gge=a("code"),USo=o("pretrained_model_name_or_path"),JSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=a("code"),YSo=o("pretrained_model_name_or_path"),KSo=o(":"),ZSo=l(),pe=a("ul"),Y1=a("li"),pge=a("strong"),eRo=o("bart"),oRo=o(" \u2014 "),dO=a("a"),rRo=o("BartForConditionalGeneration"),tRo=o(" (BART model)"),aRo=l(),K1=a("li"),uge=a("strong"),nRo=o("bigbird_pegasus"),sRo=o(" \u2014 "),cO=a("a"),lRo=o("BigBirdPegasusForConditionalGeneration"),iRo=o(" (BigBird-Pegasus model)"),dRo=l(),Z1=a("li"),_ge=a("strong"),cRo=o("blenderbot"),fRo=o(" \u2014 "),fO=a("a"),mRo=o("BlenderbotForConditionalGeneration"),gRo=o(" (Blenderbot model)"),hRo=l(),e7=a("li"),bge=a("strong"),pRo=o("blenderbot-small"),uRo=o(" \u2014 "),mO=a("a"),_Ro=o("BlenderbotSmallForConditionalGeneration"),bRo=o(" (BlenderbotSmall model)"),vRo=l(),o7=a("li"),vge=a("strong"),FRo=o("encoder-decoder"),TRo=o(" \u2014 "),gO=a("a"),MRo=o("EncoderDecoderModel"),ERo=o(" (Encoder decoder model)"),CRo=l(),r7=a("li"),Fge=a("strong"),wRo=o("fsmt"),ARo=o(" \u2014 "),hO=a("a"),LRo=o("FSMTForConditionalGeneration"),yRo=o(" (FairSeq Machine-Translation model)"),xRo=l(),t7=a("li"),Tge=a("strong"),$Ro=o("led"),kRo=o(" \u2014 "),pO=a("a"),SRo=o("LEDForConditionalGeneration"),RRo=o(" (LED model)"),PRo=l(),a7=a("li"),Mge=a("strong"),BRo=o("longt5"),IRo=o(" \u2014 "),uO=a("a"),NRo=o("LongT5ForConditionalGeneration"),qRo=o(" (LongT5 model)"),jRo=l(),n7=a("li"),Ege=a("strong"),DRo=o("m2m_100"),GRo=o(" \u2014 "),_O=a("a"),ORo=o("M2M100ForConditionalGeneration"),VRo=o(" (M2M100 model)"),XRo=l(),s7=a("li"),Cge=a("strong"),zRo=o("marian"),WRo=o(" \u2014 "),bO=a("a"),QRo=o("MarianMTModel"),HRo=o(" (Marian model)"),URo=l(),l7=a("li"),wge=a("strong"),JRo=o("mbart"),YRo=o(" \u2014 "),vO=a("a"),KRo=o("MBartForConditionalGeneration"),ZRo=o(" (mBART model)"),ePo=l(),i7=a("li"),Age=a("strong"),oPo=o("mt5"),rPo=o(" \u2014 "),FO=a("a"),tPo=o("MT5ForConditionalGeneration"),aPo=o(" (MT5 model)"),nPo=l(),d7=a("li"),Lge=a("strong"),sPo=o("pegasus"),lPo=o(" \u2014 "),TO=a("a"),iPo=o("PegasusForConditionalGeneration"),dPo=o(" (Pegasus model)"),cPo=l(),c7=a("li"),yge=a("strong"),fPo=o("plbart"),mPo=o(" \u2014 "),MO=a("a"),gPo=o("PLBartForConditionalGeneration"),hPo=o(" (PLBart model)"),pPo=l(),f7=a("li"),xge=a("strong"),uPo=o("prophetnet"),_Po=o(" \u2014 "),EO=a("a"),bPo=o("ProphetNetForConditionalGeneration"),vPo=o(" (ProphetNet model)"),FPo=l(),m7=a("li"),$ge=a("strong"),TPo=o("t5"),MPo=o(" \u2014 "),CO=a("a"),EPo=o("T5ForConditionalGeneration"),CPo=o(" (T5 model)"),wPo=l(),g7=a("li"),kge=a("strong"),APo=o("xlm-prophetnet"),LPo=o(" \u2014 "),wO=a("a"),yPo=o("XLMProphetNetForConditionalGeneration"),xPo=o(" (XLM-ProphetNet model)"),$Po=l(),h7=a("p"),kPo=o("The model is set in evaluation mode by default using "),Sge=a("code"),SPo=o("model.eval()"),RPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=a("code"),PPo=o("model.train()"),BPo=l(),F(p7.$$.fragment),TGe=l(),Ji=a("h2"),u7=a("a"),Pge=a("span"),F(uy.$$.fragment),IPo=l(),Bge=a("span"),NPo=o("AutoModelForSequenceClassification"),MGe=l(),Po=a("div"),F(_y.$$.fragment),qPo=l(),Yi=a("p"),jPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AO=a("a"),DPo=o("from_pretrained()"),GPo=o(" class method or the "),LO=a("a"),OPo=o("from_config()"),VPo=o(` class
method.`),XPo=l(),by=a("p"),zPo=o("This class cannot be instantiated directly using "),Ige=a("code"),WPo=o("__init__()"),QPo=o(" (throws an error)."),HPo=l(),ft=a("div"),F(vy.$$.fragment),UPo=l(),Nge=a("p"),JPo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YPo=l(),Ki=a("p"),KPo=o(`Note:
Loading a model from its configuration file does `),qge=a("strong"),ZPo=o("not"),eBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),oBo=o("from_pretrained()"),rBo=o(" to load the model weights."),tBo=l(),F(_7.$$.fragment),aBo=l(),oo=a("div"),F(Fy.$$.fragment),nBo=l(),jge=a("p"),sBo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),lBo=l(),qa=a("p"),iBo=o("The model class to instantiate is selected based on the "),Dge=a("code"),dBo=o("model_type"),cBo=o(` property of the config object (either
passed as an argument or loaded from `),Gge=a("code"),fBo=o("pretrained_model_name_or_path"),mBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=a("code"),gBo=o("pretrained_model_name_or_path"),hBo=o(":"),pBo=l(),q=a("ul"),b7=a("li"),Vge=a("strong"),uBo=o("albert"),_Bo=o(" \u2014 "),xO=a("a"),bBo=o("AlbertForSequenceClassification"),vBo=o(" (ALBERT model)"),FBo=l(),v7=a("li"),Xge=a("strong"),TBo=o("bart"),MBo=o(" \u2014 "),$O=a("a"),EBo=o("BartForSequenceClassification"),CBo=o(" (BART model)"),wBo=l(),F7=a("li"),zge=a("strong"),ABo=o("bert"),LBo=o(" \u2014 "),kO=a("a"),yBo=o("BertForSequenceClassification"),xBo=o(" (BERT model)"),$Bo=l(),T7=a("li"),Wge=a("strong"),kBo=o("big_bird"),SBo=o(" \u2014 "),SO=a("a"),RBo=o("BigBirdForSequenceClassification"),PBo=o(" (BigBird model)"),BBo=l(),M7=a("li"),Qge=a("strong"),IBo=o("bigbird_pegasus"),NBo=o(" \u2014 "),RO=a("a"),qBo=o("BigBirdPegasusForSequenceClassification"),jBo=o(" (BigBird-Pegasus model)"),DBo=l(),E7=a("li"),Hge=a("strong"),GBo=o("camembert"),OBo=o(" \u2014 "),PO=a("a"),VBo=o("CamembertForSequenceClassification"),XBo=o(" (CamemBERT model)"),zBo=l(),C7=a("li"),Uge=a("strong"),WBo=o("canine"),QBo=o(" \u2014 "),BO=a("a"),HBo=o("CanineForSequenceClassification"),UBo=o(" (CANINE model)"),JBo=l(),w7=a("li"),Jge=a("strong"),YBo=o("convbert"),KBo=o(" \u2014 "),IO=a("a"),ZBo=o("ConvBertForSequenceClassification"),eIo=o(" (ConvBERT model)"),oIo=l(),A7=a("li"),Yge=a("strong"),rIo=o("ctrl"),tIo=o(" \u2014 "),NO=a("a"),aIo=o("CTRLForSequenceClassification"),nIo=o(" (CTRL model)"),sIo=l(),L7=a("li"),Kge=a("strong"),lIo=o("data2vec-text"),iIo=o(" \u2014 "),qO=a("a"),dIo=o("Data2VecTextForSequenceClassification"),cIo=o(" (Data2VecText model)"),fIo=l(),y7=a("li"),Zge=a("strong"),mIo=o("deberta"),gIo=o(" \u2014 "),jO=a("a"),hIo=o("DebertaForSequenceClassification"),pIo=o(" (DeBERTa model)"),uIo=l(),x7=a("li"),ehe=a("strong"),_Io=o("deberta-v2"),bIo=o(" \u2014 "),DO=a("a"),vIo=o("DebertaV2ForSequenceClassification"),FIo=o(" (DeBERTa-v2 model)"),TIo=l(),$7=a("li"),ohe=a("strong"),MIo=o("distilbert"),EIo=o(" \u2014 "),GO=a("a"),CIo=o("DistilBertForSequenceClassification"),wIo=o(" (DistilBERT model)"),AIo=l(),k7=a("li"),rhe=a("strong"),LIo=o("electra"),yIo=o(" \u2014 "),OO=a("a"),xIo=o("ElectraForSequenceClassification"),$Io=o(" (ELECTRA model)"),kIo=l(),S7=a("li"),the=a("strong"),SIo=o("flaubert"),RIo=o(" \u2014 "),VO=a("a"),PIo=o("FlaubertForSequenceClassification"),BIo=o(" (FlauBERT model)"),IIo=l(),R7=a("li"),ahe=a("strong"),NIo=o("fnet"),qIo=o(" \u2014 "),XO=a("a"),jIo=o("FNetForSequenceClassification"),DIo=o(" (FNet model)"),GIo=l(),P7=a("li"),nhe=a("strong"),OIo=o("funnel"),VIo=o(" \u2014 "),zO=a("a"),XIo=o("FunnelForSequenceClassification"),zIo=o(" (Funnel Transformer model)"),WIo=l(),B7=a("li"),she=a("strong"),QIo=o("gpt2"),HIo=o(" \u2014 "),WO=a("a"),UIo=o("GPT2ForSequenceClassification"),JIo=o(" (OpenAI GPT-2 model)"),YIo=l(),I7=a("li"),lhe=a("strong"),KIo=o("gpt_neo"),ZIo=o(" \u2014 "),QO=a("a"),eNo=o("GPTNeoForSequenceClassification"),oNo=o(" (GPT Neo model)"),rNo=l(),N7=a("li"),ihe=a("strong"),tNo=o("gptj"),aNo=o(" \u2014 "),HO=a("a"),nNo=o("GPTJForSequenceClassification"),sNo=o(" (GPT-J model)"),lNo=l(),q7=a("li"),dhe=a("strong"),iNo=o("ibert"),dNo=o(" \u2014 "),UO=a("a"),cNo=o("IBertForSequenceClassification"),fNo=o(" (I-BERT model)"),mNo=l(),j7=a("li"),che=a("strong"),gNo=o("layoutlm"),hNo=o(" \u2014 "),JO=a("a"),pNo=o("LayoutLMForSequenceClassification"),uNo=o(" (LayoutLM model)"),_No=l(),D7=a("li"),fhe=a("strong"),bNo=o("layoutlmv2"),vNo=o(" \u2014 "),YO=a("a"),FNo=o("LayoutLMv2ForSequenceClassification"),TNo=o(" (LayoutLMv2 model)"),MNo=l(),G7=a("li"),mhe=a("strong"),ENo=o("layoutlmv3"),CNo=o(" \u2014 "),KO=a("a"),wNo=o("LayoutLMv3ForSequenceClassification"),ANo=o(" (LayoutLMv3 model)"),LNo=l(),O7=a("li"),ghe=a("strong"),yNo=o("led"),xNo=o(" \u2014 "),ZO=a("a"),$No=o("LEDForSequenceClassification"),kNo=o(" (LED model)"),SNo=l(),V7=a("li"),hhe=a("strong"),RNo=o("longformer"),PNo=o(" \u2014 "),eV=a("a"),BNo=o("LongformerForSequenceClassification"),INo=o(" (Longformer model)"),NNo=l(),X7=a("li"),phe=a("strong"),qNo=o("mbart"),jNo=o(" \u2014 "),oV=a("a"),DNo=o("MBartForSequenceClassification"),GNo=o(" (mBART model)"),ONo=l(),z7=a("li"),uhe=a("strong"),VNo=o("megatron-bert"),XNo=o(" \u2014 "),rV=a("a"),zNo=o("MegatronBertForSequenceClassification"),WNo=o(" (Megatron-BERT model)"),QNo=l(),W7=a("li"),_he=a("strong"),HNo=o("mobilebert"),UNo=o(" \u2014 "),tV=a("a"),JNo=o("MobileBertForSequenceClassification"),YNo=o(" (MobileBERT model)"),KNo=l(),Q7=a("li"),bhe=a("strong"),ZNo=o("mpnet"),eqo=o(" \u2014 "),aV=a("a"),oqo=o("MPNetForSequenceClassification"),rqo=o(" (MPNet model)"),tqo=l(),H7=a("li"),vhe=a("strong"),aqo=o("nystromformer"),nqo=o(" \u2014 "),nV=a("a"),sqo=o("NystromformerForSequenceClassification"),lqo=o(" (Nystr\xF6mformer model)"),iqo=l(),U7=a("li"),Fhe=a("strong"),dqo=o("openai-gpt"),cqo=o(" \u2014 "),sV=a("a"),fqo=o("OpenAIGPTForSequenceClassification"),mqo=o(" (OpenAI GPT model)"),gqo=l(),J7=a("li"),The=a("strong"),hqo=o("perceiver"),pqo=o(" \u2014 "),lV=a("a"),uqo=o("PerceiverForSequenceClassification"),_qo=o(" (Perceiver model)"),bqo=l(),Y7=a("li"),Mhe=a("strong"),vqo=o("plbart"),Fqo=o(" \u2014 "),iV=a("a"),Tqo=o("PLBartForSequenceClassification"),Mqo=o(" (PLBart model)"),Eqo=l(),K7=a("li"),Ehe=a("strong"),Cqo=o("qdqbert"),wqo=o(" \u2014 "),dV=a("a"),Aqo=o("QDQBertForSequenceClassification"),Lqo=o(" (QDQBert model)"),yqo=l(),Z7=a("li"),Che=a("strong"),xqo=o("reformer"),$qo=o(" \u2014 "),cV=a("a"),kqo=o("ReformerForSequenceClassification"),Sqo=o(" (Reformer model)"),Rqo=l(),eb=a("li"),whe=a("strong"),Pqo=o("rembert"),Bqo=o(" \u2014 "),fV=a("a"),Iqo=o("RemBertForSequenceClassification"),Nqo=o(" (RemBERT model)"),qqo=l(),ob=a("li"),Ahe=a("strong"),jqo=o("roberta"),Dqo=o(" \u2014 "),mV=a("a"),Gqo=o("RobertaForSequenceClassification"),Oqo=o(" (RoBERTa model)"),Vqo=l(),rb=a("li"),Lhe=a("strong"),Xqo=o("roformer"),zqo=o(" \u2014 "),gV=a("a"),Wqo=o("RoFormerForSequenceClassification"),Qqo=o(" (RoFormer model)"),Hqo=l(),tb=a("li"),yhe=a("strong"),Uqo=o("squeezebert"),Jqo=o(" \u2014 "),hV=a("a"),Yqo=o("SqueezeBertForSequenceClassification"),Kqo=o(" (SqueezeBERT model)"),Zqo=l(),ab=a("li"),xhe=a("strong"),ejo=o("tapas"),ojo=o(" \u2014 "),pV=a("a"),rjo=o("TapasForSequenceClassification"),tjo=o(" (TAPAS model)"),ajo=l(),nb=a("li"),$he=a("strong"),njo=o("transfo-xl"),sjo=o(" \u2014 "),uV=a("a"),ljo=o("TransfoXLForSequenceClassification"),ijo=o(" (Transformer-XL model)"),djo=l(),sb=a("li"),khe=a("strong"),cjo=o("xlm"),fjo=o(" \u2014 "),_V=a("a"),mjo=o("XLMForSequenceClassification"),gjo=o(" (XLM model)"),hjo=l(),lb=a("li"),She=a("strong"),pjo=o("xlm-roberta"),ujo=o(" \u2014 "),bV=a("a"),_jo=o("XLMRobertaForSequenceClassification"),bjo=o(" (XLM-RoBERTa model)"),vjo=l(),ib=a("li"),Rhe=a("strong"),Fjo=o("xlm-roberta-xl"),Tjo=o(" \u2014 "),vV=a("a"),Mjo=o("XLMRobertaXLForSequenceClassification"),Ejo=o(" (XLM-RoBERTa-XL model)"),Cjo=l(),db=a("li"),Phe=a("strong"),wjo=o("xlnet"),Ajo=o(" \u2014 "),FV=a("a"),Ljo=o("XLNetForSequenceClassification"),yjo=o(" (XLNet model)"),xjo=l(),cb=a("li"),Bhe=a("strong"),$jo=o("yoso"),kjo=o(" \u2014 "),TV=a("a"),Sjo=o("YosoForSequenceClassification"),Rjo=o(" (YOSO model)"),Pjo=l(),fb=a("p"),Bjo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),Ijo=o("model.eval()"),Njo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),qjo=o("model.train()"),jjo=l(),F(mb.$$.fragment),EGe=l(),Zi=a("h2"),gb=a("a"),qhe=a("span"),F(Ty.$$.fragment),Djo=l(),jhe=a("span"),Gjo=o("AutoModelForMultipleChoice"),CGe=l(),Bo=a("div"),F(My.$$.fragment),Ojo=l(),ed=a("p"),Vjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MV=a("a"),Xjo=o("from_pretrained()"),zjo=o(" class method or the "),EV=a("a"),Wjo=o("from_config()"),Qjo=o(` class
method.`),Hjo=l(),Ey=a("p"),Ujo=o("This class cannot be instantiated directly using "),Dhe=a("code"),Jjo=o("__init__()"),Yjo=o(" (throws an error)."),Kjo=l(),mt=a("div"),F(Cy.$$.fragment),Zjo=l(),Ghe=a("p"),eDo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oDo=l(),od=a("p"),rDo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),tDo=o("not"),aDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=a("a"),nDo=o("from_pretrained()"),sDo=o(" to load the model weights."),lDo=l(),F(hb.$$.fragment),iDo=l(),ro=a("div"),F(wy.$$.fragment),dDo=l(),Vhe=a("p"),cDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fDo=l(),ja=a("p"),mDo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),gDo=o("model_type"),hDo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),pDo=o("pretrained_model_name_or_path"),uDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=a("code"),_Do=o("pretrained_model_name_or_path"),bDo=o(":"),vDo=l(),Z=a("ul"),pb=a("li"),Qhe=a("strong"),FDo=o("albert"),TDo=o(" \u2014 "),wV=a("a"),MDo=o("AlbertForMultipleChoice"),EDo=o(" (ALBERT model)"),CDo=l(),ub=a("li"),Hhe=a("strong"),wDo=o("bert"),ADo=o(" \u2014 "),AV=a("a"),LDo=o("BertForMultipleChoice"),yDo=o(" (BERT model)"),xDo=l(),_b=a("li"),Uhe=a("strong"),$Do=o("big_bird"),kDo=o(" \u2014 "),LV=a("a"),SDo=o("BigBirdForMultipleChoice"),RDo=o(" (BigBird model)"),PDo=l(),bb=a("li"),Jhe=a("strong"),BDo=o("camembert"),IDo=o(" \u2014 "),yV=a("a"),NDo=o("CamembertForMultipleChoice"),qDo=o(" (CamemBERT model)"),jDo=l(),vb=a("li"),Yhe=a("strong"),DDo=o("canine"),GDo=o(" \u2014 "),xV=a("a"),ODo=o("CanineForMultipleChoice"),VDo=o(" (CANINE model)"),XDo=l(),Fb=a("li"),Khe=a("strong"),zDo=o("convbert"),WDo=o(" \u2014 "),$V=a("a"),QDo=o("ConvBertForMultipleChoice"),HDo=o(" (ConvBERT model)"),UDo=l(),Tb=a("li"),Zhe=a("strong"),JDo=o("data2vec-text"),YDo=o(" \u2014 "),kV=a("a"),KDo=o("Data2VecTextForMultipleChoice"),ZDo=o(" (Data2VecText model)"),eGo=l(),Mb=a("li"),epe=a("strong"),oGo=o("deberta-v2"),rGo=o(" \u2014 "),SV=a("a"),tGo=o("DebertaV2ForMultipleChoice"),aGo=o(" (DeBERTa-v2 model)"),nGo=l(),Eb=a("li"),ope=a("strong"),sGo=o("distilbert"),lGo=o(" \u2014 "),RV=a("a"),iGo=o("DistilBertForMultipleChoice"),dGo=o(" (DistilBERT model)"),cGo=l(),Cb=a("li"),rpe=a("strong"),fGo=o("electra"),mGo=o(" \u2014 "),PV=a("a"),gGo=o("ElectraForMultipleChoice"),hGo=o(" (ELECTRA model)"),pGo=l(),wb=a("li"),tpe=a("strong"),uGo=o("flaubert"),_Go=o(" \u2014 "),BV=a("a"),bGo=o("FlaubertForMultipleChoice"),vGo=o(" (FlauBERT model)"),FGo=l(),Ab=a("li"),ape=a("strong"),TGo=o("fnet"),MGo=o(" \u2014 "),IV=a("a"),EGo=o("FNetForMultipleChoice"),CGo=o(" (FNet model)"),wGo=l(),Lb=a("li"),npe=a("strong"),AGo=o("funnel"),LGo=o(" \u2014 "),NV=a("a"),yGo=o("FunnelForMultipleChoice"),xGo=o(" (Funnel Transformer model)"),$Go=l(),yb=a("li"),spe=a("strong"),kGo=o("ibert"),SGo=o(" \u2014 "),qV=a("a"),RGo=o("IBertForMultipleChoice"),PGo=o(" (I-BERT model)"),BGo=l(),xb=a("li"),lpe=a("strong"),IGo=o("longformer"),NGo=o(" \u2014 "),jV=a("a"),qGo=o("LongformerForMultipleChoice"),jGo=o(" (Longformer model)"),DGo=l(),$b=a("li"),ipe=a("strong"),GGo=o("megatron-bert"),OGo=o(" \u2014 "),DV=a("a"),VGo=o("MegatronBertForMultipleChoice"),XGo=o(" (Megatron-BERT model)"),zGo=l(),kb=a("li"),dpe=a("strong"),WGo=o("mobilebert"),QGo=o(" \u2014 "),GV=a("a"),HGo=o("MobileBertForMultipleChoice"),UGo=o(" (MobileBERT model)"),JGo=l(),Sb=a("li"),cpe=a("strong"),YGo=o("mpnet"),KGo=o(" \u2014 "),OV=a("a"),ZGo=o("MPNetForMultipleChoice"),eOo=o(" (MPNet model)"),oOo=l(),Rb=a("li"),fpe=a("strong"),rOo=o("nystromformer"),tOo=o(" \u2014 "),VV=a("a"),aOo=o("NystromformerForMultipleChoice"),nOo=o(" (Nystr\xF6mformer model)"),sOo=l(),Pb=a("li"),mpe=a("strong"),lOo=o("qdqbert"),iOo=o(" \u2014 "),XV=a("a"),dOo=o("QDQBertForMultipleChoice"),cOo=o(" (QDQBert model)"),fOo=l(),Bb=a("li"),gpe=a("strong"),mOo=o("rembert"),gOo=o(" \u2014 "),zV=a("a"),hOo=o("RemBertForMultipleChoice"),pOo=o(" (RemBERT model)"),uOo=l(),Ib=a("li"),hpe=a("strong"),_Oo=o("roberta"),bOo=o(" \u2014 "),WV=a("a"),vOo=o("RobertaForMultipleChoice"),FOo=o(" (RoBERTa model)"),TOo=l(),Nb=a("li"),ppe=a("strong"),MOo=o("roformer"),EOo=o(" \u2014 "),QV=a("a"),COo=o("RoFormerForMultipleChoice"),wOo=o(" (RoFormer model)"),AOo=l(),qb=a("li"),upe=a("strong"),LOo=o("squeezebert"),yOo=o(" \u2014 "),HV=a("a"),xOo=o("SqueezeBertForMultipleChoice"),$Oo=o(" (SqueezeBERT model)"),kOo=l(),jb=a("li"),_pe=a("strong"),SOo=o("xlm"),ROo=o(" \u2014 "),UV=a("a"),POo=o("XLMForMultipleChoice"),BOo=o(" (XLM model)"),IOo=l(),Db=a("li"),bpe=a("strong"),NOo=o("xlm-roberta"),qOo=o(" \u2014 "),JV=a("a"),jOo=o("XLMRobertaForMultipleChoice"),DOo=o(" (XLM-RoBERTa model)"),GOo=l(),Gb=a("li"),vpe=a("strong"),OOo=o("xlm-roberta-xl"),VOo=o(" \u2014 "),YV=a("a"),XOo=o("XLMRobertaXLForMultipleChoice"),zOo=o(" (XLM-RoBERTa-XL model)"),WOo=l(),Ob=a("li"),Fpe=a("strong"),QOo=o("xlnet"),HOo=o(" \u2014 "),KV=a("a"),UOo=o("XLNetForMultipleChoice"),JOo=o(" (XLNet model)"),YOo=l(),Vb=a("li"),Tpe=a("strong"),KOo=o("yoso"),ZOo=o(" \u2014 "),ZV=a("a"),eVo=o("YosoForMultipleChoice"),oVo=o(" (YOSO model)"),rVo=l(),Xb=a("p"),tVo=o("The model is set in evaluation mode by default using "),Mpe=a("code"),aVo=o("model.eval()"),nVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=a("code"),sVo=o("model.train()"),lVo=l(),F(zb.$$.fragment),wGe=l(),rd=a("h2"),Wb=a("a"),Cpe=a("span"),F(Ay.$$.fragment),iVo=l(),wpe=a("span"),dVo=o("AutoModelForNextSentencePrediction"),AGe=l(),Io=a("div"),F(Ly.$$.fragment),cVo=l(),td=a("p"),fVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eX=a("a"),mVo=o("from_pretrained()"),gVo=o(" class method or the "),oX=a("a"),hVo=o("from_config()"),pVo=o(` class
method.`),uVo=l(),yy=a("p"),_Vo=o("This class cannot be instantiated directly using "),Ape=a("code"),bVo=o("__init__()"),vVo=o(" (throws an error)."),FVo=l(),gt=a("div"),F(xy.$$.fragment),TVo=l(),Lpe=a("p"),MVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EVo=l(),ad=a("p"),CVo=o(`Note:
Loading a model from its configuration file does `),ype=a("strong"),wVo=o("not"),AVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=a("a"),LVo=o("from_pretrained()"),yVo=o(" to load the model weights."),xVo=l(),F(Qb.$$.fragment),$Vo=l(),to=a("div"),F($y.$$.fragment),kVo=l(),xpe=a("p"),SVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),RVo=l(),Da=a("p"),PVo=o("The model class to instantiate is selected based on the "),$pe=a("code"),BVo=o("model_type"),IVo=o(` property of the config object (either
passed as an argument or loaded from `),kpe=a("code"),NVo=o("pretrained_model_name_or_path"),qVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=a("code"),jVo=o("pretrained_model_name_or_path"),DVo=o(":"),GVo=l(),Zr=a("ul"),Hb=a("li"),Rpe=a("strong"),OVo=o("bert"),VVo=o(" \u2014 "),tX=a("a"),XVo=o("BertForNextSentencePrediction"),zVo=o(" (BERT model)"),WVo=l(),Ub=a("li"),Ppe=a("strong"),QVo=o("fnet"),HVo=o(" \u2014 "),aX=a("a"),UVo=o("FNetForNextSentencePrediction"),JVo=o(" (FNet model)"),YVo=l(),Jb=a("li"),Bpe=a("strong"),KVo=o("megatron-bert"),ZVo=o(" \u2014 "),nX=a("a"),eXo=o("MegatronBertForNextSentencePrediction"),oXo=o(" (Megatron-BERT model)"),rXo=l(),Yb=a("li"),Ipe=a("strong"),tXo=o("mobilebert"),aXo=o(" \u2014 "),sX=a("a"),nXo=o("MobileBertForNextSentencePrediction"),sXo=o(" (MobileBERT model)"),lXo=l(),Kb=a("li"),Npe=a("strong"),iXo=o("qdqbert"),dXo=o(" \u2014 "),lX=a("a"),cXo=o("QDQBertForNextSentencePrediction"),fXo=o(" (QDQBert model)"),mXo=l(),Zb=a("p"),gXo=o("The model is set in evaluation mode by default using "),qpe=a("code"),hXo=o("model.eval()"),pXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=a("code"),uXo=o("model.train()"),_Xo=l(),F(e4.$$.fragment),LGe=l(),nd=a("h2"),o4=a("a"),Dpe=a("span"),F(ky.$$.fragment),bXo=l(),Gpe=a("span"),vXo=o("AutoModelForTokenClassification"),yGe=l(),No=a("div"),F(Sy.$$.fragment),FXo=l(),sd=a("p"),TXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iX=a("a"),MXo=o("from_pretrained()"),EXo=o(" class method or the "),dX=a("a"),CXo=o("from_config()"),wXo=o(` class
method.`),AXo=l(),Ry=a("p"),LXo=o("This class cannot be instantiated directly using "),Ope=a("code"),yXo=o("__init__()"),xXo=o(" (throws an error)."),$Xo=l(),ht=a("div"),F(Py.$$.fragment),kXo=l(),Vpe=a("p"),SXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RXo=l(),ld=a("p"),PXo=o(`Note:
Loading a model from its configuration file does `),Xpe=a("strong"),BXo=o("not"),IXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),NXo=o("from_pretrained()"),qXo=o(" to load the model weights."),jXo=l(),F(r4.$$.fragment),DXo=l(),ao=a("div"),F(By.$$.fragment),GXo=l(),zpe=a("p"),OXo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VXo=l(),Ga=a("p"),XXo=o("The model class to instantiate is selected based on the "),Wpe=a("code"),zXo=o("model_type"),WXo=o(` property of the config object (either
passed as an argument or loaded from `),Qpe=a("code"),QXo=o("pretrained_model_name_or_path"),HXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=a("code"),UXo=o("pretrained_model_name_or_path"),JXo=o(":"),YXo=l(),U=a("ul"),t4=a("li"),Upe=a("strong"),KXo=o("albert"),ZXo=o(" \u2014 "),fX=a("a"),ezo=o("AlbertForTokenClassification"),ozo=o(" (ALBERT model)"),rzo=l(),a4=a("li"),Jpe=a("strong"),tzo=o("bert"),azo=o(" \u2014 "),mX=a("a"),nzo=o("BertForTokenClassification"),szo=o(" (BERT model)"),lzo=l(),n4=a("li"),Ype=a("strong"),izo=o("big_bird"),dzo=o(" \u2014 "),gX=a("a"),czo=o("BigBirdForTokenClassification"),fzo=o(" (BigBird model)"),mzo=l(),s4=a("li"),Kpe=a("strong"),gzo=o("camembert"),hzo=o(" \u2014 "),hX=a("a"),pzo=o("CamembertForTokenClassification"),uzo=o(" (CamemBERT model)"),_zo=l(),l4=a("li"),Zpe=a("strong"),bzo=o("canine"),vzo=o(" \u2014 "),pX=a("a"),Fzo=o("CanineForTokenClassification"),Tzo=o(" (CANINE model)"),Mzo=l(),i4=a("li"),eue=a("strong"),Ezo=o("convbert"),Czo=o(" \u2014 "),uX=a("a"),wzo=o("ConvBertForTokenClassification"),Azo=o(" (ConvBERT model)"),Lzo=l(),d4=a("li"),oue=a("strong"),yzo=o("data2vec-text"),xzo=o(" \u2014 "),_X=a("a"),$zo=o("Data2VecTextForTokenClassification"),kzo=o(" (Data2VecText model)"),Szo=l(),c4=a("li"),rue=a("strong"),Rzo=o("deberta"),Pzo=o(" \u2014 "),bX=a("a"),Bzo=o("DebertaForTokenClassification"),Izo=o(" (DeBERTa model)"),Nzo=l(),f4=a("li"),tue=a("strong"),qzo=o("deberta-v2"),jzo=o(" \u2014 "),vX=a("a"),Dzo=o("DebertaV2ForTokenClassification"),Gzo=o(" (DeBERTa-v2 model)"),Ozo=l(),m4=a("li"),aue=a("strong"),Vzo=o("distilbert"),Xzo=o(" \u2014 "),FX=a("a"),zzo=o("DistilBertForTokenClassification"),Wzo=o(" (DistilBERT model)"),Qzo=l(),g4=a("li"),nue=a("strong"),Hzo=o("electra"),Uzo=o(" \u2014 "),TX=a("a"),Jzo=o("ElectraForTokenClassification"),Yzo=o(" (ELECTRA model)"),Kzo=l(),h4=a("li"),sue=a("strong"),Zzo=o("flaubert"),eWo=o(" \u2014 "),MX=a("a"),oWo=o("FlaubertForTokenClassification"),rWo=o(" (FlauBERT model)"),tWo=l(),p4=a("li"),lue=a("strong"),aWo=o("fnet"),nWo=o(" \u2014 "),EX=a("a"),sWo=o("FNetForTokenClassification"),lWo=o(" (FNet model)"),iWo=l(),u4=a("li"),iue=a("strong"),dWo=o("funnel"),cWo=o(" \u2014 "),CX=a("a"),fWo=o("FunnelForTokenClassification"),mWo=o(" (Funnel Transformer model)"),gWo=l(),_4=a("li"),due=a("strong"),hWo=o("gpt2"),pWo=o(" \u2014 "),wX=a("a"),uWo=o("GPT2ForTokenClassification"),_Wo=o(" (OpenAI GPT-2 model)"),bWo=l(),b4=a("li"),cue=a("strong"),vWo=o("ibert"),FWo=o(" \u2014 "),AX=a("a"),TWo=o("IBertForTokenClassification"),MWo=o(" (I-BERT model)"),EWo=l(),v4=a("li"),fue=a("strong"),CWo=o("layoutlm"),wWo=o(" \u2014 "),LX=a("a"),AWo=o("LayoutLMForTokenClassification"),LWo=o(" (LayoutLM model)"),yWo=l(),F4=a("li"),mue=a("strong"),xWo=o("layoutlmv2"),$Wo=o(" \u2014 "),yX=a("a"),kWo=o("LayoutLMv2ForTokenClassification"),SWo=o(" (LayoutLMv2 model)"),RWo=l(),T4=a("li"),gue=a("strong"),PWo=o("layoutlmv3"),BWo=o(" \u2014 "),xX=a("a"),IWo=o("LayoutLMv3ForTokenClassification"),NWo=o(" (LayoutLMv3 model)"),qWo=l(),M4=a("li"),hue=a("strong"),jWo=o("longformer"),DWo=o(" \u2014 "),$X=a("a"),GWo=o("LongformerForTokenClassification"),OWo=o(" (Longformer model)"),VWo=l(),E4=a("li"),pue=a("strong"),XWo=o("megatron-bert"),zWo=o(" \u2014 "),kX=a("a"),WWo=o("MegatronBertForTokenClassification"),QWo=o(" (Megatron-BERT model)"),HWo=l(),C4=a("li"),uue=a("strong"),UWo=o("mobilebert"),JWo=o(" \u2014 "),SX=a("a"),YWo=o("MobileBertForTokenClassification"),KWo=o(" (MobileBERT model)"),ZWo=l(),w4=a("li"),_ue=a("strong"),eQo=o("mpnet"),oQo=o(" \u2014 "),RX=a("a"),rQo=o("MPNetForTokenClassification"),tQo=o(" (MPNet model)"),aQo=l(),A4=a("li"),bue=a("strong"),nQo=o("nystromformer"),sQo=o(" \u2014 "),PX=a("a"),lQo=o("NystromformerForTokenClassification"),iQo=o(" (Nystr\xF6mformer model)"),dQo=l(),L4=a("li"),vue=a("strong"),cQo=o("qdqbert"),fQo=o(" \u2014 "),BX=a("a"),mQo=o("QDQBertForTokenClassification"),gQo=o(" (QDQBert model)"),hQo=l(),y4=a("li"),Fue=a("strong"),pQo=o("rembert"),uQo=o(" \u2014 "),IX=a("a"),_Qo=o("RemBertForTokenClassification"),bQo=o(" (RemBERT model)"),vQo=l(),x4=a("li"),Tue=a("strong"),FQo=o("roberta"),TQo=o(" \u2014 "),NX=a("a"),MQo=o("RobertaForTokenClassification"),EQo=o(" (RoBERTa model)"),CQo=l(),$4=a("li"),Mue=a("strong"),wQo=o("roformer"),AQo=o(" \u2014 "),qX=a("a"),LQo=o("RoFormerForTokenClassification"),yQo=o(" (RoFormer model)"),xQo=l(),k4=a("li"),Eue=a("strong"),$Qo=o("squeezebert"),kQo=o(" \u2014 "),jX=a("a"),SQo=o("SqueezeBertForTokenClassification"),RQo=o(" (SqueezeBERT model)"),PQo=l(),S4=a("li"),Cue=a("strong"),BQo=o("xlm"),IQo=o(" \u2014 "),DX=a("a"),NQo=o("XLMForTokenClassification"),qQo=o(" (XLM model)"),jQo=l(),R4=a("li"),wue=a("strong"),DQo=o("xlm-roberta"),GQo=o(" \u2014 "),GX=a("a"),OQo=o("XLMRobertaForTokenClassification"),VQo=o(" (XLM-RoBERTa model)"),XQo=l(),P4=a("li"),Aue=a("strong"),zQo=o("xlm-roberta-xl"),WQo=o(" \u2014 "),OX=a("a"),QQo=o("XLMRobertaXLForTokenClassification"),HQo=o(" (XLM-RoBERTa-XL model)"),UQo=l(),B4=a("li"),Lue=a("strong"),JQo=o("xlnet"),YQo=o(" \u2014 "),VX=a("a"),KQo=o("XLNetForTokenClassification"),ZQo=o(" (XLNet model)"),eHo=l(),I4=a("li"),yue=a("strong"),oHo=o("yoso"),rHo=o(" \u2014 "),XX=a("a"),tHo=o("YosoForTokenClassification"),aHo=o(" (YOSO model)"),nHo=l(),N4=a("p"),sHo=o("The model is set in evaluation mode by default using "),xue=a("code"),lHo=o("model.eval()"),iHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=a("code"),dHo=o("model.train()"),cHo=l(),F(q4.$$.fragment),xGe=l(),id=a("h2"),j4=a("a"),kue=a("span"),F(Iy.$$.fragment),fHo=l(),Sue=a("span"),mHo=o("AutoModelForQuestionAnswering"),$Ge=l(),qo=a("div"),F(Ny.$$.fragment),gHo=l(),dd=a("p"),hHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zX=a("a"),pHo=o("from_pretrained()"),uHo=o(" class method or the "),WX=a("a"),_Ho=o("from_config()"),bHo=o(` class
method.`),vHo=l(),qy=a("p"),FHo=o("This class cannot be instantiated directly using "),Rue=a("code"),THo=o("__init__()"),MHo=o(" (throws an error)."),EHo=l(),pt=a("div"),F(jy.$$.fragment),CHo=l(),Pue=a("p"),wHo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),AHo=l(),cd=a("p"),LHo=o(`Note:
Loading a model from its configuration file does `),Bue=a("strong"),yHo=o("not"),xHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),$Ho=o("from_pretrained()"),kHo=o(" to load the model weights."),SHo=l(),F(D4.$$.fragment),RHo=l(),no=a("div"),F(Dy.$$.fragment),PHo=l(),Iue=a("p"),BHo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),IHo=l(),Oa=a("p"),NHo=o("The model class to instantiate is selected based on the "),Nue=a("code"),qHo=o("model_type"),jHo=o(` property of the config object (either
passed as an argument or loaded from `),que=a("code"),DHo=o("pretrained_model_name_or_path"),GHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=a("code"),OHo=o("pretrained_model_name_or_path"),VHo=o(":"),XHo=l(),V=a("ul"),G4=a("li"),Due=a("strong"),zHo=o("albert"),WHo=o(" \u2014 "),HX=a("a"),QHo=o("AlbertForQuestionAnswering"),HHo=o(" (ALBERT model)"),UHo=l(),O4=a("li"),Gue=a("strong"),JHo=o("bart"),YHo=o(" \u2014 "),UX=a("a"),KHo=o("BartForQuestionAnswering"),ZHo=o(" (BART model)"),eUo=l(),V4=a("li"),Oue=a("strong"),oUo=o("bert"),rUo=o(" \u2014 "),JX=a("a"),tUo=o("BertForQuestionAnswering"),aUo=o(" (BERT model)"),nUo=l(),X4=a("li"),Vue=a("strong"),sUo=o("big_bird"),lUo=o(" \u2014 "),YX=a("a"),iUo=o("BigBirdForQuestionAnswering"),dUo=o(" (BigBird model)"),cUo=l(),z4=a("li"),Xue=a("strong"),fUo=o("bigbird_pegasus"),mUo=o(" \u2014 "),KX=a("a"),gUo=o("BigBirdPegasusForQuestionAnswering"),hUo=o(" (BigBird-Pegasus model)"),pUo=l(),W4=a("li"),zue=a("strong"),uUo=o("camembert"),_Uo=o(" \u2014 "),ZX=a("a"),bUo=o("CamembertForQuestionAnswering"),vUo=o(" (CamemBERT model)"),FUo=l(),Q4=a("li"),Wue=a("strong"),TUo=o("canine"),MUo=o(" \u2014 "),ez=a("a"),EUo=o("CanineForQuestionAnswering"),CUo=o(" (CANINE model)"),wUo=l(),H4=a("li"),Que=a("strong"),AUo=o("convbert"),LUo=o(" \u2014 "),oz=a("a"),yUo=o("ConvBertForQuestionAnswering"),xUo=o(" (ConvBERT model)"),$Uo=l(),U4=a("li"),Hue=a("strong"),kUo=o("data2vec-text"),SUo=o(" \u2014 "),rz=a("a"),RUo=o("Data2VecTextForQuestionAnswering"),PUo=o(" (Data2VecText model)"),BUo=l(),J4=a("li"),Uue=a("strong"),IUo=o("deberta"),NUo=o(" \u2014 "),tz=a("a"),qUo=o("DebertaForQuestionAnswering"),jUo=o(" (DeBERTa model)"),DUo=l(),Y4=a("li"),Jue=a("strong"),GUo=o("deberta-v2"),OUo=o(" \u2014 "),az=a("a"),VUo=o("DebertaV2ForQuestionAnswering"),XUo=o(" (DeBERTa-v2 model)"),zUo=l(),K4=a("li"),Yue=a("strong"),WUo=o("distilbert"),QUo=o(" \u2014 "),nz=a("a"),HUo=o("DistilBertForQuestionAnswering"),UUo=o(" (DistilBERT model)"),JUo=l(),Z4=a("li"),Kue=a("strong"),YUo=o("electra"),KUo=o(" \u2014 "),sz=a("a"),ZUo=o("ElectraForQuestionAnswering"),eJo=o(" (ELECTRA model)"),oJo=l(),ev=a("li"),Zue=a("strong"),rJo=o("flaubert"),tJo=o(" \u2014 "),lz=a("a"),aJo=o("FlaubertForQuestionAnsweringSimple"),nJo=o(" (FlauBERT model)"),sJo=l(),ov=a("li"),e_e=a("strong"),lJo=o("fnet"),iJo=o(" \u2014 "),iz=a("a"),dJo=o("FNetForQuestionAnswering"),cJo=o(" (FNet model)"),fJo=l(),rv=a("li"),o_e=a("strong"),mJo=o("funnel"),gJo=o(" \u2014 "),dz=a("a"),hJo=o("FunnelForQuestionAnswering"),pJo=o(" (Funnel Transformer model)"),uJo=l(),tv=a("li"),r_e=a("strong"),_Jo=o("gptj"),bJo=o(" \u2014 "),cz=a("a"),vJo=o("GPTJForQuestionAnswering"),FJo=o(" (GPT-J model)"),TJo=l(),av=a("li"),t_e=a("strong"),MJo=o("ibert"),EJo=o(" \u2014 "),fz=a("a"),CJo=o("IBertForQuestionAnswering"),wJo=o(" (I-BERT model)"),AJo=l(),nv=a("li"),a_e=a("strong"),LJo=o("layoutlmv2"),yJo=o(" \u2014 "),mz=a("a"),xJo=o("LayoutLMv2ForQuestionAnswering"),$Jo=o(" (LayoutLMv2 model)"),kJo=l(),sv=a("li"),n_e=a("strong"),SJo=o("layoutlmv3"),RJo=o(" \u2014 "),gz=a("a"),PJo=o("LayoutLMv3ForQuestionAnswering"),BJo=o(" (LayoutLMv3 model)"),IJo=l(),lv=a("li"),s_e=a("strong"),NJo=o("led"),qJo=o(" \u2014 "),hz=a("a"),jJo=o("LEDForQuestionAnswering"),DJo=o(" (LED model)"),GJo=l(),iv=a("li"),l_e=a("strong"),OJo=o("longformer"),VJo=o(" \u2014 "),pz=a("a"),XJo=o("LongformerForQuestionAnswering"),zJo=o(" (Longformer model)"),WJo=l(),dv=a("li"),i_e=a("strong"),QJo=o("lxmert"),HJo=o(" \u2014 "),uz=a("a"),UJo=o("LxmertForQuestionAnswering"),JJo=o(" (LXMERT model)"),YJo=l(),cv=a("li"),d_e=a("strong"),KJo=o("mbart"),ZJo=o(" \u2014 "),_z=a("a"),eYo=o("MBartForQuestionAnswering"),oYo=o(" (mBART model)"),rYo=l(),fv=a("li"),c_e=a("strong"),tYo=o("megatron-bert"),aYo=o(" \u2014 "),bz=a("a"),nYo=o("MegatronBertForQuestionAnswering"),sYo=o(" (Megatron-BERT model)"),lYo=l(),mv=a("li"),f_e=a("strong"),iYo=o("mobilebert"),dYo=o(" \u2014 "),vz=a("a"),cYo=o("MobileBertForQuestionAnswering"),fYo=o(" (MobileBERT model)"),mYo=l(),gv=a("li"),m_e=a("strong"),gYo=o("mpnet"),hYo=o(" \u2014 "),Fz=a("a"),pYo=o("MPNetForQuestionAnswering"),uYo=o(" (MPNet model)"),_Yo=l(),hv=a("li"),g_e=a("strong"),bYo=o("nystromformer"),vYo=o(" \u2014 "),Tz=a("a"),FYo=o("NystromformerForQuestionAnswering"),TYo=o(" (Nystr\xF6mformer model)"),MYo=l(),pv=a("li"),h_e=a("strong"),EYo=o("qdqbert"),CYo=o(" \u2014 "),Mz=a("a"),wYo=o("QDQBertForQuestionAnswering"),AYo=o(" (QDQBert model)"),LYo=l(),uv=a("li"),p_e=a("strong"),yYo=o("reformer"),xYo=o(" \u2014 "),Ez=a("a"),$Yo=o("ReformerForQuestionAnswering"),kYo=o(" (Reformer model)"),SYo=l(),_v=a("li"),u_e=a("strong"),RYo=o("rembert"),PYo=o(" \u2014 "),Cz=a("a"),BYo=o("RemBertForQuestionAnswering"),IYo=o(" (RemBERT model)"),NYo=l(),bv=a("li"),__e=a("strong"),qYo=o("roberta"),jYo=o(" \u2014 "),wz=a("a"),DYo=o("RobertaForQuestionAnswering"),GYo=o(" (RoBERTa model)"),OYo=l(),vv=a("li"),b_e=a("strong"),VYo=o("roformer"),XYo=o(" \u2014 "),Az=a("a"),zYo=o("RoFormerForQuestionAnswering"),WYo=o(" (RoFormer model)"),QYo=l(),Fv=a("li"),v_e=a("strong"),HYo=o("splinter"),UYo=o(" \u2014 "),Lz=a("a"),JYo=o("SplinterForQuestionAnswering"),YYo=o(" (Splinter model)"),KYo=l(),Tv=a("li"),F_e=a("strong"),ZYo=o("squeezebert"),eKo=o(" \u2014 "),yz=a("a"),oKo=o("SqueezeBertForQuestionAnswering"),rKo=o(" (SqueezeBERT model)"),tKo=l(),Mv=a("li"),T_e=a("strong"),aKo=o("xlm"),nKo=o(" \u2014 "),xz=a("a"),sKo=o("XLMForQuestionAnsweringSimple"),lKo=o(" (XLM model)"),iKo=l(),Ev=a("li"),M_e=a("strong"),dKo=o("xlm-roberta"),cKo=o(" \u2014 "),$z=a("a"),fKo=o("XLMRobertaForQuestionAnswering"),mKo=o(" (XLM-RoBERTa model)"),gKo=l(),Cv=a("li"),E_e=a("strong"),hKo=o("xlm-roberta-xl"),pKo=o(" \u2014 "),kz=a("a"),uKo=o("XLMRobertaXLForQuestionAnswering"),_Ko=o(" (XLM-RoBERTa-XL model)"),bKo=l(),wv=a("li"),C_e=a("strong"),vKo=o("xlnet"),FKo=o(" \u2014 "),Sz=a("a"),TKo=o("XLNetForQuestionAnsweringSimple"),MKo=o(" (XLNet model)"),EKo=l(),Av=a("li"),w_e=a("strong"),CKo=o("yoso"),wKo=o(" \u2014 "),Rz=a("a"),AKo=o("YosoForQuestionAnswering"),LKo=o(" (YOSO model)"),yKo=l(),Lv=a("p"),xKo=o("The model is set in evaluation mode by default using "),A_e=a("code"),$Ko=o("model.eval()"),kKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=a("code"),SKo=o("model.train()"),RKo=l(),F(yv.$$.fragment),kGe=l(),fd=a("h2"),xv=a("a"),y_e=a("span"),F(Gy.$$.fragment),PKo=l(),x_e=a("span"),BKo=o("AutoModelForTableQuestionAnswering"),SGe=l(),jo=a("div"),F(Oy.$$.fragment),IKo=l(),md=a("p"),NKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Pz=a("a"),qKo=o("from_pretrained()"),jKo=o(" class method or the "),Bz=a("a"),DKo=o("from_config()"),GKo=o(` class
method.`),OKo=l(),Vy=a("p"),VKo=o("This class cannot be instantiated directly using "),$_e=a("code"),XKo=o("__init__()"),zKo=o(" (throws an error)."),WKo=l(),ut=a("div"),F(Xy.$$.fragment),QKo=l(),k_e=a("p"),HKo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),UKo=l(),gd=a("p"),JKo=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),YKo=o("not"),KKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=a("a"),ZKo=o("from_pretrained()"),eZo=o(" to load the model weights."),oZo=l(),F($v.$$.fragment),rZo=l(),so=a("div"),F(zy.$$.fragment),tZo=l(),R_e=a("p"),aZo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),nZo=l(),Va=a("p"),sZo=o("The model class to instantiate is selected based on the "),P_e=a("code"),lZo=o("model_type"),iZo=o(` property of the config object (either
passed as an argument or loaded from `),B_e=a("code"),dZo=o("pretrained_model_name_or_path"),cZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),fZo=o("pretrained_model_name_or_path"),mZo=o(":"),gZo=l(),N_e=a("ul"),kv=a("li"),q_e=a("strong"),hZo=o("tapas"),pZo=o(" \u2014 "),Nz=a("a"),uZo=o("TapasForQuestionAnswering"),_Zo=o(" (TAPAS model)"),bZo=l(),Sv=a("p"),vZo=o("The model is set in evaluation mode by default using "),j_e=a("code"),FZo=o("model.eval()"),TZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),MZo=o("model.train()"),EZo=l(),F(Rv.$$.fragment),RGe=l(),hd=a("h2"),Pv=a("a"),G_e=a("span"),F(Wy.$$.fragment),CZo=l(),O_e=a("span"),wZo=o("AutoModelForImageClassification"),PGe=l(),Do=a("div"),F(Qy.$$.fragment),AZo=l(),pd=a("p"),LZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qz=a("a"),yZo=o("from_pretrained()"),xZo=o(" class method or the "),jz=a("a"),$Zo=o("from_config()"),kZo=o(` class
method.`),SZo=l(),Hy=a("p"),RZo=o("This class cannot be instantiated directly using "),V_e=a("code"),PZo=o("__init__()"),BZo=o(" (throws an error)."),IZo=l(),_t=a("div"),F(Uy.$$.fragment),NZo=l(),X_e=a("p"),qZo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),jZo=l(),ud=a("p"),DZo=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),GZo=o("not"),OZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),VZo=o("from_pretrained()"),XZo=o(" to load the model weights."),zZo=l(),F(Bv.$$.fragment),WZo=l(),lo=a("div"),F(Jy.$$.fragment),QZo=l(),W_e=a("p"),HZo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UZo=l(),Xa=a("p"),JZo=o("The model class to instantiate is selected based on the "),Q_e=a("code"),YZo=o("model_type"),KZo=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),ZZo=o("pretrained_model_name_or_path"),eer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),oer=o("pretrained_model_name_or_path"),rer=o(":"),ter=l(),Fe=a("ul"),Iv=a("li"),J_e=a("strong"),aer=o("beit"),ner=o(" \u2014 "),Gz=a("a"),ser=o("BeitForImageClassification"),ler=o(" (BEiT model)"),ier=l(),Nv=a("li"),Y_e=a("strong"),der=o("convnext"),cer=o(" \u2014 "),Oz=a("a"),fer=o("ConvNextForImageClassification"),mer=o(" (ConvNeXT model)"),ger=l(),qv=a("li"),K_e=a("strong"),her=o("cvt"),per=o(" \u2014 "),Vz=a("a"),uer=o("CvtForImageClassification"),_er=o(" (CvT model)"),ber=l(),jv=a("li"),Z_e=a("strong"),ver=o("data2vec-vision"),Fer=o(" \u2014 "),Xz=a("a"),Ter=o("Data2VecVisionForImageClassification"),Mer=o(" (Data2VecVision model)"),Eer=l(),Os=a("li"),e2e=a("strong"),Cer=o("deit"),wer=o(" \u2014 "),zz=a("a"),Aer=o("DeiTForImageClassification"),Ler=o(" or "),Wz=a("a"),yer=o("DeiTForImageClassificationWithTeacher"),xer=o(" (DeiT model)"),$er=l(),Dv=a("li"),o2e=a("strong"),ker=o("imagegpt"),Ser=o(" \u2014 "),Qz=a("a"),Rer=o("ImageGPTForImageClassification"),Per=o(" (ImageGPT model)"),Ber=l(),Vs=a("li"),r2e=a("strong"),Ier=o("levit"),Ner=o(" \u2014 "),Hz=a("a"),qer=o("LevitForImageClassification"),jer=o(" or "),Uz=a("a"),Der=o("LevitForImageClassificationWithTeacher"),Ger=o(" (LeViT model)"),Oer=l(),bt=a("li"),t2e=a("strong"),Ver=o("perceiver"),Xer=o(" \u2014 "),Jz=a("a"),zer=o("PerceiverForImageClassificationLearned"),Wer=o(" or "),Yz=a("a"),Qer=o("PerceiverForImageClassificationFourier"),Her=o(" or "),Kz=a("a"),Uer=o("PerceiverForImageClassificationConvProcessing"),Jer=o(" (Perceiver model)"),Yer=l(),Gv=a("li"),a2e=a("strong"),Ker=o("poolformer"),Zer=o(" \u2014 "),Zz=a("a"),eor=o("PoolFormerForImageClassification"),oor=o(" (PoolFormer model)"),ror=l(),Ov=a("li"),n2e=a("strong"),tor=o("regnet"),aor=o(" \u2014 "),eW=a("a"),nor=o("RegNetForImageClassification"),sor=o(" (RegNet model)"),lor=l(),Vv=a("li"),s2e=a("strong"),ior=o("resnet"),dor=o(" \u2014 "),oW=a("a"),cor=o("ResNetForImageClassification"),mor=o(" (ResNet model)"),gor=l(),Xv=a("li"),l2e=a("strong"),hor=o("segformer"),por=o(" \u2014 "),rW=a("a"),uor=o("SegformerForImageClassification"),_or=o(" (SegFormer model)"),bor=l(),zv=a("li"),i2e=a("strong"),vor=o("swin"),For=o(" \u2014 "),tW=a("a"),Tor=o("SwinForImageClassification"),Mor=o(" (Swin Transformer model)"),Eor=l(),Wv=a("li"),d2e=a("strong"),Cor=o("van"),wor=o(" \u2014 "),aW=a("a"),Aor=o("VanForImageClassification"),Lor=o(" (VAN model)"),yor=l(),Qv=a("li"),c2e=a("strong"),xor=o("vit"),$or=o(" \u2014 "),nW=a("a"),kor=o("ViTForImageClassification"),Sor=o(" (ViT model)"),Ror=l(),Hv=a("p"),Por=o("The model is set in evaluation mode by default using "),f2e=a("code"),Bor=o("model.eval()"),Ior=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=a("code"),Nor=o("model.train()"),qor=l(),F(Uv.$$.fragment),BGe=l(),_d=a("h2"),Jv=a("a"),g2e=a("span"),F(Yy.$$.fragment),jor=l(),h2e=a("span"),Dor=o("AutoModelForVision2Seq"),IGe=l(),Go=a("div"),F(Ky.$$.fragment),Gor=l(),bd=a("p"),Oor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sW=a("a"),Vor=o("from_pretrained()"),Xor=o(" class method or the "),lW=a("a"),zor=o("from_config()"),Wor=o(` class
method.`),Qor=l(),Zy=a("p"),Hor=o("This class cannot be instantiated directly using "),p2e=a("code"),Uor=o("__init__()"),Jor=o(" (throws an error)."),Yor=l(),vt=a("div"),F(e8.$$.fragment),Kor=l(),u2e=a("p"),Zor=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),err=l(),vd=a("p"),orr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),rrr=o("not"),trr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),arr=o("from_pretrained()"),nrr=o(" to load the model weights."),srr=l(),F(Yv.$$.fragment),lrr=l(),io=a("div"),F(o8.$$.fragment),irr=l(),b2e=a("p"),drr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),crr=l(),za=a("p"),frr=o("The model class to instantiate is selected based on the "),v2e=a("code"),mrr=o("model_type"),grr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),hrr=o("pretrained_model_name_or_path"),prr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),urr=o("pretrained_model_name_or_path"),_rr=o(":"),brr=l(),M2e=a("ul"),Kv=a("li"),E2e=a("strong"),vrr=o("vision-encoder-decoder"),Frr=o(" \u2014 "),dW=a("a"),Trr=o("VisionEncoderDecoderModel"),Mrr=o(" (Vision Encoder decoder model)"),Err=l(),Zv=a("p"),Crr=o("The model is set in evaluation mode by default using "),C2e=a("code"),wrr=o("model.eval()"),Arr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=a("code"),Lrr=o("model.train()"),yrr=l(),F(eF.$$.fragment),NGe=l(),Fd=a("h2"),oF=a("a"),A2e=a("span"),F(r8.$$.fragment),xrr=l(),L2e=a("span"),$rr=o("AutoModelForVisualQuestionAnswering"),qGe=l(),Oo=a("div"),F(t8.$$.fragment),krr=l(),Td=a("p"),Srr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),cW=a("a"),Rrr=o("from_pretrained()"),Prr=o(" class method or the "),fW=a("a"),Brr=o("from_config()"),Irr=o(` class
method.`),Nrr=l(),a8=a("p"),qrr=o("This class cannot be instantiated directly using "),y2e=a("code"),jrr=o("__init__()"),Drr=o(" (throws an error)."),Grr=l(),Ft=a("div"),F(n8.$$.fragment),Orr=l(),x2e=a("p"),Vrr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Xrr=l(),Md=a("p"),zrr=o(`Note:
Loading a model from its configuration file does `),$2e=a("strong"),Wrr=o("not"),Qrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=a("a"),Hrr=o("from_pretrained()"),Urr=o(" to load the model weights."),Jrr=l(),F(rF.$$.fragment),Yrr=l(),co=a("div"),F(s8.$$.fragment),Krr=l(),k2e=a("p"),Zrr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),etr=l(),Wa=a("p"),otr=o("The model class to instantiate is selected based on the "),S2e=a("code"),rtr=o("model_type"),ttr=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),atr=o("pretrained_model_name_or_path"),ntr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),str=o("pretrained_model_name_or_path"),ltr=o(":"),itr=l(),B2e=a("ul"),tF=a("li"),I2e=a("strong"),dtr=o("vilt"),ctr=o(" \u2014 "),gW=a("a"),ftr=o("ViltForQuestionAnswering"),mtr=o(" (ViLT model)"),gtr=l(),aF=a("p"),htr=o("The model is set in evaluation mode by default using "),N2e=a("code"),ptr=o("model.eval()"),utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),_tr=o("model.train()"),btr=l(),F(nF.$$.fragment),jGe=l(),Ed=a("h2"),sF=a("a"),j2e=a("span"),F(l8.$$.fragment),vtr=l(),D2e=a("span"),Ftr=o("AutoModelForAudioClassification"),DGe=l(),Vo=a("div"),F(i8.$$.fragment),Ttr=l(),Cd=a("p"),Mtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hW=a("a"),Etr=o("from_pretrained()"),Ctr=o(" class method or the "),pW=a("a"),wtr=o("from_config()"),Atr=o(` class
method.`),Ltr=l(),d8=a("p"),ytr=o("This class cannot be instantiated directly using "),G2e=a("code"),xtr=o("__init__()"),$tr=o(" (throws an error)."),ktr=l(),Tt=a("div"),F(c8.$$.fragment),Str=l(),O2e=a("p"),Rtr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Ptr=l(),wd=a("p"),Btr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),Itr=o("not"),Ntr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=a("a"),qtr=o("from_pretrained()"),jtr=o(" to load the model weights."),Dtr=l(),F(lF.$$.fragment),Gtr=l(),fo=a("div"),F(f8.$$.fragment),Otr=l(),X2e=a("p"),Vtr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Xtr=l(),Qa=a("p"),ztr=o("The model class to instantiate is selected based on the "),z2e=a("code"),Wtr=o("model_type"),Qtr=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),Htr=o("pretrained_model_name_or_path"),Utr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),Jtr=o("pretrained_model_name_or_path"),Ytr=o(":"),Ktr=l(),Pe=a("ul"),iF=a("li"),H2e=a("strong"),Ztr=o("data2vec-audio"),ear=o(" \u2014 "),_W=a("a"),oar=o("Data2VecAudioForSequenceClassification"),rar=o(" (Data2VecAudio model)"),tar=l(),dF=a("li"),U2e=a("strong"),aar=o("hubert"),nar=o(" \u2014 "),bW=a("a"),sar=o("HubertForSequenceClassification"),lar=o(" (Hubert model)"),iar=l(),cF=a("li"),J2e=a("strong"),dar=o("sew"),car=o(" \u2014 "),vW=a("a"),far=o("SEWForSequenceClassification"),mar=o(" (SEW model)"),gar=l(),fF=a("li"),Y2e=a("strong"),har=o("sew-d"),par=o(" \u2014 "),FW=a("a"),uar=o("SEWDForSequenceClassification"),_ar=o(" (SEW-D model)"),bar=l(),mF=a("li"),K2e=a("strong"),Far=o("unispeech"),Tar=o(" \u2014 "),TW=a("a"),Mar=o("UniSpeechForSequenceClassification"),Ear=o(" (UniSpeech model)"),Car=l(),gF=a("li"),Z2e=a("strong"),war=o("unispeech-sat"),Aar=o(" \u2014 "),MW=a("a"),Lar=o("UniSpeechSatForSequenceClassification"),yar=o(" (UniSpeechSat model)"),xar=l(),hF=a("li"),e1e=a("strong"),$ar=o("wav2vec2"),kar=o(" \u2014 "),EW=a("a"),Sar=o("Wav2Vec2ForSequenceClassification"),Rar=o(" (Wav2Vec2 model)"),Par=l(),pF=a("li"),o1e=a("strong"),Bar=o("wav2vec2-conformer"),Iar=o(" \u2014 "),CW=a("a"),Nar=o("Wav2Vec2ConformerForSequenceClassification"),qar=o(" (Wav2Vec2-Conformer model)"),jar=l(),uF=a("li"),r1e=a("strong"),Dar=o("wavlm"),Gar=o(" \u2014 "),wW=a("a"),Oar=o("WavLMForSequenceClassification"),Var=o(" (WavLM model)"),Xar=l(),_F=a("p"),zar=o("The model is set in evaluation mode by default using "),t1e=a("code"),War=o("model.eval()"),Qar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=a("code"),Har=o("model.train()"),Uar=l(),F(bF.$$.fragment),GGe=l(),Ad=a("h2"),vF=a("a"),n1e=a("span"),F(m8.$$.fragment),Jar=l(),s1e=a("span"),Yar=o("AutoModelForAudioFrameClassification"),OGe=l(),Xo=a("div"),F(g8.$$.fragment),Kar=l(),Ld=a("p"),Zar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AW=a("a"),enr=o("from_pretrained()"),onr=o(" class method or the "),LW=a("a"),rnr=o("from_config()"),tnr=o(` class
method.`),anr=l(),h8=a("p"),nnr=o("This class cannot be instantiated directly using "),l1e=a("code"),snr=o("__init__()"),lnr=o(" (throws an error)."),inr=l(),Mt=a("div"),F(p8.$$.fragment),dnr=l(),i1e=a("p"),cnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fnr=l(),yd=a("p"),mnr=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),gnr=o("not"),hnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),pnr=o("from_pretrained()"),unr=o(" to load the model weights."),_nr=l(),F(FF.$$.fragment),bnr=l(),mo=a("div"),F(u8.$$.fragment),vnr=l(),c1e=a("p"),Fnr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Tnr=l(),Ha=a("p"),Mnr=o("The model class to instantiate is selected based on the "),f1e=a("code"),Enr=o("model_type"),Cnr=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),wnr=o("pretrained_model_name_or_path"),Anr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),Lnr=o("pretrained_model_name_or_path"),ynr=o(":"),xnr=l(),et=a("ul"),TF=a("li"),h1e=a("strong"),$nr=o("data2vec-audio"),knr=o(" \u2014 "),xW=a("a"),Snr=o("Data2VecAudioForAudioFrameClassification"),Rnr=o(" (Data2VecAudio model)"),Pnr=l(),MF=a("li"),p1e=a("strong"),Bnr=o("unispeech-sat"),Inr=o(" \u2014 "),$W=a("a"),Nnr=o("UniSpeechSatForAudioFrameClassification"),qnr=o(" (UniSpeechSat model)"),jnr=l(),EF=a("li"),u1e=a("strong"),Dnr=o("wav2vec2"),Gnr=o(" \u2014 "),kW=a("a"),Onr=o("Wav2Vec2ForAudioFrameClassification"),Vnr=o(" (Wav2Vec2 model)"),Xnr=l(),CF=a("li"),_1e=a("strong"),znr=o("wav2vec2-conformer"),Wnr=o(" \u2014 "),SW=a("a"),Qnr=o("Wav2Vec2ConformerForAudioFrameClassification"),Hnr=o(" (Wav2Vec2-Conformer model)"),Unr=l(),wF=a("li"),b1e=a("strong"),Jnr=o("wavlm"),Ynr=o(" \u2014 "),RW=a("a"),Knr=o("WavLMForAudioFrameClassification"),Znr=o(" (WavLM model)"),esr=l(),AF=a("p"),osr=o("The model is set in evaluation mode by default using "),v1e=a("code"),rsr=o("model.eval()"),tsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=a("code"),asr=o("model.train()"),nsr=l(),F(LF.$$.fragment),VGe=l(),xd=a("h2"),yF=a("a"),T1e=a("span"),F(_8.$$.fragment),ssr=l(),M1e=a("span"),lsr=o("AutoModelForCTC"),XGe=l(),zo=a("div"),F(b8.$$.fragment),isr=l(),$d=a("p"),dsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PW=a("a"),csr=o("from_pretrained()"),fsr=o(" class method or the "),BW=a("a"),msr=o("from_config()"),gsr=o(` class
method.`),hsr=l(),v8=a("p"),psr=o("This class cannot be instantiated directly using "),E1e=a("code"),usr=o("__init__()"),_sr=o(" (throws an error)."),bsr=l(),Et=a("div"),F(F8.$$.fragment),vsr=l(),C1e=a("p"),Fsr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Tsr=l(),kd=a("p"),Msr=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),Esr=o("not"),Csr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),wsr=o("from_pretrained()"),Asr=o(" to load the model weights."),Lsr=l(),F(xF.$$.fragment),ysr=l(),go=a("div"),F(T8.$$.fragment),xsr=l(),A1e=a("p"),$sr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ksr=l(),Ua=a("p"),Ssr=o("The model class to instantiate is selected based on the "),L1e=a("code"),Rsr=o("model_type"),Psr=o(` property of the config object (either
passed as an argument or loaded from `),y1e=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=a("code"),Nsr=o("pretrained_model_name_or_path"),qsr=o(":"),jsr=l(),Le=a("ul"),$F=a("li"),$1e=a("strong"),Dsr=o("data2vec-audio"),Gsr=o(" \u2014 "),NW=a("a"),Osr=o("Data2VecAudioForCTC"),Vsr=o(" (Data2VecAudio model)"),Xsr=l(),kF=a("li"),k1e=a("strong"),zsr=o("hubert"),Wsr=o(" \u2014 "),qW=a("a"),Qsr=o("HubertForCTC"),Hsr=o(" (Hubert model)"),Usr=l(),SF=a("li"),S1e=a("strong"),Jsr=o("mctct"),Ysr=o(" \u2014 "),jW=a("a"),Ksr=o("MCTCTForCTC"),Zsr=o(" (M-CTC-T model)"),elr=l(),RF=a("li"),R1e=a("strong"),olr=o("sew"),rlr=o(" \u2014 "),DW=a("a"),tlr=o("SEWForCTC"),alr=o(" (SEW model)"),nlr=l(),PF=a("li"),P1e=a("strong"),slr=o("sew-d"),llr=o(" \u2014 "),GW=a("a"),ilr=o("SEWDForCTC"),dlr=o(" (SEW-D model)"),clr=l(),BF=a("li"),B1e=a("strong"),flr=o("unispeech"),mlr=o(" \u2014 "),OW=a("a"),glr=o("UniSpeechForCTC"),hlr=o(" (UniSpeech model)"),plr=l(),IF=a("li"),I1e=a("strong"),ulr=o("unispeech-sat"),_lr=o(" \u2014 "),VW=a("a"),blr=o("UniSpeechSatForCTC"),vlr=o(" (UniSpeechSat model)"),Flr=l(),NF=a("li"),N1e=a("strong"),Tlr=o("wav2vec2"),Mlr=o(" \u2014 "),XW=a("a"),Elr=o("Wav2Vec2ForCTC"),Clr=o(" (Wav2Vec2 model)"),wlr=l(),qF=a("li"),q1e=a("strong"),Alr=o("wav2vec2-conformer"),Llr=o(" \u2014 "),zW=a("a"),ylr=o("Wav2Vec2ConformerForCTC"),xlr=o(" (Wav2Vec2-Conformer model)"),$lr=l(),jF=a("li"),j1e=a("strong"),klr=o("wavlm"),Slr=o(" \u2014 "),WW=a("a"),Rlr=o("WavLMForCTC"),Plr=o(" (WavLM model)"),Blr=l(),DF=a("p"),Ilr=o("The model is set in evaluation mode by default using "),D1e=a("code"),Nlr=o("model.eval()"),qlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),jlr=o("model.train()"),Dlr=l(),F(GF.$$.fragment),zGe=l(),Sd=a("h2"),OF=a("a"),O1e=a("span"),F(M8.$$.fragment),Glr=l(),V1e=a("span"),Olr=o("AutoModelForSpeechSeq2Seq"),WGe=l(),Wo=a("div"),F(E8.$$.fragment),Vlr=l(),Rd=a("p"),Xlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QW=a("a"),zlr=o("from_pretrained()"),Wlr=o(" class method or the "),HW=a("a"),Qlr=o("from_config()"),Hlr=o(` class
method.`),Ulr=l(),C8=a("p"),Jlr=o("This class cannot be instantiated directly using "),X1e=a("code"),Ylr=o("__init__()"),Klr=o(" (throws an error)."),Zlr=l(),Ct=a("div"),F(w8.$$.fragment),eir=l(),z1e=a("p"),oir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rir=l(),Pd=a("p"),tir=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),air=o("not"),nir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),sir=o("from_pretrained()"),lir=o(" to load the model weights."),iir=l(),F(VF.$$.fragment),dir=l(),ho=a("div"),F(A8.$$.fragment),cir=l(),Q1e=a("p"),fir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mir=l(),Ja=a("p"),gir=o("The model class to instantiate is selected based on the "),H1e=a("code"),hir=o("model_type"),pir=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),uir=o("pretrained_model_name_or_path"),_ir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),bir=o("pretrained_model_name_or_path"),vir=o(":"),Fir=l(),L8=a("ul"),XF=a("li"),Y1e=a("strong"),Tir=o("speech-encoder-decoder"),Mir=o(" \u2014 "),JW=a("a"),Eir=o("SpeechEncoderDecoderModel"),Cir=o(" (Speech Encoder decoder model)"),wir=l(),zF=a("li"),K1e=a("strong"),Air=o("speech_to_text"),Lir=o(" \u2014 "),YW=a("a"),yir=o("Speech2TextForConditionalGeneration"),xir=o(" (Speech2Text model)"),$ir=l(),WF=a("p"),kir=o("The model is set in evaluation mode by default using "),Z1e=a("code"),Sir=o("model.eval()"),Rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e7e=a("code"),Pir=o("model.train()"),Bir=l(),F(QF.$$.fragment),QGe=l(),Bd=a("h2"),HF=a("a"),o7e=a("span"),F(y8.$$.fragment),Iir=l(),r7e=a("span"),Nir=o("AutoModelForAudioXVector"),HGe=l(),Qo=a("div"),F(x8.$$.fragment),qir=l(),Id=a("p"),jir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KW=a("a"),Dir=o("from_pretrained()"),Gir=o(" class method or the "),ZW=a("a"),Oir=o("from_config()"),Vir=o(` class
method.`),Xir=l(),$8=a("p"),zir=o("This class cannot be instantiated directly using "),t7e=a("code"),Wir=o("__init__()"),Qir=o(" (throws an error)."),Hir=l(),wt=a("div"),F(k8.$$.fragment),Uir=l(),a7e=a("p"),Jir=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Yir=l(),Nd=a("p"),Kir=o(`Note:
Loading a model from its configuration file does `),n7e=a("strong"),Zir=o("not"),edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=a("a"),odr=o("from_pretrained()"),rdr=o(" to load the model weights."),tdr=l(),F(UF.$$.fragment),adr=l(),po=a("div"),F(S8.$$.fragment),ndr=l(),s7e=a("p"),sdr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ldr=l(),Ya=a("p"),idr=o("The model class to instantiate is selected based on the "),l7e=a("code"),ddr=o("model_type"),cdr=o(` property of the config object (either
passed as an argument or loaded from `),i7e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=a("code"),gdr=o("pretrained_model_name_or_path"),hdr=o(":"),pdr=l(),ot=a("ul"),JF=a("li"),c7e=a("strong"),udr=o("data2vec-audio"),_dr=o(" \u2014 "),oQ=a("a"),bdr=o("Data2VecAudioForXVector"),vdr=o(" (Data2VecAudio model)"),Fdr=l(),YF=a("li"),f7e=a("strong"),Tdr=o("unispeech-sat"),Mdr=o(" \u2014 "),rQ=a("a"),Edr=o("UniSpeechSatForXVector"),Cdr=o(" (UniSpeechSat model)"),wdr=l(),KF=a("li"),m7e=a("strong"),Adr=o("wav2vec2"),Ldr=o(" \u2014 "),tQ=a("a"),ydr=o("Wav2Vec2ForXVector"),xdr=o(" (Wav2Vec2 model)"),$dr=l(),ZF=a("li"),g7e=a("strong"),kdr=o("wav2vec2-conformer"),Sdr=o(" \u2014 "),aQ=a("a"),Rdr=o("Wav2Vec2ConformerForXVector"),Pdr=o(" (Wav2Vec2-Conformer model)"),Bdr=l(),eT=a("li"),h7e=a("strong"),Idr=o("wavlm"),Ndr=o(" \u2014 "),nQ=a("a"),qdr=o("WavLMForXVector"),jdr=o(" (WavLM model)"),Ddr=l(),oT=a("p"),Gdr=o("The model is set in evaluation mode by default using "),p7e=a("code"),Odr=o("model.eval()"),Vdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=a("code"),Xdr=o("model.train()"),zdr=l(),F(rT.$$.fragment),UGe=l(),qd=a("h2"),tT=a("a"),_7e=a("span"),F(R8.$$.fragment),Wdr=l(),b7e=a("span"),Qdr=o("AutoModelForMaskedImageModeling"),JGe=l(),Ho=a("div"),F(P8.$$.fragment),Hdr=l(),jd=a("p"),Udr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sQ=a("a"),Jdr=o("from_pretrained()"),Ydr=o(" class method or the "),lQ=a("a"),Kdr=o("from_config()"),Zdr=o(` class
method.`),ecr=l(),B8=a("p"),ocr=o("This class cannot be instantiated directly using "),v7e=a("code"),rcr=o("__init__()"),tcr=o(" (throws an error)."),acr=l(),At=a("div"),F(I8.$$.fragment),ncr=l(),F7e=a("p"),scr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lcr=l(),Dd=a("p"),icr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),dcr=o("not"),ccr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=a("a"),fcr=o("from_pretrained()"),mcr=o(" to load the model weights."),gcr=l(),F(aT.$$.fragment),hcr=l(),uo=a("div"),F(N8.$$.fragment),pcr=l(),M7e=a("p"),ucr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),_cr=l(),Ka=a("p"),bcr=o("The model class to instantiate is selected based on the "),E7e=a("code"),vcr=o("model_type"),Fcr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),Ecr=o("pretrained_model_name_or_path"),Ccr=o(":"),wcr=l(),Gd=a("ul"),nT=a("li"),A7e=a("strong"),Acr=o("deit"),Lcr=o(" \u2014 "),dQ=a("a"),ycr=o("DeiTForMaskedImageModeling"),xcr=o(" (DeiT model)"),$cr=l(),sT=a("li"),L7e=a("strong"),kcr=o("swin"),Scr=o(" \u2014 "),cQ=a("a"),Rcr=o("SwinForMaskedImageModeling"),Pcr=o(" (Swin Transformer model)"),Bcr=l(),lT=a("li"),y7e=a("strong"),Icr=o("vit"),Ncr=o(" \u2014 "),fQ=a("a"),qcr=o("ViTForMaskedImageModeling"),jcr=o(" (ViT model)"),Dcr=l(),iT=a("p"),Gcr=o("The model is set in evaluation mode by default using "),x7e=a("code"),Ocr=o("model.eval()"),Vcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$7e=a("code"),Xcr=o("model.train()"),zcr=l(),F(dT.$$.fragment),YGe=l(),Od=a("h2"),cT=a("a"),k7e=a("span"),F(q8.$$.fragment),Wcr=l(),S7e=a("span"),Qcr=o("AutoModelForObjectDetection"),KGe=l(),Uo=a("div"),F(j8.$$.fragment),Hcr=l(),Vd=a("p"),Ucr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mQ=a("a"),Jcr=o("from_pretrained()"),Ycr=o(" class method or the "),gQ=a("a"),Kcr=o("from_config()"),Zcr=o(` class
method.`),efr=l(),D8=a("p"),ofr=o("This class cannot be instantiated directly using "),R7e=a("code"),rfr=o("__init__()"),tfr=o(" (throws an error)."),afr=l(),Lt=a("div"),F(G8.$$.fragment),nfr=l(),P7e=a("p"),sfr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),lfr=l(),Xd=a("p"),ifr=o(`Note:
Loading a model from its configuration file does `),B7e=a("strong"),dfr=o("not"),cfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=a("a"),ffr=o("from_pretrained()"),mfr=o(" to load the model weights."),gfr=l(),F(fT.$$.fragment),hfr=l(),_o=a("div"),F(O8.$$.fragment),pfr=l(),I7e=a("p"),ufr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_fr=l(),Za=a("p"),bfr=o("The model class to instantiate is selected based on the "),N7e=a("code"),vfr=o("model_type"),Ffr=o(` property of the config object (either
passed as an argument or loaded from `),q7e=a("code"),Tfr=o("pretrained_model_name_or_path"),Mfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=a("code"),Efr=o("pretrained_model_name_or_path"),Cfr=o(":"),wfr=l(),V8=a("ul"),mT=a("li"),D7e=a("strong"),Afr=o("detr"),Lfr=o(" \u2014 "),pQ=a("a"),yfr=o("DetrForObjectDetection"),xfr=o(" (DETR model)"),$fr=l(),gT=a("li"),G7e=a("strong"),kfr=o("yolos"),Sfr=o(" \u2014 "),uQ=a("a"),Rfr=o("YolosForObjectDetection"),Pfr=o(" (YOLOS model)"),Bfr=l(),hT=a("p"),Ifr=o("The model is set in evaluation mode by default using "),O7e=a("code"),Nfr=o("model.eval()"),qfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V7e=a("code"),jfr=o("model.train()"),Dfr=l(),F(pT.$$.fragment),ZGe=l(),zd=a("h2"),uT=a("a"),X7e=a("span"),F(X8.$$.fragment),Gfr=l(),z7e=a("span"),Ofr=o("AutoModelForImageSegmentation"),eOe=l(),Jo=a("div"),F(z8.$$.fragment),Vfr=l(),Wd=a("p"),Xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_Q=a("a"),zfr=o("from_pretrained()"),Wfr=o(" class method or the "),bQ=a("a"),Qfr=o("from_config()"),Hfr=o(` class
method.`),Ufr=l(),W8=a("p"),Jfr=o("This class cannot be instantiated directly using "),W7e=a("code"),Yfr=o("__init__()"),Kfr=o(" (throws an error)."),Zfr=l(),yt=a("div"),F(Q8.$$.fragment),emr=l(),Q7e=a("p"),omr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),rmr=l(),Qd=a("p"),tmr=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),amr=o("not"),nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),smr=o("from_pretrained()"),lmr=o(" to load the model weights."),imr=l(),F(_T.$$.fragment),dmr=l(),bo=a("div"),F(H8.$$.fragment),cmr=l(),U7e=a("p"),fmr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),mmr=l(),en=a("p"),gmr=o("The model class to instantiate is selected based on the "),J7e=a("code"),hmr=o("model_type"),pmr=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),umr=o("pretrained_model_name_or_path"),_mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),bmr=o("pretrained_model_name_or_path"),vmr=o(":"),Fmr=l(),Z7e=a("ul"),bT=a("li"),ebe=a("strong"),Tmr=o("detr"),Mmr=o(" \u2014 "),FQ=a("a"),Emr=o("DetrForSegmentation"),Cmr=o(" (DETR model)"),wmr=l(),vT=a("p"),Amr=o("The model is set in evaluation mode by default using "),obe=a("code"),Lmr=o("model.eval()"),ymr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=a("code"),xmr=o("model.train()"),$mr=l(),F(FT.$$.fragment),oOe=l(),Hd=a("h2"),TT=a("a"),tbe=a("span"),F(U8.$$.fragment),kmr=l(),abe=a("span"),Smr=o("AutoModelForSemanticSegmentation"),rOe=l(),Yo=a("div"),F(J8.$$.fragment),Rmr=l(),Ud=a("p"),Pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),TQ=a("a"),Bmr=o("from_pretrained()"),Imr=o(" class method or the "),MQ=a("a"),Nmr=o("from_config()"),qmr=o(` class
method.`),jmr=l(),Y8=a("p"),Dmr=o("This class cannot be instantiated directly using "),nbe=a("code"),Gmr=o("__init__()"),Omr=o(" (throws an error)."),Vmr=l(),xt=a("div"),F(K8.$$.fragment),Xmr=l(),sbe=a("p"),zmr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Wmr=l(),Jd=a("p"),Qmr=o(`Note:
Loading a model from its configuration file does `),lbe=a("strong"),Hmr=o("not"),Umr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=a("a"),Jmr=o("from_pretrained()"),Ymr=o(" to load the model weights."),Kmr=l(),F(MT.$$.fragment),Zmr=l(),vo=a("div"),F(Z8.$$.fragment),egr=l(),ibe=a("p"),ogr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),rgr=l(),on=a("p"),tgr=o("The model class to instantiate is selected based on the "),dbe=a("code"),agr=o("model_type"),ngr=o(` property of the config object (either
passed as an argument or loaded from `),cbe=a("code"),sgr=o("pretrained_model_name_or_path"),lgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=a("code"),igr=o("pretrained_model_name_or_path"),dgr=o(":"),cgr=l(),rn=a("ul"),ET=a("li"),mbe=a("strong"),fgr=o("beit"),mgr=o(" \u2014 "),CQ=a("a"),ggr=o("BeitForSemanticSegmentation"),hgr=o(" (BEiT model)"),pgr=l(),CT=a("li"),gbe=a("strong"),ugr=o("data2vec-vision"),_gr=o(" \u2014 "),wQ=a("a"),bgr=o("Data2VecVisionForSemanticSegmentation"),vgr=o(" (Data2VecVision model)"),Fgr=l(),wT=a("li"),hbe=a("strong"),Tgr=o("dpt"),Mgr=o(" \u2014 "),AQ=a("a"),Egr=o("DPTForSemanticSegmentation"),Cgr=o(" (DPT model)"),wgr=l(),AT=a("li"),pbe=a("strong"),Agr=o("segformer"),Lgr=o(" \u2014 "),LQ=a("a"),ygr=o("SegformerForSemanticSegmentation"),xgr=o(" (SegFormer model)"),$gr=l(),LT=a("p"),kgr=o("The model is set in evaluation mode by default using "),ube=a("code"),Sgr=o("model.eval()"),Rgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=a("code"),Pgr=o("model.train()"),Bgr=l(),F(yT.$$.fragment),tOe=l(),Yd=a("h2"),xT=a("a"),bbe=a("span"),F(e9.$$.fragment),Igr=l(),vbe=a("span"),Ngr=o("AutoModelForInstanceSegmentation"),aOe=l(),Ko=a("div"),F(o9.$$.fragment),qgr=l(),Kd=a("p"),jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yQ=a("a"),Dgr=o("from_pretrained()"),Ggr=o(" class method or the "),xQ=a("a"),Ogr=o("from_config()"),Vgr=o(` class
method.`),Xgr=l(),r9=a("p"),zgr=o("This class cannot be instantiated directly using "),Fbe=a("code"),Wgr=o("__init__()"),Qgr=o(" (throws an error)."),Hgr=l(),$t=a("div"),F(t9.$$.fragment),Ugr=l(),Tbe=a("p"),Jgr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ygr=l(),Zd=a("p"),Kgr=o(`Note:
Loading a model from its configuration file does `),Mbe=a("strong"),Zgr=o("not"),ehr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=a("a"),ohr=o("from_pretrained()"),rhr=o(" to load the model weights."),thr=l(),F($T.$$.fragment),ahr=l(),Fo=a("div"),F(a9.$$.fragment),nhr=l(),Ebe=a("p"),shr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lhr=l(),tn=a("p"),ihr=o("The model class to instantiate is selected based on the "),Cbe=a("code"),dhr=o("model_type"),chr=o(` property of the config object (either
passed as an argument or loaded from `),wbe=a("code"),fhr=o("pretrained_model_name_or_path"),mhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=a("code"),ghr=o("pretrained_model_name_or_path"),hhr=o(":"),phr=l(),Lbe=a("ul"),kT=a("li"),ybe=a("strong"),uhr=o("maskformer"),_hr=o(" \u2014 "),kQ=a("a"),bhr=o("MaskFormerForInstanceSegmentation"),vhr=o(" (MaskFormer model)"),Fhr=l(),ST=a("p"),Thr=o("The model is set in evaluation mode by default using "),xbe=a("code"),Mhr=o("model.eval()"),Ehr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=a("code"),Chr=o("model.train()"),whr=l(),F(RT.$$.fragment),nOe=l(),ec=a("h2"),PT=a("a"),kbe=a("span"),F(n9.$$.fragment),Ahr=l(),Sbe=a("span"),Lhr=o("TFAutoModel"),sOe=l(),Zo=a("div"),F(s9.$$.fragment),yhr=l(),oc=a("p"),xhr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SQ=a("a"),$hr=o("from_pretrained()"),khr=o(" class method or the "),RQ=a("a"),Shr=o("from_config()"),Rhr=o(` class
method.`),Phr=l(),l9=a("p"),Bhr=o("This class cannot be instantiated directly using "),Rbe=a("code"),Ihr=o("__init__()"),Nhr=o(" (throws an error)."),qhr=l(),kt=a("div"),F(i9.$$.fragment),jhr=l(),Pbe=a("p"),Dhr=o("Instantiates one of the base model classes of the library from a configuration."),Ghr=l(),rc=a("p"),Ohr=o(`Note:
Loading a model from its configuration file does `),Bbe=a("strong"),Vhr=o("not"),Xhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),zhr=o("from_pretrained()"),Whr=o(" to load the model weights."),Qhr=l(),F(BT.$$.fragment),Hhr=l(),Lr=a("div"),F(d9.$$.fragment),Uhr=l(),Ibe=a("p"),Jhr=o("Instantiate one of the base model classes of the library from a pretrained model."),Yhr=l(),an=a("p"),Khr=o("The model class to instantiate is selected based on the "),Nbe=a("code"),Zhr=o("model_type"),epr=o(` property of the config object (either
passed as an argument or loaded from `),qbe=a("code"),opr=o("pretrained_model_name_or_path"),rpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=a("code"),tpr=o("pretrained_model_name_or_path"),apr=o(":"),npr=l(),N=a("ul"),IT=a("li"),Dbe=a("strong"),spr=o("albert"),lpr=o(" \u2014 "),BQ=a("a"),ipr=o("TFAlbertModel"),dpr=o(" (ALBERT model)"),cpr=l(),NT=a("li"),Gbe=a("strong"),fpr=o("bart"),mpr=o(" \u2014 "),IQ=a("a"),gpr=o("TFBartModel"),hpr=o(" (BART model)"),ppr=l(),qT=a("li"),Obe=a("strong"),upr=o("bert"),_pr=o(" \u2014 "),NQ=a("a"),bpr=o("TFBertModel"),vpr=o(" (BERT model)"),Fpr=l(),jT=a("li"),Vbe=a("strong"),Tpr=o("blenderbot"),Mpr=o(" \u2014 "),qQ=a("a"),Epr=o("TFBlenderbotModel"),Cpr=o(" (Blenderbot model)"),wpr=l(),DT=a("li"),Xbe=a("strong"),Apr=o("blenderbot-small"),Lpr=o(" \u2014 "),jQ=a("a"),ypr=o("TFBlenderbotSmallModel"),xpr=o(" (BlenderbotSmall model)"),$pr=l(),GT=a("li"),zbe=a("strong"),kpr=o("camembert"),Spr=o(" \u2014 "),DQ=a("a"),Rpr=o("TFCamembertModel"),Ppr=o(" (CamemBERT model)"),Bpr=l(),OT=a("li"),Wbe=a("strong"),Ipr=o("clip"),Npr=o(" \u2014 "),GQ=a("a"),qpr=o("TFCLIPModel"),jpr=o(" (CLIP model)"),Dpr=l(),VT=a("li"),Qbe=a("strong"),Gpr=o("convbert"),Opr=o(" \u2014 "),OQ=a("a"),Vpr=o("TFConvBertModel"),Xpr=o(" (ConvBERT model)"),zpr=l(),XT=a("li"),Hbe=a("strong"),Wpr=o("convnext"),Qpr=o(" \u2014 "),VQ=a("a"),Hpr=o("TFConvNextModel"),Upr=o(" (ConvNeXT model)"),Jpr=l(),zT=a("li"),Ube=a("strong"),Ypr=o("ctrl"),Kpr=o(" \u2014 "),XQ=a("a"),Zpr=o("TFCTRLModel"),eur=o(" (CTRL model)"),our=l(),WT=a("li"),Jbe=a("strong"),rur=o("data2vec-vision"),tur=o(" \u2014 "),zQ=a("a"),aur=o("TFData2VecVisionModel"),nur=o(" (Data2VecVision model)"),sur=l(),QT=a("li"),Ybe=a("strong"),lur=o("deberta"),iur=o(" \u2014 "),WQ=a("a"),dur=o("TFDebertaModel"),cur=o(" (DeBERTa model)"),fur=l(),HT=a("li"),Kbe=a("strong"),mur=o("deberta-v2"),gur=o(" \u2014 "),QQ=a("a"),hur=o("TFDebertaV2Model"),pur=o(" (DeBERTa-v2 model)"),uur=l(),UT=a("li"),Zbe=a("strong"),_ur=o("distilbert"),bur=o(" \u2014 "),HQ=a("a"),vur=o("TFDistilBertModel"),Fur=o(" (DistilBERT model)"),Tur=l(),JT=a("li"),e4e=a("strong"),Mur=o("dpr"),Eur=o(" \u2014 "),UQ=a("a"),Cur=o("TFDPRQuestionEncoder"),wur=o(" (DPR model)"),Aur=l(),YT=a("li"),o4e=a("strong"),Lur=o("electra"),yur=o(" \u2014 "),JQ=a("a"),xur=o("TFElectraModel"),$ur=o(" (ELECTRA model)"),kur=l(),KT=a("li"),r4e=a("strong"),Sur=o("flaubert"),Rur=o(" \u2014 "),YQ=a("a"),Pur=o("TFFlaubertModel"),Bur=o(" (FlauBERT model)"),Iur=l(),Xs=a("li"),t4e=a("strong"),Nur=o("funnel"),qur=o(" \u2014 "),KQ=a("a"),jur=o("TFFunnelModel"),Dur=o(" or "),ZQ=a("a"),Gur=o("TFFunnelBaseModel"),Our=o(" (Funnel Transformer model)"),Vur=l(),ZT=a("li"),a4e=a("strong"),Xur=o("gpt2"),zur=o(" \u2014 "),eH=a("a"),Wur=o("TFGPT2Model"),Qur=o(" (OpenAI GPT-2 model)"),Hur=l(),eM=a("li"),n4e=a("strong"),Uur=o("gptj"),Jur=o(" \u2014 "),oH=a("a"),Yur=o("TFGPTJModel"),Kur=o(" (GPT-J model)"),Zur=l(),oM=a("li"),s4e=a("strong"),e_r=o("hubert"),o_r=o(" \u2014 "),rH=a("a"),r_r=o("TFHubertModel"),t_r=o(" (Hubert model)"),a_r=l(),rM=a("li"),l4e=a("strong"),n_r=o("layoutlm"),s_r=o(" \u2014 "),tH=a("a"),l_r=o("TFLayoutLMModel"),i_r=o(" (LayoutLM model)"),d_r=l(),tM=a("li"),i4e=a("strong"),c_r=o("led"),f_r=o(" \u2014 "),aH=a("a"),m_r=o("TFLEDModel"),g_r=o(" (LED model)"),h_r=l(),aM=a("li"),d4e=a("strong"),p_r=o("longformer"),u_r=o(" \u2014 "),nH=a("a"),__r=o("TFLongformerModel"),b_r=o(" (Longformer model)"),v_r=l(),nM=a("li"),c4e=a("strong"),F_r=o("lxmert"),T_r=o(" \u2014 "),sH=a("a"),M_r=o("TFLxmertModel"),E_r=o(" (LXMERT model)"),C_r=l(),sM=a("li"),f4e=a("strong"),w_r=o("marian"),A_r=o(" \u2014 "),lH=a("a"),L_r=o("TFMarianModel"),y_r=o(" (Marian model)"),x_r=l(),lM=a("li"),m4e=a("strong"),$_r=o("mbart"),k_r=o(" \u2014 "),iH=a("a"),S_r=o("TFMBartModel"),R_r=o(" (mBART model)"),P_r=l(),iM=a("li"),g4e=a("strong"),B_r=o("mobilebert"),I_r=o(" \u2014 "),dH=a("a"),N_r=o("TFMobileBertModel"),q_r=o(" (MobileBERT model)"),j_r=l(),dM=a("li"),h4e=a("strong"),D_r=o("mpnet"),G_r=o(" \u2014 "),cH=a("a"),O_r=o("TFMPNetModel"),V_r=o(" (MPNet model)"),X_r=l(),cM=a("li"),p4e=a("strong"),z_r=o("mt5"),W_r=o(" \u2014 "),fH=a("a"),Q_r=o("TFMT5Model"),H_r=o(" (MT5 model)"),U_r=l(),fM=a("li"),u4e=a("strong"),J_r=o("openai-gpt"),Y_r=o(" \u2014 "),mH=a("a"),K_r=o("TFOpenAIGPTModel"),Z_r=o(" (OpenAI GPT model)"),e2r=l(),mM=a("li"),_4e=a("strong"),o2r=o("opt"),r2r=o(" \u2014 "),gH=a("a"),t2r=o("TFOPTModel"),a2r=o(" (OPT model)"),n2r=l(),gM=a("li"),b4e=a("strong"),s2r=o("pegasus"),l2r=o(" \u2014 "),hH=a("a"),i2r=o("TFPegasusModel"),d2r=o(" (Pegasus model)"),c2r=l(),hM=a("li"),v4e=a("strong"),f2r=o("rembert"),m2r=o(" \u2014 "),pH=a("a"),g2r=o("TFRemBertModel"),h2r=o(" (RemBERT model)"),p2r=l(),pM=a("li"),F4e=a("strong"),u2r=o("resnet"),_2r=o(" \u2014 "),uH=a("a"),b2r=o("TFResNetModel"),v2r=o(" (ResNet model)"),F2r=l(),uM=a("li"),T4e=a("strong"),T2r=o("roberta"),M2r=o(" \u2014 "),_H=a("a"),E2r=o("TFRobertaModel"),C2r=o(" (RoBERTa model)"),w2r=l(),_M=a("li"),M4e=a("strong"),A2r=o("roformer"),L2r=o(" \u2014 "),bH=a("a"),y2r=o("TFRoFormerModel"),x2r=o(" (RoFormer model)"),$2r=l(),bM=a("li"),E4e=a("strong"),k2r=o("speech_to_text"),S2r=o(" \u2014 "),vH=a("a"),R2r=o("TFSpeech2TextModel"),P2r=o(" (Speech2Text model)"),B2r=l(),vM=a("li"),C4e=a("strong"),I2r=o("swin"),N2r=o(" \u2014 "),FH=a("a"),q2r=o("TFSwinModel"),j2r=o(" (Swin Transformer model)"),D2r=l(),FM=a("li"),w4e=a("strong"),G2r=o("t5"),O2r=o(" \u2014 "),TH=a("a"),V2r=o("TFT5Model"),X2r=o(" (T5 model)"),z2r=l(),TM=a("li"),A4e=a("strong"),W2r=o("tapas"),Q2r=o(" \u2014 "),MH=a("a"),H2r=o("TFTapasModel"),U2r=o(" (TAPAS model)"),J2r=l(),MM=a("li"),L4e=a("strong"),Y2r=o("transfo-xl"),K2r=o(" \u2014 "),EH=a("a"),Z2r=o("TFTransfoXLModel"),e1r=o(" (Transformer-XL model)"),o1r=l(),EM=a("li"),y4e=a("strong"),r1r=o("vit"),t1r=o(" \u2014 "),CH=a("a"),a1r=o("TFViTModel"),n1r=o(" (ViT model)"),s1r=l(),CM=a("li"),x4e=a("strong"),l1r=o("vit_mae"),i1r=o(" \u2014 "),wH=a("a"),d1r=o("TFViTMAEModel"),c1r=o(" (ViTMAE model)"),f1r=l(),wM=a("li"),$4e=a("strong"),m1r=o("wav2vec2"),g1r=o(" \u2014 "),AH=a("a"),h1r=o("TFWav2Vec2Model"),p1r=o(" (Wav2Vec2 model)"),u1r=l(),AM=a("li"),k4e=a("strong"),_1r=o("xlm"),b1r=o(" \u2014 "),LH=a("a"),v1r=o("TFXLMModel"),F1r=o(" (XLM model)"),T1r=l(),LM=a("li"),S4e=a("strong"),M1r=o("xlm-roberta"),E1r=o(" \u2014 "),yH=a("a"),C1r=o("TFXLMRobertaModel"),w1r=o(" (XLM-RoBERTa model)"),A1r=l(),yM=a("li"),R4e=a("strong"),L1r=o("xlnet"),y1r=o(" \u2014 "),xH=a("a"),x1r=o("TFXLNetModel"),$1r=o(" (XLNet model)"),k1r=l(),F(xM.$$.fragment),lOe=l(),tc=a("h2"),$M=a("a"),P4e=a("span"),F(c9.$$.fragment),S1r=l(),B4e=a("span"),R1r=o("TFAutoModelForPreTraining"),iOe=l(),er=a("div"),F(f9.$$.fragment),P1r=l(),ac=a("p"),B1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$H=a("a"),I1r=o("from_pretrained()"),N1r=o(" class method or the "),kH=a("a"),q1r=o("from_config()"),j1r=o(` class
method.`),D1r=l(),m9=a("p"),G1r=o("This class cannot be instantiated directly using "),I4e=a("code"),O1r=o("__init__()"),V1r=o(" (throws an error)."),X1r=l(),St=a("div"),F(g9.$$.fragment),z1r=l(),N4e=a("p"),W1r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Q1r=l(),nc=a("p"),H1r=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),U1r=o("not"),J1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),Y1r=o("from_pretrained()"),K1r=o(" to load the model weights."),Z1r=l(),F(kM.$$.fragment),e7r=l(),yr=a("div"),F(h9.$$.fragment),o7r=l(),j4e=a("p"),r7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),t7r=l(),nn=a("p"),a7r=o("The model class to instantiate is selected based on the "),D4e=a("code"),n7r=o("model_type"),s7r=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),l7r=o("pretrained_model_name_or_path"),i7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),d7r=o("pretrained_model_name_or_path"),c7r=o(":"),f7r=l(),se=a("ul"),SM=a("li"),V4e=a("strong"),m7r=o("albert"),g7r=o(" \u2014 "),RH=a("a"),h7r=o("TFAlbertForPreTraining"),p7r=o(" (ALBERT model)"),u7r=l(),RM=a("li"),X4e=a("strong"),_7r=o("bart"),b7r=o(" \u2014 "),PH=a("a"),v7r=o("TFBartForConditionalGeneration"),F7r=o(" (BART model)"),T7r=l(),PM=a("li"),z4e=a("strong"),M7r=o("bert"),E7r=o(" \u2014 "),BH=a("a"),C7r=o("TFBertForPreTraining"),w7r=o(" (BERT model)"),A7r=l(),BM=a("li"),W4e=a("strong"),L7r=o("camembert"),y7r=o(" \u2014 "),IH=a("a"),x7r=o("TFCamembertForMaskedLM"),$7r=o(" (CamemBERT model)"),k7r=l(),IM=a("li"),Q4e=a("strong"),S7r=o("ctrl"),R7r=o(" \u2014 "),NH=a("a"),P7r=o("TFCTRLLMHeadModel"),B7r=o(" (CTRL model)"),I7r=l(),NM=a("li"),H4e=a("strong"),N7r=o("distilbert"),q7r=o(" \u2014 "),qH=a("a"),j7r=o("TFDistilBertForMaskedLM"),D7r=o(" (DistilBERT model)"),G7r=l(),qM=a("li"),U4e=a("strong"),O7r=o("electra"),V7r=o(" \u2014 "),jH=a("a"),X7r=o("TFElectraForPreTraining"),z7r=o(" (ELECTRA model)"),W7r=l(),jM=a("li"),J4e=a("strong"),Q7r=o("flaubert"),H7r=o(" \u2014 "),DH=a("a"),U7r=o("TFFlaubertWithLMHeadModel"),J7r=o(" (FlauBERT model)"),Y7r=l(),DM=a("li"),Y4e=a("strong"),K7r=o("funnel"),Z7r=o(" \u2014 "),GH=a("a"),ebr=o("TFFunnelForPreTraining"),obr=o(" (Funnel Transformer model)"),rbr=l(),GM=a("li"),K4e=a("strong"),tbr=o("gpt2"),abr=o(" \u2014 "),OH=a("a"),nbr=o("TFGPT2LMHeadModel"),sbr=o(" (OpenAI GPT-2 model)"),lbr=l(),OM=a("li"),Z4e=a("strong"),ibr=o("layoutlm"),dbr=o(" \u2014 "),VH=a("a"),cbr=o("TFLayoutLMForMaskedLM"),fbr=o(" (LayoutLM model)"),mbr=l(),VM=a("li"),eve=a("strong"),gbr=o("lxmert"),hbr=o(" \u2014 "),XH=a("a"),pbr=o("TFLxmertForPreTraining"),ubr=o(" (LXMERT model)"),_br=l(),XM=a("li"),ove=a("strong"),bbr=o("mobilebert"),vbr=o(" \u2014 "),zH=a("a"),Fbr=o("TFMobileBertForPreTraining"),Tbr=o(" (MobileBERT model)"),Mbr=l(),zM=a("li"),rve=a("strong"),Ebr=o("mpnet"),Cbr=o(" \u2014 "),WH=a("a"),wbr=o("TFMPNetForMaskedLM"),Abr=o(" (MPNet model)"),Lbr=l(),WM=a("li"),tve=a("strong"),ybr=o("openai-gpt"),xbr=o(" \u2014 "),QH=a("a"),$br=o("TFOpenAIGPTLMHeadModel"),kbr=o(" (OpenAI GPT model)"),Sbr=l(),QM=a("li"),ave=a("strong"),Rbr=o("roberta"),Pbr=o(" \u2014 "),HH=a("a"),Bbr=o("TFRobertaForMaskedLM"),Ibr=o(" (RoBERTa model)"),Nbr=l(),HM=a("li"),nve=a("strong"),qbr=o("t5"),jbr=o(" \u2014 "),UH=a("a"),Dbr=o("TFT5ForConditionalGeneration"),Gbr=o(" (T5 model)"),Obr=l(),UM=a("li"),sve=a("strong"),Vbr=o("tapas"),Xbr=o(" \u2014 "),JH=a("a"),zbr=o("TFTapasForMaskedLM"),Wbr=o(" (TAPAS model)"),Qbr=l(),JM=a("li"),lve=a("strong"),Hbr=o("transfo-xl"),Ubr=o(" \u2014 "),YH=a("a"),Jbr=o("TFTransfoXLLMHeadModel"),Ybr=o(" (Transformer-XL model)"),Kbr=l(),YM=a("li"),ive=a("strong"),Zbr=o("vit_mae"),e4r=o(" \u2014 "),KH=a("a"),o4r=o("TFViTMAEForPreTraining"),r4r=o(" (ViTMAE model)"),t4r=l(),KM=a("li"),dve=a("strong"),a4r=o("xlm"),n4r=o(" \u2014 "),ZH=a("a"),s4r=o("TFXLMWithLMHeadModel"),l4r=o(" (XLM model)"),i4r=l(),ZM=a("li"),cve=a("strong"),d4r=o("xlm-roberta"),c4r=o(" \u2014 "),eU=a("a"),f4r=o("TFXLMRobertaForMaskedLM"),m4r=o(" (XLM-RoBERTa model)"),g4r=l(),eE=a("li"),fve=a("strong"),h4r=o("xlnet"),p4r=o(" \u2014 "),oU=a("a"),u4r=o("TFXLNetLMHeadModel"),_4r=o(" (XLNet model)"),b4r=l(),F(oE.$$.fragment),dOe=l(),sc=a("h2"),rE=a("a"),mve=a("span"),F(p9.$$.fragment),v4r=l(),gve=a("span"),F4r=o("TFAutoModelForCausalLM"),cOe=l(),or=a("div"),F(u9.$$.fragment),T4r=l(),lc=a("p"),M4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rU=a("a"),E4r=o("from_pretrained()"),C4r=o(" class method or the "),tU=a("a"),w4r=o("from_config()"),A4r=o(` class
method.`),L4r=l(),_9=a("p"),y4r=o("This class cannot be instantiated directly using "),hve=a("code"),x4r=o("__init__()"),$4r=o(" (throws an error)."),k4r=l(),Rt=a("div"),F(b9.$$.fragment),S4r=l(),pve=a("p"),R4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),P4r=l(),ic=a("p"),B4r=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),I4r=o("not"),N4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=a("a"),q4r=o("from_pretrained()"),j4r=o(" to load the model weights."),D4r=l(),F(tE.$$.fragment),G4r=l(),xr=a("div"),F(v9.$$.fragment),O4r=l(),_ve=a("p"),V4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X4r=l(),sn=a("p"),z4r=o("The model class to instantiate is selected based on the "),bve=a("code"),W4r=o("model_type"),Q4r=o(` property of the config object (either
passed as an argument or loaded from `),vve=a("code"),H4r=o("pretrained_model_name_or_path"),U4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=a("code"),J4r=o("pretrained_model_name_or_path"),Y4r=o(":"),K4r=l(),Me=a("ul"),aE=a("li"),Tve=a("strong"),Z4r=o("bert"),evr=o(" \u2014 "),nU=a("a"),ovr=o("TFBertLMHeadModel"),rvr=o(" (BERT model)"),tvr=l(),nE=a("li"),Mve=a("strong"),avr=o("camembert"),nvr=o(" \u2014 "),sU=a("a"),svr=o("TFCamembertForCausalLM"),lvr=o(" (CamemBERT model)"),ivr=l(),sE=a("li"),Eve=a("strong"),dvr=o("ctrl"),cvr=o(" \u2014 "),lU=a("a"),fvr=o("TFCTRLLMHeadModel"),mvr=o(" (CTRL model)"),gvr=l(),lE=a("li"),Cve=a("strong"),hvr=o("gpt2"),pvr=o(" \u2014 "),iU=a("a"),uvr=o("TFGPT2LMHeadModel"),_vr=o(" (OpenAI GPT-2 model)"),bvr=l(),iE=a("li"),wve=a("strong"),vvr=o("gptj"),Fvr=o(" \u2014 "),dU=a("a"),Tvr=o("TFGPTJForCausalLM"),Mvr=o(" (GPT-J model)"),Evr=l(),dE=a("li"),Ave=a("strong"),Cvr=o("openai-gpt"),wvr=o(" \u2014 "),cU=a("a"),Avr=o("TFOpenAIGPTLMHeadModel"),Lvr=o(" (OpenAI GPT model)"),yvr=l(),cE=a("li"),Lve=a("strong"),xvr=o("opt"),$vr=o(" \u2014 "),fU=a("a"),kvr=o("TFOPTForCausalLM"),Svr=o(" (OPT model)"),Rvr=l(),fE=a("li"),yve=a("strong"),Pvr=o("rembert"),Bvr=o(" \u2014 "),mU=a("a"),Ivr=o("TFRemBertForCausalLM"),Nvr=o(" (RemBERT model)"),qvr=l(),mE=a("li"),xve=a("strong"),jvr=o("roberta"),Dvr=o(" \u2014 "),gU=a("a"),Gvr=o("TFRobertaForCausalLM"),Ovr=o(" (RoBERTa model)"),Vvr=l(),gE=a("li"),$ve=a("strong"),Xvr=o("roformer"),zvr=o(" \u2014 "),hU=a("a"),Wvr=o("TFRoFormerForCausalLM"),Qvr=o(" (RoFormer model)"),Hvr=l(),hE=a("li"),kve=a("strong"),Uvr=o("transfo-xl"),Jvr=o(" \u2014 "),pU=a("a"),Yvr=o("TFTransfoXLLMHeadModel"),Kvr=o(" (Transformer-XL model)"),Zvr=l(),pE=a("li"),Sve=a("strong"),eFr=o("xlm"),oFr=o(" \u2014 "),uU=a("a"),rFr=o("TFXLMWithLMHeadModel"),tFr=o(" (XLM model)"),aFr=l(),uE=a("li"),Rve=a("strong"),nFr=o("xlnet"),sFr=o(" \u2014 "),_U=a("a"),lFr=o("TFXLNetLMHeadModel"),iFr=o(" (XLNet model)"),dFr=l(),F(_E.$$.fragment),fOe=l(),dc=a("h2"),bE=a("a"),Pve=a("span"),F(F9.$$.fragment),cFr=l(),Bve=a("span"),fFr=o("TFAutoModelForImageClassification"),mOe=l(),rr=a("div"),F(T9.$$.fragment),mFr=l(),cc=a("p"),gFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bU=a("a"),hFr=o("from_pretrained()"),pFr=o(" class method or the "),vU=a("a"),uFr=o("from_config()"),_Fr=o(` class
method.`),bFr=l(),M9=a("p"),vFr=o("This class cannot be instantiated directly using "),Ive=a("code"),FFr=o("__init__()"),TFr=o(" (throws an error)."),MFr=l(),Pt=a("div"),F(E9.$$.fragment),EFr=l(),Nve=a("p"),CFr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),wFr=l(),fc=a("p"),AFr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),LFr=o("not"),yFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),xFr=o("from_pretrained()"),$Fr=o(" to load the model weights."),kFr=l(),F(vE.$$.fragment),SFr=l(),$r=a("div"),F(C9.$$.fragment),RFr=l(),jve=a("p"),PFr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),BFr=l(),ln=a("p"),IFr=o("The model class to instantiate is selected based on the "),Dve=a("code"),NFr=o("model_type"),qFr=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),jFr=o("pretrained_model_name_or_path"),DFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),GFr=o("pretrained_model_name_or_path"),OFr=o(":"),VFr=l(),rt=a("ul"),FE=a("li"),Vve=a("strong"),XFr=o("convnext"),zFr=o(" \u2014 "),TU=a("a"),WFr=o("TFConvNextForImageClassification"),QFr=o(" (ConvNeXT model)"),HFr=l(),TE=a("li"),Xve=a("strong"),UFr=o("data2vec-vision"),JFr=o(" \u2014 "),MU=a("a"),YFr=o("TFData2VecVisionForImageClassification"),KFr=o(" (Data2VecVision model)"),ZFr=l(),ME=a("li"),zve=a("strong"),eTr=o("resnet"),oTr=o(" \u2014 "),EU=a("a"),rTr=o("TFResNetForImageClassification"),tTr=o(" (ResNet model)"),aTr=l(),EE=a("li"),Wve=a("strong"),nTr=o("swin"),sTr=o(" \u2014 "),CU=a("a"),lTr=o("TFSwinForImageClassification"),iTr=o(" (Swin Transformer model)"),dTr=l(),CE=a("li"),Qve=a("strong"),cTr=o("vit"),fTr=o(" \u2014 "),wU=a("a"),mTr=o("TFViTForImageClassification"),gTr=o(" (ViT model)"),hTr=l(),F(wE.$$.fragment),gOe=l(),mc=a("h2"),AE=a("a"),Hve=a("span"),F(w9.$$.fragment),pTr=l(),Uve=a("span"),uTr=o("TFAutoModelForMaskedLM"),hOe=l(),tr=a("div"),F(A9.$$.fragment),_Tr=l(),gc=a("p"),bTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AU=a("a"),vTr=o("from_pretrained()"),FTr=o(" class method or the "),LU=a("a"),TTr=o("from_config()"),MTr=o(` class
method.`),ETr=l(),L9=a("p"),CTr=o("This class cannot be instantiated directly using "),Jve=a("code"),wTr=o("__init__()"),ATr=o(" (throws an error)."),LTr=l(),Bt=a("div"),F(y9.$$.fragment),yTr=l(),Yve=a("p"),xTr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$Tr=l(),hc=a("p"),kTr=o(`Note:
Loading a model from its configuration file does `),Kve=a("strong"),STr=o("not"),RTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=a("a"),PTr=o("from_pretrained()"),BTr=o(" to load the model weights."),ITr=l(),F(LE.$$.fragment),NTr=l(),kr=a("div"),F(x9.$$.fragment),qTr=l(),Zve=a("p"),jTr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),DTr=l(),dn=a("p"),GTr=o("The model class to instantiate is selected based on the "),eFe=a("code"),OTr=o("model_type"),VTr=o(` property of the config object (either
passed as an argument or loaded from `),oFe=a("code"),XTr=o("pretrained_model_name_or_path"),zTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=a("code"),WTr=o("pretrained_model_name_or_path"),QTr=o(":"),HTr=l(),ie=a("ul"),yE=a("li"),tFe=a("strong"),UTr=o("albert"),JTr=o(" \u2014 "),xU=a("a"),YTr=o("TFAlbertForMaskedLM"),KTr=o(" (ALBERT model)"),ZTr=l(),xE=a("li"),aFe=a("strong"),eMr=o("bert"),oMr=o(" \u2014 "),$U=a("a"),rMr=o("TFBertForMaskedLM"),tMr=o(" (BERT model)"),aMr=l(),$E=a("li"),nFe=a("strong"),nMr=o("camembert"),sMr=o(" \u2014 "),kU=a("a"),lMr=o("TFCamembertForMaskedLM"),iMr=o(" (CamemBERT model)"),dMr=l(),kE=a("li"),sFe=a("strong"),cMr=o("convbert"),fMr=o(" \u2014 "),SU=a("a"),mMr=o("TFConvBertForMaskedLM"),gMr=o(" (ConvBERT model)"),hMr=l(),SE=a("li"),lFe=a("strong"),pMr=o("deberta"),uMr=o(" \u2014 "),RU=a("a"),_Mr=o("TFDebertaForMaskedLM"),bMr=o(" (DeBERTa model)"),vMr=l(),RE=a("li"),iFe=a("strong"),FMr=o("deberta-v2"),TMr=o(" \u2014 "),PU=a("a"),MMr=o("TFDebertaV2ForMaskedLM"),EMr=o(" (DeBERTa-v2 model)"),CMr=l(),PE=a("li"),dFe=a("strong"),wMr=o("distilbert"),AMr=o(" \u2014 "),BU=a("a"),LMr=o("TFDistilBertForMaskedLM"),yMr=o(" (DistilBERT model)"),xMr=l(),BE=a("li"),cFe=a("strong"),$Mr=o("electra"),kMr=o(" \u2014 "),IU=a("a"),SMr=o("TFElectraForMaskedLM"),RMr=o(" (ELECTRA model)"),PMr=l(),IE=a("li"),fFe=a("strong"),BMr=o("flaubert"),IMr=o(" \u2014 "),NU=a("a"),NMr=o("TFFlaubertWithLMHeadModel"),qMr=o(" (FlauBERT model)"),jMr=l(),NE=a("li"),mFe=a("strong"),DMr=o("funnel"),GMr=o(" \u2014 "),qU=a("a"),OMr=o("TFFunnelForMaskedLM"),VMr=o(" (Funnel Transformer model)"),XMr=l(),qE=a("li"),gFe=a("strong"),zMr=o("layoutlm"),WMr=o(" \u2014 "),jU=a("a"),QMr=o("TFLayoutLMForMaskedLM"),HMr=o(" (LayoutLM model)"),UMr=l(),jE=a("li"),hFe=a("strong"),JMr=o("longformer"),YMr=o(" \u2014 "),DU=a("a"),KMr=o("TFLongformerForMaskedLM"),ZMr=o(" (Longformer model)"),eEr=l(),DE=a("li"),pFe=a("strong"),oEr=o("mobilebert"),rEr=o(" \u2014 "),GU=a("a"),tEr=o("TFMobileBertForMaskedLM"),aEr=o(" (MobileBERT model)"),nEr=l(),GE=a("li"),uFe=a("strong"),sEr=o("mpnet"),lEr=o(" \u2014 "),OU=a("a"),iEr=o("TFMPNetForMaskedLM"),dEr=o(" (MPNet model)"),cEr=l(),OE=a("li"),_Fe=a("strong"),fEr=o("rembert"),mEr=o(" \u2014 "),VU=a("a"),gEr=o("TFRemBertForMaskedLM"),hEr=o(" (RemBERT model)"),pEr=l(),VE=a("li"),bFe=a("strong"),uEr=o("roberta"),_Er=o(" \u2014 "),XU=a("a"),bEr=o("TFRobertaForMaskedLM"),vEr=o(" (RoBERTa model)"),FEr=l(),XE=a("li"),vFe=a("strong"),TEr=o("roformer"),MEr=o(" \u2014 "),zU=a("a"),EEr=o("TFRoFormerForMaskedLM"),CEr=o(" (RoFormer model)"),wEr=l(),zE=a("li"),FFe=a("strong"),AEr=o("tapas"),LEr=o(" \u2014 "),WU=a("a"),yEr=o("TFTapasForMaskedLM"),xEr=o(" (TAPAS model)"),$Er=l(),WE=a("li"),TFe=a("strong"),kEr=o("xlm"),SEr=o(" \u2014 "),QU=a("a"),REr=o("TFXLMWithLMHeadModel"),PEr=o(" (XLM model)"),BEr=l(),QE=a("li"),MFe=a("strong"),IEr=o("xlm-roberta"),NEr=o(" \u2014 "),HU=a("a"),qEr=o("TFXLMRobertaForMaskedLM"),jEr=o(" (XLM-RoBERTa model)"),DEr=l(),F(HE.$$.fragment),pOe=l(),pc=a("h2"),UE=a("a"),EFe=a("span"),F($9.$$.fragment),GEr=l(),CFe=a("span"),OEr=o("TFAutoModelForSeq2SeqLM"),uOe=l(),ar=a("div"),F(k9.$$.fragment),VEr=l(),uc=a("p"),XEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=a("a"),zEr=o("from_pretrained()"),WEr=o(" class method or the "),JU=a("a"),QEr=o("from_config()"),HEr=o(` class
method.`),UEr=l(),S9=a("p"),JEr=o("This class cannot be instantiated directly using "),wFe=a("code"),YEr=o("__init__()"),KEr=o(" (throws an error)."),ZEr=l(),It=a("div"),F(R9.$$.fragment),eCr=l(),AFe=a("p"),oCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rCr=l(),_c=a("p"),tCr=o(`Note:
Loading a model from its configuration file does `),LFe=a("strong"),aCr=o("not"),nCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),sCr=o("from_pretrained()"),lCr=o(" to load the model weights."),iCr=l(),F(JE.$$.fragment),dCr=l(),Sr=a("div"),F(P9.$$.fragment),cCr=l(),yFe=a("p"),fCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),mCr=l(),cn=a("p"),gCr=o("The model class to instantiate is selected based on the "),xFe=a("code"),hCr=o("model_type"),pCr=o(` property of the config object (either
passed as an argument or loaded from `),$Fe=a("code"),uCr=o("pretrained_model_name_or_path"),_Cr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=a("code"),bCr=o("pretrained_model_name_or_path"),vCr=o(":"),FCr=l(),ye=a("ul"),YE=a("li"),SFe=a("strong"),TCr=o("bart"),MCr=o(" \u2014 "),KU=a("a"),ECr=o("TFBartForConditionalGeneration"),CCr=o(" (BART model)"),wCr=l(),KE=a("li"),RFe=a("strong"),ACr=o("blenderbot"),LCr=o(" \u2014 "),ZU=a("a"),yCr=o("TFBlenderbotForConditionalGeneration"),xCr=o(" (Blenderbot model)"),$Cr=l(),ZE=a("li"),PFe=a("strong"),kCr=o("blenderbot-small"),SCr=o(" \u2014 "),eJ=a("a"),RCr=o("TFBlenderbotSmallForConditionalGeneration"),PCr=o(" (BlenderbotSmall model)"),BCr=l(),eC=a("li"),BFe=a("strong"),ICr=o("encoder-decoder"),NCr=o(" \u2014 "),oJ=a("a"),qCr=o("TFEncoderDecoderModel"),jCr=o(" (Encoder decoder model)"),DCr=l(),oC=a("li"),IFe=a("strong"),GCr=o("led"),OCr=o(" \u2014 "),rJ=a("a"),VCr=o("TFLEDForConditionalGeneration"),XCr=o(" (LED model)"),zCr=l(),rC=a("li"),NFe=a("strong"),WCr=o("marian"),QCr=o(" \u2014 "),tJ=a("a"),HCr=o("TFMarianMTModel"),UCr=o(" (Marian model)"),JCr=l(),tC=a("li"),qFe=a("strong"),YCr=o("mbart"),KCr=o(" \u2014 "),aJ=a("a"),ZCr=o("TFMBartForConditionalGeneration"),e5r=o(" (mBART model)"),o5r=l(),aC=a("li"),jFe=a("strong"),r5r=o("mt5"),t5r=o(" \u2014 "),nJ=a("a"),a5r=o("TFMT5ForConditionalGeneration"),n5r=o(" (MT5 model)"),s5r=l(),nC=a("li"),DFe=a("strong"),l5r=o("pegasus"),i5r=o(" \u2014 "),sJ=a("a"),d5r=o("TFPegasusForConditionalGeneration"),c5r=o(" (Pegasus model)"),f5r=l(),sC=a("li"),GFe=a("strong"),m5r=o("t5"),g5r=o(" \u2014 "),lJ=a("a"),h5r=o("TFT5ForConditionalGeneration"),p5r=o(" (T5 model)"),u5r=l(),F(lC.$$.fragment),_Oe=l(),bc=a("h2"),iC=a("a"),OFe=a("span"),F(B9.$$.fragment),_5r=l(),VFe=a("span"),b5r=o("TFAutoModelForSequenceClassification"),bOe=l(),nr=a("div"),F(I9.$$.fragment),v5r=l(),vc=a("p"),F5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iJ=a("a"),T5r=o("from_pretrained()"),M5r=o(" class method or the "),dJ=a("a"),E5r=o("from_config()"),C5r=o(` class
method.`),w5r=l(),N9=a("p"),A5r=o("This class cannot be instantiated directly using "),XFe=a("code"),L5r=o("__init__()"),y5r=o(" (throws an error)."),x5r=l(),Nt=a("div"),F(q9.$$.fragment),$5r=l(),zFe=a("p"),k5r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),S5r=l(),Fc=a("p"),R5r=o(`Note:
Loading a model from its configuration file does `),WFe=a("strong"),P5r=o("not"),B5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),I5r=o("from_pretrained()"),N5r=o(" to load the model weights."),q5r=l(),F(dC.$$.fragment),j5r=l(),Rr=a("div"),F(j9.$$.fragment),D5r=l(),QFe=a("p"),G5r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O5r=l(),fn=a("p"),V5r=o("The model class to instantiate is selected based on the "),HFe=a("code"),X5r=o("model_type"),z5r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),W5r=o("pretrained_model_name_or_path"),Q5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),H5r=o("pretrained_model_name_or_path"),U5r=o(":"),J5r=l(),te=a("ul"),cC=a("li"),YFe=a("strong"),Y5r=o("albert"),K5r=o(" \u2014 "),fJ=a("a"),Z5r=o("TFAlbertForSequenceClassification"),e3r=o(" (ALBERT model)"),o3r=l(),fC=a("li"),KFe=a("strong"),r3r=o("bert"),t3r=o(" \u2014 "),mJ=a("a"),a3r=o("TFBertForSequenceClassification"),n3r=o(" (BERT model)"),s3r=l(),mC=a("li"),ZFe=a("strong"),l3r=o("camembert"),i3r=o(" \u2014 "),gJ=a("a"),d3r=o("TFCamembertForSequenceClassification"),c3r=o(" (CamemBERT model)"),f3r=l(),gC=a("li"),eTe=a("strong"),m3r=o("convbert"),g3r=o(" \u2014 "),hJ=a("a"),h3r=o("TFConvBertForSequenceClassification"),p3r=o(" (ConvBERT model)"),u3r=l(),hC=a("li"),oTe=a("strong"),_3r=o("ctrl"),b3r=o(" \u2014 "),pJ=a("a"),v3r=o("TFCTRLForSequenceClassification"),F3r=o(" (CTRL model)"),T3r=l(),pC=a("li"),rTe=a("strong"),M3r=o("deberta"),E3r=o(" \u2014 "),uJ=a("a"),C3r=o("TFDebertaForSequenceClassification"),w3r=o(" (DeBERTa model)"),A3r=l(),uC=a("li"),tTe=a("strong"),L3r=o("deberta-v2"),y3r=o(" \u2014 "),_J=a("a"),x3r=o("TFDebertaV2ForSequenceClassification"),$3r=o(" (DeBERTa-v2 model)"),k3r=l(),_C=a("li"),aTe=a("strong"),S3r=o("distilbert"),R3r=o(" \u2014 "),bJ=a("a"),P3r=o("TFDistilBertForSequenceClassification"),B3r=o(" (DistilBERT model)"),I3r=l(),bC=a("li"),nTe=a("strong"),N3r=o("electra"),q3r=o(" \u2014 "),vJ=a("a"),j3r=o("TFElectraForSequenceClassification"),D3r=o(" (ELECTRA model)"),G3r=l(),vC=a("li"),sTe=a("strong"),O3r=o("flaubert"),V3r=o(" \u2014 "),FJ=a("a"),X3r=o("TFFlaubertForSequenceClassification"),z3r=o(" (FlauBERT model)"),W3r=l(),FC=a("li"),lTe=a("strong"),Q3r=o("funnel"),H3r=o(" \u2014 "),TJ=a("a"),U3r=o("TFFunnelForSequenceClassification"),J3r=o(" (Funnel Transformer model)"),Y3r=l(),TC=a("li"),iTe=a("strong"),K3r=o("gpt2"),Z3r=o(" \u2014 "),MJ=a("a"),e0r=o("TFGPT2ForSequenceClassification"),o0r=o(" (OpenAI GPT-2 model)"),r0r=l(),MC=a("li"),dTe=a("strong"),t0r=o("gptj"),a0r=o(" \u2014 "),EJ=a("a"),n0r=o("TFGPTJForSequenceClassification"),s0r=o(" (GPT-J model)"),l0r=l(),EC=a("li"),cTe=a("strong"),i0r=o("layoutlm"),d0r=o(" \u2014 "),CJ=a("a"),c0r=o("TFLayoutLMForSequenceClassification"),f0r=o(" (LayoutLM model)"),m0r=l(),CC=a("li"),fTe=a("strong"),g0r=o("longformer"),h0r=o(" \u2014 "),wJ=a("a"),p0r=o("TFLongformerForSequenceClassification"),u0r=o(" (Longformer model)"),_0r=l(),wC=a("li"),mTe=a("strong"),b0r=o("mobilebert"),v0r=o(" \u2014 "),AJ=a("a"),F0r=o("TFMobileBertForSequenceClassification"),T0r=o(" (MobileBERT model)"),M0r=l(),AC=a("li"),gTe=a("strong"),E0r=o("mpnet"),C0r=o(" \u2014 "),LJ=a("a"),w0r=o("TFMPNetForSequenceClassification"),A0r=o(" (MPNet model)"),L0r=l(),LC=a("li"),hTe=a("strong"),y0r=o("openai-gpt"),x0r=o(" \u2014 "),yJ=a("a"),$0r=o("TFOpenAIGPTForSequenceClassification"),k0r=o(" (OpenAI GPT model)"),S0r=l(),yC=a("li"),pTe=a("strong"),R0r=o("rembert"),P0r=o(" \u2014 "),xJ=a("a"),B0r=o("TFRemBertForSequenceClassification"),I0r=o(" (RemBERT model)"),N0r=l(),xC=a("li"),uTe=a("strong"),q0r=o("roberta"),j0r=o(" \u2014 "),$J=a("a"),D0r=o("TFRobertaForSequenceClassification"),G0r=o(" (RoBERTa model)"),O0r=l(),$C=a("li"),_Te=a("strong"),V0r=o("roformer"),X0r=o(" \u2014 "),kJ=a("a"),z0r=o("TFRoFormerForSequenceClassification"),W0r=o(" (RoFormer model)"),Q0r=l(),kC=a("li"),bTe=a("strong"),H0r=o("tapas"),U0r=o(" \u2014 "),SJ=a("a"),J0r=o("TFTapasForSequenceClassification"),Y0r=o(" (TAPAS model)"),K0r=l(),SC=a("li"),vTe=a("strong"),Z0r=o("transfo-xl"),ewr=o(" \u2014 "),RJ=a("a"),owr=o("TFTransfoXLForSequenceClassification"),rwr=o(" (Transformer-XL model)"),twr=l(),RC=a("li"),FTe=a("strong"),awr=o("xlm"),nwr=o(" \u2014 "),PJ=a("a"),swr=o("TFXLMForSequenceClassification"),lwr=o(" (XLM model)"),iwr=l(),PC=a("li"),TTe=a("strong"),dwr=o("xlm-roberta"),cwr=o(" \u2014 "),BJ=a("a"),fwr=o("TFXLMRobertaForSequenceClassification"),mwr=o(" (XLM-RoBERTa model)"),gwr=l(),BC=a("li"),MTe=a("strong"),hwr=o("xlnet"),pwr=o(" \u2014 "),IJ=a("a"),uwr=o("TFXLNetForSequenceClassification"),_wr=o(" (XLNet model)"),bwr=l(),F(IC.$$.fragment),vOe=l(),Tc=a("h2"),NC=a("a"),ETe=a("span"),F(D9.$$.fragment),vwr=l(),CTe=a("span"),Fwr=o("TFAutoModelForMultipleChoice"),FOe=l(),sr=a("div"),F(G9.$$.fragment),Twr=l(),Mc=a("p"),Mwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NJ=a("a"),Ewr=o("from_pretrained()"),Cwr=o(" class method or the "),qJ=a("a"),wwr=o("from_config()"),Awr=o(` class
method.`),Lwr=l(),O9=a("p"),ywr=o("This class cannot be instantiated directly using "),wTe=a("code"),xwr=o("__init__()"),$wr=o(" (throws an error)."),kwr=l(),qt=a("div"),F(V9.$$.fragment),Swr=l(),ATe=a("p"),Rwr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pwr=l(),Ec=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),Iwr=o("not"),Nwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),qwr=o("from_pretrained()"),jwr=o(" to load the model weights."),Dwr=l(),F(qC.$$.fragment),Gwr=l(),Pr=a("div"),F(X9.$$.fragment),Owr=l(),yTe=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Xwr=l(),mn=a("p"),zwr=o("The model class to instantiate is selected based on the "),xTe=a("code"),Wwr=o("model_type"),Qwr=o(` property of the config object (either
passed as an argument or loaded from `),$Te=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),ue=a("ul"),jC=a("li"),STe=a("strong"),Zwr=o("albert"),eAr=o(" \u2014 "),DJ=a("a"),oAr=o("TFAlbertForMultipleChoice"),rAr=o(" (ALBERT model)"),tAr=l(),DC=a("li"),RTe=a("strong"),aAr=o("bert"),nAr=o(" \u2014 "),GJ=a("a"),sAr=o("TFBertForMultipleChoice"),lAr=o(" (BERT model)"),iAr=l(),GC=a("li"),PTe=a("strong"),dAr=o("camembert"),cAr=o(" \u2014 "),OJ=a("a"),fAr=o("TFCamembertForMultipleChoice"),mAr=o(" (CamemBERT model)"),gAr=l(),OC=a("li"),BTe=a("strong"),hAr=o("convbert"),pAr=o(" \u2014 "),VJ=a("a"),uAr=o("TFConvBertForMultipleChoice"),_Ar=o(" (ConvBERT model)"),bAr=l(),VC=a("li"),ITe=a("strong"),vAr=o("distilbert"),FAr=o(" \u2014 "),XJ=a("a"),TAr=o("TFDistilBertForMultipleChoice"),MAr=o(" (DistilBERT model)"),EAr=l(),XC=a("li"),NTe=a("strong"),CAr=o("electra"),wAr=o(" \u2014 "),zJ=a("a"),AAr=o("TFElectraForMultipleChoice"),LAr=o(" (ELECTRA model)"),yAr=l(),zC=a("li"),qTe=a("strong"),xAr=o("flaubert"),$Ar=o(" \u2014 "),WJ=a("a"),kAr=o("TFFlaubertForMultipleChoice"),SAr=o(" (FlauBERT model)"),RAr=l(),WC=a("li"),jTe=a("strong"),PAr=o("funnel"),BAr=o(" \u2014 "),QJ=a("a"),IAr=o("TFFunnelForMultipleChoice"),NAr=o(" (Funnel Transformer model)"),qAr=l(),QC=a("li"),DTe=a("strong"),jAr=o("longformer"),DAr=o(" \u2014 "),HJ=a("a"),GAr=o("TFLongformerForMultipleChoice"),OAr=o(" (Longformer model)"),VAr=l(),HC=a("li"),GTe=a("strong"),XAr=o("mobilebert"),zAr=o(" \u2014 "),UJ=a("a"),WAr=o("TFMobileBertForMultipleChoice"),QAr=o(" (MobileBERT model)"),HAr=l(),UC=a("li"),OTe=a("strong"),UAr=o("mpnet"),JAr=o(" \u2014 "),JJ=a("a"),YAr=o("TFMPNetForMultipleChoice"),KAr=o(" (MPNet model)"),ZAr=l(),JC=a("li"),VTe=a("strong"),e6r=o("rembert"),o6r=o(" \u2014 "),YJ=a("a"),r6r=o("TFRemBertForMultipleChoice"),t6r=o(" (RemBERT model)"),a6r=l(),YC=a("li"),XTe=a("strong"),n6r=o("roberta"),s6r=o(" \u2014 "),KJ=a("a"),l6r=o("TFRobertaForMultipleChoice"),i6r=o(" (RoBERTa model)"),d6r=l(),KC=a("li"),zTe=a("strong"),c6r=o("roformer"),f6r=o(" \u2014 "),ZJ=a("a"),m6r=o("TFRoFormerForMultipleChoice"),g6r=o(" (RoFormer model)"),h6r=l(),ZC=a("li"),WTe=a("strong"),p6r=o("xlm"),u6r=o(" \u2014 "),eY=a("a"),_6r=o("TFXLMForMultipleChoice"),b6r=o(" (XLM model)"),v6r=l(),e5=a("li"),QTe=a("strong"),F6r=o("xlm-roberta"),T6r=o(" \u2014 "),oY=a("a"),M6r=o("TFXLMRobertaForMultipleChoice"),E6r=o(" (XLM-RoBERTa model)"),C6r=l(),o5=a("li"),HTe=a("strong"),w6r=o("xlnet"),A6r=o(" \u2014 "),rY=a("a"),L6r=o("TFXLNetForMultipleChoice"),y6r=o(" (XLNet model)"),x6r=l(),F(r5.$$.fragment),TOe=l(),Cc=a("h2"),t5=a("a"),UTe=a("span"),F(z9.$$.fragment),$6r=l(),JTe=a("span"),k6r=o("TFAutoModelForNextSentencePrediction"),MOe=l(),lr=a("div"),F(W9.$$.fragment),S6r=l(),wc=a("p"),R6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=a("a"),P6r=o("from_pretrained()"),B6r=o(" class method or the "),aY=a("a"),I6r=o("from_config()"),N6r=o(` class
method.`),q6r=l(),Q9=a("p"),j6r=o("This class cannot be instantiated directly using "),YTe=a("code"),D6r=o("__init__()"),G6r=o(" (throws an error)."),O6r=l(),jt=a("div"),F(H9.$$.fragment),V6r=l(),KTe=a("p"),X6r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),z6r=l(),Ac=a("p"),W6r=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),Q6r=o("not"),H6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),U6r=o("from_pretrained()"),J6r=o(" to load the model weights."),Y6r=l(),F(a5.$$.fragment),K6r=l(),Br=a("div"),F(U9.$$.fragment),Z6r=l(),eMe=a("p"),eLr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),oLr=l(),gn=a("p"),rLr=o("The model class to instantiate is selected based on the "),oMe=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),J9=a("ul"),n5=a("li"),aMe=a("strong"),cLr=o("bert"),fLr=o(" \u2014 "),sY=a("a"),mLr=o("TFBertForNextSentencePrediction"),gLr=o(" (BERT model)"),hLr=l(),s5=a("li"),nMe=a("strong"),pLr=o("mobilebert"),uLr=o(" \u2014 "),lY=a("a"),_Lr=o("TFMobileBertForNextSentencePrediction"),bLr=o(" (MobileBERT model)"),vLr=l(),F(l5.$$.fragment),EOe=l(),Lc=a("h2"),i5=a("a"),sMe=a("span"),F(Y9.$$.fragment),FLr=l(),lMe=a("span"),TLr=o("TFAutoModelForTableQuestionAnswering"),COe=l(),ir=a("div"),F(K9.$$.fragment),MLr=l(),yc=a("p"),ELr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iY=a("a"),CLr=o("from_pretrained()"),wLr=o(" class method or the "),dY=a("a"),ALr=o("from_config()"),LLr=o(` class
method.`),yLr=l(),Z9=a("p"),xLr=o("This class cannot be instantiated directly using "),iMe=a("code"),$Lr=o("__init__()"),kLr=o(" (throws an error)."),SLr=l(),Dt=a("div"),F(ex.$$.fragment),RLr=l(),dMe=a("p"),PLr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),BLr=l(),xc=a("p"),ILr=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),NLr=o("not"),qLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),jLr=o("from_pretrained()"),DLr=o(" to load the model weights."),GLr=l(),F(d5.$$.fragment),OLr=l(),Ir=a("div"),F(ox.$$.fragment),VLr=l(),fMe=a("p"),XLr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),zLr=l(),hn=a("p"),WLr=o("The model class to instantiate is selected based on the "),mMe=a("code"),QLr=o("model_type"),HLr=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),ULr=o("pretrained_model_name_or_path"),JLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),YLr=o("pretrained_model_name_or_path"),KLr=o(":"),ZLr=l(),pMe=a("ul"),c5=a("li"),uMe=a("strong"),eyr=o("tapas"),oyr=o(" \u2014 "),fY=a("a"),ryr=o("TFTapasForQuestionAnswering"),tyr=o(" (TAPAS model)"),ayr=l(),F(f5.$$.fragment),wOe=l(),$c=a("h2"),m5=a("a"),_Me=a("span"),F(rx.$$.fragment),nyr=l(),bMe=a("span"),syr=o("TFAutoModelForTokenClassification"),AOe=l(),dr=a("div"),F(tx.$$.fragment),lyr=l(),kc=a("p"),iyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=a("a"),dyr=o("from_pretrained()"),cyr=o(" class method or the "),gY=a("a"),fyr=o("from_config()"),myr=o(` class
method.`),gyr=l(),ax=a("p"),hyr=o("This class cannot be instantiated directly using "),vMe=a("code"),pyr=o("__init__()"),uyr=o(" (throws an error)."),_yr=l(),Gt=a("div"),F(nx.$$.fragment),byr=l(),FMe=a("p"),vyr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Fyr=l(),Sc=a("p"),Tyr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),Myr=o("not"),Eyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=a("a"),Cyr=o("from_pretrained()"),wyr=o(" to load the model weights."),Ayr=l(),F(g5.$$.fragment),Lyr=l(),Nr=a("div"),F(sx.$$.fragment),yyr=l(),MMe=a("p"),xyr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$yr=l(),pn=a("p"),kyr=o("The model class to instantiate is selected based on the "),EMe=a("code"),Syr=o("model_type"),Ryr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),Pyr=o("pretrained_model_name_or_path"),Byr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),Iyr=o("pretrained_model_name_or_path"),Nyr=o(":"),qyr=l(),de=a("ul"),h5=a("li"),AMe=a("strong"),jyr=o("albert"),Dyr=o(" \u2014 "),pY=a("a"),Gyr=o("TFAlbertForTokenClassification"),Oyr=o(" (ALBERT model)"),Vyr=l(),p5=a("li"),LMe=a("strong"),Xyr=o("bert"),zyr=o(" \u2014 "),uY=a("a"),Wyr=o("TFBertForTokenClassification"),Qyr=o(" (BERT model)"),Hyr=l(),u5=a("li"),yMe=a("strong"),Uyr=o("camembert"),Jyr=o(" \u2014 "),_Y=a("a"),Yyr=o("TFCamembertForTokenClassification"),Kyr=o(" (CamemBERT model)"),Zyr=l(),_5=a("li"),xMe=a("strong"),e8r=o("convbert"),o8r=o(" \u2014 "),bY=a("a"),r8r=o("TFConvBertForTokenClassification"),t8r=o(" (ConvBERT model)"),a8r=l(),b5=a("li"),$Me=a("strong"),n8r=o("deberta"),s8r=o(" \u2014 "),vY=a("a"),l8r=o("TFDebertaForTokenClassification"),i8r=o(" (DeBERTa model)"),d8r=l(),v5=a("li"),kMe=a("strong"),c8r=o("deberta-v2"),f8r=o(" \u2014 "),FY=a("a"),m8r=o("TFDebertaV2ForTokenClassification"),g8r=o(" (DeBERTa-v2 model)"),h8r=l(),F5=a("li"),SMe=a("strong"),p8r=o("distilbert"),u8r=o(" \u2014 "),TY=a("a"),_8r=o("TFDistilBertForTokenClassification"),b8r=o(" (DistilBERT model)"),v8r=l(),T5=a("li"),RMe=a("strong"),F8r=o("electra"),T8r=o(" \u2014 "),MY=a("a"),M8r=o("TFElectraForTokenClassification"),E8r=o(" (ELECTRA model)"),C8r=l(),M5=a("li"),PMe=a("strong"),w8r=o("flaubert"),A8r=o(" \u2014 "),EY=a("a"),L8r=o("TFFlaubertForTokenClassification"),y8r=o(" (FlauBERT model)"),x8r=l(),E5=a("li"),BMe=a("strong"),$8r=o("funnel"),k8r=o(" \u2014 "),CY=a("a"),S8r=o("TFFunnelForTokenClassification"),R8r=o(" (Funnel Transformer model)"),P8r=l(),C5=a("li"),IMe=a("strong"),B8r=o("layoutlm"),I8r=o(" \u2014 "),wY=a("a"),N8r=o("TFLayoutLMForTokenClassification"),q8r=o(" (LayoutLM model)"),j8r=l(),w5=a("li"),NMe=a("strong"),D8r=o("longformer"),G8r=o(" \u2014 "),AY=a("a"),O8r=o("TFLongformerForTokenClassification"),V8r=o(" (Longformer model)"),X8r=l(),A5=a("li"),qMe=a("strong"),z8r=o("mobilebert"),W8r=o(" \u2014 "),LY=a("a"),Q8r=o("TFMobileBertForTokenClassification"),H8r=o(" (MobileBERT model)"),U8r=l(),L5=a("li"),jMe=a("strong"),J8r=o("mpnet"),Y8r=o(" \u2014 "),yY=a("a"),K8r=o("TFMPNetForTokenClassification"),Z8r=o(" (MPNet model)"),e9r=l(),y5=a("li"),DMe=a("strong"),o9r=o("rembert"),r9r=o(" \u2014 "),xY=a("a"),t9r=o("TFRemBertForTokenClassification"),a9r=o(" (RemBERT model)"),n9r=l(),x5=a("li"),GMe=a("strong"),s9r=o("roberta"),l9r=o(" \u2014 "),$Y=a("a"),i9r=o("TFRobertaForTokenClassification"),d9r=o(" (RoBERTa model)"),c9r=l(),$5=a("li"),OMe=a("strong"),f9r=o("roformer"),m9r=o(" \u2014 "),kY=a("a"),g9r=o("TFRoFormerForTokenClassification"),h9r=o(" (RoFormer model)"),p9r=l(),k5=a("li"),VMe=a("strong"),u9r=o("xlm"),_9r=o(" \u2014 "),SY=a("a"),b9r=o("TFXLMForTokenClassification"),v9r=o(" (XLM model)"),F9r=l(),S5=a("li"),XMe=a("strong"),T9r=o("xlm-roberta"),M9r=o(" \u2014 "),RY=a("a"),E9r=o("TFXLMRobertaForTokenClassification"),C9r=o(" (XLM-RoBERTa model)"),w9r=l(),R5=a("li"),zMe=a("strong"),A9r=o("xlnet"),L9r=o(" \u2014 "),PY=a("a"),y9r=o("TFXLNetForTokenClassification"),x9r=o(" (XLNet model)"),$9r=l(),F(P5.$$.fragment),LOe=l(),Rc=a("h2"),B5=a("a"),WMe=a("span"),F(lx.$$.fragment),k9r=l(),QMe=a("span"),S9r=o("TFAutoModelForQuestionAnswering"),yOe=l(),cr=a("div"),F(ix.$$.fragment),R9r=l(),Pc=a("p"),P9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BY=a("a"),B9r=o("from_pretrained()"),I9r=o(" class method or the "),IY=a("a"),N9r=o("from_config()"),q9r=o(` class
method.`),j9r=l(),dx=a("p"),D9r=o("This class cannot be instantiated directly using "),HMe=a("code"),G9r=o("__init__()"),O9r=o(" (throws an error)."),V9r=l(),Ot=a("div"),F(cx.$$.fragment),X9r=l(),UMe=a("p"),z9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),W9r=l(),Bc=a("p"),Q9r=o(`Note:
Loading a model from its configuration file does `),JMe=a("strong"),H9r=o("not"),U9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=a("a"),J9r=o("from_pretrained()"),Y9r=o(" to load the model weights."),K9r=l(),F(I5.$$.fragment),Z9r=l(),qr=a("div"),F(fx.$$.fragment),exr=l(),YMe=a("p"),oxr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),rxr=l(),un=a("p"),txr=o("The model class to instantiate is selected based on the "),KMe=a("code"),axr=o("model_type"),nxr=o(` property of the config object (either
passed as an argument or loaded from `),ZMe=a("code"),sxr=o("pretrained_model_name_or_path"),lxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=a("code"),ixr=o("pretrained_model_name_or_path"),dxr=o(":"),cxr=l(),ce=a("ul"),N5=a("li"),oEe=a("strong"),fxr=o("albert"),mxr=o(" \u2014 "),qY=a("a"),gxr=o("TFAlbertForQuestionAnswering"),hxr=o(" (ALBERT model)"),pxr=l(),q5=a("li"),rEe=a("strong"),uxr=o("bert"),_xr=o(" \u2014 "),jY=a("a"),bxr=o("TFBertForQuestionAnswering"),vxr=o(" (BERT model)"),Fxr=l(),j5=a("li"),tEe=a("strong"),Txr=o("camembert"),Mxr=o(" \u2014 "),DY=a("a"),Exr=o("TFCamembertForQuestionAnswering"),Cxr=o(" (CamemBERT model)"),wxr=l(),D5=a("li"),aEe=a("strong"),Axr=o("convbert"),Lxr=o(" \u2014 "),GY=a("a"),yxr=o("TFConvBertForQuestionAnswering"),xxr=o(" (ConvBERT model)"),$xr=l(),G5=a("li"),nEe=a("strong"),kxr=o("deberta"),Sxr=o(" \u2014 "),OY=a("a"),Rxr=o("TFDebertaForQuestionAnswering"),Pxr=o(" (DeBERTa model)"),Bxr=l(),O5=a("li"),sEe=a("strong"),Ixr=o("deberta-v2"),Nxr=o(" \u2014 "),VY=a("a"),qxr=o("TFDebertaV2ForQuestionAnswering"),jxr=o(" (DeBERTa-v2 model)"),Dxr=l(),V5=a("li"),lEe=a("strong"),Gxr=o("distilbert"),Oxr=o(" \u2014 "),XY=a("a"),Vxr=o("TFDistilBertForQuestionAnswering"),Xxr=o(" (DistilBERT model)"),zxr=l(),X5=a("li"),iEe=a("strong"),Wxr=o("electra"),Qxr=o(" \u2014 "),zY=a("a"),Hxr=o("TFElectraForQuestionAnswering"),Uxr=o(" (ELECTRA model)"),Jxr=l(),z5=a("li"),dEe=a("strong"),Yxr=o("flaubert"),Kxr=o(" \u2014 "),WY=a("a"),Zxr=o("TFFlaubertForQuestionAnsweringSimple"),e$r=o(" (FlauBERT model)"),o$r=l(),W5=a("li"),cEe=a("strong"),r$r=o("funnel"),t$r=o(" \u2014 "),QY=a("a"),a$r=o("TFFunnelForQuestionAnswering"),n$r=o(" (Funnel Transformer model)"),s$r=l(),Q5=a("li"),fEe=a("strong"),l$r=o("gptj"),i$r=o(" \u2014 "),HY=a("a"),d$r=o("TFGPTJForQuestionAnswering"),c$r=o(" (GPT-J model)"),f$r=l(),H5=a("li"),mEe=a("strong"),m$r=o("longformer"),g$r=o(" \u2014 "),UY=a("a"),h$r=o("TFLongformerForQuestionAnswering"),p$r=o(" (Longformer model)"),u$r=l(),U5=a("li"),gEe=a("strong"),_$r=o("mobilebert"),b$r=o(" \u2014 "),JY=a("a"),v$r=o("TFMobileBertForQuestionAnswering"),F$r=o(" (MobileBERT model)"),T$r=l(),J5=a("li"),hEe=a("strong"),M$r=o("mpnet"),E$r=o(" \u2014 "),YY=a("a"),C$r=o("TFMPNetForQuestionAnswering"),w$r=o(" (MPNet model)"),A$r=l(),Y5=a("li"),pEe=a("strong"),L$r=o("rembert"),y$r=o(" \u2014 "),KY=a("a"),x$r=o("TFRemBertForQuestionAnswering"),$$r=o(" (RemBERT model)"),k$r=l(),K5=a("li"),uEe=a("strong"),S$r=o("roberta"),R$r=o(" \u2014 "),ZY=a("a"),P$r=o("TFRobertaForQuestionAnswering"),B$r=o(" (RoBERTa model)"),I$r=l(),Z5=a("li"),_Ee=a("strong"),N$r=o("roformer"),q$r=o(" \u2014 "),eK=a("a"),j$r=o("TFRoFormerForQuestionAnswering"),D$r=o(" (RoFormer model)"),G$r=l(),e3=a("li"),bEe=a("strong"),O$r=o("xlm"),V$r=o(" \u2014 "),oK=a("a"),X$r=o("TFXLMForQuestionAnsweringSimple"),z$r=o(" (XLM model)"),W$r=l(),o3=a("li"),vEe=a("strong"),Q$r=o("xlm-roberta"),H$r=o(" \u2014 "),rK=a("a"),U$r=o("TFXLMRobertaForQuestionAnswering"),J$r=o(" (XLM-RoBERTa model)"),Y$r=l(),r3=a("li"),FEe=a("strong"),K$r=o("xlnet"),Z$r=o(" \u2014 "),tK=a("a"),ekr=o("TFXLNetForQuestionAnsweringSimple"),okr=o(" (XLNet model)"),rkr=l(),F(t3.$$.fragment),xOe=l(),Ic=a("h2"),a3=a("a"),TEe=a("span"),F(mx.$$.fragment),tkr=l(),MEe=a("span"),akr=o("TFAutoModelForVision2Seq"),$Oe=l(),fr=a("div"),F(gx.$$.fragment),nkr=l(),Nc=a("p"),skr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=a("a"),lkr=o("from_pretrained()"),ikr=o(" class method or the "),nK=a("a"),dkr=o("from_config()"),ckr=o(` class
method.`),fkr=l(),hx=a("p"),mkr=o("This class cannot be instantiated directly using "),EEe=a("code"),gkr=o("__init__()"),hkr=o(" (throws an error)."),pkr=l(),Vt=a("div"),F(px.$$.fragment),ukr=l(),CEe=a("p"),_kr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),bkr=l(),qc=a("p"),vkr=o(`Note:
Loading a model from its configuration file does `),wEe=a("strong"),Fkr=o("not"),Tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Mkr=o("from_pretrained()"),Ekr=o(" to load the model weights."),Ckr=l(),F(n3.$$.fragment),wkr=l(),jr=a("div"),F(ux.$$.fragment),Akr=l(),AEe=a("p"),Lkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ykr=l(),_n=a("p"),xkr=o("The model class to instantiate is selected based on the "),LEe=a("code"),$kr=o("model_type"),kkr=o(` property of the config object (either
passed as an argument or loaded from `),yEe=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=a("code"),Pkr=o("pretrained_model_name_or_path"),Bkr=o(":"),Ikr=l(),$Ee=a("ul"),s3=a("li"),kEe=a("strong"),Nkr=o("vision-encoder-decoder"),qkr=o(" \u2014 "),lK=a("a"),jkr=o("TFVisionEncoderDecoderModel"),Dkr=o(" (Vision Encoder decoder model)"),Gkr=l(),F(l3.$$.fragment),kOe=l(),jc=a("h2"),i3=a("a"),SEe=a("span"),F(_x.$$.fragment),Okr=l(),REe=a("span"),Vkr=o("TFAutoModelForSpeechSeq2Seq"),SOe=l(),mr=a("div"),F(bx.$$.fragment),Xkr=l(),Dc=a("p"),zkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iK=a("a"),Wkr=o("from_pretrained()"),Qkr=o(" class method or the "),dK=a("a"),Hkr=o("from_config()"),Ukr=o(` class
method.`),Jkr=l(),vx=a("p"),Ykr=o("This class cannot be instantiated directly using "),PEe=a("code"),Kkr=o("__init__()"),Zkr=o(" (throws an error)."),eSr=l(),Xt=a("div"),F(Fx.$$.fragment),oSr=l(),BEe=a("p"),rSr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tSr=l(),Gc=a("p"),aSr=o(`Note:
Loading a model from its configuration file does `),IEe=a("strong"),nSr=o("not"),sSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),lSr=o("from_pretrained()"),iSr=o(" to load the model weights."),dSr=l(),F(d3.$$.fragment),cSr=l(),Dr=a("div"),F(Tx.$$.fragment),fSr=l(),NEe=a("p"),mSr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),gSr=l(),bn=a("p"),hSr=o("The model class to instantiate is selected based on the "),qEe=a("code"),pSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),jEe=a("code"),_Sr=o("pretrained_model_name_or_path"),bSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=a("code"),vSr=o("pretrained_model_name_or_path"),FSr=o(":"),TSr=l(),GEe=a("ul"),c3=a("li"),OEe=a("strong"),MSr=o("speech_to_text"),ESr=o(" \u2014 "),fK=a("a"),CSr=o("TFSpeech2TextForConditionalGeneration"),wSr=o(" (Speech2Text model)"),ASr=l(),F(f3.$$.fragment),ROe=l(),Oc=a("h2"),m3=a("a"),VEe=a("span"),F(Mx.$$.fragment),LSr=l(),XEe=a("span"),ySr=o("FlaxAutoModel"),POe=l(),gr=a("div"),F(Ex.$$.fragment),xSr=l(),Vc=a("p"),$Sr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=a("a"),kSr=o("from_pretrained()"),SSr=o(" class method or the "),gK=a("a"),RSr=o("from_config()"),PSr=o(` class
method.`),BSr=l(),Cx=a("p"),ISr=o("This class cannot be instantiated directly using "),zEe=a("code"),NSr=o("__init__()"),qSr=o(" (throws an error)."),jSr=l(),zt=a("div"),F(wx.$$.fragment),DSr=l(),WEe=a("p"),GSr=o("Instantiates one of the base model classes of the library from a configuration."),OSr=l(),Xc=a("p"),VSr=o(`Note:
Loading a model from its configuration file does `),QEe=a("strong"),XSr=o("not"),zSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=a("a"),WSr=o("from_pretrained()"),QSr=o(" to load the model weights."),HSr=l(),F(g3.$$.fragment),USr=l(),Gr=a("div"),F(Ax.$$.fragment),JSr=l(),HEe=a("p"),YSr=o("Instantiate one of the base model classes of the library from a pretrained model."),KSr=l(),vn=a("p"),ZSr=o("The model class to instantiate is selected based on the "),UEe=a("code"),eRr=o("model_type"),oRr=o(` property of the config object (either
passed as an argument or loaded from `),JEe=a("code"),rRr=o("pretrained_model_name_or_path"),tRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=a("code"),aRr=o("pretrained_model_name_or_path"),nRr=o(":"),sRr=l(),oe=a("ul"),h3=a("li"),KEe=a("strong"),lRr=o("albert"),iRr=o(" \u2014 "),pK=a("a"),dRr=o("FlaxAlbertModel"),cRr=o(" (ALBERT model)"),fRr=l(),p3=a("li"),ZEe=a("strong"),mRr=o("bart"),gRr=o(" \u2014 "),uK=a("a"),hRr=o("FlaxBartModel"),pRr=o(" (BART model)"),uRr=l(),u3=a("li"),eCe=a("strong"),_Rr=o("beit"),bRr=o(" \u2014 "),_K=a("a"),vRr=o("FlaxBeitModel"),FRr=o(" (BEiT model)"),TRr=l(),_3=a("li"),oCe=a("strong"),MRr=o("bert"),ERr=o(" \u2014 "),bK=a("a"),CRr=o("FlaxBertModel"),wRr=o(" (BERT model)"),ARr=l(),b3=a("li"),rCe=a("strong"),LRr=o("big_bird"),yRr=o(" \u2014 "),vK=a("a"),xRr=o("FlaxBigBirdModel"),$Rr=o(" (BigBird model)"),kRr=l(),v3=a("li"),tCe=a("strong"),SRr=o("blenderbot"),RRr=o(" \u2014 "),FK=a("a"),PRr=o("FlaxBlenderbotModel"),BRr=o(" (Blenderbot model)"),IRr=l(),F3=a("li"),aCe=a("strong"),NRr=o("blenderbot-small"),qRr=o(" \u2014 "),TK=a("a"),jRr=o("FlaxBlenderbotSmallModel"),DRr=o(" (BlenderbotSmall model)"),GRr=l(),T3=a("li"),nCe=a("strong"),ORr=o("clip"),VRr=o(" \u2014 "),MK=a("a"),XRr=o("FlaxCLIPModel"),zRr=o(" (CLIP model)"),WRr=l(),M3=a("li"),sCe=a("strong"),QRr=o("distilbert"),HRr=o(" \u2014 "),EK=a("a"),URr=o("FlaxDistilBertModel"),JRr=o(" (DistilBERT model)"),YRr=l(),E3=a("li"),lCe=a("strong"),KRr=o("electra"),ZRr=o(" \u2014 "),CK=a("a"),ePr=o("FlaxElectraModel"),oPr=o(" (ELECTRA model)"),rPr=l(),C3=a("li"),iCe=a("strong"),tPr=o("gpt2"),aPr=o(" \u2014 "),wK=a("a"),nPr=o("FlaxGPT2Model"),sPr=o(" (OpenAI GPT-2 model)"),lPr=l(),w3=a("li"),dCe=a("strong"),iPr=o("gpt_neo"),dPr=o(" \u2014 "),AK=a("a"),cPr=o("FlaxGPTNeoModel"),fPr=o(" (GPT Neo model)"),mPr=l(),A3=a("li"),cCe=a("strong"),gPr=o("gptj"),hPr=o(" \u2014 "),LK=a("a"),pPr=o("FlaxGPTJModel"),uPr=o(" (GPT-J model)"),_Pr=l(),L3=a("li"),fCe=a("strong"),bPr=o("longt5"),vPr=o(" \u2014 "),yK=a("a"),FPr=o("FlaxLongT5Model"),TPr=o(" (LongT5 model)"),MPr=l(),y3=a("li"),mCe=a("strong"),EPr=o("marian"),CPr=o(" \u2014 "),xK=a("a"),wPr=o("FlaxMarianModel"),APr=o(" (Marian model)"),LPr=l(),x3=a("li"),gCe=a("strong"),yPr=o("mbart"),xPr=o(" \u2014 "),$K=a("a"),$Pr=o("FlaxMBartModel"),kPr=o(" (mBART model)"),SPr=l(),$3=a("li"),hCe=a("strong"),RPr=o("mt5"),PPr=o(" \u2014 "),kK=a("a"),BPr=o("FlaxMT5Model"),IPr=o(" (MT5 model)"),NPr=l(),k3=a("li"),pCe=a("strong"),qPr=o("opt"),jPr=o(" \u2014 "),SK=a("a"),DPr=o("FlaxOPTModel"),GPr=o(" (OPT model)"),OPr=l(),S3=a("li"),uCe=a("strong"),VPr=o("pegasus"),XPr=o(" \u2014 "),RK=a("a"),zPr=o("FlaxPegasusModel"),WPr=o(" (Pegasus model)"),QPr=l(),R3=a("li"),_Ce=a("strong"),HPr=o("roberta"),UPr=o(" \u2014 "),PK=a("a"),JPr=o("FlaxRobertaModel"),YPr=o(" (RoBERTa model)"),KPr=l(),P3=a("li"),bCe=a("strong"),ZPr=o("roformer"),eBr=o(" \u2014 "),BK=a("a"),oBr=o("FlaxRoFormerModel"),rBr=o(" (RoFormer model)"),tBr=l(),B3=a("li"),vCe=a("strong"),aBr=o("t5"),nBr=o(" \u2014 "),IK=a("a"),sBr=o("FlaxT5Model"),lBr=o(" (T5 model)"),iBr=l(),I3=a("li"),FCe=a("strong"),dBr=o("vision-text-dual-encoder"),cBr=o(" \u2014 "),NK=a("a"),fBr=o("FlaxVisionTextDualEncoderModel"),mBr=o(" (VisionTextDualEncoder model)"),gBr=l(),N3=a("li"),TCe=a("strong"),hBr=o("vit"),pBr=o(" \u2014 "),qK=a("a"),uBr=o("FlaxViTModel"),_Br=o(" (ViT model)"),bBr=l(),q3=a("li"),MCe=a("strong"),vBr=o("wav2vec2"),FBr=o(" \u2014 "),jK=a("a"),TBr=o("FlaxWav2Vec2Model"),MBr=o(" (Wav2Vec2 model)"),EBr=l(),j3=a("li"),ECe=a("strong"),CBr=o("xglm"),wBr=o(" \u2014 "),DK=a("a"),ABr=o("FlaxXGLMModel"),LBr=o(" (XGLM model)"),yBr=l(),D3=a("li"),CCe=a("strong"),xBr=o("xlm-roberta"),$Br=o(" \u2014 "),GK=a("a"),kBr=o("FlaxXLMRobertaModel"),SBr=o(" (XLM-RoBERTa model)"),RBr=l(),F(G3.$$.fragment),BOe=l(),zc=a("h2"),O3=a("a"),wCe=a("span"),F(Lx.$$.fragment),PBr=l(),ACe=a("span"),BBr=o("FlaxAutoModelForCausalLM"),IOe=l(),hr=a("div"),F(yx.$$.fragment),IBr=l(),Wc=a("p"),NBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=a("a"),qBr=o("from_pretrained()"),jBr=o(" class method or the "),VK=a("a"),DBr=o("from_config()"),GBr=o(` class
method.`),OBr=l(),xx=a("p"),VBr=o("This class cannot be instantiated directly using "),LCe=a("code"),XBr=o("__init__()"),zBr=o(" (throws an error)."),WBr=l(),Wt=a("div"),F($x.$$.fragment),QBr=l(),yCe=a("p"),HBr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UBr=l(),Qc=a("p"),JBr=o(`Note:
Loading a model from its configuration file does `),xCe=a("strong"),YBr=o("not"),KBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=a("a"),ZBr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(V3.$$.fragment),rIr=l(),Or=a("div"),F(kx.$$.fragment),tIr=l(),$Ce=a("p"),aIr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),nIr=l(),Fn=a("p"),sIr=o("The model class to instantiate is selected based on the "),kCe=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),SCe=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),xe=a("ul"),X3=a("li"),PCe=a("strong"),hIr=o("bart"),pIr=o(" \u2014 "),zK=a("a"),uIr=o("FlaxBartForCausalLM"),_Ir=o(" (BART model)"),bIr=l(),z3=a("li"),BCe=a("strong"),vIr=o("bert"),FIr=o(" \u2014 "),WK=a("a"),TIr=o("FlaxBertForCausalLM"),MIr=o(" (BERT model)"),EIr=l(),W3=a("li"),ICe=a("strong"),CIr=o("big_bird"),wIr=o(" \u2014 "),QK=a("a"),AIr=o("FlaxBigBirdForCausalLM"),LIr=o(" (BigBird model)"),yIr=l(),Q3=a("li"),NCe=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),HK=a("a"),kIr=o("FlaxElectraForCausalLM"),SIr=o(" (ELECTRA model)"),RIr=l(),H3=a("li"),qCe=a("strong"),PIr=o("gpt2"),BIr=o(" \u2014 "),UK=a("a"),IIr=o("FlaxGPT2LMHeadModel"),NIr=o(" (OpenAI GPT-2 model)"),qIr=l(),U3=a("li"),jCe=a("strong"),jIr=o("gpt_neo"),DIr=o(" \u2014 "),JK=a("a"),GIr=o("FlaxGPTNeoForCausalLM"),OIr=o(" (GPT Neo model)"),VIr=l(),J3=a("li"),DCe=a("strong"),XIr=o("gptj"),zIr=o(" \u2014 "),YK=a("a"),WIr=o("FlaxGPTJForCausalLM"),QIr=o(" (GPT-J model)"),HIr=l(),Y3=a("li"),GCe=a("strong"),UIr=o("opt"),JIr=o(" \u2014 "),KK=a("a"),YIr=o("FlaxOPTForCausalLM"),KIr=o(" (OPT model)"),ZIr=l(),K3=a("li"),OCe=a("strong"),eNr=o("roberta"),oNr=o(" \u2014 "),ZK=a("a"),rNr=o("FlaxRobertaForCausalLM"),tNr=o(" (RoBERTa model)"),aNr=l(),Z3=a("li"),VCe=a("strong"),nNr=o("xglm"),sNr=o(" \u2014 "),eZ=a("a"),lNr=o("FlaxXGLMForCausalLM"),iNr=o(" (XGLM model)"),dNr=l(),F(e0.$$.fragment),NOe=l(),Hc=a("h2"),o0=a("a"),XCe=a("span"),F(Sx.$$.fragment),cNr=l(),zCe=a("span"),fNr=o("FlaxAutoModelForPreTraining"),qOe=l(),pr=a("div"),F(Rx.$$.fragment),mNr=l(),Uc=a("p"),gNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oZ=a("a"),hNr=o("from_pretrained()"),pNr=o(" class method or the "),rZ=a("a"),uNr=o("from_config()"),_Nr=o(` class
method.`),bNr=l(),Px=a("p"),vNr=o("This class cannot be instantiated directly using "),WCe=a("code"),FNr=o("__init__()"),TNr=o(" (throws an error)."),MNr=l(),Qt=a("div"),F(Bx.$$.fragment),ENr=l(),QCe=a("p"),CNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wNr=l(),Jc=a("p"),ANr=o(`Note:
Loading a model from its configuration file does `),HCe=a("strong"),LNr=o("not"),yNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=a("a"),xNr=o("from_pretrained()"),$Nr=o(" to load the model weights."),kNr=l(),F(r0.$$.fragment),SNr=l(),Vr=a("div"),F(Ix.$$.fragment),RNr=l(),UCe=a("p"),PNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),BNr=l(),Tn=a("p"),INr=o("The model class to instantiate is selected based on the "),JCe=a("code"),NNr=o("model_type"),qNr=o(` property of the config object (either
passed as an argument or loaded from `),YCe=a("code"),jNr=o("pretrained_model_name_or_path"),DNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=a("code"),GNr=o("pretrained_model_name_or_path"),ONr=o(":"),VNr=l(),Ee=a("ul"),t0=a("li"),ZCe=a("strong"),XNr=o("albert"),zNr=o(" \u2014 "),aZ=a("a"),WNr=o("FlaxAlbertForPreTraining"),QNr=o(" (ALBERT model)"),HNr=l(),a0=a("li"),e5e=a("strong"),UNr=o("bart"),JNr=o(" \u2014 "),nZ=a("a"),YNr=o("FlaxBartForConditionalGeneration"),KNr=o(" (BART model)"),ZNr=l(),n0=a("li"),o5e=a("strong"),eqr=o("bert"),oqr=o(" \u2014 "),sZ=a("a"),rqr=o("FlaxBertForPreTraining"),tqr=o(" (BERT model)"),aqr=l(),s0=a("li"),r5e=a("strong"),nqr=o("big_bird"),sqr=o(" \u2014 "),lZ=a("a"),lqr=o("FlaxBigBirdForPreTraining"),iqr=o(" (BigBird model)"),dqr=l(),l0=a("li"),t5e=a("strong"),cqr=o("electra"),fqr=o(" \u2014 "),iZ=a("a"),mqr=o("FlaxElectraForPreTraining"),gqr=o(" (ELECTRA model)"),hqr=l(),i0=a("li"),a5e=a("strong"),pqr=o("longt5"),uqr=o(" \u2014 "),dZ=a("a"),_qr=o("FlaxLongT5ForConditionalGeneration"),bqr=o(" (LongT5 model)"),vqr=l(),d0=a("li"),n5e=a("strong"),Fqr=o("mbart"),Tqr=o(" \u2014 "),cZ=a("a"),Mqr=o("FlaxMBartForConditionalGeneration"),Eqr=o(" (mBART model)"),Cqr=l(),c0=a("li"),s5e=a("strong"),wqr=o("mt5"),Aqr=o(" \u2014 "),fZ=a("a"),Lqr=o("FlaxMT5ForConditionalGeneration"),yqr=o(" (MT5 model)"),xqr=l(),f0=a("li"),l5e=a("strong"),$qr=o("roberta"),kqr=o(" \u2014 "),mZ=a("a"),Sqr=o("FlaxRobertaForMaskedLM"),Rqr=o(" (RoBERTa model)"),Pqr=l(),m0=a("li"),i5e=a("strong"),Bqr=o("roformer"),Iqr=o(" \u2014 "),gZ=a("a"),Nqr=o("FlaxRoFormerForMaskedLM"),qqr=o(" (RoFormer model)"),jqr=l(),g0=a("li"),d5e=a("strong"),Dqr=o("t5"),Gqr=o(" \u2014 "),hZ=a("a"),Oqr=o("FlaxT5ForConditionalGeneration"),Vqr=o(" (T5 model)"),Xqr=l(),h0=a("li"),c5e=a("strong"),zqr=o("wav2vec2"),Wqr=o(" \u2014 "),pZ=a("a"),Qqr=o("FlaxWav2Vec2ForPreTraining"),Hqr=o(" (Wav2Vec2 model)"),Uqr=l(),p0=a("li"),f5e=a("strong"),Jqr=o("xlm-roberta"),Yqr=o(" \u2014 "),uZ=a("a"),Kqr=o("FlaxXLMRobertaForMaskedLM"),Zqr=o(" (XLM-RoBERTa model)"),ejr=l(),F(u0.$$.fragment),jOe=l(),Yc=a("h2"),_0=a("a"),m5e=a("span"),F(Nx.$$.fragment),ojr=l(),g5e=a("span"),rjr=o("FlaxAutoModelForMaskedLM"),DOe=l(),ur=a("div"),F(qx.$$.fragment),tjr=l(),Kc=a("p"),ajr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Z=a("a"),njr=o("from_pretrained()"),sjr=o(" class method or the "),bZ=a("a"),ljr=o("from_config()"),ijr=o(` class
method.`),djr=l(),jx=a("p"),cjr=o("This class cannot be instantiated directly using "),h5e=a("code"),fjr=o("__init__()"),mjr=o(" (throws an error)."),gjr=l(),Ht=a("div"),F(Dx.$$.fragment),hjr=l(),p5e=a("p"),pjr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ujr=l(),Zc=a("p"),_jr=o(`Note:
Loading a model from its configuration file does `),u5e=a("strong"),bjr=o("not"),vjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=a("a"),Fjr=o("from_pretrained()"),Tjr=o(" to load the model weights."),Mjr=l(),F(b0.$$.fragment),Ejr=l(),Xr=a("div"),F(Gx.$$.fragment),Cjr=l(),_5e=a("p"),wjr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ajr=l(),Mn=a("p"),Ljr=o("The model class to instantiate is selected based on the "),b5e=a("code"),yjr=o("model_type"),xjr=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),$jr=o("pretrained_model_name_or_path"),kjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),Sjr=o("pretrained_model_name_or_path"),Rjr=o(":"),Pjr=l(),$e=a("ul"),v0=a("li"),T5e=a("strong"),Bjr=o("albert"),Ijr=o(" \u2014 "),FZ=a("a"),Njr=o("FlaxAlbertForMaskedLM"),qjr=o(" (ALBERT model)"),jjr=l(),F0=a("li"),M5e=a("strong"),Djr=o("bart"),Gjr=o(" \u2014 "),TZ=a("a"),Ojr=o("FlaxBartForConditionalGeneration"),Vjr=o(" (BART model)"),Xjr=l(),T0=a("li"),E5e=a("strong"),zjr=o("bert"),Wjr=o(" \u2014 "),MZ=a("a"),Qjr=o("FlaxBertForMaskedLM"),Hjr=o(" (BERT model)"),Ujr=l(),M0=a("li"),C5e=a("strong"),Jjr=o("big_bird"),Yjr=o(" \u2014 "),EZ=a("a"),Kjr=o("FlaxBigBirdForMaskedLM"),Zjr=o(" (BigBird model)"),eDr=l(),E0=a("li"),w5e=a("strong"),oDr=o("distilbert"),rDr=o(" \u2014 "),CZ=a("a"),tDr=o("FlaxDistilBertForMaskedLM"),aDr=o(" (DistilBERT model)"),nDr=l(),C0=a("li"),A5e=a("strong"),sDr=o("electra"),lDr=o(" \u2014 "),wZ=a("a"),iDr=o("FlaxElectraForMaskedLM"),dDr=o(" (ELECTRA model)"),cDr=l(),w0=a("li"),L5e=a("strong"),fDr=o("mbart"),mDr=o(" \u2014 "),AZ=a("a"),gDr=o("FlaxMBartForConditionalGeneration"),hDr=o(" (mBART model)"),pDr=l(),A0=a("li"),y5e=a("strong"),uDr=o("roberta"),_Dr=o(" \u2014 "),LZ=a("a"),bDr=o("FlaxRobertaForMaskedLM"),vDr=o(" (RoBERTa model)"),FDr=l(),L0=a("li"),x5e=a("strong"),TDr=o("roformer"),MDr=o(" \u2014 "),yZ=a("a"),EDr=o("FlaxRoFormerForMaskedLM"),CDr=o(" (RoFormer model)"),wDr=l(),y0=a("li"),$5e=a("strong"),ADr=o("xlm-roberta"),LDr=o(" \u2014 "),xZ=a("a"),yDr=o("FlaxXLMRobertaForMaskedLM"),xDr=o(" (XLM-RoBERTa model)"),$Dr=l(),F(x0.$$.fragment),GOe=l(),ef=a("h2"),$0=a("a"),k5e=a("span"),F(Ox.$$.fragment),kDr=l(),S5e=a("span"),SDr=o("FlaxAutoModelForSeq2SeqLM"),OOe=l(),_r=a("div"),F(Vx.$$.fragment),RDr=l(),of=a("p"),PDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=a("a"),BDr=o("from_pretrained()"),IDr=o(" class method or the "),kZ=a("a"),NDr=o("from_config()"),qDr=o(` class
method.`),jDr=l(),Xx=a("p"),DDr=o("This class cannot be instantiated directly using "),R5e=a("code"),GDr=o("__init__()"),ODr=o(" (throws an error)."),VDr=l(),Ut=a("div"),F(zx.$$.fragment),XDr=l(),P5e=a("p"),zDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WDr=l(),rf=a("p"),QDr=o(`Note:
Loading a model from its configuration file does `),B5e=a("strong"),HDr=o("not"),UDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=a("a"),JDr=o("from_pretrained()"),YDr=o(" to load the model weights."),KDr=l(),F(k0.$$.fragment),ZDr=l(),zr=a("div"),F(Wx.$$.fragment),eGr=l(),I5e=a("p"),oGr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rGr=l(),En=a("p"),tGr=o("The model class to instantiate is selected based on the "),N5e=a("code"),aGr=o("model_type"),nGr=o(` property of the config object (either
passed as an argument or loaded from `),q5e=a("code"),sGr=o("pretrained_model_name_or_path"),lGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=a("code"),iGr=o("pretrained_model_name_or_path"),dGr=o(":"),cGr=l(),ke=a("ul"),S0=a("li"),D5e=a("strong"),fGr=o("bart"),mGr=o(" \u2014 "),RZ=a("a"),gGr=o("FlaxBartForConditionalGeneration"),hGr=o(" (BART model)"),pGr=l(),R0=a("li"),G5e=a("strong"),uGr=o("blenderbot"),_Gr=o(" \u2014 "),PZ=a("a"),bGr=o("FlaxBlenderbotForConditionalGeneration"),vGr=o(" (Blenderbot model)"),FGr=l(),P0=a("li"),O5e=a("strong"),TGr=o("blenderbot-small"),MGr=o(" \u2014 "),BZ=a("a"),EGr=o("FlaxBlenderbotSmallForConditionalGeneration"),CGr=o(" (BlenderbotSmall model)"),wGr=l(),B0=a("li"),V5e=a("strong"),AGr=o("encoder-decoder"),LGr=o(" \u2014 "),IZ=a("a"),yGr=o("FlaxEncoderDecoderModel"),xGr=o(" (Encoder decoder model)"),$Gr=l(),I0=a("li"),X5e=a("strong"),kGr=o("longt5"),SGr=o(" \u2014 "),NZ=a("a"),RGr=o("FlaxLongT5ForConditionalGeneration"),PGr=o(" (LongT5 model)"),BGr=l(),N0=a("li"),z5e=a("strong"),IGr=o("marian"),NGr=o(" \u2014 "),qZ=a("a"),qGr=o("FlaxMarianMTModel"),jGr=o(" (Marian model)"),DGr=l(),q0=a("li"),W5e=a("strong"),GGr=o("mbart"),OGr=o(" \u2014 "),jZ=a("a"),VGr=o("FlaxMBartForConditionalGeneration"),XGr=o(" (mBART model)"),zGr=l(),j0=a("li"),Q5e=a("strong"),WGr=o("mt5"),QGr=o(" \u2014 "),DZ=a("a"),HGr=o("FlaxMT5ForConditionalGeneration"),UGr=o(" (MT5 model)"),JGr=l(),D0=a("li"),H5e=a("strong"),YGr=o("pegasus"),KGr=o(" \u2014 "),GZ=a("a"),ZGr=o("FlaxPegasusForConditionalGeneration"),eOr=o(" (Pegasus model)"),oOr=l(),G0=a("li"),U5e=a("strong"),rOr=o("t5"),tOr=o(" \u2014 "),OZ=a("a"),aOr=o("FlaxT5ForConditionalGeneration"),nOr=o(" (T5 model)"),sOr=l(),F(O0.$$.fragment),VOe=l(),tf=a("h2"),V0=a("a"),J5e=a("span"),F(Qx.$$.fragment),lOr=l(),Y5e=a("span"),iOr=o("FlaxAutoModelForSequenceClassification"),XOe=l(),br=a("div"),F(Hx.$$.fragment),dOr=l(),af=a("p"),cOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=a("a"),fOr=o("from_pretrained()"),mOr=o(" class method or the "),XZ=a("a"),gOr=o("from_config()"),hOr=o(` class
method.`),pOr=l(),Ux=a("p"),uOr=o("This class cannot be instantiated directly using "),K5e=a("code"),_Or=o("__init__()"),bOr=o(" (throws an error)."),vOr=l(),Jt=a("div"),F(Jx.$$.fragment),FOr=l(),Z5e=a("p"),TOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),MOr=l(),nf=a("p"),EOr=o(`Note:
Loading a model from its configuration file does `),e3e=a("strong"),COr=o("not"),wOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=a("a"),AOr=o("from_pretrained()"),LOr=o(" to load the model weights."),yOr=l(),F(X0.$$.fragment),xOr=l(),Wr=a("div"),F(Yx.$$.fragment),$Or=l(),o3e=a("p"),kOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),SOr=l(),Cn=a("p"),ROr=o("The model class to instantiate is selected based on the "),r3e=a("code"),POr=o("model_type"),BOr=o(` property of the config object (either
passed as an argument or loaded from `),t3e=a("code"),IOr=o("pretrained_model_name_or_path"),NOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=a("code"),qOr=o("pretrained_model_name_or_path"),jOr=o(":"),DOr=l(),Se=a("ul"),z0=a("li"),n3e=a("strong"),GOr=o("albert"),OOr=o(" \u2014 "),WZ=a("a"),VOr=o("FlaxAlbertForSequenceClassification"),XOr=o(" (ALBERT model)"),zOr=l(),W0=a("li"),s3e=a("strong"),WOr=o("bart"),QOr=o(" \u2014 "),QZ=a("a"),HOr=o("FlaxBartForSequenceClassification"),UOr=o(" (BART model)"),JOr=l(),Q0=a("li"),l3e=a("strong"),YOr=o("bert"),KOr=o(" \u2014 "),HZ=a("a"),ZOr=o("FlaxBertForSequenceClassification"),eVr=o(" (BERT model)"),oVr=l(),H0=a("li"),i3e=a("strong"),rVr=o("big_bird"),tVr=o(" \u2014 "),UZ=a("a"),aVr=o("FlaxBigBirdForSequenceClassification"),nVr=o(" (BigBird model)"),sVr=l(),U0=a("li"),d3e=a("strong"),lVr=o("distilbert"),iVr=o(" \u2014 "),JZ=a("a"),dVr=o("FlaxDistilBertForSequenceClassification"),cVr=o(" (DistilBERT model)"),fVr=l(),J0=a("li"),c3e=a("strong"),mVr=o("electra"),gVr=o(" \u2014 "),YZ=a("a"),hVr=o("FlaxElectraForSequenceClassification"),pVr=o(" (ELECTRA model)"),uVr=l(),Y0=a("li"),f3e=a("strong"),_Vr=o("mbart"),bVr=o(" \u2014 "),KZ=a("a"),vVr=o("FlaxMBartForSequenceClassification"),FVr=o(" (mBART model)"),TVr=l(),K0=a("li"),m3e=a("strong"),MVr=o("roberta"),EVr=o(" \u2014 "),ZZ=a("a"),CVr=o("FlaxRobertaForSequenceClassification"),wVr=o(" (RoBERTa model)"),AVr=l(),Z0=a("li"),g3e=a("strong"),LVr=o("roformer"),yVr=o(" \u2014 "),eee=a("a"),xVr=o("FlaxRoFormerForSequenceClassification"),$Vr=o(" (RoFormer model)"),kVr=l(),ew=a("li"),h3e=a("strong"),SVr=o("xlm-roberta"),RVr=o(" \u2014 "),oee=a("a"),PVr=o("FlaxXLMRobertaForSequenceClassification"),BVr=o(" (XLM-RoBERTa model)"),IVr=l(),F(ow.$$.fragment),zOe=l(),sf=a("h2"),rw=a("a"),p3e=a("span"),F(Kx.$$.fragment),NVr=l(),u3e=a("span"),qVr=o("FlaxAutoModelForQuestionAnswering"),WOe=l(),vr=a("div"),F(Zx.$$.fragment),jVr=l(),lf=a("p"),DVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ree=a("a"),GVr=o("from_pretrained()"),OVr=o(" class method or the "),tee=a("a"),VVr=o("from_config()"),XVr=o(` class
method.`),zVr=l(),e$=a("p"),WVr=o("This class cannot be instantiated directly using "),_3e=a("code"),QVr=o("__init__()"),HVr=o(" (throws an error)."),UVr=l(),Yt=a("div"),F(o$.$$.fragment),JVr=l(),b3e=a("p"),YVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),KVr=l(),df=a("p"),ZVr=o(`Note:
Loading a model from its configuration file does `),v3e=a("strong"),eXr=o("not"),oXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=a("a"),rXr=o("from_pretrained()"),tXr=o(" to load the model weights."),aXr=l(),F(tw.$$.fragment),nXr=l(),Qr=a("div"),F(r$.$$.fragment),sXr=l(),F3e=a("p"),lXr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),iXr=l(),wn=a("p"),dXr=o("The model class to instantiate is selected based on the "),T3e=a("code"),cXr=o("model_type"),fXr=o(` property of the config object (either
passed as an argument or loaded from `),M3e=a("code"),mXr=o("pretrained_model_name_or_path"),gXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=a("code"),hXr=o("pretrained_model_name_or_path"),pXr=o(":"),uXr=l(),Re=a("ul"),aw=a("li"),C3e=a("strong"),_Xr=o("albert"),bXr=o(" \u2014 "),nee=a("a"),vXr=o("FlaxAlbertForQuestionAnswering"),FXr=o(" (ALBERT model)"),TXr=l(),nw=a("li"),w3e=a("strong"),MXr=o("bart"),EXr=o(" \u2014 "),see=a("a"),CXr=o("FlaxBartForQuestionAnswering"),wXr=o(" (BART model)"),AXr=l(),sw=a("li"),A3e=a("strong"),LXr=o("bert"),yXr=o(" \u2014 "),lee=a("a"),xXr=o("FlaxBertForQuestionAnswering"),$Xr=o(" (BERT model)"),kXr=l(),lw=a("li"),L3e=a("strong"),SXr=o("big_bird"),RXr=o(" \u2014 "),iee=a("a"),PXr=o("FlaxBigBirdForQuestionAnswering"),BXr=o(" (BigBird model)"),IXr=l(),iw=a("li"),y3e=a("strong"),NXr=o("distilbert"),qXr=o(" \u2014 "),dee=a("a"),jXr=o("FlaxDistilBertForQuestionAnswering"),DXr=o(" (DistilBERT model)"),GXr=l(),dw=a("li"),x3e=a("strong"),OXr=o("electra"),VXr=o(" \u2014 "),cee=a("a"),XXr=o("FlaxElectraForQuestionAnswering"),zXr=o(" (ELECTRA model)"),WXr=l(),cw=a("li"),$3e=a("strong"),QXr=o("mbart"),HXr=o(" \u2014 "),fee=a("a"),UXr=o("FlaxMBartForQuestionAnswering"),JXr=o(" (mBART model)"),YXr=l(),fw=a("li"),k3e=a("strong"),KXr=o("roberta"),ZXr=o(" \u2014 "),mee=a("a"),ezr=o("FlaxRobertaForQuestionAnswering"),ozr=o(" (RoBERTa model)"),rzr=l(),mw=a("li"),S3e=a("strong"),tzr=o("roformer"),azr=o(" \u2014 "),gee=a("a"),nzr=o("FlaxRoFormerForQuestionAnswering"),szr=o(" (RoFormer model)"),lzr=l(),gw=a("li"),R3e=a("strong"),izr=o("xlm-roberta"),dzr=o(" \u2014 "),hee=a("a"),czr=o("FlaxXLMRobertaForQuestionAnswering"),fzr=o(" (XLM-RoBERTa model)"),mzr=l(),F(hw.$$.fragment),QOe=l(),cf=a("h2"),pw=a("a"),P3e=a("span"),F(t$.$$.fragment),gzr=l(),B3e=a("span"),hzr=o("FlaxAutoModelForTokenClassification"),HOe=l(),Fr=a("div"),F(a$.$$.fragment),pzr=l(),ff=a("p"),uzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pee=a("a"),_zr=o("from_pretrained()"),bzr=o(" class method or the "),uee=a("a"),vzr=o("from_config()"),Fzr=o(` class
method.`),Tzr=l(),n$=a("p"),Mzr=o("This class cannot be instantiated directly using "),I3e=a("code"),Ezr=o("__init__()"),Czr=o(" (throws an error)."),wzr=l(),Kt=a("div"),F(s$.$$.fragment),Azr=l(),N3e=a("p"),Lzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),yzr=l(),mf=a("p"),xzr=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),$zr=o("not"),kzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=a("a"),Szr=o("from_pretrained()"),Rzr=o(" to load the model weights."),Pzr=l(),F(uw.$$.fragment),Bzr=l(),Hr=a("div"),F(l$.$$.fragment),Izr=l(),j3e=a("p"),Nzr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),qzr=l(),An=a("p"),jzr=o("The model class to instantiate is selected based on the "),D3e=a("code"),Dzr=o("model_type"),Gzr=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),Ozr=o("pretrained_model_name_or_path"),Vzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),Xzr=o("pretrained_model_name_or_path"),zzr=o(":"),Wzr=l(),Ve=a("ul"),_w=a("li"),V3e=a("strong"),Qzr=o("albert"),Hzr=o(" \u2014 "),bee=a("a"),Uzr=o("FlaxAlbertForTokenClassification"),Jzr=o(" (ALBERT model)"),Yzr=l(),bw=a("li"),X3e=a("strong"),Kzr=o("bert"),Zzr=o(" \u2014 "),vee=a("a"),eWr=o("FlaxBertForTokenClassification"),oWr=o(" (BERT model)"),rWr=l(),vw=a("li"),z3e=a("strong"),tWr=o("big_bird"),aWr=o(" \u2014 "),Fee=a("a"),nWr=o("FlaxBigBirdForTokenClassification"),sWr=o(" (BigBird model)"),lWr=l(),Fw=a("li"),W3e=a("strong"),iWr=o("distilbert"),dWr=o(" \u2014 "),Tee=a("a"),cWr=o("FlaxDistilBertForTokenClassification"),fWr=o(" (DistilBERT model)"),mWr=l(),Tw=a("li"),Q3e=a("strong"),gWr=o("electra"),hWr=o(" \u2014 "),Mee=a("a"),pWr=o("FlaxElectraForTokenClassification"),uWr=o(" (ELECTRA model)"),_Wr=l(),Mw=a("li"),H3e=a("strong"),bWr=o("roberta"),vWr=o(" \u2014 "),Eee=a("a"),FWr=o("FlaxRobertaForTokenClassification"),TWr=o(" (RoBERTa model)"),MWr=l(),Ew=a("li"),U3e=a("strong"),EWr=o("roformer"),CWr=o(" \u2014 "),Cee=a("a"),wWr=o("FlaxRoFormerForTokenClassification"),AWr=o(" (RoFormer model)"),LWr=l(),Cw=a("li"),J3e=a("strong"),yWr=o("xlm-roberta"),xWr=o(" \u2014 "),wee=a("a"),$Wr=o("FlaxXLMRobertaForTokenClassification"),kWr=o(" (XLM-RoBERTa model)"),SWr=l(),F(ww.$$.fragment),UOe=l(),gf=a("h2"),Aw=a("a"),Y3e=a("span"),F(i$.$$.fragment),RWr=l(),K3e=a("span"),PWr=o("FlaxAutoModelForMultipleChoice"),JOe=l(),Tr=a("div"),F(d$.$$.fragment),BWr=l(),hf=a("p"),IWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=a("a"),NWr=o("from_pretrained()"),qWr=o(" class method or the "),Lee=a("a"),jWr=o("from_config()"),DWr=o(` class
method.`),GWr=l(),c$=a("p"),OWr=o("This class cannot be instantiated directly using "),Z3e=a("code"),VWr=o("__init__()"),XWr=o(" (throws an error)."),zWr=l(),Zt=a("div"),F(f$.$$.fragment),WWr=l(),e0e=a("p"),QWr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HWr=l(),pf=a("p"),UWr=o(`Note:
Loading a model from its configuration file does `),o0e=a("strong"),JWr=o("not"),YWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),KWr=o("from_pretrained()"),ZWr=o(" to load the model weights."),eQr=l(),F(Lw.$$.fragment),oQr=l(),Ur=a("div"),F(m$.$$.fragment),rQr=l(),r0e=a("p"),tQr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),aQr=l(),Ln=a("p"),nQr=o("The model class to instantiate is selected based on the "),t0e=a("code"),sQr=o("model_type"),lQr=o(` property of the config object (either
passed as an argument or loaded from `),a0e=a("code"),iQr=o("pretrained_model_name_or_path"),dQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=a("code"),cQr=o("pretrained_model_name_or_path"),fQr=o(":"),mQr=l(),Xe=a("ul"),yw=a("li"),s0e=a("strong"),gQr=o("albert"),hQr=o(" \u2014 "),xee=a("a"),pQr=o("FlaxAlbertForMultipleChoice"),uQr=o(" (ALBERT model)"),_Qr=l(),xw=a("li"),l0e=a("strong"),bQr=o("bert"),vQr=o(" \u2014 "),$ee=a("a"),FQr=o("FlaxBertForMultipleChoice"),TQr=o(" (BERT model)"),MQr=l(),$w=a("li"),i0e=a("strong"),EQr=o("big_bird"),CQr=o(" \u2014 "),kee=a("a"),wQr=o("FlaxBigBirdForMultipleChoice"),AQr=o(" (BigBird model)"),LQr=l(),kw=a("li"),d0e=a("strong"),yQr=o("distilbert"),xQr=o(" \u2014 "),See=a("a"),$Qr=o("FlaxDistilBertForMultipleChoice"),kQr=o(" (DistilBERT model)"),SQr=l(),Sw=a("li"),c0e=a("strong"),RQr=o("electra"),PQr=o(" \u2014 "),Ree=a("a"),BQr=o("FlaxElectraForMultipleChoice"),IQr=o(" (ELECTRA model)"),NQr=l(),Rw=a("li"),f0e=a("strong"),qQr=o("roberta"),jQr=o(" \u2014 "),Pee=a("a"),DQr=o("FlaxRobertaForMultipleChoice"),GQr=o(" (RoBERTa model)"),OQr=l(),Pw=a("li"),m0e=a("strong"),VQr=o("roformer"),XQr=o(" \u2014 "),Bee=a("a"),zQr=o("FlaxRoFormerForMultipleChoice"),WQr=o(" (RoFormer model)"),QQr=l(),Bw=a("li"),g0e=a("strong"),HQr=o("xlm-roberta"),UQr=o(" \u2014 "),Iee=a("a"),JQr=o("FlaxXLMRobertaForMultipleChoice"),YQr=o(" (XLM-RoBERTa model)"),KQr=l(),F(Iw.$$.fragment),YOe=l(),uf=a("h2"),Nw=a("a"),h0e=a("span"),F(g$.$$.fragment),ZQr=l(),p0e=a("span"),eHr=o("FlaxAutoModelForNextSentencePrediction"),KOe=l(),Mr=a("div"),F(h$.$$.fragment),oHr=l(),_f=a("p"),rHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nee=a("a"),tHr=o("from_pretrained()"),aHr=o(" class method or the "),qee=a("a"),nHr=o("from_config()"),sHr=o(` class
method.`),lHr=l(),p$=a("p"),iHr=o("This class cannot be instantiated directly using "),u0e=a("code"),dHr=o("__init__()"),cHr=o(" (throws an error)."),fHr=l(),ea=a("div"),F(u$.$$.fragment),mHr=l(),_0e=a("p"),gHr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),hHr=l(),bf=a("p"),pHr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),uHr=o("not"),_Hr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),bHr=o("from_pretrained()"),vHr=o(" to load the model weights."),FHr=l(),F(qw.$$.fragment),THr=l(),Jr=a("div"),F(_$.$$.fragment),MHr=l(),v0e=a("p"),EHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),CHr=l(),yn=a("p"),wHr=o("The model class to instantiate is selected based on the "),F0e=a("code"),AHr=o("model_type"),LHr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),yHr=o("pretrained_model_name_or_path"),xHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),$Hr=o("pretrained_model_name_or_path"),kHr=o(":"),SHr=l(),E0e=a("ul"),jw=a("li"),C0e=a("strong"),RHr=o("bert"),PHr=o(" \u2014 "),Dee=a("a"),BHr=o("FlaxBertForNextSentencePrediction"),IHr=o(" (BERT model)"),NHr=l(),F(Dw.$$.fragment),ZOe=l(),vf=a("h2"),Gw=a("a"),w0e=a("span"),F(b$.$$.fragment),qHr=l(),A0e=a("span"),jHr=o("FlaxAutoModelForImageClassification"),eVe=l(),Er=a("div"),F(v$.$$.fragment),DHr=l(),Ff=a("p"),GHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gee=a("a"),OHr=o("from_pretrained()"),VHr=o(" class method or the "),Oee=a("a"),XHr=o("from_config()"),zHr=o(` class
method.`),WHr=l(),F$=a("p"),QHr=o("This class cannot be instantiated directly using "),L0e=a("code"),HHr=o("__init__()"),UHr=o(" (throws an error)."),JHr=l(),oa=a("div"),F(T$.$$.fragment),YHr=l(),y0e=a("p"),KHr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ZHr=l(),Tf=a("p"),eUr=o(`Note:
Loading a model from its configuration file does `),x0e=a("strong"),oUr=o("not"),rUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=a("a"),tUr=o("from_pretrained()"),aUr=o(" to load the model weights."),nUr=l(),F(Ow.$$.fragment),sUr=l(),Yr=a("div"),F(M$.$$.fragment),lUr=l(),$0e=a("p"),iUr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),dUr=l(),xn=a("p"),cUr=o("The model class to instantiate is selected based on the "),k0e=a("code"),fUr=o("model_type"),mUr=o(` property of the config object (either
passed as an argument or loaded from `),S0e=a("code"),gUr=o("pretrained_model_name_or_path"),hUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=a("code"),pUr=o("pretrained_model_name_or_path"),uUr=o(":"),_Ur=l(),E$=a("ul"),Vw=a("li"),P0e=a("strong"),bUr=o("beit"),vUr=o(" \u2014 "),Xee=a("a"),FUr=o("FlaxBeitForImageClassification"),TUr=o(" (BEiT model)"),MUr=l(),Xw=a("li"),B0e=a("strong"),EUr=o("vit"),CUr=o(" \u2014 "),zee=a("a"),wUr=o("FlaxViTForImageClassification"),AUr=o(" (ViT model)"),LUr=l(),F(zw.$$.fragment),oVe=l(),Mf=a("h2"),Ww=a("a"),I0e=a("span"),F(C$.$$.fragment),yUr=l(),N0e=a("span"),xUr=o("FlaxAutoModelForVision2Seq"),rVe=l(),Cr=a("div"),F(w$.$$.fragment),$Ur=l(),Ef=a("p"),kUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wee=a("a"),SUr=o("from_pretrained()"),RUr=o(" class method or the "),Qee=a("a"),PUr=o("from_config()"),BUr=o(` class
method.`),IUr=l(),A$=a("p"),NUr=o("This class cannot be instantiated directly using "),q0e=a("code"),qUr=o("__init__()"),jUr=o(" (throws an error)."),DUr=l(),ra=a("div"),F(L$.$$.fragment),GUr=l(),j0e=a("p"),OUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),VUr=l(),Cf=a("p"),XUr=o(`Note:
Loading a model from its configuration file does `),D0e=a("strong"),zUr=o("not"),WUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),QUr=o("from_pretrained()"),HUr=o(" to load the model weights."),UUr=l(),F(Qw.$$.fragment),JUr=l(),Kr=a("div"),F(y$.$$.fragment),YUr=l(),G0e=a("p"),KUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ZUr=l(),$n=a("p"),eJr=o("The model class to instantiate is selected based on the "),O0e=a("code"),oJr=o("model_type"),rJr=o(` property of the config object (either
passed as an argument or loaded from `),V0e=a("code"),tJr=o("pretrained_model_name_or_path"),aJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=a("code"),nJr=o("pretrained_model_name_or_path"),sJr=o(":"),lJr=l(),z0e=a("ul"),Hw=a("li"),W0e=a("strong"),iJr=o("vision-encoder-decoder"),dJr=o(" \u2014 "),Uee=a("a"),cJr=o("FlaxVisionEncoderDecoderModel"),fJr=o(" (Vision Encoder decoder model)"),mJr=l(),F(Uw.$$.fragment),this.h()},l(f){const _=uqt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var x$=s(p);m=n(x$,"A",{id:!0,class:!0,href:!0});var Q0e=s(m);u=n(Q0e,"SPAN",{});var H0e=s(u);T(d.$$.fragment,H0e),H0e.forEach(t),Q0e.forEach(t),h=i(x$),Eo=n(x$,"SPAN",{});var U0e=s(Eo);Ti=r(U0e,"Auto Classes"),U0e.forEach(t),x$.forEach(t),yf=i(f),nt=n(f,"P",{});var $$=s(nt);Mi=r($$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Ei=n($$,"CODE",{});var J0e=s(Ei);pL=r(J0e,"from_pretrained()"),J0e.forEach(t),xf=r($$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),$$.forEach(t),Oe=i(f),We=n(f,"P",{});var kn=s(We);Ci=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var Y0e=s(Sn);uL=r(Y0e,"AutoConfig"),Y0e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var K0e=s(Pn);_L=r(K0e,"AutoModel"),K0e.forEach(t),wi=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var Z0e=s(Bn);bL=r(Z0e,"AutoTokenizer"),Z0e.forEach(t),Ai=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),$f=i(f),T(xa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var k$=s(Ae);zk=r(k$,"will create a model that is an instance of "),Li=n(k$,"A",{href:!0});var ewe=s(Li);Wk=r(ewe,"BertModel"),ewe.forEach(t),Qk=r(k$,"."),k$.forEach(t),Co=i(f),$a=n(f,"P",{});var S$=s($a);Hk=r(S$,"There is one class of "),kf=n(S$,"CODE",{});var owe=s(kf);Uk=r(owe,"AutoModel"),owe.forEach(t),gze=r(S$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),S$.forEach(t),KDe=i(f),yi=n(f,"H2",{class:!0});var R$=s(yi);Sf=n(R$,"A",{id:!0,class:!0,href:!0});var rwe=s(Sf);Xre=n(rwe,"SPAN",{});var twe=s(Xre);T(vL.$$.fragment,twe),twe.forEach(t),rwe.forEach(t),hze=i(R$),zre=n(R$,"SPAN",{});var awe=s(zre);pze=r(awe,"Extending the Auto Classes"),awe.forEach(t),R$.forEach(t),ZDe=i(f),In=n(f,"P",{});var wf=s(In);uze=r(wf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Wre=n(wf,"CODE",{});var nwe=s(Wre);_ze=r(nwe,"NewModel"),nwe.forEach(t),bze=r(wf,", make sure you have a "),Qre=n(wf,"CODE",{});var swe=s(Qre);vze=r(swe,"NewModelConfig"),swe.forEach(t),Fze=r(wf,` then you can add those to the auto
classes like this:`),wf.forEach(t),eGe=i(f),T(FL.$$.fragment,f),oGe=i(f),Jk=n(f,"P",{});var lwe=s(Jk);Tze=r(lwe,"You will then be able to use the auto classes like you would usually do!"),lwe.forEach(t),rGe=i(f),T(Rf.$$.fragment,f),tGe=i(f),xi=n(f,"H2",{class:!0});var P$=s(xi);Pf=n(P$,"A",{id:!0,class:!0,href:!0});var iwe=s(Pf);Hre=n(iwe,"SPAN",{});var dwe=s(Hre);T(TL.$$.fragment,dwe),dwe.forEach(t),iwe.forEach(t),Mze=i(P$),Ure=n(P$,"SPAN",{});var cwe=s(Ure);Eze=r(cwe,"AutoConfig"),cwe.forEach(t),P$.forEach(t),aGe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(ML.$$.fragment,tt),Cze=i(tt),EL=n(tt,"P",{});var B$=s(EL);wze=r(B$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Yk=n(B$,"A",{href:!0});var fwe=s(Yk);Aze=r(fwe,"from_pretrained()"),fwe.forEach(t),Lze=r(B$," class method."),B$.forEach(t),yze=i(tt),CL=n(tt,"P",{});var I$=s(CL);xze=r(I$,"This class cannot be instantiated directly using "),Jre=n(I$,"CODE",{});var mwe=s(Jre);$ze=r(mwe,"__init__()"),mwe.forEach(t),kze=r(I$," (throws an error)."),I$.forEach(t),Sze=i(tt),wr=n(tt,"DIV",{class:!0});var at=s(wr);T(wL.$$.fragment,at),Rze=i(at),Yre=n(at,"P",{});var gwe=s(Yre);Pze=r(gwe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),gwe.forEach(t),Bze=i(at),$i=n(at,"P",{});var Af=s($i);Ize=r(Af,"The configuration class to instantiate is selected based on the "),Kre=n(Af,"CODE",{});var hwe=s(Kre);Nze=r(hwe,"model_type"),hwe.forEach(t),qze=r(Af,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Zre=n(Af,"CODE",{});var pwe=s(Zre);jze=r(pwe,"pretrained_model_name_or_path"),pwe.forEach(t),Dze=r(Af,":"),Af.forEach(t),Gze=i(at),A=n(at,"UL",{});var L=s(A);Bf=n(L,"LI",{});var Jw=s(Bf);ete=n(Jw,"STRONG",{});var uwe=s(ete);Oze=r(uwe,"albert"),uwe.forEach(t),Vze=r(Jw," \u2014 "),Kk=n(Jw,"A",{href:!0});var _we=s(Kk);Xze=r(_we,"AlbertConfig"),_we.forEach(t),zze=r(Jw," (ALBERT model)"),Jw.forEach(t),Wze=i(L),If=n(L,"LI",{});var Yw=s(If);ote=n(Yw,"STRONG",{});var bwe=s(ote);Qze=r(bwe,"bart"),bwe.forEach(t),Hze=r(Yw," \u2014 "),Zk=n(Yw,"A",{href:!0});var vwe=s(Zk);Uze=r(vwe,"BartConfig"),vwe.forEach(t),Jze=r(Yw," (BART model)"),Yw.forEach(t),Yze=i(L),Nf=n(L,"LI",{});var Kw=s(Nf);rte=n(Kw,"STRONG",{});var Fwe=s(rte);Kze=r(Fwe,"beit"),Fwe.forEach(t),Zze=r(Kw," \u2014 "),eS=n(Kw,"A",{href:!0});var Twe=s(eS);eWe=r(Twe,"BeitConfig"),Twe.forEach(t),oWe=r(Kw," (BEiT model)"),Kw.forEach(t),rWe=i(L),qf=n(L,"LI",{});var Zw=s(qf);tte=n(Zw,"STRONG",{});var Mwe=s(tte);tWe=r(Mwe,"bert"),Mwe.forEach(t),aWe=r(Zw," \u2014 "),oS=n(Zw,"A",{href:!0});var Ewe=s(oS);nWe=r(Ewe,"BertConfig"),Ewe.forEach(t),sWe=r(Zw," (BERT model)"),Zw.forEach(t),lWe=i(L),jf=n(L,"LI",{});var eA=s(jf);ate=n(eA,"STRONG",{});var Cwe=s(ate);iWe=r(Cwe,"bert-generation"),Cwe.forEach(t),dWe=r(eA," \u2014 "),rS=n(eA,"A",{href:!0});var wwe=s(rS);cWe=r(wwe,"BertGenerationConfig"),wwe.forEach(t),fWe=r(eA," (Bert Generation model)"),eA.forEach(t),mWe=i(L),Df=n(L,"LI",{});var oA=s(Df);nte=n(oA,"STRONG",{});var Awe=s(nte);gWe=r(Awe,"big_bird"),Awe.forEach(t),hWe=r(oA," \u2014 "),tS=n(oA,"A",{href:!0});var Lwe=s(tS);pWe=r(Lwe,"BigBirdConfig"),Lwe.forEach(t),uWe=r(oA," (BigBird model)"),oA.forEach(t),_We=i(L),Gf=n(L,"LI",{});var rA=s(Gf);ste=n(rA,"STRONG",{});var ywe=s(ste);bWe=r(ywe,"bigbird_pegasus"),ywe.forEach(t),vWe=r(rA," \u2014 "),aS=n(rA,"A",{href:!0});var xwe=s(aS);FWe=r(xwe,"BigBirdPegasusConfig"),xwe.forEach(t),TWe=r(rA," (BigBird-Pegasus model)"),rA.forEach(t),MWe=i(L),Of=n(L,"LI",{});var tA=s(Of);lte=n(tA,"STRONG",{});var $we=s(lte);EWe=r($we,"blenderbot"),$we.forEach(t),CWe=r(tA," \u2014 "),nS=n(tA,"A",{href:!0});var kwe=s(nS);wWe=r(kwe,"BlenderbotConfig"),kwe.forEach(t),AWe=r(tA," (Blenderbot model)"),tA.forEach(t),LWe=i(L),Vf=n(L,"LI",{});var aA=s(Vf);ite=n(aA,"STRONG",{});var Swe=s(ite);yWe=r(Swe,"blenderbot-small"),Swe.forEach(t),xWe=r(aA," \u2014 "),sS=n(aA,"A",{href:!0});var Rwe=s(sS);$We=r(Rwe,"BlenderbotSmallConfig"),Rwe.forEach(t),kWe=r(aA," (BlenderbotSmall model)"),aA.forEach(t),SWe=i(L),Xf=n(L,"LI",{});var nA=s(Xf);dte=n(nA,"STRONG",{});var Pwe=s(dte);RWe=r(Pwe,"bloom"),Pwe.forEach(t),PWe=r(nA," \u2014 "),lS=n(nA,"A",{href:!0});var Bwe=s(lS);BWe=r(Bwe,"BloomConfig"),Bwe.forEach(t),IWe=r(nA," (BLOOM model)"),nA.forEach(t),NWe=i(L),zf=n(L,"LI",{});var sA=s(zf);cte=n(sA,"STRONG",{});var Iwe=s(cte);qWe=r(Iwe,"camembert"),Iwe.forEach(t),jWe=r(sA," \u2014 "),iS=n(sA,"A",{href:!0});var Nwe=s(iS);DWe=r(Nwe,"CamembertConfig"),Nwe.forEach(t),GWe=r(sA," (CamemBERT model)"),sA.forEach(t),OWe=i(L),Wf=n(L,"LI",{});var lA=s(Wf);fte=n(lA,"STRONG",{});var qwe=s(fte);VWe=r(qwe,"canine"),qwe.forEach(t),XWe=r(lA," \u2014 "),dS=n(lA,"A",{href:!0});var jwe=s(dS);zWe=r(jwe,"CanineConfig"),jwe.forEach(t),WWe=r(lA," (CANINE model)"),lA.forEach(t),QWe=i(L),Qf=n(L,"LI",{});var iA=s(Qf);mte=n(iA,"STRONG",{});var Dwe=s(mte);HWe=r(Dwe,"clip"),Dwe.forEach(t),UWe=r(iA," \u2014 "),cS=n(iA,"A",{href:!0});var Gwe=s(cS);JWe=r(Gwe,"CLIPConfig"),Gwe.forEach(t),YWe=r(iA," (CLIP model)"),iA.forEach(t),KWe=i(L),Hf=n(L,"LI",{});var dA=s(Hf);gte=n(dA,"STRONG",{});var Owe=s(gte);ZWe=r(Owe,"convbert"),Owe.forEach(t),eQe=r(dA," \u2014 "),fS=n(dA,"A",{href:!0});var Vwe=s(fS);oQe=r(Vwe,"ConvBertConfig"),Vwe.forEach(t),rQe=r(dA," (ConvBERT model)"),dA.forEach(t),tQe=i(L),Uf=n(L,"LI",{});var cA=s(Uf);hte=n(cA,"STRONG",{});var Xwe=s(hte);aQe=r(Xwe,"convnext"),Xwe.forEach(t),nQe=r(cA," \u2014 "),mS=n(cA,"A",{href:!0});var zwe=s(mS);sQe=r(zwe,"ConvNextConfig"),zwe.forEach(t),lQe=r(cA," (ConvNeXT model)"),cA.forEach(t),iQe=i(L),Jf=n(L,"LI",{});var fA=s(Jf);pte=n(fA,"STRONG",{});var Wwe=s(pte);dQe=r(Wwe,"ctrl"),Wwe.forEach(t),cQe=r(fA," \u2014 "),gS=n(fA,"A",{href:!0});var Qwe=s(gS);fQe=r(Qwe,"CTRLConfig"),Qwe.forEach(t),mQe=r(fA," (CTRL model)"),fA.forEach(t),gQe=i(L),Yf=n(L,"LI",{});var mA=s(Yf);ute=n(mA,"STRONG",{});var Hwe=s(ute);hQe=r(Hwe,"cvt"),Hwe.forEach(t),pQe=r(mA," \u2014 "),hS=n(mA,"A",{href:!0});var Uwe=s(hS);uQe=r(Uwe,"CvtConfig"),Uwe.forEach(t),_Qe=r(mA," (CvT model)"),mA.forEach(t),bQe=i(L),Kf=n(L,"LI",{});var gA=s(Kf);_te=n(gA,"STRONG",{});var Jwe=s(_te);vQe=r(Jwe,"data2vec-audio"),Jwe.forEach(t),FQe=r(gA," \u2014 "),pS=n(gA,"A",{href:!0});var Ywe=s(pS);TQe=r(Ywe,"Data2VecAudioConfig"),Ywe.forEach(t),MQe=r(gA," (Data2VecAudio model)"),gA.forEach(t),EQe=i(L),Zf=n(L,"LI",{});var hA=s(Zf);bte=n(hA,"STRONG",{});var Kwe=s(bte);CQe=r(Kwe,"data2vec-text"),Kwe.forEach(t),wQe=r(hA," \u2014 "),uS=n(hA,"A",{href:!0});var Zwe=s(uS);AQe=r(Zwe,"Data2VecTextConfig"),Zwe.forEach(t),LQe=r(hA," (Data2VecText model)"),hA.forEach(t),yQe=i(L),em=n(L,"LI",{});var pA=s(em);vte=n(pA,"STRONG",{});var eAe=s(vte);xQe=r(eAe,"data2vec-vision"),eAe.forEach(t),$Qe=r(pA," \u2014 "),_S=n(pA,"A",{href:!0});var oAe=s(_S);kQe=r(oAe,"Data2VecVisionConfig"),oAe.forEach(t),SQe=r(pA," (Data2VecVision model)"),pA.forEach(t),RQe=i(L),om=n(L,"LI",{});var uA=s(om);Fte=n(uA,"STRONG",{});var rAe=s(Fte);PQe=r(rAe,"deberta"),rAe.forEach(t),BQe=r(uA," \u2014 "),bS=n(uA,"A",{href:!0});var tAe=s(bS);IQe=r(tAe,"DebertaConfig"),tAe.forEach(t),NQe=r(uA," (DeBERTa model)"),uA.forEach(t),qQe=i(L),rm=n(L,"LI",{});var _A=s(rm);Tte=n(_A,"STRONG",{});var aAe=s(Tte);jQe=r(aAe,"deberta-v2"),aAe.forEach(t),DQe=r(_A," \u2014 "),vS=n(_A,"A",{href:!0});var nAe=s(vS);GQe=r(nAe,"DebertaV2Config"),nAe.forEach(t),OQe=r(_A," (DeBERTa-v2 model)"),_A.forEach(t),VQe=i(L),tm=n(L,"LI",{});var bA=s(tm);Mte=n(bA,"STRONG",{});var sAe=s(Mte);XQe=r(sAe,"decision_transformer"),sAe.forEach(t),zQe=r(bA," \u2014 "),FS=n(bA,"A",{href:!0});var lAe=s(FS);WQe=r(lAe,"DecisionTransformerConfig"),lAe.forEach(t),QQe=r(bA," (Decision Transformer model)"),bA.forEach(t),HQe=i(L),am=n(L,"LI",{});var vA=s(am);Ete=n(vA,"STRONG",{});var hJr=s(Ete);UQe=r(hJr,"deit"),hJr.forEach(t),JQe=r(vA," \u2014 "),TS=n(vA,"A",{href:!0});var pJr=s(TS);YQe=r(pJr,"DeiTConfig"),pJr.forEach(t),KQe=r(vA," (DeiT model)"),vA.forEach(t),ZQe=i(L),nm=n(L,"LI",{});var iAe=s(nm);Cte=n(iAe,"STRONG",{});var uJr=s(Cte);eHe=r(uJr,"detr"),uJr.forEach(t),oHe=r(iAe," \u2014 "),MS=n(iAe,"A",{href:!0});var _Jr=s(MS);rHe=r(_Jr,"DetrConfig"),_Jr.forEach(t),tHe=r(iAe," (DETR model)"),iAe.forEach(t),aHe=i(L),sm=n(L,"LI",{});var dAe=s(sm);wte=n(dAe,"STRONG",{});var bJr=s(wte);nHe=r(bJr,"distilbert"),bJr.forEach(t),sHe=r(dAe," \u2014 "),ES=n(dAe,"A",{href:!0});var vJr=s(ES);lHe=r(vJr,"DistilBertConfig"),vJr.forEach(t),iHe=r(dAe," (DistilBERT model)"),dAe.forEach(t),dHe=i(L),lm=n(L,"LI",{});var cAe=s(lm);Ate=n(cAe,"STRONG",{});var FJr=s(Ate);cHe=r(FJr,"dpr"),FJr.forEach(t),fHe=r(cAe," \u2014 "),CS=n(cAe,"A",{href:!0});var TJr=s(CS);mHe=r(TJr,"DPRConfig"),TJr.forEach(t),gHe=r(cAe," (DPR model)"),cAe.forEach(t),hHe=i(L),im=n(L,"LI",{});var fAe=s(im);Lte=n(fAe,"STRONG",{});var MJr=s(Lte);pHe=r(MJr,"dpt"),MJr.forEach(t),uHe=r(fAe," \u2014 "),wS=n(fAe,"A",{href:!0});var EJr=s(wS);_He=r(EJr,"DPTConfig"),EJr.forEach(t),bHe=r(fAe," (DPT model)"),fAe.forEach(t),vHe=i(L),dm=n(L,"LI",{});var mAe=s(dm);yte=n(mAe,"STRONG",{});var CJr=s(yte);FHe=r(CJr,"electra"),CJr.forEach(t),THe=r(mAe," \u2014 "),AS=n(mAe,"A",{href:!0});var wJr=s(AS);MHe=r(wJr,"ElectraConfig"),wJr.forEach(t),EHe=r(mAe," (ELECTRA model)"),mAe.forEach(t),CHe=i(L),cm=n(L,"LI",{});var gAe=s(cm);xte=n(gAe,"STRONG",{});var AJr=s(xte);wHe=r(AJr,"encoder-decoder"),AJr.forEach(t),AHe=r(gAe," \u2014 "),LS=n(gAe,"A",{href:!0});var LJr=s(LS);LHe=r(LJr,"EncoderDecoderConfig"),LJr.forEach(t),yHe=r(gAe," (Encoder decoder model)"),gAe.forEach(t),xHe=i(L),fm=n(L,"LI",{});var hAe=s(fm);$te=n(hAe,"STRONG",{});var yJr=s($te);$He=r(yJr,"flaubert"),yJr.forEach(t),kHe=r(hAe," \u2014 "),yS=n(hAe,"A",{href:!0});var xJr=s(yS);SHe=r(xJr,"FlaubertConfig"),xJr.forEach(t),RHe=r(hAe," (FlauBERT model)"),hAe.forEach(t),PHe=i(L),mm=n(L,"LI",{});var pAe=s(mm);kte=n(pAe,"STRONG",{});var $Jr=s(kte);BHe=r($Jr,"flava"),$Jr.forEach(t),IHe=r(pAe," \u2014 "),xS=n(pAe,"A",{href:!0});var kJr=s(xS);NHe=r(kJr,"FlavaConfig"),kJr.forEach(t),qHe=r(pAe," (FLAVA model)"),pAe.forEach(t),jHe=i(L),gm=n(L,"LI",{});var uAe=s(gm);Ste=n(uAe,"STRONG",{});var SJr=s(Ste);DHe=r(SJr,"fnet"),SJr.forEach(t),GHe=r(uAe," \u2014 "),$S=n(uAe,"A",{href:!0});var RJr=s($S);OHe=r(RJr,"FNetConfig"),RJr.forEach(t),VHe=r(uAe," (FNet model)"),uAe.forEach(t),XHe=i(L),hm=n(L,"LI",{});var _Ae=s(hm);Rte=n(_Ae,"STRONG",{});var PJr=s(Rte);zHe=r(PJr,"fsmt"),PJr.forEach(t),WHe=r(_Ae," \u2014 "),kS=n(_Ae,"A",{href:!0});var BJr=s(kS);QHe=r(BJr,"FSMTConfig"),BJr.forEach(t),HHe=r(_Ae," (FairSeq Machine-Translation model)"),_Ae.forEach(t),UHe=i(L),pm=n(L,"LI",{});var bAe=s(pm);Pte=n(bAe,"STRONG",{});var IJr=s(Pte);JHe=r(IJr,"funnel"),IJr.forEach(t),YHe=r(bAe," \u2014 "),SS=n(bAe,"A",{href:!0});var NJr=s(SS);KHe=r(NJr,"FunnelConfig"),NJr.forEach(t),ZHe=r(bAe," (Funnel Transformer model)"),bAe.forEach(t),eUe=i(L),um=n(L,"LI",{});var vAe=s(um);Bte=n(vAe,"STRONG",{});var qJr=s(Bte);oUe=r(qJr,"glpn"),qJr.forEach(t),rUe=r(vAe," \u2014 "),RS=n(vAe,"A",{href:!0});var jJr=s(RS);tUe=r(jJr,"GLPNConfig"),jJr.forEach(t),aUe=r(vAe," (GLPN model)"),vAe.forEach(t),nUe=i(L),_m=n(L,"LI",{});var FAe=s(_m);Ite=n(FAe,"STRONG",{});var DJr=s(Ite);sUe=r(DJr,"gpt2"),DJr.forEach(t),lUe=r(FAe," \u2014 "),PS=n(FAe,"A",{href:!0});var GJr=s(PS);iUe=r(GJr,"GPT2Config"),GJr.forEach(t),dUe=r(FAe," (OpenAI GPT-2 model)"),FAe.forEach(t),cUe=i(L),bm=n(L,"LI",{});var TAe=s(bm);Nte=n(TAe,"STRONG",{});var OJr=s(Nte);fUe=r(OJr,"gpt_neo"),OJr.forEach(t),mUe=r(TAe," \u2014 "),BS=n(TAe,"A",{href:!0});var VJr=s(BS);gUe=r(VJr,"GPTNeoConfig"),VJr.forEach(t),hUe=r(TAe," (GPT Neo model)"),TAe.forEach(t),pUe=i(L),vm=n(L,"LI",{});var MAe=s(vm);qte=n(MAe,"STRONG",{});var XJr=s(qte);uUe=r(XJr,"gpt_neox"),XJr.forEach(t),_Ue=r(MAe," \u2014 "),IS=n(MAe,"A",{href:!0});var zJr=s(IS);bUe=r(zJr,"GPTNeoXConfig"),zJr.forEach(t),vUe=r(MAe," (GPT NeoX model)"),MAe.forEach(t),FUe=i(L),Fm=n(L,"LI",{});var EAe=s(Fm);jte=n(EAe,"STRONG",{});var WJr=s(jte);TUe=r(WJr,"gptj"),WJr.forEach(t),MUe=r(EAe," \u2014 "),NS=n(EAe,"A",{href:!0});var QJr=s(NS);EUe=r(QJr,"GPTJConfig"),QJr.forEach(t),CUe=r(EAe," (GPT-J model)"),EAe.forEach(t),wUe=i(L),Tm=n(L,"LI",{});var CAe=s(Tm);Dte=n(CAe,"STRONG",{});var HJr=s(Dte);AUe=r(HJr,"hubert"),HJr.forEach(t),LUe=r(CAe," \u2014 "),qS=n(CAe,"A",{href:!0});var UJr=s(qS);yUe=r(UJr,"HubertConfig"),UJr.forEach(t),xUe=r(CAe," (Hubert model)"),CAe.forEach(t),$Ue=i(L),Mm=n(L,"LI",{});var wAe=s(Mm);Gte=n(wAe,"STRONG",{});var JJr=s(Gte);kUe=r(JJr,"ibert"),JJr.forEach(t),SUe=r(wAe," \u2014 "),jS=n(wAe,"A",{href:!0});var YJr=s(jS);RUe=r(YJr,"IBertConfig"),YJr.forEach(t),PUe=r(wAe," (I-BERT model)"),wAe.forEach(t),BUe=i(L),Em=n(L,"LI",{});var AAe=s(Em);Ote=n(AAe,"STRONG",{});var KJr=s(Ote);IUe=r(KJr,"imagegpt"),KJr.forEach(t),NUe=r(AAe," \u2014 "),DS=n(AAe,"A",{href:!0});var ZJr=s(DS);qUe=r(ZJr,"ImageGPTConfig"),ZJr.forEach(t),jUe=r(AAe," (ImageGPT model)"),AAe.forEach(t),DUe=i(L),Cm=n(L,"LI",{});var LAe=s(Cm);Vte=n(LAe,"STRONG",{});var eYr=s(Vte);GUe=r(eYr,"layoutlm"),eYr.forEach(t),OUe=r(LAe," \u2014 "),GS=n(LAe,"A",{href:!0});var oYr=s(GS);VUe=r(oYr,"LayoutLMConfig"),oYr.forEach(t),XUe=r(LAe," (LayoutLM model)"),LAe.forEach(t),zUe=i(L),wm=n(L,"LI",{});var yAe=s(wm);Xte=n(yAe,"STRONG",{});var rYr=s(Xte);WUe=r(rYr,"layoutlmv2"),rYr.forEach(t),QUe=r(yAe," \u2014 "),OS=n(yAe,"A",{href:!0});var tYr=s(OS);HUe=r(tYr,"LayoutLMv2Config"),tYr.forEach(t),UUe=r(yAe," (LayoutLMv2 model)"),yAe.forEach(t),JUe=i(L),Am=n(L,"LI",{});var xAe=s(Am);zte=n(xAe,"STRONG",{});var aYr=s(zte);YUe=r(aYr,"layoutlmv3"),aYr.forEach(t),KUe=r(xAe," \u2014 "),VS=n(xAe,"A",{href:!0});var nYr=s(VS);ZUe=r(nYr,"LayoutLMv3Config"),nYr.forEach(t),eJe=r(xAe," (LayoutLMv3 model)"),xAe.forEach(t),oJe=i(L),Lm=n(L,"LI",{});var $Ae=s(Lm);Wte=n($Ae,"STRONG",{});var sYr=s(Wte);rJe=r(sYr,"led"),sYr.forEach(t),tJe=r($Ae," \u2014 "),XS=n($Ae,"A",{href:!0});var lYr=s(XS);aJe=r(lYr,"LEDConfig"),lYr.forEach(t),nJe=r($Ae," (LED model)"),$Ae.forEach(t),sJe=i(L),ym=n(L,"LI",{});var kAe=s(ym);Qte=n(kAe,"STRONG",{});var iYr=s(Qte);lJe=r(iYr,"levit"),iYr.forEach(t),iJe=r(kAe," \u2014 "),zS=n(kAe,"A",{href:!0});var dYr=s(zS);dJe=r(dYr,"LevitConfig"),dYr.forEach(t),cJe=r(kAe," (LeViT model)"),kAe.forEach(t),fJe=i(L),xm=n(L,"LI",{});var SAe=s(xm);Hte=n(SAe,"STRONG",{});var cYr=s(Hte);mJe=r(cYr,"longformer"),cYr.forEach(t),gJe=r(SAe," \u2014 "),WS=n(SAe,"A",{href:!0});var fYr=s(WS);hJe=r(fYr,"LongformerConfig"),fYr.forEach(t),pJe=r(SAe," (Longformer model)"),SAe.forEach(t),uJe=i(L),$m=n(L,"LI",{});var RAe=s($m);Ute=n(RAe,"STRONG",{});var mYr=s(Ute);_Je=r(mYr,"longt5"),mYr.forEach(t),bJe=r(RAe," \u2014 "),QS=n(RAe,"A",{href:!0});var gYr=s(QS);vJe=r(gYr,"LongT5Config"),gYr.forEach(t),FJe=r(RAe," (LongT5 model)"),RAe.forEach(t),TJe=i(L),km=n(L,"LI",{});var PAe=s(km);Jte=n(PAe,"STRONG",{});var hYr=s(Jte);MJe=r(hYr,"luke"),hYr.forEach(t),EJe=r(PAe," \u2014 "),HS=n(PAe,"A",{href:!0});var pYr=s(HS);CJe=r(pYr,"LukeConfig"),pYr.forEach(t),wJe=r(PAe," (LUKE model)"),PAe.forEach(t),AJe=i(L),Sm=n(L,"LI",{});var BAe=s(Sm);Yte=n(BAe,"STRONG",{});var uYr=s(Yte);LJe=r(uYr,"lxmert"),uYr.forEach(t),yJe=r(BAe," \u2014 "),US=n(BAe,"A",{href:!0});var _Yr=s(US);xJe=r(_Yr,"LxmertConfig"),_Yr.forEach(t),$Je=r(BAe," (LXMERT model)"),BAe.forEach(t),kJe=i(L),Rm=n(L,"LI",{});var IAe=s(Rm);Kte=n(IAe,"STRONG",{});var bYr=s(Kte);SJe=r(bYr,"m2m_100"),bYr.forEach(t),RJe=r(IAe," \u2014 "),JS=n(IAe,"A",{href:!0});var vYr=s(JS);PJe=r(vYr,"M2M100Config"),vYr.forEach(t),BJe=r(IAe," (M2M100 model)"),IAe.forEach(t),IJe=i(L),Pm=n(L,"LI",{});var NAe=s(Pm);Zte=n(NAe,"STRONG",{});var FYr=s(Zte);NJe=r(FYr,"marian"),FYr.forEach(t),qJe=r(NAe," \u2014 "),YS=n(NAe,"A",{href:!0});var TYr=s(YS);jJe=r(TYr,"MarianConfig"),TYr.forEach(t),DJe=r(NAe," (Marian model)"),NAe.forEach(t),GJe=i(L),Bm=n(L,"LI",{});var qAe=s(Bm);eae=n(qAe,"STRONG",{});var MYr=s(eae);OJe=r(MYr,"maskformer"),MYr.forEach(t),VJe=r(qAe," \u2014 "),KS=n(qAe,"A",{href:!0});var EYr=s(KS);XJe=r(EYr,"MaskFormerConfig"),EYr.forEach(t),zJe=r(qAe," (MaskFormer model)"),qAe.forEach(t),WJe=i(L),Im=n(L,"LI",{});var jAe=s(Im);oae=n(jAe,"STRONG",{});var CYr=s(oae);QJe=r(CYr,"mbart"),CYr.forEach(t),HJe=r(jAe," \u2014 "),ZS=n(jAe,"A",{href:!0});var wYr=s(ZS);UJe=r(wYr,"MBartConfig"),wYr.forEach(t),JJe=r(jAe," (mBART model)"),jAe.forEach(t),YJe=i(L),Nm=n(L,"LI",{});var DAe=s(Nm);rae=n(DAe,"STRONG",{});var AYr=s(rae);KJe=r(AYr,"mctct"),AYr.forEach(t),ZJe=r(DAe," \u2014 "),eR=n(DAe,"A",{href:!0});var LYr=s(eR);eYe=r(LYr,"MCTCTConfig"),LYr.forEach(t),oYe=r(DAe," (M-CTC-T model)"),DAe.forEach(t),rYe=i(L),qm=n(L,"LI",{});var GAe=s(qm);tae=n(GAe,"STRONG",{});var yYr=s(tae);tYe=r(yYr,"megatron-bert"),yYr.forEach(t),aYe=r(GAe," \u2014 "),oR=n(GAe,"A",{href:!0});var xYr=s(oR);nYe=r(xYr,"MegatronBertConfig"),xYr.forEach(t),sYe=r(GAe," (Megatron-BERT model)"),GAe.forEach(t),lYe=i(L),jm=n(L,"LI",{});var OAe=s(jm);aae=n(OAe,"STRONG",{});var $Yr=s(aae);iYe=r($Yr,"mobilebert"),$Yr.forEach(t),dYe=r(OAe," \u2014 "),rR=n(OAe,"A",{href:!0});var kYr=s(rR);cYe=r(kYr,"MobileBertConfig"),kYr.forEach(t),fYe=r(OAe," (MobileBERT model)"),OAe.forEach(t),mYe=i(L),Dm=n(L,"LI",{});var VAe=s(Dm);nae=n(VAe,"STRONG",{});var SYr=s(nae);gYe=r(SYr,"mpnet"),SYr.forEach(t),hYe=r(VAe," \u2014 "),tR=n(VAe,"A",{href:!0});var RYr=s(tR);pYe=r(RYr,"MPNetConfig"),RYr.forEach(t),uYe=r(VAe," (MPNet model)"),VAe.forEach(t),_Ye=i(L),Gm=n(L,"LI",{});var XAe=s(Gm);sae=n(XAe,"STRONG",{});var PYr=s(sae);bYe=r(PYr,"mt5"),PYr.forEach(t),vYe=r(XAe," \u2014 "),aR=n(XAe,"A",{href:!0});var BYr=s(aR);FYe=r(BYr,"MT5Config"),BYr.forEach(t),TYe=r(XAe," (MT5 model)"),XAe.forEach(t),MYe=i(L),Om=n(L,"LI",{});var zAe=s(Om);lae=n(zAe,"STRONG",{});var IYr=s(lae);EYe=r(IYr,"nystromformer"),IYr.forEach(t),CYe=r(zAe," \u2014 "),nR=n(zAe,"A",{href:!0});var NYr=s(nR);wYe=r(NYr,"NystromformerConfig"),NYr.forEach(t),AYe=r(zAe," (Nystr\xF6mformer model)"),zAe.forEach(t),LYe=i(L),Vm=n(L,"LI",{});var WAe=s(Vm);iae=n(WAe,"STRONG",{});var qYr=s(iae);yYe=r(qYr,"openai-gpt"),qYr.forEach(t),xYe=r(WAe," \u2014 "),sR=n(WAe,"A",{href:!0});var jYr=s(sR);$Ye=r(jYr,"OpenAIGPTConfig"),jYr.forEach(t),kYe=r(WAe," (OpenAI GPT model)"),WAe.forEach(t),SYe=i(L),Xm=n(L,"LI",{});var QAe=s(Xm);dae=n(QAe,"STRONG",{});var DYr=s(dae);RYe=r(DYr,"opt"),DYr.forEach(t),PYe=r(QAe," \u2014 "),lR=n(QAe,"A",{href:!0});var GYr=s(lR);BYe=r(GYr,"OPTConfig"),GYr.forEach(t),IYe=r(QAe," (OPT model)"),QAe.forEach(t),NYe=i(L),zm=n(L,"LI",{});var HAe=s(zm);cae=n(HAe,"STRONG",{});var OYr=s(cae);qYe=r(OYr,"pegasus"),OYr.forEach(t),jYe=r(HAe," \u2014 "),iR=n(HAe,"A",{href:!0});var VYr=s(iR);DYe=r(VYr,"PegasusConfig"),VYr.forEach(t),GYe=r(HAe," (Pegasus model)"),HAe.forEach(t),OYe=i(L),Wm=n(L,"LI",{});var UAe=s(Wm);fae=n(UAe,"STRONG",{});var XYr=s(fae);VYe=r(XYr,"perceiver"),XYr.forEach(t),XYe=r(UAe," \u2014 "),dR=n(UAe,"A",{href:!0});var zYr=s(dR);zYe=r(zYr,"PerceiverConfig"),zYr.forEach(t),WYe=r(UAe," (Perceiver model)"),UAe.forEach(t),QYe=i(L),Qm=n(L,"LI",{});var JAe=s(Qm);mae=n(JAe,"STRONG",{});var WYr=s(mae);HYe=r(WYr,"plbart"),WYr.forEach(t),UYe=r(JAe," \u2014 "),cR=n(JAe,"A",{href:!0});var QYr=s(cR);JYe=r(QYr,"PLBartConfig"),QYr.forEach(t),YYe=r(JAe," (PLBart model)"),JAe.forEach(t),KYe=i(L),Hm=n(L,"LI",{});var YAe=s(Hm);gae=n(YAe,"STRONG",{});var HYr=s(gae);ZYe=r(HYr,"poolformer"),HYr.forEach(t),eKe=r(YAe," \u2014 "),fR=n(YAe,"A",{href:!0});var UYr=s(fR);oKe=r(UYr,"PoolFormerConfig"),UYr.forEach(t),rKe=r(YAe," (PoolFormer model)"),YAe.forEach(t),tKe=i(L),Um=n(L,"LI",{});var KAe=s(Um);hae=n(KAe,"STRONG",{});var JYr=s(hae);aKe=r(JYr,"prophetnet"),JYr.forEach(t),nKe=r(KAe," \u2014 "),mR=n(KAe,"A",{href:!0});var YYr=s(mR);sKe=r(YYr,"ProphetNetConfig"),YYr.forEach(t),lKe=r(KAe," (ProphetNet model)"),KAe.forEach(t),iKe=i(L),Jm=n(L,"LI",{});var ZAe=s(Jm);pae=n(ZAe,"STRONG",{});var KYr=s(pae);dKe=r(KYr,"qdqbert"),KYr.forEach(t),cKe=r(ZAe," \u2014 "),gR=n(ZAe,"A",{href:!0});var ZYr=s(gR);fKe=r(ZYr,"QDQBertConfig"),ZYr.forEach(t),mKe=r(ZAe," (QDQBert model)"),ZAe.forEach(t),gKe=i(L),Ym=n(L,"LI",{});var e6e=s(Ym);uae=n(e6e,"STRONG",{});var eKr=s(uae);hKe=r(eKr,"rag"),eKr.forEach(t),pKe=r(e6e," \u2014 "),hR=n(e6e,"A",{href:!0});var oKr=s(hR);uKe=r(oKr,"RagConfig"),oKr.forEach(t),_Ke=r(e6e," (RAG model)"),e6e.forEach(t),bKe=i(L),Km=n(L,"LI",{});var o6e=s(Km);_ae=n(o6e,"STRONG",{});var rKr=s(_ae);vKe=r(rKr,"realm"),rKr.forEach(t),FKe=r(o6e," \u2014 "),pR=n(o6e,"A",{href:!0});var tKr=s(pR);TKe=r(tKr,"RealmConfig"),tKr.forEach(t),MKe=r(o6e," (REALM model)"),o6e.forEach(t),EKe=i(L),Zm=n(L,"LI",{});var r6e=s(Zm);bae=n(r6e,"STRONG",{});var aKr=s(bae);CKe=r(aKr,"reformer"),aKr.forEach(t),wKe=r(r6e," \u2014 "),uR=n(r6e,"A",{href:!0});var nKr=s(uR);AKe=r(nKr,"ReformerConfig"),nKr.forEach(t),LKe=r(r6e," (Reformer model)"),r6e.forEach(t),yKe=i(L),eg=n(L,"LI",{});var t6e=s(eg);vae=n(t6e,"STRONG",{});var sKr=s(vae);xKe=r(sKr,"regnet"),sKr.forEach(t),$Ke=r(t6e," \u2014 "),_R=n(t6e,"A",{href:!0});var lKr=s(_R);kKe=r(lKr,"RegNetConfig"),lKr.forEach(t),SKe=r(t6e," (RegNet model)"),t6e.forEach(t),RKe=i(L),og=n(L,"LI",{});var a6e=s(og);Fae=n(a6e,"STRONG",{});var iKr=s(Fae);PKe=r(iKr,"rembert"),iKr.forEach(t),BKe=r(a6e," \u2014 "),bR=n(a6e,"A",{href:!0});var dKr=s(bR);IKe=r(dKr,"RemBertConfig"),dKr.forEach(t),NKe=r(a6e," (RemBERT model)"),a6e.forEach(t),qKe=i(L),rg=n(L,"LI",{});var n6e=s(rg);Tae=n(n6e,"STRONG",{});var cKr=s(Tae);jKe=r(cKr,"resnet"),cKr.forEach(t),DKe=r(n6e," \u2014 "),vR=n(n6e,"A",{href:!0});var fKr=s(vR);GKe=r(fKr,"ResNetConfig"),fKr.forEach(t),OKe=r(n6e," (ResNet model)"),n6e.forEach(t),VKe=i(L),tg=n(L,"LI",{});var s6e=s(tg);Mae=n(s6e,"STRONG",{});var mKr=s(Mae);XKe=r(mKr,"retribert"),mKr.forEach(t),zKe=r(s6e," \u2014 "),FR=n(s6e,"A",{href:!0});var gKr=s(FR);WKe=r(gKr,"RetriBertConfig"),gKr.forEach(t),QKe=r(s6e," (RetriBERT model)"),s6e.forEach(t),HKe=i(L),ag=n(L,"LI",{});var l6e=s(ag);Eae=n(l6e,"STRONG",{});var hKr=s(Eae);UKe=r(hKr,"roberta"),hKr.forEach(t),JKe=r(l6e," \u2014 "),TR=n(l6e,"A",{href:!0});var pKr=s(TR);YKe=r(pKr,"RobertaConfig"),pKr.forEach(t),KKe=r(l6e," (RoBERTa model)"),l6e.forEach(t),ZKe=i(L),ng=n(L,"LI",{});var i6e=s(ng);Cae=n(i6e,"STRONG",{});var uKr=s(Cae);eZe=r(uKr,"roformer"),uKr.forEach(t),oZe=r(i6e," \u2014 "),MR=n(i6e,"A",{href:!0});var _Kr=s(MR);rZe=r(_Kr,"RoFormerConfig"),_Kr.forEach(t),tZe=r(i6e," (RoFormer model)"),i6e.forEach(t),aZe=i(L),sg=n(L,"LI",{});var d6e=s(sg);wae=n(d6e,"STRONG",{});var bKr=s(wae);nZe=r(bKr,"segformer"),bKr.forEach(t),sZe=r(d6e," \u2014 "),ER=n(d6e,"A",{href:!0});var vKr=s(ER);lZe=r(vKr,"SegformerConfig"),vKr.forEach(t),iZe=r(d6e," (SegFormer model)"),d6e.forEach(t),dZe=i(L),lg=n(L,"LI",{});var c6e=s(lg);Aae=n(c6e,"STRONG",{});var FKr=s(Aae);cZe=r(FKr,"sew"),FKr.forEach(t),fZe=r(c6e," \u2014 "),CR=n(c6e,"A",{href:!0});var TKr=s(CR);mZe=r(TKr,"SEWConfig"),TKr.forEach(t),gZe=r(c6e," (SEW model)"),c6e.forEach(t),hZe=i(L),ig=n(L,"LI",{});var f6e=s(ig);Lae=n(f6e,"STRONG",{});var MKr=s(Lae);pZe=r(MKr,"sew-d"),MKr.forEach(t),uZe=r(f6e," \u2014 "),wR=n(f6e,"A",{href:!0});var EKr=s(wR);_Ze=r(EKr,"SEWDConfig"),EKr.forEach(t),bZe=r(f6e," (SEW-D model)"),f6e.forEach(t),vZe=i(L),dg=n(L,"LI",{});var m6e=s(dg);yae=n(m6e,"STRONG",{});var CKr=s(yae);FZe=r(CKr,"speech-encoder-decoder"),CKr.forEach(t),TZe=r(m6e," \u2014 "),AR=n(m6e,"A",{href:!0});var wKr=s(AR);MZe=r(wKr,"SpeechEncoderDecoderConfig"),wKr.forEach(t),EZe=r(m6e," (Speech Encoder decoder model)"),m6e.forEach(t),CZe=i(L),cg=n(L,"LI",{});var g6e=s(cg);xae=n(g6e,"STRONG",{});var AKr=s(xae);wZe=r(AKr,"speech_to_text"),AKr.forEach(t),AZe=r(g6e," \u2014 "),LR=n(g6e,"A",{href:!0});var LKr=s(LR);LZe=r(LKr,"Speech2TextConfig"),LKr.forEach(t),yZe=r(g6e," (Speech2Text model)"),g6e.forEach(t),xZe=i(L),fg=n(L,"LI",{});var h6e=s(fg);$ae=n(h6e,"STRONG",{});var yKr=s($ae);$Ze=r(yKr,"speech_to_text_2"),yKr.forEach(t),kZe=r(h6e," \u2014 "),yR=n(h6e,"A",{href:!0});var xKr=s(yR);SZe=r(xKr,"Speech2Text2Config"),xKr.forEach(t),RZe=r(h6e," (Speech2Text2 model)"),h6e.forEach(t),PZe=i(L),mg=n(L,"LI",{});var p6e=s(mg);kae=n(p6e,"STRONG",{});var $Kr=s(kae);BZe=r($Kr,"splinter"),$Kr.forEach(t),IZe=r(p6e," \u2014 "),xR=n(p6e,"A",{href:!0});var kKr=s(xR);NZe=r(kKr,"SplinterConfig"),kKr.forEach(t),qZe=r(p6e," (Splinter model)"),p6e.forEach(t),jZe=i(L),gg=n(L,"LI",{});var u6e=s(gg);Sae=n(u6e,"STRONG",{});var SKr=s(Sae);DZe=r(SKr,"squeezebert"),SKr.forEach(t),GZe=r(u6e," \u2014 "),$R=n(u6e,"A",{href:!0});var RKr=s($R);OZe=r(RKr,"SqueezeBertConfig"),RKr.forEach(t),VZe=r(u6e," (SqueezeBERT model)"),u6e.forEach(t),XZe=i(L),hg=n(L,"LI",{});var _6e=s(hg);Rae=n(_6e,"STRONG",{});var PKr=s(Rae);zZe=r(PKr,"swin"),PKr.forEach(t),WZe=r(_6e," \u2014 "),kR=n(_6e,"A",{href:!0});var BKr=s(kR);QZe=r(BKr,"SwinConfig"),BKr.forEach(t),HZe=r(_6e," (Swin Transformer model)"),_6e.forEach(t),UZe=i(L),pg=n(L,"LI",{});var b6e=s(pg);Pae=n(b6e,"STRONG",{});var IKr=s(Pae);JZe=r(IKr,"t5"),IKr.forEach(t),YZe=r(b6e," \u2014 "),SR=n(b6e,"A",{href:!0});var NKr=s(SR);KZe=r(NKr,"T5Config"),NKr.forEach(t),ZZe=r(b6e," (T5 model)"),b6e.forEach(t),eeo=i(L),ug=n(L,"LI",{});var v6e=s(ug);Bae=n(v6e,"STRONG",{});var qKr=s(Bae);oeo=r(qKr,"tapas"),qKr.forEach(t),reo=r(v6e," \u2014 "),RR=n(v6e,"A",{href:!0});var jKr=s(RR);teo=r(jKr,"TapasConfig"),jKr.forEach(t),aeo=r(v6e," (TAPAS model)"),v6e.forEach(t),neo=i(L),_g=n(L,"LI",{});var F6e=s(_g);Iae=n(F6e,"STRONG",{});var DKr=s(Iae);seo=r(DKr,"trajectory_transformer"),DKr.forEach(t),leo=r(F6e," \u2014 "),PR=n(F6e,"A",{href:!0});var GKr=s(PR);ieo=r(GKr,"TrajectoryTransformerConfig"),GKr.forEach(t),deo=r(F6e," (Trajectory Transformer model)"),F6e.forEach(t),ceo=i(L),bg=n(L,"LI",{});var T6e=s(bg);Nae=n(T6e,"STRONG",{});var OKr=s(Nae);feo=r(OKr,"transfo-xl"),OKr.forEach(t),meo=r(T6e," \u2014 "),BR=n(T6e,"A",{href:!0});var VKr=s(BR);geo=r(VKr,"TransfoXLConfig"),VKr.forEach(t),heo=r(T6e," (Transformer-XL model)"),T6e.forEach(t),peo=i(L),vg=n(L,"LI",{});var M6e=s(vg);qae=n(M6e,"STRONG",{});var XKr=s(qae);ueo=r(XKr,"trocr"),XKr.forEach(t),_eo=r(M6e," \u2014 "),IR=n(M6e,"A",{href:!0});var zKr=s(IR);beo=r(zKr,"TrOCRConfig"),zKr.forEach(t),veo=r(M6e," (TrOCR model)"),M6e.forEach(t),Feo=i(L),Fg=n(L,"LI",{});var E6e=s(Fg);jae=n(E6e,"STRONG",{});var WKr=s(jae);Teo=r(WKr,"unispeech"),WKr.forEach(t),Meo=r(E6e," \u2014 "),NR=n(E6e,"A",{href:!0});var QKr=s(NR);Eeo=r(QKr,"UniSpeechConfig"),QKr.forEach(t),Ceo=r(E6e," (UniSpeech model)"),E6e.forEach(t),weo=i(L),Tg=n(L,"LI",{});var C6e=s(Tg);Dae=n(C6e,"STRONG",{});var HKr=s(Dae);Aeo=r(HKr,"unispeech-sat"),HKr.forEach(t),Leo=r(C6e," \u2014 "),qR=n(C6e,"A",{href:!0});var UKr=s(qR);yeo=r(UKr,"UniSpeechSatConfig"),UKr.forEach(t),xeo=r(C6e," (UniSpeechSat model)"),C6e.forEach(t),$eo=i(L),Mg=n(L,"LI",{});var w6e=s(Mg);Gae=n(w6e,"STRONG",{});var JKr=s(Gae);keo=r(JKr,"van"),JKr.forEach(t),Seo=r(w6e," \u2014 "),jR=n(w6e,"A",{href:!0});var YKr=s(jR);Reo=r(YKr,"VanConfig"),YKr.forEach(t),Peo=r(w6e," (VAN model)"),w6e.forEach(t),Beo=i(L),Eg=n(L,"LI",{});var A6e=s(Eg);Oae=n(A6e,"STRONG",{});var KKr=s(Oae);Ieo=r(KKr,"vilt"),KKr.forEach(t),Neo=r(A6e," \u2014 "),DR=n(A6e,"A",{href:!0});var ZKr=s(DR);qeo=r(ZKr,"ViltConfig"),ZKr.forEach(t),jeo=r(A6e," (ViLT model)"),A6e.forEach(t),Deo=i(L),Cg=n(L,"LI",{});var L6e=s(Cg);Vae=n(L6e,"STRONG",{});var eZr=s(Vae);Geo=r(eZr,"vision-encoder-decoder"),eZr.forEach(t),Oeo=r(L6e," \u2014 "),GR=n(L6e,"A",{href:!0});var oZr=s(GR);Veo=r(oZr,"VisionEncoderDecoderConfig"),oZr.forEach(t),Xeo=r(L6e," (Vision Encoder decoder model)"),L6e.forEach(t),zeo=i(L),wg=n(L,"LI",{});var y6e=s(wg);Xae=n(y6e,"STRONG",{});var rZr=s(Xae);Weo=r(rZr,"vision-text-dual-encoder"),rZr.forEach(t),Qeo=r(y6e," \u2014 "),OR=n(y6e,"A",{href:!0});var tZr=s(OR);Heo=r(tZr,"VisionTextDualEncoderConfig"),tZr.forEach(t),Ueo=r(y6e," (VisionTextDualEncoder model)"),y6e.forEach(t),Jeo=i(L),Ag=n(L,"LI",{});var x6e=s(Ag);zae=n(x6e,"STRONG",{});var aZr=s(zae);Yeo=r(aZr,"visual_bert"),aZr.forEach(t),Keo=r(x6e," \u2014 "),VR=n(x6e,"A",{href:!0});var nZr=s(VR);Zeo=r(nZr,"VisualBertConfig"),nZr.forEach(t),eoo=r(x6e," (VisualBERT model)"),x6e.forEach(t),ooo=i(L),Lg=n(L,"LI",{});var $6e=s(Lg);Wae=n($6e,"STRONG",{});var sZr=s(Wae);roo=r(sZr,"vit"),sZr.forEach(t),too=r($6e," \u2014 "),XR=n($6e,"A",{href:!0});var lZr=s(XR);aoo=r(lZr,"ViTConfig"),lZr.forEach(t),noo=r($6e," (ViT model)"),$6e.forEach(t),soo=i(L),yg=n(L,"LI",{});var k6e=s(yg);Qae=n(k6e,"STRONG",{});var iZr=s(Qae);loo=r(iZr,"vit_mae"),iZr.forEach(t),ioo=r(k6e," \u2014 "),zR=n(k6e,"A",{href:!0});var dZr=s(zR);doo=r(dZr,"ViTMAEConfig"),dZr.forEach(t),coo=r(k6e," (ViTMAE model)"),k6e.forEach(t),foo=i(L),xg=n(L,"LI",{});var S6e=s(xg);Hae=n(S6e,"STRONG",{});var cZr=s(Hae);moo=r(cZr,"wav2vec2"),cZr.forEach(t),goo=r(S6e," \u2014 "),WR=n(S6e,"A",{href:!0});var fZr=s(WR);hoo=r(fZr,"Wav2Vec2Config"),fZr.forEach(t),poo=r(S6e," (Wav2Vec2 model)"),S6e.forEach(t),uoo=i(L),$g=n(L,"LI",{});var R6e=s($g);Uae=n(R6e,"STRONG",{});var mZr=s(Uae);_oo=r(mZr,"wav2vec2-conformer"),mZr.forEach(t),boo=r(R6e," \u2014 "),QR=n(R6e,"A",{href:!0});var gZr=s(QR);voo=r(gZr,"Wav2Vec2ConformerConfig"),gZr.forEach(t),Foo=r(R6e," (Wav2Vec2-Conformer model)"),R6e.forEach(t),Too=i(L),kg=n(L,"LI",{});var P6e=s(kg);Jae=n(P6e,"STRONG",{});var hZr=s(Jae);Moo=r(hZr,"wavlm"),hZr.forEach(t),Eoo=r(P6e," \u2014 "),HR=n(P6e,"A",{href:!0});var pZr=s(HR);Coo=r(pZr,"WavLMConfig"),pZr.forEach(t),woo=r(P6e," (WavLM model)"),P6e.forEach(t),Aoo=i(L),Sg=n(L,"LI",{});var B6e=s(Sg);Yae=n(B6e,"STRONG",{});var uZr=s(Yae);Loo=r(uZr,"xglm"),uZr.forEach(t),yoo=r(B6e," \u2014 "),UR=n(B6e,"A",{href:!0});var _Zr=s(UR);xoo=r(_Zr,"XGLMConfig"),_Zr.forEach(t),$oo=r(B6e," (XGLM model)"),B6e.forEach(t),koo=i(L),Rg=n(L,"LI",{});var I6e=s(Rg);Kae=n(I6e,"STRONG",{});var bZr=s(Kae);Soo=r(bZr,"xlm"),bZr.forEach(t),Roo=r(I6e," \u2014 "),JR=n(I6e,"A",{href:!0});var vZr=s(JR);Poo=r(vZr,"XLMConfig"),vZr.forEach(t),Boo=r(I6e," (XLM model)"),I6e.forEach(t),Ioo=i(L),Pg=n(L,"LI",{});var N6e=s(Pg);Zae=n(N6e,"STRONG",{});var FZr=s(Zae);Noo=r(FZr,"xlm-prophetnet"),FZr.forEach(t),qoo=r(N6e," \u2014 "),YR=n(N6e,"A",{href:!0});var TZr=s(YR);joo=r(TZr,"XLMProphetNetConfig"),TZr.forEach(t),Doo=r(N6e," (XLM-ProphetNet model)"),N6e.forEach(t),Goo=i(L),Bg=n(L,"LI",{});var q6e=s(Bg);ene=n(q6e,"STRONG",{});var MZr=s(ene);Ooo=r(MZr,"xlm-roberta"),MZr.forEach(t),Voo=r(q6e," \u2014 "),KR=n(q6e,"A",{href:!0});var EZr=s(KR);Xoo=r(EZr,"XLMRobertaConfig"),EZr.forEach(t),zoo=r(q6e," (XLM-RoBERTa model)"),q6e.forEach(t),Woo=i(L),Ig=n(L,"LI",{});var j6e=s(Ig);one=n(j6e,"STRONG",{});var CZr=s(one);Qoo=r(CZr,"xlm-roberta-xl"),CZr.forEach(t),Hoo=r(j6e," \u2014 "),ZR=n(j6e,"A",{href:!0});var wZr=s(ZR);Uoo=r(wZr,"XLMRobertaXLConfig"),wZr.forEach(t),Joo=r(j6e," (XLM-RoBERTa-XL model)"),j6e.forEach(t),Yoo=i(L),Ng=n(L,"LI",{});var D6e=s(Ng);rne=n(D6e,"STRONG",{});var AZr=s(rne);Koo=r(AZr,"xlnet"),AZr.forEach(t),Zoo=r(D6e," \u2014 "),eP=n(D6e,"A",{href:!0});var LZr=s(eP);ero=r(LZr,"XLNetConfig"),LZr.forEach(t),oro=r(D6e," (XLNet model)"),D6e.forEach(t),rro=i(L),qg=n(L,"LI",{});var G6e=s(qg);tne=n(G6e,"STRONG",{});var yZr=s(tne);tro=r(yZr,"yolos"),yZr.forEach(t),aro=r(G6e," \u2014 "),oP=n(G6e,"A",{href:!0});var xZr=s(oP);nro=r(xZr,"YolosConfig"),xZr.forEach(t),sro=r(G6e," (YOLOS model)"),G6e.forEach(t),lro=i(L),jg=n(L,"LI",{});var O6e=s(jg);ane=n(O6e,"STRONG",{});var $Zr=s(ane);iro=r($Zr,"yoso"),$Zr.forEach(t),dro=r(O6e," \u2014 "),rP=n(O6e,"A",{href:!0});var kZr=s(rP);cro=r(kZr,"YosoConfig"),kZr.forEach(t),fro=r(O6e," (YOSO model)"),O6e.forEach(t),L.forEach(t),mro=i(at),T(Dg.$$.fragment,at),at.forEach(t),gro=i(tt),Gg=n(tt,"DIV",{class:!0});var aVe=s(Gg);T(AL.$$.fragment,aVe),hro=i(aVe),nne=n(aVe,"P",{});var SZr=s(nne);pro=r(SZr,"Register a new configuration for this class."),SZr.forEach(t),aVe.forEach(t),tt.forEach(t),nGe=i(f),ki=n(f,"H2",{class:!0});var nVe=s(ki);Og=n(nVe,"A",{id:!0,class:!0,href:!0});var RZr=s(Og);sne=n(RZr,"SPAN",{});var PZr=s(sne);T(LL.$$.fragment,PZr),PZr.forEach(t),RZr.forEach(t),uro=i(nVe),lne=n(nVe,"SPAN",{});var BZr=s(lne);_ro=r(BZr,"AutoTokenizer"),BZr.forEach(t),nVe.forEach(t),sGe=i(f),Ao=n(f,"DIV",{class:!0});var zs=s(Ao);T(yL.$$.fragment,zs),bro=i(zs),xL=n(zs,"P",{});var sVe=s(xL);vro=r(sVe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),tP=n(sVe,"A",{href:!0});var IZr=s(tP);Fro=r(IZr,"AutoTokenizer.from_pretrained()"),IZr.forEach(t),Tro=r(sVe," class method."),sVe.forEach(t),Mro=i(zs),$L=n(zs,"P",{});var lVe=s($L);Ero=r(lVe,"This class cannot be instantiated directly using "),ine=n(lVe,"CODE",{});var NZr=s(ine);Cro=r(NZr,"__init__()"),NZr.forEach(t),wro=r(lVe," (throws an error)."),lVe.forEach(t),Aro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(kL.$$.fragment,Ws),Lro=i(Ws),dne=n(Ws,"P",{});var qZr=s(dne);yro=r(qZr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),qZr.forEach(t),xro=i(Ws),ka=n(Ws,"P",{});var FA=s(ka);$ro=r(FA,"The tokenizer class to instantiate is selected based on the "),cne=n(FA,"CODE",{});var jZr=s(cne);kro=r(jZr,"model_type"),jZr.forEach(t),Sro=r(FA,` property of the config object (either
passed as an argument or loaded from `),fne=n(FA,"CODE",{});var DZr=s(fne);Rro=r(DZr,"pretrained_model_name_or_path"),DZr.forEach(t),Pro=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mne=n(FA,"CODE",{});var GZr=s(mne);Bro=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),Iro=r(FA,":"),FA.forEach(t),Nro=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var N$=s(Nn);gne=n(N$,"STRONG",{});var OZr=s(gne);qro=r(OZr,"albert"),OZr.forEach(t),jro=r(N$," \u2014 "),aP=n(N$,"A",{href:!0});var VZr=s(aP);Dro=r(VZr,"AlbertTokenizer"),VZr.forEach(t),Gro=r(N$," or "),nP=n(N$,"A",{href:!0});var XZr=s(nP);Oro=r(XZr,"AlbertTokenizerFast"),XZr.forEach(t),Vro=r(N$," (ALBERT model)"),N$.forEach(t),Xro=i(S),qn=n(S,"LI",{});var q$=s(qn);hne=n(q$,"STRONG",{});var zZr=s(hne);zro=r(zZr,"bart"),zZr.forEach(t),Wro=r(q$," \u2014 "),sP=n(q$,"A",{href:!0});var WZr=s(sP);Qro=r(WZr,"BartTokenizer"),WZr.forEach(t),Hro=r(q$," or "),lP=n(q$,"A",{href:!0});var QZr=s(lP);Uro=r(QZr,"BartTokenizerFast"),QZr.forEach(t),Jro=r(q$," (BART model)"),q$.forEach(t),Yro=i(S),jn=n(S,"LI",{});var j$=s(jn);pne=n(j$,"STRONG",{});var HZr=s(pne);Kro=r(HZr,"barthez"),HZr.forEach(t),Zro=r(j$," \u2014 "),iP=n(j$,"A",{href:!0});var UZr=s(iP);eto=r(UZr,"BarthezTokenizer"),UZr.forEach(t),oto=r(j$," or "),dP=n(j$,"A",{href:!0});var JZr=s(dP);rto=r(JZr,"BarthezTokenizerFast"),JZr.forEach(t),tto=r(j$," (BARThez model)"),j$.forEach(t),ato=i(S),Vg=n(S,"LI",{});var V6e=s(Vg);une=n(V6e,"STRONG",{});var YZr=s(une);nto=r(YZr,"bartpho"),YZr.forEach(t),sto=r(V6e," \u2014 "),cP=n(V6e,"A",{href:!0});var KZr=s(cP);lto=r(KZr,"BartphoTokenizer"),KZr.forEach(t),ito=r(V6e," (BARTpho model)"),V6e.forEach(t),dto=i(S),Dn=n(S,"LI",{});var D$=s(Dn);_ne=n(D$,"STRONG",{});var ZZr=s(_ne);cto=r(ZZr,"bert"),ZZr.forEach(t),fto=r(D$," \u2014 "),fP=n(D$,"A",{href:!0});var eet=s(fP);mto=r(eet,"BertTokenizer"),eet.forEach(t),gto=r(D$," or "),mP=n(D$,"A",{href:!0});var oet=s(mP);hto=r(oet,"BertTokenizerFast"),oet.forEach(t),pto=r(D$," (BERT model)"),D$.forEach(t),uto=i(S),Xg=n(S,"LI",{});var X6e=s(Xg);bne=n(X6e,"STRONG",{});var ret=s(bne);_to=r(ret,"bert-generation"),ret.forEach(t),bto=r(X6e," \u2014 "),gP=n(X6e,"A",{href:!0});var tet=s(gP);vto=r(tet,"BertGenerationTokenizer"),tet.forEach(t),Fto=r(X6e," (Bert Generation model)"),X6e.forEach(t),Tto=i(S),zg=n(S,"LI",{});var z6e=s(zg);vne=n(z6e,"STRONG",{});var aet=s(vne);Mto=r(aet,"bert-japanese"),aet.forEach(t),Eto=r(z6e," \u2014 "),hP=n(z6e,"A",{href:!0});var net=s(hP);Cto=r(net,"BertJapaneseTokenizer"),net.forEach(t),wto=r(z6e," (BertJapanese model)"),z6e.forEach(t),Ato=i(S),Wg=n(S,"LI",{});var W6e=s(Wg);Fne=n(W6e,"STRONG",{});var set=s(Fne);Lto=r(set,"bertweet"),set.forEach(t),yto=r(W6e," \u2014 "),pP=n(W6e,"A",{href:!0});var iet=s(pP);xto=r(iet,"BertweetTokenizer"),iet.forEach(t),$to=r(W6e," (BERTweet model)"),W6e.forEach(t),kto=i(S),Gn=n(S,"LI",{});var G$=s(Gn);Tne=n(G$,"STRONG",{});var det=s(Tne);Sto=r(det,"big_bird"),det.forEach(t),Rto=r(G$," \u2014 "),uP=n(G$,"A",{href:!0});var cet=s(uP);Pto=r(cet,"BigBirdTokenizer"),cet.forEach(t),Bto=r(G$," or "),_P=n(G$,"A",{href:!0});var fet=s(_P);Ito=r(fet,"BigBirdTokenizerFast"),fet.forEach(t),Nto=r(G$," (BigBird model)"),G$.forEach(t),qto=i(S),On=n(S,"LI",{});var O$=s(On);Mne=n(O$,"STRONG",{});var met=s(Mne);jto=r(met,"bigbird_pegasus"),met.forEach(t),Dto=r(O$," \u2014 "),bP=n(O$,"A",{href:!0});var get=s(bP);Gto=r(get,"PegasusTokenizer"),get.forEach(t),Oto=r(O$," or "),vP=n(O$,"A",{href:!0});var het=s(vP);Vto=r(het,"PegasusTokenizerFast"),het.forEach(t),Xto=r(O$," (BigBird-Pegasus model)"),O$.forEach(t),zto=i(S),Vn=n(S,"LI",{});var V$=s(Vn);Ene=n(V$,"STRONG",{});var pet=s(Ene);Wto=r(pet,"blenderbot"),pet.forEach(t),Qto=r(V$," \u2014 "),FP=n(V$,"A",{href:!0});var uet=s(FP);Hto=r(uet,"BlenderbotTokenizer"),uet.forEach(t),Uto=r(V$," or "),TP=n(V$,"A",{href:!0});var _et=s(TP);Jto=r(_et,"BlenderbotTokenizerFast"),_et.forEach(t),Yto=r(V$," (Blenderbot model)"),V$.forEach(t),Kto=i(S),Qg=n(S,"LI",{});var Q6e=s(Qg);Cne=n(Q6e,"STRONG",{});var bet=s(Cne);Zto=r(bet,"blenderbot-small"),bet.forEach(t),eao=r(Q6e," \u2014 "),MP=n(Q6e,"A",{href:!0});var vet=s(MP);oao=r(vet,"BlenderbotSmallTokenizer"),vet.forEach(t),rao=r(Q6e," (BlenderbotSmall model)"),Q6e.forEach(t),tao=i(S),Hg=n(S,"LI",{});var H6e=s(Hg);wne=n(H6e,"STRONG",{});var Fet=s(wne);aao=r(Fet,"bloom"),Fet.forEach(t),nao=r(H6e," \u2014 "),EP=n(H6e,"A",{href:!0});var Tet=s(EP);sao=r(Tet,"BloomTokenizerFast"),Tet.forEach(t),lao=r(H6e," (BLOOM model)"),H6e.forEach(t),iao=i(S),Ug=n(S,"LI",{});var U6e=s(Ug);Ane=n(U6e,"STRONG",{});var Met=s(Ane);dao=r(Met,"byt5"),Met.forEach(t),cao=r(U6e," \u2014 "),CP=n(U6e,"A",{href:!0});var Eet=s(CP);fao=r(Eet,"ByT5Tokenizer"),Eet.forEach(t),mao=r(U6e," (ByT5 model)"),U6e.forEach(t),gao=i(S),Xn=n(S,"LI",{});var X$=s(Xn);Lne=n(X$,"STRONG",{});var Cet=s(Lne);hao=r(Cet,"camembert"),Cet.forEach(t),pao=r(X$," \u2014 "),wP=n(X$,"A",{href:!0});var wet=s(wP);uao=r(wet,"CamembertTokenizer"),wet.forEach(t),_ao=r(X$," or "),AP=n(X$,"A",{href:!0});var Aet=s(AP);bao=r(Aet,"CamembertTokenizerFast"),Aet.forEach(t),vao=r(X$," (CamemBERT model)"),X$.forEach(t),Fao=i(S),Jg=n(S,"LI",{});var J6e=s(Jg);yne=n(J6e,"STRONG",{});var Let=s(yne);Tao=r(Let,"canine"),Let.forEach(t),Mao=r(J6e," \u2014 "),LP=n(J6e,"A",{href:!0});var yet=s(LP);Eao=r(yet,"CanineTokenizer"),yet.forEach(t),Cao=r(J6e," (CANINE model)"),J6e.forEach(t),wao=i(S),zn=n(S,"LI",{});var z$=s(zn);xne=n(z$,"STRONG",{});var xet=s(xne);Aao=r(xet,"clip"),xet.forEach(t),Lao=r(z$," \u2014 "),yP=n(z$,"A",{href:!0});var $et=s(yP);yao=r($et,"CLIPTokenizer"),$et.forEach(t),xao=r(z$," or "),xP=n(z$,"A",{href:!0});var ket=s(xP);$ao=r(ket,"CLIPTokenizerFast"),ket.forEach(t),kao=r(z$," (CLIP model)"),z$.forEach(t),Sao=i(S),Wn=n(S,"LI",{});var W$=s(Wn);$ne=n(W$,"STRONG",{});var Set=s($ne);Rao=r(Set,"convbert"),Set.forEach(t),Pao=r(W$," \u2014 "),$P=n(W$,"A",{href:!0});var Ret=s($P);Bao=r(Ret,"ConvBertTokenizer"),Ret.forEach(t),Iao=r(W$," or "),kP=n(W$,"A",{href:!0});var Pet=s(kP);Nao=r(Pet,"ConvBertTokenizerFast"),Pet.forEach(t),qao=r(W$," (ConvBERT model)"),W$.forEach(t),jao=i(S),Qn=n(S,"LI",{});var Q$=s(Qn);kne=n(Q$,"STRONG",{});var Bet=s(kne);Dao=r(Bet,"cpm"),Bet.forEach(t),Gao=r(Q$," \u2014 "),SP=n(Q$,"A",{href:!0});var Iet=s(SP);Oao=r(Iet,"CpmTokenizer"),Iet.forEach(t),Vao=r(Q$," or "),RP=n(Q$,"A",{href:!0});var Net=s(RP);Xao=r(Net,"CpmTokenizerFast"),Net.forEach(t),zao=r(Q$," (CPM model)"),Q$.forEach(t),Wao=i(S),Yg=n(S,"LI",{});var Y6e=s(Yg);Sne=n(Y6e,"STRONG",{});var qet=s(Sne);Qao=r(qet,"ctrl"),qet.forEach(t),Hao=r(Y6e," \u2014 "),PP=n(Y6e,"A",{href:!0});var jet=s(PP);Uao=r(jet,"CTRLTokenizer"),jet.forEach(t),Jao=r(Y6e," (CTRL model)"),Y6e.forEach(t),Yao=i(S),Hn=n(S,"LI",{});var H$=s(Hn);Rne=n(H$,"STRONG",{});var Det=s(Rne);Kao=r(Det,"data2vec-text"),Det.forEach(t),Zao=r(H$," \u2014 "),BP=n(H$,"A",{href:!0});var Get=s(BP);eno=r(Get,"RobertaTokenizer"),Get.forEach(t),ono=r(H$," or "),IP=n(H$,"A",{href:!0});var Oet=s(IP);rno=r(Oet,"RobertaTokenizerFast"),Oet.forEach(t),tno=r(H$," (Data2VecText model)"),H$.forEach(t),ano=i(S),Un=n(S,"LI",{});var U$=s(Un);Pne=n(U$,"STRONG",{});var Vet=s(Pne);nno=r(Vet,"deberta"),Vet.forEach(t),sno=r(U$," \u2014 "),NP=n(U$,"A",{href:!0});var Xet=s(NP);lno=r(Xet,"DebertaTokenizer"),Xet.forEach(t),ino=r(U$," or "),qP=n(U$,"A",{href:!0});var zet=s(qP);dno=r(zet,"DebertaTokenizerFast"),zet.forEach(t),cno=r(U$," (DeBERTa model)"),U$.forEach(t),fno=i(S),Jn=n(S,"LI",{});var J$=s(Jn);Bne=n(J$,"STRONG",{});var Wet=s(Bne);mno=r(Wet,"deberta-v2"),Wet.forEach(t),gno=r(J$," \u2014 "),jP=n(J$,"A",{href:!0});var Qet=s(jP);hno=r(Qet,"DebertaV2Tokenizer"),Qet.forEach(t),pno=r(J$," or "),DP=n(J$,"A",{href:!0});var Het=s(DP);uno=r(Het,"DebertaV2TokenizerFast"),Het.forEach(t),_no=r(J$," (DeBERTa-v2 model)"),J$.forEach(t),bno=i(S),Yn=n(S,"LI",{});var Y$=s(Yn);Ine=n(Y$,"STRONG",{});var Uet=s(Ine);vno=r(Uet,"distilbert"),Uet.forEach(t),Fno=r(Y$," \u2014 "),GP=n(Y$,"A",{href:!0});var Jet=s(GP);Tno=r(Jet,"DistilBertTokenizer"),Jet.forEach(t),Mno=r(Y$," or "),OP=n(Y$,"A",{href:!0});var Yet=s(OP);Eno=r(Yet,"DistilBertTokenizerFast"),Yet.forEach(t),Cno=r(Y$," (DistilBERT model)"),Y$.forEach(t),wno=i(S),Kn=n(S,"LI",{});var K$=s(Kn);Nne=n(K$,"STRONG",{});var Ket=s(Nne);Ano=r(Ket,"dpr"),Ket.forEach(t),Lno=r(K$," \u2014 "),VP=n(K$,"A",{href:!0});var Zet=s(VP);yno=r(Zet,"DPRQuestionEncoderTokenizer"),Zet.forEach(t),xno=r(K$," or "),XP=n(K$,"A",{href:!0});var eot=s(XP);$no=r(eot,"DPRQuestionEncoderTokenizerFast"),eot.forEach(t),kno=r(K$," (DPR model)"),K$.forEach(t),Sno=i(S),Zn=n(S,"LI",{});var Z$=s(Zn);qne=n(Z$,"STRONG",{});var oot=s(qne);Rno=r(oot,"electra"),oot.forEach(t),Pno=r(Z$," \u2014 "),zP=n(Z$,"A",{href:!0});var rot=s(zP);Bno=r(rot,"ElectraTokenizer"),rot.forEach(t),Ino=r(Z$," or "),WP=n(Z$,"A",{href:!0});var tot=s(WP);Nno=r(tot,"ElectraTokenizerFast"),tot.forEach(t),qno=r(Z$," (ELECTRA model)"),Z$.forEach(t),jno=i(S),Kg=n(S,"LI",{});var K6e=s(Kg);jne=n(K6e,"STRONG",{});var aot=s(jne);Dno=r(aot,"flaubert"),aot.forEach(t),Gno=r(K6e," \u2014 "),QP=n(K6e,"A",{href:!0});var not=s(QP);Ono=r(not,"FlaubertTokenizer"),not.forEach(t),Vno=r(K6e," (FlauBERT model)"),K6e.forEach(t),Xno=i(S),es=n(S,"LI",{});var ek=s(es);Dne=n(ek,"STRONG",{});var sot=s(Dne);zno=r(sot,"fnet"),sot.forEach(t),Wno=r(ek," \u2014 "),HP=n(ek,"A",{href:!0});var lot=s(HP);Qno=r(lot,"FNetTokenizer"),lot.forEach(t),Hno=r(ek," or "),UP=n(ek,"A",{href:!0});var iot=s(UP);Uno=r(iot,"FNetTokenizerFast"),iot.forEach(t),Jno=r(ek," (FNet model)"),ek.forEach(t),Yno=i(S),Zg=n(S,"LI",{});var Z6e=s(Zg);Gne=n(Z6e,"STRONG",{});var dot=s(Gne);Kno=r(dot,"fsmt"),dot.forEach(t),Zno=r(Z6e," \u2014 "),JP=n(Z6e,"A",{href:!0});var cot=s(JP);eso=r(cot,"FSMTTokenizer"),cot.forEach(t),oso=r(Z6e," (FairSeq Machine-Translation model)"),Z6e.forEach(t),rso=i(S),os=n(S,"LI",{});var ok=s(os);One=n(ok,"STRONG",{});var fot=s(One);tso=r(fot,"funnel"),fot.forEach(t),aso=r(ok," \u2014 "),YP=n(ok,"A",{href:!0});var mot=s(YP);nso=r(mot,"FunnelTokenizer"),mot.forEach(t),sso=r(ok," or "),KP=n(ok,"A",{href:!0});var got=s(KP);lso=r(got,"FunnelTokenizerFast"),got.forEach(t),iso=r(ok," (Funnel Transformer model)"),ok.forEach(t),dso=i(S),rs=n(S,"LI",{});var rk=s(rs);Vne=n(rk,"STRONG",{});var hot=s(Vne);cso=r(hot,"gpt2"),hot.forEach(t),fso=r(rk," \u2014 "),ZP=n(rk,"A",{href:!0});var pot=s(ZP);mso=r(pot,"GPT2Tokenizer"),pot.forEach(t),gso=r(rk," or "),eB=n(rk,"A",{href:!0});var uot=s(eB);hso=r(uot,"GPT2TokenizerFast"),uot.forEach(t),pso=r(rk," (OpenAI GPT-2 model)"),rk.forEach(t),uso=i(S),ts=n(S,"LI",{});var tk=s(ts);Xne=n(tk,"STRONG",{});var _ot=s(Xne);_so=r(_ot,"gpt_neo"),_ot.forEach(t),bso=r(tk," \u2014 "),oB=n(tk,"A",{href:!0});var bot=s(oB);vso=r(bot,"GPT2Tokenizer"),bot.forEach(t),Fso=r(tk," or "),rB=n(tk,"A",{href:!0});var vot=s(rB);Tso=r(vot,"GPT2TokenizerFast"),vot.forEach(t),Mso=r(tk," (GPT Neo model)"),tk.forEach(t),Eso=i(S),eh=n(S,"LI",{});var eLe=s(eh);zne=n(eLe,"STRONG",{});var Fot=s(zne);Cso=r(Fot,"gpt_neox"),Fot.forEach(t),wso=r(eLe," \u2014 "),tB=n(eLe,"A",{href:!0});var Tot=s(tB);Aso=r(Tot,"GPTNeoXTokenizerFast"),Tot.forEach(t),Lso=r(eLe," (GPT NeoX model)"),eLe.forEach(t),yso=i(S),as=n(S,"LI",{});var ak=s(as);Wne=n(ak,"STRONG",{});var Mot=s(Wne);xso=r(Mot,"gptj"),Mot.forEach(t),$so=r(ak," \u2014 "),aB=n(ak,"A",{href:!0});var Eot=s(aB);kso=r(Eot,"GPT2Tokenizer"),Eot.forEach(t),Sso=r(ak," or "),nB=n(ak,"A",{href:!0});var Cot=s(nB);Rso=r(Cot,"GPT2TokenizerFast"),Cot.forEach(t),Pso=r(ak," (GPT-J model)"),ak.forEach(t),Bso=i(S),ns=n(S,"LI",{});var nk=s(ns);Qne=n(nk,"STRONG",{});var wot=s(Qne);Iso=r(wot,"herbert"),wot.forEach(t),Nso=r(nk," \u2014 "),sB=n(nk,"A",{href:!0});var Aot=s(sB);qso=r(Aot,"HerbertTokenizer"),Aot.forEach(t),jso=r(nk," or "),lB=n(nk,"A",{href:!0});var Lot=s(lB);Dso=r(Lot,"HerbertTokenizerFast"),Lot.forEach(t),Gso=r(nk," (HerBERT model)"),nk.forEach(t),Oso=i(S),oh=n(S,"LI",{});var oLe=s(oh);Hne=n(oLe,"STRONG",{});var yot=s(Hne);Vso=r(yot,"hubert"),yot.forEach(t),Xso=r(oLe," \u2014 "),iB=n(oLe,"A",{href:!0});var xot=s(iB);zso=r(xot,"Wav2Vec2CTCTokenizer"),xot.forEach(t),Wso=r(oLe," (Hubert model)"),oLe.forEach(t),Qso=i(S),ss=n(S,"LI",{});var sk=s(ss);Une=n(sk,"STRONG",{});var $ot=s(Une);Hso=r($ot,"ibert"),$ot.forEach(t),Uso=r(sk," \u2014 "),dB=n(sk,"A",{href:!0});var kot=s(dB);Jso=r(kot,"RobertaTokenizer"),kot.forEach(t),Yso=r(sk," or "),cB=n(sk,"A",{href:!0});var Sot=s(cB);Kso=r(Sot,"RobertaTokenizerFast"),Sot.forEach(t),Zso=r(sk," (I-BERT model)"),sk.forEach(t),elo=i(S),ls=n(S,"LI",{});var lk=s(ls);Jne=n(lk,"STRONG",{});var Rot=s(Jne);olo=r(Rot,"layoutlm"),Rot.forEach(t),rlo=r(lk," \u2014 "),fB=n(lk,"A",{href:!0});var Pot=s(fB);tlo=r(Pot,"LayoutLMTokenizer"),Pot.forEach(t),alo=r(lk," or "),mB=n(lk,"A",{href:!0});var Bot=s(mB);nlo=r(Bot,"LayoutLMTokenizerFast"),Bot.forEach(t),slo=r(lk," (LayoutLM model)"),lk.forEach(t),llo=i(S),is=n(S,"LI",{});var ik=s(is);Yne=n(ik,"STRONG",{});var Iot=s(Yne);ilo=r(Iot,"layoutlmv2"),Iot.forEach(t),dlo=r(ik," \u2014 "),gB=n(ik,"A",{href:!0});var Not=s(gB);clo=r(Not,"LayoutLMv2Tokenizer"),Not.forEach(t),flo=r(ik," or "),hB=n(ik,"A",{href:!0});var qot=s(hB);mlo=r(qot,"LayoutLMv2TokenizerFast"),qot.forEach(t),glo=r(ik," (LayoutLMv2 model)"),ik.forEach(t),hlo=i(S),ds=n(S,"LI",{});var dk=s(ds);Kne=n(dk,"STRONG",{});var jot=s(Kne);plo=r(jot,"layoutlmv3"),jot.forEach(t),ulo=r(dk," \u2014 "),pB=n(dk,"A",{href:!0});var Dot=s(pB);_lo=r(Dot,"LayoutLMv3Tokenizer"),Dot.forEach(t),blo=r(dk," or "),uB=n(dk,"A",{href:!0});var Got=s(uB);vlo=r(Got,"LayoutLMv3TokenizerFast"),Got.forEach(t),Flo=r(dk," (LayoutLMv3 model)"),dk.forEach(t),Tlo=i(S),cs=n(S,"LI",{});var ck=s(cs);Zne=n(ck,"STRONG",{});var Oot=s(Zne);Mlo=r(Oot,"layoutxlm"),Oot.forEach(t),Elo=r(ck," \u2014 "),_B=n(ck,"A",{href:!0});var Vot=s(_B);Clo=r(Vot,"LayoutXLMTokenizer"),Vot.forEach(t),wlo=r(ck," or "),bB=n(ck,"A",{href:!0});var Xot=s(bB);Alo=r(Xot,"LayoutXLMTokenizerFast"),Xot.forEach(t),Llo=r(ck," (LayoutXLM model)"),ck.forEach(t),ylo=i(S),fs=n(S,"LI",{});var fk=s(fs);ese=n(fk,"STRONG",{});var zot=s(ese);xlo=r(zot,"led"),zot.forEach(t),$lo=r(fk," \u2014 "),vB=n(fk,"A",{href:!0});var Wot=s(vB);klo=r(Wot,"LEDTokenizer"),Wot.forEach(t),Slo=r(fk," or "),FB=n(fk,"A",{href:!0});var Qot=s(FB);Rlo=r(Qot,"LEDTokenizerFast"),Qot.forEach(t),Plo=r(fk," (LED model)"),fk.forEach(t),Blo=i(S),ms=n(S,"LI",{});var mk=s(ms);ose=n(mk,"STRONG",{});var Hot=s(ose);Ilo=r(Hot,"longformer"),Hot.forEach(t),Nlo=r(mk," \u2014 "),TB=n(mk,"A",{href:!0});var Uot=s(TB);qlo=r(Uot,"LongformerTokenizer"),Uot.forEach(t),jlo=r(mk," or "),MB=n(mk,"A",{href:!0});var Jot=s(MB);Dlo=r(Jot,"LongformerTokenizerFast"),Jot.forEach(t),Glo=r(mk," (Longformer model)"),mk.forEach(t),Olo=i(S),gs=n(S,"LI",{});var gk=s(gs);rse=n(gk,"STRONG",{});var Yot=s(rse);Vlo=r(Yot,"longt5"),Yot.forEach(t),Xlo=r(gk," \u2014 "),EB=n(gk,"A",{href:!0});var Kot=s(EB);zlo=r(Kot,"T5Tokenizer"),Kot.forEach(t),Wlo=r(gk," or "),CB=n(gk,"A",{href:!0});var Zot=s(CB);Qlo=r(Zot,"T5TokenizerFast"),Zot.forEach(t),Hlo=r(gk," (LongT5 model)"),gk.forEach(t),Ulo=i(S),rh=n(S,"LI",{});var rLe=s(rh);tse=n(rLe,"STRONG",{});var ert=s(tse);Jlo=r(ert,"luke"),ert.forEach(t),Ylo=r(rLe," \u2014 "),wB=n(rLe,"A",{href:!0});var ort=s(wB);Klo=r(ort,"LukeTokenizer"),ort.forEach(t),Zlo=r(rLe," (LUKE model)"),rLe.forEach(t),eio=i(S),hs=n(S,"LI",{});var hk=s(hs);ase=n(hk,"STRONG",{});var rrt=s(ase);oio=r(rrt,"lxmert"),rrt.forEach(t),rio=r(hk," \u2014 "),AB=n(hk,"A",{href:!0});var trt=s(AB);tio=r(trt,"LxmertTokenizer"),trt.forEach(t),aio=r(hk," or "),LB=n(hk,"A",{href:!0});var art=s(LB);nio=r(art,"LxmertTokenizerFast"),art.forEach(t),sio=r(hk," (LXMERT model)"),hk.forEach(t),lio=i(S),th=n(S,"LI",{});var tLe=s(th);nse=n(tLe,"STRONG",{});var nrt=s(nse);iio=r(nrt,"m2m_100"),nrt.forEach(t),dio=r(tLe," \u2014 "),yB=n(tLe,"A",{href:!0});var srt=s(yB);cio=r(srt,"M2M100Tokenizer"),srt.forEach(t),fio=r(tLe," (M2M100 model)"),tLe.forEach(t),mio=i(S),ah=n(S,"LI",{});var aLe=s(ah);sse=n(aLe,"STRONG",{});var lrt=s(sse);gio=r(lrt,"marian"),lrt.forEach(t),hio=r(aLe," \u2014 "),xB=n(aLe,"A",{href:!0});var irt=s(xB);pio=r(irt,"MarianTokenizer"),irt.forEach(t),uio=r(aLe," (Marian model)"),aLe.forEach(t),_io=i(S),ps=n(S,"LI",{});var pk=s(ps);lse=n(pk,"STRONG",{});var drt=s(lse);bio=r(drt,"mbart"),drt.forEach(t),vio=r(pk," \u2014 "),$B=n(pk,"A",{href:!0});var crt=s($B);Fio=r(crt,"MBartTokenizer"),crt.forEach(t),Tio=r(pk," or "),kB=n(pk,"A",{href:!0});var frt=s(kB);Mio=r(frt,"MBartTokenizerFast"),frt.forEach(t),Eio=r(pk," (mBART model)"),pk.forEach(t),Cio=i(S),us=n(S,"LI",{});var uk=s(us);ise=n(uk,"STRONG",{});var mrt=s(ise);wio=r(mrt,"mbart50"),mrt.forEach(t),Aio=r(uk," \u2014 "),SB=n(uk,"A",{href:!0});var grt=s(SB);Lio=r(grt,"MBart50Tokenizer"),grt.forEach(t),yio=r(uk," or "),RB=n(uk,"A",{href:!0});var hrt=s(RB);xio=r(hrt,"MBart50TokenizerFast"),hrt.forEach(t),$io=r(uk," (mBART-50 model)"),uk.forEach(t),kio=i(S),_s=n(S,"LI",{});var _k=s(_s);dse=n(_k,"STRONG",{});var prt=s(dse);Sio=r(prt,"megatron-bert"),prt.forEach(t),Rio=r(_k," \u2014 "),PB=n(_k,"A",{href:!0});var urt=s(PB);Pio=r(urt,"BertTokenizer"),urt.forEach(t),Bio=r(_k," or "),BB=n(_k,"A",{href:!0});var _rt=s(BB);Iio=r(_rt,"BertTokenizerFast"),_rt.forEach(t),Nio=r(_k," (Megatron-BERT model)"),_k.forEach(t),qio=i(S),nh=n(S,"LI",{});var nLe=s(nh);cse=n(nLe,"STRONG",{});var brt=s(cse);jio=r(brt,"mluke"),brt.forEach(t),Dio=r(nLe," \u2014 "),IB=n(nLe,"A",{href:!0});var vrt=s(IB);Gio=r(vrt,"MLukeTokenizer"),vrt.forEach(t),Oio=r(nLe," (mLUKE model)"),nLe.forEach(t),Vio=i(S),bs=n(S,"LI",{});var bk=s(bs);fse=n(bk,"STRONG",{});var Frt=s(fse);Xio=r(Frt,"mobilebert"),Frt.forEach(t),zio=r(bk," \u2014 "),NB=n(bk,"A",{href:!0});var Trt=s(NB);Wio=r(Trt,"MobileBertTokenizer"),Trt.forEach(t),Qio=r(bk," or "),qB=n(bk,"A",{href:!0});var Mrt=s(qB);Hio=r(Mrt,"MobileBertTokenizerFast"),Mrt.forEach(t),Uio=r(bk," (MobileBERT model)"),bk.forEach(t),Jio=i(S),vs=n(S,"LI",{});var vk=s(vs);mse=n(vk,"STRONG",{});var Ert=s(mse);Yio=r(Ert,"mpnet"),Ert.forEach(t),Kio=r(vk," \u2014 "),jB=n(vk,"A",{href:!0});var Crt=s(jB);Zio=r(Crt,"MPNetTokenizer"),Crt.forEach(t),edo=r(vk," or "),DB=n(vk,"A",{href:!0});var wrt=s(DB);odo=r(wrt,"MPNetTokenizerFast"),wrt.forEach(t),rdo=r(vk," (MPNet model)"),vk.forEach(t),tdo=i(S),Fs=n(S,"LI",{});var Fk=s(Fs);gse=n(Fk,"STRONG",{});var Art=s(gse);ado=r(Art,"mt5"),Art.forEach(t),ndo=r(Fk," \u2014 "),GB=n(Fk,"A",{href:!0});var Lrt=s(GB);sdo=r(Lrt,"MT5Tokenizer"),Lrt.forEach(t),ldo=r(Fk," or "),OB=n(Fk,"A",{href:!0});var yrt=s(OB);ido=r(yrt,"MT5TokenizerFast"),yrt.forEach(t),ddo=r(Fk," (MT5 model)"),Fk.forEach(t),cdo=i(S),Ts=n(S,"LI",{});var Tk=s(Ts);hse=n(Tk,"STRONG",{});var xrt=s(hse);fdo=r(xrt,"nystromformer"),xrt.forEach(t),mdo=r(Tk," \u2014 "),VB=n(Tk,"A",{href:!0});var $rt=s(VB);gdo=r($rt,"AlbertTokenizer"),$rt.forEach(t),hdo=r(Tk," or "),XB=n(Tk,"A",{href:!0});var krt=s(XB);pdo=r(krt,"AlbertTokenizerFast"),krt.forEach(t),udo=r(Tk," (Nystr\xF6mformer model)"),Tk.forEach(t),_do=i(S),Ms=n(S,"LI",{});var Mk=s(Ms);pse=n(Mk,"STRONG",{});var Srt=s(pse);bdo=r(Srt,"openai-gpt"),Srt.forEach(t),vdo=r(Mk," \u2014 "),zB=n(Mk,"A",{href:!0});var Rrt=s(zB);Fdo=r(Rrt,"OpenAIGPTTokenizer"),Rrt.forEach(t),Tdo=r(Mk," or "),WB=n(Mk,"A",{href:!0});var Prt=s(WB);Mdo=r(Prt,"OpenAIGPTTokenizerFast"),Prt.forEach(t),Edo=r(Mk," (OpenAI GPT model)"),Mk.forEach(t),Cdo=i(S),sh=n(S,"LI",{});var sLe=s(sh);use=n(sLe,"STRONG",{});var Brt=s(use);wdo=r(Brt,"opt"),Brt.forEach(t),Ado=r(sLe," \u2014 "),QB=n(sLe,"A",{href:!0});var Irt=s(QB);Ldo=r(Irt,"GPT2Tokenizer"),Irt.forEach(t),ydo=r(sLe," (OPT model)"),sLe.forEach(t),xdo=i(S),Es=n(S,"LI",{});var Ek=s(Es);_se=n(Ek,"STRONG",{});var Nrt=s(_se);$do=r(Nrt,"pegasus"),Nrt.forEach(t),kdo=r(Ek," \u2014 "),HB=n(Ek,"A",{href:!0});var qrt=s(HB);Sdo=r(qrt,"PegasusTokenizer"),qrt.forEach(t),Rdo=r(Ek," or "),UB=n(Ek,"A",{href:!0});var jrt=s(UB);Pdo=r(jrt,"PegasusTokenizerFast"),jrt.forEach(t),Bdo=r(Ek," (Pegasus model)"),Ek.forEach(t),Ido=i(S),lh=n(S,"LI",{});var lLe=s(lh);bse=n(lLe,"STRONG",{});var Drt=s(bse);Ndo=r(Drt,"perceiver"),Drt.forEach(t),qdo=r(lLe," \u2014 "),JB=n(lLe,"A",{href:!0});var Grt=s(JB);jdo=r(Grt,"PerceiverTokenizer"),Grt.forEach(t),Ddo=r(lLe," (Perceiver model)"),lLe.forEach(t),Gdo=i(S),ih=n(S,"LI",{});var iLe=s(ih);vse=n(iLe,"STRONG",{});var Ort=s(vse);Odo=r(Ort,"phobert"),Ort.forEach(t),Vdo=r(iLe," \u2014 "),YB=n(iLe,"A",{href:!0});var Vrt=s(YB);Xdo=r(Vrt,"PhobertTokenizer"),Vrt.forEach(t),zdo=r(iLe," (PhoBERT model)"),iLe.forEach(t),Wdo=i(S),dh=n(S,"LI",{});var dLe=s(dh);Fse=n(dLe,"STRONG",{});var Xrt=s(Fse);Qdo=r(Xrt,"plbart"),Xrt.forEach(t),Hdo=r(dLe," \u2014 "),KB=n(dLe,"A",{href:!0});var zrt=s(KB);Udo=r(zrt,"PLBartTokenizer"),zrt.forEach(t),Jdo=r(dLe," (PLBart model)"),dLe.forEach(t),Ydo=i(S),ch=n(S,"LI",{});var cLe=s(ch);Tse=n(cLe,"STRONG",{});var Wrt=s(Tse);Kdo=r(Wrt,"prophetnet"),Wrt.forEach(t),Zdo=r(cLe," \u2014 "),ZB=n(cLe,"A",{href:!0});var Qrt=s(ZB);eco=r(Qrt,"ProphetNetTokenizer"),Qrt.forEach(t),oco=r(cLe," (ProphetNet model)"),cLe.forEach(t),rco=i(S),Cs=n(S,"LI",{});var Ck=s(Cs);Mse=n(Ck,"STRONG",{});var Hrt=s(Mse);tco=r(Hrt,"qdqbert"),Hrt.forEach(t),aco=r(Ck," \u2014 "),eI=n(Ck,"A",{href:!0});var Urt=s(eI);nco=r(Urt,"BertTokenizer"),Urt.forEach(t),sco=r(Ck," or "),oI=n(Ck,"A",{href:!0});var Jrt=s(oI);lco=r(Jrt,"BertTokenizerFast"),Jrt.forEach(t),ico=r(Ck," (QDQBert model)"),Ck.forEach(t),dco=i(S),fh=n(S,"LI",{});var fLe=s(fh);Ese=n(fLe,"STRONG",{});var Yrt=s(Ese);cco=r(Yrt,"rag"),Yrt.forEach(t),fco=r(fLe," \u2014 "),rI=n(fLe,"A",{href:!0});var Krt=s(rI);mco=r(Krt,"RagTokenizer"),Krt.forEach(t),gco=r(fLe," (RAG model)"),fLe.forEach(t),hco=i(S),ws=n(S,"LI",{});var wk=s(ws);Cse=n(wk,"STRONG",{});var Zrt=s(Cse);pco=r(Zrt,"realm"),Zrt.forEach(t),uco=r(wk," \u2014 "),tI=n(wk,"A",{href:!0});var ett=s(tI);_co=r(ett,"RealmTokenizer"),ett.forEach(t),bco=r(wk," or "),aI=n(wk,"A",{href:!0});var ott=s(aI);vco=r(ott,"RealmTokenizerFast"),ott.forEach(t),Fco=r(wk," (REALM model)"),wk.forEach(t),Tco=i(S),As=n(S,"LI",{});var Ak=s(As);wse=n(Ak,"STRONG",{});var rtt=s(wse);Mco=r(rtt,"reformer"),rtt.forEach(t),Eco=r(Ak," \u2014 "),nI=n(Ak,"A",{href:!0});var ttt=s(nI);Cco=r(ttt,"ReformerTokenizer"),ttt.forEach(t),wco=r(Ak," or "),sI=n(Ak,"A",{href:!0});var att=s(sI);Aco=r(att,"ReformerTokenizerFast"),att.forEach(t),Lco=r(Ak," (Reformer model)"),Ak.forEach(t),yco=i(S),Ls=n(S,"LI",{});var Lk=s(Ls);Ase=n(Lk,"STRONG",{});var ntt=s(Ase);xco=r(ntt,"rembert"),ntt.forEach(t),$co=r(Lk," \u2014 "),lI=n(Lk,"A",{href:!0});var stt=s(lI);kco=r(stt,"RemBertTokenizer"),stt.forEach(t),Sco=r(Lk," or "),iI=n(Lk,"A",{href:!0});var ltt=s(iI);Rco=r(ltt,"RemBertTokenizerFast"),ltt.forEach(t),Pco=r(Lk," (RemBERT model)"),Lk.forEach(t),Bco=i(S),ys=n(S,"LI",{});var yk=s(ys);Lse=n(yk,"STRONG",{});var itt=s(Lse);Ico=r(itt,"retribert"),itt.forEach(t),Nco=r(yk," \u2014 "),dI=n(yk,"A",{href:!0});var dtt=s(dI);qco=r(dtt,"RetriBertTokenizer"),dtt.forEach(t),jco=r(yk," or "),cI=n(yk,"A",{href:!0});var ctt=s(cI);Dco=r(ctt,"RetriBertTokenizerFast"),ctt.forEach(t),Gco=r(yk," (RetriBERT model)"),yk.forEach(t),Oco=i(S),xs=n(S,"LI",{});var xk=s(xs);yse=n(xk,"STRONG",{});var ftt=s(yse);Vco=r(ftt,"roberta"),ftt.forEach(t),Xco=r(xk," \u2014 "),fI=n(xk,"A",{href:!0});var mtt=s(fI);zco=r(mtt,"RobertaTokenizer"),mtt.forEach(t),Wco=r(xk," or "),mI=n(xk,"A",{href:!0});var gtt=s(mI);Qco=r(gtt,"RobertaTokenizerFast"),gtt.forEach(t),Hco=r(xk," (RoBERTa model)"),xk.forEach(t),Uco=i(S),$s=n(S,"LI",{});var $k=s($s);xse=n($k,"STRONG",{});var htt=s(xse);Jco=r(htt,"roformer"),htt.forEach(t),Yco=r($k," \u2014 "),gI=n($k,"A",{href:!0});var ptt=s(gI);Kco=r(ptt,"RoFormerTokenizer"),ptt.forEach(t),Zco=r($k," or "),hI=n($k,"A",{href:!0});var utt=s(hI);efo=r(utt,"RoFormerTokenizerFast"),utt.forEach(t),ofo=r($k," (RoFormer model)"),$k.forEach(t),rfo=i(S),mh=n(S,"LI",{});var mLe=s(mh);$se=n(mLe,"STRONG",{});var _tt=s($se);tfo=r(_tt,"speech_to_text"),_tt.forEach(t),afo=r(mLe," \u2014 "),pI=n(mLe,"A",{href:!0});var btt=s(pI);nfo=r(btt,"Speech2TextTokenizer"),btt.forEach(t),sfo=r(mLe," (Speech2Text model)"),mLe.forEach(t),lfo=i(S),gh=n(S,"LI",{});var gLe=s(gh);kse=n(gLe,"STRONG",{});var vtt=s(kse);ifo=r(vtt,"speech_to_text_2"),vtt.forEach(t),dfo=r(gLe," \u2014 "),uI=n(gLe,"A",{href:!0});var Ftt=s(uI);cfo=r(Ftt,"Speech2Text2Tokenizer"),Ftt.forEach(t),ffo=r(gLe," (Speech2Text2 model)"),gLe.forEach(t),mfo=i(S),ks=n(S,"LI",{});var kk=s(ks);Sse=n(kk,"STRONG",{});var Ttt=s(Sse);gfo=r(Ttt,"splinter"),Ttt.forEach(t),hfo=r(kk," \u2014 "),_I=n(kk,"A",{href:!0});var Mtt=s(_I);pfo=r(Mtt,"SplinterTokenizer"),Mtt.forEach(t),ufo=r(kk," or "),bI=n(kk,"A",{href:!0});var Ett=s(bI);_fo=r(Ett,"SplinterTokenizerFast"),Ett.forEach(t),bfo=r(kk," (Splinter model)"),kk.forEach(t),vfo=i(S),Ss=n(S,"LI",{});var Sk=s(Ss);Rse=n(Sk,"STRONG",{});var Ctt=s(Rse);Ffo=r(Ctt,"squeezebert"),Ctt.forEach(t),Tfo=r(Sk," \u2014 "),vI=n(Sk,"A",{href:!0});var wtt=s(vI);Mfo=r(wtt,"SqueezeBertTokenizer"),wtt.forEach(t),Efo=r(Sk," or "),FI=n(Sk,"A",{href:!0});var Att=s(FI);Cfo=r(Att,"SqueezeBertTokenizerFast"),Att.forEach(t),wfo=r(Sk," (SqueezeBERT model)"),Sk.forEach(t),Afo=i(S),Rs=n(S,"LI",{});var Rk=s(Rs);Pse=n(Rk,"STRONG",{});var Ltt=s(Pse);Lfo=r(Ltt,"t5"),Ltt.forEach(t),yfo=r(Rk," \u2014 "),TI=n(Rk,"A",{href:!0});var ytt=s(TI);xfo=r(ytt,"T5Tokenizer"),ytt.forEach(t),$fo=r(Rk," or "),MI=n(Rk,"A",{href:!0});var xtt=s(MI);kfo=r(xtt,"T5TokenizerFast"),xtt.forEach(t),Sfo=r(Rk," (T5 model)"),Rk.forEach(t),Rfo=i(S),hh=n(S,"LI",{});var hLe=s(hh);Bse=n(hLe,"STRONG",{});var $tt=s(Bse);Pfo=r($tt,"tapas"),$tt.forEach(t),Bfo=r(hLe," \u2014 "),EI=n(hLe,"A",{href:!0});var ktt=s(EI);Ifo=r(ktt,"TapasTokenizer"),ktt.forEach(t),Nfo=r(hLe," (TAPAS model)"),hLe.forEach(t),qfo=i(S),ph=n(S,"LI",{});var pLe=s(ph);Ise=n(pLe,"STRONG",{});var Stt=s(Ise);jfo=r(Stt,"tapex"),Stt.forEach(t),Dfo=r(pLe," \u2014 "),CI=n(pLe,"A",{href:!0});var Rtt=s(CI);Gfo=r(Rtt,"TapexTokenizer"),Rtt.forEach(t),Ofo=r(pLe," (TAPEX model)"),pLe.forEach(t),Vfo=i(S),uh=n(S,"LI",{});var uLe=s(uh);Nse=n(uLe,"STRONG",{});var Ptt=s(Nse);Xfo=r(Ptt,"transfo-xl"),Ptt.forEach(t),zfo=r(uLe," \u2014 "),wI=n(uLe,"A",{href:!0});var Btt=s(wI);Wfo=r(Btt,"TransfoXLTokenizer"),Btt.forEach(t),Qfo=r(uLe," (Transformer-XL model)"),uLe.forEach(t),Hfo=i(S),Ps=n(S,"LI",{});var Pk=s(Ps);qse=n(Pk,"STRONG",{});var Itt=s(qse);Ufo=r(Itt,"vilt"),Itt.forEach(t),Jfo=r(Pk," \u2014 "),AI=n(Pk,"A",{href:!0});var Ntt=s(AI);Yfo=r(Ntt,"BertTokenizer"),Ntt.forEach(t),Kfo=r(Pk," or "),LI=n(Pk,"A",{href:!0});var qtt=s(LI);Zfo=r(qtt,"BertTokenizerFast"),qtt.forEach(t),emo=r(Pk," (ViLT model)"),Pk.forEach(t),omo=i(S),Bs=n(S,"LI",{});var Bk=s(Bs);jse=n(Bk,"STRONG",{});var jtt=s(jse);rmo=r(jtt,"visual_bert"),jtt.forEach(t),tmo=r(Bk," \u2014 "),yI=n(Bk,"A",{href:!0});var Dtt=s(yI);amo=r(Dtt,"BertTokenizer"),Dtt.forEach(t),nmo=r(Bk," or "),xI=n(Bk,"A",{href:!0});var Gtt=s(xI);smo=r(Gtt,"BertTokenizerFast"),Gtt.forEach(t),lmo=r(Bk," (VisualBERT model)"),Bk.forEach(t),imo=i(S),_h=n(S,"LI",{});var _Le=s(_h);Dse=n(_Le,"STRONG",{});var Ott=s(Dse);dmo=r(Ott,"wav2vec2"),Ott.forEach(t),cmo=r(_Le," \u2014 "),$I=n(_Le,"A",{href:!0});var Vtt=s($I);fmo=r(Vtt,"Wav2Vec2CTCTokenizer"),Vtt.forEach(t),mmo=r(_Le," (Wav2Vec2 model)"),_Le.forEach(t),gmo=i(S),bh=n(S,"LI",{});var bLe=s(bh);Gse=n(bLe,"STRONG",{});var Xtt=s(Gse);hmo=r(Xtt,"wav2vec2-conformer"),Xtt.forEach(t),pmo=r(bLe," \u2014 "),kI=n(bLe,"A",{href:!0});var ztt=s(kI);umo=r(ztt,"Wav2Vec2CTCTokenizer"),ztt.forEach(t),_mo=r(bLe," (Wav2Vec2-Conformer model)"),bLe.forEach(t),bmo=i(S),vh=n(S,"LI",{});var vLe=s(vh);Ose=n(vLe,"STRONG",{});var Wtt=s(Ose);vmo=r(Wtt,"wav2vec2_phoneme"),Wtt.forEach(t),Fmo=r(vLe," \u2014 "),SI=n(vLe,"A",{href:!0});var Qtt=s(SI);Tmo=r(Qtt,"Wav2Vec2PhonemeCTCTokenizer"),Qtt.forEach(t),Mmo=r(vLe," (Wav2Vec2Phoneme model)"),vLe.forEach(t),Emo=i(S),Is=n(S,"LI",{});var Ik=s(Is);Vse=n(Ik,"STRONG",{});var Htt=s(Vse);Cmo=r(Htt,"xglm"),Htt.forEach(t),wmo=r(Ik," \u2014 "),RI=n(Ik,"A",{href:!0});var Utt=s(RI);Amo=r(Utt,"XGLMTokenizer"),Utt.forEach(t),Lmo=r(Ik," or "),PI=n(Ik,"A",{href:!0});var Jtt=s(PI);ymo=r(Jtt,"XGLMTokenizerFast"),Jtt.forEach(t),xmo=r(Ik," (XGLM model)"),Ik.forEach(t),$mo=i(S),Fh=n(S,"LI",{});var FLe=s(Fh);Xse=n(FLe,"STRONG",{});var Ytt=s(Xse);kmo=r(Ytt,"xlm"),Ytt.forEach(t),Smo=r(FLe," \u2014 "),BI=n(FLe,"A",{href:!0});var Ktt=s(BI);Rmo=r(Ktt,"XLMTokenizer"),Ktt.forEach(t),Pmo=r(FLe," (XLM model)"),FLe.forEach(t),Bmo=i(S),Th=n(S,"LI",{});var TLe=s(Th);zse=n(TLe,"STRONG",{});var Ztt=s(zse);Imo=r(Ztt,"xlm-prophetnet"),Ztt.forEach(t),Nmo=r(TLe," \u2014 "),II=n(TLe,"A",{href:!0});var eat=s(II);qmo=r(eat,"XLMProphetNetTokenizer"),eat.forEach(t),jmo=r(TLe," (XLM-ProphetNet model)"),TLe.forEach(t),Dmo=i(S),Ns=n(S,"LI",{});var Nk=s(Ns);Wse=n(Nk,"STRONG",{});var oat=s(Wse);Gmo=r(oat,"xlm-roberta"),oat.forEach(t),Omo=r(Nk," \u2014 "),NI=n(Nk,"A",{href:!0});var rat=s(NI);Vmo=r(rat,"XLMRobertaTokenizer"),rat.forEach(t),Xmo=r(Nk," or "),qI=n(Nk,"A",{href:!0});var tat=s(qI);zmo=r(tat,"XLMRobertaTokenizerFast"),tat.forEach(t),Wmo=r(Nk," (XLM-RoBERTa model)"),Nk.forEach(t),Qmo=i(S),qs=n(S,"LI",{});var qk=s(qs);Qse=n(qk,"STRONG",{});var aat=s(Qse);Hmo=r(aat,"xlm-roberta-xl"),aat.forEach(t),Umo=r(qk," \u2014 "),jI=n(qk,"A",{href:!0});var nat=s(jI);Jmo=r(nat,"RobertaTokenizer"),nat.forEach(t),Ymo=r(qk," or "),DI=n(qk,"A",{href:!0});var sat=s(DI);Kmo=r(sat,"RobertaTokenizerFast"),sat.forEach(t),Zmo=r(qk," (XLM-RoBERTa-XL model)"),qk.forEach(t),ego=i(S),js=n(S,"LI",{});var jk=s(js);Hse=n(jk,"STRONG",{});var lat=s(Hse);ogo=r(lat,"xlnet"),lat.forEach(t),rgo=r(jk," \u2014 "),GI=n(jk,"A",{href:!0});var iat=s(GI);tgo=r(iat,"XLNetTokenizer"),iat.forEach(t),ago=r(jk," or "),OI=n(jk,"A",{href:!0});var dat=s(OI);ngo=r(dat,"XLNetTokenizerFast"),dat.forEach(t),sgo=r(jk," (XLNet model)"),jk.forEach(t),lgo=i(S),Ds=n(S,"LI",{});var Dk=s(Ds);Use=n(Dk,"STRONG",{});var cat=s(Use);igo=r(cat,"yoso"),cat.forEach(t),dgo=r(Dk," \u2014 "),VI=n(Dk,"A",{href:!0});var fat=s(VI);cgo=r(fat,"AlbertTokenizer"),fat.forEach(t),fgo=r(Dk," or "),XI=n(Dk,"A",{href:!0});var mat=s(XI);mgo=r(mat,"AlbertTokenizerFast"),mat.forEach(t),ggo=r(Dk," (YOSO model)"),Dk.forEach(t),S.forEach(t),hgo=i(Ws),T(Mh.$$.fragment,Ws),Ws.forEach(t),pgo=i(zs),Eh=n(zs,"DIV",{class:!0});var iVe=s(Eh);T(SL.$$.fragment,iVe),ugo=i(iVe),Jse=n(iVe,"P",{});var gat=s(Jse);_go=r(gat,"Register a new tokenizer in this mapping."),gat.forEach(t),iVe.forEach(t),zs.forEach(t),lGe=i(f),Si=n(f,"H2",{class:!0});var dVe=s(Si);Ch=n(dVe,"A",{id:!0,class:!0,href:!0});var hat=s(Ch);Yse=n(hat,"SPAN",{});var pat=s(Yse);T(RL.$$.fragment,pat),pat.forEach(t),hat.forEach(t),bgo=i(dVe),Kse=n(dVe,"SPAN",{});var uat=s(Kse);vgo=r(uat,"AutoFeatureExtractor"),uat.forEach(t),dVe.forEach(t),iGe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(PL.$$.fragment,Qs),Fgo=i(Qs),BL=n(Qs,"P",{});var cVe=s(BL);Tgo=r(cVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zI=n(cVe,"A",{href:!0});var _at=s(zI);Mgo=r(_at,"AutoFeatureExtractor.from_pretrained()"),_at.forEach(t),Ego=r(cVe," class method."),cVe.forEach(t),Cgo=i(Qs),IL=n(Qs,"P",{});var fVe=s(IL);wgo=r(fVe,"This class cannot be instantiated directly using "),Zse=n(fVe,"CODE",{});var bat=s(Zse);Ago=r(bat,"__init__()"),bat.forEach(t),Lgo=r(fVe," (throws an error)."),fVe.forEach(t),ygo=i(Qs),He=n(Qs,"DIV",{class:!0});var ta=s(He);T(NL.$$.fragment,ta),xgo=i(ta),ele=n(ta,"P",{});var vat=s(ele);$go=r(vat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),vat.forEach(t),kgo=i(ta),Sa=n(ta,"P",{});var TA=s(Sa);Sgo=r(TA,"The feature extractor class to instantiate is selected based on the "),ole=n(TA,"CODE",{});var Fat=s(ole);Rgo=r(Fat,"model_type"),Fat.forEach(t),Pgo=r(TA,` property of the config object
(either passed as an argument or loaded from `),rle=n(TA,"CODE",{});var Tat=s(rle);Bgo=r(Tat,"pretrained_model_name_or_path"),Tat.forEach(t),Igo=r(TA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),tle=n(TA,"CODE",{});var Mat=s(tle);Ngo=r(Mat,"pretrained_model_name_or_path"),Mat.forEach(t),qgo=r(TA,":"),TA.forEach(t),jgo=i(ta),Y=n(ta,"UL",{});var K=s(Y);wh=n(K,"LI",{});var MLe=s(wh);ale=n(MLe,"STRONG",{});var Eat=s(ale);Dgo=r(Eat,"beit"),Eat.forEach(t),Ggo=r(MLe," \u2014 "),WI=n(MLe,"A",{href:!0});var Cat=s(WI);Ogo=r(Cat,"BeitFeatureExtractor"),Cat.forEach(t),Vgo=r(MLe," (BEiT model)"),MLe.forEach(t),Xgo=i(K),Ah=n(K,"LI",{});var ELe=s(Ah);nle=n(ELe,"STRONG",{});var wat=s(nle);zgo=r(wat,"clip"),wat.forEach(t),Wgo=r(ELe," \u2014 "),QI=n(ELe,"A",{href:!0});var Aat=s(QI);Qgo=r(Aat,"CLIPFeatureExtractor"),Aat.forEach(t),Hgo=r(ELe," (CLIP model)"),ELe.forEach(t),Ugo=i(K),Lh=n(K,"LI",{});var CLe=s(Lh);sle=n(CLe,"STRONG",{});var Lat=s(sle);Jgo=r(Lat,"convnext"),Lat.forEach(t),Ygo=r(CLe," \u2014 "),HI=n(CLe,"A",{href:!0});var yat=s(HI);Kgo=r(yat,"ConvNextFeatureExtractor"),yat.forEach(t),Zgo=r(CLe," (ConvNeXT model)"),CLe.forEach(t),eho=i(K),yh=n(K,"LI",{});var wLe=s(yh);lle=n(wLe,"STRONG",{});var xat=s(lle);oho=r(xat,"cvt"),xat.forEach(t),rho=r(wLe," \u2014 "),UI=n(wLe,"A",{href:!0});var $at=s(UI);tho=r($at,"ConvNextFeatureExtractor"),$at.forEach(t),aho=r(wLe," (CvT model)"),wLe.forEach(t),nho=i(K),xh=n(K,"LI",{});var ALe=s(xh);ile=n(ALe,"STRONG",{});var kat=s(ile);sho=r(kat,"data2vec-audio"),kat.forEach(t),lho=r(ALe," \u2014 "),JI=n(ALe,"A",{href:!0});var Sat=s(JI);iho=r(Sat,"Wav2Vec2FeatureExtractor"),Sat.forEach(t),dho=r(ALe," (Data2VecAudio model)"),ALe.forEach(t),cho=i(K),$h=n(K,"LI",{});var LLe=s($h);dle=n(LLe,"STRONG",{});var Rat=s(dle);fho=r(Rat,"data2vec-vision"),Rat.forEach(t),mho=r(LLe," \u2014 "),YI=n(LLe,"A",{href:!0});var Pat=s(YI);gho=r(Pat,"BeitFeatureExtractor"),Pat.forEach(t),hho=r(LLe," (Data2VecVision model)"),LLe.forEach(t),pho=i(K),kh=n(K,"LI",{});var yLe=s(kh);cle=n(yLe,"STRONG",{});var Bat=s(cle);uho=r(Bat,"deit"),Bat.forEach(t),_ho=r(yLe," \u2014 "),KI=n(yLe,"A",{href:!0});var Iat=s(KI);bho=r(Iat,"DeiTFeatureExtractor"),Iat.forEach(t),vho=r(yLe," (DeiT model)"),yLe.forEach(t),Fho=i(K),Sh=n(K,"LI",{});var xLe=s(Sh);fle=n(xLe,"STRONG",{});var Nat=s(fle);Tho=r(Nat,"detr"),Nat.forEach(t),Mho=r(xLe," \u2014 "),ZI=n(xLe,"A",{href:!0});var qat=s(ZI);Eho=r(qat,"DetrFeatureExtractor"),qat.forEach(t),Cho=r(xLe," (DETR model)"),xLe.forEach(t),who=i(K),Rh=n(K,"LI",{});var $Le=s(Rh);mle=n($Le,"STRONG",{});var jat=s(mle);Aho=r(jat,"dpt"),jat.forEach(t),Lho=r($Le," \u2014 "),eN=n($Le,"A",{href:!0});var Dat=s(eN);yho=r(Dat,"DPTFeatureExtractor"),Dat.forEach(t),xho=r($Le," (DPT model)"),$Le.forEach(t),$ho=i(K),Ph=n(K,"LI",{});var kLe=s(Ph);gle=n(kLe,"STRONG",{});var Gat=s(gle);kho=r(Gat,"flava"),Gat.forEach(t),Sho=r(kLe," \u2014 "),oN=n(kLe,"A",{href:!0});var Oat=s(oN);Rho=r(Oat,"FlavaFeatureExtractor"),Oat.forEach(t),Pho=r(kLe," (FLAVA model)"),kLe.forEach(t),Bho=i(K),Bh=n(K,"LI",{});var SLe=s(Bh);hle=n(SLe,"STRONG",{});var Vat=s(hle);Iho=r(Vat,"glpn"),Vat.forEach(t),Nho=r(SLe," \u2014 "),rN=n(SLe,"A",{href:!0});var Xat=s(rN);qho=r(Xat,"GLPNFeatureExtractor"),Xat.forEach(t),jho=r(SLe," (GLPN model)"),SLe.forEach(t),Dho=i(K),Ih=n(K,"LI",{});var RLe=s(Ih);ple=n(RLe,"STRONG",{});var zat=s(ple);Gho=r(zat,"hubert"),zat.forEach(t),Oho=r(RLe," \u2014 "),tN=n(RLe,"A",{href:!0});var Wat=s(tN);Vho=r(Wat,"Wav2Vec2FeatureExtractor"),Wat.forEach(t),Xho=r(RLe," (Hubert model)"),RLe.forEach(t),zho=i(K),Nh=n(K,"LI",{});var PLe=s(Nh);ule=n(PLe,"STRONG",{});var Qat=s(ule);Who=r(Qat,"imagegpt"),Qat.forEach(t),Qho=r(PLe," \u2014 "),aN=n(PLe,"A",{href:!0});var Hat=s(aN);Hho=r(Hat,"ImageGPTFeatureExtractor"),Hat.forEach(t),Uho=r(PLe," (ImageGPT model)"),PLe.forEach(t),Jho=i(K),qh=n(K,"LI",{});var BLe=s(qh);_le=n(BLe,"STRONG",{});var Uat=s(_le);Yho=r(Uat,"layoutlmv2"),Uat.forEach(t),Kho=r(BLe," \u2014 "),nN=n(BLe,"A",{href:!0});var Jat=s(nN);Zho=r(Jat,"LayoutLMv2FeatureExtractor"),Jat.forEach(t),epo=r(BLe," (LayoutLMv2 model)"),BLe.forEach(t),opo=i(K),jh=n(K,"LI",{});var ILe=s(jh);ble=n(ILe,"STRONG",{});var Yat=s(ble);rpo=r(Yat,"layoutlmv3"),Yat.forEach(t),tpo=r(ILe," \u2014 "),sN=n(ILe,"A",{href:!0});var Kat=s(sN);apo=r(Kat,"LayoutLMv3FeatureExtractor"),Kat.forEach(t),npo=r(ILe," (LayoutLMv3 model)"),ILe.forEach(t),spo=i(K),Dh=n(K,"LI",{});var NLe=s(Dh);vle=n(NLe,"STRONG",{});var Zat=s(vle);lpo=r(Zat,"levit"),Zat.forEach(t),ipo=r(NLe," \u2014 "),lN=n(NLe,"A",{href:!0});var ent=s(lN);dpo=r(ent,"LevitFeatureExtractor"),ent.forEach(t),cpo=r(NLe," (LeViT model)"),NLe.forEach(t),fpo=i(K),Gh=n(K,"LI",{});var qLe=s(Gh);Fle=n(qLe,"STRONG",{});var ont=s(Fle);mpo=r(ont,"maskformer"),ont.forEach(t),gpo=r(qLe," \u2014 "),iN=n(qLe,"A",{href:!0});var rnt=s(iN);hpo=r(rnt,"MaskFormerFeatureExtractor"),rnt.forEach(t),ppo=r(qLe," (MaskFormer model)"),qLe.forEach(t),upo=i(K),Oh=n(K,"LI",{});var jLe=s(Oh);Tle=n(jLe,"STRONG",{});var tnt=s(Tle);_po=r(tnt,"mctct"),tnt.forEach(t),bpo=r(jLe," \u2014 "),dN=n(jLe,"A",{href:!0});var ant=s(dN);vpo=r(ant,"MCTCTFeatureExtractor"),ant.forEach(t),Fpo=r(jLe," (M-CTC-T model)"),jLe.forEach(t),Tpo=i(K),Vh=n(K,"LI",{});var DLe=s(Vh);Mle=n(DLe,"STRONG",{});var nnt=s(Mle);Mpo=r(nnt,"perceiver"),nnt.forEach(t),Epo=r(DLe," \u2014 "),cN=n(DLe,"A",{href:!0});var snt=s(cN);Cpo=r(snt,"PerceiverFeatureExtractor"),snt.forEach(t),wpo=r(DLe," (Perceiver model)"),DLe.forEach(t),Apo=i(K),Xh=n(K,"LI",{});var GLe=s(Xh);Ele=n(GLe,"STRONG",{});var lnt=s(Ele);Lpo=r(lnt,"poolformer"),lnt.forEach(t),ypo=r(GLe," \u2014 "),fN=n(GLe,"A",{href:!0});var int=s(fN);xpo=r(int,"PoolFormerFeatureExtractor"),int.forEach(t),$po=r(GLe," (PoolFormer model)"),GLe.forEach(t),kpo=i(K),zh=n(K,"LI",{});var OLe=s(zh);Cle=n(OLe,"STRONG",{});var dnt=s(Cle);Spo=r(dnt,"regnet"),dnt.forEach(t),Rpo=r(OLe," \u2014 "),mN=n(OLe,"A",{href:!0});var cnt=s(mN);Ppo=r(cnt,"ConvNextFeatureExtractor"),cnt.forEach(t),Bpo=r(OLe," (RegNet model)"),OLe.forEach(t),Ipo=i(K),Wh=n(K,"LI",{});var VLe=s(Wh);wle=n(VLe,"STRONG",{});var fnt=s(wle);Npo=r(fnt,"resnet"),fnt.forEach(t),qpo=r(VLe," \u2014 "),gN=n(VLe,"A",{href:!0});var mnt=s(gN);jpo=r(mnt,"ConvNextFeatureExtractor"),mnt.forEach(t),Dpo=r(VLe," (ResNet model)"),VLe.forEach(t),Gpo=i(K),Qh=n(K,"LI",{});var XLe=s(Qh);Ale=n(XLe,"STRONG",{});var gnt=s(Ale);Opo=r(gnt,"segformer"),gnt.forEach(t),Vpo=r(XLe," \u2014 "),hN=n(XLe,"A",{href:!0});var hnt=s(hN);Xpo=r(hnt,"SegformerFeatureExtractor"),hnt.forEach(t),zpo=r(XLe," (SegFormer model)"),XLe.forEach(t),Wpo=i(K),Hh=n(K,"LI",{});var zLe=s(Hh);Lle=n(zLe,"STRONG",{});var pnt=s(Lle);Qpo=r(pnt,"speech_to_text"),pnt.forEach(t),Hpo=r(zLe," \u2014 "),pN=n(zLe,"A",{href:!0});var unt=s(pN);Upo=r(unt,"Speech2TextFeatureExtractor"),unt.forEach(t),Jpo=r(zLe," (Speech2Text model)"),zLe.forEach(t),Ypo=i(K),Uh=n(K,"LI",{});var WLe=s(Uh);yle=n(WLe,"STRONG",{});var _nt=s(yle);Kpo=r(_nt,"swin"),_nt.forEach(t),Zpo=r(WLe," \u2014 "),uN=n(WLe,"A",{href:!0});var bnt=s(uN);euo=r(bnt,"ViTFeatureExtractor"),bnt.forEach(t),ouo=r(WLe," (Swin Transformer model)"),WLe.forEach(t),ruo=i(K),Jh=n(K,"LI",{});var QLe=s(Jh);xle=n(QLe,"STRONG",{});var vnt=s(xle);tuo=r(vnt,"van"),vnt.forEach(t),auo=r(QLe," \u2014 "),_N=n(QLe,"A",{href:!0});var Fnt=s(_N);nuo=r(Fnt,"ConvNextFeatureExtractor"),Fnt.forEach(t),suo=r(QLe," (VAN model)"),QLe.forEach(t),luo=i(K),Yh=n(K,"LI",{});var HLe=s(Yh);$le=n(HLe,"STRONG",{});var Tnt=s($le);iuo=r(Tnt,"vilt"),Tnt.forEach(t),duo=r(HLe," \u2014 "),bN=n(HLe,"A",{href:!0});var Mnt=s(bN);cuo=r(Mnt,"ViltFeatureExtractor"),Mnt.forEach(t),fuo=r(HLe," (ViLT model)"),HLe.forEach(t),muo=i(K),Kh=n(K,"LI",{});var ULe=s(Kh);kle=n(ULe,"STRONG",{});var Ent=s(kle);guo=r(Ent,"vit"),Ent.forEach(t),huo=r(ULe," \u2014 "),vN=n(ULe,"A",{href:!0});var Cnt=s(vN);puo=r(Cnt,"ViTFeatureExtractor"),Cnt.forEach(t),uuo=r(ULe," (ViT model)"),ULe.forEach(t),_uo=i(K),Zh=n(K,"LI",{});var JLe=s(Zh);Sle=n(JLe,"STRONG",{});var wnt=s(Sle);buo=r(wnt,"vit_mae"),wnt.forEach(t),vuo=r(JLe," \u2014 "),FN=n(JLe,"A",{href:!0});var Ant=s(FN);Fuo=r(Ant,"ViTFeatureExtractor"),Ant.forEach(t),Tuo=r(JLe," (ViTMAE model)"),JLe.forEach(t),Muo=i(K),ep=n(K,"LI",{});var YLe=s(ep);Rle=n(YLe,"STRONG",{});var Lnt=s(Rle);Euo=r(Lnt,"wav2vec2"),Lnt.forEach(t),Cuo=r(YLe," \u2014 "),TN=n(YLe,"A",{href:!0});var ynt=s(TN);wuo=r(ynt,"Wav2Vec2FeatureExtractor"),ynt.forEach(t),Auo=r(YLe," (Wav2Vec2 model)"),YLe.forEach(t),Luo=i(K),op=n(K,"LI",{});var KLe=s(op);Ple=n(KLe,"STRONG",{});var xnt=s(Ple);yuo=r(xnt,"wav2vec2-conformer"),xnt.forEach(t),xuo=r(KLe," \u2014 "),MN=n(KLe,"A",{href:!0});var $nt=s(MN);$uo=r($nt,"Wav2Vec2FeatureExtractor"),$nt.forEach(t),kuo=r(KLe," (Wav2Vec2-Conformer model)"),KLe.forEach(t),Suo=i(K),rp=n(K,"LI",{});var ZLe=s(rp);Ble=n(ZLe,"STRONG",{});var knt=s(Ble);Ruo=r(knt,"yolos"),knt.forEach(t),Puo=r(ZLe," \u2014 "),EN=n(ZLe,"A",{href:!0});var Snt=s(EN);Buo=r(Snt,"YolosFeatureExtractor"),Snt.forEach(t),Iuo=r(ZLe," (YOLOS model)"),ZLe.forEach(t),K.forEach(t),Nuo=i(ta),T(tp.$$.fragment,ta),quo=i(ta),T(ap.$$.fragment,ta),ta.forEach(t),juo=i(Qs),np=n(Qs,"DIV",{class:!0});var mVe=s(np);T(qL.$$.fragment,mVe),Duo=i(mVe),Ile=n(mVe,"P",{});var Rnt=s(Ile);Guo=r(Rnt,"Register a new feature extractor for this class."),Rnt.forEach(t),mVe.forEach(t),Qs.forEach(t),dGe=i(f),Ri=n(f,"H2",{class:!0});var gVe=s(Ri);sp=n(gVe,"A",{id:!0,class:!0,href:!0});var Pnt=s(sp);Nle=n(Pnt,"SPAN",{});var Bnt=s(Nle);T(jL.$$.fragment,Bnt),Bnt.forEach(t),Pnt.forEach(t),Ouo=i(gVe),qle=n(gVe,"SPAN",{});var Int=s(qle);Vuo=r(Int,"AutoProcessor"),Int.forEach(t),gVe.forEach(t),cGe=i(f),yo=n(f,"DIV",{class:!0});var Hs=s(yo);T(DL.$$.fragment,Hs),Xuo=i(Hs),GL=n(Hs,"P",{});var hVe=s(GL);zuo=r(hVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),CN=n(hVe,"A",{href:!0});var Nnt=s(CN);Wuo=r(Nnt,"AutoProcessor.from_pretrained()"),Nnt.forEach(t),Quo=r(hVe," class method."),hVe.forEach(t),Huo=i(Hs),OL=n(Hs,"P",{});var pVe=s(OL);Uuo=r(pVe,"This class cannot be instantiated directly using "),jle=n(pVe,"CODE",{});var qnt=s(jle);Juo=r(qnt,"__init__()"),qnt.forEach(t),Yuo=r(pVe," (throws an error)."),pVe.forEach(t),Kuo=i(Hs),Ue=n(Hs,"DIV",{class:!0});var aa=s(Ue);T(VL.$$.fragment,aa),Zuo=i(aa),Dle=n(aa,"P",{});var jnt=s(Dle);e_o=r(jnt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jnt.forEach(t),o_o=i(aa),Pi=n(aa,"P",{});var Jee=s(Pi);r_o=r(Jee,"The processor class to instantiate is selected based on the "),Gle=n(Jee,"CODE",{});var Dnt=s(Gle);t_o=r(Dnt,"model_type"),Dnt.forEach(t),a_o=r(Jee,` property of the config object (either
passed as an argument or loaded from `),Ole=n(Jee,"CODE",{});var Gnt=s(Ole);n_o=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),s_o=r(Jee," if possible):"),Jee.forEach(t),l_o=i(aa),he=n(aa,"UL",{});var _e=s(he);lp=n(_e,"LI",{});var eye=s(lp);Vle=n(eye,"STRONG",{});var Ont=s(Vle);i_o=r(Ont,"clip"),Ont.forEach(t),d_o=r(eye," \u2014 "),wN=n(eye,"A",{href:!0});var Vnt=s(wN);c_o=r(Vnt,"CLIPProcessor"),Vnt.forEach(t),f_o=r(eye," (CLIP model)"),eye.forEach(t),m_o=i(_e),ip=n(_e,"LI",{});var oye=s(ip);Xle=n(oye,"STRONG",{});var Xnt=s(Xle);g_o=r(Xnt,"flava"),Xnt.forEach(t),h_o=r(oye," \u2014 "),zle=n(oye,"CODE",{});var znt=s(zle);p_o=r(znt,"FLAVAProcessor"),znt.forEach(t),u_o=r(oye," (FLAVA model)"),oye.forEach(t),__o=i(_e),dp=n(_e,"LI",{});var rye=s(dp);Wle=n(rye,"STRONG",{});var Wnt=s(Wle);b_o=r(Wnt,"layoutlmv2"),Wnt.forEach(t),v_o=r(rye," \u2014 "),AN=n(rye,"A",{href:!0});var Qnt=s(AN);F_o=r(Qnt,"LayoutLMv2Processor"),Qnt.forEach(t),T_o=r(rye," (LayoutLMv2 model)"),rye.forEach(t),M_o=i(_e),cp=n(_e,"LI",{});var tye=s(cp);Qle=n(tye,"STRONG",{});var Hnt=s(Qle);E_o=r(Hnt,"layoutlmv3"),Hnt.forEach(t),C_o=r(tye," \u2014 "),LN=n(tye,"A",{href:!0});var Unt=s(LN);w_o=r(Unt,"LayoutLMv3Processor"),Unt.forEach(t),A_o=r(tye," (LayoutLMv3 model)"),tye.forEach(t),L_o=i(_e),fp=n(_e,"LI",{});var aye=s(fp);Hle=n(aye,"STRONG",{});var Jnt=s(Hle);y_o=r(Jnt,"layoutxlm"),Jnt.forEach(t),x_o=r(aye," \u2014 "),yN=n(aye,"A",{href:!0});var Ynt=s(yN);$_o=r(Ynt,"LayoutXLMProcessor"),Ynt.forEach(t),k_o=r(aye," (LayoutXLM model)"),aye.forEach(t),S_o=i(_e),mp=n(_e,"LI",{});var nye=s(mp);Ule=n(nye,"STRONG",{});var Knt=s(Ule);R_o=r(Knt,"sew"),Knt.forEach(t),P_o=r(nye," \u2014 "),xN=n(nye,"A",{href:!0});var Znt=s(xN);B_o=r(Znt,"Wav2Vec2Processor"),Znt.forEach(t),I_o=r(nye," (SEW model)"),nye.forEach(t),N_o=i(_e),gp=n(_e,"LI",{});var sye=s(gp);Jle=n(sye,"STRONG",{});var est=s(Jle);q_o=r(est,"sew-d"),est.forEach(t),j_o=r(sye," \u2014 "),$N=n(sye,"A",{href:!0});var ost=s($N);D_o=r(ost,"Wav2Vec2Processor"),ost.forEach(t),G_o=r(sye," (SEW-D model)"),sye.forEach(t),O_o=i(_e),hp=n(_e,"LI",{});var lye=s(hp);Yle=n(lye,"STRONG",{});var rst=s(Yle);V_o=r(rst,"speech_to_text"),rst.forEach(t),X_o=r(lye," \u2014 "),kN=n(lye,"A",{href:!0});var tst=s(kN);z_o=r(tst,"Speech2TextProcessor"),tst.forEach(t),W_o=r(lye," (Speech2Text model)"),lye.forEach(t),Q_o=i(_e),pp=n(_e,"LI",{});var iye=s(pp);Kle=n(iye,"STRONG",{});var ast=s(Kle);H_o=r(ast,"speech_to_text_2"),ast.forEach(t),U_o=r(iye," \u2014 "),SN=n(iye,"A",{href:!0});var nst=s(SN);J_o=r(nst,"Speech2Text2Processor"),nst.forEach(t),Y_o=r(iye," (Speech2Text2 model)"),iye.forEach(t),K_o=i(_e),up=n(_e,"LI",{});var dye=s(up);Zle=n(dye,"STRONG",{});var sst=s(Zle);Z_o=r(sst,"trocr"),sst.forEach(t),e2o=r(dye," \u2014 "),RN=n(dye,"A",{href:!0});var lst=s(RN);o2o=r(lst,"TrOCRProcessor"),lst.forEach(t),r2o=r(dye," (TrOCR model)"),dye.forEach(t),t2o=i(_e),_p=n(_e,"LI",{});var cye=s(_p);eie=n(cye,"STRONG",{});var ist=s(eie);a2o=r(ist,"unispeech"),ist.forEach(t),n2o=r(cye," \u2014 "),PN=n(cye,"A",{href:!0});var dst=s(PN);s2o=r(dst,"Wav2Vec2Processor"),dst.forEach(t),l2o=r(cye," (UniSpeech model)"),cye.forEach(t),i2o=i(_e),bp=n(_e,"LI",{});var fye=s(bp);oie=n(fye,"STRONG",{});var cst=s(oie);d2o=r(cst,"unispeech-sat"),cst.forEach(t),c2o=r(fye," \u2014 "),BN=n(fye,"A",{href:!0});var fst=s(BN);f2o=r(fst,"Wav2Vec2Processor"),fst.forEach(t),m2o=r(fye," (UniSpeechSat model)"),fye.forEach(t),g2o=i(_e),vp=n(_e,"LI",{});var mye=s(vp);rie=n(mye,"STRONG",{});var mst=s(rie);h2o=r(mst,"vilt"),mst.forEach(t),p2o=r(mye," \u2014 "),IN=n(mye,"A",{href:!0});var gst=s(IN);u2o=r(gst,"ViltProcessor"),gst.forEach(t),_2o=r(mye," (ViLT model)"),mye.forEach(t),b2o=i(_e),Fp=n(_e,"LI",{});var gye=s(Fp);tie=n(gye,"STRONG",{});var hst=s(tie);v2o=r(hst,"vision-text-dual-encoder"),hst.forEach(t),F2o=r(gye," \u2014 "),NN=n(gye,"A",{href:!0});var pst=s(NN);T2o=r(pst,"VisionTextDualEncoderProcessor"),pst.forEach(t),M2o=r(gye," (VisionTextDualEncoder model)"),gye.forEach(t),E2o=i(_e),Tp=n(_e,"LI",{});var hye=s(Tp);aie=n(hye,"STRONG",{});var ust=s(aie);C2o=r(ust,"wav2vec2"),ust.forEach(t),w2o=r(hye," \u2014 "),qN=n(hye,"A",{href:!0});var _st=s(qN);A2o=r(_st,"Wav2Vec2Processor"),_st.forEach(t),L2o=r(hye," (Wav2Vec2 model)"),hye.forEach(t),y2o=i(_e),Mp=n(_e,"LI",{});var pye=s(Mp);nie=n(pye,"STRONG",{});var bst=s(nie);x2o=r(bst,"wav2vec2-conformer"),bst.forEach(t),$2o=r(pye," \u2014 "),jN=n(pye,"A",{href:!0});var vst=s(jN);k2o=r(vst,"Wav2Vec2Processor"),vst.forEach(t),S2o=r(pye," (Wav2Vec2-Conformer model)"),pye.forEach(t),R2o=i(_e),Ep=n(_e,"LI",{});var uye=s(Ep);sie=n(uye,"STRONG",{});var Fst=s(sie);P2o=r(Fst,"wavlm"),Fst.forEach(t),B2o=r(uye," \u2014 "),DN=n(uye,"A",{href:!0});var Tst=s(DN);I2o=r(Tst,"Wav2Vec2Processor"),Tst.forEach(t),N2o=r(uye," (WavLM model)"),uye.forEach(t),_e.forEach(t),q2o=i(aa),T(Cp.$$.fragment,aa),j2o=i(aa),T(wp.$$.fragment,aa),aa.forEach(t),D2o=i(Hs),Ap=n(Hs,"DIV",{class:!0});var uVe=s(Ap);T(XL.$$.fragment,uVe),G2o=i(uVe),lie=n(uVe,"P",{});var Mst=s(lie);O2o=r(Mst,"Register a new processor for this class."),Mst.forEach(t),uVe.forEach(t),Hs.forEach(t),fGe=i(f),Bi=n(f,"H2",{class:!0});var _Ve=s(Bi);Lp=n(_Ve,"A",{id:!0,class:!0,href:!0});var Est=s(Lp);iie=n(Est,"SPAN",{});var Cst=s(iie);T(zL.$$.fragment,Cst),Cst.forEach(t),Est.forEach(t),V2o=i(_Ve),die=n(_Ve,"SPAN",{});var wst=s(die);X2o=r(wst,"AutoModel"),wst.forEach(t),_Ve.forEach(t),mGe=i(f),xo=n(f,"DIV",{class:!0});var Us=s(xo);T(WL.$$.fragment,Us),z2o=i(Us),Ii=n(Us,"P",{});var Yee=s(Ii);W2o=r(Yee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GN=n(Yee,"A",{href:!0});var Ast=s(GN);Q2o=r(Ast,"from_pretrained()"),Ast.forEach(t),H2o=r(Yee," class method or the "),ON=n(Yee,"A",{href:!0});var Lst=s(ON);U2o=r(Lst,"from_config()"),Lst.forEach(t),J2o=r(Yee,` class
method.`),Yee.forEach(t),Y2o=i(Us),QL=n(Us,"P",{});var bVe=s(QL);K2o=r(bVe,"This class cannot be instantiated directly using "),cie=n(bVe,"CODE",{});var yst=s(cie);Z2o=r(yst,"__init__()"),yst.forEach(t),e1o=r(bVe," (throws an error)."),bVe.forEach(t),o1o=i(Us),st=n(Us,"DIV",{class:!0});var MA=s(st);T(HL.$$.fragment,MA),r1o=i(MA),fie=n(MA,"P",{});var xst=s(fie);t1o=r(xst,"Instantiates one of the base model classes of the library from a configuration."),xst.forEach(t),a1o=i(MA),Ni=n(MA,"P",{});var Kee=s(Ni);n1o=r(Kee,`Note:
Loading a model from its configuration file does `),mie=n(Kee,"STRONG",{});var $st=s(mie);s1o=r($st,"not"),$st.forEach(t),l1o=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VN=n(Kee,"A",{href:!0});var kst=s(VN);i1o=r(kst,"from_pretrained()"),kst.forEach(t),d1o=r(Kee," to load the model weights."),Kee.forEach(t),c1o=i(MA),T(yp.$$.fragment,MA),MA.forEach(t),f1o=i(Us),Je=n(Us,"DIV",{class:!0});var na=s(Je);T(UL.$$.fragment,na),m1o=i(na),gie=n(na,"P",{});var Sst=s(gie);g1o=r(Sst,"Instantiate one of the base model classes of the library from a pretrained model."),Sst.forEach(t),h1o=i(na),Ra=n(na,"P",{});var EA=s(Ra);p1o=r(EA,"The model class to instantiate is selected based on the "),hie=n(EA,"CODE",{});var Rst=s(hie);u1o=r(Rst,"model_type"),Rst.forEach(t),_1o=r(EA,` property of the config object (either
passed as an argument or loaded from `),pie=n(EA,"CODE",{});var Pst=s(pie);b1o=r(Pst,"pretrained_model_name_or_path"),Pst.forEach(t),v1o=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(EA,"CODE",{});var Bst=s(uie);F1o=r(Bst,"pretrained_model_name_or_path"),Bst.forEach(t),T1o=r(EA,":"),EA.forEach(t),M1o=i(na),x=n(na,"UL",{});var $=s(x);xp=n($,"LI",{});var _ye=s(xp);_ie=n(_ye,"STRONG",{});var Ist=s(_ie);E1o=r(Ist,"albert"),Ist.forEach(t),C1o=r(_ye," \u2014 "),XN=n(_ye,"A",{href:!0});var Nst=s(XN);w1o=r(Nst,"AlbertModel"),Nst.forEach(t),A1o=r(_ye," (ALBERT model)"),_ye.forEach(t),L1o=i($),$p=n($,"LI",{});var bye=s($p);bie=n(bye,"STRONG",{});var qst=s(bie);y1o=r(qst,"bart"),qst.forEach(t),x1o=r(bye," \u2014 "),zN=n(bye,"A",{href:!0});var jst=s(zN);$1o=r(jst,"BartModel"),jst.forEach(t),k1o=r(bye," (BART model)"),bye.forEach(t),S1o=i($),kp=n($,"LI",{});var vye=s(kp);vie=n(vye,"STRONG",{});var Dst=s(vie);R1o=r(Dst,"beit"),Dst.forEach(t),P1o=r(vye," \u2014 "),WN=n(vye,"A",{href:!0});var Gst=s(WN);B1o=r(Gst,"BeitModel"),Gst.forEach(t),I1o=r(vye," (BEiT model)"),vye.forEach(t),N1o=i($),Sp=n($,"LI",{});var Fye=s(Sp);Fie=n(Fye,"STRONG",{});var Ost=s(Fie);q1o=r(Ost,"bert"),Ost.forEach(t),j1o=r(Fye," \u2014 "),QN=n(Fye,"A",{href:!0});var Vst=s(QN);D1o=r(Vst,"BertModel"),Vst.forEach(t),G1o=r(Fye," (BERT model)"),Fye.forEach(t),O1o=i($),Rp=n($,"LI",{});var Tye=s(Rp);Tie=n(Tye,"STRONG",{});var Xst=s(Tie);V1o=r(Xst,"bert-generation"),Xst.forEach(t),X1o=r(Tye," \u2014 "),HN=n(Tye,"A",{href:!0});var zst=s(HN);z1o=r(zst,"BertGenerationEncoder"),zst.forEach(t),W1o=r(Tye," (Bert Generation model)"),Tye.forEach(t),Q1o=i($),Pp=n($,"LI",{});var Mye=s(Pp);Mie=n(Mye,"STRONG",{});var Wst=s(Mie);H1o=r(Wst,"big_bird"),Wst.forEach(t),U1o=r(Mye," \u2014 "),UN=n(Mye,"A",{href:!0});var Qst=s(UN);J1o=r(Qst,"BigBirdModel"),Qst.forEach(t),Y1o=r(Mye," (BigBird model)"),Mye.forEach(t),K1o=i($),Bp=n($,"LI",{});var Eye=s(Bp);Eie=n(Eye,"STRONG",{});var Hst=s(Eie);Z1o=r(Hst,"bigbird_pegasus"),Hst.forEach(t),e7o=r(Eye," \u2014 "),JN=n(Eye,"A",{href:!0});var Ust=s(JN);o7o=r(Ust,"BigBirdPegasusModel"),Ust.forEach(t),r7o=r(Eye," (BigBird-Pegasus model)"),Eye.forEach(t),t7o=i($),Ip=n($,"LI",{});var Cye=s(Ip);Cie=n(Cye,"STRONG",{});var Jst=s(Cie);a7o=r(Jst,"blenderbot"),Jst.forEach(t),n7o=r(Cye," \u2014 "),YN=n(Cye,"A",{href:!0});var Yst=s(YN);s7o=r(Yst,"BlenderbotModel"),Yst.forEach(t),l7o=r(Cye," (Blenderbot model)"),Cye.forEach(t),i7o=i($),Np=n($,"LI",{});var wye=s(Np);wie=n(wye,"STRONG",{});var Kst=s(wie);d7o=r(Kst,"blenderbot-small"),Kst.forEach(t),c7o=r(wye," \u2014 "),KN=n(wye,"A",{href:!0});var Zst=s(KN);f7o=r(Zst,"BlenderbotSmallModel"),Zst.forEach(t),m7o=r(wye," (BlenderbotSmall model)"),wye.forEach(t),g7o=i($),qp=n($,"LI",{});var Aye=s(qp);Aie=n(Aye,"STRONG",{});var elt=s(Aie);h7o=r(elt,"bloom"),elt.forEach(t),p7o=r(Aye," \u2014 "),ZN=n(Aye,"A",{href:!0});var olt=s(ZN);u7o=r(olt,"BloomModel"),olt.forEach(t),_7o=r(Aye," (BLOOM model)"),Aye.forEach(t),b7o=i($),jp=n($,"LI",{});var Lye=s(jp);Lie=n(Lye,"STRONG",{});var rlt=s(Lie);v7o=r(rlt,"camembert"),rlt.forEach(t),F7o=r(Lye," \u2014 "),eq=n(Lye,"A",{href:!0});var tlt=s(eq);T7o=r(tlt,"CamembertModel"),tlt.forEach(t),M7o=r(Lye," (CamemBERT model)"),Lye.forEach(t),E7o=i($),Dp=n($,"LI",{});var yye=s(Dp);yie=n(yye,"STRONG",{});var alt=s(yie);C7o=r(alt,"canine"),alt.forEach(t),w7o=r(yye," \u2014 "),oq=n(yye,"A",{href:!0});var nlt=s(oq);A7o=r(nlt,"CanineModel"),nlt.forEach(t),L7o=r(yye," (CANINE model)"),yye.forEach(t),y7o=i($),Gp=n($,"LI",{});var xye=s(Gp);xie=n(xye,"STRONG",{});var slt=s(xie);x7o=r(slt,"clip"),slt.forEach(t),$7o=r(xye," \u2014 "),rq=n(xye,"A",{href:!0});var llt=s(rq);k7o=r(llt,"CLIPModel"),llt.forEach(t),S7o=r(xye," (CLIP model)"),xye.forEach(t),R7o=i($),Op=n($,"LI",{});var $ye=s(Op);$ie=n($ye,"STRONG",{});var ilt=s($ie);P7o=r(ilt,"convbert"),ilt.forEach(t),B7o=r($ye," \u2014 "),tq=n($ye,"A",{href:!0});var dlt=s(tq);I7o=r(dlt,"ConvBertModel"),dlt.forEach(t),N7o=r($ye," (ConvBERT model)"),$ye.forEach(t),q7o=i($),Vp=n($,"LI",{});var kye=s(Vp);kie=n(kye,"STRONG",{});var clt=s(kie);j7o=r(clt,"convnext"),clt.forEach(t),D7o=r(kye," \u2014 "),aq=n(kye,"A",{href:!0});var flt=s(aq);G7o=r(flt,"ConvNextModel"),flt.forEach(t),O7o=r(kye," (ConvNeXT model)"),kye.forEach(t),V7o=i($),Xp=n($,"LI",{});var Sye=s(Xp);Sie=n(Sye,"STRONG",{});var mlt=s(Sie);X7o=r(mlt,"ctrl"),mlt.forEach(t),z7o=r(Sye," \u2014 "),nq=n(Sye,"A",{href:!0});var glt=s(nq);W7o=r(glt,"CTRLModel"),glt.forEach(t),Q7o=r(Sye," (CTRL model)"),Sye.forEach(t),H7o=i($),zp=n($,"LI",{});var Rye=s(zp);Rie=n(Rye,"STRONG",{});var hlt=s(Rie);U7o=r(hlt,"cvt"),hlt.forEach(t),J7o=r(Rye," \u2014 "),sq=n(Rye,"A",{href:!0});var plt=s(sq);Y7o=r(plt,"CvtModel"),plt.forEach(t),K7o=r(Rye," (CvT model)"),Rye.forEach(t),Z7o=i($),Wp=n($,"LI",{});var Pye=s(Wp);Pie=n(Pye,"STRONG",{});var ult=s(Pie);ebo=r(ult,"data2vec-audio"),ult.forEach(t),obo=r(Pye," \u2014 "),lq=n(Pye,"A",{href:!0});var _lt=s(lq);rbo=r(_lt,"Data2VecAudioModel"),_lt.forEach(t),tbo=r(Pye," (Data2VecAudio model)"),Pye.forEach(t),abo=i($),Qp=n($,"LI",{});var Bye=s(Qp);Bie=n(Bye,"STRONG",{});var blt=s(Bie);nbo=r(blt,"data2vec-text"),blt.forEach(t),sbo=r(Bye," \u2014 "),iq=n(Bye,"A",{href:!0});var vlt=s(iq);lbo=r(vlt,"Data2VecTextModel"),vlt.forEach(t),ibo=r(Bye," (Data2VecText model)"),Bye.forEach(t),dbo=i($),Hp=n($,"LI",{});var Iye=s(Hp);Iie=n(Iye,"STRONG",{});var Flt=s(Iie);cbo=r(Flt,"data2vec-vision"),Flt.forEach(t),fbo=r(Iye," \u2014 "),dq=n(Iye,"A",{href:!0});var Tlt=s(dq);mbo=r(Tlt,"Data2VecVisionModel"),Tlt.forEach(t),gbo=r(Iye," (Data2VecVision model)"),Iye.forEach(t),hbo=i($),Up=n($,"LI",{});var Nye=s(Up);Nie=n(Nye,"STRONG",{});var Mlt=s(Nie);pbo=r(Mlt,"deberta"),Mlt.forEach(t),ubo=r(Nye," \u2014 "),cq=n(Nye,"A",{href:!0});var Elt=s(cq);_bo=r(Elt,"DebertaModel"),Elt.forEach(t),bbo=r(Nye," (DeBERTa model)"),Nye.forEach(t),vbo=i($),Jp=n($,"LI",{});var qye=s(Jp);qie=n(qye,"STRONG",{});var Clt=s(qie);Fbo=r(Clt,"deberta-v2"),Clt.forEach(t),Tbo=r(qye," \u2014 "),fq=n(qye,"A",{href:!0});var wlt=s(fq);Mbo=r(wlt,"DebertaV2Model"),wlt.forEach(t),Ebo=r(qye," (DeBERTa-v2 model)"),qye.forEach(t),Cbo=i($),Yp=n($,"LI",{});var jye=s(Yp);jie=n(jye,"STRONG",{});var Alt=s(jie);wbo=r(Alt,"decision_transformer"),Alt.forEach(t),Abo=r(jye," \u2014 "),mq=n(jye,"A",{href:!0});var Llt=s(mq);Lbo=r(Llt,"DecisionTransformerModel"),Llt.forEach(t),ybo=r(jye," (Decision Transformer model)"),jye.forEach(t),xbo=i($),Kp=n($,"LI",{});var Dye=s(Kp);Die=n(Dye,"STRONG",{});var ylt=s(Die);$bo=r(ylt,"deit"),ylt.forEach(t),kbo=r(Dye," \u2014 "),gq=n(Dye,"A",{href:!0});var xlt=s(gq);Sbo=r(xlt,"DeiTModel"),xlt.forEach(t),Rbo=r(Dye," (DeiT model)"),Dye.forEach(t),Pbo=i($),Zp=n($,"LI",{});var Gye=s(Zp);Gie=n(Gye,"STRONG",{});var $lt=s(Gie);Bbo=r($lt,"detr"),$lt.forEach(t),Ibo=r(Gye," \u2014 "),hq=n(Gye,"A",{href:!0});var klt=s(hq);Nbo=r(klt,"DetrModel"),klt.forEach(t),qbo=r(Gye," (DETR model)"),Gye.forEach(t),jbo=i($),eu=n($,"LI",{});var Oye=s(eu);Oie=n(Oye,"STRONG",{});var Slt=s(Oie);Dbo=r(Slt,"distilbert"),Slt.forEach(t),Gbo=r(Oye," \u2014 "),pq=n(Oye,"A",{href:!0});var Rlt=s(pq);Obo=r(Rlt,"DistilBertModel"),Rlt.forEach(t),Vbo=r(Oye," (DistilBERT model)"),Oye.forEach(t),Xbo=i($),ou=n($,"LI",{});var Vye=s(ou);Vie=n(Vye,"STRONG",{});var Plt=s(Vie);zbo=r(Plt,"dpr"),Plt.forEach(t),Wbo=r(Vye," \u2014 "),uq=n(Vye,"A",{href:!0});var Blt=s(uq);Qbo=r(Blt,"DPRQuestionEncoder"),Blt.forEach(t),Hbo=r(Vye," (DPR model)"),Vye.forEach(t),Ubo=i($),ru=n($,"LI",{});var Xye=s(ru);Xie=n(Xye,"STRONG",{});var Ilt=s(Xie);Jbo=r(Ilt,"dpt"),Ilt.forEach(t),Ybo=r(Xye," \u2014 "),_q=n(Xye,"A",{href:!0});var Nlt=s(_q);Kbo=r(Nlt,"DPTModel"),Nlt.forEach(t),Zbo=r(Xye," (DPT model)"),Xye.forEach(t),e4o=i($),tu=n($,"LI",{});var zye=s(tu);zie=n(zye,"STRONG",{});var qlt=s(zie);o4o=r(qlt,"electra"),qlt.forEach(t),r4o=r(zye," \u2014 "),bq=n(zye,"A",{href:!0});var jlt=s(bq);t4o=r(jlt,"ElectraModel"),jlt.forEach(t),a4o=r(zye," (ELECTRA model)"),zye.forEach(t),n4o=i($),au=n($,"LI",{});var Wye=s(au);Wie=n(Wye,"STRONG",{});var Dlt=s(Wie);s4o=r(Dlt,"flaubert"),Dlt.forEach(t),l4o=r(Wye," \u2014 "),vq=n(Wye,"A",{href:!0});var Glt=s(vq);i4o=r(Glt,"FlaubertModel"),Glt.forEach(t),d4o=r(Wye," (FlauBERT model)"),Wye.forEach(t),c4o=i($),nu=n($,"LI",{});var Qye=s(nu);Qie=n(Qye,"STRONG",{});var Olt=s(Qie);f4o=r(Olt,"flava"),Olt.forEach(t),m4o=r(Qye," \u2014 "),Fq=n(Qye,"A",{href:!0});var Vlt=s(Fq);g4o=r(Vlt,"FlavaModel"),Vlt.forEach(t),h4o=r(Qye," (FLAVA model)"),Qye.forEach(t),p4o=i($),su=n($,"LI",{});var Hye=s(su);Hie=n(Hye,"STRONG",{});var Xlt=s(Hie);u4o=r(Xlt,"fnet"),Xlt.forEach(t),_4o=r(Hye," \u2014 "),Tq=n(Hye,"A",{href:!0});var zlt=s(Tq);b4o=r(zlt,"FNetModel"),zlt.forEach(t),v4o=r(Hye," (FNet model)"),Hye.forEach(t),F4o=i($),lu=n($,"LI",{});var Uye=s(lu);Uie=n(Uye,"STRONG",{});var Wlt=s(Uie);T4o=r(Wlt,"fsmt"),Wlt.forEach(t),M4o=r(Uye," \u2014 "),Mq=n(Uye,"A",{href:!0});var Qlt=s(Mq);E4o=r(Qlt,"FSMTModel"),Qlt.forEach(t),C4o=r(Uye," (FairSeq Machine-Translation model)"),Uye.forEach(t),w4o=i($),Gs=n($,"LI",{});var Gk=s(Gs);Jie=n(Gk,"STRONG",{});var Hlt=s(Jie);A4o=r(Hlt,"funnel"),Hlt.forEach(t),L4o=r(Gk," \u2014 "),Eq=n(Gk,"A",{href:!0});var Ult=s(Eq);y4o=r(Ult,"FunnelModel"),Ult.forEach(t),x4o=r(Gk," or "),Cq=n(Gk,"A",{href:!0});var Jlt=s(Cq);$4o=r(Jlt,"FunnelBaseModel"),Jlt.forEach(t),k4o=r(Gk," (Funnel Transformer model)"),Gk.forEach(t),S4o=i($),iu=n($,"LI",{});var Jye=s(iu);Yie=n(Jye,"STRONG",{});var Ylt=s(Yie);R4o=r(Ylt,"glpn"),Ylt.forEach(t),P4o=r(Jye," \u2014 "),wq=n(Jye,"A",{href:!0});var Klt=s(wq);B4o=r(Klt,"GLPNModel"),Klt.forEach(t),I4o=r(Jye," (GLPN model)"),Jye.forEach(t),N4o=i($),du=n($,"LI",{});var Yye=s(du);Kie=n(Yye,"STRONG",{});var Zlt=s(Kie);q4o=r(Zlt,"gpt2"),Zlt.forEach(t),j4o=r(Yye," \u2014 "),Aq=n(Yye,"A",{href:!0});var eit=s(Aq);D4o=r(eit,"GPT2Model"),eit.forEach(t),G4o=r(Yye," (OpenAI GPT-2 model)"),Yye.forEach(t),O4o=i($),cu=n($,"LI",{});var Kye=s(cu);Zie=n(Kye,"STRONG",{});var oit=s(Zie);V4o=r(oit,"gpt_neo"),oit.forEach(t),X4o=r(Kye," \u2014 "),Lq=n(Kye,"A",{href:!0});var rit=s(Lq);z4o=r(rit,"GPTNeoModel"),rit.forEach(t),W4o=r(Kye," (GPT Neo model)"),Kye.forEach(t),Q4o=i($),fu=n($,"LI",{});var Zye=s(fu);ede=n(Zye,"STRONG",{});var tit=s(ede);H4o=r(tit,"gpt_neox"),tit.forEach(t),U4o=r(Zye," \u2014 "),yq=n(Zye,"A",{href:!0});var ait=s(yq);J4o=r(ait,"GPTNeoXModel"),ait.forEach(t),Y4o=r(Zye," (GPT NeoX model)"),Zye.forEach(t),K4o=i($),mu=n($,"LI",{});var e8e=s(mu);ode=n(e8e,"STRONG",{});var nit=s(ode);Z4o=r(nit,"gptj"),nit.forEach(t),evo=r(e8e," \u2014 "),xq=n(e8e,"A",{href:!0});var sit=s(xq);ovo=r(sit,"GPTJModel"),sit.forEach(t),rvo=r(e8e," (GPT-J model)"),e8e.forEach(t),tvo=i($),gu=n($,"LI",{});var o8e=s(gu);rde=n(o8e,"STRONG",{});var lit=s(rde);avo=r(lit,"hubert"),lit.forEach(t),nvo=r(o8e," \u2014 "),$q=n(o8e,"A",{href:!0});var iit=s($q);svo=r(iit,"HubertModel"),iit.forEach(t),lvo=r(o8e," (Hubert model)"),o8e.forEach(t),ivo=i($),hu=n($,"LI",{});var r8e=s(hu);tde=n(r8e,"STRONG",{});var dit=s(tde);dvo=r(dit,"ibert"),dit.forEach(t),cvo=r(r8e," \u2014 "),kq=n(r8e,"A",{href:!0});var cit=s(kq);fvo=r(cit,"IBertModel"),cit.forEach(t),mvo=r(r8e," (I-BERT model)"),r8e.forEach(t),gvo=i($),pu=n($,"LI",{});var t8e=s(pu);ade=n(t8e,"STRONG",{});var fit=s(ade);hvo=r(fit,"imagegpt"),fit.forEach(t),pvo=r(t8e," \u2014 "),Sq=n(t8e,"A",{href:!0});var mit=s(Sq);uvo=r(mit,"ImageGPTModel"),mit.forEach(t),_vo=r(t8e," (ImageGPT model)"),t8e.forEach(t),bvo=i($),uu=n($,"LI",{});var a8e=s(uu);nde=n(a8e,"STRONG",{});var git=s(nde);vvo=r(git,"layoutlm"),git.forEach(t),Fvo=r(a8e," \u2014 "),Rq=n(a8e,"A",{href:!0});var hit=s(Rq);Tvo=r(hit,"LayoutLMModel"),hit.forEach(t),Mvo=r(a8e," (LayoutLM model)"),a8e.forEach(t),Evo=i($),_u=n($,"LI",{});var n8e=s(_u);sde=n(n8e,"STRONG",{});var pit=s(sde);Cvo=r(pit,"layoutlmv2"),pit.forEach(t),wvo=r(n8e," \u2014 "),Pq=n(n8e,"A",{href:!0});var uit=s(Pq);Avo=r(uit,"LayoutLMv2Model"),uit.forEach(t),Lvo=r(n8e," (LayoutLMv2 model)"),n8e.forEach(t),yvo=i($),bu=n($,"LI",{});var s8e=s(bu);lde=n(s8e,"STRONG",{});var _it=s(lde);xvo=r(_it,"layoutlmv3"),_it.forEach(t),$vo=r(s8e," \u2014 "),Bq=n(s8e,"A",{href:!0});var bit=s(Bq);kvo=r(bit,"LayoutLMv3Model"),bit.forEach(t),Svo=r(s8e," (LayoutLMv3 model)"),s8e.forEach(t),Rvo=i($),vu=n($,"LI",{});var l8e=s(vu);ide=n(l8e,"STRONG",{});var vit=s(ide);Pvo=r(vit,"led"),vit.forEach(t),Bvo=r(l8e," \u2014 "),Iq=n(l8e,"A",{href:!0});var Fit=s(Iq);Ivo=r(Fit,"LEDModel"),Fit.forEach(t),Nvo=r(l8e," (LED model)"),l8e.forEach(t),qvo=i($),Fu=n($,"LI",{});var i8e=s(Fu);dde=n(i8e,"STRONG",{});var Tit=s(dde);jvo=r(Tit,"levit"),Tit.forEach(t),Dvo=r(i8e," \u2014 "),Nq=n(i8e,"A",{href:!0});var Mit=s(Nq);Gvo=r(Mit,"LevitModel"),Mit.forEach(t),Ovo=r(i8e," (LeViT model)"),i8e.forEach(t),Vvo=i($),Tu=n($,"LI",{});var d8e=s(Tu);cde=n(d8e,"STRONG",{});var Eit=s(cde);Xvo=r(Eit,"longformer"),Eit.forEach(t),zvo=r(d8e," \u2014 "),qq=n(d8e,"A",{href:!0});var Cit=s(qq);Wvo=r(Cit,"LongformerModel"),Cit.forEach(t),Qvo=r(d8e," (Longformer model)"),d8e.forEach(t),Hvo=i($),Mu=n($,"LI",{});var c8e=s(Mu);fde=n(c8e,"STRONG",{});var wit=s(fde);Uvo=r(wit,"longt5"),wit.forEach(t),Jvo=r(c8e," \u2014 "),jq=n(c8e,"A",{href:!0});var Ait=s(jq);Yvo=r(Ait,"LongT5Model"),Ait.forEach(t),Kvo=r(c8e," (LongT5 model)"),c8e.forEach(t),Zvo=i($),Eu=n($,"LI",{});var f8e=s(Eu);mde=n(f8e,"STRONG",{});var Lit=s(mde);eFo=r(Lit,"luke"),Lit.forEach(t),oFo=r(f8e," \u2014 "),Dq=n(f8e,"A",{href:!0});var yit=s(Dq);rFo=r(yit,"LukeModel"),yit.forEach(t),tFo=r(f8e," (LUKE model)"),f8e.forEach(t),aFo=i($),Cu=n($,"LI",{});var m8e=s(Cu);gde=n(m8e,"STRONG",{});var xit=s(gde);nFo=r(xit,"lxmert"),xit.forEach(t),sFo=r(m8e," \u2014 "),Gq=n(m8e,"A",{href:!0});var $it=s(Gq);lFo=r($it,"LxmertModel"),$it.forEach(t),iFo=r(m8e," (LXMERT model)"),m8e.forEach(t),dFo=i($),wu=n($,"LI",{});var g8e=s(wu);hde=n(g8e,"STRONG",{});var kit=s(hde);cFo=r(kit,"m2m_100"),kit.forEach(t),fFo=r(g8e," \u2014 "),Oq=n(g8e,"A",{href:!0});var Sit=s(Oq);mFo=r(Sit,"M2M100Model"),Sit.forEach(t),gFo=r(g8e," (M2M100 model)"),g8e.forEach(t),hFo=i($),Au=n($,"LI",{});var h8e=s(Au);pde=n(h8e,"STRONG",{});var Rit=s(pde);pFo=r(Rit,"marian"),Rit.forEach(t),uFo=r(h8e," \u2014 "),Vq=n(h8e,"A",{href:!0});var Pit=s(Vq);_Fo=r(Pit,"MarianModel"),Pit.forEach(t),bFo=r(h8e," (Marian model)"),h8e.forEach(t),vFo=i($),Lu=n($,"LI",{});var p8e=s(Lu);ude=n(p8e,"STRONG",{});var Bit=s(ude);FFo=r(Bit,"maskformer"),Bit.forEach(t),TFo=r(p8e," \u2014 "),Xq=n(p8e,"A",{href:!0});var Iit=s(Xq);MFo=r(Iit,"MaskFormerModel"),Iit.forEach(t),EFo=r(p8e," (MaskFormer model)"),p8e.forEach(t),CFo=i($),yu=n($,"LI",{});var u8e=s(yu);_de=n(u8e,"STRONG",{});var Nit=s(_de);wFo=r(Nit,"mbart"),Nit.forEach(t),AFo=r(u8e," \u2014 "),zq=n(u8e,"A",{href:!0});var qit=s(zq);LFo=r(qit,"MBartModel"),qit.forEach(t),yFo=r(u8e," (mBART model)"),u8e.forEach(t),xFo=i($),xu=n($,"LI",{});var _8e=s(xu);bde=n(_8e,"STRONG",{});var jit=s(bde);$Fo=r(jit,"mctct"),jit.forEach(t),kFo=r(_8e," \u2014 "),Wq=n(_8e,"A",{href:!0});var Dit=s(Wq);SFo=r(Dit,"MCTCTModel"),Dit.forEach(t),RFo=r(_8e," (M-CTC-T model)"),_8e.forEach(t),PFo=i($),$u=n($,"LI",{});var b8e=s($u);vde=n(b8e,"STRONG",{});var Git=s(vde);BFo=r(Git,"megatron-bert"),Git.forEach(t),IFo=r(b8e," \u2014 "),Qq=n(b8e,"A",{href:!0});var Oit=s(Qq);NFo=r(Oit,"MegatronBertModel"),Oit.forEach(t),qFo=r(b8e," (Megatron-BERT model)"),b8e.forEach(t),jFo=i($),ku=n($,"LI",{});var v8e=s(ku);Fde=n(v8e,"STRONG",{});var Vit=s(Fde);DFo=r(Vit,"mobilebert"),Vit.forEach(t),GFo=r(v8e," \u2014 "),Hq=n(v8e,"A",{href:!0});var Xit=s(Hq);OFo=r(Xit,"MobileBertModel"),Xit.forEach(t),VFo=r(v8e," (MobileBERT model)"),v8e.forEach(t),XFo=i($),Su=n($,"LI",{});var F8e=s(Su);Tde=n(F8e,"STRONG",{});var zit=s(Tde);zFo=r(zit,"mpnet"),zit.forEach(t),WFo=r(F8e," \u2014 "),Uq=n(F8e,"A",{href:!0});var Wit=s(Uq);QFo=r(Wit,"MPNetModel"),Wit.forEach(t),HFo=r(F8e," (MPNet model)"),F8e.forEach(t),UFo=i($),Ru=n($,"LI",{});var T8e=s(Ru);Mde=n(T8e,"STRONG",{});var Qit=s(Mde);JFo=r(Qit,"mt5"),Qit.forEach(t),YFo=r(T8e," \u2014 "),Jq=n(T8e,"A",{href:!0});var Hit=s(Jq);KFo=r(Hit,"MT5Model"),Hit.forEach(t),ZFo=r(T8e," (MT5 model)"),T8e.forEach(t),eTo=i($),Pu=n($,"LI",{});var M8e=s(Pu);Ede=n(M8e,"STRONG",{});var Uit=s(Ede);oTo=r(Uit,"nystromformer"),Uit.forEach(t),rTo=r(M8e," \u2014 "),Yq=n(M8e,"A",{href:!0});var Jit=s(Yq);tTo=r(Jit,"NystromformerModel"),Jit.forEach(t),aTo=r(M8e," (Nystr\xF6mformer model)"),M8e.forEach(t),nTo=i($),Bu=n($,"LI",{});var E8e=s(Bu);Cde=n(E8e,"STRONG",{});var Yit=s(Cde);sTo=r(Yit,"openai-gpt"),Yit.forEach(t),lTo=r(E8e," \u2014 "),Kq=n(E8e,"A",{href:!0});var Kit=s(Kq);iTo=r(Kit,"OpenAIGPTModel"),Kit.forEach(t),dTo=r(E8e," (OpenAI GPT model)"),E8e.forEach(t),cTo=i($),Iu=n($,"LI",{});var C8e=s(Iu);wde=n(C8e,"STRONG",{});var Zit=s(wde);fTo=r(Zit,"opt"),Zit.forEach(t),mTo=r(C8e," \u2014 "),Zq=n(C8e,"A",{href:!0});var edt=s(Zq);gTo=r(edt,"OPTModel"),edt.forEach(t),hTo=r(C8e," (OPT model)"),C8e.forEach(t),pTo=i($),Nu=n($,"LI",{});var w8e=s(Nu);Ade=n(w8e,"STRONG",{});var odt=s(Ade);uTo=r(odt,"pegasus"),odt.forEach(t),_To=r(w8e," \u2014 "),ej=n(w8e,"A",{href:!0});var rdt=s(ej);bTo=r(rdt,"PegasusModel"),rdt.forEach(t),vTo=r(w8e," (Pegasus model)"),w8e.forEach(t),FTo=i($),qu=n($,"LI",{});var A8e=s(qu);Lde=n(A8e,"STRONG",{});var tdt=s(Lde);TTo=r(tdt,"perceiver"),tdt.forEach(t),MTo=r(A8e," \u2014 "),oj=n(A8e,"A",{href:!0});var adt=s(oj);ETo=r(adt,"PerceiverModel"),adt.forEach(t),CTo=r(A8e," (Perceiver model)"),A8e.forEach(t),wTo=i($),ju=n($,"LI",{});var L8e=s(ju);yde=n(L8e,"STRONG",{});var ndt=s(yde);ATo=r(ndt,"plbart"),ndt.forEach(t),LTo=r(L8e," \u2014 "),rj=n(L8e,"A",{href:!0});var sdt=s(rj);yTo=r(sdt,"PLBartModel"),sdt.forEach(t),xTo=r(L8e," (PLBart model)"),L8e.forEach(t),$To=i($),Du=n($,"LI",{});var y8e=s(Du);xde=n(y8e,"STRONG",{});var ldt=s(xde);kTo=r(ldt,"poolformer"),ldt.forEach(t),STo=r(y8e," \u2014 "),tj=n(y8e,"A",{href:!0});var idt=s(tj);RTo=r(idt,"PoolFormerModel"),idt.forEach(t),PTo=r(y8e," (PoolFormer model)"),y8e.forEach(t),BTo=i($),Gu=n($,"LI",{});var x8e=s(Gu);$de=n(x8e,"STRONG",{});var ddt=s($de);ITo=r(ddt,"prophetnet"),ddt.forEach(t),NTo=r(x8e," \u2014 "),aj=n(x8e,"A",{href:!0});var cdt=s(aj);qTo=r(cdt,"ProphetNetModel"),cdt.forEach(t),jTo=r(x8e," (ProphetNet model)"),x8e.forEach(t),DTo=i($),Ou=n($,"LI",{});var $8e=s(Ou);kde=n($8e,"STRONG",{});var fdt=s(kde);GTo=r(fdt,"qdqbert"),fdt.forEach(t),OTo=r($8e," \u2014 "),nj=n($8e,"A",{href:!0});var mdt=s(nj);VTo=r(mdt,"QDQBertModel"),mdt.forEach(t),XTo=r($8e," (QDQBert model)"),$8e.forEach(t),zTo=i($),Vu=n($,"LI",{});var k8e=s(Vu);Sde=n(k8e,"STRONG",{});var gdt=s(Sde);WTo=r(gdt,"reformer"),gdt.forEach(t),QTo=r(k8e," \u2014 "),sj=n(k8e,"A",{href:!0});var hdt=s(sj);HTo=r(hdt,"ReformerModel"),hdt.forEach(t),UTo=r(k8e," (Reformer model)"),k8e.forEach(t),JTo=i($),Xu=n($,"LI",{});var S8e=s(Xu);Rde=n(S8e,"STRONG",{});var pdt=s(Rde);YTo=r(pdt,"regnet"),pdt.forEach(t),KTo=r(S8e," \u2014 "),lj=n(S8e,"A",{href:!0});var udt=s(lj);ZTo=r(udt,"RegNetModel"),udt.forEach(t),eMo=r(S8e," (RegNet model)"),S8e.forEach(t),oMo=i($),zu=n($,"LI",{});var R8e=s(zu);Pde=n(R8e,"STRONG",{});var _dt=s(Pde);rMo=r(_dt,"rembert"),_dt.forEach(t),tMo=r(R8e," \u2014 "),ij=n(R8e,"A",{href:!0});var bdt=s(ij);aMo=r(bdt,"RemBertModel"),bdt.forEach(t),nMo=r(R8e," (RemBERT model)"),R8e.forEach(t),sMo=i($),Wu=n($,"LI",{});var P8e=s(Wu);Bde=n(P8e,"STRONG",{});var vdt=s(Bde);lMo=r(vdt,"resnet"),vdt.forEach(t),iMo=r(P8e," \u2014 "),dj=n(P8e,"A",{href:!0});var Fdt=s(dj);dMo=r(Fdt,"ResNetModel"),Fdt.forEach(t),cMo=r(P8e," (ResNet model)"),P8e.forEach(t),fMo=i($),Qu=n($,"LI",{});var B8e=s(Qu);Ide=n(B8e,"STRONG",{});var Tdt=s(Ide);mMo=r(Tdt,"retribert"),Tdt.forEach(t),gMo=r(B8e," \u2014 "),cj=n(B8e,"A",{href:!0});var Mdt=s(cj);hMo=r(Mdt,"RetriBertModel"),Mdt.forEach(t),pMo=r(B8e," (RetriBERT model)"),B8e.forEach(t),uMo=i($),Hu=n($,"LI",{});var I8e=s(Hu);Nde=n(I8e,"STRONG",{});var Edt=s(Nde);_Mo=r(Edt,"roberta"),Edt.forEach(t),bMo=r(I8e," \u2014 "),fj=n(I8e,"A",{href:!0});var Cdt=s(fj);vMo=r(Cdt,"RobertaModel"),Cdt.forEach(t),FMo=r(I8e," (RoBERTa model)"),I8e.forEach(t),TMo=i($),Uu=n($,"LI",{});var N8e=s(Uu);qde=n(N8e,"STRONG",{});var wdt=s(qde);MMo=r(wdt,"roformer"),wdt.forEach(t),EMo=r(N8e," \u2014 "),mj=n(N8e,"A",{href:!0});var Adt=s(mj);CMo=r(Adt,"RoFormerModel"),Adt.forEach(t),wMo=r(N8e," (RoFormer model)"),N8e.forEach(t),AMo=i($),Ju=n($,"LI",{});var q8e=s(Ju);jde=n(q8e,"STRONG",{});var Ldt=s(jde);LMo=r(Ldt,"segformer"),Ldt.forEach(t),yMo=r(q8e," \u2014 "),gj=n(q8e,"A",{href:!0});var ydt=s(gj);xMo=r(ydt,"SegformerModel"),ydt.forEach(t),$Mo=r(q8e," (SegFormer model)"),q8e.forEach(t),kMo=i($),Yu=n($,"LI",{});var j8e=s(Yu);Dde=n(j8e,"STRONG",{});var xdt=s(Dde);SMo=r(xdt,"sew"),xdt.forEach(t),RMo=r(j8e," \u2014 "),hj=n(j8e,"A",{href:!0});var $dt=s(hj);PMo=r($dt,"SEWModel"),$dt.forEach(t),BMo=r(j8e," (SEW model)"),j8e.forEach(t),IMo=i($),Ku=n($,"LI",{});var D8e=s(Ku);Gde=n(D8e,"STRONG",{});var kdt=s(Gde);NMo=r(kdt,"sew-d"),kdt.forEach(t),qMo=r(D8e," \u2014 "),pj=n(D8e,"A",{href:!0});var Sdt=s(pj);jMo=r(Sdt,"SEWDModel"),Sdt.forEach(t),DMo=r(D8e," (SEW-D model)"),D8e.forEach(t),GMo=i($),Zu=n($,"LI",{});var G8e=s(Zu);Ode=n(G8e,"STRONG",{});var Rdt=s(Ode);OMo=r(Rdt,"speech_to_text"),Rdt.forEach(t),VMo=r(G8e," \u2014 "),uj=n(G8e,"A",{href:!0});var Pdt=s(uj);XMo=r(Pdt,"Speech2TextModel"),Pdt.forEach(t),zMo=r(G8e," (Speech2Text model)"),G8e.forEach(t),WMo=i($),e_=n($,"LI",{});var O8e=s(e_);Vde=n(O8e,"STRONG",{});var Bdt=s(Vde);QMo=r(Bdt,"splinter"),Bdt.forEach(t),HMo=r(O8e," \u2014 "),_j=n(O8e,"A",{href:!0});var Idt=s(_j);UMo=r(Idt,"SplinterModel"),Idt.forEach(t),JMo=r(O8e," (Splinter model)"),O8e.forEach(t),YMo=i($),o_=n($,"LI",{});var V8e=s(o_);Xde=n(V8e,"STRONG",{});var Ndt=s(Xde);KMo=r(Ndt,"squeezebert"),Ndt.forEach(t),ZMo=r(V8e," \u2014 "),bj=n(V8e,"A",{href:!0});var qdt=s(bj);eEo=r(qdt,"SqueezeBertModel"),qdt.forEach(t),oEo=r(V8e," (SqueezeBERT model)"),V8e.forEach(t),rEo=i($),r_=n($,"LI",{});var X8e=s(r_);zde=n(X8e,"STRONG",{});var jdt=s(zde);tEo=r(jdt,"swin"),jdt.forEach(t),aEo=r(X8e," \u2014 "),vj=n(X8e,"A",{href:!0});var Ddt=s(vj);nEo=r(Ddt,"SwinModel"),Ddt.forEach(t),sEo=r(X8e," (Swin Transformer model)"),X8e.forEach(t),lEo=i($),t_=n($,"LI",{});var z8e=s(t_);Wde=n(z8e,"STRONG",{});var Gdt=s(Wde);iEo=r(Gdt,"t5"),Gdt.forEach(t),dEo=r(z8e," \u2014 "),Fj=n(z8e,"A",{href:!0});var Odt=s(Fj);cEo=r(Odt,"T5Model"),Odt.forEach(t),fEo=r(z8e," (T5 model)"),z8e.forEach(t),mEo=i($),a_=n($,"LI",{});var W8e=s(a_);Qde=n(W8e,"STRONG",{});var Vdt=s(Qde);gEo=r(Vdt,"tapas"),Vdt.forEach(t),hEo=r(W8e," \u2014 "),Tj=n(W8e,"A",{href:!0});var Xdt=s(Tj);pEo=r(Xdt,"TapasModel"),Xdt.forEach(t),uEo=r(W8e," (TAPAS model)"),W8e.forEach(t),_Eo=i($),n_=n($,"LI",{});var Q8e=s(n_);Hde=n(Q8e,"STRONG",{});var zdt=s(Hde);bEo=r(zdt,"trajectory_transformer"),zdt.forEach(t),vEo=r(Q8e," \u2014 "),Mj=n(Q8e,"A",{href:!0});var Wdt=s(Mj);FEo=r(Wdt,"TrajectoryTransformerModel"),Wdt.forEach(t),TEo=r(Q8e," (Trajectory Transformer model)"),Q8e.forEach(t),MEo=i($),s_=n($,"LI",{});var H8e=s(s_);Ude=n(H8e,"STRONG",{});var Qdt=s(Ude);EEo=r(Qdt,"transfo-xl"),Qdt.forEach(t),CEo=r(H8e," \u2014 "),Ej=n(H8e,"A",{href:!0});var Hdt=s(Ej);wEo=r(Hdt,"TransfoXLModel"),Hdt.forEach(t),AEo=r(H8e," (Transformer-XL model)"),H8e.forEach(t),LEo=i($),l_=n($,"LI",{});var U8e=s(l_);Jde=n(U8e,"STRONG",{});var Udt=s(Jde);yEo=r(Udt,"unispeech"),Udt.forEach(t),xEo=r(U8e," \u2014 "),Cj=n(U8e,"A",{href:!0});var Jdt=s(Cj);$Eo=r(Jdt,"UniSpeechModel"),Jdt.forEach(t),kEo=r(U8e," (UniSpeech model)"),U8e.forEach(t),SEo=i($),i_=n($,"LI",{});var J8e=s(i_);Yde=n(J8e,"STRONG",{});var Ydt=s(Yde);REo=r(Ydt,"unispeech-sat"),Ydt.forEach(t),PEo=r(J8e," \u2014 "),wj=n(J8e,"A",{href:!0});var Kdt=s(wj);BEo=r(Kdt,"UniSpeechSatModel"),Kdt.forEach(t),IEo=r(J8e," (UniSpeechSat model)"),J8e.forEach(t),NEo=i($),d_=n($,"LI",{});var Y8e=s(d_);Kde=n(Y8e,"STRONG",{});var Zdt=s(Kde);qEo=r(Zdt,"van"),Zdt.forEach(t),jEo=r(Y8e," \u2014 "),Aj=n(Y8e,"A",{href:!0});var ect=s(Aj);DEo=r(ect,"VanModel"),ect.forEach(t),GEo=r(Y8e," (VAN model)"),Y8e.forEach(t),OEo=i($),c_=n($,"LI",{});var K8e=s(c_);Zde=n(K8e,"STRONG",{});var oct=s(Zde);VEo=r(oct,"vilt"),oct.forEach(t),XEo=r(K8e," \u2014 "),Lj=n(K8e,"A",{href:!0});var rct=s(Lj);zEo=r(rct,"ViltModel"),rct.forEach(t),WEo=r(K8e," (ViLT model)"),K8e.forEach(t),QEo=i($),f_=n($,"LI",{});var Z8e=s(f_);ece=n(Z8e,"STRONG",{});var tct=s(ece);HEo=r(tct,"vision-text-dual-encoder"),tct.forEach(t),UEo=r(Z8e," \u2014 "),yj=n(Z8e,"A",{href:!0});var act=s(yj);JEo=r(act,"VisionTextDualEncoderModel"),act.forEach(t),YEo=r(Z8e," (VisionTextDualEncoder model)"),Z8e.forEach(t),KEo=i($),m_=n($,"LI",{});var e9e=s(m_);oce=n(e9e,"STRONG",{});var nct=s(oce);ZEo=r(nct,"visual_bert"),nct.forEach(t),eCo=r(e9e," \u2014 "),xj=n(e9e,"A",{href:!0});var sct=s(xj);oCo=r(sct,"VisualBertModel"),sct.forEach(t),rCo=r(e9e," (VisualBERT model)"),e9e.forEach(t),tCo=i($),g_=n($,"LI",{});var o9e=s(g_);rce=n(o9e,"STRONG",{});var lct=s(rce);aCo=r(lct,"vit"),lct.forEach(t),nCo=r(o9e," \u2014 "),$j=n(o9e,"A",{href:!0});var ict=s($j);sCo=r(ict,"ViTModel"),ict.forEach(t),lCo=r(o9e," (ViT model)"),o9e.forEach(t),iCo=i($),h_=n($,"LI",{});var r9e=s(h_);tce=n(r9e,"STRONG",{});var dct=s(tce);dCo=r(dct,"vit_mae"),dct.forEach(t),cCo=r(r9e," \u2014 "),kj=n(r9e,"A",{href:!0});var cct=s(kj);fCo=r(cct,"ViTMAEModel"),cct.forEach(t),mCo=r(r9e," (ViTMAE model)"),r9e.forEach(t),gCo=i($),p_=n($,"LI",{});var t9e=s(p_);ace=n(t9e,"STRONG",{});var fct=s(ace);hCo=r(fct,"wav2vec2"),fct.forEach(t),pCo=r(t9e," \u2014 "),Sj=n(t9e,"A",{href:!0});var mct=s(Sj);uCo=r(mct,"Wav2Vec2Model"),mct.forEach(t),_Co=r(t9e," (Wav2Vec2 model)"),t9e.forEach(t),bCo=i($),u_=n($,"LI",{});var a9e=s(u_);nce=n(a9e,"STRONG",{});var gct=s(nce);vCo=r(gct,"wav2vec2-conformer"),gct.forEach(t),FCo=r(a9e," \u2014 "),Rj=n(a9e,"A",{href:!0});var hct=s(Rj);TCo=r(hct,"Wav2Vec2ConformerModel"),hct.forEach(t),MCo=r(a9e," (Wav2Vec2-Conformer model)"),a9e.forEach(t),ECo=i($),__=n($,"LI",{});var n9e=s(__);sce=n(n9e,"STRONG",{});var pct=s(sce);CCo=r(pct,"wavlm"),pct.forEach(t),wCo=r(n9e," \u2014 "),Pj=n(n9e,"A",{href:!0});var uct=s(Pj);ACo=r(uct,"WavLMModel"),uct.forEach(t),LCo=r(n9e," (WavLM model)"),n9e.forEach(t),yCo=i($),b_=n($,"LI",{});var s9e=s(b_);lce=n(s9e,"STRONG",{});var _ct=s(lce);xCo=r(_ct,"xglm"),_ct.forEach(t),$Co=r(s9e," \u2014 "),Bj=n(s9e,"A",{href:!0});var bct=s(Bj);kCo=r(bct,"XGLMModel"),bct.forEach(t),SCo=r(s9e," (XGLM model)"),s9e.forEach(t),RCo=i($),v_=n($,"LI",{});var l9e=s(v_);ice=n(l9e,"STRONG",{});var vct=s(ice);PCo=r(vct,"xlm"),vct.forEach(t),BCo=r(l9e," \u2014 "),Ij=n(l9e,"A",{href:!0});var Fct=s(Ij);ICo=r(Fct,"XLMModel"),Fct.forEach(t),NCo=r(l9e," (XLM model)"),l9e.forEach(t),qCo=i($),F_=n($,"LI",{});var i9e=s(F_);dce=n(i9e,"STRONG",{});var Tct=s(dce);jCo=r(Tct,"xlm-prophetnet"),Tct.forEach(t),DCo=r(i9e," \u2014 "),Nj=n(i9e,"A",{href:!0});var Mct=s(Nj);GCo=r(Mct,"XLMProphetNetModel"),Mct.forEach(t),OCo=r(i9e," (XLM-ProphetNet model)"),i9e.forEach(t),VCo=i($),T_=n($,"LI",{});var d9e=s(T_);cce=n(d9e,"STRONG",{});var Ect=s(cce);XCo=r(Ect,"xlm-roberta"),Ect.forEach(t),zCo=r(d9e," \u2014 "),qj=n(d9e,"A",{href:!0});var Cct=s(qj);WCo=r(Cct,"XLMRobertaModel"),Cct.forEach(t),QCo=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),HCo=i($),M_=n($,"LI",{});var c9e=s(M_);fce=n(c9e,"STRONG",{});var wct=s(fce);UCo=r(wct,"xlm-roberta-xl"),wct.forEach(t),JCo=r(c9e," \u2014 "),jj=n(c9e,"A",{href:!0});var Act=s(jj);YCo=r(Act,"XLMRobertaXLModel"),Act.forEach(t),KCo=r(c9e," (XLM-RoBERTa-XL model)"),c9e.forEach(t),ZCo=i($),E_=n($,"LI",{});var f9e=s(E_);mce=n(f9e,"STRONG",{});var Lct=s(mce);e5o=r(Lct,"xlnet"),Lct.forEach(t),o5o=r(f9e," \u2014 "),Dj=n(f9e,"A",{href:!0});var yct=s(Dj);r5o=r(yct,"XLNetModel"),yct.forEach(t),t5o=r(f9e," (XLNet model)"),f9e.forEach(t),a5o=i($),C_=n($,"LI",{});var m9e=s(C_);gce=n(m9e,"STRONG",{});var xct=s(gce);n5o=r(xct,"yolos"),xct.forEach(t),s5o=r(m9e," \u2014 "),Gj=n(m9e,"A",{href:!0});var $ct=s(Gj);l5o=r($ct,"YolosModel"),$ct.forEach(t),i5o=r(m9e," (YOLOS model)"),m9e.forEach(t),d5o=i($),w_=n($,"LI",{});var g9e=s(w_);hce=n(g9e,"STRONG",{});var kct=s(hce);c5o=r(kct,"yoso"),kct.forEach(t),f5o=r(g9e," \u2014 "),Oj=n(g9e,"A",{href:!0});var Sct=s(Oj);m5o=r(Sct,"YosoModel"),Sct.forEach(t),g5o=r(g9e," (YOSO model)"),g9e.forEach(t),$.forEach(t),h5o=i(na),A_=n(na,"P",{});var h9e=s(A_);p5o=r(h9e,"The model is set in evaluation mode by default using "),pce=n(h9e,"CODE",{});var Rct=s(pce);u5o=r(Rct,"model.eval()"),Rct.forEach(t),_5o=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uce=n(h9e,"CODE",{});var Pct=s(uce);b5o=r(Pct,"model.train()"),Pct.forEach(t),h9e.forEach(t),v5o=i(na),T(L_.$$.fragment,na),na.forEach(t),Us.forEach(t),gGe=i(f),qi=n(f,"H2",{class:!0});var vVe=s(qi);y_=n(vVe,"A",{id:!0,class:!0,href:!0});var Bct=s(y_);_ce=n(Bct,"SPAN",{});var Ict=s(_ce);T(JL.$$.fragment,Ict),Ict.forEach(t),Bct.forEach(t),F5o=i(vVe),bce=n(vVe,"SPAN",{});var Nct=s(bce);T5o=r(Nct,"AutoModelForPreTraining"),Nct.forEach(t),vVe.forEach(t),hGe=i(f),$o=n(f,"DIV",{class:!0});var Js=s($o);T(YL.$$.fragment,Js),M5o=i(Js),ji=n(Js,"P",{});var Zee=s(ji);E5o=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Vj=n(Zee,"A",{href:!0});var qct=s(Vj);C5o=r(qct,"from_pretrained()"),qct.forEach(t),w5o=r(Zee," class method or the "),Xj=n(Zee,"A",{href:!0});var jct=s(Xj);A5o=r(jct,"from_config()"),jct.forEach(t),L5o=r(Zee,` class
method.`),Zee.forEach(t),y5o=i(Js),KL=n(Js,"P",{});var FVe=s(KL);x5o=r(FVe,"This class cannot be instantiated directly using "),vce=n(FVe,"CODE",{});var Dct=s(vce);$5o=r(Dct,"__init__()"),Dct.forEach(t),k5o=r(FVe," (throws an error)."),FVe.forEach(t),S5o=i(Js),lt=n(Js,"DIV",{class:!0});var CA=s(lt);T(ZL.$$.fragment,CA),R5o=i(CA),Fce=n(CA,"P",{});var Gct=s(Fce);P5o=r(Gct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Gct.forEach(t),B5o=i(CA),Di=n(CA,"P",{});var eoe=s(Di);I5o=r(eoe,`Note:
Loading a model from its configuration file does `),Tce=n(eoe,"STRONG",{});var Oct=s(Tce);N5o=r(Oct,"not"),Oct.forEach(t),q5o=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zj=n(eoe,"A",{href:!0});var Vct=s(zj);j5o=r(Vct,"from_pretrained()"),Vct.forEach(t),D5o=r(eoe," to load the model weights."),eoe.forEach(t),G5o=i(CA),T(x_.$$.fragment,CA),CA.forEach(t),O5o=i(Js),Ye=n(Js,"DIV",{class:!0});var sa=s(Ye);T(ey.$$.fragment,sa),V5o=i(sa),Mce=n(sa,"P",{});var Xct=s(Mce);X5o=r(Xct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xct.forEach(t),z5o=i(sa),Pa=n(sa,"P",{});var wA=s(Pa);W5o=r(wA,"The model class to instantiate is selected based on the "),Ece=n(wA,"CODE",{});var zct=s(Ece);Q5o=r(zct,"model_type"),zct.forEach(t),H5o=r(wA,` property of the config object (either
passed as an argument or loaded from `),Cce=n(wA,"CODE",{});var Wct=s(Cce);U5o=r(Wct,"pretrained_model_name_or_path"),Wct.forEach(t),J5o=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wce=n(wA,"CODE",{});var Qct=s(wce);Y5o=r(Qct,"pretrained_model_name_or_path"),Qct.forEach(t),K5o=r(wA,":"),wA.forEach(t),Z5o=i(sa),G=n(sa,"UL",{});var O=s(G);$_=n(O,"LI",{});var p9e=s($_);Ace=n(p9e,"STRONG",{});var Hct=s(Ace);e3o=r(Hct,"albert"),Hct.forEach(t),o3o=r(p9e," \u2014 "),Wj=n(p9e,"A",{href:!0});var Uct=s(Wj);r3o=r(Uct,"AlbertForPreTraining"),Uct.forEach(t),t3o=r(p9e," (ALBERT model)"),p9e.forEach(t),a3o=i(O),k_=n(O,"LI",{});var u9e=s(k_);Lce=n(u9e,"STRONG",{});var Jct=s(Lce);n3o=r(Jct,"bart"),Jct.forEach(t),s3o=r(u9e," \u2014 "),Qj=n(u9e,"A",{href:!0});var Yct=s(Qj);l3o=r(Yct,"BartForConditionalGeneration"),Yct.forEach(t),i3o=r(u9e," (BART model)"),u9e.forEach(t),d3o=i(O),S_=n(O,"LI",{});var _9e=s(S_);yce=n(_9e,"STRONG",{});var Kct=s(yce);c3o=r(Kct,"bert"),Kct.forEach(t),f3o=r(_9e," \u2014 "),Hj=n(_9e,"A",{href:!0});var Zct=s(Hj);m3o=r(Zct,"BertForPreTraining"),Zct.forEach(t),g3o=r(_9e," (BERT model)"),_9e.forEach(t),h3o=i(O),R_=n(O,"LI",{});var b9e=s(R_);xce=n(b9e,"STRONG",{});var eft=s(xce);p3o=r(eft,"big_bird"),eft.forEach(t),u3o=r(b9e," \u2014 "),Uj=n(b9e,"A",{href:!0});var oft=s(Uj);_3o=r(oft,"BigBirdForPreTraining"),oft.forEach(t),b3o=r(b9e," (BigBird model)"),b9e.forEach(t),v3o=i(O),P_=n(O,"LI",{});var v9e=s(P_);$ce=n(v9e,"STRONG",{});var rft=s($ce);F3o=r(rft,"bloom"),rft.forEach(t),T3o=r(v9e," \u2014 "),Jj=n(v9e,"A",{href:!0});var tft=s(Jj);M3o=r(tft,"BloomForCausalLM"),tft.forEach(t),E3o=r(v9e," (BLOOM model)"),v9e.forEach(t),C3o=i(O),B_=n(O,"LI",{});var F9e=s(B_);kce=n(F9e,"STRONG",{});var aft=s(kce);w3o=r(aft,"camembert"),aft.forEach(t),A3o=r(F9e," \u2014 "),Yj=n(F9e,"A",{href:!0});var nft=s(Yj);L3o=r(nft,"CamembertForMaskedLM"),nft.forEach(t),y3o=r(F9e," (CamemBERT model)"),F9e.forEach(t),x3o=i(O),I_=n(O,"LI",{});var T9e=s(I_);Sce=n(T9e,"STRONG",{});var sft=s(Sce);$3o=r(sft,"ctrl"),sft.forEach(t),k3o=r(T9e," \u2014 "),Kj=n(T9e,"A",{href:!0});var lft=s(Kj);S3o=r(lft,"CTRLLMHeadModel"),lft.forEach(t),R3o=r(T9e," (CTRL model)"),T9e.forEach(t),P3o=i(O),N_=n(O,"LI",{});var M9e=s(N_);Rce=n(M9e,"STRONG",{});var ift=s(Rce);B3o=r(ift,"data2vec-text"),ift.forEach(t),I3o=r(M9e," \u2014 "),Zj=n(M9e,"A",{href:!0});var dft=s(Zj);N3o=r(dft,"Data2VecTextForMaskedLM"),dft.forEach(t),q3o=r(M9e," (Data2VecText model)"),M9e.forEach(t),j3o=i(O),q_=n(O,"LI",{});var E9e=s(q_);Pce=n(E9e,"STRONG",{});var cft=s(Pce);D3o=r(cft,"deberta"),cft.forEach(t),G3o=r(E9e," \u2014 "),eD=n(E9e,"A",{href:!0});var fft=s(eD);O3o=r(fft,"DebertaForMaskedLM"),fft.forEach(t),V3o=r(E9e," (DeBERTa model)"),E9e.forEach(t),X3o=i(O),j_=n(O,"LI",{});var C9e=s(j_);Bce=n(C9e,"STRONG",{});var mft=s(Bce);z3o=r(mft,"deberta-v2"),mft.forEach(t),W3o=r(C9e," \u2014 "),oD=n(C9e,"A",{href:!0});var gft=s(oD);Q3o=r(gft,"DebertaV2ForMaskedLM"),gft.forEach(t),H3o=r(C9e," (DeBERTa-v2 model)"),C9e.forEach(t),U3o=i(O),D_=n(O,"LI",{});var w9e=s(D_);Ice=n(w9e,"STRONG",{});var hft=s(Ice);J3o=r(hft,"distilbert"),hft.forEach(t),Y3o=r(w9e," \u2014 "),rD=n(w9e,"A",{href:!0});var pft=s(rD);K3o=r(pft,"DistilBertForMaskedLM"),pft.forEach(t),Z3o=r(w9e," (DistilBERT model)"),w9e.forEach(t),e0o=i(O),G_=n(O,"LI",{});var A9e=s(G_);Nce=n(A9e,"STRONG",{});var uft=s(Nce);o0o=r(uft,"electra"),uft.forEach(t),r0o=r(A9e," \u2014 "),tD=n(A9e,"A",{href:!0});var _ft=s(tD);t0o=r(_ft,"ElectraForPreTraining"),_ft.forEach(t),a0o=r(A9e," (ELECTRA model)"),A9e.forEach(t),n0o=i(O),O_=n(O,"LI",{});var L9e=s(O_);qce=n(L9e,"STRONG",{});var bft=s(qce);s0o=r(bft,"flaubert"),bft.forEach(t),l0o=r(L9e," \u2014 "),aD=n(L9e,"A",{href:!0});var vft=s(aD);i0o=r(vft,"FlaubertWithLMHeadModel"),vft.forEach(t),d0o=r(L9e," (FlauBERT model)"),L9e.forEach(t),c0o=i(O),V_=n(O,"LI",{});var y9e=s(V_);jce=n(y9e,"STRONG",{});var Fft=s(jce);f0o=r(Fft,"flava"),Fft.forEach(t),m0o=r(y9e," \u2014 "),nD=n(y9e,"A",{href:!0});var Tft=s(nD);g0o=r(Tft,"FlavaForPreTraining"),Tft.forEach(t),h0o=r(y9e," (FLAVA model)"),y9e.forEach(t),p0o=i(O),X_=n(O,"LI",{});var x9e=s(X_);Dce=n(x9e,"STRONG",{});var Mft=s(Dce);u0o=r(Mft,"fnet"),Mft.forEach(t),_0o=r(x9e," \u2014 "),sD=n(x9e,"A",{href:!0});var Eft=s(sD);b0o=r(Eft,"FNetForPreTraining"),Eft.forEach(t),v0o=r(x9e," (FNet model)"),x9e.forEach(t),F0o=i(O),z_=n(O,"LI",{});var $9e=s(z_);Gce=n($9e,"STRONG",{});var Cft=s(Gce);T0o=r(Cft,"fsmt"),Cft.forEach(t),M0o=r($9e," \u2014 "),lD=n($9e,"A",{href:!0});var wft=s(lD);E0o=r(wft,"FSMTForConditionalGeneration"),wft.forEach(t),C0o=r($9e," (FairSeq Machine-Translation model)"),$9e.forEach(t),w0o=i(O),W_=n(O,"LI",{});var k9e=s(W_);Oce=n(k9e,"STRONG",{});var Aft=s(Oce);A0o=r(Aft,"funnel"),Aft.forEach(t),L0o=r(k9e," \u2014 "),iD=n(k9e,"A",{href:!0});var Lft=s(iD);y0o=r(Lft,"FunnelForPreTraining"),Lft.forEach(t),x0o=r(k9e," (Funnel Transformer model)"),k9e.forEach(t),$0o=i(O),Q_=n(O,"LI",{});var S9e=s(Q_);Vce=n(S9e,"STRONG",{});var yft=s(Vce);k0o=r(yft,"gpt2"),yft.forEach(t),S0o=r(S9e," \u2014 "),dD=n(S9e,"A",{href:!0});var xft=s(dD);R0o=r(xft,"GPT2LMHeadModel"),xft.forEach(t),P0o=r(S9e," (OpenAI GPT-2 model)"),S9e.forEach(t),B0o=i(O),H_=n(O,"LI",{});var R9e=s(H_);Xce=n(R9e,"STRONG",{});var $ft=s(Xce);I0o=r($ft,"ibert"),$ft.forEach(t),N0o=r(R9e," \u2014 "),cD=n(R9e,"A",{href:!0});var kft=s(cD);q0o=r(kft,"IBertForMaskedLM"),kft.forEach(t),j0o=r(R9e," (I-BERT model)"),R9e.forEach(t),D0o=i(O),U_=n(O,"LI",{});var P9e=s(U_);zce=n(P9e,"STRONG",{});var Sft=s(zce);G0o=r(Sft,"layoutlm"),Sft.forEach(t),O0o=r(P9e," \u2014 "),fD=n(P9e,"A",{href:!0});var Rft=s(fD);V0o=r(Rft,"LayoutLMForMaskedLM"),Rft.forEach(t),X0o=r(P9e," (LayoutLM model)"),P9e.forEach(t),z0o=i(O),J_=n(O,"LI",{});var B9e=s(J_);Wce=n(B9e,"STRONG",{});var Pft=s(Wce);W0o=r(Pft,"longformer"),Pft.forEach(t),Q0o=r(B9e," \u2014 "),mD=n(B9e,"A",{href:!0});var Bft=s(mD);H0o=r(Bft,"LongformerForMaskedLM"),Bft.forEach(t),U0o=r(B9e," (Longformer model)"),B9e.forEach(t),J0o=i(O),Y_=n(O,"LI",{});var I9e=s(Y_);Qce=n(I9e,"STRONG",{});var Ift=s(Qce);Y0o=r(Ift,"lxmert"),Ift.forEach(t),K0o=r(I9e," \u2014 "),gD=n(I9e,"A",{href:!0});var Nft=s(gD);Z0o=r(Nft,"LxmertForPreTraining"),Nft.forEach(t),ewo=r(I9e," (LXMERT model)"),I9e.forEach(t),owo=i(O),K_=n(O,"LI",{});var N9e=s(K_);Hce=n(N9e,"STRONG",{});var qft=s(Hce);rwo=r(qft,"megatron-bert"),qft.forEach(t),two=r(N9e," \u2014 "),hD=n(N9e,"A",{href:!0});var jft=s(hD);awo=r(jft,"MegatronBertForPreTraining"),jft.forEach(t),nwo=r(N9e," (Megatron-BERT model)"),N9e.forEach(t),swo=i(O),Z_=n(O,"LI",{});var q9e=s(Z_);Uce=n(q9e,"STRONG",{});var Dft=s(Uce);lwo=r(Dft,"mobilebert"),Dft.forEach(t),iwo=r(q9e," \u2014 "),pD=n(q9e,"A",{href:!0});var Gft=s(pD);dwo=r(Gft,"MobileBertForPreTraining"),Gft.forEach(t),cwo=r(q9e," (MobileBERT model)"),q9e.forEach(t),fwo=i(O),e2=n(O,"LI",{});var j9e=s(e2);Jce=n(j9e,"STRONG",{});var Oft=s(Jce);mwo=r(Oft,"mpnet"),Oft.forEach(t),gwo=r(j9e," \u2014 "),uD=n(j9e,"A",{href:!0});var Vft=s(uD);hwo=r(Vft,"MPNetForMaskedLM"),Vft.forEach(t),pwo=r(j9e," (MPNet model)"),j9e.forEach(t),uwo=i(O),o2=n(O,"LI",{});var D9e=s(o2);Yce=n(D9e,"STRONG",{});var Xft=s(Yce);_wo=r(Xft,"openai-gpt"),Xft.forEach(t),bwo=r(D9e," \u2014 "),_D=n(D9e,"A",{href:!0});var zft=s(_D);vwo=r(zft,"OpenAIGPTLMHeadModel"),zft.forEach(t),Fwo=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),Two=i(O),r2=n(O,"LI",{});var G9e=s(r2);Kce=n(G9e,"STRONG",{});var Wft=s(Kce);Mwo=r(Wft,"retribert"),Wft.forEach(t),Ewo=r(G9e," \u2014 "),bD=n(G9e,"A",{href:!0});var Qft=s(bD);Cwo=r(Qft,"RetriBertModel"),Qft.forEach(t),wwo=r(G9e," (RetriBERT model)"),G9e.forEach(t),Awo=i(O),t2=n(O,"LI",{});var O9e=s(t2);Zce=n(O9e,"STRONG",{});var Hft=s(Zce);Lwo=r(Hft,"roberta"),Hft.forEach(t),ywo=r(O9e," \u2014 "),vD=n(O9e,"A",{href:!0});var Uft=s(vD);xwo=r(Uft,"RobertaForMaskedLM"),Uft.forEach(t),$wo=r(O9e," (RoBERTa model)"),O9e.forEach(t),kwo=i(O),a2=n(O,"LI",{});var V9e=s(a2);efe=n(V9e,"STRONG",{});var Jft=s(efe);Swo=r(Jft,"splinter"),Jft.forEach(t),Rwo=r(V9e," \u2014 "),FD=n(V9e,"A",{href:!0});var Yft=s(FD);Pwo=r(Yft,"SplinterForPreTraining"),Yft.forEach(t),Bwo=r(V9e," (Splinter model)"),V9e.forEach(t),Iwo=i(O),n2=n(O,"LI",{});var X9e=s(n2);ofe=n(X9e,"STRONG",{});var Kft=s(ofe);Nwo=r(Kft,"squeezebert"),Kft.forEach(t),qwo=r(X9e," \u2014 "),TD=n(X9e,"A",{href:!0});var Zft=s(TD);jwo=r(Zft,"SqueezeBertForMaskedLM"),Zft.forEach(t),Dwo=r(X9e," (SqueezeBERT model)"),X9e.forEach(t),Gwo=i(O),s2=n(O,"LI",{});var z9e=s(s2);rfe=n(z9e,"STRONG",{});var emt=s(rfe);Owo=r(emt,"t5"),emt.forEach(t),Vwo=r(z9e," \u2014 "),MD=n(z9e,"A",{href:!0});var omt=s(MD);Xwo=r(omt,"T5ForConditionalGeneration"),omt.forEach(t),zwo=r(z9e," (T5 model)"),z9e.forEach(t),Wwo=i(O),l2=n(O,"LI",{});var W9e=s(l2);tfe=n(W9e,"STRONG",{});var rmt=s(tfe);Qwo=r(rmt,"tapas"),rmt.forEach(t),Hwo=r(W9e," \u2014 "),ED=n(W9e,"A",{href:!0});var tmt=s(ED);Uwo=r(tmt,"TapasForMaskedLM"),tmt.forEach(t),Jwo=r(W9e," (TAPAS model)"),W9e.forEach(t),Ywo=i(O),i2=n(O,"LI",{});var Q9e=s(i2);afe=n(Q9e,"STRONG",{});var amt=s(afe);Kwo=r(amt,"transfo-xl"),amt.forEach(t),Zwo=r(Q9e," \u2014 "),CD=n(Q9e,"A",{href:!0});var nmt=s(CD);eAo=r(nmt,"TransfoXLLMHeadModel"),nmt.forEach(t),oAo=r(Q9e," (Transformer-XL model)"),Q9e.forEach(t),rAo=i(O),d2=n(O,"LI",{});var H9e=s(d2);nfe=n(H9e,"STRONG",{});var smt=s(nfe);tAo=r(smt,"unispeech"),smt.forEach(t),aAo=r(H9e," \u2014 "),wD=n(H9e,"A",{href:!0});var lmt=s(wD);nAo=r(lmt,"UniSpeechForPreTraining"),lmt.forEach(t),sAo=r(H9e," (UniSpeech model)"),H9e.forEach(t),lAo=i(O),c2=n(O,"LI",{});var U9e=s(c2);sfe=n(U9e,"STRONG",{});var imt=s(sfe);iAo=r(imt,"unispeech-sat"),imt.forEach(t),dAo=r(U9e," \u2014 "),AD=n(U9e,"A",{href:!0});var dmt=s(AD);cAo=r(dmt,"UniSpeechSatForPreTraining"),dmt.forEach(t),fAo=r(U9e," (UniSpeechSat model)"),U9e.forEach(t),mAo=i(O),f2=n(O,"LI",{});var J9e=s(f2);lfe=n(J9e,"STRONG",{});var cmt=s(lfe);gAo=r(cmt,"visual_bert"),cmt.forEach(t),hAo=r(J9e," \u2014 "),LD=n(J9e,"A",{href:!0});var fmt=s(LD);pAo=r(fmt,"VisualBertForPreTraining"),fmt.forEach(t),uAo=r(J9e," (VisualBERT model)"),J9e.forEach(t),_Ao=i(O),m2=n(O,"LI",{});var Y9e=s(m2);ife=n(Y9e,"STRONG",{});var mmt=s(ife);bAo=r(mmt,"vit_mae"),mmt.forEach(t),vAo=r(Y9e," \u2014 "),yD=n(Y9e,"A",{href:!0});var gmt=s(yD);FAo=r(gmt,"ViTMAEForPreTraining"),gmt.forEach(t),TAo=r(Y9e," (ViTMAE model)"),Y9e.forEach(t),MAo=i(O),g2=n(O,"LI",{});var K9e=s(g2);dfe=n(K9e,"STRONG",{});var hmt=s(dfe);EAo=r(hmt,"wav2vec2"),hmt.forEach(t),CAo=r(K9e," \u2014 "),xD=n(K9e,"A",{href:!0});var pmt=s(xD);wAo=r(pmt,"Wav2Vec2ForPreTraining"),pmt.forEach(t),AAo=r(K9e," (Wav2Vec2 model)"),K9e.forEach(t),LAo=i(O),h2=n(O,"LI",{});var Z9e=s(h2);cfe=n(Z9e,"STRONG",{});var umt=s(cfe);yAo=r(umt,"wav2vec2-conformer"),umt.forEach(t),xAo=r(Z9e," \u2014 "),$D=n(Z9e,"A",{href:!0});var _mt=s($D);$Ao=r(_mt,"Wav2Vec2ConformerForPreTraining"),_mt.forEach(t),kAo=r(Z9e," (Wav2Vec2-Conformer model)"),Z9e.forEach(t),SAo=i(O),p2=n(O,"LI",{});var exe=s(p2);ffe=n(exe,"STRONG",{});var bmt=s(ffe);RAo=r(bmt,"xlm"),bmt.forEach(t),PAo=r(exe," \u2014 "),kD=n(exe,"A",{href:!0});var vmt=s(kD);BAo=r(vmt,"XLMWithLMHeadModel"),vmt.forEach(t),IAo=r(exe," (XLM model)"),exe.forEach(t),NAo=i(O),u2=n(O,"LI",{});var oxe=s(u2);mfe=n(oxe,"STRONG",{});var Fmt=s(mfe);qAo=r(Fmt,"xlm-roberta"),Fmt.forEach(t),jAo=r(oxe," \u2014 "),SD=n(oxe,"A",{href:!0});var Tmt=s(SD);DAo=r(Tmt,"XLMRobertaForMaskedLM"),Tmt.forEach(t),GAo=r(oxe," (XLM-RoBERTa model)"),oxe.forEach(t),OAo=i(O),_2=n(O,"LI",{});var rxe=s(_2);gfe=n(rxe,"STRONG",{});var Mmt=s(gfe);VAo=r(Mmt,"xlm-roberta-xl"),Mmt.forEach(t),XAo=r(rxe," \u2014 "),RD=n(rxe,"A",{href:!0});var Emt=s(RD);zAo=r(Emt,"XLMRobertaXLForMaskedLM"),Emt.forEach(t),WAo=r(rxe," (XLM-RoBERTa-XL model)"),rxe.forEach(t),QAo=i(O),b2=n(O,"LI",{});var txe=s(b2);hfe=n(txe,"STRONG",{});var Cmt=s(hfe);HAo=r(Cmt,"xlnet"),Cmt.forEach(t),UAo=r(txe," \u2014 "),PD=n(txe,"A",{href:!0});var wmt=s(PD);JAo=r(wmt,"XLNetLMHeadModel"),wmt.forEach(t),YAo=r(txe," (XLNet model)"),txe.forEach(t),O.forEach(t),KAo=i(sa),v2=n(sa,"P",{});var axe=s(v2);ZAo=r(axe,"The model is set in evaluation mode by default using "),pfe=n(axe,"CODE",{});var Amt=s(pfe);e6o=r(Amt,"model.eval()"),Amt.forEach(t),o6o=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n(axe,"CODE",{});var Lmt=s(ufe);r6o=r(Lmt,"model.train()"),Lmt.forEach(t),axe.forEach(t),t6o=i(sa),T(F2.$$.fragment,sa),sa.forEach(t),Js.forEach(t),pGe=i(f),Gi=n(f,"H2",{class:!0});var TVe=s(Gi);T2=n(TVe,"A",{id:!0,class:!0,href:!0});var ymt=s(T2);_fe=n(ymt,"SPAN",{});var xmt=s(_fe);T(oy.$$.fragment,xmt),xmt.forEach(t),ymt.forEach(t),a6o=i(TVe),bfe=n(TVe,"SPAN",{});var $mt=s(bfe);n6o=r($mt,"AutoModelForCausalLM"),$mt.forEach(t),TVe.forEach(t),uGe=i(f),ko=n(f,"DIV",{class:!0});var Ys=s(ko);T(ry.$$.fragment,Ys),s6o=i(Ys),Oi=n(Ys,"P",{});var ooe=s(Oi);l6o=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),BD=n(ooe,"A",{href:!0});var kmt=s(BD);i6o=r(kmt,"from_pretrained()"),kmt.forEach(t),d6o=r(ooe," class method or the "),ID=n(ooe,"A",{href:!0});var Smt=s(ID);c6o=r(Smt,"from_config()"),Smt.forEach(t),f6o=r(ooe,` class
method.`),ooe.forEach(t),m6o=i(Ys),ty=n(Ys,"P",{});var MVe=s(ty);g6o=r(MVe,"This class cannot be instantiated directly using "),vfe=n(MVe,"CODE",{});var Rmt=s(vfe);h6o=r(Rmt,"__init__()"),Rmt.forEach(t),p6o=r(MVe," (throws an error)."),MVe.forEach(t),u6o=i(Ys),it=n(Ys,"DIV",{class:!0});var AA=s(it);T(ay.$$.fragment,AA),_6o=i(AA),Ffe=n(AA,"P",{});var Pmt=s(Ffe);b6o=r(Pmt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pmt.forEach(t),v6o=i(AA),Vi=n(AA,"P",{});var roe=s(Vi);F6o=r(roe,`Note:
Loading a model from its configuration file does `),Tfe=n(roe,"STRONG",{});var Bmt=s(Tfe);T6o=r(Bmt,"not"),Bmt.forEach(t),M6o=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(roe,"A",{href:!0});var Imt=s(ND);E6o=r(Imt,"from_pretrained()"),Imt.forEach(t),C6o=r(roe," to load the model weights."),roe.forEach(t),w6o=i(AA),T(M2.$$.fragment,AA),AA.forEach(t),A6o=i(Ys),Ke=n(Ys,"DIV",{class:!0});var la=s(Ke);T(ny.$$.fragment,la),L6o=i(la),Mfe=n(la,"P",{});var Nmt=s(Mfe);y6o=r(Nmt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nmt.forEach(t),x6o=i(la),Ba=n(la,"P",{});var LA=s(Ba);$6o=r(LA,"The model class to instantiate is selected based on the "),Efe=n(LA,"CODE",{});var qmt=s(Efe);k6o=r(qmt,"model_type"),qmt.forEach(t),S6o=r(LA,` property of the config object (either
passed as an argument or loaded from `),Cfe=n(LA,"CODE",{});var jmt=s(Cfe);R6o=r(jmt,"pretrained_model_name_or_path"),jmt.forEach(t),P6o=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wfe=n(LA,"CODE",{});var Dmt=s(wfe);B6o=r(Dmt,"pretrained_model_name_or_path"),Dmt.forEach(t),I6o=r(LA,":"),LA.forEach(t),N6o=i(la),z=n(la,"UL",{});var W=s(z);E2=n(W,"LI",{});var nxe=s(E2);Afe=n(nxe,"STRONG",{});var Gmt=s(Afe);q6o=r(Gmt,"bart"),Gmt.forEach(t),j6o=r(nxe," \u2014 "),qD=n(nxe,"A",{href:!0});var Omt=s(qD);D6o=r(Omt,"BartForCausalLM"),Omt.forEach(t),G6o=r(nxe," (BART model)"),nxe.forEach(t),O6o=i(W),C2=n(W,"LI",{});var sxe=s(C2);Lfe=n(sxe,"STRONG",{});var Vmt=s(Lfe);V6o=r(Vmt,"bert"),Vmt.forEach(t),X6o=r(sxe," \u2014 "),jD=n(sxe,"A",{href:!0});var Xmt=s(jD);z6o=r(Xmt,"BertLMHeadModel"),Xmt.forEach(t),W6o=r(sxe," (BERT model)"),sxe.forEach(t),Q6o=i(W),w2=n(W,"LI",{});var lxe=s(w2);yfe=n(lxe,"STRONG",{});var zmt=s(yfe);H6o=r(zmt,"bert-generation"),zmt.forEach(t),U6o=r(lxe," \u2014 "),DD=n(lxe,"A",{href:!0});var Wmt=s(DD);J6o=r(Wmt,"BertGenerationDecoder"),Wmt.forEach(t),Y6o=r(lxe," (Bert Generation model)"),lxe.forEach(t),K6o=i(W),A2=n(W,"LI",{});var ixe=s(A2);xfe=n(ixe,"STRONG",{});var Qmt=s(xfe);Z6o=r(Qmt,"big_bird"),Qmt.forEach(t),eLo=r(ixe," \u2014 "),GD=n(ixe,"A",{href:!0});var Hmt=s(GD);oLo=r(Hmt,"BigBirdForCausalLM"),Hmt.forEach(t),rLo=r(ixe," (BigBird model)"),ixe.forEach(t),tLo=i(W),L2=n(W,"LI",{});var dxe=s(L2);$fe=n(dxe,"STRONG",{});var Umt=s($fe);aLo=r(Umt,"bigbird_pegasus"),Umt.forEach(t),nLo=r(dxe," \u2014 "),OD=n(dxe,"A",{href:!0});var Jmt=s(OD);sLo=r(Jmt,"BigBirdPegasusForCausalLM"),Jmt.forEach(t),lLo=r(dxe," (BigBird-Pegasus model)"),dxe.forEach(t),iLo=i(W),y2=n(W,"LI",{});var cxe=s(y2);kfe=n(cxe,"STRONG",{});var Ymt=s(kfe);dLo=r(Ymt,"blenderbot"),Ymt.forEach(t),cLo=r(cxe," \u2014 "),VD=n(cxe,"A",{href:!0});var Kmt=s(VD);fLo=r(Kmt,"BlenderbotForCausalLM"),Kmt.forEach(t),mLo=r(cxe," (Blenderbot model)"),cxe.forEach(t),gLo=i(W),x2=n(W,"LI",{});var fxe=s(x2);Sfe=n(fxe,"STRONG",{});var Zmt=s(Sfe);hLo=r(Zmt,"blenderbot-small"),Zmt.forEach(t),pLo=r(fxe," \u2014 "),XD=n(fxe,"A",{href:!0});var egt=s(XD);uLo=r(egt,"BlenderbotSmallForCausalLM"),egt.forEach(t),_Lo=r(fxe," (BlenderbotSmall model)"),fxe.forEach(t),bLo=i(W),$2=n(W,"LI",{});var mxe=s($2);Rfe=n(mxe,"STRONG",{});var ogt=s(Rfe);vLo=r(ogt,"bloom"),ogt.forEach(t),FLo=r(mxe," \u2014 "),zD=n(mxe,"A",{href:!0});var rgt=s(zD);TLo=r(rgt,"BloomForCausalLM"),rgt.forEach(t),MLo=r(mxe," (BLOOM model)"),mxe.forEach(t),ELo=i(W),k2=n(W,"LI",{});var gxe=s(k2);Pfe=n(gxe,"STRONG",{});var tgt=s(Pfe);CLo=r(tgt,"camembert"),tgt.forEach(t),wLo=r(gxe," \u2014 "),WD=n(gxe,"A",{href:!0});var agt=s(WD);ALo=r(agt,"CamembertForCausalLM"),agt.forEach(t),LLo=r(gxe," (CamemBERT model)"),gxe.forEach(t),yLo=i(W),S2=n(W,"LI",{});var hxe=s(S2);Bfe=n(hxe,"STRONG",{});var ngt=s(Bfe);xLo=r(ngt,"ctrl"),ngt.forEach(t),$Lo=r(hxe," \u2014 "),QD=n(hxe,"A",{href:!0});var sgt=s(QD);kLo=r(sgt,"CTRLLMHeadModel"),sgt.forEach(t),SLo=r(hxe," (CTRL model)"),hxe.forEach(t),RLo=i(W),R2=n(W,"LI",{});var pxe=s(R2);Ife=n(pxe,"STRONG",{});var lgt=s(Ife);PLo=r(lgt,"data2vec-text"),lgt.forEach(t),BLo=r(pxe," \u2014 "),HD=n(pxe,"A",{href:!0});var igt=s(HD);ILo=r(igt,"Data2VecTextForCausalLM"),igt.forEach(t),NLo=r(pxe," (Data2VecText model)"),pxe.forEach(t),qLo=i(W),P2=n(W,"LI",{});var uxe=s(P2);Nfe=n(uxe,"STRONG",{});var dgt=s(Nfe);jLo=r(dgt,"electra"),dgt.forEach(t),DLo=r(uxe," \u2014 "),UD=n(uxe,"A",{href:!0});var cgt=s(UD);GLo=r(cgt,"ElectraForCausalLM"),cgt.forEach(t),OLo=r(uxe," (ELECTRA model)"),uxe.forEach(t),VLo=i(W),B2=n(W,"LI",{});var _xe=s(B2);qfe=n(_xe,"STRONG",{});var fgt=s(qfe);XLo=r(fgt,"gpt2"),fgt.forEach(t),zLo=r(_xe," \u2014 "),JD=n(_xe,"A",{href:!0});var mgt=s(JD);WLo=r(mgt,"GPT2LMHeadModel"),mgt.forEach(t),QLo=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),HLo=i(W),I2=n(W,"LI",{});var bxe=s(I2);jfe=n(bxe,"STRONG",{});var ggt=s(jfe);ULo=r(ggt,"gpt_neo"),ggt.forEach(t),JLo=r(bxe," \u2014 "),YD=n(bxe,"A",{href:!0});var hgt=s(YD);YLo=r(hgt,"GPTNeoForCausalLM"),hgt.forEach(t),KLo=r(bxe," (GPT Neo model)"),bxe.forEach(t),ZLo=i(W),N2=n(W,"LI",{});var vxe=s(N2);Dfe=n(vxe,"STRONG",{});var pgt=s(Dfe);eyo=r(pgt,"gpt_neox"),pgt.forEach(t),oyo=r(vxe," \u2014 "),KD=n(vxe,"A",{href:!0});var ugt=s(KD);ryo=r(ugt,"GPTNeoXForCausalLM"),ugt.forEach(t),tyo=r(vxe," (GPT NeoX model)"),vxe.forEach(t),ayo=i(W),q2=n(W,"LI",{});var Fxe=s(q2);Gfe=n(Fxe,"STRONG",{});var _gt=s(Gfe);nyo=r(_gt,"gptj"),_gt.forEach(t),syo=r(Fxe," \u2014 "),ZD=n(Fxe,"A",{href:!0});var bgt=s(ZD);lyo=r(bgt,"GPTJForCausalLM"),bgt.forEach(t),iyo=r(Fxe," (GPT-J model)"),Fxe.forEach(t),dyo=i(W),j2=n(W,"LI",{});var Txe=s(j2);Ofe=n(Txe,"STRONG",{});var vgt=s(Ofe);cyo=r(vgt,"marian"),vgt.forEach(t),fyo=r(Txe," \u2014 "),eG=n(Txe,"A",{href:!0});var Fgt=s(eG);myo=r(Fgt,"MarianForCausalLM"),Fgt.forEach(t),gyo=r(Txe," (Marian model)"),Txe.forEach(t),hyo=i(W),D2=n(W,"LI",{});var Mxe=s(D2);Vfe=n(Mxe,"STRONG",{});var Tgt=s(Vfe);pyo=r(Tgt,"mbart"),Tgt.forEach(t),uyo=r(Mxe," \u2014 "),oG=n(Mxe,"A",{href:!0});var Mgt=s(oG);_yo=r(Mgt,"MBartForCausalLM"),Mgt.forEach(t),byo=r(Mxe," (mBART model)"),Mxe.forEach(t),vyo=i(W),G2=n(W,"LI",{});var Exe=s(G2);Xfe=n(Exe,"STRONG",{});var Egt=s(Xfe);Fyo=r(Egt,"megatron-bert"),Egt.forEach(t),Tyo=r(Exe," \u2014 "),rG=n(Exe,"A",{href:!0});var Cgt=s(rG);Myo=r(Cgt,"MegatronBertForCausalLM"),Cgt.forEach(t),Eyo=r(Exe," (Megatron-BERT model)"),Exe.forEach(t),Cyo=i(W),O2=n(W,"LI",{});var Cxe=s(O2);zfe=n(Cxe,"STRONG",{});var wgt=s(zfe);wyo=r(wgt,"openai-gpt"),wgt.forEach(t),Ayo=r(Cxe," \u2014 "),tG=n(Cxe,"A",{href:!0});var Agt=s(tG);Lyo=r(Agt,"OpenAIGPTLMHeadModel"),Agt.forEach(t),yyo=r(Cxe," (OpenAI GPT model)"),Cxe.forEach(t),xyo=i(W),V2=n(W,"LI",{});var wxe=s(V2);Wfe=n(wxe,"STRONG",{});var Lgt=s(Wfe);$yo=r(Lgt,"opt"),Lgt.forEach(t),kyo=r(wxe," \u2014 "),aG=n(wxe,"A",{href:!0});var ygt=s(aG);Syo=r(ygt,"OPTForCausalLM"),ygt.forEach(t),Ryo=r(wxe," (OPT model)"),wxe.forEach(t),Pyo=i(W),X2=n(W,"LI",{});var Axe=s(X2);Qfe=n(Axe,"STRONG",{});var xgt=s(Qfe);Byo=r(xgt,"pegasus"),xgt.forEach(t),Iyo=r(Axe," \u2014 "),nG=n(Axe,"A",{href:!0});var $gt=s(nG);Nyo=r($gt,"PegasusForCausalLM"),$gt.forEach(t),qyo=r(Axe," (Pegasus model)"),Axe.forEach(t),jyo=i(W),z2=n(W,"LI",{});var Lxe=s(z2);Hfe=n(Lxe,"STRONG",{});var kgt=s(Hfe);Dyo=r(kgt,"plbart"),kgt.forEach(t),Gyo=r(Lxe," \u2014 "),sG=n(Lxe,"A",{href:!0});var Sgt=s(sG);Oyo=r(Sgt,"PLBartForCausalLM"),Sgt.forEach(t),Vyo=r(Lxe," (PLBart model)"),Lxe.forEach(t),Xyo=i(W),W2=n(W,"LI",{});var yxe=s(W2);Ufe=n(yxe,"STRONG",{});var Rgt=s(Ufe);zyo=r(Rgt,"prophetnet"),Rgt.forEach(t),Wyo=r(yxe," \u2014 "),lG=n(yxe,"A",{href:!0});var Pgt=s(lG);Qyo=r(Pgt,"ProphetNetForCausalLM"),Pgt.forEach(t),Hyo=r(yxe," (ProphetNet model)"),yxe.forEach(t),Uyo=i(W),Q2=n(W,"LI",{});var xxe=s(Q2);Jfe=n(xxe,"STRONG",{});var Bgt=s(Jfe);Jyo=r(Bgt,"qdqbert"),Bgt.forEach(t),Yyo=r(xxe," \u2014 "),iG=n(xxe,"A",{href:!0});var Igt=s(iG);Kyo=r(Igt,"QDQBertLMHeadModel"),Igt.forEach(t),Zyo=r(xxe," (QDQBert model)"),xxe.forEach(t),e8o=i(W),H2=n(W,"LI",{});var $xe=s(H2);Yfe=n($xe,"STRONG",{});var Ngt=s(Yfe);o8o=r(Ngt,"reformer"),Ngt.forEach(t),r8o=r($xe," \u2014 "),dG=n($xe,"A",{href:!0});var qgt=s(dG);t8o=r(qgt,"ReformerModelWithLMHead"),qgt.forEach(t),a8o=r($xe," (Reformer model)"),$xe.forEach(t),n8o=i(W),U2=n(W,"LI",{});var kxe=s(U2);Kfe=n(kxe,"STRONG",{});var jgt=s(Kfe);s8o=r(jgt,"rembert"),jgt.forEach(t),l8o=r(kxe," \u2014 "),cG=n(kxe,"A",{href:!0});var Dgt=s(cG);i8o=r(Dgt,"RemBertForCausalLM"),Dgt.forEach(t),d8o=r(kxe," (RemBERT model)"),kxe.forEach(t),c8o=i(W),J2=n(W,"LI",{});var Sxe=s(J2);Zfe=n(Sxe,"STRONG",{});var Ggt=s(Zfe);f8o=r(Ggt,"roberta"),Ggt.forEach(t),m8o=r(Sxe," \u2014 "),fG=n(Sxe,"A",{href:!0});var Ogt=s(fG);g8o=r(Ogt,"RobertaForCausalLM"),Ogt.forEach(t),h8o=r(Sxe," (RoBERTa model)"),Sxe.forEach(t),p8o=i(W),Y2=n(W,"LI",{});var Rxe=s(Y2);eme=n(Rxe,"STRONG",{});var Vgt=s(eme);u8o=r(Vgt,"roformer"),Vgt.forEach(t),_8o=r(Rxe," \u2014 "),mG=n(Rxe,"A",{href:!0});var Xgt=s(mG);b8o=r(Xgt,"RoFormerForCausalLM"),Xgt.forEach(t),v8o=r(Rxe," (RoFormer model)"),Rxe.forEach(t),F8o=i(W),K2=n(W,"LI",{});var Pxe=s(K2);ome=n(Pxe,"STRONG",{});var zgt=s(ome);T8o=r(zgt,"speech_to_text_2"),zgt.forEach(t),M8o=r(Pxe," \u2014 "),gG=n(Pxe,"A",{href:!0});var Wgt=s(gG);E8o=r(Wgt,"Speech2Text2ForCausalLM"),Wgt.forEach(t),C8o=r(Pxe," (Speech2Text2 model)"),Pxe.forEach(t),w8o=i(W),Z2=n(W,"LI",{});var Bxe=s(Z2);rme=n(Bxe,"STRONG",{});var Qgt=s(rme);A8o=r(Qgt,"transfo-xl"),Qgt.forEach(t),L8o=r(Bxe," \u2014 "),hG=n(Bxe,"A",{href:!0});var Hgt=s(hG);y8o=r(Hgt,"TransfoXLLMHeadModel"),Hgt.forEach(t),x8o=r(Bxe," (Transformer-XL model)"),Bxe.forEach(t),$8o=i(W),e1=n(W,"LI",{});var Ixe=s(e1);tme=n(Ixe,"STRONG",{});var Ugt=s(tme);k8o=r(Ugt,"trocr"),Ugt.forEach(t),S8o=r(Ixe," \u2014 "),pG=n(Ixe,"A",{href:!0});var Jgt=s(pG);R8o=r(Jgt,"TrOCRForCausalLM"),Jgt.forEach(t),P8o=r(Ixe," (TrOCR model)"),Ixe.forEach(t),B8o=i(W),o1=n(W,"LI",{});var Nxe=s(o1);ame=n(Nxe,"STRONG",{});var Ygt=s(ame);I8o=r(Ygt,"xglm"),Ygt.forEach(t),N8o=r(Nxe," \u2014 "),uG=n(Nxe,"A",{href:!0});var Kgt=s(uG);q8o=r(Kgt,"XGLMForCausalLM"),Kgt.forEach(t),j8o=r(Nxe," (XGLM model)"),Nxe.forEach(t),D8o=i(W),r1=n(W,"LI",{});var qxe=s(r1);nme=n(qxe,"STRONG",{});var Zgt=s(nme);G8o=r(Zgt,"xlm"),Zgt.forEach(t),O8o=r(qxe," \u2014 "),_G=n(qxe,"A",{href:!0});var eht=s(_G);V8o=r(eht,"XLMWithLMHeadModel"),eht.forEach(t),X8o=r(qxe," (XLM model)"),qxe.forEach(t),z8o=i(W),t1=n(W,"LI",{});var jxe=s(t1);sme=n(jxe,"STRONG",{});var oht=s(sme);W8o=r(oht,"xlm-prophetnet"),oht.forEach(t),Q8o=r(jxe," \u2014 "),bG=n(jxe,"A",{href:!0});var rht=s(bG);H8o=r(rht,"XLMProphetNetForCausalLM"),rht.forEach(t),U8o=r(jxe," (XLM-ProphetNet model)"),jxe.forEach(t),J8o=i(W),a1=n(W,"LI",{});var Dxe=s(a1);lme=n(Dxe,"STRONG",{});var tht=s(lme);Y8o=r(tht,"xlm-roberta"),tht.forEach(t),K8o=r(Dxe," \u2014 "),vG=n(Dxe,"A",{href:!0});var aht=s(vG);Z8o=r(aht,"XLMRobertaForCausalLM"),aht.forEach(t),e9o=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),o9o=i(W),n1=n(W,"LI",{});var Gxe=s(n1);ime=n(Gxe,"STRONG",{});var nht=s(ime);r9o=r(nht,"xlm-roberta-xl"),nht.forEach(t),t9o=r(Gxe," \u2014 "),FG=n(Gxe,"A",{href:!0});var sht=s(FG);a9o=r(sht,"XLMRobertaXLForCausalLM"),sht.forEach(t),n9o=r(Gxe," (XLM-RoBERTa-XL model)"),Gxe.forEach(t),s9o=i(W),s1=n(W,"LI",{});var Oxe=s(s1);dme=n(Oxe,"STRONG",{});var lht=s(dme);l9o=r(lht,"xlnet"),lht.forEach(t),i9o=r(Oxe," \u2014 "),TG=n(Oxe,"A",{href:!0});var iht=s(TG);d9o=r(iht,"XLNetLMHeadModel"),iht.forEach(t),c9o=r(Oxe," (XLNet model)"),Oxe.forEach(t),W.forEach(t),f9o=i(la),l1=n(la,"P",{});var Vxe=s(l1);m9o=r(Vxe,"The model is set in evaluation mode by default using "),cme=n(Vxe,"CODE",{});var dht=s(cme);g9o=r(dht,"model.eval()"),dht.forEach(t),h9o=r(Vxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(Vxe,"CODE",{});var cht=s(fme);p9o=r(cht,"model.train()"),cht.forEach(t),Vxe.forEach(t),u9o=i(la),T(i1.$$.fragment,la),la.forEach(t),Ys.forEach(t),_Ge=i(f),Xi=n(f,"H2",{class:!0});var EVe=s(Xi);d1=n(EVe,"A",{id:!0,class:!0,href:!0});var fht=s(d1);mme=n(fht,"SPAN",{});var mht=s(mme);T(sy.$$.fragment,mht),mht.forEach(t),fht.forEach(t),_9o=i(EVe),gme=n(EVe,"SPAN",{});var ght=s(gme);b9o=r(ght,"AutoModelForMaskedLM"),ght.forEach(t),EVe.forEach(t),bGe=i(f),So=n(f,"DIV",{class:!0});var Ks=s(So);T(ly.$$.fragment,Ks),v9o=i(Ks),zi=n(Ks,"P",{});var toe=s(zi);F9o=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MG=n(toe,"A",{href:!0});var hht=s(MG);T9o=r(hht,"from_pretrained()"),hht.forEach(t),M9o=r(toe," class method or the "),EG=n(toe,"A",{href:!0});var pht=s(EG);E9o=r(pht,"from_config()"),pht.forEach(t),C9o=r(toe,` class
method.`),toe.forEach(t),w9o=i(Ks),iy=n(Ks,"P",{});var CVe=s(iy);A9o=r(CVe,"This class cannot be instantiated directly using "),hme=n(CVe,"CODE",{});var uht=s(hme);L9o=r(uht,"__init__()"),uht.forEach(t),y9o=r(CVe," (throws an error)."),CVe.forEach(t),x9o=i(Ks),dt=n(Ks,"DIV",{class:!0});var yA=s(dt);T(dy.$$.fragment,yA),$9o=i(yA),pme=n(yA,"P",{});var _ht=s(pme);k9o=r(_ht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_ht.forEach(t),S9o=i(yA),Wi=n(yA,"P",{});var aoe=s(Wi);R9o=r(aoe,`Note:
Loading a model from its configuration file does `),ume=n(aoe,"STRONG",{});var bht=s(ume);P9o=r(bht,"not"),bht.forEach(t),B9o=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CG=n(aoe,"A",{href:!0});var vht=s(CG);I9o=r(vht,"from_pretrained()"),vht.forEach(t),N9o=r(aoe," to load the model weights."),aoe.forEach(t),q9o=i(yA),T(c1.$$.fragment,yA),yA.forEach(t),j9o=i(Ks),Ze=n(Ks,"DIV",{class:!0});var ia=s(Ze);T(cy.$$.fragment,ia),D9o=i(ia),_me=n(ia,"P",{});var Fht=s(_me);G9o=r(Fht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Fht.forEach(t),O9o=i(ia),Ia=n(ia,"P",{});var xA=s(Ia);V9o=r(xA,"The model class to instantiate is selected based on the "),bme=n(xA,"CODE",{});var Tht=s(bme);X9o=r(Tht,"model_type"),Tht.forEach(t),z9o=r(xA,` property of the config object (either
passed as an argument or loaded from `),vme=n(xA,"CODE",{});var Mht=s(vme);W9o=r(Mht,"pretrained_model_name_or_path"),Mht.forEach(t),Q9o=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fme=n(xA,"CODE",{});var Eht=s(Fme);H9o=r(Eht,"pretrained_model_name_or_path"),Eht.forEach(t),U9o=r(xA,":"),xA.forEach(t),J9o=i(ia),Q=n(ia,"UL",{});var H=s(Q);f1=n(H,"LI",{});var Xxe=s(f1);Tme=n(Xxe,"STRONG",{});var Cht=s(Tme);Y9o=r(Cht,"albert"),Cht.forEach(t),K9o=r(Xxe," \u2014 "),wG=n(Xxe,"A",{href:!0});var wht=s(wG);Z9o=r(wht,"AlbertForMaskedLM"),wht.forEach(t),exo=r(Xxe," (ALBERT model)"),Xxe.forEach(t),oxo=i(H),m1=n(H,"LI",{});var zxe=s(m1);Mme=n(zxe,"STRONG",{});var Aht=s(Mme);rxo=r(Aht,"bart"),Aht.forEach(t),txo=r(zxe," \u2014 "),AG=n(zxe,"A",{href:!0});var Lht=s(AG);axo=r(Lht,"BartForConditionalGeneration"),Lht.forEach(t),nxo=r(zxe," (BART model)"),zxe.forEach(t),sxo=i(H),g1=n(H,"LI",{});var Wxe=s(g1);Eme=n(Wxe,"STRONG",{});var yht=s(Eme);lxo=r(yht,"bert"),yht.forEach(t),ixo=r(Wxe," \u2014 "),LG=n(Wxe,"A",{href:!0});var xht=s(LG);dxo=r(xht,"BertForMaskedLM"),xht.forEach(t),cxo=r(Wxe," (BERT model)"),Wxe.forEach(t),fxo=i(H),h1=n(H,"LI",{});var Qxe=s(h1);Cme=n(Qxe,"STRONG",{});var $ht=s(Cme);mxo=r($ht,"big_bird"),$ht.forEach(t),gxo=r(Qxe," \u2014 "),yG=n(Qxe,"A",{href:!0});var kht=s(yG);hxo=r(kht,"BigBirdForMaskedLM"),kht.forEach(t),pxo=r(Qxe," (BigBird model)"),Qxe.forEach(t),uxo=i(H),p1=n(H,"LI",{});var Hxe=s(p1);wme=n(Hxe,"STRONG",{});var Sht=s(wme);_xo=r(Sht,"camembert"),Sht.forEach(t),bxo=r(Hxe," \u2014 "),xG=n(Hxe,"A",{href:!0});var Rht=s(xG);vxo=r(Rht,"CamembertForMaskedLM"),Rht.forEach(t),Fxo=r(Hxe," (CamemBERT model)"),Hxe.forEach(t),Txo=i(H),u1=n(H,"LI",{});var Uxe=s(u1);Ame=n(Uxe,"STRONG",{});var Pht=s(Ame);Mxo=r(Pht,"convbert"),Pht.forEach(t),Exo=r(Uxe," \u2014 "),$G=n(Uxe,"A",{href:!0});var Bht=s($G);Cxo=r(Bht,"ConvBertForMaskedLM"),Bht.forEach(t),wxo=r(Uxe," (ConvBERT model)"),Uxe.forEach(t),Axo=i(H),_1=n(H,"LI",{});var Jxe=s(_1);Lme=n(Jxe,"STRONG",{});var Iht=s(Lme);Lxo=r(Iht,"data2vec-text"),Iht.forEach(t),yxo=r(Jxe," \u2014 "),kG=n(Jxe,"A",{href:!0});var Nht=s(kG);xxo=r(Nht,"Data2VecTextForMaskedLM"),Nht.forEach(t),$xo=r(Jxe," (Data2VecText model)"),Jxe.forEach(t),kxo=i(H),b1=n(H,"LI",{});var Yxe=s(b1);yme=n(Yxe,"STRONG",{});var qht=s(yme);Sxo=r(qht,"deberta"),qht.forEach(t),Rxo=r(Yxe," \u2014 "),SG=n(Yxe,"A",{href:!0});var jht=s(SG);Pxo=r(jht,"DebertaForMaskedLM"),jht.forEach(t),Bxo=r(Yxe," (DeBERTa model)"),Yxe.forEach(t),Ixo=i(H),v1=n(H,"LI",{});var Kxe=s(v1);xme=n(Kxe,"STRONG",{});var Dht=s(xme);Nxo=r(Dht,"deberta-v2"),Dht.forEach(t),qxo=r(Kxe," \u2014 "),RG=n(Kxe,"A",{href:!0});var Ght=s(RG);jxo=r(Ght,"DebertaV2ForMaskedLM"),Ght.forEach(t),Dxo=r(Kxe," (DeBERTa-v2 model)"),Kxe.forEach(t),Gxo=i(H),F1=n(H,"LI",{});var Zxe=s(F1);$me=n(Zxe,"STRONG",{});var Oht=s($me);Oxo=r(Oht,"distilbert"),Oht.forEach(t),Vxo=r(Zxe," \u2014 "),PG=n(Zxe,"A",{href:!0});var Vht=s(PG);Xxo=r(Vht,"DistilBertForMaskedLM"),Vht.forEach(t),zxo=r(Zxe," (DistilBERT model)"),Zxe.forEach(t),Wxo=i(H),T1=n(H,"LI",{});var e$e=s(T1);kme=n(e$e,"STRONG",{});var Xht=s(kme);Qxo=r(Xht,"electra"),Xht.forEach(t),Hxo=r(e$e," \u2014 "),BG=n(e$e,"A",{href:!0});var zht=s(BG);Uxo=r(zht,"ElectraForMaskedLM"),zht.forEach(t),Jxo=r(e$e," (ELECTRA model)"),e$e.forEach(t),Yxo=i(H),M1=n(H,"LI",{});var o$e=s(M1);Sme=n(o$e,"STRONG",{});var Wht=s(Sme);Kxo=r(Wht,"flaubert"),Wht.forEach(t),Zxo=r(o$e," \u2014 "),IG=n(o$e,"A",{href:!0});var Qht=s(IG);e$o=r(Qht,"FlaubertWithLMHeadModel"),Qht.forEach(t),o$o=r(o$e," (FlauBERT model)"),o$e.forEach(t),r$o=i(H),E1=n(H,"LI",{});var r$e=s(E1);Rme=n(r$e,"STRONG",{});var Hht=s(Rme);t$o=r(Hht,"fnet"),Hht.forEach(t),a$o=r(r$e," \u2014 "),NG=n(r$e,"A",{href:!0});var Uht=s(NG);n$o=r(Uht,"FNetForMaskedLM"),Uht.forEach(t),s$o=r(r$e," (FNet model)"),r$e.forEach(t),l$o=i(H),C1=n(H,"LI",{});var t$e=s(C1);Pme=n(t$e,"STRONG",{});var Jht=s(Pme);i$o=r(Jht,"funnel"),Jht.forEach(t),d$o=r(t$e," \u2014 "),qG=n(t$e,"A",{href:!0});var Yht=s(qG);c$o=r(Yht,"FunnelForMaskedLM"),Yht.forEach(t),f$o=r(t$e," (Funnel Transformer model)"),t$e.forEach(t),m$o=i(H),w1=n(H,"LI",{});var a$e=s(w1);Bme=n(a$e,"STRONG",{});var Kht=s(Bme);g$o=r(Kht,"ibert"),Kht.forEach(t),h$o=r(a$e," \u2014 "),jG=n(a$e,"A",{href:!0});var Zht=s(jG);p$o=r(Zht,"IBertForMaskedLM"),Zht.forEach(t),u$o=r(a$e," (I-BERT model)"),a$e.forEach(t),_$o=i(H),A1=n(H,"LI",{});var n$e=s(A1);Ime=n(n$e,"STRONG",{});var ept=s(Ime);b$o=r(ept,"layoutlm"),ept.forEach(t),v$o=r(n$e," \u2014 "),DG=n(n$e,"A",{href:!0});var opt=s(DG);F$o=r(opt,"LayoutLMForMaskedLM"),opt.forEach(t),T$o=r(n$e," (LayoutLM model)"),n$e.forEach(t),M$o=i(H),L1=n(H,"LI",{});var s$e=s(L1);Nme=n(s$e,"STRONG",{});var rpt=s(Nme);E$o=r(rpt,"longformer"),rpt.forEach(t),C$o=r(s$e," \u2014 "),GG=n(s$e,"A",{href:!0});var tpt=s(GG);w$o=r(tpt,"LongformerForMaskedLM"),tpt.forEach(t),A$o=r(s$e," (Longformer model)"),s$e.forEach(t),L$o=i(H),y1=n(H,"LI",{});var l$e=s(y1);qme=n(l$e,"STRONG",{});var apt=s(qme);y$o=r(apt,"luke"),apt.forEach(t),x$o=r(l$e," \u2014 "),OG=n(l$e,"A",{href:!0});var npt=s(OG);$$o=r(npt,"LukeForMaskedLM"),npt.forEach(t),k$o=r(l$e," (LUKE model)"),l$e.forEach(t),S$o=i(H),x1=n(H,"LI",{});var i$e=s(x1);jme=n(i$e,"STRONG",{});var spt=s(jme);R$o=r(spt,"mbart"),spt.forEach(t),P$o=r(i$e," \u2014 "),VG=n(i$e,"A",{href:!0});var lpt=s(VG);B$o=r(lpt,"MBartForConditionalGeneration"),lpt.forEach(t),I$o=r(i$e," (mBART model)"),i$e.forEach(t),N$o=i(H),$1=n(H,"LI",{});var d$e=s($1);Dme=n(d$e,"STRONG",{});var ipt=s(Dme);q$o=r(ipt,"megatron-bert"),ipt.forEach(t),j$o=r(d$e," \u2014 "),XG=n(d$e,"A",{href:!0});var dpt=s(XG);D$o=r(dpt,"MegatronBertForMaskedLM"),dpt.forEach(t),G$o=r(d$e," (Megatron-BERT model)"),d$e.forEach(t),O$o=i(H),k1=n(H,"LI",{});var c$e=s(k1);Gme=n(c$e,"STRONG",{});var cpt=s(Gme);V$o=r(cpt,"mobilebert"),cpt.forEach(t),X$o=r(c$e," \u2014 "),zG=n(c$e,"A",{href:!0});var fpt=s(zG);z$o=r(fpt,"MobileBertForMaskedLM"),fpt.forEach(t),W$o=r(c$e," (MobileBERT model)"),c$e.forEach(t),Q$o=i(H),S1=n(H,"LI",{});var f$e=s(S1);Ome=n(f$e,"STRONG",{});var mpt=s(Ome);H$o=r(mpt,"mpnet"),mpt.forEach(t),U$o=r(f$e," \u2014 "),WG=n(f$e,"A",{href:!0});var gpt=s(WG);J$o=r(gpt,"MPNetForMaskedLM"),gpt.forEach(t),Y$o=r(f$e," (MPNet model)"),f$e.forEach(t),K$o=i(H),R1=n(H,"LI",{});var m$e=s(R1);Vme=n(m$e,"STRONG",{});var hpt=s(Vme);Z$o=r(hpt,"nystromformer"),hpt.forEach(t),eko=r(m$e," \u2014 "),QG=n(m$e,"A",{href:!0});var ppt=s(QG);oko=r(ppt,"NystromformerForMaskedLM"),ppt.forEach(t),rko=r(m$e," (Nystr\xF6mformer model)"),m$e.forEach(t),tko=i(H),P1=n(H,"LI",{});var g$e=s(P1);Xme=n(g$e,"STRONG",{});var upt=s(Xme);ako=r(upt,"perceiver"),upt.forEach(t),nko=r(g$e," \u2014 "),HG=n(g$e,"A",{href:!0});var _pt=s(HG);sko=r(_pt,"PerceiverForMaskedLM"),_pt.forEach(t),lko=r(g$e," (Perceiver model)"),g$e.forEach(t),iko=i(H),B1=n(H,"LI",{});var h$e=s(B1);zme=n(h$e,"STRONG",{});var bpt=s(zme);dko=r(bpt,"qdqbert"),bpt.forEach(t),cko=r(h$e," \u2014 "),UG=n(h$e,"A",{href:!0});var vpt=s(UG);fko=r(vpt,"QDQBertForMaskedLM"),vpt.forEach(t),mko=r(h$e," (QDQBert model)"),h$e.forEach(t),gko=i(H),I1=n(H,"LI",{});var p$e=s(I1);Wme=n(p$e,"STRONG",{});var Fpt=s(Wme);hko=r(Fpt,"reformer"),Fpt.forEach(t),pko=r(p$e," \u2014 "),JG=n(p$e,"A",{href:!0});var Tpt=s(JG);uko=r(Tpt,"ReformerForMaskedLM"),Tpt.forEach(t),_ko=r(p$e," (Reformer model)"),p$e.forEach(t),bko=i(H),N1=n(H,"LI",{});var u$e=s(N1);Qme=n(u$e,"STRONG",{});var Mpt=s(Qme);vko=r(Mpt,"rembert"),Mpt.forEach(t),Fko=r(u$e," \u2014 "),YG=n(u$e,"A",{href:!0});var Ept=s(YG);Tko=r(Ept,"RemBertForMaskedLM"),Ept.forEach(t),Mko=r(u$e," (RemBERT model)"),u$e.forEach(t),Eko=i(H),q1=n(H,"LI",{});var _$e=s(q1);Hme=n(_$e,"STRONG",{});var Cpt=s(Hme);Cko=r(Cpt,"roberta"),Cpt.forEach(t),wko=r(_$e," \u2014 "),KG=n(_$e,"A",{href:!0});var wpt=s(KG);Ako=r(wpt,"RobertaForMaskedLM"),wpt.forEach(t),Lko=r(_$e," (RoBERTa model)"),_$e.forEach(t),yko=i(H),j1=n(H,"LI",{});var b$e=s(j1);Ume=n(b$e,"STRONG",{});var Apt=s(Ume);xko=r(Apt,"roformer"),Apt.forEach(t),$ko=r(b$e," \u2014 "),ZG=n(b$e,"A",{href:!0});var Lpt=s(ZG);kko=r(Lpt,"RoFormerForMaskedLM"),Lpt.forEach(t),Sko=r(b$e," (RoFormer model)"),b$e.forEach(t),Rko=i(H),D1=n(H,"LI",{});var v$e=s(D1);Jme=n(v$e,"STRONG",{});var ypt=s(Jme);Pko=r(ypt,"squeezebert"),ypt.forEach(t),Bko=r(v$e," \u2014 "),eO=n(v$e,"A",{href:!0});var xpt=s(eO);Iko=r(xpt,"SqueezeBertForMaskedLM"),xpt.forEach(t),Nko=r(v$e," (SqueezeBERT model)"),v$e.forEach(t),qko=i(H),G1=n(H,"LI",{});var F$e=s(G1);Yme=n(F$e,"STRONG",{});var $pt=s(Yme);jko=r($pt,"tapas"),$pt.forEach(t),Dko=r(F$e," \u2014 "),oO=n(F$e,"A",{href:!0});var kpt=s(oO);Gko=r(kpt,"TapasForMaskedLM"),kpt.forEach(t),Oko=r(F$e," (TAPAS model)"),F$e.forEach(t),Vko=i(H),O1=n(H,"LI",{});var T$e=s(O1);Kme=n(T$e,"STRONG",{});var Spt=s(Kme);Xko=r(Spt,"wav2vec2"),Spt.forEach(t),zko=r(T$e," \u2014 "),Zme=n(T$e,"CODE",{});var Rpt=s(Zme);Wko=r(Rpt,"Wav2Vec2ForMaskedLM"),Rpt.forEach(t),Qko=r(T$e," (Wav2Vec2 model)"),T$e.forEach(t),Hko=i(H),V1=n(H,"LI",{});var M$e=s(V1);ege=n(M$e,"STRONG",{});var Ppt=s(ege);Uko=r(Ppt,"xlm"),Ppt.forEach(t),Jko=r(M$e," \u2014 "),rO=n(M$e,"A",{href:!0});var Bpt=s(rO);Yko=r(Bpt,"XLMWithLMHeadModel"),Bpt.forEach(t),Kko=r(M$e," (XLM model)"),M$e.forEach(t),Zko=i(H),X1=n(H,"LI",{});var E$e=s(X1);oge=n(E$e,"STRONG",{});var Ipt=s(oge);eSo=r(Ipt,"xlm-roberta"),Ipt.forEach(t),oSo=r(E$e," \u2014 "),tO=n(E$e,"A",{href:!0});var Npt=s(tO);rSo=r(Npt,"XLMRobertaForMaskedLM"),Npt.forEach(t),tSo=r(E$e," (XLM-RoBERTa model)"),E$e.forEach(t),aSo=i(H),z1=n(H,"LI",{});var C$e=s(z1);rge=n(C$e,"STRONG",{});var qpt=s(rge);nSo=r(qpt,"xlm-roberta-xl"),qpt.forEach(t),sSo=r(C$e," \u2014 "),aO=n(C$e,"A",{href:!0});var jpt=s(aO);lSo=r(jpt,"XLMRobertaXLForMaskedLM"),jpt.forEach(t),iSo=r(C$e," (XLM-RoBERTa-XL model)"),C$e.forEach(t),dSo=i(H),W1=n(H,"LI",{});var w$e=s(W1);tge=n(w$e,"STRONG",{});var Dpt=s(tge);cSo=r(Dpt,"yoso"),Dpt.forEach(t),fSo=r(w$e," \u2014 "),nO=n(w$e,"A",{href:!0});var Gpt=s(nO);mSo=r(Gpt,"YosoForMaskedLM"),Gpt.forEach(t),gSo=r(w$e," (YOSO model)"),w$e.forEach(t),H.forEach(t),hSo=i(ia),Q1=n(ia,"P",{});var A$e=s(Q1);pSo=r(A$e,"The model is set in evaluation mode by default using "),age=n(A$e,"CODE",{});var Opt=s(age);uSo=r(Opt,"model.eval()"),Opt.forEach(t),_So=r(A$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nge=n(A$e,"CODE",{});var Vpt=s(nge);bSo=r(Vpt,"model.train()"),Vpt.forEach(t),A$e.forEach(t),vSo=i(ia),T(H1.$$.fragment,ia),ia.forEach(t),Ks.forEach(t),vGe=i(f),Qi=n(f,"H2",{class:!0});var wVe=s(Qi);U1=n(wVe,"A",{id:!0,class:!0,href:!0});var Xpt=s(U1);sge=n(Xpt,"SPAN",{});var zpt=s(sge);T(fy.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),FSo=i(wVe),lge=n(wVe,"SPAN",{});var Wpt=s(lge);TSo=r(Wpt,"AutoModelForSeq2SeqLM"),Wpt.forEach(t),wVe.forEach(t),FGe=i(f),Ro=n(f,"DIV",{class:!0});var Zs=s(Ro);T(my.$$.fragment,Zs),MSo=i(Zs),Hi=n(Zs,"P",{});var noe=s(Hi);ESo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),sO=n(noe,"A",{href:!0});var Qpt=s(sO);CSo=r(Qpt,"from_pretrained()"),Qpt.forEach(t),wSo=r(noe," class method or the "),lO=n(noe,"A",{href:!0});var Hpt=s(lO);ASo=r(Hpt,"from_config()"),Hpt.forEach(t),LSo=r(noe,` class
method.`),noe.forEach(t),ySo=i(Zs),gy=n(Zs,"P",{});var AVe=s(gy);xSo=r(AVe,"This class cannot be instantiated directly using "),ige=n(AVe,"CODE",{});var Upt=s(ige);$So=r(Upt,"__init__()"),Upt.forEach(t),kSo=r(AVe," (throws an error)."),AVe.forEach(t),SSo=i(Zs),ct=n(Zs,"DIV",{class:!0});var $A=s(ct);T(hy.$$.fragment,$A),RSo=i($A),dge=n($A,"P",{});var Jpt=s(dge);PSo=r(Jpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jpt.forEach(t),BSo=i($A),Ui=n($A,"P",{});var soe=s(Ui);ISo=r(soe,`Note:
Loading a model from its configuration file does `),cge=n(soe,"STRONG",{});var Ypt=s(cge);NSo=r(Ypt,"not"),Ypt.forEach(t),qSo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(soe,"A",{href:!0});var Kpt=s(iO);jSo=r(Kpt,"from_pretrained()"),Kpt.forEach(t),DSo=r(soe," to load the model weights."),soe.forEach(t),GSo=i($A),T(J1.$$.fragment,$A),$A.forEach(t),OSo=i(Zs),eo=n(Zs,"DIV",{class:!0});var da=s(eo);T(py.$$.fragment,da),VSo=i(da),fge=n(da,"P",{});var Zpt=s(fge);XSo=r(Zpt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zpt.forEach(t),zSo=i(da),Na=n(da,"P",{});var kA=s(Na);WSo=r(kA,"The model class to instantiate is selected based on the "),mge=n(kA,"CODE",{});var eut=s(mge);QSo=r(eut,"model_type"),eut.forEach(t),HSo=r(kA,` property of the config object (either
passed as an argument or loaded from `),gge=n(kA,"CODE",{});var out=s(gge);USo=r(out,"pretrained_model_name_or_path"),out.forEach(t),JSo=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hge=n(kA,"CODE",{});var rut=s(hge);YSo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),KSo=r(kA,":"),kA.forEach(t),ZSo=i(da),pe=n(da,"UL",{});var be=s(pe);Y1=n(be,"LI",{});var L$e=s(Y1);pge=n(L$e,"STRONG",{});var tut=s(pge);eRo=r(tut,"bart"),tut.forEach(t),oRo=r(L$e," \u2014 "),dO=n(L$e,"A",{href:!0});var aut=s(dO);rRo=r(aut,"BartForConditionalGeneration"),aut.forEach(t),tRo=r(L$e," (BART model)"),L$e.forEach(t),aRo=i(be),K1=n(be,"LI",{});var y$e=s(K1);uge=n(y$e,"STRONG",{});var nut=s(uge);nRo=r(nut,"bigbird_pegasus"),nut.forEach(t),sRo=r(y$e," \u2014 "),cO=n(y$e,"A",{href:!0});var sut=s(cO);lRo=r(sut,"BigBirdPegasusForConditionalGeneration"),sut.forEach(t),iRo=r(y$e," (BigBird-Pegasus model)"),y$e.forEach(t),dRo=i(be),Z1=n(be,"LI",{});var x$e=s(Z1);_ge=n(x$e,"STRONG",{});var lut=s(_ge);cRo=r(lut,"blenderbot"),lut.forEach(t),fRo=r(x$e," \u2014 "),fO=n(x$e,"A",{href:!0});var iut=s(fO);mRo=r(iut,"BlenderbotForConditionalGeneration"),iut.forEach(t),gRo=r(x$e," (Blenderbot model)"),x$e.forEach(t),hRo=i(be),e7=n(be,"LI",{});var $$e=s(e7);bge=n($$e,"STRONG",{});var dut=s(bge);pRo=r(dut,"blenderbot-small"),dut.forEach(t),uRo=r($$e," \u2014 "),mO=n($$e,"A",{href:!0});var cut=s(mO);_Ro=r(cut,"BlenderbotSmallForConditionalGeneration"),cut.forEach(t),bRo=r($$e," (BlenderbotSmall model)"),$$e.forEach(t),vRo=i(be),o7=n(be,"LI",{});var k$e=s(o7);vge=n(k$e,"STRONG",{});var fut=s(vge);FRo=r(fut,"encoder-decoder"),fut.forEach(t),TRo=r(k$e," \u2014 "),gO=n(k$e,"A",{href:!0});var mut=s(gO);MRo=r(mut,"EncoderDecoderModel"),mut.forEach(t),ERo=r(k$e," (Encoder decoder model)"),k$e.forEach(t),CRo=i(be),r7=n(be,"LI",{});var S$e=s(r7);Fge=n(S$e,"STRONG",{});var gut=s(Fge);wRo=r(gut,"fsmt"),gut.forEach(t),ARo=r(S$e," \u2014 "),hO=n(S$e,"A",{href:!0});var hut=s(hO);LRo=r(hut,"FSMTForConditionalGeneration"),hut.forEach(t),yRo=r(S$e," (FairSeq Machine-Translation model)"),S$e.forEach(t),xRo=i(be),t7=n(be,"LI",{});var R$e=s(t7);Tge=n(R$e,"STRONG",{});var put=s(Tge);$Ro=r(put,"led"),put.forEach(t),kRo=r(R$e," \u2014 "),pO=n(R$e,"A",{href:!0});var uut=s(pO);SRo=r(uut,"LEDForConditionalGeneration"),uut.forEach(t),RRo=r(R$e," (LED model)"),R$e.forEach(t),PRo=i(be),a7=n(be,"LI",{});var P$e=s(a7);Mge=n(P$e,"STRONG",{});var _ut=s(Mge);BRo=r(_ut,"longt5"),_ut.forEach(t),IRo=r(P$e," \u2014 "),uO=n(P$e,"A",{href:!0});var but=s(uO);NRo=r(but,"LongT5ForConditionalGeneration"),but.forEach(t),qRo=r(P$e," (LongT5 model)"),P$e.forEach(t),jRo=i(be),n7=n(be,"LI",{});var B$e=s(n7);Ege=n(B$e,"STRONG",{});var vut=s(Ege);DRo=r(vut,"m2m_100"),vut.forEach(t),GRo=r(B$e," \u2014 "),_O=n(B$e,"A",{href:!0});var Fut=s(_O);ORo=r(Fut,"M2M100ForConditionalGeneration"),Fut.forEach(t),VRo=r(B$e," (M2M100 model)"),B$e.forEach(t),XRo=i(be),s7=n(be,"LI",{});var I$e=s(s7);Cge=n(I$e,"STRONG",{});var Tut=s(Cge);zRo=r(Tut,"marian"),Tut.forEach(t),WRo=r(I$e," \u2014 "),bO=n(I$e,"A",{href:!0});var Mut=s(bO);QRo=r(Mut,"MarianMTModel"),Mut.forEach(t),HRo=r(I$e," (Marian model)"),I$e.forEach(t),URo=i(be),l7=n(be,"LI",{});var N$e=s(l7);wge=n(N$e,"STRONG",{});var Eut=s(wge);JRo=r(Eut,"mbart"),Eut.forEach(t),YRo=r(N$e," \u2014 "),vO=n(N$e,"A",{href:!0});var Cut=s(vO);KRo=r(Cut,"MBartForConditionalGeneration"),Cut.forEach(t),ZRo=r(N$e," (mBART model)"),N$e.forEach(t),ePo=i(be),i7=n(be,"LI",{});var q$e=s(i7);Age=n(q$e,"STRONG",{});var wut=s(Age);oPo=r(wut,"mt5"),wut.forEach(t),rPo=r(q$e," \u2014 "),FO=n(q$e,"A",{href:!0});var Aut=s(FO);tPo=r(Aut,"MT5ForConditionalGeneration"),Aut.forEach(t),aPo=r(q$e," (MT5 model)"),q$e.forEach(t),nPo=i(be),d7=n(be,"LI",{});var j$e=s(d7);Lge=n(j$e,"STRONG",{});var Lut=s(Lge);sPo=r(Lut,"pegasus"),Lut.forEach(t),lPo=r(j$e," \u2014 "),TO=n(j$e,"A",{href:!0});var yut=s(TO);iPo=r(yut,"PegasusForConditionalGeneration"),yut.forEach(t),dPo=r(j$e," (Pegasus model)"),j$e.forEach(t),cPo=i(be),c7=n(be,"LI",{});var D$e=s(c7);yge=n(D$e,"STRONG",{});var xut=s(yge);fPo=r(xut,"plbart"),xut.forEach(t),mPo=r(D$e," \u2014 "),MO=n(D$e,"A",{href:!0});var $ut=s(MO);gPo=r($ut,"PLBartForConditionalGeneration"),$ut.forEach(t),hPo=r(D$e," (PLBart model)"),D$e.forEach(t),pPo=i(be),f7=n(be,"LI",{});var G$e=s(f7);xge=n(G$e,"STRONG",{});var kut=s(xge);uPo=r(kut,"prophetnet"),kut.forEach(t),_Po=r(G$e," \u2014 "),EO=n(G$e,"A",{href:!0});var Sut=s(EO);bPo=r(Sut,"ProphetNetForConditionalGeneration"),Sut.forEach(t),vPo=r(G$e," (ProphetNet model)"),G$e.forEach(t),FPo=i(be),m7=n(be,"LI",{});var O$e=s(m7);$ge=n(O$e,"STRONG",{});var Rut=s($ge);TPo=r(Rut,"t5"),Rut.forEach(t),MPo=r(O$e," \u2014 "),CO=n(O$e,"A",{href:!0});var Put=s(CO);EPo=r(Put,"T5ForConditionalGeneration"),Put.forEach(t),CPo=r(O$e," (T5 model)"),O$e.forEach(t),wPo=i(be),g7=n(be,"LI",{});var V$e=s(g7);kge=n(V$e,"STRONG",{});var But=s(kge);APo=r(But,"xlm-prophetnet"),But.forEach(t),LPo=r(V$e," \u2014 "),wO=n(V$e,"A",{href:!0});var Iut=s(wO);yPo=r(Iut,"XLMProphetNetForConditionalGeneration"),Iut.forEach(t),xPo=r(V$e," (XLM-ProphetNet model)"),V$e.forEach(t),be.forEach(t),$Po=i(da),h7=n(da,"P",{});var X$e=s(h7);kPo=r(X$e,"The model is set in evaluation mode by default using "),Sge=n(X$e,"CODE",{});var Nut=s(Sge);SPo=r(Nut,"model.eval()"),Nut.forEach(t),RPo=r(X$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rge=n(X$e,"CODE",{});var qut=s(Rge);PPo=r(qut,"model.train()"),qut.forEach(t),X$e.forEach(t),BPo=i(da),T(p7.$$.fragment,da),da.forEach(t),Zs.forEach(t),TGe=i(f),Ji=n(f,"H2",{class:!0});var LVe=s(Ji);u7=n(LVe,"A",{id:!0,class:!0,href:!0});var jut=s(u7);Pge=n(jut,"SPAN",{});var Dut=s(Pge);T(uy.$$.fragment,Dut),Dut.forEach(t),jut.forEach(t),IPo=i(LVe),Bge=n(LVe,"SPAN",{});var Gut=s(Bge);NPo=r(Gut,"AutoModelForSequenceClassification"),Gut.forEach(t),LVe.forEach(t),MGe=i(f),Po=n(f,"DIV",{class:!0});var el=s(Po);T(_y.$$.fragment,el),qPo=i(el),Yi=n(el,"P",{});var loe=s(Yi);jPo=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),AO=n(loe,"A",{href:!0});var Out=s(AO);DPo=r(Out,"from_pretrained()"),Out.forEach(t),GPo=r(loe," class method or the "),LO=n(loe,"A",{href:!0});var Vut=s(LO);OPo=r(Vut,"from_config()"),Vut.forEach(t),VPo=r(loe,` class
method.`),loe.forEach(t),XPo=i(el),by=n(el,"P",{});var yVe=s(by);zPo=r(yVe,"This class cannot be instantiated directly using "),Ige=n(yVe,"CODE",{});var Xut=s(Ige);WPo=r(Xut,"__init__()"),Xut.forEach(t),QPo=r(yVe," (throws an error)."),yVe.forEach(t),HPo=i(el),ft=n(el,"DIV",{class:!0});var SA=s(ft);T(vy.$$.fragment,SA),UPo=i(SA),Nge=n(SA,"P",{});var zut=s(Nge);JPo=r(zut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),zut.forEach(t),YPo=i(SA),Ki=n(SA,"P",{});var ioe=s(Ki);KPo=r(ioe,`Note:
Loading a model from its configuration file does `),qge=n(ioe,"STRONG",{});var Wut=s(qge);ZPo=r(Wut,"not"),Wut.forEach(t),eBo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(ioe,"A",{href:!0});var Qut=s(yO);oBo=r(Qut,"from_pretrained()"),Qut.forEach(t),rBo=r(ioe," to load the model weights."),ioe.forEach(t),tBo=i(SA),T(_7.$$.fragment,SA),SA.forEach(t),aBo=i(el),oo=n(el,"DIV",{class:!0});var ca=s(oo);T(Fy.$$.fragment,ca),nBo=i(ca),jge=n(ca,"P",{});var Hut=s(jge);sBo=r(Hut,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hut.forEach(t),lBo=i(ca),qa=n(ca,"P",{});var RA=s(qa);iBo=r(RA,"The model class to instantiate is selected based on the "),Dge=n(RA,"CODE",{});var Uut=s(Dge);dBo=r(Uut,"model_type"),Uut.forEach(t),cBo=r(RA,` property of the config object (either
passed as an argument or loaded from `),Gge=n(RA,"CODE",{});var Jut=s(Gge);fBo=r(Jut,"pretrained_model_name_or_path"),Jut.forEach(t),mBo=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oge=n(RA,"CODE",{});var Yut=s(Oge);gBo=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),hBo=r(RA,":"),RA.forEach(t),pBo=i(ca),q=n(ca,"UL",{});var D=s(q);b7=n(D,"LI",{});var z$e=s(b7);Vge=n(z$e,"STRONG",{});var Kut=s(Vge);uBo=r(Kut,"albert"),Kut.forEach(t),_Bo=r(z$e," \u2014 "),xO=n(z$e,"A",{href:!0});var Zut=s(xO);bBo=r(Zut,"AlbertForSequenceClassification"),Zut.forEach(t),vBo=r(z$e," (ALBERT model)"),z$e.forEach(t),FBo=i(D),v7=n(D,"LI",{});var W$e=s(v7);Xge=n(W$e,"STRONG",{});var e_t=s(Xge);TBo=r(e_t,"bart"),e_t.forEach(t),MBo=r(W$e," \u2014 "),$O=n(W$e,"A",{href:!0});var o_t=s($O);EBo=r(o_t,"BartForSequenceClassification"),o_t.forEach(t),CBo=r(W$e," (BART model)"),W$e.forEach(t),wBo=i(D),F7=n(D,"LI",{});var Q$e=s(F7);zge=n(Q$e,"STRONG",{});var r_t=s(zge);ABo=r(r_t,"bert"),r_t.forEach(t),LBo=r(Q$e," \u2014 "),kO=n(Q$e,"A",{href:!0});var t_t=s(kO);yBo=r(t_t,"BertForSequenceClassification"),t_t.forEach(t),xBo=r(Q$e," (BERT model)"),Q$e.forEach(t),$Bo=i(D),T7=n(D,"LI",{});var H$e=s(T7);Wge=n(H$e,"STRONG",{});var a_t=s(Wge);kBo=r(a_t,"big_bird"),a_t.forEach(t),SBo=r(H$e," \u2014 "),SO=n(H$e,"A",{href:!0});var n_t=s(SO);RBo=r(n_t,"BigBirdForSequenceClassification"),n_t.forEach(t),PBo=r(H$e," (BigBird model)"),H$e.forEach(t),BBo=i(D),M7=n(D,"LI",{});var U$e=s(M7);Qge=n(U$e,"STRONG",{});var s_t=s(Qge);IBo=r(s_t,"bigbird_pegasus"),s_t.forEach(t),NBo=r(U$e," \u2014 "),RO=n(U$e,"A",{href:!0});var l_t=s(RO);qBo=r(l_t,"BigBirdPegasusForSequenceClassification"),l_t.forEach(t),jBo=r(U$e," (BigBird-Pegasus model)"),U$e.forEach(t),DBo=i(D),E7=n(D,"LI",{});var J$e=s(E7);Hge=n(J$e,"STRONG",{});var i_t=s(Hge);GBo=r(i_t,"camembert"),i_t.forEach(t),OBo=r(J$e," \u2014 "),PO=n(J$e,"A",{href:!0});var d_t=s(PO);VBo=r(d_t,"CamembertForSequenceClassification"),d_t.forEach(t),XBo=r(J$e," (CamemBERT model)"),J$e.forEach(t),zBo=i(D),C7=n(D,"LI",{});var Y$e=s(C7);Uge=n(Y$e,"STRONG",{});var c_t=s(Uge);WBo=r(c_t,"canine"),c_t.forEach(t),QBo=r(Y$e," \u2014 "),BO=n(Y$e,"A",{href:!0});var f_t=s(BO);HBo=r(f_t,"CanineForSequenceClassification"),f_t.forEach(t),UBo=r(Y$e," (CANINE model)"),Y$e.forEach(t),JBo=i(D),w7=n(D,"LI",{});var K$e=s(w7);Jge=n(K$e,"STRONG",{});var m_t=s(Jge);YBo=r(m_t,"convbert"),m_t.forEach(t),KBo=r(K$e," \u2014 "),IO=n(K$e,"A",{href:!0});var g_t=s(IO);ZBo=r(g_t,"ConvBertForSequenceClassification"),g_t.forEach(t),eIo=r(K$e," (ConvBERT model)"),K$e.forEach(t),oIo=i(D),A7=n(D,"LI",{});var Z$e=s(A7);Yge=n(Z$e,"STRONG",{});var h_t=s(Yge);rIo=r(h_t,"ctrl"),h_t.forEach(t),tIo=r(Z$e," \u2014 "),NO=n(Z$e,"A",{href:!0});var p_t=s(NO);aIo=r(p_t,"CTRLForSequenceClassification"),p_t.forEach(t),nIo=r(Z$e," (CTRL model)"),Z$e.forEach(t),sIo=i(D),L7=n(D,"LI",{});var eke=s(L7);Kge=n(eke,"STRONG",{});var u_t=s(Kge);lIo=r(u_t,"data2vec-text"),u_t.forEach(t),iIo=r(eke," \u2014 "),qO=n(eke,"A",{href:!0});var __t=s(qO);dIo=r(__t,"Data2VecTextForSequenceClassification"),__t.forEach(t),cIo=r(eke," (Data2VecText model)"),eke.forEach(t),fIo=i(D),y7=n(D,"LI",{});var oke=s(y7);Zge=n(oke,"STRONG",{});var b_t=s(Zge);mIo=r(b_t,"deberta"),b_t.forEach(t),gIo=r(oke," \u2014 "),jO=n(oke,"A",{href:!0});var v_t=s(jO);hIo=r(v_t,"DebertaForSequenceClassification"),v_t.forEach(t),pIo=r(oke," (DeBERTa model)"),oke.forEach(t),uIo=i(D),x7=n(D,"LI",{});var rke=s(x7);ehe=n(rke,"STRONG",{});var F_t=s(ehe);_Io=r(F_t,"deberta-v2"),F_t.forEach(t),bIo=r(rke," \u2014 "),DO=n(rke,"A",{href:!0});var T_t=s(DO);vIo=r(T_t,"DebertaV2ForSequenceClassification"),T_t.forEach(t),FIo=r(rke," (DeBERTa-v2 model)"),rke.forEach(t),TIo=i(D),$7=n(D,"LI",{});var tke=s($7);ohe=n(tke,"STRONG",{});var M_t=s(ohe);MIo=r(M_t,"distilbert"),M_t.forEach(t),EIo=r(tke," \u2014 "),GO=n(tke,"A",{href:!0});var E_t=s(GO);CIo=r(E_t,"DistilBertForSequenceClassification"),E_t.forEach(t),wIo=r(tke," (DistilBERT model)"),tke.forEach(t),AIo=i(D),k7=n(D,"LI",{});var ake=s(k7);rhe=n(ake,"STRONG",{});var C_t=s(rhe);LIo=r(C_t,"electra"),C_t.forEach(t),yIo=r(ake," \u2014 "),OO=n(ake,"A",{href:!0});var w_t=s(OO);xIo=r(w_t,"ElectraForSequenceClassification"),w_t.forEach(t),$Io=r(ake," (ELECTRA model)"),ake.forEach(t),kIo=i(D),S7=n(D,"LI",{});var nke=s(S7);the=n(nke,"STRONG",{});var A_t=s(the);SIo=r(A_t,"flaubert"),A_t.forEach(t),RIo=r(nke," \u2014 "),VO=n(nke,"A",{href:!0});var L_t=s(VO);PIo=r(L_t,"FlaubertForSequenceClassification"),L_t.forEach(t),BIo=r(nke," (FlauBERT model)"),nke.forEach(t),IIo=i(D),R7=n(D,"LI",{});var ske=s(R7);ahe=n(ske,"STRONG",{});var y_t=s(ahe);NIo=r(y_t,"fnet"),y_t.forEach(t),qIo=r(ske," \u2014 "),XO=n(ske,"A",{href:!0});var x_t=s(XO);jIo=r(x_t,"FNetForSequenceClassification"),x_t.forEach(t),DIo=r(ske," (FNet model)"),ske.forEach(t),GIo=i(D),P7=n(D,"LI",{});var lke=s(P7);nhe=n(lke,"STRONG",{});var $_t=s(nhe);OIo=r($_t,"funnel"),$_t.forEach(t),VIo=r(lke," \u2014 "),zO=n(lke,"A",{href:!0});var k_t=s(zO);XIo=r(k_t,"FunnelForSequenceClassification"),k_t.forEach(t),zIo=r(lke," (Funnel Transformer model)"),lke.forEach(t),WIo=i(D),B7=n(D,"LI",{});var ike=s(B7);she=n(ike,"STRONG",{});var S_t=s(she);QIo=r(S_t,"gpt2"),S_t.forEach(t),HIo=r(ike," \u2014 "),WO=n(ike,"A",{href:!0});var R_t=s(WO);UIo=r(R_t,"GPT2ForSequenceClassification"),R_t.forEach(t),JIo=r(ike," (OpenAI GPT-2 model)"),ike.forEach(t),YIo=i(D),I7=n(D,"LI",{});var dke=s(I7);lhe=n(dke,"STRONG",{});var P_t=s(lhe);KIo=r(P_t,"gpt_neo"),P_t.forEach(t),ZIo=r(dke," \u2014 "),QO=n(dke,"A",{href:!0});var B_t=s(QO);eNo=r(B_t,"GPTNeoForSequenceClassification"),B_t.forEach(t),oNo=r(dke," (GPT Neo model)"),dke.forEach(t),rNo=i(D),N7=n(D,"LI",{});var cke=s(N7);ihe=n(cke,"STRONG",{});var I_t=s(ihe);tNo=r(I_t,"gptj"),I_t.forEach(t),aNo=r(cke," \u2014 "),HO=n(cke,"A",{href:!0});var N_t=s(HO);nNo=r(N_t,"GPTJForSequenceClassification"),N_t.forEach(t),sNo=r(cke," (GPT-J model)"),cke.forEach(t),lNo=i(D),q7=n(D,"LI",{});var fke=s(q7);dhe=n(fke,"STRONG",{});var q_t=s(dhe);iNo=r(q_t,"ibert"),q_t.forEach(t),dNo=r(fke," \u2014 "),UO=n(fke,"A",{href:!0});var j_t=s(UO);cNo=r(j_t,"IBertForSequenceClassification"),j_t.forEach(t),fNo=r(fke," (I-BERT model)"),fke.forEach(t),mNo=i(D),j7=n(D,"LI",{});var mke=s(j7);che=n(mke,"STRONG",{});var D_t=s(che);gNo=r(D_t,"layoutlm"),D_t.forEach(t),hNo=r(mke," \u2014 "),JO=n(mke,"A",{href:!0});var G_t=s(JO);pNo=r(G_t,"LayoutLMForSequenceClassification"),G_t.forEach(t),uNo=r(mke," (LayoutLM model)"),mke.forEach(t),_No=i(D),D7=n(D,"LI",{});var gke=s(D7);fhe=n(gke,"STRONG",{});var O_t=s(fhe);bNo=r(O_t,"layoutlmv2"),O_t.forEach(t),vNo=r(gke," \u2014 "),YO=n(gke,"A",{href:!0});var V_t=s(YO);FNo=r(V_t,"LayoutLMv2ForSequenceClassification"),V_t.forEach(t),TNo=r(gke," (LayoutLMv2 model)"),gke.forEach(t),MNo=i(D),G7=n(D,"LI",{});var hke=s(G7);mhe=n(hke,"STRONG",{});var X_t=s(mhe);ENo=r(X_t,"layoutlmv3"),X_t.forEach(t),CNo=r(hke," \u2014 "),KO=n(hke,"A",{href:!0});var z_t=s(KO);wNo=r(z_t,"LayoutLMv3ForSequenceClassification"),z_t.forEach(t),ANo=r(hke," (LayoutLMv3 model)"),hke.forEach(t),LNo=i(D),O7=n(D,"LI",{});var pke=s(O7);ghe=n(pke,"STRONG",{});var W_t=s(ghe);yNo=r(W_t,"led"),W_t.forEach(t),xNo=r(pke," \u2014 "),ZO=n(pke,"A",{href:!0});var Q_t=s(ZO);$No=r(Q_t,"LEDForSequenceClassification"),Q_t.forEach(t),kNo=r(pke," (LED model)"),pke.forEach(t),SNo=i(D),V7=n(D,"LI",{});var uke=s(V7);hhe=n(uke,"STRONG",{});var H_t=s(hhe);RNo=r(H_t,"longformer"),H_t.forEach(t),PNo=r(uke," \u2014 "),eV=n(uke,"A",{href:!0});var U_t=s(eV);BNo=r(U_t,"LongformerForSequenceClassification"),U_t.forEach(t),INo=r(uke," (Longformer model)"),uke.forEach(t),NNo=i(D),X7=n(D,"LI",{});var _ke=s(X7);phe=n(_ke,"STRONG",{});var J_t=s(phe);qNo=r(J_t,"mbart"),J_t.forEach(t),jNo=r(_ke," \u2014 "),oV=n(_ke,"A",{href:!0});var Y_t=s(oV);DNo=r(Y_t,"MBartForSequenceClassification"),Y_t.forEach(t),GNo=r(_ke," (mBART model)"),_ke.forEach(t),ONo=i(D),z7=n(D,"LI",{});var bke=s(z7);uhe=n(bke,"STRONG",{});var K_t=s(uhe);VNo=r(K_t,"megatron-bert"),K_t.forEach(t),XNo=r(bke," \u2014 "),rV=n(bke,"A",{href:!0});var Z_t=s(rV);zNo=r(Z_t,"MegatronBertForSequenceClassification"),Z_t.forEach(t),WNo=r(bke," (Megatron-BERT model)"),bke.forEach(t),QNo=i(D),W7=n(D,"LI",{});var vke=s(W7);_he=n(vke,"STRONG",{});var e2t=s(_he);HNo=r(e2t,"mobilebert"),e2t.forEach(t),UNo=r(vke," \u2014 "),tV=n(vke,"A",{href:!0});var o2t=s(tV);JNo=r(o2t,"MobileBertForSequenceClassification"),o2t.forEach(t),YNo=r(vke," (MobileBERT model)"),vke.forEach(t),KNo=i(D),Q7=n(D,"LI",{});var Fke=s(Q7);bhe=n(Fke,"STRONG",{});var r2t=s(bhe);ZNo=r(r2t,"mpnet"),r2t.forEach(t),eqo=r(Fke," \u2014 "),aV=n(Fke,"A",{href:!0});var t2t=s(aV);oqo=r(t2t,"MPNetForSequenceClassification"),t2t.forEach(t),rqo=r(Fke," (MPNet model)"),Fke.forEach(t),tqo=i(D),H7=n(D,"LI",{});var Tke=s(H7);vhe=n(Tke,"STRONG",{});var a2t=s(vhe);aqo=r(a2t,"nystromformer"),a2t.forEach(t),nqo=r(Tke," \u2014 "),nV=n(Tke,"A",{href:!0});var n2t=s(nV);sqo=r(n2t,"NystromformerForSequenceClassification"),n2t.forEach(t),lqo=r(Tke," (Nystr\xF6mformer model)"),Tke.forEach(t),iqo=i(D),U7=n(D,"LI",{});var Mke=s(U7);Fhe=n(Mke,"STRONG",{});var s2t=s(Fhe);dqo=r(s2t,"openai-gpt"),s2t.forEach(t),cqo=r(Mke," \u2014 "),sV=n(Mke,"A",{href:!0});var l2t=s(sV);fqo=r(l2t,"OpenAIGPTForSequenceClassification"),l2t.forEach(t),mqo=r(Mke," (OpenAI GPT model)"),Mke.forEach(t),gqo=i(D),J7=n(D,"LI",{});var Eke=s(J7);The=n(Eke,"STRONG",{});var i2t=s(The);hqo=r(i2t,"perceiver"),i2t.forEach(t),pqo=r(Eke," \u2014 "),lV=n(Eke,"A",{href:!0});var d2t=s(lV);uqo=r(d2t,"PerceiverForSequenceClassification"),d2t.forEach(t),_qo=r(Eke," (Perceiver model)"),Eke.forEach(t),bqo=i(D),Y7=n(D,"LI",{});var Cke=s(Y7);Mhe=n(Cke,"STRONG",{});var c2t=s(Mhe);vqo=r(c2t,"plbart"),c2t.forEach(t),Fqo=r(Cke," \u2014 "),iV=n(Cke,"A",{href:!0});var f2t=s(iV);Tqo=r(f2t,"PLBartForSequenceClassification"),f2t.forEach(t),Mqo=r(Cke," (PLBart model)"),Cke.forEach(t),Eqo=i(D),K7=n(D,"LI",{});var wke=s(K7);Ehe=n(wke,"STRONG",{});var m2t=s(Ehe);Cqo=r(m2t,"qdqbert"),m2t.forEach(t),wqo=r(wke," \u2014 "),dV=n(wke,"A",{href:!0});var g2t=s(dV);Aqo=r(g2t,"QDQBertForSequenceClassification"),g2t.forEach(t),Lqo=r(wke," (QDQBert model)"),wke.forEach(t),yqo=i(D),Z7=n(D,"LI",{});var Ake=s(Z7);Che=n(Ake,"STRONG",{});var h2t=s(Che);xqo=r(h2t,"reformer"),h2t.forEach(t),$qo=r(Ake," \u2014 "),cV=n(Ake,"A",{href:!0});var p2t=s(cV);kqo=r(p2t,"ReformerForSequenceClassification"),p2t.forEach(t),Sqo=r(Ake," (Reformer model)"),Ake.forEach(t),Rqo=i(D),eb=n(D,"LI",{});var Lke=s(eb);whe=n(Lke,"STRONG",{});var u2t=s(whe);Pqo=r(u2t,"rembert"),u2t.forEach(t),Bqo=r(Lke," \u2014 "),fV=n(Lke,"A",{href:!0});var _2t=s(fV);Iqo=r(_2t,"RemBertForSequenceClassification"),_2t.forEach(t),Nqo=r(Lke," (RemBERT model)"),Lke.forEach(t),qqo=i(D),ob=n(D,"LI",{});var yke=s(ob);Ahe=n(yke,"STRONG",{});var b2t=s(Ahe);jqo=r(b2t,"roberta"),b2t.forEach(t),Dqo=r(yke," \u2014 "),mV=n(yke,"A",{href:!0});var v2t=s(mV);Gqo=r(v2t,"RobertaForSequenceClassification"),v2t.forEach(t),Oqo=r(yke," (RoBERTa model)"),yke.forEach(t),Vqo=i(D),rb=n(D,"LI",{});var xke=s(rb);Lhe=n(xke,"STRONG",{});var F2t=s(Lhe);Xqo=r(F2t,"roformer"),F2t.forEach(t),zqo=r(xke," \u2014 "),gV=n(xke,"A",{href:!0});var T2t=s(gV);Wqo=r(T2t,"RoFormerForSequenceClassification"),T2t.forEach(t),Qqo=r(xke," (RoFormer model)"),xke.forEach(t),Hqo=i(D),tb=n(D,"LI",{});var $ke=s(tb);yhe=n($ke,"STRONG",{});var M2t=s(yhe);Uqo=r(M2t,"squeezebert"),M2t.forEach(t),Jqo=r($ke," \u2014 "),hV=n($ke,"A",{href:!0});var E2t=s(hV);Yqo=r(E2t,"SqueezeBertForSequenceClassification"),E2t.forEach(t),Kqo=r($ke," (SqueezeBERT model)"),$ke.forEach(t),Zqo=i(D),ab=n(D,"LI",{});var kke=s(ab);xhe=n(kke,"STRONG",{});var C2t=s(xhe);ejo=r(C2t,"tapas"),C2t.forEach(t),ojo=r(kke," \u2014 "),pV=n(kke,"A",{href:!0});var w2t=s(pV);rjo=r(w2t,"TapasForSequenceClassification"),w2t.forEach(t),tjo=r(kke," (TAPAS model)"),kke.forEach(t),ajo=i(D),nb=n(D,"LI",{});var Ske=s(nb);$he=n(Ske,"STRONG",{});var A2t=s($he);njo=r(A2t,"transfo-xl"),A2t.forEach(t),sjo=r(Ske," \u2014 "),uV=n(Ske,"A",{href:!0});var L2t=s(uV);ljo=r(L2t,"TransfoXLForSequenceClassification"),L2t.forEach(t),ijo=r(Ske," (Transformer-XL model)"),Ske.forEach(t),djo=i(D),sb=n(D,"LI",{});var Rke=s(sb);khe=n(Rke,"STRONG",{});var y2t=s(khe);cjo=r(y2t,"xlm"),y2t.forEach(t),fjo=r(Rke," \u2014 "),_V=n(Rke,"A",{href:!0});var x2t=s(_V);mjo=r(x2t,"XLMForSequenceClassification"),x2t.forEach(t),gjo=r(Rke," (XLM model)"),Rke.forEach(t),hjo=i(D),lb=n(D,"LI",{});var Pke=s(lb);She=n(Pke,"STRONG",{});var $2t=s(She);pjo=r($2t,"xlm-roberta"),$2t.forEach(t),ujo=r(Pke," \u2014 "),bV=n(Pke,"A",{href:!0});var k2t=s(bV);_jo=r(k2t,"XLMRobertaForSequenceClassification"),k2t.forEach(t),bjo=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),vjo=i(D),ib=n(D,"LI",{});var Bke=s(ib);Rhe=n(Bke,"STRONG",{});var S2t=s(Rhe);Fjo=r(S2t,"xlm-roberta-xl"),S2t.forEach(t),Tjo=r(Bke," \u2014 "),vV=n(Bke,"A",{href:!0});var R2t=s(vV);Mjo=r(R2t,"XLMRobertaXLForSequenceClassification"),R2t.forEach(t),Ejo=r(Bke," (XLM-RoBERTa-XL model)"),Bke.forEach(t),Cjo=i(D),db=n(D,"LI",{});var Ike=s(db);Phe=n(Ike,"STRONG",{});var P2t=s(Phe);wjo=r(P2t,"xlnet"),P2t.forEach(t),Ajo=r(Ike," \u2014 "),FV=n(Ike,"A",{href:!0});var B2t=s(FV);Ljo=r(B2t,"XLNetForSequenceClassification"),B2t.forEach(t),yjo=r(Ike," (XLNet model)"),Ike.forEach(t),xjo=i(D),cb=n(D,"LI",{});var Nke=s(cb);Bhe=n(Nke,"STRONG",{});var I2t=s(Bhe);$jo=r(I2t,"yoso"),I2t.forEach(t),kjo=r(Nke," \u2014 "),TV=n(Nke,"A",{href:!0});var N2t=s(TV);Sjo=r(N2t,"YosoForSequenceClassification"),N2t.forEach(t),Rjo=r(Nke," (YOSO model)"),Nke.forEach(t),D.forEach(t),Pjo=i(ca),fb=n(ca,"P",{});var qke=s(fb);Bjo=r(qke,"The model is set in evaluation mode by default using "),Ihe=n(qke,"CODE",{});var q2t=s(Ihe);Ijo=r(q2t,"model.eval()"),q2t.forEach(t),Njo=r(qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(qke,"CODE",{});var j2t=s(Nhe);qjo=r(j2t,"model.train()"),j2t.forEach(t),qke.forEach(t),jjo=i(ca),T(mb.$$.fragment,ca),ca.forEach(t),el.forEach(t),EGe=i(f),Zi=n(f,"H2",{class:!0});var xVe=s(Zi);gb=n(xVe,"A",{id:!0,class:!0,href:!0});var D2t=s(gb);qhe=n(D2t,"SPAN",{});var G2t=s(qhe);T(Ty.$$.fragment,G2t),G2t.forEach(t),D2t.forEach(t),Djo=i(xVe),jhe=n(xVe,"SPAN",{});var O2t=s(jhe);Gjo=r(O2t,"AutoModelForMultipleChoice"),O2t.forEach(t),xVe.forEach(t),CGe=i(f),Bo=n(f,"DIV",{class:!0});var ol=s(Bo);T(My.$$.fragment,ol),Ojo=i(ol),ed=n(ol,"P",{});var doe=s(ed);Vjo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MV=n(doe,"A",{href:!0});var V2t=s(MV);Xjo=r(V2t,"from_pretrained()"),V2t.forEach(t),zjo=r(doe," class method or the "),EV=n(doe,"A",{href:!0});var X2t=s(EV);Wjo=r(X2t,"from_config()"),X2t.forEach(t),Qjo=r(doe,` class
method.`),doe.forEach(t),Hjo=i(ol),Ey=n(ol,"P",{});var $Ve=s(Ey);Ujo=r($Ve,"This class cannot be instantiated directly using "),Dhe=n($Ve,"CODE",{});var z2t=s(Dhe);Jjo=r(z2t,"__init__()"),z2t.forEach(t),Yjo=r($Ve," (throws an error)."),$Ve.forEach(t),Kjo=i(ol),mt=n(ol,"DIV",{class:!0});var PA=s(mt);T(Cy.$$.fragment,PA),Zjo=i(PA),Ghe=n(PA,"P",{});var W2t=s(Ghe);eDo=r(W2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),W2t.forEach(t),oDo=i(PA),od=n(PA,"P",{});var coe=s(od);rDo=r(coe,`Note:
Loading a model from its configuration file does `),Ohe=n(coe,"STRONG",{});var Q2t=s(Ohe);tDo=r(Q2t,"not"),Q2t.forEach(t),aDo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CV=n(coe,"A",{href:!0});var H2t=s(CV);nDo=r(H2t,"from_pretrained()"),H2t.forEach(t),sDo=r(coe," to load the model weights."),coe.forEach(t),lDo=i(PA),T(hb.$$.fragment,PA),PA.forEach(t),iDo=i(ol),ro=n(ol,"DIV",{class:!0});var fa=s(ro);T(wy.$$.fragment,fa),dDo=i(fa),Vhe=n(fa,"P",{});var U2t=s(Vhe);cDo=r(U2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),U2t.forEach(t),fDo=i(fa),ja=n(fa,"P",{});var BA=s(ja);mDo=r(BA,"The model class to instantiate is selected based on the "),Xhe=n(BA,"CODE",{});var J2t=s(Xhe);gDo=r(J2t,"model_type"),J2t.forEach(t),hDo=r(BA,` property of the config object (either
passed as an argument or loaded from `),zhe=n(BA,"CODE",{});var Y2t=s(zhe);pDo=r(Y2t,"pretrained_model_name_or_path"),Y2t.forEach(t),uDo=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Whe=n(BA,"CODE",{});var K2t=s(Whe);_Do=r(K2t,"pretrained_model_name_or_path"),K2t.forEach(t),bDo=r(BA,":"),BA.forEach(t),vDo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);pb=n(ee,"LI",{});var jke=s(pb);Qhe=n(jke,"STRONG",{});var Z2t=s(Qhe);FDo=r(Z2t,"albert"),Z2t.forEach(t),TDo=r(jke," \u2014 "),wV=n(jke,"A",{href:!0});var e1t=s(wV);MDo=r(e1t,"AlbertForMultipleChoice"),e1t.forEach(t),EDo=r(jke," (ALBERT model)"),jke.forEach(t),CDo=i(ee),ub=n(ee,"LI",{});var Dke=s(ub);Hhe=n(Dke,"STRONG",{});var o1t=s(Hhe);wDo=r(o1t,"bert"),o1t.forEach(t),ADo=r(Dke," \u2014 "),AV=n(Dke,"A",{href:!0});var r1t=s(AV);LDo=r(r1t,"BertForMultipleChoice"),r1t.forEach(t),yDo=r(Dke," (BERT model)"),Dke.forEach(t),xDo=i(ee),_b=n(ee,"LI",{});var Gke=s(_b);Uhe=n(Gke,"STRONG",{});var t1t=s(Uhe);$Do=r(t1t,"big_bird"),t1t.forEach(t),kDo=r(Gke," \u2014 "),LV=n(Gke,"A",{href:!0});var a1t=s(LV);SDo=r(a1t,"BigBirdForMultipleChoice"),a1t.forEach(t),RDo=r(Gke," (BigBird model)"),Gke.forEach(t),PDo=i(ee),bb=n(ee,"LI",{});var Oke=s(bb);Jhe=n(Oke,"STRONG",{});var n1t=s(Jhe);BDo=r(n1t,"camembert"),n1t.forEach(t),IDo=r(Oke," \u2014 "),yV=n(Oke,"A",{href:!0});var s1t=s(yV);NDo=r(s1t,"CamembertForMultipleChoice"),s1t.forEach(t),qDo=r(Oke," (CamemBERT model)"),Oke.forEach(t),jDo=i(ee),vb=n(ee,"LI",{});var Vke=s(vb);Yhe=n(Vke,"STRONG",{});var l1t=s(Yhe);DDo=r(l1t,"canine"),l1t.forEach(t),GDo=r(Vke," \u2014 "),xV=n(Vke,"A",{href:!0});var i1t=s(xV);ODo=r(i1t,"CanineForMultipleChoice"),i1t.forEach(t),VDo=r(Vke," (CANINE model)"),Vke.forEach(t),XDo=i(ee),Fb=n(ee,"LI",{});var Xke=s(Fb);Khe=n(Xke,"STRONG",{});var d1t=s(Khe);zDo=r(d1t,"convbert"),d1t.forEach(t),WDo=r(Xke," \u2014 "),$V=n(Xke,"A",{href:!0});var c1t=s($V);QDo=r(c1t,"ConvBertForMultipleChoice"),c1t.forEach(t),HDo=r(Xke," (ConvBERT model)"),Xke.forEach(t),UDo=i(ee),Tb=n(ee,"LI",{});var zke=s(Tb);Zhe=n(zke,"STRONG",{});var f1t=s(Zhe);JDo=r(f1t,"data2vec-text"),f1t.forEach(t),YDo=r(zke," \u2014 "),kV=n(zke,"A",{href:!0});var m1t=s(kV);KDo=r(m1t,"Data2VecTextForMultipleChoice"),m1t.forEach(t),ZDo=r(zke," (Data2VecText model)"),zke.forEach(t),eGo=i(ee),Mb=n(ee,"LI",{});var Wke=s(Mb);epe=n(Wke,"STRONG",{});var g1t=s(epe);oGo=r(g1t,"deberta-v2"),g1t.forEach(t),rGo=r(Wke," \u2014 "),SV=n(Wke,"A",{href:!0});var h1t=s(SV);tGo=r(h1t,"DebertaV2ForMultipleChoice"),h1t.forEach(t),aGo=r(Wke," (DeBERTa-v2 model)"),Wke.forEach(t),nGo=i(ee),Eb=n(ee,"LI",{});var Qke=s(Eb);ope=n(Qke,"STRONG",{});var p1t=s(ope);sGo=r(p1t,"distilbert"),p1t.forEach(t),lGo=r(Qke," \u2014 "),RV=n(Qke,"A",{href:!0});var u1t=s(RV);iGo=r(u1t,"DistilBertForMultipleChoice"),u1t.forEach(t),dGo=r(Qke," (DistilBERT model)"),Qke.forEach(t),cGo=i(ee),Cb=n(ee,"LI",{});var Hke=s(Cb);rpe=n(Hke,"STRONG",{});var _1t=s(rpe);fGo=r(_1t,"electra"),_1t.forEach(t),mGo=r(Hke," \u2014 "),PV=n(Hke,"A",{href:!0});var b1t=s(PV);gGo=r(b1t,"ElectraForMultipleChoice"),b1t.forEach(t),hGo=r(Hke," (ELECTRA model)"),Hke.forEach(t),pGo=i(ee),wb=n(ee,"LI",{});var Uke=s(wb);tpe=n(Uke,"STRONG",{});var v1t=s(tpe);uGo=r(v1t,"flaubert"),v1t.forEach(t),_Go=r(Uke," \u2014 "),BV=n(Uke,"A",{href:!0});var F1t=s(BV);bGo=r(F1t,"FlaubertForMultipleChoice"),F1t.forEach(t),vGo=r(Uke," (FlauBERT model)"),Uke.forEach(t),FGo=i(ee),Ab=n(ee,"LI",{});var Jke=s(Ab);ape=n(Jke,"STRONG",{});var T1t=s(ape);TGo=r(T1t,"fnet"),T1t.forEach(t),MGo=r(Jke," \u2014 "),IV=n(Jke,"A",{href:!0});var M1t=s(IV);EGo=r(M1t,"FNetForMultipleChoice"),M1t.forEach(t),CGo=r(Jke," (FNet model)"),Jke.forEach(t),wGo=i(ee),Lb=n(ee,"LI",{});var Yke=s(Lb);npe=n(Yke,"STRONG",{});var E1t=s(npe);AGo=r(E1t,"funnel"),E1t.forEach(t),LGo=r(Yke," \u2014 "),NV=n(Yke,"A",{href:!0});var C1t=s(NV);yGo=r(C1t,"FunnelForMultipleChoice"),C1t.forEach(t),xGo=r(Yke," (Funnel Transformer model)"),Yke.forEach(t),$Go=i(ee),yb=n(ee,"LI",{});var Kke=s(yb);spe=n(Kke,"STRONG",{});var w1t=s(spe);kGo=r(w1t,"ibert"),w1t.forEach(t),SGo=r(Kke," \u2014 "),qV=n(Kke,"A",{href:!0});var A1t=s(qV);RGo=r(A1t,"IBertForMultipleChoice"),A1t.forEach(t),PGo=r(Kke," (I-BERT model)"),Kke.forEach(t),BGo=i(ee),xb=n(ee,"LI",{});var Zke=s(xb);lpe=n(Zke,"STRONG",{});var L1t=s(lpe);IGo=r(L1t,"longformer"),L1t.forEach(t),NGo=r(Zke," \u2014 "),jV=n(Zke,"A",{href:!0});var y1t=s(jV);qGo=r(y1t,"LongformerForMultipleChoice"),y1t.forEach(t),jGo=r(Zke," (Longformer model)"),Zke.forEach(t),DGo=i(ee),$b=n(ee,"LI",{});var eSe=s($b);ipe=n(eSe,"STRONG",{});var x1t=s(ipe);GGo=r(x1t,"megatron-bert"),x1t.forEach(t),OGo=r(eSe," \u2014 "),DV=n(eSe,"A",{href:!0});var $1t=s(DV);VGo=r($1t,"MegatronBertForMultipleChoice"),$1t.forEach(t),XGo=r(eSe," (Megatron-BERT model)"),eSe.forEach(t),zGo=i(ee),kb=n(ee,"LI",{});var oSe=s(kb);dpe=n(oSe,"STRONG",{});var k1t=s(dpe);WGo=r(k1t,"mobilebert"),k1t.forEach(t),QGo=r(oSe," \u2014 "),GV=n(oSe,"A",{href:!0});var S1t=s(GV);HGo=r(S1t,"MobileBertForMultipleChoice"),S1t.forEach(t),UGo=r(oSe," (MobileBERT model)"),oSe.forEach(t),JGo=i(ee),Sb=n(ee,"LI",{});var rSe=s(Sb);cpe=n(rSe,"STRONG",{});var R1t=s(cpe);YGo=r(R1t,"mpnet"),R1t.forEach(t),KGo=r(rSe," \u2014 "),OV=n(rSe,"A",{href:!0});var P1t=s(OV);ZGo=r(P1t,"MPNetForMultipleChoice"),P1t.forEach(t),eOo=r(rSe," (MPNet model)"),rSe.forEach(t),oOo=i(ee),Rb=n(ee,"LI",{});var tSe=s(Rb);fpe=n(tSe,"STRONG",{});var B1t=s(fpe);rOo=r(B1t,"nystromformer"),B1t.forEach(t),tOo=r(tSe," \u2014 "),VV=n(tSe,"A",{href:!0});var I1t=s(VV);aOo=r(I1t,"NystromformerForMultipleChoice"),I1t.forEach(t),nOo=r(tSe," (Nystr\xF6mformer model)"),tSe.forEach(t),sOo=i(ee),Pb=n(ee,"LI",{});var aSe=s(Pb);mpe=n(aSe,"STRONG",{});var N1t=s(mpe);lOo=r(N1t,"qdqbert"),N1t.forEach(t),iOo=r(aSe," \u2014 "),XV=n(aSe,"A",{href:!0});var q1t=s(XV);dOo=r(q1t,"QDQBertForMultipleChoice"),q1t.forEach(t),cOo=r(aSe," (QDQBert model)"),aSe.forEach(t),fOo=i(ee),Bb=n(ee,"LI",{});var nSe=s(Bb);gpe=n(nSe,"STRONG",{});var j1t=s(gpe);mOo=r(j1t,"rembert"),j1t.forEach(t),gOo=r(nSe," \u2014 "),zV=n(nSe,"A",{href:!0});var D1t=s(zV);hOo=r(D1t,"RemBertForMultipleChoice"),D1t.forEach(t),pOo=r(nSe," (RemBERT model)"),nSe.forEach(t),uOo=i(ee),Ib=n(ee,"LI",{});var sSe=s(Ib);hpe=n(sSe,"STRONG",{});var G1t=s(hpe);_Oo=r(G1t,"roberta"),G1t.forEach(t),bOo=r(sSe," \u2014 "),WV=n(sSe,"A",{href:!0});var O1t=s(WV);vOo=r(O1t,"RobertaForMultipleChoice"),O1t.forEach(t),FOo=r(sSe," (RoBERTa model)"),sSe.forEach(t),TOo=i(ee),Nb=n(ee,"LI",{});var lSe=s(Nb);ppe=n(lSe,"STRONG",{});var V1t=s(ppe);MOo=r(V1t,"roformer"),V1t.forEach(t),EOo=r(lSe," \u2014 "),QV=n(lSe,"A",{href:!0});var X1t=s(QV);COo=r(X1t,"RoFormerForMultipleChoice"),X1t.forEach(t),wOo=r(lSe," (RoFormer model)"),lSe.forEach(t),AOo=i(ee),qb=n(ee,"LI",{});var iSe=s(qb);upe=n(iSe,"STRONG",{});var z1t=s(upe);LOo=r(z1t,"squeezebert"),z1t.forEach(t),yOo=r(iSe," \u2014 "),HV=n(iSe,"A",{href:!0});var W1t=s(HV);xOo=r(W1t,"SqueezeBertForMultipleChoice"),W1t.forEach(t),$Oo=r(iSe," (SqueezeBERT model)"),iSe.forEach(t),kOo=i(ee),jb=n(ee,"LI",{});var dSe=s(jb);_pe=n(dSe,"STRONG",{});var Q1t=s(_pe);SOo=r(Q1t,"xlm"),Q1t.forEach(t),ROo=r(dSe," \u2014 "),UV=n(dSe,"A",{href:!0});var H1t=s(UV);POo=r(H1t,"XLMForMultipleChoice"),H1t.forEach(t),BOo=r(dSe," (XLM model)"),dSe.forEach(t),IOo=i(ee),Db=n(ee,"LI",{});var cSe=s(Db);bpe=n(cSe,"STRONG",{});var U1t=s(bpe);NOo=r(U1t,"xlm-roberta"),U1t.forEach(t),qOo=r(cSe," \u2014 "),JV=n(cSe,"A",{href:!0});var J1t=s(JV);jOo=r(J1t,"XLMRobertaForMultipleChoice"),J1t.forEach(t),DOo=r(cSe," (XLM-RoBERTa model)"),cSe.forEach(t),GOo=i(ee),Gb=n(ee,"LI",{});var fSe=s(Gb);vpe=n(fSe,"STRONG",{});var Y1t=s(vpe);OOo=r(Y1t,"xlm-roberta-xl"),Y1t.forEach(t),VOo=r(fSe," \u2014 "),YV=n(fSe,"A",{href:!0});var K1t=s(YV);XOo=r(K1t,"XLMRobertaXLForMultipleChoice"),K1t.forEach(t),zOo=r(fSe," (XLM-RoBERTa-XL model)"),fSe.forEach(t),WOo=i(ee),Ob=n(ee,"LI",{});var mSe=s(Ob);Fpe=n(mSe,"STRONG",{});var Z1t=s(Fpe);QOo=r(Z1t,"xlnet"),Z1t.forEach(t),HOo=r(mSe," \u2014 "),KV=n(mSe,"A",{href:!0});var e7t=s(KV);UOo=r(e7t,"XLNetForMultipleChoice"),e7t.forEach(t),JOo=r(mSe," (XLNet model)"),mSe.forEach(t),YOo=i(ee),Vb=n(ee,"LI",{});var gSe=s(Vb);Tpe=n(gSe,"STRONG",{});var o7t=s(Tpe);KOo=r(o7t,"yoso"),o7t.forEach(t),ZOo=r(gSe," \u2014 "),ZV=n(gSe,"A",{href:!0});var r7t=s(ZV);eVo=r(r7t,"YosoForMultipleChoice"),r7t.forEach(t),oVo=r(gSe," (YOSO model)"),gSe.forEach(t),ee.forEach(t),rVo=i(fa),Xb=n(fa,"P",{});var hSe=s(Xb);tVo=r(hSe,"The model is set in evaluation mode by default using "),Mpe=n(hSe,"CODE",{});var t7t=s(Mpe);aVo=r(t7t,"model.eval()"),t7t.forEach(t),nVo=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Epe=n(hSe,"CODE",{});var a7t=s(Epe);sVo=r(a7t,"model.train()"),a7t.forEach(t),hSe.forEach(t),lVo=i(fa),T(zb.$$.fragment,fa),fa.forEach(t),ol.forEach(t),wGe=i(f),rd=n(f,"H2",{class:!0});var kVe=s(rd);Wb=n(kVe,"A",{id:!0,class:!0,href:!0});var n7t=s(Wb);Cpe=n(n7t,"SPAN",{});var s7t=s(Cpe);T(Ay.$$.fragment,s7t),s7t.forEach(t),n7t.forEach(t),iVo=i(kVe),wpe=n(kVe,"SPAN",{});var l7t=s(wpe);dVo=r(l7t,"AutoModelForNextSentencePrediction"),l7t.forEach(t),kVe.forEach(t),AGe=i(f),Io=n(f,"DIV",{class:!0});var rl=s(Io);T(Ly.$$.fragment,rl),cVo=i(rl),td=n(rl,"P",{});var foe=s(td);fVo=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),eX=n(foe,"A",{href:!0});var i7t=s(eX);mVo=r(i7t,"from_pretrained()"),i7t.forEach(t),gVo=r(foe," class method or the "),oX=n(foe,"A",{href:!0});var d7t=s(oX);hVo=r(d7t,"from_config()"),d7t.forEach(t),pVo=r(foe,` class
method.`),foe.forEach(t),uVo=i(rl),yy=n(rl,"P",{});var SVe=s(yy);_Vo=r(SVe,"This class cannot be instantiated directly using "),Ape=n(SVe,"CODE",{});var c7t=s(Ape);bVo=r(c7t,"__init__()"),c7t.forEach(t),vVo=r(SVe," (throws an error)."),SVe.forEach(t),FVo=i(rl),gt=n(rl,"DIV",{class:!0});var IA=s(gt);T(xy.$$.fragment,IA),TVo=i(IA),Lpe=n(IA,"P",{});var f7t=s(Lpe);MVo=r(f7t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),f7t.forEach(t),EVo=i(IA),ad=n(IA,"P",{});var moe=s(ad);CVo=r(moe,`Note:
Loading a model from its configuration file does `),ype=n(moe,"STRONG",{});var m7t=s(ype);wVo=r(m7t,"not"),m7t.forEach(t),AVo=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),rX=n(moe,"A",{href:!0});var g7t=s(rX);LVo=r(g7t,"from_pretrained()"),g7t.forEach(t),yVo=r(moe," to load the model weights."),moe.forEach(t),xVo=i(IA),T(Qb.$$.fragment,IA),IA.forEach(t),$Vo=i(rl),to=n(rl,"DIV",{class:!0});var ma=s(to);T($y.$$.fragment,ma),kVo=i(ma),xpe=n(ma,"P",{});var h7t=s(xpe);SVo=r(h7t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),h7t.forEach(t),RVo=i(ma),Da=n(ma,"P",{});var NA=s(Da);PVo=r(NA,"The model class to instantiate is selected based on the "),$pe=n(NA,"CODE",{});var p7t=s($pe);BVo=r(p7t,"model_type"),p7t.forEach(t),IVo=r(NA,` property of the config object (either
passed as an argument or loaded from `),kpe=n(NA,"CODE",{});var u7t=s(kpe);NVo=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),qVo=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Spe=n(NA,"CODE",{});var _7t=s(Spe);jVo=r(_7t,"pretrained_model_name_or_path"),_7t.forEach(t),DVo=r(NA,":"),NA.forEach(t),GVo=i(ma),Zr=n(ma,"UL",{});var tl=s(Zr);Hb=n(tl,"LI",{});var pSe=s(Hb);Rpe=n(pSe,"STRONG",{});var b7t=s(Rpe);OVo=r(b7t,"bert"),b7t.forEach(t),VVo=r(pSe," \u2014 "),tX=n(pSe,"A",{href:!0});var v7t=s(tX);XVo=r(v7t,"BertForNextSentencePrediction"),v7t.forEach(t),zVo=r(pSe," (BERT model)"),pSe.forEach(t),WVo=i(tl),Ub=n(tl,"LI",{});var uSe=s(Ub);Ppe=n(uSe,"STRONG",{});var F7t=s(Ppe);QVo=r(F7t,"fnet"),F7t.forEach(t),HVo=r(uSe," \u2014 "),aX=n(uSe,"A",{href:!0});var T7t=s(aX);UVo=r(T7t,"FNetForNextSentencePrediction"),T7t.forEach(t),JVo=r(uSe," (FNet model)"),uSe.forEach(t),YVo=i(tl),Jb=n(tl,"LI",{});var _Se=s(Jb);Bpe=n(_Se,"STRONG",{});var M7t=s(Bpe);KVo=r(M7t,"megatron-bert"),M7t.forEach(t),ZVo=r(_Se," \u2014 "),nX=n(_Se,"A",{href:!0});var E7t=s(nX);eXo=r(E7t,"MegatronBertForNextSentencePrediction"),E7t.forEach(t),oXo=r(_Se," (Megatron-BERT model)"),_Se.forEach(t),rXo=i(tl),Yb=n(tl,"LI",{});var bSe=s(Yb);Ipe=n(bSe,"STRONG",{});var C7t=s(Ipe);tXo=r(C7t,"mobilebert"),C7t.forEach(t),aXo=r(bSe," \u2014 "),sX=n(bSe,"A",{href:!0});var w7t=s(sX);nXo=r(w7t,"MobileBertForNextSentencePrediction"),w7t.forEach(t),sXo=r(bSe," (MobileBERT model)"),bSe.forEach(t),lXo=i(tl),Kb=n(tl,"LI",{});var vSe=s(Kb);Npe=n(vSe,"STRONG",{});var A7t=s(Npe);iXo=r(A7t,"qdqbert"),A7t.forEach(t),dXo=r(vSe," \u2014 "),lX=n(vSe,"A",{href:!0});var L7t=s(lX);cXo=r(L7t,"QDQBertForNextSentencePrediction"),L7t.forEach(t),fXo=r(vSe," (QDQBert model)"),vSe.forEach(t),tl.forEach(t),mXo=i(ma),Zb=n(ma,"P",{});var FSe=s(Zb);gXo=r(FSe,"The model is set in evaluation mode by default using "),qpe=n(FSe,"CODE",{});var y7t=s(qpe);hXo=r(y7t,"model.eval()"),y7t.forEach(t),pXo=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jpe=n(FSe,"CODE",{});var x7t=s(jpe);uXo=r(x7t,"model.train()"),x7t.forEach(t),FSe.forEach(t),_Xo=i(ma),T(e4.$$.fragment,ma),ma.forEach(t),rl.forEach(t),LGe=i(f),nd=n(f,"H2",{class:!0});var RVe=s(nd);o4=n(RVe,"A",{id:!0,class:!0,href:!0});var $7t=s(o4);Dpe=n($7t,"SPAN",{});var k7t=s(Dpe);T(ky.$$.fragment,k7t),k7t.forEach(t),$7t.forEach(t),bXo=i(RVe),Gpe=n(RVe,"SPAN",{});var S7t=s(Gpe);vXo=r(S7t,"AutoModelForTokenClassification"),S7t.forEach(t),RVe.forEach(t),yGe=i(f),No=n(f,"DIV",{class:!0});var al=s(No);T(Sy.$$.fragment,al),FXo=i(al),sd=n(al,"P",{});var goe=s(sd);TXo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iX=n(goe,"A",{href:!0});var R7t=s(iX);MXo=r(R7t,"from_pretrained()"),R7t.forEach(t),EXo=r(goe," class method or the "),dX=n(goe,"A",{href:!0});var P7t=s(dX);CXo=r(P7t,"from_config()"),P7t.forEach(t),wXo=r(goe,` class
method.`),goe.forEach(t),AXo=i(al),Ry=n(al,"P",{});var PVe=s(Ry);LXo=r(PVe,"This class cannot be instantiated directly using "),Ope=n(PVe,"CODE",{});var B7t=s(Ope);yXo=r(B7t,"__init__()"),B7t.forEach(t),xXo=r(PVe," (throws an error)."),PVe.forEach(t),$Xo=i(al),ht=n(al,"DIV",{class:!0});var qA=s(ht);T(Py.$$.fragment,qA),kXo=i(qA),Vpe=n(qA,"P",{});var I7t=s(Vpe);SXo=r(I7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),I7t.forEach(t),RXo=i(qA),ld=n(qA,"P",{});var hoe=s(ld);PXo=r(hoe,`Note:
Loading a model from its configuration file does `),Xpe=n(hoe,"STRONG",{});var N7t=s(Xpe);BXo=r(N7t,"not"),N7t.forEach(t),IXo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(hoe,"A",{href:!0});var q7t=s(cX);NXo=r(q7t,"from_pretrained()"),q7t.forEach(t),qXo=r(hoe," to load the model weights."),hoe.forEach(t),jXo=i(qA),T(r4.$$.fragment,qA),qA.forEach(t),DXo=i(al),ao=n(al,"DIV",{class:!0});var ga=s(ao);T(By.$$.fragment,ga),GXo=i(ga),zpe=n(ga,"P",{});var j7t=s(zpe);OXo=r(j7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),j7t.forEach(t),VXo=i(ga),Ga=n(ga,"P",{});var jA=s(Ga);XXo=r(jA,"The model class to instantiate is selected based on the "),Wpe=n(jA,"CODE",{});var D7t=s(Wpe);zXo=r(D7t,"model_type"),D7t.forEach(t),WXo=r(jA,` property of the config object (either
passed as an argument or loaded from `),Qpe=n(jA,"CODE",{});var G7t=s(Qpe);QXo=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),HXo=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hpe=n(jA,"CODE",{});var O7t=s(Hpe);UXo=r(O7t,"pretrained_model_name_or_path"),O7t.forEach(t),JXo=r(jA,":"),jA.forEach(t),YXo=i(ga),U=n(ga,"UL",{});var J=s(U);t4=n(J,"LI",{});var TSe=s(t4);Upe=n(TSe,"STRONG",{});var V7t=s(Upe);KXo=r(V7t,"albert"),V7t.forEach(t),ZXo=r(TSe," \u2014 "),fX=n(TSe,"A",{href:!0});var X7t=s(fX);ezo=r(X7t,"AlbertForTokenClassification"),X7t.forEach(t),ozo=r(TSe," (ALBERT model)"),TSe.forEach(t),rzo=i(J),a4=n(J,"LI",{});var MSe=s(a4);Jpe=n(MSe,"STRONG",{});var z7t=s(Jpe);tzo=r(z7t,"bert"),z7t.forEach(t),azo=r(MSe," \u2014 "),mX=n(MSe,"A",{href:!0});var W7t=s(mX);nzo=r(W7t,"BertForTokenClassification"),W7t.forEach(t),szo=r(MSe," (BERT model)"),MSe.forEach(t),lzo=i(J),n4=n(J,"LI",{});var ESe=s(n4);Ype=n(ESe,"STRONG",{});var Q7t=s(Ype);izo=r(Q7t,"big_bird"),Q7t.forEach(t),dzo=r(ESe," \u2014 "),gX=n(ESe,"A",{href:!0});var H7t=s(gX);czo=r(H7t,"BigBirdForTokenClassification"),H7t.forEach(t),fzo=r(ESe," (BigBird model)"),ESe.forEach(t),mzo=i(J),s4=n(J,"LI",{});var CSe=s(s4);Kpe=n(CSe,"STRONG",{});var U7t=s(Kpe);gzo=r(U7t,"camembert"),U7t.forEach(t),hzo=r(CSe," \u2014 "),hX=n(CSe,"A",{href:!0});var J7t=s(hX);pzo=r(J7t,"CamembertForTokenClassification"),J7t.forEach(t),uzo=r(CSe," (CamemBERT model)"),CSe.forEach(t),_zo=i(J),l4=n(J,"LI",{});var wSe=s(l4);Zpe=n(wSe,"STRONG",{});var Y7t=s(Zpe);bzo=r(Y7t,"canine"),Y7t.forEach(t),vzo=r(wSe," \u2014 "),pX=n(wSe,"A",{href:!0});var K7t=s(pX);Fzo=r(K7t,"CanineForTokenClassification"),K7t.forEach(t),Tzo=r(wSe," (CANINE model)"),wSe.forEach(t),Mzo=i(J),i4=n(J,"LI",{});var ASe=s(i4);eue=n(ASe,"STRONG",{});var Z7t=s(eue);Ezo=r(Z7t,"convbert"),Z7t.forEach(t),Czo=r(ASe," \u2014 "),uX=n(ASe,"A",{href:!0});var ebt=s(uX);wzo=r(ebt,"ConvBertForTokenClassification"),ebt.forEach(t),Azo=r(ASe," (ConvBERT model)"),ASe.forEach(t),Lzo=i(J),d4=n(J,"LI",{});var LSe=s(d4);oue=n(LSe,"STRONG",{});var obt=s(oue);yzo=r(obt,"data2vec-text"),obt.forEach(t),xzo=r(LSe," \u2014 "),_X=n(LSe,"A",{href:!0});var rbt=s(_X);$zo=r(rbt,"Data2VecTextForTokenClassification"),rbt.forEach(t),kzo=r(LSe," (Data2VecText model)"),LSe.forEach(t),Szo=i(J),c4=n(J,"LI",{});var ySe=s(c4);rue=n(ySe,"STRONG",{});var tbt=s(rue);Rzo=r(tbt,"deberta"),tbt.forEach(t),Pzo=r(ySe," \u2014 "),bX=n(ySe,"A",{href:!0});var abt=s(bX);Bzo=r(abt,"DebertaForTokenClassification"),abt.forEach(t),Izo=r(ySe," (DeBERTa model)"),ySe.forEach(t),Nzo=i(J),f4=n(J,"LI",{});var xSe=s(f4);tue=n(xSe,"STRONG",{});var nbt=s(tue);qzo=r(nbt,"deberta-v2"),nbt.forEach(t),jzo=r(xSe," \u2014 "),vX=n(xSe,"A",{href:!0});var sbt=s(vX);Dzo=r(sbt,"DebertaV2ForTokenClassification"),sbt.forEach(t),Gzo=r(xSe," (DeBERTa-v2 model)"),xSe.forEach(t),Ozo=i(J),m4=n(J,"LI",{});var $Se=s(m4);aue=n($Se,"STRONG",{});var lbt=s(aue);Vzo=r(lbt,"distilbert"),lbt.forEach(t),Xzo=r($Se," \u2014 "),FX=n($Se,"A",{href:!0});var ibt=s(FX);zzo=r(ibt,"DistilBertForTokenClassification"),ibt.forEach(t),Wzo=r($Se," (DistilBERT model)"),$Se.forEach(t),Qzo=i(J),g4=n(J,"LI",{});var kSe=s(g4);nue=n(kSe,"STRONG",{});var dbt=s(nue);Hzo=r(dbt,"electra"),dbt.forEach(t),Uzo=r(kSe," \u2014 "),TX=n(kSe,"A",{href:!0});var cbt=s(TX);Jzo=r(cbt,"ElectraForTokenClassification"),cbt.forEach(t),Yzo=r(kSe," (ELECTRA model)"),kSe.forEach(t),Kzo=i(J),h4=n(J,"LI",{});var SSe=s(h4);sue=n(SSe,"STRONG",{});var fbt=s(sue);Zzo=r(fbt,"flaubert"),fbt.forEach(t),eWo=r(SSe," \u2014 "),MX=n(SSe,"A",{href:!0});var mbt=s(MX);oWo=r(mbt,"FlaubertForTokenClassification"),mbt.forEach(t),rWo=r(SSe," (FlauBERT model)"),SSe.forEach(t),tWo=i(J),p4=n(J,"LI",{});var RSe=s(p4);lue=n(RSe,"STRONG",{});var gbt=s(lue);aWo=r(gbt,"fnet"),gbt.forEach(t),nWo=r(RSe," \u2014 "),EX=n(RSe,"A",{href:!0});var hbt=s(EX);sWo=r(hbt,"FNetForTokenClassification"),hbt.forEach(t),lWo=r(RSe," (FNet model)"),RSe.forEach(t),iWo=i(J),u4=n(J,"LI",{});var PSe=s(u4);iue=n(PSe,"STRONG",{});var pbt=s(iue);dWo=r(pbt,"funnel"),pbt.forEach(t),cWo=r(PSe," \u2014 "),CX=n(PSe,"A",{href:!0});var ubt=s(CX);fWo=r(ubt,"FunnelForTokenClassification"),ubt.forEach(t),mWo=r(PSe," (Funnel Transformer model)"),PSe.forEach(t),gWo=i(J),_4=n(J,"LI",{});var BSe=s(_4);due=n(BSe,"STRONG",{});var _bt=s(due);hWo=r(_bt,"gpt2"),_bt.forEach(t),pWo=r(BSe," \u2014 "),wX=n(BSe,"A",{href:!0});var bbt=s(wX);uWo=r(bbt,"GPT2ForTokenClassification"),bbt.forEach(t),_Wo=r(BSe," (OpenAI GPT-2 model)"),BSe.forEach(t),bWo=i(J),b4=n(J,"LI",{});var ISe=s(b4);cue=n(ISe,"STRONG",{});var vbt=s(cue);vWo=r(vbt,"ibert"),vbt.forEach(t),FWo=r(ISe," \u2014 "),AX=n(ISe,"A",{href:!0});var Fbt=s(AX);TWo=r(Fbt,"IBertForTokenClassification"),Fbt.forEach(t),MWo=r(ISe," (I-BERT model)"),ISe.forEach(t),EWo=i(J),v4=n(J,"LI",{});var NSe=s(v4);fue=n(NSe,"STRONG",{});var Tbt=s(fue);CWo=r(Tbt,"layoutlm"),Tbt.forEach(t),wWo=r(NSe," \u2014 "),LX=n(NSe,"A",{href:!0});var Mbt=s(LX);AWo=r(Mbt,"LayoutLMForTokenClassification"),Mbt.forEach(t),LWo=r(NSe," (LayoutLM model)"),NSe.forEach(t),yWo=i(J),F4=n(J,"LI",{});var qSe=s(F4);mue=n(qSe,"STRONG",{});var Ebt=s(mue);xWo=r(Ebt,"layoutlmv2"),Ebt.forEach(t),$Wo=r(qSe," \u2014 "),yX=n(qSe,"A",{href:!0});var Cbt=s(yX);kWo=r(Cbt,"LayoutLMv2ForTokenClassification"),Cbt.forEach(t),SWo=r(qSe," (LayoutLMv2 model)"),qSe.forEach(t),RWo=i(J),T4=n(J,"LI",{});var jSe=s(T4);gue=n(jSe,"STRONG",{});var wbt=s(gue);PWo=r(wbt,"layoutlmv3"),wbt.forEach(t),BWo=r(jSe," \u2014 "),xX=n(jSe,"A",{href:!0});var Abt=s(xX);IWo=r(Abt,"LayoutLMv3ForTokenClassification"),Abt.forEach(t),NWo=r(jSe," (LayoutLMv3 model)"),jSe.forEach(t),qWo=i(J),M4=n(J,"LI",{});var DSe=s(M4);hue=n(DSe,"STRONG",{});var Lbt=s(hue);jWo=r(Lbt,"longformer"),Lbt.forEach(t),DWo=r(DSe," \u2014 "),$X=n(DSe,"A",{href:!0});var ybt=s($X);GWo=r(ybt,"LongformerForTokenClassification"),ybt.forEach(t),OWo=r(DSe," (Longformer model)"),DSe.forEach(t),VWo=i(J),E4=n(J,"LI",{});var GSe=s(E4);pue=n(GSe,"STRONG",{});var xbt=s(pue);XWo=r(xbt,"megatron-bert"),xbt.forEach(t),zWo=r(GSe," \u2014 "),kX=n(GSe,"A",{href:!0});var $bt=s(kX);WWo=r($bt,"MegatronBertForTokenClassification"),$bt.forEach(t),QWo=r(GSe," (Megatron-BERT model)"),GSe.forEach(t),HWo=i(J),C4=n(J,"LI",{});var OSe=s(C4);uue=n(OSe,"STRONG",{});var kbt=s(uue);UWo=r(kbt,"mobilebert"),kbt.forEach(t),JWo=r(OSe," \u2014 "),SX=n(OSe,"A",{href:!0});var Sbt=s(SX);YWo=r(Sbt,"MobileBertForTokenClassification"),Sbt.forEach(t),KWo=r(OSe," (MobileBERT model)"),OSe.forEach(t),ZWo=i(J),w4=n(J,"LI",{});var VSe=s(w4);_ue=n(VSe,"STRONG",{});var Rbt=s(_ue);eQo=r(Rbt,"mpnet"),Rbt.forEach(t),oQo=r(VSe," \u2014 "),RX=n(VSe,"A",{href:!0});var Pbt=s(RX);rQo=r(Pbt,"MPNetForTokenClassification"),Pbt.forEach(t),tQo=r(VSe," (MPNet model)"),VSe.forEach(t),aQo=i(J),A4=n(J,"LI",{});var XSe=s(A4);bue=n(XSe,"STRONG",{});var Bbt=s(bue);nQo=r(Bbt,"nystromformer"),Bbt.forEach(t),sQo=r(XSe," \u2014 "),PX=n(XSe,"A",{href:!0});var Ibt=s(PX);lQo=r(Ibt,"NystromformerForTokenClassification"),Ibt.forEach(t),iQo=r(XSe," (Nystr\xF6mformer model)"),XSe.forEach(t),dQo=i(J),L4=n(J,"LI",{});var zSe=s(L4);vue=n(zSe,"STRONG",{});var Nbt=s(vue);cQo=r(Nbt,"qdqbert"),Nbt.forEach(t),fQo=r(zSe," \u2014 "),BX=n(zSe,"A",{href:!0});var qbt=s(BX);mQo=r(qbt,"QDQBertForTokenClassification"),qbt.forEach(t),gQo=r(zSe," (QDQBert model)"),zSe.forEach(t),hQo=i(J),y4=n(J,"LI",{});var WSe=s(y4);Fue=n(WSe,"STRONG",{});var jbt=s(Fue);pQo=r(jbt,"rembert"),jbt.forEach(t),uQo=r(WSe," \u2014 "),IX=n(WSe,"A",{href:!0});var Dbt=s(IX);_Qo=r(Dbt,"RemBertForTokenClassification"),Dbt.forEach(t),bQo=r(WSe," (RemBERT model)"),WSe.forEach(t),vQo=i(J),x4=n(J,"LI",{});var QSe=s(x4);Tue=n(QSe,"STRONG",{});var Gbt=s(Tue);FQo=r(Gbt,"roberta"),Gbt.forEach(t),TQo=r(QSe," \u2014 "),NX=n(QSe,"A",{href:!0});var Obt=s(NX);MQo=r(Obt,"RobertaForTokenClassification"),Obt.forEach(t),EQo=r(QSe," (RoBERTa model)"),QSe.forEach(t),CQo=i(J),$4=n(J,"LI",{});var HSe=s($4);Mue=n(HSe,"STRONG",{});var Vbt=s(Mue);wQo=r(Vbt,"roformer"),Vbt.forEach(t),AQo=r(HSe," \u2014 "),qX=n(HSe,"A",{href:!0});var Xbt=s(qX);LQo=r(Xbt,"RoFormerForTokenClassification"),Xbt.forEach(t),yQo=r(HSe," (RoFormer model)"),HSe.forEach(t),xQo=i(J),k4=n(J,"LI",{});var USe=s(k4);Eue=n(USe,"STRONG",{});var zbt=s(Eue);$Qo=r(zbt,"squeezebert"),zbt.forEach(t),kQo=r(USe," \u2014 "),jX=n(USe,"A",{href:!0});var Wbt=s(jX);SQo=r(Wbt,"SqueezeBertForTokenClassification"),Wbt.forEach(t),RQo=r(USe," (SqueezeBERT model)"),USe.forEach(t),PQo=i(J),S4=n(J,"LI",{});var JSe=s(S4);Cue=n(JSe,"STRONG",{});var Qbt=s(Cue);BQo=r(Qbt,"xlm"),Qbt.forEach(t),IQo=r(JSe," \u2014 "),DX=n(JSe,"A",{href:!0});var Hbt=s(DX);NQo=r(Hbt,"XLMForTokenClassification"),Hbt.forEach(t),qQo=r(JSe," (XLM model)"),JSe.forEach(t),jQo=i(J),R4=n(J,"LI",{});var YSe=s(R4);wue=n(YSe,"STRONG",{});var Ubt=s(wue);DQo=r(Ubt,"xlm-roberta"),Ubt.forEach(t),GQo=r(YSe," \u2014 "),GX=n(YSe,"A",{href:!0});var Jbt=s(GX);OQo=r(Jbt,"XLMRobertaForTokenClassification"),Jbt.forEach(t),VQo=r(YSe," (XLM-RoBERTa model)"),YSe.forEach(t),XQo=i(J),P4=n(J,"LI",{});var KSe=s(P4);Aue=n(KSe,"STRONG",{});var Ybt=s(Aue);zQo=r(Ybt,"xlm-roberta-xl"),Ybt.forEach(t),WQo=r(KSe," \u2014 "),OX=n(KSe,"A",{href:!0});var Kbt=s(OX);QQo=r(Kbt,"XLMRobertaXLForTokenClassification"),Kbt.forEach(t),HQo=r(KSe," (XLM-RoBERTa-XL model)"),KSe.forEach(t),UQo=i(J),B4=n(J,"LI",{});var ZSe=s(B4);Lue=n(ZSe,"STRONG",{});var Zbt=s(Lue);JQo=r(Zbt,"xlnet"),Zbt.forEach(t),YQo=r(ZSe," \u2014 "),VX=n(ZSe,"A",{href:!0});var e4t=s(VX);KQo=r(e4t,"XLNetForTokenClassification"),e4t.forEach(t),ZQo=r(ZSe," (XLNet model)"),ZSe.forEach(t),eHo=i(J),I4=n(J,"LI",{});var eRe=s(I4);yue=n(eRe,"STRONG",{});var o4t=s(yue);oHo=r(o4t,"yoso"),o4t.forEach(t),rHo=r(eRe," \u2014 "),XX=n(eRe,"A",{href:!0});var r4t=s(XX);tHo=r(r4t,"YosoForTokenClassification"),r4t.forEach(t),aHo=r(eRe," (YOSO model)"),eRe.forEach(t),J.forEach(t),nHo=i(ga),N4=n(ga,"P",{});var oRe=s(N4);sHo=r(oRe,"The model is set in evaluation mode by default using "),xue=n(oRe,"CODE",{});var t4t=s(xue);lHo=r(t4t,"model.eval()"),t4t.forEach(t),iHo=r(oRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ue=n(oRe,"CODE",{});var a4t=s($ue);dHo=r(a4t,"model.train()"),a4t.forEach(t),oRe.forEach(t),cHo=i(ga),T(q4.$$.fragment,ga),ga.forEach(t),al.forEach(t),xGe=i(f),id=n(f,"H2",{class:!0});var BVe=s(id);j4=n(BVe,"A",{id:!0,class:!0,href:!0});var n4t=s(j4);kue=n(n4t,"SPAN",{});var s4t=s(kue);T(Iy.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),fHo=i(BVe),Sue=n(BVe,"SPAN",{});var l4t=s(Sue);mHo=r(l4t,"AutoModelForQuestionAnswering"),l4t.forEach(t),BVe.forEach(t),$Ge=i(f),qo=n(f,"DIV",{class:!0});var nl=s(qo);T(Ny.$$.fragment,nl),gHo=i(nl),dd=n(nl,"P",{});var poe=s(dd);hHo=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),zX=n(poe,"A",{href:!0});var i4t=s(zX);pHo=r(i4t,"from_pretrained()"),i4t.forEach(t),uHo=r(poe," class method or the "),WX=n(poe,"A",{href:!0});var d4t=s(WX);_Ho=r(d4t,"from_config()"),d4t.forEach(t),bHo=r(poe,` class
method.`),poe.forEach(t),vHo=i(nl),qy=n(nl,"P",{});var IVe=s(qy);FHo=r(IVe,"This class cannot be instantiated directly using "),Rue=n(IVe,"CODE",{});var c4t=s(Rue);THo=r(c4t,"__init__()"),c4t.forEach(t),MHo=r(IVe," (throws an error)."),IVe.forEach(t),EHo=i(nl),pt=n(nl,"DIV",{class:!0});var DA=s(pt);T(jy.$$.fragment,DA),CHo=i(DA),Pue=n(DA,"P",{});var f4t=s(Pue);wHo=r(f4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),f4t.forEach(t),AHo=i(DA),cd=n(DA,"P",{});var uoe=s(cd);LHo=r(uoe,`Note:
Loading a model from its configuration file does `),Bue=n(uoe,"STRONG",{});var m4t=s(Bue);yHo=r(m4t,"not"),m4t.forEach(t),xHo=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(uoe,"A",{href:!0});var g4t=s(QX);$Ho=r(g4t,"from_pretrained()"),g4t.forEach(t),kHo=r(uoe," to load the model weights."),uoe.forEach(t),SHo=i(DA),T(D4.$$.fragment,DA),DA.forEach(t),RHo=i(nl),no=n(nl,"DIV",{class:!0});var ha=s(no);T(Dy.$$.fragment,ha),PHo=i(ha),Iue=n(ha,"P",{});var h4t=s(Iue);BHo=r(h4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),h4t.forEach(t),IHo=i(ha),Oa=n(ha,"P",{});var GA=s(Oa);NHo=r(GA,"The model class to instantiate is selected based on the "),Nue=n(GA,"CODE",{});var p4t=s(Nue);qHo=r(p4t,"model_type"),p4t.forEach(t),jHo=r(GA,` property of the config object (either
passed as an argument or loaded from `),que=n(GA,"CODE",{});var u4t=s(que);DHo=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),GHo=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jue=n(GA,"CODE",{});var _4t=s(jue);OHo=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),VHo=r(GA,":"),GA.forEach(t),XHo=i(ha),V=n(ha,"UL",{});var X=s(V);G4=n(X,"LI",{});var rRe=s(G4);Due=n(rRe,"STRONG",{});var b4t=s(Due);zHo=r(b4t,"albert"),b4t.forEach(t),WHo=r(rRe," \u2014 "),HX=n(rRe,"A",{href:!0});var v4t=s(HX);QHo=r(v4t,"AlbertForQuestionAnswering"),v4t.forEach(t),HHo=r(rRe," (ALBERT model)"),rRe.forEach(t),UHo=i(X),O4=n(X,"LI",{});var tRe=s(O4);Gue=n(tRe,"STRONG",{});var F4t=s(Gue);JHo=r(F4t,"bart"),F4t.forEach(t),YHo=r(tRe," \u2014 "),UX=n(tRe,"A",{href:!0});var T4t=s(UX);KHo=r(T4t,"BartForQuestionAnswering"),T4t.forEach(t),ZHo=r(tRe," (BART model)"),tRe.forEach(t),eUo=i(X),V4=n(X,"LI",{});var aRe=s(V4);Oue=n(aRe,"STRONG",{});var M4t=s(Oue);oUo=r(M4t,"bert"),M4t.forEach(t),rUo=r(aRe," \u2014 "),JX=n(aRe,"A",{href:!0});var E4t=s(JX);tUo=r(E4t,"BertForQuestionAnswering"),E4t.forEach(t),aUo=r(aRe," (BERT model)"),aRe.forEach(t),nUo=i(X),X4=n(X,"LI",{});var nRe=s(X4);Vue=n(nRe,"STRONG",{});var C4t=s(Vue);sUo=r(C4t,"big_bird"),C4t.forEach(t),lUo=r(nRe," \u2014 "),YX=n(nRe,"A",{href:!0});var w4t=s(YX);iUo=r(w4t,"BigBirdForQuestionAnswering"),w4t.forEach(t),dUo=r(nRe," (BigBird model)"),nRe.forEach(t),cUo=i(X),z4=n(X,"LI",{});var sRe=s(z4);Xue=n(sRe,"STRONG",{});var A4t=s(Xue);fUo=r(A4t,"bigbird_pegasus"),A4t.forEach(t),mUo=r(sRe," \u2014 "),KX=n(sRe,"A",{href:!0});var L4t=s(KX);gUo=r(L4t,"BigBirdPegasusForQuestionAnswering"),L4t.forEach(t),hUo=r(sRe," (BigBird-Pegasus model)"),sRe.forEach(t),pUo=i(X),W4=n(X,"LI",{});var lRe=s(W4);zue=n(lRe,"STRONG",{});var y4t=s(zue);uUo=r(y4t,"camembert"),y4t.forEach(t),_Uo=r(lRe," \u2014 "),ZX=n(lRe,"A",{href:!0});var x4t=s(ZX);bUo=r(x4t,"CamembertForQuestionAnswering"),x4t.forEach(t),vUo=r(lRe," (CamemBERT model)"),lRe.forEach(t),FUo=i(X),Q4=n(X,"LI",{});var iRe=s(Q4);Wue=n(iRe,"STRONG",{});var $4t=s(Wue);TUo=r($4t,"canine"),$4t.forEach(t),MUo=r(iRe," \u2014 "),ez=n(iRe,"A",{href:!0});var k4t=s(ez);EUo=r(k4t,"CanineForQuestionAnswering"),k4t.forEach(t),CUo=r(iRe," (CANINE model)"),iRe.forEach(t),wUo=i(X),H4=n(X,"LI",{});var dRe=s(H4);Que=n(dRe,"STRONG",{});var S4t=s(Que);AUo=r(S4t,"convbert"),S4t.forEach(t),LUo=r(dRe," \u2014 "),oz=n(dRe,"A",{href:!0});var R4t=s(oz);yUo=r(R4t,"ConvBertForQuestionAnswering"),R4t.forEach(t),xUo=r(dRe," (ConvBERT model)"),dRe.forEach(t),$Uo=i(X),U4=n(X,"LI",{});var cRe=s(U4);Hue=n(cRe,"STRONG",{});var P4t=s(Hue);kUo=r(P4t,"data2vec-text"),P4t.forEach(t),SUo=r(cRe," \u2014 "),rz=n(cRe,"A",{href:!0});var B4t=s(rz);RUo=r(B4t,"Data2VecTextForQuestionAnswering"),B4t.forEach(t),PUo=r(cRe," (Data2VecText model)"),cRe.forEach(t),BUo=i(X),J4=n(X,"LI",{});var fRe=s(J4);Uue=n(fRe,"STRONG",{});var I4t=s(Uue);IUo=r(I4t,"deberta"),I4t.forEach(t),NUo=r(fRe," \u2014 "),tz=n(fRe,"A",{href:!0});var N4t=s(tz);qUo=r(N4t,"DebertaForQuestionAnswering"),N4t.forEach(t),jUo=r(fRe," (DeBERTa model)"),fRe.forEach(t),DUo=i(X),Y4=n(X,"LI",{});var mRe=s(Y4);Jue=n(mRe,"STRONG",{});var q4t=s(Jue);GUo=r(q4t,"deberta-v2"),q4t.forEach(t),OUo=r(mRe," \u2014 "),az=n(mRe,"A",{href:!0});var j4t=s(az);VUo=r(j4t,"DebertaV2ForQuestionAnswering"),j4t.forEach(t),XUo=r(mRe," (DeBERTa-v2 model)"),mRe.forEach(t),zUo=i(X),K4=n(X,"LI",{});var gRe=s(K4);Yue=n(gRe,"STRONG",{});var D4t=s(Yue);WUo=r(D4t,"distilbert"),D4t.forEach(t),QUo=r(gRe," \u2014 "),nz=n(gRe,"A",{href:!0});var G4t=s(nz);HUo=r(G4t,"DistilBertForQuestionAnswering"),G4t.forEach(t),UUo=r(gRe," (DistilBERT model)"),gRe.forEach(t),JUo=i(X),Z4=n(X,"LI",{});var hRe=s(Z4);Kue=n(hRe,"STRONG",{});var O4t=s(Kue);YUo=r(O4t,"electra"),O4t.forEach(t),KUo=r(hRe," \u2014 "),sz=n(hRe,"A",{href:!0});var V4t=s(sz);ZUo=r(V4t,"ElectraForQuestionAnswering"),V4t.forEach(t),eJo=r(hRe," (ELECTRA model)"),hRe.forEach(t),oJo=i(X),ev=n(X,"LI",{});var pRe=s(ev);Zue=n(pRe,"STRONG",{});var X4t=s(Zue);rJo=r(X4t,"flaubert"),X4t.forEach(t),tJo=r(pRe," \u2014 "),lz=n(pRe,"A",{href:!0});var z4t=s(lz);aJo=r(z4t,"FlaubertForQuestionAnsweringSimple"),z4t.forEach(t),nJo=r(pRe," (FlauBERT model)"),pRe.forEach(t),sJo=i(X),ov=n(X,"LI",{});var uRe=s(ov);e_e=n(uRe,"STRONG",{});var W4t=s(e_e);lJo=r(W4t,"fnet"),W4t.forEach(t),iJo=r(uRe," \u2014 "),iz=n(uRe,"A",{href:!0});var Q4t=s(iz);dJo=r(Q4t,"FNetForQuestionAnswering"),Q4t.forEach(t),cJo=r(uRe," (FNet model)"),uRe.forEach(t),fJo=i(X),rv=n(X,"LI",{});var _Re=s(rv);o_e=n(_Re,"STRONG",{});var H4t=s(o_e);mJo=r(H4t,"funnel"),H4t.forEach(t),gJo=r(_Re," \u2014 "),dz=n(_Re,"A",{href:!0});var U4t=s(dz);hJo=r(U4t,"FunnelForQuestionAnswering"),U4t.forEach(t),pJo=r(_Re," (Funnel Transformer model)"),_Re.forEach(t),uJo=i(X),tv=n(X,"LI",{});var bRe=s(tv);r_e=n(bRe,"STRONG",{});var J4t=s(r_e);_Jo=r(J4t,"gptj"),J4t.forEach(t),bJo=r(bRe," \u2014 "),cz=n(bRe,"A",{href:!0});var Y4t=s(cz);vJo=r(Y4t,"GPTJForQuestionAnswering"),Y4t.forEach(t),FJo=r(bRe," (GPT-J model)"),bRe.forEach(t),TJo=i(X),av=n(X,"LI",{});var vRe=s(av);t_e=n(vRe,"STRONG",{});var K4t=s(t_e);MJo=r(K4t,"ibert"),K4t.forEach(t),EJo=r(vRe," \u2014 "),fz=n(vRe,"A",{href:!0});var Z4t=s(fz);CJo=r(Z4t,"IBertForQuestionAnswering"),Z4t.forEach(t),wJo=r(vRe," (I-BERT model)"),vRe.forEach(t),AJo=i(X),nv=n(X,"LI",{});var FRe=s(nv);a_e=n(FRe,"STRONG",{});var evt=s(a_e);LJo=r(evt,"layoutlmv2"),evt.forEach(t),yJo=r(FRe," \u2014 "),mz=n(FRe,"A",{href:!0});var ovt=s(mz);xJo=r(ovt,"LayoutLMv2ForQuestionAnswering"),ovt.forEach(t),$Jo=r(FRe," (LayoutLMv2 model)"),FRe.forEach(t),kJo=i(X),sv=n(X,"LI",{});var TRe=s(sv);n_e=n(TRe,"STRONG",{});var rvt=s(n_e);SJo=r(rvt,"layoutlmv3"),rvt.forEach(t),RJo=r(TRe," \u2014 "),gz=n(TRe,"A",{href:!0});var tvt=s(gz);PJo=r(tvt,"LayoutLMv3ForQuestionAnswering"),tvt.forEach(t),BJo=r(TRe," (LayoutLMv3 model)"),TRe.forEach(t),IJo=i(X),lv=n(X,"LI",{});var MRe=s(lv);s_e=n(MRe,"STRONG",{});var avt=s(s_e);NJo=r(avt,"led"),avt.forEach(t),qJo=r(MRe," \u2014 "),hz=n(MRe,"A",{href:!0});var nvt=s(hz);jJo=r(nvt,"LEDForQuestionAnswering"),nvt.forEach(t),DJo=r(MRe," (LED model)"),MRe.forEach(t),GJo=i(X),iv=n(X,"LI",{});var ERe=s(iv);l_e=n(ERe,"STRONG",{});var svt=s(l_e);OJo=r(svt,"longformer"),svt.forEach(t),VJo=r(ERe," \u2014 "),pz=n(ERe,"A",{href:!0});var lvt=s(pz);XJo=r(lvt,"LongformerForQuestionAnswering"),lvt.forEach(t),zJo=r(ERe," (Longformer model)"),ERe.forEach(t),WJo=i(X),dv=n(X,"LI",{});var CRe=s(dv);i_e=n(CRe,"STRONG",{});var ivt=s(i_e);QJo=r(ivt,"lxmert"),ivt.forEach(t),HJo=r(CRe," \u2014 "),uz=n(CRe,"A",{href:!0});var dvt=s(uz);UJo=r(dvt,"LxmertForQuestionAnswering"),dvt.forEach(t),JJo=r(CRe," (LXMERT model)"),CRe.forEach(t),YJo=i(X),cv=n(X,"LI",{});var wRe=s(cv);d_e=n(wRe,"STRONG",{});var cvt=s(d_e);KJo=r(cvt,"mbart"),cvt.forEach(t),ZJo=r(wRe," \u2014 "),_z=n(wRe,"A",{href:!0});var fvt=s(_z);eYo=r(fvt,"MBartForQuestionAnswering"),fvt.forEach(t),oYo=r(wRe," (mBART model)"),wRe.forEach(t),rYo=i(X),fv=n(X,"LI",{});var ARe=s(fv);c_e=n(ARe,"STRONG",{});var mvt=s(c_e);tYo=r(mvt,"megatron-bert"),mvt.forEach(t),aYo=r(ARe," \u2014 "),bz=n(ARe,"A",{href:!0});var gvt=s(bz);nYo=r(gvt,"MegatronBertForQuestionAnswering"),gvt.forEach(t),sYo=r(ARe," (Megatron-BERT model)"),ARe.forEach(t),lYo=i(X),mv=n(X,"LI",{});var LRe=s(mv);f_e=n(LRe,"STRONG",{});var hvt=s(f_e);iYo=r(hvt,"mobilebert"),hvt.forEach(t),dYo=r(LRe," \u2014 "),vz=n(LRe,"A",{href:!0});var pvt=s(vz);cYo=r(pvt,"MobileBertForQuestionAnswering"),pvt.forEach(t),fYo=r(LRe," (MobileBERT model)"),LRe.forEach(t),mYo=i(X),gv=n(X,"LI",{});var yRe=s(gv);m_e=n(yRe,"STRONG",{});var uvt=s(m_e);gYo=r(uvt,"mpnet"),uvt.forEach(t),hYo=r(yRe," \u2014 "),Fz=n(yRe,"A",{href:!0});var _vt=s(Fz);pYo=r(_vt,"MPNetForQuestionAnswering"),_vt.forEach(t),uYo=r(yRe," (MPNet model)"),yRe.forEach(t),_Yo=i(X),hv=n(X,"LI",{});var xRe=s(hv);g_e=n(xRe,"STRONG",{});var bvt=s(g_e);bYo=r(bvt,"nystromformer"),bvt.forEach(t),vYo=r(xRe," \u2014 "),Tz=n(xRe,"A",{href:!0});var vvt=s(Tz);FYo=r(vvt,"NystromformerForQuestionAnswering"),vvt.forEach(t),TYo=r(xRe," (Nystr\xF6mformer model)"),xRe.forEach(t),MYo=i(X),pv=n(X,"LI",{});var $Re=s(pv);h_e=n($Re,"STRONG",{});var Fvt=s(h_e);EYo=r(Fvt,"qdqbert"),Fvt.forEach(t),CYo=r($Re," \u2014 "),Mz=n($Re,"A",{href:!0});var Tvt=s(Mz);wYo=r(Tvt,"QDQBertForQuestionAnswering"),Tvt.forEach(t),AYo=r($Re," (QDQBert model)"),$Re.forEach(t),LYo=i(X),uv=n(X,"LI",{});var kRe=s(uv);p_e=n(kRe,"STRONG",{});var Mvt=s(p_e);yYo=r(Mvt,"reformer"),Mvt.forEach(t),xYo=r(kRe," \u2014 "),Ez=n(kRe,"A",{href:!0});var Evt=s(Ez);$Yo=r(Evt,"ReformerForQuestionAnswering"),Evt.forEach(t),kYo=r(kRe," (Reformer model)"),kRe.forEach(t),SYo=i(X),_v=n(X,"LI",{});var SRe=s(_v);u_e=n(SRe,"STRONG",{});var Cvt=s(u_e);RYo=r(Cvt,"rembert"),Cvt.forEach(t),PYo=r(SRe," \u2014 "),Cz=n(SRe,"A",{href:!0});var wvt=s(Cz);BYo=r(wvt,"RemBertForQuestionAnswering"),wvt.forEach(t),IYo=r(SRe," (RemBERT model)"),SRe.forEach(t),NYo=i(X),bv=n(X,"LI",{});var RRe=s(bv);__e=n(RRe,"STRONG",{});var Avt=s(__e);qYo=r(Avt,"roberta"),Avt.forEach(t),jYo=r(RRe," \u2014 "),wz=n(RRe,"A",{href:!0});var Lvt=s(wz);DYo=r(Lvt,"RobertaForQuestionAnswering"),Lvt.forEach(t),GYo=r(RRe," (RoBERTa model)"),RRe.forEach(t),OYo=i(X),vv=n(X,"LI",{});var PRe=s(vv);b_e=n(PRe,"STRONG",{});var yvt=s(b_e);VYo=r(yvt,"roformer"),yvt.forEach(t),XYo=r(PRe," \u2014 "),Az=n(PRe,"A",{href:!0});var xvt=s(Az);zYo=r(xvt,"RoFormerForQuestionAnswering"),xvt.forEach(t),WYo=r(PRe," (RoFormer model)"),PRe.forEach(t),QYo=i(X),Fv=n(X,"LI",{});var BRe=s(Fv);v_e=n(BRe,"STRONG",{});var $vt=s(v_e);HYo=r($vt,"splinter"),$vt.forEach(t),UYo=r(BRe," \u2014 "),Lz=n(BRe,"A",{href:!0});var kvt=s(Lz);JYo=r(kvt,"SplinterForQuestionAnswering"),kvt.forEach(t),YYo=r(BRe," (Splinter model)"),BRe.forEach(t),KYo=i(X),Tv=n(X,"LI",{});var IRe=s(Tv);F_e=n(IRe,"STRONG",{});var Svt=s(F_e);ZYo=r(Svt,"squeezebert"),Svt.forEach(t),eKo=r(IRe," \u2014 "),yz=n(IRe,"A",{href:!0});var Rvt=s(yz);oKo=r(Rvt,"SqueezeBertForQuestionAnswering"),Rvt.forEach(t),rKo=r(IRe," (SqueezeBERT model)"),IRe.forEach(t),tKo=i(X),Mv=n(X,"LI",{});var NRe=s(Mv);T_e=n(NRe,"STRONG",{});var Pvt=s(T_e);aKo=r(Pvt,"xlm"),Pvt.forEach(t),nKo=r(NRe," \u2014 "),xz=n(NRe,"A",{href:!0});var Bvt=s(xz);sKo=r(Bvt,"XLMForQuestionAnsweringSimple"),Bvt.forEach(t),lKo=r(NRe," (XLM model)"),NRe.forEach(t),iKo=i(X),Ev=n(X,"LI",{});var qRe=s(Ev);M_e=n(qRe,"STRONG",{});var Ivt=s(M_e);dKo=r(Ivt,"xlm-roberta"),Ivt.forEach(t),cKo=r(qRe," \u2014 "),$z=n(qRe,"A",{href:!0});var Nvt=s($z);fKo=r(Nvt,"XLMRobertaForQuestionAnswering"),Nvt.forEach(t),mKo=r(qRe," (XLM-RoBERTa model)"),qRe.forEach(t),gKo=i(X),Cv=n(X,"LI",{});var jRe=s(Cv);E_e=n(jRe,"STRONG",{});var qvt=s(E_e);hKo=r(qvt,"xlm-roberta-xl"),qvt.forEach(t),pKo=r(jRe," \u2014 "),kz=n(jRe,"A",{href:!0});var jvt=s(kz);uKo=r(jvt,"XLMRobertaXLForQuestionAnswering"),jvt.forEach(t),_Ko=r(jRe," (XLM-RoBERTa-XL model)"),jRe.forEach(t),bKo=i(X),wv=n(X,"LI",{});var DRe=s(wv);C_e=n(DRe,"STRONG",{});var Dvt=s(C_e);vKo=r(Dvt,"xlnet"),Dvt.forEach(t),FKo=r(DRe," \u2014 "),Sz=n(DRe,"A",{href:!0});var Gvt=s(Sz);TKo=r(Gvt,"XLNetForQuestionAnsweringSimple"),Gvt.forEach(t),MKo=r(DRe," (XLNet model)"),DRe.forEach(t),EKo=i(X),Av=n(X,"LI",{});var GRe=s(Av);w_e=n(GRe,"STRONG",{});var Ovt=s(w_e);CKo=r(Ovt,"yoso"),Ovt.forEach(t),wKo=r(GRe," \u2014 "),Rz=n(GRe,"A",{href:!0});var Vvt=s(Rz);AKo=r(Vvt,"YosoForQuestionAnswering"),Vvt.forEach(t),LKo=r(GRe," (YOSO model)"),GRe.forEach(t),X.forEach(t),yKo=i(ha),Lv=n(ha,"P",{});var ORe=s(Lv);xKo=r(ORe,"The model is set in evaluation mode by default using "),A_e=n(ORe,"CODE",{});var Xvt=s(A_e);$Ko=r(Xvt,"model.eval()"),Xvt.forEach(t),kKo=r(ORe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L_e=n(ORe,"CODE",{});var zvt=s(L_e);SKo=r(zvt,"model.train()"),zvt.forEach(t),ORe.forEach(t),RKo=i(ha),T(yv.$$.fragment,ha),ha.forEach(t),nl.forEach(t),kGe=i(f),fd=n(f,"H2",{class:!0});var NVe=s(fd);xv=n(NVe,"A",{id:!0,class:!0,href:!0});var Wvt=s(xv);y_e=n(Wvt,"SPAN",{});var Qvt=s(y_e);T(Gy.$$.fragment,Qvt),Qvt.forEach(t),Wvt.forEach(t),PKo=i(NVe),x_e=n(NVe,"SPAN",{});var Hvt=s(x_e);BKo=r(Hvt,"AutoModelForTableQuestionAnswering"),Hvt.forEach(t),NVe.forEach(t),SGe=i(f),jo=n(f,"DIV",{class:!0});var sl=s(jo);T(Oy.$$.fragment,sl),IKo=i(sl),md=n(sl,"P",{});var _oe=s(md);NKo=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Pz=n(_oe,"A",{href:!0});var Uvt=s(Pz);qKo=r(Uvt,"from_pretrained()"),Uvt.forEach(t),jKo=r(_oe," class method or the "),Bz=n(_oe,"A",{href:!0});var Jvt=s(Bz);DKo=r(Jvt,"from_config()"),Jvt.forEach(t),GKo=r(_oe,` class
method.`),_oe.forEach(t),OKo=i(sl),Vy=n(sl,"P",{});var qVe=s(Vy);VKo=r(qVe,"This class cannot be instantiated directly using "),$_e=n(qVe,"CODE",{});var Yvt=s($_e);XKo=r(Yvt,"__init__()"),Yvt.forEach(t),zKo=r(qVe," (throws an error)."),qVe.forEach(t),WKo=i(sl),ut=n(sl,"DIV",{class:!0});var OA=s(ut);T(Xy.$$.fragment,OA),QKo=i(OA),k_e=n(OA,"P",{});var Kvt=s(k_e);HKo=r(Kvt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kvt.forEach(t),UKo=i(OA),gd=n(OA,"P",{});var boe=s(gd);JKo=r(boe,`Note:
Loading a model from its configuration file does `),S_e=n(boe,"STRONG",{});var Zvt=s(S_e);YKo=r(Zvt,"not"),Zvt.forEach(t),KKo=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Iz=n(boe,"A",{href:!0});var eFt=s(Iz);ZKo=r(eFt,"from_pretrained()"),eFt.forEach(t),eZo=r(boe," to load the model weights."),boe.forEach(t),oZo=i(OA),T($v.$$.fragment,OA),OA.forEach(t),rZo=i(sl),so=n(sl,"DIV",{class:!0});var pa=s(so);T(zy.$$.fragment,pa),tZo=i(pa),R_e=n(pa,"P",{});var oFt=s(R_e);aZo=r(oFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),oFt.forEach(t),nZo=i(pa),Va=n(pa,"P",{});var VA=s(Va);sZo=r(VA,"The model class to instantiate is selected based on the "),P_e=n(VA,"CODE",{});var rFt=s(P_e);lZo=r(rFt,"model_type"),rFt.forEach(t),iZo=r(VA,` property of the config object (either
passed as an argument or loaded from `),B_e=n(VA,"CODE",{});var tFt=s(B_e);dZo=r(tFt,"pretrained_model_name_or_path"),tFt.forEach(t),cZo=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(VA,"CODE",{});var aFt=s(I_e);fZo=r(aFt,"pretrained_model_name_or_path"),aFt.forEach(t),mZo=r(VA,":"),VA.forEach(t),gZo=i(pa),N_e=n(pa,"UL",{});var nFt=s(N_e);kv=n(nFt,"LI",{});var VRe=s(kv);q_e=n(VRe,"STRONG",{});var sFt=s(q_e);hZo=r(sFt,"tapas"),sFt.forEach(t),pZo=r(VRe," \u2014 "),Nz=n(VRe,"A",{href:!0});var lFt=s(Nz);uZo=r(lFt,"TapasForQuestionAnswering"),lFt.forEach(t),_Zo=r(VRe," (TAPAS model)"),VRe.forEach(t),nFt.forEach(t),bZo=i(pa),Sv=n(pa,"P",{});var XRe=s(Sv);vZo=r(XRe,"The model is set in evaluation mode by default using "),j_e=n(XRe,"CODE",{});var iFt=s(j_e);FZo=r(iFt,"model.eval()"),iFt.forEach(t),TZo=r(XRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(XRe,"CODE",{});var dFt=s(D_e);MZo=r(dFt,"model.train()"),dFt.forEach(t),XRe.forEach(t),EZo=i(pa),T(Rv.$$.fragment,pa),pa.forEach(t),sl.forEach(t),RGe=i(f),hd=n(f,"H2",{class:!0});var jVe=s(hd);Pv=n(jVe,"A",{id:!0,class:!0,href:!0});var cFt=s(Pv);G_e=n(cFt,"SPAN",{});var fFt=s(G_e);T(Wy.$$.fragment,fFt),fFt.forEach(t),cFt.forEach(t),CZo=i(jVe),O_e=n(jVe,"SPAN",{});var mFt=s(O_e);wZo=r(mFt,"AutoModelForImageClassification"),mFt.forEach(t),jVe.forEach(t),PGe=i(f),Do=n(f,"DIV",{class:!0});var ll=s(Do);T(Qy.$$.fragment,ll),AZo=i(ll),pd=n(ll,"P",{});var voe=s(pd);LZo=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qz=n(voe,"A",{href:!0});var gFt=s(qz);yZo=r(gFt,"from_pretrained()"),gFt.forEach(t),xZo=r(voe," class method or the "),jz=n(voe,"A",{href:!0});var hFt=s(jz);$Zo=r(hFt,"from_config()"),hFt.forEach(t),kZo=r(voe,` class
method.`),voe.forEach(t),SZo=i(ll),Hy=n(ll,"P",{});var DVe=s(Hy);RZo=r(DVe,"This class cannot be instantiated directly using "),V_e=n(DVe,"CODE",{});var pFt=s(V_e);PZo=r(pFt,"__init__()"),pFt.forEach(t),BZo=r(DVe," (throws an error)."),DVe.forEach(t),IZo=i(ll),_t=n(ll,"DIV",{class:!0});var XA=s(_t);T(Uy.$$.fragment,XA),NZo=i(XA),X_e=n(XA,"P",{});var uFt=s(X_e);qZo=r(uFt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),uFt.forEach(t),jZo=i(XA),ud=n(XA,"P",{});var Foe=s(ud);DZo=r(Foe,`Note:
Loading a model from its configuration file does `),z_e=n(Foe,"STRONG",{});var _Ft=s(z_e);GZo=r(_Ft,"not"),_Ft.forEach(t),OZo=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(Foe,"A",{href:!0});var bFt=s(Dz);VZo=r(bFt,"from_pretrained()"),bFt.forEach(t),XZo=r(Foe," to load the model weights."),Foe.forEach(t),zZo=i(XA),T(Bv.$$.fragment,XA),XA.forEach(t),WZo=i(ll),lo=n(ll,"DIV",{class:!0});var ua=s(lo);T(Jy.$$.fragment,ua),QZo=i(ua),W_e=n(ua,"P",{});var vFt=s(W_e);HZo=r(vFt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vFt.forEach(t),UZo=i(ua),Xa=n(ua,"P",{});var zA=s(Xa);JZo=r(zA,"The model class to instantiate is selected based on the "),Q_e=n(zA,"CODE",{});var FFt=s(Q_e);YZo=r(FFt,"model_type"),FFt.forEach(t),KZo=r(zA,` property of the config object (either
passed as an argument or loaded from `),H_e=n(zA,"CODE",{});var TFt=s(H_e);ZZo=r(TFt,"pretrained_model_name_or_path"),TFt.forEach(t),eer=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(zA,"CODE",{});var MFt=s(U_e);oer=r(MFt,"pretrained_model_name_or_path"),MFt.forEach(t),rer=r(zA,":"),zA.forEach(t),ter=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);Iv=n(Te,"LI",{});var zRe=s(Iv);J_e=n(zRe,"STRONG",{});var EFt=s(J_e);aer=r(EFt,"beit"),EFt.forEach(t),ner=r(zRe," \u2014 "),Gz=n(zRe,"A",{href:!0});var CFt=s(Gz);ser=r(CFt,"BeitForImageClassification"),CFt.forEach(t),ler=r(zRe," (BEiT model)"),zRe.forEach(t),ier=i(Te),Nv=n(Te,"LI",{});var WRe=s(Nv);Y_e=n(WRe,"STRONG",{});var wFt=s(Y_e);der=r(wFt,"convnext"),wFt.forEach(t),cer=r(WRe," \u2014 "),Oz=n(WRe,"A",{href:!0});var AFt=s(Oz);fer=r(AFt,"ConvNextForImageClassification"),AFt.forEach(t),mer=r(WRe," (ConvNeXT model)"),WRe.forEach(t),ger=i(Te),qv=n(Te,"LI",{});var QRe=s(qv);K_e=n(QRe,"STRONG",{});var LFt=s(K_e);her=r(LFt,"cvt"),LFt.forEach(t),per=r(QRe," \u2014 "),Vz=n(QRe,"A",{href:!0});var yFt=s(Vz);uer=r(yFt,"CvtForImageClassification"),yFt.forEach(t),_er=r(QRe," (CvT model)"),QRe.forEach(t),ber=i(Te),jv=n(Te,"LI",{});var HRe=s(jv);Z_e=n(HRe,"STRONG",{});var xFt=s(Z_e);ver=r(xFt,"data2vec-vision"),xFt.forEach(t),Fer=r(HRe," \u2014 "),Xz=n(HRe,"A",{href:!0});var $Ft=s(Xz);Ter=r($Ft,"Data2VecVisionForImageClassification"),$Ft.forEach(t),Mer=r(HRe," (Data2VecVision model)"),HRe.forEach(t),Eer=i(Te),Os=n(Te,"LI",{});var Ok=s(Os);e2e=n(Ok,"STRONG",{});var kFt=s(e2e);Cer=r(kFt,"deit"),kFt.forEach(t),wer=r(Ok," \u2014 "),zz=n(Ok,"A",{href:!0});var SFt=s(zz);Aer=r(SFt,"DeiTForImageClassification"),SFt.forEach(t),Ler=r(Ok," or "),Wz=n(Ok,"A",{href:!0});var RFt=s(Wz);yer=r(RFt,"DeiTForImageClassificationWithTeacher"),RFt.forEach(t),xer=r(Ok," (DeiT model)"),Ok.forEach(t),$er=i(Te),Dv=n(Te,"LI",{});var URe=s(Dv);o2e=n(URe,"STRONG",{});var PFt=s(o2e);ker=r(PFt,"imagegpt"),PFt.forEach(t),Ser=r(URe," \u2014 "),Qz=n(URe,"A",{href:!0});var BFt=s(Qz);Rer=r(BFt,"ImageGPTForImageClassification"),BFt.forEach(t),Per=r(URe," (ImageGPT model)"),URe.forEach(t),Ber=i(Te),Vs=n(Te,"LI",{});var Vk=s(Vs);r2e=n(Vk,"STRONG",{});var IFt=s(r2e);Ier=r(IFt,"levit"),IFt.forEach(t),Ner=r(Vk," \u2014 "),Hz=n(Vk,"A",{href:!0});var NFt=s(Hz);qer=r(NFt,"LevitForImageClassification"),NFt.forEach(t),jer=r(Vk," or "),Uz=n(Vk,"A",{href:!0});var qFt=s(Uz);Der=r(qFt,"LevitForImageClassificationWithTeacher"),qFt.forEach(t),Ger=r(Vk," (LeViT model)"),Vk.forEach(t),Oer=i(Te),bt=n(Te,"LI",{});var Lf=s(bt);t2e=n(Lf,"STRONG",{});var jFt=s(t2e);Ver=r(jFt,"perceiver"),jFt.forEach(t),Xer=r(Lf," \u2014 "),Jz=n(Lf,"A",{href:!0});var DFt=s(Jz);zer=r(DFt,"PerceiverForImageClassificationLearned"),DFt.forEach(t),Wer=r(Lf," or "),Yz=n(Lf,"A",{href:!0});var GFt=s(Yz);Qer=r(GFt,"PerceiverForImageClassificationFourier"),GFt.forEach(t),Her=r(Lf," or "),Kz=n(Lf,"A",{href:!0});var OFt=s(Kz);Uer=r(OFt,"PerceiverForImageClassificationConvProcessing"),OFt.forEach(t),Jer=r(Lf," (Perceiver model)"),Lf.forEach(t),Yer=i(Te),Gv=n(Te,"LI",{});var JRe=s(Gv);a2e=n(JRe,"STRONG",{});var VFt=s(a2e);Ker=r(VFt,"poolformer"),VFt.forEach(t),Zer=r(JRe," \u2014 "),Zz=n(JRe,"A",{href:!0});var XFt=s(Zz);eor=r(XFt,"PoolFormerForImageClassification"),XFt.forEach(t),oor=r(JRe," (PoolFormer model)"),JRe.forEach(t),ror=i(Te),Ov=n(Te,"LI",{});var YRe=s(Ov);n2e=n(YRe,"STRONG",{});var zFt=s(n2e);tor=r(zFt,"regnet"),zFt.forEach(t),aor=r(YRe," \u2014 "),eW=n(YRe,"A",{href:!0});var WFt=s(eW);nor=r(WFt,"RegNetForImageClassification"),WFt.forEach(t),sor=r(YRe," (RegNet model)"),YRe.forEach(t),lor=i(Te),Vv=n(Te,"LI",{});var KRe=s(Vv);s2e=n(KRe,"STRONG",{});var QFt=s(s2e);ior=r(QFt,"resnet"),QFt.forEach(t),dor=r(KRe," \u2014 "),oW=n(KRe,"A",{href:!0});var HFt=s(oW);cor=r(HFt,"ResNetForImageClassification"),HFt.forEach(t),mor=r(KRe," (ResNet model)"),KRe.forEach(t),gor=i(Te),Xv=n(Te,"LI",{});var ZRe=s(Xv);l2e=n(ZRe,"STRONG",{});var UFt=s(l2e);hor=r(UFt,"segformer"),UFt.forEach(t),por=r(ZRe," \u2014 "),rW=n(ZRe,"A",{href:!0});var JFt=s(rW);uor=r(JFt,"SegformerForImageClassification"),JFt.forEach(t),_or=r(ZRe," (SegFormer model)"),ZRe.forEach(t),bor=i(Te),zv=n(Te,"LI",{});var ePe=s(zv);i2e=n(ePe,"STRONG",{});var YFt=s(i2e);vor=r(YFt,"swin"),YFt.forEach(t),For=r(ePe," \u2014 "),tW=n(ePe,"A",{href:!0});var KFt=s(tW);Tor=r(KFt,"SwinForImageClassification"),KFt.forEach(t),Mor=r(ePe," (Swin Transformer model)"),ePe.forEach(t),Eor=i(Te),Wv=n(Te,"LI",{});var oPe=s(Wv);d2e=n(oPe,"STRONG",{});var ZFt=s(d2e);Cor=r(ZFt,"van"),ZFt.forEach(t),wor=r(oPe," \u2014 "),aW=n(oPe,"A",{href:!0});var eTt=s(aW);Aor=r(eTt,"VanForImageClassification"),eTt.forEach(t),Lor=r(oPe," (VAN model)"),oPe.forEach(t),yor=i(Te),Qv=n(Te,"LI",{});var rPe=s(Qv);c2e=n(rPe,"STRONG",{});var oTt=s(c2e);xor=r(oTt,"vit"),oTt.forEach(t),$or=r(rPe," \u2014 "),nW=n(rPe,"A",{href:!0});var rTt=s(nW);kor=r(rTt,"ViTForImageClassification"),rTt.forEach(t),Sor=r(rPe," (ViT model)"),rPe.forEach(t),Te.forEach(t),Ror=i(ua),Hv=n(ua,"P",{});var tPe=s(Hv);Por=r(tPe,"The model is set in evaluation mode by default using "),f2e=n(tPe,"CODE",{});var tTt=s(f2e);Bor=r(tTt,"model.eval()"),tTt.forEach(t),Ior=r(tPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m2e=n(tPe,"CODE",{});var aTt=s(m2e);Nor=r(aTt,"model.train()"),aTt.forEach(t),tPe.forEach(t),qor=i(ua),T(Uv.$$.fragment,ua),ua.forEach(t),ll.forEach(t),BGe=i(f),_d=n(f,"H2",{class:!0});var GVe=s(_d);Jv=n(GVe,"A",{id:!0,class:!0,href:!0});var nTt=s(Jv);g2e=n(nTt,"SPAN",{});var sTt=s(g2e);T(Yy.$$.fragment,sTt),sTt.forEach(t),nTt.forEach(t),jor=i(GVe),h2e=n(GVe,"SPAN",{});var lTt=s(h2e);Dor=r(lTt,"AutoModelForVision2Seq"),lTt.forEach(t),GVe.forEach(t),IGe=i(f),Go=n(f,"DIV",{class:!0});var il=s(Go);T(Ky.$$.fragment,il),Gor=i(il),bd=n(il,"P",{});var Toe=s(bd);Oor=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),sW=n(Toe,"A",{href:!0});var iTt=s(sW);Vor=r(iTt,"from_pretrained()"),iTt.forEach(t),Xor=r(Toe," class method or the "),lW=n(Toe,"A",{href:!0});var dTt=s(lW);zor=r(dTt,"from_config()"),dTt.forEach(t),Wor=r(Toe,` class
method.`),Toe.forEach(t),Qor=i(il),Zy=n(il,"P",{});var OVe=s(Zy);Hor=r(OVe,"This class cannot be instantiated directly using "),p2e=n(OVe,"CODE",{});var cTt=s(p2e);Uor=r(cTt,"__init__()"),cTt.forEach(t),Jor=r(OVe," (throws an error)."),OVe.forEach(t),Yor=i(il),vt=n(il,"DIV",{class:!0});var WA=s(vt);T(e8.$$.fragment,WA),Kor=i(WA),u2e=n(WA,"P",{});var fTt=s(u2e);Zor=r(fTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fTt.forEach(t),err=i(WA),vd=n(WA,"P",{});var Moe=s(vd);orr=r(Moe,`Note:
Loading a model from its configuration file does `),_2e=n(Moe,"STRONG",{});var mTt=s(_2e);rrr=r(mTt,"not"),mTt.forEach(t),trr=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(Moe,"A",{href:!0});var gTt=s(iW);arr=r(gTt,"from_pretrained()"),gTt.forEach(t),nrr=r(Moe," to load the model weights."),Moe.forEach(t),srr=i(WA),T(Yv.$$.fragment,WA),WA.forEach(t),lrr=i(il),io=n(il,"DIV",{class:!0});var _a=s(io);T(o8.$$.fragment,_a),irr=i(_a),b2e=n(_a,"P",{});var hTt=s(b2e);drr=r(hTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hTt.forEach(t),crr=i(_a),za=n(_a,"P",{});var QA=s(za);frr=r(QA,"The model class to instantiate is selected based on the "),v2e=n(QA,"CODE",{});var pTt=s(v2e);mrr=r(pTt,"model_type"),pTt.forEach(t),grr=r(QA,` property of the config object (either
passed as an argument or loaded from `),F2e=n(QA,"CODE",{});var uTt=s(F2e);hrr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),prr=r(QA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(QA,"CODE",{});var _Tt=s(T2e);urr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),_rr=r(QA,":"),QA.forEach(t),brr=i(_a),M2e=n(_a,"UL",{});var bTt=s(M2e);Kv=n(bTt,"LI",{});var aPe=s(Kv);E2e=n(aPe,"STRONG",{});var vTt=s(E2e);vrr=r(vTt,"vision-encoder-decoder"),vTt.forEach(t),Frr=r(aPe," \u2014 "),dW=n(aPe,"A",{href:!0});var FTt=s(dW);Trr=r(FTt,"VisionEncoderDecoderModel"),FTt.forEach(t),Mrr=r(aPe," (Vision Encoder decoder model)"),aPe.forEach(t),bTt.forEach(t),Err=i(_a),Zv=n(_a,"P",{});var nPe=s(Zv);Crr=r(nPe,"The model is set in evaluation mode by default using "),C2e=n(nPe,"CODE",{});var TTt=s(C2e);wrr=r(TTt,"model.eval()"),TTt.forEach(t),Arr=r(nPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w2e=n(nPe,"CODE",{});var MTt=s(w2e);Lrr=r(MTt,"model.train()"),MTt.forEach(t),nPe.forEach(t),yrr=i(_a),T(eF.$$.fragment,_a),_a.forEach(t),il.forEach(t),NGe=i(f),Fd=n(f,"H2",{class:!0});var VVe=s(Fd);oF=n(VVe,"A",{id:!0,class:!0,href:!0});var ETt=s(oF);A2e=n(ETt,"SPAN",{});var CTt=s(A2e);T(r8.$$.fragment,CTt),CTt.forEach(t),ETt.forEach(t),xrr=i(VVe),L2e=n(VVe,"SPAN",{});var wTt=s(L2e);$rr=r(wTt,"AutoModelForVisualQuestionAnswering"),wTt.forEach(t),VVe.forEach(t),qGe=i(f),Oo=n(f,"DIV",{class:!0});var dl=s(Oo);T(t8.$$.fragment,dl),krr=i(dl),Td=n(dl,"P",{});var Eoe=s(Td);Srr=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),cW=n(Eoe,"A",{href:!0});var ATt=s(cW);Rrr=r(ATt,"from_pretrained()"),ATt.forEach(t),Prr=r(Eoe," class method or the "),fW=n(Eoe,"A",{href:!0});var LTt=s(fW);Brr=r(LTt,"from_config()"),LTt.forEach(t),Irr=r(Eoe,` class
method.`),Eoe.forEach(t),Nrr=i(dl),a8=n(dl,"P",{});var XVe=s(a8);qrr=r(XVe,"This class cannot be instantiated directly using "),y2e=n(XVe,"CODE",{});var yTt=s(y2e);jrr=r(yTt,"__init__()"),yTt.forEach(t),Drr=r(XVe," (throws an error)."),XVe.forEach(t),Grr=i(dl),Ft=n(dl,"DIV",{class:!0});var HA=s(Ft);T(n8.$$.fragment,HA),Orr=i(HA),x2e=n(HA,"P",{});var xTt=s(x2e);Vrr=r(xTt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),xTt.forEach(t),Xrr=i(HA),Md=n(HA,"P",{});var Coe=s(Md);zrr=r(Coe,`Note:
Loading a model from its configuration file does `),$2e=n(Coe,"STRONG",{});var $Tt=s($2e);Wrr=r($Tt,"not"),$Tt.forEach(t),Qrr=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),mW=n(Coe,"A",{href:!0});var kTt=s(mW);Hrr=r(kTt,"from_pretrained()"),kTt.forEach(t),Urr=r(Coe," to load the model weights."),Coe.forEach(t),Jrr=i(HA),T(rF.$$.fragment,HA),HA.forEach(t),Yrr=i(dl),co=n(dl,"DIV",{class:!0});var ba=s(co);T(s8.$$.fragment,ba),Krr=i(ba),k2e=n(ba,"P",{});var STt=s(k2e);Zrr=r(STt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),STt.forEach(t),etr=i(ba),Wa=n(ba,"P",{});var UA=s(Wa);otr=r(UA,"The model class to instantiate is selected based on the "),S2e=n(UA,"CODE",{});var RTt=s(S2e);rtr=r(RTt,"model_type"),RTt.forEach(t),ttr=r(UA,` property of the config object (either
passed as an argument or loaded from `),R2e=n(UA,"CODE",{});var PTt=s(R2e);atr=r(PTt,"pretrained_model_name_or_path"),PTt.forEach(t),ntr=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(UA,"CODE",{});var BTt=s(P2e);str=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),ltr=r(UA,":"),UA.forEach(t),itr=i(ba),B2e=n(ba,"UL",{});var ITt=s(B2e);tF=n(ITt,"LI",{});var sPe=s(tF);I2e=n(sPe,"STRONG",{});var NTt=s(I2e);dtr=r(NTt,"vilt"),NTt.forEach(t),ctr=r(sPe," \u2014 "),gW=n(sPe,"A",{href:!0});var qTt=s(gW);ftr=r(qTt,"ViltForQuestionAnswering"),qTt.forEach(t),mtr=r(sPe," (ViLT model)"),sPe.forEach(t),ITt.forEach(t),gtr=i(ba),aF=n(ba,"P",{});var lPe=s(aF);htr=r(lPe,"The model is set in evaluation mode by default using "),N2e=n(lPe,"CODE",{});var jTt=s(N2e);ptr=r(jTt,"model.eval()"),jTt.forEach(t),utr=r(lPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(lPe,"CODE",{});var DTt=s(q2e);_tr=r(DTt,"model.train()"),DTt.forEach(t),lPe.forEach(t),btr=i(ba),T(nF.$$.fragment,ba),ba.forEach(t),dl.forEach(t),jGe=i(f),Ed=n(f,"H2",{class:!0});var zVe=s(Ed);sF=n(zVe,"A",{id:!0,class:!0,href:!0});var GTt=s(sF);j2e=n(GTt,"SPAN",{});var OTt=s(j2e);T(l8.$$.fragment,OTt),OTt.forEach(t),GTt.forEach(t),vtr=i(zVe),D2e=n(zVe,"SPAN",{});var VTt=s(D2e);Ftr=r(VTt,"AutoModelForAudioClassification"),VTt.forEach(t),zVe.forEach(t),DGe=i(f),Vo=n(f,"DIV",{class:!0});var cl=s(Vo);T(i8.$$.fragment,cl),Ttr=i(cl),Cd=n(cl,"P",{});var woe=s(Cd);Mtr=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),hW=n(woe,"A",{href:!0});var XTt=s(hW);Etr=r(XTt,"from_pretrained()"),XTt.forEach(t),Ctr=r(woe," class method or the "),pW=n(woe,"A",{href:!0});var zTt=s(pW);wtr=r(zTt,"from_config()"),zTt.forEach(t),Atr=r(woe,` class
method.`),woe.forEach(t),Ltr=i(cl),d8=n(cl,"P",{});var WVe=s(d8);ytr=r(WVe,"This class cannot be instantiated directly using "),G2e=n(WVe,"CODE",{});var WTt=s(G2e);xtr=r(WTt,"__init__()"),WTt.forEach(t),$tr=r(WVe," (throws an error)."),WVe.forEach(t),ktr=i(cl),Tt=n(cl,"DIV",{class:!0});var JA=s(Tt);T(c8.$$.fragment,JA),Str=i(JA),O2e=n(JA,"P",{});var QTt=s(O2e);Rtr=r(QTt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),QTt.forEach(t),Ptr=i(JA),wd=n(JA,"P",{});var Aoe=s(wd);Btr=r(Aoe,`Note:
Loading a model from its configuration file does `),V2e=n(Aoe,"STRONG",{});var HTt=s(V2e);Itr=r(HTt,"not"),HTt.forEach(t),Ntr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),uW=n(Aoe,"A",{href:!0});var UTt=s(uW);qtr=r(UTt,"from_pretrained()"),UTt.forEach(t),jtr=r(Aoe," to load the model weights."),Aoe.forEach(t),Dtr=i(JA),T(lF.$$.fragment,JA),JA.forEach(t),Gtr=i(cl),fo=n(cl,"DIV",{class:!0});var va=s(fo);T(f8.$$.fragment,va),Otr=i(va),X2e=n(va,"P",{});var JTt=s(X2e);Vtr=r(JTt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),JTt.forEach(t),Xtr=i(va),Qa=n(va,"P",{});var YA=s(Qa);ztr=r(YA,"The model class to instantiate is selected based on the "),z2e=n(YA,"CODE",{});var YTt=s(z2e);Wtr=r(YTt,"model_type"),YTt.forEach(t),Qtr=r(YA,` property of the config object (either
passed as an argument or loaded from `),W2e=n(YA,"CODE",{});var KTt=s(W2e);Htr=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),Utr=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(YA,"CODE",{});var ZTt=s(Q2e);Jtr=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),Ytr=r(YA,":"),YA.forEach(t),Ktr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);iF=n(ze,"LI",{});var iPe=s(iF);H2e=n(iPe,"STRONG",{});var eMt=s(H2e);Ztr=r(eMt,"data2vec-audio"),eMt.forEach(t),ear=r(iPe," \u2014 "),_W=n(iPe,"A",{href:!0});var oMt=s(_W);oar=r(oMt,"Data2VecAudioForSequenceClassification"),oMt.forEach(t),rar=r(iPe," (Data2VecAudio model)"),iPe.forEach(t),tar=i(ze),dF=n(ze,"LI",{});var dPe=s(dF);U2e=n(dPe,"STRONG",{});var rMt=s(U2e);aar=r(rMt,"hubert"),rMt.forEach(t),nar=r(dPe," \u2014 "),bW=n(dPe,"A",{href:!0});var tMt=s(bW);sar=r(tMt,"HubertForSequenceClassification"),tMt.forEach(t),lar=r(dPe," (Hubert model)"),dPe.forEach(t),iar=i(ze),cF=n(ze,"LI",{});var cPe=s(cF);J2e=n(cPe,"STRONG",{});var aMt=s(J2e);dar=r(aMt,"sew"),aMt.forEach(t),car=r(cPe," \u2014 "),vW=n(cPe,"A",{href:!0});var nMt=s(vW);far=r(nMt,"SEWForSequenceClassification"),nMt.forEach(t),mar=r(cPe," (SEW model)"),cPe.forEach(t),gar=i(ze),fF=n(ze,"LI",{});var fPe=s(fF);Y2e=n(fPe,"STRONG",{});var sMt=s(Y2e);har=r(sMt,"sew-d"),sMt.forEach(t),par=r(fPe," \u2014 "),FW=n(fPe,"A",{href:!0});var lMt=s(FW);uar=r(lMt,"SEWDForSequenceClassification"),lMt.forEach(t),_ar=r(fPe," (SEW-D model)"),fPe.forEach(t),bar=i(ze),mF=n(ze,"LI",{});var mPe=s(mF);K2e=n(mPe,"STRONG",{});var iMt=s(K2e);Far=r(iMt,"unispeech"),iMt.forEach(t),Tar=r(mPe," \u2014 "),TW=n(mPe,"A",{href:!0});var dMt=s(TW);Mar=r(dMt,"UniSpeechForSequenceClassification"),dMt.forEach(t),Ear=r(mPe," (UniSpeech model)"),mPe.forEach(t),Car=i(ze),gF=n(ze,"LI",{});var gPe=s(gF);Z2e=n(gPe,"STRONG",{});var cMt=s(Z2e);war=r(cMt,"unispeech-sat"),cMt.forEach(t),Aar=r(gPe," \u2014 "),MW=n(gPe,"A",{href:!0});var fMt=s(MW);Lar=r(fMt,"UniSpeechSatForSequenceClassification"),fMt.forEach(t),yar=r(gPe," (UniSpeechSat model)"),gPe.forEach(t),xar=i(ze),hF=n(ze,"LI",{});var hPe=s(hF);e1e=n(hPe,"STRONG",{});var mMt=s(e1e);$ar=r(mMt,"wav2vec2"),mMt.forEach(t),kar=r(hPe," \u2014 "),EW=n(hPe,"A",{href:!0});var gMt=s(EW);Sar=r(gMt,"Wav2Vec2ForSequenceClassification"),gMt.forEach(t),Rar=r(hPe," (Wav2Vec2 model)"),hPe.forEach(t),Par=i(ze),pF=n(ze,"LI",{});var pPe=s(pF);o1e=n(pPe,"STRONG",{});var hMt=s(o1e);Bar=r(hMt,"wav2vec2-conformer"),hMt.forEach(t),Iar=r(pPe," \u2014 "),CW=n(pPe,"A",{href:!0});var pMt=s(CW);Nar=r(pMt,"Wav2Vec2ConformerForSequenceClassification"),pMt.forEach(t),qar=r(pPe," (Wav2Vec2-Conformer model)"),pPe.forEach(t),jar=i(ze),uF=n(ze,"LI",{});var uPe=s(uF);r1e=n(uPe,"STRONG",{});var uMt=s(r1e);Dar=r(uMt,"wavlm"),uMt.forEach(t),Gar=r(uPe," \u2014 "),wW=n(uPe,"A",{href:!0});var _Mt=s(wW);Oar=r(_Mt,"WavLMForSequenceClassification"),_Mt.forEach(t),Var=r(uPe," (WavLM model)"),uPe.forEach(t),ze.forEach(t),Xar=i(va),_F=n(va,"P",{});var _Pe=s(_F);zar=r(_Pe,"The model is set in evaluation mode by default using "),t1e=n(_Pe,"CODE",{});var bMt=s(t1e);War=r(bMt,"model.eval()"),bMt.forEach(t),Qar=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=n(_Pe,"CODE",{});var vMt=s(a1e);Har=r(vMt,"model.train()"),vMt.forEach(t),_Pe.forEach(t),Uar=i(va),T(bF.$$.fragment,va),va.forEach(t),cl.forEach(t),GGe=i(f),Ad=n(f,"H2",{class:!0});var QVe=s(Ad);vF=n(QVe,"A",{id:!0,class:!0,href:!0});var FMt=s(vF);n1e=n(FMt,"SPAN",{});var TMt=s(n1e);T(m8.$$.fragment,TMt),TMt.forEach(t),FMt.forEach(t),Jar=i(QVe),s1e=n(QVe,"SPAN",{});var MMt=s(s1e);Yar=r(MMt,"AutoModelForAudioFrameClassification"),MMt.forEach(t),QVe.forEach(t),OGe=i(f),Xo=n(f,"DIV",{class:!0});var fl=s(Xo);T(g8.$$.fragment,fl),Kar=i(fl),Ld=n(fl,"P",{});var Loe=s(Ld);Zar=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AW=n(Loe,"A",{href:!0});var EMt=s(AW);enr=r(EMt,"from_pretrained()"),EMt.forEach(t),onr=r(Loe," class method or the "),LW=n(Loe,"A",{href:!0});var CMt=s(LW);rnr=r(CMt,"from_config()"),CMt.forEach(t),tnr=r(Loe,` class
method.`),Loe.forEach(t),anr=i(fl),h8=n(fl,"P",{});var HVe=s(h8);nnr=r(HVe,"This class cannot be instantiated directly using "),l1e=n(HVe,"CODE",{});var wMt=s(l1e);snr=r(wMt,"__init__()"),wMt.forEach(t),lnr=r(HVe," (throws an error)."),HVe.forEach(t),inr=i(fl),Mt=n(fl,"DIV",{class:!0});var KA=s(Mt);T(p8.$$.fragment,KA),dnr=i(KA),i1e=n(KA,"P",{});var AMt=s(i1e);cnr=r(AMt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AMt.forEach(t),fnr=i(KA),yd=n(KA,"P",{});var yoe=s(yd);mnr=r(yoe,`Note:
Loading a model from its configuration file does `),d1e=n(yoe,"STRONG",{});var LMt=s(d1e);gnr=r(LMt,"not"),LMt.forEach(t),hnr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(yoe,"A",{href:!0});var yMt=s(yW);pnr=r(yMt,"from_pretrained()"),yMt.forEach(t),unr=r(yoe," to load the model weights."),yoe.forEach(t),_nr=i(KA),T(FF.$$.fragment,KA),KA.forEach(t),bnr=i(fl),mo=n(fl,"DIV",{class:!0});var Fa=s(mo);T(u8.$$.fragment,Fa),vnr=i(Fa),c1e=n(Fa,"P",{});var xMt=s(c1e);Fnr=r(xMt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xMt.forEach(t),Tnr=i(Fa),Ha=n(Fa,"P",{});var ZA=s(Ha);Mnr=r(ZA,"The model class to instantiate is selected based on the "),f1e=n(ZA,"CODE",{});var $Mt=s(f1e);Enr=r($Mt,"model_type"),$Mt.forEach(t),Cnr=r(ZA,` property of the config object (either
passed as an argument or loaded from `),m1e=n(ZA,"CODE",{});var kMt=s(m1e);wnr=r(kMt,"pretrained_model_name_or_path"),kMt.forEach(t),Anr=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(ZA,"CODE",{});var SMt=s(g1e);Lnr=r(SMt,"pretrained_model_name_or_path"),SMt.forEach(t),ynr=r(ZA,":"),ZA.forEach(t),xnr=i(Fa),et=n(Fa,"UL",{});var ml=s(et);TF=n(ml,"LI",{});var bPe=s(TF);h1e=n(bPe,"STRONG",{});var RMt=s(h1e);$nr=r(RMt,"data2vec-audio"),RMt.forEach(t),knr=r(bPe," \u2014 "),xW=n(bPe,"A",{href:!0});var PMt=s(xW);Snr=r(PMt,"Data2VecAudioForAudioFrameClassification"),PMt.forEach(t),Rnr=r(bPe," (Data2VecAudio model)"),bPe.forEach(t),Pnr=i(ml),MF=n(ml,"LI",{});var vPe=s(MF);p1e=n(vPe,"STRONG",{});var BMt=s(p1e);Bnr=r(BMt,"unispeech-sat"),BMt.forEach(t),Inr=r(vPe," \u2014 "),$W=n(vPe,"A",{href:!0});var IMt=s($W);Nnr=r(IMt,"UniSpeechSatForAudioFrameClassification"),IMt.forEach(t),qnr=r(vPe," (UniSpeechSat model)"),vPe.forEach(t),jnr=i(ml),EF=n(ml,"LI",{});var FPe=s(EF);u1e=n(FPe,"STRONG",{});var NMt=s(u1e);Dnr=r(NMt,"wav2vec2"),NMt.forEach(t),Gnr=r(FPe," \u2014 "),kW=n(FPe,"A",{href:!0});var qMt=s(kW);Onr=r(qMt,"Wav2Vec2ForAudioFrameClassification"),qMt.forEach(t),Vnr=r(FPe," (Wav2Vec2 model)"),FPe.forEach(t),Xnr=i(ml),CF=n(ml,"LI",{});var TPe=s(CF);_1e=n(TPe,"STRONG",{});var jMt=s(_1e);znr=r(jMt,"wav2vec2-conformer"),jMt.forEach(t),Wnr=r(TPe," \u2014 "),SW=n(TPe,"A",{href:!0});var DMt=s(SW);Qnr=r(DMt,"Wav2Vec2ConformerForAudioFrameClassification"),DMt.forEach(t),Hnr=r(TPe," (Wav2Vec2-Conformer model)"),TPe.forEach(t),Unr=i(ml),wF=n(ml,"LI",{});var MPe=s(wF);b1e=n(MPe,"STRONG",{});var GMt=s(b1e);Jnr=r(GMt,"wavlm"),GMt.forEach(t),Ynr=r(MPe," \u2014 "),RW=n(MPe,"A",{href:!0});var OMt=s(RW);Knr=r(OMt,"WavLMForAudioFrameClassification"),OMt.forEach(t),Znr=r(MPe," (WavLM model)"),MPe.forEach(t),ml.forEach(t),esr=i(Fa),AF=n(Fa,"P",{});var EPe=s(AF);osr=r(EPe,"The model is set in evaluation mode by default using "),v1e=n(EPe,"CODE",{});var VMt=s(v1e);rsr=r(VMt,"model.eval()"),VMt.forEach(t),tsr=r(EPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F1e=n(EPe,"CODE",{});var XMt=s(F1e);asr=r(XMt,"model.train()"),XMt.forEach(t),EPe.forEach(t),nsr=i(Fa),T(LF.$$.fragment,Fa),Fa.forEach(t),fl.forEach(t),VGe=i(f),xd=n(f,"H2",{class:!0});var UVe=s(xd);yF=n(UVe,"A",{id:!0,class:!0,href:!0});var zMt=s(yF);T1e=n(zMt,"SPAN",{});var WMt=s(T1e);T(_8.$$.fragment,WMt),WMt.forEach(t),zMt.forEach(t),ssr=i(UVe),M1e=n(UVe,"SPAN",{});var QMt=s(M1e);lsr=r(QMt,"AutoModelForCTC"),QMt.forEach(t),UVe.forEach(t),XGe=i(f),zo=n(f,"DIV",{class:!0});var gl=s(zo);T(b8.$$.fragment,gl),isr=i(gl),$d=n(gl,"P",{});var xoe=s($d);dsr=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),PW=n(xoe,"A",{href:!0});var HMt=s(PW);csr=r(HMt,"from_pretrained()"),HMt.forEach(t),fsr=r(xoe," class method or the "),BW=n(xoe,"A",{href:!0});var UMt=s(BW);msr=r(UMt,"from_config()"),UMt.forEach(t),gsr=r(xoe,` class
method.`),xoe.forEach(t),hsr=i(gl),v8=n(gl,"P",{});var JVe=s(v8);psr=r(JVe,"This class cannot be instantiated directly using "),E1e=n(JVe,"CODE",{});var JMt=s(E1e);usr=r(JMt,"__init__()"),JMt.forEach(t),_sr=r(JVe," (throws an error)."),JVe.forEach(t),bsr=i(gl),Et=n(gl,"DIV",{class:!0});var e6=s(Et);T(F8.$$.fragment,e6),vsr=i(e6),C1e=n(e6,"P",{});var YMt=s(C1e);Fsr=r(YMt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),YMt.forEach(t),Tsr=i(e6),kd=n(e6,"P",{});var $oe=s(kd);Msr=r($oe,`Note:
Loading a model from its configuration file does `),w1e=n($oe,"STRONG",{});var KMt=s(w1e);Esr=r(KMt,"not"),KMt.forEach(t),Csr=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n($oe,"A",{href:!0});var ZMt=s(IW);wsr=r(ZMt,"from_pretrained()"),ZMt.forEach(t),Asr=r($oe," to load the model weights."),$oe.forEach(t),Lsr=i(e6),T(xF.$$.fragment,e6),e6.forEach(t),ysr=i(gl),go=n(gl,"DIV",{class:!0});var Ta=s(go);T(T8.$$.fragment,Ta),xsr=i(Ta),A1e=n(Ta,"P",{});var eEt=s(A1e);$sr=r(eEt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),eEt.forEach(t),ksr=i(Ta),Ua=n(Ta,"P",{});var o6=s(Ua);Ssr=r(o6,"The model class to instantiate is selected based on the "),L1e=n(o6,"CODE",{});var oEt=s(L1e);Rsr=r(oEt,"model_type"),oEt.forEach(t),Psr=r(o6,` property of the config object (either
passed as an argument or loaded from `),y1e=n(o6,"CODE",{});var rEt=s(y1e);Bsr=r(rEt,"pretrained_model_name_or_path"),rEt.forEach(t),Isr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x1e=n(o6,"CODE",{});var tEt=s(x1e);Nsr=r(tEt,"pretrained_model_name_or_path"),tEt.forEach(t),qsr=r(o6,":"),o6.forEach(t),jsr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);$F=n(Be,"LI",{});var CPe=s($F);$1e=n(CPe,"STRONG",{});var aEt=s($1e);Dsr=r(aEt,"data2vec-audio"),aEt.forEach(t),Gsr=r(CPe," \u2014 "),NW=n(CPe,"A",{href:!0});var nEt=s(NW);Osr=r(nEt,"Data2VecAudioForCTC"),nEt.forEach(t),Vsr=r(CPe," (Data2VecAudio model)"),CPe.forEach(t),Xsr=i(Be),kF=n(Be,"LI",{});var wPe=s(kF);k1e=n(wPe,"STRONG",{});var sEt=s(k1e);zsr=r(sEt,"hubert"),sEt.forEach(t),Wsr=r(wPe," \u2014 "),qW=n(wPe,"A",{href:!0});var lEt=s(qW);Qsr=r(lEt,"HubertForCTC"),lEt.forEach(t),Hsr=r(wPe," (Hubert model)"),wPe.forEach(t),Usr=i(Be),SF=n(Be,"LI",{});var APe=s(SF);S1e=n(APe,"STRONG",{});var iEt=s(S1e);Jsr=r(iEt,"mctct"),iEt.forEach(t),Ysr=r(APe," \u2014 "),jW=n(APe,"A",{href:!0});var dEt=s(jW);Ksr=r(dEt,"MCTCTForCTC"),dEt.forEach(t),Zsr=r(APe," (M-CTC-T model)"),APe.forEach(t),elr=i(Be),RF=n(Be,"LI",{});var LPe=s(RF);R1e=n(LPe,"STRONG",{});var cEt=s(R1e);olr=r(cEt,"sew"),cEt.forEach(t),rlr=r(LPe," \u2014 "),DW=n(LPe,"A",{href:!0});var fEt=s(DW);tlr=r(fEt,"SEWForCTC"),fEt.forEach(t),alr=r(LPe," (SEW model)"),LPe.forEach(t),nlr=i(Be),PF=n(Be,"LI",{});var yPe=s(PF);P1e=n(yPe,"STRONG",{});var mEt=s(P1e);slr=r(mEt,"sew-d"),mEt.forEach(t),llr=r(yPe," \u2014 "),GW=n(yPe,"A",{href:!0});var gEt=s(GW);ilr=r(gEt,"SEWDForCTC"),gEt.forEach(t),dlr=r(yPe," (SEW-D model)"),yPe.forEach(t),clr=i(Be),BF=n(Be,"LI",{});var xPe=s(BF);B1e=n(xPe,"STRONG",{});var hEt=s(B1e);flr=r(hEt,"unispeech"),hEt.forEach(t),mlr=r(xPe," \u2014 "),OW=n(xPe,"A",{href:!0});var pEt=s(OW);glr=r(pEt,"UniSpeechForCTC"),pEt.forEach(t),hlr=r(xPe," (UniSpeech model)"),xPe.forEach(t),plr=i(Be),IF=n(Be,"LI",{});var $Pe=s(IF);I1e=n($Pe,"STRONG",{});var uEt=s(I1e);ulr=r(uEt,"unispeech-sat"),uEt.forEach(t),_lr=r($Pe," \u2014 "),VW=n($Pe,"A",{href:!0});var _Et=s(VW);blr=r(_Et,"UniSpeechSatForCTC"),_Et.forEach(t),vlr=r($Pe," (UniSpeechSat model)"),$Pe.forEach(t),Flr=i(Be),NF=n(Be,"LI",{});var kPe=s(NF);N1e=n(kPe,"STRONG",{});var bEt=s(N1e);Tlr=r(bEt,"wav2vec2"),bEt.forEach(t),Mlr=r(kPe," \u2014 "),XW=n(kPe,"A",{href:!0});var vEt=s(XW);Elr=r(vEt,"Wav2Vec2ForCTC"),vEt.forEach(t),Clr=r(kPe," (Wav2Vec2 model)"),kPe.forEach(t),wlr=i(Be),qF=n(Be,"LI",{});var SPe=s(qF);q1e=n(SPe,"STRONG",{});var FEt=s(q1e);Alr=r(FEt,"wav2vec2-conformer"),FEt.forEach(t),Llr=r(SPe," \u2014 "),zW=n(SPe,"A",{href:!0});var TEt=s(zW);ylr=r(TEt,"Wav2Vec2ConformerForCTC"),TEt.forEach(t),xlr=r(SPe," (Wav2Vec2-Conformer model)"),SPe.forEach(t),$lr=i(Be),jF=n(Be,"LI",{});var RPe=s(jF);j1e=n(RPe,"STRONG",{});var MEt=s(j1e);klr=r(MEt,"wavlm"),MEt.forEach(t),Slr=r(RPe," \u2014 "),WW=n(RPe,"A",{href:!0});var EEt=s(WW);Rlr=r(EEt,"WavLMForCTC"),EEt.forEach(t),Plr=r(RPe," (WavLM model)"),RPe.forEach(t),Be.forEach(t),Blr=i(Ta),DF=n(Ta,"P",{});var PPe=s(DF);Ilr=r(PPe,"The model is set in evaluation mode by default using "),D1e=n(PPe,"CODE",{});var CEt=s(D1e);Nlr=r(CEt,"model.eval()"),CEt.forEach(t),qlr=r(PPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(PPe,"CODE",{});var wEt=s(G1e);jlr=r(wEt,"model.train()"),wEt.forEach(t),PPe.forEach(t),Dlr=i(Ta),T(GF.$$.fragment,Ta),Ta.forEach(t),gl.forEach(t),zGe=i(f),Sd=n(f,"H2",{class:!0});var YVe=s(Sd);OF=n(YVe,"A",{id:!0,class:!0,href:!0});var AEt=s(OF);O1e=n(AEt,"SPAN",{});var LEt=s(O1e);T(M8.$$.fragment,LEt),LEt.forEach(t),AEt.forEach(t),Glr=i(YVe),V1e=n(YVe,"SPAN",{});var yEt=s(V1e);Olr=r(yEt,"AutoModelForSpeechSeq2Seq"),yEt.forEach(t),YVe.forEach(t),WGe=i(f),Wo=n(f,"DIV",{class:!0});var hl=s(Wo);T(E8.$$.fragment,hl),Vlr=i(hl),Rd=n(hl,"P",{});var koe=s(Rd);Xlr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),QW=n(koe,"A",{href:!0});var xEt=s(QW);zlr=r(xEt,"from_pretrained()"),xEt.forEach(t),Wlr=r(koe," class method or the "),HW=n(koe,"A",{href:!0});var $Et=s(HW);Qlr=r($Et,"from_config()"),$Et.forEach(t),Hlr=r(koe,` class
method.`),koe.forEach(t),Ulr=i(hl),C8=n(hl,"P",{});var KVe=s(C8);Jlr=r(KVe,"This class cannot be instantiated directly using "),X1e=n(KVe,"CODE",{});var kEt=s(X1e);Ylr=r(kEt,"__init__()"),kEt.forEach(t),Klr=r(KVe," (throws an error)."),KVe.forEach(t),Zlr=i(hl),Ct=n(hl,"DIV",{class:!0});var r6=s(Ct);T(w8.$$.fragment,r6),eir=i(r6),z1e=n(r6,"P",{});var SEt=s(z1e);oir=r(SEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),SEt.forEach(t),rir=i(r6),Pd=n(r6,"P",{});var Soe=s(Pd);tir=r(Soe,`Note:
Loading a model from its configuration file does `),W1e=n(Soe,"STRONG",{});var REt=s(W1e);air=r(REt,"not"),REt.forEach(t),nir=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(Soe,"A",{href:!0});var PEt=s(UW);sir=r(PEt,"from_pretrained()"),PEt.forEach(t),lir=r(Soe," to load the model weights."),Soe.forEach(t),iir=i(r6),T(VF.$$.fragment,r6),r6.forEach(t),dir=i(hl),ho=n(hl,"DIV",{class:!0});var Ma=s(ho);T(A8.$$.fragment,Ma),cir=i(Ma),Q1e=n(Ma,"P",{});var BEt=s(Q1e);fir=r(BEt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),BEt.forEach(t),mir=i(Ma),Ja=n(Ma,"P",{});var t6=s(Ja);gir=r(t6,"The model class to instantiate is selected based on the "),H1e=n(t6,"CODE",{});var IEt=s(H1e);hir=r(IEt,"model_type"),IEt.forEach(t),pir=r(t6,` property of the config object (either
passed as an argument or loaded from `),U1e=n(t6,"CODE",{});var NEt=s(U1e);uir=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),_ir=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(t6,"CODE",{});var qEt=s(J1e);bir=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),vir=r(t6,":"),t6.forEach(t),Fir=i(Ma),L8=n(Ma,"UL",{});var ZVe=s(L8);XF=n(ZVe,"LI",{});var BPe=s(XF);Y1e=n(BPe,"STRONG",{});var jEt=s(Y1e);Tir=r(jEt,"speech-encoder-decoder"),jEt.forEach(t),Mir=r(BPe," \u2014 "),JW=n(BPe,"A",{href:!0});var DEt=s(JW);Eir=r(DEt,"SpeechEncoderDecoderModel"),DEt.forEach(t),Cir=r(BPe," (Speech Encoder decoder model)"),BPe.forEach(t),wir=i(ZVe),zF=n(ZVe,"LI",{});var IPe=s(zF);K1e=n(IPe,"STRONG",{});var GEt=s(K1e);Air=r(GEt,"speech_to_text"),GEt.forEach(t),Lir=r(IPe," \u2014 "),YW=n(IPe,"A",{href:!0});var OEt=s(YW);yir=r(OEt,"Speech2TextForConditionalGeneration"),OEt.forEach(t),xir=r(IPe," (Speech2Text model)"),IPe.forEach(t),ZVe.forEach(t),$ir=i(Ma),WF=n(Ma,"P",{});var NPe=s(WF);kir=r(NPe,"The model is set in evaluation mode by default using "),Z1e=n(NPe,"CODE",{});var VEt=s(Z1e);Sir=r(VEt,"model.eval()"),VEt.forEach(t),Rir=r(NPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e7e=n(NPe,"CODE",{});var XEt=s(e7e);Pir=r(XEt,"model.train()"),XEt.forEach(t),NPe.forEach(t),Bir=i(Ma),T(QF.$$.fragment,Ma),Ma.forEach(t),hl.forEach(t),QGe=i(f),Bd=n(f,"H2",{class:!0});var eXe=s(Bd);HF=n(eXe,"A",{id:!0,class:!0,href:!0});var zEt=s(HF);o7e=n(zEt,"SPAN",{});var WEt=s(o7e);T(y8.$$.fragment,WEt),WEt.forEach(t),zEt.forEach(t),Iir=i(eXe),r7e=n(eXe,"SPAN",{});var QEt=s(r7e);Nir=r(QEt,"AutoModelForAudioXVector"),QEt.forEach(t),eXe.forEach(t),HGe=i(f),Qo=n(f,"DIV",{class:!0});var pl=s(Qo);T(x8.$$.fragment,pl),qir=i(pl),Id=n(pl,"P",{});var Roe=s(Id);jir=r(Roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),KW=n(Roe,"A",{href:!0});var HEt=s(KW);Dir=r(HEt,"from_pretrained()"),HEt.forEach(t),Gir=r(Roe," class method or the "),ZW=n(Roe,"A",{href:!0});var UEt=s(ZW);Oir=r(UEt,"from_config()"),UEt.forEach(t),Vir=r(Roe,` class
method.`),Roe.forEach(t),Xir=i(pl),$8=n(pl,"P",{});var oXe=s($8);zir=r(oXe,"This class cannot be instantiated directly using "),t7e=n(oXe,"CODE",{});var JEt=s(t7e);Wir=r(JEt,"__init__()"),JEt.forEach(t),Qir=r(oXe," (throws an error)."),oXe.forEach(t),Hir=i(pl),wt=n(pl,"DIV",{class:!0});var a6=s(wt);T(k8.$$.fragment,a6),Uir=i(a6),a7e=n(a6,"P",{});var YEt=s(a7e);Jir=r(YEt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YEt.forEach(t),Yir=i(a6),Nd=n(a6,"P",{});var Poe=s(Nd);Kir=r(Poe,`Note:
Loading a model from its configuration file does `),n7e=n(Poe,"STRONG",{});var KEt=s(n7e);Zir=r(KEt,"not"),KEt.forEach(t),edr=r(Poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eQ=n(Poe,"A",{href:!0});var ZEt=s(eQ);odr=r(ZEt,"from_pretrained()"),ZEt.forEach(t),rdr=r(Poe," to load the model weights."),Poe.forEach(t),tdr=i(a6),T(UF.$$.fragment,a6),a6.forEach(t),adr=i(pl),po=n(pl,"DIV",{class:!0});var Ea=s(po);T(S8.$$.fragment,Ea),ndr=i(Ea),s7e=n(Ea,"P",{});var eCt=s(s7e);sdr=r(eCt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),eCt.forEach(t),ldr=i(Ea),Ya=n(Ea,"P",{});var n6=s(Ya);idr=r(n6,"The model class to instantiate is selected based on the "),l7e=n(n6,"CODE",{});var oCt=s(l7e);ddr=r(oCt,"model_type"),oCt.forEach(t),cdr=r(n6,` property of the config object (either
passed as an argument or loaded from `),i7e=n(n6,"CODE",{});var rCt=s(i7e);fdr=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),mdr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d7e=n(n6,"CODE",{});var tCt=s(d7e);gdr=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),hdr=r(n6,":"),n6.forEach(t),pdr=i(Ea),ot=n(Ea,"UL",{});var ul=s(ot);JF=n(ul,"LI",{});var qPe=s(JF);c7e=n(qPe,"STRONG",{});var aCt=s(c7e);udr=r(aCt,"data2vec-audio"),aCt.forEach(t),_dr=r(qPe," \u2014 "),oQ=n(qPe,"A",{href:!0});var nCt=s(oQ);bdr=r(nCt,"Data2VecAudioForXVector"),nCt.forEach(t),vdr=r(qPe," (Data2VecAudio model)"),qPe.forEach(t),Fdr=i(ul),YF=n(ul,"LI",{});var jPe=s(YF);f7e=n(jPe,"STRONG",{});var sCt=s(f7e);Tdr=r(sCt,"unispeech-sat"),sCt.forEach(t),Mdr=r(jPe," \u2014 "),rQ=n(jPe,"A",{href:!0});var lCt=s(rQ);Edr=r(lCt,"UniSpeechSatForXVector"),lCt.forEach(t),Cdr=r(jPe," (UniSpeechSat model)"),jPe.forEach(t),wdr=i(ul),KF=n(ul,"LI",{});var DPe=s(KF);m7e=n(DPe,"STRONG",{});var iCt=s(m7e);Adr=r(iCt,"wav2vec2"),iCt.forEach(t),Ldr=r(DPe," \u2014 "),tQ=n(DPe,"A",{href:!0});var dCt=s(tQ);ydr=r(dCt,"Wav2Vec2ForXVector"),dCt.forEach(t),xdr=r(DPe," (Wav2Vec2 model)"),DPe.forEach(t),$dr=i(ul),ZF=n(ul,"LI",{});var GPe=s(ZF);g7e=n(GPe,"STRONG",{});var cCt=s(g7e);kdr=r(cCt,"wav2vec2-conformer"),cCt.forEach(t),Sdr=r(GPe," \u2014 "),aQ=n(GPe,"A",{href:!0});var fCt=s(aQ);Rdr=r(fCt,"Wav2Vec2ConformerForXVector"),fCt.forEach(t),Pdr=r(GPe," (Wav2Vec2-Conformer model)"),GPe.forEach(t),Bdr=i(ul),eT=n(ul,"LI",{});var OPe=s(eT);h7e=n(OPe,"STRONG",{});var mCt=s(h7e);Idr=r(mCt,"wavlm"),mCt.forEach(t),Ndr=r(OPe," \u2014 "),nQ=n(OPe,"A",{href:!0});var gCt=s(nQ);qdr=r(gCt,"WavLMForXVector"),gCt.forEach(t),jdr=r(OPe," (WavLM model)"),OPe.forEach(t),ul.forEach(t),Ddr=i(Ea),oT=n(Ea,"P",{});var VPe=s(oT);Gdr=r(VPe,"The model is set in evaluation mode by default using "),p7e=n(VPe,"CODE",{});var hCt=s(p7e);Odr=r(hCt,"model.eval()"),hCt.forEach(t),Vdr=r(VPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u7e=n(VPe,"CODE",{});var pCt=s(u7e);Xdr=r(pCt,"model.train()"),pCt.forEach(t),VPe.forEach(t),zdr=i(Ea),T(rT.$$.fragment,Ea),Ea.forEach(t),pl.forEach(t),UGe=i(f),qd=n(f,"H2",{class:!0});var rXe=s(qd);tT=n(rXe,"A",{id:!0,class:!0,href:!0});var uCt=s(tT);_7e=n(uCt,"SPAN",{});var _Ct=s(_7e);T(R8.$$.fragment,_Ct),_Ct.forEach(t),uCt.forEach(t),Wdr=i(rXe),b7e=n(rXe,"SPAN",{});var bCt=s(b7e);Qdr=r(bCt,"AutoModelForMaskedImageModeling"),bCt.forEach(t),rXe.forEach(t),JGe=i(f),Ho=n(f,"DIV",{class:!0});var _l=s(Ho);T(P8.$$.fragment,_l),Hdr=i(_l),jd=n(_l,"P",{});var Boe=s(jd);Udr=r(Boe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),sQ=n(Boe,"A",{href:!0});var vCt=s(sQ);Jdr=r(vCt,"from_pretrained()"),vCt.forEach(t),Ydr=r(Boe," class method or the "),lQ=n(Boe,"A",{href:!0});var FCt=s(lQ);Kdr=r(FCt,"from_config()"),FCt.forEach(t),Zdr=r(Boe,` class
method.`),Boe.forEach(t),ecr=i(_l),B8=n(_l,"P",{});var tXe=s(B8);ocr=r(tXe,"This class cannot be instantiated directly using "),v7e=n(tXe,"CODE",{});var TCt=s(v7e);rcr=r(TCt,"__init__()"),TCt.forEach(t),tcr=r(tXe," (throws an error)."),tXe.forEach(t),acr=i(_l),At=n(_l,"DIV",{class:!0});var s6=s(At);T(I8.$$.fragment,s6),ncr=i(s6),F7e=n(s6,"P",{});var MCt=s(F7e);scr=r(MCt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),MCt.forEach(t),lcr=i(s6),Dd=n(s6,"P",{});var Ioe=s(Dd);icr=r(Ioe,`Note:
Loading a model from its configuration file does `),T7e=n(Ioe,"STRONG",{});var ECt=s(T7e);dcr=r(ECt,"not"),ECt.forEach(t),ccr=r(Ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iQ=n(Ioe,"A",{href:!0});var CCt=s(iQ);fcr=r(CCt,"from_pretrained()"),CCt.forEach(t),mcr=r(Ioe," to load the model weights."),Ioe.forEach(t),gcr=i(s6),T(aT.$$.fragment,s6),s6.forEach(t),hcr=i(_l),uo=n(_l,"DIV",{class:!0});var Ca=s(uo);T(N8.$$.fragment,Ca),pcr=i(Ca),M7e=n(Ca,"P",{});var wCt=s(M7e);ucr=r(wCt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wCt.forEach(t),_cr=i(Ca),Ka=n(Ca,"P",{});var l6=s(Ka);bcr=r(l6,"The model class to instantiate is selected based on the "),E7e=n(l6,"CODE",{});var ACt=s(E7e);vcr=r(ACt,"model_type"),ACt.forEach(t),Fcr=r(l6,` property of the config object (either
passed as an argument or loaded from `),C7e=n(l6,"CODE",{});var LCt=s(C7e);Tcr=r(LCt,"pretrained_model_name_or_path"),LCt.forEach(t),Mcr=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(l6,"CODE",{});var yCt=s(w7e);Ecr=r(yCt,"pretrained_model_name_or_path"),yCt.forEach(t),Ccr=r(l6,":"),l6.forEach(t),wcr=i(Ca),Gd=n(Ca,"UL",{});var Noe=s(Gd);nT=n(Noe,"LI",{});var XPe=s(nT);A7e=n(XPe,"STRONG",{});var xCt=s(A7e);Acr=r(xCt,"deit"),xCt.forEach(t),Lcr=r(XPe," \u2014 "),dQ=n(XPe,"A",{href:!0});var $Ct=s(dQ);ycr=r($Ct,"DeiTForMaskedImageModeling"),$Ct.forEach(t),xcr=r(XPe," (DeiT model)"),XPe.forEach(t),$cr=i(Noe),sT=n(Noe,"LI",{});var zPe=s(sT);L7e=n(zPe,"STRONG",{});var kCt=s(L7e);kcr=r(kCt,"swin"),kCt.forEach(t),Scr=r(zPe," \u2014 "),cQ=n(zPe,"A",{href:!0});var SCt=s(cQ);Rcr=r(SCt,"SwinForMaskedImageModeling"),SCt.forEach(t),Pcr=r(zPe," (Swin Transformer model)"),zPe.forEach(t),Bcr=i(Noe),lT=n(Noe,"LI",{});var WPe=s(lT);y7e=n(WPe,"STRONG",{});var RCt=s(y7e);Icr=r(RCt,"vit"),RCt.forEach(t),Ncr=r(WPe," \u2014 "),fQ=n(WPe,"A",{href:!0});var PCt=s(fQ);qcr=r(PCt,"ViTForMaskedImageModeling"),PCt.forEach(t),jcr=r(WPe," (ViT model)"),WPe.forEach(t),Noe.forEach(t),Dcr=i(Ca),iT=n(Ca,"P",{});var QPe=s(iT);Gcr=r(QPe,"The model is set in evaluation mode by default using "),x7e=n(QPe,"CODE",{});var BCt=s(x7e);Ocr=r(BCt,"model.eval()"),BCt.forEach(t),Vcr=r(QPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$7e=n(QPe,"CODE",{});var ICt=s($7e);Xcr=r(ICt,"model.train()"),ICt.forEach(t),QPe.forEach(t),zcr=i(Ca),T(dT.$$.fragment,Ca),Ca.forEach(t),_l.forEach(t),YGe=i(f),Od=n(f,"H2",{class:!0});var aXe=s(Od);cT=n(aXe,"A",{id:!0,class:!0,href:!0});var NCt=s(cT);k7e=n(NCt,"SPAN",{});var qCt=s(k7e);T(q8.$$.fragment,qCt),qCt.forEach(t),NCt.forEach(t),Wcr=i(aXe),S7e=n(aXe,"SPAN",{});var jCt=s(S7e);Qcr=r(jCt,"AutoModelForObjectDetection"),jCt.forEach(t),aXe.forEach(t),KGe=i(f),Uo=n(f,"DIV",{class:!0});var bl=s(Uo);T(j8.$$.fragment,bl),Hcr=i(bl),Vd=n(bl,"P",{});var qoe=s(Vd);Ucr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),mQ=n(qoe,"A",{href:!0});var DCt=s(mQ);Jcr=r(DCt,"from_pretrained()"),DCt.forEach(t),Ycr=r(qoe," class method or the "),gQ=n(qoe,"A",{href:!0});var GCt=s(gQ);Kcr=r(GCt,"from_config()"),GCt.forEach(t),Zcr=r(qoe,` class
method.`),qoe.forEach(t),efr=i(bl),D8=n(bl,"P",{});var nXe=s(D8);ofr=r(nXe,"This class cannot be instantiated directly using "),R7e=n(nXe,"CODE",{});var OCt=s(R7e);rfr=r(OCt,"__init__()"),OCt.forEach(t),tfr=r(nXe," (throws an error)."),nXe.forEach(t),afr=i(bl),Lt=n(bl,"DIV",{class:!0});var i6=s(Lt);T(G8.$$.fragment,i6),nfr=i(i6),P7e=n(i6,"P",{});var VCt=s(P7e);sfr=r(VCt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),VCt.forEach(t),lfr=i(i6),Xd=n(i6,"P",{});var joe=s(Xd);ifr=r(joe,`Note:
Loading a model from its configuration file does `),B7e=n(joe,"STRONG",{});var XCt=s(B7e);dfr=r(XCt,"not"),XCt.forEach(t),cfr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hQ=n(joe,"A",{href:!0});var zCt=s(hQ);ffr=r(zCt,"from_pretrained()"),zCt.forEach(t),mfr=r(joe," to load the model weights."),joe.forEach(t),gfr=i(i6),T(fT.$$.fragment,i6),i6.forEach(t),hfr=i(bl),_o=n(bl,"DIV",{class:!0});var wa=s(_o);T(O8.$$.fragment,wa),pfr=i(wa),I7e=n(wa,"P",{});var WCt=s(I7e);ufr=r(WCt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),WCt.forEach(t),_fr=i(wa),Za=n(wa,"P",{});var d6=s(Za);bfr=r(d6,"The model class to instantiate is selected based on the "),N7e=n(d6,"CODE",{});var QCt=s(N7e);vfr=r(QCt,"model_type"),QCt.forEach(t),Ffr=r(d6,` property of the config object (either
passed as an argument or loaded from `),q7e=n(d6,"CODE",{});var HCt=s(q7e);Tfr=r(HCt,"pretrained_model_name_or_path"),HCt.forEach(t),Mfr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j7e=n(d6,"CODE",{});var UCt=s(j7e);Efr=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),Cfr=r(d6,":"),d6.forEach(t),wfr=i(wa),V8=n(wa,"UL",{});var sXe=s(V8);mT=n(sXe,"LI",{});var HPe=s(mT);D7e=n(HPe,"STRONG",{});var JCt=s(D7e);Afr=r(JCt,"detr"),JCt.forEach(t),Lfr=r(HPe," \u2014 "),pQ=n(HPe,"A",{href:!0});var YCt=s(pQ);yfr=r(YCt,"DetrForObjectDetection"),YCt.forEach(t),xfr=r(HPe," (DETR model)"),HPe.forEach(t),$fr=i(sXe),gT=n(sXe,"LI",{});var UPe=s(gT);G7e=n(UPe,"STRONG",{});var KCt=s(G7e);kfr=r(KCt,"yolos"),KCt.forEach(t),Sfr=r(UPe," \u2014 "),uQ=n(UPe,"A",{href:!0});var ZCt=s(uQ);Rfr=r(ZCt,"YolosForObjectDetection"),ZCt.forEach(t),Pfr=r(UPe," (YOLOS model)"),UPe.forEach(t),sXe.forEach(t),Bfr=i(wa),hT=n(wa,"P",{});var JPe=s(hT);Ifr=r(JPe,"The model is set in evaluation mode by default using "),O7e=n(JPe,"CODE",{});var e5t=s(O7e);Nfr=r(e5t,"model.eval()"),e5t.forEach(t),qfr=r(JPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V7e=n(JPe,"CODE",{});var o5t=s(V7e);jfr=r(o5t,"model.train()"),o5t.forEach(t),JPe.forEach(t),Dfr=i(wa),T(pT.$$.fragment,wa),wa.forEach(t),bl.forEach(t),ZGe=i(f),zd=n(f,"H2",{class:!0});var lXe=s(zd);uT=n(lXe,"A",{id:!0,class:!0,href:!0});var r5t=s(uT);X7e=n(r5t,"SPAN",{});var t5t=s(X7e);T(X8.$$.fragment,t5t),t5t.forEach(t),r5t.forEach(t),Gfr=i(lXe),z7e=n(lXe,"SPAN",{});var a5t=s(z7e);Ofr=r(a5t,"AutoModelForImageSegmentation"),a5t.forEach(t),lXe.forEach(t),eOe=i(f),Jo=n(f,"DIV",{class:!0});var vl=s(Jo);T(z8.$$.fragment,vl),Vfr=i(vl),Wd=n(vl,"P",{});var Doe=s(Wd);Xfr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),_Q=n(Doe,"A",{href:!0});var n5t=s(_Q);zfr=r(n5t,"from_pretrained()"),n5t.forEach(t),Wfr=r(Doe," class method or the "),bQ=n(Doe,"A",{href:!0});var s5t=s(bQ);Qfr=r(s5t,"from_config()"),s5t.forEach(t),Hfr=r(Doe,` class
method.`),Doe.forEach(t),Ufr=i(vl),W8=n(vl,"P",{});var iXe=s(W8);Jfr=r(iXe,"This class cannot be instantiated directly using "),W7e=n(iXe,"CODE",{});var l5t=s(W7e);Yfr=r(l5t,"__init__()"),l5t.forEach(t),Kfr=r(iXe," (throws an error)."),iXe.forEach(t),Zfr=i(vl),yt=n(vl,"DIV",{class:!0});var c6=s(yt);T(Q8.$$.fragment,c6),emr=i(c6),Q7e=n(c6,"P",{});var i5t=s(Q7e);omr=r(i5t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),i5t.forEach(t),rmr=i(c6),Qd=n(c6,"P",{});var Goe=s(Qd);tmr=r(Goe,`Note:
Loading a model from its configuration file does `),H7e=n(Goe,"STRONG",{});var d5t=s(H7e);amr=r(d5t,"not"),d5t.forEach(t),nmr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(Goe,"A",{href:!0});var c5t=s(vQ);smr=r(c5t,"from_pretrained()"),c5t.forEach(t),lmr=r(Goe," to load the model weights."),Goe.forEach(t),imr=i(c6),T(_T.$$.fragment,c6),c6.forEach(t),dmr=i(vl),bo=n(vl,"DIV",{class:!0});var Aa=s(bo);T(H8.$$.fragment,Aa),cmr=i(Aa),U7e=n(Aa,"P",{});var f5t=s(U7e);fmr=r(f5t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),f5t.forEach(t),mmr=i(Aa),en=n(Aa,"P",{});var f6=s(en);gmr=r(f6,"The model class to instantiate is selected based on the "),J7e=n(f6,"CODE",{});var m5t=s(J7e);hmr=r(m5t,"model_type"),m5t.forEach(t),pmr=r(f6,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(f6,"CODE",{});var g5t=s(Y7e);umr=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),_mr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(f6,"CODE",{});var h5t=s(K7e);bmr=r(h5t,"pretrained_model_name_or_path"),h5t.forEach(t),vmr=r(f6,":"),f6.forEach(t),Fmr=i(Aa),Z7e=n(Aa,"UL",{});var p5t=s(Z7e);bT=n(p5t,"LI",{});var YPe=s(bT);ebe=n(YPe,"STRONG",{});var u5t=s(ebe);Tmr=r(u5t,"detr"),u5t.forEach(t),Mmr=r(YPe," \u2014 "),FQ=n(YPe,"A",{href:!0});var _5t=s(FQ);Emr=r(_5t,"DetrForSegmentation"),_5t.forEach(t),Cmr=r(YPe," (DETR model)"),YPe.forEach(t),p5t.forEach(t),wmr=i(Aa),vT=n(Aa,"P",{});var KPe=s(vT);Amr=r(KPe,"The model is set in evaluation mode by default using "),obe=n(KPe,"CODE",{});var b5t=s(obe);Lmr=r(b5t,"model.eval()"),b5t.forEach(t),ymr=r(KPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rbe=n(KPe,"CODE",{});var v5t=s(rbe);xmr=r(v5t,"model.train()"),v5t.forEach(t),KPe.forEach(t),$mr=i(Aa),T(FT.$$.fragment,Aa),Aa.forEach(t),vl.forEach(t),oOe=i(f),Hd=n(f,"H2",{class:!0});var dXe=s(Hd);TT=n(dXe,"A",{id:!0,class:!0,href:!0});var F5t=s(TT);tbe=n(F5t,"SPAN",{});var T5t=s(tbe);T(U8.$$.fragment,T5t),T5t.forEach(t),F5t.forEach(t),kmr=i(dXe),abe=n(dXe,"SPAN",{});var M5t=s(abe);Smr=r(M5t,"AutoModelForSemanticSegmentation"),M5t.forEach(t),dXe.forEach(t),rOe=i(f),Yo=n(f,"DIV",{class:!0});var Fl=s(Yo);T(J8.$$.fragment,Fl),Rmr=i(Fl),Ud=n(Fl,"P",{});var Ooe=s(Ud);Pmr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),TQ=n(Ooe,"A",{href:!0});var E5t=s(TQ);Bmr=r(E5t,"from_pretrained()"),E5t.forEach(t),Imr=r(Ooe," class method or the "),MQ=n(Ooe,"A",{href:!0});var C5t=s(MQ);Nmr=r(C5t,"from_config()"),C5t.forEach(t),qmr=r(Ooe,` class
method.`),Ooe.forEach(t),jmr=i(Fl),Y8=n(Fl,"P",{});var cXe=s(Y8);Dmr=r(cXe,"This class cannot be instantiated directly using "),nbe=n(cXe,"CODE",{});var w5t=s(nbe);Gmr=r(w5t,"__init__()"),w5t.forEach(t),Omr=r(cXe," (throws an error)."),cXe.forEach(t),Vmr=i(Fl),xt=n(Fl,"DIV",{class:!0});var m6=s(xt);T(K8.$$.fragment,m6),Xmr=i(m6),sbe=n(m6,"P",{});var A5t=s(sbe);zmr=r(A5t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),A5t.forEach(t),Wmr=i(m6),Jd=n(m6,"P",{});var Voe=s(Jd);Qmr=r(Voe,`Note:
Loading a model from its configuration file does `),lbe=n(Voe,"STRONG",{});var L5t=s(lbe);Hmr=r(L5t,"not"),L5t.forEach(t),Umr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EQ=n(Voe,"A",{href:!0});var y5t=s(EQ);Jmr=r(y5t,"from_pretrained()"),y5t.forEach(t),Ymr=r(Voe," to load the model weights."),Voe.forEach(t),Kmr=i(m6),T(MT.$$.fragment,m6),m6.forEach(t),Zmr=i(Fl),vo=n(Fl,"DIV",{class:!0});var La=s(vo);T(Z8.$$.fragment,La),egr=i(La),ibe=n(La,"P",{});var x5t=s(ibe);ogr=r(x5t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),x5t.forEach(t),rgr=i(La),on=n(La,"P",{});var g6=s(on);tgr=r(g6,"The model class to instantiate is selected based on the "),dbe=n(g6,"CODE",{});var $5t=s(dbe);agr=r($5t,"model_type"),$5t.forEach(t),ngr=r(g6,` property of the config object (either
passed as an argument or loaded from `),cbe=n(g6,"CODE",{});var k5t=s(cbe);sgr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),lgr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fbe=n(g6,"CODE",{});var S5t=s(fbe);igr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),dgr=r(g6,":"),g6.forEach(t),cgr=i(La),rn=n(La,"UL",{});var h6=s(rn);ET=n(h6,"LI",{});var ZPe=s(ET);mbe=n(ZPe,"STRONG",{});var R5t=s(mbe);fgr=r(R5t,"beit"),R5t.forEach(t),mgr=r(ZPe," \u2014 "),CQ=n(ZPe,"A",{href:!0});var P5t=s(CQ);ggr=r(P5t,"BeitForSemanticSegmentation"),P5t.forEach(t),hgr=r(ZPe," (BEiT model)"),ZPe.forEach(t),pgr=i(h6),CT=n(h6,"LI",{});var eBe=s(CT);gbe=n(eBe,"STRONG",{});var B5t=s(gbe);ugr=r(B5t,"data2vec-vision"),B5t.forEach(t),_gr=r(eBe," \u2014 "),wQ=n(eBe,"A",{href:!0});var I5t=s(wQ);bgr=r(I5t,"Data2VecVisionForSemanticSegmentation"),I5t.forEach(t),vgr=r(eBe," (Data2VecVision model)"),eBe.forEach(t),Fgr=i(h6),wT=n(h6,"LI",{});var oBe=s(wT);hbe=n(oBe,"STRONG",{});var N5t=s(hbe);Tgr=r(N5t,"dpt"),N5t.forEach(t),Mgr=r(oBe," \u2014 "),AQ=n(oBe,"A",{href:!0});var q5t=s(AQ);Egr=r(q5t,"DPTForSemanticSegmentation"),q5t.forEach(t),Cgr=r(oBe," (DPT model)"),oBe.forEach(t),wgr=i(h6),AT=n(h6,"LI",{});var rBe=s(AT);pbe=n(rBe,"STRONG",{});var j5t=s(pbe);Agr=r(j5t,"segformer"),j5t.forEach(t),Lgr=r(rBe," \u2014 "),LQ=n(rBe,"A",{href:!0});var D5t=s(LQ);ygr=r(D5t,"SegformerForSemanticSegmentation"),D5t.forEach(t),xgr=r(rBe," (SegFormer model)"),rBe.forEach(t),h6.forEach(t),$gr=i(La),LT=n(La,"P",{});var tBe=s(LT);kgr=r(tBe,"The model is set in evaluation mode by default using "),ube=n(tBe,"CODE",{});var G5t=s(ube);Sgr=r(G5t,"model.eval()"),G5t.forEach(t),Rgr=r(tBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_be=n(tBe,"CODE",{});var O5t=s(_be);Pgr=r(O5t,"model.train()"),O5t.forEach(t),tBe.forEach(t),Bgr=i(La),T(yT.$$.fragment,La),La.forEach(t),Fl.forEach(t),tOe=i(f),Yd=n(f,"H2",{class:!0});var fXe=s(Yd);xT=n(fXe,"A",{id:!0,class:!0,href:!0});var V5t=s(xT);bbe=n(V5t,"SPAN",{});var X5t=s(bbe);T(e9.$$.fragment,X5t),X5t.forEach(t),V5t.forEach(t),Igr=i(fXe),vbe=n(fXe,"SPAN",{});var z5t=s(vbe);Ngr=r(z5t,"AutoModelForInstanceSegmentation"),z5t.forEach(t),fXe.forEach(t),aOe=i(f),Ko=n(f,"DIV",{class:!0});var Tl=s(Ko);T(o9.$$.fragment,Tl),qgr=i(Tl),Kd=n(Tl,"P",{});var Xoe=s(Kd);jgr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),yQ=n(Xoe,"A",{href:!0});var W5t=s(yQ);Dgr=r(W5t,"from_pretrained()"),W5t.forEach(t),Ggr=r(Xoe," class method or the "),xQ=n(Xoe,"A",{href:!0});var Q5t=s(xQ);Ogr=r(Q5t,"from_config()"),Q5t.forEach(t),Vgr=r(Xoe,` class
method.`),Xoe.forEach(t),Xgr=i(Tl),r9=n(Tl,"P",{});var mXe=s(r9);zgr=r(mXe,"This class cannot be instantiated directly using "),Fbe=n(mXe,"CODE",{});var H5t=s(Fbe);Wgr=r(H5t,"__init__()"),H5t.forEach(t),Qgr=r(mXe," (throws an error)."),mXe.forEach(t),Hgr=i(Tl),$t=n(Tl,"DIV",{class:!0});var p6=s($t);T(t9.$$.fragment,p6),Ugr=i(p6),Tbe=n(p6,"P",{});var U5t=s(Tbe);Jgr=r(U5t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),U5t.forEach(t),Ygr=i(p6),Zd=n(p6,"P",{});var zoe=s(Zd);Kgr=r(zoe,`Note:
Loading a model from its configuration file does `),Mbe=n(zoe,"STRONG",{});var J5t=s(Mbe);Zgr=r(J5t,"not"),J5t.forEach(t),ehr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),$Q=n(zoe,"A",{href:!0});var Y5t=s($Q);ohr=r(Y5t,"from_pretrained()"),Y5t.forEach(t),rhr=r(zoe," to load the model weights."),zoe.forEach(t),thr=i(p6),T($T.$$.fragment,p6),p6.forEach(t),ahr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var ya=s(Fo);T(a9.$$.fragment,ya),nhr=i(ya),Ebe=n(ya,"P",{});var K5t=s(Ebe);shr=r(K5t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),K5t.forEach(t),lhr=i(ya),tn=n(ya,"P",{});var u6=s(tn);ihr=r(u6,"The model class to instantiate is selected based on the "),Cbe=n(u6,"CODE",{});var Z5t=s(Cbe);dhr=r(Z5t,"model_type"),Z5t.forEach(t),chr=r(u6,` property of the config object (either
passed as an argument or loaded from `),wbe=n(u6,"CODE",{});var e3t=s(wbe);fhr=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),mhr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Abe=n(u6,"CODE",{});var o3t=s(Abe);ghr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),hhr=r(u6,":"),u6.forEach(t),phr=i(ya),Lbe=n(ya,"UL",{});var r3t=s(Lbe);kT=n(r3t,"LI",{});var aBe=s(kT);ybe=n(aBe,"STRONG",{});var t3t=s(ybe);uhr=r(t3t,"maskformer"),t3t.forEach(t),_hr=r(aBe," \u2014 "),kQ=n(aBe,"A",{href:!0});var a3t=s(kQ);bhr=r(a3t,"MaskFormerForInstanceSegmentation"),a3t.forEach(t),vhr=r(aBe," (MaskFormer model)"),aBe.forEach(t),r3t.forEach(t),Fhr=i(ya),ST=n(ya,"P",{});var nBe=s(ST);Thr=r(nBe,"The model is set in evaluation mode by default using "),xbe=n(nBe,"CODE",{});var n3t=s(xbe);Mhr=r(n3t,"model.eval()"),n3t.forEach(t),Ehr=r(nBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$be=n(nBe,"CODE",{});var s3t=s($be);Chr=r(s3t,"model.train()"),s3t.forEach(t),nBe.forEach(t),whr=i(ya),T(RT.$$.fragment,ya),ya.forEach(t),Tl.forEach(t),nOe=i(f),ec=n(f,"H2",{class:!0});var gXe=s(ec);PT=n(gXe,"A",{id:!0,class:!0,href:!0});var l3t=s(PT);kbe=n(l3t,"SPAN",{});var i3t=s(kbe);T(n9.$$.fragment,i3t),i3t.forEach(t),l3t.forEach(t),Ahr=i(gXe),Sbe=n(gXe,"SPAN",{});var d3t=s(Sbe);Lhr=r(d3t,"TFAutoModel"),d3t.forEach(t),gXe.forEach(t),sOe=i(f),Zo=n(f,"DIV",{class:!0});var Ml=s(Zo);T(s9.$$.fragment,Ml),yhr=i(Ml),oc=n(Ml,"P",{});var Woe=s(oc);xhr=r(Woe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),SQ=n(Woe,"A",{href:!0});var c3t=s(SQ);$hr=r(c3t,"from_pretrained()"),c3t.forEach(t),khr=r(Woe," class method or the "),RQ=n(Woe,"A",{href:!0});var f3t=s(RQ);Shr=r(f3t,"from_config()"),f3t.forEach(t),Rhr=r(Woe,` class
method.`),Woe.forEach(t),Phr=i(Ml),l9=n(Ml,"P",{});var hXe=s(l9);Bhr=r(hXe,"This class cannot be instantiated directly using "),Rbe=n(hXe,"CODE",{});var m3t=s(Rbe);Ihr=r(m3t,"__init__()"),m3t.forEach(t),Nhr=r(hXe," (throws an error)."),hXe.forEach(t),qhr=i(Ml),kt=n(Ml,"DIV",{class:!0});var _6=s(kt);T(i9.$$.fragment,_6),jhr=i(_6),Pbe=n(_6,"P",{});var g3t=s(Pbe);Dhr=r(g3t,"Instantiates one of the base model classes of the library from a configuration."),g3t.forEach(t),Ghr=i(_6),rc=n(_6,"P",{});var Qoe=s(rc);Ohr=r(Qoe,`Note:
Loading a model from its configuration file does `),Bbe=n(Qoe,"STRONG",{});var h3t=s(Bbe);Vhr=r(h3t,"not"),h3t.forEach(t),Xhr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(Qoe,"A",{href:!0});var p3t=s(PQ);zhr=r(p3t,"from_pretrained()"),p3t.forEach(t),Whr=r(Qoe," to load the model weights."),Qoe.forEach(t),Qhr=i(_6),T(BT.$$.fragment,_6),_6.forEach(t),Hhr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(d9.$$.fragment,El),Uhr=i(El),Ibe=n(El,"P",{});var u3t=s(Ibe);Jhr=r(u3t,"Instantiate one of the base model classes of the library from a pretrained model."),u3t.forEach(t),Yhr=i(El),an=n(El,"P",{});var b6=s(an);Khr=r(b6,"The model class to instantiate is selected based on the "),Nbe=n(b6,"CODE",{});var _3t=s(Nbe);Zhr=r(_3t,"model_type"),_3t.forEach(t),epr=r(b6,` property of the config object (either
passed as an argument or loaded from `),qbe=n(b6,"CODE",{});var b3t=s(qbe);opr=r(b3t,"pretrained_model_name_or_path"),b3t.forEach(t),rpr=r(b6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jbe=n(b6,"CODE",{});var v3t=s(jbe);tpr=r(v3t,"pretrained_model_name_or_path"),v3t.forEach(t),apr=r(b6,":"),b6.forEach(t),npr=i(El),N=n(El,"UL",{});var j=s(N);IT=n(j,"LI",{});var sBe=s(IT);Dbe=n(sBe,"STRONG",{});var F3t=s(Dbe);spr=r(F3t,"albert"),F3t.forEach(t),lpr=r(sBe," \u2014 "),BQ=n(sBe,"A",{href:!0});var T3t=s(BQ);ipr=r(T3t,"TFAlbertModel"),T3t.forEach(t),dpr=r(sBe," (ALBERT model)"),sBe.forEach(t),cpr=i(j),NT=n(j,"LI",{});var lBe=s(NT);Gbe=n(lBe,"STRONG",{});var M3t=s(Gbe);fpr=r(M3t,"bart"),M3t.forEach(t),mpr=r(lBe," \u2014 "),IQ=n(lBe,"A",{href:!0});var E3t=s(IQ);gpr=r(E3t,"TFBartModel"),E3t.forEach(t),hpr=r(lBe," (BART model)"),lBe.forEach(t),ppr=i(j),qT=n(j,"LI",{});var iBe=s(qT);Obe=n(iBe,"STRONG",{});var C3t=s(Obe);upr=r(C3t,"bert"),C3t.forEach(t),_pr=r(iBe," \u2014 "),NQ=n(iBe,"A",{href:!0});var w3t=s(NQ);bpr=r(w3t,"TFBertModel"),w3t.forEach(t),vpr=r(iBe," (BERT model)"),iBe.forEach(t),Fpr=i(j),jT=n(j,"LI",{});var dBe=s(jT);Vbe=n(dBe,"STRONG",{});var A3t=s(Vbe);Tpr=r(A3t,"blenderbot"),A3t.forEach(t),Mpr=r(dBe," \u2014 "),qQ=n(dBe,"A",{href:!0});var L3t=s(qQ);Epr=r(L3t,"TFBlenderbotModel"),L3t.forEach(t),Cpr=r(dBe," (Blenderbot model)"),dBe.forEach(t),wpr=i(j),DT=n(j,"LI",{});var cBe=s(DT);Xbe=n(cBe,"STRONG",{});var y3t=s(Xbe);Apr=r(y3t,"blenderbot-small"),y3t.forEach(t),Lpr=r(cBe," \u2014 "),jQ=n(cBe,"A",{href:!0});var x3t=s(jQ);ypr=r(x3t,"TFBlenderbotSmallModel"),x3t.forEach(t),xpr=r(cBe," (BlenderbotSmall model)"),cBe.forEach(t),$pr=i(j),GT=n(j,"LI",{});var fBe=s(GT);zbe=n(fBe,"STRONG",{});var $3t=s(zbe);kpr=r($3t,"camembert"),$3t.forEach(t),Spr=r(fBe," \u2014 "),DQ=n(fBe,"A",{href:!0});var k3t=s(DQ);Rpr=r(k3t,"TFCamembertModel"),k3t.forEach(t),Ppr=r(fBe," (CamemBERT model)"),fBe.forEach(t),Bpr=i(j),OT=n(j,"LI",{});var mBe=s(OT);Wbe=n(mBe,"STRONG",{});var S3t=s(Wbe);Ipr=r(S3t,"clip"),S3t.forEach(t),Npr=r(mBe," \u2014 "),GQ=n(mBe,"A",{href:!0});var R3t=s(GQ);qpr=r(R3t,"TFCLIPModel"),R3t.forEach(t),jpr=r(mBe," (CLIP model)"),mBe.forEach(t),Dpr=i(j),VT=n(j,"LI",{});var gBe=s(VT);Qbe=n(gBe,"STRONG",{});var P3t=s(Qbe);Gpr=r(P3t,"convbert"),P3t.forEach(t),Opr=r(gBe," \u2014 "),OQ=n(gBe,"A",{href:!0});var B3t=s(OQ);Vpr=r(B3t,"TFConvBertModel"),B3t.forEach(t),Xpr=r(gBe," (ConvBERT model)"),gBe.forEach(t),zpr=i(j),XT=n(j,"LI",{});var hBe=s(XT);Hbe=n(hBe,"STRONG",{});var I3t=s(Hbe);Wpr=r(I3t,"convnext"),I3t.forEach(t),Qpr=r(hBe," \u2014 "),VQ=n(hBe,"A",{href:!0});var N3t=s(VQ);Hpr=r(N3t,"TFConvNextModel"),N3t.forEach(t),Upr=r(hBe," (ConvNeXT model)"),hBe.forEach(t),Jpr=i(j),zT=n(j,"LI",{});var pBe=s(zT);Ube=n(pBe,"STRONG",{});var q3t=s(Ube);Ypr=r(q3t,"ctrl"),q3t.forEach(t),Kpr=r(pBe," \u2014 "),XQ=n(pBe,"A",{href:!0});var j3t=s(XQ);Zpr=r(j3t,"TFCTRLModel"),j3t.forEach(t),eur=r(pBe," (CTRL model)"),pBe.forEach(t),our=i(j),WT=n(j,"LI",{});var uBe=s(WT);Jbe=n(uBe,"STRONG",{});var D3t=s(Jbe);rur=r(D3t,"data2vec-vision"),D3t.forEach(t),tur=r(uBe," \u2014 "),zQ=n(uBe,"A",{href:!0});var G3t=s(zQ);aur=r(G3t,"TFData2VecVisionModel"),G3t.forEach(t),nur=r(uBe," (Data2VecVision model)"),uBe.forEach(t),sur=i(j),QT=n(j,"LI",{});var _Be=s(QT);Ybe=n(_Be,"STRONG",{});var O3t=s(Ybe);lur=r(O3t,"deberta"),O3t.forEach(t),iur=r(_Be," \u2014 "),WQ=n(_Be,"A",{href:!0});var V3t=s(WQ);dur=r(V3t,"TFDebertaModel"),V3t.forEach(t),cur=r(_Be," (DeBERTa model)"),_Be.forEach(t),fur=i(j),HT=n(j,"LI",{});var bBe=s(HT);Kbe=n(bBe,"STRONG",{});var X3t=s(Kbe);mur=r(X3t,"deberta-v2"),X3t.forEach(t),gur=r(bBe," \u2014 "),QQ=n(bBe,"A",{href:!0});var z3t=s(QQ);hur=r(z3t,"TFDebertaV2Model"),z3t.forEach(t),pur=r(bBe," (DeBERTa-v2 model)"),bBe.forEach(t),uur=i(j),UT=n(j,"LI",{});var vBe=s(UT);Zbe=n(vBe,"STRONG",{});var W3t=s(Zbe);_ur=r(W3t,"distilbert"),W3t.forEach(t),bur=r(vBe," \u2014 "),HQ=n(vBe,"A",{href:!0});var Q3t=s(HQ);vur=r(Q3t,"TFDistilBertModel"),Q3t.forEach(t),Fur=r(vBe," (DistilBERT model)"),vBe.forEach(t),Tur=i(j),JT=n(j,"LI",{});var FBe=s(JT);e4e=n(FBe,"STRONG",{});var H3t=s(e4e);Mur=r(H3t,"dpr"),H3t.forEach(t),Eur=r(FBe," \u2014 "),UQ=n(FBe,"A",{href:!0});var U3t=s(UQ);Cur=r(U3t,"TFDPRQuestionEncoder"),U3t.forEach(t),wur=r(FBe," (DPR model)"),FBe.forEach(t),Aur=i(j),YT=n(j,"LI",{});var TBe=s(YT);o4e=n(TBe,"STRONG",{});var J3t=s(o4e);Lur=r(J3t,"electra"),J3t.forEach(t),yur=r(TBe," \u2014 "),JQ=n(TBe,"A",{href:!0});var Y3t=s(JQ);xur=r(Y3t,"TFElectraModel"),Y3t.forEach(t),$ur=r(TBe," (ELECTRA model)"),TBe.forEach(t),kur=i(j),KT=n(j,"LI",{});var MBe=s(KT);r4e=n(MBe,"STRONG",{});var K3t=s(r4e);Sur=r(K3t,"flaubert"),K3t.forEach(t),Rur=r(MBe," \u2014 "),YQ=n(MBe,"A",{href:!0});var Z3t=s(YQ);Pur=r(Z3t,"TFFlaubertModel"),Z3t.forEach(t),Bur=r(MBe," (FlauBERT model)"),MBe.forEach(t),Iur=i(j),Xs=n(j,"LI",{});var Xk=s(Xs);t4e=n(Xk,"STRONG",{});var e0t=s(t4e);Nur=r(e0t,"funnel"),e0t.forEach(t),qur=r(Xk," \u2014 "),KQ=n(Xk,"A",{href:!0});var o0t=s(KQ);jur=r(o0t,"TFFunnelModel"),o0t.forEach(t),Dur=r(Xk," or "),ZQ=n(Xk,"A",{href:!0});var r0t=s(ZQ);Gur=r(r0t,"TFFunnelBaseModel"),r0t.forEach(t),Our=r(Xk," (Funnel Transformer model)"),Xk.forEach(t),Vur=i(j),ZT=n(j,"LI",{});var EBe=s(ZT);a4e=n(EBe,"STRONG",{});var t0t=s(a4e);Xur=r(t0t,"gpt2"),t0t.forEach(t),zur=r(EBe," \u2014 "),eH=n(EBe,"A",{href:!0});var a0t=s(eH);Wur=r(a0t,"TFGPT2Model"),a0t.forEach(t),Qur=r(EBe," (OpenAI GPT-2 model)"),EBe.forEach(t),Hur=i(j),eM=n(j,"LI",{});var CBe=s(eM);n4e=n(CBe,"STRONG",{});var n0t=s(n4e);Uur=r(n0t,"gptj"),n0t.forEach(t),Jur=r(CBe," \u2014 "),oH=n(CBe,"A",{href:!0});var s0t=s(oH);Yur=r(s0t,"TFGPTJModel"),s0t.forEach(t),Kur=r(CBe," (GPT-J model)"),CBe.forEach(t),Zur=i(j),oM=n(j,"LI",{});var wBe=s(oM);s4e=n(wBe,"STRONG",{});var l0t=s(s4e);e_r=r(l0t,"hubert"),l0t.forEach(t),o_r=r(wBe," \u2014 "),rH=n(wBe,"A",{href:!0});var i0t=s(rH);r_r=r(i0t,"TFHubertModel"),i0t.forEach(t),t_r=r(wBe," (Hubert model)"),wBe.forEach(t),a_r=i(j),rM=n(j,"LI",{});var ABe=s(rM);l4e=n(ABe,"STRONG",{});var d0t=s(l4e);n_r=r(d0t,"layoutlm"),d0t.forEach(t),s_r=r(ABe," \u2014 "),tH=n(ABe,"A",{href:!0});var c0t=s(tH);l_r=r(c0t,"TFLayoutLMModel"),c0t.forEach(t),i_r=r(ABe," (LayoutLM model)"),ABe.forEach(t),d_r=i(j),tM=n(j,"LI",{});var LBe=s(tM);i4e=n(LBe,"STRONG",{});var f0t=s(i4e);c_r=r(f0t,"led"),f0t.forEach(t),f_r=r(LBe," \u2014 "),aH=n(LBe,"A",{href:!0});var m0t=s(aH);m_r=r(m0t,"TFLEDModel"),m0t.forEach(t),g_r=r(LBe," (LED model)"),LBe.forEach(t),h_r=i(j),aM=n(j,"LI",{});var yBe=s(aM);d4e=n(yBe,"STRONG",{});var g0t=s(d4e);p_r=r(g0t,"longformer"),g0t.forEach(t),u_r=r(yBe," \u2014 "),nH=n(yBe,"A",{href:!0});var h0t=s(nH);__r=r(h0t,"TFLongformerModel"),h0t.forEach(t),b_r=r(yBe," (Longformer model)"),yBe.forEach(t),v_r=i(j),nM=n(j,"LI",{});var xBe=s(nM);c4e=n(xBe,"STRONG",{});var p0t=s(c4e);F_r=r(p0t,"lxmert"),p0t.forEach(t),T_r=r(xBe," \u2014 "),sH=n(xBe,"A",{href:!0});var u0t=s(sH);M_r=r(u0t,"TFLxmertModel"),u0t.forEach(t),E_r=r(xBe," (LXMERT model)"),xBe.forEach(t),C_r=i(j),sM=n(j,"LI",{});var $Be=s(sM);f4e=n($Be,"STRONG",{});var _0t=s(f4e);w_r=r(_0t,"marian"),_0t.forEach(t),A_r=r($Be," \u2014 "),lH=n($Be,"A",{href:!0});var b0t=s(lH);L_r=r(b0t,"TFMarianModel"),b0t.forEach(t),y_r=r($Be," (Marian model)"),$Be.forEach(t),x_r=i(j),lM=n(j,"LI",{});var kBe=s(lM);m4e=n(kBe,"STRONG",{});var v0t=s(m4e);$_r=r(v0t,"mbart"),v0t.forEach(t),k_r=r(kBe," \u2014 "),iH=n(kBe,"A",{href:!0});var F0t=s(iH);S_r=r(F0t,"TFMBartModel"),F0t.forEach(t),R_r=r(kBe," (mBART model)"),kBe.forEach(t),P_r=i(j),iM=n(j,"LI",{});var SBe=s(iM);g4e=n(SBe,"STRONG",{});var T0t=s(g4e);B_r=r(T0t,"mobilebert"),T0t.forEach(t),I_r=r(SBe," \u2014 "),dH=n(SBe,"A",{href:!0});var M0t=s(dH);N_r=r(M0t,"TFMobileBertModel"),M0t.forEach(t),q_r=r(SBe," (MobileBERT model)"),SBe.forEach(t),j_r=i(j),dM=n(j,"LI",{});var RBe=s(dM);h4e=n(RBe,"STRONG",{});var E0t=s(h4e);D_r=r(E0t,"mpnet"),E0t.forEach(t),G_r=r(RBe," \u2014 "),cH=n(RBe,"A",{href:!0});var C0t=s(cH);O_r=r(C0t,"TFMPNetModel"),C0t.forEach(t),V_r=r(RBe," (MPNet model)"),RBe.forEach(t),X_r=i(j),cM=n(j,"LI",{});var PBe=s(cM);p4e=n(PBe,"STRONG",{});var w0t=s(p4e);z_r=r(w0t,"mt5"),w0t.forEach(t),W_r=r(PBe," \u2014 "),fH=n(PBe,"A",{href:!0});var A0t=s(fH);Q_r=r(A0t,"TFMT5Model"),A0t.forEach(t),H_r=r(PBe," (MT5 model)"),PBe.forEach(t),U_r=i(j),fM=n(j,"LI",{});var BBe=s(fM);u4e=n(BBe,"STRONG",{});var L0t=s(u4e);J_r=r(L0t,"openai-gpt"),L0t.forEach(t),Y_r=r(BBe," \u2014 "),mH=n(BBe,"A",{href:!0});var y0t=s(mH);K_r=r(y0t,"TFOpenAIGPTModel"),y0t.forEach(t),Z_r=r(BBe," (OpenAI GPT model)"),BBe.forEach(t),e2r=i(j),mM=n(j,"LI",{});var IBe=s(mM);_4e=n(IBe,"STRONG",{});var x0t=s(_4e);o2r=r(x0t,"opt"),x0t.forEach(t),r2r=r(IBe," \u2014 "),gH=n(IBe,"A",{href:!0});var $0t=s(gH);t2r=r($0t,"TFOPTModel"),$0t.forEach(t),a2r=r(IBe," (OPT model)"),IBe.forEach(t),n2r=i(j),gM=n(j,"LI",{});var NBe=s(gM);b4e=n(NBe,"STRONG",{});var k0t=s(b4e);s2r=r(k0t,"pegasus"),k0t.forEach(t),l2r=r(NBe," \u2014 "),hH=n(NBe,"A",{href:!0});var S0t=s(hH);i2r=r(S0t,"TFPegasusModel"),S0t.forEach(t),d2r=r(NBe," (Pegasus model)"),NBe.forEach(t),c2r=i(j),hM=n(j,"LI",{});var qBe=s(hM);v4e=n(qBe,"STRONG",{});var R0t=s(v4e);f2r=r(R0t,"rembert"),R0t.forEach(t),m2r=r(qBe," \u2014 "),pH=n(qBe,"A",{href:!0});var P0t=s(pH);g2r=r(P0t,"TFRemBertModel"),P0t.forEach(t),h2r=r(qBe," (RemBERT model)"),qBe.forEach(t),p2r=i(j),pM=n(j,"LI",{});var jBe=s(pM);F4e=n(jBe,"STRONG",{});var B0t=s(F4e);u2r=r(B0t,"resnet"),B0t.forEach(t),_2r=r(jBe," \u2014 "),uH=n(jBe,"A",{href:!0});var I0t=s(uH);b2r=r(I0t,"TFResNetModel"),I0t.forEach(t),v2r=r(jBe," (ResNet model)"),jBe.forEach(t),F2r=i(j),uM=n(j,"LI",{});var DBe=s(uM);T4e=n(DBe,"STRONG",{});var N0t=s(T4e);T2r=r(N0t,"roberta"),N0t.forEach(t),M2r=r(DBe," \u2014 "),_H=n(DBe,"A",{href:!0});var q0t=s(_H);E2r=r(q0t,"TFRobertaModel"),q0t.forEach(t),C2r=r(DBe," (RoBERTa model)"),DBe.forEach(t),w2r=i(j),_M=n(j,"LI",{});var GBe=s(_M);M4e=n(GBe,"STRONG",{});var j0t=s(M4e);A2r=r(j0t,"roformer"),j0t.forEach(t),L2r=r(GBe," \u2014 "),bH=n(GBe,"A",{href:!0});var D0t=s(bH);y2r=r(D0t,"TFRoFormerModel"),D0t.forEach(t),x2r=r(GBe," (RoFormer model)"),GBe.forEach(t),$2r=i(j),bM=n(j,"LI",{});var OBe=s(bM);E4e=n(OBe,"STRONG",{});var G0t=s(E4e);k2r=r(G0t,"speech_to_text"),G0t.forEach(t),S2r=r(OBe," \u2014 "),vH=n(OBe,"A",{href:!0});var O0t=s(vH);R2r=r(O0t,"TFSpeech2TextModel"),O0t.forEach(t),P2r=r(OBe," (Speech2Text model)"),OBe.forEach(t),B2r=i(j),vM=n(j,"LI",{});var VBe=s(vM);C4e=n(VBe,"STRONG",{});var V0t=s(C4e);I2r=r(V0t,"swin"),V0t.forEach(t),N2r=r(VBe," \u2014 "),FH=n(VBe,"A",{href:!0});var X0t=s(FH);q2r=r(X0t,"TFSwinModel"),X0t.forEach(t),j2r=r(VBe," (Swin Transformer model)"),VBe.forEach(t),D2r=i(j),FM=n(j,"LI",{});var XBe=s(FM);w4e=n(XBe,"STRONG",{});var z0t=s(w4e);G2r=r(z0t,"t5"),z0t.forEach(t),O2r=r(XBe," \u2014 "),TH=n(XBe,"A",{href:!0});var W0t=s(TH);V2r=r(W0t,"TFT5Model"),W0t.forEach(t),X2r=r(XBe," (T5 model)"),XBe.forEach(t),z2r=i(j),TM=n(j,"LI",{});var zBe=s(TM);A4e=n(zBe,"STRONG",{});var Q0t=s(A4e);W2r=r(Q0t,"tapas"),Q0t.forEach(t),Q2r=r(zBe," \u2014 "),MH=n(zBe,"A",{href:!0});var H0t=s(MH);H2r=r(H0t,"TFTapasModel"),H0t.forEach(t),U2r=r(zBe," (TAPAS model)"),zBe.forEach(t),J2r=i(j),MM=n(j,"LI",{});var WBe=s(MM);L4e=n(WBe,"STRONG",{});var U0t=s(L4e);Y2r=r(U0t,"transfo-xl"),U0t.forEach(t),K2r=r(WBe," \u2014 "),EH=n(WBe,"A",{href:!0});var J0t=s(EH);Z2r=r(J0t,"TFTransfoXLModel"),J0t.forEach(t),e1r=r(WBe," (Transformer-XL model)"),WBe.forEach(t),o1r=i(j),EM=n(j,"LI",{});var QBe=s(EM);y4e=n(QBe,"STRONG",{});var Y0t=s(y4e);r1r=r(Y0t,"vit"),Y0t.forEach(t),t1r=r(QBe," \u2014 "),CH=n(QBe,"A",{href:!0});var K0t=s(CH);a1r=r(K0t,"TFViTModel"),K0t.forEach(t),n1r=r(QBe," (ViT model)"),QBe.forEach(t),s1r=i(j),CM=n(j,"LI",{});var HBe=s(CM);x4e=n(HBe,"STRONG",{});var Z0t=s(x4e);l1r=r(Z0t,"vit_mae"),Z0t.forEach(t),i1r=r(HBe," \u2014 "),wH=n(HBe,"A",{href:!0});var ewt=s(wH);d1r=r(ewt,"TFViTMAEModel"),ewt.forEach(t),c1r=r(HBe," (ViTMAE model)"),HBe.forEach(t),f1r=i(j),wM=n(j,"LI",{});var UBe=s(wM);$4e=n(UBe,"STRONG",{});var owt=s($4e);m1r=r(owt,"wav2vec2"),owt.forEach(t),g1r=r(UBe," \u2014 "),AH=n(UBe,"A",{href:!0});var rwt=s(AH);h1r=r(rwt,"TFWav2Vec2Model"),rwt.forEach(t),p1r=r(UBe," (Wav2Vec2 model)"),UBe.forEach(t),u1r=i(j),AM=n(j,"LI",{});var JBe=s(AM);k4e=n(JBe,"STRONG",{});var twt=s(k4e);_1r=r(twt,"xlm"),twt.forEach(t),b1r=r(JBe," \u2014 "),LH=n(JBe,"A",{href:!0});var awt=s(LH);v1r=r(awt,"TFXLMModel"),awt.forEach(t),F1r=r(JBe," (XLM model)"),JBe.forEach(t),T1r=i(j),LM=n(j,"LI",{});var YBe=s(LM);S4e=n(YBe,"STRONG",{});var nwt=s(S4e);M1r=r(nwt,"xlm-roberta"),nwt.forEach(t),E1r=r(YBe," \u2014 "),yH=n(YBe,"A",{href:!0});var swt=s(yH);C1r=r(swt,"TFXLMRobertaModel"),swt.forEach(t),w1r=r(YBe," (XLM-RoBERTa model)"),YBe.forEach(t),A1r=i(j),yM=n(j,"LI",{});var KBe=s(yM);R4e=n(KBe,"STRONG",{});var lwt=s(R4e);L1r=r(lwt,"xlnet"),lwt.forEach(t),y1r=r(KBe," \u2014 "),xH=n(KBe,"A",{href:!0});var iwt=s(xH);x1r=r(iwt,"TFXLNetModel"),iwt.forEach(t),$1r=r(KBe," (XLNet model)"),KBe.forEach(t),j.forEach(t),k1r=i(El),T(xM.$$.fragment,El),El.forEach(t),Ml.forEach(t),lOe=i(f),tc=n(f,"H2",{class:!0});var pXe=s(tc);$M=n(pXe,"A",{id:!0,class:!0,href:!0});var dwt=s($M);P4e=n(dwt,"SPAN",{});var cwt=s(P4e);T(c9.$$.fragment,cwt),cwt.forEach(t),dwt.forEach(t),S1r=i(pXe),B4e=n(pXe,"SPAN",{});var fwt=s(B4e);R1r=r(fwt,"TFAutoModelForPreTraining"),fwt.forEach(t),pXe.forEach(t),iOe=i(f),er=n(f,"DIV",{class:!0});var Cl=s(er);T(f9.$$.fragment,Cl),P1r=i(Cl),ac=n(Cl,"P",{});var Hoe=s(ac);B1r=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),$H=n(Hoe,"A",{href:!0});var mwt=s($H);I1r=r(mwt,"from_pretrained()"),mwt.forEach(t),N1r=r(Hoe," class method or the "),kH=n(Hoe,"A",{href:!0});var gwt=s(kH);q1r=r(gwt,"from_config()"),gwt.forEach(t),j1r=r(Hoe,` class
method.`),Hoe.forEach(t),D1r=i(Cl),m9=n(Cl,"P",{});var uXe=s(m9);G1r=r(uXe,"This class cannot be instantiated directly using "),I4e=n(uXe,"CODE",{});var hwt=s(I4e);O1r=r(hwt,"__init__()"),hwt.forEach(t),V1r=r(uXe," (throws an error)."),uXe.forEach(t),X1r=i(Cl),St=n(Cl,"DIV",{class:!0});var v6=s(St);T(g9.$$.fragment,v6),z1r=i(v6),N4e=n(v6,"P",{});var pwt=s(N4e);W1r=r(pwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pwt.forEach(t),Q1r=i(v6),nc=n(v6,"P",{});var Uoe=s(nc);H1r=r(Uoe,`Note:
Loading a model from its configuration file does `),q4e=n(Uoe,"STRONG",{});var uwt=s(q4e);U1r=r(uwt,"not"),uwt.forEach(t),J1r=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(Uoe,"A",{href:!0});var _wt=s(SH);Y1r=r(_wt,"from_pretrained()"),_wt.forEach(t),K1r=r(Uoe," to load the model weights."),Uoe.forEach(t),Z1r=i(v6),T(kM.$$.fragment,v6),v6.forEach(t),e7r=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(h9.$$.fragment,wl),o7r=i(wl),j4e=n(wl,"P",{});var bwt=s(j4e);r7r=r(bwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bwt.forEach(t),t7r=i(wl),nn=n(wl,"P",{});var F6=s(nn);a7r=r(F6,"The model class to instantiate is selected based on the "),D4e=n(F6,"CODE",{});var vwt=s(D4e);n7r=r(vwt,"model_type"),vwt.forEach(t),s7r=r(F6,` property of the config object (either
passed as an argument or loaded from `),G4e=n(F6,"CODE",{});var Fwt=s(G4e);l7r=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),i7r=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(F6,"CODE",{});var Twt=s(O4e);d7r=r(Twt,"pretrained_model_name_or_path"),Twt.forEach(t),c7r=r(F6,":"),F6.forEach(t),f7r=i(wl),se=n(wl,"UL",{});var le=s(se);SM=n(le,"LI",{});var ZBe=s(SM);V4e=n(ZBe,"STRONG",{});var Mwt=s(V4e);m7r=r(Mwt,"albert"),Mwt.forEach(t),g7r=r(ZBe," \u2014 "),RH=n(ZBe,"A",{href:!0});var Ewt=s(RH);h7r=r(Ewt,"TFAlbertForPreTraining"),Ewt.forEach(t),p7r=r(ZBe," (ALBERT model)"),ZBe.forEach(t),u7r=i(le),RM=n(le,"LI",{});var eIe=s(RM);X4e=n(eIe,"STRONG",{});var Cwt=s(X4e);_7r=r(Cwt,"bart"),Cwt.forEach(t),b7r=r(eIe," \u2014 "),PH=n(eIe,"A",{href:!0});var wwt=s(PH);v7r=r(wwt,"TFBartForConditionalGeneration"),wwt.forEach(t),F7r=r(eIe," (BART model)"),eIe.forEach(t),T7r=i(le),PM=n(le,"LI",{});var oIe=s(PM);z4e=n(oIe,"STRONG",{});var Awt=s(z4e);M7r=r(Awt,"bert"),Awt.forEach(t),E7r=r(oIe," \u2014 "),BH=n(oIe,"A",{href:!0});var Lwt=s(BH);C7r=r(Lwt,"TFBertForPreTraining"),Lwt.forEach(t),w7r=r(oIe," (BERT model)"),oIe.forEach(t),A7r=i(le),BM=n(le,"LI",{});var rIe=s(BM);W4e=n(rIe,"STRONG",{});var ywt=s(W4e);L7r=r(ywt,"camembert"),ywt.forEach(t),y7r=r(rIe," \u2014 "),IH=n(rIe,"A",{href:!0});var xwt=s(IH);x7r=r(xwt,"TFCamembertForMaskedLM"),xwt.forEach(t),$7r=r(rIe," (CamemBERT model)"),rIe.forEach(t),k7r=i(le),IM=n(le,"LI",{});var tIe=s(IM);Q4e=n(tIe,"STRONG",{});var $wt=s(Q4e);S7r=r($wt,"ctrl"),$wt.forEach(t),R7r=r(tIe," \u2014 "),NH=n(tIe,"A",{href:!0});var kwt=s(NH);P7r=r(kwt,"TFCTRLLMHeadModel"),kwt.forEach(t),B7r=r(tIe," (CTRL model)"),tIe.forEach(t),I7r=i(le),NM=n(le,"LI",{});var aIe=s(NM);H4e=n(aIe,"STRONG",{});var Swt=s(H4e);N7r=r(Swt,"distilbert"),Swt.forEach(t),q7r=r(aIe," \u2014 "),qH=n(aIe,"A",{href:!0});var Rwt=s(qH);j7r=r(Rwt,"TFDistilBertForMaskedLM"),Rwt.forEach(t),D7r=r(aIe," (DistilBERT model)"),aIe.forEach(t),G7r=i(le),qM=n(le,"LI",{});var nIe=s(qM);U4e=n(nIe,"STRONG",{});var Pwt=s(U4e);O7r=r(Pwt,"electra"),Pwt.forEach(t),V7r=r(nIe," \u2014 "),jH=n(nIe,"A",{href:!0});var Bwt=s(jH);X7r=r(Bwt,"TFElectraForPreTraining"),Bwt.forEach(t),z7r=r(nIe," (ELECTRA model)"),nIe.forEach(t),W7r=i(le),jM=n(le,"LI",{});var sIe=s(jM);J4e=n(sIe,"STRONG",{});var Iwt=s(J4e);Q7r=r(Iwt,"flaubert"),Iwt.forEach(t),H7r=r(sIe," \u2014 "),DH=n(sIe,"A",{href:!0});var Nwt=s(DH);U7r=r(Nwt,"TFFlaubertWithLMHeadModel"),Nwt.forEach(t),J7r=r(sIe," (FlauBERT model)"),sIe.forEach(t),Y7r=i(le),DM=n(le,"LI",{});var lIe=s(DM);Y4e=n(lIe,"STRONG",{});var qwt=s(Y4e);K7r=r(qwt,"funnel"),qwt.forEach(t),Z7r=r(lIe," \u2014 "),GH=n(lIe,"A",{href:!0});var jwt=s(GH);ebr=r(jwt,"TFFunnelForPreTraining"),jwt.forEach(t),obr=r(lIe," (Funnel Transformer model)"),lIe.forEach(t),rbr=i(le),GM=n(le,"LI",{});var iIe=s(GM);K4e=n(iIe,"STRONG",{});var Dwt=s(K4e);tbr=r(Dwt,"gpt2"),Dwt.forEach(t),abr=r(iIe," \u2014 "),OH=n(iIe,"A",{href:!0});var Gwt=s(OH);nbr=r(Gwt,"TFGPT2LMHeadModel"),Gwt.forEach(t),sbr=r(iIe," (OpenAI GPT-2 model)"),iIe.forEach(t),lbr=i(le),OM=n(le,"LI",{});var dIe=s(OM);Z4e=n(dIe,"STRONG",{});var Owt=s(Z4e);ibr=r(Owt,"layoutlm"),Owt.forEach(t),dbr=r(dIe," \u2014 "),VH=n(dIe,"A",{href:!0});var Vwt=s(VH);cbr=r(Vwt,"TFLayoutLMForMaskedLM"),Vwt.forEach(t),fbr=r(dIe," (LayoutLM model)"),dIe.forEach(t),mbr=i(le),VM=n(le,"LI",{});var cIe=s(VM);eve=n(cIe,"STRONG",{});var Xwt=s(eve);gbr=r(Xwt,"lxmert"),Xwt.forEach(t),hbr=r(cIe," \u2014 "),XH=n(cIe,"A",{href:!0});var zwt=s(XH);pbr=r(zwt,"TFLxmertForPreTraining"),zwt.forEach(t),ubr=r(cIe," (LXMERT model)"),cIe.forEach(t),_br=i(le),XM=n(le,"LI",{});var fIe=s(XM);ove=n(fIe,"STRONG",{});var Wwt=s(ove);bbr=r(Wwt,"mobilebert"),Wwt.forEach(t),vbr=r(fIe," \u2014 "),zH=n(fIe,"A",{href:!0});var Qwt=s(zH);Fbr=r(Qwt,"TFMobileBertForPreTraining"),Qwt.forEach(t),Tbr=r(fIe," (MobileBERT model)"),fIe.forEach(t),Mbr=i(le),zM=n(le,"LI",{});var mIe=s(zM);rve=n(mIe,"STRONG",{});var Hwt=s(rve);Ebr=r(Hwt,"mpnet"),Hwt.forEach(t),Cbr=r(mIe," \u2014 "),WH=n(mIe,"A",{href:!0});var Uwt=s(WH);wbr=r(Uwt,"TFMPNetForMaskedLM"),Uwt.forEach(t),Abr=r(mIe," (MPNet model)"),mIe.forEach(t),Lbr=i(le),WM=n(le,"LI",{});var gIe=s(WM);tve=n(gIe,"STRONG",{});var Jwt=s(tve);ybr=r(Jwt,"openai-gpt"),Jwt.forEach(t),xbr=r(gIe," \u2014 "),QH=n(gIe,"A",{href:!0});var Ywt=s(QH);$br=r(Ywt,"TFOpenAIGPTLMHeadModel"),Ywt.forEach(t),kbr=r(gIe," (OpenAI GPT model)"),gIe.forEach(t),Sbr=i(le),QM=n(le,"LI",{});var hIe=s(QM);ave=n(hIe,"STRONG",{});var Kwt=s(ave);Rbr=r(Kwt,"roberta"),Kwt.forEach(t),Pbr=r(hIe," \u2014 "),HH=n(hIe,"A",{href:!0});var Zwt=s(HH);Bbr=r(Zwt,"TFRobertaForMaskedLM"),Zwt.forEach(t),Ibr=r(hIe," (RoBERTa model)"),hIe.forEach(t),Nbr=i(le),HM=n(le,"LI",{});var pIe=s(HM);nve=n(pIe,"STRONG",{});var eAt=s(nve);qbr=r(eAt,"t5"),eAt.forEach(t),jbr=r(pIe," \u2014 "),UH=n(pIe,"A",{href:!0});var oAt=s(UH);Dbr=r(oAt,"TFT5ForConditionalGeneration"),oAt.forEach(t),Gbr=r(pIe," (T5 model)"),pIe.forEach(t),Obr=i(le),UM=n(le,"LI",{});var uIe=s(UM);sve=n(uIe,"STRONG",{});var rAt=s(sve);Vbr=r(rAt,"tapas"),rAt.forEach(t),Xbr=r(uIe," \u2014 "),JH=n(uIe,"A",{href:!0});var tAt=s(JH);zbr=r(tAt,"TFTapasForMaskedLM"),tAt.forEach(t),Wbr=r(uIe," (TAPAS model)"),uIe.forEach(t),Qbr=i(le),JM=n(le,"LI",{});var _Ie=s(JM);lve=n(_Ie,"STRONG",{});var aAt=s(lve);Hbr=r(aAt,"transfo-xl"),aAt.forEach(t),Ubr=r(_Ie," \u2014 "),YH=n(_Ie,"A",{href:!0});var nAt=s(YH);Jbr=r(nAt,"TFTransfoXLLMHeadModel"),nAt.forEach(t),Ybr=r(_Ie," (Transformer-XL model)"),_Ie.forEach(t),Kbr=i(le),YM=n(le,"LI",{});var bIe=s(YM);ive=n(bIe,"STRONG",{});var sAt=s(ive);Zbr=r(sAt,"vit_mae"),sAt.forEach(t),e4r=r(bIe," \u2014 "),KH=n(bIe,"A",{href:!0});var lAt=s(KH);o4r=r(lAt,"TFViTMAEForPreTraining"),lAt.forEach(t),r4r=r(bIe," (ViTMAE model)"),bIe.forEach(t),t4r=i(le),KM=n(le,"LI",{});var vIe=s(KM);dve=n(vIe,"STRONG",{});var iAt=s(dve);a4r=r(iAt,"xlm"),iAt.forEach(t),n4r=r(vIe," \u2014 "),ZH=n(vIe,"A",{href:!0});var dAt=s(ZH);s4r=r(dAt,"TFXLMWithLMHeadModel"),dAt.forEach(t),l4r=r(vIe," (XLM model)"),vIe.forEach(t),i4r=i(le),ZM=n(le,"LI",{});var FIe=s(ZM);cve=n(FIe,"STRONG",{});var cAt=s(cve);d4r=r(cAt,"xlm-roberta"),cAt.forEach(t),c4r=r(FIe," \u2014 "),eU=n(FIe,"A",{href:!0});var fAt=s(eU);f4r=r(fAt,"TFXLMRobertaForMaskedLM"),fAt.forEach(t),m4r=r(FIe," (XLM-RoBERTa model)"),FIe.forEach(t),g4r=i(le),eE=n(le,"LI",{});var TIe=s(eE);fve=n(TIe,"STRONG",{});var mAt=s(fve);h4r=r(mAt,"xlnet"),mAt.forEach(t),p4r=r(TIe," \u2014 "),oU=n(TIe,"A",{href:!0});var gAt=s(oU);u4r=r(gAt,"TFXLNetLMHeadModel"),gAt.forEach(t),_4r=r(TIe," (XLNet model)"),TIe.forEach(t),le.forEach(t),b4r=i(wl),T(oE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),dOe=i(f),sc=n(f,"H2",{class:!0});var _Xe=s(sc);rE=n(_Xe,"A",{id:!0,class:!0,href:!0});var hAt=s(rE);mve=n(hAt,"SPAN",{});var pAt=s(mve);T(p9.$$.fragment,pAt),pAt.forEach(t),hAt.forEach(t),v4r=i(_Xe),gve=n(_Xe,"SPAN",{});var uAt=s(gve);F4r=r(uAt,"TFAutoModelForCausalLM"),uAt.forEach(t),_Xe.forEach(t),cOe=i(f),or=n(f,"DIV",{class:!0});var Al=s(or);T(u9.$$.fragment,Al),T4r=i(Al),lc=n(Al,"P",{});var Joe=s(lc);M4r=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),rU=n(Joe,"A",{href:!0});var _At=s(rU);E4r=r(_At,"from_pretrained()"),_At.forEach(t),C4r=r(Joe," class method or the "),tU=n(Joe,"A",{href:!0});var bAt=s(tU);w4r=r(bAt,"from_config()"),bAt.forEach(t),A4r=r(Joe,` class
method.`),Joe.forEach(t),L4r=i(Al),_9=n(Al,"P",{});var bXe=s(_9);y4r=r(bXe,"This class cannot be instantiated directly using "),hve=n(bXe,"CODE",{});var vAt=s(hve);x4r=r(vAt,"__init__()"),vAt.forEach(t),$4r=r(bXe," (throws an error)."),bXe.forEach(t),k4r=i(Al),Rt=n(Al,"DIV",{class:!0});var T6=s(Rt);T(b9.$$.fragment,T6),S4r=i(T6),pve=n(T6,"P",{});var FAt=s(pve);R4r=r(FAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FAt.forEach(t),P4r=i(T6),ic=n(T6,"P",{});var Yoe=s(ic);B4r=r(Yoe,`Note:
Loading a model from its configuration file does `),uve=n(Yoe,"STRONG",{});var TAt=s(uve);I4r=r(TAt,"not"),TAt.forEach(t),N4r=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),aU=n(Yoe,"A",{href:!0});var MAt=s(aU);q4r=r(MAt,"from_pretrained()"),MAt.forEach(t),j4r=r(Yoe," to load the model weights."),Yoe.forEach(t),D4r=i(T6),T(tE.$$.fragment,T6),T6.forEach(t),G4r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(v9.$$.fragment,Ll),O4r=i(Ll),_ve=n(Ll,"P",{});var EAt=s(_ve);V4r=r(EAt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EAt.forEach(t),X4r=i(Ll),sn=n(Ll,"P",{});var M6=s(sn);z4r=r(M6,"The model class to instantiate is selected based on the "),bve=n(M6,"CODE",{});var CAt=s(bve);W4r=r(CAt,"model_type"),CAt.forEach(t),Q4r=r(M6,` property of the config object (either
passed as an argument or loaded from `),vve=n(M6,"CODE",{});var wAt=s(vve);H4r=r(wAt,"pretrained_model_name_or_path"),wAt.forEach(t),U4r=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fve=n(M6,"CODE",{});var AAt=s(Fve);J4r=r(AAt,"pretrained_model_name_or_path"),AAt.forEach(t),Y4r=r(M6,":"),M6.forEach(t),K4r=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);aE=n(Ce,"LI",{});var MIe=s(aE);Tve=n(MIe,"STRONG",{});var LAt=s(Tve);Z4r=r(LAt,"bert"),LAt.forEach(t),evr=r(MIe," \u2014 "),nU=n(MIe,"A",{href:!0});var yAt=s(nU);ovr=r(yAt,"TFBertLMHeadModel"),yAt.forEach(t),rvr=r(MIe," (BERT model)"),MIe.forEach(t),tvr=i(Ce),nE=n(Ce,"LI",{});var EIe=s(nE);Mve=n(EIe,"STRONG",{});var xAt=s(Mve);avr=r(xAt,"camembert"),xAt.forEach(t),nvr=r(EIe," \u2014 "),sU=n(EIe,"A",{href:!0});var $At=s(sU);svr=r($At,"TFCamembertForCausalLM"),$At.forEach(t),lvr=r(EIe," (CamemBERT model)"),EIe.forEach(t),ivr=i(Ce),sE=n(Ce,"LI",{});var CIe=s(sE);Eve=n(CIe,"STRONG",{});var kAt=s(Eve);dvr=r(kAt,"ctrl"),kAt.forEach(t),cvr=r(CIe," \u2014 "),lU=n(CIe,"A",{href:!0});var SAt=s(lU);fvr=r(SAt,"TFCTRLLMHeadModel"),SAt.forEach(t),mvr=r(CIe," (CTRL model)"),CIe.forEach(t),gvr=i(Ce),lE=n(Ce,"LI",{});var wIe=s(lE);Cve=n(wIe,"STRONG",{});var RAt=s(Cve);hvr=r(RAt,"gpt2"),RAt.forEach(t),pvr=r(wIe," \u2014 "),iU=n(wIe,"A",{href:!0});var PAt=s(iU);uvr=r(PAt,"TFGPT2LMHeadModel"),PAt.forEach(t),_vr=r(wIe," (OpenAI GPT-2 model)"),wIe.forEach(t),bvr=i(Ce),iE=n(Ce,"LI",{});var AIe=s(iE);wve=n(AIe,"STRONG",{});var BAt=s(wve);vvr=r(BAt,"gptj"),BAt.forEach(t),Fvr=r(AIe," \u2014 "),dU=n(AIe,"A",{href:!0});var IAt=s(dU);Tvr=r(IAt,"TFGPTJForCausalLM"),IAt.forEach(t),Mvr=r(AIe," (GPT-J model)"),AIe.forEach(t),Evr=i(Ce),dE=n(Ce,"LI",{});var LIe=s(dE);Ave=n(LIe,"STRONG",{});var NAt=s(Ave);Cvr=r(NAt,"openai-gpt"),NAt.forEach(t),wvr=r(LIe," \u2014 "),cU=n(LIe,"A",{href:!0});var qAt=s(cU);Avr=r(qAt,"TFOpenAIGPTLMHeadModel"),qAt.forEach(t),Lvr=r(LIe," (OpenAI GPT model)"),LIe.forEach(t),yvr=i(Ce),cE=n(Ce,"LI",{});var yIe=s(cE);Lve=n(yIe,"STRONG",{});var jAt=s(Lve);xvr=r(jAt,"opt"),jAt.forEach(t),$vr=r(yIe," \u2014 "),fU=n(yIe,"A",{href:!0});var DAt=s(fU);kvr=r(DAt,"TFOPTForCausalLM"),DAt.forEach(t),Svr=r(yIe," (OPT model)"),yIe.forEach(t),Rvr=i(Ce),fE=n(Ce,"LI",{});var xIe=s(fE);yve=n(xIe,"STRONG",{});var GAt=s(yve);Pvr=r(GAt,"rembert"),GAt.forEach(t),Bvr=r(xIe," \u2014 "),mU=n(xIe,"A",{href:!0});var OAt=s(mU);Ivr=r(OAt,"TFRemBertForCausalLM"),OAt.forEach(t),Nvr=r(xIe," (RemBERT model)"),xIe.forEach(t),qvr=i(Ce),mE=n(Ce,"LI",{});var $Ie=s(mE);xve=n($Ie,"STRONG",{});var VAt=s(xve);jvr=r(VAt,"roberta"),VAt.forEach(t),Dvr=r($Ie," \u2014 "),gU=n($Ie,"A",{href:!0});var XAt=s(gU);Gvr=r(XAt,"TFRobertaForCausalLM"),XAt.forEach(t),Ovr=r($Ie," (RoBERTa model)"),$Ie.forEach(t),Vvr=i(Ce),gE=n(Ce,"LI",{});var kIe=s(gE);$ve=n(kIe,"STRONG",{});var zAt=s($ve);Xvr=r(zAt,"roformer"),zAt.forEach(t),zvr=r(kIe," \u2014 "),hU=n(kIe,"A",{href:!0});var WAt=s(hU);Wvr=r(WAt,"TFRoFormerForCausalLM"),WAt.forEach(t),Qvr=r(kIe," (RoFormer model)"),kIe.forEach(t),Hvr=i(Ce),hE=n(Ce,"LI",{});var SIe=s(hE);kve=n(SIe,"STRONG",{});var QAt=s(kve);Uvr=r(QAt,"transfo-xl"),QAt.forEach(t),Jvr=r(SIe," \u2014 "),pU=n(SIe,"A",{href:!0});var HAt=s(pU);Yvr=r(HAt,"TFTransfoXLLMHeadModel"),HAt.forEach(t),Kvr=r(SIe," (Transformer-XL model)"),SIe.forEach(t),Zvr=i(Ce),pE=n(Ce,"LI",{});var RIe=s(pE);Sve=n(RIe,"STRONG",{});var UAt=s(Sve);eFr=r(UAt,"xlm"),UAt.forEach(t),oFr=r(RIe," \u2014 "),uU=n(RIe,"A",{href:!0});var JAt=s(uU);rFr=r(JAt,"TFXLMWithLMHeadModel"),JAt.forEach(t),tFr=r(RIe," (XLM model)"),RIe.forEach(t),aFr=i(Ce),uE=n(Ce,"LI",{});var PIe=s(uE);Rve=n(PIe,"STRONG",{});var YAt=s(Rve);nFr=r(YAt,"xlnet"),YAt.forEach(t),sFr=r(PIe," \u2014 "),_U=n(PIe,"A",{href:!0});var KAt=s(_U);lFr=r(KAt,"TFXLNetLMHeadModel"),KAt.forEach(t),iFr=r(PIe," (XLNet model)"),PIe.forEach(t),Ce.forEach(t),dFr=i(Ll),T(_E.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),fOe=i(f),dc=n(f,"H2",{class:!0});var vXe=s(dc);bE=n(vXe,"A",{id:!0,class:!0,href:!0});var ZAt=s(bE);Pve=n(ZAt,"SPAN",{});var e6t=s(Pve);T(F9.$$.fragment,e6t),e6t.forEach(t),ZAt.forEach(t),cFr=i(vXe),Bve=n(vXe,"SPAN",{});var o6t=s(Bve);fFr=r(o6t,"TFAutoModelForImageClassification"),o6t.forEach(t),vXe.forEach(t),mOe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(T9.$$.fragment,yl),mFr=i(yl),cc=n(yl,"P",{});var Koe=s(cc);gFr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),bU=n(Koe,"A",{href:!0});var r6t=s(bU);hFr=r(r6t,"from_pretrained()"),r6t.forEach(t),pFr=r(Koe," class method or the "),vU=n(Koe,"A",{href:!0});var t6t=s(vU);uFr=r(t6t,"from_config()"),t6t.forEach(t),_Fr=r(Koe,` class
method.`),Koe.forEach(t),bFr=i(yl),M9=n(yl,"P",{});var FXe=s(M9);vFr=r(FXe,"This class cannot be instantiated directly using "),Ive=n(FXe,"CODE",{});var a6t=s(Ive);FFr=r(a6t,"__init__()"),a6t.forEach(t),TFr=r(FXe," (throws an error)."),FXe.forEach(t),MFr=i(yl),Pt=n(yl,"DIV",{class:!0});var E6=s(Pt);T(E9.$$.fragment,E6),EFr=i(E6),Nve=n(E6,"P",{});var n6t=s(Nve);CFr=r(n6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),n6t.forEach(t),wFr=i(E6),fc=n(E6,"P",{});var Zoe=s(fc);AFr=r(Zoe,`Note:
Loading a model from its configuration file does `),qve=n(Zoe,"STRONG",{});var s6t=s(qve);LFr=r(s6t,"not"),s6t.forEach(t),yFr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(Zoe,"A",{href:!0});var l6t=s(FU);xFr=r(l6t,"from_pretrained()"),l6t.forEach(t),$Fr=r(Zoe," to load the model weights."),Zoe.forEach(t),kFr=i(E6),T(vE.$$.fragment,E6),E6.forEach(t),SFr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(C9.$$.fragment,xl),RFr=i(xl),jve=n(xl,"P",{});var i6t=s(jve);PFr=r(i6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),i6t.forEach(t),BFr=i(xl),ln=n(xl,"P",{});var C6=s(ln);IFr=r(C6,"The model class to instantiate is selected based on the "),Dve=n(C6,"CODE",{});var d6t=s(Dve);NFr=r(d6t,"model_type"),d6t.forEach(t),qFr=r(C6,` property of the config object (either
passed as an argument or loaded from `),Gve=n(C6,"CODE",{});var c6t=s(Gve);jFr=r(c6t,"pretrained_model_name_or_path"),c6t.forEach(t),DFr=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(C6,"CODE",{});var f6t=s(Ove);GFr=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),OFr=r(C6,":"),C6.forEach(t),VFr=i(xl),rt=n(xl,"UL",{});var $l=s(rt);FE=n($l,"LI",{});var BIe=s(FE);Vve=n(BIe,"STRONG",{});var m6t=s(Vve);XFr=r(m6t,"convnext"),m6t.forEach(t),zFr=r(BIe," \u2014 "),TU=n(BIe,"A",{href:!0});var g6t=s(TU);WFr=r(g6t,"TFConvNextForImageClassification"),g6t.forEach(t),QFr=r(BIe," (ConvNeXT model)"),BIe.forEach(t),HFr=i($l),TE=n($l,"LI",{});var IIe=s(TE);Xve=n(IIe,"STRONG",{});var h6t=s(Xve);UFr=r(h6t,"data2vec-vision"),h6t.forEach(t),JFr=r(IIe," \u2014 "),MU=n(IIe,"A",{href:!0});var p6t=s(MU);YFr=r(p6t,"TFData2VecVisionForImageClassification"),p6t.forEach(t),KFr=r(IIe," (Data2VecVision model)"),IIe.forEach(t),ZFr=i($l),ME=n($l,"LI",{});var NIe=s(ME);zve=n(NIe,"STRONG",{});var u6t=s(zve);eTr=r(u6t,"resnet"),u6t.forEach(t),oTr=r(NIe," \u2014 "),EU=n(NIe,"A",{href:!0});var _6t=s(EU);rTr=r(_6t,"TFResNetForImageClassification"),_6t.forEach(t),tTr=r(NIe," (ResNet model)"),NIe.forEach(t),aTr=i($l),EE=n($l,"LI",{});var qIe=s(EE);Wve=n(qIe,"STRONG",{});var b6t=s(Wve);nTr=r(b6t,"swin"),b6t.forEach(t),sTr=r(qIe," \u2014 "),CU=n(qIe,"A",{href:!0});var v6t=s(CU);lTr=r(v6t,"TFSwinForImageClassification"),v6t.forEach(t),iTr=r(qIe," (Swin Transformer model)"),qIe.forEach(t),dTr=i($l),CE=n($l,"LI",{});var jIe=s(CE);Qve=n(jIe,"STRONG",{});var F6t=s(Qve);cTr=r(F6t,"vit"),F6t.forEach(t),fTr=r(jIe," \u2014 "),wU=n(jIe,"A",{href:!0});var T6t=s(wU);mTr=r(T6t,"TFViTForImageClassification"),T6t.forEach(t),gTr=r(jIe," (ViT model)"),jIe.forEach(t),$l.forEach(t),hTr=i(xl),T(wE.$$.fragment,xl),xl.forEach(t),yl.forEach(t),gOe=i(f),mc=n(f,"H2",{class:!0});var TXe=s(mc);AE=n(TXe,"A",{id:!0,class:!0,href:!0});var M6t=s(AE);Hve=n(M6t,"SPAN",{});var E6t=s(Hve);T(w9.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),pTr=i(TXe),Uve=n(TXe,"SPAN",{});var C6t=s(Uve);uTr=r(C6t,"TFAutoModelForMaskedLM"),C6t.forEach(t),TXe.forEach(t),hOe=i(f),tr=n(f,"DIV",{class:!0});var kl=s(tr);T(A9.$$.fragment,kl),_Tr=i(kl),gc=n(kl,"P",{});var ere=s(gc);bTr=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),AU=n(ere,"A",{href:!0});var w6t=s(AU);vTr=r(w6t,"from_pretrained()"),w6t.forEach(t),FTr=r(ere," class method or the "),LU=n(ere,"A",{href:!0});var A6t=s(LU);TTr=r(A6t,"from_config()"),A6t.forEach(t),MTr=r(ere,` class
method.`),ere.forEach(t),ETr=i(kl),L9=n(kl,"P",{});var MXe=s(L9);CTr=r(MXe,"This class cannot be instantiated directly using "),Jve=n(MXe,"CODE",{});var L6t=s(Jve);wTr=r(L6t,"__init__()"),L6t.forEach(t),ATr=r(MXe," (throws an error)."),MXe.forEach(t),LTr=i(kl),Bt=n(kl,"DIV",{class:!0});var w6=s(Bt);T(y9.$$.fragment,w6),yTr=i(w6),Yve=n(w6,"P",{});var y6t=s(Yve);xTr=r(y6t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),y6t.forEach(t),$Tr=i(w6),hc=n(w6,"P",{});var ore=s(hc);kTr=r(ore,`Note:
Loading a model from its configuration file does `),Kve=n(ore,"STRONG",{});var x6t=s(Kve);STr=r(x6t,"not"),x6t.forEach(t),RTr=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),yU=n(ore,"A",{href:!0});var $6t=s(yU);PTr=r($6t,"from_pretrained()"),$6t.forEach(t),BTr=r(ore," to load the model weights."),ore.forEach(t),ITr=i(w6),T(LE.$$.fragment,w6),w6.forEach(t),NTr=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(x9.$$.fragment,Sl),qTr=i(Sl),Zve=n(Sl,"P",{});var k6t=s(Zve);jTr=r(k6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),k6t.forEach(t),DTr=i(Sl),dn=n(Sl,"P",{});var A6=s(dn);GTr=r(A6,"The model class to instantiate is selected based on the "),eFe=n(A6,"CODE",{});var S6t=s(eFe);OTr=r(S6t,"model_type"),S6t.forEach(t),VTr=r(A6,` property of the config object (either
passed as an argument or loaded from `),oFe=n(A6,"CODE",{});var R6t=s(oFe);XTr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),zTr=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rFe=n(A6,"CODE",{});var P6t=s(rFe);WTr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),QTr=r(A6,":"),A6.forEach(t),HTr=i(Sl),ie=n(Sl,"UL",{});var fe=s(ie);yE=n(fe,"LI",{});var DIe=s(yE);tFe=n(DIe,"STRONG",{});var B6t=s(tFe);UTr=r(B6t,"albert"),B6t.forEach(t),JTr=r(DIe," \u2014 "),xU=n(DIe,"A",{href:!0});var I6t=s(xU);YTr=r(I6t,"TFAlbertForMaskedLM"),I6t.forEach(t),KTr=r(DIe," (ALBERT model)"),DIe.forEach(t),ZTr=i(fe),xE=n(fe,"LI",{});var GIe=s(xE);aFe=n(GIe,"STRONG",{});var N6t=s(aFe);eMr=r(N6t,"bert"),N6t.forEach(t),oMr=r(GIe," \u2014 "),$U=n(GIe,"A",{href:!0});var q6t=s($U);rMr=r(q6t,"TFBertForMaskedLM"),q6t.forEach(t),tMr=r(GIe," (BERT model)"),GIe.forEach(t),aMr=i(fe),$E=n(fe,"LI",{});var OIe=s($E);nFe=n(OIe,"STRONG",{});var j6t=s(nFe);nMr=r(j6t,"camembert"),j6t.forEach(t),sMr=r(OIe," \u2014 "),kU=n(OIe,"A",{href:!0});var D6t=s(kU);lMr=r(D6t,"TFCamembertForMaskedLM"),D6t.forEach(t),iMr=r(OIe," (CamemBERT model)"),OIe.forEach(t),dMr=i(fe),kE=n(fe,"LI",{});var VIe=s(kE);sFe=n(VIe,"STRONG",{});var G6t=s(sFe);cMr=r(G6t,"convbert"),G6t.forEach(t),fMr=r(VIe," \u2014 "),SU=n(VIe,"A",{href:!0});var O6t=s(SU);mMr=r(O6t,"TFConvBertForMaskedLM"),O6t.forEach(t),gMr=r(VIe," (ConvBERT model)"),VIe.forEach(t),hMr=i(fe),SE=n(fe,"LI",{});var XIe=s(SE);lFe=n(XIe,"STRONG",{});var V6t=s(lFe);pMr=r(V6t,"deberta"),V6t.forEach(t),uMr=r(XIe," \u2014 "),RU=n(XIe,"A",{href:!0});var X6t=s(RU);_Mr=r(X6t,"TFDebertaForMaskedLM"),X6t.forEach(t),bMr=r(XIe," (DeBERTa model)"),XIe.forEach(t),vMr=i(fe),RE=n(fe,"LI",{});var zIe=s(RE);iFe=n(zIe,"STRONG",{});var z6t=s(iFe);FMr=r(z6t,"deberta-v2"),z6t.forEach(t),TMr=r(zIe," \u2014 "),PU=n(zIe,"A",{href:!0});var W6t=s(PU);MMr=r(W6t,"TFDebertaV2ForMaskedLM"),W6t.forEach(t),EMr=r(zIe," (DeBERTa-v2 model)"),zIe.forEach(t),CMr=i(fe),PE=n(fe,"LI",{});var WIe=s(PE);dFe=n(WIe,"STRONG",{});var Q6t=s(dFe);wMr=r(Q6t,"distilbert"),Q6t.forEach(t),AMr=r(WIe," \u2014 "),BU=n(WIe,"A",{href:!0});var H6t=s(BU);LMr=r(H6t,"TFDistilBertForMaskedLM"),H6t.forEach(t),yMr=r(WIe," (DistilBERT model)"),WIe.forEach(t),xMr=i(fe),BE=n(fe,"LI",{});var QIe=s(BE);cFe=n(QIe,"STRONG",{});var U6t=s(cFe);$Mr=r(U6t,"electra"),U6t.forEach(t),kMr=r(QIe," \u2014 "),IU=n(QIe,"A",{href:!0});var J6t=s(IU);SMr=r(J6t,"TFElectraForMaskedLM"),J6t.forEach(t),RMr=r(QIe," (ELECTRA model)"),QIe.forEach(t),PMr=i(fe),IE=n(fe,"LI",{});var HIe=s(IE);fFe=n(HIe,"STRONG",{});var Y6t=s(fFe);BMr=r(Y6t,"flaubert"),Y6t.forEach(t),IMr=r(HIe," \u2014 "),NU=n(HIe,"A",{href:!0});var K6t=s(NU);NMr=r(K6t,"TFFlaubertWithLMHeadModel"),K6t.forEach(t),qMr=r(HIe," (FlauBERT model)"),HIe.forEach(t),jMr=i(fe),NE=n(fe,"LI",{});var UIe=s(NE);mFe=n(UIe,"STRONG",{});var Z6t=s(mFe);DMr=r(Z6t,"funnel"),Z6t.forEach(t),GMr=r(UIe," \u2014 "),qU=n(UIe,"A",{href:!0});var eLt=s(qU);OMr=r(eLt,"TFFunnelForMaskedLM"),eLt.forEach(t),VMr=r(UIe," (Funnel Transformer model)"),UIe.forEach(t),XMr=i(fe),qE=n(fe,"LI",{});var JIe=s(qE);gFe=n(JIe,"STRONG",{});var oLt=s(gFe);zMr=r(oLt,"layoutlm"),oLt.forEach(t),WMr=r(JIe," \u2014 "),jU=n(JIe,"A",{href:!0});var rLt=s(jU);QMr=r(rLt,"TFLayoutLMForMaskedLM"),rLt.forEach(t),HMr=r(JIe," (LayoutLM model)"),JIe.forEach(t),UMr=i(fe),jE=n(fe,"LI",{});var YIe=s(jE);hFe=n(YIe,"STRONG",{});var tLt=s(hFe);JMr=r(tLt,"longformer"),tLt.forEach(t),YMr=r(YIe," \u2014 "),DU=n(YIe,"A",{href:!0});var aLt=s(DU);KMr=r(aLt,"TFLongformerForMaskedLM"),aLt.forEach(t),ZMr=r(YIe," (Longformer model)"),YIe.forEach(t),eEr=i(fe),DE=n(fe,"LI",{});var KIe=s(DE);pFe=n(KIe,"STRONG",{});var nLt=s(pFe);oEr=r(nLt,"mobilebert"),nLt.forEach(t),rEr=r(KIe," \u2014 "),GU=n(KIe,"A",{href:!0});var sLt=s(GU);tEr=r(sLt,"TFMobileBertForMaskedLM"),sLt.forEach(t),aEr=r(KIe," (MobileBERT model)"),KIe.forEach(t),nEr=i(fe),GE=n(fe,"LI",{});var ZIe=s(GE);uFe=n(ZIe,"STRONG",{});var lLt=s(uFe);sEr=r(lLt,"mpnet"),lLt.forEach(t),lEr=r(ZIe," \u2014 "),OU=n(ZIe,"A",{href:!0});var iLt=s(OU);iEr=r(iLt,"TFMPNetForMaskedLM"),iLt.forEach(t),dEr=r(ZIe," (MPNet model)"),ZIe.forEach(t),cEr=i(fe),OE=n(fe,"LI",{});var eNe=s(OE);_Fe=n(eNe,"STRONG",{});var dLt=s(_Fe);fEr=r(dLt,"rembert"),dLt.forEach(t),mEr=r(eNe," \u2014 "),VU=n(eNe,"A",{href:!0});var cLt=s(VU);gEr=r(cLt,"TFRemBertForMaskedLM"),cLt.forEach(t),hEr=r(eNe," (RemBERT model)"),eNe.forEach(t),pEr=i(fe),VE=n(fe,"LI",{});var oNe=s(VE);bFe=n(oNe,"STRONG",{});var fLt=s(bFe);uEr=r(fLt,"roberta"),fLt.forEach(t),_Er=r(oNe," \u2014 "),XU=n(oNe,"A",{href:!0});var mLt=s(XU);bEr=r(mLt,"TFRobertaForMaskedLM"),mLt.forEach(t),vEr=r(oNe," (RoBERTa model)"),oNe.forEach(t),FEr=i(fe),XE=n(fe,"LI",{});var rNe=s(XE);vFe=n(rNe,"STRONG",{});var gLt=s(vFe);TEr=r(gLt,"roformer"),gLt.forEach(t),MEr=r(rNe," \u2014 "),zU=n(rNe,"A",{href:!0});var hLt=s(zU);EEr=r(hLt,"TFRoFormerForMaskedLM"),hLt.forEach(t),CEr=r(rNe," (RoFormer model)"),rNe.forEach(t),wEr=i(fe),zE=n(fe,"LI",{});var tNe=s(zE);FFe=n(tNe,"STRONG",{});var pLt=s(FFe);AEr=r(pLt,"tapas"),pLt.forEach(t),LEr=r(tNe," \u2014 "),WU=n(tNe,"A",{href:!0});var uLt=s(WU);yEr=r(uLt,"TFTapasForMaskedLM"),uLt.forEach(t),xEr=r(tNe," (TAPAS model)"),tNe.forEach(t),$Er=i(fe),WE=n(fe,"LI",{});var aNe=s(WE);TFe=n(aNe,"STRONG",{});var _Lt=s(TFe);kEr=r(_Lt,"xlm"),_Lt.forEach(t),SEr=r(aNe," \u2014 "),QU=n(aNe,"A",{href:!0});var bLt=s(QU);REr=r(bLt,"TFXLMWithLMHeadModel"),bLt.forEach(t),PEr=r(aNe," (XLM model)"),aNe.forEach(t),BEr=i(fe),QE=n(fe,"LI",{});var nNe=s(QE);MFe=n(nNe,"STRONG",{});var vLt=s(MFe);IEr=r(vLt,"xlm-roberta"),vLt.forEach(t),NEr=r(nNe," \u2014 "),HU=n(nNe,"A",{href:!0});var FLt=s(HU);qEr=r(FLt,"TFXLMRobertaForMaskedLM"),FLt.forEach(t),jEr=r(nNe," (XLM-RoBERTa model)"),nNe.forEach(t),fe.forEach(t),DEr=i(Sl),T(HE.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),pOe=i(f),pc=n(f,"H2",{class:!0});var EXe=s(pc);UE=n(EXe,"A",{id:!0,class:!0,href:!0});var TLt=s(UE);EFe=n(TLt,"SPAN",{});var MLt=s(EFe);T($9.$$.fragment,MLt),MLt.forEach(t),TLt.forEach(t),GEr=i(EXe),CFe=n(EXe,"SPAN",{});var ELt=s(CFe);OEr=r(ELt,"TFAutoModelForSeq2SeqLM"),ELt.forEach(t),EXe.forEach(t),uOe=i(f),ar=n(f,"DIV",{class:!0});var Rl=s(ar);T(k9.$$.fragment,Rl),VEr=i(Rl),uc=n(Rl,"P",{});var rre=s(uc);XEr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),UU=n(rre,"A",{href:!0});var CLt=s(UU);zEr=r(CLt,"from_pretrained()"),CLt.forEach(t),WEr=r(rre," class method or the "),JU=n(rre,"A",{href:!0});var wLt=s(JU);QEr=r(wLt,"from_config()"),wLt.forEach(t),HEr=r(rre,` class
method.`),rre.forEach(t),UEr=i(Rl),S9=n(Rl,"P",{});var CXe=s(S9);JEr=r(CXe,"This class cannot be instantiated directly using "),wFe=n(CXe,"CODE",{});var ALt=s(wFe);YEr=r(ALt,"__init__()"),ALt.forEach(t),KEr=r(CXe," (throws an error)."),CXe.forEach(t),ZEr=i(Rl),It=n(Rl,"DIV",{class:!0});var L6=s(It);T(R9.$$.fragment,L6),eCr=i(L6),AFe=n(L6,"P",{});var LLt=s(AFe);oCr=r(LLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LLt.forEach(t),rCr=i(L6),_c=n(L6,"P",{});var tre=s(_c);tCr=r(tre,`Note:
Loading a model from its configuration file does `),LFe=n(tre,"STRONG",{});var yLt=s(LFe);aCr=r(yLt,"not"),yLt.forEach(t),nCr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(tre,"A",{href:!0});var xLt=s(YU);sCr=r(xLt,"from_pretrained()"),xLt.forEach(t),lCr=r(tre," to load the model weights."),tre.forEach(t),iCr=i(L6),T(JE.$$.fragment,L6),L6.forEach(t),dCr=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(P9.$$.fragment,Pl),cCr=i(Pl),yFe=n(Pl,"P",{});var $Lt=s(yFe);fCr=r($Lt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$Lt.forEach(t),mCr=i(Pl),cn=n(Pl,"P",{});var y6=s(cn);gCr=r(y6,"The model class to instantiate is selected based on the "),xFe=n(y6,"CODE",{});var kLt=s(xFe);hCr=r(kLt,"model_type"),kLt.forEach(t),pCr=r(y6,` property of the config object (either
passed as an argument or loaded from `),$Fe=n(y6,"CODE",{});var SLt=s($Fe);uCr=r(SLt,"pretrained_model_name_or_path"),SLt.forEach(t),_Cr=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kFe=n(y6,"CODE",{});var RLt=s(kFe);bCr=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),vCr=r(y6,":"),y6.forEach(t),FCr=i(Pl),ye=n(Pl,"UL",{});var Ie=s(ye);YE=n(Ie,"LI",{});var sNe=s(YE);SFe=n(sNe,"STRONG",{});var PLt=s(SFe);TCr=r(PLt,"bart"),PLt.forEach(t),MCr=r(sNe," \u2014 "),KU=n(sNe,"A",{href:!0});var BLt=s(KU);ECr=r(BLt,"TFBartForConditionalGeneration"),BLt.forEach(t),CCr=r(sNe," (BART model)"),sNe.forEach(t),wCr=i(Ie),KE=n(Ie,"LI",{});var lNe=s(KE);RFe=n(lNe,"STRONG",{});var ILt=s(RFe);ACr=r(ILt,"blenderbot"),ILt.forEach(t),LCr=r(lNe," \u2014 "),ZU=n(lNe,"A",{href:!0});var NLt=s(ZU);yCr=r(NLt,"TFBlenderbotForConditionalGeneration"),NLt.forEach(t),xCr=r(lNe," (Blenderbot model)"),lNe.forEach(t),$Cr=i(Ie),ZE=n(Ie,"LI",{});var iNe=s(ZE);PFe=n(iNe,"STRONG",{});var qLt=s(PFe);kCr=r(qLt,"blenderbot-small"),qLt.forEach(t),SCr=r(iNe," \u2014 "),eJ=n(iNe,"A",{href:!0});var jLt=s(eJ);RCr=r(jLt,"TFBlenderbotSmallForConditionalGeneration"),jLt.forEach(t),PCr=r(iNe," (BlenderbotSmall model)"),iNe.forEach(t),BCr=i(Ie),eC=n(Ie,"LI",{});var dNe=s(eC);BFe=n(dNe,"STRONG",{});var DLt=s(BFe);ICr=r(DLt,"encoder-decoder"),DLt.forEach(t),NCr=r(dNe," \u2014 "),oJ=n(dNe,"A",{href:!0});var GLt=s(oJ);qCr=r(GLt,"TFEncoderDecoderModel"),GLt.forEach(t),jCr=r(dNe," (Encoder decoder model)"),dNe.forEach(t),DCr=i(Ie),oC=n(Ie,"LI",{});var cNe=s(oC);IFe=n(cNe,"STRONG",{});var OLt=s(IFe);GCr=r(OLt,"led"),OLt.forEach(t),OCr=r(cNe," \u2014 "),rJ=n(cNe,"A",{href:!0});var VLt=s(rJ);VCr=r(VLt,"TFLEDForConditionalGeneration"),VLt.forEach(t),XCr=r(cNe," (LED model)"),cNe.forEach(t),zCr=i(Ie),rC=n(Ie,"LI",{});var fNe=s(rC);NFe=n(fNe,"STRONG",{});var XLt=s(NFe);WCr=r(XLt,"marian"),XLt.forEach(t),QCr=r(fNe," \u2014 "),tJ=n(fNe,"A",{href:!0});var zLt=s(tJ);HCr=r(zLt,"TFMarianMTModel"),zLt.forEach(t),UCr=r(fNe," (Marian model)"),fNe.forEach(t),JCr=i(Ie),tC=n(Ie,"LI",{});var mNe=s(tC);qFe=n(mNe,"STRONG",{});var WLt=s(qFe);YCr=r(WLt,"mbart"),WLt.forEach(t),KCr=r(mNe," \u2014 "),aJ=n(mNe,"A",{href:!0});var QLt=s(aJ);ZCr=r(QLt,"TFMBartForConditionalGeneration"),QLt.forEach(t),e5r=r(mNe," (mBART model)"),mNe.forEach(t),o5r=i(Ie),aC=n(Ie,"LI",{});var gNe=s(aC);jFe=n(gNe,"STRONG",{});var HLt=s(jFe);r5r=r(HLt,"mt5"),HLt.forEach(t),t5r=r(gNe," \u2014 "),nJ=n(gNe,"A",{href:!0});var ULt=s(nJ);a5r=r(ULt,"TFMT5ForConditionalGeneration"),ULt.forEach(t),n5r=r(gNe," (MT5 model)"),gNe.forEach(t),s5r=i(Ie),nC=n(Ie,"LI",{});var hNe=s(nC);DFe=n(hNe,"STRONG",{});var JLt=s(DFe);l5r=r(JLt,"pegasus"),JLt.forEach(t),i5r=r(hNe," \u2014 "),sJ=n(hNe,"A",{href:!0});var YLt=s(sJ);d5r=r(YLt,"TFPegasusForConditionalGeneration"),YLt.forEach(t),c5r=r(hNe," (Pegasus model)"),hNe.forEach(t),f5r=i(Ie),sC=n(Ie,"LI",{});var pNe=s(sC);GFe=n(pNe,"STRONG",{});var KLt=s(GFe);m5r=r(KLt,"t5"),KLt.forEach(t),g5r=r(pNe," \u2014 "),lJ=n(pNe,"A",{href:!0});var ZLt=s(lJ);h5r=r(ZLt,"TFT5ForConditionalGeneration"),ZLt.forEach(t),p5r=r(pNe," (T5 model)"),pNe.forEach(t),Ie.forEach(t),u5r=i(Pl),T(lC.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),_Oe=i(f),bc=n(f,"H2",{class:!0});var wXe=s(bc);iC=n(wXe,"A",{id:!0,class:!0,href:!0});var eyt=s(iC);OFe=n(eyt,"SPAN",{});var oyt=s(OFe);T(B9.$$.fragment,oyt),oyt.forEach(t),eyt.forEach(t),_5r=i(wXe),VFe=n(wXe,"SPAN",{});var ryt=s(VFe);b5r=r(ryt,"TFAutoModelForSequenceClassification"),ryt.forEach(t),wXe.forEach(t),bOe=i(f),nr=n(f,"DIV",{class:!0});var Bl=s(nr);T(I9.$$.fragment,Bl),v5r=i(Bl),vc=n(Bl,"P",{});var are=s(vc);F5r=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iJ=n(are,"A",{href:!0});var tyt=s(iJ);T5r=r(tyt,"from_pretrained()"),tyt.forEach(t),M5r=r(are," class method or the "),dJ=n(are,"A",{href:!0});var ayt=s(dJ);E5r=r(ayt,"from_config()"),ayt.forEach(t),C5r=r(are,` class
method.`),are.forEach(t),w5r=i(Bl),N9=n(Bl,"P",{});var AXe=s(N9);A5r=r(AXe,"This class cannot be instantiated directly using "),XFe=n(AXe,"CODE",{});var nyt=s(XFe);L5r=r(nyt,"__init__()"),nyt.forEach(t),y5r=r(AXe," (throws an error)."),AXe.forEach(t),x5r=i(Bl),Nt=n(Bl,"DIV",{class:!0});var x6=s(Nt);T(q9.$$.fragment,x6),$5r=i(x6),zFe=n(x6,"P",{});var syt=s(zFe);k5r=r(syt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),syt.forEach(t),S5r=i(x6),Fc=n(x6,"P",{});var nre=s(Fc);R5r=r(nre,`Note:
Loading a model from its configuration file does `),WFe=n(nre,"STRONG",{});var lyt=s(WFe);P5r=r(lyt,"not"),lyt.forEach(t),B5r=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(nre,"A",{href:!0});var iyt=s(cJ);I5r=r(iyt,"from_pretrained()"),iyt.forEach(t),N5r=r(nre," to load the model weights."),nre.forEach(t),q5r=i(x6),T(dC.$$.fragment,x6),x6.forEach(t),j5r=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(j9.$$.fragment,Il),D5r=i(Il),QFe=n(Il,"P",{});var dyt=s(QFe);G5r=r(dyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dyt.forEach(t),O5r=i(Il),fn=n(Il,"P",{});var $6=s(fn);V5r=r($6,"The model class to instantiate is selected based on the "),HFe=n($6,"CODE",{});var cyt=s(HFe);X5r=r(cyt,"model_type"),cyt.forEach(t),z5r=r($6,` property of the config object (either
passed as an argument or loaded from `),UFe=n($6,"CODE",{});var fyt=s(UFe);W5r=r(fyt,"pretrained_model_name_or_path"),fyt.forEach(t),Q5r=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n($6,"CODE",{});var myt=s(JFe);H5r=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),U5r=r($6,":"),$6.forEach(t),J5r=i(Il),te=n(Il,"UL",{});var ne=s(te);cC=n(ne,"LI",{});var uNe=s(cC);YFe=n(uNe,"STRONG",{});var gyt=s(YFe);Y5r=r(gyt,"albert"),gyt.forEach(t),K5r=r(uNe," \u2014 "),fJ=n(uNe,"A",{href:!0});var hyt=s(fJ);Z5r=r(hyt,"TFAlbertForSequenceClassification"),hyt.forEach(t),e3r=r(uNe," (ALBERT model)"),uNe.forEach(t),o3r=i(ne),fC=n(ne,"LI",{});var _Ne=s(fC);KFe=n(_Ne,"STRONG",{});var pyt=s(KFe);r3r=r(pyt,"bert"),pyt.forEach(t),t3r=r(_Ne," \u2014 "),mJ=n(_Ne,"A",{href:!0});var uyt=s(mJ);a3r=r(uyt,"TFBertForSequenceClassification"),uyt.forEach(t),n3r=r(_Ne," (BERT model)"),_Ne.forEach(t),s3r=i(ne),mC=n(ne,"LI",{});var bNe=s(mC);ZFe=n(bNe,"STRONG",{});var _yt=s(ZFe);l3r=r(_yt,"camembert"),_yt.forEach(t),i3r=r(bNe," \u2014 "),gJ=n(bNe,"A",{href:!0});var byt=s(gJ);d3r=r(byt,"TFCamembertForSequenceClassification"),byt.forEach(t),c3r=r(bNe," (CamemBERT model)"),bNe.forEach(t),f3r=i(ne),gC=n(ne,"LI",{});var vNe=s(gC);eTe=n(vNe,"STRONG",{});var vyt=s(eTe);m3r=r(vyt,"convbert"),vyt.forEach(t),g3r=r(vNe," \u2014 "),hJ=n(vNe,"A",{href:!0});var Fyt=s(hJ);h3r=r(Fyt,"TFConvBertForSequenceClassification"),Fyt.forEach(t),p3r=r(vNe," (ConvBERT model)"),vNe.forEach(t),u3r=i(ne),hC=n(ne,"LI",{});var FNe=s(hC);oTe=n(FNe,"STRONG",{});var Tyt=s(oTe);_3r=r(Tyt,"ctrl"),Tyt.forEach(t),b3r=r(FNe," \u2014 "),pJ=n(FNe,"A",{href:!0});var Myt=s(pJ);v3r=r(Myt,"TFCTRLForSequenceClassification"),Myt.forEach(t),F3r=r(FNe," (CTRL model)"),FNe.forEach(t),T3r=i(ne),pC=n(ne,"LI",{});var TNe=s(pC);rTe=n(TNe,"STRONG",{});var Eyt=s(rTe);M3r=r(Eyt,"deberta"),Eyt.forEach(t),E3r=r(TNe," \u2014 "),uJ=n(TNe,"A",{href:!0});var Cyt=s(uJ);C3r=r(Cyt,"TFDebertaForSequenceClassification"),Cyt.forEach(t),w3r=r(TNe," (DeBERTa model)"),TNe.forEach(t),A3r=i(ne),uC=n(ne,"LI",{});var MNe=s(uC);tTe=n(MNe,"STRONG",{});var wyt=s(tTe);L3r=r(wyt,"deberta-v2"),wyt.forEach(t),y3r=r(MNe," \u2014 "),_J=n(MNe,"A",{href:!0});var Ayt=s(_J);x3r=r(Ayt,"TFDebertaV2ForSequenceClassification"),Ayt.forEach(t),$3r=r(MNe," (DeBERTa-v2 model)"),MNe.forEach(t),k3r=i(ne),_C=n(ne,"LI",{});var ENe=s(_C);aTe=n(ENe,"STRONG",{});var Lyt=s(aTe);S3r=r(Lyt,"distilbert"),Lyt.forEach(t),R3r=r(ENe," \u2014 "),bJ=n(ENe,"A",{href:!0});var yyt=s(bJ);P3r=r(yyt,"TFDistilBertForSequenceClassification"),yyt.forEach(t),B3r=r(ENe," (DistilBERT model)"),ENe.forEach(t),I3r=i(ne),bC=n(ne,"LI",{});var CNe=s(bC);nTe=n(CNe,"STRONG",{});var xyt=s(nTe);N3r=r(xyt,"electra"),xyt.forEach(t),q3r=r(CNe," \u2014 "),vJ=n(CNe,"A",{href:!0});var $yt=s(vJ);j3r=r($yt,"TFElectraForSequenceClassification"),$yt.forEach(t),D3r=r(CNe," (ELECTRA model)"),CNe.forEach(t),G3r=i(ne),vC=n(ne,"LI",{});var wNe=s(vC);sTe=n(wNe,"STRONG",{});var kyt=s(sTe);O3r=r(kyt,"flaubert"),kyt.forEach(t),V3r=r(wNe," \u2014 "),FJ=n(wNe,"A",{href:!0});var Syt=s(FJ);X3r=r(Syt,"TFFlaubertForSequenceClassification"),Syt.forEach(t),z3r=r(wNe," (FlauBERT model)"),wNe.forEach(t),W3r=i(ne),FC=n(ne,"LI",{});var ANe=s(FC);lTe=n(ANe,"STRONG",{});var Ryt=s(lTe);Q3r=r(Ryt,"funnel"),Ryt.forEach(t),H3r=r(ANe," \u2014 "),TJ=n(ANe,"A",{href:!0});var Pyt=s(TJ);U3r=r(Pyt,"TFFunnelForSequenceClassification"),Pyt.forEach(t),J3r=r(ANe," (Funnel Transformer model)"),ANe.forEach(t),Y3r=i(ne),TC=n(ne,"LI",{});var LNe=s(TC);iTe=n(LNe,"STRONG",{});var Byt=s(iTe);K3r=r(Byt,"gpt2"),Byt.forEach(t),Z3r=r(LNe," \u2014 "),MJ=n(LNe,"A",{href:!0});var Iyt=s(MJ);e0r=r(Iyt,"TFGPT2ForSequenceClassification"),Iyt.forEach(t),o0r=r(LNe," (OpenAI GPT-2 model)"),LNe.forEach(t),r0r=i(ne),MC=n(ne,"LI",{});var yNe=s(MC);dTe=n(yNe,"STRONG",{});var Nyt=s(dTe);t0r=r(Nyt,"gptj"),Nyt.forEach(t),a0r=r(yNe," \u2014 "),EJ=n(yNe,"A",{href:!0});var qyt=s(EJ);n0r=r(qyt,"TFGPTJForSequenceClassification"),qyt.forEach(t),s0r=r(yNe," (GPT-J model)"),yNe.forEach(t),l0r=i(ne),EC=n(ne,"LI",{});var xNe=s(EC);cTe=n(xNe,"STRONG",{});var jyt=s(cTe);i0r=r(jyt,"layoutlm"),jyt.forEach(t),d0r=r(xNe," \u2014 "),CJ=n(xNe,"A",{href:!0});var Dyt=s(CJ);c0r=r(Dyt,"TFLayoutLMForSequenceClassification"),Dyt.forEach(t),f0r=r(xNe," (LayoutLM model)"),xNe.forEach(t),m0r=i(ne),CC=n(ne,"LI",{});var $Ne=s(CC);fTe=n($Ne,"STRONG",{});var Gyt=s(fTe);g0r=r(Gyt,"longformer"),Gyt.forEach(t),h0r=r($Ne," \u2014 "),wJ=n($Ne,"A",{href:!0});var Oyt=s(wJ);p0r=r(Oyt,"TFLongformerForSequenceClassification"),Oyt.forEach(t),u0r=r($Ne," (Longformer model)"),$Ne.forEach(t),_0r=i(ne),wC=n(ne,"LI",{});var kNe=s(wC);mTe=n(kNe,"STRONG",{});var Vyt=s(mTe);b0r=r(Vyt,"mobilebert"),Vyt.forEach(t),v0r=r(kNe," \u2014 "),AJ=n(kNe,"A",{href:!0});var Xyt=s(AJ);F0r=r(Xyt,"TFMobileBertForSequenceClassification"),Xyt.forEach(t),T0r=r(kNe," (MobileBERT model)"),kNe.forEach(t),M0r=i(ne),AC=n(ne,"LI",{});var SNe=s(AC);gTe=n(SNe,"STRONG",{});var zyt=s(gTe);E0r=r(zyt,"mpnet"),zyt.forEach(t),C0r=r(SNe," \u2014 "),LJ=n(SNe,"A",{href:!0});var Wyt=s(LJ);w0r=r(Wyt,"TFMPNetForSequenceClassification"),Wyt.forEach(t),A0r=r(SNe," (MPNet model)"),SNe.forEach(t),L0r=i(ne),LC=n(ne,"LI",{});var RNe=s(LC);hTe=n(RNe,"STRONG",{});var Qyt=s(hTe);y0r=r(Qyt,"openai-gpt"),Qyt.forEach(t),x0r=r(RNe," \u2014 "),yJ=n(RNe,"A",{href:!0});var Hyt=s(yJ);$0r=r(Hyt,"TFOpenAIGPTForSequenceClassification"),Hyt.forEach(t),k0r=r(RNe," (OpenAI GPT model)"),RNe.forEach(t),S0r=i(ne),yC=n(ne,"LI",{});var PNe=s(yC);pTe=n(PNe,"STRONG",{});var Uyt=s(pTe);R0r=r(Uyt,"rembert"),Uyt.forEach(t),P0r=r(PNe," \u2014 "),xJ=n(PNe,"A",{href:!0});var Jyt=s(xJ);B0r=r(Jyt,"TFRemBertForSequenceClassification"),Jyt.forEach(t),I0r=r(PNe," (RemBERT model)"),PNe.forEach(t),N0r=i(ne),xC=n(ne,"LI",{});var BNe=s(xC);uTe=n(BNe,"STRONG",{});var Yyt=s(uTe);q0r=r(Yyt,"roberta"),Yyt.forEach(t),j0r=r(BNe," \u2014 "),$J=n(BNe,"A",{href:!0});var Kyt=s($J);D0r=r(Kyt,"TFRobertaForSequenceClassification"),Kyt.forEach(t),G0r=r(BNe," (RoBERTa model)"),BNe.forEach(t),O0r=i(ne),$C=n(ne,"LI",{});var INe=s($C);_Te=n(INe,"STRONG",{});var Zyt=s(_Te);V0r=r(Zyt,"roformer"),Zyt.forEach(t),X0r=r(INe," \u2014 "),kJ=n(INe,"A",{href:!0});var e8t=s(kJ);z0r=r(e8t,"TFRoFormerForSequenceClassification"),e8t.forEach(t),W0r=r(INe," (RoFormer model)"),INe.forEach(t),Q0r=i(ne),kC=n(ne,"LI",{});var NNe=s(kC);bTe=n(NNe,"STRONG",{});var o8t=s(bTe);H0r=r(o8t,"tapas"),o8t.forEach(t),U0r=r(NNe," \u2014 "),SJ=n(NNe,"A",{href:!0});var r8t=s(SJ);J0r=r(r8t,"TFTapasForSequenceClassification"),r8t.forEach(t),Y0r=r(NNe," (TAPAS model)"),NNe.forEach(t),K0r=i(ne),SC=n(ne,"LI",{});var qNe=s(SC);vTe=n(qNe,"STRONG",{});var t8t=s(vTe);Z0r=r(t8t,"transfo-xl"),t8t.forEach(t),ewr=r(qNe," \u2014 "),RJ=n(qNe,"A",{href:!0});var a8t=s(RJ);owr=r(a8t,"TFTransfoXLForSequenceClassification"),a8t.forEach(t),rwr=r(qNe," (Transformer-XL model)"),qNe.forEach(t),twr=i(ne),RC=n(ne,"LI",{});var jNe=s(RC);FTe=n(jNe,"STRONG",{});var n8t=s(FTe);awr=r(n8t,"xlm"),n8t.forEach(t),nwr=r(jNe," \u2014 "),PJ=n(jNe,"A",{href:!0});var s8t=s(PJ);swr=r(s8t,"TFXLMForSequenceClassification"),s8t.forEach(t),lwr=r(jNe," (XLM model)"),jNe.forEach(t),iwr=i(ne),PC=n(ne,"LI",{});var DNe=s(PC);TTe=n(DNe,"STRONG",{});var l8t=s(TTe);dwr=r(l8t,"xlm-roberta"),l8t.forEach(t),cwr=r(DNe," \u2014 "),BJ=n(DNe,"A",{href:!0});var i8t=s(BJ);fwr=r(i8t,"TFXLMRobertaForSequenceClassification"),i8t.forEach(t),mwr=r(DNe," (XLM-RoBERTa model)"),DNe.forEach(t),gwr=i(ne),BC=n(ne,"LI",{});var GNe=s(BC);MTe=n(GNe,"STRONG",{});var d8t=s(MTe);hwr=r(d8t,"xlnet"),d8t.forEach(t),pwr=r(GNe," \u2014 "),IJ=n(GNe,"A",{href:!0});var c8t=s(IJ);uwr=r(c8t,"TFXLNetForSequenceClassification"),c8t.forEach(t),_wr=r(GNe," (XLNet model)"),GNe.forEach(t),ne.forEach(t),bwr=i(Il),T(IC.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),vOe=i(f),Tc=n(f,"H2",{class:!0});var LXe=s(Tc);NC=n(LXe,"A",{id:!0,class:!0,href:!0});var f8t=s(NC);ETe=n(f8t,"SPAN",{});var m8t=s(ETe);T(D9.$$.fragment,m8t),m8t.forEach(t),f8t.forEach(t),vwr=i(LXe),CTe=n(LXe,"SPAN",{});var g8t=s(CTe);Fwr=r(g8t,"TFAutoModelForMultipleChoice"),g8t.forEach(t),LXe.forEach(t),FOe=i(f),sr=n(f,"DIV",{class:!0});var Nl=s(sr);T(G9.$$.fragment,Nl),Twr=i(Nl),Mc=n(Nl,"P",{});var sre=s(Mc);Mwr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),NJ=n(sre,"A",{href:!0});var h8t=s(NJ);Ewr=r(h8t,"from_pretrained()"),h8t.forEach(t),Cwr=r(sre," class method or the "),qJ=n(sre,"A",{href:!0});var p8t=s(qJ);wwr=r(p8t,"from_config()"),p8t.forEach(t),Awr=r(sre,` class
method.`),sre.forEach(t),Lwr=i(Nl),O9=n(Nl,"P",{});var yXe=s(O9);ywr=r(yXe,"This class cannot be instantiated directly using "),wTe=n(yXe,"CODE",{});var u8t=s(wTe);xwr=r(u8t,"__init__()"),u8t.forEach(t),$wr=r(yXe," (throws an error)."),yXe.forEach(t),kwr=i(Nl),qt=n(Nl,"DIV",{class:!0});var k6=s(qt);T(V9.$$.fragment,k6),Swr=i(k6),ATe=n(k6,"P",{});var _8t=s(ATe);Rwr=r(_8t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),_8t.forEach(t),Pwr=i(k6),Ec=n(k6,"P",{});var lre=s(Ec);Bwr=r(lre,`Note:
Loading a model from its configuration file does `),LTe=n(lre,"STRONG",{});var b8t=s(LTe);Iwr=r(b8t,"not"),b8t.forEach(t),Nwr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(lre,"A",{href:!0});var v8t=s(jJ);qwr=r(v8t,"from_pretrained()"),v8t.forEach(t),jwr=r(lre," to load the model weights."),lre.forEach(t),Dwr=i(k6),T(qC.$$.fragment,k6),k6.forEach(t),Gwr=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(X9.$$.fragment,ql),Owr=i(ql),yTe=n(ql,"P",{});var F8t=s(yTe);Vwr=r(F8t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F8t.forEach(t),Xwr=i(ql),mn=n(ql,"P",{});var S6=s(mn);zwr=r(S6,"The model class to instantiate is selected based on the "),xTe=n(S6,"CODE",{});var T8t=s(xTe);Wwr=r(T8t,"model_type"),T8t.forEach(t),Qwr=r(S6,` property of the config object (either
passed as an argument or loaded from `),$Te=n(S6,"CODE",{});var M8t=s($Te);Hwr=r(M8t,"pretrained_model_name_or_path"),M8t.forEach(t),Uwr=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kTe=n(S6,"CODE",{});var E8t=s(kTe);Jwr=r(E8t,"pretrained_model_name_or_path"),E8t.forEach(t),Ywr=r(S6,":"),S6.forEach(t),Kwr=i(ql),ue=n(ql,"UL",{});var ve=s(ue);jC=n(ve,"LI",{});var ONe=s(jC);STe=n(ONe,"STRONG",{});var C8t=s(STe);Zwr=r(C8t,"albert"),C8t.forEach(t),eAr=r(ONe," \u2014 "),DJ=n(ONe,"A",{href:!0});var w8t=s(DJ);oAr=r(w8t,"TFAlbertForMultipleChoice"),w8t.forEach(t),rAr=r(ONe," (ALBERT model)"),ONe.forEach(t),tAr=i(ve),DC=n(ve,"LI",{});var VNe=s(DC);RTe=n(VNe,"STRONG",{});var A8t=s(RTe);aAr=r(A8t,"bert"),A8t.forEach(t),nAr=r(VNe," \u2014 "),GJ=n(VNe,"A",{href:!0});var L8t=s(GJ);sAr=r(L8t,"TFBertForMultipleChoice"),L8t.forEach(t),lAr=r(VNe," (BERT model)"),VNe.forEach(t),iAr=i(ve),GC=n(ve,"LI",{});var XNe=s(GC);PTe=n(XNe,"STRONG",{});var y8t=s(PTe);dAr=r(y8t,"camembert"),y8t.forEach(t),cAr=r(XNe," \u2014 "),OJ=n(XNe,"A",{href:!0});var x8t=s(OJ);fAr=r(x8t,"TFCamembertForMultipleChoice"),x8t.forEach(t),mAr=r(XNe," (CamemBERT model)"),XNe.forEach(t),gAr=i(ve),OC=n(ve,"LI",{});var zNe=s(OC);BTe=n(zNe,"STRONG",{});var $8t=s(BTe);hAr=r($8t,"convbert"),$8t.forEach(t),pAr=r(zNe," \u2014 "),VJ=n(zNe,"A",{href:!0});var k8t=s(VJ);uAr=r(k8t,"TFConvBertForMultipleChoice"),k8t.forEach(t),_Ar=r(zNe," (ConvBERT model)"),zNe.forEach(t),bAr=i(ve),VC=n(ve,"LI",{});var WNe=s(VC);ITe=n(WNe,"STRONG",{});var S8t=s(ITe);vAr=r(S8t,"distilbert"),S8t.forEach(t),FAr=r(WNe," \u2014 "),XJ=n(WNe,"A",{href:!0});var R8t=s(XJ);TAr=r(R8t,"TFDistilBertForMultipleChoice"),R8t.forEach(t),MAr=r(WNe," (DistilBERT model)"),WNe.forEach(t),EAr=i(ve),XC=n(ve,"LI",{});var QNe=s(XC);NTe=n(QNe,"STRONG",{});var P8t=s(NTe);CAr=r(P8t,"electra"),P8t.forEach(t),wAr=r(QNe," \u2014 "),zJ=n(QNe,"A",{href:!0});var B8t=s(zJ);AAr=r(B8t,"TFElectraForMultipleChoice"),B8t.forEach(t),LAr=r(QNe," (ELECTRA model)"),QNe.forEach(t),yAr=i(ve),zC=n(ve,"LI",{});var HNe=s(zC);qTe=n(HNe,"STRONG",{});var I8t=s(qTe);xAr=r(I8t,"flaubert"),I8t.forEach(t),$Ar=r(HNe," \u2014 "),WJ=n(HNe,"A",{href:!0});var N8t=s(WJ);kAr=r(N8t,"TFFlaubertForMultipleChoice"),N8t.forEach(t),SAr=r(HNe," (FlauBERT model)"),HNe.forEach(t),RAr=i(ve),WC=n(ve,"LI",{});var UNe=s(WC);jTe=n(UNe,"STRONG",{});var q8t=s(jTe);PAr=r(q8t,"funnel"),q8t.forEach(t),BAr=r(UNe," \u2014 "),QJ=n(UNe,"A",{href:!0});var j8t=s(QJ);IAr=r(j8t,"TFFunnelForMultipleChoice"),j8t.forEach(t),NAr=r(UNe," (Funnel Transformer model)"),UNe.forEach(t),qAr=i(ve),QC=n(ve,"LI",{});var JNe=s(QC);DTe=n(JNe,"STRONG",{});var D8t=s(DTe);jAr=r(D8t,"longformer"),D8t.forEach(t),DAr=r(JNe," \u2014 "),HJ=n(JNe,"A",{href:!0});var G8t=s(HJ);GAr=r(G8t,"TFLongformerForMultipleChoice"),G8t.forEach(t),OAr=r(JNe," (Longformer model)"),JNe.forEach(t),VAr=i(ve),HC=n(ve,"LI",{});var YNe=s(HC);GTe=n(YNe,"STRONG",{});var O8t=s(GTe);XAr=r(O8t,"mobilebert"),O8t.forEach(t),zAr=r(YNe," \u2014 "),UJ=n(YNe,"A",{href:!0});var V8t=s(UJ);WAr=r(V8t,"TFMobileBertForMultipleChoice"),V8t.forEach(t),QAr=r(YNe," (MobileBERT model)"),YNe.forEach(t),HAr=i(ve),UC=n(ve,"LI",{});var KNe=s(UC);OTe=n(KNe,"STRONG",{});var X8t=s(OTe);UAr=r(X8t,"mpnet"),X8t.forEach(t),JAr=r(KNe," \u2014 "),JJ=n(KNe,"A",{href:!0});var z8t=s(JJ);YAr=r(z8t,"TFMPNetForMultipleChoice"),z8t.forEach(t),KAr=r(KNe," (MPNet model)"),KNe.forEach(t),ZAr=i(ve),JC=n(ve,"LI",{});var ZNe=s(JC);VTe=n(ZNe,"STRONG",{});var W8t=s(VTe);e6r=r(W8t,"rembert"),W8t.forEach(t),o6r=r(ZNe," \u2014 "),YJ=n(ZNe,"A",{href:!0});var Q8t=s(YJ);r6r=r(Q8t,"TFRemBertForMultipleChoice"),Q8t.forEach(t),t6r=r(ZNe," (RemBERT model)"),ZNe.forEach(t),a6r=i(ve),YC=n(ve,"LI",{});var eqe=s(YC);XTe=n(eqe,"STRONG",{});var H8t=s(XTe);n6r=r(H8t,"roberta"),H8t.forEach(t),s6r=r(eqe," \u2014 "),KJ=n(eqe,"A",{href:!0});var U8t=s(KJ);l6r=r(U8t,"TFRobertaForMultipleChoice"),U8t.forEach(t),i6r=r(eqe," (RoBERTa model)"),eqe.forEach(t),d6r=i(ve),KC=n(ve,"LI",{});var oqe=s(KC);zTe=n(oqe,"STRONG",{});var J8t=s(zTe);c6r=r(J8t,"roformer"),J8t.forEach(t),f6r=r(oqe," \u2014 "),ZJ=n(oqe,"A",{href:!0});var Y8t=s(ZJ);m6r=r(Y8t,"TFRoFormerForMultipleChoice"),Y8t.forEach(t),g6r=r(oqe," (RoFormer model)"),oqe.forEach(t),h6r=i(ve),ZC=n(ve,"LI",{});var rqe=s(ZC);WTe=n(rqe,"STRONG",{});var K8t=s(WTe);p6r=r(K8t,"xlm"),K8t.forEach(t),u6r=r(rqe," \u2014 "),eY=n(rqe,"A",{href:!0});var Z8t=s(eY);_6r=r(Z8t,"TFXLMForMultipleChoice"),Z8t.forEach(t),b6r=r(rqe," (XLM model)"),rqe.forEach(t),v6r=i(ve),e5=n(ve,"LI",{});var tqe=s(e5);QTe=n(tqe,"STRONG",{});var e9t=s(QTe);F6r=r(e9t,"xlm-roberta"),e9t.forEach(t),T6r=r(tqe," \u2014 "),oY=n(tqe,"A",{href:!0});var o9t=s(oY);M6r=r(o9t,"TFXLMRobertaForMultipleChoice"),o9t.forEach(t),E6r=r(tqe," (XLM-RoBERTa model)"),tqe.forEach(t),C6r=i(ve),o5=n(ve,"LI",{});var aqe=s(o5);HTe=n(aqe,"STRONG",{});var r9t=s(HTe);w6r=r(r9t,"xlnet"),r9t.forEach(t),A6r=r(aqe," \u2014 "),rY=n(aqe,"A",{href:!0});var t9t=s(rY);L6r=r(t9t,"TFXLNetForMultipleChoice"),t9t.forEach(t),y6r=r(aqe," (XLNet model)"),aqe.forEach(t),ve.forEach(t),x6r=i(ql),T(r5.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),TOe=i(f),Cc=n(f,"H2",{class:!0});var xXe=s(Cc);t5=n(xXe,"A",{id:!0,class:!0,href:!0});var a9t=s(t5);UTe=n(a9t,"SPAN",{});var n9t=s(UTe);T(z9.$$.fragment,n9t),n9t.forEach(t),a9t.forEach(t),$6r=i(xXe),JTe=n(xXe,"SPAN",{});var s9t=s(JTe);k6r=r(s9t,"TFAutoModelForNextSentencePrediction"),s9t.forEach(t),xXe.forEach(t),MOe=i(f),lr=n(f,"DIV",{class:!0});var jl=s(lr);T(W9.$$.fragment,jl),S6r=i(jl),wc=n(jl,"P",{});var ire=s(wc);R6r=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),tY=n(ire,"A",{href:!0});var l9t=s(tY);P6r=r(l9t,"from_pretrained()"),l9t.forEach(t),B6r=r(ire," class method or the "),aY=n(ire,"A",{href:!0});var i9t=s(aY);I6r=r(i9t,"from_config()"),i9t.forEach(t),N6r=r(ire,` class
method.`),ire.forEach(t),q6r=i(jl),Q9=n(jl,"P",{});var $Xe=s(Q9);j6r=r($Xe,"This class cannot be instantiated directly using "),YTe=n($Xe,"CODE",{});var d9t=s(YTe);D6r=r(d9t,"__init__()"),d9t.forEach(t),G6r=r($Xe," (throws an error)."),$Xe.forEach(t),O6r=i(jl),jt=n(jl,"DIV",{class:!0});var R6=s(jt);T(H9.$$.fragment,R6),V6r=i(R6),KTe=n(R6,"P",{});var c9t=s(KTe);X6r=r(c9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),c9t.forEach(t),z6r=i(R6),Ac=n(R6,"P",{});var dre=s(Ac);W6r=r(dre,`Note:
Loading a model from its configuration file does `),ZTe=n(dre,"STRONG",{});var f9t=s(ZTe);Q6r=r(f9t,"not"),f9t.forEach(t),H6r=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(dre,"A",{href:!0});var m9t=s(nY);U6r=r(m9t,"from_pretrained()"),m9t.forEach(t),J6r=r(dre," to load the model weights."),dre.forEach(t),Y6r=i(R6),T(a5.$$.fragment,R6),R6.forEach(t),K6r=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(U9.$$.fragment,Dl),Z6r=i(Dl),eMe=n(Dl,"P",{});var g9t=s(eMe);eLr=r(g9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),g9t.forEach(t),oLr=i(Dl),gn=n(Dl,"P",{});var P6=s(gn);rLr=r(P6,"The model class to instantiate is selected based on the "),oMe=n(P6,"CODE",{});var h9t=s(oMe);tLr=r(h9t,"model_type"),h9t.forEach(t),aLr=r(P6,` property of the config object (either
passed as an argument or loaded from `),rMe=n(P6,"CODE",{});var p9t=s(rMe);nLr=r(p9t,"pretrained_model_name_or_path"),p9t.forEach(t),sLr=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(P6,"CODE",{});var u9t=s(tMe);lLr=r(u9t,"pretrained_model_name_or_path"),u9t.forEach(t),iLr=r(P6,":"),P6.forEach(t),dLr=i(Dl),J9=n(Dl,"UL",{});var kXe=s(J9);n5=n(kXe,"LI",{});var nqe=s(n5);aMe=n(nqe,"STRONG",{});var _9t=s(aMe);cLr=r(_9t,"bert"),_9t.forEach(t),fLr=r(nqe," \u2014 "),sY=n(nqe,"A",{href:!0});var b9t=s(sY);mLr=r(b9t,"TFBertForNextSentencePrediction"),b9t.forEach(t),gLr=r(nqe," (BERT model)"),nqe.forEach(t),hLr=i(kXe),s5=n(kXe,"LI",{});var sqe=s(s5);nMe=n(sqe,"STRONG",{});var v9t=s(nMe);pLr=r(v9t,"mobilebert"),v9t.forEach(t),uLr=r(sqe," \u2014 "),lY=n(sqe,"A",{href:!0});var F9t=s(lY);_Lr=r(F9t,"TFMobileBertForNextSentencePrediction"),F9t.forEach(t),bLr=r(sqe," (MobileBERT model)"),sqe.forEach(t),kXe.forEach(t),vLr=i(Dl),T(l5.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),EOe=i(f),Lc=n(f,"H2",{class:!0});var SXe=s(Lc);i5=n(SXe,"A",{id:!0,class:!0,href:!0});var T9t=s(i5);sMe=n(T9t,"SPAN",{});var M9t=s(sMe);T(Y9.$$.fragment,M9t),M9t.forEach(t),T9t.forEach(t),FLr=i(SXe),lMe=n(SXe,"SPAN",{});var E9t=s(lMe);TLr=r(E9t,"TFAutoModelForTableQuestionAnswering"),E9t.forEach(t),SXe.forEach(t),COe=i(f),ir=n(f,"DIV",{class:!0});var Gl=s(ir);T(K9.$$.fragment,Gl),MLr=i(Gl),yc=n(Gl,"P",{});var cre=s(yc);ELr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),iY=n(cre,"A",{href:!0});var C9t=s(iY);CLr=r(C9t,"from_pretrained()"),C9t.forEach(t),wLr=r(cre," class method or the "),dY=n(cre,"A",{href:!0});var w9t=s(dY);ALr=r(w9t,"from_config()"),w9t.forEach(t),LLr=r(cre,` class
method.`),cre.forEach(t),yLr=i(Gl),Z9=n(Gl,"P",{});var RXe=s(Z9);xLr=r(RXe,"This class cannot be instantiated directly using "),iMe=n(RXe,"CODE",{});var A9t=s(iMe);$Lr=r(A9t,"__init__()"),A9t.forEach(t),kLr=r(RXe," (throws an error)."),RXe.forEach(t),SLr=i(Gl),Dt=n(Gl,"DIV",{class:!0});var B6=s(Dt);T(ex.$$.fragment,B6),RLr=i(B6),dMe=n(B6,"P",{});var L9t=s(dMe);PLr=r(L9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),L9t.forEach(t),BLr=i(B6),xc=n(B6,"P",{});var fre=s(xc);ILr=r(fre,`Note:
Loading a model from its configuration file does `),cMe=n(fre,"STRONG",{});var y9t=s(cMe);NLr=r(y9t,"not"),y9t.forEach(t),qLr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(fre,"A",{href:!0});var x9t=s(cY);jLr=r(x9t,"from_pretrained()"),x9t.forEach(t),DLr=r(fre," to load the model weights."),fre.forEach(t),GLr=i(B6),T(d5.$$.fragment,B6),B6.forEach(t),OLr=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(ox.$$.fragment,Ol),VLr=i(Ol),fMe=n(Ol,"P",{});var $9t=s(fMe);XLr=r($9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),$9t.forEach(t),zLr=i(Ol),hn=n(Ol,"P",{});var I6=s(hn);WLr=r(I6,"The model class to instantiate is selected based on the "),mMe=n(I6,"CODE",{});var k9t=s(mMe);QLr=r(k9t,"model_type"),k9t.forEach(t),HLr=r(I6,` property of the config object (either
passed as an argument or loaded from `),gMe=n(I6,"CODE",{});var S9t=s(gMe);ULr=r(S9t,"pretrained_model_name_or_path"),S9t.forEach(t),JLr=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(I6,"CODE",{});var R9t=s(hMe);YLr=r(R9t,"pretrained_model_name_or_path"),R9t.forEach(t),KLr=r(I6,":"),I6.forEach(t),ZLr=i(Ol),pMe=n(Ol,"UL",{});var P9t=s(pMe);c5=n(P9t,"LI",{});var lqe=s(c5);uMe=n(lqe,"STRONG",{});var B9t=s(uMe);eyr=r(B9t,"tapas"),B9t.forEach(t),oyr=r(lqe," \u2014 "),fY=n(lqe,"A",{href:!0});var I9t=s(fY);ryr=r(I9t,"TFTapasForQuestionAnswering"),I9t.forEach(t),tyr=r(lqe," (TAPAS model)"),lqe.forEach(t),P9t.forEach(t),ayr=i(Ol),T(f5.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),wOe=i(f),$c=n(f,"H2",{class:!0});var PXe=s($c);m5=n(PXe,"A",{id:!0,class:!0,href:!0});var N9t=s(m5);_Me=n(N9t,"SPAN",{});var q9t=s(_Me);T(rx.$$.fragment,q9t),q9t.forEach(t),N9t.forEach(t),nyr=i(PXe),bMe=n(PXe,"SPAN",{});var j9t=s(bMe);syr=r(j9t,"TFAutoModelForTokenClassification"),j9t.forEach(t),PXe.forEach(t),AOe=i(f),dr=n(f,"DIV",{class:!0});var Vl=s(dr);T(tx.$$.fragment,Vl),lyr=i(Vl),kc=n(Vl,"P",{});var mre=s(kc);iyr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mY=n(mre,"A",{href:!0});var D9t=s(mY);dyr=r(D9t,"from_pretrained()"),D9t.forEach(t),cyr=r(mre," class method or the "),gY=n(mre,"A",{href:!0});var G9t=s(gY);fyr=r(G9t,"from_config()"),G9t.forEach(t),myr=r(mre,` class
method.`),mre.forEach(t),gyr=i(Vl),ax=n(Vl,"P",{});var BXe=s(ax);hyr=r(BXe,"This class cannot be instantiated directly using "),vMe=n(BXe,"CODE",{});var O9t=s(vMe);pyr=r(O9t,"__init__()"),O9t.forEach(t),uyr=r(BXe," (throws an error)."),BXe.forEach(t),_yr=i(Vl),Gt=n(Vl,"DIV",{class:!0});var N6=s(Gt);T(nx.$$.fragment,N6),byr=i(N6),FMe=n(N6,"P",{});var V9t=s(FMe);vyr=r(V9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),V9t.forEach(t),Fyr=i(N6),Sc=n(N6,"P",{});var gre=s(Sc);Tyr=r(gre,`Note:
Loading a model from its configuration file does `),TMe=n(gre,"STRONG",{});var X9t=s(TMe);Myr=r(X9t,"not"),X9t.forEach(t),Eyr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hY=n(gre,"A",{href:!0});var z9t=s(hY);Cyr=r(z9t,"from_pretrained()"),z9t.forEach(t),wyr=r(gre," to load the model weights."),gre.forEach(t),Ayr=i(N6),T(g5.$$.fragment,N6),N6.forEach(t),Lyr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(sx.$$.fragment,Xl),yyr=i(Xl),MMe=n(Xl,"P",{});var W9t=s(MMe);xyr=r(W9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),W9t.forEach(t),$yr=i(Xl),pn=n(Xl,"P",{});var q6=s(pn);kyr=r(q6,"The model class to instantiate is selected based on the "),EMe=n(q6,"CODE",{});var Q9t=s(EMe);Syr=r(Q9t,"model_type"),Q9t.forEach(t),Ryr=r(q6,` property of the config object (either
passed as an argument or loaded from `),CMe=n(q6,"CODE",{});var H9t=s(CMe);Pyr=r(H9t,"pretrained_model_name_or_path"),H9t.forEach(t),Byr=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(q6,"CODE",{});var U9t=s(wMe);Iyr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),Nyr=r(q6,":"),q6.forEach(t),qyr=i(Xl),de=n(Xl,"UL",{});var me=s(de);h5=n(me,"LI",{});var iqe=s(h5);AMe=n(iqe,"STRONG",{});var J9t=s(AMe);jyr=r(J9t,"albert"),J9t.forEach(t),Dyr=r(iqe," \u2014 "),pY=n(iqe,"A",{href:!0});var Y9t=s(pY);Gyr=r(Y9t,"TFAlbertForTokenClassification"),Y9t.forEach(t),Oyr=r(iqe," (ALBERT model)"),iqe.forEach(t),Vyr=i(me),p5=n(me,"LI",{});var dqe=s(p5);LMe=n(dqe,"STRONG",{});var K9t=s(LMe);Xyr=r(K9t,"bert"),K9t.forEach(t),zyr=r(dqe," \u2014 "),uY=n(dqe,"A",{href:!0});var Z9t=s(uY);Wyr=r(Z9t,"TFBertForTokenClassification"),Z9t.forEach(t),Qyr=r(dqe," (BERT model)"),dqe.forEach(t),Hyr=i(me),u5=n(me,"LI",{});var cqe=s(u5);yMe=n(cqe,"STRONG",{});var ext=s(yMe);Uyr=r(ext,"camembert"),ext.forEach(t),Jyr=r(cqe," \u2014 "),_Y=n(cqe,"A",{href:!0});var oxt=s(_Y);Yyr=r(oxt,"TFCamembertForTokenClassification"),oxt.forEach(t),Kyr=r(cqe," (CamemBERT model)"),cqe.forEach(t),Zyr=i(me),_5=n(me,"LI",{});var fqe=s(_5);xMe=n(fqe,"STRONG",{});var rxt=s(xMe);e8r=r(rxt,"convbert"),rxt.forEach(t),o8r=r(fqe," \u2014 "),bY=n(fqe,"A",{href:!0});var txt=s(bY);r8r=r(txt,"TFConvBertForTokenClassification"),txt.forEach(t),t8r=r(fqe," (ConvBERT model)"),fqe.forEach(t),a8r=i(me),b5=n(me,"LI",{});var mqe=s(b5);$Me=n(mqe,"STRONG",{});var axt=s($Me);n8r=r(axt,"deberta"),axt.forEach(t),s8r=r(mqe," \u2014 "),vY=n(mqe,"A",{href:!0});var nxt=s(vY);l8r=r(nxt,"TFDebertaForTokenClassification"),nxt.forEach(t),i8r=r(mqe," (DeBERTa model)"),mqe.forEach(t),d8r=i(me),v5=n(me,"LI",{});var gqe=s(v5);kMe=n(gqe,"STRONG",{});var sxt=s(kMe);c8r=r(sxt,"deberta-v2"),sxt.forEach(t),f8r=r(gqe," \u2014 "),FY=n(gqe,"A",{href:!0});var lxt=s(FY);m8r=r(lxt,"TFDebertaV2ForTokenClassification"),lxt.forEach(t),g8r=r(gqe," (DeBERTa-v2 model)"),gqe.forEach(t),h8r=i(me),F5=n(me,"LI",{});var hqe=s(F5);SMe=n(hqe,"STRONG",{});var ixt=s(SMe);p8r=r(ixt,"distilbert"),ixt.forEach(t),u8r=r(hqe," \u2014 "),TY=n(hqe,"A",{href:!0});var dxt=s(TY);_8r=r(dxt,"TFDistilBertForTokenClassification"),dxt.forEach(t),b8r=r(hqe," (DistilBERT model)"),hqe.forEach(t),v8r=i(me),T5=n(me,"LI",{});var pqe=s(T5);RMe=n(pqe,"STRONG",{});var cxt=s(RMe);F8r=r(cxt,"electra"),cxt.forEach(t),T8r=r(pqe," \u2014 "),MY=n(pqe,"A",{href:!0});var fxt=s(MY);M8r=r(fxt,"TFElectraForTokenClassification"),fxt.forEach(t),E8r=r(pqe," (ELECTRA model)"),pqe.forEach(t),C8r=i(me),M5=n(me,"LI",{});var uqe=s(M5);PMe=n(uqe,"STRONG",{});var mxt=s(PMe);w8r=r(mxt,"flaubert"),mxt.forEach(t),A8r=r(uqe," \u2014 "),EY=n(uqe,"A",{href:!0});var gxt=s(EY);L8r=r(gxt,"TFFlaubertForTokenClassification"),gxt.forEach(t),y8r=r(uqe," (FlauBERT model)"),uqe.forEach(t),x8r=i(me),E5=n(me,"LI",{});var _qe=s(E5);BMe=n(_qe,"STRONG",{});var hxt=s(BMe);$8r=r(hxt,"funnel"),hxt.forEach(t),k8r=r(_qe," \u2014 "),CY=n(_qe,"A",{href:!0});var pxt=s(CY);S8r=r(pxt,"TFFunnelForTokenClassification"),pxt.forEach(t),R8r=r(_qe," (Funnel Transformer model)"),_qe.forEach(t),P8r=i(me),C5=n(me,"LI",{});var bqe=s(C5);IMe=n(bqe,"STRONG",{});var uxt=s(IMe);B8r=r(uxt,"layoutlm"),uxt.forEach(t),I8r=r(bqe," \u2014 "),wY=n(bqe,"A",{href:!0});var _xt=s(wY);N8r=r(_xt,"TFLayoutLMForTokenClassification"),_xt.forEach(t),q8r=r(bqe," (LayoutLM model)"),bqe.forEach(t),j8r=i(me),w5=n(me,"LI",{});var vqe=s(w5);NMe=n(vqe,"STRONG",{});var bxt=s(NMe);D8r=r(bxt,"longformer"),bxt.forEach(t),G8r=r(vqe," \u2014 "),AY=n(vqe,"A",{href:!0});var vxt=s(AY);O8r=r(vxt,"TFLongformerForTokenClassification"),vxt.forEach(t),V8r=r(vqe," (Longformer model)"),vqe.forEach(t),X8r=i(me),A5=n(me,"LI",{});var Fqe=s(A5);qMe=n(Fqe,"STRONG",{});var Fxt=s(qMe);z8r=r(Fxt,"mobilebert"),Fxt.forEach(t),W8r=r(Fqe," \u2014 "),LY=n(Fqe,"A",{href:!0});var Txt=s(LY);Q8r=r(Txt,"TFMobileBertForTokenClassification"),Txt.forEach(t),H8r=r(Fqe," (MobileBERT model)"),Fqe.forEach(t),U8r=i(me),L5=n(me,"LI",{});var Tqe=s(L5);jMe=n(Tqe,"STRONG",{});var Mxt=s(jMe);J8r=r(Mxt,"mpnet"),Mxt.forEach(t),Y8r=r(Tqe," \u2014 "),yY=n(Tqe,"A",{href:!0});var Ext=s(yY);K8r=r(Ext,"TFMPNetForTokenClassification"),Ext.forEach(t),Z8r=r(Tqe," (MPNet model)"),Tqe.forEach(t),e9r=i(me),y5=n(me,"LI",{});var Mqe=s(y5);DMe=n(Mqe,"STRONG",{});var Cxt=s(DMe);o9r=r(Cxt,"rembert"),Cxt.forEach(t),r9r=r(Mqe," \u2014 "),xY=n(Mqe,"A",{href:!0});var wxt=s(xY);t9r=r(wxt,"TFRemBertForTokenClassification"),wxt.forEach(t),a9r=r(Mqe," (RemBERT model)"),Mqe.forEach(t),n9r=i(me),x5=n(me,"LI",{});var Eqe=s(x5);GMe=n(Eqe,"STRONG",{});var Axt=s(GMe);s9r=r(Axt,"roberta"),Axt.forEach(t),l9r=r(Eqe," \u2014 "),$Y=n(Eqe,"A",{href:!0});var Lxt=s($Y);i9r=r(Lxt,"TFRobertaForTokenClassification"),Lxt.forEach(t),d9r=r(Eqe," (RoBERTa model)"),Eqe.forEach(t),c9r=i(me),$5=n(me,"LI",{});var Cqe=s($5);OMe=n(Cqe,"STRONG",{});var yxt=s(OMe);f9r=r(yxt,"roformer"),yxt.forEach(t),m9r=r(Cqe," \u2014 "),kY=n(Cqe,"A",{href:!0});var xxt=s(kY);g9r=r(xxt,"TFRoFormerForTokenClassification"),xxt.forEach(t),h9r=r(Cqe," (RoFormer model)"),Cqe.forEach(t),p9r=i(me),k5=n(me,"LI",{});var wqe=s(k5);VMe=n(wqe,"STRONG",{});var $xt=s(VMe);u9r=r($xt,"xlm"),$xt.forEach(t),_9r=r(wqe," \u2014 "),SY=n(wqe,"A",{href:!0});var kxt=s(SY);b9r=r(kxt,"TFXLMForTokenClassification"),kxt.forEach(t),v9r=r(wqe," (XLM model)"),wqe.forEach(t),F9r=i(me),S5=n(me,"LI",{});var Aqe=s(S5);XMe=n(Aqe,"STRONG",{});var Sxt=s(XMe);T9r=r(Sxt,"xlm-roberta"),Sxt.forEach(t),M9r=r(Aqe," \u2014 "),RY=n(Aqe,"A",{href:!0});var Rxt=s(RY);E9r=r(Rxt,"TFXLMRobertaForTokenClassification"),Rxt.forEach(t),C9r=r(Aqe," (XLM-RoBERTa model)"),Aqe.forEach(t),w9r=i(me),R5=n(me,"LI",{});var Lqe=s(R5);zMe=n(Lqe,"STRONG",{});var Pxt=s(zMe);A9r=r(Pxt,"xlnet"),Pxt.forEach(t),L9r=r(Lqe," \u2014 "),PY=n(Lqe,"A",{href:!0});var Bxt=s(PY);y9r=r(Bxt,"TFXLNetForTokenClassification"),Bxt.forEach(t),x9r=r(Lqe," (XLNet model)"),Lqe.forEach(t),me.forEach(t),$9r=i(Xl),T(P5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),LOe=i(f),Rc=n(f,"H2",{class:!0});var IXe=s(Rc);B5=n(IXe,"A",{id:!0,class:!0,href:!0});var Ixt=s(B5);WMe=n(Ixt,"SPAN",{});var Nxt=s(WMe);T(lx.$$.fragment,Nxt),Nxt.forEach(t),Ixt.forEach(t),k9r=i(IXe),QMe=n(IXe,"SPAN",{});var qxt=s(QMe);S9r=r(qxt,"TFAutoModelForQuestionAnswering"),qxt.forEach(t),IXe.forEach(t),yOe=i(f),cr=n(f,"DIV",{class:!0});var zl=s(cr);T(ix.$$.fragment,zl),R9r=i(zl),Pc=n(zl,"P",{});var hre=s(Pc);P9r=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BY=n(hre,"A",{href:!0});var jxt=s(BY);B9r=r(jxt,"from_pretrained()"),jxt.forEach(t),I9r=r(hre," class method or the "),IY=n(hre,"A",{href:!0});var Dxt=s(IY);N9r=r(Dxt,"from_config()"),Dxt.forEach(t),q9r=r(hre,` class
method.`),hre.forEach(t),j9r=i(zl),dx=n(zl,"P",{});var NXe=s(dx);D9r=r(NXe,"This class cannot be instantiated directly using "),HMe=n(NXe,"CODE",{});var Gxt=s(HMe);G9r=r(Gxt,"__init__()"),Gxt.forEach(t),O9r=r(NXe," (throws an error)."),NXe.forEach(t),V9r=i(zl),Ot=n(zl,"DIV",{class:!0});var j6=s(Ot);T(cx.$$.fragment,j6),X9r=i(j6),UMe=n(j6,"P",{});var Oxt=s(UMe);z9r=r(Oxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Oxt.forEach(t),W9r=i(j6),Bc=n(j6,"P",{});var pre=s(Bc);Q9r=r(pre,`Note:
Loading a model from its configuration file does `),JMe=n(pre,"STRONG",{});var Vxt=s(JMe);H9r=r(Vxt,"not"),Vxt.forEach(t),U9r=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NY=n(pre,"A",{href:!0});var Xxt=s(NY);J9r=r(Xxt,"from_pretrained()"),Xxt.forEach(t),Y9r=r(pre," to load the model weights."),pre.forEach(t),K9r=i(j6),T(I5.$$.fragment,j6),j6.forEach(t),Z9r=i(zl),qr=n(zl,"DIV",{class:!0});var Wl=s(qr);T(fx.$$.fragment,Wl),exr=i(Wl),YMe=n(Wl,"P",{});var zxt=s(YMe);oxr=r(zxt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zxt.forEach(t),rxr=i(Wl),un=n(Wl,"P",{});var D6=s(un);txr=r(D6,"The model class to instantiate is selected based on the "),KMe=n(D6,"CODE",{});var Wxt=s(KMe);axr=r(Wxt,"model_type"),Wxt.forEach(t),nxr=r(D6,` property of the config object (either
passed as an argument or loaded from `),ZMe=n(D6,"CODE",{});var Qxt=s(ZMe);sxr=r(Qxt,"pretrained_model_name_or_path"),Qxt.forEach(t),lxr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eEe=n(D6,"CODE",{});var Hxt=s(eEe);ixr=r(Hxt,"pretrained_model_name_or_path"),Hxt.forEach(t),dxr=r(D6,":"),D6.forEach(t),cxr=i(Wl),ce=n(Wl,"UL",{});var ge=s(ce);N5=n(ge,"LI",{});var yqe=s(N5);oEe=n(yqe,"STRONG",{});var Uxt=s(oEe);fxr=r(Uxt,"albert"),Uxt.forEach(t),mxr=r(yqe," \u2014 "),qY=n(yqe,"A",{href:!0});var Jxt=s(qY);gxr=r(Jxt,"TFAlbertForQuestionAnswering"),Jxt.forEach(t),hxr=r(yqe," (ALBERT model)"),yqe.forEach(t),pxr=i(ge),q5=n(ge,"LI",{});var xqe=s(q5);rEe=n(xqe,"STRONG",{});var Yxt=s(rEe);uxr=r(Yxt,"bert"),Yxt.forEach(t),_xr=r(xqe," \u2014 "),jY=n(xqe,"A",{href:!0});var Kxt=s(jY);bxr=r(Kxt,"TFBertForQuestionAnswering"),Kxt.forEach(t),vxr=r(xqe," (BERT model)"),xqe.forEach(t),Fxr=i(ge),j5=n(ge,"LI",{});var $qe=s(j5);tEe=n($qe,"STRONG",{});var Zxt=s(tEe);Txr=r(Zxt,"camembert"),Zxt.forEach(t),Mxr=r($qe," \u2014 "),DY=n($qe,"A",{href:!0});var e$t=s(DY);Exr=r(e$t,"TFCamembertForQuestionAnswering"),e$t.forEach(t),Cxr=r($qe," (CamemBERT model)"),$qe.forEach(t),wxr=i(ge),D5=n(ge,"LI",{});var kqe=s(D5);aEe=n(kqe,"STRONG",{});var o$t=s(aEe);Axr=r(o$t,"convbert"),o$t.forEach(t),Lxr=r(kqe," \u2014 "),GY=n(kqe,"A",{href:!0});var r$t=s(GY);yxr=r(r$t,"TFConvBertForQuestionAnswering"),r$t.forEach(t),xxr=r(kqe," (ConvBERT model)"),kqe.forEach(t),$xr=i(ge),G5=n(ge,"LI",{});var Sqe=s(G5);nEe=n(Sqe,"STRONG",{});var t$t=s(nEe);kxr=r(t$t,"deberta"),t$t.forEach(t),Sxr=r(Sqe," \u2014 "),OY=n(Sqe,"A",{href:!0});var a$t=s(OY);Rxr=r(a$t,"TFDebertaForQuestionAnswering"),a$t.forEach(t),Pxr=r(Sqe," (DeBERTa model)"),Sqe.forEach(t),Bxr=i(ge),O5=n(ge,"LI",{});var Rqe=s(O5);sEe=n(Rqe,"STRONG",{});var n$t=s(sEe);Ixr=r(n$t,"deberta-v2"),n$t.forEach(t),Nxr=r(Rqe," \u2014 "),VY=n(Rqe,"A",{href:!0});var s$t=s(VY);qxr=r(s$t,"TFDebertaV2ForQuestionAnswering"),s$t.forEach(t),jxr=r(Rqe," (DeBERTa-v2 model)"),Rqe.forEach(t),Dxr=i(ge),V5=n(ge,"LI",{});var Pqe=s(V5);lEe=n(Pqe,"STRONG",{});var l$t=s(lEe);Gxr=r(l$t,"distilbert"),l$t.forEach(t),Oxr=r(Pqe," \u2014 "),XY=n(Pqe,"A",{href:!0});var i$t=s(XY);Vxr=r(i$t,"TFDistilBertForQuestionAnswering"),i$t.forEach(t),Xxr=r(Pqe," (DistilBERT model)"),Pqe.forEach(t),zxr=i(ge),X5=n(ge,"LI",{});var Bqe=s(X5);iEe=n(Bqe,"STRONG",{});var d$t=s(iEe);Wxr=r(d$t,"electra"),d$t.forEach(t),Qxr=r(Bqe," \u2014 "),zY=n(Bqe,"A",{href:!0});var c$t=s(zY);Hxr=r(c$t,"TFElectraForQuestionAnswering"),c$t.forEach(t),Uxr=r(Bqe," (ELECTRA model)"),Bqe.forEach(t),Jxr=i(ge),z5=n(ge,"LI",{});var Iqe=s(z5);dEe=n(Iqe,"STRONG",{});var f$t=s(dEe);Yxr=r(f$t,"flaubert"),f$t.forEach(t),Kxr=r(Iqe," \u2014 "),WY=n(Iqe,"A",{href:!0});var m$t=s(WY);Zxr=r(m$t,"TFFlaubertForQuestionAnsweringSimple"),m$t.forEach(t),e$r=r(Iqe," (FlauBERT model)"),Iqe.forEach(t),o$r=i(ge),W5=n(ge,"LI",{});var Nqe=s(W5);cEe=n(Nqe,"STRONG",{});var g$t=s(cEe);r$r=r(g$t,"funnel"),g$t.forEach(t),t$r=r(Nqe," \u2014 "),QY=n(Nqe,"A",{href:!0});var h$t=s(QY);a$r=r(h$t,"TFFunnelForQuestionAnswering"),h$t.forEach(t),n$r=r(Nqe," (Funnel Transformer model)"),Nqe.forEach(t),s$r=i(ge),Q5=n(ge,"LI",{});var qqe=s(Q5);fEe=n(qqe,"STRONG",{});var p$t=s(fEe);l$r=r(p$t,"gptj"),p$t.forEach(t),i$r=r(qqe," \u2014 "),HY=n(qqe,"A",{href:!0});var u$t=s(HY);d$r=r(u$t,"TFGPTJForQuestionAnswering"),u$t.forEach(t),c$r=r(qqe," (GPT-J model)"),qqe.forEach(t),f$r=i(ge),H5=n(ge,"LI",{});var jqe=s(H5);mEe=n(jqe,"STRONG",{});var _$t=s(mEe);m$r=r(_$t,"longformer"),_$t.forEach(t),g$r=r(jqe," \u2014 "),UY=n(jqe,"A",{href:!0});var b$t=s(UY);h$r=r(b$t,"TFLongformerForQuestionAnswering"),b$t.forEach(t),p$r=r(jqe," (Longformer model)"),jqe.forEach(t),u$r=i(ge),U5=n(ge,"LI",{});var Dqe=s(U5);gEe=n(Dqe,"STRONG",{});var v$t=s(gEe);_$r=r(v$t,"mobilebert"),v$t.forEach(t),b$r=r(Dqe," \u2014 "),JY=n(Dqe,"A",{href:!0});var F$t=s(JY);v$r=r(F$t,"TFMobileBertForQuestionAnswering"),F$t.forEach(t),F$r=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),T$r=i(ge),J5=n(ge,"LI",{});var Gqe=s(J5);hEe=n(Gqe,"STRONG",{});var T$t=s(hEe);M$r=r(T$t,"mpnet"),T$t.forEach(t),E$r=r(Gqe," \u2014 "),YY=n(Gqe,"A",{href:!0});var M$t=s(YY);C$r=r(M$t,"TFMPNetForQuestionAnswering"),M$t.forEach(t),w$r=r(Gqe," (MPNet model)"),Gqe.forEach(t),A$r=i(ge),Y5=n(ge,"LI",{});var Oqe=s(Y5);pEe=n(Oqe,"STRONG",{});var E$t=s(pEe);L$r=r(E$t,"rembert"),E$t.forEach(t),y$r=r(Oqe," \u2014 "),KY=n(Oqe,"A",{href:!0});var C$t=s(KY);x$r=r(C$t,"TFRemBertForQuestionAnswering"),C$t.forEach(t),$$r=r(Oqe," (RemBERT model)"),Oqe.forEach(t),k$r=i(ge),K5=n(ge,"LI",{});var Vqe=s(K5);uEe=n(Vqe,"STRONG",{});var w$t=s(uEe);S$r=r(w$t,"roberta"),w$t.forEach(t),R$r=r(Vqe," \u2014 "),ZY=n(Vqe,"A",{href:!0});var A$t=s(ZY);P$r=r(A$t,"TFRobertaForQuestionAnswering"),A$t.forEach(t),B$r=r(Vqe," (RoBERTa model)"),Vqe.forEach(t),I$r=i(ge),Z5=n(ge,"LI",{});var Xqe=s(Z5);_Ee=n(Xqe,"STRONG",{});var L$t=s(_Ee);N$r=r(L$t,"roformer"),L$t.forEach(t),q$r=r(Xqe," \u2014 "),eK=n(Xqe,"A",{href:!0});var y$t=s(eK);j$r=r(y$t,"TFRoFormerForQuestionAnswering"),y$t.forEach(t),D$r=r(Xqe," (RoFormer model)"),Xqe.forEach(t),G$r=i(ge),e3=n(ge,"LI",{});var zqe=s(e3);bEe=n(zqe,"STRONG",{});var x$t=s(bEe);O$r=r(x$t,"xlm"),x$t.forEach(t),V$r=r(zqe," \u2014 "),oK=n(zqe,"A",{href:!0});var $$t=s(oK);X$r=r($$t,"TFXLMForQuestionAnsweringSimple"),$$t.forEach(t),z$r=r(zqe," (XLM model)"),zqe.forEach(t),W$r=i(ge),o3=n(ge,"LI",{});var Wqe=s(o3);vEe=n(Wqe,"STRONG",{});var k$t=s(vEe);Q$r=r(k$t,"xlm-roberta"),k$t.forEach(t),H$r=r(Wqe," \u2014 "),rK=n(Wqe,"A",{href:!0});var S$t=s(rK);U$r=r(S$t,"TFXLMRobertaForQuestionAnswering"),S$t.forEach(t),J$r=r(Wqe," (XLM-RoBERTa model)"),Wqe.forEach(t),Y$r=i(ge),r3=n(ge,"LI",{});var Qqe=s(r3);FEe=n(Qqe,"STRONG",{});var R$t=s(FEe);K$r=r(R$t,"xlnet"),R$t.forEach(t),Z$r=r(Qqe," \u2014 "),tK=n(Qqe,"A",{href:!0});var P$t=s(tK);ekr=r(P$t,"TFXLNetForQuestionAnsweringSimple"),P$t.forEach(t),okr=r(Qqe," (XLNet model)"),Qqe.forEach(t),ge.forEach(t),rkr=i(Wl),T(t3.$$.fragment,Wl),Wl.forEach(t),zl.forEach(t),xOe=i(f),Ic=n(f,"H2",{class:!0});var qXe=s(Ic);a3=n(qXe,"A",{id:!0,class:!0,href:!0});var B$t=s(a3);TEe=n(B$t,"SPAN",{});var I$t=s(TEe);T(mx.$$.fragment,I$t),I$t.forEach(t),B$t.forEach(t),tkr=i(qXe),MEe=n(qXe,"SPAN",{});var N$t=s(MEe);akr=r(N$t,"TFAutoModelForVision2Seq"),N$t.forEach(t),qXe.forEach(t),$Oe=i(f),fr=n(f,"DIV",{class:!0});var Ql=s(fr);T(gx.$$.fragment,Ql),nkr=i(Ql),Nc=n(Ql,"P",{});var ure=s(Nc);skr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aK=n(ure,"A",{href:!0});var q$t=s(aK);lkr=r(q$t,"from_pretrained()"),q$t.forEach(t),ikr=r(ure," class method or the "),nK=n(ure,"A",{href:!0});var j$t=s(nK);dkr=r(j$t,"from_config()"),j$t.forEach(t),ckr=r(ure,` class
method.`),ure.forEach(t),fkr=i(Ql),hx=n(Ql,"P",{});var jXe=s(hx);mkr=r(jXe,"This class cannot be instantiated directly using "),EEe=n(jXe,"CODE",{});var D$t=s(EEe);gkr=r(D$t,"__init__()"),D$t.forEach(t),hkr=r(jXe," (throws an error)."),jXe.forEach(t),pkr=i(Ql),Vt=n(Ql,"DIV",{class:!0});var G6=s(Vt);T(px.$$.fragment,G6),ukr=i(G6),CEe=n(G6,"P",{});var G$t=s(CEe);_kr=r(G$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),G$t.forEach(t),bkr=i(G6),qc=n(G6,"P",{});var _re=s(qc);vkr=r(_re,`Note:
Loading a model from its configuration file does `),wEe=n(_re,"STRONG",{});var O$t=s(wEe);Fkr=r(O$t,"not"),O$t.forEach(t),Tkr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(_re,"A",{href:!0});var V$t=s(sK);Mkr=r(V$t,"from_pretrained()"),V$t.forEach(t),Ekr=r(_re," to load the model weights."),_re.forEach(t),Ckr=i(G6),T(n3.$$.fragment,G6),G6.forEach(t),wkr=i(Ql),jr=n(Ql,"DIV",{class:!0});var Hl=s(jr);T(ux.$$.fragment,Hl),Akr=i(Hl),AEe=n(Hl,"P",{});var X$t=s(AEe);Lkr=r(X$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),X$t.forEach(t),ykr=i(Hl),_n=n(Hl,"P",{});var O6=s(_n);xkr=r(O6,"The model class to instantiate is selected based on the "),LEe=n(O6,"CODE",{});var z$t=s(LEe);$kr=r(z$t,"model_type"),z$t.forEach(t),kkr=r(O6,` property of the config object (either
passed as an argument or loaded from `),yEe=n(O6,"CODE",{});var W$t=s(yEe);Skr=r(W$t,"pretrained_model_name_or_path"),W$t.forEach(t),Rkr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xEe=n(O6,"CODE",{});var Q$t=s(xEe);Pkr=r(Q$t,"pretrained_model_name_or_path"),Q$t.forEach(t),Bkr=r(O6,":"),O6.forEach(t),Ikr=i(Hl),$Ee=n(Hl,"UL",{});var H$t=s($Ee);s3=n(H$t,"LI",{});var Hqe=s(s3);kEe=n(Hqe,"STRONG",{});var U$t=s(kEe);Nkr=r(U$t,"vision-encoder-decoder"),U$t.forEach(t),qkr=r(Hqe," \u2014 "),lK=n(Hqe,"A",{href:!0});var J$t=s(lK);jkr=r(J$t,"TFVisionEncoderDecoderModel"),J$t.forEach(t),Dkr=r(Hqe," (Vision Encoder decoder model)"),Hqe.forEach(t),H$t.forEach(t),Gkr=i(Hl),T(l3.$$.fragment,Hl),Hl.forEach(t),Ql.forEach(t),kOe=i(f),jc=n(f,"H2",{class:!0});var DXe=s(jc);i3=n(DXe,"A",{id:!0,class:!0,href:!0});var Y$t=s(i3);SEe=n(Y$t,"SPAN",{});var K$t=s(SEe);T(_x.$$.fragment,K$t),K$t.forEach(t),Y$t.forEach(t),Okr=i(DXe),REe=n(DXe,"SPAN",{});var Z$t=s(REe);Vkr=r(Z$t,"TFAutoModelForSpeechSeq2Seq"),Z$t.forEach(t),DXe.forEach(t),SOe=i(f),mr=n(f,"DIV",{class:!0});var Ul=s(mr);T(bx.$$.fragment,Ul),Xkr=i(Ul),Dc=n(Ul,"P",{});var bre=s(Dc);zkr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),iK=n(bre,"A",{href:!0});var ekt=s(iK);Wkr=r(ekt,"from_pretrained()"),ekt.forEach(t),Qkr=r(bre," class method or the "),dK=n(bre,"A",{href:!0});var okt=s(dK);Hkr=r(okt,"from_config()"),okt.forEach(t),Ukr=r(bre,` class
method.`),bre.forEach(t),Jkr=i(Ul),vx=n(Ul,"P",{});var GXe=s(vx);Ykr=r(GXe,"This class cannot be instantiated directly using "),PEe=n(GXe,"CODE",{});var rkt=s(PEe);Kkr=r(rkt,"__init__()"),rkt.forEach(t),Zkr=r(GXe," (throws an error)."),GXe.forEach(t),eSr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var V6=s(Xt);T(Fx.$$.fragment,V6),oSr=i(V6),BEe=n(V6,"P",{});var tkt=s(BEe);rSr=r(tkt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tkt.forEach(t),tSr=i(V6),Gc=n(V6,"P",{});var vre=s(Gc);aSr=r(vre,`Note:
Loading a model from its configuration file does `),IEe=n(vre,"STRONG",{});var akt=s(IEe);nSr=r(akt,"not"),akt.forEach(t),sSr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(vre,"A",{href:!0});var nkt=s(cK);lSr=r(nkt,"from_pretrained()"),nkt.forEach(t),iSr=r(vre," to load the model weights."),vre.forEach(t),dSr=i(V6),T(d3.$$.fragment,V6),V6.forEach(t),cSr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Tx.$$.fragment,Jl),fSr=i(Jl),NEe=n(Jl,"P",{});var skt=s(NEe);mSr=r(skt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),skt.forEach(t),gSr=i(Jl),bn=n(Jl,"P",{});var X6=s(bn);hSr=r(X6,"The model class to instantiate is selected based on the "),qEe=n(X6,"CODE",{});var lkt=s(qEe);pSr=r(lkt,"model_type"),lkt.forEach(t),uSr=r(X6,` property of the config object (either
passed as an argument or loaded from `),jEe=n(X6,"CODE",{});var ikt=s(jEe);_Sr=r(ikt,"pretrained_model_name_or_path"),ikt.forEach(t),bSr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=n(X6,"CODE",{});var dkt=s(DEe);vSr=r(dkt,"pretrained_model_name_or_path"),dkt.forEach(t),FSr=r(X6,":"),X6.forEach(t),TSr=i(Jl),GEe=n(Jl,"UL",{});var ckt=s(GEe);c3=n(ckt,"LI",{});var Uqe=s(c3);OEe=n(Uqe,"STRONG",{});var fkt=s(OEe);MSr=r(fkt,"speech_to_text"),fkt.forEach(t),ESr=r(Uqe," \u2014 "),fK=n(Uqe,"A",{href:!0});var mkt=s(fK);CSr=r(mkt,"TFSpeech2TextForConditionalGeneration"),mkt.forEach(t),wSr=r(Uqe," (Speech2Text model)"),Uqe.forEach(t),ckt.forEach(t),ASr=i(Jl),T(f3.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),ROe=i(f),Oc=n(f,"H2",{class:!0});var OXe=s(Oc);m3=n(OXe,"A",{id:!0,class:!0,href:!0});var gkt=s(m3);VEe=n(gkt,"SPAN",{});var hkt=s(VEe);T(Mx.$$.fragment,hkt),hkt.forEach(t),gkt.forEach(t),LSr=i(OXe),XEe=n(OXe,"SPAN",{});var pkt=s(XEe);ySr=r(pkt,"FlaxAutoModel"),pkt.forEach(t),OXe.forEach(t),POe=i(f),gr=n(f,"DIV",{class:!0});var Yl=s(gr);T(Ex.$$.fragment,Yl),xSr=i(Yl),Vc=n(Yl,"P",{});var Fre=s(Vc);$Sr=r(Fre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),mK=n(Fre,"A",{href:!0});var ukt=s(mK);kSr=r(ukt,"from_pretrained()"),ukt.forEach(t),SSr=r(Fre," class method or the "),gK=n(Fre,"A",{href:!0});var _kt=s(gK);RSr=r(_kt,"from_config()"),_kt.forEach(t),PSr=r(Fre,` class
method.`),Fre.forEach(t),BSr=i(Yl),Cx=n(Yl,"P",{});var VXe=s(Cx);ISr=r(VXe,"This class cannot be instantiated directly using "),zEe=n(VXe,"CODE",{});var bkt=s(zEe);NSr=r(bkt,"__init__()"),bkt.forEach(t),qSr=r(VXe," (throws an error)."),VXe.forEach(t),jSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var z6=s(zt);T(wx.$$.fragment,z6),DSr=i(z6),WEe=n(z6,"P",{});var vkt=s(WEe);GSr=r(vkt,"Instantiates one of the base model classes of the library from a configuration."),vkt.forEach(t),OSr=i(z6),Xc=n(z6,"P",{});var Tre=s(Xc);VSr=r(Tre,`Note:
Loading a model from its configuration file does `),QEe=n(Tre,"STRONG",{});var Fkt=s(QEe);XSr=r(Fkt,"not"),Fkt.forEach(t),zSr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),hK=n(Tre,"A",{href:!0});var Tkt=s(hK);WSr=r(Tkt,"from_pretrained()"),Tkt.forEach(t),QSr=r(Tre," to load the model weights."),Tre.forEach(t),HSr=i(z6),T(g3.$$.fragment,z6),z6.forEach(t),USr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Ax.$$.fragment,Kl),JSr=i(Kl),HEe=n(Kl,"P",{});var Mkt=s(HEe);YSr=r(Mkt,"Instantiate one of the base model classes of the library from a pretrained model."),Mkt.forEach(t),KSr=i(Kl),vn=n(Kl,"P",{});var W6=s(vn);ZSr=r(W6,"The model class to instantiate is selected based on the "),UEe=n(W6,"CODE",{});var Ekt=s(UEe);eRr=r(Ekt,"model_type"),Ekt.forEach(t),oRr=r(W6,` property of the config object (either
passed as an argument or loaded from `),JEe=n(W6,"CODE",{});var Ckt=s(JEe);rRr=r(Ckt,"pretrained_model_name_or_path"),Ckt.forEach(t),tRr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YEe=n(W6,"CODE",{});var wkt=s(YEe);aRr=r(wkt,"pretrained_model_name_or_path"),wkt.forEach(t),nRr=r(W6,":"),W6.forEach(t),sRr=i(Kl),oe=n(Kl,"UL",{});var ae=s(oe);h3=n(ae,"LI",{});var Jqe=s(h3);KEe=n(Jqe,"STRONG",{});var Akt=s(KEe);lRr=r(Akt,"albert"),Akt.forEach(t),iRr=r(Jqe," \u2014 "),pK=n(Jqe,"A",{href:!0});var Lkt=s(pK);dRr=r(Lkt,"FlaxAlbertModel"),Lkt.forEach(t),cRr=r(Jqe," (ALBERT model)"),Jqe.forEach(t),fRr=i(ae),p3=n(ae,"LI",{});var Yqe=s(p3);ZEe=n(Yqe,"STRONG",{});var ykt=s(ZEe);mRr=r(ykt,"bart"),ykt.forEach(t),gRr=r(Yqe," \u2014 "),uK=n(Yqe,"A",{href:!0});var xkt=s(uK);hRr=r(xkt,"FlaxBartModel"),xkt.forEach(t),pRr=r(Yqe," (BART model)"),Yqe.forEach(t),uRr=i(ae),u3=n(ae,"LI",{});var Kqe=s(u3);eCe=n(Kqe,"STRONG",{});var $kt=s(eCe);_Rr=r($kt,"beit"),$kt.forEach(t),bRr=r(Kqe," \u2014 "),_K=n(Kqe,"A",{href:!0});var kkt=s(_K);vRr=r(kkt,"FlaxBeitModel"),kkt.forEach(t),FRr=r(Kqe," (BEiT model)"),Kqe.forEach(t),TRr=i(ae),_3=n(ae,"LI",{});var Zqe=s(_3);oCe=n(Zqe,"STRONG",{});var Skt=s(oCe);MRr=r(Skt,"bert"),Skt.forEach(t),ERr=r(Zqe," \u2014 "),bK=n(Zqe,"A",{href:!0});var Rkt=s(bK);CRr=r(Rkt,"FlaxBertModel"),Rkt.forEach(t),wRr=r(Zqe," (BERT model)"),Zqe.forEach(t),ARr=i(ae),b3=n(ae,"LI",{});var eje=s(b3);rCe=n(eje,"STRONG",{});var Pkt=s(rCe);LRr=r(Pkt,"big_bird"),Pkt.forEach(t),yRr=r(eje," \u2014 "),vK=n(eje,"A",{href:!0});var Bkt=s(vK);xRr=r(Bkt,"FlaxBigBirdModel"),Bkt.forEach(t),$Rr=r(eje," (BigBird model)"),eje.forEach(t),kRr=i(ae),v3=n(ae,"LI",{});var oje=s(v3);tCe=n(oje,"STRONG",{});var Ikt=s(tCe);SRr=r(Ikt,"blenderbot"),Ikt.forEach(t),RRr=r(oje," \u2014 "),FK=n(oje,"A",{href:!0});var Nkt=s(FK);PRr=r(Nkt,"FlaxBlenderbotModel"),Nkt.forEach(t),BRr=r(oje," (Blenderbot model)"),oje.forEach(t),IRr=i(ae),F3=n(ae,"LI",{});var rje=s(F3);aCe=n(rje,"STRONG",{});var qkt=s(aCe);NRr=r(qkt,"blenderbot-small"),qkt.forEach(t),qRr=r(rje," \u2014 "),TK=n(rje,"A",{href:!0});var jkt=s(TK);jRr=r(jkt,"FlaxBlenderbotSmallModel"),jkt.forEach(t),DRr=r(rje," (BlenderbotSmall model)"),rje.forEach(t),GRr=i(ae),T3=n(ae,"LI",{});var tje=s(T3);nCe=n(tje,"STRONG",{});var Dkt=s(nCe);ORr=r(Dkt,"clip"),Dkt.forEach(t),VRr=r(tje," \u2014 "),MK=n(tje,"A",{href:!0});var Gkt=s(MK);XRr=r(Gkt,"FlaxCLIPModel"),Gkt.forEach(t),zRr=r(tje," (CLIP model)"),tje.forEach(t),WRr=i(ae),M3=n(ae,"LI",{});var aje=s(M3);sCe=n(aje,"STRONG",{});var Okt=s(sCe);QRr=r(Okt,"distilbert"),Okt.forEach(t),HRr=r(aje," \u2014 "),EK=n(aje,"A",{href:!0});var Vkt=s(EK);URr=r(Vkt,"FlaxDistilBertModel"),Vkt.forEach(t),JRr=r(aje," (DistilBERT model)"),aje.forEach(t),YRr=i(ae),E3=n(ae,"LI",{});var nje=s(E3);lCe=n(nje,"STRONG",{});var Xkt=s(lCe);KRr=r(Xkt,"electra"),Xkt.forEach(t),ZRr=r(nje," \u2014 "),CK=n(nje,"A",{href:!0});var zkt=s(CK);ePr=r(zkt,"FlaxElectraModel"),zkt.forEach(t),oPr=r(nje," (ELECTRA model)"),nje.forEach(t),rPr=i(ae),C3=n(ae,"LI",{});var sje=s(C3);iCe=n(sje,"STRONG",{});var Wkt=s(iCe);tPr=r(Wkt,"gpt2"),Wkt.forEach(t),aPr=r(sje," \u2014 "),wK=n(sje,"A",{href:!0});var Qkt=s(wK);nPr=r(Qkt,"FlaxGPT2Model"),Qkt.forEach(t),sPr=r(sje," (OpenAI GPT-2 model)"),sje.forEach(t),lPr=i(ae),w3=n(ae,"LI",{});var lje=s(w3);dCe=n(lje,"STRONG",{});var Hkt=s(dCe);iPr=r(Hkt,"gpt_neo"),Hkt.forEach(t),dPr=r(lje," \u2014 "),AK=n(lje,"A",{href:!0});var Ukt=s(AK);cPr=r(Ukt,"FlaxGPTNeoModel"),Ukt.forEach(t),fPr=r(lje," (GPT Neo model)"),lje.forEach(t),mPr=i(ae),A3=n(ae,"LI",{});var ije=s(A3);cCe=n(ije,"STRONG",{});var Jkt=s(cCe);gPr=r(Jkt,"gptj"),Jkt.forEach(t),hPr=r(ije," \u2014 "),LK=n(ije,"A",{href:!0});var Ykt=s(LK);pPr=r(Ykt,"FlaxGPTJModel"),Ykt.forEach(t),uPr=r(ije," (GPT-J model)"),ije.forEach(t),_Pr=i(ae),L3=n(ae,"LI",{});var dje=s(L3);fCe=n(dje,"STRONG",{});var Kkt=s(fCe);bPr=r(Kkt,"longt5"),Kkt.forEach(t),vPr=r(dje," \u2014 "),yK=n(dje,"A",{href:!0});var Zkt=s(yK);FPr=r(Zkt,"FlaxLongT5Model"),Zkt.forEach(t),TPr=r(dje," (LongT5 model)"),dje.forEach(t),MPr=i(ae),y3=n(ae,"LI",{});var cje=s(y3);mCe=n(cje,"STRONG",{});var eSt=s(mCe);EPr=r(eSt,"marian"),eSt.forEach(t),CPr=r(cje," \u2014 "),xK=n(cje,"A",{href:!0});var oSt=s(xK);wPr=r(oSt,"FlaxMarianModel"),oSt.forEach(t),APr=r(cje," (Marian model)"),cje.forEach(t),LPr=i(ae),x3=n(ae,"LI",{});var fje=s(x3);gCe=n(fje,"STRONG",{});var rSt=s(gCe);yPr=r(rSt,"mbart"),rSt.forEach(t),xPr=r(fje," \u2014 "),$K=n(fje,"A",{href:!0});var tSt=s($K);$Pr=r(tSt,"FlaxMBartModel"),tSt.forEach(t),kPr=r(fje," (mBART model)"),fje.forEach(t),SPr=i(ae),$3=n(ae,"LI",{});var mje=s($3);hCe=n(mje,"STRONG",{});var aSt=s(hCe);RPr=r(aSt,"mt5"),aSt.forEach(t),PPr=r(mje," \u2014 "),kK=n(mje,"A",{href:!0});var nSt=s(kK);BPr=r(nSt,"FlaxMT5Model"),nSt.forEach(t),IPr=r(mje," (MT5 model)"),mje.forEach(t),NPr=i(ae),k3=n(ae,"LI",{});var gje=s(k3);pCe=n(gje,"STRONG",{});var sSt=s(pCe);qPr=r(sSt,"opt"),sSt.forEach(t),jPr=r(gje," \u2014 "),SK=n(gje,"A",{href:!0});var lSt=s(SK);DPr=r(lSt,"FlaxOPTModel"),lSt.forEach(t),GPr=r(gje," (OPT model)"),gje.forEach(t),OPr=i(ae),S3=n(ae,"LI",{});var hje=s(S3);uCe=n(hje,"STRONG",{});var iSt=s(uCe);VPr=r(iSt,"pegasus"),iSt.forEach(t),XPr=r(hje," \u2014 "),RK=n(hje,"A",{href:!0});var dSt=s(RK);zPr=r(dSt,"FlaxPegasusModel"),dSt.forEach(t),WPr=r(hje," (Pegasus model)"),hje.forEach(t),QPr=i(ae),R3=n(ae,"LI",{});var pje=s(R3);_Ce=n(pje,"STRONG",{});var cSt=s(_Ce);HPr=r(cSt,"roberta"),cSt.forEach(t),UPr=r(pje," \u2014 "),PK=n(pje,"A",{href:!0});var fSt=s(PK);JPr=r(fSt,"FlaxRobertaModel"),fSt.forEach(t),YPr=r(pje," (RoBERTa model)"),pje.forEach(t),KPr=i(ae),P3=n(ae,"LI",{});var uje=s(P3);bCe=n(uje,"STRONG",{});var mSt=s(bCe);ZPr=r(mSt,"roformer"),mSt.forEach(t),eBr=r(uje," \u2014 "),BK=n(uje,"A",{href:!0});var gSt=s(BK);oBr=r(gSt,"FlaxRoFormerModel"),gSt.forEach(t),rBr=r(uje," (RoFormer model)"),uje.forEach(t),tBr=i(ae),B3=n(ae,"LI",{});var _je=s(B3);vCe=n(_je,"STRONG",{});var hSt=s(vCe);aBr=r(hSt,"t5"),hSt.forEach(t),nBr=r(_je," \u2014 "),IK=n(_je,"A",{href:!0});var pSt=s(IK);sBr=r(pSt,"FlaxT5Model"),pSt.forEach(t),lBr=r(_je," (T5 model)"),_je.forEach(t),iBr=i(ae),I3=n(ae,"LI",{});var bje=s(I3);FCe=n(bje,"STRONG",{});var uSt=s(FCe);dBr=r(uSt,"vision-text-dual-encoder"),uSt.forEach(t),cBr=r(bje," \u2014 "),NK=n(bje,"A",{href:!0});var _St=s(NK);fBr=r(_St,"FlaxVisionTextDualEncoderModel"),_St.forEach(t),mBr=r(bje," (VisionTextDualEncoder model)"),bje.forEach(t),gBr=i(ae),N3=n(ae,"LI",{});var vje=s(N3);TCe=n(vje,"STRONG",{});var bSt=s(TCe);hBr=r(bSt,"vit"),bSt.forEach(t),pBr=r(vje," \u2014 "),qK=n(vje,"A",{href:!0});var vSt=s(qK);uBr=r(vSt,"FlaxViTModel"),vSt.forEach(t),_Br=r(vje," (ViT model)"),vje.forEach(t),bBr=i(ae),q3=n(ae,"LI",{});var Fje=s(q3);MCe=n(Fje,"STRONG",{});var FSt=s(MCe);vBr=r(FSt,"wav2vec2"),FSt.forEach(t),FBr=r(Fje," \u2014 "),jK=n(Fje,"A",{href:!0});var TSt=s(jK);TBr=r(TSt,"FlaxWav2Vec2Model"),TSt.forEach(t),MBr=r(Fje," (Wav2Vec2 model)"),Fje.forEach(t),EBr=i(ae),j3=n(ae,"LI",{});var Tje=s(j3);ECe=n(Tje,"STRONG",{});var MSt=s(ECe);CBr=r(MSt,"xglm"),MSt.forEach(t),wBr=r(Tje," \u2014 "),DK=n(Tje,"A",{href:!0});var ESt=s(DK);ABr=r(ESt,"FlaxXGLMModel"),ESt.forEach(t),LBr=r(Tje," (XGLM model)"),Tje.forEach(t),yBr=i(ae),D3=n(ae,"LI",{});var Mje=s(D3);CCe=n(Mje,"STRONG",{});var CSt=s(CCe);xBr=r(CSt,"xlm-roberta"),CSt.forEach(t),$Br=r(Mje," \u2014 "),GK=n(Mje,"A",{href:!0});var wSt=s(GK);kBr=r(wSt,"FlaxXLMRobertaModel"),wSt.forEach(t),SBr=r(Mje," (XLM-RoBERTa model)"),Mje.forEach(t),ae.forEach(t),RBr=i(Kl),T(G3.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),BOe=i(f),zc=n(f,"H2",{class:!0});var XXe=s(zc);O3=n(XXe,"A",{id:!0,class:!0,href:!0});var ASt=s(O3);wCe=n(ASt,"SPAN",{});var LSt=s(wCe);T(Lx.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),PBr=i(XXe),ACe=n(XXe,"SPAN",{});var ySt=s(ACe);BBr=r(ySt,"FlaxAutoModelForCausalLM"),ySt.forEach(t),XXe.forEach(t),IOe=i(f),hr=n(f,"DIV",{class:!0});var Zl=s(hr);T(yx.$$.fragment,Zl),IBr=i(Zl),Wc=n(Zl,"P",{});var Mre=s(Wc);NBr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OK=n(Mre,"A",{href:!0});var xSt=s(OK);qBr=r(xSt,"from_pretrained()"),xSt.forEach(t),jBr=r(Mre," class method or the "),VK=n(Mre,"A",{href:!0});var $St=s(VK);DBr=r($St,"from_config()"),$St.forEach(t),GBr=r(Mre,` class
method.`),Mre.forEach(t),OBr=i(Zl),xx=n(Zl,"P",{});var zXe=s(xx);VBr=r(zXe,"This class cannot be instantiated directly using "),LCe=n(zXe,"CODE",{});var kSt=s(LCe);XBr=r(kSt,"__init__()"),kSt.forEach(t),zBr=r(zXe," (throws an error)."),zXe.forEach(t),WBr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var Q6=s(Wt);T($x.$$.fragment,Q6),QBr=i(Q6),yCe=n(Q6,"P",{});var SSt=s(yCe);HBr=r(SSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),SSt.forEach(t),UBr=i(Q6),Qc=n(Q6,"P",{});var Ere=s(Qc);JBr=r(Ere,`Note:
Loading a model from its configuration file does `),xCe=n(Ere,"STRONG",{});var RSt=s(xCe);YBr=r(RSt,"not"),RSt.forEach(t),KBr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),XK=n(Ere,"A",{href:!0});var PSt=s(XK);ZBr=r(PSt,"from_pretrained()"),PSt.forEach(t),eIr=r(Ere," to load the model weights."),Ere.forEach(t),oIr=i(Q6),T(V3.$$.fragment,Q6),Q6.forEach(t),rIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(kx.$$.fragment,ei),tIr=i(ei),$Ce=n(ei,"P",{});var BSt=s($Ce);aIr=r(BSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BSt.forEach(t),nIr=i(ei),Fn=n(ei,"P",{});var H6=s(Fn);sIr=r(H6,"The model class to instantiate is selected based on the "),kCe=n(H6,"CODE",{});var ISt=s(kCe);lIr=r(ISt,"model_type"),ISt.forEach(t),iIr=r(H6,` property of the config object (either
passed as an argument or loaded from `),SCe=n(H6,"CODE",{});var NSt=s(SCe);dIr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),cIr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RCe=n(H6,"CODE",{});var qSt=s(RCe);fIr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),mIr=r(H6,":"),H6.forEach(t),gIr=i(ei),xe=n(ei,"UL",{});var Ne=s(xe);X3=n(Ne,"LI",{});var Eje=s(X3);PCe=n(Eje,"STRONG",{});var jSt=s(PCe);hIr=r(jSt,"bart"),jSt.forEach(t),pIr=r(Eje," \u2014 "),zK=n(Eje,"A",{href:!0});var DSt=s(zK);uIr=r(DSt,"FlaxBartForCausalLM"),DSt.forEach(t),_Ir=r(Eje," (BART model)"),Eje.forEach(t),bIr=i(Ne),z3=n(Ne,"LI",{});var Cje=s(z3);BCe=n(Cje,"STRONG",{});var GSt=s(BCe);vIr=r(GSt,"bert"),GSt.forEach(t),FIr=r(Cje," \u2014 "),WK=n(Cje,"A",{href:!0});var OSt=s(WK);TIr=r(OSt,"FlaxBertForCausalLM"),OSt.forEach(t),MIr=r(Cje," (BERT model)"),Cje.forEach(t),EIr=i(Ne),W3=n(Ne,"LI",{});var wje=s(W3);ICe=n(wje,"STRONG",{});var VSt=s(ICe);CIr=r(VSt,"big_bird"),VSt.forEach(t),wIr=r(wje," \u2014 "),QK=n(wje,"A",{href:!0});var XSt=s(QK);AIr=r(XSt,"FlaxBigBirdForCausalLM"),XSt.forEach(t),LIr=r(wje," (BigBird model)"),wje.forEach(t),yIr=i(Ne),Q3=n(Ne,"LI",{});var Aje=s(Q3);NCe=n(Aje,"STRONG",{});var zSt=s(NCe);xIr=r(zSt,"electra"),zSt.forEach(t),$Ir=r(Aje," \u2014 "),HK=n(Aje,"A",{href:!0});var WSt=s(HK);kIr=r(WSt,"FlaxElectraForCausalLM"),WSt.forEach(t),SIr=r(Aje," (ELECTRA model)"),Aje.forEach(t),RIr=i(Ne),H3=n(Ne,"LI",{});var Lje=s(H3);qCe=n(Lje,"STRONG",{});var QSt=s(qCe);PIr=r(QSt,"gpt2"),QSt.forEach(t),BIr=r(Lje," \u2014 "),UK=n(Lje,"A",{href:!0});var HSt=s(UK);IIr=r(HSt,"FlaxGPT2LMHeadModel"),HSt.forEach(t),NIr=r(Lje," (OpenAI GPT-2 model)"),Lje.forEach(t),qIr=i(Ne),U3=n(Ne,"LI",{});var yje=s(U3);jCe=n(yje,"STRONG",{});var USt=s(jCe);jIr=r(USt,"gpt_neo"),USt.forEach(t),DIr=r(yje," \u2014 "),JK=n(yje,"A",{href:!0});var JSt=s(JK);GIr=r(JSt,"FlaxGPTNeoForCausalLM"),JSt.forEach(t),OIr=r(yje," (GPT Neo model)"),yje.forEach(t),VIr=i(Ne),J3=n(Ne,"LI",{});var xje=s(J3);DCe=n(xje,"STRONG",{});var YSt=s(DCe);XIr=r(YSt,"gptj"),YSt.forEach(t),zIr=r(xje," \u2014 "),YK=n(xje,"A",{href:!0});var KSt=s(YK);WIr=r(KSt,"FlaxGPTJForCausalLM"),KSt.forEach(t),QIr=r(xje," (GPT-J model)"),xje.forEach(t),HIr=i(Ne),Y3=n(Ne,"LI",{});var $je=s(Y3);GCe=n($je,"STRONG",{});var ZSt=s(GCe);UIr=r(ZSt,"opt"),ZSt.forEach(t),JIr=r($je," \u2014 "),KK=n($je,"A",{href:!0});var eRt=s(KK);YIr=r(eRt,"FlaxOPTForCausalLM"),eRt.forEach(t),KIr=r($je," (OPT model)"),$je.forEach(t),ZIr=i(Ne),K3=n(Ne,"LI",{});var kje=s(K3);OCe=n(kje,"STRONG",{});var oRt=s(OCe);eNr=r(oRt,"roberta"),oRt.forEach(t),oNr=r(kje," \u2014 "),ZK=n(kje,"A",{href:!0});var rRt=s(ZK);rNr=r(rRt,"FlaxRobertaForCausalLM"),rRt.forEach(t),tNr=r(kje," (RoBERTa model)"),kje.forEach(t),aNr=i(Ne),Z3=n(Ne,"LI",{});var Sje=s(Z3);VCe=n(Sje,"STRONG",{});var tRt=s(VCe);nNr=r(tRt,"xglm"),tRt.forEach(t),sNr=r(Sje," \u2014 "),eZ=n(Sje,"A",{href:!0});var aRt=s(eZ);lNr=r(aRt,"FlaxXGLMForCausalLM"),aRt.forEach(t),iNr=r(Sje," (XGLM model)"),Sje.forEach(t),Ne.forEach(t),dNr=i(ei),T(e0.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),NOe=i(f),Hc=n(f,"H2",{class:!0});var WXe=s(Hc);o0=n(WXe,"A",{id:!0,class:!0,href:!0});var nRt=s(o0);XCe=n(nRt,"SPAN",{});var sRt=s(XCe);T(Sx.$$.fragment,sRt),sRt.forEach(t),nRt.forEach(t),cNr=i(WXe),zCe=n(WXe,"SPAN",{});var lRt=s(zCe);fNr=r(lRt,"FlaxAutoModelForPreTraining"),lRt.forEach(t),WXe.forEach(t),qOe=i(f),pr=n(f,"DIV",{class:!0});var oi=s(pr);T(Rx.$$.fragment,oi),mNr=i(oi),Uc=n(oi,"P",{});var Cre=s(Uc);gNr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),oZ=n(Cre,"A",{href:!0});var iRt=s(oZ);hNr=r(iRt,"from_pretrained()"),iRt.forEach(t),pNr=r(Cre," class method or the "),rZ=n(Cre,"A",{href:!0});var dRt=s(rZ);uNr=r(dRt,"from_config()"),dRt.forEach(t),_Nr=r(Cre,` class
method.`),Cre.forEach(t),bNr=i(oi),Px=n(oi,"P",{});var QXe=s(Px);vNr=r(QXe,"This class cannot be instantiated directly using "),WCe=n(QXe,"CODE",{});var cRt=s(WCe);FNr=r(cRt,"__init__()"),cRt.forEach(t),TNr=r(QXe," (throws an error)."),QXe.forEach(t),MNr=i(oi),Qt=n(oi,"DIV",{class:!0});var U6=s(Qt);T(Bx.$$.fragment,U6),ENr=i(U6),QCe=n(U6,"P",{});var fRt=s(QCe);CNr=r(fRt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),fRt.forEach(t),wNr=i(U6),Jc=n(U6,"P",{});var wre=s(Jc);ANr=r(wre,`Note:
Loading a model from its configuration file does `),HCe=n(wre,"STRONG",{});var mRt=s(HCe);LNr=r(mRt,"not"),mRt.forEach(t),yNr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),tZ=n(wre,"A",{href:!0});var gRt=s(tZ);xNr=r(gRt,"from_pretrained()"),gRt.forEach(t),$Nr=r(wre," to load the model weights."),wre.forEach(t),kNr=i(U6),T(r0.$$.fragment,U6),U6.forEach(t),SNr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Ix.$$.fragment,ri),RNr=i(ri),UCe=n(ri,"P",{});var hRt=s(UCe);PNr=r(hRt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hRt.forEach(t),BNr=i(ri),Tn=n(ri,"P",{});var J6=s(Tn);INr=r(J6,"The model class to instantiate is selected based on the "),JCe=n(J6,"CODE",{});var pRt=s(JCe);NNr=r(pRt,"model_type"),pRt.forEach(t),qNr=r(J6,` property of the config object (either
passed as an argument or loaded from `),YCe=n(J6,"CODE",{});var uRt=s(YCe);jNr=r(uRt,"pretrained_model_name_or_path"),uRt.forEach(t),DNr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=n(J6,"CODE",{});var _Rt=s(KCe);GNr=r(_Rt,"pretrained_model_name_or_path"),_Rt.forEach(t),ONr=r(J6,":"),J6.forEach(t),VNr=i(ri),Ee=n(ri,"UL",{});var we=s(Ee);t0=n(we,"LI",{});var Rje=s(t0);ZCe=n(Rje,"STRONG",{});var bRt=s(ZCe);XNr=r(bRt,"albert"),bRt.forEach(t),zNr=r(Rje," \u2014 "),aZ=n(Rje,"A",{href:!0});var vRt=s(aZ);WNr=r(vRt,"FlaxAlbertForPreTraining"),vRt.forEach(t),QNr=r(Rje," (ALBERT model)"),Rje.forEach(t),HNr=i(we),a0=n(we,"LI",{});var Pje=s(a0);e5e=n(Pje,"STRONG",{});var FRt=s(e5e);UNr=r(FRt,"bart"),FRt.forEach(t),JNr=r(Pje," \u2014 "),nZ=n(Pje,"A",{href:!0});var TRt=s(nZ);YNr=r(TRt,"FlaxBartForConditionalGeneration"),TRt.forEach(t),KNr=r(Pje," (BART model)"),Pje.forEach(t),ZNr=i(we),n0=n(we,"LI",{});var Bje=s(n0);o5e=n(Bje,"STRONG",{});var MRt=s(o5e);eqr=r(MRt,"bert"),MRt.forEach(t),oqr=r(Bje," \u2014 "),sZ=n(Bje,"A",{href:!0});var ERt=s(sZ);rqr=r(ERt,"FlaxBertForPreTraining"),ERt.forEach(t),tqr=r(Bje," (BERT model)"),Bje.forEach(t),aqr=i(we),s0=n(we,"LI",{});var Ije=s(s0);r5e=n(Ije,"STRONG",{});var CRt=s(r5e);nqr=r(CRt,"big_bird"),CRt.forEach(t),sqr=r(Ije," \u2014 "),lZ=n(Ije,"A",{href:!0});var wRt=s(lZ);lqr=r(wRt,"FlaxBigBirdForPreTraining"),wRt.forEach(t),iqr=r(Ije," (BigBird model)"),Ije.forEach(t),dqr=i(we),l0=n(we,"LI",{});var Nje=s(l0);t5e=n(Nje,"STRONG",{});var ARt=s(t5e);cqr=r(ARt,"electra"),ARt.forEach(t),fqr=r(Nje," \u2014 "),iZ=n(Nje,"A",{href:!0});var LRt=s(iZ);mqr=r(LRt,"FlaxElectraForPreTraining"),LRt.forEach(t),gqr=r(Nje," (ELECTRA model)"),Nje.forEach(t),hqr=i(we),i0=n(we,"LI",{});var qje=s(i0);a5e=n(qje,"STRONG",{});var yRt=s(a5e);pqr=r(yRt,"longt5"),yRt.forEach(t),uqr=r(qje," \u2014 "),dZ=n(qje,"A",{href:!0});var xRt=s(dZ);_qr=r(xRt,"FlaxLongT5ForConditionalGeneration"),xRt.forEach(t),bqr=r(qje," (LongT5 model)"),qje.forEach(t),vqr=i(we),d0=n(we,"LI",{});var jje=s(d0);n5e=n(jje,"STRONG",{});var $Rt=s(n5e);Fqr=r($Rt,"mbart"),$Rt.forEach(t),Tqr=r(jje," \u2014 "),cZ=n(jje,"A",{href:!0});var kRt=s(cZ);Mqr=r(kRt,"FlaxMBartForConditionalGeneration"),kRt.forEach(t),Eqr=r(jje," (mBART model)"),jje.forEach(t),Cqr=i(we),c0=n(we,"LI",{});var Dje=s(c0);s5e=n(Dje,"STRONG",{});var SRt=s(s5e);wqr=r(SRt,"mt5"),SRt.forEach(t),Aqr=r(Dje," \u2014 "),fZ=n(Dje,"A",{href:!0});var RRt=s(fZ);Lqr=r(RRt,"FlaxMT5ForConditionalGeneration"),RRt.forEach(t),yqr=r(Dje," (MT5 model)"),Dje.forEach(t),xqr=i(we),f0=n(we,"LI",{});var Gje=s(f0);l5e=n(Gje,"STRONG",{});var PRt=s(l5e);$qr=r(PRt,"roberta"),PRt.forEach(t),kqr=r(Gje," \u2014 "),mZ=n(Gje,"A",{href:!0});var BRt=s(mZ);Sqr=r(BRt,"FlaxRobertaForMaskedLM"),BRt.forEach(t),Rqr=r(Gje," (RoBERTa model)"),Gje.forEach(t),Pqr=i(we),m0=n(we,"LI",{});var Oje=s(m0);i5e=n(Oje,"STRONG",{});var IRt=s(i5e);Bqr=r(IRt,"roformer"),IRt.forEach(t),Iqr=r(Oje," \u2014 "),gZ=n(Oje,"A",{href:!0});var NRt=s(gZ);Nqr=r(NRt,"FlaxRoFormerForMaskedLM"),NRt.forEach(t),qqr=r(Oje," (RoFormer model)"),Oje.forEach(t),jqr=i(we),g0=n(we,"LI",{});var Vje=s(g0);d5e=n(Vje,"STRONG",{});var qRt=s(d5e);Dqr=r(qRt,"t5"),qRt.forEach(t),Gqr=r(Vje," \u2014 "),hZ=n(Vje,"A",{href:!0});var jRt=s(hZ);Oqr=r(jRt,"FlaxT5ForConditionalGeneration"),jRt.forEach(t),Vqr=r(Vje," (T5 model)"),Vje.forEach(t),Xqr=i(we),h0=n(we,"LI",{});var Xje=s(h0);c5e=n(Xje,"STRONG",{});var DRt=s(c5e);zqr=r(DRt,"wav2vec2"),DRt.forEach(t),Wqr=r(Xje," \u2014 "),pZ=n(Xje,"A",{href:!0});var GRt=s(pZ);Qqr=r(GRt,"FlaxWav2Vec2ForPreTraining"),GRt.forEach(t),Hqr=r(Xje," (Wav2Vec2 model)"),Xje.forEach(t),Uqr=i(we),p0=n(we,"LI",{});var zje=s(p0);f5e=n(zje,"STRONG",{});var ORt=s(f5e);Jqr=r(ORt,"xlm-roberta"),ORt.forEach(t),Yqr=r(zje," \u2014 "),uZ=n(zje,"A",{href:!0});var VRt=s(uZ);Kqr=r(VRt,"FlaxXLMRobertaForMaskedLM"),VRt.forEach(t),Zqr=r(zje," (XLM-RoBERTa model)"),zje.forEach(t),we.forEach(t),ejr=i(ri),T(u0.$$.fragment,ri),ri.forEach(t),oi.forEach(t),jOe=i(f),Yc=n(f,"H2",{class:!0});var HXe=s(Yc);_0=n(HXe,"A",{id:!0,class:!0,href:!0});var XRt=s(_0);m5e=n(XRt,"SPAN",{});var zRt=s(m5e);T(Nx.$$.fragment,zRt),zRt.forEach(t),XRt.forEach(t),ojr=i(HXe),g5e=n(HXe,"SPAN",{});var WRt=s(g5e);rjr=r(WRt,"FlaxAutoModelForMaskedLM"),WRt.forEach(t),HXe.forEach(t),DOe=i(f),ur=n(f,"DIV",{class:!0});var ti=s(ur);T(qx.$$.fragment,ti),tjr=i(ti),Kc=n(ti,"P",{});var Are=s(Kc);ajr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),_Z=n(Are,"A",{href:!0});var QRt=s(_Z);njr=r(QRt,"from_pretrained()"),QRt.forEach(t),sjr=r(Are," class method or the "),bZ=n(Are,"A",{href:!0});var HRt=s(bZ);ljr=r(HRt,"from_config()"),HRt.forEach(t),ijr=r(Are,` class
method.`),Are.forEach(t),djr=i(ti),jx=n(ti,"P",{});var UXe=s(jx);cjr=r(UXe,"This class cannot be instantiated directly using "),h5e=n(UXe,"CODE",{});var URt=s(h5e);fjr=r(URt,"__init__()"),URt.forEach(t),mjr=r(UXe," (throws an error)."),UXe.forEach(t),gjr=i(ti),Ht=n(ti,"DIV",{class:!0});var Y6=s(Ht);T(Dx.$$.fragment,Y6),hjr=i(Y6),p5e=n(Y6,"P",{});var JRt=s(p5e);pjr=r(JRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),JRt.forEach(t),ujr=i(Y6),Zc=n(Y6,"P",{});var Lre=s(Zc);_jr=r(Lre,`Note:
Loading a model from its configuration file does `),u5e=n(Lre,"STRONG",{});var YRt=s(u5e);bjr=r(YRt,"not"),YRt.forEach(t),vjr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),vZ=n(Lre,"A",{href:!0});var KRt=s(vZ);Fjr=r(KRt,"from_pretrained()"),KRt.forEach(t),Tjr=r(Lre," to load the model weights."),Lre.forEach(t),Mjr=i(Y6),T(b0.$$.fragment,Y6),Y6.forEach(t),Ejr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(Gx.$$.fragment,ai),Cjr=i(ai),_5e=n(ai,"P",{});var ZRt=s(_5e);wjr=r(ZRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ZRt.forEach(t),Ajr=i(ai),Mn=n(ai,"P",{});var K6=s(Mn);Ljr=r(K6,"The model class to instantiate is selected based on the "),b5e=n(K6,"CODE",{});var ePt=s(b5e);yjr=r(ePt,"model_type"),ePt.forEach(t),xjr=r(K6,` property of the config object (either
passed as an argument or loaded from `),v5e=n(K6,"CODE",{});var oPt=s(v5e);$jr=r(oPt,"pretrained_model_name_or_path"),oPt.forEach(t),kjr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(K6,"CODE",{});var rPt=s(F5e);Sjr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),Rjr=r(K6,":"),K6.forEach(t),Pjr=i(ai),$e=n(ai,"UL",{});var qe=s($e);v0=n(qe,"LI",{});var Wje=s(v0);T5e=n(Wje,"STRONG",{});var tPt=s(T5e);Bjr=r(tPt,"albert"),tPt.forEach(t),Ijr=r(Wje," \u2014 "),FZ=n(Wje,"A",{href:!0});var aPt=s(FZ);Njr=r(aPt,"FlaxAlbertForMaskedLM"),aPt.forEach(t),qjr=r(Wje," (ALBERT model)"),Wje.forEach(t),jjr=i(qe),F0=n(qe,"LI",{});var Qje=s(F0);M5e=n(Qje,"STRONG",{});var nPt=s(M5e);Djr=r(nPt,"bart"),nPt.forEach(t),Gjr=r(Qje," \u2014 "),TZ=n(Qje,"A",{href:!0});var sPt=s(TZ);Ojr=r(sPt,"FlaxBartForConditionalGeneration"),sPt.forEach(t),Vjr=r(Qje," (BART model)"),Qje.forEach(t),Xjr=i(qe),T0=n(qe,"LI",{});var Hje=s(T0);E5e=n(Hje,"STRONG",{});var lPt=s(E5e);zjr=r(lPt,"bert"),lPt.forEach(t),Wjr=r(Hje," \u2014 "),MZ=n(Hje,"A",{href:!0});var iPt=s(MZ);Qjr=r(iPt,"FlaxBertForMaskedLM"),iPt.forEach(t),Hjr=r(Hje," (BERT model)"),Hje.forEach(t),Ujr=i(qe),M0=n(qe,"LI",{});var Uje=s(M0);C5e=n(Uje,"STRONG",{});var dPt=s(C5e);Jjr=r(dPt,"big_bird"),dPt.forEach(t),Yjr=r(Uje," \u2014 "),EZ=n(Uje,"A",{href:!0});var cPt=s(EZ);Kjr=r(cPt,"FlaxBigBirdForMaskedLM"),cPt.forEach(t),Zjr=r(Uje," (BigBird model)"),Uje.forEach(t),eDr=i(qe),E0=n(qe,"LI",{});var Jje=s(E0);w5e=n(Jje,"STRONG",{});var fPt=s(w5e);oDr=r(fPt,"distilbert"),fPt.forEach(t),rDr=r(Jje," \u2014 "),CZ=n(Jje,"A",{href:!0});var mPt=s(CZ);tDr=r(mPt,"FlaxDistilBertForMaskedLM"),mPt.forEach(t),aDr=r(Jje," (DistilBERT model)"),Jje.forEach(t),nDr=i(qe),C0=n(qe,"LI",{});var Yje=s(C0);A5e=n(Yje,"STRONG",{});var gPt=s(A5e);sDr=r(gPt,"electra"),gPt.forEach(t),lDr=r(Yje," \u2014 "),wZ=n(Yje,"A",{href:!0});var hPt=s(wZ);iDr=r(hPt,"FlaxElectraForMaskedLM"),hPt.forEach(t),dDr=r(Yje," (ELECTRA model)"),Yje.forEach(t),cDr=i(qe),w0=n(qe,"LI",{});var Kje=s(w0);L5e=n(Kje,"STRONG",{});var pPt=s(L5e);fDr=r(pPt,"mbart"),pPt.forEach(t),mDr=r(Kje," \u2014 "),AZ=n(Kje,"A",{href:!0});var uPt=s(AZ);gDr=r(uPt,"FlaxMBartForConditionalGeneration"),uPt.forEach(t),hDr=r(Kje," (mBART model)"),Kje.forEach(t),pDr=i(qe),A0=n(qe,"LI",{});var Zje=s(A0);y5e=n(Zje,"STRONG",{});var _Pt=s(y5e);uDr=r(_Pt,"roberta"),_Pt.forEach(t),_Dr=r(Zje," \u2014 "),LZ=n(Zje,"A",{href:!0});var bPt=s(LZ);bDr=r(bPt,"FlaxRobertaForMaskedLM"),bPt.forEach(t),vDr=r(Zje," (RoBERTa model)"),Zje.forEach(t),FDr=i(qe),L0=n(qe,"LI",{});var eDe=s(L0);x5e=n(eDe,"STRONG",{});var vPt=s(x5e);TDr=r(vPt,"roformer"),vPt.forEach(t),MDr=r(eDe," \u2014 "),yZ=n(eDe,"A",{href:!0});var FPt=s(yZ);EDr=r(FPt,"FlaxRoFormerForMaskedLM"),FPt.forEach(t),CDr=r(eDe," (RoFormer model)"),eDe.forEach(t),wDr=i(qe),y0=n(qe,"LI",{});var oDe=s(y0);$5e=n(oDe,"STRONG",{});var TPt=s($5e);ADr=r(TPt,"xlm-roberta"),TPt.forEach(t),LDr=r(oDe," \u2014 "),xZ=n(oDe,"A",{href:!0});var MPt=s(xZ);yDr=r(MPt,"FlaxXLMRobertaForMaskedLM"),MPt.forEach(t),xDr=r(oDe," (XLM-RoBERTa model)"),oDe.forEach(t),qe.forEach(t),$Dr=i(ai),T(x0.$$.fragment,ai),ai.forEach(t),ti.forEach(t),GOe=i(f),ef=n(f,"H2",{class:!0});var JXe=s(ef);$0=n(JXe,"A",{id:!0,class:!0,href:!0});var EPt=s($0);k5e=n(EPt,"SPAN",{});var CPt=s(k5e);T(Ox.$$.fragment,CPt),CPt.forEach(t),EPt.forEach(t),kDr=i(JXe),S5e=n(JXe,"SPAN",{});var wPt=s(S5e);SDr=r(wPt,"FlaxAutoModelForSeq2SeqLM"),wPt.forEach(t),JXe.forEach(t),OOe=i(f),_r=n(f,"DIV",{class:!0});var ni=s(_r);T(Vx.$$.fragment,ni),RDr=i(ni),of=n(ni,"P",{});var yre=s(of);PDr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),$Z=n(yre,"A",{href:!0});var APt=s($Z);BDr=r(APt,"from_pretrained()"),APt.forEach(t),IDr=r(yre," class method or the "),kZ=n(yre,"A",{href:!0});var LPt=s(kZ);NDr=r(LPt,"from_config()"),LPt.forEach(t),qDr=r(yre,` class
method.`),yre.forEach(t),jDr=i(ni),Xx=n(ni,"P",{});var YXe=s(Xx);DDr=r(YXe,"This class cannot be instantiated directly using "),R5e=n(YXe,"CODE",{});var yPt=s(R5e);GDr=r(yPt,"__init__()"),yPt.forEach(t),ODr=r(YXe," (throws an error)."),YXe.forEach(t),VDr=i(ni),Ut=n(ni,"DIV",{class:!0});var Z6=s(Ut);T(zx.$$.fragment,Z6),XDr=i(Z6),P5e=n(Z6,"P",{});var xPt=s(P5e);zDr=r(xPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xPt.forEach(t),WDr=i(Z6),rf=n(Z6,"P",{});var xre=s(rf);QDr=r(xre,`Note:
Loading a model from its configuration file does `),B5e=n(xre,"STRONG",{});var $Pt=s(B5e);HDr=r($Pt,"not"),$Pt.forEach(t),UDr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SZ=n(xre,"A",{href:!0});var kPt=s(SZ);JDr=r(kPt,"from_pretrained()"),kPt.forEach(t),YDr=r(xre," to load the model weights."),xre.forEach(t),KDr=i(Z6),T(k0.$$.fragment,Z6),Z6.forEach(t),ZDr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(Wx.$$.fragment,si),eGr=i(si),I5e=n(si,"P",{});var SPt=s(I5e);oGr=r(SPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),SPt.forEach(t),rGr=i(si),En=n(si,"P",{});var eL=s(En);tGr=r(eL,"The model class to instantiate is selected based on the "),N5e=n(eL,"CODE",{});var RPt=s(N5e);aGr=r(RPt,"model_type"),RPt.forEach(t),nGr=r(eL,` property of the config object (either
passed as an argument or loaded from `),q5e=n(eL,"CODE",{});var PPt=s(q5e);sGr=r(PPt,"pretrained_model_name_or_path"),PPt.forEach(t),lGr=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j5e=n(eL,"CODE",{});var BPt=s(j5e);iGr=r(BPt,"pretrained_model_name_or_path"),BPt.forEach(t),dGr=r(eL,":"),eL.forEach(t),cGr=i(si),ke=n(si,"UL",{});var je=s(ke);S0=n(je,"LI",{});var rDe=s(S0);D5e=n(rDe,"STRONG",{});var IPt=s(D5e);fGr=r(IPt,"bart"),IPt.forEach(t),mGr=r(rDe," \u2014 "),RZ=n(rDe,"A",{href:!0});var NPt=s(RZ);gGr=r(NPt,"FlaxBartForConditionalGeneration"),NPt.forEach(t),hGr=r(rDe," (BART model)"),rDe.forEach(t),pGr=i(je),R0=n(je,"LI",{});var tDe=s(R0);G5e=n(tDe,"STRONG",{});var qPt=s(G5e);uGr=r(qPt,"blenderbot"),qPt.forEach(t),_Gr=r(tDe," \u2014 "),PZ=n(tDe,"A",{href:!0});var jPt=s(PZ);bGr=r(jPt,"FlaxBlenderbotForConditionalGeneration"),jPt.forEach(t),vGr=r(tDe," (Blenderbot model)"),tDe.forEach(t),FGr=i(je),P0=n(je,"LI",{});var aDe=s(P0);O5e=n(aDe,"STRONG",{});var DPt=s(O5e);TGr=r(DPt,"blenderbot-small"),DPt.forEach(t),MGr=r(aDe," \u2014 "),BZ=n(aDe,"A",{href:!0});var GPt=s(BZ);EGr=r(GPt,"FlaxBlenderbotSmallForConditionalGeneration"),GPt.forEach(t),CGr=r(aDe," (BlenderbotSmall model)"),aDe.forEach(t),wGr=i(je),B0=n(je,"LI",{});var nDe=s(B0);V5e=n(nDe,"STRONG",{});var OPt=s(V5e);AGr=r(OPt,"encoder-decoder"),OPt.forEach(t),LGr=r(nDe," \u2014 "),IZ=n(nDe,"A",{href:!0});var VPt=s(IZ);yGr=r(VPt,"FlaxEncoderDecoderModel"),VPt.forEach(t),xGr=r(nDe," (Encoder decoder model)"),nDe.forEach(t),$Gr=i(je),I0=n(je,"LI",{});var sDe=s(I0);X5e=n(sDe,"STRONG",{});var XPt=s(X5e);kGr=r(XPt,"longt5"),XPt.forEach(t),SGr=r(sDe," \u2014 "),NZ=n(sDe,"A",{href:!0});var zPt=s(NZ);RGr=r(zPt,"FlaxLongT5ForConditionalGeneration"),zPt.forEach(t),PGr=r(sDe," (LongT5 model)"),sDe.forEach(t),BGr=i(je),N0=n(je,"LI",{});var lDe=s(N0);z5e=n(lDe,"STRONG",{});var WPt=s(z5e);IGr=r(WPt,"marian"),WPt.forEach(t),NGr=r(lDe," \u2014 "),qZ=n(lDe,"A",{href:!0});var QPt=s(qZ);qGr=r(QPt,"FlaxMarianMTModel"),QPt.forEach(t),jGr=r(lDe," (Marian model)"),lDe.forEach(t),DGr=i(je),q0=n(je,"LI",{});var iDe=s(q0);W5e=n(iDe,"STRONG",{});var HPt=s(W5e);GGr=r(HPt,"mbart"),HPt.forEach(t),OGr=r(iDe," \u2014 "),jZ=n(iDe,"A",{href:!0});var UPt=s(jZ);VGr=r(UPt,"FlaxMBartForConditionalGeneration"),UPt.forEach(t),XGr=r(iDe," (mBART model)"),iDe.forEach(t),zGr=i(je),j0=n(je,"LI",{});var dDe=s(j0);Q5e=n(dDe,"STRONG",{});var JPt=s(Q5e);WGr=r(JPt,"mt5"),JPt.forEach(t),QGr=r(dDe," \u2014 "),DZ=n(dDe,"A",{href:!0});var YPt=s(DZ);HGr=r(YPt,"FlaxMT5ForConditionalGeneration"),YPt.forEach(t),UGr=r(dDe," (MT5 model)"),dDe.forEach(t),JGr=i(je),D0=n(je,"LI",{});var cDe=s(D0);H5e=n(cDe,"STRONG",{});var KPt=s(H5e);YGr=r(KPt,"pegasus"),KPt.forEach(t),KGr=r(cDe," \u2014 "),GZ=n(cDe,"A",{href:!0});var ZPt=s(GZ);ZGr=r(ZPt,"FlaxPegasusForConditionalGeneration"),ZPt.forEach(t),eOr=r(cDe," (Pegasus model)"),cDe.forEach(t),oOr=i(je),G0=n(je,"LI",{});var fDe=s(G0);U5e=n(fDe,"STRONG",{});var eBt=s(U5e);rOr=r(eBt,"t5"),eBt.forEach(t),tOr=r(fDe," \u2014 "),OZ=n(fDe,"A",{href:!0});var oBt=s(OZ);aOr=r(oBt,"FlaxT5ForConditionalGeneration"),oBt.forEach(t),nOr=r(fDe," (T5 model)"),fDe.forEach(t),je.forEach(t),sOr=i(si),T(O0.$$.fragment,si),si.forEach(t),ni.forEach(t),VOe=i(f),tf=n(f,"H2",{class:!0});var KXe=s(tf);V0=n(KXe,"A",{id:!0,class:!0,href:!0});var rBt=s(V0);J5e=n(rBt,"SPAN",{});var tBt=s(J5e);T(Qx.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),lOr=i(KXe),Y5e=n(KXe,"SPAN",{});var aBt=s(Y5e);iOr=r(aBt,"FlaxAutoModelForSequenceClassification"),aBt.forEach(t),KXe.forEach(t),XOe=i(f),br=n(f,"DIV",{class:!0});var li=s(br);T(Hx.$$.fragment,li),dOr=i(li),af=n(li,"P",{});var $re=s(af);cOr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VZ=n($re,"A",{href:!0});var nBt=s(VZ);fOr=r(nBt,"from_pretrained()"),nBt.forEach(t),mOr=r($re," class method or the "),XZ=n($re,"A",{href:!0});var sBt=s(XZ);gOr=r(sBt,"from_config()"),sBt.forEach(t),hOr=r($re,` class
method.`),$re.forEach(t),pOr=i(li),Ux=n(li,"P",{});var ZXe=s(Ux);uOr=r(ZXe,"This class cannot be instantiated directly using "),K5e=n(ZXe,"CODE",{});var lBt=s(K5e);_Or=r(lBt,"__init__()"),lBt.forEach(t),bOr=r(ZXe," (throws an error)."),ZXe.forEach(t),vOr=i(li),Jt=n(li,"DIV",{class:!0});var oL=s(Jt);T(Jx.$$.fragment,oL),FOr=i(oL),Z5e=n(oL,"P",{});var iBt=s(Z5e);TOr=r(iBt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),iBt.forEach(t),MOr=i(oL),nf=n(oL,"P",{});var kre=s(nf);EOr=r(kre,`Note:
Loading a model from its configuration file does `),e3e=n(kre,"STRONG",{});var dBt=s(e3e);COr=r(dBt,"not"),dBt.forEach(t),wOr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),zZ=n(kre,"A",{href:!0});var cBt=s(zZ);AOr=r(cBt,"from_pretrained()"),cBt.forEach(t),LOr=r(kre," to load the model weights."),kre.forEach(t),yOr=i(oL),T(X0.$$.fragment,oL),oL.forEach(t),xOr=i(li),Wr=n(li,"DIV",{class:!0});var ii=s(Wr);T(Yx.$$.fragment,ii),$Or=i(ii),o3e=n(ii,"P",{});var fBt=s(o3e);kOr=r(fBt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),fBt.forEach(t),SOr=i(ii),Cn=n(ii,"P",{});var rL=s(Cn);ROr=r(rL,"The model class to instantiate is selected based on the "),r3e=n(rL,"CODE",{});var mBt=s(r3e);POr=r(mBt,"model_type"),mBt.forEach(t),BOr=r(rL,` property of the config object (either
passed as an argument or loaded from `),t3e=n(rL,"CODE",{});var gBt=s(t3e);IOr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),NOr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),a3e=n(rL,"CODE",{});var hBt=s(a3e);qOr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),jOr=r(rL,":"),rL.forEach(t),DOr=i(ii),Se=n(ii,"UL",{});var De=s(Se);z0=n(De,"LI",{});var mDe=s(z0);n3e=n(mDe,"STRONG",{});var pBt=s(n3e);GOr=r(pBt,"albert"),pBt.forEach(t),OOr=r(mDe," \u2014 "),WZ=n(mDe,"A",{href:!0});var uBt=s(WZ);VOr=r(uBt,"FlaxAlbertForSequenceClassification"),uBt.forEach(t),XOr=r(mDe," (ALBERT model)"),mDe.forEach(t),zOr=i(De),W0=n(De,"LI",{});var gDe=s(W0);s3e=n(gDe,"STRONG",{});var _Bt=s(s3e);WOr=r(_Bt,"bart"),_Bt.forEach(t),QOr=r(gDe," \u2014 "),QZ=n(gDe,"A",{href:!0});var bBt=s(QZ);HOr=r(bBt,"FlaxBartForSequenceClassification"),bBt.forEach(t),UOr=r(gDe," (BART model)"),gDe.forEach(t),JOr=i(De),Q0=n(De,"LI",{});var hDe=s(Q0);l3e=n(hDe,"STRONG",{});var vBt=s(l3e);YOr=r(vBt,"bert"),vBt.forEach(t),KOr=r(hDe," \u2014 "),HZ=n(hDe,"A",{href:!0});var FBt=s(HZ);ZOr=r(FBt,"FlaxBertForSequenceClassification"),FBt.forEach(t),eVr=r(hDe," (BERT model)"),hDe.forEach(t),oVr=i(De),H0=n(De,"LI",{});var pDe=s(H0);i3e=n(pDe,"STRONG",{});var TBt=s(i3e);rVr=r(TBt,"big_bird"),TBt.forEach(t),tVr=r(pDe," \u2014 "),UZ=n(pDe,"A",{href:!0});var MBt=s(UZ);aVr=r(MBt,"FlaxBigBirdForSequenceClassification"),MBt.forEach(t),nVr=r(pDe," (BigBird model)"),pDe.forEach(t),sVr=i(De),U0=n(De,"LI",{});var uDe=s(U0);d3e=n(uDe,"STRONG",{});var EBt=s(d3e);lVr=r(EBt,"distilbert"),EBt.forEach(t),iVr=r(uDe," \u2014 "),JZ=n(uDe,"A",{href:!0});var CBt=s(JZ);dVr=r(CBt,"FlaxDistilBertForSequenceClassification"),CBt.forEach(t),cVr=r(uDe," (DistilBERT model)"),uDe.forEach(t),fVr=i(De),J0=n(De,"LI",{});var _De=s(J0);c3e=n(_De,"STRONG",{});var wBt=s(c3e);mVr=r(wBt,"electra"),wBt.forEach(t),gVr=r(_De," \u2014 "),YZ=n(_De,"A",{href:!0});var ABt=s(YZ);hVr=r(ABt,"FlaxElectraForSequenceClassification"),ABt.forEach(t),pVr=r(_De," (ELECTRA model)"),_De.forEach(t),uVr=i(De),Y0=n(De,"LI",{});var bDe=s(Y0);f3e=n(bDe,"STRONG",{});var LBt=s(f3e);_Vr=r(LBt,"mbart"),LBt.forEach(t),bVr=r(bDe," \u2014 "),KZ=n(bDe,"A",{href:!0});var yBt=s(KZ);vVr=r(yBt,"FlaxMBartForSequenceClassification"),yBt.forEach(t),FVr=r(bDe," (mBART model)"),bDe.forEach(t),TVr=i(De),K0=n(De,"LI",{});var vDe=s(K0);m3e=n(vDe,"STRONG",{});var xBt=s(m3e);MVr=r(xBt,"roberta"),xBt.forEach(t),EVr=r(vDe," \u2014 "),ZZ=n(vDe,"A",{href:!0});var $Bt=s(ZZ);CVr=r($Bt,"FlaxRobertaForSequenceClassification"),$Bt.forEach(t),wVr=r(vDe," (RoBERTa model)"),vDe.forEach(t),AVr=i(De),Z0=n(De,"LI",{});var FDe=s(Z0);g3e=n(FDe,"STRONG",{});var kBt=s(g3e);LVr=r(kBt,"roformer"),kBt.forEach(t),yVr=r(FDe," \u2014 "),eee=n(FDe,"A",{href:!0});var SBt=s(eee);xVr=r(SBt,"FlaxRoFormerForSequenceClassification"),SBt.forEach(t),$Vr=r(FDe," (RoFormer model)"),FDe.forEach(t),kVr=i(De),ew=n(De,"LI",{});var TDe=s(ew);h3e=n(TDe,"STRONG",{});var RBt=s(h3e);SVr=r(RBt,"xlm-roberta"),RBt.forEach(t),RVr=r(TDe," \u2014 "),oee=n(TDe,"A",{href:!0});var PBt=s(oee);PVr=r(PBt,"FlaxXLMRobertaForSequenceClassification"),PBt.forEach(t),BVr=r(TDe," (XLM-RoBERTa model)"),TDe.forEach(t),De.forEach(t),IVr=i(ii),T(ow.$$.fragment,ii),ii.forEach(t),li.forEach(t),zOe=i(f),sf=n(f,"H2",{class:!0});var eze=s(sf);rw=n(eze,"A",{id:!0,class:!0,href:!0});var BBt=s(rw);p3e=n(BBt,"SPAN",{});var IBt=s(p3e);T(Kx.$$.fragment,IBt),IBt.forEach(t),BBt.forEach(t),NVr=i(eze),u3e=n(eze,"SPAN",{});var NBt=s(u3e);qVr=r(NBt,"FlaxAutoModelForQuestionAnswering"),NBt.forEach(t),eze.forEach(t),WOe=i(f),vr=n(f,"DIV",{class:!0});var di=s(vr);T(Zx.$$.fragment,di),jVr=i(di),lf=n(di,"P",{});var Sre=s(lf);DVr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),ree=n(Sre,"A",{href:!0});var qBt=s(ree);GVr=r(qBt,"from_pretrained()"),qBt.forEach(t),OVr=r(Sre," class method or the "),tee=n(Sre,"A",{href:!0});var jBt=s(tee);VVr=r(jBt,"from_config()"),jBt.forEach(t),XVr=r(Sre,` class
method.`),Sre.forEach(t),zVr=i(di),e$=n(di,"P",{});var oze=s(e$);WVr=r(oze,"This class cannot be instantiated directly using "),_3e=n(oze,"CODE",{});var DBt=s(_3e);QVr=r(DBt,"__init__()"),DBt.forEach(t),HVr=r(oze," (throws an error)."),oze.forEach(t),UVr=i(di),Yt=n(di,"DIV",{class:!0});var tL=s(Yt);T(o$.$$.fragment,tL),JVr=i(tL),b3e=n(tL,"P",{});var GBt=s(b3e);YVr=r(GBt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),GBt.forEach(t),KVr=i(tL),df=n(tL,"P",{});var Rre=s(df);ZVr=r(Rre,`Note:
Loading a model from its configuration file does `),v3e=n(Rre,"STRONG",{});var OBt=s(v3e);eXr=r(OBt,"not"),OBt.forEach(t),oXr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aee=n(Rre,"A",{href:!0});var VBt=s(aee);rXr=r(VBt,"from_pretrained()"),VBt.forEach(t),tXr=r(Rre," to load the model weights."),Rre.forEach(t),aXr=i(tL),T(tw.$$.fragment,tL),tL.forEach(t),nXr=i(di),Qr=n(di,"DIV",{class:!0});var ci=s(Qr);T(r$.$$.fragment,ci),sXr=i(ci),F3e=n(ci,"P",{});var XBt=s(F3e);lXr=r(XBt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XBt.forEach(t),iXr=i(ci),wn=n(ci,"P",{});var aL=s(wn);dXr=r(aL,"The model class to instantiate is selected based on the "),T3e=n(aL,"CODE",{});var zBt=s(T3e);cXr=r(zBt,"model_type"),zBt.forEach(t),fXr=r(aL,` property of the config object (either
passed as an argument or loaded from `),M3e=n(aL,"CODE",{});var WBt=s(M3e);mXr=r(WBt,"pretrained_model_name_or_path"),WBt.forEach(t),gXr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E3e=n(aL,"CODE",{});var QBt=s(E3e);hXr=r(QBt,"pretrained_model_name_or_path"),QBt.forEach(t),pXr=r(aL,":"),aL.forEach(t),uXr=i(ci),Re=n(ci,"UL",{});var Ge=s(Re);aw=n(Ge,"LI",{});var MDe=s(aw);C3e=n(MDe,"STRONG",{});var HBt=s(C3e);_Xr=r(HBt,"albert"),HBt.forEach(t),bXr=r(MDe," \u2014 "),nee=n(MDe,"A",{href:!0});var UBt=s(nee);vXr=r(UBt,"FlaxAlbertForQuestionAnswering"),UBt.forEach(t),FXr=r(MDe," (ALBERT model)"),MDe.forEach(t),TXr=i(Ge),nw=n(Ge,"LI",{});var EDe=s(nw);w3e=n(EDe,"STRONG",{});var JBt=s(w3e);MXr=r(JBt,"bart"),JBt.forEach(t),EXr=r(EDe," \u2014 "),see=n(EDe,"A",{href:!0});var YBt=s(see);CXr=r(YBt,"FlaxBartForQuestionAnswering"),YBt.forEach(t),wXr=r(EDe," (BART model)"),EDe.forEach(t),AXr=i(Ge),sw=n(Ge,"LI",{});var CDe=s(sw);A3e=n(CDe,"STRONG",{});var KBt=s(A3e);LXr=r(KBt,"bert"),KBt.forEach(t),yXr=r(CDe," \u2014 "),lee=n(CDe,"A",{href:!0});var ZBt=s(lee);xXr=r(ZBt,"FlaxBertForQuestionAnswering"),ZBt.forEach(t),$Xr=r(CDe," (BERT model)"),CDe.forEach(t),kXr=i(Ge),lw=n(Ge,"LI",{});var wDe=s(lw);L3e=n(wDe,"STRONG",{});var eIt=s(L3e);SXr=r(eIt,"big_bird"),eIt.forEach(t),RXr=r(wDe," \u2014 "),iee=n(wDe,"A",{href:!0});var oIt=s(iee);PXr=r(oIt,"FlaxBigBirdForQuestionAnswering"),oIt.forEach(t),BXr=r(wDe," (BigBird model)"),wDe.forEach(t),IXr=i(Ge),iw=n(Ge,"LI",{});var ADe=s(iw);y3e=n(ADe,"STRONG",{});var rIt=s(y3e);NXr=r(rIt,"distilbert"),rIt.forEach(t),qXr=r(ADe," \u2014 "),dee=n(ADe,"A",{href:!0});var tIt=s(dee);jXr=r(tIt,"FlaxDistilBertForQuestionAnswering"),tIt.forEach(t),DXr=r(ADe," (DistilBERT model)"),ADe.forEach(t),GXr=i(Ge),dw=n(Ge,"LI",{});var LDe=s(dw);x3e=n(LDe,"STRONG",{});var aIt=s(x3e);OXr=r(aIt,"electra"),aIt.forEach(t),VXr=r(LDe," \u2014 "),cee=n(LDe,"A",{href:!0});var nIt=s(cee);XXr=r(nIt,"FlaxElectraForQuestionAnswering"),nIt.forEach(t),zXr=r(LDe," (ELECTRA model)"),LDe.forEach(t),WXr=i(Ge),cw=n(Ge,"LI",{});var yDe=s(cw);$3e=n(yDe,"STRONG",{});var sIt=s($3e);QXr=r(sIt,"mbart"),sIt.forEach(t),HXr=r(yDe," \u2014 "),fee=n(yDe,"A",{href:!0});var lIt=s(fee);UXr=r(lIt,"FlaxMBartForQuestionAnswering"),lIt.forEach(t),JXr=r(yDe," (mBART model)"),yDe.forEach(t),YXr=i(Ge),fw=n(Ge,"LI",{});var xDe=s(fw);k3e=n(xDe,"STRONG",{});var iIt=s(k3e);KXr=r(iIt,"roberta"),iIt.forEach(t),ZXr=r(xDe," \u2014 "),mee=n(xDe,"A",{href:!0});var dIt=s(mee);ezr=r(dIt,"FlaxRobertaForQuestionAnswering"),dIt.forEach(t),ozr=r(xDe," (RoBERTa model)"),xDe.forEach(t),rzr=i(Ge),mw=n(Ge,"LI",{});var $De=s(mw);S3e=n($De,"STRONG",{});var cIt=s(S3e);tzr=r(cIt,"roformer"),cIt.forEach(t),azr=r($De," \u2014 "),gee=n($De,"A",{href:!0});var fIt=s(gee);nzr=r(fIt,"FlaxRoFormerForQuestionAnswering"),fIt.forEach(t),szr=r($De," (RoFormer model)"),$De.forEach(t),lzr=i(Ge),gw=n(Ge,"LI",{});var kDe=s(gw);R3e=n(kDe,"STRONG",{});var mIt=s(R3e);izr=r(mIt,"xlm-roberta"),mIt.forEach(t),dzr=r(kDe," \u2014 "),hee=n(kDe,"A",{href:!0});var gIt=s(hee);czr=r(gIt,"FlaxXLMRobertaForQuestionAnswering"),gIt.forEach(t),fzr=r(kDe," (XLM-RoBERTa model)"),kDe.forEach(t),Ge.forEach(t),mzr=i(ci),T(hw.$$.fragment,ci),ci.forEach(t),di.forEach(t),QOe=i(f),cf=n(f,"H2",{class:!0});var rze=s(cf);pw=n(rze,"A",{id:!0,class:!0,href:!0});var hIt=s(pw);P3e=n(hIt,"SPAN",{});var pIt=s(P3e);T(t$.$$.fragment,pIt),pIt.forEach(t),hIt.forEach(t),gzr=i(rze),B3e=n(rze,"SPAN",{});var uIt=s(B3e);hzr=r(uIt,"FlaxAutoModelForTokenClassification"),uIt.forEach(t),rze.forEach(t),HOe=i(f),Fr=n(f,"DIV",{class:!0});var fi=s(Fr);T(a$.$$.fragment,fi),pzr=i(fi),ff=n(fi,"P",{});var Pre=s(ff);uzr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pee=n(Pre,"A",{href:!0});var _It=s(pee);_zr=r(_It,"from_pretrained()"),_It.forEach(t),bzr=r(Pre," class method or the "),uee=n(Pre,"A",{href:!0});var bIt=s(uee);vzr=r(bIt,"from_config()"),bIt.forEach(t),Fzr=r(Pre,` class
method.`),Pre.forEach(t),Tzr=i(fi),n$=n(fi,"P",{});var tze=s(n$);Mzr=r(tze,"This class cannot be instantiated directly using "),I3e=n(tze,"CODE",{});var vIt=s(I3e);Ezr=r(vIt,"__init__()"),vIt.forEach(t),Czr=r(tze," (throws an error)."),tze.forEach(t),wzr=i(fi),Kt=n(fi,"DIV",{class:!0});var nL=s(Kt);T(s$.$$.fragment,nL),Azr=i(nL),N3e=n(nL,"P",{});var FIt=s(N3e);Lzr=r(FIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),FIt.forEach(t),yzr=i(nL),mf=n(nL,"P",{});var Bre=s(mf);xzr=r(Bre,`Note:
Loading a model from its configuration file does `),q3e=n(Bre,"STRONG",{});var TIt=s(q3e);$zr=r(TIt,"not"),TIt.forEach(t),kzr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_ee=n(Bre,"A",{href:!0});var MIt=s(_ee);Szr=r(MIt,"from_pretrained()"),MIt.forEach(t),Rzr=r(Bre," to load the model weights."),Bre.forEach(t),Pzr=i(nL),T(uw.$$.fragment,nL),nL.forEach(t),Bzr=i(fi),Hr=n(fi,"DIV",{class:!0});var mi=s(Hr);T(l$.$$.fragment,mi),Izr=i(mi),j3e=n(mi,"P",{});var EIt=s(j3e);Nzr=r(EIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EIt.forEach(t),qzr=i(mi),An=n(mi,"P",{});var sL=s(An);jzr=r(sL,"The model class to instantiate is selected based on the "),D3e=n(sL,"CODE",{});var CIt=s(D3e);Dzr=r(CIt,"model_type"),CIt.forEach(t),Gzr=r(sL,` property of the config object (either
passed as an argument or loaded from `),G3e=n(sL,"CODE",{});var wIt=s(G3e);Ozr=r(wIt,"pretrained_model_name_or_path"),wIt.forEach(t),Vzr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(sL,"CODE",{});var AIt=s(O3e);Xzr=r(AIt,"pretrained_model_name_or_path"),AIt.forEach(t),zzr=r(sL,":"),sL.forEach(t),Wzr=i(mi),Ve=n(mi,"UL",{});var To=s(Ve);_w=n(To,"LI",{});var SDe=s(_w);V3e=n(SDe,"STRONG",{});var LIt=s(V3e);Qzr=r(LIt,"albert"),LIt.forEach(t),Hzr=r(SDe," \u2014 "),bee=n(SDe,"A",{href:!0});var yIt=s(bee);Uzr=r(yIt,"FlaxAlbertForTokenClassification"),yIt.forEach(t),Jzr=r(SDe," (ALBERT model)"),SDe.forEach(t),Yzr=i(To),bw=n(To,"LI",{});var RDe=s(bw);X3e=n(RDe,"STRONG",{});var xIt=s(X3e);Kzr=r(xIt,"bert"),xIt.forEach(t),Zzr=r(RDe," \u2014 "),vee=n(RDe,"A",{href:!0});var $It=s(vee);eWr=r($It,"FlaxBertForTokenClassification"),$It.forEach(t),oWr=r(RDe," (BERT model)"),RDe.forEach(t),rWr=i(To),vw=n(To,"LI",{});var PDe=s(vw);z3e=n(PDe,"STRONG",{});var kIt=s(z3e);tWr=r(kIt,"big_bird"),kIt.forEach(t),aWr=r(PDe," \u2014 "),Fee=n(PDe,"A",{href:!0});var SIt=s(Fee);nWr=r(SIt,"FlaxBigBirdForTokenClassification"),SIt.forEach(t),sWr=r(PDe," (BigBird model)"),PDe.forEach(t),lWr=i(To),Fw=n(To,"LI",{});var BDe=s(Fw);W3e=n(BDe,"STRONG",{});var RIt=s(W3e);iWr=r(RIt,"distilbert"),RIt.forEach(t),dWr=r(BDe," \u2014 "),Tee=n(BDe,"A",{href:!0});var PIt=s(Tee);cWr=r(PIt,"FlaxDistilBertForTokenClassification"),PIt.forEach(t),fWr=r(BDe," (DistilBERT model)"),BDe.forEach(t),mWr=i(To),Tw=n(To,"LI",{});var IDe=s(Tw);Q3e=n(IDe,"STRONG",{});var BIt=s(Q3e);gWr=r(BIt,"electra"),BIt.forEach(t),hWr=r(IDe," \u2014 "),Mee=n(IDe,"A",{href:!0});var IIt=s(Mee);pWr=r(IIt,"FlaxElectraForTokenClassification"),IIt.forEach(t),uWr=r(IDe," (ELECTRA model)"),IDe.forEach(t),_Wr=i(To),Mw=n(To,"LI",{});var NDe=s(Mw);H3e=n(NDe,"STRONG",{});var NIt=s(H3e);bWr=r(NIt,"roberta"),NIt.forEach(t),vWr=r(NDe," \u2014 "),Eee=n(NDe,"A",{href:!0});var qIt=s(Eee);FWr=r(qIt,"FlaxRobertaForTokenClassification"),qIt.forEach(t),TWr=r(NDe," (RoBERTa model)"),NDe.forEach(t),MWr=i(To),Ew=n(To,"LI",{});var qDe=s(Ew);U3e=n(qDe,"STRONG",{});var jIt=s(U3e);EWr=r(jIt,"roformer"),jIt.forEach(t),CWr=r(qDe," \u2014 "),Cee=n(qDe,"A",{href:!0});var DIt=s(Cee);wWr=r(DIt,"FlaxRoFormerForTokenClassification"),DIt.forEach(t),AWr=r(qDe," (RoFormer model)"),qDe.forEach(t),LWr=i(To),Cw=n(To,"LI",{});var jDe=s(Cw);J3e=n(jDe,"STRONG",{});var GIt=s(J3e);yWr=r(GIt,"xlm-roberta"),GIt.forEach(t),xWr=r(jDe," \u2014 "),wee=n(jDe,"A",{href:!0});var OIt=s(wee);$Wr=r(OIt,"FlaxXLMRobertaForTokenClassification"),OIt.forEach(t),kWr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),To.forEach(t),SWr=i(mi),T(ww.$$.fragment,mi),mi.forEach(t),fi.forEach(t),UOe=i(f),gf=n(f,"H2",{class:!0});var aze=s(gf);Aw=n(aze,"A",{id:!0,class:!0,href:!0});var VIt=s(Aw);Y3e=n(VIt,"SPAN",{});var XIt=s(Y3e);T(i$.$$.fragment,XIt),XIt.forEach(t),VIt.forEach(t),RWr=i(aze),K3e=n(aze,"SPAN",{});var zIt=s(K3e);PWr=r(zIt,"FlaxAutoModelForMultipleChoice"),zIt.forEach(t),aze.forEach(t),JOe=i(f),Tr=n(f,"DIV",{class:!0});var gi=s(Tr);T(d$.$$.fragment,gi),BWr=i(gi),hf=n(gi,"P",{});var Ire=s(hf);IWr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Aee=n(Ire,"A",{href:!0});var WIt=s(Aee);NWr=r(WIt,"from_pretrained()"),WIt.forEach(t),qWr=r(Ire," class method or the "),Lee=n(Ire,"A",{href:!0});var QIt=s(Lee);jWr=r(QIt,"from_config()"),QIt.forEach(t),DWr=r(Ire,` class
method.`),Ire.forEach(t),GWr=i(gi),c$=n(gi,"P",{});var nze=s(c$);OWr=r(nze,"This class cannot be instantiated directly using "),Z3e=n(nze,"CODE",{});var HIt=s(Z3e);VWr=r(HIt,"__init__()"),HIt.forEach(t),XWr=r(nze," (throws an error)."),nze.forEach(t),zWr=i(gi),Zt=n(gi,"DIV",{class:!0});var lL=s(Zt);T(f$.$$.fragment,lL),WWr=i(lL),e0e=n(lL,"P",{});var UIt=s(e0e);QWr=r(UIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),UIt.forEach(t),HWr=i(lL),pf=n(lL,"P",{});var Nre=s(pf);UWr=r(Nre,`Note:
Loading a model from its configuration file does `),o0e=n(Nre,"STRONG",{});var JIt=s(o0e);JWr=r(JIt,"not"),JIt.forEach(t),YWr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(Nre,"A",{href:!0});var YIt=s(yee);KWr=r(YIt,"from_pretrained()"),YIt.forEach(t),ZWr=r(Nre," to load the model weights."),Nre.forEach(t),eQr=i(lL),T(Lw.$$.fragment,lL),lL.forEach(t),oQr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(m$.$$.fragment,hi),rQr=i(hi),r0e=n(hi,"P",{});var KIt=s(r0e);tQr=r(KIt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KIt.forEach(t),aQr=i(hi),Ln=n(hi,"P",{});var iL=s(Ln);nQr=r(iL,"The model class to instantiate is selected based on the "),t0e=n(iL,"CODE",{});var ZIt=s(t0e);sQr=r(ZIt,"model_type"),ZIt.forEach(t),lQr=r(iL,` property of the config object (either
passed as an argument or loaded from `),a0e=n(iL,"CODE",{});var eNt=s(a0e);iQr=r(eNt,"pretrained_model_name_or_path"),eNt.forEach(t),dQr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n0e=n(iL,"CODE",{});var oNt=s(n0e);cQr=r(oNt,"pretrained_model_name_or_path"),oNt.forEach(t),fQr=r(iL,":"),iL.forEach(t),mQr=i(hi),Xe=n(hi,"UL",{});var Mo=s(Xe);yw=n(Mo,"LI",{});var DDe=s(yw);s0e=n(DDe,"STRONG",{});var rNt=s(s0e);gQr=r(rNt,"albert"),rNt.forEach(t),hQr=r(DDe," \u2014 "),xee=n(DDe,"A",{href:!0});var tNt=s(xee);pQr=r(tNt,"FlaxAlbertForMultipleChoice"),tNt.forEach(t),uQr=r(DDe," (ALBERT model)"),DDe.forEach(t),_Qr=i(Mo),xw=n(Mo,"LI",{});var GDe=s(xw);l0e=n(GDe,"STRONG",{});var aNt=s(l0e);bQr=r(aNt,"bert"),aNt.forEach(t),vQr=r(GDe," \u2014 "),$ee=n(GDe,"A",{href:!0});var nNt=s($ee);FQr=r(nNt,"FlaxBertForMultipleChoice"),nNt.forEach(t),TQr=r(GDe," (BERT model)"),GDe.forEach(t),MQr=i(Mo),$w=n(Mo,"LI",{});var ODe=s($w);i0e=n(ODe,"STRONG",{});var sNt=s(i0e);EQr=r(sNt,"big_bird"),sNt.forEach(t),CQr=r(ODe," \u2014 "),kee=n(ODe,"A",{href:!0});var lNt=s(kee);wQr=r(lNt,"FlaxBigBirdForMultipleChoice"),lNt.forEach(t),AQr=r(ODe," (BigBird model)"),ODe.forEach(t),LQr=i(Mo),kw=n(Mo,"LI",{});var VDe=s(kw);d0e=n(VDe,"STRONG",{});var iNt=s(d0e);yQr=r(iNt,"distilbert"),iNt.forEach(t),xQr=r(VDe," \u2014 "),See=n(VDe,"A",{href:!0});var dNt=s(See);$Qr=r(dNt,"FlaxDistilBertForMultipleChoice"),dNt.forEach(t),kQr=r(VDe," (DistilBERT model)"),VDe.forEach(t),SQr=i(Mo),Sw=n(Mo,"LI",{});var XDe=s(Sw);c0e=n(XDe,"STRONG",{});var cNt=s(c0e);RQr=r(cNt,"electra"),cNt.forEach(t),PQr=r(XDe," \u2014 "),Ree=n(XDe,"A",{href:!0});var fNt=s(Ree);BQr=r(fNt,"FlaxElectraForMultipleChoice"),fNt.forEach(t),IQr=r(XDe," (ELECTRA model)"),XDe.forEach(t),NQr=i(Mo),Rw=n(Mo,"LI",{});var zDe=s(Rw);f0e=n(zDe,"STRONG",{});var mNt=s(f0e);qQr=r(mNt,"roberta"),mNt.forEach(t),jQr=r(zDe," \u2014 "),Pee=n(zDe,"A",{href:!0});var gNt=s(Pee);DQr=r(gNt,"FlaxRobertaForMultipleChoice"),gNt.forEach(t),GQr=r(zDe," (RoBERTa model)"),zDe.forEach(t),OQr=i(Mo),Pw=n(Mo,"LI",{});var WDe=s(Pw);m0e=n(WDe,"STRONG",{});var hNt=s(m0e);VQr=r(hNt,"roformer"),hNt.forEach(t),XQr=r(WDe," \u2014 "),Bee=n(WDe,"A",{href:!0});var pNt=s(Bee);zQr=r(pNt,"FlaxRoFormerForMultipleChoice"),pNt.forEach(t),WQr=r(WDe," (RoFormer model)"),WDe.forEach(t),QQr=i(Mo),Bw=n(Mo,"LI",{});var QDe=s(Bw);g0e=n(QDe,"STRONG",{});var uNt=s(g0e);HQr=r(uNt,"xlm-roberta"),uNt.forEach(t),UQr=r(QDe," \u2014 "),Iee=n(QDe,"A",{href:!0});var _Nt=s(Iee);JQr=r(_Nt,"FlaxXLMRobertaForMultipleChoice"),_Nt.forEach(t),YQr=r(QDe," (XLM-RoBERTa model)"),QDe.forEach(t),Mo.forEach(t),KQr=i(hi),T(Iw.$$.fragment,hi),hi.forEach(t),gi.forEach(t),YOe=i(f),uf=n(f,"H2",{class:!0});var sze=s(uf);Nw=n(sze,"A",{id:!0,class:!0,href:!0});var bNt=s(Nw);h0e=n(bNt,"SPAN",{});var vNt=s(h0e);T(g$.$$.fragment,vNt),vNt.forEach(t),bNt.forEach(t),ZQr=i(sze),p0e=n(sze,"SPAN",{});var FNt=s(p0e);eHr=r(FNt,"FlaxAutoModelForNextSentencePrediction"),FNt.forEach(t),sze.forEach(t),KOe=i(f),Mr=n(f,"DIV",{class:!0});var pi=s(Mr);T(h$.$$.fragment,pi),oHr=i(pi),_f=n(pi,"P",{});var qre=s(_f);rHr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Nee=n(qre,"A",{href:!0});var TNt=s(Nee);tHr=r(TNt,"from_pretrained()"),TNt.forEach(t),aHr=r(qre," class method or the "),qee=n(qre,"A",{href:!0});var MNt=s(qee);nHr=r(MNt,"from_config()"),MNt.forEach(t),sHr=r(qre,` class
method.`),qre.forEach(t),lHr=i(pi),p$=n(pi,"P",{});var lze=s(p$);iHr=r(lze,"This class cannot be instantiated directly using "),u0e=n(lze,"CODE",{});var ENt=s(u0e);dHr=r(ENt,"__init__()"),ENt.forEach(t),cHr=r(lze," (throws an error)."),lze.forEach(t),fHr=i(pi),ea=n(pi,"DIV",{class:!0});var dL=s(ea);T(u$.$$.fragment,dL),mHr=i(dL),_0e=n(dL,"P",{});var CNt=s(_0e);gHr=r(CNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CNt.forEach(t),hHr=i(dL),bf=n(dL,"P",{});var jre=s(bf);pHr=r(jre,`Note:
Loading a model from its configuration file does `),b0e=n(jre,"STRONG",{});var wNt=s(b0e);uHr=r(wNt,"not"),wNt.forEach(t),_Hr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(jre,"A",{href:!0});var ANt=s(jee);bHr=r(ANt,"from_pretrained()"),ANt.forEach(t),vHr=r(jre," to load the model weights."),jre.forEach(t),FHr=i(dL),T(qw.$$.fragment,dL),dL.forEach(t),THr=i(pi),Jr=n(pi,"DIV",{class:!0});var ui=s(Jr);T(_$.$$.fragment,ui),MHr=i(ui),v0e=n(ui,"P",{});var LNt=s(v0e);EHr=r(LNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),LNt.forEach(t),CHr=i(ui),yn=n(ui,"P",{});var cL=s(yn);wHr=r(cL,"The model class to instantiate is selected based on the "),F0e=n(cL,"CODE",{});var yNt=s(F0e);AHr=r(yNt,"model_type"),yNt.forEach(t),LHr=r(cL,` property of the config object (either
passed as an argument or loaded from `),T0e=n(cL,"CODE",{});var xNt=s(T0e);yHr=r(xNt,"pretrained_model_name_or_path"),xNt.forEach(t),xHr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(cL,"CODE",{});var $Nt=s(M0e);$Hr=r($Nt,"pretrained_model_name_or_path"),$Nt.forEach(t),kHr=r(cL,":"),cL.forEach(t),SHr=i(ui),E0e=n(ui,"UL",{});var kNt=s(E0e);jw=n(kNt,"LI",{});var HDe=s(jw);C0e=n(HDe,"STRONG",{});var SNt=s(C0e);RHr=r(SNt,"bert"),SNt.forEach(t),PHr=r(HDe," \u2014 "),Dee=n(HDe,"A",{href:!0});var RNt=s(Dee);BHr=r(RNt,"FlaxBertForNextSentencePrediction"),RNt.forEach(t),IHr=r(HDe," (BERT model)"),HDe.forEach(t),kNt.forEach(t),NHr=i(ui),T(Dw.$$.fragment,ui),ui.forEach(t),pi.forEach(t),ZOe=i(f),vf=n(f,"H2",{class:!0});var ize=s(vf);Gw=n(ize,"A",{id:!0,class:!0,href:!0});var PNt=s(Gw);w0e=n(PNt,"SPAN",{});var BNt=s(w0e);T(b$.$$.fragment,BNt),BNt.forEach(t),PNt.forEach(t),qHr=i(ize),A0e=n(ize,"SPAN",{});var INt=s(A0e);jHr=r(INt,"FlaxAutoModelForImageClassification"),INt.forEach(t),ize.forEach(t),eVe=i(f),Er=n(f,"DIV",{class:!0});var _i=s(Er);T(v$.$$.fragment,_i),DHr=i(_i),Ff=n(_i,"P",{});var Dre=s(Ff);GHr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Gee=n(Dre,"A",{href:!0});var NNt=s(Gee);OHr=r(NNt,"from_pretrained()"),NNt.forEach(t),VHr=r(Dre," class method or the "),Oee=n(Dre,"A",{href:!0});var qNt=s(Oee);XHr=r(qNt,"from_config()"),qNt.forEach(t),zHr=r(Dre,` class
method.`),Dre.forEach(t),WHr=i(_i),F$=n(_i,"P",{});var dze=s(F$);QHr=r(dze,"This class cannot be instantiated directly using "),L0e=n(dze,"CODE",{});var jNt=s(L0e);HHr=r(jNt,"__init__()"),jNt.forEach(t),UHr=r(dze," (throws an error)."),dze.forEach(t),JHr=i(_i),oa=n(_i,"DIV",{class:!0});var fL=s(oa);T(T$.$$.fragment,fL),YHr=i(fL),y0e=n(fL,"P",{});var DNt=s(y0e);KHr=r(DNt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DNt.forEach(t),ZHr=i(fL),Tf=n(fL,"P",{});var Gre=s(Tf);eUr=r(Gre,`Note:
Loading a model from its configuration file does `),x0e=n(Gre,"STRONG",{});var GNt=s(x0e);oUr=r(GNt,"not"),GNt.forEach(t),rUr=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vee=n(Gre,"A",{href:!0});var ONt=s(Vee);tUr=r(ONt,"from_pretrained()"),ONt.forEach(t),aUr=r(Gre," to load the model weights."),Gre.forEach(t),nUr=i(fL),T(Ow.$$.fragment,fL),fL.forEach(t),sUr=i(_i),Yr=n(_i,"DIV",{class:!0});var bi=s(Yr);T(M$.$$.fragment,bi),lUr=i(bi),$0e=n(bi,"P",{});var VNt=s($0e);iUr=r(VNt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),VNt.forEach(t),dUr=i(bi),xn=n(bi,"P",{});var mL=s(xn);cUr=r(mL,"The model class to instantiate is selected based on the "),k0e=n(mL,"CODE",{});var XNt=s(k0e);fUr=r(XNt,"model_type"),XNt.forEach(t),mUr=r(mL,` property of the config object (either
passed as an argument or loaded from `),S0e=n(mL,"CODE",{});var zNt=s(S0e);gUr=r(zNt,"pretrained_model_name_or_path"),zNt.forEach(t),hUr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R0e=n(mL,"CODE",{});var WNt=s(R0e);pUr=r(WNt,"pretrained_model_name_or_path"),WNt.forEach(t),uUr=r(mL,":"),mL.forEach(t),_Ur=i(bi),E$=n(bi,"UL",{});var cze=s(E$);Vw=n(cze,"LI",{});var UDe=s(Vw);P0e=n(UDe,"STRONG",{});var QNt=s(P0e);bUr=r(QNt,"beit"),QNt.forEach(t),vUr=r(UDe," \u2014 "),Xee=n(UDe,"A",{href:!0});var HNt=s(Xee);FUr=r(HNt,"FlaxBeitForImageClassification"),HNt.forEach(t),TUr=r(UDe," (BEiT model)"),UDe.forEach(t),MUr=i(cze),Xw=n(cze,"LI",{});var JDe=s(Xw);B0e=n(JDe,"STRONG",{});var UNt=s(B0e);EUr=r(UNt,"vit"),UNt.forEach(t),CUr=r(JDe," \u2014 "),zee=n(JDe,"A",{href:!0});var JNt=s(zee);wUr=r(JNt,"FlaxViTForImageClassification"),JNt.forEach(t),AUr=r(JDe," (ViT model)"),JDe.forEach(t),cze.forEach(t),LUr=i(bi),T(zw.$$.fragment,bi),bi.forEach(t),_i.forEach(t),oVe=i(f),Mf=n(f,"H2",{class:!0});var fze=s(Mf);Ww=n(fze,"A",{id:!0,class:!0,href:!0});var YNt=s(Ww);I0e=n(YNt,"SPAN",{});var KNt=s(I0e);T(C$.$$.fragment,KNt),KNt.forEach(t),YNt.forEach(t),yUr=i(fze),N0e=n(fze,"SPAN",{});var ZNt=s(N0e);xUr=r(ZNt,"FlaxAutoModelForVision2Seq"),ZNt.forEach(t),fze.forEach(t),rVe=i(f),Cr=n(f,"DIV",{class:!0});var vi=s(Cr);T(w$.$$.fragment,vi),$Ur=i(vi),Ef=n(vi,"P",{});var Ore=s(Ef);kUr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Wee=n(Ore,"A",{href:!0});var eqt=s(Wee);SUr=r(eqt,"from_pretrained()"),eqt.forEach(t),RUr=r(Ore," class method or the "),Qee=n(Ore,"A",{href:!0});var oqt=s(Qee);PUr=r(oqt,"from_config()"),oqt.forEach(t),BUr=r(Ore,` class
method.`),Ore.forEach(t),IUr=i(vi),A$=n(vi,"P",{});var mze=s(A$);NUr=r(mze,"This class cannot be instantiated directly using "),q0e=n(mze,"CODE",{});var rqt=s(q0e);qUr=r(rqt,"__init__()"),rqt.forEach(t),jUr=r(mze," (throws an error)."),mze.forEach(t),DUr=i(vi),ra=n(vi,"DIV",{class:!0});var gL=s(ra);T(L$.$$.fragment,gL),GUr=i(gL),j0e=n(gL,"P",{});var tqt=s(j0e);OUr=r(tqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),tqt.forEach(t),VUr=i(gL),Cf=n(gL,"P",{});var Vre=s(Cf);XUr=r(Vre,`Note:
Loading a model from its configuration file does `),D0e=n(Vre,"STRONG",{});var aqt=s(D0e);zUr=r(aqt,"not"),aqt.forEach(t),WUr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Vre,"A",{href:!0});var nqt=s(Hee);QUr=r(nqt,"from_pretrained()"),nqt.forEach(t),HUr=r(Vre," to load the model weights."),Vre.forEach(t),UUr=i(gL),T(Qw.$$.fragment,gL),gL.forEach(t),JUr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(y$.$$.fragment,Fi),YUr=i(Fi),G0e=n(Fi,"P",{});var sqt=s(G0e);KUr=r(sqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),sqt.forEach(t),ZUr=i(Fi),$n=n(Fi,"P",{});var hL=s($n);eJr=r(hL,"The model class to instantiate is selected based on the "),O0e=n(hL,"CODE",{});var lqt=s(O0e);oJr=r(lqt,"model_type"),lqt.forEach(t),rJr=r(hL,` property of the config object (either
passed as an argument or loaded from `),V0e=n(hL,"CODE",{});var iqt=s(V0e);tJr=r(iqt,"pretrained_model_name_or_path"),iqt.forEach(t),aJr=r(hL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X0e=n(hL,"CODE",{});var dqt=s(X0e);nJr=r(dqt,"pretrained_model_name_or_path"),dqt.forEach(t),sJr=r(hL,":"),hL.forEach(t),lJr=i(Fi),z0e=n(Fi,"UL",{});var cqt=s(z0e);Hw=n(cqt,"LI",{});var YDe=s(Hw);W0e=n(YDe,"STRONG",{});var fqt=s(W0e);iJr=r(fqt,"vision-encoder-decoder"),fqt.forEach(t),dJr=r(YDe," \u2014 "),Uee=n(YDe,"A",{href:!0});var mqt=s(Uee);cJr=r(mqt,"FlaxVisionEncoderDecoderModel"),mqt.forEach(t),fJr=r(YDe," (Vision Encoder decoder model)"),YDe.forEach(t),cqt.forEach(t),mJr=i(Fi),T(Uw.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(bDt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer"),c(Li,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(Sf,"id","extending-the-auto-classes"),c(Sf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sf,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(Pf,"id","transformers.AutoConfig"),c(Pf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pf,"href","#transformers.AutoConfig"),c(xi,"class","relative group"),c(Yk,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Kk,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig"),c(Zk,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig"),c(eS,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig"),c(oS,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig"),c(rS,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(tS,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig"),c(aS,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(nS,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(sS,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(lS,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig"),c(iS,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig"),c(dS,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig"),c(cS,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig"),c(fS,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig"),c(mS,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig"),c(gS,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig"),c(hS,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig"),c(pS,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uS,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(_S,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(bS,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig"),c(vS,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(FS,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(TS,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig"),c(MS,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig"),c(ES,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig"),c(CS,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig"),c(wS,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig"),c(AS,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig"),c(LS,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(yS,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig"),c(xS,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig"),c($S,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig"),c(kS,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig"),c(SS,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig"),c(RS,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig"),c(PS,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config"),c(BS,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(IS,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(NS,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig"),c(qS,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig"),c(jS,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig"),c(DS,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(GS,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(OS,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(VS,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(XS,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig"),c(zS,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig"),c(WS,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig"),c(QS,"href","/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Config"),c(HS,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig"),c(US,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig"),c(JS,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config"),c(YS,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig"),c(KS,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ZS,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig"),c(eR,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTConfig"),c(oR,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(rR,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(tR,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig"),c(aR,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config"),c(nR,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(sR,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(lR,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig"),c(iR,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig"),c(dR,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig"),c(cR,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig"),c(fR,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(mR,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(gR,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(hR,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagConfig"),c(pR,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmConfig"),c(uR,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig"),c(_R,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig"),c(bR,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig"),c(vR,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig"),c(FR,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig"),c(TR,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig"),c(MR,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig"),c(ER,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig"),c(CR,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig"),c(wR,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig"),c(AR,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(LR,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(yR,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(xR,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig"),c($R,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(kR,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig"),c(SR,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config"),c(RR,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig"),c(PR,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(BR,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(IR,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig"),c(NR,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(qR,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(jR,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig"),c(DR,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig"),c(GR,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(OR,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(VR,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(XR,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig"),c(zR,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(WR,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(QR,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(HR,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig"),c(UR,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig"),c(JR,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig"),c(YR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(KR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(ZR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(eP,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig"),c(oP,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig"),c(rP,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Og,"id","transformers.AutoTokenizer"),c(Og,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Og,"href","#transformers.AutoTokenizer"),c(ki,"class","relative group"),c(tP,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(aP,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(nP,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sP,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizer"),c(lP,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizerFast"),c(iP,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizer"),c(dP,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(cP,"href","/docs/transformers/pr_17427/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(fP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(mP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(gP,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(hP,"href","/docs/transformers/pr_17427/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(pP,"href","/docs/transformers/pr_17427/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(uP,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(_P,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(bP,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(vP,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(FP,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(TP,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(MP,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(EP,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(CP,"href","/docs/transformers/pr_17427/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(wP,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizer"),c(AP,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(LP,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineTokenizer"),c(yP,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizer"),c(xP,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizerFast"),c($P,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(kP,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(SP,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizer"),c(RP,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(PP,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(BP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(IP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(NP,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizer"),c(qP,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(jP,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(DP,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(GP,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(OP,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(VP,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(XP,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(zP,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizer"),c(WP,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(QP,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(HP,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizer"),c(UP,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(JP,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(YP,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizer"),c(KP,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eB,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oB,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rB,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tB,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(aB,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nB,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizer"),c(lB,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(iB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(mB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(gB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(hB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(pB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(uB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(_B,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bB,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vB,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizer"),c(FB,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizerFast"),c(TB,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MB,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(EB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(CB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(wB,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeTokenizer"),c(AB,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(LB,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(yB,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(xB,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianTokenizer"),c($B,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizer"),c(kB,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(SB,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(RB,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(PB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(BB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(IB,"href","/docs/transformers/pr_17427/en/model_doc/mluke#transformers.MLukeTokenizer"),c(NB,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(qB,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(jB,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(DB,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(GB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(OB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(VB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(XB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zB,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(WB,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(QB,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HB,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UB,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JB,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YB,"href","/docs/transformers/pr_17427/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KB,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZB,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(oI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(rI,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagTokenizer"),c(tI,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizer"),c(aI,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nI,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sI,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lI,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iI,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dI,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cI,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(fI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gI,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hI,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(pI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(uI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(_I,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bI,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vI,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FI,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TI,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(MI,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(EI,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasTokenizer"),c(CI,"href","/docs/transformers/pr_17427/en/model_doc/tapex#transformers.TapexTokenizer"),c(wI,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(LI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(yI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(xI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c($I,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RI,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PI,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BI,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMTokenizer"),c(II,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(NI,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qI,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GI,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(OI,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VI,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(XI,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ch,"id","transformers.AutoFeatureExtractor"),c(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ch,"href","#transformers.AutoFeatureExtractor"),c(Si,"class","relative group"),c(zI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(WI,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(QI,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YI,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(aN,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(sN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(lN,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(fN,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(mN,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gN,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(hN,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(pN,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(uN,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(_N,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bN,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(vN,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(FN,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(TN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(MN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(EN,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(np,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"id","transformers.AutoProcessor"),c(sp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sp,"href","#transformers.AutoProcessor"),c(Ri,"class","relative group"),c(CN,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(wN,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPProcessor"),c(AN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(LN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(yN,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(xN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($N,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kN,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(SN,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(RN,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IN,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltProcessor"),c(NN,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(qN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ap,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lp,"id","transformers.AutoModel"),c(Lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lp,"href","#transformers.AutoModel"),c(Bi,"class","relative group"),c(GN,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ON,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VN,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XN,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel"),c(zN,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel"),c(WN,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel"),c(QN,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(HN,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UN,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel"),c(JN,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YN,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KN,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZN,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomModel"),c(eq,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel"),c(oq,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel"),c(rq,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel"),c(tq,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel"),c(aq,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel"),c(nq,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel"),c(sq,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel"),c(lq,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(iq,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(dq,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(cq,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel"),c(fq,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(mq,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(gq,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel"),c(hq,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel"),c(pq,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel"),c(uq,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(_q,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel"),c(bq,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel"),c(vq,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel"),c(Fq,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel"),c(Tq,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel"),c(Mq,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel"),c(Eq,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel"),c(Cq,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel"),c(wq,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel"),c(Aq,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model"),c(Lq,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(yq,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(xq,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel"),c($q,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel"),c(kq,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel"),c(Sq,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Rq,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Pq,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Bq,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Iq,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel"),c(Nq,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitModel"),c(qq,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel"),c(jq,"href","/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5Model"),c(Dq,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel"),c(Gq,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel"),c(Oq,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model"),c(Vq,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel"),c(Xq,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel"),c(zq,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel"),c(Wq,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTModel"),c(Qq,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Hq,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Uq,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel"),c(Jq,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model"),c(Yq,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Kq,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Zq,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel"),c(ej,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel"),c(oj,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel"),c(rj,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel"),c(tj,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel"),c(aj,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(nj,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel"),c(sj,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel"),c(lj,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel"),c(ij,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel"),c(dj,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel"),c(cj,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(fj,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel"),c(mj,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel"),c(gj,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel"),c(hj,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel"),c(pj,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel"),c(uj,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(_j,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel"),c(bj,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(vj,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel"),c(Fj,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model"),c(Tj,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel"),c(Mj,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Ej,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Cj,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel"),c(wj,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Aj,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel"),c(Lj,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel"),c(yj,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(xj,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel"),c($j,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel"),c(kj,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Sj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Rj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Pj,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel"),c(Bj,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel"),c(Ij,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel"),c(Nj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(qj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(jj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Dj,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel"),c(Gj,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel"),c(Oj,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y_,"id","transformers.AutoModelForPreTraining"),c(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y_,"href","#transformers.AutoModelForPreTraining"),c(qi,"class","relative group"),c(Vj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wj,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Qj,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Hj,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining"),c(Uj,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Jj,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Yj,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Kj,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(eD,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(oD,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(rD,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(tD,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining"),c(aD,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(nD,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining"),c(sD,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining"),c(lD,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(iD,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(dD,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(cD,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(fD,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(mD,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(gD,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(hD,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(pD,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(uD,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(_D,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(bD,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(vD,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(FD,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(TD,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(MD,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ED,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(CD,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(wD,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(AD,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(LD,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(yD,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(xD,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c($D,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(kD,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(SD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(RD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(PD,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T2,"id","transformers.AutoModelForCausalLM"),c(T2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T2,"href","#transformers.AutoModelForCausalLM"),c(Gi,"class","relative group"),c(BD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ID,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ND,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qD,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM"),c(jD,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel"),c(DD,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(GD,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(OD,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(VD,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(XD,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(zD,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM"),c(WD,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(QD,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(HD,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(UD,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM"),c(JD,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(YD,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(KD,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(ZD,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(eG,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM"),c(oG,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rG,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tG,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aG,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM"),c(nG,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(sG,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(lG,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(iG,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(dG,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(cG,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(fG,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(mG,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gG,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(hG,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(pG,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(uG,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(_G,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(FG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(TG,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d1,"id","transformers.AutoModelForMaskedLM"),c(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d1,"href","#transformers.AutoModelForMaskedLM"),c(Xi,"class","relative group"),c(MG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wG,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(AG,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(LG,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM"),c(yG,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(xG,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($G,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(kG,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(SG,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(RG,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(PG,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(BG,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(IG,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(NG,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(qG,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(jG,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(DG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(GG,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(OG,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeForMaskedLM"),c(VG,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(XG,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(zG,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(WG,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(QG,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(HG,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(UG,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(JG,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(YG,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(KG,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ZG,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(eO,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(oO,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(rO,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(tO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(aO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(nO,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U1,"id","transformers.AutoModelForSeq2SeqLM"),c(U1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Qi,"class","relative group"),c(sO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(mO,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(gO,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(hO,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(pO,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(uO,"href","/docs/transformers/pr_17427/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(_O,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(bO,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel"),c(vO,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(FO,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(TO,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(MO,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(EO,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(CO,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u7,"id","transformers.AutoModelForSequenceClassification"),c(u7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u7,"href","#transformers.AutoModelForSequenceClassification"),c(Ji,"class","relative group"),c(AO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xO,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c($O,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(dV,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(cV,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(fV,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(mV,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(gV,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(hV,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(pV,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(uV,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(_V,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(bV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(vV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(FV,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(TV,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gb,"id","transformers.AutoModelForMultipleChoice"),c(gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gb,"href","#transformers.AutoModelForMultipleChoice"),c(Zi,"class","relative group"),c(MV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wV,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(AV,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice"),c(LV,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(yV,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(xV,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice"),c($V,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(GV,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(OV,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(VV,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(XV,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(zV,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(WV,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(QV,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(HV,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(UV,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(JV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(YV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(KV,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(ZV,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wb,"id","transformers.AutoModelForNextSentencePrediction"),c(Wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wb,"href","#transformers.AutoModelForNextSentencePrediction"),c(rd,"class","relative group"),c(eX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tX,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(aX,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(nX,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(sX,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(lX,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o4,"id","transformers.AutoModelForTokenClassification"),c(o4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o4,"href","#transformers.AutoModelForTokenClassification"),c(nd,"class","relative group"),c(iX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(mX,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification"),c(gX,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(hX,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(pX,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification"),c(uX,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(_X,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(bX,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(vX,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(FX,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(TX,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(MX,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(EX,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(CX,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(wX,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(AX,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(LX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(yX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(xX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c($X,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(kX,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(SX,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(RX,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(PX,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(BX,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(IX,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(NX,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(qX,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(jX,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(DX,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(GX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(OX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(VX,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(XX,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j4,"id","transformers.AutoModelForQuestionAnswering"),c(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j4,"href","#transformers.AutoModelForQuestionAnswering"),c(id,"class","relative group"),c(zX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HX,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(UX,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(iz,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(_z,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(Fz,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(Tz,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Mz,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Ez,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Cz,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(wz,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Az,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(Lz,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(yz,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(xz,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c($z,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(kz,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(Sz,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Rz,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForTableQuestionAnswering"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(fd,"class","relative group"),c(Pz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Iz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nz,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pv,"id","transformers.AutoModelForImageClassification"),c(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pv,"href","#transformers.AutoModelForImageClassification"),c(hd,"class","relative group"),c(qz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gz,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification"),c(Oz,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Vz,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Xz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(zz,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Wz,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Qz,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Hz,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassification"),c(Uz,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Jz,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Yz,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Kz,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Zz,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(eW,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(oW,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(rW,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(tW,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification"),c(aW,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification"),c(nW,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jv,"id","transformers.AutoModelForVision2Seq"),c(Jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jv,"href","#transformers.AutoModelForVision2Seq"),c(_d,"class","relative group"),c(sW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForVisualQuestionAnswering"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Fd,"class","relative group"),c(cW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gW,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sF,"id","transformers.AutoModelForAudioClassification"),c(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sF,"href","#transformers.AutoModelForAudioClassification"),c(Ed,"class","relative group"),c(hW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_W,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(bW,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(vW,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(FW,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(TW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(MW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(EW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(CW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vF,"id","transformers.AutoModelForAudioFrameClassification"),c(vF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vF,"href","#transformers.AutoModelForAudioFrameClassification"),c(Ad,"class","relative group"),c(AW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c($W,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(kW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(SW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(RW,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForCTC"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForCTC"),c(xd,"class","relative group"),c(PW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(qW,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC"),c(jW,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTForCTC"),c(DW,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC"),c(GW,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC"),c(OW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(VW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(XW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(zW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(WW,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(OF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Sd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(YW,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HF,"id","transformers.AutoModelForAudioXVector"),c(HF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HF,"href","#transformers.AutoModelForAudioXVector"),c(Bd,"class","relative group"),c(KW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oQ,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(rQ,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(tQ,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(aQ,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(nQ,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tT,"id","transformers.AutoModelForMaskedImageModeling"),c(tT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tT,"href","#transformers.AutoModelForMaskedImageModeling"),c(qd,"class","relative group"),c(sQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dQ,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(cQ,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(fQ,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cT,"id","transformers.AutoModelForObjectDetection"),c(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cT,"href","#transformers.AutoModelForObjectDetection"),c(Od,"class","relative group"),c(mQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pQ,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection"),c(uQ,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uT,"id","transformers.AutoModelForImageSegmentation"),c(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uT,"href","#transformers.AutoModelForImageSegmentation"),c(zd,"class","relative group"),c(_Q,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FQ,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TT,"id","transformers.AutoModelForSemanticSegmentation"),c(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TT,"href","#transformers.AutoModelForSemanticSegmentation"),c(Hd,"class","relative group"),c(TQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CQ,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(wQ,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(AQ,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(LQ,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForInstanceSegmentation"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Yd,"class","relative group"),c(yQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($Q,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kQ,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PT,"id","transformers.TFAutoModel"),c(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PT,"href","#transformers.TFAutoModel"),c(ec,"class","relative group"),c(SQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel"),c(IQ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel"),c(NQ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel"),c(qQ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(jQ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(DQ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel"),c(GQ,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel"),c(OQ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel"),c(VQ,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel"),c(XQ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel"),c(zQ,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(WQ,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel"),c(QQ,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(HQ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(UQ,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(JQ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel"),c(YQ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(KQ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel"),c(ZQ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(eH,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model"),c(oH,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel"),c(rH,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel"),c(tH,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(aH,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel"),c(nH,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel"),c(sH,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel"),c(lH,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel"),c(iH,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel"),c(dH,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(cH,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel"),c(fH,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model"),c(mH,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(gH,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTModel"),c(hH,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel"),c(pH,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel"),c(uH,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel"),c(_H,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel"),c(bH,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel"),c(vH,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(FH,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel"),c(TH,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model"),c(MH,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel"),c(EH,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(CH,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel"),c(wH,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(AH,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(LH,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel"),c(yH,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(xH,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($M,"id","transformers.TFAutoModelForPreTraining"),c($M,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($M,"href","#transformers.TFAutoModelForPreTraining"),c(tc,"class","relative group"),c($H,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RH,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(PH,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(BH,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining"),c(IH,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(NH,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(qH,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(jH,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(DH,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(GH,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(OH,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(VH,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(XH,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(zH,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(WH,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(QH,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(HH,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(UH,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(JH,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(YH,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(KH,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(ZH,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(eU,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(oU,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rE,"id","transformers.TFAutoModelForCausalLM"),c(rE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rE,"href","#transformers.TFAutoModelForCausalLM"),c(sc,"class","relative group"),c(rU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(sU,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(lU,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(iU,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(dU,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(cU,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(fU,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(mU,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(gU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(hU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(pU,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(uU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(_U,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bE,"id","transformers.TFAutoModelForImageClassification"),c(bE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bE,"href","#transformers.TFAutoModelForImageClassification"),c(dc,"class","relative group"),c(bU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(MU,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(EU,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(CU,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(wU,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForMaskedLM"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c(AU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xU,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c($U,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(kU,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(SU,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(RU,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(PU,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BU,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IU,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(NU,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qU,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(jU,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(DU,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(GU,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(OU,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(VU,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(XU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(zU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(WU,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(HU,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(pc,"class","relative group"),c(UU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(ZU,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(eJ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(oJ,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(rJ,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(tJ,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel"),c(aJ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(nJ,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.TFAutoModelForSequenceClassification"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.TFAutoModelForSequenceClassification"),c(bc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(CJ,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(wJ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(AJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(LJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yJ,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(xJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c($J,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(kJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(SJ,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(RJ,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(PJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(IJ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.TFAutoModelForMultipleChoice"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Tc,"class","relative group"),c(NJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(GJ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(OJ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(VJ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(XJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(zJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(WJ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QJ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(HJ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(UJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(JJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(YJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(KJ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(ZJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(eY,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(oY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(rY,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForNextSentencePrediction"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Cc,"class","relative group"),c(tY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(lY,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Lc,"class","relative group"),c(iY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m5,"id","transformers.TFAutoModelForTokenClassification"),c(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m5,"href","#transformers.TFAutoModelForTokenClassification"),c($c,"class","relative group"),c(mY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(uY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(_Y,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(bY,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(vY,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(FY,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(TY,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(MY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(EY,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(CY,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(wY,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(AY,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(LY,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yY,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(xY,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c($Y,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(kY,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(SY,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(RY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(PY,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B5,"id","transformers.TFAutoModelForQuestionAnswering"),c(B5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Rc,"class","relative group"),c(BY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(VY,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(zY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(WY,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QY,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(HY,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(UY,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(JY,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(YY,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(KY,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(ZY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(eK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(oK,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(rK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(tK,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.TFAutoModelForVision2Seq"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.TFAutoModelForVision2Seq"),c(Ic,"class","relative group"),c(aK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(jc,"class","relative group"),c(iK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fK,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m3,"id","transformers.FlaxAutoModel"),c(m3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m3,"href","#transformers.FlaxAutoModel"),c(Oc,"class","relative group"),c(mK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel"),c(uK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel"),c(_K,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel"),c(bK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel"),c(vK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(FK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(TK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(MK,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel"),c(EK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(CK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel"),c(wK,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(AK,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(LK,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yK,"href","/docs/transformers/pr_17427/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(xK,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel"),c($K,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel"),c(kK,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model"),c(SK,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTModel"),c(RK,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(PK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(BK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(IK,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model"),c(NK,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(qK,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel"),c(jK,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(DK,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(GK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.FlaxAutoModelForCausalLM"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.FlaxAutoModelForCausalLM"),c(zc,"class","relative group"),c(OK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(WK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(QK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(HK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(UK,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JK,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YK,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KK,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ZK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(eZ,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.FlaxAutoModelForPreTraining"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Hc,"class","relative group"),c(oZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aZ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(nZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(sZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(lZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(iZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(dZ,"href","/docs/transformers/pr_17427/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(cZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fZ,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hZ,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pZ,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(uZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_0,"id","transformers.FlaxAutoModelForMaskedLM"),c(_0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Yc,"class","relative group"),c(_Z,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FZ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(TZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(MZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(EZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(CZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(wZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(AZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(LZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(yZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(xZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(ef,"class","relative group"),c($Z,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(PZ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(BZ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(IZ,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(NZ,"href","/docs/transformers/pr_17427/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qZ,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(jZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(DZ,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(GZ,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(OZ,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(V0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(tf,"class","relative group"),c(VZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WZ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(QZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(HZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(UZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(JZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(YZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(KZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(ZZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(eee,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(oee,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(sf,"class","relative group"),c(ree,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nee,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(see,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(lee,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(iee,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(dee,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(cee,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fee,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(mee,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(gee,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(hee,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForTokenClassification"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(cf,"class","relative group"),c(pee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_ee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bee,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(vee,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Fee,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Tee,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Mee,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Eee,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Cee,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(wee,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Aw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(Aw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Aw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(gf,"class","relative group"),c(Aee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xee,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c($ee,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(kee,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(See,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Ree,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Pee,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Bee,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Iee,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Nw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(uf,"class","relative group"),c(Nee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gw,"id","transformers.FlaxAutoModelForImageClassification"),c(Gw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gw,"href","#transformers.FlaxAutoModelForImageClassification"),c(vf,"class","relative group"),c(Gee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xee,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(zee,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ww,"id","transformers.FlaxAutoModelForVision2Seq"),c(Ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ww,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Mf,"class","relative group"),c(Wee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uee,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Ti),b(f,yf,_),b(f,nt,_),e(nt,Mi),e(nt,Ei),e(Ei,pL),e(nt,xf),b(f,Oe,_),b(f,We,_),e(We,Ci),e(We,Sn),e(Sn,uL),e(We,Rn),e(We,Pn),e(Pn,_L),e(We,wi),e(We,Bn),e(Bn,bL),e(We,Ai),b(f,$f,_),M(xa,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,zk),e(Ae,Li),e(Li,Wk),e(Ae,Qk),b(f,Co,_),b(f,$a,_),e($a,Hk),e($a,kf),e(kf,Uk),e($a,gze),b(f,KDe,_),b(f,yi,_),e(yi,Sf),e(Sf,Xre),M(vL,Xre,null),e(yi,hze),e(yi,zre),e(zre,pze),b(f,ZDe,_),b(f,In,_),e(In,uze),e(In,Wre),e(Wre,_ze),e(In,bze),e(In,Qre),e(Qre,vze),e(In,Fze),b(f,eGe,_),M(FL,f,_),b(f,oGe,_),b(f,Jk,_),e(Jk,Tze),b(f,rGe,_),M(Rf,f,_),b(f,tGe,_),b(f,xi,_),e(xi,Pf),e(Pf,Hre),M(TL,Hre,null),e(xi,Mze),e(xi,Ure),e(Ure,Eze),b(f,aGe,_),b(f,wo,_),M(ML,wo,null),e(wo,Cze),e(wo,EL),e(EL,wze),e(EL,Yk),e(Yk,Aze),e(EL,Lze),e(wo,yze),e(wo,CL),e(CL,xze),e(CL,Jre),e(Jre,$ze),e(CL,kze),e(wo,Sze),e(wo,wr),M(wL,wr,null),e(wr,Rze),e(wr,Yre),e(Yre,Pze),e(wr,Bze),e(wr,$i),e($i,Ize),e($i,Kre),e(Kre,Nze),e($i,qze),e($i,Zre),e(Zre,jze),e($i,Dze),e(wr,Gze),e(wr,A),e(A,Bf),e(Bf,ete),e(ete,Oze),e(Bf,Vze),e(Bf,Kk),e(Kk,Xze),e(Bf,zze),e(A,Wze),e(A,If),e(If,ote),e(ote,Qze),e(If,Hze),e(If,Zk),e(Zk,Uze),e(If,Jze),e(A,Yze),e(A,Nf),e(Nf,rte),e(rte,Kze),e(Nf,Zze),e(Nf,eS),e(eS,eWe),e(Nf,oWe),e(A,rWe),e(A,qf),e(qf,tte),e(tte,tWe),e(qf,aWe),e(qf,oS),e(oS,nWe),e(qf,sWe),e(A,lWe),e(A,jf),e(jf,ate),e(ate,iWe),e(jf,dWe),e(jf,rS),e(rS,cWe),e(jf,fWe),e(A,mWe),e(A,Df),e(Df,nte),e(nte,gWe),e(Df,hWe),e(Df,tS),e(tS,pWe),e(Df,uWe),e(A,_We),e(A,Gf),e(Gf,ste),e(ste,bWe),e(Gf,vWe),e(Gf,aS),e(aS,FWe),e(Gf,TWe),e(A,MWe),e(A,Of),e(Of,lte),e(lte,EWe),e(Of,CWe),e(Of,nS),e(nS,wWe),e(Of,AWe),e(A,LWe),e(A,Vf),e(Vf,ite),e(ite,yWe),e(Vf,xWe),e(Vf,sS),e(sS,$We),e(Vf,kWe),e(A,SWe),e(A,Xf),e(Xf,dte),e(dte,RWe),e(Xf,PWe),e(Xf,lS),e(lS,BWe),e(Xf,IWe),e(A,NWe),e(A,zf),e(zf,cte),e(cte,qWe),e(zf,jWe),e(zf,iS),e(iS,DWe),e(zf,GWe),e(A,OWe),e(A,Wf),e(Wf,fte),e(fte,VWe),e(Wf,XWe),e(Wf,dS),e(dS,zWe),e(Wf,WWe),e(A,QWe),e(A,Qf),e(Qf,mte),e(mte,HWe),e(Qf,UWe),e(Qf,cS),e(cS,JWe),e(Qf,YWe),e(A,KWe),e(A,Hf),e(Hf,gte),e(gte,ZWe),e(Hf,eQe),e(Hf,fS),e(fS,oQe),e(Hf,rQe),e(A,tQe),e(A,Uf),e(Uf,hte),e(hte,aQe),e(Uf,nQe),e(Uf,mS),e(mS,sQe),e(Uf,lQe),e(A,iQe),e(A,Jf),e(Jf,pte),e(pte,dQe),e(Jf,cQe),e(Jf,gS),e(gS,fQe),e(Jf,mQe),e(A,gQe),e(A,Yf),e(Yf,ute),e(ute,hQe),e(Yf,pQe),e(Yf,hS),e(hS,uQe),e(Yf,_Qe),e(A,bQe),e(A,Kf),e(Kf,_te),e(_te,vQe),e(Kf,FQe),e(Kf,pS),e(pS,TQe),e(Kf,MQe),e(A,EQe),e(A,Zf),e(Zf,bte),e(bte,CQe),e(Zf,wQe),e(Zf,uS),e(uS,AQe),e(Zf,LQe),e(A,yQe),e(A,em),e(em,vte),e(vte,xQe),e(em,$Qe),e(em,_S),e(_S,kQe),e(em,SQe),e(A,RQe),e(A,om),e(om,Fte),e(Fte,PQe),e(om,BQe),e(om,bS),e(bS,IQe),e(om,NQe),e(A,qQe),e(A,rm),e(rm,Tte),e(Tte,jQe),e(rm,DQe),e(rm,vS),e(vS,GQe),e(rm,OQe),e(A,VQe),e(A,tm),e(tm,Mte),e(Mte,XQe),e(tm,zQe),e(tm,FS),e(FS,WQe),e(tm,QQe),e(A,HQe),e(A,am),e(am,Ete),e(Ete,UQe),e(am,JQe),e(am,TS),e(TS,YQe),e(am,KQe),e(A,ZQe),e(A,nm),e(nm,Cte),e(Cte,eHe),e(nm,oHe),e(nm,MS),e(MS,rHe),e(nm,tHe),e(A,aHe),e(A,sm),e(sm,wte),e(wte,nHe),e(sm,sHe),e(sm,ES),e(ES,lHe),e(sm,iHe),e(A,dHe),e(A,lm),e(lm,Ate),e(Ate,cHe),e(lm,fHe),e(lm,CS),e(CS,mHe),e(lm,gHe),e(A,hHe),e(A,im),e(im,Lte),e(Lte,pHe),e(im,uHe),e(im,wS),e(wS,_He),e(im,bHe),e(A,vHe),e(A,dm),e(dm,yte),e(yte,FHe),e(dm,THe),e(dm,AS),e(AS,MHe),e(dm,EHe),e(A,CHe),e(A,cm),e(cm,xte),e(xte,wHe),e(cm,AHe),e(cm,LS),e(LS,LHe),e(cm,yHe),e(A,xHe),e(A,fm),e(fm,$te),e($te,$He),e(fm,kHe),e(fm,yS),e(yS,SHe),e(fm,RHe),e(A,PHe),e(A,mm),e(mm,kte),e(kte,BHe),e(mm,IHe),e(mm,xS),e(xS,NHe),e(mm,qHe),e(A,jHe),e(A,gm),e(gm,Ste),e(Ste,DHe),e(gm,GHe),e(gm,$S),e($S,OHe),e(gm,VHe),e(A,XHe),e(A,hm),e(hm,Rte),e(Rte,zHe),e(hm,WHe),e(hm,kS),e(kS,QHe),e(hm,HHe),e(A,UHe),e(A,pm),e(pm,Pte),e(Pte,JHe),e(pm,YHe),e(pm,SS),e(SS,KHe),e(pm,ZHe),e(A,eUe),e(A,um),e(um,Bte),e(Bte,oUe),e(um,rUe),e(um,RS),e(RS,tUe),e(um,aUe),e(A,nUe),e(A,_m),e(_m,Ite),e(Ite,sUe),e(_m,lUe),e(_m,PS),e(PS,iUe),e(_m,dUe),e(A,cUe),e(A,bm),e(bm,Nte),e(Nte,fUe),e(bm,mUe),e(bm,BS),e(BS,gUe),e(bm,hUe),e(A,pUe),e(A,vm),e(vm,qte),e(qte,uUe),e(vm,_Ue),e(vm,IS),e(IS,bUe),e(vm,vUe),e(A,FUe),e(A,Fm),e(Fm,jte),e(jte,TUe),e(Fm,MUe),e(Fm,NS),e(NS,EUe),e(Fm,CUe),e(A,wUe),e(A,Tm),e(Tm,Dte),e(Dte,AUe),e(Tm,LUe),e(Tm,qS),e(qS,yUe),e(Tm,xUe),e(A,$Ue),e(A,Mm),e(Mm,Gte),e(Gte,kUe),e(Mm,SUe),e(Mm,jS),e(jS,RUe),e(Mm,PUe),e(A,BUe),e(A,Em),e(Em,Ote),e(Ote,IUe),e(Em,NUe),e(Em,DS),e(DS,qUe),e(Em,jUe),e(A,DUe),e(A,Cm),e(Cm,Vte),e(Vte,GUe),e(Cm,OUe),e(Cm,GS),e(GS,VUe),e(Cm,XUe),e(A,zUe),e(A,wm),e(wm,Xte),e(Xte,WUe),e(wm,QUe),e(wm,OS),e(OS,HUe),e(wm,UUe),e(A,JUe),e(A,Am),e(Am,zte),e(zte,YUe),e(Am,KUe),e(Am,VS),e(VS,ZUe),e(Am,eJe),e(A,oJe),e(A,Lm),e(Lm,Wte),e(Wte,rJe),e(Lm,tJe),e(Lm,XS),e(XS,aJe),e(Lm,nJe),e(A,sJe),e(A,ym),e(ym,Qte),e(Qte,lJe),e(ym,iJe),e(ym,zS),e(zS,dJe),e(ym,cJe),e(A,fJe),e(A,xm),e(xm,Hte),e(Hte,mJe),e(xm,gJe),e(xm,WS),e(WS,hJe),e(xm,pJe),e(A,uJe),e(A,$m),e($m,Ute),e(Ute,_Je),e($m,bJe),e($m,QS),e(QS,vJe),e($m,FJe),e(A,TJe),e(A,km),e(km,Jte),e(Jte,MJe),e(km,EJe),e(km,HS),e(HS,CJe),e(km,wJe),e(A,AJe),e(A,Sm),e(Sm,Yte),e(Yte,LJe),e(Sm,yJe),e(Sm,US),e(US,xJe),e(Sm,$Je),e(A,kJe),e(A,Rm),e(Rm,Kte),e(Kte,SJe),e(Rm,RJe),e(Rm,JS),e(JS,PJe),e(Rm,BJe),e(A,IJe),e(A,Pm),e(Pm,Zte),e(Zte,NJe),e(Pm,qJe),e(Pm,YS),e(YS,jJe),e(Pm,DJe),e(A,GJe),e(A,Bm),e(Bm,eae),e(eae,OJe),e(Bm,VJe),e(Bm,KS),e(KS,XJe),e(Bm,zJe),e(A,WJe),e(A,Im),e(Im,oae),e(oae,QJe),e(Im,HJe),e(Im,ZS),e(ZS,UJe),e(Im,JJe),e(A,YJe),e(A,Nm),e(Nm,rae),e(rae,KJe),e(Nm,ZJe),e(Nm,eR),e(eR,eYe),e(Nm,oYe),e(A,rYe),e(A,qm),e(qm,tae),e(tae,tYe),e(qm,aYe),e(qm,oR),e(oR,nYe),e(qm,sYe),e(A,lYe),e(A,jm),e(jm,aae),e(aae,iYe),e(jm,dYe),e(jm,rR),e(rR,cYe),e(jm,fYe),e(A,mYe),e(A,Dm),e(Dm,nae),e(nae,gYe),e(Dm,hYe),e(Dm,tR),e(tR,pYe),e(Dm,uYe),e(A,_Ye),e(A,Gm),e(Gm,sae),e(sae,bYe),e(Gm,vYe),e(Gm,aR),e(aR,FYe),e(Gm,TYe),e(A,MYe),e(A,Om),e(Om,lae),e(lae,EYe),e(Om,CYe),e(Om,nR),e(nR,wYe),e(Om,AYe),e(A,LYe),e(A,Vm),e(Vm,iae),e(iae,yYe),e(Vm,xYe),e(Vm,sR),e(sR,$Ye),e(Vm,kYe),e(A,SYe),e(A,Xm),e(Xm,dae),e(dae,RYe),e(Xm,PYe),e(Xm,lR),e(lR,BYe),e(Xm,IYe),e(A,NYe),e(A,zm),e(zm,cae),e(cae,qYe),e(zm,jYe),e(zm,iR),e(iR,DYe),e(zm,GYe),e(A,OYe),e(A,Wm),e(Wm,fae),e(fae,VYe),e(Wm,XYe),e(Wm,dR),e(dR,zYe),e(Wm,WYe),e(A,QYe),e(A,Qm),e(Qm,mae),e(mae,HYe),e(Qm,UYe),e(Qm,cR),e(cR,JYe),e(Qm,YYe),e(A,KYe),e(A,Hm),e(Hm,gae),e(gae,ZYe),e(Hm,eKe),e(Hm,fR),e(fR,oKe),e(Hm,rKe),e(A,tKe),e(A,Um),e(Um,hae),e(hae,aKe),e(Um,nKe),e(Um,mR),e(mR,sKe),e(Um,lKe),e(A,iKe),e(A,Jm),e(Jm,pae),e(pae,dKe),e(Jm,cKe),e(Jm,gR),e(gR,fKe),e(Jm,mKe),e(A,gKe),e(A,Ym),e(Ym,uae),e(uae,hKe),e(Ym,pKe),e(Ym,hR),e(hR,uKe),e(Ym,_Ke),e(A,bKe),e(A,Km),e(Km,_ae),e(_ae,vKe),e(Km,FKe),e(Km,pR),e(pR,TKe),e(Km,MKe),e(A,EKe),e(A,Zm),e(Zm,bae),e(bae,CKe),e(Zm,wKe),e(Zm,uR),e(uR,AKe),e(Zm,LKe),e(A,yKe),e(A,eg),e(eg,vae),e(vae,xKe),e(eg,$Ke),e(eg,_R),e(_R,kKe),e(eg,SKe),e(A,RKe),e(A,og),e(og,Fae),e(Fae,PKe),e(og,BKe),e(og,bR),e(bR,IKe),e(og,NKe),e(A,qKe),e(A,rg),e(rg,Tae),e(Tae,jKe),e(rg,DKe),e(rg,vR),e(vR,GKe),e(rg,OKe),e(A,VKe),e(A,tg),e(tg,Mae),e(Mae,XKe),e(tg,zKe),e(tg,FR),e(FR,WKe),e(tg,QKe),e(A,HKe),e(A,ag),e(ag,Eae),e(Eae,UKe),e(ag,JKe),e(ag,TR),e(TR,YKe),e(ag,KKe),e(A,ZKe),e(A,ng),e(ng,Cae),e(Cae,eZe),e(ng,oZe),e(ng,MR),e(MR,rZe),e(ng,tZe),e(A,aZe),e(A,sg),e(sg,wae),e(wae,nZe),e(sg,sZe),e(sg,ER),e(ER,lZe),e(sg,iZe),e(A,dZe),e(A,lg),e(lg,Aae),e(Aae,cZe),e(lg,fZe),e(lg,CR),e(CR,mZe),e(lg,gZe),e(A,hZe),e(A,ig),e(ig,Lae),e(Lae,pZe),e(ig,uZe),e(ig,wR),e(wR,_Ze),e(ig,bZe),e(A,vZe),e(A,dg),e(dg,yae),e(yae,FZe),e(dg,TZe),e(dg,AR),e(AR,MZe),e(dg,EZe),e(A,CZe),e(A,cg),e(cg,xae),e(xae,wZe),e(cg,AZe),e(cg,LR),e(LR,LZe),e(cg,yZe),e(A,xZe),e(A,fg),e(fg,$ae),e($ae,$Ze),e(fg,kZe),e(fg,yR),e(yR,SZe),e(fg,RZe),e(A,PZe),e(A,mg),e(mg,kae),e(kae,BZe),e(mg,IZe),e(mg,xR),e(xR,NZe),e(mg,qZe),e(A,jZe),e(A,gg),e(gg,Sae),e(Sae,DZe),e(gg,GZe),e(gg,$R),e($R,OZe),e(gg,VZe),e(A,XZe),e(A,hg),e(hg,Rae),e(Rae,zZe),e(hg,WZe),e(hg,kR),e(kR,QZe),e(hg,HZe),e(A,UZe),e(A,pg),e(pg,Pae),e(Pae,JZe),e(pg,YZe),e(pg,SR),e(SR,KZe),e(pg,ZZe),e(A,eeo),e(A,ug),e(ug,Bae),e(Bae,oeo),e(ug,reo),e(ug,RR),e(RR,teo),e(ug,aeo),e(A,neo),e(A,_g),e(_g,Iae),e(Iae,seo),e(_g,leo),e(_g,PR),e(PR,ieo),e(_g,deo),e(A,ceo),e(A,bg),e(bg,Nae),e(Nae,feo),e(bg,meo),e(bg,BR),e(BR,geo),e(bg,heo),e(A,peo),e(A,vg),e(vg,qae),e(qae,ueo),e(vg,_eo),e(vg,IR),e(IR,beo),e(vg,veo),e(A,Feo),e(A,Fg),e(Fg,jae),e(jae,Teo),e(Fg,Meo),e(Fg,NR),e(NR,Eeo),e(Fg,Ceo),e(A,weo),e(A,Tg),e(Tg,Dae),e(Dae,Aeo),e(Tg,Leo),e(Tg,qR),e(qR,yeo),e(Tg,xeo),e(A,$eo),e(A,Mg),e(Mg,Gae),e(Gae,keo),e(Mg,Seo),e(Mg,jR),e(jR,Reo),e(Mg,Peo),e(A,Beo),e(A,Eg),e(Eg,Oae),e(Oae,Ieo),e(Eg,Neo),e(Eg,DR),e(DR,qeo),e(Eg,jeo),e(A,Deo),e(A,Cg),e(Cg,Vae),e(Vae,Geo),e(Cg,Oeo),e(Cg,GR),e(GR,Veo),e(Cg,Xeo),e(A,zeo),e(A,wg),e(wg,Xae),e(Xae,Weo),e(wg,Qeo),e(wg,OR),e(OR,Heo),e(wg,Ueo),e(A,Jeo),e(A,Ag),e(Ag,zae),e(zae,Yeo),e(Ag,Keo),e(Ag,VR),e(VR,Zeo),e(Ag,eoo),e(A,ooo),e(A,Lg),e(Lg,Wae),e(Wae,roo),e(Lg,too),e(Lg,XR),e(XR,aoo),e(Lg,noo),e(A,soo),e(A,yg),e(yg,Qae),e(Qae,loo),e(yg,ioo),e(yg,zR),e(zR,doo),e(yg,coo),e(A,foo),e(A,xg),e(xg,Hae),e(Hae,moo),e(xg,goo),e(xg,WR),e(WR,hoo),e(xg,poo),e(A,uoo),e(A,$g),e($g,Uae),e(Uae,_oo),e($g,boo),e($g,QR),e(QR,voo),e($g,Foo),e(A,Too),e(A,kg),e(kg,Jae),e(Jae,Moo),e(kg,Eoo),e(kg,HR),e(HR,Coo),e(kg,woo),e(A,Aoo),e(A,Sg),e(Sg,Yae),e(Yae,Loo),e(Sg,yoo),e(Sg,UR),e(UR,xoo),e(Sg,$oo),e(A,koo),e(A,Rg),e(Rg,Kae),e(Kae,Soo),e(Rg,Roo),e(Rg,JR),e(JR,Poo),e(Rg,Boo),e(A,Ioo),e(A,Pg),e(Pg,Zae),e(Zae,Noo),e(Pg,qoo),e(Pg,YR),e(YR,joo),e(Pg,Doo),e(A,Goo),e(A,Bg),e(Bg,ene),e(ene,Ooo),e(Bg,Voo),e(Bg,KR),e(KR,Xoo),e(Bg,zoo),e(A,Woo),e(A,Ig),e(Ig,one),e(one,Qoo),e(Ig,Hoo),e(Ig,ZR),e(ZR,Uoo),e(Ig,Joo),e(A,Yoo),e(A,Ng),e(Ng,rne),e(rne,Koo),e(Ng,Zoo),e(Ng,eP),e(eP,ero),e(Ng,oro),e(A,rro),e(A,qg),e(qg,tne),e(tne,tro),e(qg,aro),e(qg,oP),e(oP,nro),e(qg,sro),e(A,lro),e(A,jg),e(jg,ane),e(ane,iro),e(jg,dro),e(jg,rP),e(rP,cro),e(jg,fro),e(wr,mro),M(Dg,wr,null),e(wo,gro),e(wo,Gg),M(AL,Gg,null),e(Gg,hro),e(Gg,nne),e(nne,pro),b(f,nGe,_),b(f,ki,_),e(ki,Og),e(Og,sne),M(LL,sne,null),e(ki,uro),e(ki,lne),e(lne,_ro),b(f,sGe,_),b(f,Ao,_),M(yL,Ao,null),e(Ao,bro),e(Ao,xL),e(xL,vro),e(xL,tP),e(tP,Fro),e(xL,Tro),e(Ao,Mro),e(Ao,$L),e($L,Ero),e($L,ine),e(ine,Cro),e($L,wro),e(Ao,Aro),e(Ao,Ar),M(kL,Ar,null),e(Ar,Lro),e(Ar,dne),e(dne,yro),e(Ar,xro),e(Ar,ka),e(ka,$ro),e(ka,cne),e(cne,kro),e(ka,Sro),e(ka,fne),e(fne,Rro),e(ka,Pro),e(ka,mne),e(mne,Bro),e(ka,Iro),e(Ar,Nro),e(Ar,k),e(k,Nn),e(Nn,gne),e(gne,qro),e(Nn,jro),e(Nn,aP),e(aP,Dro),e(Nn,Gro),e(Nn,nP),e(nP,Oro),e(Nn,Vro),e(k,Xro),e(k,qn),e(qn,hne),e(hne,zro),e(qn,Wro),e(qn,sP),e(sP,Qro),e(qn,Hro),e(qn,lP),e(lP,Uro),e(qn,Jro),e(k,Yro),e(k,jn),e(jn,pne),e(pne,Kro),e(jn,Zro),e(jn,iP),e(iP,eto),e(jn,oto),e(jn,dP),e(dP,rto),e(jn,tto),e(k,ato),e(k,Vg),e(Vg,une),e(une,nto),e(Vg,sto),e(Vg,cP),e(cP,lto),e(Vg,ito),e(k,dto),e(k,Dn),e(Dn,_ne),e(_ne,cto),e(Dn,fto),e(Dn,fP),e(fP,mto),e(Dn,gto),e(Dn,mP),e(mP,hto),e(Dn,pto),e(k,uto),e(k,Xg),e(Xg,bne),e(bne,_to),e(Xg,bto),e(Xg,gP),e(gP,vto),e(Xg,Fto),e(k,Tto),e(k,zg),e(zg,vne),e(vne,Mto),e(zg,Eto),e(zg,hP),e(hP,Cto),e(zg,wto),e(k,Ato),e(k,Wg),e(Wg,Fne),e(Fne,Lto),e(Wg,yto),e(Wg,pP),e(pP,xto),e(Wg,$to),e(k,kto),e(k,Gn),e(Gn,Tne),e(Tne,Sto),e(Gn,Rto),e(Gn,uP),e(uP,Pto),e(Gn,Bto),e(Gn,_P),e(_P,Ito),e(Gn,Nto),e(k,qto),e(k,On),e(On,Mne),e(Mne,jto),e(On,Dto),e(On,bP),e(bP,Gto),e(On,Oto),e(On,vP),e(vP,Vto),e(On,Xto),e(k,zto),e(k,Vn),e(Vn,Ene),e(Ene,Wto),e(Vn,Qto),e(Vn,FP),e(FP,Hto),e(Vn,Uto),e(Vn,TP),e(TP,Jto),e(Vn,Yto),e(k,Kto),e(k,Qg),e(Qg,Cne),e(Cne,Zto),e(Qg,eao),e(Qg,MP),e(MP,oao),e(Qg,rao),e(k,tao),e(k,Hg),e(Hg,wne),e(wne,aao),e(Hg,nao),e(Hg,EP),e(EP,sao),e(Hg,lao),e(k,iao),e(k,Ug),e(Ug,Ane),e(Ane,dao),e(Ug,cao),e(Ug,CP),e(CP,fao),e(Ug,mao),e(k,gao),e(k,Xn),e(Xn,Lne),e(Lne,hao),e(Xn,pao),e(Xn,wP),e(wP,uao),e(Xn,_ao),e(Xn,AP),e(AP,bao),e(Xn,vao),e(k,Fao),e(k,Jg),e(Jg,yne),e(yne,Tao),e(Jg,Mao),e(Jg,LP),e(LP,Eao),e(Jg,Cao),e(k,wao),e(k,zn),e(zn,xne),e(xne,Aao),e(zn,Lao),e(zn,yP),e(yP,yao),e(zn,xao),e(zn,xP),e(xP,$ao),e(zn,kao),e(k,Sao),e(k,Wn),e(Wn,$ne),e($ne,Rao),e(Wn,Pao),e(Wn,$P),e($P,Bao),e(Wn,Iao),e(Wn,kP),e(kP,Nao),e(Wn,qao),e(k,jao),e(k,Qn),e(Qn,kne),e(kne,Dao),e(Qn,Gao),e(Qn,SP),e(SP,Oao),e(Qn,Vao),e(Qn,RP),e(RP,Xao),e(Qn,zao),e(k,Wao),e(k,Yg),e(Yg,Sne),e(Sne,Qao),e(Yg,Hao),e(Yg,PP),e(PP,Uao),e(Yg,Jao),e(k,Yao),e(k,Hn),e(Hn,Rne),e(Rne,Kao),e(Hn,Zao),e(Hn,BP),e(BP,eno),e(Hn,ono),e(Hn,IP),e(IP,rno),e(Hn,tno),e(k,ano),e(k,Un),e(Un,Pne),e(Pne,nno),e(Un,sno),e(Un,NP),e(NP,lno),e(Un,ino),e(Un,qP),e(qP,dno),e(Un,cno),e(k,fno),e(k,Jn),e(Jn,Bne),e(Bne,mno),e(Jn,gno),e(Jn,jP),e(jP,hno),e(Jn,pno),e(Jn,DP),e(DP,uno),e(Jn,_no),e(k,bno),e(k,Yn),e(Yn,Ine),e(Ine,vno),e(Yn,Fno),e(Yn,GP),e(GP,Tno),e(Yn,Mno),e(Yn,OP),e(OP,Eno),e(Yn,Cno),e(k,wno),e(k,Kn),e(Kn,Nne),e(Nne,Ano),e(Kn,Lno),e(Kn,VP),e(VP,yno),e(Kn,xno),e(Kn,XP),e(XP,$no),e(Kn,kno),e(k,Sno),e(k,Zn),e(Zn,qne),e(qne,Rno),e(Zn,Pno),e(Zn,zP),e(zP,Bno),e(Zn,Ino),e(Zn,WP),e(WP,Nno),e(Zn,qno),e(k,jno),e(k,Kg),e(Kg,jne),e(jne,Dno),e(Kg,Gno),e(Kg,QP),e(QP,Ono),e(Kg,Vno),e(k,Xno),e(k,es),e(es,Dne),e(Dne,zno),e(es,Wno),e(es,HP),e(HP,Qno),e(es,Hno),e(es,UP),e(UP,Uno),e(es,Jno),e(k,Yno),e(k,Zg),e(Zg,Gne),e(Gne,Kno),e(Zg,Zno),e(Zg,JP),e(JP,eso),e(Zg,oso),e(k,rso),e(k,os),e(os,One),e(One,tso),e(os,aso),e(os,YP),e(YP,nso),e(os,sso),e(os,KP),e(KP,lso),e(os,iso),e(k,dso),e(k,rs),e(rs,Vne),e(Vne,cso),e(rs,fso),e(rs,ZP),e(ZP,mso),e(rs,gso),e(rs,eB),e(eB,hso),e(rs,pso),e(k,uso),e(k,ts),e(ts,Xne),e(Xne,_so),e(ts,bso),e(ts,oB),e(oB,vso),e(ts,Fso),e(ts,rB),e(rB,Tso),e(ts,Mso),e(k,Eso),e(k,eh),e(eh,zne),e(zne,Cso),e(eh,wso),e(eh,tB),e(tB,Aso),e(eh,Lso),e(k,yso),e(k,as),e(as,Wne),e(Wne,xso),e(as,$so),e(as,aB),e(aB,kso),e(as,Sso),e(as,nB),e(nB,Rso),e(as,Pso),e(k,Bso),e(k,ns),e(ns,Qne),e(Qne,Iso),e(ns,Nso),e(ns,sB),e(sB,qso),e(ns,jso),e(ns,lB),e(lB,Dso),e(ns,Gso),e(k,Oso),e(k,oh),e(oh,Hne),e(Hne,Vso),e(oh,Xso),e(oh,iB),e(iB,zso),e(oh,Wso),e(k,Qso),e(k,ss),e(ss,Une),e(Une,Hso),e(ss,Uso),e(ss,dB),e(dB,Jso),e(ss,Yso),e(ss,cB),e(cB,Kso),e(ss,Zso),e(k,elo),e(k,ls),e(ls,Jne),e(Jne,olo),e(ls,rlo),e(ls,fB),e(fB,tlo),e(ls,alo),e(ls,mB),e(mB,nlo),e(ls,slo),e(k,llo),e(k,is),e(is,Yne),e(Yne,ilo),e(is,dlo),e(is,gB),e(gB,clo),e(is,flo),e(is,hB),e(hB,mlo),e(is,glo),e(k,hlo),e(k,ds),e(ds,Kne),e(Kne,plo),e(ds,ulo),e(ds,pB),e(pB,_lo),e(ds,blo),e(ds,uB),e(uB,vlo),e(ds,Flo),e(k,Tlo),e(k,cs),e(cs,Zne),e(Zne,Mlo),e(cs,Elo),e(cs,_B),e(_B,Clo),e(cs,wlo),e(cs,bB),e(bB,Alo),e(cs,Llo),e(k,ylo),e(k,fs),e(fs,ese),e(ese,xlo),e(fs,$lo),e(fs,vB),e(vB,klo),e(fs,Slo),e(fs,FB),e(FB,Rlo),e(fs,Plo),e(k,Blo),e(k,ms),e(ms,ose),e(ose,Ilo),e(ms,Nlo),e(ms,TB),e(TB,qlo),e(ms,jlo),e(ms,MB),e(MB,Dlo),e(ms,Glo),e(k,Olo),e(k,gs),e(gs,rse),e(rse,Vlo),e(gs,Xlo),e(gs,EB),e(EB,zlo),e(gs,Wlo),e(gs,CB),e(CB,Qlo),e(gs,Hlo),e(k,Ulo),e(k,rh),e(rh,tse),e(tse,Jlo),e(rh,Ylo),e(rh,wB),e(wB,Klo),e(rh,Zlo),e(k,eio),e(k,hs),e(hs,ase),e(ase,oio),e(hs,rio),e(hs,AB),e(AB,tio),e(hs,aio),e(hs,LB),e(LB,nio),e(hs,sio),e(k,lio),e(k,th),e(th,nse),e(nse,iio),e(th,dio),e(th,yB),e(yB,cio),e(th,fio),e(k,mio),e(k,ah),e(ah,sse),e(sse,gio),e(ah,hio),e(ah,xB),e(xB,pio),e(ah,uio),e(k,_io),e(k,ps),e(ps,lse),e(lse,bio),e(ps,vio),e(ps,$B),e($B,Fio),e(ps,Tio),e(ps,kB),e(kB,Mio),e(ps,Eio),e(k,Cio),e(k,us),e(us,ise),e(ise,wio),e(us,Aio),e(us,SB),e(SB,Lio),e(us,yio),e(us,RB),e(RB,xio),e(us,$io),e(k,kio),e(k,_s),e(_s,dse),e(dse,Sio),e(_s,Rio),e(_s,PB),e(PB,Pio),e(_s,Bio),e(_s,BB),e(BB,Iio),e(_s,Nio),e(k,qio),e(k,nh),e(nh,cse),e(cse,jio),e(nh,Dio),e(nh,IB),e(IB,Gio),e(nh,Oio),e(k,Vio),e(k,bs),e(bs,fse),e(fse,Xio),e(bs,zio),e(bs,NB),e(NB,Wio),e(bs,Qio),e(bs,qB),e(qB,Hio),e(bs,Uio),e(k,Jio),e(k,vs),e(vs,mse),e(mse,Yio),e(vs,Kio),e(vs,jB),e(jB,Zio),e(vs,edo),e(vs,DB),e(DB,odo),e(vs,rdo),e(k,tdo),e(k,Fs),e(Fs,gse),e(gse,ado),e(Fs,ndo),e(Fs,GB),e(GB,sdo),e(Fs,ldo),e(Fs,OB),e(OB,ido),e(Fs,ddo),e(k,cdo),e(k,Ts),e(Ts,hse),e(hse,fdo),e(Ts,mdo),e(Ts,VB),e(VB,gdo),e(Ts,hdo),e(Ts,XB),e(XB,pdo),e(Ts,udo),e(k,_do),e(k,Ms),e(Ms,pse),e(pse,bdo),e(Ms,vdo),e(Ms,zB),e(zB,Fdo),e(Ms,Tdo),e(Ms,WB),e(WB,Mdo),e(Ms,Edo),e(k,Cdo),e(k,sh),e(sh,use),e(use,wdo),e(sh,Ado),e(sh,QB),e(QB,Ldo),e(sh,ydo),e(k,xdo),e(k,Es),e(Es,_se),e(_se,$do),e(Es,kdo),e(Es,HB),e(HB,Sdo),e(Es,Rdo),e(Es,UB),e(UB,Pdo),e(Es,Bdo),e(k,Ido),e(k,lh),e(lh,bse),e(bse,Ndo),e(lh,qdo),e(lh,JB),e(JB,jdo),e(lh,Ddo),e(k,Gdo),e(k,ih),e(ih,vse),e(vse,Odo),e(ih,Vdo),e(ih,YB),e(YB,Xdo),e(ih,zdo),e(k,Wdo),e(k,dh),e(dh,Fse),e(Fse,Qdo),e(dh,Hdo),e(dh,KB),e(KB,Udo),e(dh,Jdo),e(k,Ydo),e(k,ch),e(ch,Tse),e(Tse,Kdo),e(ch,Zdo),e(ch,ZB),e(ZB,eco),e(ch,oco),e(k,rco),e(k,Cs),e(Cs,Mse),e(Mse,tco),e(Cs,aco),e(Cs,eI),e(eI,nco),e(Cs,sco),e(Cs,oI),e(oI,lco),e(Cs,ico),e(k,dco),e(k,fh),e(fh,Ese),e(Ese,cco),e(fh,fco),e(fh,rI),e(rI,mco),e(fh,gco),e(k,hco),e(k,ws),e(ws,Cse),e(Cse,pco),e(ws,uco),e(ws,tI),e(tI,_co),e(ws,bco),e(ws,aI),e(aI,vco),e(ws,Fco),e(k,Tco),e(k,As),e(As,wse),e(wse,Mco),e(As,Eco),e(As,nI),e(nI,Cco),e(As,wco),e(As,sI),e(sI,Aco),e(As,Lco),e(k,yco),e(k,Ls),e(Ls,Ase),e(Ase,xco),e(Ls,$co),e(Ls,lI),e(lI,kco),e(Ls,Sco),e(Ls,iI),e(iI,Rco),e(Ls,Pco),e(k,Bco),e(k,ys),e(ys,Lse),e(Lse,Ico),e(ys,Nco),e(ys,dI),e(dI,qco),e(ys,jco),e(ys,cI),e(cI,Dco),e(ys,Gco),e(k,Oco),e(k,xs),e(xs,yse),e(yse,Vco),e(xs,Xco),e(xs,fI),e(fI,zco),e(xs,Wco),e(xs,mI),e(mI,Qco),e(xs,Hco),e(k,Uco),e(k,$s),e($s,xse),e(xse,Jco),e($s,Yco),e($s,gI),e(gI,Kco),e($s,Zco),e($s,hI),e(hI,efo),e($s,ofo),e(k,rfo),e(k,mh),e(mh,$se),e($se,tfo),e(mh,afo),e(mh,pI),e(pI,nfo),e(mh,sfo),e(k,lfo),e(k,gh),e(gh,kse),e(kse,ifo),e(gh,dfo),e(gh,uI),e(uI,cfo),e(gh,ffo),e(k,mfo),e(k,ks),e(ks,Sse),e(Sse,gfo),e(ks,hfo),e(ks,_I),e(_I,pfo),e(ks,ufo),e(ks,bI),e(bI,_fo),e(ks,bfo),e(k,vfo),e(k,Ss),e(Ss,Rse),e(Rse,Ffo),e(Ss,Tfo),e(Ss,vI),e(vI,Mfo),e(Ss,Efo),e(Ss,FI),e(FI,Cfo),e(Ss,wfo),e(k,Afo),e(k,Rs),e(Rs,Pse),e(Pse,Lfo),e(Rs,yfo),e(Rs,TI),e(TI,xfo),e(Rs,$fo),e(Rs,MI),e(MI,kfo),e(Rs,Sfo),e(k,Rfo),e(k,hh),e(hh,Bse),e(Bse,Pfo),e(hh,Bfo),e(hh,EI),e(EI,Ifo),e(hh,Nfo),e(k,qfo),e(k,ph),e(ph,Ise),e(Ise,jfo),e(ph,Dfo),e(ph,CI),e(CI,Gfo),e(ph,Ofo),e(k,Vfo),e(k,uh),e(uh,Nse),e(Nse,Xfo),e(uh,zfo),e(uh,wI),e(wI,Wfo),e(uh,Qfo),e(k,Hfo),e(k,Ps),e(Ps,qse),e(qse,Ufo),e(Ps,Jfo),e(Ps,AI),e(AI,Yfo),e(Ps,Kfo),e(Ps,LI),e(LI,Zfo),e(Ps,emo),e(k,omo),e(k,Bs),e(Bs,jse),e(jse,rmo),e(Bs,tmo),e(Bs,yI),e(yI,amo),e(Bs,nmo),e(Bs,xI),e(xI,smo),e(Bs,lmo),e(k,imo),e(k,_h),e(_h,Dse),e(Dse,dmo),e(_h,cmo),e(_h,$I),e($I,fmo),e(_h,mmo),e(k,gmo),e(k,bh),e(bh,Gse),e(Gse,hmo),e(bh,pmo),e(bh,kI),e(kI,umo),e(bh,_mo),e(k,bmo),e(k,vh),e(vh,Ose),e(Ose,vmo),e(vh,Fmo),e(vh,SI),e(SI,Tmo),e(vh,Mmo),e(k,Emo),e(k,Is),e(Is,Vse),e(Vse,Cmo),e(Is,wmo),e(Is,RI),e(RI,Amo),e(Is,Lmo),e(Is,PI),e(PI,ymo),e(Is,xmo),e(k,$mo),e(k,Fh),e(Fh,Xse),e(Xse,kmo),e(Fh,Smo),e(Fh,BI),e(BI,Rmo),e(Fh,Pmo),e(k,Bmo),e(k,Th),e(Th,zse),e(zse,Imo),e(Th,Nmo),e(Th,II),e(II,qmo),e(Th,jmo),e(k,Dmo),e(k,Ns),e(Ns,Wse),e(Wse,Gmo),e(Ns,Omo),e(Ns,NI),e(NI,Vmo),e(Ns,Xmo),e(Ns,qI),e(qI,zmo),e(Ns,Wmo),e(k,Qmo),e(k,qs),e(qs,Qse),e(Qse,Hmo),e(qs,Umo),e(qs,jI),e(jI,Jmo),e(qs,Ymo),e(qs,DI),e(DI,Kmo),e(qs,Zmo),e(k,ego),e(k,js),e(js,Hse),e(Hse,ogo),e(js,rgo),e(js,GI),e(GI,tgo),e(js,ago),e(js,OI),e(OI,ngo),e(js,sgo),e(k,lgo),e(k,Ds),e(Ds,Use),e(Use,igo),e(Ds,dgo),e(Ds,VI),e(VI,cgo),e(Ds,fgo),e(Ds,XI),e(XI,mgo),e(Ds,ggo),e(Ar,hgo),M(Mh,Ar,null),e(Ao,pgo),e(Ao,Eh),M(SL,Eh,null),e(Eh,ugo),e(Eh,Jse),e(Jse,_go),b(f,lGe,_),b(f,Si,_),e(Si,Ch),e(Ch,Yse),M(RL,Yse,null),e(Si,bgo),e(Si,Kse),e(Kse,vgo),b(f,iGe,_),b(f,Lo,_),M(PL,Lo,null),e(Lo,Fgo),e(Lo,BL),e(BL,Tgo),e(BL,zI),e(zI,Mgo),e(BL,Ego),e(Lo,Cgo),e(Lo,IL),e(IL,wgo),e(IL,Zse),e(Zse,Ago),e(IL,Lgo),e(Lo,ygo),e(Lo,He),M(NL,He,null),e(He,xgo),e(He,ele),e(ele,$go),e(He,kgo),e(He,Sa),e(Sa,Sgo),e(Sa,ole),e(ole,Rgo),e(Sa,Pgo),e(Sa,rle),e(rle,Bgo),e(Sa,Igo),e(Sa,tle),e(tle,Ngo),e(Sa,qgo),e(He,jgo),e(He,Y),e(Y,wh),e(wh,ale),e(ale,Dgo),e(wh,Ggo),e(wh,WI),e(WI,Ogo),e(wh,Vgo),e(Y,Xgo),e(Y,Ah),e(Ah,nle),e(nle,zgo),e(Ah,Wgo),e(Ah,QI),e(QI,Qgo),e(Ah,Hgo),e(Y,Ugo),e(Y,Lh),e(Lh,sle),e(sle,Jgo),e(Lh,Ygo),e(Lh,HI),e(HI,Kgo),e(Lh,Zgo),e(Y,eho),e(Y,yh),e(yh,lle),e(lle,oho),e(yh,rho),e(yh,UI),e(UI,tho),e(yh,aho),e(Y,nho),e(Y,xh),e(xh,ile),e(ile,sho),e(xh,lho),e(xh,JI),e(JI,iho),e(xh,dho),e(Y,cho),e(Y,$h),e($h,dle),e(dle,fho),e($h,mho),e($h,YI),e(YI,gho),e($h,hho),e(Y,pho),e(Y,kh),e(kh,cle),e(cle,uho),e(kh,_ho),e(kh,KI),e(KI,bho),e(kh,vho),e(Y,Fho),e(Y,Sh),e(Sh,fle),e(fle,Tho),e(Sh,Mho),e(Sh,ZI),e(ZI,Eho),e(Sh,Cho),e(Y,who),e(Y,Rh),e(Rh,mle),e(mle,Aho),e(Rh,Lho),e(Rh,eN),e(eN,yho),e(Rh,xho),e(Y,$ho),e(Y,Ph),e(Ph,gle),e(gle,kho),e(Ph,Sho),e(Ph,oN),e(oN,Rho),e(Ph,Pho),e(Y,Bho),e(Y,Bh),e(Bh,hle),e(hle,Iho),e(Bh,Nho),e(Bh,rN),e(rN,qho),e(Bh,jho),e(Y,Dho),e(Y,Ih),e(Ih,ple),e(ple,Gho),e(Ih,Oho),e(Ih,tN),e(tN,Vho),e(Ih,Xho),e(Y,zho),e(Y,Nh),e(Nh,ule),e(ule,Who),e(Nh,Qho),e(Nh,aN),e(aN,Hho),e(Nh,Uho),e(Y,Jho),e(Y,qh),e(qh,_le),e(_le,Yho),e(qh,Kho),e(qh,nN),e(nN,Zho),e(qh,epo),e(Y,opo),e(Y,jh),e(jh,ble),e(ble,rpo),e(jh,tpo),e(jh,sN),e(sN,apo),e(jh,npo),e(Y,spo),e(Y,Dh),e(Dh,vle),e(vle,lpo),e(Dh,ipo),e(Dh,lN),e(lN,dpo),e(Dh,cpo),e(Y,fpo),e(Y,Gh),e(Gh,Fle),e(Fle,mpo),e(Gh,gpo),e(Gh,iN),e(iN,hpo),e(Gh,ppo),e(Y,upo),e(Y,Oh),e(Oh,Tle),e(Tle,_po),e(Oh,bpo),e(Oh,dN),e(dN,vpo),e(Oh,Fpo),e(Y,Tpo),e(Y,Vh),e(Vh,Mle),e(Mle,Mpo),e(Vh,Epo),e(Vh,cN),e(cN,Cpo),e(Vh,wpo),e(Y,Apo),e(Y,Xh),e(Xh,Ele),e(Ele,Lpo),e(Xh,ypo),e(Xh,fN),e(fN,xpo),e(Xh,$po),e(Y,kpo),e(Y,zh),e(zh,Cle),e(Cle,Spo),e(zh,Rpo),e(zh,mN),e(mN,Ppo),e(zh,Bpo),e(Y,Ipo),e(Y,Wh),e(Wh,wle),e(wle,Npo),e(Wh,qpo),e(Wh,gN),e(gN,jpo),e(Wh,Dpo),e(Y,Gpo),e(Y,Qh),e(Qh,Ale),e(Ale,Opo),e(Qh,Vpo),e(Qh,hN),e(hN,Xpo),e(Qh,zpo),e(Y,Wpo),e(Y,Hh),e(Hh,Lle),e(Lle,Qpo),e(Hh,Hpo),e(Hh,pN),e(pN,Upo),e(Hh,Jpo),e(Y,Ypo),e(Y,Uh),e(Uh,yle),e(yle,Kpo),e(Uh,Zpo),e(Uh,uN),e(uN,euo),e(Uh,ouo),e(Y,ruo),e(Y,Jh),e(Jh,xle),e(xle,tuo),e(Jh,auo),e(Jh,_N),e(_N,nuo),e(Jh,suo),e(Y,luo),e(Y,Yh),e(Yh,$le),e($le,iuo),e(Yh,duo),e(Yh,bN),e(bN,cuo),e(Yh,fuo),e(Y,muo),e(Y,Kh),e(Kh,kle),e(kle,guo),e(Kh,huo),e(Kh,vN),e(vN,puo),e(Kh,uuo),e(Y,_uo),e(Y,Zh),e(Zh,Sle),e(Sle,buo),e(Zh,vuo),e(Zh,FN),e(FN,Fuo),e(Zh,Tuo),e(Y,Muo),e(Y,ep),e(ep,Rle),e(Rle,Euo),e(ep,Cuo),e(ep,TN),e(TN,wuo),e(ep,Auo),e(Y,Luo),e(Y,op),e(op,Ple),e(Ple,yuo),e(op,xuo),e(op,MN),e(MN,$uo),e(op,kuo),e(Y,Suo),e(Y,rp),e(rp,Ble),e(Ble,Ruo),e(rp,Puo),e(rp,EN),e(EN,Buo),e(rp,Iuo),e(He,Nuo),M(tp,He,null),e(He,quo),M(ap,He,null),e(Lo,juo),e(Lo,np),M(qL,np,null),e(np,Duo),e(np,Ile),e(Ile,Guo),b(f,dGe,_),b(f,Ri,_),e(Ri,sp),e(sp,Nle),M(jL,Nle,null),e(Ri,Ouo),e(Ri,qle),e(qle,Vuo),b(f,cGe,_),b(f,yo,_),M(DL,yo,null),e(yo,Xuo),e(yo,GL),e(GL,zuo),e(GL,CN),e(CN,Wuo),e(GL,Quo),e(yo,Huo),e(yo,OL),e(OL,Uuo),e(OL,jle),e(jle,Juo),e(OL,Yuo),e(yo,Kuo),e(yo,Ue),M(VL,Ue,null),e(Ue,Zuo),e(Ue,Dle),e(Dle,e_o),e(Ue,o_o),e(Ue,Pi),e(Pi,r_o),e(Pi,Gle),e(Gle,t_o),e(Pi,a_o),e(Pi,Ole),e(Ole,n_o),e(Pi,s_o),e(Ue,l_o),e(Ue,he),e(he,lp),e(lp,Vle),e(Vle,i_o),e(lp,d_o),e(lp,wN),e(wN,c_o),e(lp,f_o),e(he,m_o),e(he,ip),e(ip,Xle),e(Xle,g_o),e(ip,h_o),e(ip,zle),e(zle,p_o),e(ip,u_o),e(he,__o),e(he,dp),e(dp,Wle),e(Wle,b_o),e(dp,v_o),e(dp,AN),e(AN,F_o),e(dp,T_o),e(he,M_o),e(he,cp),e(cp,Qle),e(Qle,E_o),e(cp,C_o),e(cp,LN),e(LN,w_o),e(cp,A_o),e(he,L_o),e(he,fp),e(fp,Hle),e(Hle,y_o),e(fp,x_o),e(fp,yN),e(yN,$_o),e(fp,k_o),e(he,S_o),e(he,mp),e(mp,Ule),e(Ule,R_o),e(mp,P_o),e(mp,xN),e(xN,B_o),e(mp,I_o),e(he,N_o),e(he,gp),e(gp,Jle),e(Jle,q_o),e(gp,j_o),e(gp,$N),e($N,D_o),e(gp,G_o),e(he,O_o),e(he,hp),e(hp,Yle),e(Yle,V_o),e(hp,X_o),e(hp,kN),e(kN,z_o),e(hp,W_o),e(he,Q_o),e(he,pp),e(pp,Kle),e(Kle,H_o),e(pp,U_o),e(pp,SN),e(SN,J_o),e(pp,Y_o),e(he,K_o),e(he,up),e(up,Zle),e(Zle,Z_o),e(up,e2o),e(up,RN),e(RN,o2o),e(up,r2o),e(he,t2o),e(he,_p),e(_p,eie),e(eie,a2o),e(_p,n2o),e(_p,PN),e(PN,s2o),e(_p,l2o),e(he,i2o),e(he,bp),e(bp,oie),e(oie,d2o),e(bp,c2o),e(bp,BN),e(BN,f2o),e(bp,m2o),e(he,g2o),e(he,vp),e(vp,rie),e(rie,h2o),e(vp,p2o),e(vp,IN),e(IN,u2o),e(vp,_2o),e(he,b2o),e(he,Fp),e(Fp,tie),e(tie,v2o),e(Fp,F2o),e(Fp,NN),e(NN,T2o),e(Fp,M2o),e(he,E2o),e(he,Tp),e(Tp,aie),e(aie,C2o),e(Tp,w2o),e(Tp,qN),e(qN,A2o),e(Tp,L2o),e(he,y2o),e(he,Mp),e(Mp,nie),e(nie,x2o),e(Mp,$2o),e(Mp,jN),e(jN,k2o),e(Mp,S2o),e(he,R2o),e(he,Ep),e(Ep,sie),e(sie,P2o),e(Ep,B2o),e(Ep,DN),e(DN,I2o),e(Ep,N2o),e(Ue,q2o),M(Cp,Ue,null),e(Ue,j2o),M(wp,Ue,null),e(yo,D2o),e(yo,Ap),M(XL,Ap,null),e(Ap,G2o),e(Ap,lie),e(lie,O2o),b(f,fGe,_),b(f,Bi,_),e(Bi,Lp),e(Lp,iie),M(zL,iie,null),e(Bi,V2o),e(Bi,die),e(die,X2o),b(f,mGe,_),b(f,xo,_),M(WL,xo,null),e(xo,z2o),e(xo,Ii),e(Ii,W2o),e(Ii,GN),e(GN,Q2o),e(Ii,H2o),e(Ii,ON),e(ON,U2o),e(Ii,J2o),e(xo,Y2o),e(xo,QL),e(QL,K2o),e(QL,cie),e(cie,Z2o),e(QL,e1o),e(xo,o1o),e(xo,st),M(HL,st,null),e(st,r1o),e(st,fie),e(fie,t1o),e(st,a1o),e(st,Ni),e(Ni,n1o),e(Ni,mie),e(mie,s1o),e(Ni,l1o),e(Ni,VN),e(VN,i1o),e(Ni,d1o),e(st,c1o),M(yp,st,null),e(xo,f1o),e(xo,Je),M(UL,Je,null),e(Je,m1o),e(Je,gie),e(gie,g1o),e(Je,h1o),e(Je,Ra),e(Ra,p1o),e(Ra,hie),e(hie,u1o),e(Ra,_1o),e(Ra,pie),e(pie,b1o),e(Ra,v1o),e(Ra,uie),e(uie,F1o),e(Ra,T1o),e(Je,M1o),e(Je,x),e(x,xp),e(xp,_ie),e(_ie,E1o),e(xp,C1o),e(xp,XN),e(XN,w1o),e(xp,A1o),e(x,L1o),e(x,$p),e($p,bie),e(bie,y1o),e($p,x1o),e($p,zN),e(zN,$1o),e($p,k1o),e(x,S1o),e(x,kp),e(kp,vie),e(vie,R1o),e(kp,P1o),e(kp,WN),e(WN,B1o),e(kp,I1o),e(x,N1o),e(x,Sp),e(Sp,Fie),e(Fie,q1o),e(Sp,j1o),e(Sp,QN),e(QN,D1o),e(Sp,G1o),e(x,O1o),e(x,Rp),e(Rp,Tie),e(Tie,V1o),e(Rp,X1o),e(Rp,HN),e(HN,z1o),e(Rp,W1o),e(x,Q1o),e(x,Pp),e(Pp,Mie),e(Mie,H1o),e(Pp,U1o),e(Pp,UN),e(UN,J1o),e(Pp,Y1o),e(x,K1o),e(x,Bp),e(Bp,Eie),e(Eie,Z1o),e(Bp,e7o),e(Bp,JN),e(JN,o7o),e(Bp,r7o),e(x,t7o),e(x,Ip),e(Ip,Cie),e(Cie,a7o),e(Ip,n7o),e(Ip,YN),e(YN,s7o),e(Ip,l7o),e(x,i7o),e(x,Np),e(Np,wie),e(wie,d7o),e(Np,c7o),e(Np,KN),e(KN,f7o),e(Np,m7o),e(x,g7o),e(x,qp),e(qp,Aie),e(Aie,h7o),e(qp,p7o),e(qp,ZN),e(ZN,u7o),e(qp,_7o),e(x,b7o),e(x,jp),e(jp,Lie),e(Lie,v7o),e(jp,F7o),e(jp,eq),e(eq,T7o),e(jp,M7o),e(x,E7o),e(x,Dp),e(Dp,yie),e(yie,C7o),e(Dp,w7o),e(Dp,oq),e(oq,A7o),e(Dp,L7o),e(x,y7o),e(x,Gp),e(Gp,xie),e(xie,x7o),e(Gp,$7o),e(Gp,rq),e(rq,k7o),e(Gp,S7o),e(x,R7o),e(x,Op),e(Op,$ie),e($ie,P7o),e(Op,B7o),e(Op,tq),e(tq,I7o),e(Op,N7o),e(x,q7o),e(x,Vp),e(Vp,kie),e(kie,j7o),e(Vp,D7o),e(Vp,aq),e(aq,G7o),e(Vp,O7o),e(x,V7o),e(x,Xp),e(Xp,Sie),e(Sie,X7o),e(Xp,z7o),e(Xp,nq),e(nq,W7o),e(Xp,Q7o),e(x,H7o),e(x,zp),e(zp,Rie),e(Rie,U7o),e(zp,J7o),e(zp,sq),e(sq,Y7o),e(zp,K7o),e(x,Z7o),e(x,Wp),e(Wp,Pie),e(Pie,ebo),e(Wp,obo),e(Wp,lq),e(lq,rbo),e(Wp,tbo),e(x,abo),e(x,Qp),e(Qp,Bie),e(Bie,nbo),e(Qp,sbo),e(Qp,iq),e(iq,lbo),e(Qp,ibo),e(x,dbo),e(x,Hp),e(Hp,Iie),e(Iie,cbo),e(Hp,fbo),e(Hp,dq),e(dq,mbo),e(Hp,gbo),e(x,hbo),e(x,Up),e(Up,Nie),e(Nie,pbo),e(Up,ubo),e(Up,cq),e(cq,_bo),e(Up,bbo),e(x,vbo),e(x,Jp),e(Jp,qie),e(qie,Fbo),e(Jp,Tbo),e(Jp,fq),e(fq,Mbo),e(Jp,Ebo),e(x,Cbo),e(x,Yp),e(Yp,jie),e(jie,wbo),e(Yp,Abo),e(Yp,mq),e(mq,Lbo),e(Yp,ybo),e(x,xbo),e(x,Kp),e(Kp,Die),e(Die,$bo),e(Kp,kbo),e(Kp,gq),e(gq,Sbo),e(Kp,Rbo),e(x,Pbo),e(x,Zp),e(Zp,Gie),e(Gie,Bbo),e(Zp,Ibo),e(Zp,hq),e(hq,Nbo),e(Zp,qbo),e(x,jbo),e(x,eu),e(eu,Oie),e(Oie,Dbo),e(eu,Gbo),e(eu,pq),e(pq,Obo),e(eu,Vbo),e(x,Xbo),e(x,ou),e(ou,Vie),e(Vie,zbo),e(ou,Wbo),e(ou,uq),e(uq,Qbo),e(ou,Hbo),e(x,Ubo),e(x,ru),e(ru,Xie),e(Xie,Jbo),e(ru,Ybo),e(ru,_q),e(_q,Kbo),e(ru,Zbo),e(x,e4o),e(x,tu),e(tu,zie),e(zie,o4o),e(tu,r4o),e(tu,bq),e(bq,t4o),e(tu,a4o),e(x,n4o),e(x,au),e(au,Wie),e(Wie,s4o),e(au,l4o),e(au,vq),e(vq,i4o),e(au,d4o),e(x,c4o),e(x,nu),e(nu,Qie),e(Qie,f4o),e(nu,m4o),e(nu,Fq),e(Fq,g4o),e(nu,h4o),e(x,p4o),e(x,su),e(su,Hie),e(Hie,u4o),e(su,_4o),e(su,Tq),e(Tq,b4o),e(su,v4o),e(x,F4o),e(x,lu),e(lu,Uie),e(Uie,T4o),e(lu,M4o),e(lu,Mq),e(Mq,E4o),e(lu,C4o),e(x,w4o),e(x,Gs),e(Gs,Jie),e(Jie,A4o),e(Gs,L4o),e(Gs,Eq),e(Eq,y4o),e(Gs,x4o),e(Gs,Cq),e(Cq,$4o),e(Gs,k4o),e(x,S4o),e(x,iu),e(iu,Yie),e(Yie,R4o),e(iu,P4o),e(iu,wq),e(wq,B4o),e(iu,I4o),e(x,N4o),e(x,du),e(du,Kie),e(Kie,q4o),e(du,j4o),e(du,Aq),e(Aq,D4o),e(du,G4o),e(x,O4o),e(x,cu),e(cu,Zie),e(Zie,V4o),e(cu,X4o),e(cu,Lq),e(Lq,z4o),e(cu,W4o),e(x,Q4o),e(x,fu),e(fu,ede),e(ede,H4o),e(fu,U4o),e(fu,yq),e(yq,J4o),e(fu,Y4o),e(x,K4o),e(x,mu),e(mu,ode),e(ode,Z4o),e(mu,evo),e(mu,xq),e(xq,ovo),e(mu,rvo),e(x,tvo),e(x,gu),e(gu,rde),e(rde,avo),e(gu,nvo),e(gu,$q),e($q,svo),e(gu,lvo),e(x,ivo),e(x,hu),e(hu,tde),e(tde,dvo),e(hu,cvo),e(hu,kq),e(kq,fvo),e(hu,mvo),e(x,gvo),e(x,pu),e(pu,ade),e(ade,hvo),e(pu,pvo),e(pu,Sq),e(Sq,uvo),e(pu,_vo),e(x,bvo),e(x,uu),e(uu,nde),e(nde,vvo),e(uu,Fvo),e(uu,Rq),e(Rq,Tvo),e(uu,Mvo),e(x,Evo),e(x,_u),e(_u,sde),e(sde,Cvo),e(_u,wvo),e(_u,Pq),e(Pq,Avo),e(_u,Lvo),e(x,yvo),e(x,bu),e(bu,lde),e(lde,xvo),e(bu,$vo),e(bu,Bq),e(Bq,kvo),e(bu,Svo),e(x,Rvo),e(x,vu),e(vu,ide),e(ide,Pvo),e(vu,Bvo),e(vu,Iq),e(Iq,Ivo),e(vu,Nvo),e(x,qvo),e(x,Fu),e(Fu,dde),e(dde,jvo),e(Fu,Dvo),e(Fu,Nq),e(Nq,Gvo),e(Fu,Ovo),e(x,Vvo),e(x,Tu),e(Tu,cde),e(cde,Xvo),e(Tu,zvo),e(Tu,qq),e(qq,Wvo),e(Tu,Qvo),e(x,Hvo),e(x,Mu),e(Mu,fde),e(fde,Uvo),e(Mu,Jvo),e(Mu,jq),e(jq,Yvo),e(Mu,Kvo),e(x,Zvo),e(x,Eu),e(Eu,mde),e(mde,eFo),e(Eu,oFo),e(Eu,Dq),e(Dq,rFo),e(Eu,tFo),e(x,aFo),e(x,Cu),e(Cu,gde),e(gde,nFo),e(Cu,sFo),e(Cu,Gq),e(Gq,lFo),e(Cu,iFo),e(x,dFo),e(x,wu),e(wu,hde),e(hde,cFo),e(wu,fFo),e(wu,Oq),e(Oq,mFo),e(wu,gFo),e(x,hFo),e(x,Au),e(Au,pde),e(pde,pFo),e(Au,uFo),e(Au,Vq),e(Vq,_Fo),e(Au,bFo),e(x,vFo),e(x,Lu),e(Lu,ude),e(ude,FFo),e(Lu,TFo),e(Lu,Xq),e(Xq,MFo),e(Lu,EFo),e(x,CFo),e(x,yu),e(yu,_de),e(_de,wFo),e(yu,AFo),e(yu,zq),e(zq,LFo),e(yu,yFo),e(x,xFo),e(x,xu),e(xu,bde),e(bde,$Fo),e(xu,kFo),e(xu,Wq),e(Wq,SFo),e(xu,RFo),e(x,PFo),e(x,$u),e($u,vde),e(vde,BFo),e($u,IFo),e($u,Qq),e(Qq,NFo),e($u,qFo),e(x,jFo),e(x,ku),e(ku,Fde),e(Fde,DFo),e(ku,GFo),e(ku,Hq),e(Hq,OFo),e(ku,VFo),e(x,XFo),e(x,Su),e(Su,Tde),e(Tde,zFo),e(Su,WFo),e(Su,Uq),e(Uq,QFo),e(Su,HFo),e(x,UFo),e(x,Ru),e(Ru,Mde),e(Mde,JFo),e(Ru,YFo),e(Ru,Jq),e(Jq,KFo),e(Ru,ZFo),e(x,eTo),e(x,Pu),e(Pu,Ede),e(Ede,oTo),e(Pu,rTo),e(Pu,Yq),e(Yq,tTo),e(Pu,aTo),e(x,nTo),e(x,Bu),e(Bu,Cde),e(Cde,sTo),e(Bu,lTo),e(Bu,Kq),e(Kq,iTo),e(Bu,dTo),e(x,cTo),e(x,Iu),e(Iu,wde),e(wde,fTo),e(Iu,mTo),e(Iu,Zq),e(Zq,gTo),e(Iu,hTo),e(x,pTo),e(x,Nu),e(Nu,Ade),e(Ade,uTo),e(Nu,_To),e(Nu,ej),e(ej,bTo),e(Nu,vTo),e(x,FTo),e(x,qu),e(qu,Lde),e(Lde,TTo),e(qu,MTo),e(qu,oj),e(oj,ETo),e(qu,CTo),e(x,wTo),e(x,ju),e(ju,yde),e(yde,ATo),e(ju,LTo),e(ju,rj),e(rj,yTo),e(ju,xTo),e(x,$To),e(x,Du),e(Du,xde),e(xde,kTo),e(Du,STo),e(Du,tj),e(tj,RTo),e(Du,PTo),e(x,BTo),e(x,Gu),e(Gu,$de),e($de,ITo),e(Gu,NTo),e(Gu,aj),e(aj,qTo),e(Gu,jTo),e(x,DTo),e(x,Ou),e(Ou,kde),e(kde,GTo),e(Ou,OTo),e(Ou,nj),e(nj,VTo),e(Ou,XTo),e(x,zTo),e(x,Vu),e(Vu,Sde),e(Sde,WTo),e(Vu,QTo),e(Vu,sj),e(sj,HTo),e(Vu,UTo),e(x,JTo),e(x,Xu),e(Xu,Rde),e(Rde,YTo),e(Xu,KTo),e(Xu,lj),e(lj,ZTo),e(Xu,eMo),e(x,oMo),e(x,zu),e(zu,Pde),e(Pde,rMo),e(zu,tMo),e(zu,ij),e(ij,aMo),e(zu,nMo),e(x,sMo),e(x,Wu),e(Wu,Bde),e(Bde,lMo),e(Wu,iMo),e(Wu,dj),e(dj,dMo),e(Wu,cMo),e(x,fMo),e(x,Qu),e(Qu,Ide),e(Ide,mMo),e(Qu,gMo),e(Qu,cj),e(cj,hMo),e(Qu,pMo),e(x,uMo),e(x,Hu),e(Hu,Nde),e(Nde,_Mo),e(Hu,bMo),e(Hu,fj),e(fj,vMo),e(Hu,FMo),e(x,TMo),e(x,Uu),e(Uu,qde),e(qde,MMo),e(Uu,EMo),e(Uu,mj),e(mj,CMo),e(Uu,wMo),e(x,AMo),e(x,Ju),e(Ju,jde),e(jde,LMo),e(Ju,yMo),e(Ju,gj),e(gj,xMo),e(Ju,$Mo),e(x,kMo),e(x,Yu),e(Yu,Dde),e(Dde,SMo),e(Yu,RMo),e(Yu,hj),e(hj,PMo),e(Yu,BMo),e(x,IMo),e(x,Ku),e(Ku,Gde),e(Gde,NMo),e(Ku,qMo),e(Ku,pj),e(pj,jMo),e(Ku,DMo),e(x,GMo),e(x,Zu),e(Zu,Ode),e(Ode,OMo),e(Zu,VMo),e(Zu,uj),e(uj,XMo),e(Zu,zMo),e(x,WMo),e(x,e_),e(e_,Vde),e(Vde,QMo),e(e_,HMo),e(e_,_j),e(_j,UMo),e(e_,JMo),e(x,YMo),e(x,o_),e(o_,Xde),e(Xde,KMo),e(o_,ZMo),e(o_,bj),e(bj,eEo),e(o_,oEo),e(x,rEo),e(x,r_),e(r_,zde),e(zde,tEo),e(r_,aEo),e(r_,vj),e(vj,nEo),e(r_,sEo),e(x,lEo),e(x,t_),e(t_,Wde),e(Wde,iEo),e(t_,dEo),e(t_,Fj),e(Fj,cEo),e(t_,fEo),e(x,mEo),e(x,a_),e(a_,Qde),e(Qde,gEo),e(a_,hEo),e(a_,Tj),e(Tj,pEo),e(a_,uEo),e(x,_Eo),e(x,n_),e(n_,Hde),e(Hde,bEo),e(n_,vEo),e(n_,Mj),e(Mj,FEo),e(n_,TEo),e(x,MEo),e(x,s_),e(s_,Ude),e(Ude,EEo),e(s_,CEo),e(s_,Ej),e(Ej,wEo),e(s_,AEo),e(x,LEo),e(x,l_),e(l_,Jde),e(Jde,yEo),e(l_,xEo),e(l_,Cj),e(Cj,$Eo),e(l_,kEo),e(x,SEo),e(x,i_),e(i_,Yde),e(Yde,REo),e(i_,PEo),e(i_,wj),e(wj,BEo),e(i_,IEo),e(x,NEo),e(x,d_),e(d_,Kde),e(Kde,qEo),e(d_,jEo),e(d_,Aj),e(Aj,DEo),e(d_,GEo),e(x,OEo),e(x,c_),e(c_,Zde),e(Zde,VEo),e(c_,XEo),e(c_,Lj),e(Lj,zEo),e(c_,WEo),e(x,QEo),e(x,f_),e(f_,ece),e(ece,HEo),e(f_,UEo),e(f_,yj),e(yj,JEo),e(f_,YEo),e(x,KEo),e(x,m_),e(m_,oce),e(oce,ZEo),e(m_,eCo),e(m_,xj),e(xj,oCo),e(m_,rCo),e(x,tCo),e(x,g_),e(g_,rce),e(rce,aCo),e(g_,nCo),e(g_,$j),e($j,sCo),e(g_,lCo),e(x,iCo),e(x,h_),e(h_,tce),e(tce,dCo),e(h_,cCo),e(h_,kj),e(kj,fCo),e(h_,mCo),e(x,gCo),e(x,p_),e(p_,ace),e(ace,hCo),e(p_,pCo),e(p_,Sj),e(Sj,uCo),e(p_,_Co),e(x,bCo),e(x,u_),e(u_,nce),e(nce,vCo),e(u_,FCo),e(u_,Rj),e(Rj,TCo),e(u_,MCo),e(x,ECo),e(x,__),e(__,sce),e(sce,CCo),e(__,wCo),e(__,Pj),e(Pj,ACo),e(__,LCo),e(x,yCo),e(x,b_),e(b_,lce),e(lce,xCo),e(b_,$Co),e(b_,Bj),e(Bj,kCo),e(b_,SCo),e(x,RCo),e(x,v_),e(v_,ice),e(ice,PCo),e(v_,BCo),e(v_,Ij),e(Ij,ICo),e(v_,NCo),e(x,qCo),e(x,F_),e(F_,dce),e(dce,jCo),e(F_,DCo),e(F_,Nj),e(Nj,GCo),e(F_,OCo),e(x,VCo),e(x,T_),e(T_,cce),e(cce,XCo),e(T_,zCo),e(T_,qj),e(qj,WCo),e(T_,QCo),e(x,HCo),e(x,M_),e(M_,fce),e(fce,UCo),e(M_,JCo),e(M_,jj),e(jj,YCo),e(M_,KCo),e(x,ZCo),e(x,E_),e(E_,mce),e(mce,e5o),e(E_,o5o),e(E_,Dj),e(Dj,r5o),e(E_,t5o),e(x,a5o),e(x,C_),e(C_,gce),e(gce,n5o),e(C_,s5o),e(C_,Gj),e(Gj,l5o),e(C_,i5o),e(x,d5o),e(x,w_),e(w_,hce),e(hce,c5o),e(w_,f5o),e(w_,Oj),e(Oj,m5o),e(w_,g5o),e(Je,h5o),e(Je,A_),e(A_,p5o),e(A_,pce),e(pce,u5o),e(A_,_5o),e(A_,uce),e(uce,b5o),e(Je,v5o),M(L_,Je,null),b(f,gGe,_),b(f,qi,_),e(qi,y_),e(y_,_ce),M(JL,_ce,null),e(qi,F5o),e(qi,bce),e(bce,T5o),b(f,hGe,_),b(f,$o,_),M(YL,$o,null),e($o,M5o),e($o,ji),e(ji,E5o),e(ji,Vj),e(Vj,C5o),e(ji,w5o),e(ji,Xj),e(Xj,A5o),e(ji,L5o),e($o,y5o),e($o,KL),e(KL,x5o),e(KL,vce),e(vce,$5o),e(KL,k5o),e($o,S5o),e($o,lt),M(ZL,lt,null),e(lt,R5o),e(lt,Fce),e(Fce,P5o),e(lt,B5o),e(lt,Di),e(Di,I5o),e(Di,Tce),e(Tce,N5o),e(Di,q5o),e(Di,zj),e(zj,j5o),e(Di,D5o),e(lt,G5o),M(x_,lt,null),e($o,O5o),e($o,Ye),M(ey,Ye,null),e(Ye,V5o),e(Ye,Mce),e(Mce,X5o),e(Ye,z5o),e(Ye,Pa),e(Pa,W5o),e(Pa,Ece),e(Ece,Q5o),e(Pa,H5o),e(Pa,Cce),e(Cce,U5o),e(Pa,J5o),e(Pa,wce),e(wce,Y5o),e(Pa,K5o),e(Ye,Z5o),e(Ye,G),e(G,$_),e($_,Ace),e(Ace,e3o),e($_,o3o),e($_,Wj),e(Wj,r3o),e($_,t3o),e(G,a3o),e(G,k_),e(k_,Lce),e(Lce,n3o),e(k_,s3o),e(k_,Qj),e(Qj,l3o),e(k_,i3o),e(G,d3o),e(G,S_),e(S_,yce),e(yce,c3o),e(S_,f3o),e(S_,Hj),e(Hj,m3o),e(S_,g3o),e(G,h3o),e(G,R_),e(R_,xce),e(xce,p3o),e(R_,u3o),e(R_,Uj),e(Uj,_3o),e(R_,b3o),e(G,v3o),e(G,P_),e(P_,$ce),e($ce,F3o),e(P_,T3o),e(P_,Jj),e(Jj,M3o),e(P_,E3o),e(G,C3o),e(G,B_),e(B_,kce),e(kce,w3o),e(B_,A3o),e(B_,Yj),e(Yj,L3o),e(B_,y3o),e(G,x3o),e(G,I_),e(I_,Sce),e(Sce,$3o),e(I_,k3o),e(I_,Kj),e(Kj,S3o),e(I_,R3o),e(G,P3o),e(G,N_),e(N_,Rce),e(Rce,B3o),e(N_,I3o),e(N_,Zj),e(Zj,N3o),e(N_,q3o),e(G,j3o),e(G,q_),e(q_,Pce),e(Pce,D3o),e(q_,G3o),e(q_,eD),e(eD,O3o),e(q_,V3o),e(G,X3o),e(G,j_),e(j_,Bce),e(Bce,z3o),e(j_,W3o),e(j_,oD),e(oD,Q3o),e(j_,H3o),e(G,U3o),e(G,D_),e(D_,Ice),e(Ice,J3o),e(D_,Y3o),e(D_,rD),e(rD,K3o),e(D_,Z3o),e(G,e0o),e(G,G_),e(G_,Nce),e(Nce,o0o),e(G_,r0o),e(G_,tD),e(tD,t0o),e(G_,a0o),e(G,n0o),e(G,O_),e(O_,qce),e(qce,s0o),e(O_,l0o),e(O_,aD),e(aD,i0o),e(O_,d0o),e(G,c0o),e(G,V_),e(V_,jce),e(jce,f0o),e(V_,m0o),e(V_,nD),e(nD,g0o),e(V_,h0o),e(G,p0o),e(G,X_),e(X_,Dce),e(Dce,u0o),e(X_,_0o),e(X_,sD),e(sD,b0o),e(X_,v0o),e(G,F0o),e(G,z_),e(z_,Gce),e(Gce,T0o),e(z_,M0o),e(z_,lD),e(lD,E0o),e(z_,C0o),e(G,w0o),e(G,W_),e(W_,Oce),e(Oce,A0o),e(W_,L0o),e(W_,iD),e(iD,y0o),e(W_,x0o),e(G,$0o),e(G,Q_),e(Q_,Vce),e(Vce,k0o),e(Q_,S0o),e(Q_,dD),e(dD,R0o),e(Q_,P0o),e(G,B0o),e(G,H_),e(H_,Xce),e(Xce,I0o),e(H_,N0o),e(H_,cD),e(cD,q0o),e(H_,j0o),e(G,D0o),e(G,U_),e(U_,zce),e(zce,G0o),e(U_,O0o),e(U_,fD),e(fD,V0o),e(U_,X0o),e(G,z0o),e(G,J_),e(J_,Wce),e(Wce,W0o),e(J_,Q0o),e(J_,mD),e(mD,H0o),e(J_,U0o),e(G,J0o),e(G,Y_),e(Y_,Qce),e(Qce,Y0o),e(Y_,K0o),e(Y_,gD),e(gD,Z0o),e(Y_,ewo),e(G,owo),e(G,K_),e(K_,Hce),e(Hce,rwo),e(K_,two),e(K_,hD),e(hD,awo),e(K_,nwo),e(G,swo),e(G,Z_),e(Z_,Uce),e(Uce,lwo),e(Z_,iwo),e(Z_,pD),e(pD,dwo),e(Z_,cwo),e(G,fwo),e(G,e2),e(e2,Jce),e(Jce,mwo),e(e2,gwo),e(e2,uD),e(uD,hwo),e(e2,pwo),e(G,uwo),e(G,o2),e(o2,Yce),e(Yce,_wo),e(o2,bwo),e(o2,_D),e(_D,vwo),e(o2,Fwo),e(G,Two),e(G,r2),e(r2,Kce),e(Kce,Mwo),e(r2,Ewo),e(r2,bD),e(bD,Cwo),e(r2,wwo),e(G,Awo),e(G,t2),e(t2,Zce),e(Zce,Lwo),e(t2,ywo),e(t2,vD),e(vD,xwo),e(t2,$wo),e(G,kwo),e(G,a2),e(a2,efe),e(efe,Swo),e(a2,Rwo),e(a2,FD),e(FD,Pwo),e(a2,Bwo),e(G,Iwo),e(G,n2),e(n2,ofe),e(ofe,Nwo),e(n2,qwo),e(n2,TD),e(TD,jwo),e(n2,Dwo),e(G,Gwo),e(G,s2),e(s2,rfe),e(rfe,Owo),e(s2,Vwo),e(s2,MD),e(MD,Xwo),e(s2,zwo),e(G,Wwo),e(G,l2),e(l2,tfe),e(tfe,Qwo),e(l2,Hwo),e(l2,ED),e(ED,Uwo),e(l2,Jwo),e(G,Ywo),e(G,i2),e(i2,afe),e(afe,Kwo),e(i2,Zwo),e(i2,CD),e(CD,eAo),e(i2,oAo),e(G,rAo),e(G,d2),e(d2,nfe),e(nfe,tAo),e(d2,aAo),e(d2,wD),e(wD,nAo),e(d2,sAo),e(G,lAo),e(G,c2),e(c2,sfe),e(sfe,iAo),e(c2,dAo),e(c2,AD),e(AD,cAo),e(c2,fAo),e(G,mAo),e(G,f2),e(f2,lfe),e(lfe,gAo),e(f2,hAo),e(f2,LD),e(LD,pAo),e(f2,uAo),e(G,_Ao),e(G,m2),e(m2,ife),e(ife,bAo),e(m2,vAo),e(m2,yD),e(yD,FAo),e(m2,TAo),e(G,MAo),e(G,g2),e(g2,dfe),e(dfe,EAo),e(g2,CAo),e(g2,xD),e(xD,wAo),e(g2,AAo),e(G,LAo),e(G,h2),e(h2,cfe),e(cfe,yAo),e(h2,xAo),e(h2,$D),e($D,$Ao),e(h2,kAo),e(G,SAo),e(G,p2),e(p2,ffe),e(ffe,RAo),e(p2,PAo),e(p2,kD),e(kD,BAo),e(p2,IAo),e(G,NAo),e(G,u2),e(u2,mfe),e(mfe,qAo),e(u2,jAo),e(u2,SD),e(SD,DAo),e(u2,GAo),e(G,OAo),e(G,_2),e(_2,gfe),e(gfe,VAo),e(_2,XAo),e(_2,RD),e(RD,zAo),e(_2,WAo),e(G,QAo),e(G,b2),e(b2,hfe),e(hfe,HAo),e(b2,UAo),e(b2,PD),e(PD,JAo),e(b2,YAo),e(Ye,KAo),e(Ye,v2),e(v2,ZAo),e(v2,pfe),e(pfe,e6o),e(v2,o6o),e(v2,ufe),e(ufe,r6o),e(Ye,t6o),M(F2,Ye,null),b(f,pGe,_),b(f,Gi,_),e(Gi,T2),e(T2,_fe),M(oy,_fe,null),e(Gi,a6o),e(Gi,bfe),e(bfe,n6o),b(f,uGe,_),b(f,ko,_),M(ry,ko,null),e(ko,s6o),e(ko,Oi),e(Oi,l6o),e(Oi,BD),e(BD,i6o),e(Oi,d6o),e(Oi,ID),e(ID,c6o),e(Oi,f6o),e(ko,m6o),e(ko,ty),e(ty,g6o),e(ty,vfe),e(vfe,h6o),e(ty,p6o),e(ko,u6o),e(ko,it),M(ay,it,null),e(it,_6o),e(it,Ffe),e(Ffe,b6o),e(it,v6o),e(it,Vi),e(Vi,F6o),e(Vi,Tfe),e(Tfe,T6o),e(Vi,M6o),e(Vi,ND),e(ND,E6o),e(Vi,C6o),e(it,w6o),M(M2,it,null),e(ko,A6o),e(ko,Ke),M(ny,Ke,null),e(Ke,L6o),e(Ke,Mfe),e(Mfe,y6o),e(Ke,x6o),e(Ke,Ba),e(Ba,$6o),e(Ba,Efe),e(Efe,k6o),e(Ba,S6o),e(Ba,Cfe),e(Cfe,R6o),e(Ba,P6o),e(Ba,wfe),e(wfe,B6o),e(Ba,I6o),e(Ke,N6o),e(Ke,z),e(z,E2),e(E2,Afe),e(Afe,q6o),e(E2,j6o),e(E2,qD),e(qD,D6o),e(E2,G6o),e(z,O6o),e(z,C2),e(C2,Lfe),e(Lfe,V6o),e(C2,X6o),e(C2,jD),e(jD,z6o),e(C2,W6o),e(z,Q6o),e(z,w2),e(w2,yfe),e(yfe,H6o),e(w2,U6o),e(w2,DD),e(DD,J6o),e(w2,Y6o),e(z,K6o),e(z,A2),e(A2,xfe),e(xfe,Z6o),e(A2,eLo),e(A2,GD),e(GD,oLo),e(A2,rLo),e(z,tLo),e(z,L2),e(L2,$fe),e($fe,aLo),e(L2,nLo),e(L2,OD),e(OD,sLo),e(L2,lLo),e(z,iLo),e(z,y2),e(y2,kfe),e(kfe,dLo),e(y2,cLo),e(y2,VD),e(VD,fLo),e(y2,mLo),e(z,gLo),e(z,x2),e(x2,Sfe),e(Sfe,hLo),e(x2,pLo),e(x2,XD),e(XD,uLo),e(x2,_Lo),e(z,bLo),e(z,$2),e($2,Rfe),e(Rfe,vLo),e($2,FLo),e($2,zD),e(zD,TLo),e($2,MLo),e(z,ELo),e(z,k2),e(k2,Pfe),e(Pfe,CLo),e(k2,wLo),e(k2,WD),e(WD,ALo),e(k2,LLo),e(z,yLo),e(z,S2),e(S2,Bfe),e(Bfe,xLo),e(S2,$Lo),e(S2,QD),e(QD,kLo),e(S2,SLo),e(z,RLo),e(z,R2),e(R2,Ife),e(Ife,PLo),e(R2,BLo),e(R2,HD),e(HD,ILo),e(R2,NLo),e(z,qLo),e(z,P2),e(P2,Nfe),e(Nfe,jLo),e(P2,DLo),e(P2,UD),e(UD,GLo),e(P2,OLo),e(z,VLo),e(z,B2),e(B2,qfe),e(qfe,XLo),e(B2,zLo),e(B2,JD),e(JD,WLo),e(B2,QLo),e(z,HLo),e(z,I2),e(I2,jfe),e(jfe,ULo),e(I2,JLo),e(I2,YD),e(YD,YLo),e(I2,KLo),e(z,ZLo),e(z,N2),e(N2,Dfe),e(Dfe,eyo),e(N2,oyo),e(N2,KD),e(KD,ryo),e(N2,tyo),e(z,ayo),e(z,q2),e(q2,Gfe),e(Gfe,nyo),e(q2,syo),e(q2,ZD),e(ZD,lyo),e(q2,iyo),e(z,dyo),e(z,j2),e(j2,Ofe),e(Ofe,cyo),e(j2,fyo),e(j2,eG),e(eG,myo),e(j2,gyo),e(z,hyo),e(z,D2),e(D2,Vfe),e(Vfe,pyo),e(D2,uyo),e(D2,oG),e(oG,_yo),e(D2,byo),e(z,vyo),e(z,G2),e(G2,Xfe),e(Xfe,Fyo),e(G2,Tyo),e(G2,rG),e(rG,Myo),e(G2,Eyo),e(z,Cyo),e(z,O2),e(O2,zfe),e(zfe,wyo),e(O2,Ayo),e(O2,tG),e(tG,Lyo),e(O2,yyo),e(z,xyo),e(z,V2),e(V2,Wfe),e(Wfe,$yo),e(V2,kyo),e(V2,aG),e(aG,Syo),e(V2,Ryo),e(z,Pyo),e(z,X2),e(X2,Qfe),e(Qfe,Byo),e(X2,Iyo),e(X2,nG),e(nG,Nyo),e(X2,qyo),e(z,jyo),e(z,z2),e(z2,Hfe),e(Hfe,Dyo),e(z2,Gyo),e(z2,sG),e(sG,Oyo),e(z2,Vyo),e(z,Xyo),e(z,W2),e(W2,Ufe),e(Ufe,zyo),e(W2,Wyo),e(W2,lG),e(lG,Qyo),e(W2,Hyo),e(z,Uyo),e(z,Q2),e(Q2,Jfe),e(Jfe,Jyo),e(Q2,Yyo),e(Q2,iG),e(iG,Kyo),e(Q2,Zyo),e(z,e8o),e(z,H2),e(H2,Yfe),e(Yfe,o8o),e(H2,r8o),e(H2,dG),e(dG,t8o),e(H2,a8o),e(z,n8o),e(z,U2),e(U2,Kfe),e(Kfe,s8o),e(U2,l8o),e(U2,cG),e(cG,i8o),e(U2,d8o),e(z,c8o),e(z,J2),e(J2,Zfe),e(Zfe,f8o),e(J2,m8o),e(J2,fG),e(fG,g8o),e(J2,h8o),e(z,p8o),e(z,Y2),e(Y2,eme),e(eme,u8o),e(Y2,_8o),e(Y2,mG),e(mG,b8o),e(Y2,v8o),e(z,F8o),e(z,K2),e(K2,ome),e(ome,T8o),e(K2,M8o),e(K2,gG),e(gG,E8o),e(K2,C8o),e(z,w8o),e(z,Z2),e(Z2,rme),e(rme,A8o),e(Z2,L8o),e(Z2,hG),e(hG,y8o),e(Z2,x8o),e(z,$8o),e(z,e1),e(e1,tme),e(tme,k8o),e(e1,S8o),e(e1,pG),e(pG,R8o),e(e1,P8o),e(z,B8o),e(z,o1),e(o1,ame),e(ame,I8o),e(o1,N8o),e(o1,uG),e(uG,q8o),e(o1,j8o),e(z,D8o),e(z,r1),e(r1,nme),e(nme,G8o),e(r1,O8o),e(r1,_G),e(_G,V8o),e(r1,X8o),e(z,z8o),e(z,t1),e(t1,sme),e(sme,W8o),e(t1,Q8o),e(t1,bG),e(bG,H8o),e(t1,U8o),e(z,J8o),e(z,a1),e(a1,lme),e(lme,Y8o),e(a1,K8o),e(a1,vG),e(vG,Z8o),e(a1,e9o),e(z,o9o),e(z,n1),e(n1,ime),e(ime,r9o),e(n1,t9o),e(n1,FG),e(FG,a9o),e(n1,n9o),e(z,s9o),e(z,s1),e(s1,dme),e(dme,l9o),e(s1,i9o),e(s1,TG),e(TG,d9o),e(s1,c9o),e(Ke,f9o),e(Ke,l1),e(l1,m9o),e(l1,cme),e(cme,g9o),e(l1,h9o),e(l1,fme),e(fme,p9o),e(Ke,u9o),M(i1,Ke,null),b(f,_Ge,_),b(f,Xi,_),e(Xi,d1),e(d1,mme),M(sy,mme,null),e(Xi,_9o),e(Xi,gme),e(gme,b9o),b(f,bGe,_),b(f,So,_),M(ly,So,null),e(So,v9o),e(So,zi),e(zi,F9o),e(zi,MG),e(MG,T9o),e(zi,M9o),e(zi,EG),e(EG,E9o),e(zi,C9o),e(So,w9o),e(So,iy),e(iy,A9o),e(iy,hme),e(hme,L9o),e(iy,y9o),e(So,x9o),e(So,dt),M(dy,dt,null),e(dt,$9o),e(dt,pme),e(pme,k9o),e(dt,S9o),e(dt,Wi),e(Wi,R9o),e(Wi,ume),e(ume,P9o),e(Wi,B9o),e(Wi,CG),e(CG,I9o),e(Wi,N9o),e(dt,q9o),M(c1,dt,null),e(So,j9o),e(So,Ze),M(cy,Ze,null),e(Ze,D9o),e(Ze,_me),e(_me,G9o),e(Ze,O9o),e(Ze,Ia),e(Ia,V9o),e(Ia,bme),e(bme,X9o),e(Ia,z9o),e(Ia,vme),e(vme,W9o),e(Ia,Q9o),e(Ia,Fme),e(Fme,H9o),e(Ia,U9o),e(Ze,J9o),e(Ze,Q),e(Q,f1),e(f1,Tme),e(Tme,Y9o),e(f1,K9o),e(f1,wG),e(wG,Z9o),e(f1,exo),e(Q,oxo),e(Q,m1),e(m1,Mme),e(Mme,rxo),e(m1,txo),e(m1,AG),e(AG,axo),e(m1,nxo),e(Q,sxo),e(Q,g1),e(g1,Eme),e(Eme,lxo),e(g1,ixo),e(g1,LG),e(LG,dxo),e(g1,cxo),e(Q,fxo),e(Q,h1),e(h1,Cme),e(Cme,mxo),e(h1,gxo),e(h1,yG),e(yG,hxo),e(h1,pxo),e(Q,uxo),e(Q,p1),e(p1,wme),e(wme,_xo),e(p1,bxo),e(p1,xG),e(xG,vxo),e(p1,Fxo),e(Q,Txo),e(Q,u1),e(u1,Ame),e(Ame,Mxo),e(u1,Exo),e(u1,$G),e($G,Cxo),e(u1,wxo),e(Q,Axo),e(Q,_1),e(_1,Lme),e(Lme,Lxo),e(_1,yxo),e(_1,kG),e(kG,xxo),e(_1,$xo),e(Q,kxo),e(Q,b1),e(b1,yme),e(yme,Sxo),e(b1,Rxo),e(b1,SG),e(SG,Pxo),e(b1,Bxo),e(Q,Ixo),e(Q,v1),e(v1,xme),e(xme,Nxo),e(v1,qxo),e(v1,RG),e(RG,jxo),e(v1,Dxo),e(Q,Gxo),e(Q,F1),e(F1,$me),e($me,Oxo),e(F1,Vxo),e(F1,PG),e(PG,Xxo),e(F1,zxo),e(Q,Wxo),e(Q,T1),e(T1,kme),e(kme,Qxo),e(T1,Hxo),e(T1,BG),e(BG,Uxo),e(T1,Jxo),e(Q,Yxo),e(Q,M1),e(M1,Sme),e(Sme,Kxo),e(M1,Zxo),e(M1,IG),e(IG,e$o),e(M1,o$o),e(Q,r$o),e(Q,E1),e(E1,Rme),e(Rme,t$o),e(E1,a$o),e(E1,NG),e(NG,n$o),e(E1,s$o),e(Q,l$o),e(Q,C1),e(C1,Pme),e(Pme,i$o),e(C1,d$o),e(C1,qG),e(qG,c$o),e(C1,f$o),e(Q,m$o),e(Q,w1),e(w1,Bme),e(Bme,g$o),e(w1,h$o),e(w1,jG),e(jG,p$o),e(w1,u$o),e(Q,_$o),e(Q,A1),e(A1,Ime),e(Ime,b$o),e(A1,v$o),e(A1,DG),e(DG,F$o),e(A1,T$o),e(Q,M$o),e(Q,L1),e(L1,Nme),e(Nme,E$o),e(L1,C$o),e(L1,GG),e(GG,w$o),e(L1,A$o),e(Q,L$o),e(Q,y1),e(y1,qme),e(qme,y$o),e(y1,x$o),e(y1,OG),e(OG,$$o),e(y1,k$o),e(Q,S$o),e(Q,x1),e(x1,jme),e(jme,R$o),e(x1,P$o),e(x1,VG),e(VG,B$o),e(x1,I$o),e(Q,N$o),e(Q,$1),e($1,Dme),e(Dme,q$o),e($1,j$o),e($1,XG),e(XG,D$o),e($1,G$o),e(Q,O$o),e(Q,k1),e(k1,Gme),e(Gme,V$o),e(k1,X$o),e(k1,zG),e(zG,z$o),e(k1,W$o),e(Q,Q$o),e(Q,S1),e(S1,Ome),e(Ome,H$o),e(S1,U$o),e(S1,WG),e(WG,J$o),e(S1,Y$o),e(Q,K$o),e(Q,R1),e(R1,Vme),e(Vme,Z$o),e(R1,eko),e(R1,QG),e(QG,oko),e(R1,rko),e(Q,tko),e(Q,P1),e(P1,Xme),e(Xme,ako),e(P1,nko),e(P1,HG),e(HG,sko),e(P1,lko),e(Q,iko),e(Q,B1),e(B1,zme),e(zme,dko),e(B1,cko),e(B1,UG),e(UG,fko),e(B1,mko),e(Q,gko),e(Q,I1),e(I1,Wme),e(Wme,hko),e(I1,pko),e(I1,JG),e(JG,uko),e(I1,_ko),e(Q,bko),e(Q,N1),e(N1,Qme),e(Qme,vko),e(N1,Fko),e(N1,YG),e(YG,Tko),e(N1,Mko),e(Q,Eko),e(Q,q1),e(q1,Hme),e(Hme,Cko),e(q1,wko),e(q1,KG),e(KG,Ako),e(q1,Lko),e(Q,yko),e(Q,j1),e(j1,Ume),e(Ume,xko),e(j1,$ko),e(j1,ZG),e(ZG,kko),e(j1,Sko),e(Q,Rko),e(Q,D1),e(D1,Jme),e(Jme,Pko),e(D1,Bko),e(D1,eO),e(eO,Iko),e(D1,Nko),e(Q,qko),e(Q,G1),e(G1,Yme),e(Yme,jko),e(G1,Dko),e(G1,oO),e(oO,Gko),e(G1,Oko),e(Q,Vko),e(Q,O1),e(O1,Kme),e(Kme,Xko),e(O1,zko),e(O1,Zme),e(Zme,Wko),e(O1,Qko),e(Q,Hko),e(Q,V1),e(V1,ege),e(ege,Uko),e(V1,Jko),e(V1,rO),e(rO,Yko),e(V1,Kko),e(Q,Zko),e(Q,X1),e(X1,oge),e(oge,eSo),e(X1,oSo),e(X1,tO),e(tO,rSo),e(X1,tSo),e(Q,aSo),e(Q,z1),e(z1,rge),e(rge,nSo),e(z1,sSo),e(z1,aO),e(aO,lSo),e(z1,iSo),e(Q,dSo),e(Q,W1),e(W1,tge),e(tge,cSo),e(W1,fSo),e(W1,nO),e(nO,mSo),e(W1,gSo),e(Ze,hSo),e(Ze,Q1),e(Q1,pSo),e(Q1,age),e(age,uSo),e(Q1,_So),e(Q1,nge),e(nge,bSo),e(Ze,vSo),M(H1,Ze,null),b(f,vGe,_),b(f,Qi,_),e(Qi,U1),e(U1,sge),M(fy,sge,null),e(Qi,FSo),e(Qi,lge),e(lge,TSo),b(f,FGe,_),b(f,Ro,_),M(my,Ro,null),e(Ro,MSo),e(Ro,Hi),e(Hi,ESo),e(Hi,sO),e(sO,CSo),e(Hi,wSo),e(Hi,lO),e(lO,ASo),e(Hi,LSo),e(Ro,ySo),e(Ro,gy),e(gy,xSo),e(gy,ige),e(ige,$So),e(gy,kSo),e(Ro,SSo),e(Ro,ct),M(hy,ct,null),e(ct,RSo),e(ct,dge),e(dge,PSo),e(ct,BSo),e(ct,Ui),e(Ui,ISo),e(Ui,cge),e(cge,NSo),e(Ui,qSo),e(Ui,iO),e(iO,jSo),e(Ui,DSo),e(ct,GSo),M(J1,ct,null),e(Ro,OSo),e(Ro,eo),M(py,eo,null),e(eo,VSo),e(eo,fge),e(fge,XSo),e(eo,zSo),e(eo,Na),e(Na,WSo),e(Na,mge),e(mge,QSo),e(Na,HSo),e(Na,gge),e(gge,USo),e(Na,JSo),e(Na,hge),e(hge,YSo),e(Na,KSo),e(eo,ZSo),e(eo,pe),e(pe,Y1),e(Y1,pge),e(pge,eRo),e(Y1,oRo),e(Y1,dO),e(dO,rRo),e(Y1,tRo),e(pe,aRo),e(pe,K1),e(K1,uge),e(uge,nRo),e(K1,sRo),e(K1,cO),e(cO,lRo),e(K1,iRo),e(pe,dRo),e(pe,Z1),e(Z1,_ge),e(_ge,cRo),e(Z1,fRo),e(Z1,fO),e(fO,mRo),e(Z1,gRo),e(pe,hRo),e(pe,e7),e(e7,bge),e(bge,pRo),e(e7,uRo),e(e7,mO),e(mO,_Ro),e(e7,bRo),e(pe,vRo),e(pe,o7),e(o7,vge),e(vge,FRo),e(o7,TRo),e(o7,gO),e(gO,MRo),e(o7,ERo),e(pe,CRo),e(pe,r7),e(r7,Fge),e(Fge,wRo),e(r7,ARo),e(r7,hO),e(hO,LRo),e(r7,yRo),e(pe,xRo),e(pe,t7),e(t7,Tge),e(Tge,$Ro),e(t7,kRo),e(t7,pO),e(pO,SRo),e(t7,RRo),e(pe,PRo),e(pe,a7),e(a7,Mge),e(Mge,BRo),e(a7,IRo),e(a7,uO),e(uO,NRo),e(a7,qRo),e(pe,jRo),e(pe,n7),e(n7,Ege),e(Ege,DRo),e(n7,GRo),e(n7,_O),e(_O,ORo),e(n7,VRo),e(pe,XRo),e(pe,s7),e(s7,Cge),e(Cge,zRo),e(s7,WRo),e(s7,bO),e(bO,QRo),e(s7,HRo),e(pe,URo),e(pe,l7),e(l7,wge),e(wge,JRo),e(l7,YRo),e(l7,vO),e(vO,KRo),e(l7,ZRo),e(pe,ePo),e(pe,i7),e(i7,Age),e(Age,oPo),e(i7,rPo),e(i7,FO),e(FO,tPo),e(i7,aPo),e(pe,nPo),e(pe,d7),e(d7,Lge),e(Lge,sPo),e(d7,lPo),e(d7,TO),e(TO,iPo),e(d7,dPo),e(pe,cPo),e(pe,c7),e(c7,yge),e(yge,fPo),e(c7,mPo),e(c7,MO),e(MO,gPo),e(c7,hPo),e(pe,pPo),e(pe,f7),e(f7,xge),e(xge,uPo),e(f7,_Po),e(f7,EO),e(EO,bPo),e(f7,vPo),e(pe,FPo),e(pe,m7),e(m7,$ge),e($ge,TPo),e(m7,MPo),e(m7,CO),e(CO,EPo),e(m7,CPo),e(pe,wPo),e(pe,g7),e(g7,kge),e(kge,APo),e(g7,LPo),e(g7,wO),e(wO,yPo),e(g7,xPo),e(eo,$Po),e(eo,h7),e(h7,kPo),e(h7,Sge),e(Sge,SPo),e(h7,RPo),e(h7,Rge),e(Rge,PPo),e(eo,BPo),M(p7,eo,null),b(f,TGe,_),b(f,Ji,_),e(Ji,u7),e(u7,Pge),M(uy,Pge,null),e(Ji,IPo),e(Ji,Bge),e(Bge,NPo),b(f,MGe,_),b(f,Po,_),M(_y,Po,null),e(Po,qPo),e(Po,Yi),e(Yi,jPo),e(Yi,AO),e(AO,DPo),e(Yi,GPo),e(Yi,LO),e(LO,OPo),e(Yi,VPo),e(Po,XPo),e(Po,by),e(by,zPo),e(by,Ige),e(Ige,WPo),e(by,QPo),e(Po,HPo),e(Po,ft),M(vy,ft,null),e(ft,UPo),e(ft,Nge),e(Nge,JPo),e(ft,YPo),e(ft,Ki),e(Ki,KPo),e(Ki,qge),e(qge,ZPo),e(Ki,eBo),e(Ki,yO),e(yO,oBo),e(Ki,rBo),e(ft,tBo),M(_7,ft,null),e(Po,aBo),e(Po,oo),M(Fy,oo,null),e(oo,nBo),e(oo,jge),e(jge,sBo),e(oo,lBo),e(oo,qa),e(qa,iBo),e(qa,Dge),e(Dge,dBo),e(qa,cBo),e(qa,Gge),e(Gge,fBo),e(qa,mBo),e(qa,Oge),e(Oge,gBo),e(qa,hBo),e(oo,pBo),e(oo,q),e(q,b7),e(b7,Vge),e(Vge,uBo),e(b7,_Bo),e(b7,xO),e(xO,bBo),e(b7,vBo),e(q,FBo),e(q,v7),e(v7,Xge),e(Xge,TBo),e(v7,MBo),e(v7,$O),e($O,EBo),e(v7,CBo),e(q,wBo),e(q,F7),e(F7,zge),e(zge,ABo),e(F7,LBo),e(F7,kO),e(kO,yBo),e(F7,xBo),e(q,$Bo),e(q,T7),e(T7,Wge),e(Wge,kBo),e(T7,SBo),e(T7,SO),e(SO,RBo),e(T7,PBo),e(q,BBo),e(q,M7),e(M7,Qge),e(Qge,IBo),e(M7,NBo),e(M7,RO),e(RO,qBo),e(M7,jBo),e(q,DBo),e(q,E7),e(E7,Hge),e(Hge,GBo),e(E7,OBo),e(E7,PO),e(PO,VBo),e(E7,XBo),e(q,zBo),e(q,C7),e(C7,Uge),e(Uge,WBo),e(C7,QBo),e(C7,BO),e(BO,HBo),e(C7,UBo),e(q,JBo),e(q,w7),e(w7,Jge),e(Jge,YBo),e(w7,KBo),e(w7,IO),e(IO,ZBo),e(w7,eIo),e(q,oIo),e(q,A7),e(A7,Yge),e(Yge,rIo),e(A7,tIo),e(A7,NO),e(NO,aIo),e(A7,nIo),e(q,sIo),e(q,L7),e(L7,Kge),e(Kge,lIo),e(L7,iIo),e(L7,qO),e(qO,dIo),e(L7,cIo),e(q,fIo),e(q,y7),e(y7,Zge),e(Zge,mIo),e(y7,gIo),e(y7,jO),e(jO,hIo),e(y7,pIo),e(q,uIo),e(q,x7),e(x7,ehe),e(ehe,_Io),e(x7,bIo),e(x7,DO),e(DO,vIo),e(x7,FIo),e(q,TIo),e(q,$7),e($7,ohe),e(ohe,MIo),e($7,EIo),e($7,GO),e(GO,CIo),e($7,wIo),e(q,AIo),e(q,k7),e(k7,rhe),e(rhe,LIo),e(k7,yIo),e(k7,OO),e(OO,xIo),e(k7,$Io),e(q,kIo),e(q,S7),e(S7,the),e(the,SIo),e(S7,RIo),e(S7,VO),e(VO,PIo),e(S7,BIo),e(q,IIo),e(q,R7),e(R7,ahe),e(ahe,NIo),e(R7,qIo),e(R7,XO),e(XO,jIo),e(R7,DIo),e(q,GIo),e(q,P7),e(P7,nhe),e(nhe,OIo),e(P7,VIo),e(P7,zO),e(zO,XIo),e(P7,zIo),e(q,WIo),e(q,B7),e(B7,she),e(she,QIo),e(B7,HIo),e(B7,WO),e(WO,UIo),e(B7,JIo),e(q,YIo),e(q,I7),e(I7,lhe),e(lhe,KIo),e(I7,ZIo),e(I7,QO),e(QO,eNo),e(I7,oNo),e(q,rNo),e(q,N7),e(N7,ihe),e(ihe,tNo),e(N7,aNo),e(N7,HO),e(HO,nNo),e(N7,sNo),e(q,lNo),e(q,q7),e(q7,dhe),e(dhe,iNo),e(q7,dNo),e(q7,UO),e(UO,cNo),e(q7,fNo),e(q,mNo),e(q,j7),e(j7,che),e(che,gNo),e(j7,hNo),e(j7,JO),e(JO,pNo),e(j7,uNo),e(q,_No),e(q,D7),e(D7,fhe),e(fhe,bNo),e(D7,vNo),e(D7,YO),e(YO,FNo),e(D7,TNo),e(q,MNo),e(q,G7),e(G7,mhe),e(mhe,ENo),e(G7,CNo),e(G7,KO),e(KO,wNo),e(G7,ANo),e(q,LNo),e(q,O7),e(O7,ghe),e(ghe,yNo),e(O7,xNo),e(O7,ZO),e(ZO,$No),e(O7,kNo),e(q,SNo),e(q,V7),e(V7,hhe),e(hhe,RNo),e(V7,PNo),e(V7,eV),e(eV,BNo),e(V7,INo),e(q,NNo),e(q,X7),e(X7,phe),e(phe,qNo),e(X7,jNo),e(X7,oV),e(oV,DNo),e(X7,GNo),e(q,ONo),e(q,z7),e(z7,uhe),e(uhe,VNo),e(z7,XNo),e(z7,rV),e(rV,zNo),e(z7,WNo),e(q,QNo),e(q,W7),e(W7,_he),e(_he,HNo),e(W7,UNo),e(W7,tV),e(tV,JNo),e(W7,YNo),e(q,KNo),e(q,Q7),e(Q7,bhe),e(bhe,ZNo),e(Q7,eqo),e(Q7,aV),e(aV,oqo),e(Q7,rqo),e(q,tqo),e(q,H7),e(H7,vhe),e(vhe,aqo),e(H7,nqo),e(H7,nV),e(nV,sqo),e(H7,lqo),e(q,iqo),e(q,U7),e(U7,Fhe),e(Fhe,dqo),e(U7,cqo),e(U7,sV),e(sV,fqo),e(U7,mqo),e(q,gqo),e(q,J7),e(J7,The),e(The,hqo),e(J7,pqo),e(J7,lV),e(lV,uqo),e(J7,_qo),e(q,bqo),e(q,Y7),e(Y7,Mhe),e(Mhe,vqo),e(Y7,Fqo),e(Y7,iV),e(iV,Tqo),e(Y7,Mqo),e(q,Eqo),e(q,K7),e(K7,Ehe),e(Ehe,Cqo),e(K7,wqo),e(K7,dV),e(dV,Aqo),e(K7,Lqo),e(q,yqo),e(q,Z7),e(Z7,Che),e(Che,xqo),e(Z7,$qo),e(Z7,cV),e(cV,kqo),e(Z7,Sqo),e(q,Rqo),e(q,eb),e(eb,whe),e(whe,Pqo),e(eb,Bqo),e(eb,fV),e(fV,Iqo),e(eb,Nqo),e(q,qqo),e(q,ob),e(ob,Ahe),e(Ahe,jqo),e(ob,Dqo),e(ob,mV),e(mV,Gqo),e(ob,Oqo),e(q,Vqo),e(q,rb),e(rb,Lhe),e(Lhe,Xqo),e(rb,zqo),e(rb,gV),e(gV,Wqo),e(rb,Qqo),e(q,Hqo),e(q,tb),e(tb,yhe),e(yhe,Uqo),e(tb,Jqo),e(tb,hV),e(hV,Yqo),e(tb,Kqo),e(q,Zqo),e(q,ab),e(ab,xhe),e(xhe,ejo),e(ab,ojo),e(ab,pV),e(pV,rjo),e(ab,tjo),e(q,ajo),e(q,nb),e(nb,$he),e($he,njo),e(nb,sjo),e(nb,uV),e(uV,ljo),e(nb,ijo),e(q,djo),e(q,sb),e(sb,khe),e(khe,cjo),e(sb,fjo),e(sb,_V),e(_V,mjo),e(sb,gjo),e(q,hjo),e(q,lb),e(lb,She),e(She,pjo),e(lb,ujo),e(lb,bV),e(bV,_jo),e(lb,bjo),e(q,vjo),e(q,ib),e(ib,Rhe),e(Rhe,Fjo),e(ib,Tjo),e(ib,vV),e(vV,Mjo),e(ib,Ejo),e(q,Cjo),e(q,db),e(db,Phe),e(Phe,wjo),e(db,Ajo),e(db,FV),e(FV,Ljo),e(db,yjo),e(q,xjo),e(q,cb),e(cb,Bhe),e(Bhe,$jo),e(cb,kjo),e(cb,TV),e(TV,Sjo),e(cb,Rjo),e(oo,Pjo),e(oo,fb),e(fb,Bjo),e(fb,Ihe),e(Ihe,Ijo),e(fb,Njo),e(fb,Nhe),e(Nhe,qjo),e(oo,jjo),M(mb,oo,null),b(f,EGe,_),b(f,Zi,_),e(Zi,gb),e(gb,qhe),M(Ty,qhe,null),e(Zi,Djo),e(Zi,jhe),e(jhe,Gjo),b(f,CGe,_),b(f,Bo,_),M(My,Bo,null),e(Bo,Ojo),e(Bo,ed),e(ed,Vjo),e(ed,MV),e(MV,Xjo),e(ed,zjo),e(ed,EV),e(EV,Wjo),e(ed,Qjo),e(Bo,Hjo),e(Bo,Ey),e(Ey,Ujo),e(Ey,Dhe),e(Dhe,Jjo),e(Ey,Yjo),e(Bo,Kjo),e(Bo,mt),M(Cy,mt,null),e(mt,Zjo),e(mt,Ghe),e(Ghe,eDo),e(mt,oDo),e(mt,od),e(od,rDo),e(od,Ohe),e(Ohe,tDo),e(od,aDo),e(od,CV),e(CV,nDo),e(od,sDo),e(mt,lDo),M(hb,mt,null),e(Bo,iDo),e(Bo,ro),M(wy,ro,null),e(ro,dDo),e(ro,Vhe),e(Vhe,cDo),e(ro,fDo),e(ro,ja),e(ja,mDo),e(ja,Xhe),e(Xhe,gDo),e(ja,hDo),e(ja,zhe),e(zhe,pDo),e(ja,uDo),e(ja,Whe),e(Whe,_Do),e(ja,bDo),e(ro,vDo),e(ro,Z),e(Z,pb),e(pb,Qhe),e(Qhe,FDo),e(pb,TDo),e(pb,wV),e(wV,MDo),e(pb,EDo),e(Z,CDo),e(Z,ub),e(ub,Hhe),e(Hhe,wDo),e(ub,ADo),e(ub,AV),e(AV,LDo),e(ub,yDo),e(Z,xDo),e(Z,_b),e(_b,Uhe),e(Uhe,$Do),e(_b,kDo),e(_b,LV),e(LV,SDo),e(_b,RDo),e(Z,PDo),e(Z,bb),e(bb,Jhe),e(Jhe,BDo),e(bb,IDo),e(bb,yV),e(yV,NDo),e(bb,qDo),e(Z,jDo),e(Z,vb),e(vb,Yhe),e(Yhe,DDo),e(vb,GDo),e(vb,xV),e(xV,ODo),e(vb,VDo),e(Z,XDo),e(Z,Fb),e(Fb,Khe),e(Khe,zDo),e(Fb,WDo),e(Fb,$V),e($V,QDo),e(Fb,HDo),e(Z,UDo),e(Z,Tb),e(Tb,Zhe),e(Zhe,JDo),e(Tb,YDo),e(Tb,kV),e(kV,KDo),e(Tb,ZDo),e(Z,eGo),e(Z,Mb),e(Mb,epe),e(epe,oGo),e(Mb,rGo),e(Mb,SV),e(SV,tGo),e(Mb,aGo),e(Z,nGo),e(Z,Eb),e(Eb,ope),e(ope,sGo),e(Eb,lGo),e(Eb,RV),e(RV,iGo),e(Eb,dGo),e(Z,cGo),e(Z,Cb),e(Cb,rpe),e(rpe,fGo),e(Cb,mGo),e(Cb,PV),e(PV,gGo),e(Cb,hGo),e(Z,pGo),e(Z,wb),e(wb,tpe),e(tpe,uGo),e(wb,_Go),e(wb,BV),e(BV,bGo),e(wb,vGo),e(Z,FGo),e(Z,Ab),e(Ab,ape),e(ape,TGo),e(Ab,MGo),e(Ab,IV),e(IV,EGo),e(Ab,CGo),e(Z,wGo),e(Z,Lb),e(Lb,npe),e(npe,AGo),e(Lb,LGo),e(Lb,NV),e(NV,yGo),e(Lb,xGo),e(Z,$Go),e(Z,yb),e(yb,spe),e(spe,kGo),e(yb,SGo),e(yb,qV),e(qV,RGo),e(yb,PGo),e(Z,BGo),e(Z,xb),e(xb,lpe),e(lpe,IGo),e(xb,NGo),e(xb,jV),e(jV,qGo),e(xb,jGo),e(Z,DGo),e(Z,$b),e($b,ipe),e(ipe,GGo),e($b,OGo),e($b,DV),e(DV,VGo),e($b,XGo),e(Z,zGo),e(Z,kb),e(kb,dpe),e(dpe,WGo),e(kb,QGo),e(kb,GV),e(GV,HGo),e(kb,UGo),e(Z,JGo),e(Z,Sb),e(Sb,cpe),e(cpe,YGo),e(Sb,KGo),e(Sb,OV),e(OV,ZGo),e(Sb,eOo),e(Z,oOo),e(Z,Rb),e(Rb,fpe),e(fpe,rOo),e(Rb,tOo),e(Rb,VV),e(VV,aOo),e(Rb,nOo),e(Z,sOo),e(Z,Pb),e(Pb,mpe),e(mpe,lOo),e(Pb,iOo),e(Pb,XV),e(XV,dOo),e(Pb,cOo),e(Z,fOo),e(Z,Bb),e(Bb,gpe),e(gpe,mOo),e(Bb,gOo),e(Bb,zV),e(zV,hOo),e(Bb,pOo),e(Z,uOo),e(Z,Ib),e(Ib,hpe),e(hpe,_Oo),e(Ib,bOo),e(Ib,WV),e(WV,vOo),e(Ib,FOo),e(Z,TOo),e(Z,Nb),e(Nb,ppe),e(ppe,MOo),e(Nb,EOo),e(Nb,QV),e(QV,COo),e(Nb,wOo),e(Z,AOo),e(Z,qb),e(qb,upe),e(upe,LOo),e(qb,yOo),e(qb,HV),e(HV,xOo),e(qb,$Oo),e(Z,kOo),e(Z,jb),e(jb,_pe),e(_pe,SOo),e(jb,ROo),e(jb,UV),e(UV,POo),e(jb,BOo),e(Z,IOo),e(Z,Db),e(Db,bpe),e(bpe,NOo),e(Db,qOo),e(Db,JV),e(JV,jOo),e(Db,DOo),e(Z,GOo),e(Z,Gb),e(Gb,vpe),e(vpe,OOo),e(Gb,VOo),e(Gb,YV),e(YV,XOo),e(Gb,zOo),e(Z,WOo),e(Z,Ob),e(Ob,Fpe),e(Fpe,QOo),e(Ob,HOo),e(Ob,KV),e(KV,UOo),e(Ob,JOo),e(Z,YOo),e(Z,Vb),e(Vb,Tpe),e(Tpe,KOo),e(Vb,ZOo),e(Vb,ZV),e(ZV,eVo),e(Vb,oVo),e(ro,rVo),e(ro,Xb),e(Xb,tVo),e(Xb,Mpe),e(Mpe,aVo),e(Xb,nVo),e(Xb,Epe),e(Epe,sVo),e(ro,lVo),M(zb,ro,null),b(f,wGe,_),b(f,rd,_),e(rd,Wb),e(Wb,Cpe),M(Ay,Cpe,null),e(rd,iVo),e(rd,wpe),e(wpe,dVo),b(f,AGe,_),b(f,Io,_),M(Ly,Io,null),e(Io,cVo),e(Io,td),e(td,fVo),e(td,eX),e(eX,mVo),e(td,gVo),e(td,oX),e(oX,hVo),e(td,pVo),e(Io,uVo),e(Io,yy),e(yy,_Vo),e(yy,Ape),e(Ape,bVo),e(yy,vVo),e(Io,FVo),e(Io,gt),M(xy,gt,null),e(gt,TVo),e(gt,Lpe),e(Lpe,MVo),e(gt,EVo),e(gt,ad),e(ad,CVo),e(ad,ype),e(ype,wVo),e(ad,AVo),e(ad,rX),e(rX,LVo),e(ad,yVo),e(gt,xVo),M(Qb,gt,null),e(Io,$Vo),e(Io,to),M($y,to,null),e(to,kVo),e(to,xpe),e(xpe,SVo),e(to,RVo),e(to,Da),e(Da,PVo),e(Da,$pe),e($pe,BVo),e(Da,IVo),e(Da,kpe),e(kpe,NVo),e(Da,qVo),e(Da,Spe),e(Spe,jVo),e(Da,DVo),e(to,GVo),e(to,Zr),e(Zr,Hb),e(Hb,Rpe),e(Rpe,OVo),e(Hb,VVo),e(Hb,tX),e(tX,XVo),e(Hb,zVo),e(Zr,WVo),e(Zr,Ub),e(Ub,Ppe),e(Ppe,QVo),e(Ub,HVo),e(Ub,aX),e(aX,UVo),e(Ub,JVo),e(Zr,YVo),e(Zr,Jb),e(Jb,Bpe),e(Bpe,KVo),e(Jb,ZVo),e(Jb,nX),e(nX,eXo),e(Jb,oXo),e(Zr,rXo),e(Zr,Yb),e(Yb,Ipe),e(Ipe,tXo),e(Yb,aXo),e(Yb,sX),e(sX,nXo),e(Yb,sXo),e(Zr,lXo),e(Zr,Kb),e(Kb,Npe),e(Npe,iXo),e(Kb,dXo),e(Kb,lX),e(lX,cXo),e(Kb,fXo),e(to,mXo),e(to,Zb),e(Zb,gXo),e(Zb,qpe),e(qpe,hXo),e(Zb,pXo),e(Zb,jpe),e(jpe,uXo),e(to,_Xo),M(e4,to,null),b(f,LGe,_),b(f,nd,_),e(nd,o4),e(o4,Dpe),M(ky,Dpe,null),e(nd,bXo),e(nd,Gpe),e(Gpe,vXo),b(f,yGe,_),b(f,No,_),M(Sy,No,null),e(No,FXo),e(No,sd),e(sd,TXo),e(sd,iX),e(iX,MXo),e(sd,EXo),e(sd,dX),e(dX,CXo),e(sd,wXo),e(No,AXo),e(No,Ry),e(Ry,LXo),e(Ry,Ope),e(Ope,yXo),e(Ry,xXo),e(No,$Xo),e(No,ht),M(Py,ht,null),e(ht,kXo),e(ht,Vpe),e(Vpe,SXo),e(ht,RXo),e(ht,ld),e(ld,PXo),e(ld,Xpe),e(Xpe,BXo),e(ld,IXo),e(ld,cX),e(cX,NXo),e(ld,qXo),e(ht,jXo),M(r4,ht,null),e(No,DXo),e(No,ao),M(By,ao,null),e(ao,GXo),e(ao,zpe),e(zpe,OXo),e(ao,VXo),e(ao,Ga),e(Ga,XXo),e(Ga,Wpe),e(Wpe,zXo),e(Ga,WXo),e(Ga,Qpe),e(Qpe,QXo),e(Ga,HXo),e(Ga,Hpe),e(Hpe,UXo),e(Ga,JXo),e(ao,YXo),e(ao,U),e(U,t4),e(t4,Upe),e(Upe,KXo),e(t4,ZXo),e(t4,fX),e(fX,ezo),e(t4,ozo),e(U,rzo),e(U,a4),e(a4,Jpe),e(Jpe,tzo),e(a4,azo),e(a4,mX),e(mX,nzo),e(a4,szo),e(U,lzo),e(U,n4),e(n4,Ype),e(Ype,izo),e(n4,dzo),e(n4,gX),e(gX,czo),e(n4,fzo),e(U,mzo),e(U,s4),e(s4,Kpe),e(Kpe,gzo),e(s4,hzo),e(s4,hX),e(hX,pzo),e(s4,uzo),e(U,_zo),e(U,l4),e(l4,Zpe),e(Zpe,bzo),e(l4,vzo),e(l4,pX),e(pX,Fzo),e(l4,Tzo),e(U,Mzo),e(U,i4),e(i4,eue),e(eue,Ezo),e(i4,Czo),e(i4,uX),e(uX,wzo),e(i4,Azo),e(U,Lzo),e(U,d4),e(d4,oue),e(oue,yzo),e(d4,xzo),e(d4,_X),e(_X,$zo),e(d4,kzo),e(U,Szo),e(U,c4),e(c4,rue),e(rue,Rzo),e(c4,Pzo),e(c4,bX),e(bX,Bzo),e(c4,Izo),e(U,Nzo),e(U,f4),e(f4,tue),e(tue,qzo),e(f4,jzo),e(f4,vX),e(vX,Dzo),e(f4,Gzo),e(U,Ozo),e(U,m4),e(m4,aue),e(aue,Vzo),e(m4,Xzo),e(m4,FX),e(FX,zzo),e(m4,Wzo),e(U,Qzo),e(U,g4),e(g4,nue),e(nue,Hzo),e(g4,Uzo),e(g4,TX),e(TX,Jzo),e(g4,Yzo),e(U,Kzo),e(U,h4),e(h4,sue),e(sue,Zzo),e(h4,eWo),e(h4,MX),e(MX,oWo),e(h4,rWo),e(U,tWo),e(U,p4),e(p4,lue),e(lue,aWo),e(p4,nWo),e(p4,EX),e(EX,sWo),e(p4,lWo),e(U,iWo),e(U,u4),e(u4,iue),e(iue,dWo),e(u4,cWo),e(u4,CX),e(CX,fWo),e(u4,mWo),e(U,gWo),e(U,_4),e(_4,due),e(due,hWo),e(_4,pWo),e(_4,wX),e(wX,uWo),e(_4,_Wo),e(U,bWo),e(U,b4),e(b4,cue),e(cue,vWo),e(b4,FWo),e(b4,AX),e(AX,TWo),e(b4,MWo),e(U,EWo),e(U,v4),e(v4,fue),e(fue,CWo),e(v4,wWo),e(v4,LX),e(LX,AWo),e(v4,LWo),e(U,yWo),e(U,F4),e(F4,mue),e(mue,xWo),e(F4,$Wo),e(F4,yX),e(yX,kWo),e(F4,SWo),e(U,RWo),e(U,T4),e(T4,gue),e(gue,PWo),e(T4,BWo),e(T4,xX),e(xX,IWo),e(T4,NWo),e(U,qWo),e(U,M4),e(M4,hue),e(hue,jWo),e(M4,DWo),e(M4,$X),e($X,GWo),e(M4,OWo),e(U,VWo),e(U,E4),e(E4,pue),e(pue,XWo),e(E4,zWo),e(E4,kX),e(kX,WWo),e(E4,QWo),e(U,HWo),e(U,C4),e(C4,uue),e(uue,UWo),e(C4,JWo),e(C4,SX),e(SX,YWo),e(C4,KWo),e(U,ZWo),e(U,w4),e(w4,_ue),e(_ue,eQo),e(w4,oQo),e(w4,RX),e(RX,rQo),e(w4,tQo),e(U,aQo),e(U,A4),e(A4,bue),e(bue,nQo),e(A4,sQo),e(A4,PX),e(PX,lQo),e(A4,iQo),e(U,dQo),e(U,L4),e(L4,vue),e(vue,cQo),e(L4,fQo),e(L4,BX),e(BX,mQo),e(L4,gQo),e(U,hQo),e(U,y4),e(y4,Fue),e(Fue,pQo),e(y4,uQo),e(y4,IX),e(IX,_Qo),e(y4,bQo),e(U,vQo),e(U,x4),e(x4,Tue),e(Tue,FQo),e(x4,TQo),e(x4,NX),e(NX,MQo),e(x4,EQo),e(U,CQo),e(U,$4),e($4,Mue),e(Mue,wQo),e($4,AQo),e($4,qX),e(qX,LQo),e($4,yQo),e(U,xQo),e(U,k4),e(k4,Eue),e(Eue,$Qo),e(k4,kQo),e(k4,jX),e(jX,SQo),e(k4,RQo),e(U,PQo),e(U,S4),e(S4,Cue),e(Cue,BQo),e(S4,IQo),e(S4,DX),e(DX,NQo),e(S4,qQo),e(U,jQo),e(U,R4),e(R4,wue),e(wue,DQo),e(R4,GQo),e(R4,GX),e(GX,OQo),e(R4,VQo),e(U,XQo),e(U,P4),e(P4,Aue),e(Aue,zQo),e(P4,WQo),e(P4,OX),e(OX,QQo),e(P4,HQo),e(U,UQo),e(U,B4),e(B4,Lue),e(Lue,JQo),e(B4,YQo),e(B4,VX),e(VX,KQo),e(B4,ZQo),e(U,eHo),e(U,I4),e(I4,yue),e(yue,oHo),e(I4,rHo),e(I4,XX),e(XX,tHo),e(I4,aHo),e(ao,nHo),e(ao,N4),e(N4,sHo),e(N4,xue),e(xue,lHo),e(N4,iHo),e(N4,$ue),e($ue,dHo),e(ao,cHo),M(q4,ao,null),b(f,xGe,_),b(f,id,_),e(id,j4),e(j4,kue),M(Iy,kue,null),e(id,fHo),e(id,Sue),e(Sue,mHo),b(f,$Ge,_),b(f,qo,_),M(Ny,qo,null),e(qo,gHo),e(qo,dd),e(dd,hHo),e(dd,zX),e(zX,pHo),e(dd,uHo),e(dd,WX),e(WX,_Ho),e(dd,bHo),e(qo,vHo),e(qo,qy),e(qy,FHo),e(qy,Rue),e(Rue,THo),e(qy,MHo),e(qo,EHo),e(qo,pt),M(jy,pt,null),e(pt,CHo),e(pt,Pue),e(Pue,wHo),e(pt,AHo),e(pt,cd),e(cd,LHo),e(cd,Bue),e(Bue,yHo),e(cd,xHo),e(cd,QX),e(QX,$Ho),e(cd,kHo),e(pt,SHo),M(D4,pt,null),e(qo,RHo),e(qo,no),M(Dy,no,null),e(no,PHo),e(no,Iue),e(Iue,BHo),e(no,IHo),e(no,Oa),e(Oa,NHo),e(Oa,Nue),e(Nue,qHo),e(Oa,jHo),e(Oa,que),e(que,DHo),e(Oa,GHo),e(Oa,jue),e(jue,OHo),e(Oa,VHo),e(no,XHo),e(no,V),e(V,G4),e(G4,Due),e(Due,zHo),e(G4,WHo),e(G4,HX),e(HX,QHo),e(G4,HHo),e(V,UHo),e(V,O4),e(O4,Gue),e(Gue,JHo),e(O4,YHo),e(O4,UX),e(UX,KHo),e(O4,ZHo),e(V,eUo),e(V,V4),e(V4,Oue),e(Oue,oUo),e(V4,rUo),e(V4,JX),e(JX,tUo),e(V4,aUo),e(V,nUo),e(V,X4),e(X4,Vue),e(Vue,sUo),e(X4,lUo),e(X4,YX),e(YX,iUo),e(X4,dUo),e(V,cUo),e(V,z4),e(z4,Xue),e(Xue,fUo),e(z4,mUo),e(z4,KX),e(KX,gUo),e(z4,hUo),e(V,pUo),e(V,W4),e(W4,zue),e(zue,uUo),e(W4,_Uo),e(W4,ZX),e(ZX,bUo),e(W4,vUo),e(V,FUo),e(V,Q4),e(Q4,Wue),e(Wue,TUo),e(Q4,MUo),e(Q4,ez),e(ez,EUo),e(Q4,CUo),e(V,wUo),e(V,H4),e(H4,Que),e(Que,AUo),e(H4,LUo),e(H4,oz),e(oz,yUo),e(H4,xUo),e(V,$Uo),e(V,U4),e(U4,Hue),e(Hue,kUo),e(U4,SUo),e(U4,rz),e(rz,RUo),e(U4,PUo),e(V,BUo),e(V,J4),e(J4,Uue),e(Uue,IUo),e(J4,NUo),e(J4,tz),e(tz,qUo),e(J4,jUo),e(V,DUo),e(V,Y4),e(Y4,Jue),e(Jue,GUo),e(Y4,OUo),e(Y4,az),e(az,VUo),e(Y4,XUo),e(V,zUo),e(V,K4),e(K4,Yue),e(Yue,WUo),e(K4,QUo),e(K4,nz),e(nz,HUo),e(K4,UUo),e(V,JUo),e(V,Z4),e(Z4,Kue),e(Kue,YUo),e(Z4,KUo),e(Z4,sz),e(sz,ZUo),e(Z4,eJo),e(V,oJo),e(V,ev),e(ev,Zue),e(Zue,rJo),e(ev,tJo),e(ev,lz),e(lz,aJo),e(ev,nJo),e(V,sJo),e(V,ov),e(ov,e_e),e(e_e,lJo),e(ov,iJo),e(ov,iz),e(iz,dJo),e(ov,cJo),e(V,fJo),e(V,rv),e(rv,o_e),e(o_e,mJo),e(rv,gJo),e(rv,dz),e(dz,hJo),e(rv,pJo),e(V,uJo),e(V,tv),e(tv,r_e),e(r_e,_Jo),e(tv,bJo),e(tv,cz),e(cz,vJo),e(tv,FJo),e(V,TJo),e(V,av),e(av,t_e),e(t_e,MJo),e(av,EJo),e(av,fz),e(fz,CJo),e(av,wJo),e(V,AJo),e(V,nv),e(nv,a_e),e(a_e,LJo),e(nv,yJo),e(nv,mz),e(mz,xJo),e(nv,$Jo),e(V,kJo),e(V,sv),e(sv,n_e),e(n_e,SJo),e(sv,RJo),e(sv,gz),e(gz,PJo),e(sv,BJo),e(V,IJo),e(V,lv),e(lv,s_e),e(s_e,NJo),e(lv,qJo),e(lv,hz),e(hz,jJo),e(lv,DJo),e(V,GJo),e(V,iv),e(iv,l_e),e(l_e,OJo),e(iv,VJo),e(iv,pz),e(pz,XJo),e(iv,zJo),e(V,WJo),e(V,dv),e(dv,i_e),e(i_e,QJo),e(dv,HJo),e(dv,uz),e(uz,UJo),e(dv,JJo),e(V,YJo),e(V,cv),e(cv,d_e),e(d_e,KJo),e(cv,ZJo),e(cv,_z),e(_z,eYo),e(cv,oYo),e(V,rYo),e(V,fv),e(fv,c_e),e(c_e,tYo),e(fv,aYo),e(fv,bz),e(bz,nYo),e(fv,sYo),e(V,lYo),e(V,mv),e(mv,f_e),e(f_e,iYo),e(mv,dYo),e(mv,vz),e(vz,cYo),e(mv,fYo),e(V,mYo),e(V,gv),e(gv,m_e),e(m_e,gYo),e(gv,hYo),e(gv,Fz),e(Fz,pYo),e(gv,uYo),e(V,_Yo),e(V,hv),e(hv,g_e),e(g_e,bYo),e(hv,vYo),e(hv,Tz),e(Tz,FYo),e(hv,TYo),e(V,MYo),e(V,pv),e(pv,h_e),e(h_e,EYo),e(pv,CYo),e(pv,Mz),e(Mz,wYo),e(pv,AYo),e(V,LYo),e(V,uv),e(uv,p_e),e(p_e,yYo),e(uv,xYo),e(uv,Ez),e(Ez,$Yo),e(uv,kYo),e(V,SYo),e(V,_v),e(_v,u_e),e(u_e,RYo),e(_v,PYo),e(_v,Cz),e(Cz,BYo),e(_v,IYo),e(V,NYo),e(V,bv),e(bv,__e),e(__e,qYo),e(bv,jYo),e(bv,wz),e(wz,DYo),e(bv,GYo),e(V,OYo),e(V,vv),e(vv,b_e),e(b_e,VYo),e(vv,XYo),e(vv,Az),e(Az,zYo),e(vv,WYo),e(V,QYo),e(V,Fv),e(Fv,v_e),e(v_e,HYo),e(Fv,UYo),e(Fv,Lz),e(Lz,JYo),e(Fv,YYo),e(V,KYo),e(V,Tv),e(Tv,F_e),e(F_e,ZYo),e(Tv,eKo),e(Tv,yz),e(yz,oKo),e(Tv,rKo),e(V,tKo),e(V,Mv),e(Mv,T_e),e(T_e,aKo),e(Mv,nKo),e(Mv,xz),e(xz,sKo),e(Mv,lKo),e(V,iKo),e(V,Ev),e(Ev,M_e),e(M_e,dKo),e(Ev,cKo),e(Ev,$z),e($z,fKo),e(Ev,mKo),e(V,gKo),e(V,Cv),e(Cv,E_e),e(E_e,hKo),e(Cv,pKo),e(Cv,kz),e(kz,uKo),e(Cv,_Ko),e(V,bKo),e(V,wv),e(wv,C_e),e(C_e,vKo),e(wv,FKo),e(wv,Sz),e(Sz,TKo),e(wv,MKo),e(V,EKo),e(V,Av),e(Av,w_e),e(w_e,CKo),e(Av,wKo),e(Av,Rz),e(Rz,AKo),e(Av,LKo),e(no,yKo),e(no,Lv),e(Lv,xKo),e(Lv,A_e),e(A_e,$Ko),e(Lv,kKo),e(Lv,L_e),e(L_e,SKo),e(no,RKo),M(yv,no,null),b(f,kGe,_),b(f,fd,_),e(fd,xv),e(xv,y_e),M(Gy,y_e,null),e(fd,PKo),e(fd,x_e),e(x_e,BKo),b(f,SGe,_),b(f,jo,_),M(Oy,jo,null),e(jo,IKo),e(jo,md),e(md,NKo),e(md,Pz),e(Pz,qKo),e(md,jKo),e(md,Bz),e(Bz,DKo),e(md,GKo),e(jo,OKo),e(jo,Vy),e(Vy,VKo),e(Vy,$_e),e($_e,XKo),e(Vy,zKo),e(jo,WKo),e(jo,ut),M(Xy,ut,null),e(ut,QKo),e(ut,k_e),e(k_e,HKo),e(ut,UKo),e(ut,gd),e(gd,JKo),e(gd,S_e),e(S_e,YKo),e(gd,KKo),e(gd,Iz),e(Iz,ZKo),e(gd,eZo),e(ut,oZo),M($v,ut,null),e(jo,rZo),e(jo,so),M(zy,so,null),e(so,tZo),e(so,R_e),e(R_e,aZo),e(so,nZo),e(so,Va),e(Va,sZo),e(Va,P_e),e(P_e,lZo),e(Va,iZo),e(Va,B_e),e(B_e,dZo),e(Va,cZo),e(Va,I_e),e(I_e,fZo),e(Va,mZo),e(so,gZo),e(so,N_e),e(N_e,kv),e(kv,q_e),e(q_e,hZo),e(kv,pZo),e(kv,Nz),e(Nz,uZo),e(kv,_Zo),e(so,bZo),e(so,Sv),e(Sv,vZo),e(Sv,j_e),e(j_e,FZo),e(Sv,TZo),e(Sv,D_e),e(D_e,MZo),e(so,EZo),M(Rv,so,null),b(f,RGe,_),b(f,hd,_),e(hd,Pv),e(Pv,G_e),M(Wy,G_e,null),e(hd,CZo),e(hd,O_e),e(O_e,wZo),b(f,PGe,_),b(f,Do,_),M(Qy,Do,null),e(Do,AZo),e(Do,pd),e(pd,LZo),e(pd,qz),e(qz,yZo),e(pd,xZo),e(pd,jz),e(jz,$Zo),e(pd,kZo),e(Do,SZo),e(Do,Hy),e(Hy,RZo),e(Hy,V_e),e(V_e,PZo),e(Hy,BZo),e(Do,IZo),e(Do,_t),M(Uy,_t,null),e(_t,NZo),e(_t,X_e),e(X_e,qZo),e(_t,jZo),e(_t,ud),e(ud,DZo),e(ud,z_e),e(z_e,GZo),e(ud,OZo),e(ud,Dz),e(Dz,VZo),e(ud,XZo),e(_t,zZo),M(Bv,_t,null),e(Do,WZo),e(Do,lo),M(Jy,lo,null),e(lo,QZo),e(lo,W_e),e(W_e,HZo),e(lo,UZo),e(lo,Xa),e(Xa,JZo),e(Xa,Q_e),e(Q_e,YZo),e(Xa,KZo),e(Xa,H_e),e(H_e,ZZo),e(Xa,eer),e(Xa,U_e),e(U_e,oer),e(Xa,rer),e(lo,ter),e(lo,Fe),e(Fe,Iv),e(Iv,J_e),e(J_e,aer),e(Iv,ner),e(Iv,Gz),e(Gz,ser),e(Iv,ler),e(Fe,ier),e(Fe,Nv),e(Nv,Y_e),e(Y_e,der),e(Nv,cer),e(Nv,Oz),e(Oz,fer),e(Nv,mer),e(Fe,ger),e(Fe,qv),e(qv,K_e),e(K_e,her),e(qv,per),e(qv,Vz),e(Vz,uer),e(qv,_er),e(Fe,ber),e(Fe,jv),e(jv,Z_e),e(Z_e,ver),e(jv,Fer),e(jv,Xz),e(Xz,Ter),e(jv,Mer),e(Fe,Eer),e(Fe,Os),e(Os,e2e),e(e2e,Cer),e(Os,wer),e(Os,zz),e(zz,Aer),e(Os,Ler),e(Os,Wz),e(Wz,yer),e(Os,xer),e(Fe,$er),e(Fe,Dv),e(Dv,o2e),e(o2e,ker),e(Dv,Ser),e(Dv,Qz),e(Qz,Rer),e(Dv,Per),e(Fe,Ber),e(Fe,Vs),e(Vs,r2e),e(r2e,Ier),e(Vs,Ner),e(Vs,Hz),e(Hz,qer),e(Vs,jer),e(Vs,Uz),e(Uz,Der),e(Vs,Ger),e(Fe,Oer),e(Fe,bt),e(bt,t2e),e(t2e,Ver),e(bt,Xer),e(bt,Jz),e(Jz,zer),e(bt,Wer),e(bt,Yz),e(Yz,Qer),e(bt,Her),e(bt,Kz),e(Kz,Uer),e(bt,Jer),e(Fe,Yer),e(Fe,Gv),e(Gv,a2e),e(a2e,Ker),e(Gv,Zer),e(Gv,Zz),e(Zz,eor),e(Gv,oor),e(Fe,ror),e(Fe,Ov),e(Ov,n2e),e(n2e,tor),e(Ov,aor),e(Ov,eW),e(eW,nor),e(Ov,sor),e(Fe,lor),e(Fe,Vv),e(Vv,s2e),e(s2e,ior),e(Vv,dor),e(Vv,oW),e(oW,cor),e(Vv,mor),e(Fe,gor),e(Fe,Xv),e(Xv,l2e),e(l2e,hor),e(Xv,por),e(Xv,rW),e(rW,uor),e(Xv,_or),e(Fe,bor),e(Fe,zv),e(zv,i2e),e(i2e,vor),e(zv,For),e(zv,tW),e(tW,Tor),e(zv,Mor),e(Fe,Eor),e(Fe,Wv),e(Wv,d2e),e(d2e,Cor),e(Wv,wor),e(Wv,aW),e(aW,Aor),e(Wv,Lor),e(Fe,yor),e(Fe,Qv),e(Qv,c2e),e(c2e,xor),e(Qv,$or),e(Qv,nW),e(nW,kor),e(Qv,Sor),e(lo,Ror),e(lo,Hv),e(Hv,Por),e(Hv,f2e),e(f2e,Bor),e(Hv,Ior),e(Hv,m2e),e(m2e,Nor),e(lo,qor),M(Uv,lo,null),b(f,BGe,_),b(f,_d,_),e(_d,Jv),e(Jv,g2e),M(Yy,g2e,null),e(_d,jor),e(_d,h2e),e(h2e,Dor),b(f,IGe,_),b(f,Go,_),M(Ky,Go,null),e(Go,Gor),e(Go,bd),e(bd,Oor),e(bd,sW),e(sW,Vor),e(bd,Xor),e(bd,lW),e(lW,zor),e(bd,Wor),e(Go,Qor),e(Go,Zy),e(Zy,Hor),e(Zy,p2e),e(p2e,Uor),e(Zy,Jor),e(Go,Yor),e(Go,vt),M(e8,vt,null),e(vt,Kor),e(vt,u2e),e(u2e,Zor),e(vt,err),e(vt,vd),e(vd,orr),e(vd,_2e),e(_2e,rrr),e(vd,trr),e(vd,iW),e(iW,arr),e(vd,nrr),e(vt,srr),M(Yv,vt,null),e(Go,lrr),e(Go,io),M(o8,io,null),e(io,irr),e(io,b2e),e(b2e,drr),e(io,crr),e(io,za),e(za,frr),e(za,v2e),e(v2e,mrr),e(za,grr),e(za,F2e),e(F2e,hrr),e(za,prr),e(za,T2e),e(T2e,urr),e(za,_rr),e(io,brr),e(io,M2e),e(M2e,Kv),e(Kv,E2e),e(E2e,vrr),e(Kv,Frr),e(Kv,dW),e(dW,Trr),e(Kv,Mrr),e(io,Err),e(io,Zv),e(Zv,Crr),e(Zv,C2e),e(C2e,wrr),e(Zv,Arr),e(Zv,w2e),e(w2e,Lrr),e(io,yrr),M(eF,io,null),b(f,NGe,_),b(f,Fd,_),e(Fd,oF),e(oF,A2e),M(r8,A2e,null),e(Fd,xrr),e(Fd,L2e),e(L2e,$rr),b(f,qGe,_),b(f,Oo,_),M(t8,Oo,null),e(Oo,krr),e(Oo,Td),e(Td,Srr),e(Td,cW),e(cW,Rrr),e(Td,Prr),e(Td,fW),e(fW,Brr),e(Td,Irr),e(Oo,Nrr),e(Oo,a8),e(a8,qrr),e(a8,y2e),e(y2e,jrr),e(a8,Drr),e(Oo,Grr),e(Oo,Ft),M(n8,Ft,null),e(Ft,Orr),e(Ft,x2e),e(x2e,Vrr),e(Ft,Xrr),e(Ft,Md),e(Md,zrr),e(Md,$2e),e($2e,Wrr),e(Md,Qrr),e(Md,mW),e(mW,Hrr),e(Md,Urr),e(Ft,Jrr),M(rF,Ft,null),e(Oo,Yrr),e(Oo,co),M(s8,co,null),e(co,Krr),e(co,k2e),e(k2e,Zrr),e(co,etr),e(co,Wa),e(Wa,otr),e(Wa,S2e),e(S2e,rtr),e(Wa,ttr),e(Wa,R2e),e(R2e,atr),e(Wa,ntr),e(Wa,P2e),e(P2e,str),e(Wa,ltr),e(co,itr),e(co,B2e),e(B2e,tF),e(tF,I2e),e(I2e,dtr),e(tF,ctr),e(tF,gW),e(gW,ftr),e(tF,mtr),e(co,gtr),e(co,aF),e(aF,htr),e(aF,N2e),e(N2e,ptr),e(aF,utr),e(aF,q2e),e(q2e,_tr),e(co,btr),M(nF,co,null),b(f,jGe,_),b(f,Ed,_),e(Ed,sF),e(sF,j2e),M(l8,j2e,null),e(Ed,vtr),e(Ed,D2e),e(D2e,Ftr),b(f,DGe,_),b(f,Vo,_),M(i8,Vo,null),e(Vo,Ttr),e(Vo,Cd),e(Cd,Mtr),e(Cd,hW),e(hW,Etr),e(Cd,Ctr),e(Cd,pW),e(pW,wtr),e(Cd,Atr),e(Vo,Ltr),e(Vo,d8),e(d8,ytr),e(d8,G2e),e(G2e,xtr),e(d8,$tr),e(Vo,ktr),e(Vo,Tt),M(c8,Tt,null),e(Tt,Str),e(Tt,O2e),e(O2e,Rtr),e(Tt,Ptr),e(Tt,wd),e(wd,Btr),e(wd,V2e),e(V2e,Itr),e(wd,Ntr),e(wd,uW),e(uW,qtr),e(wd,jtr),e(Tt,Dtr),M(lF,Tt,null),e(Vo,Gtr),e(Vo,fo),M(f8,fo,null),e(fo,Otr),e(fo,X2e),e(X2e,Vtr),e(fo,Xtr),e(fo,Qa),e(Qa,ztr),e(Qa,z2e),e(z2e,Wtr),e(Qa,Qtr),e(Qa,W2e),e(W2e,Htr),e(Qa,Utr),e(Qa,Q2e),e(Q2e,Jtr),e(Qa,Ytr),e(fo,Ktr),e(fo,Pe),e(Pe,iF),e(iF,H2e),e(H2e,Ztr),e(iF,ear),e(iF,_W),e(_W,oar),e(iF,rar),e(Pe,tar),e(Pe,dF),e(dF,U2e),e(U2e,aar),e(dF,nar),e(dF,bW),e(bW,sar),e(dF,lar),e(Pe,iar),e(Pe,cF),e(cF,J2e),e(J2e,dar),e(cF,car),e(cF,vW),e(vW,far),e(cF,mar),e(Pe,gar),e(Pe,fF),e(fF,Y2e),e(Y2e,har),e(fF,par),e(fF,FW),e(FW,uar),e(fF,_ar),e(Pe,bar),e(Pe,mF),e(mF,K2e),e(K2e,Far),e(mF,Tar),e(mF,TW),e(TW,Mar),e(mF,Ear),e(Pe,Car),e(Pe,gF),e(gF,Z2e),e(Z2e,war),e(gF,Aar),e(gF,MW),e(MW,Lar),e(gF,yar),e(Pe,xar),e(Pe,hF),e(hF,e1e),e(e1e,$ar),e(hF,kar),e(hF,EW),e(EW,Sar),e(hF,Rar),e(Pe,Par),e(Pe,pF),e(pF,o1e),e(o1e,Bar),e(pF,Iar),e(pF,CW),e(CW,Nar),e(pF,qar),e(Pe,jar),e(Pe,uF),e(uF,r1e),e(r1e,Dar),e(uF,Gar),e(uF,wW),e(wW,Oar),e(uF,Var),e(fo,Xar),e(fo,_F),e(_F,zar),e(_F,t1e),e(t1e,War),e(_F,Qar),e(_F,a1e),e(a1e,Har),e(fo,Uar),M(bF,fo,null),b(f,GGe,_),b(f,Ad,_),e(Ad,vF),e(vF,n1e),M(m8,n1e,null),e(Ad,Jar),e(Ad,s1e),e(s1e,Yar),b(f,OGe,_),b(f,Xo,_),M(g8,Xo,null),e(Xo,Kar),e(Xo,Ld),e(Ld,Zar),e(Ld,AW),e(AW,enr),e(Ld,onr),e(Ld,LW),e(LW,rnr),e(Ld,tnr),e(Xo,anr),e(Xo,h8),e(h8,nnr),e(h8,l1e),e(l1e,snr),e(h8,lnr),e(Xo,inr),e(Xo,Mt),M(p8,Mt,null),e(Mt,dnr),e(Mt,i1e),e(i1e,cnr),e(Mt,fnr),e(Mt,yd),e(yd,mnr),e(yd,d1e),e(d1e,gnr),e(yd,hnr),e(yd,yW),e(yW,pnr),e(yd,unr),e(Mt,_nr),M(FF,Mt,null),e(Xo,bnr),e(Xo,mo),M(u8,mo,null),e(mo,vnr),e(mo,c1e),e(c1e,Fnr),e(mo,Tnr),e(mo,Ha),e(Ha,Mnr),e(Ha,f1e),e(f1e,Enr),e(Ha,Cnr),e(Ha,m1e),e(m1e,wnr),e(Ha,Anr),e(Ha,g1e),e(g1e,Lnr),e(Ha,ynr),e(mo,xnr),e(mo,et),e(et,TF),e(TF,h1e),e(h1e,$nr),e(TF,knr),e(TF,xW),e(xW,Snr),e(TF,Rnr),e(et,Pnr),e(et,MF),e(MF,p1e),e(p1e,Bnr),e(MF,Inr),e(MF,$W),e($W,Nnr),e(MF,qnr),e(et,jnr),e(et,EF),e(EF,u1e),e(u1e,Dnr),e(EF,Gnr),e(EF,kW),e(kW,Onr),e(EF,Vnr),e(et,Xnr),e(et,CF),e(CF,_1e),e(_1e,znr),e(CF,Wnr),e(CF,SW),e(SW,Qnr),e(CF,Hnr),e(et,Unr),e(et,wF),e(wF,b1e),e(b1e,Jnr),e(wF,Ynr),e(wF,RW),e(RW,Knr),e(wF,Znr),e(mo,esr),e(mo,AF),e(AF,osr),e(AF,v1e),e(v1e,rsr),e(AF,tsr),e(AF,F1e),e(F1e,asr),e(mo,nsr),M(LF,mo,null),b(f,VGe,_),b(f,xd,_),e(xd,yF),e(yF,T1e),M(_8,T1e,null),e(xd,ssr),e(xd,M1e),e(M1e,lsr),b(f,XGe,_),b(f,zo,_),M(b8,zo,null),e(zo,isr),e(zo,$d),e($d,dsr),e($d,PW),e(PW,csr),e($d,fsr),e($d,BW),e(BW,msr),e($d,gsr),e(zo,hsr),e(zo,v8),e(v8,psr),e(v8,E1e),e(E1e,usr),e(v8,_sr),e(zo,bsr),e(zo,Et),M(F8,Et,null),e(Et,vsr),e(Et,C1e),e(C1e,Fsr),e(Et,Tsr),e(Et,kd),e(kd,Msr),e(kd,w1e),e(w1e,Esr),e(kd,Csr),e(kd,IW),e(IW,wsr),e(kd,Asr),e(Et,Lsr),M(xF,Et,null),e(zo,ysr),e(zo,go),M(T8,go,null),e(go,xsr),e(go,A1e),e(A1e,$sr),e(go,ksr),e(go,Ua),e(Ua,Ssr),e(Ua,L1e),e(L1e,Rsr),e(Ua,Psr),e(Ua,y1e),e(y1e,Bsr),e(Ua,Isr),e(Ua,x1e),e(x1e,Nsr),e(Ua,qsr),e(go,jsr),e(go,Le),e(Le,$F),e($F,$1e),e($1e,Dsr),e($F,Gsr),e($F,NW),e(NW,Osr),e($F,Vsr),e(Le,Xsr),e(Le,kF),e(kF,k1e),e(k1e,zsr),e(kF,Wsr),e(kF,qW),e(qW,Qsr),e(kF,Hsr),e(Le,Usr),e(Le,SF),e(SF,S1e),e(S1e,Jsr),e(SF,Ysr),e(SF,jW),e(jW,Ksr),e(SF,Zsr),e(Le,elr),e(Le,RF),e(RF,R1e),e(R1e,olr),e(RF,rlr),e(RF,DW),e(DW,tlr),e(RF,alr),e(Le,nlr),e(Le,PF),e(PF,P1e),e(P1e,slr),e(PF,llr),e(PF,GW),e(GW,ilr),e(PF,dlr),e(Le,clr),e(Le,BF),e(BF,B1e),e(B1e,flr),e(BF,mlr),e(BF,OW),e(OW,glr),e(BF,hlr),e(Le,plr),e(Le,IF),e(IF,I1e),e(I1e,ulr),e(IF,_lr),e(IF,VW),e(VW,blr),e(IF,vlr),e(Le,Flr),e(Le,NF),e(NF,N1e),e(N1e,Tlr),e(NF,Mlr),e(NF,XW),e(XW,Elr),e(NF,Clr),e(Le,wlr),e(Le,qF),e(qF,q1e),e(q1e,Alr),e(qF,Llr),e(qF,zW),e(zW,ylr),e(qF,xlr),e(Le,$lr),e(Le,jF),e(jF,j1e),e(j1e,klr),e(jF,Slr),e(jF,WW),e(WW,Rlr),e(jF,Plr),e(go,Blr),e(go,DF),e(DF,Ilr),e(DF,D1e),e(D1e,Nlr),e(DF,qlr),e(DF,G1e),e(G1e,jlr),e(go,Dlr),M(GF,go,null),b(f,zGe,_),b(f,Sd,_),e(Sd,OF),e(OF,O1e),M(M8,O1e,null),e(Sd,Glr),e(Sd,V1e),e(V1e,Olr),b(f,WGe,_),b(f,Wo,_),M(E8,Wo,null),e(Wo,Vlr),e(Wo,Rd),e(Rd,Xlr),e(Rd,QW),e(QW,zlr),e(Rd,Wlr),e(Rd,HW),e(HW,Qlr),e(Rd,Hlr),e(Wo,Ulr),e(Wo,C8),e(C8,Jlr),e(C8,X1e),e(X1e,Ylr),e(C8,Klr),e(Wo,Zlr),e(Wo,Ct),M(w8,Ct,null),e(Ct,eir),e(Ct,z1e),e(z1e,oir),e(Ct,rir),e(Ct,Pd),e(Pd,tir),e(Pd,W1e),e(W1e,air),e(Pd,nir),e(Pd,UW),e(UW,sir),e(Pd,lir),e(Ct,iir),M(VF,Ct,null),e(Wo,dir),e(Wo,ho),M(A8,ho,null),e(ho,cir),e(ho,Q1e),e(Q1e,fir),e(ho,mir),e(ho,Ja),e(Ja,gir),e(Ja,H1e),e(H1e,hir),e(Ja,pir),e(Ja,U1e),e(U1e,uir),e(Ja,_ir),e(Ja,J1e),e(J1e,bir),e(Ja,vir),e(ho,Fir),e(ho,L8),e(L8,XF),e(XF,Y1e),e(Y1e,Tir),e(XF,Mir),e(XF,JW),e(JW,Eir),e(XF,Cir),e(L8,wir),e(L8,zF),e(zF,K1e),e(K1e,Air),e(zF,Lir),e(zF,YW),e(YW,yir),e(zF,xir),e(ho,$ir),e(ho,WF),e(WF,kir),e(WF,Z1e),e(Z1e,Sir),e(WF,Rir),e(WF,e7e),e(e7e,Pir),e(ho,Bir),M(QF,ho,null),b(f,QGe,_),b(f,Bd,_),e(Bd,HF),e(HF,o7e),M(y8,o7e,null),e(Bd,Iir),e(Bd,r7e),e(r7e,Nir),b(f,HGe,_),b(f,Qo,_),M(x8,Qo,null),e(Qo,qir),e(Qo,Id),e(Id,jir),e(Id,KW),e(KW,Dir),e(Id,Gir),e(Id,ZW),e(ZW,Oir),e(Id,Vir),e(Qo,Xir),e(Qo,$8),e($8,zir),e($8,t7e),e(t7e,Wir),e($8,Qir),e(Qo,Hir),e(Qo,wt),M(k8,wt,null),e(wt,Uir),e(wt,a7e),e(a7e,Jir),e(wt,Yir),e(wt,Nd),e(Nd,Kir),e(Nd,n7e),e(n7e,Zir),e(Nd,edr),e(Nd,eQ),e(eQ,odr),e(Nd,rdr),e(wt,tdr),M(UF,wt,null),e(Qo,adr),e(Qo,po),M(S8,po,null),e(po,ndr),e(po,s7e),e(s7e,sdr),e(po,ldr),e(po,Ya),e(Ya,idr),e(Ya,l7e),e(l7e,ddr),e(Ya,cdr),e(Ya,i7e),e(i7e,fdr),e(Ya,mdr),e(Ya,d7e),e(d7e,gdr),e(Ya,hdr),e(po,pdr),e(po,ot),e(ot,JF),e(JF,c7e),e(c7e,udr),e(JF,_dr),e(JF,oQ),e(oQ,bdr),e(JF,vdr),e(ot,Fdr),e(ot,YF),e(YF,f7e),e(f7e,Tdr),e(YF,Mdr),e(YF,rQ),e(rQ,Edr),e(YF,Cdr),e(ot,wdr),e(ot,KF),e(KF,m7e),e(m7e,Adr),e(KF,Ldr),e(KF,tQ),e(tQ,ydr),e(KF,xdr),e(ot,$dr),e(ot,ZF),e(ZF,g7e),e(g7e,kdr),e(ZF,Sdr),e(ZF,aQ),e(aQ,Rdr),e(ZF,Pdr),e(ot,Bdr),e(ot,eT),e(eT,h7e),e(h7e,Idr),e(eT,Ndr),e(eT,nQ),e(nQ,qdr),e(eT,jdr),e(po,Ddr),e(po,oT),e(oT,Gdr),e(oT,p7e),e(p7e,Odr),e(oT,Vdr),e(oT,u7e),e(u7e,Xdr),e(po,zdr),M(rT,po,null),b(f,UGe,_),b(f,qd,_),e(qd,tT),e(tT,_7e),M(R8,_7e,null),e(qd,Wdr),e(qd,b7e),e(b7e,Qdr),b(f,JGe,_),b(f,Ho,_),M(P8,Ho,null),e(Ho,Hdr),e(Ho,jd),e(jd,Udr),e(jd,sQ),e(sQ,Jdr),e(jd,Ydr),e(jd,lQ),e(lQ,Kdr),e(jd,Zdr),e(Ho,ecr),e(Ho,B8),e(B8,ocr),e(B8,v7e),e(v7e,rcr),e(B8,tcr),e(Ho,acr),e(Ho,At),M(I8,At,null),e(At,ncr),e(At,F7e),e(F7e,scr),e(At,lcr),e(At,Dd),e(Dd,icr),e(Dd,T7e),e(T7e,dcr),e(Dd,ccr),e(Dd,iQ),e(iQ,fcr),e(Dd,mcr),e(At,gcr),M(aT,At,null),e(Ho,hcr),e(Ho,uo),M(N8,uo,null),e(uo,pcr),e(uo,M7e),e(M7e,ucr),e(uo,_cr),e(uo,Ka),e(Ka,bcr),e(Ka,E7e),e(E7e,vcr),e(Ka,Fcr),e(Ka,C7e),e(C7e,Tcr),e(Ka,Mcr),e(Ka,w7e),e(w7e,Ecr),e(Ka,Ccr),e(uo,wcr),e(uo,Gd),e(Gd,nT),e(nT,A7e),e(A7e,Acr),e(nT,Lcr),e(nT,dQ),e(dQ,ycr),e(nT,xcr),e(Gd,$cr),e(Gd,sT),e(sT,L7e),e(L7e,kcr),e(sT,Scr),e(sT,cQ),e(cQ,Rcr),e(sT,Pcr),e(Gd,Bcr),e(Gd,lT),e(lT,y7e),e(y7e,Icr),e(lT,Ncr),e(lT,fQ),e(fQ,qcr),e(lT,jcr),e(uo,Dcr),e(uo,iT),e(iT,Gcr),e(iT,x7e),e(x7e,Ocr),e(iT,Vcr),e(iT,$7e),e($7e,Xcr),e(uo,zcr),M(dT,uo,null),b(f,YGe,_),b(f,Od,_),e(Od,cT),e(cT,k7e),M(q8,k7e,null),e(Od,Wcr),e(Od,S7e),e(S7e,Qcr),b(f,KGe,_),b(f,Uo,_),M(j8,Uo,null),e(Uo,Hcr),e(Uo,Vd),e(Vd,Ucr),e(Vd,mQ),e(mQ,Jcr),e(Vd,Ycr),e(Vd,gQ),e(gQ,Kcr),e(Vd,Zcr),e(Uo,efr),e(Uo,D8),e(D8,ofr),e(D8,R7e),e(R7e,rfr),e(D8,tfr),e(Uo,afr),e(Uo,Lt),M(G8,Lt,null),e(Lt,nfr),e(Lt,P7e),e(P7e,sfr),e(Lt,lfr),e(Lt,Xd),e(Xd,ifr),e(Xd,B7e),e(B7e,dfr),e(Xd,cfr),e(Xd,hQ),e(hQ,ffr),e(Xd,mfr),e(Lt,gfr),M(fT,Lt,null),e(Uo,hfr),e(Uo,_o),M(O8,_o,null),e(_o,pfr),e(_o,I7e),e(I7e,ufr),e(_o,_fr),e(_o,Za),e(Za,bfr),e(Za,N7e),e(N7e,vfr),e(Za,Ffr),e(Za,q7e),e(q7e,Tfr),e(Za,Mfr),e(Za,j7e),e(j7e,Efr),e(Za,Cfr),e(_o,wfr),e(_o,V8),e(V8,mT),e(mT,D7e),e(D7e,Afr),e(mT,Lfr),e(mT,pQ),e(pQ,yfr),e(mT,xfr),e(V8,$fr),e(V8,gT),e(gT,G7e),e(G7e,kfr),e(gT,Sfr),e(gT,uQ),e(uQ,Rfr),e(gT,Pfr),e(_o,Bfr),e(_o,hT),e(hT,Ifr),e(hT,O7e),e(O7e,Nfr),e(hT,qfr),e(hT,V7e),e(V7e,jfr),e(_o,Dfr),M(pT,_o,null),b(f,ZGe,_),b(f,zd,_),e(zd,uT),e(uT,X7e),M(X8,X7e,null),e(zd,Gfr),e(zd,z7e),e(z7e,Ofr),b(f,eOe,_),b(f,Jo,_),M(z8,Jo,null),e(Jo,Vfr),e(Jo,Wd),e(Wd,Xfr),e(Wd,_Q),e(_Q,zfr),e(Wd,Wfr),e(Wd,bQ),e(bQ,Qfr),e(Wd,Hfr),e(Jo,Ufr),e(Jo,W8),e(W8,Jfr),e(W8,W7e),e(W7e,Yfr),e(W8,Kfr),e(Jo,Zfr),e(Jo,yt),M(Q8,yt,null),e(yt,emr),e(yt,Q7e),e(Q7e,omr),e(yt,rmr),e(yt,Qd),e(Qd,tmr),e(Qd,H7e),e(H7e,amr),e(Qd,nmr),e(Qd,vQ),e(vQ,smr),e(Qd,lmr),e(yt,imr),M(_T,yt,null),e(Jo,dmr),e(Jo,bo),M(H8,bo,null),e(bo,cmr),e(bo,U7e),e(U7e,fmr),e(bo,mmr),e(bo,en),e(en,gmr),e(en,J7e),e(J7e,hmr),e(en,pmr),e(en,Y7e),e(Y7e,umr),e(en,_mr),e(en,K7e),e(K7e,bmr),e(en,vmr),e(bo,Fmr),e(bo,Z7e),e(Z7e,bT),e(bT,ebe),e(ebe,Tmr),e(bT,Mmr),e(bT,FQ),e(FQ,Emr),e(bT,Cmr),e(bo,wmr),e(bo,vT),e(vT,Amr),e(vT,obe),e(obe,Lmr),e(vT,ymr),e(vT,rbe),e(rbe,xmr),e(bo,$mr),M(FT,bo,null),b(f,oOe,_),b(f,Hd,_),e(Hd,TT),e(TT,tbe),M(U8,tbe,null),e(Hd,kmr),e(Hd,abe),e(abe,Smr),b(f,rOe,_),b(f,Yo,_),M(J8,Yo,null),e(Yo,Rmr),e(Yo,Ud),e(Ud,Pmr),e(Ud,TQ),e(TQ,Bmr),e(Ud,Imr),e(Ud,MQ),e(MQ,Nmr),e(Ud,qmr),e(Yo,jmr),e(Yo,Y8),e(Y8,Dmr),e(Y8,nbe),e(nbe,Gmr),e(Y8,Omr),e(Yo,Vmr),e(Yo,xt),M(K8,xt,null),e(xt,Xmr),e(xt,sbe),e(sbe,zmr),e(xt,Wmr),e(xt,Jd),e(Jd,Qmr),e(Jd,lbe),e(lbe,Hmr),e(Jd,Umr),e(Jd,EQ),e(EQ,Jmr),e(Jd,Ymr),e(xt,Kmr),M(MT,xt,null),e(Yo,Zmr),e(Yo,vo),M(Z8,vo,null),e(vo,egr),e(vo,ibe),e(ibe,ogr),e(vo,rgr),e(vo,on),e(on,tgr),e(on,dbe),e(dbe,agr),e(on,ngr),e(on,cbe),e(cbe,sgr),e(on,lgr),e(on,fbe),e(fbe,igr),e(on,dgr),e(vo,cgr),e(vo,rn),e(rn,ET),e(ET,mbe),e(mbe,fgr),e(ET,mgr),e(ET,CQ),e(CQ,ggr),e(ET,hgr),e(rn,pgr),e(rn,CT),e(CT,gbe),e(gbe,ugr),e(CT,_gr),e(CT,wQ),e(wQ,bgr),e(CT,vgr),e(rn,Fgr),e(rn,wT),e(wT,hbe),e(hbe,Tgr),e(wT,Mgr),e(wT,AQ),e(AQ,Egr),e(wT,Cgr),e(rn,wgr),e(rn,AT),e(AT,pbe),e(pbe,Agr),e(AT,Lgr),e(AT,LQ),e(LQ,ygr),e(AT,xgr),e(vo,$gr),e(vo,LT),e(LT,kgr),e(LT,ube),e(ube,Sgr),e(LT,Rgr),e(LT,_be),e(_be,Pgr),e(vo,Bgr),M(yT,vo,null),b(f,tOe,_),b(f,Yd,_),e(Yd,xT),e(xT,bbe),M(e9,bbe,null),e(Yd,Igr),e(Yd,vbe),e(vbe,Ngr),b(f,aOe,_),b(f,Ko,_),M(o9,Ko,null),e(Ko,qgr),e(Ko,Kd),e(Kd,jgr),e(Kd,yQ),e(yQ,Dgr),e(Kd,Ggr),e(Kd,xQ),e(xQ,Ogr),e(Kd,Vgr),e(Ko,Xgr),e(Ko,r9),e(r9,zgr),e(r9,Fbe),e(Fbe,Wgr),e(r9,Qgr),e(Ko,Hgr),e(Ko,$t),M(t9,$t,null),e($t,Ugr),e($t,Tbe),e(Tbe,Jgr),e($t,Ygr),e($t,Zd),e(Zd,Kgr),e(Zd,Mbe),e(Mbe,Zgr),e(Zd,ehr),e(Zd,$Q),e($Q,ohr),e(Zd,rhr),e($t,thr),M($T,$t,null),e(Ko,ahr),e(Ko,Fo),M(a9,Fo,null),e(Fo,nhr),e(Fo,Ebe),e(Ebe,shr),e(Fo,lhr),e(Fo,tn),e(tn,ihr),e(tn,Cbe),e(Cbe,dhr),e(tn,chr),e(tn,wbe),e(wbe,fhr),e(tn,mhr),e(tn,Abe),e(Abe,ghr),e(tn,hhr),e(Fo,phr),e(Fo,Lbe),e(Lbe,kT),e(kT,ybe),e(ybe,uhr),e(kT,_hr),e(kT,kQ),e(kQ,bhr),e(kT,vhr),e(Fo,Fhr),e(Fo,ST),e(ST,Thr),e(ST,xbe),e(xbe,Mhr),e(ST,Ehr),e(ST,$be),e($be,Chr),e(Fo,whr),M(RT,Fo,null),b(f,nOe,_),b(f,ec,_),e(ec,PT),e(PT,kbe),M(n9,kbe,null),e(ec,Ahr),e(ec,Sbe),e(Sbe,Lhr),b(f,sOe,_),b(f,Zo,_),M(s9,Zo,null),e(Zo,yhr),e(Zo,oc),e(oc,xhr),e(oc,SQ),e(SQ,$hr),e(oc,khr),e(oc,RQ),e(RQ,Shr),e(oc,Rhr),e(Zo,Phr),e(Zo,l9),e(l9,Bhr),e(l9,Rbe),e(Rbe,Ihr),e(l9,Nhr),e(Zo,qhr),e(Zo,kt),M(i9,kt,null),e(kt,jhr),e(kt,Pbe),e(Pbe,Dhr),e(kt,Ghr),e(kt,rc),e(rc,Ohr),e(rc,Bbe),e(Bbe,Vhr),e(rc,Xhr),e(rc,PQ),e(PQ,zhr),e(rc,Whr),e(kt,Qhr),M(BT,kt,null),e(Zo,Hhr),e(Zo,Lr),M(d9,Lr,null),e(Lr,Uhr),e(Lr,Ibe),e(Ibe,Jhr),e(Lr,Yhr),e(Lr,an),e(an,Khr),e(an,Nbe),e(Nbe,Zhr),e(an,epr),e(an,qbe),e(qbe,opr),e(an,rpr),e(an,jbe),e(jbe,tpr),e(an,apr),e(Lr,npr),e(Lr,N),e(N,IT),e(IT,Dbe),e(Dbe,spr),e(IT,lpr),e(IT,BQ),e(BQ,ipr),e(IT,dpr),e(N,cpr),e(N,NT),e(NT,Gbe),e(Gbe,fpr),e(NT,mpr),e(NT,IQ),e(IQ,gpr),e(NT,hpr),e(N,ppr),e(N,qT),e(qT,Obe),e(Obe,upr),e(qT,_pr),e(qT,NQ),e(NQ,bpr),e(qT,vpr),e(N,Fpr),e(N,jT),e(jT,Vbe),e(Vbe,Tpr),e(jT,Mpr),e(jT,qQ),e(qQ,Epr),e(jT,Cpr),e(N,wpr),e(N,DT),e(DT,Xbe),e(Xbe,Apr),e(DT,Lpr),e(DT,jQ),e(jQ,ypr),e(DT,xpr),e(N,$pr),e(N,GT),e(GT,zbe),e(zbe,kpr),e(GT,Spr),e(GT,DQ),e(DQ,Rpr),e(GT,Ppr),e(N,Bpr),e(N,OT),e(OT,Wbe),e(Wbe,Ipr),e(OT,Npr),e(OT,GQ),e(GQ,qpr),e(OT,jpr),e(N,Dpr),e(N,VT),e(VT,Qbe),e(Qbe,Gpr),e(VT,Opr),e(VT,OQ),e(OQ,Vpr),e(VT,Xpr),e(N,zpr),e(N,XT),e(XT,Hbe),e(Hbe,Wpr),e(XT,Qpr),e(XT,VQ),e(VQ,Hpr),e(XT,Upr),e(N,Jpr),e(N,zT),e(zT,Ube),e(Ube,Ypr),e(zT,Kpr),e(zT,XQ),e(XQ,Zpr),e(zT,eur),e(N,our),e(N,WT),e(WT,Jbe),e(Jbe,rur),e(WT,tur),e(WT,zQ),e(zQ,aur),e(WT,nur),e(N,sur),e(N,QT),e(QT,Ybe),e(Ybe,lur),e(QT,iur),e(QT,WQ),e(WQ,dur),e(QT,cur),e(N,fur),e(N,HT),e(HT,Kbe),e(Kbe,mur),e(HT,gur),e(HT,QQ),e(QQ,hur),e(HT,pur),e(N,uur),e(N,UT),e(UT,Zbe),e(Zbe,_ur),e(UT,bur),e(UT,HQ),e(HQ,vur),e(UT,Fur),e(N,Tur),e(N,JT),e(JT,e4e),e(e4e,Mur),e(JT,Eur),e(JT,UQ),e(UQ,Cur),e(JT,wur),e(N,Aur),e(N,YT),e(YT,o4e),e(o4e,Lur),e(YT,yur),e(YT,JQ),e(JQ,xur),e(YT,$ur),e(N,kur),e(N,KT),e(KT,r4e),e(r4e,Sur),e(KT,Rur),e(KT,YQ),e(YQ,Pur),e(KT,Bur),e(N,Iur),e(N,Xs),e(Xs,t4e),e(t4e,Nur),e(Xs,qur),e(Xs,KQ),e(KQ,jur),e(Xs,Dur),e(Xs,ZQ),e(ZQ,Gur),e(Xs,Our),e(N,Vur),e(N,ZT),e(ZT,a4e),e(a4e,Xur),e(ZT,zur),e(ZT,eH),e(eH,Wur),e(ZT,Qur),e(N,Hur),e(N,eM),e(eM,n4e),e(n4e,Uur),e(eM,Jur),e(eM,oH),e(oH,Yur),e(eM,Kur),e(N,Zur),e(N,oM),e(oM,s4e),e(s4e,e_r),e(oM,o_r),e(oM,rH),e(rH,r_r),e(oM,t_r),e(N,a_r),e(N,rM),e(rM,l4e),e(l4e,n_r),e(rM,s_r),e(rM,tH),e(tH,l_r),e(rM,i_r),e(N,d_r),e(N,tM),e(tM,i4e),e(i4e,c_r),e(tM,f_r),e(tM,aH),e(aH,m_r),e(tM,g_r),e(N,h_r),e(N,aM),e(aM,d4e),e(d4e,p_r),e(aM,u_r),e(aM,nH),e(nH,__r),e(aM,b_r),e(N,v_r),e(N,nM),e(nM,c4e),e(c4e,F_r),e(nM,T_r),e(nM,sH),e(sH,M_r),e(nM,E_r),e(N,C_r),e(N,sM),e(sM,f4e),e(f4e,w_r),e(sM,A_r),e(sM,lH),e(lH,L_r),e(sM,y_r),e(N,x_r),e(N,lM),e(lM,m4e),e(m4e,$_r),e(lM,k_r),e(lM,iH),e(iH,S_r),e(lM,R_r),e(N,P_r),e(N,iM),e(iM,g4e),e(g4e,B_r),e(iM,I_r),e(iM,dH),e(dH,N_r),e(iM,q_r),e(N,j_r),e(N,dM),e(dM,h4e),e(h4e,D_r),e(dM,G_r),e(dM,cH),e(cH,O_r),e(dM,V_r),e(N,X_r),e(N,cM),e(cM,p4e),e(p4e,z_r),e(cM,W_r),e(cM,fH),e(fH,Q_r),e(cM,H_r),e(N,U_r),e(N,fM),e(fM,u4e),e(u4e,J_r),e(fM,Y_r),e(fM,mH),e(mH,K_r),e(fM,Z_r),e(N,e2r),e(N,mM),e(mM,_4e),e(_4e,o2r),e(mM,r2r),e(mM,gH),e(gH,t2r),e(mM,a2r),e(N,n2r),e(N,gM),e(gM,b4e),e(b4e,s2r),e(gM,l2r),e(gM,hH),e(hH,i2r),e(gM,d2r),e(N,c2r),e(N,hM),e(hM,v4e),e(v4e,f2r),e(hM,m2r),e(hM,pH),e(pH,g2r),e(hM,h2r),e(N,p2r),e(N,pM),e(pM,F4e),e(F4e,u2r),e(pM,_2r),e(pM,uH),e(uH,b2r),e(pM,v2r),e(N,F2r),e(N,uM),e(uM,T4e),e(T4e,T2r),e(uM,M2r),e(uM,_H),e(_H,E2r),e(uM,C2r),e(N,w2r),e(N,_M),e(_M,M4e),e(M4e,A2r),e(_M,L2r),e(_M,bH),e(bH,y2r),e(_M,x2r),e(N,$2r),e(N,bM),e(bM,E4e),e(E4e,k2r),e(bM,S2r),e(bM,vH),e(vH,R2r),e(bM,P2r),e(N,B2r),e(N,vM),e(vM,C4e),e(C4e,I2r),e(vM,N2r),e(vM,FH),e(FH,q2r),e(vM,j2r),e(N,D2r),e(N,FM),e(FM,w4e),e(w4e,G2r),e(FM,O2r),e(FM,TH),e(TH,V2r),e(FM,X2r),e(N,z2r),e(N,TM),e(TM,A4e),e(A4e,W2r),e(TM,Q2r),e(TM,MH),e(MH,H2r),e(TM,U2r),e(N,J2r),e(N,MM),e(MM,L4e),e(L4e,Y2r),e(MM,K2r),e(MM,EH),e(EH,Z2r),e(MM,e1r),e(N,o1r),e(N,EM),e(EM,y4e),e(y4e,r1r),e(EM,t1r),e(EM,CH),e(CH,a1r),e(EM,n1r),e(N,s1r),e(N,CM),e(CM,x4e),e(x4e,l1r),e(CM,i1r),e(CM,wH),e(wH,d1r),e(CM,c1r),e(N,f1r),e(N,wM),e(wM,$4e),e($4e,m1r),e(wM,g1r),e(wM,AH),e(AH,h1r),e(wM,p1r),e(N,u1r),e(N,AM),e(AM,k4e),e(k4e,_1r),e(AM,b1r),e(AM,LH),e(LH,v1r),e(AM,F1r),e(N,T1r),e(N,LM),e(LM,S4e),e(S4e,M1r),e(LM,E1r),e(LM,yH),e(yH,C1r),e(LM,w1r),e(N,A1r),e(N,yM),e(yM,R4e),e(R4e,L1r),e(yM,y1r),e(yM,xH),e(xH,x1r),e(yM,$1r),e(Lr,k1r),M(xM,Lr,null),b(f,lOe,_),b(f,tc,_),e(tc,$M),e($M,P4e),M(c9,P4e,null),e(tc,S1r),e(tc,B4e),e(B4e,R1r),b(f,iOe,_),b(f,er,_),M(f9,er,null),e(er,P1r),e(er,ac),e(ac,B1r),e(ac,$H),e($H,I1r),e(ac,N1r),e(ac,kH),e(kH,q1r),e(ac,j1r),e(er,D1r),e(er,m9),e(m9,G1r),e(m9,I4e),e(I4e,O1r),e(m9,V1r),e(er,X1r),e(er,St),M(g9,St,null),e(St,z1r),e(St,N4e),e(N4e,W1r),e(St,Q1r),e(St,nc),e(nc,H1r),e(nc,q4e),e(q4e,U1r),e(nc,J1r),e(nc,SH),e(SH,Y1r),e(nc,K1r),e(St,Z1r),M(kM,St,null),e(er,e7r),e(er,yr),M(h9,yr,null),e(yr,o7r),e(yr,j4e),e(j4e,r7r),e(yr,t7r),e(yr,nn),e(nn,a7r),e(nn,D4e),e(D4e,n7r),e(nn,s7r),e(nn,G4e),e(G4e,l7r),e(nn,i7r),e(nn,O4e),e(O4e,d7r),e(nn,c7r),e(yr,f7r),e(yr,se),e(se,SM),e(SM,V4e),e(V4e,m7r),e(SM,g7r),e(SM,RH),e(RH,h7r),e(SM,p7r),e(se,u7r),e(se,RM),e(RM,X4e),e(X4e,_7r),e(RM,b7r),e(RM,PH),e(PH,v7r),e(RM,F7r),e(se,T7r),e(se,PM),e(PM,z4e),e(z4e,M7r),e(PM,E7r),e(PM,BH),e(BH,C7r),e(PM,w7r),e(se,A7r),e(se,BM),e(BM,W4e),e(W4e,L7r),e(BM,y7r),e(BM,IH),e(IH,x7r),e(BM,$7r),e(se,k7r),e(se,IM),e(IM,Q4e),e(Q4e,S7r),e(IM,R7r),e(IM,NH),e(NH,P7r),e(IM,B7r),e(se,I7r),e(se,NM),e(NM,H4e),e(H4e,N7r),e(NM,q7r),e(NM,qH),e(qH,j7r),e(NM,D7r),e(se,G7r),e(se,qM),e(qM,U4e),e(U4e,O7r),e(qM,V7r),e(qM,jH),e(jH,X7r),e(qM,z7r),e(se,W7r),e(se,jM),e(jM,J4e),e(J4e,Q7r),e(jM,H7r),e(jM,DH),e(DH,U7r),e(jM,J7r),e(se,Y7r),e(se,DM),e(DM,Y4e),e(Y4e,K7r),e(DM,Z7r),e(DM,GH),e(GH,ebr),e(DM,obr),e(se,rbr),e(se,GM),e(GM,K4e),e(K4e,tbr),e(GM,abr),e(GM,OH),e(OH,nbr),e(GM,sbr),e(se,lbr),e(se,OM),e(OM,Z4e),e(Z4e,ibr),e(OM,dbr),e(OM,VH),e(VH,cbr),e(OM,fbr),e(se,mbr),e(se,VM),e(VM,eve),e(eve,gbr),e(VM,hbr),e(VM,XH),e(XH,pbr),e(VM,ubr),e(se,_br),e(se,XM),e(XM,ove),e(ove,bbr),e(XM,vbr),e(XM,zH),e(zH,Fbr),e(XM,Tbr),e(se,Mbr),e(se,zM),e(zM,rve),e(rve,Ebr),e(zM,Cbr),e(zM,WH),e(WH,wbr),e(zM,Abr),e(se,Lbr),e(se,WM),e(WM,tve),e(tve,ybr),e(WM,xbr),e(WM,QH),e(QH,$br),e(WM,kbr),e(se,Sbr),e(se,QM),e(QM,ave),e(ave,Rbr),e(QM,Pbr),e(QM,HH),e(HH,Bbr),e(QM,Ibr),e(se,Nbr),e(se,HM),e(HM,nve),e(nve,qbr),e(HM,jbr),e(HM,UH),e(UH,Dbr),e(HM,Gbr),e(se,Obr),e(se,UM),e(UM,sve),e(sve,Vbr),e(UM,Xbr),e(UM,JH),e(JH,zbr),e(UM,Wbr),e(se,Qbr),e(se,JM),e(JM,lve),e(lve,Hbr),e(JM,Ubr),e(JM,YH),e(YH,Jbr),e(JM,Ybr),e(se,Kbr),e(se,YM),e(YM,ive),e(ive,Zbr),e(YM,e4r),e(YM,KH),e(KH,o4r),e(YM,r4r),e(se,t4r),e(se,KM),e(KM,dve),e(dve,a4r),e(KM,n4r),e(KM,ZH),e(ZH,s4r),e(KM,l4r),e(se,i4r),e(se,ZM),e(ZM,cve),e(cve,d4r),e(ZM,c4r),e(ZM,eU),e(eU,f4r),e(ZM,m4r),e(se,g4r),e(se,eE),e(eE,fve),e(fve,h4r),e(eE,p4r),e(eE,oU),e(oU,u4r),e(eE,_4r),e(yr,b4r),M(oE,yr,null),b(f,dOe,_),b(f,sc,_),e(sc,rE),e(rE,mve),M(p9,mve,null),e(sc,v4r),e(sc,gve),e(gve,F4r),b(f,cOe,_),b(f,or,_),M(u9,or,null),e(or,T4r),e(or,lc),e(lc,M4r),e(lc,rU),e(rU,E4r),e(lc,C4r),e(lc,tU),e(tU,w4r),e(lc,A4r),e(or,L4r),e(or,_9),e(_9,y4r),e(_9,hve),e(hve,x4r),e(_9,$4r),e(or,k4r),e(or,Rt),M(b9,Rt,null),e(Rt,S4r),e(Rt,pve),e(pve,R4r),e(Rt,P4r),e(Rt,ic),e(ic,B4r),e(ic,uve),e(uve,I4r),e(ic,N4r),e(ic,aU),e(aU,q4r),e(ic,j4r),e(Rt,D4r),M(tE,Rt,null),e(or,G4r),e(or,xr),M(v9,xr,null),e(xr,O4r),e(xr,_ve),e(_ve,V4r),e(xr,X4r),e(xr,sn),e(sn,z4r),e(sn,bve),e(bve,W4r),e(sn,Q4r),e(sn,vve),e(vve,H4r),e(sn,U4r),e(sn,Fve),e(Fve,J4r),e(sn,Y4r),e(xr,K4r),e(xr,Me),e(Me,aE),e(aE,Tve),e(Tve,Z4r),e(aE,evr),e(aE,nU),e(nU,ovr),e(aE,rvr),e(Me,tvr),e(Me,nE),e(nE,Mve),e(Mve,avr),e(nE,nvr),e(nE,sU),e(sU,svr),e(nE,lvr),e(Me,ivr),e(Me,sE),e(sE,Eve),e(Eve,dvr),e(sE,cvr),e(sE,lU),e(lU,fvr),e(sE,mvr),e(Me,gvr),e(Me,lE),e(lE,Cve),e(Cve,hvr),e(lE,pvr),e(lE,iU),e(iU,uvr),e(lE,_vr),e(Me,bvr),e(Me,iE),e(iE,wve),e(wve,vvr),e(iE,Fvr),e(iE,dU),e(dU,Tvr),e(iE,Mvr),e(Me,Evr),e(Me,dE),e(dE,Ave),e(Ave,Cvr),e(dE,wvr),e(dE,cU),e(cU,Avr),e(dE,Lvr),e(Me,yvr),e(Me,cE),e(cE,Lve),e(Lve,xvr),e(cE,$vr),e(cE,fU),e(fU,kvr),e(cE,Svr),e(Me,Rvr),e(Me,fE),e(fE,yve),e(yve,Pvr),e(fE,Bvr),e(fE,mU),e(mU,Ivr),e(fE,Nvr),e(Me,qvr),e(Me,mE),e(mE,xve),e(xve,jvr),e(mE,Dvr),e(mE,gU),e(gU,Gvr),e(mE,Ovr),e(Me,Vvr),e(Me,gE),e(gE,$ve),e($ve,Xvr),e(gE,zvr),e(gE,hU),e(hU,Wvr),e(gE,Qvr),e(Me,Hvr),e(Me,hE),e(hE,kve),e(kve,Uvr),e(hE,Jvr),e(hE,pU),e(pU,Yvr),e(hE,Kvr),e(Me,Zvr),e(Me,pE),e(pE,Sve),e(Sve,eFr),e(pE,oFr),e(pE,uU),e(uU,rFr),e(pE,tFr),e(Me,aFr),e(Me,uE),e(uE,Rve),e(Rve,nFr),e(uE,sFr),e(uE,_U),e(_U,lFr),e(uE,iFr),e(xr,dFr),M(_E,xr,null),b(f,fOe,_),b(f,dc,_),e(dc,bE),e(bE,Pve),M(F9,Pve,null),e(dc,cFr),e(dc,Bve),e(Bve,fFr),b(f,mOe,_),b(f,rr,_),M(T9,rr,null),e(rr,mFr),e(rr,cc),e(cc,gFr),e(cc,bU),e(bU,hFr),e(cc,pFr),e(cc,vU),e(vU,uFr),e(cc,_Fr),e(rr,bFr),e(rr,M9),e(M9,vFr),e(M9,Ive),e(Ive,FFr),e(M9,TFr),e(rr,MFr),e(rr,Pt),M(E9,Pt,null),e(Pt,EFr),e(Pt,Nve),e(Nve,CFr),e(Pt,wFr),e(Pt,fc),e(fc,AFr),e(fc,qve),e(qve,LFr),e(fc,yFr),e(fc,FU),e(FU,xFr),e(fc,$Fr),e(Pt,kFr),M(vE,Pt,null),e(rr,SFr),e(rr,$r),M(C9,$r,null),e($r,RFr),e($r,jve),e(jve,PFr),e($r,BFr),e($r,ln),e(ln,IFr),e(ln,Dve),e(Dve,NFr),e(ln,qFr),e(ln,Gve),e(Gve,jFr),e(ln,DFr),e(ln,Ove),e(Ove,GFr),e(ln,OFr),e($r,VFr),e($r,rt),e(rt,FE),e(FE,Vve),e(Vve,XFr),e(FE,zFr),e(FE,TU),e(TU,WFr),e(FE,QFr),e(rt,HFr),e(rt,TE),e(TE,Xve),e(Xve,UFr),e(TE,JFr),e(TE,MU),e(MU,YFr),e(TE,KFr),e(rt,ZFr),e(rt,ME),e(ME,zve),e(zve,eTr),e(ME,oTr),e(ME,EU),e(EU,rTr),e(ME,tTr),e(rt,aTr),e(rt,EE),e(EE,Wve),e(Wve,nTr),e(EE,sTr),e(EE,CU),e(CU,lTr),e(EE,iTr),e(rt,dTr),e(rt,CE),e(CE,Qve),e(Qve,cTr),e(CE,fTr),e(CE,wU),e(wU,mTr),e(CE,gTr),e($r,hTr),M(wE,$r,null),b(f,gOe,_),b(f,mc,_),e(mc,AE),e(AE,Hve),M(w9,Hve,null),e(mc,pTr),e(mc,Uve),e(Uve,uTr),b(f,hOe,_),b(f,tr,_),M(A9,tr,null),e(tr,_Tr),e(tr,gc),e(gc,bTr),e(gc,AU),e(AU,vTr),e(gc,FTr),e(gc,LU),e(LU,TTr),e(gc,MTr),e(tr,ETr),e(tr,L9),e(L9,CTr),e(L9,Jve),e(Jve,wTr),e(L9,ATr),e(tr,LTr),e(tr,Bt),M(y9,Bt,null),e(Bt,yTr),e(Bt,Yve),e(Yve,xTr),e(Bt,$Tr),e(Bt,hc),e(hc,kTr),e(hc,Kve),e(Kve,STr),e(hc,RTr),e(hc,yU),e(yU,PTr),e(hc,BTr),e(Bt,ITr),M(LE,Bt,null),e(tr,NTr),e(tr,kr),M(x9,kr,null),e(kr,qTr),e(kr,Zve),e(Zve,jTr),e(kr,DTr),e(kr,dn),e(dn,GTr),e(dn,eFe),e(eFe,OTr),e(dn,VTr),e(dn,oFe),e(oFe,XTr),e(dn,zTr),e(dn,rFe),e(rFe,WTr),e(dn,QTr),e(kr,HTr),e(kr,ie),e(ie,yE),e(yE,tFe),e(tFe,UTr),e(yE,JTr),e(yE,xU),e(xU,YTr),e(yE,KTr),e(ie,ZTr),e(ie,xE),e(xE,aFe),e(aFe,eMr),e(xE,oMr),e(xE,$U),e($U,rMr),e(xE,tMr),e(ie,aMr),e(ie,$E),e($E,nFe),e(nFe,nMr),e($E,sMr),e($E,kU),e(kU,lMr),e($E,iMr),e(ie,dMr),e(ie,kE),e(kE,sFe),e(sFe,cMr),e(kE,fMr),e(kE,SU),e(SU,mMr),e(kE,gMr),e(ie,hMr),e(ie,SE),e(SE,lFe),e(lFe,pMr),e(SE,uMr),e(SE,RU),e(RU,_Mr),e(SE,bMr),e(ie,vMr),e(ie,RE),e(RE,iFe),e(iFe,FMr),e(RE,TMr),e(RE,PU),e(PU,MMr),e(RE,EMr),e(ie,CMr),e(ie,PE),e(PE,dFe),e(dFe,wMr),e(PE,AMr),e(PE,BU),e(BU,LMr),e(PE,yMr),e(ie,xMr),e(ie,BE),e(BE,cFe),e(cFe,$Mr),e(BE,kMr),e(BE,IU),e(IU,SMr),e(BE,RMr),e(ie,PMr),e(ie,IE),e(IE,fFe),e(fFe,BMr),e(IE,IMr),e(IE,NU),e(NU,NMr),e(IE,qMr),e(ie,jMr),e(ie,NE),e(NE,mFe),e(mFe,DMr),e(NE,GMr),e(NE,qU),e(qU,OMr),e(NE,VMr),e(ie,XMr),e(ie,qE),e(qE,gFe),e(gFe,zMr),e(qE,WMr),e(qE,jU),e(jU,QMr),e(qE,HMr),e(ie,UMr),e(ie,jE),e(jE,hFe),e(hFe,JMr),e(jE,YMr),e(jE,DU),e(DU,KMr),e(jE,ZMr),e(ie,eEr),e(ie,DE),e(DE,pFe),e(pFe,oEr),e(DE,rEr),e(DE,GU),e(GU,tEr),e(DE,aEr),e(ie,nEr),e(ie,GE),e(GE,uFe),e(uFe,sEr),e(GE,lEr),e(GE,OU),e(OU,iEr),e(GE,dEr),e(ie,cEr),e(ie,OE),e(OE,_Fe),e(_Fe,fEr),e(OE,mEr),e(OE,VU),e(VU,gEr),e(OE,hEr),e(ie,pEr),e(ie,VE),e(VE,bFe),e(bFe,uEr),e(VE,_Er),e(VE,XU),e(XU,bEr),e(VE,vEr),e(ie,FEr),e(ie,XE),e(XE,vFe),e(vFe,TEr),e(XE,MEr),e(XE,zU),e(zU,EEr),e(XE,CEr),e(ie,wEr),e(ie,zE),e(zE,FFe),e(FFe,AEr),e(zE,LEr),e(zE,WU),e(WU,yEr),e(zE,xEr),e(ie,$Er),e(ie,WE),e(WE,TFe),e(TFe,kEr),e(WE,SEr),e(WE,QU),e(QU,REr),e(WE,PEr),e(ie,BEr),e(ie,QE),e(QE,MFe),e(MFe,IEr),e(QE,NEr),e(QE,HU),e(HU,qEr),e(QE,jEr),e(kr,DEr),M(HE,kr,null),b(f,pOe,_),b(f,pc,_),e(pc,UE),e(UE,EFe),M($9,EFe,null),e(pc,GEr),e(pc,CFe),e(CFe,OEr),b(f,uOe,_),b(f,ar,_),M(k9,ar,null),e(ar,VEr),e(ar,uc),e(uc,XEr),e(uc,UU),e(UU,zEr),e(uc,WEr),e(uc,JU),e(JU,QEr),e(uc,HEr),e(ar,UEr),e(ar,S9),e(S9,JEr),e(S9,wFe),e(wFe,YEr),e(S9,KEr),e(ar,ZEr),e(ar,It),M(R9,It,null),e(It,eCr),e(It,AFe),e(AFe,oCr),e(It,rCr),e(It,_c),e(_c,tCr),e(_c,LFe),e(LFe,aCr),e(_c,nCr),e(_c,YU),e(YU,sCr),e(_c,lCr),e(It,iCr),M(JE,It,null),e(ar,dCr),e(ar,Sr),M(P9,Sr,null),e(Sr,cCr),e(Sr,yFe),e(yFe,fCr),e(Sr,mCr),e(Sr,cn),e(cn,gCr),e(cn,xFe),e(xFe,hCr),e(cn,pCr),e(cn,$Fe),e($Fe,uCr),e(cn,_Cr),e(cn,kFe),e(kFe,bCr),e(cn,vCr),e(Sr,FCr),e(Sr,ye),e(ye,YE),e(YE,SFe),e(SFe,TCr),e(YE,MCr),e(YE,KU),e(KU,ECr),e(YE,CCr),e(ye,wCr),e(ye,KE),e(KE,RFe),e(RFe,ACr),e(KE,LCr),e(KE,ZU),e(ZU,yCr),e(KE,xCr),e(ye,$Cr),e(ye,ZE),e(ZE,PFe),e(PFe,kCr),e(ZE,SCr),e(ZE,eJ),e(eJ,RCr),e(ZE,PCr),e(ye,BCr),e(ye,eC),e(eC,BFe),e(BFe,ICr),e(eC,NCr),e(eC,oJ),e(oJ,qCr),e(eC,jCr),e(ye,DCr),e(ye,oC),e(oC,IFe),e(IFe,GCr),e(oC,OCr),e(oC,rJ),e(rJ,VCr),e(oC,XCr),e(ye,zCr),e(ye,rC),e(rC,NFe),e(NFe,WCr),e(rC,QCr),e(rC,tJ),e(tJ,HCr),e(rC,UCr),e(ye,JCr),e(ye,tC),e(tC,qFe),e(qFe,YCr),e(tC,KCr),e(tC,aJ),e(aJ,ZCr),e(tC,e5r),e(ye,o5r),e(ye,aC),e(aC,jFe),e(jFe,r5r),e(aC,t5r),e(aC,nJ),e(nJ,a5r),e(aC,n5r),e(ye,s5r),e(ye,nC),e(nC,DFe),e(DFe,l5r),e(nC,i5r),e(nC,sJ),e(sJ,d5r),e(nC,c5r),e(ye,f5r),e(ye,sC),e(sC,GFe),e(GFe,m5r),e(sC,g5r),e(sC,lJ),e(lJ,h5r),e(sC,p5r),e(Sr,u5r),M(lC,Sr,null),b(f,_Oe,_),b(f,bc,_),e(bc,iC),e(iC,OFe),M(B9,OFe,null),e(bc,_5r),e(bc,VFe),e(VFe,b5r),b(f,bOe,_),b(f,nr,_),M(I9,nr,null),e(nr,v5r),e(nr,vc),e(vc,F5r),e(vc,iJ),e(iJ,T5r),e(vc,M5r),e(vc,dJ),e(dJ,E5r),e(vc,C5r),e(nr,w5r),e(nr,N9),e(N9,A5r),e(N9,XFe),e(XFe,L5r),e(N9,y5r),e(nr,x5r),e(nr,Nt),M(q9,Nt,null),e(Nt,$5r),e(Nt,zFe),e(zFe,k5r),e(Nt,S5r),e(Nt,Fc),e(Fc,R5r),e(Fc,WFe),e(WFe,P5r),e(Fc,B5r),e(Fc,cJ),e(cJ,I5r),e(Fc,N5r),e(Nt,q5r),M(dC,Nt,null),e(nr,j5r),e(nr,Rr),M(j9,Rr,null),e(Rr,D5r),e(Rr,QFe),e(QFe,G5r),e(Rr,O5r),e(Rr,fn),e(fn,V5r),e(fn,HFe),e(HFe,X5r),e(fn,z5r),e(fn,UFe),e(UFe,W5r),e(fn,Q5r),e(fn,JFe),e(JFe,H5r),e(fn,U5r),e(Rr,J5r),e(Rr,te),e(te,cC),e(cC,YFe),e(YFe,Y5r),e(cC,K5r),e(cC,fJ),e(fJ,Z5r),e(cC,e3r),e(te,o3r),e(te,fC),e(fC,KFe),e(KFe,r3r),e(fC,t3r),e(fC,mJ),e(mJ,a3r),e(fC,n3r),e(te,s3r),e(te,mC),e(mC,ZFe),e(ZFe,l3r),e(mC,i3r),e(mC,gJ),e(gJ,d3r),e(mC,c3r),e(te,f3r),e(te,gC),e(gC,eTe),e(eTe,m3r),e(gC,g3r),e(gC,hJ),e(hJ,h3r),e(gC,p3r),e(te,u3r),e(te,hC),e(hC,oTe),e(oTe,_3r),e(hC,b3r),e(hC,pJ),e(pJ,v3r),e(hC,F3r),e(te,T3r),e(te,pC),e(pC,rTe),e(rTe,M3r),e(pC,E3r),e(pC,uJ),e(uJ,C3r),e(pC,w3r),e(te,A3r),e(te,uC),e(uC,tTe),e(tTe,L3r),e(uC,y3r),e(uC,_J),e(_J,x3r),e(uC,$3r),e(te,k3r),e(te,_C),e(_C,aTe),e(aTe,S3r),e(_C,R3r),e(_C,bJ),e(bJ,P3r),e(_C,B3r),e(te,I3r),e(te,bC),e(bC,nTe),e(nTe,N3r),e(bC,q3r),e(bC,vJ),e(vJ,j3r),e(bC,D3r),e(te,G3r),e(te,vC),e(vC,sTe),e(sTe,O3r),e(vC,V3r),e(vC,FJ),e(FJ,X3r),e(vC,z3r),e(te,W3r),e(te,FC),e(FC,lTe),e(lTe,Q3r),e(FC,H3r),e(FC,TJ),e(TJ,U3r),e(FC,J3r),e(te,Y3r),e(te,TC),e(TC,iTe),e(iTe,K3r),e(TC,Z3r),e(TC,MJ),e(MJ,e0r),e(TC,o0r),e(te,r0r),e(te,MC),e(MC,dTe),e(dTe,t0r),e(MC,a0r),e(MC,EJ),e(EJ,n0r),e(MC,s0r),e(te,l0r),e(te,EC),e(EC,cTe),e(cTe,i0r),e(EC,d0r),e(EC,CJ),e(CJ,c0r),e(EC,f0r),e(te,m0r),e(te,CC),e(CC,fTe),e(fTe,g0r),e(CC,h0r),e(CC,wJ),e(wJ,p0r),e(CC,u0r),e(te,_0r),e(te,wC),e(wC,mTe),e(mTe,b0r),e(wC,v0r),e(wC,AJ),e(AJ,F0r),e(wC,T0r),e(te,M0r),e(te,AC),e(AC,gTe),e(gTe,E0r),e(AC,C0r),e(AC,LJ),e(LJ,w0r),e(AC,A0r),e(te,L0r),e(te,LC),e(LC,hTe),e(hTe,y0r),e(LC,x0r),e(LC,yJ),e(yJ,$0r),e(LC,k0r),e(te,S0r),e(te,yC),e(yC,pTe),e(pTe,R0r),e(yC,P0r),e(yC,xJ),e(xJ,B0r),e(yC,I0r),e(te,N0r),e(te,xC),e(xC,uTe),e(uTe,q0r),e(xC,j0r),e(xC,$J),e($J,D0r),e(xC,G0r),e(te,O0r),e(te,$C),e($C,_Te),e(_Te,V0r),e($C,X0r),e($C,kJ),e(kJ,z0r),e($C,W0r),e(te,Q0r),e(te,kC),e(kC,bTe),e(bTe,H0r),e(kC,U0r),e(kC,SJ),e(SJ,J0r),e(kC,Y0r),e(te,K0r),e(te,SC),e(SC,vTe),e(vTe,Z0r),e(SC,ewr),e(SC,RJ),e(RJ,owr),e(SC,rwr),e(te,twr),e(te,RC),e(RC,FTe),e(FTe,awr),e(RC,nwr),e(RC,PJ),e(PJ,swr),e(RC,lwr),e(te,iwr),e(te,PC),e(PC,TTe),e(TTe,dwr),e(PC,cwr),e(PC,BJ),e(BJ,fwr),e(PC,mwr),e(te,gwr),e(te,BC),e(BC,MTe),e(MTe,hwr),e(BC,pwr),e(BC,IJ),e(IJ,uwr),e(BC,_wr),e(Rr,bwr),M(IC,Rr,null),b(f,vOe,_),b(f,Tc,_),e(Tc,NC),e(NC,ETe),M(D9,ETe,null),e(Tc,vwr),e(Tc,CTe),e(CTe,Fwr),b(f,FOe,_),b(f,sr,_),M(G9,sr,null),e(sr,Twr),e(sr,Mc),e(Mc,Mwr),e(Mc,NJ),e(NJ,Ewr),e(Mc,Cwr),e(Mc,qJ),e(qJ,wwr),e(Mc,Awr),e(sr,Lwr),e(sr,O9),e(O9,ywr),e(O9,wTe),e(wTe,xwr),e(O9,$wr),e(sr,kwr),e(sr,qt),M(V9,qt,null),e(qt,Swr),e(qt,ATe),e(ATe,Rwr),e(qt,Pwr),e(qt,Ec),e(Ec,Bwr),e(Ec,LTe),e(LTe,Iwr),e(Ec,Nwr),e(Ec,jJ),e(jJ,qwr),e(Ec,jwr),e(qt,Dwr),M(qC,qt,null),e(sr,Gwr),e(sr,Pr),M(X9,Pr,null),e(Pr,Owr),e(Pr,yTe),e(yTe,Vwr),e(Pr,Xwr),e(Pr,mn),e(mn,zwr),e(mn,xTe),e(xTe,Wwr),e(mn,Qwr),e(mn,$Te),e($Te,Hwr),e(mn,Uwr),e(mn,kTe),e(kTe,Jwr),e(mn,Ywr),e(Pr,Kwr),e(Pr,ue),e(ue,jC),e(jC,STe),e(STe,Zwr),e(jC,eAr),e(jC,DJ),e(DJ,oAr),e(jC,rAr),e(ue,tAr),e(ue,DC),e(DC,RTe),e(RTe,aAr),e(DC,nAr),e(DC,GJ),e(GJ,sAr),e(DC,lAr),e(ue,iAr),e(ue,GC),e(GC,PTe),e(PTe,dAr),e(GC,cAr),e(GC,OJ),e(OJ,fAr),e(GC,mAr),e(ue,gAr),e(ue,OC),e(OC,BTe),e(BTe,hAr),e(OC,pAr),e(OC,VJ),e(VJ,uAr),e(OC,_Ar),e(ue,bAr),e(ue,VC),e(VC,ITe),e(ITe,vAr),e(VC,FAr),e(VC,XJ),e(XJ,TAr),e(VC,MAr),e(ue,EAr),e(ue,XC),e(XC,NTe),e(NTe,CAr),e(XC,wAr),e(XC,zJ),e(zJ,AAr),e(XC,LAr),e(ue,yAr),e(ue,zC),e(zC,qTe),e(qTe,xAr),e(zC,$Ar),e(zC,WJ),e(WJ,kAr),e(zC,SAr),e(ue,RAr),e(ue,WC),e(WC,jTe),e(jTe,PAr),e(WC,BAr),e(WC,QJ),e(QJ,IAr),e(WC,NAr),e(ue,qAr),e(ue,QC),e(QC,DTe),e(DTe,jAr),e(QC,DAr),e(QC,HJ),e(HJ,GAr),e(QC,OAr),e(ue,VAr),e(ue,HC),e(HC,GTe),e(GTe,XAr),e(HC,zAr),e(HC,UJ),e(UJ,WAr),e(HC,QAr),e(ue,HAr),e(ue,UC),e(UC,OTe),e(OTe,UAr),e(UC,JAr),e(UC,JJ),e(JJ,YAr),e(UC,KAr),e(ue,ZAr),e(ue,JC),e(JC,VTe),e(VTe,e6r),e(JC,o6r),e(JC,YJ),e(YJ,r6r),e(JC,t6r),e(ue,a6r),e(ue,YC),e(YC,XTe),e(XTe,n6r),e(YC,s6r),e(YC,KJ),e(KJ,l6r),e(YC,i6r),e(ue,d6r),e(ue,KC),e(KC,zTe),e(zTe,c6r),e(KC,f6r),e(KC,ZJ),e(ZJ,m6r),e(KC,g6r),e(ue,h6r),e(ue,ZC),e(ZC,WTe),e(WTe,p6r),e(ZC,u6r),e(ZC,eY),e(eY,_6r),e(ZC,b6r),e(ue,v6r),e(ue,e5),e(e5,QTe),e(QTe,F6r),e(e5,T6r),e(e5,oY),e(oY,M6r),e(e5,E6r),e(ue,C6r),e(ue,o5),e(o5,HTe),e(HTe,w6r),e(o5,A6r),e(o5,rY),e(rY,L6r),e(o5,y6r),e(Pr,x6r),M(r5,Pr,null),b(f,TOe,_),b(f,Cc,_),e(Cc,t5),e(t5,UTe),M(z9,UTe,null),e(Cc,$6r),e(Cc,JTe),e(JTe,k6r),b(f,MOe,_),b(f,lr,_),M(W9,lr,null),e(lr,S6r),e(lr,wc),e(wc,R6r),e(wc,tY),e(tY,P6r),e(wc,B6r),e(wc,aY),e(aY,I6r),e(wc,N6r),e(lr,q6r),e(lr,Q9),e(Q9,j6r),e(Q9,YTe),e(YTe,D6r),e(Q9,G6r),e(lr,O6r),e(lr,jt),M(H9,jt,null),e(jt,V6r),e(jt,KTe),e(KTe,X6r),e(jt,z6r),e(jt,Ac),e(Ac,W6r),e(Ac,ZTe),e(ZTe,Q6r),e(Ac,H6r),e(Ac,nY),e(nY,U6r),e(Ac,J6r),e(jt,Y6r),M(a5,jt,null),e(lr,K6r),e(lr,Br),M(U9,Br,null),e(Br,Z6r),e(Br,eMe),e(eMe,eLr),e(Br,oLr),e(Br,gn),e(gn,rLr),e(gn,oMe),e(oMe,tLr),e(gn,aLr),e(gn,rMe),e(rMe,nLr),e(gn,sLr),e(gn,tMe),e(tMe,lLr),e(gn,iLr),e(Br,dLr),e(Br,J9),e(J9,n5),e(n5,aMe),e(aMe,cLr),e(n5,fLr),e(n5,sY),e(sY,mLr),e(n5,gLr),e(J9,hLr),e(J9,s5),e(s5,nMe),e(nMe,pLr),e(s5,uLr),e(s5,lY),e(lY,_Lr),e(s5,bLr),e(Br,vLr),M(l5,Br,null),b(f,EOe,_),b(f,Lc,_),e(Lc,i5),e(i5,sMe),M(Y9,sMe,null),e(Lc,FLr),e(Lc,lMe),e(lMe,TLr),b(f,COe,_),b(f,ir,_),M(K9,ir,null),e(ir,MLr),e(ir,yc),e(yc,ELr),e(yc,iY),e(iY,CLr),e(yc,wLr),e(yc,dY),e(dY,ALr),e(yc,LLr),e(ir,yLr),e(ir,Z9),e(Z9,xLr),e(Z9,iMe),e(iMe,$Lr),e(Z9,kLr),e(ir,SLr),e(ir,Dt),M(ex,Dt,null),e(Dt,RLr),e(Dt,dMe),e(dMe,PLr),e(Dt,BLr),e(Dt,xc),e(xc,ILr),e(xc,cMe),e(cMe,NLr),e(xc,qLr),e(xc,cY),e(cY,jLr),e(xc,DLr),e(Dt,GLr),M(d5,Dt,null),e(ir,OLr),e(ir,Ir),M(ox,Ir,null),e(Ir,VLr),e(Ir,fMe),e(fMe,XLr),e(Ir,zLr),e(Ir,hn),e(hn,WLr),e(hn,mMe),e(mMe,QLr),e(hn,HLr),e(hn,gMe),e(gMe,ULr),e(hn,JLr),e(hn,hMe),e(hMe,YLr),e(hn,KLr),e(Ir,ZLr),e(Ir,pMe),e(pMe,c5),e(c5,uMe),e(uMe,eyr),e(c5,oyr),e(c5,fY),e(fY,ryr),e(c5,tyr),e(Ir,ayr),M(f5,Ir,null),b(f,wOe,_),b(f,$c,_),e($c,m5),e(m5,_Me),M(rx,_Me,null),e($c,nyr),e($c,bMe),e(bMe,syr),b(f,AOe,_),b(f,dr,_),M(tx,dr,null),e(dr,lyr),e(dr,kc),e(kc,iyr),e(kc,mY),e(mY,dyr),e(kc,cyr),e(kc,gY),e(gY,fyr),e(kc,myr),e(dr,gyr),e(dr,ax),e(ax,hyr),e(ax,vMe),e(vMe,pyr),e(ax,uyr),e(dr,_yr),e(dr,Gt),M(nx,Gt,null),e(Gt,byr),e(Gt,FMe),e(FMe,vyr),e(Gt,Fyr),e(Gt,Sc),e(Sc,Tyr),e(Sc,TMe),e(TMe,Myr),e(Sc,Eyr),e(Sc,hY),e(hY,Cyr),e(Sc,wyr),e(Gt,Ayr),M(g5,Gt,null),e(dr,Lyr),e(dr,Nr),M(sx,Nr,null),e(Nr,yyr),e(Nr,MMe),e(MMe,xyr),e(Nr,$yr),e(Nr,pn),e(pn,kyr),e(pn,EMe),e(EMe,Syr),e(pn,Ryr),e(pn,CMe),e(CMe,Pyr),e(pn,Byr),e(pn,wMe),e(wMe,Iyr),e(pn,Nyr),e(Nr,qyr),e(Nr,de),e(de,h5),e(h5,AMe),e(AMe,jyr),e(h5,Dyr),e(h5,pY),e(pY,Gyr),e(h5,Oyr),e(de,Vyr),e(de,p5),e(p5,LMe),e(LMe,Xyr),e(p5,zyr),e(p5,uY),e(uY,Wyr),e(p5,Qyr),e(de,Hyr),e(de,u5),e(u5,yMe),e(yMe,Uyr),e(u5,Jyr),e(u5,_Y),e(_Y,Yyr),e(u5,Kyr),e(de,Zyr),e(de,_5),e(_5,xMe),e(xMe,e8r),e(_5,o8r),e(_5,bY),e(bY,r8r),e(_5,t8r),e(de,a8r),e(de,b5),e(b5,$Me),e($Me,n8r),e(b5,s8r),e(b5,vY),e(vY,l8r),e(b5,i8r),e(de,d8r),e(de,v5),e(v5,kMe),e(kMe,c8r),e(v5,f8r),e(v5,FY),e(FY,m8r),e(v5,g8r),e(de,h8r),e(de,F5),e(F5,SMe),e(SMe,p8r),e(F5,u8r),e(F5,TY),e(TY,_8r),e(F5,b8r),e(de,v8r),e(de,T5),e(T5,RMe),e(RMe,F8r),e(T5,T8r),e(T5,MY),e(MY,M8r),e(T5,E8r),e(de,C8r),e(de,M5),e(M5,PMe),e(PMe,w8r),e(M5,A8r),e(M5,EY),e(EY,L8r),e(M5,y8r),e(de,x8r),e(de,E5),e(E5,BMe),e(BMe,$8r),e(E5,k8r),e(E5,CY),e(CY,S8r),e(E5,R8r),e(de,P8r),e(de,C5),e(C5,IMe),e(IMe,B8r),e(C5,I8r),e(C5,wY),e(wY,N8r),e(C5,q8r),e(de,j8r),e(de,w5),e(w5,NMe),e(NMe,D8r),e(w5,G8r),e(w5,AY),e(AY,O8r),e(w5,V8r),e(de,X8r),e(de,A5),e(A5,qMe),e(qMe,z8r),e(A5,W8r),e(A5,LY),e(LY,Q8r),e(A5,H8r),e(de,U8r),e(de,L5),e(L5,jMe),e(jMe,J8r),e(L5,Y8r),e(L5,yY),e(yY,K8r),e(L5,Z8r),e(de,e9r),e(de,y5),e(y5,DMe),e(DMe,o9r),e(y5,r9r),e(y5,xY),e(xY,t9r),e(y5,a9r),e(de,n9r),e(de,x5),e(x5,GMe),e(GMe,s9r),e(x5,l9r),e(x5,$Y),e($Y,i9r),e(x5,d9r),e(de,c9r),e(de,$5),e($5,OMe),e(OMe,f9r),e($5,m9r),e($5,kY),e(kY,g9r),e($5,h9r),e(de,p9r),e(de,k5),e(k5,VMe),e(VMe,u9r),e(k5,_9r),e(k5,SY),e(SY,b9r),e(k5,v9r),e(de,F9r),e(de,S5),e(S5,XMe),e(XMe,T9r),e(S5,M9r),e(S5,RY),e(RY,E9r),e(S5,C9r),e(de,w9r),e(de,R5),e(R5,zMe),e(zMe,A9r),e(R5,L9r),e(R5,PY),e(PY,y9r),e(R5,x9r),e(Nr,$9r),M(P5,Nr,null),b(f,LOe,_),b(f,Rc,_),e(Rc,B5),e(B5,WMe),M(lx,WMe,null),e(Rc,k9r),e(Rc,QMe),e(QMe,S9r),b(f,yOe,_),b(f,cr,_),M(ix,cr,null),e(cr,R9r),e(cr,Pc),e(Pc,P9r),e(Pc,BY),e(BY,B9r),e(Pc,I9r),e(Pc,IY),e(IY,N9r),e(Pc,q9r),e(cr,j9r),e(cr,dx),e(dx,D9r),e(dx,HMe),e(HMe,G9r),e(dx,O9r),e(cr,V9r),e(cr,Ot),M(cx,Ot,null),e(Ot,X9r),e(Ot,UMe),e(UMe,z9r),e(Ot,W9r),e(Ot,Bc),e(Bc,Q9r),e(Bc,JMe),e(JMe,H9r),e(Bc,U9r),e(Bc,NY),e(NY,J9r),e(Bc,Y9r),e(Ot,K9r),M(I5,Ot,null),e(cr,Z9r),e(cr,qr),M(fx,qr,null),e(qr,exr),e(qr,YMe),e(YMe,oxr),e(qr,rxr),e(qr,un),e(un,txr),e(un,KMe),e(KMe,axr),e(un,nxr),e(un,ZMe),e(ZMe,sxr),e(un,lxr),e(un,eEe),e(eEe,ixr),e(un,dxr),e(qr,cxr),e(qr,ce),e(ce,N5),e(N5,oEe),e(oEe,fxr),e(N5,mxr),e(N5,qY),e(qY,gxr),e(N5,hxr),e(ce,pxr),e(ce,q5),e(q5,rEe),e(rEe,uxr),e(q5,_xr),e(q5,jY),e(jY,bxr),e(q5,vxr),e(ce,Fxr),e(ce,j5),e(j5,tEe),e(tEe,Txr),e(j5,Mxr),e(j5,DY),e(DY,Exr),e(j5,Cxr),e(ce,wxr),e(ce,D5),e(D5,aEe),e(aEe,Axr),e(D5,Lxr),e(D5,GY),e(GY,yxr),e(D5,xxr),e(ce,$xr),e(ce,G5),e(G5,nEe),e(nEe,kxr),e(G5,Sxr),e(G5,OY),e(OY,Rxr),e(G5,Pxr),e(ce,Bxr),e(ce,O5),e(O5,sEe),e(sEe,Ixr),e(O5,Nxr),e(O5,VY),e(VY,qxr),e(O5,jxr),e(ce,Dxr),e(ce,V5),e(V5,lEe),e(lEe,Gxr),e(V5,Oxr),e(V5,XY),e(XY,Vxr),e(V5,Xxr),e(ce,zxr),e(ce,X5),e(X5,iEe),e(iEe,Wxr),e(X5,Qxr),e(X5,zY),e(zY,Hxr),e(X5,Uxr),e(ce,Jxr),e(ce,z5),e(z5,dEe),e(dEe,Yxr),e(z5,Kxr),e(z5,WY),e(WY,Zxr),e(z5,e$r),e(ce,o$r),e(ce,W5),e(W5,cEe),e(cEe,r$r),e(W5,t$r),e(W5,QY),e(QY,a$r),e(W5,n$r),e(ce,s$r),e(ce,Q5),e(Q5,fEe),e(fEe,l$r),e(Q5,i$r),e(Q5,HY),e(HY,d$r),e(Q5,c$r),e(ce,f$r),e(ce,H5),e(H5,mEe),e(mEe,m$r),e(H5,g$r),e(H5,UY),e(UY,h$r),e(H5,p$r),e(ce,u$r),e(ce,U5),e(U5,gEe),e(gEe,_$r),e(U5,b$r),e(U5,JY),e(JY,v$r),e(U5,F$r),e(ce,T$r),e(ce,J5),e(J5,hEe),e(hEe,M$r),e(J5,E$r),e(J5,YY),e(YY,C$r),e(J5,w$r),e(ce,A$r),e(ce,Y5),e(Y5,pEe),e(pEe,L$r),e(Y5,y$r),e(Y5,KY),e(KY,x$r),e(Y5,$$r),e(ce,k$r),e(ce,K5),e(K5,uEe),e(uEe,S$r),e(K5,R$r),e(K5,ZY),e(ZY,P$r),e(K5,B$r),e(ce,I$r),e(ce,Z5),e(Z5,_Ee),e(_Ee,N$r),e(Z5,q$r),e(Z5,eK),e(eK,j$r),e(Z5,D$r),e(ce,G$r),e(ce,e3),e(e3,bEe),e(bEe,O$r),e(e3,V$r),e(e3,oK),e(oK,X$r),e(e3,z$r),e(ce,W$r),e(ce,o3),e(o3,vEe),e(vEe,Q$r),e(o3,H$r),e(o3,rK),e(rK,U$r),e(o3,J$r),e(ce,Y$r),e(ce,r3),e(r3,FEe),e(FEe,K$r),e(r3,Z$r),e(r3,tK),e(tK,ekr),e(r3,okr),e(qr,rkr),M(t3,qr,null),b(f,xOe,_),b(f,Ic,_),e(Ic,a3),e(a3,TEe),M(mx,TEe,null),e(Ic,tkr),e(Ic,MEe),e(MEe,akr),b(f,$Oe,_),b(f,fr,_),M(gx,fr,null),e(fr,nkr),e(fr,Nc),e(Nc,skr),e(Nc,aK),e(aK,lkr),e(Nc,ikr),e(Nc,nK),e(nK,dkr),e(Nc,ckr),e(fr,fkr),e(fr,hx),e(hx,mkr),e(hx,EEe),e(EEe,gkr),e(hx,hkr),e(fr,pkr),e(fr,Vt),M(px,Vt,null),e(Vt,ukr),e(Vt,CEe),e(CEe,_kr),e(Vt,bkr),e(Vt,qc),e(qc,vkr),e(qc,wEe),e(wEe,Fkr),e(qc,Tkr),e(qc,sK),e(sK,Mkr),e(qc,Ekr),e(Vt,Ckr),M(n3,Vt,null),e(fr,wkr),e(fr,jr),M(ux,jr,null),e(jr,Akr),e(jr,AEe),e(AEe,Lkr),e(jr,ykr),e(jr,_n),e(_n,xkr),e(_n,LEe),e(LEe,$kr),e(_n,kkr),e(_n,yEe),e(yEe,Skr),e(_n,Rkr),e(_n,xEe),e(xEe,Pkr),e(_n,Bkr),e(jr,Ikr),e(jr,$Ee),e($Ee,s3),e(s3,kEe),e(kEe,Nkr),e(s3,qkr),e(s3,lK),e(lK,jkr),e(s3,Dkr),e(jr,Gkr),M(l3,jr,null),b(f,kOe,_),b(f,jc,_),e(jc,i3),e(i3,SEe),M(_x,SEe,null),e(jc,Okr),e(jc,REe),e(REe,Vkr),b(f,SOe,_),b(f,mr,_),M(bx,mr,null),e(mr,Xkr),e(mr,Dc),e(Dc,zkr),e(Dc,iK),e(iK,Wkr),e(Dc,Qkr),e(Dc,dK),e(dK,Hkr),e(Dc,Ukr),e(mr,Jkr),e(mr,vx),e(vx,Ykr),e(vx,PEe),e(PEe,Kkr),e(vx,Zkr),e(mr,eSr),e(mr,Xt),M(Fx,Xt,null),e(Xt,oSr),e(Xt,BEe),e(BEe,rSr),e(Xt,tSr),e(Xt,Gc),e(Gc,aSr),e(Gc,IEe),e(IEe,nSr),e(Gc,sSr),e(Gc,cK),e(cK,lSr),e(Gc,iSr),e(Xt,dSr),M(d3,Xt,null),e(mr,cSr),e(mr,Dr),M(Tx,Dr,null),e(Dr,fSr),e(Dr,NEe),e(NEe,mSr),e(Dr,gSr),e(Dr,bn),e(bn,hSr),e(bn,qEe),e(qEe,pSr),e(bn,uSr),e(bn,jEe),e(jEe,_Sr),e(bn,bSr),e(bn,DEe),e(DEe,vSr),e(bn,FSr),e(Dr,TSr),e(Dr,GEe),e(GEe,c3),e(c3,OEe),e(OEe,MSr),e(c3,ESr),e(c3,fK),e(fK,CSr),e(c3,wSr),e(Dr,ASr),M(f3,Dr,null),b(f,ROe,_),b(f,Oc,_),e(Oc,m3),e(m3,VEe),M(Mx,VEe,null),e(Oc,LSr),e(Oc,XEe),e(XEe,ySr),b(f,POe,_),b(f,gr,_),M(Ex,gr,null),e(gr,xSr),e(gr,Vc),e(Vc,$Sr),e(Vc,mK),e(mK,kSr),e(Vc,SSr),e(Vc,gK),e(gK,RSr),e(Vc,PSr),e(gr,BSr),e(gr,Cx),e(Cx,ISr),e(Cx,zEe),e(zEe,NSr),e(Cx,qSr),e(gr,jSr),e(gr,zt),M(wx,zt,null),e(zt,DSr),e(zt,WEe),e(WEe,GSr),e(zt,OSr),e(zt,Xc),e(Xc,VSr),e(Xc,QEe),e(QEe,XSr),e(Xc,zSr),e(Xc,hK),e(hK,WSr),e(Xc,QSr),e(zt,HSr),M(g3,zt,null),e(gr,USr),e(gr,Gr),M(Ax,Gr,null),e(Gr,JSr),e(Gr,HEe),e(HEe,YSr),e(Gr,KSr),e(Gr,vn),e(vn,ZSr),e(vn,UEe),e(UEe,eRr),e(vn,oRr),e(vn,JEe),e(JEe,rRr),e(vn,tRr),e(vn,YEe),e(YEe,aRr),e(vn,nRr),e(Gr,sRr),e(Gr,oe),e(oe,h3),e(h3,KEe),e(KEe,lRr),e(h3,iRr),e(h3,pK),e(pK,dRr),e(h3,cRr),e(oe,fRr),e(oe,p3),e(p3,ZEe),e(ZEe,mRr),e(p3,gRr),e(p3,uK),e(uK,hRr),e(p3,pRr),e(oe,uRr),e(oe,u3),e(u3,eCe),e(eCe,_Rr),e(u3,bRr),e(u3,_K),e(_K,vRr),e(u3,FRr),e(oe,TRr),e(oe,_3),e(_3,oCe),e(oCe,MRr),e(_3,ERr),e(_3,bK),e(bK,CRr),e(_3,wRr),e(oe,ARr),e(oe,b3),e(b3,rCe),e(rCe,LRr),e(b3,yRr),e(b3,vK),e(vK,xRr),e(b3,$Rr),e(oe,kRr),e(oe,v3),e(v3,tCe),e(tCe,SRr),e(v3,RRr),e(v3,FK),e(FK,PRr),e(v3,BRr),e(oe,IRr),e(oe,F3),e(F3,aCe),e(aCe,NRr),e(F3,qRr),e(F3,TK),e(TK,jRr),e(F3,DRr),e(oe,GRr),e(oe,T3),e(T3,nCe),e(nCe,ORr),e(T3,VRr),e(T3,MK),e(MK,XRr),e(T3,zRr),e(oe,WRr),e(oe,M3),e(M3,sCe),e(sCe,QRr),e(M3,HRr),e(M3,EK),e(EK,URr),e(M3,JRr),e(oe,YRr),e(oe,E3),e(E3,lCe),e(lCe,KRr),e(E3,ZRr),e(E3,CK),e(CK,ePr),e(E3,oPr),e(oe,rPr),e(oe,C3),e(C3,iCe),e(iCe,tPr),e(C3,aPr),e(C3,wK),e(wK,nPr),e(C3,sPr),e(oe,lPr),e(oe,w3),e(w3,dCe),e(dCe,iPr),e(w3,dPr),e(w3,AK),e(AK,cPr),e(w3,fPr),e(oe,mPr),e(oe,A3),e(A3,cCe),e(cCe,gPr),e(A3,hPr),e(A3,LK),e(LK,pPr),e(A3,uPr),e(oe,_Pr),e(oe,L3),e(L3,fCe),e(fCe,bPr),e(L3,vPr),e(L3,yK),e(yK,FPr),e(L3,TPr),e(oe,MPr),e(oe,y3),e(y3,mCe),e(mCe,EPr),e(y3,CPr),e(y3,xK),e(xK,wPr),e(y3,APr),e(oe,LPr),e(oe,x3),e(x3,gCe),e(gCe,yPr),e(x3,xPr),e(x3,$K),e($K,$Pr),e(x3,kPr),e(oe,SPr),e(oe,$3),e($3,hCe),e(hCe,RPr),e($3,PPr),e($3,kK),e(kK,BPr),e($3,IPr),e(oe,NPr),e(oe,k3),e(k3,pCe),e(pCe,qPr),e(k3,jPr),e(k3,SK),e(SK,DPr),e(k3,GPr),e(oe,OPr),e(oe,S3),e(S3,uCe),e(uCe,VPr),e(S3,XPr),e(S3,RK),e(RK,zPr),e(S3,WPr),e(oe,QPr),e(oe,R3),e(R3,_Ce),e(_Ce,HPr),e(R3,UPr),e(R3,PK),e(PK,JPr),e(R3,YPr),e(oe,KPr),e(oe,P3),e(P3,bCe),e(bCe,ZPr),e(P3,eBr),e(P3,BK),e(BK,oBr),e(P3,rBr),e(oe,tBr),e(oe,B3),e(B3,vCe),e(vCe,aBr),e(B3,nBr),e(B3,IK),e(IK,sBr),e(B3,lBr),e(oe,iBr),e(oe,I3),e(I3,FCe),e(FCe,dBr),e(I3,cBr),e(I3,NK),e(NK,fBr),e(I3,mBr),e(oe,gBr),e(oe,N3),e(N3,TCe),e(TCe,hBr),e(N3,pBr),e(N3,qK),e(qK,uBr),e(N3,_Br),e(oe,bBr),e(oe,q3),e(q3,MCe),e(MCe,vBr),e(q3,FBr),e(q3,jK),e(jK,TBr),e(q3,MBr),e(oe,EBr),e(oe,j3),e(j3,ECe),e(ECe,CBr),e(j3,wBr),e(j3,DK),e(DK,ABr),e(j3,LBr),e(oe,yBr),e(oe,D3),e(D3,CCe),e(CCe,xBr),e(D3,$Br),e(D3,GK),e(GK,kBr),e(D3,SBr),e(Gr,RBr),M(G3,Gr,null),b(f,BOe,_),b(f,zc,_),e(zc,O3),e(O3,wCe),M(Lx,wCe,null),e(zc,PBr),e(zc,ACe),e(ACe,BBr),b(f,IOe,_),b(f,hr,_),M(yx,hr,null),e(hr,IBr),e(hr,Wc),e(Wc,NBr),e(Wc,OK),e(OK,qBr),e(Wc,jBr),e(Wc,VK),e(VK,DBr),e(Wc,GBr),e(hr,OBr),e(hr,xx),e(xx,VBr),e(xx,LCe),e(LCe,XBr),e(xx,zBr),e(hr,WBr),e(hr,Wt),M($x,Wt,null),e(Wt,QBr),e(Wt,yCe),e(yCe,HBr),e(Wt,UBr),e(Wt,Qc),e(Qc,JBr),e(Qc,xCe),e(xCe,YBr),e(Qc,KBr),e(Qc,XK),e(XK,ZBr),e(Qc,eIr),e(Wt,oIr),M(V3,Wt,null),e(hr,rIr),e(hr,Or),M(kx,Or,null),e(Or,tIr),e(Or,$Ce),e($Ce,aIr),e(Or,nIr),e(Or,Fn),e(Fn,sIr),e(Fn,kCe),e(kCe,lIr),e(Fn,iIr),e(Fn,SCe),e(SCe,dIr),e(Fn,cIr),e(Fn,RCe),e(RCe,fIr),e(Fn,mIr),e(Or,gIr),e(Or,xe),e(xe,X3),e(X3,PCe),e(PCe,hIr),e(X3,pIr),e(X3,zK),e(zK,uIr),e(X3,_Ir),e(xe,bIr),e(xe,z3),e(z3,BCe),e(BCe,vIr),e(z3,FIr),e(z3,WK),e(WK,TIr),e(z3,MIr),e(xe,EIr),e(xe,W3),e(W3,ICe),e(ICe,CIr),e(W3,wIr),e(W3,QK),e(QK,AIr),e(W3,LIr),e(xe,yIr),e(xe,Q3),e(Q3,NCe),e(NCe,xIr),e(Q3,$Ir),e(Q3,HK),e(HK,kIr),e(Q3,SIr),e(xe,RIr),e(xe,H3),e(H3,qCe),e(qCe,PIr),e(H3,BIr),e(H3,UK),e(UK,IIr),e(H3,NIr),e(xe,qIr),e(xe,U3),e(U3,jCe),e(jCe,jIr),e(U3,DIr),e(U3,JK),e(JK,GIr),e(U3,OIr),e(xe,VIr),e(xe,J3),e(J3,DCe),e(DCe,XIr),e(J3,zIr),e(J3,YK),e(YK,WIr),e(J3,QIr),e(xe,HIr),e(xe,Y3),e(Y3,GCe),e(GCe,UIr),e(Y3,JIr),e(Y3,KK),e(KK,YIr),e(Y3,KIr),e(xe,ZIr),e(xe,K3),e(K3,OCe),e(OCe,eNr),e(K3,oNr),e(K3,ZK),e(ZK,rNr),e(K3,tNr),e(xe,aNr),e(xe,Z3),e(Z3,VCe),e(VCe,nNr),e(Z3,sNr),e(Z3,eZ),e(eZ,lNr),e(Z3,iNr),e(Or,dNr),M(e0,Or,null),b(f,NOe,_),b(f,Hc,_),e(Hc,o0),e(o0,XCe),M(Sx,XCe,null),e(Hc,cNr),e(Hc,zCe),e(zCe,fNr),b(f,qOe,_),b(f,pr,_),M(Rx,pr,null),e(pr,mNr),e(pr,Uc),e(Uc,gNr),e(Uc,oZ),e(oZ,hNr),e(Uc,pNr),e(Uc,rZ),e(rZ,uNr),e(Uc,_Nr),e(pr,bNr),e(pr,Px),e(Px,vNr),e(Px,WCe),e(WCe,FNr),e(Px,TNr),e(pr,MNr),e(pr,Qt),M(Bx,Qt,null),e(Qt,ENr),e(Qt,QCe),e(QCe,CNr),e(Qt,wNr),e(Qt,Jc),e(Jc,ANr),e(Jc,HCe),e(HCe,LNr),e(Jc,yNr),e(Jc,tZ),e(tZ,xNr),e(Jc,$Nr),e(Qt,kNr),M(r0,Qt,null),e(pr,SNr),e(pr,Vr),M(Ix,Vr,null),e(Vr,RNr),e(Vr,UCe),e(UCe,PNr),e(Vr,BNr),e(Vr,Tn),e(Tn,INr),e(Tn,JCe),e(JCe,NNr),e(Tn,qNr),e(Tn,YCe),e(YCe,jNr),e(Tn,DNr),e(Tn,KCe),e(KCe,GNr),e(Tn,ONr),e(Vr,VNr),e(Vr,Ee),e(Ee,t0),e(t0,ZCe),e(ZCe,XNr),e(t0,zNr),e(t0,aZ),e(aZ,WNr),e(t0,QNr),e(Ee,HNr),e(Ee,a0),e(a0,e5e),e(e5e,UNr),e(a0,JNr),e(a0,nZ),e(nZ,YNr),e(a0,KNr),e(Ee,ZNr),e(Ee,n0),e(n0,o5e),e(o5e,eqr),e(n0,oqr),e(n0,sZ),e(sZ,rqr),e(n0,tqr),e(Ee,aqr),e(Ee,s0),e(s0,r5e),e(r5e,nqr),e(s0,sqr),e(s0,lZ),e(lZ,lqr),e(s0,iqr),e(Ee,dqr),e(Ee,l0),e(l0,t5e),e(t5e,cqr),e(l0,fqr),e(l0,iZ),e(iZ,mqr),e(l0,gqr),e(Ee,hqr),e(Ee,i0),e(i0,a5e),e(a5e,pqr),e(i0,uqr),e(i0,dZ),e(dZ,_qr),e(i0,bqr),e(Ee,vqr),e(Ee,d0),e(d0,n5e),e(n5e,Fqr),e(d0,Tqr),e(d0,cZ),e(cZ,Mqr),e(d0,Eqr),e(Ee,Cqr),e(Ee,c0),e(c0,s5e),e(s5e,wqr),e(c0,Aqr),e(c0,fZ),e(fZ,Lqr),e(c0,yqr),e(Ee,xqr),e(Ee,f0),e(f0,l5e),e(l5e,$qr),e(f0,kqr),e(f0,mZ),e(mZ,Sqr),e(f0,Rqr),e(Ee,Pqr),e(Ee,m0),e(m0,i5e),e(i5e,Bqr),e(m0,Iqr),e(m0,gZ),e(gZ,Nqr),e(m0,qqr),e(Ee,jqr),e(Ee,g0),e(g0,d5e),e(d5e,Dqr),e(g0,Gqr),e(g0,hZ),e(hZ,Oqr),e(g0,Vqr),e(Ee,Xqr),e(Ee,h0),e(h0,c5e),e(c5e,zqr),e(h0,Wqr),e(h0,pZ),e(pZ,Qqr),e(h0,Hqr),e(Ee,Uqr),e(Ee,p0),e(p0,f5e),e(f5e,Jqr),e(p0,Yqr),e(p0,uZ),e(uZ,Kqr),e(p0,Zqr),e(Vr,ejr),M(u0,Vr,null),b(f,jOe,_),b(f,Yc,_),e(Yc,_0),e(_0,m5e),M(Nx,m5e,null),e(Yc,ojr),e(Yc,g5e),e(g5e,rjr),b(f,DOe,_),b(f,ur,_),M(qx,ur,null),e(ur,tjr),e(ur,Kc),e(Kc,ajr),e(Kc,_Z),e(_Z,njr),e(Kc,sjr),e(Kc,bZ),e(bZ,ljr),e(Kc,ijr),e(ur,djr),e(ur,jx),e(jx,cjr),e(jx,h5e),e(h5e,fjr),e(jx,mjr),e(ur,gjr),e(ur,Ht),M(Dx,Ht,null),e(Ht,hjr),e(Ht,p5e),e(p5e,pjr),e(Ht,ujr),e(Ht,Zc),e(Zc,_jr),e(Zc,u5e),e(u5e,bjr),e(Zc,vjr),e(Zc,vZ),e(vZ,Fjr),e(Zc,Tjr),e(Ht,Mjr),M(b0,Ht,null),e(ur,Ejr),e(ur,Xr),M(Gx,Xr,null),e(Xr,Cjr),e(Xr,_5e),e(_5e,wjr),e(Xr,Ajr),e(Xr,Mn),e(Mn,Ljr),e(Mn,b5e),e(b5e,yjr),e(Mn,xjr),e(Mn,v5e),e(v5e,$jr),e(Mn,kjr),e(Mn,F5e),e(F5e,Sjr),e(Mn,Rjr),e(Xr,Pjr),e(Xr,$e),e($e,v0),e(v0,T5e),e(T5e,Bjr),e(v0,Ijr),e(v0,FZ),e(FZ,Njr),e(v0,qjr),e($e,jjr),e($e,F0),e(F0,M5e),e(M5e,Djr),e(F0,Gjr),e(F0,TZ),e(TZ,Ojr),e(F0,Vjr),e($e,Xjr),e($e,T0),e(T0,E5e),e(E5e,zjr),e(T0,Wjr),e(T0,MZ),e(MZ,Qjr),e(T0,Hjr),e($e,Ujr),e($e,M0),e(M0,C5e),e(C5e,Jjr),e(M0,Yjr),e(M0,EZ),e(EZ,Kjr),e(M0,Zjr),e($e,eDr),e($e,E0),e(E0,w5e),e(w5e,oDr),e(E0,rDr),e(E0,CZ),e(CZ,tDr),e(E0,aDr),e($e,nDr),e($e,C0),e(C0,A5e),e(A5e,sDr),e(C0,lDr),e(C0,wZ),e(wZ,iDr),e(C0,dDr),e($e,cDr),e($e,w0),e(w0,L5e),e(L5e,fDr),e(w0,mDr),e(w0,AZ),e(AZ,gDr),e(w0,hDr),e($e,pDr),e($e,A0),e(A0,y5e),e(y5e,uDr),e(A0,_Dr),e(A0,LZ),e(LZ,bDr),e(A0,vDr),e($e,FDr),e($e,L0),e(L0,x5e),e(x5e,TDr),e(L0,MDr),e(L0,yZ),e(yZ,EDr),e(L0,CDr),e($e,wDr),e($e,y0),e(y0,$5e),e($5e,ADr),e(y0,LDr),e(y0,xZ),e(xZ,yDr),e(y0,xDr),e(Xr,$Dr),M(x0,Xr,null),b(f,GOe,_),b(f,ef,_),e(ef,$0),e($0,k5e),M(Ox,k5e,null),e(ef,kDr),e(ef,S5e),e(S5e,SDr),b(f,OOe,_),b(f,_r,_),M(Vx,_r,null),e(_r,RDr),e(_r,of),e(of,PDr),e(of,$Z),e($Z,BDr),e(of,IDr),e(of,kZ),e(kZ,NDr),e(of,qDr),e(_r,jDr),e(_r,Xx),e(Xx,DDr),e(Xx,R5e),e(R5e,GDr),e(Xx,ODr),e(_r,VDr),e(_r,Ut),M(zx,Ut,null),e(Ut,XDr),e(Ut,P5e),e(P5e,zDr),e(Ut,WDr),e(Ut,rf),e(rf,QDr),e(rf,B5e),e(B5e,HDr),e(rf,UDr),e(rf,SZ),e(SZ,JDr),e(rf,YDr),e(Ut,KDr),M(k0,Ut,null),e(_r,ZDr),e(_r,zr),M(Wx,zr,null),e(zr,eGr),e(zr,I5e),e(I5e,oGr),e(zr,rGr),e(zr,En),e(En,tGr),e(En,N5e),e(N5e,aGr),e(En,nGr),e(En,q5e),e(q5e,sGr),e(En,lGr),e(En,j5e),e(j5e,iGr),e(En,dGr),e(zr,cGr),e(zr,ke),e(ke,S0),e(S0,D5e),e(D5e,fGr),e(S0,mGr),e(S0,RZ),e(RZ,gGr),e(S0,hGr),e(ke,pGr),e(ke,R0),e(R0,G5e),e(G5e,uGr),e(R0,_Gr),e(R0,PZ),e(PZ,bGr),e(R0,vGr),e(ke,FGr),e(ke,P0),e(P0,O5e),e(O5e,TGr),e(P0,MGr),e(P0,BZ),e(BZ,EGr),e(P0,CGr),e(ke,wGr),e(ke,B0),e(B0,V5e),e(V5e,AGr),e(B0,LGr),e(B0,IZ),e(IZ,yGr),e(B0,xGr),e(ke,$Gr),e(ke,I0),e(I0,X5e),e(X5e,kGr),e(I0,SGr),e(I0,NZ),e(NZ,RGr),e(I0,PGr),e(ke,BGr),e(ke,N0),e(N0,z5e),e(z5e,IGr),e(N0,NGr),e(N0,qZ),e(qZ,qGr),e(N0,jGr),e(ke,DGr),e(ke,q0),e(q0,W5e),e(W5e,GGr),e(q0,OGr),e(q0,jZ),e(jZ,VGr),e(q0,XGr),e(ke,zGr),e(ke,j0),e(j0,Q5e),e(Q5e,WGr),e(j0,QGr),e(j0,DZ),e(DZ,HGr),e(j0,UGr),e(ke,JGr),e(ke,D0),e(D0,H5e),e(H5e,YGr),e(D0,KGr),e(D0,GZ),e(GZ,ZGr),e(D0,eOr),e(ke,oOr),e(ke,G0),e(G0,U5e),e(U5e,rOr),e(G0,tOr),e(G0,OZ),e(OZ,aOr),e(G0,nOr),e(zr,sOr),M(O0,zr,null),b(f,VOe,_),b(f,tf,_),e(tf,V0),e(V0,J5e),M(Qx,J5e,null),e(tf,lOr),e(tf,Y5e),e(Y5e,iOr),b(f,XOe,_),b(f,br,_),M(Hx,br,null),e(br,dOr),e(br,af),e(af,cOr),e(af,VZ),e(VZ,fOr),e(af,mOr),e(af,XZ),e(XZ,gOr),e(af,hOr),e(br,pOr),e(br,Ux),e(Ux,uOr),e(Ux,K5e),e(K5e,_Or),e(Ux,bOr),e(br,vOr),e(br,Jt),M(Jx,Jt,null),e(Jt,FOr),e(Jt,Z5e),e(Z5e,TOr),e(Jt,MOr),e(Jt,nf),e(nf,EOr),e(nf,e3e),e(e3e,COr),e(nf,wOr),e(nf,zZ),e(zZ,AOr),e(nf,LOr),e(Jt,yOr),M(X0,Jt,null),e(br,xOr),e(br,Wr),M(Yx,Wr,null),e(Wr,$Or),e(Wr,o3e),e(o3e,kOr),e(Wr,SOr),e(Wr,Cn),e(Cn,ROr),e(Cn,r3e),e(r3e,POr),e(Cn,BOr),e(Cn,t3e),e(t3e,IOr),e(Cn,NOr),e(Cn,a3e),e(a3e,qOr),e(Cn,jOr),e(Wr,DOr),e(Wr,Se),e(Se,z0),e(z0,n3e),e(n3e,GOr),e(z0,OOr),e(z0,WZ),e(WZ,VOr),e(z0,XOr),e(Se,zOr),e(Se,W0),e(W0,s3e),e(s3e,WOr),e(W0,QOr),e(W0,QZ),e(QZ,HOr),e(W0,UOr),e(Se,JOr),e(Se,Q0),e(Q0,l3e),e(l3e,YOr),e(Q0,KOr),e(Q0,HZ),e(HZ,ZOr),e(Q0,eVr),e(Se,oVr),e(Se,H0),e(H0,i3e),e(i3e,rVr),e(H0,tVr),e(H0,UZ),e(UZ,aVr),e(H0,nVr),e(Se,sVr),e(Se,U0),e(U0,d3e),e(d3e,lVr),e(U0,iVr),e(U0,JZ),e(JZ,dVr),e(U0,cVr),e(Se,fVr),e(Se,J0),e(J0,c3e),e(c3e,mVr),e(J0,gVr),e(J0,YZ),e(YZ,hVr),e(J0,pVr),e(Se,uVr),e(Se,Y0),e(Y0,f3e),e(f3e,_Vr),e(Y0,bVr),e(Y0,KZ),e(KZ,vVr),e(Y0,FVr),e(Se,TVr),e(Se,K0),e(K0,m3e),e(m3e,MVr),e(K0,EVr),e(K0,ZZ),e(ZZ,CVr),e(K0,wVr),e(Se,AVr),e(Se,Z0),e(Z0,g3e),e(g3e,LVr),e(Z0,yVr),e(Z0,eee),e(eee,xVr),e(Z0,$Vr),e(Se,kVr),e(Se,ew),e(ew,h3e),e(h3e,SVr),e(ew,RVr),e(ew,oee),e(oee,PVr),e(ew,BVr),e(Wr,IVr),M(ow,Wr,null),b(f,zOe,_),b(f,sf,_),e(sf,rw),e(rw,p3e),M(Kx,p3e,null),e(sf,NVr),e(sf,u3e),e(u3e,qVr),b(f,WOe,_),b(f,vr,_),M(Zx,vr,null),e(vr,jVr),e(vr,lf),e(lf,DVr),e(lf,ree),e(ree,GVr),e(lf,OVr),e(lf,tee),e(tee,VVr),e(lf,XVr),e(vr,zVr),e(vr,e$),e(e$,WVr),e(e$,_3e),e(_3e,QVr),e(e$,HVr),e(vr,UVr),e(vr,Yt),M(o$,Yt,null),e(Yt,JVr),e(Yt,b3e),e(b3e,YVr),e(Yt,KVr),e(Yt,df),e(df,ZVr),e(df,v3e),e(v3e,eXr),e(df,oXr),e(df,aee),e(aee,rXr),e(df,tXr),e(Yt,aXr),M(tw,Yt,null),e(vr,nXr),e(vr,Qr),M(r$,Qr,null),e(Qr,sXr),e(Qr,F3e),e(F3e,lXr),e(Qr,iXr),e(Qr,wn),e(wn,dXr),e(wn,T3e),e(T3e,cXr),e(wn,fXr),e(wn,M3e),e(M3e,mXr),e(wn,gXr),e(wn,E3e),e(E3e,hXr),e(wn,pXr),e(Qr,uXr),e(Qr,Re),e(Re,aw),e(aw,C3e),e(C3e,_Xr),e(aw,bXr),e(aw,nee),e(nee,vXr),e(aw,FXr),e(Re,TXr),e(Re,nw),e(nw,w3e),e(w3e,MXr),e(nw,EXr),e(nw,see),e(see,CXr),e(nw,wXr),e(Re,AXr),e(Re,sw),e(sw,A3e),e(A3e,LXr),e(sw,yXr),e(sw,lee),e(lee,xXr),e(sw,$Xr),e(Re,kXr),e(Re,lw),e(lw,L3e),e(L3e,SXr),e(lw,RXr),e(lw,iee),e(iee,PXr),e(lw,BXr),e(Re,IXr),e(Re,iw),e(iw,y3e),e(y3e,NXr),e(iw,qXr),e(iw,dee),e(dee,jXr),e(iw,DXr),e(Re,GXr),e(Re,dw),e(dw,x3e),e(x3e,OXr),e(dw,VXr),e(dw,cee),e(cee,XXr),e(dw,zXr),e(Re,WXr),e(Re,cw),e(cw,$3e),e($3e,QXr),e(cw,HXr),e(cw,fee),e(fee,UXr),e(cw,JXr),e(Re,YXr),e(Re,fw),e(fw,k3e),e(k3e,KXr),e(fw,ZXr),e(fw,mee),e(mee,ezr),e(fw,ozr),e(Re,rzr),e(Re,mw),e(mw,S3e),e(S3e,tzr),e(mw,azr),e(mw,gee),e(gee,nzr),e(mw,szr),e(Re,lzr),e(Re,gw),e(gw,R3e),e(R3e,izr),e(gw,dzr),e(gw,hee),e(hee,czr),e(gw,fzr),e(Qr,mzr),M(hw,Qr,null),b(f,QOe,_),b(f,cf,_),e(cf,pw),e(pw,P3e),M(t$,P3e,null),e(cf,gzr),e(cf,B3e),e(B3e,hzr),b(f,HOe,_),b(f,Fr,_),M(a$,Fr,null),e(Fr,pzr),e(Fr,ff),e(ff,uzr),e(ff,pee),e(pee,_zr),e(ff,bzr),e(ff,uee),e(uee,vzr),e(ff,Fzr),e(Fr,Tzr),e(Fr,n$),e(n$,Mzr),e(n$,I3e),e(I3e,Ezr),e(n$,Czr),e(Fr,wzr),e(Fr,Kt),M(s$,Kt,null),e(Kt,Azr),e(Kt,N3e),e(N3e,Lzr),e(Kt,yzr),e(Kt,mf),e(mf,xzr),e(mf,q3e),e(q3e,$zr),e(mf,kzr),e(mf,_ee),e(_ee,Szr),e(mf,Rzr),e(Kt,Pzr),M(uw,Kt,null),e(Fr,Bzr),e(Fr,Hr),M(l$,Hr,null),e(Hr,Izr),e(Hr,j3e),e(j3e,Nzr),e(Hr,qzr),e(Hr,An),e(An,jzr),e(An,D3e),e(D3e,Dzr),e(An,Gzr),e(An,G3e),e(G3e,Ozr),e(An,Vzr),e(An,O3e),e(O3e,Xzr),e(An,zzr),e(Hr,Wzr),e(Hr,Ve),e(Ve,_w),e(_w,V3e),e(V3e,Qzr),e(_w,Hzr),e(_w,bee),e(bee,Uzr),e(_w,Jzr),e(Ve,Yzr),e(Ve,bw),e(bw,X3e),e(X3e,Kzr),e(bw,Zzr),e(bw,vee),e(vee,eWr),e(bw,oWr),e(Ve,rWr),e(Ve,vw),e(vw,z3e),e(z3e,tWr),e(vw,aWr),e(vw,Fee),e(Fee,nWr),e(vw,sWr),e(Ve,lWr),e(Ve,Fw),e(Fw,W3e),e(W3e,iWr),e(Fw,dWr),e(Fw,Tee),e(Tee,cWr),e(Fw,fWr),e(Ve,mWr),e(Ve,Tw),e(Tw,Q3e),e(Q3e,gWr),e(Tw,hWr),e(Tw,Mee),e(Mee,pWr),e(Tw,uWr),e(Ve,_Wr),e(Ve,Mw),e(Mw,H3e),e(H3e,bWr),e(Mw,vWr),e(Mw,Eee),e(Eee,FWr),e(Mw,TWr),e(Ve,MWr),e(Ve,Ew),e(Ew,U3e),e(U3e,EWr),e(Ew,CWr),e(Ew,Cee),e(Cee,wWr),e(Ew,AWr),e(Ve,LWr),e(Ve,Cw),e(Cw,J3e),e(J3e,yWr),e(Cw,xWr),e(Cw,wee),e(wee,$Wr),e(Cw,kWr),e(Hr,SWr),M(ww,Hr,null),b(f,UOe,_),b(f,gf,_),e(gf,Aw),e(Aw,Y3e),M(i$,Y3e,null),e(gf,RWr),e(gf,K3e),e(K3e,PWr),b(f,JOe,_),b(f,Tr,_),M(d$,Tr,null),e(Tr,BWr),e(Tr,hf),e(hf,IWr),e(hf,Aee),e(Aee,NWr),e(hf,qWr),e(hf,Lee),e(Lee,jWr),e(hf,DWr),e(Tr,GWr),e(Tr,c$),e(c$,OWr),e(c$,Z3e),e(Z3e,VWr),e(c$,XWr),e(Tr,zWr),e(Tr,Zt),M(f$,Zt,null),e(Zt,WWr),e(Zt,e0e),e(e0e,QWr),e(Zt,HWr),e(Zt,pf),e(pf,UWr),e(pf,o0e),e(o0e,JWr),e(pf,YWr),e(pf,yee),e(yee,KWr),e(pf,ZWr),e(Zt,eQr),M(Lw,Zt,null),e(Tr,oQr),e(Tr,Ur),M(m$,Ur,null),e(Ur,rQr),e(Ur,r0e),e(r0e,tQr),e(Ur,aQr),e(Ur,Ln),e(Ln,nQr),e(Ln,t0e),e(t0e,sQr),e(Ln,lQr),e(Ln,a0e),e(a0e,iQr),e(Ln,dQr),e(Ln,n0e),e(n0e,cQr),e(Ln,fQr),e(Ur,mQr),e(Ur,Xe),e(Xe,yw),e(yw,s0e),e(s0e,gQr),e(yw,hQr),e(yw,xee),e(xee,pQr),e(yw,uQr),e(Xe,_Qr),e(Xe,xw),e(xw,l0e),e(l0e,bQr),e(xw,vQr),e(xw,$ee),e($ee,FQr),e(xw,TQr),e(Xe,MQr),e(Xe,$w),e($w,i0e),e(i0e,EQr),e($w,CQr),e($w,kee),e(kee,wQr),e($w,AQr),e(Xe,LQr),e(Xe,kw),e(kw,d0e),e(d0e,yQr),e(kw,xQr),e(kw,See),e(See,$Qr),e(kw,kQr),e(Xe,SQr),e(Xe,Sw),e(Sw,c0e),e(c0e,RQr),e(Sw,PQr),e(Sw,Ree),e(Ree,BQr),e(Sw,IQr),e(Xe,NQr),e(Xe,Rw),e(Rw,f0e),e(f0e,qQr),e(Rw,jQr),e(Rw,Pee),e(Pee,DQr),e(Rw,GQr),e(Xe,OQr),e(Xe,Pw),e(Pw,m0e),e(m0e,VQr),e(Pw,XQr),e(Pw,Bee),e(Bee,zQr),e(Pw,WQr),e(Xe,QQr),e(Xe,Bw),e(Bw,g0e),e(g0e,HQr),e(Bw,UQr),e(Bw,Iee),e(Iee,JQr),e(Bw,YQr),e(Ur,KQr),M(Iw,Ur,null),b(f,YOe,_),b(f,uf,_),e(uf,Nw),e(Nw,h0e),M(g$,h0e,null),e(uf,ZQr),e(uf,p0e),e(p0e,eHr),b(f,KOe,_),b(f,Mr,_),M(h$,Mr,null),e(Mr,oHr),e(Mr,_f),e(_f,rHr),e(_f,Nee),e(Nee,tHr),e(_f,aHr),e(_f,qee),e(qee,nHr),e(_f,sHr),e(Mr,lHr),e(Mr,p$),e(p$,iHr),e(p$,u0e),e(u0e,dHr),e(p$,cHr),e(Mr,fHr),e(Mr,ea),M(u$,ea,null),e(ea,mHr),e(ea,_0e),e(_0e,gHr),e(ea,hHr),e(ea,bf),e(bf,pHr),e(bf,b0e),e(b0e,uHr),e(bf,_Hr),e(bf,jee),e(jee,bHr),e(bf,vHr),e(ea,FHr),M(qw,ea,null),e(Mr,THr),e(Mr,Jr),M(_$,Jr,null),e(Jr,MHr),e(Jr,v0e),e(v0e,EHr),e(Jr,CHr),e(Jr,yn),e(yn,wHr),e(yn,F0e),e(F0e,AHr),e(yn,LHr),e(yn,T0e),e(T0e,yHr),e(yn,xHr),e(yn,M0e),e(M0e,$Hr),e(yn,kHr),e(Jr,SHr),e(Jr,E0e),e(E0e,jw),e(jw,C0e),e(C0e,RHr),e(jw,PHr),e(jw,Dee),e(Dee,BHr),e(jw,IHr),e(Jr,NHr),M(Dw,Jr,null),b(f,ZOe,_),b(f,vf,_),e(vf,Gw),e(Gw,w0e),M(b$,w0e,null),e(vf,qHr),e(vf,A0e),e(A0e,jHr),b(f,eVe,_),b(f,Er,_),M(v$,Er,null),e(Er,DHr),e(Er,Ff),e(Ff,GHr),e(Ff,Gee),e(Gee,OHr),e(Ff,VHr),e(Ff,Oee),e(Oee,XHr),e(Ff,zHr),e(Er,WHr),e(Er,F$),e(F$,QHr),e(F$,L0e),e(L0e,HHr),e(F$,UHr),e(Er,JHr),e(Er,oa),M(T$,oa,null),e(oa,YHr),e(oa,y0e),e(y0e,KHr),e(oa,ZHr),e(oa,Tf),e(Tf,eUr),e(Tf,x0e),e(x0e,oUr),e(Tf,rUr),e(Tf,Vee),e(Vee,tUr),e(Tf,aUr),e(oa,nUr),M(Ow,oa,null),e(Er,sUr),e(Er,Yr),M(M$,Yr,null),e(Yr,lUr),e(Yr,$0e),e($0e,iUr),e(Yr,dUr),e(Yr,xn),e(xn,cUr),e(xn,k0e),e(k0e,fUr),e(xn,mUr),e(xn,S0e),e(S0e,gUr),e(xn,hUr),e(xn,R0e),e(R0e,pUr),e(xn,uUr),e(Yr,_Ur),e(Yr,E$),e(E$,Vw),e(Vw,P0e),e(P0e,bUr),e(Vw,vUr),e(Vw,Xee),e(Xee,FUr),e(Vw,TUr),e(E$,MUr),e(E$,Xw),e(Xw,B0e),e(B0e,EUr),e(Xw,CUr),e(Xw,zee),e(zee,wUr),e(Xw,AUr),e(Yr,LUr),M(zw,Yr,null),b(f,oVe,_),b(f,Mf,_),e(Mf,Ww),e(Ww,I0e),M(C$,I0e,null),e(Mf,yUr),e(Mf,N0e),e(N0e,xUr),b(f,rVe,_),b(f,Cr,_),M(w$,Cr,null),e(Cr,$Ur),e(Cr,Ef),e(Ef,kUr),e(Ef,Wee),e(Wee,SUr),e(Ef,RUr),e(Ef,Qee),e(Qee,PUr),e(Ef,BUr),e(Cr,IUr),e(Cr,A$),e(A$,NUr),e(A$,q0e),e(q0e,qUr),e(A$,jUr),e(Cr,DUr),e(Cr,ra),M(L$,ra,null),e(ra,GUr),e(ra,j0e),e(j0e,OUr),e(ra,VUr),e(ra,Cf),e(Cf,XUr),e(Cf,D0e),e(D0e,zUr),e(Cf,WUr),e(Cf,Hee),e(Hee,QUr),e(Cf,HUr),e(ra,UUr),M(Qw,ra,null),e(Cr,JUr),e(Cr,Kr),M(y$,Kr,null),e(Kr,YUr),e(Kr,G0e),e(G0e,KUr),e(Kr,ZUr),e(Kr,$n),e($n,eJr),e($n,O0e),e(O0e,oJr),e($n,rJr),e($n,V0e),e(V0e,tJr),e($n,aJr),e($n,X0e),e(X0e,nJr),e($n,sJr),e(Kr,lJr),e(Kr,z0e),e(z0e,Hw),e(Hw,W0e),e(W0e,iJr),e(Hw,dJr),e(Hw,Uee),e(Uee,cJr),e(Hw,fJr),e(Kr,mJr),M(Uw,Kr,null),tVe=!0},p(f,[_]){const x$={};_&2&&(x$.$$scope={dirty:_,ctx:f}),Rf.$set(x$);const Q0e={};_&2&&(Q0e.$$scope={dirty:_,ctx:f}),Dg.$set(Q0e);const H0e={};_&2&&(H0e.$$scope={dirty:_,ctx:f}),Mh.$set(H0e);const U0e={};_&2&&(U0e.$$scope={dirty:_,ctx:f}),tp.$set(U0e);const $$={};_&2&&($$.$$scope={dirty:_,ctx:f}),ap.$set($$);const J0e={};_&2&&(J0e.$$scope={dirty:_,ctx:f}),Cp.$set(J0e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),wp.$set(kn);const Y0e={};_&2&&(Y0e.$$scope={dirty:_,ctx:f}),yp.$set(Y0e);const K0e={};_&2&&(K0e.$$scope={dirty:_,ctx:f}),L_.$set(K0e);const Z0e={};_&2&&(Z0e.$$scope={dirty:_,ctx:f}),x_.$set(Z0e);const k$={};_&2&&(k$.$$scope={dirty:_,ctx:f}),F2.$set(k$);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),M2.$set(ewe);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:f}),i1.$set(S$);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),c1.$set(owe);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:f}),H1.$set(R$);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),J1.$set(rwe);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),p7.$set(twe);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),_7.$set(awe);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),mb.$set(wf);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),hb.$set(nwe);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),zb.$set(swe);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),Qb.$set(lwe);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:f}),e4.$set(P$);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:f}),r4.$set(iwe);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:f}),q4.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:f}),D4.$set(cwe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),yv.$set(tt);const B$={};_&2&&(B$.$$scope={dirty:_,ctx:f}),$v.$set(B$);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:f}),Rv.$set(fwe);const I$={};_&2&&(I$.$$scope={dirty:_,ctx:f}),Bv.$set(I$);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:f}),Uv.$set(mwe);const at={};_&2&&(at.$$scope={dirty:_,ctx:f}),Yv.$set(at);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:f}),eF.$set(gwe);const Af={};_&2&&(Af.$$scope={dirty:_,ctx:f}),rF.$set(Af);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:f}),nF.$set(hwe);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:f}),lF.$set(pwe);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),bF.$set(L);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),FF.$set(Jw);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:f}),LF.$set(uwe);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:f}),xF.$set(_we);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),GF.$set(Yw);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:f}),VF.$set(bwe);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:f}),QF.$set(vwe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),UF.$set(Kw);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:f}),rT.$set(Fwe);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:f}),aT.$set(Twe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),dT.$set(Zw);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:f}),fT.$set(Mwe);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:f}),pT.$set(Ewe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),_T.$set(eA);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:f}),FT.$set(Cwe);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:f}),MT.$set(wwe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),yT.$set(oA);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:f}),$T.$set(Awe);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:f}),RT.$set(Lwe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),BT.$set(rA);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:f}),xM.$set(ywe);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:f}),kM.$set(xwe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),oE.$set(tA);const $we={};_&2&&($we.$$scope={dirty:_,ctx:f}),tE.$set($we);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:f}),_E.$set(kwe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),vE.$set(aA);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:f}),wE.$set(Swe);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:f}),LE.$set(Rwe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),HE.$set(nA);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:f}),JE.$set(Pwe);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:f}),lC.$set(Bwe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),dC.$set(sA);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:f}),IC.$set(Iwe);const Nwe={};_&2&&(Nwe.$$scope={dirty:_,ctx:f}),qC.$set(Nwe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),r5.$set(lA);const qwe={};_&2&&(qwe.$$scope={dirty:_,ctx:f}),a5.$set(qwe);const jwe={};_&2&&(jwe.$$scope={dirty:_,ctx:f}),l5.$set(jwe);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),d5.$set(iA);const Dwe={};_&2&&(Dwe.$$scope={dirty:_,ctx:f}),f5.$set(Dwe);const Gwe={};_&2&&(Gwe.$$scope={dirty:_,ctx:f}),g5.$set(Gwe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:f}),P5.$set(dA);const Owe={};_&2&&(Owe.$$scope={dirty:_,ctx:f}),I5.$set(Owe);const Vwe={};_&2&&(Vwe.$$scope={dirty:_,ctx:f}),t3.$set(Vwe);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:f}),n3.$set(cA);const Xwe={};_&2&&(Xwe.$$scope={dirty:_,ctx:f}),l3.$set(Xwe);const zwe={};_&2&&(zwe.$$scope={dirty:_,ctx:f}),d3.$set(zwe);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:f}),f3.$set(fA);const Wwe={};_&2&&(Wwe.$$scope={dirty:_,ctx:f}),g3.$set(Wwe);const Qwe={};_&2&&(Qwe.$$scope={dirty:_,ctx:f}),G3.$set(Qwe);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:f}),V3.$set(mA);const Hwe={};_&2&&(Hwe.$$scope={dirty:_,ctx:f}),e0.$set(Hwe);const Uwe={};_&2&&(Uwe.$$scope={dirty:_,ctx:f}),r0.$set(Uwe);const gA={};_&2&&(gA.$$scope={dirty:_,ctx:f}),u0.$set(gA);const Jwe={};_&2&&(Jwe.$$scope={dirty:_,ctx:f}),b0.$set(Jwe);const Ywe={};_&2&&(Ywe.$$scope={dirty:_,ctx:f}),x0.$set(Ywe);const hA={};_&2&&(hA.$$scope={dirty:_,ctx:f}),k0.$set(hA);const Kwe={};_&2&&(Kwe.$$scope={dirty:_,ctx:f}),O0.$set(Kwe);const Zwe={};_&2&&(Zwe.$$scope={dirty:_,ctx:f}),X0.$set(Zwe);const pA={};_&2&&(pA.$$scope={dirty:_,ctx:f}),ow.$set(pA);const eAe={};_&2&&(eAe.$$scope={dirty:_,ctx:f}),tw.$set(eAe);const oAe={};_&2&&(oAe.$$scope={dirty:_,ctx:f}),hw.$set(oAe);const uA={};_&2&&(uA.$$scope={dirty:_,ctx:f}),uw.$set(uA);const rAe={};_&2&&(rAe.$$scope={dirty:_,ctx:f}),ww.$set(rAe);const tAe={};_&2&&(tAe.$$scope={dirty:_,ctx:f}),Lw.$set(tAe);const _A={};_&2&&(_A.$$scope={dirty:_,ctx:f}),Iw.$set(_A);const aAe={};_&2&&(aAe.$$scope={dirty:_,ctx:f}),qw.$set(aAe);const nAe={};_&2&&(nAe.$$scope={dirty:_,ctx:f}),Dw.$set(nAe);const bA={};_&2&&(bA.$$scope={dirty:_,ctx:f}),Ow.$set(bA);const sAe={};_&2&&(sAe.$$scope={dirty:_,ctx:f}),zw.$set(sAe);const lAe={};_&2&&(lAe.$$scope={dirty:_,ctx:f}),Qw.$set(lAe);const vA={};_&2&&(vA.$$scope={dirty:_,ctx:f}),Uw.$set(vA)},i(f){tVe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(Rf.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(wL.$$.fragment,f),E(Dg.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(kL.$$.fragment,f),E(Mh.$$.fragment,f),E(SL.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(NL.$$.fragment,f),E(tp.$$.fragment,f),E(ap.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(VL.$$.fragment,f),E(Cp.$$.fragment,f),E(wp.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(WL.$$.fragment,f),E(HL.$$.fragment,f),E(yp.$$.fragment,f),E(UL.$$.fragment,f),E(L_.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(x_.$$.fragment,f),E(ey.$$.fragment,f),E(F2.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(M2.$$.fragment,f),E(ny.$$.fragment,f),E(i1.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(c1.$$.fragment,f),E(cy.$$.fragment,f),E(H1.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(J1.$$.fragment,f),E(py.$$.fragment,f),E(p7.$$.fragment,f),E(uy.$$.fragment,f),E(_y.$$.fragment,f),E(vy.$$.fragment,f),E(_7.$$.fragment,f),E(Fy.$$.fragment,f),E(mb.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(hb.$$.fragment,f),E(wy.$$.fragment,f),E(zb.$$.fragment,f),E(Ay.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(Qb.$$.fragment,f),E($y.$$.fragment,f),E(e4.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(r4.$$.fragment,f),E(By.$$.fragment,f),E(q4.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(D4.$$.fragment,f),E(Dy.$$.fragment,f),E(yv.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E($v.$$.fragment,f),E(zy.$$.fragment,f),E(Rv.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(Bv.$$.fragment,f),E(Jy.$$.fragment,f),E(Uv.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(e8.$$.fragment,f),E(Yv.$$.fragment,f),E(o8.$$.fragment,f),E(eF.$$.fragment,f),E(r8.$$.fragment,f),E(t8.$$.fragment,f),E(n8.$$.fragment,f),E(rF.$$.fragment,f),E(s8.$$.fragment,f),E(nF.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(lF.$$.fragment,f),E(f8.$$.fragment,f),E(bF.$$.fragment,f),E(m8.$$.fragment,f),E(g8.$$.fragment,f),E(p8.$$.fragment,f),E(FF.$$.fragment,f),E(u8.$$.fragment,f),E(LF.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(F8.$$.fragment,f),E(xF.$$.fragment,f),E(T8.$$.fragment,f),E(GF.$$.fragment,f),E(M8.$$.fragment,f),E(E8.$$.fragment,f),E(w8.$$.fragment,f),E(VF.$$.fragment,f),E(A8.$$.fragment,f),E(QF.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(k8.$$.fragment,f),E(UF.$$.fragment,f),E(S8.$$.fragment,f),E(rT.$$.fragment,f),E(R8.$$.fragment,f),E(P8.$$.fragment,f),E(I8.$$.fragment,f),E(aT.$$.fragment,f),E(N8.$$.fragment,f),E(dT.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(G8.$$.fragment,f),E(fT.$$.fragment,f),E(O8.$$.fragment,f),E(pT.$$.fragment,f),E(X8.$$.fragment,f),E(z8.$$.fragment,f),E(Q8.$$.fragment,f),E(_T.$$.fragment,f),E(H8.$$.fragment,f),E(FT.$$.fragment,f),E(U8.$$.fragment,f),E(J8.$$.fragment,f),E(K8.$$.fragment,f),E(MT.$$.fragment,f),E(Z8.$$.fragment,f),E(yT.$$.fragment,f),E(e9.$$.fragment,f),E(o9.$$.fragment,f),E(t9.$$.fragment,f),E($T.$$.fragment,f),E(a9.$$.fragment,f),E(RT.$$.fragment,f),E(n9.$$.fragment,f),E(s9.$$.fragment,f),E(i9.$$.fragment,f),E(BT.$$.fragment,f),E(d9.$$.fragment,f),E(xM.$$.fragment,f),E(c9.$$.fragment,f),E(f9.$$.fragment,f),E(g9.$$.fragment,f),E(kM.$$.fragment,f),E(h9.$$.fragment,f),E(oE.$$.fragment,f),E(p9.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(tE.$$.fragment,f),E(v9.$$.fragment,f),E(_E.$$.fragment,f),E(F9.$$.fragment,f),E(T9.$$.fragment,f),E(E9.$$.fragment,f),E(vE.$$.fragment,f),E(C9.$$.fragment,f),E(wE.$$.fragment,f),E(w9.$$.fragment,f),E(A9.$$.fragment,f),E(y9.$$.fragment,f),E(LE.$$.fragment,f),E(x9.$$.fragment,f),E(HE.$$.fragment,f),E($9.$$.fragment,f),E(k9.$$.fragment,f),E(R9.$$.fragment,f),E(JE.$$.fragment,f),E(P9.$$.fragment,f),E(lC.$$.fragment,f),E(B9.$$.fragment,f),E(I9.$$.fragment,f),E(q9.$$.fragment,f),E(dC.$$.fragment,f),E(j9.$$.fragment,f),E(IC.$$.fragment,f),E(D9.$$.fragment,f),E(G9.$$.fragment,f),E(V9.$$.fragment,f),E(qC.$$.fragment,f),E(X9.$$.fragment,f),E(r5.$$.fragment,f),E(z9.$$.fragment,f),E(W9.$$.fragment,f),E(H9.$$.fragment,f),E(a5.$$.fragment,f),E(U9.$$.fragment,f),E(l5.$$.fragment,f),E(Y9.$$.fragment,f),E(K9.$$.fragment,f),E(ex.$$.fragment,f),E(d5.$$.fragment,f),E(ox.$$.fragment,f),E(f5.$$.fragment,f),E(rx.$$.fragment,f),E(tx.$$.fragment,f),E(nx.$$.fragment,f),E(g5.$$.fragment,f),E(sx.$$.fragment,f),E(P5.$$.fragment,f),E(lx.$$.fragment,f),E(ix.$$.fragment,f),E(cx.$$.fragment,f),E(I5.$$.fragment,f),E(fx.$$.fragment,f),E(t3.$$.fragment,f),E(mx.$$.fragment,f),E(gx.$$.fragment,f),E(px.$$.fragment,f),E(n3.$$.fragment,f),E(ux.$$.fragment,f),E(l3.$$.fragment,f),E(_x.$$.fragment,f),E(bx.$$.fragment,f),E(Fx.$$.fragment,f),E(d3.$$.fragment,f),E(Tx.$$.fragment,f),E(f3.$$.fragment,f),E(Mx.$$.fragment,f),E(Ex.$$.fragment,f),E(wx.$$.fragment,f),E(g3.$$.fragment,f),E(Ax.$$.fragment,f),E(G3.$$.fragment,f),E(Lx.$$.fragment,f),E(yx.$$.fragment,f),E($x.$$.fragment,f),E(V3.$$.fragment,f),E(kx.$$.fragment,f),E(e0.$$.fragment,f),E(Sx.$$.fragment,f),E(Rx.$$.fragment,f),E(Bx.$$.fragment,f),E(r0.$$.fragment,f),E(Ix.$$.fragment,f),E(u0.$$.fragment,f),E(Nx.$$.fragment,f),E(qx.$$.fragment,f),E(Dx.$$.fragment,f),E(b0.$$.fragment,f),E(Gx.$$.fragment,f),E(x0.$$.fragment,f),E(Ox.$$.fragment,f),E(Vx.$$.fragment,f),E(zx.$$.fragment,f),E(k0.$$.fragment,f),E(Wx.$$.fragment,f),E(O0.$$.fragment,f),E(Qx.$$.fragment,f),E(Hx.$$.fragment,f),E(Jx.$$.fragment,f),E(X0.$$.fragment,f),E(Yx.$$.fragment,f),E(ow.$$.fragment,f),E(Kx.$$.fragment,f),E(Zx.$$.fragment,f),E(o$.$$.fragment,f),E(tw.$$.fragment,f),E(r$.$$.fragment,f),E(hw.$$.fragment,f),E(t$.$$.fragment,f),E(a$.$$.fragment,f),E(s$.$$.fragment,f),E(uw.$$.fragment,f),E(l$.$$.fragment,f),E(ww.$$.fragment,f),E(i$.$$.fragment,f),E(d$.$$.fragment,f),E(f$.$$.fragment,f),E(Lw.$$.fragment,f),E(m$.$$.fragment,f),E(Iw.$$.fragment,f),E(g$.$$.fragment,f),E(h$.$$.fragment,f),E(u$.$$.fragment,f),E(qw.$$.fragment,f),E(_$.$$.fragment,f),E(Dw.$$.fragment,f),E(b$.$$.fragment,f),E(v$.$$.fragment,f),E(T$.$$.fragment,f),E(Ow.$$.fragment,f),E(M$.$$.fragment,f),E(zw.$$.fragment,f),E(C$.$$.fragment,f),E(w$.$$.fragment,f),E(L$.$$.fragment,f),E(Qw.$$.fragment,f),E(y$.$$.fragment,f),E(Uw.$$.fragment,f),tVe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(Rf.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(wL.$$.fragment,f),C(Dg.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(kL.$$.fragment,f),C(Mh.$$.fragment,f),C(SL.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(NL.$$.fragment,f),C(tp.$$.fragment,f),C(ap.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(VL.$$.fragment,f),C(Cp.$$.fragment,f),C(wp.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(WL.$$.fragment,f),C(HL.$$.fragment,f),C(yp.$$.fragment,f),C(UL.$$.fragment,f),C(L_.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(x_.$$.fragment,f),C(ey.$$.fragment,f),C(F2.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(M2.$$.fragment,f),C(ny.$$.fragment,f),C(i1.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(c1.$$.fragment,f),C(cy.$$.fragment,f),C(H1.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(J1.$$.fragment,f),C(py.$$.fragment,f),C(p7.$$.fragment,f),C(uy.$$.fragment,f),C(_y.$$.fragment,f),C(vy.$$.fragment,f),C(_7.$$.fragment,f),C(Fy.$$.fragment,f),C(mb.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(hb.$$.fragment,f),C(wy.$$.fragment,f),C(zb.$$.fragment,f),C(Ay.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(Qb.$$.fragment,f),C($y.$$.fragment,f),C(e4.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(r4.$$.fragment,f),C(By.$$.fragment,f),C(q4.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(D4.$$.fragment,f),C(Dy.$$.fragment,f),C(yv.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C($v.$$.fragment,f),C(zy.$$.fragment,f),C(Rv.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(Bv.$$.fragment,f),C(Jy.$$.fragment,f),C(Uv.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(e8.$$.fragment,f),C(Yv.$$.fragment,f),C(o8.$$.fragment,f),C(eF.$$.fragment,f),C(r8.$$.fragment,f),C(t8.$$.fragment,f),C(n8.$$.fragment,f),C(rF.$$.fragment,f),C(s8.$$.fragment,f),C(nF.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(lF.$$.fragment,f),C(f8.$$.fragment,f),C(bF.$$.fragment,f),C(m8.$$.fragment,f),C(g8.$$.fragment,f),C(p8.$$.fragment,f),C(FF.$$.fragment,f),C(u8.$$.fragment,f),C(LF.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(F8.$$.fragment,f),C(xF.$$.fragment,f),C(T8.$$.fragment,f),C(GF.$$.fragment,f),C(M8.$$.fragment,f),C(E8.$$.fragment,f),C(w8.$$.fragment,f),C(VF.$$.fragment,f),C(A8.$$.fragment,f),C(QF.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(k8.$$.fragment,f),C(UF.$$.fragment,f),C(S8.$$.fragment,f),C(rT.$$.fragment,f),C(R8.$$.fragment,f),C(P8.$$.fragment,f),C(I8.$$.fragment,f),C(aT.$$.fragment,f),C(N8.$$.fragment,f),C(dT.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(G8.$$.fragment,f),C(fT.$$.fragment,f),C(O8.$$.fragment,f),C(pT.$$.fragment,f),C(X8.$$.fragment,f),C(z8.$$.fragment,f),C(Q8.$$.fragment,f),C(_T.$$.fragment,f),C(H8.$$.fragment,f),C(FT.$$.fragment,f),C(U8.$$.fragment,f),C(J8.$$.fragment,f),C(K8.$$.fragment,f),C(MT.$$.fragment,f),C(Z8.$$.fragment,f),C(yT.$$.fragment,f),C(e9.$$.fragment,f),C(o9.$$.fragment,f),C(t9.$$.fragment,f),C($T.$$.fragment,f),C(a9.$$.fragment,f),C(RT.$$.fragment,f),C(n9.$$.fragment,f),C(s9.$$.fragment,f),C(i9.$$.fragment,f),C(BT.$$.fragment,f),C(d9.$$.fragment,f),C(xM.$$.fragment,f),C(c9.$$.fragment,f),C(f9.$$.fragment,f),C(g9.$$.fragment,f),C(kM.$$.fragment,f),C(h9.$$.fragment,f),C(oE.$$.fragment,f),C(p9.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(tE.$$.fragment,f),C(v9.$$.fragment,f),C(_E.$$.fragment,f),C(F9.$$.fragment,f),C(T9.$$.fragment,f),C(E9.$$.fragment,f),C(vE.$$.fragment,f),C(C9.$$.fragment,f),C(wE.$$.fragment,f),C(w9.$$.fragment,f),C(A9.$$.fragment,f),C(y9.$$.fragment,f),C(LE.$$.fragment,f),C(x9.$$.fragment,f),C(HE.$$.fragment,f),C($9.$$.fragment,f),C(k9.$$.fragment,f),C(R9.$$.fragment,f),C(JE.$$.fragment,f),C(P9.$$.fragment,f),C(lC.$$.fragment,f),C(B9.$$.fragment,f),C(I9.$$.fragment,f),C(q9.$$.fragment,f),C(dC.$$.fragment,f),C(j9.$$.fragment,f),C(IC.$$.fragment,f),C(D9.$$.fragment,f),C(G9.$$.fragment,f),C(V9.$$.fragment,f),C(qC.$$.fragment,f),C(X9.$$.fragment,f),C(r5.$$.fragment,f),C(z9.$$.fragment,f),C(W9.$$.fragment,f),C(H9.$$.fragment,f),C(a5.$$.fragment,f),C(U9.$$.fragment,f),C(l5.$$.fragment,f),C(Y9.$$.fragment,f),C(K9.$$.fragment,f),C(ex.$$.fragment,f),C(d5.$$.fragment,f),C(ox.$$.fragment,f),C(f5.$$.fragment,f),C(rx.$$.fragment,f),C(tx.$$.fragment,f),C(nx.$$.fragment,f),C(g5.$$.fragment,f),C(sx.$$.fragment,f),C(P5.$$.fragment,f),C(lx.$$.fragment,f),C(ix.$$.fragment,f),C(cx.$$.fragment,f),C(I5.$$.fragment,f),C(fx.$$.fragment,f),C(t3.$$.fragment,f),C(mx.$$.fragment,f),C(gx.$$.fragment,f),C(px.$$.fragment,f),C(n3.$$.fragment,f),C(ux.$$.fragment,f),C(l3.$$.fragment,f),C(_x.$$.fragment,f),C(bx.$$.fragment,f),C(Fx.$$.fragment,f),C(d3.$$.fragment,f),C(Tx.$$.fragment,f),C(f3.$$.fragment,f),C(Mx.$$.fragment,f),C(Ex.$$.fragment,f),C(wx.$$.fragment,f),C(g3.$$.fragment,f),C(Ax.$$.fragment,f),C(G3.$$.fragment,f),C(Lx.$$.fragment,f),C(yx.$$.fragment,f),C($x.$$.fragment,f),C(V3.$$.fragment,f),C(kx.$$.fragment,f),C(e0.$$.fragment,f),C(Sx.$$.fragment,f),C(Rx.$$.fragment,f),C(Bx.$$.fragment,f),C(r0.$$.fragment,f),C(Ix.$$.fragment,f),C(u0.$$.fragment,f),C(Nx.$$.fragment,f),C(qx.$$.fragment,f),C(Dx.$$.fragment,f),C(b0.$$.fragment,f),C(Gx.$$.fragment,f),C(x0.$$.fragment,f),C(Ox.$$.fragment,f),C(Vx.$$.fragment,f),C(zx.$$.fragment,f),C(k0.$$.fragment,f),C(Wx.$$.fragment,f),C(O0.$$.fragment,f),C(Qx.$$.fragment,f),C(Hx.$$.fragment,f),C(Jx.$$.fragment,f),C(X0.$$.fragment,f),C(Yx.$$.fragment,f),C(ow.$$.fragment,f),C(Kx.$$.fragment,f),C(Zx.$$.fragment,f),C(o$.$$.fragment,f),C(tw.$$.fragment,f),C(r$.$$.fragment,f),C(hw.$$.fragment,f),C(t$.$$.fragment,f),C(a$.$$.fragment,f),C(s$.$$.fragment,f),C(uw.$$.fragment,f),C(l$.$$.fragment,f),C(ww.$$.fragment,f),C(i$.$$.fragment,f),C(d$.$$.fragment,f),C(f$.$$.fragment,f),C(Lw.$$.fragment,f),C(m$.$$.fragment,f),C(Iw.$$.fragment,f),C(g$.$$.fragment,f),C(h$.$$.fragment,f),C(u$.$$.fragment,f),C(qw.$$.fragment,f),C(_$.$$.fragment,f),C(Dw.$$.fragment,f),C(b$.$$.fragment,f),C(v$.$$.fragment,f),C(T$.$$.fragment,f),C(Ow.$$.fragment,f),C(M$.$$.fragment,f),C(zw.$$.fragment,f),C(C$.$$.fragment,f),C(w$.$$.fragment,f),C(L$.$$.fragment,f),C(Qw.$$.fragment,f),C(y$.$$.fragment,f),C(Uw.$$.fragment,f),tVe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(nt),f&&t(Oe),f&&t(We),f&&t($f),w(xa,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(KDe),f&&t(yi),w(vL),f&&t(ZDe),f&&t(In),f&&t(eGe),w(FL,f),f&&t(oGe),f&&t(Jk),f&&t(rGe),w(Rf,f),f&&t(tGe),f&&t(xi),w(TL),f&&t(aGe),f&&t(wo),w(ML),w(wL),w(Dg),w(AL),f&&t(nGe),f&&t(ki),w(LL),f&&t(sGe),f&&t(Ao),w(yL),w(kL),w(Mh),w(SL),f&&t(lGe),f&&t(Si),w(RL),f&&t(iGe),f&&t(Lo),w(PL),w(NL),w(tp),w(ap),w(qL),f&&t(dGe),f&&t(Ri),w(jL),f&&t(cGe),f&&t(yo),w(DL),w(VL),w(Cp),w(wp),w(XL),f&&t(fGe),f&&t(Bi),w(zL),f&&t(mGe),f&&t(xo),w(WL),w(HL),w(yp),w(UL),w(L_),f&&t(gGe),f&&t(qi),w(JL),f&&t(hGe),f&&t($o),w(YL),w(ZL),w(x_),w(ey),w(F2),f&&t(pGe),f&&t(Gi),w(oy),f&&t(uGe),f&&t(ko),w(ry),w(ay),w(M2),w(ny),w(i1),f&&t(_Ge),f&&t(Xi),w(sy),f&&t(bGe),f&&t(So),w(ly),w(dy),w(c1),w(cy),w(H1),f&&t(vGe),f&&t(Qi),w(fy),f&&t(FGe),f&&t(Ro),w(my),w(hy),w(J1),w(py),w(p7),f&&t(TGe),f&&t(Ji),w(uy),f&&t(MGe),f&&t(Po),w(_y),w(vy),w(_7),w(Fy),w(mb),f&&t(EGe),f&&t(Zi),w(Ty),f&&t(CGe),f&&t(Bo),w(My),w(Cy),w(hb),w(wy),w(zb),f&&t(wGe),f&&t(rd),w(Ay),f&&t(AGe),f&&t(Io),w(Ly),w(xy),w(Qb),w($y),w(e4),f&&t(LGe),f&&t(nd),w(ky),f&&t(yGe),f&&t(No),w(Sy),w(Py),w(r4),w(By),w(q4),f&&t(xGe),f&&t(id),w(Iy),f&&t($Ge),f&&t(qo),w(Ny),w(jy),w(D4),w(Dy),w(yv),f&&t(kGe),f&&t(fd),w(Gy),f&&t(SGe),f&&t(jo),w(Oy),w(Xy),w($v),w(zy),w(Rv),f&&t(RGe),f&&t(hd),w(Wy),f&&t(PGe),f&&t(Do),w(Qy),w(Uy),w(Bv),w(Jy),w(Uv),f&&t(BGe),f&&t(_d),w(Yy),f&&t(IGe),f&&t(Go),w(Ky),w(e8),w(Yv),w(o8),w(eF),f&&t(NGe),f&&t(Fd),w(r8),f&&t(qGe),f&&t(Oo),w(t8),w(n8),w(rF),w(s8),w(nF),f&&t(jGe),f&&t(Ed),w(l8),f&&t(DGe),f&&t(Vo),w(i8),w(c8),w(lF),w(f8),w(bF),f&&t(GGe),f&&t(Ad),w(m8),f&&t(OGe),f&&t(Xo),w(g8),w(p8),w(FF),w(u8),w(LF),f&&t(VGe),f&&t(xd),w(_8),f&&t(XGe),f&&t(zo),w(b8),w(F8),w(xF),w(T8),w(GF),f&&t(zGe),f&&t(Sd),w(M8),f&&t(WGe),f&&t(Wo),w(E8),w(w8),w(VF),w(A8),w(QF),f&&t(QGe),f&&t(Bd),w(y8),f&&t(HGe),f&&t(Qo),w(x8),w(k8),w(UF),w(S8),w(rT),f&&t(UGe),f&&t(qd),w(R8),f&&t(JGe),f&&t(Ho),w(P8),w(I8),w(aT),w(N8),w(dT),f&&t(YGe),f&&t(Od),w(q8),f&&t(KGe),f&&t(Uo),w(j8),w(G8),w(fT),w(O8),w(pT),f&&t(ZGe),f&&t(zd),w(X8),f&&t(eOe),f&&t(Jo),w(z8),w(Q8),w(_T),w(H8),w(FT),f&&t(oOe),f&&t(Hd),w(U8),f&&t(rOe),f&&t(Yo),w(J8),w(K8),w(MT),w(Z8),w(yT),f&&t(tOe),f&&t(Yd),w(e9),f&&t(aOe),f&&t(Ko),w(o9),w(t9),w($T),w(a9),w(RT),f&&t(nOe),f&&t(ec),w(n9),f&&t(sOe),f&&t(Zo),w(s9),w(i9),w(BT),w(d9),w(xM),f&&t(lOe),f&&t(tc),w(c9),f&&t(iOe),f&&t(er),w(f9),w(g9),w(kM),w(h9),w(oE),f&&t(dOe),f&&t(sc),w(p9),f&&t(cOe),f&&t(or),w(u9),w(b9),w(tE),w(v9),w(_E),f&&t(fOe),f&&t(dc),w(F9),f&&t(mOe),f&&t(rr),w(T9),w(E9),w(vE),w(C9),w(wE),f&&t(gOe),f&&t(mc),w(w9),f&&t(hOe),f&&t(tr),w(A9),w(y9),w(LE),w(x9),w(HE),f&&t(pOe),f&&t(pc),w($9),f&&t(uOe),f&&t(ar),w(k9),w(R9),w(JE),w(P9),w(lC),f&&t(_Oe),f&&t(bc),w(B9),f&&t(bOe),f&&t(nr),w(I9),w(q9),w(dC),w(j9),w(IC),f&&t(vOe),f&&t(Tc),w(D9),f&&t(FOe),f&&t(sr),w(G9),w(V9),w(qC),w(X9),w(r5),f&&t(TOe),f&&t(Cc),w(z9),f&&t(MOe),f&&t(lr),w(W9),w(H9),w(a5),w(U9),w(l5),f&&t(EOe),f&&t(Lc),w(Y9),f&&t(COe),f&&t(ir),w(K9),w(ex),w(d5),w(ox),w(f5),f&&t(wOe),f&&t($c),w(rx),f&&t(AOe),f&&t(dr),w(tx),w(nx),w(g5),w(sx),w(P5),f&&t(LOe),f&&t(Rc),w(lx),f&&t(yOe),f&&t(cr),w(ix),w(cx),w(I5),w(fx),w(t3),f&&t(xOe),f&&t(Ic),w(mx),f&&t($Oe),f&&t(fr),w(gx),w(px),w(n3),w(ux),w(l3),f&&t(kOe),f&&t(jc),w(_x),f&&t(SOe),f&&t(mr),w(bx),w(Fx),w(d3),w(Tx),w(f3),f&&t(ROe),f&&t(Oc),w(Mx),f&&t(POe),f&&t(gr),w(Ex),w(wx),w(g3),w(Ax),w(G3),f&&t(BOe),f&&t(zc),w(Lx),f&&t(IOe),f&&t(hr),w(yx),w($x),w(V3),w(kx),w(e0),f&&t(NOe),f&&t(Hc),w(Sx),f&&t(qOe),f&&t(pr),w(Rx),w(Bx),w(r0),w(Ix),w(u0),f&&t(jOe),f&&t(Yc),w(Nx),f&&t(DOe),f&&t(ur),w(qx),w(Dx),w(b0),w(Gx),w(x0),f&&t(GOe),f&&t(ef),w(Ox),f&&t(OOe),f&&t(_r),w(Vx),w(zx),w(k0),w(Wx),w(O0),f&&t(VOe),f&&t(tf),w(Qx),f&&t(XOe),f&&t(br),w(Hx),w(Jx),w(X0),w(Yx),w(ow),f&&t(zOe),f&&t(sf),w(Kx),f&&t(WOe),f&&t(vr),w(Zx),w(o$),w(tw),w(r$),w(hw),f&&t(QOe),f&&t(cf),w(t$),f&&t(HOe),f&&t(Fr),w(a$),w(s$),w(uw),w(l$),w(ww),f&&t(UOe),f&&t(gf),w(i$),f&&t(JOe),f&&t(Tr),w(d$),w(f$),w(Lw),w(m$),w(Iw),f&&t(YOe),f&&t(uf),w(g$),f&&t(KOe),f&&t(Mr),w(h$),w(u$),w(qw),w(_$),w(Dw),f&&t(ZOe),f&&t(vf),w(b$),f&&t(eVe),f&&t(Er),w(v$),w(T$),w(Ow),w(M$),w(zw),f&&t(oVe),f&&t(Mf),w(C$),f&&t(rVe),f&&t(Cr),w(w$),w(L$),w(Qw),w(y$),w(Uw)}}}const bDt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function vDt(y){return _qt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ADt extends gqt{constructor(g){super();hqt(this,g,vDt,_Dt,pqt,{})}}export{ADt as default,bDt as metadata};
