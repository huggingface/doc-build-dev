import{S as L$t,i as x$t,s as $$t,e as a,k as l,w as F,t as o,M as k$t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as S$t,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as HVr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function R$t(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,wA,uf,je,We,pi,yn,AA,Ln,xn,yA,_i,$n,LA,ui,bf,wa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),mi=a("code"),_f=o("model_type"),tt=o(" attribute is set to the same key you use when registering the config (here "),gi=a("code"),hi=o('"new-model"'),wA=o(")."),uf=l(),je=a("p"),We=o("Likewise, if your "),pi=a("code"),yn=o("NewModel"),AA=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),yA=o(`, make sure its
`),_i=a("code"),$n=o("config_class"),LA=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),bf=o("NewModelConfig"),wa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Q$=s(p);m=r(Q$,"NewModelConfig"),Q$.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var bi=s(d);h=r(bi,"PretrainedConfig"),bi.forEach(t),Mo=r(Ae,`, make sure its
`),mi=n(Ae,"CODE",{});var H$=s(mi);_f=r(H$,"model_type"),H$.forEach(t),tt=r(Ae," attribute is set to the same key you use when registering the config (here "),gi=n(Ae,"CODE",{});var U$=s(gi);hi=r(U$,'"new-model"'),U$.forEach(t),wA=r(Ae,")."),Ae.forEach(t),uf=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),pi=n(Eo,"CODE",{});var Aa=s(pi);yn=r(Aa,"NewModel"),Aa.forEach(t),AA=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var J$=s(Ln);xn=r(J$,"PreTrainedModel"),J$.forEach(t),yA=r(Eo,`, make sure its
`),_i=n(Eo,"CODE",{});var vf=s(_i);$n=r(vf,"config_class"),vf.forEach(t),LA=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var Y$=s(ui);bf=r(Y$,"NewModelConfig"),Y$.forEach(t),wa=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Mo),e(g,mi),e(mi,_f),e(g,tt),e(g,gi),e(gi,hi),e(g,wA),b(Qe,uf,Ae),b(Qe,je,Ae),e(je,We),e(je,pi),e(pi,yn),e(je,AA),e(je,Ln),e(Ln,xn),e(je,yA),e(je,_i),e(_i,$n),e(je,LA),e(je,ui),e(ui,bf),e(je,wa)},d(Qe){Qe&&t(g),Qe&&t(uf),Qe&&t(je)}}}function P$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I$t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function N$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q$t(L){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function j$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z$t(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ekt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ckt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Akt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $kt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Skt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ikt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Okt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Wkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Qkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Hkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ukt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Jkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Ykt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Kkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Zkt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _St(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ESt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ASt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ySt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xSt(L){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $St(L){let g,v,p,m,_,d,h,Mo,mi,_f,tt,gi,hi,wA,uf,je,We,pi,yn,AA,Ln,xn,yA,_i,$n,LA,ui,bf,wa,Qe,Ae,Q$,bi,H$,U$,Eo,Aa,J$,vf,Y$,uOe,sqe,vi,Ff,coe,xA,bOe,foe,vOe,lqe,kn,FOe,moe,TOe,MOe,goe,EOe,COe,iqe,$A,dqe,K$,wOe,cqe,Tf,fqe,Fi,Mf,hoe,kA,AOe,poe,yOe,mqe,Co,SA,LOe,RA,xOe,Z$,$Oe,kOe,SOe,PA,ROe,_oe,POe,BOe,IOe,Er,BA,NOe,uoe,qOe,jOe,Ti,DOe,boe,GOe,OOe,voe,VOe,XOe,zOe,A,Ef,Foe,WOe,QOe,ek,HOe,UOe,JOe,Cf,Toe,YOe,KOe,ok,ZOe,eVe,oVe,wf,Moe,rVe,tVe,rk,aVe,nVe,sVe,Af,Eoe,lVe,iVe,tk,dVe,cVe,fVe,yf,Coe,mVe,gVe,ak,hVe,pVe,_Ve,Lf,woe,uVe,bVe,nk,vVe,FVe,TVe,xf,Aoe,MVe,EVe,sk,CVe,wVe,AVe,$f,yoe,yVe,LVe,lk,xVe,$Ve,kVe,kf,Loe,SVe,RVe,ik,PVe,BVe,IVe,Sf,xoe,NVe,qVe,dk,jVe,DVe,GVe,Rf,$oe,OVe,VVe,ck,XVe,zVe,WVe,Pf,koe,QVe,HVe,fk,UVe,JVe,YVe,Bf,Soe,KVe,ZVe,mk,eXe,oXe,rXe,If,Roe,tXe,aXe,gk,nXe,sXe,lXe,Nf,Poe,iXe,dXe,hk,cXe,fXe,mXe,qf,Boe,gXe,hXe,pk,pXe,_Xe,uXe,jf,Ioe,bXe,vXe,_k,FXe,TXe,MXe,Df,Noe,EXe,CXe,uk,wXe,AXe,yXe,Gf,qoe,LXe,xXe,bk,$Xe,kXe,SXe,Of,joe,RXe,PXe,vk,BXe,IXe,NXe,Vf,Doe,qXe,jXe,Fk,DXe,GXe,OXe,Xf,Goe,VXe,XXe,Tk,zXe,WXe,QXe,zf,Ooe,HXe,UXe,Mk,JXe,YXe,KXe,Wf,Voe,ZXe,eze,Ek,oze,rze,tze,Qf,Xoe,aze,nze,Ck,sze,lze,ize,Hf,zoe,dze,cze,wk,fze,mze,gze,Uf,Woe,hze,pze,Ak,_ze,uze,bze,Jf,Qoe,vze,Fze,yk,Tze,Mze,Eze,Yf,Hoe,Cze,wze,Lk,Aze,yze,Lze,Kf,Uoe,xze,$ze,xk,kze,Sze,Rze,Zf,Joe,Pze,Bze,$k,Ize,Nze,qze,em,Yoe,jze,Dze,kk,Gze,Oze,Vze,om,Koe,Xze,zze,Sk,Wze,Qze,Hze,rm,Zoe,Uze,Jze,Rk,Yze,Kze,Zze,tm,ere,eWe,oWe,Pk,rWe,tWe,aWe,am,ore,nWe,sWe,Bk,lWe,iWe,dWe,nm,rre,cWe,fWe,Ik,mWe,gWe,hWe,sm,tre,pWe,_We,Nk,uWe,bWe,vWe,lm,are,FWe,TWe,qk,MWe,EWe,CWe,im,nre,wWe,AWe,jk,yWe,LWe,xWe,dm,sre,$We,kWe,Dk,SWe,RWe,PWe,cm,lre,BWe,IWe,Gk,NWe,qWe,jWe,fm,ire,DWe,GWe,Ok,OWe,VWe,XWe,mm,dre,zWe,WWe,Vk,QWe,HWe,UWe,gm,cre,JWe,YWe,Xk,KWe,ZWe,eQe,hm,fre,oQe,rQe,zk,tQe,aQe,nQe,pm,mre,sQe,lQe,Wk,iQe,dQe,cQe,_m,gre,fQe,mQe,Qk,gQe,hQe,pQe,um,hre,_Qe,uQe,Hk,bQe,vQe,FQe,bm,pre,TQe,MQe,Uk,EQe,CQe,wQe,vm,_re,AQe,yQe,Jk,LQe,xQe,$Qe,Fm,ure,kQe,SQe,Yk,RQe,PQe,BQe,Tm,bre,IQe,NQe,Kk,qQe,jQe,DQe,Mm,vre,GQe,OQe,Zk,VQe,XQe,zQe,Em,Fre,WQe,QQe,eS,HQe,UQe,JQe,Cm,Tre,YQe,KQe,oS,ZQe,eHe,oHe,wm,Mre,rHe,tHe,rS,aHe,nHe,sHe,Am,Ere,lHe,iHe,tS,dHe,cHe,fHe,ym,Cre,mHe,gHe,aS,hHe,pHe,_He,Lm,wre,uHe,bHe,nS,vHe,FHe,THe,xm,Are,MHe,EHe,sS,CHe,wHe,AHe,$m,yre,yHe,LHe,lS,xHe,$He,kHe,km,Lre,SHe,RHe,iS,PHe,BHe,IHe,Sm,xre,NHe,qHe,dS,jHe,DHe,GHe,Rm,$re,OHe,VHe,cS,XHe,zHe,WHe,Pm,kre,QHe,HHe,fS,UHe,JHe,YHe,Bm,Sre,KHe,ZHe,mS,eUe,oUe,rUe,Im,Rre,tUe,aUe,gS,nUe,sUe,lUe,Nm,Pre,iUe,dUe,hS,cUe,fUe,mUe,qm,Bre,gUe,hUe,pS,pUe,_Ue,uUe,jm,Ire,bUe,vUe,_S,FUe,TUe,MUe,Dm,Nre,EUe,CUe,uS,wUe,AUe,yUe,Gm,qre,LUe,xUe,bS,$Ue,kUe,SUe,Om,jre,RUe,PUe,vS,BUe,IUe,NUe,Vm,Dre,qUe,jUe,FS,DUe,GUe,OUe,Xm,Gre,VUe,XUe,TS,zUe,WUe,QUe,zm,Ore,HUe,UUe,MS,JUe,YUe,KUe,Wm,Vre,ZUe,eJe,ES,oJe,rJe,tJe,Qm,Xre,aJe,nJe,CS,sJe,lJe,iJe,Hm,zre,dJe,cJe,wS,fJe,mJe,gJe,Um,Wre,hJe,pJe,AS,_Je,uJe,bJe,Jm,Qre,vJe,FJe,yS,TJe,MJe,EJe,Ym,Hre,CJe,wJe,LS,AJe,yJe,LJe,Km,Ure,xJe,$Je,xS,kJe,SJe,RJe,Zm,Jre,PJe,BJe,$S,IJe,NJe,qJe,eg,Yre,jJe,DJe,kS,GJe,OJe,VJe,og,Kre,XJe,zJe,SS,WJe,QJe,HJe,rg,Zre,UJe,JJe,RS,YJe,KJe,ZJe,tg,ete,eYe,oYe,PS,rYe,tYe,aYe,ag,ote,nYe,sYe,BS,lYe,iYe,dYe,ng,rte,cYe,fYe,IS,mYe,gYe,hYe,sg,tte,pYe,_Ye,NS,uYe,bYe,vYe,lg,ate,FYe,TYe,qS,MYe,EYe,CYe,ig,nte,wYe,AYe,jS,yYe,LYe,xYe,dg,ste,$Ye,kYe,DS,SYe,RYe,PYe,cg,lte,BYe,IYe,GS,NYe,qYe,jYe,fg,ite,DYe,GYe,OS,OYe,VYe,XYe,mg,dte,zYe,WYe,VS,QYe,HYe,UYe,gg,cte,JYe,YYe,XS,KYe,ZYe,eKe,hg,fte,oKe,rKe,zS,tKe,aKe,nKe,pg,mte,sKe,lKe,WS,iKe,dKe,cKe,_g,gte,fKe,mKe,QS,gKe,hKe,pKe,ug,hte,_Ke,uKe,HS,bKe,vKe,FKe,bg,pte,TKe,MKe,US,EKe,CKe,wKe,vg,_te,AKe,yKe,JS,LKe,xKe,$Ke,Fg,ute,kKe,SKe,YS,RKe,PKe,BKe,Tg,bte,IKe,NKe,KS,qKe,jKe,DKe,Mg,vte,GKe,OKe,ZS,VKe,XKe,zKe,Eg,Fte,WKe,QKe,eR,HKe,UKe,JKe,Cg,YKe,wg,IA,KKe,Tte,ZKe,gqe,Mi,Ag,Mte,NA,eZe,Ete,oZe,hqe,wo,qA,rZe,jA,tZe,oR,aZe,nZe,sZe,DA,lZe,Cte,iZe,dZe,cZe,Cr,GA,fZe,wte,mZe,gZe,ya,hZe,Ate,pZe,_Ze,yte,uZe,bZe,Lte,vZe,FZe,TZe,k,Sn,xte,MZe,EZe,rR,CZe,wZe,tR,AZe,yZe,LZe,Rn,$te,xZe,$Ze,aR,kZe,SZe,nR,RZe,PZe,BZe,Pn,kte,IZe,NZe,sR,qZe,jZe,lR,DZe,GZe,OZe,yg,Ste,VZe,XZe,iR,zZe,WZe,QZe,Bn,Rte,HZe,UZe,dR,JZe,YZe,cR,KZe,ZZe,eeo,Lg,Pte,oeo,reo,fR,teo,aeo,neo,xg,Bte,seo,leo,mR,ieo,deo,ceo,$g,Ite,feo,meo,gR,geo,heo,peo,In,Nte,_eo,ueo,hR,beo,veo,pR,Feo,Teo,Meo,Nn,qte,Eeo,Ceo,_R,weo,Aeo,uR,yeo,Leo,xeo,qn,jte,$eo,keo,bR,Seo,Reo,vR,Peo,Beo,Ieo,kg,Dte,Neo,qeo,FR,jeo,Deo,Geo,Sg,Gte,Oeo,Veo,TR,Xeo,zeo,Weo,jn,Ote,Qeo,Heo,MR,Ueo,Jeo,ER,Yeo,Keo,Zeo,Rg,Vte,eoo,ooo,CR,roo,too,aoo,Dn,Xte,noo,soo,wR,loo,ioo,AR,doo,coo,foo,Gn,zte,moo,goo,yR,hoo,poo,LR,_oo,uoo,boo,On,Wte,voo,Foo,xR,Too,Moo,$R,Eoo,Coo,woo,Pg,Qte,Aoo,yoo,kR,Loo,xoo,$oo,Vn,Hte,koo,Soo,SR,Roo,Poo,RR,Boo,Ioo,Noo,Xn,Ute,qoo,joo,PR,Doo,Goo,BR,Ooo,Voo,Xoo,zn,Jte,zoo,Woo,IR,Qoo,Hoo,NR,Uoo,Joo,Yoo,Wn,Yte,Koo,Zoo,qR,ero,oro,jR,rro,tro,aro,Qn,Kte,nro,sro,DR,lro,iro,GR,dro,cro,fro,Hn,Zte,mro,gro,OR,hro,pro,VR,_ro,uro,bro,Bg,eae,vro,Fro,XR,Tro,Mro,Ero,Un,oae,Cro,wro,zR,Aro,yro,WR,Lro,xro,$ro,Ig,rae,kro,Sro,QR,Rro,Pro,Bro,Jn,tae,Iro,Nro,HR,qro,jro,UR,Dro,Gro,Oro,Yn,aae,Vro,Xro,JR,zro,Wro,YR,Qro,Hro,Uro,Kn,nae,Jro,Yro,KR,Kro,Zro,ZR,eto,oto,rto,Ng,sae,tto,ato,eP,nto,sto,lto,Zn,lae,ito,dto,oP,cto,fto,rP,mto,gto,hto,es,iae,pto,_to,tP,uto,bto,aP,vto,Fto,Tto,qg,dae,Mto,Eto,nP,Cto,wto,Ato,os,cae,yto,Lto,sP,xto,$to,lP,kto,Sto,Rto,rs,fae,Pto,Bto,iP,Ito,Nto,dP,qto,jto,Dto,ts,mae,Gto,Oto,cP,Vto,Xto,fP,zto,Wto,Qto,as,gae,Hto,Uto,mP,Jto,Yto,gP,Kto,Zto,eao,ns,hae,oao,rao,hP,tao,aao,pP,nao,sao,lao,ss,pae,iao,dao,_P,cao,fao,uP,mao,gao,hao,ls,_ae,pao,_ao,bP,uao,bao,vP,vao,Fao,Tao,jg,uae,Mao,Eao,FP,Cao,wao,Aao,is,bae,yao,Lao,TP,xao,$ao,MP,kao,Sao,Rao,Dg,vae,Pao,Bao,EP,Iao,Nao,qao,Gg,Fae,jao,Dao,CP,Gao,Oao,Vao,ds,Tae,Xao,zao,wP,Wao,Qao,AP,Hao,Uao,Jao,cs,Mae,Yao,Kao,yP,Zao,eno,LP,ono,rno,tno,fs,Eae,ano,nno,xP,sno,lno,$P,ino,dno,cno,Og,Cae,fno,mno,kP,gno,hno,pno,ms,wae,_no,uno,SP,bno,vno,RP,Fno,Tno,Mno,gs,Aae,Eno,Cno,PP,wno,Ano,BP,yno,Lno,xno,hs,yae,$no,kno,IP,Sno,Rno,NP,Pno,Bno,Ino,ps,Lae,Nno,qno,qP,jno,Dno,jP,Gno,Ono,Vno,_s,xae,Xno,zno,DP,Wno,Qno,GP,Hno,Uno,Jno,Vg,$ae,Yno,Kno,OP,Zno,eso,oso,us,kae,rso,tso,VP,aso,nso,XP,sso,lso,iso,Xg,Sae,dso,cso,zP,fso,mso,gso,zg,Rae,hso,pso,WP,_so,uso,bso,Wg,Pae,vso,Fso,QP,Tso,Mso,Eso,Qg,Bae,Cso,wso,HP,Aso,yso,Lso,bs,Iae,xso,$so,UP,kso,Sso,JP,Rso,Pso,Bso,Hg,Nae,Iso,Nso,YP,qso,jso,Dso,vs,qae,Gso,Oso,KP,Vso,Xso,ZP,zso,Wso,Qso,Fs,jae,Hso,Uso,eB,Jso,Yso,oB,Kso,Zso,elo,Ts,Dae,olo,rlo,rB,tlo,alo,tB,nlo,slo,llo,Ms,Gae,ilo,dlo,aB,clo,flo,nB,mlo,glo,hlo,Es,Oae,plo,_lo,sB,ulo,blo,lB,vlo,Flo,Tlo,Cs,Vae,Mlo,Elo,iB,Clo,wlo,dB,Alo,ylo,Llo,Ug,Xae,xlo,$lo,cB,klo,Slo,Rlo,Jg,zae,Plo,Blo,fB,Ilo,Nlo,qlo,ws,Wae,jlo,Dlo,mB,Glo,Olo,gB,Vlo,Xlo,zlo,As,Qae,Wlo,Qlo,hB,Hlo,Ulo,pB,Jlo,Ylo,Klo,ys,Hae,Zlo,eio,_B,oio,rio,uB,tio,aio,nio,Yg,Uae,sio,lio,bB,iio,dio,cio,Kg,Jae,fio,mio,vB,gio,hio,pio,Zg,Yae,_io,uio,FB,bio,vio,Fio,Ls,Kae,Tio,Mio,TB,Eio,Cio,MB,wio,Aio,yio,eh,Zae,Lio,xio,EB,$io,kio,Sio,oh,ene,Rio,Pio,CB,Bio,Iio,Nio,rh,one,qio,jio,wB,Dio,Gio,Oio,xs,rne,Vio,Xio,AB,zio,Wio,yB,Qio,Hio,Uio,th,tne,Jio,Yio,LB,Kio,Zio,edo,ah,ane,odo,rdo,xB,tdo,ado,ndo,$s,nne,sdo,ldo,$B,ido,ddo,kB,cdo,fdo,mdo,ks,sne,gdo,hdo,SB,pdo,_do,RB,udo,bdo,vdo,Ss,lne,Fdo,Tdo,PB,Mdo,Edo,BB,Cdo,wdo,Ado,Rs,ine,ydo,Ldo,IB,xdo,$do,NB,kdo,Sdo,Rdo,nh,Pdo,sh,OA,Bdo,dne,Ido,pqe,Ei,lh,cne,VA,Ndo,fne,qdo,_qe,Ao,XA,jdo,zA,Ddo,qB,Gdo,Odo,Vdo,WA,Xdo,mne,zdo,Wdo,Qdo,He,QA,Hdo,gne,Udo,Jdo,La,Ydo,hne,Kdo,Zdo,pne,eco,oco,_ne,rco,tco,aco,Y,ih,une,nco,sco,jB,lco,ico,dco,dh,bne,cco,fco,DB,mco,gco,hco,ch,vne,pco,_co,GB,uco,bco,vco,fh,Fne,Fco,Tco,OB,Mco,Eco,Cco,mh,Tne,wco,Aco,VB,yco,Lco,xco,gh,Mne,$co,kco,XB,Sco,Rco,Pco,hh,Ene,Bco,Ico,zB,Nco,qco,jco,ph,Cne,Dco,Gco,WB,Oco,Vco,Xco,_h,wne,zco,Wco,QB,Qco,Hco,Uco,uh,Ane,Jco,Yco,HB,Kco,Zco,efo,bh,yne,ofo,rfo,UB,tfo,afo,nfo,vh,Lne,sfo,lfo,JB,ifo,dfo,cfo,Fh,xne,ffo,mfo,YB,gfo,hfo,pfo,Th,$ne,_fo,ufo,KB,bfo,vfo,Ffo,Mh,kne,Tfo,Mfo,ZB,Efo,Cfo,wfo,Eh,Sne,Afo,yfo,eI,Lfo,xfo,$fo,Ch,Rne,kfo,Sfo,oI,Rfo,Pfo,Bfo,wh,Pne,Ifo,Nfo,rI,qfo,jfo,Dfo,Ah,Bne,Gfo,Ofo,tI,Vfo,Xfo,zfo,yh,Ine,Wfo,Qfo,aI,Hfo,Ufo,Jfo,Lh,Nne,Yfo,Kfo,nI,Zfo,emo,omo,xh,qne,rmo,tmo,sI,amo,nmo,smo,$h,jne,lmo,imo,lI,dmo,cmo,fmo,kh,Dne,mmo,gmo,iI,hmo,pmo,_mo,Sh,Gne,umo,bmo,dI,vmo,Fmo,Tmo,Rh,One,Mmo,Emo,cI,Cmo,wmo,Amo,Ph,Vne,ymo,Lmo,fI,xmo,$mo,kmo,Bh,Xne,Smo,Rmo,mI,Pmo,Bmo,Imo,Ih,zne,Nmo,qmo,gI,jmo,Dmo,Gmo,Nh,Omo,qh,Vmo,jh,HA,Xmo,Wne,zmo,uqe,Ci,Dh,Qne,UA,Wmo,Hne,Qmo,bqe,yo,JA,Hmo,YA,Umo,hI,Jmo,Ymo,Kmo,KA,Zmo,Une,ego,ogo,rgo,Ue,ZA,tgo,Jne,ago,ngo,wi,sgo,Yne,lgo,igo,Kne,dgo,cgo,fgo,he,Gh,Zne,mgo,ggo,pI,hgo,pgo,_go,Oh,ese,ugo,bgo,ose,vgo,Fgo,Tgo,Vh,rse,Mgo,Ego,_I,Cgo,wgo,Ago,Xh,tse,ygo,Lgo,uI,xgo,$go,kgo,zh,ase,Sgo,Rgo,bI,Pgo,Bgo,Igo,Wh,nse,Ngo,qgo,vI,jgo,Dgo,Ggo,Qh,sse,Ogo,Vgo,FI,Xgo,zgo,Wgo,Hh,lse,Qgo,Hgo,TI,Ugo,Jgo,Ygo,Uh,ise,Kgo,Zgo,MI,eho,oho,rho,Jh,dse,tho,aho,EI,nho,sho,lho,Yh,cse,iho,dho,CI,cho,fho,mho,Kh,fse,gho,hho,wI,pho,_ho,uho,Zh,mse,bho,vho,AI,Fho,Tho,Mho,ep,gse,Eho,Cho,yI,who,Aho,yho,op,hse,Lho,xho,LI,$ho,kho,Sho,rp,pse,Rho,Pho,xI,Bho,Iho,Nho,tp,_se,qho,jho,$I,Dho,Gho,Oho,ap,Vho,np,Xho,sp,ey,zho,use,Who,vqe,Ai,lp,bse,oy,Qho,vse,Hho,Fqe,Lo,ry,Uho,yi,Jho,kI,Yho,Kho,SI,Zho,epo,opo,ty,rpo,Fse,tpo,apo,npo,at,ay,spo,Tse,lpo,ipo,Li,dpo,Mse,cpo,fpo,RI,mpo,gpo,hpo,ip,ppo,Je,ny,_po,Ese,upo,bpo,xa,vpo,Cse,Fpo,Tpo,wse,Mpo,Epo,Ase,Cpo,wpo,Apo,x,dp,yse,ypo,Lpo,PI,xpo,$po,kpo,cp,Lse,Spo,Rpo,BI,Ppo,Bpo,Ipo,fp,xse,Npo,qpo,II,jpo,Dpo,Gpo,mp,$se,Opo,Vpo,NI,Xpo,zpo,Wpo,gp,kse,Qpo,Hpo,qI,Upo,Jpo,Ypo,hp,Sse,Kpo,Zpo,jI,e_o,o_o,r_o,pp,Rse,t_o,a_o,DI,n_o,s_o,l_o,_p,Pse,i_o,d_o,GI,c_o,f_o,m_o,up,Bse,g_o,h_o,OI,p_o,__o,u_o,bp,Ise,b_o,v_o,VI,F_o,T_o,M_o,vp,Nse,E_o,C_o,XI,w_o,A_o,y_o,Fp,qse,L_o,x_o,zI,$_o,k_o,S_o,Tp,jse,R_o,P_o,WI,B_o,I_o,N_o,Mp,Dse,q_o,j_o,QI,D_o,G_o,O_o,Ep,Gse,V_o,X_o,HI,z_o,W_o,Q_o,Cp,Ose,H_o,U_o,UI,J_o,Y_o,K_o,wp,Vse,Z_o,euo,JI,ouo,ruo,tuo,Ap,Xse,auo,nuo,YI,suo,luo,iuo,yp,zse,duo,cuo,KI,fuo,muo,guo,Lp,Wse,huo,puo,ZI,_uo,uuo,buo,xp,Qse,vuo,Fuo,eN,Tuo,Muo,Euo,$p,Hse,Cuo,wuo,oN,Auo,yuo,Luo,kp,Use,xuo,$uo,rN,kuo,Suo,Ruo,Sp,Jse,Puo,Buo,tN,Iuo,Nuo,quo,Rp,Yse,juo,Duo,aN,Guo,Ouo,Vuo,Pp,Kse,Xuo,zuo,nN,Wuo,Quo,Huo,Bp,Zse,Uuo,Juo,sN,Yuo,Kuo,Zuo,Ip,ele,e2o,o2o,lN,r2o,t2o,a2o,Np,ole,n2o,s2o,iN,l2o,i2o,d2o,qp,rle,c2o,f2o,dN,m2o,g2o,h2o,jp,tle,p2o,_2o,cN,u2o,b2o,v2o,Dp,ale,F2o,T2o,fN,M2o,E2o,C2o,Ps,nle,w2o,A2o,mN,y2o,L2o,gN,x2o,$2o,k2o,Gp,sle,S2o,R2o,hN,P2o,B2o,I2o,Op,lle,N2o,q2o,pN,j2o,D2o,G2o,Vp,ile,O2o,V2o,_N,X2o,z2o,W2o,Xp,dle,Q2o,H2o,uN,U2o,J2o,Y2o,zp,cle,K2o,Z2o,bN,e1o,o1o,r1o,Wp,fle,t1o,a1o,vN,n1o,s1o,l1o,Qp,mle,i1o,d1o,FN,c1o,f1o,m1o,Hp,gle,g1o,h1o,TN,p1o,_1o,u1o,Up,hle,b1o,v1o,MN,F1o,T1o,M1o,Jp,ple,E1o,C1o,EN,w1o,A1o,y1o,Yp,_le,L1o,x1o,CN,$1o,k1o,S1o,Kp,ule,R1o,P1o,wN,B1o,I1o,N1o,Zp,ble,q1o,j1o,AN,D1o,G1o,O1o,e_,vle,V1o,X1o,yN,z1o,W1o,Q1o,o_,Fle,H1o,U1o,LN,J1o,Y1o,K1o,r_,Tle,Z1o,e7o,xN,o7o,r7o,t7o,t_,Mle,a7o,n7o,$N,s7o,l7o,i7o,a_,Ele,d7o,c7o,kN,f7o,m7o,g7o,n_,Cle,h7o,p7o,SN,_7o,u7o,b7o,s_,wle,v7o,F7o,RN,T7o,M7o,E7o,l_,Ale,C7o,w7o,PN,A7o,y7o,L7o,i_,yle,x7o,$7o,BN,k7o,S7o,R7o,d_,Lle,P7o,B7o,IN,I7o,N7o,q7o,c_,xle,j7o,D7o,NN,G7o,O7o,V7o,f_,$le,X7o,z7o,qN,W7o,Q7o,H7o,m_,kle,U7o,J7o,jN,Y7o,K7o,Z7o,g_,Sle,ebo,obo,DN,rbo,tbo,abo,h_,Rle,nbo,sbo,GN,lbo,ibo,dbo,p_,Ple,cbo,fbo,ON,mbo,gbo,hbo,__,Ble,pbo,_bo,VN,ubo,bbo,vbo,u_,Ile,Fbo,Tbo,XN,Mbo,Ebo,Cbo,b_,Nle,wbo,Abo,zN,ybo,Lbo,xbo,v_,qle,$bo,kbo,WN,Sbo,Rbo,Pbo,F_,jle,Bbo,Ibo,QN,Nbo,qbo,jbo,T_,Dle,Dbo,Gbo,HN,Obo,Vbo,Xbo,M_,Gle,zbo,Wbo,UN,Qbo,Hbo,Ubo,E_,Ole,Jbo,Ybo,JN,Kbo,Zbo,e4o,C_,Vle,o4o,r4o,YN,t4o,a4o,n4o,w_,Xle,s4o,l4o,KN,i4o,d4o,c4o,A_,zle,f4o,m4o,ZN,g4o,h4o,p4o,y_,Wle,_4o,u4o,eq,b4o,v4o,F4o,L_,Qle,T4o,M4o,oq,E4o,C4o,w4o,x_,Hle,A4o,y4o,rq,L4o,x4o,$4o,$_,Ule,k4o,S4o,tq,R4o,P4o,B4o,k_,Jle,I4o,N4o,aq,q4o,j4o,D4o,S_,Yle,G4o,O4o,nq,V4o,X4o,z4o,R_,Kle,W4o,Q4o,sq,H4o,U4o,J4o,P_,Zle,Y4o,K4o,lq,Z4o,evo,ovo,B_,eie,rvo,tvo,iq,avo,nvo,svo,I_,oie,lvo,ivo,dq,dvo,cvo,fvo,N_,rie,mvo,gvo,cq,hvo,pvo,_vo,q_,tie,uvo,bvo,fq,vvo,Fvo,Tvo,j_,aie,Mvo,Evo,mq,Cvo,wvo,Avo,D_,nie,yvo,Lvo,gq,xvo,$vo,kvo,G_,sie,Svo,Rvo,hq,Pvo,Bvo,Ivo,O_,lie,Nvo,qvo,pq,jvo,Dvo,Gvo,V_,iie,Ovo,Vvo,_q,Xvo,zvo,Wvo,X_,die,Qvo,Hvo,uq,Uvo,Jvo,Yvo,z_,cie,Kvo,Zvo,bq,eFo,oFo,rFo,W_,fie,tFo,aFo,vq,nFo,sFo,lFo,Q_,mie,iFo,dFo,Fq,cFo,fFo,mFo,H_,gie,gFo,hFo,Tq,pFo,_Fo,uFo,U_,hie,bFo,vFo,Mq,FFo,TFo,MFo,J_,pie,EFo,CFo,Eq,wFo,AFo,yFo,Y_,_ie,LFo,xFo,Cq,$Fo,kFo,SFo,K_,uie,RFo,PFo,wq,BFo,IFo,NFo,Z_,bie,qFo,jFo,Aq,DFo,GFo,OFo,eu,vie,VFo,XFo,yq,zFo,WFo,QFo,ou,Fie,HFo,UFo,Lq,JFo,YFo,KFo,ru,ZFo,Tie,eTo,oTo,Mie,rTo,tTo,tu,Tqe,xi,au,Eie,sy,aTo,Cie,nTo,Mqe,xo,ly,sTo,$i,lTo,xq,iTo,dTo,$q,cTo,fTo,mTo,iy,gTo,wie,hTo,pTo,_To,nt,dy,uTo,Aie,bTo,vTo,ki,FTo,yie,TTo,MTo,kq,ETo,CTo,wTo,nu,ATo,Ye,cy,yTo,Lie,LTo,xTo,$a,$To,xie,kTo,STo,$ie,RTo,PTo,kie,BTo,ITo,NTo,G,su,Sie,qTo,jTo,Sq,DTo,GTo,OTo,lu,Rie,VTo,XTo,Rq,zTo,WTo,QTo,iu,Pie,HTo,UTo,Pq,JTo,YTo,KTo,du,Bie,ZTo,eMo,Bq,oMo,rMo,tMo,cu,Iie,aMo,nMo,Iq,sMo,lMo,iMo,fu,Nie,dMo,cMo,Nq,fMo,mMo,gMo,mu,qie,hMo,pMo,qq,_Mo,uMo,bMo,gu,jie,vMo,FMo,jq,TMo,MMo,EMo,hu,Die,CMo,wMo,Dq,AMo,yMo,LMo,pu,Gie,xMo,$Mo,Gq,kMo,SMo,RMo,_u,Oie,PMo,BMo,Oq,IMo,NMo,qMo,uu,Vie,jMo,DMo,Vq,GMo,OMo,VMo,bu,Xie,XMo,zMo,Xq,WMo,QMo,HMo,vu,zie,UMo,JMo,zq,YMo,KMo,ZMo,Fu,Wie,eEo,oEo,Wq,rEo,tEo,aEo,Tu,Qie,nEo,sEo,Qq,lEo,iEo,dEo,Mu,Hie,cEo,fEo,Hq,mEo,gEo,hEo,Eu,Uie,pEo,_Eo,Uq,uEo,bEo,vEo,Cu,Jie,FEo,TEo,Jq,MEo,EEo,CEo,wu,Yie,wEo,AEo,Yq,yEo,LEo,xEo,Au,Kie,$Eo,kEo,Kq,SEo,REo,PEo,yu,Zie,BEo,IEo,Zq,NEo,qEo,jEo,Lu,ede,DEo,GEo,ej,OEo,VEo,XEo,xu,ode,zEo,WEo,oj,QEo,HEo,UEo,$u,rde,JEo,YEo,rj,KEo,ZEo,eCo,ku,tde,oCo,rCo,tj,tCo,aCo,nCo,Su,ade,sCo,lCo,aj,iCo,dCo,cCo,Ru,nde,fCo,mCo,nj,gCo,hCo,pCo,Pu,sde,_Co,uCo,sj,bCo,vCo,FCo,Bu,lde,TCo,MCo,lj,ECo,CCo,wCo,Iu,ide,ACo,yCo,ij,LCo,xCo,$Co,Nu,dde,kCo,SCo,dj,RCo,PCo,BCo,qu,cde,ICo,NCo,cj,qCo,jCo,DCo,ju,fde,GCo,OCo,fj,VCo,XCo,zCo,Du,mde,WCo,QCo,mj,HCo,UCo,JCo,Gu,gde,YCo,KCo,gj,ZCo,e5o,o5o,Ou,hde,r5o,t5o,hj,a5o,n5o,s5o,Vu,pde,l5o,i5o,pj,d5o,c5o,f5o,Xu,_de,m5o,g5o,_j,h5o,p5o,_5o,zu,ude,u5o,b5o,uj,v5o,F5o,T5o,Wu,bde,M5o,E5o,bj,C5o,w5o,A5o,Qu,vde,y5o,L5o,vj,x5o,$5o,k5o,Hu,S5o,Fde,R5o,P5o,Tde,B5o,I5o,Uu,Eqe,Si,Ju,Mde,fy,N5o,Ede,q5o,Cqe,$o,my,j5o,Ri,D5o,Fj,G5o,O5o,Tj,V5o,X5o,z5o,gy,W5o,Cde,Q5o,H5o,U5o,st,hy,J5o,wde,Y5o,K5o,Pi,Z5o,Ade,e3o,o3o,Mj,r3o,t3o,a3o,Yu,n3o,Ke,py,s3o,yde,l3o,i3o,ka,d3o,Lde,c3o,f3o,xde,m3o,g3o,$de,h3o,p3o,_3o,z,Ku,kde,u3o,b3o,Ej,v3o,F3o,T3o,Zu,Sde,M3o,E3o,Cj,C3o,w3o,A3o,e2,Rde,y3o,L3o,wj,x3o,$3o,k3o,o2,Pde,S3o,R3o,Aj,P3o,B3o,I3o,r2,Bde,N3o,q3o,yj,j3o,D3o,G3o,t2,Ide,O3o,V3o,Lj,X3o,z3o,W3o,a2,Nde,Q3o,H3o,xj,U3o,J3o,Y3o,n2,qde,K3o,Z3o,$j,ewo,owo,rwo,s2,jde,two,awo,kj,nwo,swo,lwo,l2,Dde,iwo,dwo,Sj,cwo,fwo,mwo,i2,Gde,gwo,hwo,Rj,pwo,_wo,uwo,d2,Ode,bwo,vwo,Pj,Fwo,Two,Mwo,c2,Vde,Ewo,Cwo,Bj,wwo,Awo,ywo,f2,Xde,Lwo,xwo,Ij,$wo,kwo,Swo,m2,zde,Rwo,Pwo,Nj,Bwo,Iwo,Nwo,g2,Wde,qwo,jwo,qj,Dwo,Gwo,Owo,h2,Qde,Vwo,Xwo,jj,zwo,Wwo,Qwo,p2,Hde,Hwo,Uwo,Dj,Jwo,Ywo,Kwo,_2,Ude,Zwo,e0o,Gj,o0o,r0o,t0o,u2,Jde,a0o,n0o,Oj,s0o,l0o,i0o,b2,Yde,d0o,c0o,Vj,f0o,m0o,g0o,v2,Kde,h0o,p0o,Xj,_0o,u0o,b0o,F2,Zde,v0o,F0o,zj,T0o,M0o,E0o,T2,ece,C0o,w0o,Wj,A0o,y0o,L0o,M2,oce,x0o,$0o,Qj,k0o,S0o,R0o,E2,rce,P0o,B0o,Hj,I0o,N0o,q0o,C2,tce,j0o,D0o,Uj,G0o,O0o,V0o,w2,ace,X0o,z0o,Jj,W0o,Q0o,H0o,A2,nce,U0o,J0o,Yj,Y0o,K0o,Z0o,y2,sce,e6o,o6o,Kj,r6o,t6o,a6o,L2,lce,n6o,s6o,Zj,l6o,i6o,d6o,x2,ice,c6o,f6o,eD,m6o,g6o,h6o,$2,dce,p6o,_6o,oD,u6o,b6o,v6o,k2,cce,F6o,T6o,rD,M6o,E6o,C6o,S2,fce,w6o,A6o,tD,y6o,L6o,x6o,R2,mce,$6o,k6o,aD,S6o,R6o,P6o,P2,gce,B6o,I6o,nD,N6o,q6o,j6o,B2,D6o,hce,G6o,O6o,pce,V6o,X6o,I2,wqe,Bi,N2,_ce,_y,z6o,uce,W6o,Aqe,ko,uy,Q6o,Ii,H6o,sD,U6o,J6o,lD,Y6o,K6o,Z6o,by,eAo,bce,oAo,rAo,tAo,lt,vy,aAo,vce,nAo,sAo,Ni,lAo,Fce,iAo,dAo,iD,cAo,fAo,mAo,q2,gAo,Ze,Fy,hAo,Tce,pAo,_Ao,Sa,uAo,Mce,bAo,vAo,Ece,FAo,TAo,Cce,MAo,EAo,CAo,Q,j2,wce,wAo,AAo,dD,yAo,LAo,xAo,D2,Ace,$Ao,kAo,cD,SAo,RAo,PAo,G2,yce,BAo,IAo,fD,NAo,qAo,jAo,O2,Lce,DAo,GAo,mD,OAo,VAo,XAo,V2,xce,zAo,WAo,gD,QAo,HAo,UAo,X2,$ce,JAo,YAo,hD,KAo,ZAo,eyo,z2,kce,oyo,ryo,pD,tyo,ayo,nyo,W2,Sce,syo,lyo,_D,iyo,dyo,cyo,Q2,Rce,fyo,myo,uD,gyo,hyo,pyo,H2,Pce,_yo,uyo,bD,byo,vyo,Fyo,U2,Bce,Tyo,Myo,vD,Eyo,Cyo,wyo,J2,Ice,Ayo,yyo,FD,Lyo,xyo,$yo,Y2,Nce,kyo,Syo,TD,Ryo,Pyo,Byo,K2,qce,Iyo,Nyo,MD,qyo,jyo,Dyo,Z2,jce,Gyo,Oyo,ED,Vyo,Xyo,zyo,e1,Dce,Wyo,Qyo,CD,Hyo,Uyo,Jyo,o1,Gce,Yyo,Kyo,wD,Zyo,eLo,oLo,r1,Oce,rLo,tLo,AD,aLo,nLo,sLo,t1,Vce,lLo,iLo,yD,dLo,cLo,fLo,a1,Xce,mLo,gLo,LD,hLo,pLo,_Lo,n1,zce,uLo,bLo,xD,vLo,FLo,TLo,s1,Wce,MLo,ELo,$D,CLo,wLo,ALo,l1,Qce,yLo,LLo,kD,xLo,$Lo,kLo,i1,Hce,SLo,RLo,SD,PLo,BLo,ILo,d1,Uce,NLo,qLo,RD,jLo,DLo,GLo,c1,Jce,OLo,VLo,PD,XLo,zLo,WLo,f1,Yce,QLo,HLo,BD,ULo,JLo,YLo,m1,Kce,KLo,ZLo,ID,e8o,o8o,r8o,g1,Zce,t8o,a8o,ND,n8o,s8o,l8o,h1,efe,i8o,d8o,qD,c8o,f8o,m8o,p1,ofe,g8o,h8o,rfe,p8o,_8o,u8o,_1,tfe,b8o,v8o,jD,F8o,T8o,M8o,u1,afe,E8o,C8o,DD,w8o,A8o,y8o,b1,nfe,L8o,x8o,GD,$8o,k8o,S8o,v1,sfe,R8o,P8o,OD,B8o,I8o,N8o,F1,q8o,lfe,j8o,D8o,ife,G8o,O8o,T1,yqe,qi,M1,dfe,Ty,V8o,cfe,X8o,Lqe,So,My,z8o,ji,W8o,VD,Q8o,H8o,XD,U8o,J8o,Y8o,Ey,K8o,ffe,Z8o,e9o,o9o,it,Cy,r9o,mfe,t9o,a9o,Di,n9o,gfe,s9o,l9o,zD,i9o,d9o,c9o,E1,f9o,eo,wy,m9o,hfe,g9o,h9o,Ra,p9o,pfe,_9o,u9o,_fe,b9o,v9o,ufe,F9o,T9o,M9o,_e,C1,bfe,E9o,C9o,WD,w9o,A9o,y9o,w1,vfe,L9o,x9o,QD,$9o,k9o,S9o,A1,Ffe,R9o,P9o,HD,B9o,I9o,N9o,y1,Tfe,q9o,j9o,UD,D9o,G9o,O9o,L1,Mfe,V9o,X9o,JD,z9o,W9o,Q9o,x1,Efe,H9o,U9o,YD,J9o,Y9o,K9o,$1,Cfe,Z9o,exo,KD,oxo,rxo,txo,k1,wfe,axo,nxo,ZD,sxo,lxo,ixo,S1,Afe,dxo,cxo,eG,fxo,mxo,gxo,R1,yfe,hxo,pxo,oG,_xo,uxo,bxo,P1,Lfe,vxo,Fxo,rG,Txo,Mxo,Exo,B1,xfe,Cxo,wxo,tG,Axo,yxo,Lxo,I1,$fe,xxo,$xo,aG,kxo,Sxo,Rxo,N1,kfe,Pxo,Bxo,nG,Ixo,Nxo,qxo,q1,Sfe,jxo,Dxo,sG,Gxo,Oxo,Vxo,j1,Rfe,Xxo,zxo,lG,Wxo,Qxo,Hxo,D1,Uxo,Pfe,Jxo,Yxo,Bfe,Kxo,Zxo,G1,xqe,Gi,O1,Ife,Ay,e$o,Nfe,o$o,$qe,Ro,yy,r$o,Oi,t$o,iG,a$o,n$o,dG,s$o,l$o,i$o,Ly,d$o,qfe,c$o,f$o,m$o,dt,xy,g$o,jfe,h$o,p$o,Vi,_$o,Dfe,u$o,b$o,cG,v$o,F$o,T$o,V1,M$o,oo,$y,E$o,Gfe,C$o,w$o,Pa,A$o,Ofe,y$o,L$o,Vfe,x$o,$$o,Xfe,k$o,S$o,R$o,N,X1,zfe,P$o,B$o,fG,I$o,N$o,q$o,z1,Wfe,j$o,D$o,mG,G$o,O$o,V$o,W1,Qfe,X$o,z$o,gG,W$o,Q$o,H$o,Q1,Hfe,U$o,J$o,hG,Y$o,K$o,Z$o,H1,Ufe,eko,oko,pG,rko,tko,ako,U1,Jfe,nko,sko,_G,lko,iko,dko,J1,Yfe,cko,fko,uG,mko,gko,hko,Y1,Kfe,pko,_ko,bG,uko,bko,vko,K1,Zfe,Fko,Tko,vG,Mko,Eko,Cko,Z1,eme,wko,Ako,FG,yko,Lko,xko,e7,ome,$ko,kko,TG,Sko,Rko,Pko,o7,rme,Bko,Iko,MG,Nko,qko,jko,r7,tme,Dko,Gko,EG,Oko,Vko,Xko,t7,ame,zko,Wko,CG,Qko,Hko,Uko,a7,nme,Jko,Yko,wG,Kko,Zko,eSo,n7,sme,oSo,rSo,AG,tSo,aSo,nSo,s7,lme,sSo,lSo,yG,iSo,dSo,cSo,l7,ime,fSo,mSo,LG,gSo,hSo,pSo,i7,dme,_So,uSo,xG,bSo,vSo,FSo,d7,cme,TSo,MSo,$G,ESo,CSo,wSo,c7,fme,ASo,ySo,kG,LSo,xSo,$So,f7,mme,kSo,SSo,SG,RSo,PSo,BSo,m7,gme,ISo,NSo,RG,qSo,jSo,DSo,g7,hme,GSo,OSo,PG,VSo,XSo,zSo,h7,pme,WSo,QSo,BG,HSo,USo,JSo,p7,_me,YSo,KSo,IG,ZSo,eRo,oRo,_7,ume,rRo,tRo,NG,aRo,nRo,sRo,u7,bme,lRo,iRo,qG,dRo,cRo,fRo,b7,vme,mRo,gRo,jG,hRo,pRo,_Ro,v7,Fme,uRo,bRo,DG,vRo,FRo,TRo,F7,Tme,MRo,ERo,GG,CRo,wRo,ARo,T7,Mme,yRo,LRo,OG,xRo,$Ro,kRo,M7,Eme,SRo,RRo,VG,PRo,BRo,IRo,E7,Cme,NRo,qRo,XG,jRo,DRo,GRo,C7,wme,ORo,VRo,zG,XRo,zRo,WRo,w7,Ame,QRo,HRo,WG,URo,JRo,YRo,A7,yme,KRo,ZRo,QG,ePo,oPo,rPo,y7,Lme,tPo,aPo,HG,nPo,sPo,lPo,L7,xme,iPo,dPo,UG,cPo,fPo,mPo,x7,$me,gPo,hPo,JG,pPo,_Po,uPo,$7,kme,bPo,vPo,YG,FPo,TPo,MPo,k7,Sme,EPo,CPo,KG,wPo,APo,yPo,S7,Rme,LPo,xPo,ZG,$Po,kPo,SPo,R7,Pme,RPo,PPo,eO,BPo,IPo,NPo,P7,Bme,qPo,jPo,oO,DPo,GPo,OPo,B7,Ime,VPo,XPo,rO,zPo,WPo,QPo,I7,Nme,HPo,UPo,tO,JPo,YPo,KPo,N7,ZPo,qme,eBo,oBo,jme,rBo,tBo,q7,kqe,Xi,j7,Dme,ky,aBo,Gme,nBo,Sqe,Po,Sy,sBo,zi,lBo,aO,iBo,dBo,nO,cBo,fBo,mBo,Ry,gBo,Ome,hBo,pBo,_Bo,ct,Py,uBo,Vme,bBo,vBo,Wi,FBo,Xme,TBo,MBo,sO,EBo,CBo,wBo,D7,ABo,ro,By,yBo,zme,LBo,xBo,Ba,$Bo,Wme,kBo,SBo,Qme,RBo,PBo,Hme,BBo,IBo,NBo,K,G7,Ume,qBo,jBo,lO,DBo,GBo,OBo,O7,Jme,VBo,XBo,iO,zBo,WBo,QBo,V7,Yme,HBo,UBo,dO,JBo,YBo,KBo,X7,Kme,ZBo,eIo,cO,oIo,rIo,tIo,z7,Zme,aIo,nIo,fO,sIo,lIo,iIo,W7,ege,dIo,cIo,mO,fIo,mIo,gIo,Q7,oge,hIo,pIo,gO,_Io,uIo,bIo,H7,rge,vIo,FIo,hO,TIo,MIo,EIo,U7,tge,CIo,wIo,pO,AIo,yIo,LIo,J7,age,xIo,$Io,_O,kIo,SIo,RIo,Y7,nge,PIo,BIo,uO,IIo,NIo,qIo,K7,sge,jIo,DIo,bO,GIo,OIo,VIo,Z7,lge,XIo,zIo,vO,WIo,QIo,HIo,eb,ige,UIo,JIo,FO,YIo,KIo,ZIo,ob,dge,eNo,oNo,TO,rNo,tNo,aNo,rb,cge,nNo,sNo,MO,lNo,iNo,dNo,tb,fge,cNo,fNo,EO,mNo,gNo,hNo,ab,mge,pNo,_No,CO,uNo,bNo,vNo,nb,gge,FNo,TNo,wO,MNo,ENo,CNo,sb,hge,wNo,ANo,AO,yNo,LNo,xNo,lb,pge,$No,kNo,yO,SNo,RNo,PNo,ib,_ge,BNo,INo,LO,NNo,qNo,jNo,db,uge,DNo,GNo,xO,ONo,VNo,XNo,cb,bge,zNo,WNo,$O,QNo,HNo,UNo,fb,vge,JNo,YNo,kO,KNo,ZNo,eqo,mb,Fge,oqo,rqo,SO,tqo,aqo,nqo,gb,Tge,sqo,lqo,RO,iqo,dqo,cqo,hb,Mge,fqo,mqo,PO,gqo,hqo,pqo,pb,Ege,_qo,uqo,BO,bqo,vqo,Fqo,_b,Tqo,Cge,Mqo,Eqo,wge,Cqo,wqo,ub,Rqe,Qi,bb,Age,Iy,Aqo,yge,yqo,Pqe,Bo,Ny,Lqo,Hi,xqo,IO,$qo,kqo,NO,Sqo,Rqo,Pqo,qy,Bqo,Lge,Iqo,Nqo,qqo,ft,jy,jqo,xge,Dqo,Gqo,Ui,Oqo,$ge,Vqo,Xqo,qO,zqo,Wqo,Qqo,vb,Hqo,to,Dy,Uqo,kge,Jqo,Yqo,Ia,Kqo,Sge,Zqo,ejo,Rge,ojo,rjo,Pge,tjo,ajo,njo,Yr,Fb,Bge,sjo,ljo,jO,ijo,djo,cjo,Tb,Ige,fjo,mjo,DO,gjo,hjo,pjo,Mb,Nge,_jo,ujo,GO,bjo,vjo,Fjo,Eb,qge,Tjo,Mjo,OO,Ejo,Cjo,wjo,Cb,jge,Ajo,yjo,VO,Ljo,xjo,$jo,wb,kjo,Dge,Sjo,Rjo,Gge,Pjo,Bjo,Ab,Bqe,Ji,yb,Oge,Gy,Ijo,Vge,Njo,Iqe,Io,Oy,qjo,Yi,jjo,XO,Djo,Gjo,zO,Ojo,Vjo,Xjo,Vy,zjo,Xge,Wjo,Qjo,Hjo,mt,Xy,Ujo,zge,Jjo,Yjo,Ki,Kjo,Wge,Zjo,eDo,WO,oDo,rDo,tDo,Lb,aDo,ao,zy,nDo,Qge,sDo,lDo,Na,iDo,Hge,dDo,cDo,Uge,fDo,mDo,Jge,gDo,hDo,pDo,H,xb,Yge,_Do,uDo,QO,bDo,vDo,FDo,$b,Kge,TDo,MDo,HO,EDo,CDo,wDo,kb,Zge,ADo,yDo,UO,LDo,xDo,$Do,Sb,ehe,kDo,SDo,JO,RDo,PDo,BDo,Rb,ohe,IDo,NDo,YO,qDo,jDo,DDo,Pb,rhe,GDo,ODo,KO,VDo,XDo,zDo,Bb,the,WDo,QDo,ZO,HDo,UDo,JDo,Ib,ahe,YDo,KDo,eV,ZDo,eGo,oGo,Nb,nhe,rGo,tGo,oV,aGo,nGo,sGo,qb,she,lGo,iGo,rV,dGo,cGo,fGo,jb,lhe,mGo,gGo,tV,hGo,pGo,_Go,Db,ihe,uGo,bGo,aV,vGo,FGo,TGo,Gb,dhe,MGo,EGo,nV,CGo,wGo,AGo,Ob,che,yGo,LGo,sV,xGo,$Go,kGo,Vb,fhe,SGo,RGo,lV,PGo,BGo,IGo,Xb,mhe,NGo,qGo,iV,jGo,DGo,GGo,zb,ghe,OGo,VGo,dV,XGo,zGo,WGo,Wb,hhe,QGo,HGo,cV,UGo,JGo,YGo,Qb,phe,KGo,ZGo,fV,eOo,oOo,rOo,Hb,_he,tOo,aOo,mV,nOo,sOo,lOo,Ub,uhe,iOo,dOo,gV,cOo,fOo,mOo,Jb,bhe,gOo,hOo,hV,pOo,_Oo,uOo,Yb,vhe,bOo,vOo,pV,FOo,TOo,MOo,Kb,Fhe,EOo,COo,_V,wOo,AOo,yOo,Zb,The,LOo,xOo,uV,$Oo,kOo,SOo,e4,Mhe,ROo,POo,bV,BOo,IOo,NOo,o4,Ehe,qOo,jOo,vV,DOo,GOo,OOo,r4,Che,VOo,XOo,FV,zOo,WOo,QOo,t4,whe,HOo,UOo,TV,JOo,YOo,KOo,a4,Ahe,ZOo,eVo,MV,oVo,rVo,tVo,n4,yhe,aVo,nVo,EV,sVo,lVo,iVo,s4,Lhe,dVo,cVo,CV,fVo,mVo,gVo,l4,xhe,hVo,pVo,wV,_Vo,uVo,bVo,i4,$he,vVo,FVo,AV,TVo,MVo,EVo,d4,CVo,khe,wVo,AVo,She,yVo,LVo,c4,Nqe,Zi,f4,Rhe,Wy,xVo,Phe,$Vo,qqe,No,Qy,kVo,ed,SVo,yV,RVo,PVo,LV,BVo,IVo,NVo,Hy,qVo,Bhe,jVo,DVo,GVo,gt,Uy,OVo,Ihe,VVo,XVo,od,zVo,Nhe,WVo,QVo,xV,HVo,UVo,JVo,m4,YVo,no,Jy,KVo,qhe,ZVo,eXo,qa,oXo,jhe,rXo,tXo,Dhe,aXo,nXo,Ghe,sXo,lXo,iXo,V,g4,Ohe,dXo,cXo,$V,fXo,mXo,gXo,h4,Vhe,hXo,pXo,kV,_Xo,uXo,bXo,p4,Xhe,vXo,FXo,SV,TXo,MXo,EXo,_4,zhe,CXo,wXo,RV,AXo,yXo,LXo,u4,Whe,xXo,$Xo,PV,kXo,SXo,RXo,b4,Qhe,PXo,BXo,BV,IXo,NXo,qXo,v4,Hhe,jXo,DXo,IV,GXo,OXo,VXo,F4,Uhe,XXo,zXo,NV,WXo,QXo,HXo,T4,Jhe,UXo,JXo,qV,YXo,KXo,ZXo,M4,Yhe,ezo,ozo,jV,rzo,tzo,azo,E4,Khe,nzo,szo,DV,lzo,izo,dzo,C4,Zhe,czo,fzo,GV,mzo,gzo,hzo,w4,epe,pzo,_zo,OV,uzo,bzo,vzo,A4,ope,Fzo,Tzo,VV,Mzo,Ezo,Czo,y4,rpe,wzo,Azo,XV,yzo,Lzo,xzo,L4,tpe,$zo,kzo,zV,Szo,Rzo,Pzo,x4,ape,Bzo,Izo,WV,Nzo,qzo,jzo,$4,npe,Dzo,Gzo,QV,Ozo,Vzo,Xzo,k4,spe,zzo,Wzo,HV,Qzo,Hzo,Uzo,S4,lpe,Jzo,Yzo,UV,Kzo,Zzo,eWo,R4,ipe,oWo,rWo,JV,tWo,aWo,nWo,P4,dpe,sWo,lWo,YV,iWo,dWo,cWo,B4,cpe,fWo,mWo,KV,gWo,hWo,pWo,I4,fpe,_Wo,uWo,ZV,bWo,vWo,FWo,N4,mpe,TWo,MWo,eX,EWo,CWo,wWo,q4,gpe,AWo,yWo,oX,LWo,xWo,$Wo,j4,hpe,kWo,SWo,rX,RWo,PWo,BWo,D4,ppe,IWo,NWo,tX,qWo,jWo,DWo,G4,_pe,GWo,OWo,aX,VWo,XWo,zWo,O4,upe,WWo,QWo,nX,HWo,UWo,JWo,V4,bpe,YWo,KWo,sX,ZWo,eQo,oQo,X4,vpe,rQo,tQo,lX,aQo,nQo,sQo,z4,Fpe,lQo,iQo,iX,dQo,cQo,fQo,W4,Tpe,mQo,gQo,dX,hQo,pQo,_Qo,Q4,Mpe,uQo,bQo,cX,vQo,FQo,TQo,H4,Epe,MQo,EQo,fX,CQo,wQo,AQo,U4,Cpe,yQo,LQo,mX,xQo,$Qo,kQo,J4,wpe,SQo,RQo,gX,PQo,BQo,IQo,Y4,Ape,NQo,qQo,hX,jQo,DQo,GQo,K4,ype,OQo,VQo,pX,XQo,zQo,WQo,Z4,QQo,Lpe,HQo,UQo,xpe,JQo,YQo,ev,jqe,rd,ov,$pe,Yy,KQo,kpe,ZQo,Dqe,qo,Ky,eHo,td,oHo,_X,rHo,tHo,uX,aHo,nHo,sHo,Zy,lHo,Spe,iHo,dHo,cHo,ht,eL,fHo,Rpe,mHo,gHo,ad,hHo,Ppe,pHo,_Ho,bX,uHo,bHo,vHo,rv,FHo,so,oL,THo,Bpe,MHo,EHo,ja,CHo,Ipe,wHo,AHo,Npe,yHo,LHo,qpe,xHo,$Ho,kHo,jpe,tv,Dpe,SHo,RHo,vX,PHo,BHo,IHo,av,NHo,Gpe,qHo,jHo,Ope,DHo,GHo,nv,Gqe,nd,sv,Vpe,rL,OHo,Xpe,VHo,Oqe,jo,tL,XHo,sd,zHo,FX,WHo,QHo,TX,HHo,UHo,JHo,aL,YHo,zpe,KHo,ZHo,eUo,pt,nL,oUo,Wpe,rUo,tUo,ld,aUo,Qpe,nUo,sUo,MX,lUo,iUo,dUo,lv,cUo,lo,sL,fUo,Hpe,mUo,gUo,Da,hUo,Upe,pUo,_Uo,Jpe,uUo,bUo,Ype,vUo,FUo,TUo,Fe,iv,Kpe,MUo,EUo,EX,CUo,wUo,AUo,dv,Zpe,yUo,LUo,CX,xUo,$Uo,kUo,cv,e_e,SUo,RUo,wX,PUo,BUo,IUo,fv,o_e,NUo,qUo,AX,jUo,DUo,GUo,Bs,r_e,OUo,VUo,yX,XUo,zUo,LX,WUo,QUo,HUo,mv,t_e,UUo,JUo,xX,YUo,KUo,ZUo,_t,a_e,eJo,oJo,$X,rJo,tJo,kX,aJo,nJo,SX,sJo,lJo,iJo,gv,n_e,dJo,cJo,RX,fJo,mJo,gJo,hv,s_e,hJo,pJo,PX,_Jo,uJo,bJo,pv,l_e,vJo,FJo,BX,TJo,MJo,EJo,_v,i_e,CJo,wJo,IX,AJo,yJo,LJo,uv,d_e,xJo,$Jo,NX,kJo,SJo,RJo,bv,c_e,PJo,BJo,qX,IJo,NJo,qJo,vv,f_e,jJo,DJo,jX,GJo,OJo,VJo,Fv,XJo,m_e,zJo,WJo,g_e,QJo,HJo,Tv,Vqe,id,Mv,h_e,lL,UJo,p_e,JJo,Xqe,Do,iL,YJo,dd,KJo,DX,ZJo,eYo,GX,oYo,rYo,tYo,dL,aYo,__e,nYo,sYo,lYo,ut,cL,iYo,u_e,dYo,cYo,cd,fYo,b_e,mYo,gYo,OX,hYo,pYo,_Yo,Ev,uYo,io,fL,bYo,v_e,vYo,FYo,Ga,TYo,F_e,MYo,EYo,T_e,CYo,wYo,M_e,AYo,yYo,LYo,E_e,Cv,C_e,xYo,$Yo,VX,kYo,SYo,RYo,wv,PYo,w_e,BYo,IYo,A_e,NYo,qYo,Av,zqe,fd,yv,y_e,mL,jYo,L_e,DYo,Wqe,Go,gL,GYo,md,OYo,XX,VYo,XYo,zX,zYo,WYo,QYo,hL,HYo,x_e,UYo,JYo,YYo,bt,pL,KYo,$_e,ZYo,eKo,gd,oKo,k_e,rKo,tKo,WX,aKo,nKo,sKo,Lv,lKo,co,_L,iKo,S_e,dKo,cKo,Oa,fKo,R_e,mKo,gKo,P_e,hKo,pKo,B_e,_Ko,uKo,bKo,ke,xv,I_e,vKo,FKo,QX,TKo,MKo,EKo,$v,N_e,CKo,wKo,HX,AKo,yKo,LKo,kv,q_e,xKo,$Ko,UX,kKo,SKo,RKo,Sv,j_e,PKo,BKo,JX,IKo,NKo,qKo,Rv,D_e,jKo,DKo,YX,GKo,OKo,VKo,Pv,G_e,XKo,zKo,KX,WKo,QKo,HKo,Bv,O_e,UKo,JKo,ZX,YKo,KKo,ZKo,Iv,V_e,eZo,oZo,ez,rZo,tZo,aZo,Nv,X_e,nZo,sZo,oz,lZo,iZo,dZo,qv,cZo,z_e,fZo,mZo,W_e,gZo,hZo,jv,Qqe,hd,Dv,Q_e,uL,pZo,H_e,_Zo,Hqe,Oo,bL,uZo,pd,bZo,rz,vZo,FZo,tz,TZo,MZo,EZo,vL,CZo,U_e,wZo,AZo,yZo,vt,FL,LZo,J_e,xZo,$Zo,_d,kZo,Y_e,SZo,RZo,az,PZo,BZo,IZo,Gv,NZo,fo,TL,qZo,K_e,jZo,DZo,Va,GZo,Z_e,OZo,VZo,eue,XZo,zZo,oue,WZo,QZo,HZo,Kr,Ov,rue,UZo,JZo,nz,YZo,KZo,ZZo,Vv,tue,eer,oer,sz,rer,ter,aer,Xv,aue,ner,ser,lz,ler,ier,der,zv,nue,cer,fer,iz,mer,ger,her,Wv,sue,per,_er,dz,uer,ber,ver,Qv,Fer,lue,Ter,Mer,iue,Eer,Cer,Hv,Uqe,ud,Uv,due,ML,wer,cue,Aer,Jqe,Vo,EL,yer,bd,Ler,cz,xer,$er,fz,ker,Ser,Rer,CL,Per,fue,Ber,Ier,Ner,Ft,wL,qer,mue,jer,Der,vd,Ger,gue,Oer,Ver,mz,Xer,zer,Wer,Jv,Qer,mo,AL,Her,hue,Uer,Jer,Xa,Yer,pue,Ker,Zer,_ue,eor,oor,uue,ror,tor,aor,Se,Yv,bue,nor,sor,gz,lor,ior,dor,Kv,vue,cor,mor,hz,gor,hor,por,Zv,Fue,_or,uor,pz,bor,vor,For,eF,Tue,Tor,Mor,_z,Eor,Cor,wor,oF,Mue,Aor,yor,uz,Lor,xor,$or,rF,Eue,kor,Sor,bz,Ror,Por,Bor,tF,Cue,Ior,Nor,vz,qor,jor,Dor,aF,wue,Gor,Oor,Fz,Vor,Xor,zor,nF,Aue,Wor,Qor,Tz,Hor,Uor,Jor,sF,Yor,yue,Kor,Zor,Lue,err,orr,lF,Yqe,Fd,iF,xue,yL,rrr,$ue,trr,Kqe,Xo,LL,arr,Td,nrr,Mz,srr,lrr,Ez,irr,drr,crr,xL,frr,kue,mrr,grr,hrr,Tt,$L,prr,Sue,_rr,urr,Md,brr,Rue,vrr,Frr,Cz,Trr,Mrr,Err,dF,Crr,go,kL,wrr,Pue,Arr,yrr,za,Lrr,Bue,xrr,$rr,Iue,krr,Srr,Nue,Rrr,Prr,Brr,SL,cF,que,Irr,Nrr,wz,qrr,jrr,Drr,fF,jue,Grr,Orr,Az,Vrr,Xrr,zrr,mF,Wrr,Due,Qrr,Hrr,Gue,Urr,Jrr,gF,Zqe,Ed,hF,Oue,RL,Yrr,Vue,Krr,eje,zo,PL,Zrr,Cd,etr,yz,otr,rtr,Lz,ttr,atr,ntr,BL,str,Xue,ltr,itr,dtr,Mt,IL,ctr,zue,ftr,mtr,wd,gtr,Wue,htr,ptr,xz,_tr,utr,btr,pF,vtr,ho,NL,Ftr,Que,Ttr,Mtr,Wa,Etr,Hue,Ctr,wtr,Uue,Atr,ytr,Jue,Ltr,xtr,$tr,Zr,_F,Yue,ktr,Str,$z,Rtr,Ptr,Btr,uF,Kue,Itr,Ntr,kz,qtr,jtr,Dtr,bF,Zue,Gtr,Otr,Sz,Vtr,Xtr,ztr,vF,e2e,Wtr,Qtr,Rz,Htr,Utr,Jtr,FF,o2e,Ytr,Ktr,Pz,Ztr,ear,oar,TF,rar,r2e,tar,aar,t2e,nar,sar,MF,oje,Ad,EF,a2e,qL,lar,n2e,iar,rje,Wo,jL,dar,yd,car,Bz,far,mar,Iz,gar,har,par,DL,_ar,s2e,uar,bar,Far,Et,GL,Tar,l2e,Mar,Ear,Ld,Car,i2e,war,Aar,Nz,yar,Lar,xar,CF,$ar,po,OL,kar,d2e,Sar,Rar,Qa,Par,c2e,Bar,Iar,f2e,Nar,qar,m2e,jar,Dar,Gar,xd,wF,g2e,Oar,Var,qz,Xar,zar,War,AF,h2e,Qar,Har,jz,Uar,Jar,Yar,yF,p2e,Kar,Zar,Dz,enr,onr,rnr,LF,tnr,_2e,anr,nnr,u2e,snr,lnr,xF,tje,$d,$F,b2e,VL,inr,v2e,dnr,aje,Qo,XL,cnr,kd,fnr,Gz,mnr,gnr,Oz,hnr,pnr,_nr,zL,unr,F2e,bnr,vnr,Fnr,Ct,WL,Tnr,T2e,Mnr,Enr,Sd,Cnr,M2e,wnr,Anr,Vz,ynr,Lnr,xnr,kF,$nr,_o,QL,knr,E2e,Snr,Rnr,Ha,Pnr,C2e,Bnr,Inr,w2e,Nnr,qnr,A2e,jnr,Dnr,Gnr,HL,SF,y2e,Onr,Vnr,Xz,Xnr,znr,Wnr,RF,L2e,Qnr,Hnr,zz,Unr,Jnr,Ynr,PF,Knr,x2e,Znr,esr,$2e,osr,rsr,BF,nje,Rd,IF,k2e,UL,tsr,S2e,asr,sje,Ho,JL,nsr,Pd,ssr,Wz,lsr,isr,Qz,dsr,csr,fsr,YL,msr,R2e,gsr,hsr,psr,wt,KL,_sr,P2e,usr,bsr,Bd,vsr,B2e,Fsr,Tsr,Hz,Msr,Esr,Csr,NF,wsr,uo,ZL,Asr,I2e,ysr,Lsr,Ua,xsr,N2e,$sr,ksr,q2e,Ssr,Rsr,j2e,Psr,Bsr,Isr,D2e,qF,G2e,Nsr,qsr,Uz,jsr,Dsr,Gsr,jF,Osr,O2e,Vsr,Xsr,V2e,zsr,Wsr,DF,lje,Id,GF,X2e,e8,Qsr,z2e,Hsr,ije,Uo,o8,Usr,Nd,Jsr,Jz,Ysr,Ksr,Yz,Zsr,elr,olr,r8,rlr,W2e,tlr,alr,nlr,At,t8,slr,Q2e,llr,ilr,qd,dlr,H2e,clr,flr,Kz,mlr,glr,hlr,OF,plr,bo,a8,_lr,U2e,ulr,blr,Ja,vlr,J2e,Flr,Tlr,Y2e,Mlr,Elr,K2e,Clr,wlr,Alr,Ya,VF,Z2e,ylr,Llr,Zz,xlr,$lr,klr,XF,e1e,Slr,Rlr,eW,Plr,Blr,Ilr,zF,o1e,Nlr,qlr,oW,jlr,Dlr,Glr,WF,r1e,Olr,Vlr,rW,Xlr,zlr,Wlr,QF,Qlr,t1e,Hlr,Ulr,a1e,Jlr,Ylr,HF,dje,jd,UF,n1e,n8,Klr,s1e,Zlr,cje,Jo,s8,eir,Dd,oir,tW,rir,tir,aW,air,nir,sir,l8,lir,l1e,iir,dir,cir,yt,i8,fir,i1e,mir,gir,Gd,hir,d1e,pir,_ir,nW,uir,bir,vir,JF,Fir,vo,d8,Tir,c1e,Mir,Eir,Ka,Cir,f1e,wir,Air,m1e,yir,Lir,g1e,xir,$ir,kir,h1e,YF,p1e,Sir,Rir,sW,Pir,Bir,Iir,KF,Nir,_1e,qir,jir,u1e,Dir,Gir,ZF,fje,Od,eT,b1e,c8,Oir,v1e,Vir,mje,Yo,f8,Xir,Vd,zir,lW,Wir,Qir,iW,Hir,Uir,Jir,m8,Yir,F1e,Kir,Zir,edr,Lt,g8,odr,T1e,rdr,tdr,Xd,adr,M1e,ndr,sdr,dW,ldr,idr,ddr,oT,cdr,wr,h8,fdr,E1e,mdr,gdr,Za,hdr,C1e,pdr,_dr,w1e,udr,bdr,A1e,vdr,Fdr,Tdr,q,rT,y1e,Mdr,Edr,cW,Cdr,wdr,Adr,tT,L1e,ydr,Ldr,fW,xdr,$dr,kdr,aT,x1e,Sdr,Rdr,mW,Pdr,Bdr,Idr,nT,$1e,Ndr,qdr,gW,jdr,Ddr,Gdr,sT,k1e,Odr,Vdr,hW,Xdr,zdr,Wdr,lT,S1e,Qdr,Hdr,pW,Udr,Jdr,Ydr,iT,R1e,Kdr,Zdr,_W,ecr,ocr,rcr,dT,P1e,tcr,acr,uW,ncr,scr,lcr,cT,B1e,icr,dcr,bW,ccr,fcr,mcr,fT,I1e,gcr,hcr,vW,pcr,_cr,ucr,mT,N1e,bcr,vcr,FW,Fcr,Tcr,Mcr,gT,q1e,Ecr,Ccr,TW,wcr,Acr,ycr,hT,j1e,Lcr,xcr,MW,$cr,kcr,Scr,pT,D1e,Rcr,Pcr,EW,Bcr,Icr,Ncr,_T,G1e,qcr,jcr,CW,Dcr,Gcr,Ocr,uT,O1e,Vcr,Xcr,wW,zcr,Wcr,Qcr,bT,V1e,Hcr,Ucr,AW,Jcr,Ycr,Kcr,Is,X1e,Zcr,efr,yW,ofr,rfr,LW,tfr,afr,nfr,vT,z1e,sfr,lfr,xW,ifr,dfr,cfr,FT,W1e,ffr,mfr,$W,gfr,hfr,pfr,TT,Q1e,_fr,ufr,kW,bfr,vfr,Ffr,MT,H1e,Tfr,Mfr,SW,Efr,Cfr,wfr,ET,U1e,Afr,yfr,RW,Lfr,xfr,$fr,CT,J1e,kfr,Sfr,PW,Rfr,Pfr,Bfr,wT,Y1e,Ifr,Nfr,BW,qfr,jfr,Dfr,AT,K1e,Gfr,Ofr,IW,Vfr,Xfr,zfr,yT,Z1e,Wfr,Qfr,NW,Hfr,Ufr,Jfr,LT,e7e,Yfr,Kfr,qW,Zfr,emr,omr,xT,o7e,rmr,tmr,jW,amr,nmr,smr,$T,r7e,lmr,imr,DW,dmr,cmr,fmr,kT,t7e,mmr,gmr,GW,hmr,pmr,_mr,ST,a7e,umr,bmr,OW,vmr,Fmr,Tmr,RT,n7e,Mmr,Emr,VW,Cmr,wmr,Amr,PT,s7e,ymr,Lmr,XW,xmr,$mr,kmr,BT,l7e,Smr,Rmr,zW,Pmr,Bmr,Imr,IT,i7e,Nmr,qmr,WW,jmr,Dmr,Gmr,NT,d7e,Omr,Vmr,QW,Xmr,zmr,Wmr,qT,c7e,Qmr,Hmr,HW,Umr,Jmr,Ymr,jT,f7e,Kmr,Zmr,UW,egr,ogr,rgr,DT,m7e,tgr,agr,JW,ngr,sgr,lgr,GT,g7e,igr,dgr,YW,cgr,fgr,mgr,OT,h7e,ggr,hgr,KW,pgr,_gr,ugr,VT,p7e,bgr,vgr,ZW,Fgr,Tgr,Mgr,XT,_7e,Egr,Cgr,eQ,wgr,Agr,ygr,zT,u7e,Lgr,xgr,oQ,$gr,kgr,Sgr,WT,b7e,Rgr,Pgr,rQ,Bgr,Igr,Ngr,QT,v7e,qgr,jgr,tQ,Dgr,Ggr,Ogr,HT,gje,zd,UT,F7e,p8,Vgr,T7e,Xgr,hje,Ko,_8,zgr,Wd,Wgr,aQ,Qgr,Hgr,nQ,Ugr,Jgr,Ygr,u8,Kgr,M7e,Zgr,ehr,ohr,xt,b8,rhr,E7e,thr,ahr,Qd,nhr,C7e,shr,lhr,sQ,ihr,dhr,chr,JT,fhr,Ar,v8,mhr,w7e,ghr,hhr,en,phr,A7e,_hr,uhr,y7e,bhr,vhr,L7e,Fhr,Thr,Mhr,se,YT,x7e,Ehr,Chr,lQ,whr,Ahr,yhr,KT,$7e,Lhr,xhr,iQ,$hr,khr,Shr,ZT,k7e,Rhr,Phr,dQ,Bhr,Ihr,Nhr,eM,S7e,qhr,jhr,cQ,Dhr,Ghr,Ohr,oM,R7e,Vhr,Xhr,fQ,zhr,Whr,Qhr,rM,P7e,Hhr,Uhr,mQ,Jhr,Yhr,Khr,tM,B7e,Zhr,epr,gQ,opr,rpr,tpr,aM,I7e,apr,npr,hQ,spr,lpr,ipr,nM,N7e,dpr,cpr,pQ,fpr,mpr,gpr,sM,q7e,hpr,ppr,_Q,_pr,upr,bpr,lM,j7e,vpr,Fpr,uQ,Tpr,Mpr,Epr,iM,D7e,Cpr,wpr,bQ,Apr,ypr,Lpr,dM,G7e,xpr,$pr,vQ,kpr,Spr,Rpr,cM,O7e,Ppr,Bpr,FQ,Ipr,Npr,qpr,fM,V7e,jpr,Dpr,TQ,Gpr,Opr,Vpr,mM,X7e,Xpr,zpr,MQ,Wpr,Qpr,Hpr,gM,z7e,Upr,Jpr,EQ,Ypr,Kpr,Zpr,hM,W7e,e_r,o_r,CQ,r_r,t_r,a_r,pM,Q7e,n_r,s_r,wQ,l_r,i_r,d_r,_M,H7e,c_r,f_r,AQ,m_r,g_r,h_r,uM,U7e,p_r,__r,yQ,u_r,b_r,v_r,bM,J7e,F_r,T_r,LQ,M_r,E_r,C_r,vM,Y7e,w_r,A_r,xQ,y_r,L_r,x_r,FM,pje,Hd,TM,K7e,F8,$_r,Z7e,k_r,_je,Zo,T8,S_r,Ud,R_r,$Q,P_r,B_r,kQ,I_r,N_r,q_r,M8,j_r,ebe,D_r,G_r,O_r,$t,E8,V_r,obe,X_r,z_r,Jd,W_r,rbe,Q_r,H_r,SQ,U_r,J_r,Y_r,MM,K_r,yr,C8,Z_r,tbe,eur,our,on,rur,abe,tur,aur,nbe,nur,sur,sbe,lur,iur,dur,Me,EM,lbe,cur,fur,RQ,mur,gur,hur,CM,ibe,pur,_ur,PQ,uur,bur,vur,wM,dbe,Fur,Tur,BQ,Mur,Eur,Cur,AM,cbe,wur,Aur,IQ,yur,Lur,xur,yM,fbe,$ur,kur,NQ,Sur,Rur,Pur,LM,mbe,Bur,Iur,qQ,Nur,qur,jur,xM,gbe,Dur,Gur,jQ,Our,Vur,Xur,$M,hbe,zur,Wur,DQ,Qur,Hur,Uur,kM,pbe,Jur,Yur,GQ,Kur,Zur,e2r,SM,_be,o2r,r2r,OQ,t2r,a2r,n2r,RM,ube,s2r,l2r,VQ,i2r,d2r,c2r,PM,bbe,f2r,m2r,XQ,g2r,h2r,p2r,BM,uje,Yd,IM,vbe,w8,_2r,Fbe,u2r,bje,er,A8,b2r,Kd,v2r,zQ,F2r,T2r,WQ,M2r,E2r,C2r,y8,w2r,Tbe,A2r,y2r,L2r,kt,L8,x2r,Mbe,$2r,k2r,Zd,S2r,Ebe,R2r,P2r,QQ,B2r,I2r,N2r,NM,q2r,Lr,x8,j2r,Cbe,D2r,G2r,rn,O2r,wbe,V2r,X2r,Abe,z2r,W2r,ybe,Q2r,H2r,U2r,et,qM,Lbe,J2r,Y2r,HQ,K2r,Z2r,e1r,jM,xbe,o1r,r1r,UQ,t1r,a1r,n1r,DM,$be,s1r,l1r,JQ,i1r,d1r,c1r,GM,kbe,f1r,m1r,YQ,g1r,h1r,p1r,OM,Sbe,_1r,u1r,KQ,b1r,v1r,F1r,VM,vje,ec,XM,Rbe,$8,T1r,Pbe,M1r,Fje,or,k8,E1r,oc,C1r,ZQ,w1r,A1r,eH,y1r,L1r,x1r,S8,$1r,Bbe,k1r,S1r,R1r,St,R8,P1r,Ibe,B1r,I1r,rc,N1r,Nbe,q1r,j1r,oH,D1r,G1r,O1r,zM,V1r,xr,P8,X1r,qbe,z1r,W1r,tn,Q1r,jbe,H1r,U1r,Dbe,J1r,Y1r,Gbe,K1r,Z1r,e7r,ie,WM,Obe,o7r,r7r,rH,t7r,a7r,n7r,QM,Vbe,s7r,l7r,tH,i7r,d7r,c7r,HM,Xbe,f7r,m7r,aH,g7r,h7r,p7r,UM,zbe,_7r,u7r,nH,b7r,v7r,F7r,JM,Wbe,T7r,M7r,sH,E7r,C7r,w7r,YM,Qbe,A7r,y7r,lH,L7r,x7r,$7r,KM,Hbe,k7r,S7r,iH,R7r,P7r,B7r,ZM,Ube,I7r,N7r,dH,q7r,j7r,D7r,eE,Jbe,G7r,O7r,cH,V7r,X7r,z7r,oE,Ybe,W7r,Q7r,fH,H7r,U7r,J7r,rE,Kbe,Y7r,K7r,mH,Z7r,ebr,obr,tE,Zbe,rbr,tbr,gH,abr,nbr,sbr,aE,e4e,lbr,ibr,hH,dbr,cbr,fbr,nE,o4e,mbr,gbr,pH,hbr,pbr,_br,sE,r4e,ubr,bbr,_H,vbr,Fbr,Tbr,lE,t4e,Mbr,Ebr,uH,Cbr,wbr,Abr,iE,a4e,ybr,Lbr,bH,xbr,$br,kbr,dE,n4e,Sbr,Rbr,vH,Pbr,Bbr,Ibr,cE,s4e,Nbr,qbr,FH,jbr,Dbr,Gbr,fE,l4e,Obr,Vbr,TH,Xbr,zbr,Wbr,mE,Tje,tc,gE,i4e,B8,Qbr,d4e,Hbr,Mje,rr,I8,Ubr,ac,Jbr,MH,Ybr,Kbr,EH,Zbr,e4r,o4r,N8,r4r,c4e,t4r,a4r,n4r,Rt,q8,s4r,f4e,l4r,i4r,nc,d4r,m4e,c4r,f4r,CH,m4r,g4r,h4r,hE,p4r,$r,j8,_4r,g4e,u4r,b4r,an,v4r,h4e,F4r,T4r,p4e,M4r,E4r,_4e,C4r,w4r,A4r,ye,pE,u4e,y4r,L4r,wH,x4r,$4r,k4r,_E,b4e,S4r,R4r,AH,P4r,B4r,I4r,uE,v4e,N4r,q4r,yH,j4r,D4r,G4r,bE,F4e,O4r,V4r,LH,X4r,z4r,W4r,vE,T4e,Q4r,H4r,xH,U4r,J4r,Y4r,FE,M4e,K4r,Z4r,$H,evr,ovr,rvr,TE,E4e,tvr,avr,kH,nvr,svr,lvr,ME,C4e,ivr,dvr,SH,cvr,fvr,mvr,EE,w4e,gvr,hvr,RH,pvr,_vr,uvr,CE,A4e,bvr,vvr,PH,Fvr,Tvr,Mvr,wE,Eje,sc,AE,y4e,D8,Evr,L4e,Cvr,Cje,tr,G8,wvr,lc,Avr,BH,yvr,Lvr,IH,xvr,$vr,kvr,O8,Svr,x4e,Rvr,Pvr,Bvr,Pt,V8,Ivr,$4e,Nvr,qvr,ic,jvr,k4e,Dvr,Gvr,NH,Ovr,Vvr,Xvr,yE,zvr,kr,X8,Wvr,S4e,Qvr,Hvr,nn,Uvr,R4e,Jvr,Yvr,P4e,Kvr,Zvr,B4e,eFr,oFr,rFr,oe,LE,I4e,tFr,aFr,qH,nFr,sFr,lFr,xE,N4e,iFr,dFr,jH,cFr,fFr,mFr,$E,q4e,gFr,hFr,DH,pFr,_Fr,uFr,kE,j4e,bFr,vFr,GH,FFr,TFr,MFr,SE,D4e,EFr,CFr,OH,wFr,AFr,yFr,RE,G4e,LFr,xFr,VH,$Fr,kFr,SFr,PE,O4e,RFr,PFr,XH,BFr,IFr,NFr,BE,V4e,qFr,jFr,zH,DFr,GFr,OFr,IE,X4e,VFr,XFr,WH,zFr,WFr,QFr,NE,z4e,HFr,UFr,QH,JFr,YFr,KFr,qE,W4e,ZFr,eTr,HH,oTr,rTr,tTr,jE,Q4e,aTr,nTr,UH,sTr,lTr,iTr,DE,H4e,dTr,cTr,JH,fTr,mTr,gTr,GE,U4e,hTr,pTr,YH,_Tr,uTr,bTr,OE,J4e,vTr,FTr,KH,TTr,MTr,ETr,VE,Y4e,CTr,wTr,ZH,ATr,yTr,LTr,XE,K4e,xTr,$Tr,eU,kTr,STr,RTr,zE,Z4e,PTr,BTr,oU,ITr,NTr,qTr,WE,eve,jTr,DTr,rU,GTr,OTr,VTr,QE,ove,XTr,zTr,tU,WTr,QTr,HTr,HE,rve,UTr,JTr,aU,YTr,KTr,ZTr,UE,tve,eMr,oMr,nU,rMr,tMr,aMr,JE,ave,nMr,sMr,sU,lMr,iMr,dMr,YE,nve,cMr,fMr,lU,mMr,gMr,hMr,KE,sve,pMr,_Mr,iU,uMr,bMr,vMr,ZE,lve,FMr,TMr,dU,MMr,EMr,CMr,eC,wje,dc,oC,ive,z8,wMr,dve,AMr,Aje,ar,W8,yMr,cc,LMr,cU,xMr,$Mr,fU,kMr,SMr,RMr,Q8,PMr,cve,BMr,IMr,NMr,Bt,H8,qMr,fve,jMr,DMr,fc,GMr,mve,OMr,VMr,mU,XMr,zMr,WMr,rC,QMr,Sr,U8,HMr,gve,UMr,JMr,sn,YMr,hve,KMr,ZMr,pve,eEr,oEr,_ve,rEr,tEr,aEr,pe,tC,uve,nEr,sEr,gU,lEr,iEr,dEr,aC,bve,cEr,fEr,hU,mEr,gEr,hEr,nC,vve,pEr,_Er,pU,uEr,bEr,vEr,sC,Fve,FEr,TEr,_U,MEr,EEr,CEr,lC,Tve,wEr,AEr,uU,yEr,LEr,xEr,iC,Mve,$Er,kEr,bU,SEr,REr,PEr,dC,Eve,BEr,IEr,vU,NEr,qEr,jEr,cC,Cve,DEr,GEr,FU,OEr,VEr,XEr,fC,wve,zEr,WEr,TU,QEr,HEr,UEr,mC,Ave,JEr,YEr,MU,KEr,ZEr,eCr,gC,yve,oCr,rCr,EU,tCr,aCr,nCr,hC,Lve,sCr,lCr,CU,iCr,dCr,cCr,pC,xve,fCr,mCr,wU,gCr,hCr,pCr,_C,$ve,_Cr,uCr,AU,bCr,vCr,FCr,uC,kve,TCr,MCr,yU,ECr,CCr,wCr,bC,Sve,ACr,yCr,LU,LCr,xCr,$Cr,vC,Rve,kCr,SCr,xU,RCr,PCr,BCr,FC,yje,mc,TC,Pve,J8,ICr,Bve,NCr,Lje,nr,Y8,qCr,gc,jCr,$U,DCr,GCr,kU,OCr,VCr,XCr,K8,zCr,Ive,WCr,QCr,HCr,It,Z8,UCr,Nve,JCr,YCr,hc,KCr,qve,ZCr,e5r,SU,o5r,r5r,t5r,MC,a5r,Rr,e9,n5r,jve,s5r,l5r,ln,i5r,Dve,d5r,c5r,Gve,f5r,m5r,Ove,g5r,h5r,p5r,o9,EC,Vve,_5r,u5r,RU,b5r,v5r,F5r,CC,Xve,T5r,M5r,PU,E5r,C5r,w5r,wC,xje,pc,AC,zve,r9,A5r,Wve,y5r,$je,sr,t9,L5r,_c,x5r,BU,$5r,k5r,IU,S5r,R5r,P5r,a9,B5r,Qve,I5r,N5r,q5r,Nt,n9,j5r,Hve,D5r,G5r,uc,O5r,Uve,V5r,X5r,NU,z5r,W5r,Q5r,yC,H5r,Pr,s9,U5r,Jve,J5r,Y5r,dn,K5r,Yve,Z5r,e3r,Kve,o3r,r3r,Zve,t3r,a3r,n3r,eFe,LC,oFe,s3r,l3r,qU,i3r,d3r,c3r,xC,kje,bc,$C,rFe,l9,f3r,tFe,m3r,Sje,lr,i9,g3r,vc,h3r,jU,p3r,_3r,DU,u3r,b3r,v3r,d9,F3r,aFe,T3r,M3r,E3r,qt,c9,C3r,nFe,w3r,A3r,Fc,y3r,sFe,L3r,x3r,GU,$3r,k3r,S3r,kC,R3r,Br,f9,P3r,lFe,B3r,I3r,cn,N3r,iFe,q3r,j3r,dFe,D3r,G3r,cFe,O3r,V3r,X3r,de,SC,fFe,z3r,W3r,OU,Q3r,H3r,U3r,RC,mFe,J3r,Y3r,VU,K3r,Z3r,ewr,PC,gFe,owr,rwr,XU,twr,awr,nwr,BC,hFe,swr,lwr,zU,iwr,dwr,cwr,IC,pFe,fwr,mwr,WU,gwr,hwr,pwr,NC,_Fe,_wr,uwr,QU,bwr,vwr,Fwr,qC,uFe,Twr,Mwr,HU,Ewr,Cwr,wwr,jC,bFe,Awr,ywr,UU,Lwr,xwr,$wr,DC,vFe,kwr,Swr,JU,Rwr,Pwr,Bwr,GC,FFe,Iwr,Nwr,YU,qwr,jwr,Dwr,OC,TFe,Gwr,Owr,KU,Vwr,Xwr,zwr,VC,MFe,Wwr,Qwr,ZU,Hwr,Uwr,Jwr,XC,EFe,Ywr,Kwr,eJ,Zwr,e0r,o0r,zC,CFe,r0r,t0r,oJ,a0r,n0r,s0r,WC,wFe,l0r,i0r,rJ,d0r,c0r,f0r,QC,AFe,m0r,g0r,tJ,h0r,p0r,_0r,HC,yFe,u0r,b0r,aJ,v0r,F0r,T0r,UC,LFe,M0r,E0r,nJ,C0r,w0r,A0r,JC,xFe,y0r,L0r,sJ,x0r,$0r,k0r,YC,$Fe,S0r,R0r,lJ,P0r,B0r,I0r,KC,Rje,Tc,ZC,kFe,m9,N0r,SFe,q0r,Pje,ir,g9,j0r,Mc,D0r,iJ,G0r,O0r,dJ,V0r,X0r,z0r,h9,W0r,RFe,Q0r,H0r,U0r,jt,p9,J0r,PFe,Y0r,K0r,Ec,Z0r,BFe,e6r,o6r,cJ,r6r,t6r,a6r,e5,n6r,Ir,_9,s6r,IFe,l6r,i6r,fn,d6r,NFe,c6r,f6r,qFe,m6r,g6r,jFe,h6r,p6r,_6r,ce,o5,DFe,u6r,b6r,fJ,v6r,F6r,T6r,r5,GFe,M6r,E6r,mJ,C6r,w6r,A6r,t5,OFe,y6r,L6r,gJ,x6r,$6r,k6r,a5,VFe,S6r,R6r,hJ,P6r,B6r,I6r,n5,XFe,N6r,q6r,pJ,j6r,D6r,G6r,s5,zFe,O6r,V6r,_J,X6r,z6r,W6r,l5,WFe,Q6r,H6r,uJ,U6r,J6r,Y6r,i5,QFe,K6r,Z6r,bJ,eAr,oAr,rAr,d5,HFe,tAr,aAr,vJ,nAr,sAr,lAr,c5,UFe,iAr,dAr,FJ,cAr,fAr,mAr,f5,JFe,gAr,hAr,TJ,pAr,_Ar,uAr,m5,YFe,bAr,vAr,MJ,FAr,TAr,MAr,g5,KFe,EAr,CAr,EJ,wAr,AAr,yAr,h5,ZFe,LAr,xAr,CJ,$Ar,kAr,SAr,p5,eTe,RAr,PAr,wJ,BAr,IAr,NAr,_5,oTe,qAr,jAr,AJ,DAr,GAr,OAr,u5,rTe,VAr,XAr,yJ,zAr,WAr,QAr,b5,tTe,HAr,UAr,LJ,JAr,YAr,KAr,v5,aTe,ZAr,eyr,xJ,oyr,ryr,tyr,F5,nTe,ayr,nyr,$J,syr,lyr,iyr,T5,Bje,Cc,M5,sTe,u9,dyr,lTe,cyr,Ije,dr,b9,fyr,wc,myr,kJ,gyr,hyr,SJ,pyr,_yr,uyr,v9,byr,iTe,vyr,Fyr,Tyr,Dt,F9,Myr,dTe,Eyr,Cyr,Ac,wyr,cTe,Ayr,yyr,RJ,Lyr,xyr,$yr,E5,kyr,Nr,T9,Syr,fTe,Ryr,Pyr,mn,Byr,mTe,Iyr,Nyr,gTe,qyr,jyr,hTe,Dyr,Gyr,Oyr,pTe,C5,_Te,Vyr,Xyr,PJ,zyr,Wyr,Qyr,w5,Nje,yc,A5,uTe,M9,Hyr,bTe,Uyr,qje,cr,E9,Jyr,Lc,Yyr,BJ,Kyr,Zyr,IJ,eLr,oLr,rLr,C9,tLr,vTe,aLr,nLr,sLr,Gt,w9,lLr,FTe,iLr,dLr,xc,cLr,TTe,fLr,mLr,NJ,gLr,hLr,pLr,y5,_Lr,qr,A9,uLr,MTe,bLr,vLr,gn,FLr,ETe,TLr,MLr,CTe,ELr,CLr,wTe,wLr,ALr,yLr,ATe,L5,yTe,LLr,xLr,qJ,$Lr,kLr,SLr,x5,jje,$c,$5,LTe,y9,RLr,xTe,PLr,Dje,fr,L9,BLr,kc,ILr,jJ,NLr,qLr,DJ,jLr,DLr,GLr,x9,OLr,$Te,VLr,XLr,zLr,Ot,$9,WLr,kTe,QLr,HLr,Sc,ULr,STe,JLr,YLr,GJ,KLr,ZLr,e8r,k5,o8r,jr,k9,r8r,RTe,t8r,a8r,hn,n8r,PTe,s8r,l8r,BTe,i8r,d8r,ITe,c8r,f8r,m8r,te,S5,NTe,g8r,h8r,OJ,p8r,_8r,u8r,R5,qTe,b8r,v8r,VJ,F8r,T8r,M8r,P5,jTe,E8r,C8r,XJ,w8r,A8r,y8r,B5,DTe,L8r,x8r,zJ,$8r,k8r,S8r,I5,GTe,R8r,P8r,WJ,B8r,I8r,N8r,N5,OTe,q8r,j8r,QJ,D8r,G8r,O8r,q5,VTe,V8r,X8r,HJ,z8r,W8r,Q8r,j5,XTe,H8r,U8r,UJ,J8r,Y8r,K8r,D5,zTe,Z8r,e9r,JJ,o9r,r9r,t9r,G5,WTe,a9r,n9r,YJ,s9r,l9r,i9r,O5,QTe,d9r,c9r,KJ,f9r,m9r,g9r,V5,HTe,h9r,p9r,ZJ,_9r,u9r,b9r,X5,UTe,v9r,F9r,eY,T9r,M9r,E9r,z5,JTe,C9r,w9r,oY,A9r,y9r,L9r,W5,YTe,x9r,$9r,rY,k9r,S9r,R9r,Q5,KTe,P9r,B9r,tY,I9r,N9r,q9r,H5,ZTe,j9r,D9r,aY,G9r,O9r,V9r,U5,eMe,X9r,z9r,nY,W9r,Q9r,H9r,J5,oMe,U9r,J9r,sY,Y9r,K9r,Z9r,Y5,rMe,exr,oxr,lY,rxr,txr,axr,K5,tMe,nxr,sxr,iY,lxr,ixr,dxr,Z5,aMe,cxr,fxr,dY,mxr,gxr,hxr,e3,nMe,pxr,_xr,cY,uxr,bxr,vxr,o3,sMe,Fxr,Txr,fY,Mxr,Exr,Cxr,r3,lMe,wxr,Axr,mY,yxr,Lxr,xxr,t3,Gje,Rc,a3,iMe,S9,$xr,dMe,kxr,Oje,mr,R9,Sxr,Pc,Rxr,gY,Pxr,Bxr,hY,Ixr,Nxr,qxr,P9,jxr,cMe,Dxr,Gxr,Oxr,Vt,B9,Vxr,fMe,Xxr,zxr,Bc,Wxr,mMe,Qxr,Hxr,pY,Uxr,Jxr,Yxr,n3,Kxr,Dr,I9,Zxr,gMe,e$r,o$r,pn,r$r,hMe,t$r,a$r,pMe,n$r,s$r,_Me,l$r,i$r,d$r,Re,s3,uMe,c$r,f$r,_Y,m$r,g$r,h$r,l3,bMe,p$r,_$r,uY,u$r,b$r,v$r,i3,vMe,F$r,T$r,bY,M$r,E$r,C$r,d3,FMe,w$r,A$r,vY,y$r,L$r,x$r,c3,TMe,$$r,k$r,FY,S$r,R$r,P$r,f3,MMe,B$r,I$r,TY,N$r,q$r,j$r,m3,EMe,D$r,G$r,MY,O$r,V$r,X$r,g3,CMe,z$r,W$r,EY,Q$r,H$r,U$r,h3,wMe,J$r,Y$r,CY,K$r,Z$r,ekr,p3,Vje,Ic,_3,AMe,N9,okr,yMe,rkr,Xje,gr,q9,tkr,Nc,akr,wY,nkr,skr,AY,lkr,ikr,dkr,j9,ckr,LMe,fkr,mkr,gkr,Xt,D9,hkr,xMe,pkr,_kr,qc,ukr,$Me,bkr,vkr,yY,Fkr,Tkr,Mkr,u3,Ekr,Gr,G9,Ckr,kMe,wkr,Akr,_n,ykr,SMe,Lkr,xkr,RMe,$kr,kkr,PMe,Skr,Rkr,Pkr,Ee,b3,BMe,Bkr,Ikr,LY,Nkr,qkr,jkr,v3,IMe,Dkr,Gkr,xY,Okr,Vkr,Xkr,F3,NMe,zkr,Wkr,$Y,Qkr,Hkr,Ukr,T3,qMe,Jkr,Ykr,kY,Kkr,Zkr,eSr,M3,jMe,oSr,rSr,SY,tSr,aSr,nSr,E3,DMe,sSr,lSr,RY,iSr,dSr,cSr,C3,GMe,fSr,mSr,PY,gSr,hSr,pSr,w3,OMe,_Sr,uSr,BY,bSr,vSr,FSr,A3,VMe,TSr,MSr,IY,ESr,CSr,wSr,y3,XMe,ASr,ySr,NY,LSr,xSr,$Sr,L3,zMe,kSr,SSr,qY,RSr,PSr,BSr,x3,WMe,ISr,NSr,jY,qSr,jSr,DSr,$3,zje,jc,k3,QMe,O9,GSr,HMe,OSr,Wje,hr,V9,VSr,Dc,XSr,DY,zSr,WSr,GY,QSr,HSr,USr,X9,JSr,UMe,YSr,KSr,ZSr,zt,z9,eRr,JMe,oRr,rRr,Gc,tRr,YMe,aRr,nRr,OY,sRr,lRr,iRr,S3,dRr,Or,W9,cRr,KMe,fRr,mRr,un,gRr,ZMe,hRr,pRr,eEe,_Rr,uRr,oEe,bRr,vRr,FRr,Le,R3,rEe,TRr,MRr,VY,ERr,CRr,wRr,P3,tEe,ARr,yRr,XY,LRr,xRr,$Rr,B3,aEe,kRr,SRr,zY,RRr,PRr,BRr,I3,nEe,IRr,NRr,WY,qRr,jRr,DRr,N3,sEe,GRr,ORr,QY,VRr,XRr,zRr,q3,lEe,WRr,QRr,HY,HRr,URr,JRr,j3,iEe,YRr,KRr,UY,ZRr,ePr,oPr,D3,dEe,rPr,tPr,JY,aPr,nPr,sPr,G3,cEe,lPr,iPr,YY,dPr,cPr,fPr,O3,fEe,mPr,gPr,KY,hPr,pPr,_Pr,V3,Qje,Oc,X3,mEe,Q9,uPr,gEe,bPr,Hje,pr,H9,vPr,Vc,FPr,ZY,TPr,MPr,eK,EPr,CPr,wPr,U9,APr,hEe,yPr,LPr,xPr,Wt,J9,$Pr,pEe,kPr,SPr,Xc,RPr,_Ee,PPr,BPr,oK,IPr,NPr,qPr,z3,jPr,Vr,Y9,DPr,uEe,GPr,OPr,bn,VPr,bEe,XPr,zPr,vEe,WPr,QPr,FEe,HPr,UPr,JPr,Pe,W3,TEe,YPr,KPr,rK,ZPr,eBr,oBr,Q3,MEe,rBr,tBr,tK,aBr,nBr,sBr,H3,EEe,lBr,iBr,aK,dBr,cBr,fBr,U3,CEe,mBr,gBr,nK,hBr,pBr,_Br,J3,wEe,uBr,bBr,sK,vBr,FBr,TBr,Y3,AEe,MBr,EBr,lK,CBr,wBr,ABr,K3,yEe,yBr,LBr,iK,xBr,$Br,kBr,Z3,LEe,SBr,RBr,dK,PBr,BBr,IBr,ew,xEe,NBr,qBr,cK,jBr,DBr,GBr,ow,Uje,zc,rw,$Ee,K9,OBr,kEe,VBr,Jje,_r,Z9,XBr,Wc,zBr,fK,WBr,QBr,mK,HBr,UBr,JBr,ex,YBr,SEe,KBr,ZBr,eIr,Qt,ox,oIr,REe,rIr,tIr,Qc,aIr,PEe,nIr,sIr,gK,lIr,iIr,dIr,tw,cIr,Xr,rx,fIr,BEe,mIr,gIr,vn,hIr,IEe,pIr,_Ir,NEe,uIr,bIr,qEe,vIr,FIr,TIr,xe,aw,jEe,MIr,EIr,hK,CIr,wIr,AIr,nw,DEe,yIr,LIr,pK,xIr,$Ir,kIr,sw,GEe,SIr,RIr,_K,PIr,BIr,IIr,lw,OEe,NIr,qIr,uK,jIr,DIr,GIr,iw,VEe,OIr,VIr,bK,XIr,zIr,WIr,dw,XEe,QIr,HIr,vK,UIr,JIr,YIr,cw,zEe,KIr,ZIr,FK,eNr,oNr,rNr,fw,WEe,tNr,aNr,TK,nNr,sNr,lNr,mw,QEe,iNr,dNr,MK,cNr,fNr,mNr,gw,HEe,gNr,hNr,EK,pNr,_Nr,uNr,hw,Yje,Hc,pw,UEe,tx,bNr,JEe,vNr,Kje,ur,ax,FNr,Uc,TNr,CK,MNr,ENr,wK,CNr,wNr,ANr,nx,yNr,YEe,LNr,xNr,$Nr,Ht,sx,kNr,KEe,SNr,RNr,Jc,PNr,ZEe,BNr,INr,AK,NNr,qNr,jNr,_w,DNr,zr,lx,GNr,eCe,ONr,VNr,Fn,XNr,oCe,zNr,WNr,rCe,QNr,HNr,tCe,UNr,JNr,YNr,$e,uw,aCe,KNr,ZNr,yK,eqr,oqr,rqr,bw,nCe,tqr,aqr,LK,nqr,sqr,lqr,vw,sCe,iqr,dqr,xK,cqr,fqr,mqr,Fw,lCe,gqr,hqr,$K,pqr,_qr,uqr,Tw,iCe,bqr,vqr,kK,Fqr,Tqr,Mqr,Mw,dCe,Eqr,Cqr,SK,wqr,Aqr,yqr,Ew,cCe,Lqr,xqr,RK,$qr,kqr,Sqr,Cw,fCe,Rqr,Pqr,PK,Bqr,Iqr,Nqr,ww,mCe,qqr,jqr,BK,Dqr,Gqr,Oqr,Aw,gCe,Vqr,Xqr,IK,zqr,Wqr,Qqr,yw,Zje,Yc,Lw,hCe,ix,Hqr,pCe,Uqr,eDe,br,dx,Jqr,Kc,Yqr,NK,Kqr,Zqr,qK,ejr,ojr,rjr,cx,tjr,_Ce,ajr,njr,sjr,Ut,fx,ljr,uCe,ijr,djr,Zc,cjr,bCe,fjr,mjr,jK,gjr,hjr,pjr,xw,_jr,Wr,mx,ujr,vCe,bjr,vjr,Tn,Fjr,FCe,Tjr,Mjr,TCe,Ejr,Cjr,MCe,wjr,Ajr,yjr,De,$w,ECe,Ljr,xjr,DK,$jr,kjr,Sjr,kw,CCe,Rjr,Pjr,GK,Bjr,Ijr,Njr,Sw,wCe,qjr,jjr,OK,Djr,Gjr,Ojr,Rw,ACe,Vjr,Xjr,VK,zjr,Wjr,Qjr,Pw,yCe,Hjr,Ujr,XK,Jjr,Yjr,Kjr,Bw,LCe,Zjr,eDr,zK,oDr,rDr,tDr,Iw,xCe,aDr,nDr,WK,sDr,lDr,iDr,Nw,$Ce,dDr,cDr,QK,fDr,mDr,gDr,qw,oDe,ef,jw,kCe,gx,hDr,SCe,pDr,rDe,vr,hx,_Dr,of,uDr,HK,bDr,vDr,UK,FDr,TDr,MDr,px,EDr,RCe,CDr,wDr,ADr,Jt,_x,yDr,PCe,LDr,xDr,rf,$Dr,BCe,kDr,SDr,JK,RDr,PDr,BDr,Dw,IDr,Qr,ux,NDr,ICe,qDr,jDr,Mn,DDr,NCe,GDr,ODr,qCe,VDr,XDr,jCe,zDr,WDr,QDr,Ge,Gw,DCe,HDr,UDr,YK,JDr,YDr,KDr,Ow,GCe,ZDr,eGr,KK,oGr,rGr,tGr,Vw,OCe,aGr,nGr,ZK,sGr,lGr,iGr,Xw,VCe,dGr,cGr,eZ,fGr,mGr,gGr,zw,XCe,hGr,pGr,oZ,_Gr,uGr,bGr,Ww,zCe,vGr,FGr,rZ,TGr,MGr,EGr,Qw,WCe,CGr,wGr,tZ,AGr,yGr,LGr,Hw,QCe,xGr,$Gr,aZ,kGr,SGr,RGr,Uw,tDe,tf,Jw,HCe,bx,PGr,UCe,BGr,aDe,Fr,vx,IGr,af,NGr,nZ,qGr,jGr,sZ,DGr,GGr,OGr,Fx,VGr,JCe,XGr,zGr,WGr,Yt,Tx,QGr,YCe,HGr,UGr,nf,JGr,KCe,YGr,KGr,lZ,ZGr,eOr,oOr,Yw,rOr,Hr,Mx,tOr,ZCe,aOr,nOr,En,sOr,e5e,lOr,iOr,o5e,dOr,cOr,r5e,fOr,mOr,gOr,t5e,Kw,a5e,hOr,pOr,iZ,_Or,uOr,bOr,Zw,nDe,sf,e0,n5e,Ex,vOr,s5e,FOr,sDe,Tr,Cx,TOr,lf,MOr,dZ,EOr,COr,cZ,wOr,AOr,yOr,wx,LOr,l5e,xOr,$Or,kOr,Kt,Ax,SOr,i5e,ROr,POr,df,BOr,d5e,IOr,NOr,fZ,qOr,jOr,DOr,o0,GOr,Ur,yx,OOr,c5e,VOr,XOr,Cn,zOr,f5e,WOr,QOr,m5e,HOr,UOr,g5e,JOr,YOr,KOr,Lx,r0,h5e,ZOr,eVr,mZ,oVr,rVr,tVr,t0,p5e,aVr,nVr,gZ,sVr,lVr,iVr,a0,lDe,cf,n0,_5e,xx,dVr,u5e,cVr,iDe,Mr,$x,fVr,ff,mVr,hZ,gVr,hVr,pZ,pVr,_Vr,uVr,kx,bVr,b5e,vVr,FVr,TVr,Zt,Sx,MVr,v5e,EVr,CVr,mf,wVr,F5e,AVr,yVr,_Z,LVr,xVr,$Vr,s0,kVr,Jr,Rx,SVr,T5e,RVr,PVr,wn,BVr,M5e,IVr,NVr,E5e,qVr,jVr,C5e,DVr,GVr,OVr,w5e,l0,A5e,VVr,XVr,uZ,zVr,WVr,QVr,i0,dDe;return d=new re({}),wa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),xA=new re({}),$A=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Tf=new HVr({props:{warning:!0,$$slots:{default:[R$t]},$$scope:{ctx:L}}}),kA=new re({}),SA=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L584"}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L607"}}),Cg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[P$t]},$$scope:{ctx:L}}}),IA=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L730"}}),NA=new re({}),qA=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L390"}}),GA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17427/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L404"}}),nh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[B$t]},$$scope:{ctx:L}}}),OA=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L603"}}),VA=new re({}),XA=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),QA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L204"}}),Nh=new HVr({props:{$$slots:{default:[I$t]},$$scope:{ctx:L}}}),qh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[N$t]},$$scope:{ctx:L}}}),HA=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L331"}}),UA=new re({}),JA=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L88"}}),ZA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L102"}}),ap=new HVr({props:{$$slots:{default:[q$t]},$$scope:{ctx:L}}}),np=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[j$t]},$$scope:{ctx:L}}}),ey=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L255"}}),oy=new re({}),ry=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L736"}}),ay=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),ip=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[D$t]},$$scope:{ctx:L}}}),ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),tu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[G$t]},$$scope:{ctx:L}}}),sy=new re({}),ly=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L743"}}),dy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),nu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[O$t]},$$scope:{ctx:L}}}),cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Uu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[V$t]},$$scope:{ctx:L}}}),fy=new re({}),my=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L758"}}),hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Yu=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[X$t]},$$scope:{ctx:L}}}),py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),I2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[z$t]},$$scope:{ctx:L}}}),_y=new re({}),uy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L765"}}),vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),q2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[W$t]},$$scope:{ctx:L}}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),T1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Q$t]},$$scope:{ctx:L}}}),Ty=new re({}),My=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L772"}}),Cy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),E1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[H$t]},$$scope:{ctx:L}}}),wy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),G1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[U$t]},$$scope:{ctx:L}}}),Ay=new re({}),yy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L781"}}),xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),V1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[J$t]},$$scope:{ctx:L}}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),q7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Y$t]},$$scope:{ctx:L}}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L815"}}),Py=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),D7=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[K$t]},$$scope:{ctx:L}}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ub=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Z$t]},$$scope:{ctx:L}}}),Iy=new re({}),Ny=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L822"}}),jy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),vb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[ekt]},$$scope:{ctx:L}}}),Dy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Ab=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[okt]},$$scope:{ctx:L}}}),Gy=new re({}),Oy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L808"}}),Xy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Lb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[rkt]},$$scope:{ctx:L}}}),zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),c4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[tkt]},$$scope:{ctx:L}}}),Wy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L790"}}),Uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),m4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[akt]},$$scope:{ctx:L}}}),Jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ev=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[nkt]},$$scope:{ctx:L}}}),Yy=new re({}),Ky=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L797"}}),eL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),rv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[skt]},$$scope:{ctx:L}}}),oL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),nv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[lkt]},$$scope:{ctx:L}}}),rL=new re({}),tL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L831"}}),nL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),lv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[ikt]},$$scope:{ctx:L}}}),sL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[dkt]},$$scope:{ctx:L}}}),lL=new re({}),iL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L870"}}),cL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[ckt]},$$scope:{ctx:L}}}),fL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[fkt]},$$scope:{ctx:L}}}),mL=new re({}),gL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L877"}}),pL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[mkt]},$$scope:{ctx:L}}}),_L=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),jv=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[gkt]},$$scope:{ctx:L}}}),uL=new re({}),bL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L900"}}),FL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Gv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[hkt]},$$scope:{ctx:L}}}),TL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Hv=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[pkt]},$$scope:{ctx:L}}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L884"}}),wL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Jv=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[_kt]},$$scope:{ctx:L}}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[ukt]},$$scope:{ctx:L}}}),yL=new re({}),LL=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L891"}}),$L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bkt]},$$scope:{ctx:L}}}),kL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),gF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vkt]},$$scope:{ctx:L}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L909"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),pF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Fkt]},$$scope:{ctx:L}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),MF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Tkt]},$$scope:{ctx:L}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L916"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),CF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Mkt]},$$scope:{ctx:L}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),xF=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Ekt]},$$scope:{ctx:L}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L863"}}),WL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),kF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Ckt]},$$scope:{ctx:L}}}),QL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),BF=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[wkt]},$$scope:{ctx:L}}}),UL=new re({}),JL=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L838"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),NF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Akt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ykt]},$$scope:{ctx:L}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L845"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Lkt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[xkt]},$$scope:{ctx:L}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L854"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[$kt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[kkt]},$$scope:{ctx:L}}}),c8=new re({}),f8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),g8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),oT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Skt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Rkt]},$$scope:{ctx:L}}}),p8=new re({}),_8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),b8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Pkt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Bkt]},$$scope:{ctx:L}}}),F8=new re({}),T8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L418"}}),E8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[Ikt]},$$scope:{ctx:L}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),BM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Nkt]},$$scope:{ctx:L}}}),w8=new re({}),A8=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L434"}}),L8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[qkt]},$$scope:{ctx:L}}}),x8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),VM=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jkt]},$$scope:{ctx:L}}}),$8=new re({}),k8=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L450"}}),R8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),zM=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Dkt]},$$scope:{ctx:L}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Gkt]},$$scope:{ctx:L}}}),B8=new re({}),I8=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L457"}}),q8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Okt]},$$scope:{ctx:L}}}),j8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Vkt]},$$scope:{ctx:L}}}),D8=new re({}),G8=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),V8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Xkt]},$$scope:{ctx:L}}}),X8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),eC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[zkt]},$$scope:{ctx:L}}}),z8=new re({}),W8=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L502"}}),H8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),rC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Wkt]},$$scope:{ctx:L}}}),U8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Qkt]},$$scope:{ctx:L}}}),J8=new re({}),Y8=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L509"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Hkt]},$$scope:{ctx:L}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),wC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Ukt]},$$scope:{ctx:L}}}),r9=new re({}),t9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L482"}}),n9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),yC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Jkt]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),xC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Ykt]},$$scope:{ctx:L}}}),l9=new re({}),i9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L493"}}),c9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),kC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Kkt]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Zkt]},$$scope:{ctx:L}}}),m9=new re({}),g9=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L475"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[eSt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),T5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[oSt]},$$scope:{ctx:L}}}),u9=new re({}),b9=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L443"}}),F9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),E5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[rSt]},$$scope:{ctx:L}}}),T9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[tSt]},$$scope:{ctx:L}}}),M9=new re({}),E9=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L518"}}),w9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),y5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[aSt]},$$scope:{ctx:L}}}),A9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),x5=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[nSt]},$$scope:{ctx:L}}}),y9=new re({}),L9=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),$9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),k5=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[sSt]},$$scope:{ctx:L}}}),k9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[lSt]},$$scope:{ctx:L}}}),S9=new re({}),R9=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),B9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[iSt]},$$scope:{ctx:L}}}),I9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),p3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[dSt]},$$scope:{ctx:L}}}),N9=new re({}),q9=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),D9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[cSt]},$$scope:{ctx:L}}}),G9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),$3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[fSt]},$$scope:{ctx:L}}}),O9=new re({}),V9=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),z9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),S3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[mSt]},$$scope:{ctx:L}}}),W9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),V3=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[gSt]},$$scope:{ctx:L}}}),Q9=new re({}),H9=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),J9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),z3=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[hSt]},$$scope:{ctx:L}}}),Y9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[pSt]},$$scope:{ctx:L}}}),K9=new re({}),Z9=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),ox=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),tw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[_St]},$$scope:{ctx:L}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),hw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[uSt]},$$scope:{ctx:L}}}),tx=new re({}),ax=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),_w=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[bSt]},$$scope:{ctx:L}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[vSt]},$$scope:{ctx:L}}}),ix=new re({}),dx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),fx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[FSt]},$$scope:{ctx:L}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[TSt]},$$scope:{ctx:L}}}),gx=new re({}),hx=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),_x=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[MSt]},$$scope:{ctx:L}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[ESt]},$$scope:{ctx:L}}}),bx=new re({}),vx=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Yw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[CSt]},$$scope:{ctx:L}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Zw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[wSt]},$$scope:{ctx:L}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ASt]},$$scope:{ctx:L}}}),yx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ySt]},$$scope:{ctx:L}}}),xx=new re({}),$x=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[LSt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[xSt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),mi=o("Auto Classes"),_f=l(),tt=a("p"),gi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=a("code"),wA=o("from_pretrained()"),uf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),pi=o("Instantiating one of "),yn=a("a"),AA=o("AutoConfig"),Ln=o(", "),xn=a("a"),yA=o("AutoModel"),_i=o(`, and
`),$n=a("a"),LA=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),bf=l(),F(wa.$$.fragment),Qe=l(),Ae=a("p"),Q$=o("will create a model that is an instance of "),bi=a("a"),H$=o("BertModel"),U$=o("."),Eo=l(),Aa=a("p"),J$=o("There is one class of "),vf=a("code"),Y$=o("AutoModel"),uOe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),sqe=l(),vi=a("h2"),Ff=a("a"),coe=a("span"),F(xA.$$.fragment),bOe=l(),foe=a("span"),vOe=o("Extending the Auto Classes"),lqe=l(),kn=a("p"),FOe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),moe=a("code"),TOe=o("NewModel"),MOe=o(", make sure you have a "),goe=a("code"),EOe=o("NewModelConfig"),COe=o(` then you can add those to the auto
classes like this:`),iqe=l(),F($A.$$.fragment),dqe=l(),K$=a("p"),wOe=o("You will then be able to use the auto classes like you would usually do!"),cqe=l(),F(Tf.$$.fragment),fqe=l(),Fi=a("h2"),Mf=a("a"),hoe=a("span"),F(kA.$$.fragment),AOe=l(),poe=a("span"),yOe=o("AutoConfig"),mqe=l(),Co=a("div"),F(SA.$$.fragment),LOe=l(),RA=a("p"),xOe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z$=a("a"),$Oe=o("from_pretrained()"),kOe=o(" class method."),SOe=l(),PA=a("p"),ROe=o("This class cannot be instantiated directly using "),_oe=a("code"),POe=o("__init__()"),BOe=o(" (throws an error)."),IOe=l(),Er=a("div"),F(BA.$$.fragment),NOe=l(),uoe=a("p"),qOe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),jOe=l(),Ti=a("p"),DOe=o("The configuration class to instantiate is selected based on the "),boe=a("code"),GOe=o("model_type"),OOe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),voe=a("code"),VOe=o("pretrained_model_name_or_path"),XOe=o(":"),zOe=l(),A=a("ul"),Ef=a("li"),Foe=a("strong"),WOe=o("albert"),QOe=o(" \u2014 "),ek=a("a"),HOe=o("AlbertConfig"),UOe=o(" (ALBERT model)"),JOe=l(),Cf=a("li"),Toe=a("strong"),YOe=o("bart"),KOe=o(" \u2014 "),ok=a("a"),ZOe=o("BartConfig"),eVe=o(" (BART model)"),oVe=l(),wf=a("li"),Moe=a("strong"),rVe=o("beit"),tVe=o(" \u2014 "),rk=a("a"),aVe=o("BeitConfig"),nVe=o(" (BEiT model)"),sVe=l(),Af=a("li"),Eoe=a("strong"),lVe=o("bert"),iVe=o(" \u2014 "),tk=a("a"),dVe=o("BertConfig"),cVe=o(" (BERT model)"),fVe=l(),yf=a("li"),Coe=a("strong"),mVe=o("bert-generation"),gVe=o(" \u2014 "),ak=a("a"),hVe=o("BertGenerationConfig"),pVe=o(" (Bert Generation model)"),_Ve=l(),Lf=a("li"),woe=a("strong"),uVe=o("big_bird"),bVe=o(" \u2014 "),nk=a("a"),vVe=o("BigBirdConfig"),FVe=o(" (BigBird model)"),TVe=l(),xf=a("li"),Aoe=a("strong"),MVe=o("bigbird_pegasus"),EVe=o(" \u2014 "),sk=a("a"),CVe=o("BigBirdPegasusConfig"),wVe=o(" (BigBirdPegasus model)"),AVe=l(),$f=a("li"),yoe=a("strong"),yVe=o("blenderbot"),LVe=o(" \u2014 "),lk=a("a"),xVe=o("BlenderbotConfig"),$Ve=o(" (Blenderbot model)"),kVe=l(),kf=a("li"),Loe=a("strong"),SVe=o("blenderbot-small"),RVe=o(" \u2014 "),ik=a("a"),PVe=o("BlenderbotSmallConfig"),BVe=o(" (BlenderbotSmall model)"),IVe=l(),Sf=a("li"),xoe=a("strong"),NVe=o("camembert"),qVe=o(" \u2014 "),dk=a("a"),jVe=o("CamembertConfig"),DVe=o(" (CamemBERT model)"),GVe=l(),Rf=a("li"),$oe=a("strong"),OVe=o("canine"),VVe=o(" \u2014 "),ck=a("a"),XVe=o("CanineConfig"),zVe=o(" (Canine model)"),WVe=l(),Pf=a("li"),koe=a("strong"),QVe=o("clip"),HVe=o(" \u2014 "),fk=a("a"),UVe=o("CLIPConfig"),JVe=o(" (CLIP model)"),YVe=l(),Bf=a("li"),Soe=a("strong"),KVe=o("convbert"),ZVe=o(" \u2014 "),mk=a("a"),eXe=o("ConvBertConfig"),oXe=o(" (ConvBERT model)"),rXe=l(),If=a("li"),Roe=a("strong"),tXe=o("convnext"),aXe=o(" \u2014 "),gk=a("a"),nXe=o("ConvNextConfig"),sXe=o(" (ConvNext model)"),lXe=l(),Nf=a("li"),Poe=a("strong"),iXe=o("ctrl"),dXe=o(" \u2014 "),hk=a("a"),cXe=o("CTRLConfig"),fXe=o(" (CTRL model)"),mXe=l(),qf=a("li"),Boe=a("strong"),gXe=o("cvt"),hXe=o(" \u2014 "),pk=a("a"),pXe=o("CvtConfig"),_Xe=o(" (CvT model)"),uXe=l(),jf=a("li"),Ioe=a("strong"),bXe=o("data2vec-audio"),vXe=o(" \u2014 "),_k=a("a"),FXe=o("Data2VecAudioConfig"),TXe=o(" (Data2VecAudio model)"),MXe=l(),Df=a("li"),Noe=a("strong"),EXe=o("data2vec-text"),CXe=o(" \u2014 "),uk=a("a"),wXe=o("Data2VecTextConfig"),AXe=o(" (Data2VecText model)"),yXe=l(),Gf=a("li"),qoe=a("strong"),LXe=o("data2vec-vision"),xXe=o(" \u2014 "),bk=a("a"),$Xe=o("Data2VecVisionConfig"),kXe=o(" (Data2VecVision model)"),SXe=l(),Of=a("li"),joe=a("strong"),RXe=o("deberta"),PXe=o(" \u2014 "),vk=a("a"),BXe=o("DebertaConfig"),IXe=o(" (DeBERTa model)"),NXe=l(),Vf=a("li"),Doe=a("strong"),qXe=o("deberta-v2"),jXe=o(" \u2014 "),Fk=a("a"),DXe=o("DebertaV2Config"),GXe=o(" (DeBERTa-v2 model)"),OXe=l(),Xf=a("li"),Goe=a("strong"),VXe=o("decision_transformer"),XXe=o(" \u2014 "),Tk=a("a"),zXe=o("DecisionTransformerConfig"),WXe=o(" (Decision Transformer model)"),QXe=l(),zf=a("li"),Ooe=a("strong"),HXe=o("deit"),UXe=o(" \u2014 "),Mk=a("a"),JXe=o("DeiTConfig"),YXe=o(" (DeiT model)"),KXe=l(),Wf=a("li"),Voe=a("strong"),ZXe=o("detr"),eze=o(" \u2014 "),Ek=a("a"),oze=o("DetrConfig"),rze=o(" (DETR model)"),tze=l(),Qf=a("li"),Xoe=a("strong"),aze=o("distilbert"),nze=o(" \u2014 "),Ck=a("a"),sze=o("DistilBertConfig"),lze=o(" (DistilBERT model)"),ize=l(),Hf=a("li"),zoe=a("strong"),dze=o("dpr"),cze=o(" \u2014 "),wk=a("a"),fze=o("DPRConfig"),mze=o(" (DPR model)"),gze=l(),Uf=a("li"),Woe=a("strong"),hze=o("dpt"),pze=o(" \u2014 "),Ak=a("a"),_ze=o("DPTConfig"),uze=o(" (DPT model)"),bze=l(),Jf=a("li"),Qoe=a("strong"),vze=o("electra"),Fze=o(" \u2014 "),yk=a("a"),Tze=o("ElectraConfig"),Mze=o(" (ELECTRA model)"),Eze=l(),Yf=a("li"),Hoe=a("strong"),Cze=o("encoder-decoder"),wze=o(" \u2014 "),Lk=a("a"),Aze=o("EncoderDecoderConfig"),yze=o(" (Encoder decoder model)"),Lze=l(),Kf=a("li"),Uoe=a("strong"),xze=o("flaubert"),$ze=o(" \u2014 "),xk=a("a"),kze=o("FlaubertConfig"),Sze=o(" (FlauBERT model)"),Rze=l(),Zf=a("li"),Joe=a("strong"),Pze=o("flava"),Bze=o(" \u2014 "),$k=a("a"),Ize=o("FlavaConfig"),Nze=o(" (Flava model)"),qze=l(),em=a("li"),Yoe=a("strong"),jze=o("fnet"),Dze=o(" \u2014 "),kk=a("a"),Gze=o("FNetConfig"),Oze=o(" (FNet model)"),Vze=l(),om=a("li"),Koe=a("strong"),Xze=o("fsmt"),zze=o(" \u2014 "),Sk=a("a"),Wze=o("FSMTConfig"),Qze=o(" (FairSeq Machine-Translation model)"),Hze=l(),rm=a("li"),Zoe=a("strong"),Uze=o("funnel"),Jze=o(" \u2014 "),Rk=a("a"),Yze=o("FunnelConfig"),Kze=o(" (Funnel Transformer model)"),Zze=l(),tm=a("li"),ere=a("strong"),eWe=o("glpn"),oWe=o(" \u2014 "),Pk=a("a"),rWe=o("GLPNConfig"),tWe=o(" (GLPN model)"),aWe=l(),am=a("li"),ore=a("strong"),nWe=o("gpt2"),sWe=o(" \u2014 "),Bk=a("a"),lWe=o("GPT2Config"),iWe=o(" (OpenAI GPT-2 model)"),dWe=l(),nm=a("li"),rre=a("strong"),cWe=o("gpt_neo"),fWe=o(" \u2014 "),Ik=a("a"),mWe=o("GPTNeoConfig"),gWe=o(" (GPT Neo model)"),hWe=l(),sm=a("li"),tre=a("strong"),pWe=o("gpt_neox"),_We=o(" \u2014 "),Nk=a("a"),uWe=o("GPTNeoXConfig"),bWe=o(" (GPT NeoX model)"),vWe=l(),lm=a("li"),are=a("strong"),FWe=o("gptj"),TWe=o(" \u2014 "),qk=a("a"),MWe=o("GPTJConfig"),EWe=o(" (GPT-J model)"),CWe=l(),im=a("li"),nre=a("strong"),wWe=o("hubert"),AWe=o(" \u2014 "),jk=a("a"),yWe=o("HubertConfig"),LWe=o(" (Hubert model)"),xWe=l(),dm=a("li"),sre=a("strong"),$We=o("ibert"),kWe=o(" \u2014 "),Dk=a("a"),SWe=o("IBertConfig"),RWe=o(" (I-BERT model)"),PWe=l(),cm=a("li"),lre=a("strong"),BWe=o("imagegpt"),IWe=o(" \u2014 "),Gk=a("a"),NWe=o("ImageGPTConfig"),qWe=o(" (ImageGPT model)"),jWe=l(),fm=a("li"),ire=a("strong"),DWe=o("layoutlm"),GWe=o(" \u2014 "),Ok=a("a"),OWe=o("LayoutLMConfig"),VWe=o(" (LayoutLM model)"),XWe=l(),mm=a("li"),dre=a("strong"),zWe=o("layoutlmv2"),WWe=o(" \u2014 "),Vk=a("a"),QWe=o("LayoutLMv2Config"),HWe=o(" (LayoutLMv2 model)"),UWe=l(),gm=a("li"),cre=a("strong"),JWe=o("layoutlmv3"),YWe=o(" \u2014 "),Xk=a("a"),KWe=o("LayoutLMv3Config"),ZWe=o(" (LayoutLMv3 model)"),eQe=l(),hm=a("li"),fre=a("strong"),oQe=o("led"),rQe=o(" \u2014 "),zk=a("a"),tQe=o("LEDConfig"),aQe=o(" (LED model)"),nQe=l(),pm=a("li"),mre=a("strong"),sQe=o("longformer"),lQe=o(" \u2014 "),Wk=a("a"),iQe=o("LongformerConfig"),dQe=o(" (Longformer model)"),cQe=l(),_m=a("li"),gre=a("strong"),fQe=o("luke"),mQe=o(" \u2014 "),Qk=a("a"),gQe=o("LukeConfig"),hQe=o(" (LUKE model)"),pQe=l(),um=a("li"),hre=a("strong"),_Qe=o("lxmert"),uQe=o(" \u2014 "),Hk=a("a"),bQe=o("LxmertConfig"),vQe=o(" (LXMERT model)"),FQe=l(),bm=a("li"),pre=a("strong"),TQe=o("m2m_100"),MQe=o(" \u2014 "),Uk=a("a"),EQe=o("M2M100Config"),CQe=o(" (M2M100 model)"),wQe=l(),vm=a("li"),_re=a("strong"),AQe=o("marian"),yQe=o(" \u2014 "),Jk=a("a"),LQe=o("MarianConfig"),xQe=o(" (Marian model)"),$Qe=l(),Fm=a("li"),ure=a("strong"),kQe=o("maskformer"),SQe=o(" \u2014 "),Yk=a("a"),RQe=o("MaskFormerConfig"),PQe=o(" (MaskFormer model)"),BQe=l(),Tm=a("li"),bre=a("strong"),IQe=o("mbart"),NQe=o(" \u2014 "),Kk=a("a"),qQe=o("MBartConfig"),jQe=o(" (mBART model)"),DQe=l(),Mm=a("li"),vre=a("strong"),GQe=o("megatron-bert"),OQe=o(" \u2014 "),Zk=a("a"),VQe=o("MegatronBertConfig"),XQe=o(" (MegatronBert model)"),zQe=l(),Em=a("li"),Fre=a("strong"),WQe=o("mobilebert"),QQe=o(" \u2014 "),eS=a("a"),HQe=o("MobileBertConfig"),UQe=o(" (MobileBERT model)"),JQe=l(),Cm=a("li"),Tre=a("strong"),YQe=o("mpnet"),KQe=o(" \u2014 "),oS=a("a"),ZQe=o("MPNetConfig"),eHe=o(" (MPNet model)"),oHe=l(),wm=a("li"),Mre=a("strong"),rHe=o("mt5"),tHe=o(" \u2014 "),rS=a("a"),aHe=o("MT5Config"),nHe=o(" (mT5 model)"),sHe=l(),Am=a("li"),Ere=a("strong"),lHe=o("nystromformer"),iHe=o(" \u2014 "),tS=a("a"),dHe=o("NystromformerConfig"),cHe=o(" (Nystromformer model)"),fHe=l(),ym=a("li"),Cre=a("strong"),mHe=o("openai-gpt"),gHe=o(" \u2014 "),aS=a("a"),hHe=o("OpenAIGPTConfig"),pHe=o(" (OpenAI GPT model)"),_He=l(),Lm=a("li"),wre=a("strong"),uHe=o("opt"),bHe=o(" \u2014 "),nS=a("a"),vHe=o("OPTConfig"),FHe=o(" (OPT model)"),THe=l(),xm=a("li"),Are=a("strong"),MHe=o("pegasus"),EHe=o(" \u2014 "),sS=a("a"),CHe=o("PegasusConfig"),wHe=o(" (Pegasus model)"),AHe=l(),$m=a("li"),yre=a("strong"),yHe=o("perceiver"),LHe=o(" \u2014 "),lS=a("a"),xHe=o("PerceiverConfig"),$He=o(" (Perceiver model)"),kHe=l(),km=a("li"),Lre=a("strong"),SHe=o("plbart"),RHe=o(" \u2014 "),iS=a("a"),PHe=o("PLBartConfig"),BHe=o(" (PLBart model)"),IHe=l(),Sm=a("li"),xre=a("strong"),NHe=o("poolformer"),qHe=o(" \u2014 "),dS=a("a"),jHe=o("PoolFormerConfig"),DHe=o(" (PoolFormer model)"),GHe=l(),Rm=a("li"),$re=a("strong"),OHe=o("prophetnet"),VHe=o(" \u2014 "),cS=a("a"),XHe=o("ProphetNetConfig"),zHe=o(" (ProphetNet model)"),WHe=l(),Pm=a("li"),kre=a("strong"),QHe=o("qdqbert"),HHe=o(" \u2014 "),fS=a("a"),UHe=o("QDQBertConfig"),JHe=o(" (QDQBert model)"),YHe=l(),Bm=a("li"),Sre=a("strong"),KHe=o("rag"),ZHe=o(" \u2014 "),mS=a("a"),eUe=o("RagConfig"),oUe=o(" (RAG model)"),rUe=l(),Im=a("li"),Rre=a("strong"),tUe=o("realm"),aUe=o(" \u2014 "),gS=a("a"),nUe=o("RealmConfig"),sUe=o(" (Realm model)"),lUe=l(),Nm=a("li"),Pre=a("strong"),iUe=o("reformer"),dUe=o(" \u2014 "),hS=a("a"),cUe=o("ReformerConfig"),fUe=o(" (Reformer model)"),mUe=l(),qm=a("li"),Bre=a("strong"),gUe=o("regnet"),hUe=o(" \u2014 "),pS=a("a"),pUe=o("RegNetConfig"),_Ue=o(" (RegNet model)"),uUe=l(),jm=a("li"),Ire=a("strong"),bUe=o("rembert"),vUe=o(" \u2014 "),_S=a("a"),FUe=o("RemBertConfig"),TUe=o(" (RemBERT model)"),MUe=l(),Dm=a("li"),Nre=a("strong"),EUe=o("resnet"),CUe=o(" \u2014 "),uS=a("a"),wUe=o("ResNetConfig"),AUe=o(" (ResNet model)"),yUe=l(),Gm=a("li"),qre=a("strong"),LUe=o("retribert"),xUe=o(" \u2014 "),bS=a("a"),$Ue=o("RetriBertConfig"),kUe=o(" (RetriBERT model)"),SUe=l(),Om=a("li"),jre=a("strong"),RUe=o("roberta"),PUe=o(" \u2014 "),vS=a("a"),BUe=o("RobertaConfig"),IUe=o(" (RoBERTa model)"),NUe=l(),Vm=a("li"),Dre=a("strong"),qUe=o("roformer"),jUe=o(" \u2014 "),FS=a("a"),DUe=o("RoFormerConfig"),GUe=o(" (RoFormer model)"),OUe=l(),Xm=a("li"),Gre=a("strong"),VUe=o("segformer"),XUe=o(" \u2014 "),TS=a("a"),zUe=o("SegformerConfig"),WUe=o(" (SegFormer model)"),QUe=l(),zm=a("li"),Ore=a("strong"),HUe=o("sew"),UUe=o(" \u2014 "),MS=a("a"),JUe=o("SEWConfig"),YUe=o(" (SEW model)"),KUe=l(),Wm=a("li"),Vre=a("strong"),ZUe=o("sew-d"),eJe=o(" \u2014 "),ES=a("a"),oJe=o("SEWDConfig"),rJe=o(" (SEW-D model)"),tJe=l(),Qm=a("li"),Xre=a("strong"),aJe=o("speech-encoder-decoder"),nJe=o(" \u2014 "),CS=a("a"),sJe=o("SpeechEncoderDecoderConfig"),lJe=o(" (Speech Encoder decoder model)"),iJe=l(),Hm=a("li"),zre=a("strong"),dJe=o("speech_to_text"),cJe=o(" \u2014 "),wS=a("a"),fJe=o("Speech2TextConfig"),mJe=o(" (Speech2Text model)"),gJe=l(),Um=a("li"),Wre=a("strong"),hJe=o("speech_to_text_2"),pJe=o(" \u2014 "),AS=a("a"),_Je=o("Speech2Text2Config"),uJe=o(" (Speech2Text2 model)"),bJe=l(),Jm=a("li"),Qre=a("strong"),vJe=o("splinter"),FJe=o(" \u2014 "),yS=a("a"),TJe=o("SplinterConfig"),MJe=o(" (Splinter model)"),EJe=l(),Ym=a("li"),Hre=a("strong"),CJe=o("squeezebert"),wJe=o(" \u2014 "),LS=a("a"),AJe=o("SqueezeBertConfig"),yJe=o(" (SqueezeBERT model)"),LJe=l(),Km=a("li"),Ure=a("strong"),xJe=o("swin"),$Je=o(" \u2014 "),xS=a("a"),kJe=o("SwinConfig"),SJe=o(" (Swin model)"),RJe=l(),Zm=a("li"),Jre=a("strong"),PJe=o("t5"),BJe=o(" \u2014 "),$S=a("a"),IJe=o("T5Config"),NJe=o(" (T5 model)"),qJe=l(),eg=a("li"),Yre=a("strong"),jJe=o("tapas"),DJe=o(" \u2014 "),kS=a("a"),GJe=o("TapasConfig"),OJe=o(" (TAPAS model)"),VJe=l(),og=a("li"),Kre=a("strong"),XJe=o("trajectory_transformer"),zJe=o(" \u2014 "),SS=a("a"),WJe=o("TrajectoryTransformerConfig"),QJe=o(" (Trajectory Transformer model)"),HJe=l(),rg=a("li"),Zre=a("strong"),UJe=o("transfo-xl"),JJe=o(" \u2014 "),RS=a("a"),YJe=o("TransfoXLConfig"),KJe=o(" (Transformer-XL model)"),ZJe=l(),tg=a("li"),ete=a("strong"),eYe=o("trocr"),oYe=o(" \u2014 "),PS=a("a"),rYe=o("TrOCRConfig"),tYe=o(" (TrOCR model)"),aYe=l(),ag=a("li"),ote=a("strong"),nYe=o("unispeech"),sYe=o(" \u2014 "),BS=a("a"),lYe=o("UniSpeechConfig"),iYe=o(" (UniSpeech model)"),dYe=l(),ng=a("li"),rte=a("strong"),cYe=o("unispeech-sat"),fYe=o(" \u2014 "),IS=a("a"),mYe=o("UniSpeechSatConfig"),gYe=o(" (UniSpeechSat model)"),hYe=l(),sg=a("li"),tte=a("strong"),pYe=o("van"),_Ye=o(" \u2014 "),NS=a("a"),uYe=o("VanConfig"),bYe=o(" (VAN model)"),vYe=l(),lg=a("li"),ate=a("strong"),FYe=o("vilt"),TYe=o(" \u2014 "),qS=a("a"),MYe=o("ViltConfig"),EYe=o(" (ViLT model)"),CYe=l(),ig=a("li"),nte=a("strong"),wYe=o("vision-encoder-decoder"),AYe=o(" \u2014 "),jS=a("a"),yYe=o("VisionEncoderDecoderConfig"),LYe=o(" (Vision Encoder decoder model)"),xYe=l(),dg=a("li"),ste=a("strong"),$Ye=o("vision-text-dual-encoder"),kYe=o(" \u2014 "),DS=a("a"),SYe=o("VisionTextDualEncoderConfig"),RYe=o(" (VisionTextDualEncoder model)"),PYe=l(),cg=a("li"),lte=a("strong"),BYe=o("visual_bert"),IYe=o(" \u2014 "),GS=a("a"),NYe=o("VisualBertConfig"),qYe=o(" (VisualBert model)"),jYe=l(),fg=a("li"),ite=a("strong"),DYe=o("vit"),GYe=o(" \u2014 "),OS=a("a"),OYe=o("ViTConfig"),VYe=o(" (ViT model)"),XYe=l(),mg=a("li"),dte=a("strong"),zYe=o("vit_mae"),WYe=o(" \u2014 "),VS=a("a"),QYe=o("ViTMAEConfig"),HYe=o(" (ViTMAE model)"),UYe=l(),gg=a("li"),cte=a("strong"),JYe=o("wav2vec2"),YYe=o(" \u2014 "),XS=a("a"),KYe=o("Wav2Vec2Config"),ZYe=o(" (Wav2Vec2 model)"),eKe=l(),hg=a("li"),fte=a("strong"),oKe=o("wav2vec2-conformer"),rKe=o(" \u2014 "),zS=a("a"),tKe=o("Wav2Vec2ConformerConfig"),aKe=o(" (Wav2Vec2-Conformer model)"),nKe=l(),pg=a("li"),mte=a("strong"),sKe=o("wavlm"),lKe=o(" \u2014 "),WS=a("a"),iKe=o("WavLMConfig"),dKe=o(" (WavLM model)"),cKe=l(),_g=a("li"),gte=a("strong"),fKe=o("xglm"),mKe=o(" \u2014 "),QS=a("a"),gKe=o("XGLMConfig"),hKe=o(" (XGLM model)"),pKe=l(),ug=a("li"),hte=a("strong"),_Ke=o("xlm"),uKe=o(" \u2014 "),HS=a("a"),bKe=o("XLMConfig"),vKe=o(" (XLM model)"),FKe=l(),bg=a("li"),pte=a("strong"),TKe=o("xlm-prophetnet"),MKe=o(" \u2014 "),US=a("a"),EKe=o("XLMProphetNetConfig"),CKe=o(" (XLMProphetNet model)"),wKe=l(),vg=a("li"),_te=a("strong"),AKe=o("xlm-roberta"),yKe=o(" \u2014 "),JS=a("a"),LKe=o("XLMRobertaConfig"),xKe=o(" (XLM-RoBERTa model)"),$Ke=l(),Fg=a("li"),ute=a("strong"),kKe=o("xlm-roberta-xl"),SKe=o(" \u2014 "),YS=a("a"),RKe=o("XLMRobertaXLConfig"),PKe=o(" (XLM-RoBERTa-XL model)"),BKe=l(),Tg=a("li"),bte=a("strong"),IKe=o("xlnet"),NKe=o(" \u2014 "),KS=a("a"),qKe=o("XLNetConfig"),jKe=o(" (XLNet model)"),DKe=l(),Mg=a("li"),vte=a("strong"),GKe=o("yolos"),OKe=o(" \u2014 "),ZS=a("a"),VKe=o("YolosConfig"),XKe=o(" (YOLOS model)"),zKe=l(),Eg=a("li"),Fte=a("strong"),WKe=o("yoso"),QKe=o(" \u2014 "),eR=a("a"),HKe=o("YosoConfig"),UKe=o(" (YOSO model)"),JKe=l(),F(Cg.$$.fragment),YKe=l(),wg=a("div"),F(IA.$$.fragment),KKe=l(),Tte=a("p"),ZKe=o("Register a new configuration for this class."),gqe=l(),Mi=a("h2"),Ag=a("a"),Mte=a("span"),F(NA.$$.fragment),eZe=l(),Ete=a("span"),oZe=o("AutoTokenizer"),hqe=l(),wo=a("div"),F(qA.$$.fragment),rZe=l(),jA=a("p"),tZe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oR=a("a"),aZe=o("AutoTokenizer.from_pretrained()"),nZe=o(" class method."),sZe=l(),DA=a("p"),lZe=o("This class cannot be instantiated directly using "),Cte=a("code"),iZe=o("__init__()"),dZe=o(" (throws an error)."),cZe=l(),Cr=a("div"),F(GA.$$.fragment),fZe=l(),wte=a("p"),mZe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),gZe=l(),ya=a("p"),hZe=o("The tokenizer class to instantiate is selected based on the "),Ate=a("code"),pZe=o("model_type"),_Ze=o(` property of the config object (either
passed as an argument or loaded from `),yte=a("code"),uZe=o("pretrained_model_name_or_path"),bZe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lte=a("code"),vZe=o("pretrained_model_name_or_path"),FZe=o(":"),TZe=l(),k=a("ul"),Sn=a("li"),xte=a("strong"),MZe=o("albert"),EZe=o(" \u2014 "),rR=a("a"),CZe=o("AlbertTokenizer"),wZe=o(" or "),tR=a("a"),AZe=o("AlbertTokenizerFast"),yZe=o(" (ALBERT model)"),LZe=l(),Rn=a("li"),$te=a("strong"),xZe=o("bart"),$Ze=o(" \u2014 "),aR=a("a"),kZe=o("BartTokenizer"),SZe=o(" or "),nR=a("a"),RZe=o("BartTokenizerFast"),PZe=o(" (BART model)"),BZe=l(),Pn=a("li"),kte=a("strong"),IZe=o("barthez"),NZe=o(" \u2014 "),sR=a("a"),qZe=o("BarthezTokenizer"),jZe=o(" or "),lR=a("a"),DZe=o("BarthezTokenizerFast"),GZe=o(" (BARThez model)"),OZe=l(),yg=a("li"),Ste=a("strong"),VZe=o("bartpho"),XZe=o(" \u2014 "),iR=a("a"),zZe=o("BartphoTokenizer"),WZe=o(" (BARTpho model)"),QZe=l(),Bn=a("li"),Rte=a("strong"),HZe=o("bert"),UZe=o(" \u2014 "),dR=a("a"),JZe=o("BertTokenizer"),YZe=o(" or "),cR=a("a"),KZe=o("BertTokenizerFast"),ZZe=o(" (BERT model)"),eeo=l(),Lg=a("li"),Pte=a("strong"),oeo=o("bert-generation"),reo=o(" \u2014 "),fR=a("a"),teo=o("BertGenerationTokenizer"),aeo=o(" (Bert Generation model)"),neo=l(),xg=a("li"),Bte=a("strong"),seo=o("bert-japanese"),leo=o(" \u2014 "),mR=a("a"),ieo=o("BertJapaneseTokenizer"),deo=o(" (BertJapanese model)"),ceo=l(),$g=a("li"),Ite=a("strong"),feo=o("bertweet"),meo=o(" \u2014 "),gR=a("a"),geo=o("BertweetTokenizer"),heo=o(" (Bertweet model)"),peo=l(),In=a("li"),Nte=a("strong"),_eo=o("big_bird"),ueo=o(" \u2014 "),hR=a("a"),beo=o("BigBirdTokenizer"),veo=o(" or "),pR=a("a"),Feo=o("BigBirdTokenizerFast"),Teo=o(" (BigBird model)"),Meo=l(),Nn=a("li"),qte=a("strong"),Eeo=o("bigbird_pegasus"),Ceo=o(" \u2014 "),_R=a("a"),weo=o("PegasusTokenizer"),Aeo=o(" or "),uR=a("a"),yeo=o("PegasusTokenizerFast"),Leo=o(" (BigBirdPegasus model)"),xeo=l(),qn=a("li"),jte=a("strong"),$eo=o("blenderbot"),keo=o(" \u2014 "),bR=a("a"),Seo=o("BlenderbotTokenizer"),Reo=o(" or "),vR=a("a"),Peo=o("BlenderbotTokenizerFast"),Beo=o(" (Blenderbot model)"),Ieo=l(),kg=a("li"),Dte=a("strong"),Neo=o("blenderbot-small"),qeo=o(" \u2014 "),FR=a("a"),jeo=o("BlenderbotSmallTokenizer"),Deo=o(" (BlenderbotSmall model)"),Geo=l(),Sg=a("li"),Gte=a("strong"),Oeo=o("byt5"),Veo=o(" \u2014 "),TR=a("a"),Xeo=o("ByT5Tokenizer"),zeo=o(" (ByT5 model)"),Weo=l(),jn=a("li"),Ote=a("strong"),Qeo=o("camembert"),Heo=o(" \u2014 "),MR=a("a"),Ueo=o("CamembertTokenizer"),Jeo=o(" or "),ER=a("a"),Yeo=o("CamembertTokenizerFast"),Keo=o(" (CamemBERT model)"),Zeo=l(),Rg=a("li"),Vte=a("strong"),eoo=o("canine"),ooo=o(" \u2014 "),CR=a("a"),roo=o("CanineTokenizer"),too=o(" (Canine model)"),aoo=l(),Dn=a("li"),Xte=a("strong"),noo=o("clip"),soo=o(" \u2014 "),wR=a("a"),loo=o("CLIPTokenizer"),ioo=o(" or "),AR=a("a"),doo=o("CLIPTokenizerFast"),coo=o(" (CLIP model)"),foo=l(),Gn=a("li"),zte=a("strong"),moo=o("convbert"),goo=o(" \u2014 "),yR=a("a"),hoo=o("ConvBertTokenizer"),poo=o(" or "),LR=a("a"),_oo=o("ConvBertTokenizerFast"),uoo=o(" (ConvBERT model)"),boo=l(),On=a("li"),Wte=a("strong"),voo=o("cpm"),Foo=o(" \u2014 "),xR=a("a"),Too=o("CpmTokenizer"),Moo=o(" or "),$R=a("a"),Eoo=o("CpmTokenizerFast"),Coo=o(" (CPM model)"),woo=l(),Pg=a("li"),Qte=a("strong"),Aoo=o("ctrl"),yoo=o(" \u2014 "),kR=a("a"),Loo=o("CTRLTokenizer"),xoo=o(" (CTRL model)"),$oo=l(),Vn=a("li"),Hte=a("strong"),koo=o("data2vec-text"),Soo=o(" \u2014 "),SR=a("a"),Roo=o("RobertaTokenizer"),Poo=o(" or "),RR=a("a"),Boo=o("RobertaTokenizerFast"),Ioo=o(" (Data2VecText model)"),Noo=l(),Xn=a("li"),Ute=a("strong"),qoo=o("deberta"),joo=o(" \u2014 "),PR=a("a"),Doo=o("DebertaTokenizer"),Goo=o(" or "),BR=a("a"),Ooo=o("DebertaTokenizerFast"),Voo=o(" (DeBERTa model)"),Xoo=l(),zn=a("li"),Jte=a("strong"),zoo=o("deberta-v2"),Woo=o(" \u2014 "),IR=a("a"),Qoo=o("DebertaV2Tokenizer"),Hoo=o(" or "),NR=a("a"),Uoo=o("DebertaV2TokenizerFast"),Joo=o(" (DeBERTa-v2 model)"),Yoo=l(),Wn=a("li"),Yte=a("strong"),Koo=o("distilbert"),Zoo=o(" \u2014 "),qR=a("a"),ero=o("DistilBertTokenizer"),oro=o(" or "),jR=a("a"),rro=o("DistilBertTokenizerFast"),tro=o(" (DistilBERT model)"),aro=l(),Qn=a("li"),Kte=a("strong"),nro=o("dpr"),sro=o(" \u2014 "),DR=a("a"),lro=o("DPRQuestionEncoderTokenizer"),iro=o(" or "),GR=a("a"),dro=o("DPRQuestionEncoderTokenizerFast"),cro=o(" (DPR model)"),fro=l(),Hn=a("li"),Zte=a("strong"),mro=o("electra"),gro=o(" \u2014 "),OR=a("a"),hro=o("ElectraTokenizer"),pro=o(" or "),VR=a("a"),_ro=o("ElectraTokenizerFast"),uro=o(" (ELECTRA model)"),bro=l(),Bg=a("li"),eae=a("strong"),vro=o("flaubert"),Fro=o(" \u2014 "),XR=a("a"),Tro=o("FlaubertTokenizer"),Mro=o(" (FlauBERT model)"),Ero=l(),Un=a("li"),oae=a("strong"),Cro=o("fnet"),wro=o(" \u2014 "),zR=a("a"),Aro=o("FNetTokenizer"),yro=o(" or "),WR=a("a"),Lro=o("FNetTokenizerFast"),xro=o(" (FNet model)"),$ro=l(),Ig=a("li"),rae=a("strong"),kro=o("fsmt"),Sro=o(" \u2014 "),QR=a("a"),Rro=o("FSMTTokenizer"),Pro=o(" (FairSeq Machine-Translation model)"),Bro=l(),Jn=a("li"),tae=a("strong"),Iro=o("funnel"),Nro=o(" \u2014 "),HR=a("a"),qro=o("FunnelTokenizer"),jro=o(" or "),UR=a("a"),Dro=o("FunnelTokenizerFast"),Gro=o(" (Funnel Transformer model)"),Oro=l(),Yn=a("li"),aae=a("strong"),Vro=o("gpt2"),Xro=o(" \u2014 "),JR=a("a"),zro=o("GPT2Tokenizer"),Wro=o(" or "),YR=a("a"),Qro=o("GPT2TokenizerFast"),Hro=o(" (OpenAI GPT-2 model)"),Uro=l(),Kn=a("li"),nae=a("strong"),Jro=o("gpt_neo"),Yro=o(" \u2014 "),KR=a("a"),Kro=o("GPT2Tokenizer"),Zro=o(" or "),ZR=a("a"),eto=o("GPT2TokenizerFast"),oto=o(" (GPT Neo model)"),rto=l(),Ng=a("li"),sae=a("strong"),tto=o("gpt_neox"),ato=o(" \u2014 "),eP=a("a"),nto=o("GPTNeoXTokenizerFast"),sto=o(" (GPT NeoX model)"),lto=l(),Zn=a("li"),lae=a("strong"),ito=o("gptj"),dto=o(" \u2014 "),oP=a("a"),cto=o("GPT2Tokenizer"),fto=o(" or "),rP=a("a"),mto=o("GPT2TokenizerFast"),gto=o(" (GPT-J model)"),hto=l(),es=a("li"),iae=a("strong"),pto=o("herbert"),_to=o(" \u2014 "),tP=a("a"),uto=o("HerbertTokenizer"),bto=o(" or "),aP=a("a"),vto=o("HerbertTokenizerFast"),Fto=o(" (HerBERT model)"),Tto=l(),qg=a("li"),dae=a("strong"),Mto=o("hubert"),Eto=o(" \u2014 "),nP=a("a"),Cto=o("Wav2Vec2CTCTokenizer"),wto=o(" (Hubert model)"),Ato=l(),os=a("li"),cae=a("strong"),yto=o("ibert"),Lto=o(" \u2014 "),sP=a("a"),xto=o("RobertaTokenizer"),$to=o(" or "),lP=a("a"),kto=o("RobertaTokenizerFast"),Sto=o(" (I-BERT model)"),Rto=l(),rs=a("li"),fae=a("strong"),Pto=o("layoutlm"),Bto=o(" \u2014 "),iP=a("a"),Ito=o("LayoutLMTokenizer"),Nto=o(" or "),dP=a("a"),qto=o("LayoutLMTokenizerFast"),jto=o(" (LayoutLM model)"),Dto=l(),ts=a("li"),mae=a("strong"),Gto=o("layoutlmv2"),Oto=o(" \u2014 "),cP=a("a"),Vto=o("LayoutLMv2Tokenizer"),Xto=o(" or "),fP=a("a"),zto=o("LayoutLMv2TokenizerFast"),Wto=o(" (LayoutLMv2 model)"),Qto=l(),as=a("li"),gae=a("strong"),Hto=o("layoutlmv3"),Uto=o(" \u2014 "),mP=a("a"),Jto=o("LayoutLMv3Tokenizer"),Yto=o(" or "),gP=a("a"),Kto=o("LayoutLMv3TokenizerFast"),Zto=o(" (LayoutLMv3 model)"),eao=l(),ns=a("li"),hae=a("strong"),oao=o("layoutxlm"),rao=o(" \u2014 "),hP=a("a"),tao=o("LayoutXLMTokenizer"),aao=o(" or "),pP=a("a"),nao=o("LayoutXLMTokenizerFast"),sao=o(" (LayoutXLM model)"),lao=l(),ss=a("li"),pae=a("strong"),iao=o("led"),dao=o(" \u2014 "),_P=a("a"),cao=o("LEDTokenizer"),fao=o(" or "),uP=a("a"),mao=o("LEDTokenizerFast"),gao=o(" (LED model)"),hao=l(),ls=a("li"),_ae=a("strong"),pao=o("longformer"),_ao=o(" \u2014 "),bP=a("a"),uao=o("LongformerTokenizer"),bao=o(" or "),vP=a("a"),vao=o("LongformerTokenizerFast"),Fao=o(" (Longformer model)"),Tao=l(),jg=a("li"),uae=a("strong"),Mao=o("luke"),Eao=o(" \u2014 "),FP=a("a"),Cao=o("LukeTokenizer"),wao=o(" (LUKE model)"),Aao=l(),is=a("li"),bae=a("strong"),yao=o("lxmert"),Lao=o(" \u2014 "),TP=a("a"),xao=o("LxmertTokenizer"),$ao=o(" or "),MP=a("a"),kao=o("LxmertTokenizerFast"),Sao=o(" (LXMERT model)"),Rao=l(),Dg=a("li"),vae=a("strong"),Pao=o("m2m_100"),Bao=o(" \u2014 "),EP=a("a"),Iao=o("M2M100Tokenizer"),Nao=o(" (M2M100 model)"),qao=l(),Gg=a("li"),Fae=a("strong"),jao=o("marian"),Dao=o(" \u2014 "),CP=a("a"),Gao=o("MarianTokenizer"),Oao=o(" (Marian model)"),Vao=l(),ds=a("li"),Tae=a("strong"),Xao=o("mbart"),zao=o(" \u2014 "),wP=a("a"),Wao=o("MBartTokenizer"),Qao=o(" or "),AP=a("a"),Hao=o("MBartTokenizerFast"),Uao=o(" (mBART model)"),Jao=l(),cs=a("li"),Mae=a("strong"),Yao=o("mbart50"),Kao=o(" \u2014 "),yP=a("a"),Zao=o("MBart50Tokenizer"),eno=o(" or "),LP=a("a"),ono=o("MBart50TokenizerFast"),rno=o(" (mBART-50 model)"),tno=l(),fs=a("li"),Eae=a("strong"),ano=o("megatron-bert"),nno=o(" \u2014 "),xP=a("a"),sno=o("BertTokenizer"),lno=o(" or "),$P=a("a"),ino=o("BertTokenizerFast"),dno=o(" (MegatronBert model)"),cno=l(),Og=a("li"),Cae=a("strong"),fno=o("mluke"),mno=o(" \u2014 "),kP=a("a"),gno=o("MLukeTokenizer"),hno=o(" (mLUKE model)"),pno=l(),ms=a("li"),wae=a("strong"),_no=o("mobilebert"),uno=o(" \u2014 "),SP=a("a"),bno=o("MobileBertTokenizer"),vno=o(" or "),RP=a("a"),Fno=o("MobileBertTokenizerFast"),Tno=o(" (MobileBERT model)"),Mno=l(),gs=a("li"),Aae=a("strong"),Eno=o("mpnet"),Cno=o(" \u2014 "),PP=a("a"),wno=o("MPNetTokenizer"),Ano=o(" or "),BP=a("a"),yno=o("MPNetTokenizerFast"),Lno=o(" (MPNet model)"),xno=l(),hs=a("li"),yae=a("strong"),$no=o("mt5"),kno=o(" \u2014 "),IP=a("a"),Sno=o("MT5Tokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("MT5TokenizerFast"),Bno=o(" (mT5 model)"),Ino=l(),ps=a("li"),Lae=a("strong"),Nno=o("nystromformer"),qno=o(" \u2014 "),qP=a("a"),jno=o("AlbertTokenizer"),Dno=o(" or "),jP=a("a"),Gno=o("AlbertTokenizerFast"),Ono=o(" (Nystromformer model)"),Vno=l(),_s=a("li"),xae=a("strong"),Xno=o("openai-gpt"),zno=o(" \u2014 "),DP=a("a"),Wno=o("OpenAIGPTTokenizer"),Qno=o(" or "),GP=a("a"),Hno=o("OpenAIGPTTokenizerFast"),Uno=o(" (OpenAI GPT model)"),Jno=l(),Vg=a("li"),$ae=a("strong"),Yno=o("opt"),Kno=o(" \u2014 "),OP=a("a"),Zno=o("GPT2Tokenizer"),eso=o(" (OPT model)"),oso=l(),us=a("li"),kae=a("strong"),rso=o("pegasus"),tso=o(" \u2014 "),VP=a("a"),aso=o("PegasusTokenizer"),nso=o(" or "),XP=a("a"),sso=o("PegasusTokenizerFast"),lso=o(" (Pegasus model)"),iso=l(),Xg=a("li"),Sae=a("strong"),dso=o("perceiver"),cso=o(" \u2014 "),zP=a("a"),fso=o("PerceiverTokenizer"),mso=o(" (Perceiver model)"),gso=l(),zg=a("li"),Rae=a("strong"),hso=o("phobert"),pso=o(" \u2014 "),WP=a("a"),_so=o("PhobertTokenizer"),uso=o(" (PhoBERT model)"),bso=l(),Wg=a("li"),Pae=a("strong"),vso=o("plbart"),Fso=o(" \u2014 "),QP=a("a"),Tso=o("PLBartTokenizer"),Mso=o(" (PLBart model)"),Eso=l(),Qg=a("li"),Bae=a("strong"),Cso=o("prophetnet"),wso=o(" \u2014 "),HP=a("a"),Aso=o("ProphetNetTokenizer"),yso=o(" (ProphetNet model)"),Lso=l(),bs=a("li"),Iae=a("strong"),xso=o("qdqbert"),$so=o(" \u2014 "),UP=a("a"),kso=o("BertTokenizer"),Sso=o(" or "),JP=a("a"),Rso=o("BertTokenizerFast"),Pso=o(" (QDQBert model)"),Bso=l(),Hg=a("li"),Nae=a("strong"),Iso=o("rag"),Nso=o(" \u2014 "),YP=a("a"),qso=o("RagTokenizer"),jso=o(" (RAG model)"),Dso=l(),vs=a("li"),qae=a("strong"),Gso=o("realm"),Oso=o(" \u2014 "),KP=a("a"),Vso=o("RealmTokenizer"),Xso=o(" or "),ZP=a("a"),zso=o("RealmTokenizerFast"),Wso=o(" (Realm model)"),Qso=l(),Fs=a("li"),jae=a("strong"),Hso=o("reformer"),Uso=o(" \u2014 "),eB=a("a"),Jso=o("ReformerTokenizer"),Yso=o(" or "),oB=a("a"),Kso=o("ReformerTokenizerFast"),Zso=o(" (Reformer model)"),elo=l(),Ts=a("li"),Dae=a("strong"),olo=o("rembert"),rlo=o(" \u2014 "),rB=a("a"),tlo=o("RemBertTokenizer"),alo=o(" or "),tB=a("a"),nlo=o("RemBertTokenizerFast"),slo=o(" (RemBERT model)"),llo=l(),Ms=a("li"),Gae=a("strong"),ilo=o("retribert"),dlo=o(" \u2014 "),aB=a("a"),clo=o("RetriBertTokenizer"),flo=o(" or "),nB=a("a"),mlo=o("RetriBertTokenizerFast"),glo=o(" (RetriBERT model)"),hlo=l(),Es=a("li"),Oae=a("strong"),plo=o("roberta"),_lo=o(" \u2014 "),sB=a("a"),ulo=o("RobertaTokenizer"),blo=o(" or "),lB=a("a"),vlo=o("RobertaTokenizerFast"),Flo=o(" (RoBERTa model)"),Tlo=l(),Cs=a("li"),Vae=a("strong"),Mlo=o("roformer"),Elo=o(" \u2014 "),iB=a("a"),Clo=o("RoFormerTokenizer"),wlo=o(" or "),dB=a("a"),Alo=o("RoFormerTokenizerFast"),ylo=o(" (RoFormer model)"),Llo=l(),Ug=a("li"),Xae=a("strong"),xlo=o("speech_to_text"),$lo=o(" \u2014 "),cB=a("a"),klo=o("Speech2TextTokenizer"),Slo=o(" (Speech2Text model)"),Rlo=l(),Jg=a("li"),zae=a("strong"),Plo=o("speech_to_text_2"),Blo=o(" \u2014 "),fB=a("a"),Ilo=o("Speech2Text2Tokenizer"),Nlo=o(" (Speech2Text2 model)"),qlo=l(),ws=a("li"),Wae=a("strong"),jlo=o("splinter"),Dlo=o(" \u2014 "),mB=a("a"),Glo=o("SplinterTokenizer"),Olo=o(" or "),gB=a("a"),Vlo=o("SplinterTokenizerFast"),Xlo=o(" (Splinter model)"),zlo=l(),As=a("li"),Qae=a("strong"),Wlo=o("squeezebert"),Qlo=o(" \u2014 "),hB=a("a"),Hlo=o("SqueezeBertTokenizer"),Ulo=o(" or "),pB=a("a"),Jlo=o("SqueezeBertTokenizerFast"),Ylo=o(" (SqueezeBERT model)"),Klo=l(),ys=a("li"),Hae=a("strong"),Zlo=o("t5"),eio=o(" \u2014 "),_B=a("a"),oio=o("T5Tokenizer"),rio=o(" or "),uB=a("a"),tio=o("T5TokenizerFast"),aio=o(" (T5 model)"),nio=l(),Yg=a("li"),Uae=a("strong"),sio=o("tapas"),lio=o(" \u2014 "),bB=a("a"),iio=o("TapasTokenizer"),dio=o(" (TAPAS model)"),cio=l(),Kg=a("li"),Jae=a("strong"),fio=o("tapex"),mio=o(" \u2014 "),vB=a("a"),gio=o("TapexTokenizer"),hio=o(" (TAPEX model)"),pio=l(),Zg=a("li"),Yae=a("strong"),_io=o("transfo-xl"),uio=o(" \u2014 "),FB=a("a"),bio=o("TransfoXLTokenizer"),vio=o(" (Transformer-XL model)"),Fio=l(),Ls=a("li"),Kae=a("strong"),Tio=o("visual_bert"),Mio=o(" \u2014 "),TB=a("a"),Eio=o("BertTokenizer"),Cio=o(" or "),MB=a("a"),wio=o("BertTokenizerFast"),Aio=o(" (VisualBert model)"),yio=l(),eh=a("li"),Zae=a("strong"),Lio=o("wav2vec2"),xio=o(" \u2014 "),EB=a("a"),$io=o("Wav2Vec2CTCTokenizer"),kio=o(" (Wav2Vec2 model)"),Sio=l(),oh=a("li"),ene=a("strong"),Rio=o("wav2vec2-conformer"),Pio=o(" \u2014 "),CB=a("a"),Bio=o("Wav2Vec2CTCTokenizer"),Iio=o(" (Wav2Vec2-Conformer model)"),Nio=l(),rh=a("li"),one=a("strong"),qio=o("wav2vec2_phoneme"),jio=o(" \u2014 "),wB=a("a"),Dio=o("Wav2Vec2PhonemeCTCTokenizer"),Gio=o(" (Wav2Vec2Phoneme model)"),Oio=l(),xs=a("li"),rne=a("strong"),Vio=o("xglm"),Xio=o(" \u2014 "),AB=a("a"),zio=o("XGLMTokenizer"),Wio=o(" or "),yB=a("a"),Qio=o("XGLMTokenizerFast"),Hio=o(" (XGLM model)"),Uio=l(),th=a("li"),tne=a("strong"),Jio=o("xlm"),Yio=o(" \u2014 "),LB=a("a"),Kio=o("XLMTokenizer"),Zio=o(" (XLM model)"),edo=l(),ah=a("li"),ane=a("strong"),odo=o("xlm-prophetnet"),rdo=o(" \u2014 "),xB=a("a"),tdo=o("XLMProphetNetTokenizer"),ado=o(" (XLMProphetNet model)"),ndo=l(),$s=a("li"),nne=a("strong"),sdo=o("xlm-roberta"),ldo=o(" \u2014 "),$B=a("a"),ido=o("XLMRobertaTokenizer"),ddo=o(" or "),kB=a("a"),cdo=o("XLMRobertaTokenizerFast"),fdo=o(" (XLM-RoBERTa model)"),mdo=l(),ks=a("li"),sne=a("strong"),gdo=o("xlm-roberta-xl"),hdo=o(" \u2014 "),SB=a("a"),pdo=o("RobertaTokenizer"),_do=o(" or "),RB=a("a"),udo=o("RobertaTokenizerFast"),bdo=o(" (XLM-RoBERTa-XL model)"),vdo=l(),Ss=a("li"),lne=a("strong"),Fdo=o("xlnet"),Tdo=o(" \u2014 "),PB=a("a"),Mdo=o("XLNetTokenizer"),Edo=o(" or "),BB=a("a"),Cdo=o("XLNetTokenizerFast"),wdo=o(" (XLNet model)"),Ado=l(),Rs=a("li"),ine=a("strong"),ydo=o("yoso"),Ldo=o(" \u2014 "),IB=a("a"),xdo=o("AlbertTokenizer"),$do=o(" or "),NB=a("a"),kdo=o("AlbertTokenizerFast"),Sdo=o(" (YOSO model)"),Rdo=l(),F(nh.$$.fragment),Pdo=l(),sh=a("div"),F(OA.$$.fragment),Bdo=l(),dne=a("p"),Ido=o("Register a new tokenizer in this mapping."),pqe=l(),Ei=a("h2"),lh=a("a"),cne=a("span"),F(VA.$$.fragment),Ndo=l(),fne=a("span"),qdo=o("AutoFeatureExtractor"),_qe=l(),Ao=a("div"),F(XA.$$.fragment),jdo=l(),zA=a("p"),Ddo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qB=a("a"),Gdo=o("AutoFeatureExtractor.from_pretrained()"),Odo=o(" class method."),Vdo=l(),WA=a("p"),Xdo=o("This class cannot be instantiated directly using "),mne=a("code"),zdo=o("__init__()"),Wdo=o(" (throws an error)."),Qdo=l(),He=a("div"),F(QA.$$.fragment),Hdo=l(),gne=a("p"),Udo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jdo=l(),La=a("p"),Ydo=o("The feature extractor class to instantiate is selected based on the "),hne=a("code"),Kdo=o("model_type"),Zdo=o(` property of the config object
(either passed as an argument or loaded from `),pne=a("code"),eco=o("pretrained_model_name_or_path"),oco=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_ne=a("code"),rco=o("pretrained_model_name_or_path"),tco=o(":"),aco=l(),Y=a("ul"),ih=a("li"),une=a("strong"),nco=o("beit"),sco=o(" \u2014 "),jB=a("a"),lco=o("BeitFeatureExtractor"),ico=o(" (BEiT model)"),dco=l(),dh=a("li"),bne=a("strong"),cco=o("clip"),fco=o(" \u2014 "),DB=a("a"),mco=o("CLIPFeatureExtractor"),gco=o(" (CLIP model)"),hco=l(),ch=a("li"),vne=a("strong"),pco=o("convnext"),_co=o(" \u2014 "),GB=a("a"),uco=o("ConvNextFeatureExtractor"),bco=o(" (ConvNext model)"),vco=l(),fh=a("li"),Fne=a("strong"),Fco=o("cvt"),Tco=o(" \u2014 "),OB=a("a"),Mco=o("ConvNextFeatureExtractor"),Eco=o(" (CvT model)"),Cco=l(),mh=a("li"),Tne=a("strong"),wco=o("data2vec-audio"),Aco=o(" \u2014 "),VB=a("a"),yco=o("Wav2Vec2FeatureExtractor"),Lco=o(" (Data2VecAudio model)"),xco=l(),gh=a("li"),Mne=a("strong"),$co=o("data2vec-vision"),kco=o(" \u2014 "),XB=a("a"),Sco=o("BeitFeatureExtractor"),Rco=o(" (Data2VecVision model)"),Pco=l(),hh=a("li"),Ene=a("strong"),Bco=o("deit"),Ico=o(" \u2014 "),zB=a("a"),Nco=o("DeiTFeatureExtractor"),qco=o(" (DeiT model)"),jco=l(),ph=a("li"),Cne=a("strong"),Dco=o("detr"),Gco=o(" \u2014 "),WB=a("a"),Oco=o("DetrFeatureExtractor"),Vco=o(" (DETR model)"),Xco=l(),_h=a("li"),wne=a("strong"),zco=o("dpt"),Wco=o(" \u2014 "),QB=a("a"),Qco=o("DPTFeatureExtractor"),Hco=o(" (DPT model)"),Uco=l(),uh=a("li"),Ane=a("strong"),Jco=o("flava"),Yco=o(" \u2014 "),HB=a("a"),Kco=o("FlavaFeatureExtractor"),Zco=o(" (Flava model)"),efo=l(),bh=a("li"),yne=a("strong"),ofo=o("glpn"),rfo=o(" \u2014 "),UB=a("a"),tfo=o("GLPNFeatureExtractor"),afo=o(" (GLPN model)"),nfo=l(),vh=a("li"),Lne=a("strong"),sfo=o("hubert"),lfo=o(" \u2014 "),JB=a("a"),ifo=o("Wav2Vec2FeatureExtractor"),dfo=o(" (Hubert model)"),cfo=l(),Fh=a("li"),xne=a("strong"),ffo=o("imagegpt"),mfo=o(" \u2014 "),YB=a("a"),gfo=o("ImageGPTFeatureExtractor"),hfo=o(" (ImageGPT model)"),pfo=l(),Th=a("li"),$ne=a("strong"),_fo=o("layoutlmv2"),ufo=o(" \u2014 "),KB=a("a"),bfo=o("LayoutLMv2FeatureExtractor"),vfo=o(" (LayoutLMv2 model)"),Ffo=l(),Mh=a("li"),kne=a("strong"),Tfo=o("layoutlmv3"),Mfo=o(" \u2014 "),ZB=a("a"),Efo=o("LayoutLMv3FeatureExtractor"),Cfo=o(" (LayoutLMv3 model)"),wfo=l(),Eh=a("li"),Sne=a("strong"),Afo=o("maskformer"),yfo=o(" \u2014 "),eI=a("a"),Lfo=o("MaskFormerFeatureExtractor"),xfo=o(" (MaskFormer model)"),$fo=l(),Ch=a("li"),Rne=a("strong"),kfo=o("perceiver"),Sfo=o(" \u2014 "),oI=a("a"),Rfo=o("PerceiverFeatureExtractor"),Pfo=o(" (Perceiver model)"),Bfo=l(),wh=a("li"),Pne=a("strong"),Ifo=o("poolformer"),Nfo=o(" \u2014 "),rI=a("a"),qfo=o("PoolFormerFeatureExtractor"),jfo=o(" (PoolFormer model)"),Dfo=l(),Ah=a("li"),Bne=a("strong"),Gfo=o("regnet"),Ofo=o(" \u2014 "),tI=a("a"),Vfo=o("ConvNextFeatureExtractor"),Xfo=o(" (RegNet model)"),zfo=l(),yh=a("li"),Ine=a("strong"),Wfo=o("resnet"),Qfo=o(" \u2014 "),aI=a("a"),Hfo=o("ConvNextFeatureExtractor"),Ufo=o(" (ResNet model)"),Jfo=l(),Lh=a("li"),Nne=a("strong"),Yfo=o("segformer"),Kfo=o(" \u2014 "),nI=a("a"),Zfo=o("SegformerFeatureExtractor"),emo=o(" (SegFormer model)"),omo=l(),xh=a("li"),qne=a("strong"),rmo=o("speech_to_text"),tmo=o(" \u2014 "),sI=a("a"),amo=o("Speech2TextFeatureExtractor"),nmo=o(" (Speech2Text model)"),smo=l(),$h=a("li"),jne=a("strong"),lmo=o("swin"),imo=o(" \u2014 "),lI=a("a"),dmo=o("ViTFeatureExtractor"),cmo=o(" (Swin model)"),fmo=l(),kh=a("li"),Dne=a("strong"),mmo=o("van"),gmo=o(" \u2014 "),iI=a("a"),hmo=o("ConvNextFeatureExtractor"),pmo=o(" (VAN model)"),_mo=l(),Sh=a("li"),Gne=a("strong"),umo=o("vit"),bmo=o(" \u2014 "),dI=a("a"),vmo=o("ViTFeatureExtractor"),Fmo=o(" (ViT model)"),Tmo=l(),Rh=a("li"),One=a("strong"),Mmo=o("vit_mae"),Emo=o(" \u2014 "),cI=a("a"),Cmo=o("ViTFeatureExtractor"),wmo=o(" (ViTMAE model)"),Amo=l(),Ph=a("li"),Vne=a("strong"),ymo=o("wav2vec2"),Lmo=o(" \u2014 "),fI=a("a"),xmo=o("Wav2Vec2FeatureExtractor"),$mo=o(" (Wav2Vec2 model)"),kmo=l(),Bh=a("li"),Xne=a("strong"),Smo=o("wav2vec2-conformer"),Rmo=o(" \u2014 "),mI=a("a"),Pmo=o("Wav2Vec2FeatureExtractor"),Bmo=o(" (Wav2Vec2-Conformer model)"),Imo=l(),Ih=a("li"),zne=a("strong"),Nmo=o("yolos"),qmo=o(" \u2014 "),gI=a("a"),jmo=o("YolosFeatureExtractor"),Dmo=o(" (YOLOS model)"),Gmo=l(),F(Nh.$$.fragment),Omo=l(),F(qh.$$.fragment),Vmo=l(),jh=a("div"),F(HA.$$.fragment),Xmo=l(),Wne=a("p"),zmo=o("Register a new feature extractor for this class."),uqe=l(),Ci=a("h2"),Dh=a("a"),Qne=a("span"),F(UA.$$.fragment),Wmo=l(),Hne=a("span"),Qmo=o("AutoProcessor"),bqe=l(),yo=a("div"),F(JA.$$.fragment),Hmo=l(),YA=a("p"),Umo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hI=a("a"),Jmo=o("AutoProcessor.from_pretrained()"),Ymo=o(" class method."),Kmo=l(),KA=a("p"),Zmo=o("This class cannot be instantiated directly using "),Une=a("code"),ego=o("__init__()"),ogo=o(" (throws an error)."),rgo=l(),Ue=a("div"),F(ZA.$$.fragment),tgo=l(),Jne=a("p"),ago=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ngo=l(),wi=a("p"),sgo=o("The processor class to instantiate is selected based on the "),Yne=a("code"),lgo=o("model_type"),igo=o(` property of the config object (either
passed as an argument or loaded from `),Kne=a("code"),dgo=o("pretrained_model_name_or_path"),cgo=o(" if possible):"),fgo=l(),he=a("ul"),Gh=a("li"),Zne=a("strong"),mgo=o("clip"),ggo=o(" \u2014 "),pI=a("a"),hgo=o("CLIPProcessor"),pgo=o(" (CLIP model)"),_go=l(),Oh=a("li"),ese=a("strong"),ugo=o("flava"),bgo=o(" \u2014 "),ose=a("code"),vgo=o("FLAVAProcessor"),Fgo=o(" (Flava model)"),Tgo=l(),Vh=a("li"),rse=a("strong"),Mgo=o("layoutlmv2"),Ego=o(" \u2014 "),_I=a("a"),Cgo=o("LayoutLMv2Processor"),wgo=o(" (LayoutLMv2 model)"),Ago=l(),Xh=a("li"),tse=a("strong"),ygo=o("layoutlmv3"),Lgo=o(" \u2014 "),uI=a("a"),xgo=o("LayoutLMv3Processor"),$go=o(" (LayoutLMv3 model)"),kgo=l(),zh=a("li"),ase=a("strong"),Sgo=o("layoutxlm"),Rgo=o(" \u2014 "),bI=a("a"),Pgo=o("LayoutXLMProcessor"),Bgo=o(" (LayoutXLM model)"),Igo=l(),Wh=a("li"),nse=a("strong"),Ngo=o("sew"),qgo=o(" \u2014 "),vI=a("a"),jgo=o("Wav2Vec2Processor"),Dgo=o(" (SEW model)"),Ggo=l(),Qh=a("li"),sse=a("strong"),Ogo=o("sew-d"),Vgo=o(" \u2014 "),FI=a("a"),Xgo=o("Wav2Vec2Processor"),zgo=o(" (SEW-D model)"),Wgo=l(),Hh=a("li"),lse=a("strong"),Qgo=o("speech_to_text"),Hgo=o(" \u2014 "),TI=a("a"),Ugo=o("Speech2TextProcessor"),Jgo=o(" (Speech2Text model)"),Ygo=l(),Uh=a("li"),ise=a("strong"),Kgo=o("speech_to_text_2"),Zgo=o(" \u2014 "),MI=a("a"),eho=o("Speech2Text2Processor"),oho=o(" (Speech2Text2 model)"),rho=l(),Jh=a("li"),dse=a("strong"),tho=o("trocr"),aho=o(" \u2014 "),EI=a("a"),nho=o("TrOCRProcessor"),sho=o(" (TrOCR model)"),lho=l(),Yh=a("li"),cse=a("strong"),iho=o("unispeech"),dho=o(" \u2014 "),CI=a("a"),cho=o("Wav2Vec2Processor"),fho=o(" (UniSpeech model)"),mho=l(),Kh=a("li"),fse=a("strong"),gho=o("unispeech-sat"),hho=o(" \u2014 "),wI=a("a"),pho=o("Wav2Vec2Processor"),_ho=o(" (UniSpeechSat model)"),uho=l(),Zh=a("li"),mse=a("strong"),bho=o("vilt"),vho=o(" \u2014 "),AI=a("a"),Fho=o("ViltProcessor"),Tho=o(" (ViLT model)"),Mho=l(),ep=a("li"),gse=a("strong"),Eho=o("vision-text-dual-encoder"),Cho=o(" \u2014 "),yI=a("a"),who=o("VisionTextDualEncoderProcessor"),Aho=o(" (VisionTextDualEncoder model)"),yho=l(),op=a("li"),hse=a("strong"),Lho=o("wav2vec2"),xho=o(" \u2014 "),LI=a("a"),$ho=o("Wav2Vec2Processor"),kho=o(" (Wav2Vec2 model)"),Sho=l(),rp=a("li"),pse=a("strong"),Rho=o("wav2vec2-conformer"),Pho=o(" \u2014 "),xI=a("a"),Bho=o("Wav2Vec2Processor"),Iho=o(" (Wav2Vec2-Conformer model)"),Nho=l(),tp=a("li"),_se=a("strong"),qho=o("wavlm"),jho=o(" \u2014 "),$I=a("a"),Dho=o("Wav2Vec2Processor"),Gho=o(" (WavLM model)"),Oho=l(),F(ap.$$.fragment),Vho=l(),F(np.$$.fragment),Xho=l(),sp=a("div"),F(ey.$$.fragment),zho=l(),use=a("p"),Who=o("Register a new processor for this class."),vqe=l(),Ai=a("h2"),lp=a("a"),bse=a("span"),F(oy.$$.fragment),Qho=l(),vse=a("span"),Hho=o("AutoModel"),Fqe=l(),Lo=a("div"),F(ry.$$.fragment),Uho=l(),yi=a("p"),Jho=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kI=a("a"),Yho=o("from_pretrained()"),Kho=o(" class method or the "),SI=a("a"),Zho=o("from_config()"),epo=o(` class
method.`),opo=l(),ty=a("p"),rpo=o("This class cannot be instantiated directly using "),Fse=a("code"),tpo=o("__init__()"),apo=o(" (throws an error)."),npo=l(),at=a("div"),F(ay.$$.fragment),spo=l(),Tse=a("p"),lpo=o("Instantiates one of the base model classes of the library from a configuration."),ipo=l(),Li=a("p"),dpo=o(`Note:
Loading a model from its configuration file does `),Mse=a("strong"),cpo=o("not"),fpo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=a("a"),mpo=o("from_pretrained()"),gpo=o(" to load the model weights."),hpo=l(),F(ip.$$.fragment),ppo=l(),Je=a("div"),F(ny.$$.fragment),_po=l(),Ese=a("p"),upo=o("Instantiate one of the base model classes of the library from a pretrained model."),bpo=l(),xa=a("p"),vpo=o("The model class to instantiate is selected based on the "),Cse=a("code"),Fpo=o("model_type"),Tpo=o(` property of the config object (either
passed as an argument or loaded from `),wse=a("code"),Mpo=o("pretrained_model_name_or_path"),Epo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=a("code"),Cpo=o("pretrained_model_name_or_path"),wpo=o(":"),Apo=l(),x=a("ul"),dp=a("li"),yse=a("strong"),ypo=o("albert"),Lpo=o(" \u2014 "),PI=a("a"),xpo=o("AlbertModel"),$po=o(" (ALBERT model)"),kpo=l(),cp=a("li"),Lse=a("strong"),Spo=o("bart"),Rpo=o(" \u2014 "),BI=a("a"),Ppo=o("BartModel"),Bpo=o(" (BART model)"),Ipo=l(),fp=a("li"),xse=a("strong"),Npo=o("beit"),qpo=o(" \u2014 "),II=a("a"),jpo=o("BeitModel"),Dpo=o(" (BEiT model)"),Gpo=l(),mp=a("li"),$se=a("strong"),Opo=o("bert"),Vpo=o(" \u2014 "),NI=a("a"),Xpo=o("BertModel"),zpo=o(" (BERT model)"),Wpo=l(),gp=a("li"),kse=a("strong"),Qpo=o("bert-generation"),Hpo=o(" \u2014 "),qI=a("a"),Upo=o("BertGenerationEncoder"),Jpo=o(" (Bert Generation model)"),Ypo=l(),hp=a("li"),Sse=a("strong"),Kpo=o("big_bird"),Zpo=o(" \u2014 "),jI=a("a"),e_o=o("BigBirdModel"),o_o=o(" (BigBird model)"),r_o=l(),pp=a("li"),Rse=a("strong"),t_o=o("bigbird_pegasus"),a_o=o(" \u2014 "),DI=a("a"),n_o=o("BigBirdPegasusModel"),s_o=o(" (BigBirdPegasus model)"),l_o=l(),_p=a("li"),Pse=a("strong"),i_o=o("blenderbot"),d_o=o(" \u2014 "),GI=a("a"),c_o=o("BlenderbotModel"),f_o=o(" (Blenderbot model)"),m_o=l(),up=a("li"),Bse=a("strong"),g_o=o("blenderbot-small"),h_o=o(" \u2014 "),OI=a("a"),p_o=o("BlenderbotSmallModel"),__o=o(" (BlenderbotSmall model)"),u_o=l(),bp=a("li"),Ise=a("strong"),b_o=o("camembert"),v_o=o(" \u2014 "),VI=a("a"),F_o=o("CamembertModel"),T_o=o(" (CamemBERT model)"),M_o=l(),vp=a("li"),Nse=a("strong"),E_o=o("canine"),C_o=o(" \u2014 "),XI=a("a"),w_o=o("CanineModel"),A_o=o(" (Canine model)"),y_o=l(),Fp=a("li"),qse=a("strong"),L_o=o("clip"),x_o=o(" \u2014 "),zI=a("a"),$_o=o("CLIPModel"),k_o=o(" (CLIP model)"),S_o=l(),Tp=a("li"),jse=a("strong"),R_o=o("convbert"),P_o=o(" \u2014 "),WI=a("a"),B_o=o("ConvBertModel"),I_o=o(" (ConvBERT model)"),N_o=l(),Mp=a("li"),Dse=a("strong"),q_o=o("convnext"),j_o=o(" \u2014 "),QI=a("a"),D_o=o("ConvNextModel"),G_o=o(" (ConvNext model)"),O_o=l(),Ep=a("li"),Gse=a("strong"),V_o=o("ctrl"),X_o=o(" \u2014 "),HI=a("a"),z_o=o("CTRLModel"),W_o=o(" (CTRL model)"),Q_o=l(),Cp=a("li"),Ose=a("strong"),H_o=o("cvt"),U_o=o(" \u2014 "),UI=a("a"),J_o=o("CvtModel"),Y_o=o(" (CvT model)"),K_o=l(),wp=a("li"),Vse=a("strong"),Z_o=o("data2vec-audio"),euo=o(" \u2014 "),JI=a("a"),ouo=o("Data2VecAudioModel"),ruo=o(" (Data2VecAudio model)"),tuo=l(),Ap=a("li"),Xse=a("strong"),auo=o("data2vec-text"),nuo=o(" \u2014 "),YI=a("a"),suo=o("Data2VecTextModel"),luo=o(" (Data2VecText model)"),iuo=l(),yp=a("li"),zse=a("strong"),duo=o("data2vec-vision"),cuo=o(" \u2014 "),KI=a("a"),fuo=o("Data2VecVisionModel"),muo=o(" (Data2VecVision model)"),guo=l(),Lp=a("li"),Wse=a("strong"),huo=o("deberta"),puo=o(" \u2014 "),ZI=a("a"),_uo=o("DebertaModel"),uuo=o(" (DeBERTa model)"),buo=l(),xp=a("li"),Qse=a("strong"),vuo=o("deberta-v2"),Fuo=o(" \u2014 "),eN=a("a"),Tuo=o("DebertaV2Model"),Muo=o(" (DeBERTa-v2 model)"),Euo=l(),$p=a("li"),Hse=a("strong"),Cuo=o("decision_transformer"),wuo=o(" \u2014 "),oN=a("a"),Auo=o("DecisionTransformerModel"),yuo=o(" (Decision Transformer model)"),Luo=l(),kp=a("li"),Use=a("strong"),xuo=o("deit"),$uo=o(" \u2014 "),rN=a("a"),kuo=o("DeiTModel"),Suo=o(" (DeiT model)"),Ruo=l(),Sp=a("li"),Jse=a("strong"),Puo=o("detr"),Buo=o(" \u2014 "),tN=a("a"),Iuo=o("DetrModel"),Nuo=o(" (DETR model)"),quo=l(),Rp=a("li"),Yse=a("strong"),juo=o("distilbert"),Duo=o(" \u2014 "),aN=a("a"),Guo=o("DistilBertModel"),Ouo=o(" (DistilBERT model)"),Vuo=l(),Pp=a("li"),Kse=a("strong"),Xuo=o("dpr"),zuo=o(" \u2014 "),nN=a("a"),Wuo=o("DPRQuestionEncoder"),Quo=o(" (DPR model)"),Huo=l(),Bp=a("li"),Zse=a("strong"),Uuo=o("dpt"),Juo=o(" \u2014 "),sN=a("a"),Yuo=o("DPTModel"),Kuo=o(" (DPT model)"),Zuo=l(),Ip=a("li"),ele=a("strong"),e2o=o("electra"),o2o=o(" \u2014 "),lN=a("a"),r2o=o("ElectraModel"),t2o=o(" (ELECTRA model)"),a2o=l(),Np=a("li"),ole=a("strong"),n2o=o("flaubert"),s2o=o(" \u2014 "),iN=a("a"),l2o=o("FlaubertModel"),i2o=o(" (FlauBERT model)"),d2o=l(),qp=a("li"),rle=a("strong"),c2o=o("flava"),f2o=o(" \u2014 "),dN=a("a"),m2o=o("FlavaModel"),g2o=o(" (Flava model)"),h2o=l(),jp=a("li"),tle=a("strong"),p2o=o("fnet"),_2o=o(" \u2014 "),cN=a("a"),u2o=o("FNetModel"),b2o=o(" (FNet model)"),v2o=l(),Dp=a("li"),ale=a("strong"),F2o=o("fsmt"),T2o=o(" \u2014 "),fN=a("a"),M2o=o("FSMTModel"),E2o=o(" (FairSeq Machine-Translation model)"),C2o=l(),Ps=a("li"),nle=a("strong"),w2o=o("funnel"),A2o=o(" \u2014 "),mN=a("a"),y2o=o("FunnelModel"),L2o=o(" or "),gN=a("a"),x2o=o("FunnelBaseModel"),$2o=o(" (Funnel Transformer model)"),k2o=l(),Gp=a("li"),sle=a("strong"),S2o=o("glpn"),R2o=o(" \u2014 "),hN=a("a"),P2o=o("GLPNModel"),B2o=o(" (GLPN model)"),I2o=l(),Op=a("li"),lle=a("strong"),N2o=o("gpt2"),q2o=o(" \u2014 "),pN=a("a"),j2o=o("GPT2Model"),D2o=o(" (OpenAI GPT-2 model)"),G2o=l(),Vp=a("li"),ile=a("strong"),O2o=o("gpt_neo"),V2o=o(" \u2014 "),_N=a("a"),X2o=o("GPTNeoModel"),z2o=o(" (GPT Neo model)"),W2o=l(),Xp=a("li"),dle=a("strong"),Q2o=o("gpt_neox"),H2o=o(" \u2014 "),uN=a("a"),U2o=o("GPTNeoXModel"),J2o=o(" (GPT NeoX model)"),Y2o=l(),zp=a("li"),cle=a("strong"),K2o=o("gptj"),Z2o=o(" \u2014 "),bN=a("a"),e1o=o("GPTJModel"),o1o=o(" (GPT-J model)"),r1o=l(),Wp=a("li"),fle=a("strong"),t1o=o("hubert"),a1o=o(" \u2014 "),vN=a("a"),n1o=o("HubertModel"),s1o=o(" (Hubert model)"),l1o=l(),Qp=a("li"),mle=a("strong"),i1o=o("ibert"),d1o=o(" \u2014 "),FN=a("a"),c1o=o("IBertModel"),f1o=o(" (I-BERT model)"),m1o=l(),Hp=a("li"),gle=a("strong"),g1o=o("imagegpt"),h1o=o(" \u2014 "),TN=a("a"),p1o=o("ImageGPTModel"),_1o=o(" (ImageGPT model)"),u1o=l(),Up=a("li"),hle=a("strong"),b1o=o("layoutlm"),v1o=o(" \u2014 "),MN=a("a"),F1o=o("LayoutLMModel"),T1o=o(" (LayoutLM model)"),M1o=l(),Jp=a("li"),ple=a("strong"),E1o=o("layoutlmv2"),C1o=o(" \u2014 "),EN=a("a"),w1o=o("LayoutLMv2Model"),A1o=o(" (LayoutLMv2 model)"),y1o=l(),Yp=a("li"),_le=a("strong"),L1o=o("layoutlmv3"),x1o=o(" \u2014 "),CN=a("a"),$1o=o("LayoutLMv3Model"),k1o=o(" (LayoutLMv3 model)"),S1o=l(),Kp=a("li"),ule=a("strong"),R1o=o("led"),P1o=o(" \u2014 "),wN=a("a"),B1o=o("LEDModel"),I1o=o(" (LED model)"),N1o=l(),Zp=a("li"),ble=a("strong"),q1o=o("longformer"),j1o=o(" \u2014 "),AN=a("a"),D1o=o("LongformerModel"),G1o=o(" (Longformer model)"),O1o=l(),e_=a("li"),vle=a("strong"),V1o=o("luke"),X1o=o(" \u2014 "),yN=a("a"),z1o=o("LukeModel"),W1o=o(" (LUKE model)"),Q1o=l(),o_=a("li"),Fle=a("strong"),H1o=o("lxmert"),U1o=o(" \u2014 "),LN=a("a"),J1o=o("LxmertModel"),Y1o=o(" (LXMERT model)"),K1o=l(),r_=a("li"),Tle=a("strong"),Z1o=o("m2m_100"),e7o=o(" \u2014 "),xN=a("a"),o7o=o("M2M100Model"),r7o=o(" (M2M100 model)"),t7o=l(),t_=a("li"),Mle=a("strong"),a7o=o("marian"),n7o=o(" \u2014 "),$N=a("a"),s7o=o("MarianModel"),l7o=o(" (Marian model)"),i7o=l(),a_=a("li"),Ele=a("strong"),d7o=o("maskformer"),c7o=o(" \u2014 "),kN=a("a"),f7o=o("MaskFormerModel"),m7o=o(" (MaskFormer model)"),g7o=l(),n_=a("li"),Cle=a("strong"),h7o=o("mbart"),p7o=o(" \u2014 "),SN=a("a"),_7o=o("MBartModel"),u7o=o(" (mBART model)"),b7o=l(),s_=a("li"),wle=a("strong"),v7o=o("megatron-bert"),F7o=o(" \u2014 "),RN=a("a"),T7o=o("MegatronBertModel"),M7o=o(" (MegatronBert model)"),E7o=l(),l_=a("li"),Ale=a("strong"),C7o=o("mobilebert"),w7o=o(" \u2014 "),PN=a("a"),A7o=o("MobileBertModel"),y7o=o(" (MobileBERT model)"),L7o=l(),i_=a("li"),yle=a("strong"),x7o=o("mpnet"),$7o=o(" \u2014 "),BN=a("a"),k7o=o("MPNetModel"),S7o=o(" (MPNet model)"),R7o=l(),d_=a("li"),Lle=a("strong"),P7o=o("mt5"),B7o=o(" \u2014 "),IN=a("a"),I7o=o("MT5Model"),N7o=o(" (mT5 model)"),q7o=l(),c_=a("li"),xle=a("strong"),j7o=o("nystromformer"),D7o=o(" \u2014 "),NN=a("a"),G7o=o("NystromformerModel"),O7o=o(" (Nystromformer model)"),V7o=l(),f_=a("li"),$le=a("strong"),X7o=o("openai-gpt"),z7o=o(" \u2014 "),qN=a("a"),W7o=o("OpenAIGPTModel"),Q7o=o(" (OpenAI GPT model)"),H7o=l(),m_=a("li"),kle=a("strong"),U7o=o("opt"),J7o=o(" \u2014 "),jN=a("a"),Y7o=o("OPTModel"),K7o=o(" (OPT model)"),Z7o=l(),g_=a("li"),Sle=a("strong"),ebo=o("pegasus"),obo=o(" \u2014 "),DN=a("a"),rbo=o("PegasusModel"),tbo=o(" (Pegasus model)"),abo=l(),h_=a("li"),Rle=a("strong"),nbo=o("perceiver"),sbo=o(" \u2014 "),GN=a("a"),lbo=o("PerceiverModel"),ibo=o(" (Perceiver model)"),dbo=l(),p_=a("li"),Ple=a("strong"),cbo=o("plbart"),fbo=o(" \u2014 "),ON=a("a"),mbo=o("PLBartModel"),gbo=o(" (PLBart model)"),hbo=l(),__=a("li"),Ble=a("strong"),pbo=o("poolformer"),_bo=o(" \u2014 "),VN=a("a"),ubo=o("PoolFormerModel"),bbo=o(" (PoolFormer model)"),vbo=l(),u_=a("li"),Ile=a("strong"),Fbo=o("prophetnet"),Tbo=o(" \u2014 "),XN=a("a"),Mbo=o("ProphetNetModel"),Ebo=o(" (ProphetNet model)"),Cbo=l(),b_=a("li"),Nle=a("strong"),wbo=o("qdqbert"),Abo=o(" \u2014 "),zN=a("a"),ybo=o("QDQBertModel"),Lbo=o(" (QDQBert model)"),xbo=l(),v_=a("li"),qle=a("strong"),$bo=o("reformer"),kbo=o(" \u2014 "),WN=a("a"),Sbo=o("ReformerModel"),Rbo=o(" (Reformer model)"),Pbo=l(),F_=a("li"),jle=a("strong"),Bbo=o("regnet"),Ibo=o(" \u2014 "),QN=a("a"),Nbo=o("RegNetModel"),qbo=o(" (RegNet model)"),jbo=l(),T_=a("li"),Dle=a("strong"),Dbo=o("rembert"),Gbo=o(" \u2014 "),HN=a("a"),Obo=o("RemBertModel"),Vbo=o(" (RemBERT model)"),Xbo=l(),M_=a("li"),Gle=a("strong"),zbo=o("resnet"),Wbo=o(" \u2014 "),UN=a("a"),Qbo=o("ResNetModel"),Hbo=o(" (ResNet model)"),Ubo=l(),E_=a("li"),Ole=a("strong"),Jbo=o("retribert"),Ybo=o(" \u2014 "),JN=a("a"),Kbo=o("RetriBertModel"),Zbo=o(" (RetriBERT model)"),e4o=l(),C_=a("li"),Vle=a("strong"),o4o=o("roberta"),r4o=o(" \u2014 "),YN=a("a"),t4o=o("RobertaModel"),a4o=o(" (RoBERTa model)"),n4o=l(),w_=a("li"),Xle=a("strong"),s4o=o("roformer"),l4o=o(" \u2014 "),KN=a("a"),i4o=o("RoFormerModel"),d4o=o(" (RoFormer model)"),c4o=l(),A_=a("li"),zle=a("strong"),f4o=o("segformer"),m4o=o(" \u2014 "),ZN=a("a"),g4o=o("SegformerModel"),h4o=o(" (SegFormer model)"),p4o=l(),y_=a("li"),Wle=a("strong"),_4o=o("sew"),u4o=o(" \u2014 "),eq=a("a"),b4o=o("SEWModel"),v4o=o(" (SEW model)"),F4o=l(),L_=a("li"),Qle=a("strong"),T4o=o("sew-d"),M4o=o(" \u2014 "),oq=a("a"),E4o=o("SEWDModel"),C4o=o(" (SEW-D model)"),w4o=l(),x_=a("li"),Hle=a("strong"),A4o=o("speech_to_text"),y4o=o(" \u2014 "),rq=a("a"),L4o=o("Speech2TextModel"),x4o=o(" (Speech2Text model)"),$4o=l(),$_=a("li"),Ule=a("strong"),k4o=o("splinter"),S4o=o(" \u2014 "),tq=a("a"),R4o=o("SplinterModel"),P4o=o(" (Splinter model)"),B4o=l(),k_=a("li"),Jle=a("strong"),I4o=o("squeezebert"),N4o=o(" \u2014 "),aq=a("a"),q4o=o("SqueezeBertModel"),j4o=o(" (SqueezeBERT model)"),D4o=l(),S_=a("li"),Yle=a("strong"),G4o=o("swin"),O4o=o(" \u2014 "),nq=a("a"),V4o=o("SwinModel"),X4o=o(" (Swin model)"),z4o=l(),R_=a("li"),Kle=a("strong"),W4o=o("t5"),Q4o=o(" \u2014 "),sq=a("a"),H4o=o("T5Model"),U4o=o(" (T5 model)"),J4o=l(),P_=a("li"),Zle=a("strong"),Y4o=o("tapas"),K4o=o(" \u2014 "),lq=a("a"),Z4o=o("TapasModel"),evo=o(" (TAPAS model)"),ovo=l(),B_=a("li"),eie=a("strong"),rvo=o("trajectory_transformer"),tvo=o(" \u2014 "),iq=a("a"),avo=o("TrajectoryTransformerModel"),nvo=o(" (Trajectory Transformer model)"),svo=l(),I_=a("li"),oie=a("strong"),lvo=o("transfo-xl"),ivo=o(" \u2014 "),dq=a("a"),dvo=o("TransfoXLModel"),cvo=o(" (Transformer-XL model)"),fvo=l(),N_=a("li"),rie=a("strong"),mvo=o("unispeech"),gvo=o(" \u2014 "),cq=a("a"),hvo=o("UniSpeechModel"),pvo=o(" (UniSpeech model)"),_vo=l(),q_=a("li"),tie=a("strong"),uvo=o("unispeech-sat"),bvo=o(" \u2014 "),fq=a("a"),vvo=o("UniSpeechSatModel"),Fvo=o(" (UniSpeechSat model)"),Tvo=l(),j_=a("li"),aie=a("strong"),Mvo=o("van"),Evo=o(" \u2014 "),mq=a("a"),Cvo=o("VanModel"),wvo=o(" (VAN model)"),Avo=l(),D_=a("li"),nie=a("strong"),yvo=o("vilt"),Lvo=o(" \u2014 "),gq=a("a"),xvo=o("ViltModel"),$vo=o(" (ViLT model)"),kvo=l(),G_=a("li"),sie=a("strong"),Svo=o("vision-text-dual-encoder"),Rvo=o(" \u2014 "),hq=a("a"),Pvo=o("VisionTextDualEncoderModel"),Bvo=o(" (VisionTextDualEncoder model)"),Ivo=l(),O_=a("li"),lie=a("strong"),Nvo=o("visual_bert"),qvo=o(" \u2014 "),pq=a("a"),jvo=o("VisualBertModel"),Dvo=o(" (VisualBert model)"),Gvo=l(),V_=a("li"),iie=a("strong"),Ovo=o("vit"),Vvo=o(" \u2014 "),_q=a("a"),Xvo=o("ViTModel"),zvo=o(" (ViT model)"),Wvo=l(),X_=a("li"),die=a("strong"),Qvo=o("vit_mae"),Hvo=o(" \u2014 "),uq=a("a"),Uvo=o("ViTMAEModel"),Jvo=o(" (ViTMAE model)"),Yvo=l(),z_=a("li"),cie=a("strong"),Kvo=o("wav2vec2"),Zvo=o(" \u2014 "),bq=a("a"),eFo=o("Wav2Vec2Model"),oFo=o(" (Wav2Vec2 model)"),rFo=l(),W_=a("li"),fie=a("strong"),tFo=o("wav2vec2-conformer"),aFo=o(" \u2014 "),vq=a("a"),nFo=o("Wav2Vec2ConformerModel"),sFo=o(" (Wav2Vec2-Conformer model)"),lFo=l(),Q_=a("li"),mie=a("strong"),iFo=o("wavlm"),dFo=o(" \u2014 "),Fq=a("a"),cFo=o("WavLMModel"),fFo=o(" (WavLM model)"),mFo=l(),H_=a("li"),gie=a("strong"),gFo=o("xglm"),hFo=o(" \u2014 "),Tq=a("a"),pFo=o("XGLMModel"),_Fo=o(" (XGLM model)"),uFo=l(),U_=a("li"),hie=a("strong"),bFo=o("xlm"),vFo=o(" \u2014 "),Mq=a("a"),FFo=o("XLMModel"),TFo=o(" (XLM model)"),MFo=l(),J_=a("li"),pie=a("strong"),EFo=o("xlm-prophetnet"),CFo=o(" \u2014 "),Eq=a("a"),wFo=o("XLMProphetNetModel"),AFo=o(" (XLMProphetNet model)"),yFo=l(),Y_=a("li"),_ie=a("strong"),LFo=o("xlm-roberta"),xFo=o(" \u2014 "),Cq=a("a"),$Fo=o("XLMRobertaModel"),kFo=o(" (XLM-RoBERTa model)"),SFo=l(),K_=a("li"),uie=a("strong"),RFo=o("xlm-roberta-xl"),PFo=o(" \u2014 "),wq=a("a"),BFo=o("XLMRobertaXLModel"),IFo=o(" (XLM-RoBERTa-XL model)"),NFo=l(),Z_=a("li"),bie=a("strong"),qFo=o("xlnet"),jFo=o(" \u2014 "),Aq=a("a"),DFo=o("XLNetModel"),GFo=o(" (XLNet model)"),OFo=l(),eu=a("li"),vie=a("strong"),VFo=o("yolos"),XFo=o(" \u2014 "),yq=a("a"),zFo=o("YolosModel"),WFo=o(" (YOLOS model)"),QFo=l(),ou=a("li"),Fie=a("strong"),HFo=o("yoso"),UFo=o(" \u2014 "),Lq=a("a"),JFo=o("YosoModel"),YFo=o(" (YOSO model)"),KFo=l(),ru=a("p"),ZFo=o("The model is set in evaluation mode by default using "),Tie=a("code"),eTo=o("model.eval()"),oTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=a("code"),rTo=o("model.train()"),tTo=l(),F(tu.$$.fragment),Tqe=l(),xi=a("h2"),au=a("a"),Eie=a("span"),F(sy.$$.fragment),aTo=l(),Cie=a("span"),nTo=o("AutoModelForPreTraining"),Mqe=l(),xo=a("div"),F(ly.$$.fragment),sTo=l(),$i=a("p"),lTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xq=a("a"),iTo=o("from_pretrained()"),dTo=o(" class method or the "),$q=a("a"),cTo=o("from_config()"),fTo=o(` class
method.`),mTo=l(),iy=a("p"),gTo=o("This class cannot be instantiated directly using "),wie=a("code"),hTo=o("__init__()"),pTo=o(" (throws an error)."),_To=l(),nt=a("div"),F(dy.$$.fragment),uTo=l(),Aie=a("p"),bTo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),vTo=l(),ki=a("p"),FTo=o(`Note:
Loading a model from its configuration file does `),yie=a("strong"),TTo=o("not"),MTo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=a("a"),ETo=o("from_pretrained()"),CTo=o(" to load the model weights."),wTo=l(),F(nu.$$.fragment),ATo=l(),Ye=a("div"),F(cy.$$.fragment),yTo=l(),Lie=a("p"),LTo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),xTo=l(),$a=a("p"),$To=o("The model class to instantiate is selected based on the "),xie=a("code"),kTo=o("model_type"),STo=o(` property of the config object (either
passed as an argument or loaded from `),$ie=a("code"),RTo=o("pretrained_model_name_or_path"),PTo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kie=a("code"),BTo=o("pretrained_model_name_or_path"),ITo=o(":"),NTo=l(),G=a("ul"),su=a("li"),Sie=a("strong"),qTo=o("albert"),jTo=o(" \u2014 "),Sq=a("a"),DTo=o("AlbertForPreTraining"),GTo=o(" (ALBERT model)"),OTo=l(),lu=a("li"),Rie=a("strong"),VTo=o("bart"),XTo=o(" \u2014 "),Rq=a("a"),zTo=o("BartForConditionalGeneration"),WTo=o(" (BART model)"),QTo=l(),iu=a("li"),Pie=a("strong"),HTo=o("bert"),UTo=o(" \u2014 "),Pq=a("a"),JTo=o("BertForPreTraining"),YTo=o(" (BERT model)"),KTo=l(),du=a("li"),Bie=a("strong"),ZTo=o("big_bird"),eMo=o(" \u2014 "),Bq=a("a"),oMo=o("BigBirdForPreTraining"),rMo=o(" (BigBird model)"),tMo=l(),cu=a("li"),Iie=a("strong"),aMo=o("camembert"),nMo=o(" \u2014 "),Iq=a("a"),sMo=o("CamembertForMaskedLM"),lMo=o(" (CamemBERT model)"),iMo=l(),fu=a("li"),Nie=a("strong"),dMo=o("ctrl"),cMo=o(" \u2014 "),Nq=a("a"),fMo=o("CTRLLMHeadModel"),mMo=o(" (CTRL model)"),gMo=l(),mu=a("li"),qie=a("strong"),hMo=o("data2vec-text"),pMo=o(" \u2014 "),qq=a("a"),_Mo=o("Data2VecTextForMaskedLM"),uMo=o(" (Data2VecText model)"),bMo=l(),gu=a("li"),jie=a("strong"),vMo=o("deberta"),FMo=o(" \u2014 "),jq=a("a"),TMo=o("DebertaForMaskedLM"),MMo=o(" (DeBERTa model)"),EMo=l(),hu=a("li"),Die=a("strong"),CMo=o("deberta-v2"),wMo=o(" \u2014 "),Dq=a("a"),AMo=o("DebertaV2ForMaskedLM"),yMo=o(" (DeBERTa-v2 model)"),LMo=l(),pu=a("li"),Gie=a("strong"),xMo=o("distilbert"),$Mo=o(" \u2014 "),Gq=a("a"),kMo=o("DistilBertForMaskedLM"),SMo=o(" (DistilBERT model)"),RMo=l(),_u=a("li"),Oie=a("strong"),PMo=o("electra"),BMo=o(" \u2014 "),Oq=a("a"),IMo=o("ElectraForPreTraining"),NMo=o(" (ELECTRA model)"),qMo=l(),uu=a("li"),Vie=a("strong"),jMo=o("flaubert"),DMo=o(" \u2014 "),Vq=a("a"),GMo=o("FlaubertWithLMHeadModel"),OMo=o(" (FlauBERT model)"),VMo=l(),bu=a("li"),Xie=a("strong"),XMo=o("flava"),zMo=o(" \u2014 "),Xq=a("a"),WMo=o("FlavaForPreTraining"),QMo=o(" (Flava model)"),HMo=l(),vu=a("li"),zie=a("strong"),UMo=o("fnet"),JMo=o(" \u2014 "),zq=a("a"),YMo=o("FNetForPreTraining"),KMo=o(" (FNet model)"),ZMo=l(),Fu=a("li"),Wie=a("strong"),eEo=o("fsmt"),oEo=o(" \u2014 "),Wq=a("a"),rEo=o("FSMTForConditionalGeneration"),tEo=o(" (FairSeq Machine-Translation model)"),aEo=l(),Tu=a("li"),Qie=a("strong"),nEo=o("funnel"),sEo=o(" \u2014 "),Qq=a("a"),lEo=o("FunnelForPreTraining"),iEo=o(" (Funnel Transformer model)"),dEo=l(),Mu=a("li"),Hie=a("strong"),cEo=o("gpt2"),fEo=o(" \u2014 "),Hq=a("a"),mEo=o("GPT2LMHeadModel"),gEo=o(" (OpenAI GPT-2 model)"),hEo=l(),Eu=a("li"),Uie=a("strong"),pEo=o("ibert"),_Eo=o(" \u2014 "),Uq=a("a"),uEo=o("IBertForMaskedLM"),bEo=o(" (I-BERT model)"),vEo=l(),Cu=a("li"),Jie=a("strong"),FEo=o("layoutlm"),TEo=o(" \u2014 "),Jq=a("a"),MEo=o("LayoutLMForMaskedLM"),EEo=o(" (LayoutLM model)"),CEo=l(),wu=a("li"),Yie=a("strong"),wEo=o("longformer"),AEo=o(" \u2014 "),Yq=a("a"),yEo=o("LongformerForMaskedLM"),LEo=o(" (Longformer model)"),xEo=l(),Au=a("li"),Kie=a("strong"),$Eo=o("lxmert"),kEo=o(" \u2014 "),Kq=a("a"),SEo=o("LxmertForPreTraining"),REo=o(" (LXMERT model)"),PEo=l(),yu=a("li"),Zie=a("strong"),BEo=o("megatron-bert"),IEo=o(" \u2014 "),Zq=a("a"),NEo=o("MegatronBertForPreTraining"),qEo=o(" (MegatronBert model)"),jEo=l(),Lu=a("li"),ede=a("strong"),DEo=o("mobilebert"),GEo=o(" \u2014 "),ej=a("a"),OEo=o("MobileBertForPreTraining"),VEo=o(" (MobileBERT model)"),XEo=l(),xu=a("li"),ode=a("strong"),zEo=o("mpnet"),WEo=o(" \u2014 "),oj=a("a"),QEo=o("MPNetForMaskedLM"),HEo=o(" (MPNet model)"),UEo=l(),$u=a("li"),rde=a("strong"),JEo=o("openai-gpt"),YEo=o(" \u2014 "),rj=a("a"),KEo=o("OpenAIGPTLMHeadModel"),ZEo=o(" (OpenAI GPT model)"),eCo=l(),ku=a("li"),tde=a("strong"),oCo=o("retribert"),rCo=o(" \u2014 "),tj=a("a"),tCo=o("RetriBertModel"),aCo=o(" (RetriBERT model)"),nCo=l(),Su=a("li"),ade=a("strong"),sCo=o("roberta"),lCo=o(" \u2014 "),aj=a("a"),iCo=o("RobertaForMaskedLM"),dCo=o(" (RoBERTa model)"),cCo=l(),Ru=a("li"),nde=a("strong"),fCo=o("splinter"),mCo=o(" \u2014 "),nj=a("a"),gCo=o("SplinterForPreTraining"),hCo=o(" (Splinter model)"),pCo=l(),Pu=a("li"),sde=a("strong"),_Co=o("squeezebert"),uCo=o(" \u2014 "),sj=a("a"),bCo=o("SqueezeBertForMaskedLM"),vCo=o(" (SqueezeBERT model)"),FCo=l(),Bu=a("li"),lde=a("strong"),TCo=o("t5"),MCo=o(" \u2014 "),lj=a("a"),ECo=o("T5ForConditionalGeneration"),CCo=o(" (T5 model)"),wCo=l(),Iu=a("li"),ide=a("strong"),ACo=o("tapas"),yCo=o(" \u2014 "),ij=a("a"),LCo=o("TapasForMaskedLM"),xCo=o(" (TAPAS model)"),$Co=l(),Nu=a("li"),dde=a("strong"),kCo=o("transfo-xl"),SCo=o(" \u2014 "),dj=a("a"),RCo=o("TransfoXLLMHeadModel"),PCo=o(" (Transformer-XL model)"),BCo=l(),qu=a("li"),cde=a("strong"),ICo=o("unispeech"),NCo=o(" \u2014 "),cj=a("a"),qCo=o("UniSpeechForPreTraining"),jCo=o(" (UniSpeech model)"),DCo=l(),ju=a("li"),fde=a("strong"),GCo=o("unispeech-sat"),OCo=o(" \u2014 "),fj=a("a"),VCo=o("UniSpeechSatForPreTraining"),XCo=o(" (UniSpeechSat model)"),zCo=l(),Du=a("li"),mde=a("strong"),WCo=o("visual_bert"),QCo=o(" \u2014 "),mj=a("a"),HCo=o("VisualBertForPreTraining"),UCo=o(" (VisualBert model)"),JCo=l(),Gu=a("li"),gde=a("strong"),YCo=o("vit_mae"),KCo=o(" \u2014 "),gj=a("a"),ZCo=o("ViTMAEForPreTraining"),e5o=o(" (ViTMAE model)"),o5o=l(),Ou=a("li"),hde=a("strong"),r5o=o("wav2vec2"),t5o=o(" \u2014 "),hj=a("a"),a5o=o("Wav2Vec2ForPreTraining"),n5o=o(" (Wav2Vec2 model)"),s5o=l(),Vu=a("li"),pde=a("strong"),l5o=o("wav2vec2-conformer"),i5o=o(" \u2014 "),pj=a("a"),d5o=o("Wav2Vec2ConformerForPreTraining"),c5o=o(" (Wav2Vec2-Conformer model)"),f5o=l(),Xu=a("li"),_de=a("strong"),m5o=o("xlm"),g5o=o(" \u2014 "),_j=a("a"),h5o=o("XLMWithLMHeadModel"),p5o=o(" (XLM model)"),_5o=l(),zu=a("li"),ude=a("strong"),u5o=o("xlm-roberta"),b5o=o(" \u2014 "),uj=a("a"),v5o=o("XLMRobertaForMaskedLM"),F5o=o(" (XLM-RoBERTa model)"),T5o=l(),Wu=a("li"),bde=a("strong"),M5o=o("xlm-roberta-xl"),E5o=o(" \u2014 "),bj=a("a"),C5o=o("XLMRobertaXLForMaskedLM"),w5o=o(" (XLM-RoBERTa-XL model)"),A5o=l(),Qu=a("li"),vde=a("strong"),y5o=o("xlnet"),L5o=o(" \u2014 "),vj=a("a"),x5o=o("XLNetLMHeadModel"),$5o=o(" (XLNet model)"),k5o=l(),Hu=a("p"),S5o=o("The model is set in evaluation mode by default using "),Fde=a("code"),R5o=o("model.eval()"),P5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=a("code"),B5o=o("model.train()"),I5o=l(),F(Uu.$$.fragment),Eqe=l(),Si=a("h2"),Ju=a("a"),Mde=a("span"),F(fy.$$.fragment),N5o=l(),Ede=a("span"),q5o=o("AutoModelForCausalLM"),Cqe=l(),$o=a("div"),F(my.$$.fragment),j5o=l(),Ri=a("p"),D5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fj=a("a"),G5o=o("from_pretrained()"),O5o=o(" class method or the "),Tj=a("a"),V5o=o("from_config()"),X5o=o(` class
method.`),z5o=l(),gy=a("p"),W5o=o("This class cannot be instantiated directly using "),Cde=a("code"),Q5o=o("__init__()"),H5o=o(" (throws an error)."),U5o=l(),st=a("div"),F(hy.$$.fragment),J5o=l(),wde=a("p"),Y5o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),K5o=l(),Pi=a("p"),Z5o=o(`Note:
Loading a model from its configuration file does `),Ade=a("strong"),e3o=o("not"),o3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=a("a"),r3o=o("from_pretrained()"),t3o=o(" to load the model weights."),a3o=l(),F(Yu.$$.fragment),n3o=l(),Ke=a("div"),F(py.$$.fragment),s3o=l(),yde=a("p"),l3o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),i3o=l(),ka=a("p"),d3o=o("The model class to instantiate is selected based on the "),Lde=a("code"),c3o=o("model_type"),f3o=o(` property of the config object (either
passed as an argument or loaded from `),xde=a("code"),m3o=o("pretrained_model_name_or_path"),g3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=a("code"),h3o=o("pretrained_model_name_or_path"),p3o=o(":"),_3o=l(),z=a("ul"),Ku=a("li"),kde=a("strong"),u3o=o("bart"),b3o=o(" \u2014 "),Ej=a("a"),v3o=o("BartForCausalLM"),F3o=o(" (BART model)"),T3o=l(),Zu=a("li"),Sde=a("strong"),M3o=o("bert"),E3o=o(" \u2014 "),Cj=a("a"),C3o=o("BertLMHeadModel"),w3o=o(" (BERT model)"),A3o=l(),e2=a("li"),Rde=a("strong"),y3o=o("bert-generation"),L3o=o(" \u2014 "),wj=a("a"),x3o=o("BertGenerationDecoder"),$3o=o(" (Bert Generation model)"),k3o=l(),o2=a("li"),Pde=a("strong"),S3o=o("big_bird"),R3o=o(" \u2014 "),Aj=a("a"),P3o=o("BigBirdForCausalLM"),B3o=o(" (BigBird model)"),I3o=l(),r2=a("li"),Bde=a("strong"),N3o=o("bigbird_pegasus"),q3o=o(" \u2014 "),yj=a("a"),j3o=o("BigBirdPegasusForCausalLM"),D3o=o(" (BigBirdPegasus model)"),G3o=l(),t2=a("li"),Ide=a("strong"),O3o=o("blenderbot"),V3o=o(" \u2014 "),Lj=a("a"),X3o=o("BlenderbotForCausalLM"),z3o=o(" (Blenderbot model)"),W3o=l(),a2=a("li"),Nde=a("strong"),Q3o=o("blenderbot-small"),H3o=o(" \u2014 "),xj=a("a"),U3o=o("BlenderbotSmallForCausalLM"),J3o=o(" (BlenderbotSmall model)"),Y3o=l(),n2=a("li"),qde=a("strong"),K3o=o("camembert"),Z3o=o(" \u2014 "),$j=a("a"),ewo=o("CamembertForCausalLM"),owo=o(" (CamemBERT model)"),rwo=l(),s2=a("li"),jde=a("strong"),two=o("ctrl"),awo=o(" \u2014 "),kj=a("a"),nwo=o("CTRLLMHeadModel"),swo=o(" (CTRL model)"),lwo=l(),l2=a("li"),Dde=a("strong"),iwo=o("data2vec-text"),dwo=o(" \u2014 "),Sj=a("a"),cwo=o("Data2VecTextForCausalLM"),fwo=o(" (Data2VecText model)"),mwo=l(),i2=a("li"),Gde=a("strong"),gwo=o("electra"),hwo=o(" \u2014 "),Rj=a("a"),pwo=o("ElectraForCausalLM"),_wo=o(" (ELECTRA model)"),uwo=l(),d2=a("li"),Ode=a("strong"),bwo=o("gpt2"),vwo=o(" \u2014 "),Pj=a("a"),Fwo=o("GPT2LMHeadModel"),Two=o(" (OpenAI GPT-2 model)"),Mwo=l(),c2=a("li"),Vde=a("strong"),Ewo=o("gpt_neo"),Cwo=o(" \u2014 "),Bj=a("a"),wwo=o("GPTNeoForCausalLM"),Awo=o(" (GPT Neo model)"),ywo=l(),f2=a("li"),Xde=a("strong"),Lwo=o("gpt_neox"),xwo=o(" \u2014 "),Ij=a("a"),$wo=o("GPTNeoXForCausalLM"),kwo=o(" (GPT NeoX model)"),Swo=l(),m2=a("li"),zde=a("strong"),Rwo=o("gptj"),Pwo=o(" \u2014 "),Nj=a("a"),Bwo=o("GPTJForCausalLM"),Iwo=o(" (GPT-J model)"),Nwo=l(),g2=a("li"),Wde=a("strong"),qwo=o("marian"),jwo=o(" \u2014 "),qj=a("a"),Dwo=o("MarianForCausalLM"),Gwo=o(" (Marian model)"),Owo=l(),h2=a("li"),Qde=a("strong"),Vwo=o("mbart"),Xwo=o(" \u2014 "),jj=a("a"),zwo=o("MBartForCausalLM"),Wwo=o(" (mBART model)"),Qwo=l(),p2=a("li"),Hde=a("strong"),Hwo=o("megatron-bert"),Uwo=o(" \u2014 "),Dj=a("a"),Jwo=o("MegatronBertForCausalLM"),Ywo=o(" (MegatronBert model)"),Kwo=l(),_2=a("li"),Ude=a("strong"),Zwo=o("openai-gpt"),e0o=o(" \u2014 "),Gj=a("a"),o0o=o("OpenAIGPTLMHeadModel"),r0o=o(" (OpenAI GPT model)"),t0o=l(),u2=a("li"),Jde=a("strong"),a0o=o("opt"),n0o=o(" \u2014 "),Oj=a("a"),s0o=o("OPTForCausalLM"),l0o=o(" (OPT model)"),i0o=l(),b2=a("li"),Yde=a("strong"),d0o=o("pegasus"),c0o=o(" \u2014 "),Vj=a("a"),f0o=o("PegasusForCausalLM"),m0o=o(" (Pegasus model)"),g0o=l(),v2=a("li"),Kde=a("strong"),h0o=o("plbart"),p0o=o(" \u2014 "),Xj=a("a"),_0o=o("PLBartForCausalLM"),u0o=o(" (PLBart model)"),b0o=l(),F2=a("li"),Zde=a("strong"),v0o=o("prophetnet"),F0o=o(" \u2014 "),zj=a("a"),T0o=o("ProphetNetForCausalLM"),M0o=o(" (ProphetNet model)"),E0o=l(),T2=a("li"),ece=a("strong"),C0o=o("qdqbert"),w0o=o(" \u2014 "),Wj=a("a"),A0o=o("QDQBertLMHeadModel"),y0o=o(" (QDQBert model)"),L0o=l(),M2=a("li"),oce=a("strong"),x0o=o("reformer"),$0o=o(" \u2014 "),Qj=a("a"),k0o=o("ReformerModelWithLMHead"),S0o=o(" (Reformer model)"),R0o=l(),E2=a("li"),rce=a("strong"),P0o=o("rembert"),B0o=o(" \u2014 "),Hj=a("a"),I0o=o("RemBertForCausalLM"),N0o=o(" (RemBERT model)"),q0o=l(),C2=a("li"),tce=a("strong"),j0o=o("roberta"),D0o=o(" \u2014 "),Uj=a("a"),G0o=o("RobertaForCausalLM"),O0o=o(" (RoBERTa model)"),V0o=l(),w2=a("li"),ace=a("strong"),X0o=o("roformer"),z0o=o(" \u2014 "),Jj=a("a"),W0o=o("RoFormerForCausalLM"),Q0o=o(" (RoFormer model)"),H0o=l(),A2=a("li"),nce=a("strong"),U0o=o("speech_to_text_2"),J0o=o(" \u2014 "),Yj=a("a"),Y0o=o("Speech2Text2ForCausalLM"),K0o=o(" (Speech2Text2 model)"),Z0o=l(),y2=a("li"),sce=a("strong"),e6o=o("transfo-xl"),o6o=o(" \u2014 "),Kj=a("a"),r6o=o("TransfoXLLMHeadModel"),t6o=o(" (Transformer-XL model)"),a6o=l(),L2=a("li"),lce=a("strong"),n6o=o("trocr"),s6o=o(" \u2014 "),Zj=a("a"),l6o=o("TrOCRForCausalLM"),i6o=o(" (TrOCR model)"),d6o=l(),x2=a("li"),ice=a("strong"),c6o=o("xglm"),f6o=o(" \u2014 "),eD=a("a"),m6o=o("XGLMForCausalLM"),g6o=o(" (XGLM model)"),h6o=l(),$2=a("li"),dce=a("strong"),p6o=o("xlm"),_6o=o(" \u2014 "),oD=a("a"),u6o=o("XLMWithLMHeadModel"),b6o=o(" (XLM model)"),v6o=l(),k2=a("li"),cce=a("strong"),F6o=o("xlm-prophetnet"),T6o=o(" \u2014 "),rD=a("a"),M6o=o("XLMProphetNetForCausalLM"),E6o=o(" (XLMProphetNet model)"),C6o=l(),S2=a("li"),fce=a("strong"),w6o=o("xlm-roberta"),A6o=o(" \u2014 "),tD=a("a"),y6o=o("XLMRobertaForCausalLM"),L6o=o(" (XLM-RoBERTa model)"),x6o=l(),R2=a("li"),mce=a("strong"),$6o=o("xlm-roberta-xl"),k6o=o(" \u2014 "),aD=a("a"),S6o=o("XLMRobertaXLForCausalLM"),R6o=o(" (XLM-RoBERTa-XL model)"),P6o=l(),P2=a("li"),gce=a("strong"),B6o=o("xlnet"),I6o=o(" \u2014 "),nD=a("a"),N6o=o("XLNetLMHeadModel"),q6o=o(" (XLNet model)"),j6o=l(),B2=a("p"),D6o=o("The model is set in evaluation mode by default using "),hce=a("code"),G6o=o("model.eval()"),O6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=a("code"),V6o=o("model.train()"),X6o=l(),F(I2.$$.fragment),wqe=l(),Bi=a("h2"),N2=a("a"),_ce=a("span"),F(_y.$$.fragment),z6o=l(),uce=a("span"),W6o=o("AutoModelForMaskedLM"),Aqe=l(),ko=a("div"),F(uy.$$.fragment),Q6o=l(),Ii=a("p"),H6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sD=a("a"),U6o=o("from_pretrained()"),J6o=o(" class method or the "),lD=a("a"),Y6o=o("from_config()"),K6o=o(` class
method.`),Z6o=l(),by=a("p"),eAo=o("This class cannot be instantiated directly using "),bce=a("code"),oAo=o("__init__()"),rAo=o(" (throws an error)."),tAo=l(),lt=a("div"),F(vy.$$.fragment),aAo=l(),vce=a("p"),nAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sAo=l(),Ni=a("p"),lAo=o(`Note:
Loading a model from its configuration file does `),Fce=a("strong"),iAo=o("not"),dAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=a("a"),cAo=o("from_pretrained()"),fAo=o(" to load the model weights."),mAo=l(),F(q2.$$.fragment),gAo=l(),Ze=a("div"),F(Fy.$$.fragment),hAo=l(),Tce=a("p"),pAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Ao=l(),Sa=a("p"),uAo=o("The model class to instantiate is selected based on the "),Mce=a("code"),bAo=o("model_type"),vAo=o(` property of the config object (either
passed as an argument or loaded from `),Ece=a("code"),FAo=o("pretrained_model_name_or_path"),TAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=a("code"),MAo=o("pretrained_model_name_or_path"),EAo=o(":"),CAo=l(),Q=a("ul"),j2=a("li"),wce=a("strong"),wAo=o("albert"),AAo=o(" \u2014 "),dD=a("a"),yAo=o("AlbertForMaskedLM"),LAo=o(" (ALBERT model)"),xAo=l(),D2=a("li"),Ace=a("strong"),$Ao=o("bart"),kAo=o(" \u2014 "),cD=a("a"),SAo=o("BartForConditionalGeneration"),RAo=o(" (BART model)"),PAo=l(),G2=a("li"),yce=a("strong"),BAo=o("bert"),IAo=o(" \u2014 "),fD=a("a"),NAo=o("BertForMaskedLM"),qAo=o(" (BERT model)"),jAo=l(),O2=a("li"),Lce=a("strong"),DAo=o("big_bird"),GAo=o(" \u2014 "),mD=a("a"),OAo=o("BigBirdForMaskedLM"),VAo=o(" (BigBird model)"),XAo=l(),V2=a("li"),xce=a("strong"),zAo=o("camembert"),WAo=o(" \u2014 "),gD=a("a"),QAo=o("CamembertForMaskedLM"),HAo=o(" (CamemBERT model)"),UAo=l(),X2=a("li"),$ce=a("strong"),JAo=o("convbert"),YAo=o(" \u2014 "),hD=a("a"),KAo=o("ConvBertForMaskedLM"),ZAo=o(" (ConvBERT model)"),eyo=l(),z2=a("li"),kce=a("strong"),oyo=o("data2vec-text"),ryo=o(" \u2014 "),pD=a("a"),tyo=o("Data2VecTextForMaskedLM"),ayo=o(" (Data2VecText model)"),nyo=l(),W2=a("li"),Sce=a("strong"),syo=o("deberta"),lyo=o(" \u2014 "),_D=a("a"),iyo=o("DebertaForMaskedLM"),dyo=o(" (DeBERTa model)"),cyo=l(),Q2=a("li"),Rce=a("strong"),fyo=o("deberta-v2"),myo=o(" \u2014 "),uD=a("a"),gyo=o("DebertaV2ForMaskedLM"),hyo=o(" (DeBERTa-v2 model)"),pyo=l(),H2=a("li"),Pce=a("strong"),_yo=o("distilbert"),uyo=o(" \u2014 "),bD=a("a"),byo=o("DistilBertForMaskedLM"),vyo=o(" (DistilBERT model)"),Fyo=l(),U2=a("li"),Bce=a("strong"),Tyo=o("electra"),Myo=o(" \u2014 "),vD=a("a"),Eyo=o("ElectraForMaskedLM"),Cyo=o(" (ELECTRA model)"),wyo=l(),J2=a("li"),Ice=a("strong"),Ayo=o("flaubert"),yyo=o(" \u2014 "),FD=a("a"),Lyo=o("FlaubertWithLMHeadModel"),xyo=o(" (FlauBERT model)"),$yo=l(),Y2=a("li"),Nce=a("strong"),kyo=o("fnet"),Syo=o(" \u2014 "),TD=a("a"),Ryo=o("FNetForMaskedLM"),Pyo=o(" (FNet model)"),Byo=l(),K2=a("li"),qce=a("strong"),Iyo=o("funnel"),Nyo=o(" \u2014 "),MD=a("a"),qyo=o("FunnelForMaskedLM"),jyo=o(" (Funnel Transformer model)"),Dyo=l(),Z2=a("li"),jce=a("strong"),Gyo=o("ibert"),Oyo=o(" \u2014 "),ED=a("a"),Vyo=o("IBertForMaskedLM"),Xyo=o(" (I-BERT model)"),zyo=l(),e1=a("li"),Dce=a("strong"),Wyo=o("layoutlm"),Qyo=o(" \u2014 "),CD=a("a"),Hyo=o("LayoutLMForMaskedLM"),Uyo=o(" (LayoutLM model)"),Jyo=l(),o1=a("li"),Gce=a("strong"),Yyo=o("longformer"),Kyo=o(" \u2014 "),wD=a("a"),Zyo=o("LongformerForMaskedLM"),eLo=o(" (Longformer model)"),oLo=l(),r1=a("li"),Oce=a("strong"),rLo=o("mbart"),tLo=o(" \u2014 "),AD=a("a"),aLo=o("MBartForConditionalGeneration"),nLo=o(" (mBART model)"),sLo=l(),t1=a("li"),Vce=a("strong"),lLo=o("megatron-bert"),iLo=o(" \u2014 "),yD=a("a"),dLo=o("MegatronBertForMaskedLM"),cLo=o(" (MegatronBert model)"),fLo=l(),a1=a("li"),Xce=a("strong"),mLo=o("mobilebert"),gLo=o(" \u2014 "),LD=a("a"),hLo=o("MobileBertForMaskedLM"),pLo=o(" (MobileBERT model)"),_Lo=l(),n1=a("li"),zce=a("strong"),uLo=o("mpnet"),bLo=o(" \u2014 "),xD=a("a"),vLo=o("MPNetForMaskedLM"),FLo=o(" (MPNet model)"),TLo=l(),s1=a("li"),Wce=a("strong"),MLo=o("nystromformer"),ELo=o(" \u2014 "),$D=a("a"),CLo=o("NystromformerForMaskedLM"),wLo=o(" (Nystromformer model)"),ALo=l(),l1=a("li"),Qce=a("strong"),yLo=o("perceiver"),LLo=o(" \u2014 "),kD=a("a"),xLo=o("PerceiverForMaskedLM"),$Lo=o(" (Perceiver model)"),kLo=l(),i1=a("li"),Hce=a("strong"),SLo=o("qdqbert"),RLo=o(" \u2014 "),SD=a("a"),PLo=o("QDQBertForMaskedLM"),BLo=o(" (QDQBert model)"),ILo=l(),d1=a("li"),Uce=a("strong"),NLo=o("reformer"),qLo=o(" \u2014 "),RD=a("a"),jLo=o("ReformerForMaskedLM"),DLo=o(" (Reformer model)"),GLo=l(),c1=a("li"),Jce=a("strong"),OLo=o("rembert"),VLo=o(" \u2014 "),PD=a("a"),XLo=o("RemBertForMaskedLM"),zLo=o(" (RemBERT model)"),WLo=l(),f1=a("li"),Yce=a("strong"),QLo=o("roberta"),HLo=o(" \u2014 "),BD=a("a"),ULo=o("RobertaForMaskedLM"),JLo=o(" (RoBERTa model)"),YLo=l(),m1=a("li"),Kce=a("strong"),KLo=o("roformer"),ZLo=o(" \u2014 "),ID=a("a"),e8o=o("RoFormerForMaskedLM"),o8o=o(" (RoFormer model)"),r8o=l(),g1=a("li"),Zce=a("strong"),t8o=o("squeezebert"),a8o=o(" \u2014 "),ND=a("a"),n8o=o("SqueezeBertForMaskedLM"),s8o=o(" (SqueezeBERT model)"),l8o=l(),h1=a("li"),efe=a("strong"),i8o=o("tapas"),d8o=o(" \u2014 "),qD=a("a"),c8o=o("TapasForMaskedLM"),f8o=o(" (TAPAS model)"),m8o=l(),p1=a("li"),ofe=a("strong"),g8o=o("wav2vec2"),h8o=o(" \u2014 "),rfe=a("code"),p8o=o("Wav2Vec2ForMaskedLM"),_8o=o(" (Wav2Vec2 model)"),u8o=l(),_1=a("li"),tfe=a("strong"),b8o=o("xlm"),v8o=o(" \u2014 "),jD=a("a"),F8o=o("XLMWithLMHeadModel"),T8o=o(" (XLM model)"),M8o=l(),u1=a("li"),afe=a("strong"),E8o=o("xlm-roberta"),C8o=o(" \u2014 "),DD=a("a"),w8o=o("XLMRobertaForMaskedLM"),A8o=o(" (XLM-RoBERTa model)"),y8o=l(),b1=a("li"),nfe=a("strong"),L8o=o("xlm-roberta-xl"),x8o=o(" \u2014 "),GD=a("a"),$8o=o("XLMRobertaXLForMaskedLM"),k8o=o(" (XLM-RoBERTa-XL model)"),S8o=l(),v1=a("li"),sfe=a("strong"),R8o=o("yoso"),P8o=o(" \u2014 "),OD=a("a"),B8o=o("YosoForMaskedLM"),I8o=o(" (YOSO model)"),N8o=l(),F1=a("p"),q8o=o("The model is set in evaluation mode by default using "),lfe=a("code"),j8o=o("model.eval()"),D8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),G8o=o("model.train()"),O8o=l(),F(T1.$$.fragment),yqe=l(),qi=a("h2"),M1=a("a"),dfe=a("span"),F(Ty.$$.fragment),V8o=l(),cfe=a("span"),X8o=o("AutoModelForSeq2SeqLM"),Lqe=l(),So=a("div"),F(My.$$.fragment),z8o=l(),ji=a("p"),W8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=a("a"),Q8o=o("from_pretrained()"),H8o=o(" class method or the "),XD=a("a"),U8o=o("from_config()"),J8o=o(` class
method.`),Y8o=l(),Ey=a("p"),K8o=o("This class cannot be instantiated directly using "),ffe=a("code"),Z8o=o("__init__()"),e9o=o(" (throws an error)."),o9o=l(),it=a("div"),F(Cy.$$.fragment),r9o=l(),mfe=a("p"),t9o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),a9o=l(),Di=a("p"),n9o=o(`Note:
Loading a model from its configuration file does `),gfe=a("strong"),s9o=o("not"),l9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=a("a"),i9o=o("from_pretrained()"),d9o=o(" to load the model weights."),c9o=l(),F(E1.$$.fragment),f9o=l(),eo=a("div"),F(wy.$$.fragment),m9o=l(),hfe=a("p"),g9o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),h9o=l(),Ra=a("p"),p9o=o("The model class to instantiate is selected based on the "),pfe=a("code"),_9o=o("model_type"),u9o=o(` property of the config object (either
passed as an argument or loaded from `),_fe=a("code"),b9o=o("pretrained_model_name_or_path"),v9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=a("code"),F9o=o("pretrained_model_name_or_path"),T9o=o(":"),M9o=l(),_e=a("ul"),C1=a("li"),bfe=a("strong"),E9o=o("bart"),C9o=o(" \u2014 "),WD=a("a"),w9o=o("BartForConditionalGeneration"),A9o=o(" (BART model)"),y9o=l(),w1=a("li"),vfe=a("strong"),L9o=o("bigbird_pegasus"),x9o=o(" \u2014 "),QD=a("a"),$9o=o("BigBirdPegasusForConditionalGeneration"),k9o=o(" (BigBirdPegasus model)"),S9o=l(),A1=a("li"),Ffe=a("strong"),R9o=o("blenderbot"),P9o=o(" \u2014 "),HD=a("a"),B9o=o("BlenderbotForConditionalGeneration"),I9o=o(" (Blenderbot model)"),N9o=l(),y1=a("li"),Tfe=a("strong"),q9o=o("blenderbot-small"),j9o=o(" \u2014 "),UD=a("a"),D9o=o("BlenderbotSmallForConditionalGeneration"),G9o=o(" (BlenderbotSmall model)"),O9o=l(),L1=a("li"),Mfe=a("strong"),V9o=o("encoder-decoder"),X9o=o(" \u2014 "),JD=a("a"),z9o=o("EncoderDecoderModel"),W9o=o(" (Encoder decoder model)"),Q9o=l(),x1=a("li"),Efe=a("strong"),H9o=o("fsmt"),U9o=o(" \u2014 "),YD=a("a"),J9o=o("FSMTForConditionalGeneration"),Y9o=o(" (FairSeq Machine-Translation model)"),K9o=l(),$1=a("li"),Cfe=a("strong"),Z9o=o("led"),exo=o(" \u2014 "),KD=a("a"),oxo=o("LEDForConditionalGeneration"),rxo=o(" (LED model)"),txo=l(),k1=a("li"),wfe=a("strong"),axo=o("m2m_100"),nxo=o(" \u2014 "),ZD=a("a"),sxo=o("M2M100ForConditionalGeneration"),lxo=o(" (M2M100 model)"),ixo=l(),S1=a("li"),Afe=a("strong"),dxo=o("marian"),cxo=o(" \u2014 "),eG=a("a"),fxo=o("MarianMTModel"),mxo=o(" (Marian model)"),gxo=l(),R1=a("li"),yfe=a("strong"),hxo=o("mbart"),pxo=o(" \u2014 "),oG=a("a"),_xo=o("MBartForConditionalGeneration"),uxo=o(" (mBART model)"),bxo=l(),P1=a("li"),Lfe=a("strong"),vxo=o("mt5"),Fxo=o(" \u2014 "),rG=a("a"),Txo=o("MT5ForConditionalGeneration"),Mxo=o(" (mT5 model)"),Exo=l(),B1=a("li"),xfe=a("strong"),Cxo=o("pegasus"),wxo=o(" \u2014 "),tG=a("a"),Axo=o("PegasusForConditionalGeneration"),yxo=o(" (Pegasus model)"),Lxo=l(),I1=a("li"),$fe=a("strong"),xxo=o("plbart"),$xo=o(" \u2014 "),aG=a("a"),kxo=o("PLBartForConditionalGeneration"),Sxo=o(" (PLBart model)"),Rxo=l(),N1=a("li"),kfe=a("strong"),Pxo=o("prophetnet"),Bxo=o(" \u2014 "),nG=a("a"),Ixo=o("ProphetNetForConditionalGeneration"),Nxo=o(" (ProphetNet model)"),qxo=l(),q1=a("li"),Sfe=a("strong"),jxo=o("t5"),Dxo=o(" \u2014 "),sG=a("a"),Gxo=o("T5ForConditionalGeneration"),Oxo=o(" (T5 model)"),Vxo=l(),j1=a("li"),Rfe=a("strong"),Xxo=o("xlm-prophetnet"),zxo=o(" \u2014 "),lG=a("a"),Wxo=o("XLMProphetNetForConditionalGeneration"),Qxo=o(" (XLMProphetNet model)"),Hxo=l(),D1=a("p"),Uxo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),Jxo=o("model.eval()"),Yxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),Kxo=o("model.train()"),Zxo=l(),F(G1.$$.fragment),xqe=l(),Gi=a("h2"),O1=a("a"),Ife=a("span"),F(Ay.$$.fragment),e$o=l(),Nfe=a("span"),o$o=o("AutoModelForSequenceClassification"),$qe=l(),Ro=a("div"),F(yy.$$.fragment),r$o=l(),Oi=a("p"),t$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=a("a"),a$o=o("from_pretrained()"),n$o=o(" class method or the "),dG=a("a"),s$o=o("from_config()"),l$o=o(` class
method.`),i$o=l(),Ly=a("p"),d$o=o("This class cannot be instantiated directly using "),qfe=a("code"),c$o=o("__init__()"),f$o=o(" (throws an error)."),m$o=l(),dt=a("div"),F(xy.$$.fragment),g$o=l(),jfe=a("p"),h$o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),p$o=l(),Vi=a("p"),_$o=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),u$o=o("not"),b$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=a("a"),v$o=o("from_pretrained()"),F$o=o(" to load the model weights."),T$o=l(),F(V1.$$.fragment),M$o=l(),oo=a("div"),F($y.$$.fragment),E$o=l(),Gfe=a("p"),C$o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),w$o=l(),Pa=a("p"),A$o=o("The model class to instantiate is selected based on the "),Ofe=a("code"),y$o=o("model_type"),L$o=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),x$o=o("pretrained_model_name_or_path"),$$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),k$o=o("pretrained_model_name_or_path"),S$o=o(":"),R$o=l(),N=a("ul"),X1=a("li"),zfe=a("strong"),P$o=o("albert"),B$o=o(" \u2014 "),fG=a("a"),I$o=o("AlbertForSequenceClassification"),N$o=o(" (ALBERT model)"),q$o=l(),z1=a("li"),Wfe=a("strong"),j$o=o("bart"),D$o=o(" \u2014 "),mG=a("a"),G$o=o("BartForSequenceClassification"),O$o=o(" (BART model)"),V$o=l(),W1=a("li"),Qfe=a("strong"),X$o=o("bert"),z$o=o(" \u2014 "),gG=a("a"),W$o=o("BertForSequenceClassification"),Q$o=o(" (BERT model)"),H$o=l(),Q1=a("li"),Hfe=a("strong"),U$o=o("big_bird"),J$o=o(" \u2014 "),hG=a("a"),Y$o=o("BigBirdForSequenceClassification"),K$o=o(" (BigBird model)"),Z$o=l(),H1=a("li"),Ufe=a("strong"),eko=o("bigbird_pegasus"),oko=o(" \u2014 "),pG=a("a"),rko=o("BigBirdPegasusForSequenceClassification"),tko=o(" (BigBirdPegasus model)"),ako=l(),U1=a("li"),Jfe=a("strong"),nko=o("camembert"),sko=o(" \u2014 "),_G=a("a"),lko=o("CamembertForSequenceClassification"),iko=o(" (CamemBERT model)"),dko=l(),J1=a("li"),Yfe=a("strong"),cko=o("canine"),fko=o(" \u2014 "),uG=a("a"),mko=o("CanineForSequenceClassification"),gko=o(" (Canine model)"),hko=l(),Y1=a("li"),Kfe=a("strong"),pko=o("convbert"),_ko=o(" \u2014 "),bG=a("a"),uko=o("ConvBertForSequenceClassification"),bko=o(" (ConvBERT model)"),vko=l(),K1=a("li"),Zfe=a("strong"),Fko=o("ctrl"),Tko=o(" \u2014 "),vG=a("a"),Mko=o("CTRLForSequenceClassification"),Eko=o(" (CTRL model)"),Cko=l(),Z1=a("li"),eme=a("strong"),wko=o("data2vec-text"),Ako=o(" \u2014 "),FG=a("a"),yko=o("Data2VecTextForSequenceClassification"),Lko=o(" (Data2VecText model)"),xko=l(),e7=a("li"),ome=a("strong"),$ko=o("deberta"),kko=o(" \u2014 "),TG=a("a"),Sko=o("DebertaForSequenceClassification"),Rko=o(" (DeBERTa model)"),Pko=l(),o7=a("li"),rme=a("strong"),Bko=o("deberta-v2"),Iko=o(" \u2014 "),MG=a("a"),Nko=o("DebertaV2ForSequenceClassification"),qko=o(" (DeBERTa-v2 model)"),jko=l(),r7=a("li"),tme=a("strong"),Dko=o("distilbert"),Gko=o(" \u2014 "),EG=a("a"),Oko=o("DistilBertForSequenceClassification"),Vko=o(" (DistilBERT model)"),Xko=l(),t7=a("li"),ame=a("strong"),zko=o("electra"),Wko=o(" \u2014 "),CG=a("a"),Qko=o("ElectraForSequenceClassification"),Hko=o(" (ELECTRA model)"),Uko=l(),a7=a("li"),nme=a("strong"),Jko=o("flaubert"),Yko=o(" \u2014 "),wG=a("a"),Kko=o("FlaubertForSequenceClassification"),Zko=o(" (FlauBERT model)"),eSo=l(),n7=a("li"),sme=a("strong"),oSo=o("fnet"),rSo=o(" \u2014 "),AG=a("a"),tSo=o("FNetForSequenceClassification"),aSo=o(" (FNet model)"),nSo=l(),s7=a("li"),lme=a("strong"),sSo=o("funnel"),lSo=o(" \u2014 "),yG=a("a"),iSo=o("FunnelForSequenceClassification"),dSo=o(" (Funnel Transformer model)"),cSo=l(),l7=a("li"),ime=a("strong"),fSo=o("gpt2"),mSo=o(" \u2014 "),LG=a("a"),gSo=o("GPT2ForSequenceClassification"),hSo=o(" (OpenAI GPT-2 model)"),pSo=l(),i7=a("li"),dme=a("strong"),_So=o("gpt_neo"),uSo=o(" \u2014 "),xG=a("a"),bSo=o("GPTNeoForSequenceClassification"),vSo=o(" (GPT Neo model)"),FSo=l(),d7=a("li"),cme=a("strong"),TSo=o("gptj"),MSo=o(" \u2014 "),$G=a("a"),ESo=o("GPTJForSequenceClassification"),CSo=o(" (GPT-J model)"),wSo=l(),c7=a("li"),fme=a("strong"),ASo=o("ibert"),ySo=o(" \u2014 "),kG=a("a"),LSo=o("IBertForSequenceClassification"),xSo=o(" (I-BERT model)"),$So=l(),f7=a("li"),mme=a("strong"),kSo=o("layoutlm"),SSo=o(" \u2014 "),SG=a("a"),RSo=o("LayoutLMForSequenceClassification"),PSo=o(" (LayoutLM model)"),BSo=l(),m7=a("li"),gme=a("strong"),ISo=o("layoutlmv2"),NSo=o(" \u2014 "),RG=a("a"),qSo=o("LayoutLMv2ForSequenceClassification"),jSo=o(" (LayoutLMv2 model)"),DSo=l(),g7=a("li"),hme=a("strong"),GSo=o("layoutlmv3"),OSo=o(" \u2014 "),PG=a("a"),VSo=o("LayoutLMv3ForSequenceClassification"),XSo=o(" (LayoutLMv3 model)"),zSo=l(),h7=a("li"),pme=a("strong"),WSo=o("led"),QSo=o(" \u2014 "),BG=a("a"),HSo=o("LEDForSequenceClassification"),USo=o(" (LED model)"),JSo=l(),p7=a("li"),_me=a("strong"),YSo=o("longformer"),KSo=o(" \u2014 "),IG=a("a"),ZSo=o("LongformerForSequenceClassification"),eRo=o(" (Longformer model)"),oRo=l(),_7=a("li"),ume=a("strong"),rRo=o("mbart"),tRo=o(" \u2014 "),NG=a("a"),aRo=o("MBartForSequenceClassification"),nRo=o(" (mBART model)"),sRo=l(),u7=a("li"),bme=a("strong"),lRo=o("megatron-bert"),iRo=o(" \u2014 "),qG=a("a"),dRo=o("MegatronBertForSequenceClassification"),cRo=o(" (MegatronBert model)"),fRo=l(),b7=a("li"),vme=a("strong"),mRo=o("mobilebert"),gRo=o(" \u2014 "),jG=a("a"),hRo=o("MobileBertForSequenceClassification"),pRo=o(" (MobileBERT model)"),_Ro=l(),v7=a("li"),Fme=a("strong"),uRo=o("mpnet"),bRo=o(" \u2014 "),DG=a("a"),vRo=o("MPNetForSequenceClassification"),FRo=o(" (MPNet model)"),TRo=l(),F7=a("li"),Tme=a("strong"),MRo=o("nystromformer"),ERo=o(" \u2014 "),GG=a("a"),CRo=o("NystromformerForSequenceClassification"),wRo=o(" (Nystromformer model)"),ARo=l(),T7=a("li"),Mme=a("strong"),yRo=o("openai-gpt"),LRo=o(" \u2014 "),OG=a("a"),xRo=o("OpenAIGPTForSequenceClassification"),$Ro=o(" (OpenAI GPT model)"),kRo=l(),M7=a("li"),Eme=a("strong"),SRo=o("perceiver"),RRo=o(" \u2014 "),VG=a("a"),PRo=o("PerceiverForSequenceClassification"),BRo=o(" (Perceiver model)"),IRo=l(),E7=a("li"),Cme=a("strong"),NRo=o("plbart"),qRo=o(" \u2014 "),XG=a("a"),jRo=o("PLBartForSequenceClassification"),DRo=o(" (PLBart model)"),GRo=l(),C7=a("li"),wme=a("strong"),ORo=o("qdqbert"),VRo=o(" \u2014 "),zG=a("a"),XRo=o("QDQBertForSequenceClassification"),zRo=o(" (QDQBert model)"),WRo=l(),w7=a("li"),Ame=a("strong"),QRo=o("reformer"),HRo=o(" \u2014 "),WG=a("a"),URo=o("ReformerForSequenceClassification"),JRo=o(" (Reformer model)"),YRo=l(),A7=a("li"),yme=a("strong"),KRo=o("rembert"),ZRo=o(" \u2014 "),QG=a("a"),ePo=o("RemBertForSequenceClassification"),oPo=o(" (RemBERT model)"),rPo=l(),y7=a("li"),Lme=a("strong"),tPo=o("roberta"),aPo=o(" \u2014 "),HG=a("a"),nPo=o("RobertaForSequenceClassification"),sPo=o(" (RoBERTa model)"),lPo=l(),L7=a("li"),xme=a("strong"),iPo=o("roformer"),dPo=o(" \u2014 "),UG=a("a"),cPo=o("RoFormerForSequenceClassification"),fPo=o(" (RoFormer model)"),mPo=l(),x7=a("li"),$me=a("strong"),gPo=o("squeezebert"),hPo=o(" \u2014 "),JG=a("a"),pPo=o("SqueezeBertForSequenceClassification"),_Po=o(" (SqueezeBERT model)"),uPo=l(),$7=a("li"),kme=a("strong"),bPo=o("tapas"),vPo=o(" \u2014 "),YG=a("a"),FPo=o("TapasForSequenceClassification"),TPo=o(" (TAPAS model)"),MPo=l(),k7=a("li"),Sme=a("strong"),EPo=o("transfo-xl"),CPo=o(" \u2014 "),KG=a("a"),wPo=o("TransfoXLForSequenceClassification"),APo=o(" (Transformer-XL model)"),yPo=l(),S7=a("li"),Rme=a("strong"),LPo=o("xlm"),xPo=o(" \u2014 "),ZG=a("a"),$Po=o("XLMForSequenceClassification"),kPo=o(" (XLM model)"),SPo=l(),R7=a("li"),Pme=a("strong"),RPo=o("xlm-roberta"),PPo=o(" \u2014 "),eO=a("a"),BPo=o("XLMRobertaForSequenceClassification"),IPo=o(" (XLM-RoBERTa model)"),NPo=l(),P7=a("li"),Bme=a("strong"),qPo=o("xlm-roberta-xl"),jPo=o(" \u2014 "),oO=a("a"),DPo=o("XLMRobertaXLForSequenceClassification"),GPo=o(" (XLM-RoBERTa-XL model)"),OPo=l(),B7=a("li"),Ime=a("strong"),VPo=o("xlnet"),XPo=o(" \u2014 "),rO=a("a"),zPo=o("XLNetForSequenceClassification"),WPo=o(" (XLNet model)"),QPo=l(),I7=a("li"),Nme=a("strong"),HPo=o("yoso"),UPo=o(" \u2014 "),tO=a("a"),JPo=o("YosoForSequenceClassification"),YPo=o(" (YOSO model)"),KPo=l(),N7=a("p"),ZPo=o("The model is set in evaluation mode by default using "),qme=a("code"),eBo=o("model.eval()"),oBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=a("code"),rBo=o("model.train()"),tBo=l(),F(q7.$$.fragment),kqe=l(),Xi=a("h2"),j7=a("a"),Dme=a("span"),F(ky.$$.fragment),aBo=l(),Gme=a("span"),nBo=o("AutoModelForMultipleChoice"),Sqe=l(),Po=a("div"),F(Sy.$$.fragment),sBo=l(),zi=a("p"),lBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=a("a"),iBo=o("from_pretrained()"),dBo=o(" class method or the "),nO=a("a"),cBo=o("from_config()"),fBo=o(` class
method.`),mBo=l(),Ry=a("p"),gBo=o("This class cannot be instantiated directly using "),Ome=a("code"),hBo=o("__init__()"),pBo=o(" (throws an error)."),_Bo=l(),ct=a("div"),F(Py.$$.fragment),uBo=l(),Vme=a("p"),bBo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vBo=l(),Wi=a("p"),FBo=o(`Note:
Loading a model from its configuration file does `),Xme=a("strong"),TBo=o("not"),MBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),EBo=o("from_pretrained()"),CBo=o(" to load the model weights."),wBo=l(),F(D7.$$.fragment),ABo=l(),ro=a("div"),F(By.$$.fragment),yBo=l(),zme=a("p"),LBo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),xBo=l(),Ba=a("p"),$Bo=o("The model class to instantiate is selected based on the "),Wme=a("code"),kBo=o("model_type"),SBo=o(` property of the config object (either
passed as an argument or loaded from `),Qme=a("code"),RBo=o("pretrained_model_name_or_path"),PBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=a("code"),BBo=o("pretrained_model_name_or_path"),IBo=o(":"),NBo=l(),K=a("ul"),G7=a("li"),Ume=a("strong"),qBo=o("albert"),jBo=o(" \u2014 "),lO=a("a"),DBo=o("AlbertForMultipleChoice"),GBo=o(" (ALBERT model)"),OBo=l(),O7=a("li"),Jme=a("strong"),VBo=o("bert"),XBo=o(" \u2014 "),iO=a("a"),zBo=o("BertForMultipleChoice"),WBo=o(" (BERT model)"),QBo=l(),V7=a("li"),Yme=a("strong"),HBo=o("big_bird"),UBo=o(" \u2014 "),dO=a("a"),JBo=o("BigBirdForMultipleChoice"),YBo=o(" (BigBird model)"),KBo=l(),X7=a("li"),Kme=a("strong"),ZBo=o("camembert"),eIo=o(" \u2014 "),cO=a("a"),oIo=o("CamembertForMultipleChoice"),rIo=o(" (CamemBERT model)"),tIo=l(),z7=a("li"),Zme=a("strong"),aIo=o("canine"),nIo=o(" \u2014 "),fO=a("a"),sIo=o("CanineForMultipleChoice"),lIo=o(" (Canine model)"),iIo=l(),W7=a("li"),ege=a("strong"),dIo=o("convbert"),cIo=o(" \u2014 "),mO=a("a"),fIo=o("ConvBertForMultipleChoice"),mIo=o(" (ConvBERT model)"),gIo=l(),Q7=a("li"),oge=a("strong"),hIo=o("data2vec-text"),pIo=o(" \u2014 "),gO=a("a"),_Io=o("Data2VecTextForMultipleChoice"),uIo=o(" (Data2VecText model)"),bIo=l(),H7=a("li"),rge=a("strong"),vIo=o("deberta-v2"),FIo=o(" \u2014 "),hO=a("a"),TIo=o("DebertaV2ForMultipleChoice"),MIo=o(" (DeBERTa-v2 model)"),EIo=l(),U7=a("li"),tge=a("strong"),CIo=o("distilbert"),wIo=o(" \u2014 "),pO=a("a"),AIo=o("DistilBertForMultipleChoice"),yIo=o(" (DistilBERT model)"),LIo=l(),J7=a("li"),age=a("strong"),xIo=o("electra"),$Io=o(" \u2014 "),_O=a("a"),kIo=o("ElectraForMultipleChoice"),SIo=o(" (ELECTRA model)"),RIo=l(),Y7=a("li"),nge=a("strong"),PIo=o("flaubert"),BIo=o(" \u2014 "),uO=a("a"),IIo=o("FlaubertForMultipleChoice"),NIo=o(" (FlauBERT model)"),qIo=l(),K7=a("li"),sge=a("strong"),jIo=o("fnet"),DIo=o(" \u2014 "),bO=a("a"),GIo=o("FNetForMultipleChoice"),OIo=o(" (FNet model)"),VIo=l(),Z7=a("li"),lge=a("strong"),XIo=o("funnel"),zIo=o(" \u2014 "),vO=a("a"),WIo=o("FunnelForMultipleChoice"),QIo=o(" (Funnel Transformer model)"),HIo=l(),eb=a("li"),ige=a("strong"),UIo=o("ibert"),JIo=o(" \u2014 "),FO=a("a"),YIo=o("IBertForMultipleChoice"),KIo=o(" (I-BERT model)"),ZIo=l(),ob=a("li"),dge=a("strong"),eNo=o("longformer"),oNo=o(" \u2014 "),TO=a("a"),rNo=o("LongformerForMultipleChoice"),tNo=o(" (Longformer model)"),aNo=l(),rb=a("li"),cge=a("strong"),nNo=o("megatron-bert"),sNo=o(" \u2014 "),MO=a("a"),lNo=o("MegatronBertForMultipleChoice"),iNo=o(" (MegatronBert model)"),dNo=l(),tb=a("li"),fge=a("strong"),cNo=o("mobilebert"),fNo=o(" \u2014 "),EO=a("a"),mNo=o("MobileBertForMultipleChoice"),gNo=o(" (MobileBERT model)"),hNo=l(),ab=a("li"),mge=a("strong"),pNo=o("mpnet"),_No=o(" \u2014 "),CO=a("a"),uNo=o("MPNetForMultipleChoice"),bNo=o(" (MPNet model)"),vNo=l(),nb=a("li"),gge=a("strong"),FNo=o("nystromformer"),TNo=o(" \u2014 "),wO=a("a"),MNo=o("NystromformerForMultipleChoice"),ENo=o(" (Nystromformer model)"),CNo=l(),sb=a("li"),hge=a("strong"),wNo=o("qdqbert"),ANo=o(" \u2014 "),AO=a("a"),yNo=o("QDQBertForMultipleChoice"),LNo=o(" (QDQBert model)"),xNo=l(),lb=a("li"),pge=a("strong"),$No=o("rembert"),kNo=o(" \u2014 "),yO=a("a"),SNo=o("RemBertForMultipleChoice"),RNo=o(" (RemBERT model)"),PNo=l(),ib=a("li"),_ge=a("strong"),BNo=o("roberta"),INo=o(" \u2014 "),LO=a("a"),NNo=o("RobertaForMultipleChoice"),qNo=o(" (RoBERTa model)"),jNo=l(),db=a("li"),uge=a("strong"),DNo=o("roformer"),GNo=o(" \u2014 "),xO=a("a"),ONo=o("RoFormerForMultipleChoice"),VNo=o(" (RoFormer model)"),XNo=l(),cb=a("li"),bge=a("strong"),zNo=o("squeezebert"),WNo=o(" \u2014 "),$O=a("a"),QNo=o("SqueezeBertForMultipleChoice"),HNo=o(" (SqueezeBERT model)"),UNo=l(),fb=a("li"),vge=a("strong"),JNo=o("xlm"),YNo=o(" \u2014 "),kO=a("a"),KNo=o("XLMForMultipleChoice"),ZNo=o(" (XLM model)"),eqo=l(),mb=a("li"),Fge=a("strong"),oqo=o("xlm-roberta"),rqo=o(" \u2014 "),SO=a("a"),tqo=o("XLMRobertaForMultipleChoice"),aqo=o(" (XLM-RoBERTa model)"),nqo=l(),gb=a("li"),Tge=a("strong"),sqo=o("xlm-roberta-xl"),lqo=o(" \u2014 "),RO=a("a"),iqo=o("XLMRobertaXLForMultipleChoice"),dqo=o(" (XLM-RoBERTa-XL model)"),cqo=l(),hb=a("li"),Mge=a("strong"),fqo=o("xlnet"),mqo=o(" \u2014 "),PO=a("a"),gqo=o("XLNetForMultipleChoice"),hqo=o(" (XLNet model)"),pqo=l(),pb=a("li"),Ege=a("strong"),_qo=o("yoso"),uqo=o(" \u2014 "),BO=a("a"),bqo=o("YosoForMultipleChoice"),vqo=o(" (YOSO model)"),Fqo=l(),_b=a("p"),Tqo=o("The model is set in evaluation mode by default using "),Cge=a("code"),Mqo=o("model.eval()"),Eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),Cqo=o("model.train()"),wqo=l(),F(ub.$$.fragment),Rqe=l(),Qi=a("h2"),bb=a("a"),Age=a("span"),F(Iy.$$.fragment),Aqo=l(),yge=a("span"),yqo=o("AutoModelForNextSentencePrediction"),Pqe=l(),Bo=a("div"),F(Ny.$$.fragment),Lqo=l(),Hi=a("p"),xqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=a("a"),$qo=o("from_pretrained()"),kqo=o(" class method or the "),NO=a("a"),Sqo=o("from_config()"),Rqo=o(` class
method.`),Pqo=l(),qy=a("p"),Bqo=o("This class cannot be instantiated directly using "),Lge=a("code"),Iqo=o("__init__()"),Nqo=o(" (throws an error)."),qqo=l(),ft=a("div"),F(jy.$$.fragment),jqo=l(),xge=a("p"),Dqo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Gqo=l(),Ui=a("p"),Oqo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),Vqo=o("not"),Xqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=a("a"),zqo=o("from_pretrained()"),Wqo=o(" to load the model weights."),Qqo=l(),F(vb.$$.fragment),Hqo=l(),to=a("div"),F(Dy.$$.fragment),Uqo=l(),kge=a("p"),Jqo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Yqo=l(),Ia=a("p"),Kqo=o("The model class to instantiate is selected based on the "),Sge=a("code"),Zqo=o("model_type"),ejo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),ojo=o("pretrained_model_name_or_path"),rjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),tjo=o("pretrained_model_name_or_path"),ajo=o(":"),njo=l(),Yr=a("ul"),Fb=a("li"),Bge=a("strong"),sjo=o("bert"),ljo=o(" \u2014 "),jO=a("a"),ijo=o("BertForNextSentencePrediction"),djo=o(" (BERT model)"),cjo=l(),Tb=a("li"),Ige=a("strong"),fjo=o("fnet"),mjo=o(" \u2014 "),DO=a("a"),gjo=o("FNetForNextSentencePrediction"),hjo=o(" (FNet model)"),pjo=l(),Mb=a("li"),Nge=a("strong"),_jo=o("megatron-bert"),ujo=o(" \u2014 "),GO=a("a"),bjo=o("MegatronBertForNextSentencePrediction"),vjo=o(" (MegatronBert model)"),Fjo=l(),Eb=a("li"),qge=a("strong"),Tjo=o("mobilebert"),Mjo=o(" \u2014 "),OO=a("a"),Ejo=o("MobileBertForNextSentencePrediction"),Cjo=o(" (MobileBERT model)"),wjo=l(),Cb=a("li"),jge=a("strong"),Ajo=o("qdqbert"),yjo=o(" \u2014 "),VO=a("a"),Ljo=o("QDQBertForNextSentencePrediction"),xjo=o(" (QDQBert model)"),$jo=l(),wb=a("p"),kjo=o("The model is set in evaluation mode by default using "),Dge=a("code"),Sjo=o("model.eval()"),Rjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=a("code"),Pjo=o("model.train()"),Bjo=l(),F(Ab.$$.fragment),Bqe=l(),Ji=a("h2"),yb=a("a"),Oge=a("span"),F(Gy.$$.fragment),Ijo=l(),Vge=a("span"),Njo=o("AutoModelForTokenClassification"),Iqe=l(),Io=a("div"),F(Oy.$$.fragment),qjo=l(),Yi=a("p"),jjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=a("a"),Djo=o("from_pretrained()"),Gjo=o(" class method or the "),zO=a("a"),Ojo=o("from_config()"),Vjo=o(` class
method.`),Xjo=l(),Vy=a("p"),zjo=o("This class cannot be instantiated directly using "),Xge=a("code"),Wjo=o("__init__()"),Qjo=o(" (throws an error)."),Hjo=l(),mt=a("div"),F(Xy.$$.fragment),Ujo=l(),zge=a("p"),Jjo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Yjo=l(),Ki=a("p"),Kjo=o(`Note:
Loading a model from its configuration file does `),Wge=a("strong"),Zjo=o("not"),eDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),oDo=o("from_pretrained()"),rDo=o(" to load the model weights."),tDo=l(),F(Lb.$$.fragment),aDo=l(),ao=a("div"),F(zy.$$.fragment),nDo=l(),Qge=a("p"),sDo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),lDo=l(),Na=a("p"),iDo=o("The model class to instantiate is selected based on the "),Hge=a("code"),dDo=o("model_type"),cDo=o(` property of the config object (either
passed as an argument or loaded from `),Uge=a("code"),fDo=o("pretrained_model_name_or_path"),mDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=a("code"),gDo=o("pretrained_model_name_or_path"),hDo=o(":"),pDo=l(),H=a("ul"),xb=a("li"),Yge=a("strong"),_Do=o("albert"),uDo=o(" \u2014 "),QO=a("a"),bDo=o("AlbertForTokenClassification"),vDo=o(" (ALBERT model)"),FDo=l(),$b=a("li"),Kge=a("strong"),TDo=o("bert"),MDo=o(" \u2014 "),HO=a("a"),EDo=o("BertForTokenClassification"),CDo=o(" (BERT model)"),wDo=l(),kb=a("li"),Zge=a("strong"),ADo=o("big_bird"),yDo=o(" \u2014 "),UO=a("a"),LDo=o("BigBirdForTokenClassification"),xDo=o(" (BigBird model)"),$Do=l(),Sb=a("li"),ehe=a("strong"),kDo=o("camembert"),SDo=o(" \u2014 "),JO=a("a"),RDo=o("CamembertForTokenClassification"),PDo=o(" (CamemBERT model)"),BDo=l(),Rb=a("li"),ohe=a("strong"),IDo=o("canine"),NDo=o(" \u2014 "),YO=a("a"),qDo=o("CanineForTokenClassification"),jDo=o(" (Canine model)"),DDo=l(),Pb=a("li"),rhe=a("strong"),GDo=o("convbert"),ODo=o(" \u2014 "),KO=a("a"),VDo=o("ConvBertForTokenClassification"),XDo=o(" (ConvBERT model)"),zDo=l(),Bb=a("li"),the=a("strong"),WDo=o("data2vec-text"),QDo=o(" \u2014 "),ZO=a("a"),HDo=o("Data2VecTextForTokenClassification"),UDo=o(" (Data2VecText model)"),JDo=l(),Ib=a("li"),ahe=a("strong"),YDo=o("deberta"),KDo=o(" \u2014 "),eV=a("a"),ZDo=o("DebertaForTokenClassification"),eGo=o(" (DeBERTa model)"),oGo=l(),Nb=a("li"),nhe=a("strong"),rGo=o("deberta-v2"),tGo=o(" \u2014 "),oV=a("a"),aGo=o("DebertaV2ForTokenClassification"),nGo=o(" (DeBERTa-v2 model)"),sGo=l(),qb=a("li"),she=a("strong"),lGo=o("distilbert"),iGo=o(" \u2014 "),rV=a("a"),dGo=o("DistilBertForTokenClassification"),cGo=o(" (DistilBERT model)"),fGo=l(),jb=a("li"),lhe=a("strong"),mGo=o("electra"),gGo=o(" \u2014 "),tV=a("a"),hGo=o("ElectraForTokenClassification"),pGo=o(" (ELECTRA model)"),_Go=l(),Db=a("li"),ihe=a("strong"),uGo=o("flaubert"),bGo=o(" \u2014 "),aV=a("a"),vGo=o("FlaubertForTokenClassification"),FGo=o(" (FlauBERT model)"),TGo=l(),Gb=a("li"),dhe=a("strong"),MGo=o("fnet"),EGo=o(" \u2014 "),nV=a("a"),CGo=o("FNetForTokenClassification"),wGo=o(" (FNet model)"),AGo=l(),Ob=a("li"),che=a("strong"),yGo=o("funnel"),LGo=o(" \u2014 "),sV=a("a"),xGo=o("FunnelForTokenClassification"),$Go=o(" (Funnel Transformer model)"),kGo=l(),Vb=a("li"),fhe=a("strong"),SGo=o("gpt2"),RGo=o(" \u2014 "),lV=a("a"),PGo=o("GPT2ForTokenClassification"),BGo=o(" (OpenAI GPT-2 model)"),IGo=l(),Xb=a("li"),mhe=a("strong"),NGo=o("ibert"),qGo=o(" \u2014 "),iV=a("a"),jGo=o("IBertForTokenClassification"),DGo=o(" (I-BERT model)"),GGo=l(),zb=a("li"),ghe=a("strong"),OGo=o("layoutlm"),VGo=o(" \u2014 "),dV=a("a"),XGo=o("LayoutLMForTokenClassification"),zGo=o(" (LayoutLM model)"),WGo=l(),Wb=a("li"),hhe=a("strong"),QGo=o("layoutlmv2"),HGo=o(" \u2014 "),cV=a("a"),UGo=o("LayoutLMv2ForTokenClassification"),JGo=o(" (LayoutLMv2 model)"),YGo=l(),Qb=a("li"),phe=a("strong"),KGo=o("layoutlmv3"),ZGo=o(" \u2014 "),fV=a("a"),eOo=o("LayoutLMv3ForTokenClassification"),oOo=o(" (LayoutLMv3 model)"),rOo=l(),Hb=a("li"),_he=a("strong"),tOo=o("longformer"),aOo=o(" \u2014 "),mV=a("a"),nOo=o("LongformerForTokenClassification"),sOo=o(" (Longformer model)"),lOo=l(),Ub=a("li"),uhe=a("strong"),iOo=o("megatron-bert"),dOo=o(" \u2014 "),gV=a("a"),cOo=o("MegatronBertForTokenClassification"),fOo=o(" (MegatronBert model)"),mOo=l(),Jb=a("li"),bhe=a("strong"),gOo=o("mobilebert"),hOo=o(" \u2014 "),hV=a("a"),pOo=o("MobileBertForTokenClassification"),_Oo=o(" (MobileBERT model)"),uOo=l(),Yb=a("li"),vhe=a("strong"),bOo=o("mpnet"),vOo=o(" \u2014 "),pV=a("a"),FOo=o("MPNetForTokenClassification"),TOo=o(" (MPNet model)"),MOo=l(),Kb=a("li"),Fhe=a("strong"),EOo=o("nystromformer"),COo=o(" \u2014 "),_V=a("a"),wOo=o("NystromformerForTokenClassification"),AOo=o(" (Nystromformer model)"),yOo=l(),Zb=a("li"),The=a("strong"),LOo=o("qdqbert"),xOo=o(" \u2014 "),uV=a("a"),$Oo=o("QDQBertForTokenClassification"),kOo=o(" (QDQBert model)"),SOo=l(),e4=a("li"),Mhe=a("strong"),ROo=o("rembert"),POo=o(" \u2014 "),bV=a("a"),BOo=o("RemBertForTokenClassification"),IOo=o(" (RemBERT model)"),NOo=l(),o4=a("li"),Ehe=a("strong"),qOo=o("roberta"),jOo=o(" \u2014 "),vV=a("a"),DOo=o("RobertaForTokenClassification"),GOo=o(" (RoBERTa model)"),OOo=l(),r4=a("li"),Che=a("strong"),VOo=o("roformer"),XOo=o(" \u2014 "),FV=a("a"),zOo=o("RoFormerForTokenClassification"),WOo=o(" (RoFormer model)"),QOo=l(),t4=a("li"),whe=a("strong"),HOo=o("squeezebert"),UOo=o(" \u2014 "),TV=a("a"),JOo=o("SqueezeBertForTokenClassification"),YOo=o(" (SqueezeBERT model)"),KOo=l(),a4=a("li"),Ahe=a("strong"),ZOo=o("xlm"),eVo=o(" \u2014 "),MV=a("a"),oVo=o("XLMForTokenClassification"),rVo=o(" (XLM model)"),tVo=l(),n4=a("li"),yhe=a("strong"),aVo=o("xlm-roberta"),nVo=o(" \u2014 "),EV=a("a"),sVo=o("XLMRobertaForTokenClassification"),lVo=o(" (XLM-RoBERTa model)"),iVo=l(),s4=a("li"),Lhe=a("strong"),dVo=o("xlm-roberta-xl"),cVo=o(" \u2014 "),CV=a("a"),fVo=o("XLMRobertaXLForTokenClassification"),mVo=o(" (XLM-RoBERTa-XL model)"),gVo=l(),l4=a("li"),xhe=a("strong"),hVo=o("xlnet"),pVo=o(" \u2014 "),wV=a("a"),_Vo=o("XLNetForTokenClassification"),uVo=o(" (XLNet model)"),bVo=l(),i4=a("li"),$he=a("strong"),vVo=o("yoso"),FVo=o(" \u2014 "),AV=a("a"),TVo=o("YosoForTokenClassification"),MVo=o(" (YOSO model)"),EVo=l(),d4=a("p"),CVo=o("The model is set in evaluation mode by default using "),khe=a("code"),wVo=o("model.eval()"),AVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=a("code"),yVo=o("model.train()"),LVo=l(),F(c4.$$.fragment),Nqe=l(),Zi=a("h2"),f4=a("a"),Rhe=a("span"),F(Wy.$$.fragment),xVo=l(),Phe=a("span"),$Vo=o("AutoModelForQuestionAnswering"),qqe=l(),No=a("div"),F(Qy.$$.fragment),kVo=l(),ed=a("p"),SVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=a("a"),RVo=o("from_pretrained()"),PVo=o(" class method or the "),LV=a("a"),BVo=o("from_config()"),IVo=o(` class
method.`),NVo=l(),Hy=a("p"),qVo=o("This class cannot be instantiated directly using "),Bhe=a("code"),jVo=o("__init__()"),DVo=o(" (throws an error)."),GVo=l(),gt=a("div"),F(Uy.$$.fragment),OVo=l(),Ihe=a("p"),VVo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XVo=l(),od=a("p"),zVo=o(`Note:
Loading a model from its configuration file does `),Nhe=a("strong"),WVo=o("not"),QVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=a("a"),HVo=o("from_pretrained()"),UVo=o(" to load the model weights."),JVo=l(),F(m4.$$.fragment),YVo=l(),no=a("div"),F(Jy.$$.fragment),KVo=l(),qhe=a("p"),ZVo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),eXo=l(),qa=a("p"),oXo=o("The model class to instantiate is selected based on the "),jhe=a("code"),rXo=o("model_type"),tXo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),aXo=o("pretrained_model_name_or_path"),nXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),sXo=o("pretrained_model_name_or_path"),lXo=o(":"),iXo=l(),V=a("ul"),g4=a("li"),Ohe=a("strong"),dXo=o("albert"),cXo=o(" \u2014 "),$V=a("a"),fXo=o("AlbertForQuestionAnswering"),mXo=o(" (ALBERT model)"),gXo=l(),h4=a("li"),Vhe=a("strong"),hXo=o("bart"),pXo=o(" \u2014 "),kV=a("a"),_Xo=o("BartForQuestionAnswering"),uXo=o(" (BART model)"),bXo=l(),p4=a("li"),Xhe=a("strong"),vXo=o("bert"),FXo=o(" \u2014 "),SV=a("a"),TXo=o("BertForQuestionAnswering"),MXo=o(" (BERT model)"),EXo=l(),_4=a("li"),zhe=a("strong"),CXo=o("big_bird"),wXo=o(" \u2014 "),RV=a("a"),AXo=o("BigBirdForQuestionAnswering"),yXo=o(" (BigBird model)"),LXo=l(),u4=a("li"),Whe=a("strong"),xXo=o("bigbird_pegasus"),$Xo=o(" \u2014 "),PV=a("a"),kXo=o("BigBirdPegasusForQuestionAnswering"),SXo=o(" (BigBirdPegasus model)"),RXo=l(),b4=a("li"),Qhe=a("strong"),PXo=o("camembert"),BXo=o(" \u2014 "),BV=a("a"),IXo=o("CamembertForQuestionAnswering"),NXo=o(" (CamemBERT model)"),qXo=l(),v4=a("li"),Hhe=a("strong"),jXo=o("canine"),DXo=o(" \u2014 "),IV=a("a"),GXo=o("CanineForQuestionAnswering"),OXo=o(" (Canine model)"),VXo=l(),F4=a("li"),Uhe=a("strong"),XXo=o("convbert"),zXo=o(" \u2014 "),NV=a("a"),WXo=o("ConvBertForQuestionAnswering"),QXo=o(" (ConvBERT model)"),HXo=l(),T4=a("li"),Jhe=a("strong"),UXo=o("data2vec-text"),JXo=o(" \u2014 "),qV=a("a"),YXo=o("Data2VecTextForQuestionAnswering"),KXo=o(" (Data2VecText model)"),ZXo=l(),M4=a("li"),Yhe=a("strong"),ezo=o("deberta"),ozo=o(" \u2014 "),jV=a("a"),rzo=o("DebertaForQuestionAnswering"),tzo=o(" (DeBERTa model)"),azo=l(),E4=a("li"),Khe=a("strong"),nzo=o("deberta-v2"),szo=o(" \u2014 "),DV=a("a"),lzo=o("DebertaV2ForQuestionAnswering"),izo=o(" (DeBERTa-v2 model)"),dzo=l(),C4=a("li"),Zhe=a("strong"),czo=o("distilbert"),fzo=o(" \u2014 "),GV=a("a"),mzo=o("DistilBertForQuestionAnswering"),gzo=o(" (DistilBERT model)"),hzo=l(),w4=a("li"),epe=a("strong"),pzo=o("electra"),_zo=o(" \u2014 "),OV=a("a"),uzo=o("ElectraForQuestionAnswering"),bzo=o(" (ELECTRA model)"),vzo=l(),A4=a("li"),ope=a("strong"),Fzo=o("flaubert"),Tzo=o(" \u2014 "),VV=a("a"),Mzo=o("FlaubertForQuestionAnsweringSimple"),Ezo=o(" (FlauBERT model)"),Czo=l(),y4=a("li"),rpe=a("strong"),wzo=o("fnet"),Azo=o(" \u2014 "),XV=a("a"),yzo=o("FNetForQuestionAnswering"),Lzo=o(" (FNet model)"),xzo=l(),L4=a("li"),tpe=a("strong"),$zo=o("funnel"),kzo=o(" \u2014 "),zV=a("a"),Szo=o("FunnelForQuestionAnswering"),Rzo=o(" (Funnel Transformer model)"),Pzo=l(),x4=a("li"),ape=a("strong"),Bzo=o("gptj"),Izo=o(" \u2014 "),WV=a("a"),Nzo=o("GPTJForQuestionAnswering"),qzo=o(" (GPT-J model)"),jzo=l(),$4=a("li"),npe=a("strong"),Dzo=o("ibert"),Gzo=o(" \u2014 "),QV=a("a"),Ozo=o("IBertForQuestionAnswering"),Vzo=o(" (I-BERT model)"),Xzo=l(),k4=a("li"),spe=a("strong"),zzo=o("layoutlmv2"),Wzo=o(" \u2014 "),HV=a("a"),Qzo=o("LayoutLMv2ForQuestionAnswering"),Hzo=o(" (LayoutLMv2 model)"),Uzo=l(),S4=a("li"),lpe=a("strong"),Jzo=o("layoutlmv3"),Yzo=o(" \u2014 "),UV=a("a"),Kzo=o("LayoutLMv3ForQuestionAnswering"),Zzo=o(" (LayoutLMv3 model)"),eWo=l(),R4=a("li"),ipe=a("strong"),oWo=o("led"),rWo=o(" \u2014 "),JV=a("a"),tWo=o("LEDForQuestionAnswering"),aWo=o(" (LED model)"),nWo=l(),P4=a("li"),dpe=a("strong"),sWo=o("longformer"),lWo=o(" \u2014 "),YV=a("a"),iWo=o("LongformerForQuestionAnswering"),dWo=o(" (Longformer model)"),cWo=l(),B4=a("li"),cpe=a("strong"),fWo=o("lxmert"),mWo=o(" \u2014 "),KV=a("a"),gWo=o("LxmertForQuestionAnswering"),hWo=o(" (LXMERT model)"),pWo=l(),I4=a("li"),fpe=a("strong"),_Wo=o("mbart"),uWo=o(" \u2014 "),ZV=a("a"),bWo=o("MBartForQuestionAnswering"),vWo=o(" (mBART model)"),FWo=l(),N4=a("li"),mpe=a("strong"),TWo=o("megatron-bert"),MWo=o(" \u2014 "),eX=a("a"),EWo=o("MegatronBertForQuestionAnswering"),CWo=o(" (MegatronBert model)"),wWo=l(),q4=a("li"),gpe=a("strong"),AWo=o("mobilebert"),yWo=o(" \u2014 "),oX=a("a"),LWo=o("MobileBertForQuestionAnswering"),xWo=o(" (MobileBERT model)"),$Wo=l(),j4=a("li"),hpe=a("strong"),kWo=o("mpnet"),SWo=o(" \u2014 "),rX=a("a"),RWo=o("MPNetForQuestionAnswering"),PWo=o(" (MPNet model)"),BWo=l(),D4=a("li"),ppe=a("strong"),IWo=o("nystromformer"),NWo=o(" \u2014 "),tX=a("a"),qWo=o("NystromformerForQuestionAnswering"),jWo=o(" (Nystromformer model)"),DWo=l(),G4=a("li"),_pe=a("strong"),GWo=o("qdqbert"),OWo=o(" \u2014 "),aX=a("a"),VWo=o("QDQBertForQuestionAnswering"),XWo=o(" (QDQBert model)"),zWo=l(),O4=a("li"),upe=a("strong"),WWo=o("reformer"),QWo=o(" \u2014 "),nX=a("a"),HWo=o("ReformerForQuestionAnswering"),UWo=o(" (Reformer model)"),JWo=l(),V4=a("li"),bpe=a("strong"),YWo=o("rembert"),KWo=o(" \u2014 "),sX=a("a"),ZWo=o("RemBertForQuestionAnswering"),eQo=o(" (RemBERT model)"),oQo=l(),X4=a("li"),vpe=a("strong"),rQo=o("roberta"),tQo=o(" \u2014 "),lX=a("a"),aQo=o("RobertaForQuestionAnswering"),nQo=o(" (RoBERTa model)"),sQo=l(),z4=a("li"),Fpe=a("strong"),lQo=o("roformer"),iQo=o(" \u2014 "),iX=a("a"),dQo=o("RoFormerForQuestionAnswering"),cQo=o(" (RoFormer model)"),fQo=l(),W4=a("li"),Tpe=a("strong"),mQo=o("splinter"),gQo=o(" \u2014 "),dX=a("a"),hQo=o("SplinterForQuestionAnswering"),pQo=o(" (Splinter model)"),_Qo=l(),Q4=a("li"),Mpe=a("strong"),uQo=o("squeezebert"),bQo=o(" \u2014 "),cX=a("a"),vQo=o("SqueezeBertForQuestionAnswering"),FQo=o(" (SqueezeBERT model)"),TQo=l(),H4=a("li"),Epe=a("strong"),MQo=o("xlm"),EQo=o(" \u2014 "),fX=a("a"),CQo=o("XLMForQuestionAnsweringSimple"),wQo=o(" (XLM model)"),AQo=l(),U4=a("li"),Cpe=a("strong"),yQo=o("xlm-roberta"),LQo=o(" \u2014 "),mX=a("a"),xQo=o("XLMRobertaForQuestionAnswering"),$Qo=o(" (XLM-RoBERTa model)"),kQo=l(),J4=a("li"),wpe=a("strong"),SQo=o("xlm-roberta-xl"),RQo=o(" \u2014 "),gX=a("a"),PQo=o("XLMRobertaXLForQuestionAnswering"),BQo=o(" (XLM-RoBERTa-XL model)"),IQo=l(),Y4=a("li"),Ape=a("strong"),NQo=o("xlnet"),qQo=o(" \u2014 "),hX=a("a"),jQo=o("XLNetForQuestionAnsweringSimple"),DQo=o(" (XLNet model)"),GQo=l(),K4=a("li"),ype=a("strong"),OQo=o("yoso"),VQo=o(" \u2014 "),pX=a("a"),XQo=o("YosoForQuestionAnswering"),zQo=o(" (YOSO model)"),WQo=l(),Z4=a("p"),QQo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),HQo=o("model.eval()"),UQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),JQo=o("model.train()"),YQo=l(),F(ev.$$.fragment),jqe=l(),rd=a("h2"),ov=a("a"),$pe=a("span"),F(Yy.$$.fragment),KQo=l(),kpe=a("span"),ZQo=o("AutoModelForTableQuestionAnswering"),Dqe=l(),qo=a("div"),F(Ky.$$.fragment),eHo=l(),td=a("p"),oHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_X=a("a"),rHo=o("from_pretrained()"),tHo=o(" class method or the "),uX=a("a"),aHo=o("from_config()"),nHo=o(` class
method.`),sHo=l(),Zy=a("p"),lHo=o("This class cannot be instantiated directly using "),Spe=a("code"),iHo=o("__init__()"),dHo=o(" (throws an error)."),cHo=l(),ht=a("div"),F(eL.$$.fragment),fHo=l(),Rpe=a("p"),mHo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),gHo=l(),ad=a("p"),hHo=o(`Note:
Loading a model from its configuration file does `),Ppe=a("strong"),pHo=o("not"),_Ho=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=a("a"),uHo=o("from_pretrained()"),bHo=o(" to load the model weights."),vHo=l(),F(rv.$$.fragment),FHo=l(),so=a("div"),F(oL.$$.fragment),THo=l(),Bpe=a("p"),MHo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),EHo=l(),ja=a("p"),CHo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),wHo=o("model_type"),AHo=o(` property of the config object (either
passed as an argument or loaded from `),Npe=a("code"),yHo=o("pretrained_model_name_or_path"),LHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=a("code"),xHo=o("pretrained_model_name_or_path"),$Ho=o(":"),kHo=l(),jpe=a("ul"),tv=a("li"),Dpe=a("strong"),SHo=o("tapas"),RHo=o(" \u2014 "),vX=a("a"),PHo=o("TapasForQuestionAnswering"),BHo=o(" (TAPAS model)"),IHo=l(),av=a("p"),NHo=o("The model is set in evaluation mode by default using "),Gpe=a("code"),qHo=o("model.eval()"),jHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=a("code"),DHo=o("model.train()"),GHo=l(),F(nv.$$.fragment),Gqe=l(),nd=a("h2"),sv=a("a"),Vpe=a("span"),F(rL.$$.fragment),OHo=l(),Xpe=a("span"),VHo=o("AutoModelForImageClassification"),Oqe=l(),jo=a("div"),F(tL.$$.fragment),XHo=l(),sd=a("p"),zHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=a("a"),WHo=o("from_pretrained()"),QHo=o(" class method or the "),TX=a("a"),HHo=o("from_config()"),UHo=o(` class
method.`),JHo=l(),aL=a("p"),YHo=o("This class cannot be instantiated directly using "),zpe=a("code"),KHo=o("__init__()"),ZHo=o(" (throws an error)."),eUo=l(),pt=a("div"),F(nL.$$.fragment),oUo=l(),Wpe=a("p"),rUo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),tUo=l(),ld=a("p"),aUo=o(`Note:
Loading a model from its configuration file does `),Qpe=a("strong"),nUo=o("not"),sUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=a("a"),lUo=o("from_pretrained()"),iUo=o(" to load the model weights."),dUo=l(),F(lv.$$.fragment),cUo=l(),lo=a("div"),F(sL.$$.fragment),fUo=l(),Hpe=a("p"),mUo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),gUo=l(),Da=a("p"),hUo=o("The model class to instantiate is selected based on the "),Upe=a("code"),pUo=o("model_type"),_Uo=o(` property of the config object (either
passed as an argument or loaded from `),Jpe=a("code"),uUo=o("pretrained_model_name_or_path"),bUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=a("code"),vUo=o("pretrained_model_name_or_path"),FUo=o(":"),TUo=l(),Fe=a("ul"),iv=a("li"),Kpe=a("strong"),MUo=o("beit"),EUo=o(" \u2014 "),EX=a("a"),CUo=o("BeitForImageClassification"),wUo=o(" (BEiT model)"),AUo=l(),dv=a("li"),Zpe=a("strong"),yUo=o("convnext"),LUo=o(" \u2014 "),CX=a("a"),xUo=o("ConvNextForImageClassification"),$Uo=o(" (ConvNext model)"),kUo=l(),cv=a("li"),e_e=a("strong"),SUo=o("cvt"),RUo=o(" \u2014 "),wX=a("a"),PUo=o("CvtForImageClassification"),BUo=o(" (CvT model)"),IUo=l(),fv=a("li"),o_e=a("strong"),NUo=o("data2vec-vision"),qUo=o(" \u2014 "),AX=a("a"),jUo=o("Data2VecVisionForImageClassification"),DUo=o(" (Data2VecVision model)"),GUo=l(),Bs=a("li"),r_e=a("strong"),OUo=o("deit"),VUo=o(" \u2014 "),yX=a("a"),XUo=o("DeiTForImageClassification"),zUo=o(" or "),LX=a("a"),WUo=o("DeiTForImageClassificationWithTeacher"),QUo=o(" (DeiT model)"),HUo=l(),mv=a("li"),t_e=a("strong"),UUo=o("imagegpt"),JUo=o(" \u2014 "),xX=a("a"),YUo=o("ImageGPTForImageClassification"),KUo=o(" (ImageGPT model)"),ZUo=l(),_t=a("li"),a_e=a("strong"),eJo=o("perceiver"),oJo=o(" \u2014 "),$X=a("a"),rJo=o("PerceiverForImageClassificationLearned"),tJo=o(" or "),kX=a("a"),aJo=o("PerceiverForImageClassificationFourier"),nJo=o(" or "),SX=a("a"),sJo=o("PerceiverForImageClassificationConvProcessing"),lJo=o(" (Perceiver model)"),iJo=l(),gv=a("li"),n_e=a("strong"),dJo=o("poolformer"),cJo=o(" \u2014 "),RX=a("a"),fJo=o("PoolFormerForImageClassification"),mJo=o(" (PoolFormer model)"),gJo=l(),hv=a("li"),s_e=a("strong"),hJo=o("regnet"),pJo=o(" \u2014 "),PX=a("a"),_Jo=o("RegNetForImageClassification"),uJo=o(" (RegNet model)"),bJo=l(),pv=a("li"),l_e=a("strong"),vJo=o("resnet"),FJo=o(" \u2014 "),BX=a("a"),TJo=o("ResNetForImageClassification"),MJo=o(" (ResNet model)"),EJo=l(),_v=a("li"),i_e=a("strong"),CJo=o("segformer"),wJo=o(" \u2014 "),IX=a("a"),AJo=o("SegformerForImageClassification"),yJo=o(" (SegFormer model)"),LJo=l(),uv=a("li"),d_e=a("strong"),xJo=o("swin"),$Jo=o(" \u2014 "),NX=a("a"),kJo=o("SwinForImageClassification"),SJo=o(" (Swin model)"),RJo=l(),bv=a("li"),c_e=a("strong"),PJo=o("van"),BJo=o(" \u2014 "),qX=a("a"),IJo=o("VanForImageClassification"),NJo=o(" (VAN model)"),qJo=l(),vv=a("li"),f_e=a("strong"),jJo=o("vit"),DJo=o(" \u2014 "),jX=a("a"),GJo=o("ViTForImageClassification"),OJo=o(" (ViT model)"),VJo=l(),Fv=a("p"),XJo=o("The model is set in evaluation mode by default using "),m_e=a("code"),zJo=o("model.eval()"),WJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=a("code"),QJo=o("model.train()"),HJo=l(),F(Tv.$$.fragment),Vqe=l(),id=a("h2"),Mv=a("a"),h_e=a("span"),F(lL.$$.fragment),UJo=l(),p_e=a("span"),JJo=o("AutoModelForVision2Seq"),Xqe=l(),Do=a("div"),F(iL.$$.fragment),YJo=l(),dd=a("p"),KJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=a("a"),ZJo=o("from_pretrained()"),eYo=o(" class method or the "),GX=a("a"),oYo=o("from_config()"),rYo=o(` class
method.`),tYo=l(),dL=a("p"),aYo=o("This class cannot be instantiated directly using "),__e=a("code"),nYo=o("__init__()"),sYo=o(" (throws an error)."),lYo=l(),ut=a("div"),F(cL.$$.fragment),iYo=l(),u_e=a("p"),dYo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cYo=l(),cd=a("p"),fYo=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),mYo=o("not"),gYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),hYo=o("from_pretrained()"),pYo=o(" to load the model weights."),_Yo=l(),F(Ev.$$.fragment),uYo=l(),io=a("div"),F(fL.$$.fragment),bYo=l(),v_e=a("p"),vYo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),FYo=l(),Ga=a("p"),TYo=o("The model class to instantiate is selected based on the "),F_e=a("code"),MYo=o("model_type"),EYo=o(` property of the config object (either
passed as an argument or loaded from `),T_e=a("code"),CYo=o("pretrained_model_name_or_path"),wYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=a("code"),AYo=o("pretrained_model_name_or_path"),yYo=o(":"),LYo=l(),E_e=a("ul"),Cv=a("li"),C_e=a("strong"),xYo=o("vision-encoder-decoder"),$Yo=o(" \u2014 "),VX=a("a"),kYo=o("VisionEncoderDecoderModel"),SYo=o(" (Vision Encoder decoder model)"),RYo=l(),wv=a("p"),PYo=o("The model is set in evaluation mode by default using "),w_e=a("code"),BYo=o("model.eval()"),IYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=a("code"),NYo=o("model.train()"),qYo=l(),F(Av.$$.fragment),zqe=l(),fd=a("h2"),yv=a("a"),y_e=a("span"),F(mL.$$.fragment),jYo=l(),L_e=a("span"),DYo=o("AutoModelForAudioClassification"),Wqe=l(),Go=a("div"),F(gL.$$.fragment),GYo=l(),md=a("p"),OYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=a("a"),VYo=o("from_pretrained()"),XYo=o(" class method or the "),zX=a("a"),zYo=o("from_config()"),WYo=o(` class
method.`),QYo=l(),hL=a("p"),HYo=o("This class cannot be instantiated directly using "),x_e=a("code"),UYo=o("__init__()"),JYo=o(" (throws an error)."),YYo=l(),bt=a("div"),F(pL.$$.fragment),KYo=l(),$_e=a("p"),ZYo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),eKo=l(),gd=a("p"),oKo=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),rKo=o("not"),tKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=a("a"),aKo=o("from_pretrained()"),nKo=o(" to load the model weights."),sKo=l(),F(Lv.$$.fragment),lKo=l(),co=a("div"),F(_L.$$.fragment),iKo=l(),S_e=a("p"),dKo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cKo=l(),Oa=a("p"),fKo=o("The model class to instantiate is selected based on the "),R_e=a("code"),mKo=o("model_type"),gKo=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),hKo=o("pretrained_model_name_or_path"),pKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=a("code"),_Ko=o("pretrained_model_name_or_path"),uKo=o(":"),bKo=l(),ke=a("ul"),xv=a("li"),I_e=a("strong"),vKo=o("data2vec-audio"),FKo=o(" \u2014 "),QX=a("a"),TKo=o("Data2VecAudioForSequenceClassification"),MKo=o(" (Data2VecAudio model)"),EKo=l(),$v=a("li"),N_e=a("strong"),CKo=o("hubert"),wKo=o(" \u2014 "),HX=a("a"),AKo=o("HubertForSequenceClassification"),yKo=o(" (Hubert model)"),LKo=l(),kv=a("li"),q_e=a("strong"),xKo=o("sew"),$Ko=o(" \u2014 "),UX=a("a"),kKo=o("SEWForSequenceClassification"),SKo=o(" (SEW model)"),RKo=l(),Sv=a("li"),j_e=a("strong"),PKo=o("sew-d"),BKo=o(" \u2014 "),JX=a("a"),IKo=o("SEWDForSequenceClassification"),NKo=o(" (SEW-D model)"),qKo=l(),Rv=a("li"),D_e=a("strong"),jKo=o("unispeech"),DKo=o(" \u2014 "),YX=a("a"),GKo=o("UniSpeechForSequenceClassification"),OKo=o(" (UniSpeech model)"),VKo=l(),Pv=a("li"),G_e=a("strong"),XKo=o("unispeech-sat"),zKo=o(" \u2014 "),KX=a("a"),WKo=o("UniSpeechSatForSequenceClassification"),QKo=o(" (UniSpeechSat model)"),HKo=l(),Bv=a("li"),O_e=a("strong"),UKo=o("wav2vec2"),JKo=o(" \u2014 "),ZX=a("a"),YKo=o("Wav2Vec2ForSequenceClassification"),KKo=o(" (Wav2Vec2 model)"),ZKo=l(),Iv=a("li"),V_e=a("strong"),eZo=o("wav2vec2-conformer"),oZo=o(" \u2014 "),ez=a("a"),rZo=o("Wav2Vec2ConformerForSequenceClassification"),tZo=o(" (Wav2Vec2-Conformer model)"),aZo=l(),Nv=a("li"),X_e=a("strong"),nZo=o("wavlm"),sZo=o(" \u2014 "),oz=a("a"),lZo=o("WavLMForSequenceClassification"),iZo=o(" (WavLM model)"),dZo=l(),qv=a("p"),cZo=o("The model is set in evaluation mode by default using "),z_e=a("code"),fZo=o("model.eval()"),mZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),gZo=o("model.train()"),hZo=l(),F(jv.$$.fragment),Qqe=l(),hd=a("h2"),Dv=a("a"),Q_e=a("span"),F(uL.$$.fragment),pZo=l(),H_e=a("span"),_Zo=o("AutoModelForAudioFrameClassification"),Hqe=l(),Oo=a("div"),F(bL.$$.fragment),uZo=l(),pd=a("p"),bZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=a("a"),vZo=o("from_pretrained()"),FZo=o(" class method or the "),tz=a("a"),TZo=o("from_config()"),MZo=o(` class
method.`),EZo=l(),vL=a("p"),CZo=o("This class cannot be instantiated directly using "),U_e=a("code"),wZo=o("__init__()"),AZo=o(" (throws an error)."),yZo=l(),vt=a("div"),F(FL.$$.fragment),LZo=l(),J_e=a("p"),xZo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),$Zo=l(),_d=a("p"),kZo=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),SZo=o("not"),RZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),az=a("a"),PZo=o("from_pretrained()"),BZo=o(" to load the model weights."),IZo=l(),F(Gv.$$.fragment),NZo=l(),fo=a("div"),F(TL.$$.fragment),qZo=l(),K_e=a("p"),jZo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),DZo=l(),Va=a("p"),GZo=o("The model class to instantiate is selected based on the "),Z_e=a("code"),OZo=o("model_type"),VZo=o(` property of the config object (either
passed as an argument or loaded from `),eue=a("code"),XZo=o("pretrained_model_name_or_path"),zZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=a("code"),WZo=o("pretrained_model_name_or_path"),QZo=o(":"),HZo=l(),Kr=a("ul"),Ov=a("li"),rue=a("strong"),UZo=o("data2vec-audio"),JZo=o(" \u2014 "),nz=a("a"),YZo=o("Data2VecAudioForAudioFrameClassification"),KZo=o(" (Data2VecAudio model)"),ZZo=l(),Vv=a("li"),tue=a("strong"),eer=o("unispeech-sat"),oer=o(" \u2014 "),sz=a("a"),rer=o("UniSpeechSatForAudioFrameClassification"),ter=o(" (UniSpeechSat model)"),aer=l(),Xv=a("li"),aue=a("strong"),ner=o("wav2vec2"),ser=o(" \u2014 "),lz=a("a"),ler=o("Wav2Vec2ForAudioFrameClassification"),ier=o(" (Wav2Vec2 model)"),der=l(),zv=a("li"),nue=a("strong"),cer=o("wav2vec2-conformer"),fer=o(" \u2014 "),iz=a("a"),mer=o("Wav2Vec2ConformerForAudioFrameClassification"),ger=o(" (Wav2Vec2-Conformer model)"),her=l(),Wv=a("li"),sue=a("strong"),per=o("wavlm"),_er=o(" \u2014 "),dz=a("a"),uer=o("WavLMForAudioFrameClassification"),ber=o(" (WavLM model)"),ver=l(),Qv=a("p"),Fer=o("The model is set in evaluation mode by default using "),lue=a("code"),Ter=o("model.eval()"),Mer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),Eer=o("model.train()"),Cer=l(),F(Hv.$$.fragment),Uqe=l(),ud=a("h2"),Uv=a("a"),due=a("span"),F(ML.$$.fragment),wer=l(),cue=a("span"),Aer=o("AutoModelForCTC"),Jqe=l(),Vo=a("div"),F(EL.$$.fragment),yer=l(),bd=a("p"),Ler=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=a("a"),xer=o("from_pretrained()"),$er=o(" class method or the "),fz=a("a"),ker=o("from_config()"),Ser=o(` class
method.`),Rer=l(),CL=a("p"),Per=o("This class cannot be instantiated directly using "),fue=a("code"),Ber=o("__init__()"),Ier=o(" (throws an error)."),Ner=l(),Ft=a("div"),F(wL.$$.fragment),qer=l(),mue=a("p"),jer=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Der=l(),vd=a("p"),Ger=o(`Note:
Loading a model from its configuration file does `),gue=a("strong"),Oer=o("not"),Ver=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=a("a"),Xer=o("from_pretrained()"),zer=o(" to load the model weights."),Wer=l(),F(Jv.$$.fragment),Qer=l(),mo=a("div"),F(AL.$$.fragment),Her=l(),hue=a("p"),Uer=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Jer=l(),Xa=a("p"),Yer=o("The model class to instantiate is selected based on the "),pue=a("code"),Ker=o("model_type"),Zer=o(` property of the config object (either
passed as an argument or loaded from `),_ue=a("code"),eor=o("pretrained_model_name_or_path"),oor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),ror=o("pretrained_model_name_or_path"),tor=o(":"),aor=l(),Se=a("ul"),Yv=a("li"),bue=a("strong"),nor=o("data2vec-audio"),sor=o(" \u2014 "),gz=a("a"),lor=o("Data2VecAudioForCTC"),ior=o(" (Data2VecAudio model)"),dor=l(),Kv=a("li"),vue=a("strong"),cor=o("hubert"),mor=o(" \u2014 "),hz=a("a"),gor=o("HubertForCTC"),hor=o(" (Hubert model)"),por=l(),Zv=a("li"),Fue=a("strong"),_or=o("sew"),uor=o(" \u2014 "),pz=a("a"),bor=o("SEWForCTC"),vor=o(" (SEW model)"),For=l(),eF=a("li"),Tue=a("strong"),Tor=o("sew-d"),Mor=o(" \u2014 "),_z=a("a"),Eor=o("SEWDForCTC"),Cor=o(" (SEW-D model)"),wor=l(),oF=a("li"),Mue=a("strong"),Aor=o("unispeech"),yor=o(" \u2014 "),uz=a("a"),Lor=o("UniSpeechForCTC"),xor=o(" (UniSpeech model)"),$or=l(),rF=a("li"),Eue=a("strong"),kor=o("unispeech-sat"),Sor=o(" \u2014 "),bz=a("a"),Ror=o("UniSpeechSatForCTC"),Por=o(" (UniSpeechSat model)"),Bor=l(),tF=a("li"),Cue=a("strong"),Ior=o("wav2vec2"),Nor=o(" \u2014 "),vz=a("a"),qor=o("Wav2Vec2ForCTC"),jor=o(" (Wav2Vec2 model)"),Dor=l(),aF=a("li"),wue=a("strong"),Gor=o("wav2vec2-conformer"),Oor=o(" \u2014 "),Fz=a("a"),Vor=o("Wav2Vec2ConformerForCTC"),Xor=o(" (Wav2Vec2-Conformer model)"),zor=l(),nF=a("li"),Aue=a("strong"),Wor=o("wavlm"),Qor=o(" \u2014 "),Tz=a("a"),Hor=o("WavLMForCTC"),Uor=o(" (WavLM model)"),Jor=l(),sF=a("p"),Yor=o("The model is set in evaluation mode by default using "),yue=a("code"),Kor=o("model.eval()"),Zor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=a("code"),err=o("model.train()"),orr=l(),F(lF.$$.fragment),Yqe=l(),Fd=a("h2"),iF=a("a"),xue=a("span"),F(yL.$$.fragment),rrr=l(),$ue=a("span"),trr=o("AutoModelForSpeechSeq2Seq"),Kqe=l(),Xo=a("div"),F(LL.$$.fragment),arr=l(),Td=a("p"),nrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=a("a"),srr=o("from_pretrained()"),lrr=o(" class method or the "),Ez=a("a"),irr=o("from_config()"),drr=o(` class
method.`),crr=l(),xL=a("p"),frr=o("This class cannot be instantiated directly using "),kue=a("code"),mrr=o("__init__()"),grr=o(" (throws an error)."),hrr=l(),Tt=a("div"),F($L.$$.fragment),prr=l(),Sue=a("p"),_rr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),urr=l(),Md=a("p"),brr=o(`Note:
Loading a model from its configuration file does `),Rue=a("strong"),vrr=o("not"),Frr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=a("a"),Trr=o("from_pretrained()"),Mrr=o(" to load the model weights."),Err=l(),F(dF.$$.fragment),Crr=l(),go=a("div"),F(kL.$$.fragment),wrr=l(),Pue=a("p"),Arr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),yrr=l(),za=a("p"),Lrr=o("The model class to instantiate is selected based on the "),Bue=a("code"),xrr=o("model_type"),$rr=o(` property of the config object (either
passed as an argument or loaded from `),Iue=a("code"),krr=o("pretrained_model_name_or_path"),Srr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=a("code"),Rrr=o("pretrained_model_name_or_path"),Prr=o(":"),Brr=l(),SL=a("ul"),cF=a("li"),que=a("strong"),Irr=o("speech-encoder-decoder"),Nrr=o(" \u2014 "),wz=a("a"),qrr=o("SpeechEncoderDecoderModel"),jrr=o(" (Speech Encoder decoder model)"),Drr=l(),fF=a("li"),jue=a("strong"),Grr=o("speech_to_text"),Orr=o(" \u2014 "),Az=a("a"),Vrr=o("Speech2TextForConditionalGeneration"),Xrr=o(" (Speech2Text model)"),zrr=l(),mF=a("p"),Wrr=o("The model is set in evaluation mode by default using "),Due=a("code"),Qrr=o("model.eval()"),Hrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=a("code"),Urr=o("model.train()"),Jrr=l(),F(gF.$$.fragment),Zqe=l(),Ed=a("h2"),hF=a("a"),Oue=a("span"),F(RL.$$.fragment),Yrr=l(),Vue=a("span"),Krr=o("AutoModelForAudioXVector"),eje=l(),zo=a("div"),F(PL.$$.fragment),Zrr=l(),Cd=a("p"),etr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=a("a"),otr=o("from_pretrained()"),rtr=o(" class method or the "),Lz=a("a"),ttr=o("from_config()"),atr=o(` class
method.`),ntr=l(),BL=a("p"),str=o("This class cannot be instantiated directly using "),Xue=a("code"),ltr=o("__init__()"),itr=o(" (throws an error)."),dtr=l(),Mt=a("div"),F(IL.$$.fragment),ctr=l(),zue=a("p"),ftr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mtr=l(),wd=a("p"),gtr=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),htr=o("not"),ptr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=a("a"),_tr=o("from_pretrained()"),utr=o(" to load the model weights."),btr=l(),F(pF.$$.fragment),vtr=l(),ho=a("div"),F(NL.$$.fragment),Ftr=l(),Que=a("p"),Ttr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Mtr=l(),Wa=a("p"),Etr=o("The model class to instantiate is selected based on the "),Hue=a("code"),Ctr=o("model_type"),wtr=o(` property of the config object (either
passed as an argument or loaded from `),Uue=a("code"),Atr=o("pretrained_model_name_or_path"),ytr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=a("code"),Ltr=o("pretrained_model_name_or_path"),xtr=o(":"),$tr=l(),Zr=a("ul"),_F=a("li"),Yue=a("strong"),ktr=o("data2vec-audio"),Str=o(" \u2014 "),$z=a("a"),Rtr=o("Data2VecAudioForXVector"),Ptr=o(" (Data2VecAudio model)"),Btr=l(),uF=a("li"),Kue=a("strong"),Itr=o("unispeech-sat"),Ntr=o(" \u2014 "),kz=a("a"),qtr=o("UniSpeechSatForXVector"),jtr=o(" (UniSpeechSat model)"),Dtr=l(),bF=a("li"),Zue=a("strong"),Gtr=o("wav2vec2"),Otr=o(" \u2014 "),Sz=a("a"),Vtr=o("Wav2Vec2ForXVector"),Xtr=o(" (Wav2Vec2 model)"),ztr=l(),vF=a("li"),e2e=a("strong"),Wtr=o("wav2vec2-conformer"),Qtr=o(" \u2014 "),Rz=a("a"),Htr=o("Wav2Vec2ConformerForXVector"),Utr=o(" (Wav2Vec2-Conformer model)"),Jtr=l(),FF=a("li"),o2e=a("strong"),Ytr=o("wavlm"),Ktr=o(" \u2014 "),Pz=a("a"),Ztr=o("WavLMForXVector"),ear=o(" (WavLM model)"),oar=l(),TF=a("p"),rar=o("The model is set in evaluation mode by default using "),r2e=a("code"),tar=o("model.eval()"),aar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=a("code"),nar=o("model.train()"),sar=l(),F(MF.$$.fragment),oje=l(),Ad=a("h2"),EF=a("a"),a2e=a("span"),F(qL.$$.fragment),lar=l(),n2e=a("span"),iar=o("AutoModelForMaskedImageModeling"),rje=l(),Wo=a("div"),F(jL.$$.fragment),dar=l(),yd=a("p"),car=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=a("a"),far=o("from_pretrained()"),mar=o(" class method or the "),Iz=a("a"),gar=o("from_config()"),har=o(` class
method.`),par=l(),DL=a("p"),_ar=o("This class cannot be instantiated directly using "),s2e=a("code"),uar=o("__init__()"),bar=o(" (throws an error)."),Far=l(),Et=a("div"),F(GL.$$.fragment),Tar=l(),l2e=a("p"),Mar=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ear=l(),Ld=a("p"),Car=o(`Note:
Loading a model from its configuration file does `),i2e=a("strong"),war=o("not"),Aar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),yar=o("from_pretrained()"),Lar=o(" to load the model weights."),xar=l(),F(CF.$$.fragment),$ar=l(),po=a("div"),F(OL.$$.fragment),kar=l(),d2e=a("p"),Sar=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Rar=l(),Qa=a("p"),Par=o("The model class to instantiate is selected based on the "),c2e=a("code"),Bar=o("model_type"),Iar=o(` property of the config object (either
passed as an argument or loaded from `),f2e=a("code"),Nar=o("pretrained_model_name_or_path"),qar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=a("code"),jar=o("pretrained_model_name_or_path"),Dar=o(":"),Gar=l(),xd=a("ul"),wF=a("li"),g2e=a("strong"),Oar=o("deit"),Var=o(" \u2014 "),qz=a("a"),Xar=o("DeiTForMaskedImageModeling"),zar=o(" (DeiT model)"),War=l(),AF=a("li"),h2e=a("strong"),Qar=o("swin"),Har=o(" \u2014 "),jz=a("a"),Uar=o("SwinForMaskedImageModeling"),Jar=o(" (Swin model)"),Yar=l(),yF=a("li"),p2e=a("strong"),Kar=o("vit"),Zar=o(" \u2014 "),Dz=a("a"),enr=o("ViTForMaskedImageModeling"),onr=o(" (ViT model)"),rnr=l(),LF=a("p"),tnr=o("The model is set in evaluation mode by default using "),_2e=a("code"),anr=o("model.eval()"),nnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=a("code"),snr=o("model.train()"),lnr=l(),F(xF.$$.fragment),tje=l(),$d=a("h2"),$F=a("a"),b2e=a("span"),F(VL.$$.fragment),inr=l(),v2e=a("span"),dnr=o("AutoModelForObjectDetection"),aje=l(),Qo=a("div"),F(XL.$$.fragment),cnr=l(),kd=a("p"),fnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=a("a"),mnr=o("from_pretrained()"),gnr=o(" class method or the "),Oz=a("a"),hnr=o("from_config()"),pnr=o(` class
method.`),_nr=l(),zL=a("p"),unr=o("This class cannot be instantiated directly using "),F2e=a("code"),bnr=o("__init__()"),vnr=o(" (throws an error)."),Fnr=l(),Ct=a("div"),F(WL.$$.fragment),Tnr=l(),T2e=a("p"),Mnr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Enr=l(),Sd=a("p"),Cnr=o(`Note:
Loading a model from its configuration file does `),M2e=a("strong"),wnr=o("not"),Anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),ynr=o("from_pretrained()"),Lnr=o(" to load the model weights."),xnr=l(),F(kF.$$.fragment),$nr=l(),_o=a("div"),F(QL.$$.fragment),knr=l(),E2e=a("p"),Snr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Rnr=l(),Ha=a("p"),Pnr=o("The model class to instantiate is selected based on the "),C2e=a("code"),Bnr=o("model_type"),Inr=o(` property of the config object (either
passed as an argument or loaded from `),w2e=a("code"),Nnr=o("pretrained_model_name_or_path"),qnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=a("code"),jnr=o("pretrained_model_name_or_path"),Dnr=o(":"),Gnr=l(),HL=a("ul"),SF=a("li"),y2e=a("strong"),Onr=o("detr"),Vnr=o(" \u2014 "),Xz=a("a"),Xnr=o("DetrForObjectDetection"),znr=o(" (DETR model)"),Wnr=l(),RF=a("li"),L2e=a("strong"),Qnr=o("yolos"),Hnr=o(" \u2014 "),zz=a("a"),Unr=o("YolosForObjectDetection"),Jnr=o(" (YOLOS model)"),Ynr=l(),PF=a("p"),Knr=o("The model is set in evaluation mode by default using "),x2e=a("code"),Znr=o("model.eval()"),esr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=a("code"),osr=o("model.train()"),rsr=l(),F(BF.$$.fragment),nje=l(),Rd=a("h2"),IF=a("a"),k2e=a("span"),F(UL.$$.fragment),tsr=l(),S2e=a("span"),asr=o("AutoModelForImageSegmentation"),sje=l(),Ho=a("div"),F(JL.$$.fragment),nsr=l(),Pd=a("p"),ssr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=a("a"),lsr=o("from_pretrained()"),isr=o(" class method or the "),Qz=a("a"),dsr=o("from_config()"),csr=o(` class
method.`),fsr=l(),YL=a("p"),msr=o("This class cannot be instantiated directly using "),R2e=a("code"),gsr=o("__init__()"),hsr=o(" (throws an error)."),psr=l(),wt=a("div"),F(KL.$$.fragment),_sr=l(),P2e=a("p"),usr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),bsr=l(),Bd=a("p"),vsr=o(`Note:
Loading a model from its configuration file does `),B2e=a("strong"),Fsr=o("not"),Tsr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=a("a"),Msr=o("from_pretrained()"),Esr=o(" to load the model weights."),Csr=l(),F(NF.$$.fragment),wsr=l(),uo=a("div"),F(ZL.$$.fragment),Asr=l(),I2e=a("p"),ysr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Lsr=l(),Ua=a("p"),xsr=o("The model class to instantiate is selected based on the "),N2e=a("code"),$sr=o("model_type"),ksr=o(` property of the config object (either
passed as an argument or loaded from `),q2e=a("code"),Ssr=o("pretrained_model_name_or_path"),Rsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=a("code"),Psr=o("pretrained_model_name_or_path"),Bsr=o(":"),Isr=l(),D2e=a("ul"),qF=a("li"),G2e=a("strong"),Nsr=o("detr"),qsr=o(" \u2014 "),Uz=a("a"),jsr=o("DetrForSegmentation"),Dsr=o(" (DETR model)"),Gsr=l(),jF=a("p"),Osr=o("The model is set in evaluation mode by default using "),O2e=a("code"),Vsr=o("model.eval()"),Xsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=a("code"),zsr=o("model.train()"),Wsr=l(),F(DF.$$.fragment),lje=l(),Id=a("h2"),GF=a("a"),X2e=a("span"),F(e8.$$.fragment),Qsr=l(),z2e=a("span"),Hsr=o("AutoModelForSemanticSegmentation"),ije=l(),Uo=a("div"),F(o8.$$.fragment),Usr=l(),Nd=a("p"),Jsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=a("a"),Ysr=o("from_pretrained()"),Ksr=o(" class method or the "),Yz=a("a"),Zsr=o("from_config()"),elr=o(` class
method.`),olr=l(),r8=a("p"),rlr=o("This class cannot be instantiated directly using "),W2e=a("code"),tlr=o("__init__()"),alr=o(" (throws an error)."),nlr=l(),At=a("div"),F(t8.$$.fragment),slr=l(),Q2e=a("p"),llr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),ilr=l(),qd=a("p"),dlr=o(`Note:
Loading a model from its configuration file does `),H2e=a("strong"),clr=o("not"),flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=a("a"),mlr=o("from_pretrained()"),glr=o(" to load the model weights."),hlr=l(),F(OF.$$.fragment),plr=l(),bo=a("div"),F(a8.$$.fragment),_lr=l(),U2e=a("p"),ulr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),blr=l(),Ja=a("p"),vlr=o("The model class to instantiate is selected based on the "),J2e=a("code"),Flr=o("model_type"),Tlr=o(` property of the config object (either
passed as an argument or loaded from `),Y2e=a("code"),Mlr=o("pretrained_model_name_or_path"),Elr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=a("code"),Clr=o("pretrained_model_name_or_path"),wlr=o(":"),Alr=l(),Ya=a("ul"),VF=a("li"),Z2e=a("strong"),ylr=o("beit"),Llr=o(" \u2014 "),Zz=a("a"),xlr=o("BeitForSemanticSegmentation"),$lr=o(" (BEiT model)"),klr=l(),XF=a("li"),e1e=a("strong"),Slr=o("data2vec-vision"),Rlr=o(" \u2014 "),eW=a("a"),Plr=o("Data2VecVisionForSemanticSegmentation"),Blr=o(" (Data2VecVision model)"),Ilr=l(),zF=a("li"),o1e=a("strong"),Nlr=o("dpt"),qlr=o(" \u2014 "),oW=a("a"),jlr=o("DPTForSemanticSegmentation"),Dlr=o(" (DPT model)"),Glr=l(),WF=a("li"),r1e=a("strong"),Olr=o("segformer"),Vlr=o(" \u2014 "),rW=a("a"),Xlr=o("SegformerForSemanticSegmentation"),zlr=o(" (SegFormer model)"),Wlr=l(),QF=a("p"),Qlr=o("The model is set in evaluation mode by default using "),t1e=a("code"),Hlr=o("model.eval()"),Ulr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=a("code"),Jlr=o("model.train()"),Ylr=l(),F(HF.$$.fragment),dje=l(),jd=a("h2"),UF=a("a"),n1e=a("span"),F(n8.$$.fragment),Klr=l(),s1e=a("span"),Zlr=o("AutoModelForInstanceSegmentation"),cje=l(),Jo=a("div"),F(s8.$$.fragment),eir=l(),Dd=a("p"),oir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=a("a"),rir=o("from_pretrained()"),tir=o(" class method or the "),aW=a("a"),air=o("from_config()"),nir=o(` class
method.`),sir=l(),l8=a("p"),lir=o("This class cannot be instantiated directly using "),l1e=a("code"),iir=o("__init__()"),dir=o(" (throws an error)."),cir=l(),yt=a("div"),F(i8.$$.fragment),fir=l(),i1e=a("p"),mir=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),gir=l(),Gd=a("p"),hir=o(`Note:
Loading a model from its configuration file does `),d1e=a("strong"),pir=o("not"),_ir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=a("a"),uir=o("from_pretrained()"),bir=o(" to load the model weights."),vir=l(),F(JF.$$.fragment),Fir=l(),vo=a("div"),F(d8.$$.fragment),Tir=l(),c1e=a("p"),Mir=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Eir=l(),Ka=a("p"),Cir=o("The model class to instantiate is selected based on the "),f1e=a("code"),wir=o("model_type"),Air=o(` property of the config object (either
passed as an argument or loaded from `),m1e=a("code"),yir=o("pretrained_model_name_or_path"),Lir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=a("code"),xir=o("pretrained_model_name_or_path"),$ir=o(":"),kir=l(),h1e=a("ul"),YF=a("li"),p1e=a("strong"),Sir=o("maskformer"),Rir=o(" \u2014 "),sW=a("a"),Pir=o("MaskFormerForInstanceSegmentation"),Bir=o(" (MaskFormer model)"),Iir=l(),KF=a("p"),Nir=o("The model is set in evaluation mode by default using "),_1e=a("code"),qir=o("model.eval()"),jir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=a("code"),Dir=o("model.train()"),Gir=l(),F(ZF.$$.fragment),fje=l(),Od=a("h2"),eT=a("a"),b1e=a("span"),F(c8.$$.fragment),Oir=l(),v1e=a("span"),Vir=o("TFAutoModel"),mje=l(),Yo=a("div"),F(f8.$$.fragment),Xir=l(),Vd=a("p"),zir=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=a("a"),Wir=o("from_pretrained()"),Qir=o(" class method or the "),iW=a("a"),Hir=o("from_config()"),Uir=o(` class
method.`),Jir=l(),m8=a("p"),Yir=o("This class cannot be instantiated directly using "),F1e=a("code"),Kir=o("__init__()"),Zir=o(" (throws an error)."),edr=l(),Lt=a("div"),F(g8.$$.fragment),odr=l(),T1e=a("p"),rdr=o("Instantiates one of the base model classes of the library from a configuration."),tdr=l(),Xd=a("p"),adr=o(`Note:
Loading a model from its configuration file does `),M1e=a("strong"),ndr=o("not"),sdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),ldr=o("from_pretrained()"),idr=o(" to load the model weights."),ddr=l(),F(oT.$$.fragment),cdr=l(),wr=a("div"),F(h8.$$.fragment),fdr=l(),E1e=a("p"),mdr=o("Instantiate one of the base model classes of the library from a pretrained model."),gdr=l(),Za=a("p"),hdr=o("The model class to instantiate is selected based on the "),C1e=a("code"),pdr=o("model_type"),_dr=o(` property of the config object (either
passed as an argument or loaded from `),w1e=a("code"),udr=o("pretrained_model_name_or_path"),bdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=a("code"),vdr=o("pretrained_model_name_or_path"),Fdr=o(":"),Tdr=l(),q=a("ul"),rT=a("li"),y1e=a("strong"),Mdr=o("albert"),Edr=o(" \u2014 "),cW=a("a"),Cdr=o("TFAlbertModel"),wdr=o(" (ALBERT model)"),Adr=l(),tT=a("li"),L1e=a("strong"),ydr=o("bart"),Ldr=o(" \u2014 "),fW=a("a"),xdr=o("TFBartModel"),$dr=o(" (BART model)"),kdr=l(),aT=a("li"),x1e=a("strong"),Sdr=o("bert"),Rdr=o(" \u2014 "),mW=a("a"),Pdr=o("TFBertModel"),Bdr=o(" (BERT model)"),Idr=l(),nT=a("li"),$1e=a("strong"),Ndr=o("blenderbot"),qdr=o(" \u2014 "),gW=a("a"),jdr=o("TFBlenderbotModel"),Ddr=o(" (Blenderbot model)"),Gdr=l(),sT=a("li"),k1e=a("strong"),Odr=o("blenderbot-small"),Vdr=o(" \u2014 "),hW=a("a"),Xdr=o("TFBlenderbotSmallModel"),zdr=o(" (BlenderbotSmall model)"),Wdr=l(),lT=a("li"),S1e=a("strong"),Qdr=o("camembert"),Hdr=o(" \u2014 "),pW=a("a"),Udr=o("TFCamembertModel"),Jdr=o(" (CamemBERT model)"),Ydr=l(),iT=a("li"),R1e=a("strong"),Kdr=o("clip"),Zdr=o(" \u2014 "),_W=a("a"),ecr=o("TFCLIPModel"),ocr=o(" (CLIP model)"),rcr=l(),dT=a("li"),P1e=a("strong"),tcr=o("convbert"),acr=o(" \u2014 "),uW=a("a"),ncr=o("TFConvBertModel"),scr=o(" (ConvBERT model)"),lcr=l(),cT=a("li"),B1e=a("strong"),icr=o("convnext"),dcr=o(" \u2014 "),bW=a("a"),ccr=o("TFConvNextModel"),fcr=o(" (ConvNext model)"),mcr=l(),fT=a("li"),I1e=a("strong"),gcr=o("ctrl"),hcr=o(" \u2014 "),vW=a("a"),pcr=o("TFCTRLModel"),_cr=o(" (CTRL model)"),ucr=l(),mT=a("li"),N1e=a("strong"),bcr=o("data2vec-vision"),vcr=o(" \u2014 "),FW=a("a"),Fcr=o("TFData2VecVisionModel"),Tcr=o(" (Data2VecVision model)"),Mcr=l(),gT=a("li"),q1e=a("strong"),Ecr=o("deberta"),Ccr=o(" \u2014 "),TW=a("a"),wcr=o("TFDebertaModel"),Acr=o(" (DeBERTa model)"),ycr=l(),hT=a("li"),j1e=a("strong"),Lcr=o("deberta-v2"),xcr=o(" \u2014 "),MW=a("a"),$cr=o("TFDebertaV2Model"),kcr=o(" (DeBERTa-v2 model)"),Scr=l(),pT=a("li"),D1e=a("strong"),Rcr=o("distilbert"),Pcr=o(" \u2014 "),EW=a("a"),Bcr=o("TFDistilBertModel"),Icr=o(" (DistilBERT model)"),Ncr=l(),_T=a("li"),G1e=a("strong"),qcr=o("dpr"),jcr=o(" \u2014 "),CW=a("a"),Dcr=o("TFDPRQuestionEncoder"),Gcr=o(" (DPR model)"),Ocr=l(),uT=a("li"),O1e=a("strong"),Vcr=o("electra"),Xcr=o(" \u2014 "),wW=a("a"),zcr=o("TFElectraModel"),Wcr=o(" (ELECTRA model)"),Qcr=l(),bT=a("li"),V1e=a("strong"),Hcr=o("flaubert"),Ucr=o(" \u2014 "),AW=a("a"),Jcr=o("TFFlaubertModel"),Ycr=o(" (FlauBERT model)"),Kcr=l(),Is=a("li"),X1e=a("strong"),Zcr=o("funnel"),efr=o(" \u2014 "),yW=a("a"),ofr=o("TFFunnelModel"),rfr=o(" or "),LW=a("a"),tfr=o("TFFunnelBaseModel"),afr=o(" (Funnel Transformer model)"),nfr=l(),vT=a("li"),z1e=a("strong"),sfr=o("gpt2"),lfr=o(" \u2014 "),xW=a("a"),ifr=o("TFGPT2Model"),dfr=o(" (OpenAI GPT-2 model)"),cfr=l(),FT=a("li"),W1e=a("strong"),ffr=o("gptj"),mfr=o(" \u2014 "),$W=a("a"),gfr=o("TFGPTJModel"),hfr=o(" (GPT-J model)"),pfr=l(),TT=a("li"),Q1e=a("strong"),_fr=o("hubert"),ufr=o(" \u2014 "),kW=a("a"),bfr=o("TFHubertModel"),vfr=o(" (Hubert model)"),Ffr=l(),MT=a("li"),H1e=a("strong"),Tfr=o("layoutlm"),Mfr=o(" \u2014 "),SW=a("a"),Efr=o("TFLayoutLMModel"),Cfr=o(" (LayoutLM model)"),wfr=l(),ET=a("li"),U1e=a("strong"),Afr=o("led"),yfr=o(" \u2014 "),RW=a("a"),Lfr=o("TFLEDModel"),xfr=o(" (LED model)"),$fr=l(),CT=a("li"),J1e=a("strong"),kfr=o("longformer"),Sfr=o(" \u2014 "),PW=a("a"),Rfr=o("TFLongformerModel"),Pfr=o(" (Longformer model)"),Bfr=l(),wT=a("li"),Y1e=a("strong"),Ifr=o("lxmert"),Nfr=o(" \u2014 "),BW=a("a"),qfr=o("TFLxmertModel"),jfr=o(" (LXMERT model)"),Dfr=l(),AT=a("li"),K1e=a("strong"),Gfr=o("marian"),Ofr=o(" \u2014 "),IW=a("a"),Vfr=o("TFMarianModel"),Xfr=o(" (Marian model)"),zfr=l(),yT=a("li"),Z1e=a("strong"),Wfr=o("mbart"),Qfr=o(" \u2014 "),NW=a("a"),Hfr=o("TFMBartModel"),Ufr=o(" (mBART model)"),Jfr=l(),LT=a("li"),e7e=a("strong"),Yfr=o("mobilebert"),Kfr=o(" \u2014 "),qW=a("a"),Zfr=o("TFMobileBertModel"),emr=o(" (MobileBERT model)"),omr=l(),xT=a("li"),o7e=a("strong"),rmr=o("mpnet"),tmr=o(" \u2014 "),jW=a("a"),amr=o("TFMPNetModel"),nmr=o(" (MPNet model)"),smr=l(),$T=a("li"),r7e=a("strong"),lmr=o("mt5"),imr=o(" \u2014 "),DW=a("a"),dmr=o("TFMT5Model"),cmr=o(" (mT5 model)"),fmr=l(),kT=a("li"),t7e=a("strong"),mmr=o("openai-gpt"),gmr=o(" \u2014 "),GW=a("a"),hmr=o("TFOpenAIGPTModel"),pmr=o(" (OpenAI GPT model)"),_mr=l(),ST=a("li"),a7e=a("strong"),umr=o("pegasus"),bmr=o(" \u2014 "),OW=a("a"),vmr=o("TFPegasusModel"),Fmr=o(" (Pegasus model)"),Tmr=l(),RT=a("li"),n7e=a("strong"),Mmr=o("rembert"),Emr=o(" \u2014 "),VW=a("a"),Cmr=o("TFRemBertModel"),wmr=o(" (RemBERT model)"),Amr=l(),PT=a("li"),s7e=a("strong"),ymr=o("resnet"),Lmr=o(" \u2014 "),XW=a("a"),xmr=o("TFResNetModel"),$mr=o(" (ResNet model)"),kmr=l(),BT=a("li"),l7e=a("strong"),Smr=o("roberta"),Rmr=o(" \u2014 "),zW=a("a"),Pmr=o("TFRobertaModel"),Bmr=o(" (RoBERTa model)"),Imr=l(),IT=a("li"),i7e=a("strong"),Nmr=o("roformer"),qmr=o(" \u2014 "),WW=a("a"),jmr=o("TFRoFormerModel"),Dmr=o(" (RoFormer model)"),Gmr=l(),NT=a("li"),d7e=a("strong"),Omr=o("speech_to_text"),Vmr=o(" \u2014 "),QW=a("a"),Xmr=o("TFSpeech2TextModel"),zmr=o(" (Speech2Text model)"),Wmr=l(),qT=a("li"),c7e=a("strong"),Qmr=o("swin"),Hmr=o(" \u2014 "),HW=a("a"),Umr=o("TFSwinModel"),Jmr=o(" (Swin model)"),Ymr=l(),jT=a("li"),f7e=a("strong"),Kmr=o("t5"),Zmr=o(" \u2014 "),UW=a("a"),egr=o("TFT5Model"),ogr=o(" (T5 model)"),rgr=l(),DT=a("li"),m7e=a("strong"),tgr=o("tapas"),agr=o(" \u2014 "),JW=a("a"),ngr=o("TFTapasModel"),sgr=o(" (TAPAS model)"),lgr=l(),GT=a("li"),g7e=a("strong"),igr=o("transfo-xl"),dgr=o(" \u2014 "),YW=a("a"),cgr=o("TFTransfoXLModel"),fgr=o(" (Transformer-XL model)"),mgr=l(),OT=a("li"),h7e=a("strong"),ggr=o("vit"),hgr=o(" \u2014 "),KW=a("a"),pgr=o("TFViTModel"),_gr=o(" (ViT model)"),ugr=l(),VT=a("li"),p7e=a("strong"),bgr=o("vit_mae"),vgr=o(" \u2014 "),ZW=a("a"),Fgr=o("TFViTMAEModel"),Tgr=o(" (ViTMAE model)"),Mgr=l(),XT=a("li"),_7e=a("strong"),Egr=o("wav2vec2"),Cgr=o(" \u2014 "),eQ=a("a"),wgr=o("TFWav2Vec2Model"),Agr=o(" (Wav2Vec2 model)"),ygr=l(),zT=a("li"),u7e=a("strong"),Lgr=o("xlm"),xgr=o(" \u2014 "),oQ=a("a"),$gr=o("TFXLMModel"),kgr=o(" (XLM model)"),Sgr=l(),WT=a("li"),b7e=a("strong"),Rgr=o("xlm-roberta"),Pgr=o(" \u2014 "),rQ=a("a"),Bgr=o("TFXLMRobertaModel"),Igr=o(" (XLM-RoBERTa model)"),Ngr=l(),QT=a("li"),v7e=a("strong"),qgr=o("xlnet"),jgr=o(" \u2014 "),tQ=a("a"),Dgr=o("TFXLNetModel"),Ggr=o(" (XLNet model)"),Ogr=l(),F(HT.$$.fragment),gje=l(),zd=a("h2"),UT=a("a"),F7e=a("span"),F(p8.$$.fragment),Vgr=l(),T7e=a("span"),Xgr=o("TFAutoModelForPreTraining"),hje=l(),Ko=a("div"),F(_8.$$.fragment),zgr=l(),Wd=a("p"),Wgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aQ=a("a"),Qgr=o("from_pretrained()"),Hgr=o(" class method or the "),nQ=a("a"),Ugr=o("from_config()"),Jgr=o(` class
method.`),Ygr=l(),u8=a("p"),Kgr=o("This class cannot be instantiated directly using "),M7e=a("code"),Zgr=o("__init__()"),ehr=o(" (throws an error)."),ohr=l(),xt=a("div"),F(b8.$$.fragment),rhr=l(),E7e=a("p"),thr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),ahr=l(),Qd=a("p"),nhr=o(`Note:
Loading a model from its configuration file does `),C7e=a("strong"),shr=o("not"),lhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),ihr=o("from_pretrained()"),dhr=o(" to load the model weights."),chr=l(),F(JT.$$.fragment),fhr=l(),Ar=a("div"),F(v8.$$.fragment),mhr=l(),w7e=a("p"),ghr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hhr=l(),en=a("p"),phr=o("The model class to instantiate is selected based on the "),A7e=a("code"),_hr=o("model_type"),uhr=o(` property of the config object (either
passed as an argument or loaded from `),y7e=a("code"),bhr=o("pretrained_model_name_or_path"),vhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=a("code"),Fhr=o("pretrained_model_name_or_path"),Thr=o(":"),Mhr=l(),se=a("ul"),YT=a("li"),x7e=a("strong"),Ehr=o("albert"),Chr=o(" \u2014 "),lQ=a("a"),whr=o("TFAlbertForPreTraining"),Ahr=o(" (ALBERT model)"),yhr=l(),KT=a("li"),$7e=a("strong"),Lhr=o("bart"),xhr=o(" \u2014 "),iQ=a("a"),$hr=o("TFBartForConditionalGeneration"),khr=o(" (BART model)"),Shr=l(),ZT=a("li"),k7e=a("strong"),Rhr=o("bert"),Phr=o(" \u2014 "),dQ=a("a"),Bhr=o("TFBertForPreTraining"),Ihr=o(" (BERT model)"),Nhr=l(),eM=a("li"),S7e=a("strong"),qhr=o("camembert"),jhr=o(" \u2014 "),cQ=a("a"),Dhr=o("TFCamembertForMaskedLM"),Ghr=o(" (CamemBERT model)"),Ohr=l(),oM=a("li"),R7e=a("strong"),Vhr=o("ctrl"),Xhr=o(" \u2014 "),fQ=a("a"),zhr=o("TFCTRLLMHeadModel"),Whr=o(" (CTRL model)"),Qhr=l(),rM=a("li"),P7e=a("strong"),Hhr=o("distilbert"),Uhr=o(" \u2014 "),mQ=a("a"),Jhr=o("TFDistilBertForMaskedLM"),Yhr=o(" (DistilBERT model)"),Khr=l(),tM=a("li"),B7e=a("strong"),Zhr=o("electra"),epr=o(" \u2014 "),gQ=a("a"),opr=o("TFElectraForPreTraining"),rpr=o(" (ELECTRA model)"),tpr=l(),aM=a("li"),I7e=a("strong"),apr=o("flaubert"),npr=o(" \u2014 "),hQ=a("a"),spr=o("TFFlaubertWithLMHeadModel"),lpr=o(" (FlauBERT model)"),ipr=l(),nM=a("li"),N7e=a("strong"),dpr=o("funnel"),cpr=o(" \u2014 "),pQ=a("a"),fpr=o("TFFunnelForPreTraining"),mpr=o(" (Funnel Transformer model)"),gpr=l(),sM=a("li"),q7e=a("strong"),hpr=o("gpt2"),ppr=o(" \u2014 "),_Q=a("a"),_pr=o("TFGPT2LMHeadModel"),upr=o(" (OpenAI GPT-2 model)"),bpr=l(),lM=a("li"),j7e=a("strong"),vpr=o("layoutlm"),Fpr=o(" \u2014 "),uQ=a("a"),Tpr=o("TFLayoutLMForMaskedLM"),Mpr=o(" (LayoutLM model)"),Epr=l(),iM=a("li"),D7e=a("strong"),Cpr=o("lxmert"),wpr=o(" \u2014 "),bQ=a("a"),Apr=o("TFLxmertForPreTraining"),ypr=o(" (LXMERT model)"),Lpr=l(),dM=a("li"),G7e=a("strong"),xpr=o("mobilebert"),$pr=o(" \u2014 "),vQ=a("a"),kpr=o("TFMobileBertForPreTraining"),Spr=o(" (MobileBERT model)"),Rpr=l(),cM=a("li"),O7e=a("strong"),Ppr=o("mpnet"),Bpr=o(" \u2014 "),FQ=a("a"),Ipr=o("TFMPNetForMaskedLM"),Npr=o(" (MPNet model)"),qpr=l(),fM=a("li"),V7e=a("strong"),jpr=o("openai-gpt"),Dpr=o(" \u2014 "),TQ=a("a"),Gpr=o("TFOpenAIGPTLMHeadModel"),Opr=o(" (OpenAI GPT model)"),Vpr=l(),mM=a("li"),X7e=a("strong"),Xpr=o("roberta"),zpr=o(" \u2014 "),MQ=a("a"),Wpr=o("TFRobertaForMaskedLM"),Qpr=o(" (RoBERTa model)"),Hpr=l(),gM=a("li"),z7e=a("strong"),Upr=o("t5"),Jpr=o(" \u2014 "),EQ=a("a"),Ypr=o("TFT5ForConditionalGeneration"),Kpr=o(" (T5 model)"),Zpr=l(),hM=a("li"),W7e=a("strong"),e_r=o("tapas"),o_r=o(" \u2014 "),CQ=a("a"),r_r=o("TFTapasForMaskedLM"),t_r=o(" (TAPAS model)"),a_r=l(),pM=a("li"),Q7e=a("strong"),n_r=o("transfo-xl"),s_r=o(" \u2014 "),wQ=a("a"),l_r=o("TFTransfoXLLMHeadModel"),i_r=o(" (Transformer-XL model)"),d_r=l(),_M=a("li"),H7e=a("strong"),c_r=o("vit_mae"),f_r=o(" \u2014 "),AQ=a("a"),m_r=o("TFViTMAEForPreTraining"),g_r=o(" (ViTMAE model)"),h_r=l(),uM=a("li"),U7e=a("strong"),p_r=o("xlm"),__r=o(" \u2014 "),yQ=a("a"),u_r=o("TFXLMWithLMHeadModel"),b_r=o(" (XLM model)"),v_r=l(),bM=a("li"),J7e=a("strong"),F_r=o("xlm-roberta"),T_r=o(" \u2014 "),LQ=a("a"),M_r=o("TFXLMRobertaForMaskedLM"),E_r=o(" (XLM-RoBERTa model)"),C_r=l(),vM=a("li"),Y7e=a("strong"),w_r=o("xlnet"),A_r=o(" \u2014 "),xQ=a("a"),y_r=o("TFXLNetLMHeadModel"),L_r=o(" (XLNet model)"),x_r=l(),F(FM.$$.fragment),pje=l(),Hd=a("h2"),TM=a("a"),K7e=a("span"),F(F8.$$.fragment),$_r=l(),Z7e=a("span"),k_r=o("TFAutoModelForCausalLM"),_je=l(),Zo=a("div"),F(T8.$$.fragment),S_r=l(),Ud=a("p"),R_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$Q=a("a"),P_r=o("from_pretrained()"),B_r=o(" class method or the "),kQ=a("a"),I_r=o("from_config()"),N_r=o(` class
method.`),q_r=l(),M8=a("p"),j_r=o("This class cannot be instantiated directly using "),ebe=a("code"),D_r=o("__init__()"),G_r=o(" (throws an error)."),O_r=l(),$t=a("div"),F(E8.$$.fragment),V_r=l(),obe=a("p"),X_r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z_r=l(),Jd=a("p"),W_r=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),Q_r=o("not"),H_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),U_r=o("from_pretrained()"),J_r=o(" to load the model weights."),Y_r=l(),F(MM.$$.fragment),K_r=l(),yr=a("div"),F(C8.$$.fragment),Z_r=l(),tbe=a("p"),eur=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),our=l(),on=a("p"),rur=o("The model class to instantiate is selected based on the "),abe=a("code"),tur=o("model_type"),aur=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),nur=o("pretrained_model_name_or_path"),sur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),lur=o("pretrained_model_name_or_path"),iur=o(":"),dur=l(),Me=a("ul"),EM=a("li"),lbe=a("strong"),cur=o("bert"),fur=o(" \u2014 "),RQ=a("a"),mur=o("TFBertLMHeadModel"),gur=o(" (BERT model)"),hur=l(),CM=a("li"),ibe=a("strong"),pur=o("camembert"),_ur=o(" \u2014 "),PQ=a("a"),uur=o("TFCamembertForCausalLM"),bur=o(" (CamemBERT model)"),vur=l(),wM=a("li"),dbe=a("strong"),Fur=o("ctrl"),Tur=o(" \u2014 "),BQ=a("a"),Mur=o("TFCTRLLMHeadModel"),Eur=o(" (CTRL model)"),Cur=l(),AM=a("li"),cbe=a("strong"),wur=o("gpt2"),Aur=o(" \u2014 "),IQ=a("a"),yur=o("TFGPT2LMHeadModel"),Lur=o(" (OpenAI GPT-2 model)"),xur=l(),yM=a("li"),fbe=a("strong"),$ur=o("gptj"),kur=o(" \u2014 "),NQ=a("a"),Sur=o("TFGPTJForCausalLM"),Rur=o(" (GPT-J model)"),Pur=l(),LM=a("li"),mbe=a("strong"),Bur=o("openai-gpt"),Iur=o(" \u2014 "),qQ=a("a"),Nur=o("TFOpenAIGPTLMHeadModel"),qur=o(" (OpenAI GPT model)"),jur=l(),xM=a("li"),gbe=a("strong"),Dur=o("rembert"),Gur=o(" \u2014 "),jQ=a("a"),Our=o("TFRemBertForCausalLM"),Vur=o(" (RemBERT model)"),Xur=l(),$M=a("li"),hbe=a("strong"),zur=o("roberta"),Wur=o(" \u2014 "),DQ=a("a"),Qur=o("TFRobertaForCausalLM"),Hur=o(" (RoBERTa model)"),Uur=l(),kM=a("li"),pbe=a("strong"),Jur=o("roformer"),Yur=o(" \u2014 "),GQ=a("a"),Kur=o("TFRoFormerForCausalLM"),Zur=o(" (RoFormer model)"),e2r=l(),SM=a("li"),_be=a("strong"),o2r=o("transfo-xl"),r2r=o(" \u2014 "),OQ=a("a"),t2r=o("TFTransfoXLLMHeadModel"),a2r=o(" (Transformer-XL model)"),n2r=l(),RM=a("li"),ube=a("strong"),s2r=o("xlm"),l2r=o(" \u2014 "),VQ=a("a"),i2r=o("TFXLMWithLMHeadModel"),d2r=o(" (XLM model)"),c2r=l(),PM=a("li"),bbe=a("strong"),f2r=o("xlnet"),m2r=o(" \u2014 "),XQ=a("a"),g2r=o("TFXLNetLMHeadModel"),h2r=o(" (XLNet model)"),p2r=l(),F(BM.$$.fragment),uje=l(),Yd=a("h2"),IM=a("a"),vbe=a("span"),F(w8.$$.fragment),_2r=l(),Fbe=a("span"),u2r=o("TFAutoModelForImageClassification"),bje=l(),er=a("div"),F(A8.$$.fragment),b2r=l(),Kd=a("p"),v2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zQ=a("a"),F2r=o("from_pretrained()"),T2r=o(" class method or the "),WQ=a("a"),M2r=o("from_config()"),E2r=o(` class
method.`),C2r=l(),y8=a("p"),w2r=o("This class cannot be instantiated directly using "),Tbe=a("code"),A2r=o("__init__()"),y2r=o(" (throws an error)."),L2r=l(),kt=a("div"),F(L8.$$.fragment),x2r=l(),Mbe=a("p"),$2r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),k2r=l(),Zd=a("p"),S2r=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),R2r=o("not"),P2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),B2r=o("from_pretrained()"),I2r=o(" to load the model weights."),N2r=l(),F(NM.$$.fragment),q2r=l(),Lr=a("div"),F(x8.$$.fragment),j2r=l(),Cbe=a("p"),D2r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),G2r=l(),rn=a("p"),O2r=o("The model class to instantiate is selected based on the "),wbe=a("code"),V2r=o("model_type"),X2r=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),z2r=o("pretrained_model_name_or_path"),W2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),Q2r=o("pretrained_model_name_or_path"),H2r=o(":"),U2r=l(),et=a("ul"),qM=a("li"),Lbe=a("strong"),J2r=o("convnext"),Y2r=o(" \u2014 "),HQ=a("a"),K2r=o("TFConvNextForImageClassification"),Z2r=o(" (ConvNext model)"),e1r=l(),jM=a("li"),xbe=a("strong"),o1r=o("data2vec-vision"),r1r=o(" \u2014 "),UQ=a("a"),t1r=o("TFData2VecVisionForImageClassification"),a1r=o(" (Data2VecVision model)"),n1r=l(),DM=a("li"),$be=a("strong"),s1r=o("resnet"),l1r=o(" \u2014 "),JQ=a("a"),i1r=o("TFResNetForImageClassification"),d1r=o(" (ResNet model)"),c1r=l(),GM=a("li"),kbe=a("strong"),f1r=o("swin"),m1r=o(" \u2014 "),YQ=a("a"),g1r=o("TFSwinForImageClassification"),h1r=o(" (Swin model)"),p1r=l(),OM=a("li"),Sbe=a("strong"),_1r=o("vit"),u1r=o(" \u2014 "),KQ=a("a"),b1r=o("TFViTForImageClassification"),v1r=o(" (ViT model)"),F1r=l(),F(VM.$$.fragment),vje=l(),ec=a("h2"),XM=a("a"),Rbe=a("span"),F($8.$$.fragment),T1r=l(),Pbe=a("span"),M1r=o("TFAutoModelForMaskedLM"),Fje=l(),or=a("div"),F(k8.$$.fragment),E1r=l(),oc=a("p"),C1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=a("a"),w1r=o("from_pretrained()"),A1r=o(" class method or the "),eH=a("a"),y1r=o("from_config()"),L1r=o(` class
method.`),x1r=l(),S8=a("p"),$1r=o("This class cannot be instantiated directly using "),Bbe=a("code"),k1r=o("__init__()"),S1r=o(" (throws an error)."),R1r=l(),St=a("div"),F(R8.$$.fragment),P1r=l(),Ibe=a("p"),B1r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),I1r=l(),rc=a("p"),N1r=o(`Note:
Loading a model from its configuration file does `),Nbe=a("strong"),q1r=o("not"),j1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=a("a"),D1r=o("from_pretrained()"),G1r=o(" to load the model weights."),O1r=l(),F(zM.$$.fragment),V1r=l(),xr=a("div"),F(P8.$$.fragment),X1r=l(),qbe=a("p"),z1r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),W1r=l(),tn=a("p"),Q1r=o("The model class to instantiate is selected based on the "),jbe=a("code"),H1r=o("model_type"),U1r=o(` property of the config object (either
passed as an argument or loaded from `),Dbe=a("code"),J1r=o("pretrained_model_name_or_path"),Y1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=a("code"),K1r=o("pretrained_model_name_or_path"),Z1r=o(":"),e7r=l(),ie=a("ul"),WM=a("li"),Obe=a("strong"),o7r=o("albert"),r7r=o(" \u2014 "),rH=a("a"),t7r=o("TFAlbertForMaskedLM"),a7r=o(" (ALBERT model)"),n7r=l(),QM=a("li"),Vbe=a("strong"),s7r=o("bert"),l7r=o(" \u2014 "),tH=a("a"),i7r=o("TFBertForMaskedLM"),d7r=o(" (BERT model)"),c7r=l(),HM=a("li"),Xbe=a("strong"),f7r=o("camembert"),m7r=o(" \u2014 "),aH=a("a"),g7r=o("TFCamembertForMaskedLM"),h7r=o(" (CamemBERT model)"),p7r=l(),UM=a("li"),zbe=a("strong"),_7r=o("convbert"),u7r=o(" \u2014 "),nH=a("a"),b7r=o("TFConvBertForMaskedLM"),v7r=o(" (ConvBERT model)"),F7r=l(),JM=a("li"),Wbe=a("strong"),T7r=o("deberta"),M7r=o(" \u2014 "),sH=a("a"),E7r=o("TFDebertaForMaskedLM"),C7r=o(" (DeBERTa model)"),w7r=l(),YM=a("li"),Qbe=a("strong"),A7r=o("deberta-v2"),y7r=o(" \u2014 "),lH=a("a"),L7r=o("TFDebertaV2ForMaskedLM"),x7r=o(" (DeBERTa-v2 model)"),$7r=l(),KM=a("li"),Hbe=a("strong"),k7r=o("distilbert"),S7r=o(" \u2014 "),iH=a("a"),R7r=o("TFDistilBertForMaskedLM"),P7r=o(" (DistilBERT model)"),B7r=l(),ZM=a("li"),Ube=a("strong"),I7r=o("electra"),N7r=o(" \u2014 "),dH=a("a"),q7r=o("TFElectraForMaskedLM"),j7r=o(" (ELECTRA model)"),D7r=l(),eE=a("li"),Jbe=a("strong"),G7r=o("flaubert"),O7r=o(" \u2014 "),cH=a("a"),V7r=o("TFFlaubertWithLMHeadModel"),X7r=o(" (FlauBERT model)"),z7r=l(),oE=a("li"),Ybe=a("strong"),W7r=o("funnel"),Q7r=o(" \u2014 "),fH=a("a"),H7r=o("TFFunnelForMaskedLM"),U7r=o(" (Funnel Transformer model)"),J7r=l(),rE=a("li"),Kbe=a("strong"),Y7r=o("layoutlm"),K7r=o(" \u2014 "),mH=a("a"),Z7r=o("TFLayoutLMForMaskedLM"),ebr=o(" (LayoutLM model)"),obr=l(),tE=a("li"),Zbe=a("strong"),rbr=o("longformer"),tbr=o(" \u2014 "),gH=a("a"),abr=o("TFLongformerForMaskedLM"),nbr=o(" (Longformer model)"),sbr=l(),aE=a("li"),e4e=a("strong"),lbr=o("mobilebert"),ibr=o(" \u2014 "),hH=a("a"),dbr=o("TFMobileBertForMaskedLM"),cbr=o(" (MobileBERT model)"),fbr=l(),nE=a("li"),o4e=a("strong"),mbr=o("mpnet"),gbr=o(" \u2014 "),pH=a("a"),hbr=o("TFMPNetForMaskedLM"),pbr=o(" (MPNet model)"),_br=l(),sE=a("li"),r4e=a("strong"),ubr=o("rembert"),bbr=o(" \u2014 "),_H=a("a"),vbr=o("TFRemBertForMaskedLM"),Fbr=o(" (RemBERT model)"),Tbr=l(),lE=a("li"),t4e=a("strong"),Mbr=o("roberta"),Ebr=o(" \u2014 "),uH=a("a"),Cbr=o("TFRobertaForMaskedLM"),wbr=o(" (RoBERTa model)"),Abr=l(),iE=a("li"),a4e=a("strong"),ybr=o("roformer"),Lbr=o(" \u2014 "),bH=a("a"),xbr=o("TFRoFormerForMaskedLM"),$br=o(" (RoFormer model)"),kbr=l(),dE=a("li"),n4e=a("strong"),Sbr=o("tapas"),Rbr=o(" \u2014 "),vH=a("a"),Pbr=o("TFTapasForMaskedLM"),Bbr=o(" (TAPAS model)"),Ibr=l(),cE=a("li"),s4e=a("strong"),Nbr=o("xlm"),qbr=o(" \u2014 "),FH=a("a"),jbr=o("TFXLMWithLMHeadModel"),Dbr=o(" (XLM model)"),Gbr=l(),fE=a("li"),l4e=a("strong"),Obr=o("xlm-roberta"),Vbr=o(" \u2014 "),TH=a("a"),Xbr=o("TFXLMRobertaForMaskedLM"),zbr=o(" (XLM-RoBERTa model)"),Wbr=l(),F(mE.$$.fragment),Tje=l(),tc=a("h2"),gE=a("a"),i4e=a("span"),F(B8.$$.fragment),Qbr=l(),d4e=a("span"),Hbr=o("TFAutoModelForSeq2SeqLM"),Mje=l(),rr=a("div"),F(I8.$$.fragment),Ubr=l(),ac=a("p"),Jbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=a("a"),Ybr=o("from_pretrained()"),Kbr=o(" class method or the "),EH=a("a"),Zbr=o("from_config()"),e4r=o(` class
method.`),o4r=l(),N8=a("p"),r4r=o("This class cannot be instantiated directly using "),c4e=a("code"),t4r=o("__init__()"),a4r=o(" (throws an error)."),n4r=l(),Rt=a("div"),F(q8.$$.fragment),s4r=l(),f4e=a("p"),l4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i4r=l(),nc=a("p"),d4r=o(`Note:
Loading a model from its configuration file does `),m4e=a("strong"),c4r=o("not"),f4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),m4r=o("from_pretrained()"),g4r=o(" to load the model weights."),h4r=l(),F(hE.$$.fragment),p4r=l(),$r=a("div"),F(j8.$$.fragment),_4r=l(),g4e=a("p"),u4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),b4r=l(),an=a("p"),v4r=o("The model class to instantiate is selected based on the "),h4e=a("code"),F4r=o("model_type"),T4r=o(` property of the config object (either
passed as an argument or loaded from `),p4e=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=a("code"),C4r=o("pretrained_model_name_or_path"),w4r=o(":"),A4r=l(),ye=a("ul"),pE=a("li"),u4e=a("strong"),y4r=o("bart"),L4r=o(" \u2014 "),wH=a("a"),x4r=o("TFBartForConditionalGeneration"),$4r=o(" (BART model)"),k4r=l(),_E=a("li"),b4e=a("strong"),S4r=o("blenderbot"),R4r=o(" \u2014 "),AH=a("a"),P4r=o("TFBlenderbotForConditionalGeneration"),B4r=o(" (Blenderbot model)"),I4r=l(),uE=a("li"),v4e=a("strong"),N4r=o("blenderbot-small"),q4r=o(" \u2014 "),yH=a("a"),j4r=o("TFBlenderbotSmallForConditionalGeneration"),D4r=o(" (BlenderbotSmall model)"),G4r=l(),bE=a("li"),F4e=a("strong"),O4r=o("encoder-decoder"),V4r=o(" \u2014 "),LH=a("a"),X4r=o("TFEncoderDecoderModel"),z4r=o(" (Encoder decoder model)"),W4r=l(),vE=a("li"),T4e=a("strong"),Q4r=o("led"),H4r=o(" \u2014 "),xH=a("a"),U4r=o("TFLEDForConditionalGeneration"),J4r=o(" (LED model)"),Y4r=l(),FE=a("li"),M4e=a("strong"),K4r=o("marian"),Z4r=o(" \u2014 "),$H=a("a"),evr=o("TFMarianMTModel"),ovr=o(" (Marian model)"),rvr=l(),TE=a("li"),E4e=a("strong"),tvr=o("mbart"),avr=o(" \u2014 "),kH=a("a"),nvr=o("TFMBartForConditionalGeneration"),svr=o(" (mBART model)"),lvr=l(),ME=a("li"),C4e=a("strong"),ivr=o("mt5"),dvr=o(" \u2014 "),SH=a("a"),cvr=o("TFMT5ForConditionalGeneration"),fvr=o(" (mT5 model)"),mvr=l(),EE=a("li"),w4e=a("strong"),gvr=o("pegasus"),hvr=o(" \u2014 "),RH=a("a"),pvr=o("TFPegasusForConditionalGeneration"),_vr=o(" (Pegasus model)"),uvr=l(),CE=a("li"),A4e=a("strong"),bvr=o("t5"),vvr=o(" \u2014 "),PH=a("a"),Fvr=o("TFT5ForConditionalGeneration"),Tvr=o(" (T5 model)"),Mvr=l(),F(wE.$$.fragment),Eje=l(),sc=a("h2"),AE=a("a"),y4e=a("span"),F(D8.$$.fragment),Evr=l(),L4e=a("span"),Cvr=o("TFAutoModelForSequenceClassification"),Cje=l(),tr=a("div"),F(G8.$$.fragment),wvr=l(),lc=a("p"),Avr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=a("a"),yvr=o("from_pretrained()"),Lvr=o(" class method or the "),IH=a("a"),xvr=o("from_config()"),$vr=o(` class
method.`),kvr=l(),O8=a("p"),Svr=o("This class cannot be instantiated directly using "),x4e=a("code"),Rvr=o("__init__()"),Pvr=o(" (throws an error)."),Bvr=l(),Pt=a("div"),F(V8.$$.fragment),Ivr=l(),$4e=a("p"),Nvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qvr=l(),ic=a("p"),jvr=o(`Note:
Loading a model from its configuration file does `),k4e=a("strong"),Dvr=o("not"),Gvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Ovr=o("from_pretrained()"),Vvr=o(" to load the model weights."),Xvr=l(),F(yE.$$.fragment),zvr=l(),kr=a("div"),F(X8.$$.fragment),Wvr=l(),S4e=a("p"),Qvr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Hvr=l(),nn=a("p"),Uvr=o("The model class to instantiate is selected based on the "),R4e=a("code"),Jvr=o("model_type"),Yvr=o(` property of the config object (either
passed as an argument or loaded from `),P4e=a("code"),Kvr=o("pretrained_model_name_or_path"),Zvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=a("code"),eFr=o("pretrained_model_name_or_path"),oFr=o(":"),rFr=l(),oe=a("ul"),LE=a("li"),I4e=a("strong"),tFr=o("albert"),aFr=o(" \u2014 "),qH=a("a"),nFr=o("TFAlbertForSequenceClassification"),sFr=o(" (ALBERT model)"),lFr=l(),xE=a("li"),N4e=a("strong"),iFr=o("bert"),dFr=o(" \u2014 "),jH=a("a"),cFr=o("TFBertForSequenceClassification"),fFr=o(" (BERT model)"),mFr=l(),$E=a("li"),q4e=a("strong"),gFr=o("camembert"),hFr=o(" \u2014 "),DH=a("a"),pFr=o("TFCamembertForSequenceClassification"),_Fr=o(" (CamemBERT model)"),uFr=l(),kE=a("li"),j4e=a("strong"),bFr=o("convbert"),vFr=o(" \u2014 "),GH=a("a"),FFr=o("TFConvBertForSequenceClassification"),TFr=o(" (ConvBERT model)"),MFr=l(),SE=a("li"),D4e=a("strong"),EFr=o("ctrl"),CFr=o(" \u2014 "),OH=a("a"),wFr=o("TFCTRLForSequenceClassification"),AFr=o(" (CTRL model)"),yFr=l(),RE=a("li"),G4e=a("strong"),LFr=o("deberta"),xFr=o(" \u2014 "),VH=a("a"),$Fr=o("TFDebertaForSequenceClassification"),kFr=o(" (DeBERTa model)"),SFr=l(),PE=a("li"),O4e=a("strong"),RFr=o("deberta-v2"),PFr=o(" \u2014 "),XH=a("a"),BFr=o("TFDebertaV2ForSequenceClassification"),IFr=o(" (DeBERTa-v2 model)"),NFr=l(),BE=a("li"),V4e=a("strong"),qFr=o("distilbert"),jFr=o(" \u2014 "),zH=a("a"),DFr=o("TFDistilBertForSequenceClassification"),GFr=o(" (DistilBERT model)"),OFr=l(),IE=a("li"),X4e=a("strong"),VFr=o("electra"),XFr=o(" \u2014 "),WH=a("a"),zFr=o("TFElectraForSequenceClassification"),WFr=o(" (ELECTRA model)"),QFr=l(),NE=a("li"),z4e=a("strong"),HFr=o("flaubert"),UFr=o(" \u2014 "),QH=a("a"),JFr=o("TFFlaubertForSequenceClassification"),YFr=o(" (FlauBERT model)"),KFr=l(),qE=a("li"),W4e=a("strong"),ZFr=o("funnel"),eTr=o(" \u2014 "),HH=a("a"),oTr=o("TFFunnelForSequenceClassification"),rTr=o(" (Funnel Transformer model)"),tTr=l(),jE=a("li"),Q4e=a("strong"),aTr=o("gpt2"),nTr=o(" \u2014 "),UH=a("a"),sTr=o("TFGPT2ForSequenceClassification"),lTr=o(" (OpenAI GPT-2 model)"),iTr=l(),DE=a("li"),H4e=a("strong"),dTr=o("gptj"),cTr=o(" \u2014 "),JH=a("a"),fTr=o("TFGPTJForSequenceClassification"),mTr=o(" (GPT-J model)"),gTr=l(),GE=a("li"),U4e=a("strong"),hTr=o("layoutlm"),pTr=o(" \u2014 "),YH=a("a"),_Tr=o("TFLayoutLMForSequenceClassification"),uTr=o(" (LayoutLM model)"),bTr=l(),OE=a("li"),J4e=a("strong"),vTr=o("longformer"),FTr=o(" \u2014 "),KH=a("a"),TTr=o("TFLongformerForSequenceClassification"),MTr=o(" (Longformer model)"),ETr=l(),VE=a("li"),Y4e=a("strong"),CTr=o("mobilebert"),wTr=o(" \u2014 "),ZH=a("a"),ATr=o("TFMobileBertForSequenceClassification"),yTr=o(" (MobileBERT model)"),LTr=l(),XE=a("li"),K4e=a("strong"),xTr=o("mpnet"),$Tr=o(" \u2014 "),eU=a("a"),kTr=o("TFMPNetForSequenceClassification"),STr=o(" (MPNet model)"),RTr=l(),zE=a("li"),Z4e=a("strong"),PTr=o("openai-gpt"),BTr=o(" \u2014 "),oU=a("a"),ITr=o("TFOpenAIGPTForSequenceClassification"),NTr=o(" (OpenAI GPT model)"),qTr=l(),WE=a("li"),eve=a("strong"),jTr=o("rembert"),DTr=o(" \u2014 "),rU=a("a"),GTr=o("TFRemBertForSequenceClassification"),OTr=o(" (RemBERT model)"),VTr=l(),QE=a("li"),ove=a("strong"),XTr=o("roberta"),zTr=o(" \u2014 "),tU=a("a"),WTr=o("TFRobertaForSequenceClassification"),QTr=o(" (RoBERTa model)"),HTr=l(),HE=a("li"),rve=a("strong"),UTr=o("roformer"),JTr=o(" \u2014 "),aU=a("a"),YTr=o("TFRoFormerForSequenceClassification"),KTr=o(" (RoFormer model)"),ZTr=l(),UE=a("li"),tve=a("strong"),eMr=o("tapas"),oMr=o(" \u2014 "),nU=a("a"),rMr=o("TFTapasForSequenceClassification"),tMr=o(" (TAPAS model)"),aMr=l(),JE=a("li"),ave=a("strong"),nMr=o("transfo-xl"),sMr=o(" \u2014 "),sU=a("a"),lMr=o("TFTransfoXLForSequenceClassification"),iMr=o(" (Transformer-XL model)"),dMr=l(),YE=a("li"),nve=a("strong"),cMr=o("xlm"),fMr=o(" \u2014 "),lU=a("a"),mMr=o("TFXLMForSequenceClassification"),gMr=o(" (XLM model)"),hMr=l(),KE=a("li"),sve=a("strong"),pMr=o("xlm-roberta"),_Mr=o(" \u2014 "),iU=a("a"),uMr=o("TFXLMRobertaForSequenceClassification"),bMr=o(" (XLM-RoBERTa model)"),vMr=l(),ZE=a("li"),lve=a("strong"),FMr=o("xlnet"),TMr=o(" \u2014 "),dU=a("a"),MMr=o("TFXLNetForSequenceClassification"),EMr=o(" (XLNet model)"),CMr=l(),F(eC.$$.fragment),wje=l(),dc=a("h2"),oC=a("a"),ive=a("span"),F(z8.$$.fragment),wMr=l(),dve=a("span"),AMr=o("TFAutoModelForMultipleChoice"),Aje=l(),ar=a("div"),F(W8.$$.fragment),yMr=l(),cc=a("p"),LMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=a("a"),xMr=o("from_pretrained()"),$Mr=o(" class method or the "),fU=a("a"),kMr=o("from_config()"),SMr=o(` class
method.`),RMr=l(),Q8=a("p"),PMr=o("This class cannot be instantiated directly using "),cve=a("code"),BMr=o("__init__()"),IMr=o(" (throws an error)."),NMr=l(),Bt=a("div"),F(H8.$$.fragment),qMr=l(),fve=a("p"),jMr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),DMr=l(),fc=a("p"),GMr=o(`Note:
Loading a model from its configuration file does `),mve=a("strong"),OMr=o("not"),VMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),XMr=o("from_pretrained()"),zMr=o(" to load the model weights."),WMr=l(),F(rC.$$.fragment),QMr=l(),Sr=a("div"),F(U8.$$.fragment),HMr=l(),gve=a("p"),UMr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),JMr=l(),sn=a("p"),YMr=o("The model class to instantiate is selected based on the "),hve=a("code"),KMr=o("model_type"),ZMr=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),eEr=o("pretrained_model_name_or_path"),oEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),rEr=o("pretrained_model_name_or_path"),tEr=o(":"),aEr=l(),pe=a("ul"),tC=a("li"),uve=a("strong"),nEr=o("albert"),sEr=o(" \u2014 "),gU=a("a"),lEr=o("TFAlbertForMultipleChoice"),iEr=o(" (ALBERT model)"),dEr=l(),aC=a("li"),bve=a("strong"),cEr=o("bert"),fEr=o(" \u2014 "),hU=a("a"),mEr=o("TFBertForMultipleChoice"),gEr=o(" (BERT model)"),hEr=l(),nC=a("li"),vve=a("strong"),pEr=o("camembert"),_Er=o(" \u2014 "),pU=a("a"),uEr=o("TFCamembertForMultipleChoice"),bEr=o(" (CamemBERT model)"),vEr=l(),sC=a("li"),Fve=a("strong"),FEr=o("convbert"),TEr=o(" \u2014 "),_U=a("a"),MEr=o("TFConvBertForMultipleChoice"),EEr=o(" (ConvBERT model)"),CEr=l(),lC=a("li"),Tve=a("strong"),wEr=o("distilbert"),AEr=o(" \u2014 "),uU=a("a"),yEr=o("TFDistilBertForMultipleChoice"),LEr=o(" (DistilBERT model)"),xEr=l(),iC=a("li"),Mve=a("strong"),$Er=o("electra"),kEr=o(" \u2014 "),bU=a("a"),SEr=o("TFElectraForMultipleChoice"),REr=o(" (ELECTRA model)"),PEr=l(),dC=a("li"),Eve=a("strong"),BEr=o("flaubert"),IEr=o(" \u2014 "),vU=a("a"),NEr=o("TFFlaubertForMultipleChoice"),qEr=o(" (FlauBERT model)"),jEr=l(),cC=a("li"),Cve=a("strong"),DEr=o("funnel"),GEr=o(" \u2014 "),FU=a("a"),OEr=o("TFFunnelForMultipleChoice"),VEr=o(" (Funnel Transformer model)"),XEr=l(),fC=a("li"),wve=a("strong"),zEr=o("longformer"),WEr=o(" \u2014 "),TU=a("a"),QEr=o("TFLongformerForMultipleChoice"),HEr=o(" (Longformer model)"),UEr=l(),mC=a("li"),Ave=a("strong"),JEr=o("mobilebert"),YEr=o(" \u2014 "),MU=a("a"),KEr=o("TFMobileBertForMultipleChoice"),ZEr=o(" (MobileBERT model)"),eCr=l(),gC=a("li"),yve=a("strong"),oCr=o("mpnet"),rCr=o(" \u2014 "),EU=a("a"),tCr=o("TFMPNetForMultipleChoice"),aCr=o(" (MPNet model)"),nCr=l(),hC=a("li"),Lve=a("strong"),sCr=o("rembert"),lCr=o(" \u2014 "),CU=a("a"),iCr=o("TFRemBertForMultipleChoice"),dCr=o(" (RemBERT model)"),cCr=l(),pC=a("li"),xve=a("strong"),fCr=o("roberta"),mCr=o(" \u2014 "),wU=a("a"),gCr=o("TFRobertaForMultipleChoice"),hCr=o(" (RoBERTa model)"),pCr=l(),_C=a("li"),$ve=a("strong"),_Cr=o("roformer"),uCr=o(" \u2014 "),AU=a("a"),bCr=o("TFRoFormerForMultipleChoice"),vCr=o(" (RoFormer model)"),FCr=l(),uC=a("li"),kve=a("strong"),TCr=o("xlm"),MCr=o(" \u2014 "),yU=a("a"),ECr=o("TFXLMForMultipleChoice"),CCr=o(" (XLM model)"),wCr=l(),bC=a("li"),Sve=a("strong"),ACr=o("xlm-roberta"),yCr=o(" \u2014 "),LU=a("a"),LCr=o("TFXLMRobertaForMultipleChoice"),xCr=o(" (XLM-RoBERTa model)"),$Cr=l(),vC=a("li"),Rve=a("strong"),kCr=o("xlnet"),SCr=o(" \u2014 "),xU=a("a"),RCr=o("TFXLNetForMultipleChoice"),PCr=o(" (XLNet model)"),BCr=l(),F(FC.$$.fragment),yje=l(),mc=a("h2"),TC=a("a"),Pve=a("span"),F(J8.$$.fragment),ICr=l(),Bve=a("span"),NCr=o("TFAutoModelForNextSentencePrediction"),Lje=l(),nr=a("div"),F(Y8.$$.fragment),qCr=l(),gc=a("p"),jCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=a("a"),DCr=o("from_pretrained()"),GCr=o(" class method or the "),kU=a("a"),OCr=o("from_config()"),VCr=o(` class
method.`),XCr=l(),K8=a("p"),zCr=o("This class cannot be instantiated directly using "),Ive=a("code"),WCr=o("__init__()"),QCr=o(" (throws an error)."),HCr=l(),It=a("div"),F(Z8.$$.fragment),UCr=l(),Nve=a("p"),JCr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YCr=l(),hc=a("p"),KCr=o(`Note:
Loading a model from its configuration file does `),qve=a("strong"),ZCr=o("not"),e5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=a("a"),o5r=o("from_pretrained()"),r5r=o(" to load the model weights."),t5r=l(),F(MC.$$.fragment),a5r=l(),Rr=a("div"),F(e9.$$.fragment),n5r=l(),jve=a("p"),s5r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),l5r=l(),ln=a("p"),i5r=o("The model class to instantiate is selected based on the "),Dve=a("code"),d5r=o("model_type"),c5r=o(` property of the config object (either
passed as an argument or loaded from `),Gve=a("code"),f5r=o("pretrained_model_name_or_path"),m5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=a("code"),g5r=o("pretrained_model_name_or_path"),h5r=o(":"),p5r=l(),o9=a("ul"),EC=a("li"),Vve=a("strong"),_5r=o("bert"),u5r=o(" \u2014 "),RU=a("a"),b5r=o("TFBertForNextSentencePrediction"),v5r=o(" (BERT model)"),F5r=l(),CC=a("li"),Xve=a("strong"),T5r=o("mobilebert"),M5r=o(" \u2014 "),PU=a("a"),E5r=o("TFMobileBertForNextSentencePrediction"),C5r=o(" (MobileBERT model)"),w5r=l(),F(wC.$$.fragment),xje=l(),pc=a("h2"),AC=a("a"),zve=a("span"),F(r9.$$.fragment),A5r=l(),Wve=a("span"),y5r=o("TFAutoModelForTableQuestionAnswering"),$je=l(),sr=a("div"),F(t9.$$.fragment),L5r=l(),_c=a("p"),x5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=a("a"),$5r=o("from_pretrained()"),k5r=o(" class method or the "),IU=a("a"),S5r=o("from_config()"),R5r=o(` class
method.`),P5r=l(),a9=a("p"),B5r=o("This class cannot be instantiated directly using "),Qve=a("code"),I5r=o("__init__()"),N5r=o(" (throws an error)."),q5r=l(),Nt=a("div"),F(n9.$$.fragment),j5r=l(),Hve=a("p"),D5r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),G5r=l(),uc=a("p"),O5r=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),V5r=o("not"),X5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=a("a"),z5r=o("from_pretrained()"),W5r=o(" to load the model weights."),Q5r=l(),F(yC.$$.fragment),H5r=l(),Pr=a("div"),F(s9.$$.fragment),U5r=l(),Jve=a("p"),J5r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Y5r=l(),dn=a("p"),K5r=o("The model class to instantiate is selected based on the "),Yve=a("code"),Z5r=o("model_type"),e3r=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),o3r=o("pretrained_model_name_or_path"),r3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),t3r=o("pretrained_model_name_or_path"),a3r=o(":"),n3r=l(),eFe=a("ul"),LC=a("li"),oFe=a("strong"),s3r=o("tapas"),l3r=o(" \u2014 "),qU=a("a"),i3r=o("TFTapasForQuestionAnswering"),d3r=o(" (TAPAS model)"),c3r=l(),F(xC.$$.fragment),kje=l(),bc=a("h2"),$C=a("a"),rFe=a("span"),F(l9.$$.fragment),f3r=l(),tFe=a("span"),m3r=o("TFAutoModelForTokenClassification"),Sje=l(),lr=a("div"),F(i9.$$.fragment),g3r=l(),vc=a("p"),h3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=a("a"),p3r=o("from_pretrained()"),_3r=o(" class method or the "),DU=a("a"),u3r=o("from_config()"),b3r=o(` class
method.`),v3r=l(),d9=a("p"),F3r=o("This class cannot be instantiated directly using "),aFe=a("code"),T3r=o("__init__()"),M3r=o(" (throws an error)."),E3r=l(),qt=a("div"),F(c9.$$.fragment),C3r=l(),nFe=a("p"),w3r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),A3r=l(),Fc=a("p"),y3r=o(`Note:
Loading a model from its configuration file does `),sFe=a("strong"),L3r=o("not"),x3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),$3r=o("from_pretrained()"),k3r=o(" to load the model weights."),S3r=l(),F(kC.$$.fragment),R3r=l(),Br=a("div"),F(f9.$$.fragment),P3r=l(),lFe=a("p"),B3r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),I3r=l(),cn=a("p"),N3r=o("The model class to instantiate is selected based on the "),iFe=a("code"),q3r=o("model_type"),j3r=o(` property of the config object (either
passed as an argument or loaded from `),dFe=a("code"),D3r=o("pretrained_model_name_or_path"),G3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=a("code"),O3r=o("pretrained_model_name_or_path"),V3r=o(":"),X3r=l(),de=a("ul"),SC=a("li"),fFe=a("strong"),z3r=o("albert"),W3r=o(" \u2014 "),OU=a("a"),Q3r=o("TFAlbertForTokenClassification"),H3r=o(" (ALBERT model)"),U3r=l(),RC=a("li"),mFe=a("strong"),J3r=o("bert"),Y3r=o(" \u2014 "),VU=a("a"),K3r=o("TFBertForTokenClassification"),Z3r=o(" (BERT model)"),ewr=l(),PC=a("li"),gFe=a("strong"),owr=o("camembert"),rwr=o(" \u2014 "),XU=a("a"),twr=o("TFCamembertForTokenClassification"),awr=o(" (CamemBERT model)"),nwr=l(),BC=a("li"),hFe=a("strong"),swr=o("convbert"),lwr=o(" \u2014 "),zU=a("a"),iwr=o("TFConvBertForTokenClassification"),dwr=o(" (ConvBERT model)"),cwr=l(),IC=a("li"),pFe=a("strong"),fwr=o("deberta"),mwr=o(" \u2014 "),WU=a("a"),gwr=o("TFDebertaForTokenClassification"),hwr=o(" (DeBERTa model)"),pwr=l(),NC=a("li"),_Fe=a("strong"),_wr=o("deberta-v2"),uwr=o(" \u2014 "),QU=a("a"),bwr=o("TFDebertaV2ForTokenClassification"),vwr=o(" (DeBERTa-v2 model)"),Fwr=l(),qC=a("li"),uFe=a("strong"),Twr=o("distilbert"),Mwr=o(" \u2014 "),HU=a("a"),Ewr=o("TFDistilBertForTokenClassification"),Cwr=o(" (DistilBERT model)"),wwr=l(),jC=a("li"),bFe=a("strong"),Awr=o("electra"),ywr=o(" \u2014 "),UU=a("a"),Lwr=o("TFElectraForTokenClassification"),xwr=o(" (ELECTRA model)"),$wr=l(),DC=a("li"),vFe=a("strong"),kwr=o("flaubert"),Swr=o(" \u2014 "),JU=a("a"),Rwr=o("TFFlaubertForTokenClassification"),Pwr=o(" (FlauBERT model)"),Bwr=l(),GC=a("li"),FFe=a("strong"),Iwr=o("funnel"),Nwr=o(" \u2014 "),YU=a("a"),qwr=o("TFFunnelForTokenClassification"),jwr=o(" (Funnel Transformer model)"),Dwr=l(),OC=a("li"),TFe=a("strong"),Gwr=o("layoutlm"),Owr=o(" \u2014 "),KU=a("a"),Vwr=o("TFLayoutLMForTokenClassification"),Xwr=o(" (LayoutLM model)"),zwr=l(),VC=a("li"),MFe=a("strong"),Wwr=o("longformer"),Qwr=o(" \u2014 "),ZU=a("a"),Hwr=o("TFLongformerForTokenClassification"),Uwr=o(" (Longformer model)"),Jwr=l(),XC=a("li"),EFe=a("strong"),Ywr=o("mobilebert"),Kwr=o(" \u2014 "),eJ=a("a"),Zwr=o("TFMobileBertForTokenClassification"),e0r=o(" (MobileBERT model)"),o0r=l(),zC=a("li"),CFe=a("strong"),r0r=o("mpnet"),t0r=o(" \u2014 "),oJ=a("a"),a0r=o("TFMPNetForTokenClassification"),n0r=o(" (MPNet model)"),s0r=l(),WC=a("li"),wFe=a("strong"),l0r=o("rembert"),i0r=o(" \u2014 "),rJ=a("a"),d0r=o("TFRemBertForTokenClassification"),c0r=o(" (RemBERT model)"),f0r=l(),QC=a("li"),AFe=a("strong"),m0r=o("roberta"),g0r=o(" \u2014 "),tJ=a("a"),h0r=o("TFRobertaForTokenClassification"),p0r=o(" (RoBERTa model)"),_0r=l(),HC=a("li"),yFe=a("strong"),u0r=o("roformer"),b0r=o(" \u2014 "),aJ=a("a"),v0r=o("TFRoFormerForTokenClassification"),F0r=o(" (RoFormer model)"),T0r=l(),UC=a("li"),LFe=a("strong"),M0r=o("xlm"),E0r=o(" \u2014 "),nJ=a("a"),C0r=o("TFXLMForTokenClassification"),w0r=o(" (XLM model)"),A0r=l(),JC=a("li"),xFe=a("strong"),y0r=o("xlm-roberta"),L0r=o(" \u2014 "),sJ=a("a"),x0r=o("TFXLMRobertaForTokenClassification"),$0r=o(" (XLM-RoBERTa model)"),k0r=l(),YC=a("li"),$Fe=a("strong"),S0r=o("xlnet"),R0r=o(" \u2014 "),lJ=a("a"),P0r=o("TFXLNetForTokenClassification"),B0r=o(" (XLNet model)"),I0r=l(),F(KC.$$.fragment),Rje=l(),Tc=a("h2"),ZC=a("a"),kFe=a("span"),F(m9.$$.fragment),N0r=l(),SFe=a("span"),q0r=o("TFAutoModelForQuestionAnswering"),Pje=l(),ir=a("div"),F(g9.$$.fragment),j0r=l(),Mc=a("p"),D0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=a("a"),G0r=o("from_pretrained()"),O0r=o(" class method or the "),dJ=a("a"),V0r=o("from_config()"),X0r=o(` class
method.`),z0r=l(),h9=a("p"),W0r=o("This class cannot be instantiated directly using "),RFe=a("code"),Q0r=o("__init__()"),H0r=o(" (throws an error)."),U0r=l(),jt=a("div"),F(p9.$$.fragment),J0r=l(),PFe=a("p"),Y0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),K0r=l(),Ec=a("p"),Z0r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),e6r=o("not"),o6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=a("a"),r6r=o("from_pretrained()"),t6r=o(" to load the model weights."),a6r=l(),F(e5.$$.fragment),n6r=l(),Ir=a("div"),F(_9.$$.fragment),s6r=l(),IFe=a("p"),l6r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i6r=l(),fn=a("p"),d6r=o("The model class to instantiate is selected based on the "),NFe=a("code"),c6r=o("model_type"),f6r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),m6r=o("pretrained_model_name_or_path"),g6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),h6r=o("pretrained_model_name_or_path"),p6r=o(":"),_6r=l(),ce=a("ul"),o5=a("li"),DFe=a("strong"),u6r=o("albert"),b6r=o(" \u2014 "),fJ=a("a"),v6r=o("TFAlbertForQuestionAnswering"),F6r=o(" (ALBERT model)"),T6r=l(),r5=a("li"),GFe=a("strong"),M6r=o("bert"),E6r=o(" \u2014 "),mJ=a("a"),C6r=o("TFBertForQuestionAnswering"),w6r=o(" (BERT model)"),A6r=l(),t5=a("li"),OFe=a("strong"),y6r=o("camembert"),L6r=o(" \u2014 "),gJ=a("a"),x6r=o("TFCamembertForQuestionAnswering"),$6r=o(" (CamemBERT model)"),k6r=l(),a5=a("li"),VFe=a("strong"),S6r=o("convbert"),R6r=o(" \u2014 "),hJ=a("a"),P6r=o("TFConvBertForQuestionAnswering"),B6r=o(" (ConvBERT model)"),I6r=l(),n5=a("li"),XFe=a("strong"),N6r=o("deberta"),q6r=o(" \u2014 "),pJ=a("a"),j6r=o("TFDebertaForQuestionAnswering"),D6r=o(" (DeBERTa model)"),G6r=l(),s5=a("li"),zFe=a("strong"),O6r=o("deberta-v2"),V6r=o(" \u2014 "),_J=a("a"),X6r=o("TFDebertaV2ForQuestionAnswering"),z6r=o(" (DeBERTa-v2 model)"),W6r=l(),l5=a("li"),WFe=a("strong"),Q6r=o("distilbert"),H6r=o(" \u2014 "),uJ=a("a"),U6r=o("TFDistilBertForQuestionAnswering"),J6r=o(" (DistilBERT model)"),Y6r=l(),i5=a("li"),QFe=a("strong"),K6r=o("electra"),Z6r=o(" \u2014 "),bJ=a("a"),eAr=o("TFElectraForQuestionAnswering"),oAr=o(" (ELECTRA model)"),rAr=l(),d5=a("li"),HFe=a("strong"),tAr=o("flaubert"),aAr=o(" \u2014 "),vJ=a("a"),nAr=o("TFFlaubertForQuestionAnsweringSimple"),sAr=o(" (FlauBERT model)"),lAr=l(),c5=a("li"),UFe=a("strong"),iAr=o("funnel"),dAr=o(" \u2014 "),FJ=a("a"),cAr=o("TFFunnelForQuestionAnswering"),fAr=o(" (Funnel Transformer model)"),mAr=l(),f5=a("li"),JFe=a("strong"),gAr=o("gptj"),hAr=o(" \u2014 "),TJ=a("a"),pAr=o("TFGPTJForQuestionAnswering"),_Ar=o(" (GPT-J model)"),uAr=l(),m5=a("li"),YFe=a("strong"),bAr=o("longformer"),vAr=o(" \u2014 "),MJ=a("a"),FAr=o("TFLongformerForQuestionAnswering"),TAr=o(" (Longformer model)"),MAr=l(),g5=a("li"),KFe=a("strong"),EAr=o("mobilebert"),CAr=o(" \u2014 "),EJ=a("a"),wAr=o("TFMobileBertForQuestionAnswering"),AAr=o(" (MobileBERT model)"),yAr=l(),h5=a("li"),ZFe=a("strong"),LAr=o("mpnet"),xAr=o(" \u2014 "),CJ=a("a"),$Ar=o("TFMPNetForQuestionAnswering"),kAr=o(" (MPNet model)"),SAr=l(),p5=a("li"),eTe=a("strong"),RAr=o("rembert"),PAr=o(" \u2014 "),wJ=a("a"),BAr=o("TFRemBertForQuestionAnswering"),IAr=o(" (RemBERT model)"),NAr=l(),_5=a("li"),oTe=a("strong"),qAr=o("roberta"),jAr=o(" \u2014 "),AJ=a("a"),DAr=o("TFRobertaForQuestionAnswering"),GAr=o(" (RoBERTa model)"),OAr=l(),u5=a("li"),rTe=a("strong"),VAr=o("roformer"),XAr=o(" \u2014 "),yJ=a("a"),zAr=o("TFRoFormerForQuestionAnswering"),WAr=o(" (RoFormer model)"),QAr=l(),b5=a("li"),tTe=a("strong"),HAr=o("xlm"),UAr=o(" \u2014 "),LJ=a("a"),JAr=o("TFXLMForQuestionAnsweringSimple"),YAr=o(" (XLM model)"),KAr=l(),v5=a("li"),aTe=a("strong"),ZAr=o("xlm-roberta"),eyr=o(" \u2014 "),xJ=a("a"),oyr=o("TFXLMRobertaForQuestionAnswering"),ryr=o(" (XLM-RoBERTa model)"),tyr=l(),F5=a("li"),nTe=a("strong"),ayr=o("xlnet"),nyr=o(" \u2014 "),$J=a("a"),syr=o("TFXLNetForQuestionAnsweringSimple"),lyr=o(" (XLNet model)"),iyr=l(),F(T5.$$.fragment),Bje=l(),Cc=a("h2"),M5=a("a"),sTe=a("span"),F(u9.$$.fragment),dyr=l(),lTe=a("span"),cyr=o("TFAutoModelForVision2Seq"),Ije=l(),dr=a("div"),F(b9.$$.fragment),fyr=l(),wc=a("p"),myr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=a("a"),gyr=o("from_pretrained()"),hyr=o(" class method or the "),SJ=a("a"),pyr=o("from_config()"),_yr=o(` class
method.`),uyr=l(),v9=a("p"),byr=o("This class cannot be instantiated directly using "),iTe=a("code"),vyr=o("__init__()"),Fyr=o(" (throws an error)."),Tyr=l(),Dt=a("div"),F(F9.$$.fragment),Myr=l(),dTe=a("p"),Eyr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Cyr=l(),Ac=a("p"),wyr=o(`Note:
Loading a model from its configuration file does `),cTe=a("strong"),Ayr=o("not"),yyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=a("a"),Lyr=o("from_pretrained()"),xyr=o(" to load the model weights."),$yr=l(),F(E5.$$.fragment),kyr=l(),Nr=a("div"),F(T9.$$.fragment),Syr=l(),fTe=a("p"),Ryr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Pyr=l(),mn=a("p"),Byr=o("The model class to instantiate is selected based on the "),mTe=a("code"),Iyr=o("model_type"),Nyr=o(` property of the config object (either
passed as an argument or loaded from `),gTe=a("code"),qyr=o("pretrained_model_name_or_path"),jyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=a("code"),Dyr=o("pretrained_model_name_or_path"),Gyr=o(":"),Oyr=l(),pTe=a("ul"),C5=a("li"),_Te=a("strong"),Vyr=o("vision-encoder-decoder"),Xyr=o(" \u2014 "),PJ=a("a"),zyr=o("TFVisionEncoderDecoderModel"),Wyr=o(" (Vision Encoder decoder model)"),Qyr=l(),F(w5.$$.fragment),Nje=l(),yc=a("h2"),A5=a("a"),uTe=a("span"),F(M9.$$.fragment),Hyr=l(),bTe=a("span"),Uyr=o("TFAutoModelForSpeechSeq2Seq"),qje=l(),cr=a("div"),F(E9.$$.fragment),Jyr=l(),Lc=a("p"),Yyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=a("a"),Kyr=o("from_pretrained()"),Zyr=o(" class method or the "),IJ=a("a"),eLr=o("from_config()"),oLr=o(` class
method.`),rLr=l(),C9=a("p"),tLr=o("This class cannot be instantiated directly using "),vTe=a("code"),aLr=o("__init__()"),nLr=o(" (throws an error)."),sLr=l(),Gt=a("div"),F(w9.$$.fragment),lLr=l(),FTe=a("p"),iLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),dLr=l(),xc=a("p"),cLr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),fLr=o("not"),mLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=a("a"),gLr=o("from_pretrained()"),hLr=o(" to load the model weights."),pLr=l(),F(y5.$$.fragment),_Lr=l(),qr=a("div"),F(A9.$$.fragment),uLr=l(),MTe=a("p"),bLr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vLr=l(),gn=a("p"),FLr=o("The model class to instantiate is selected based on the "),ETe=a("code"),TLr=o("model_type"),MLr=o(` property of the config object (either
passed as an argument or loaded from `),CTe=a("code"),ELr=o("pretrained_model_name_or_path"),CLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=a("code"),wLr=o("pretrained_model_name_or_path"),ALr=o(":"),yLr=l(),ATe=a("ul"),L5=a("li"),yTe=a("strong"),LLr=o("speech_to_text"),xLr=o(" \u2014 "),qJ=a("a"),$Lr=o("TFSpeech2TextForConditionalGeneration"),kLr=o(" (Speech2Text model)"),SLr=l(),F(x5.$$.fragment),jje=l(),$c=a("h2"),$5=a("a"),LTe=a("span"),F(y9.$$.fragment),RLr=l(),xTe=a("span"),PLr=o("FlaxAutoModel"),Dje=l(),fr=a("div"),F(L9.$$.fragment),BLr=l(),kc=a("p"),ILr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=a("a"),NLr=o("from_pretrained()"),qLr=o(" class method or the "),DJ=a("a"),jLr=o("from_config()"),DLr=o(` class
method.`),GLr=l(),x9=a("p"),OLr=o("This class cannot be instantiated directly using "),$Te=a("code"),VLr=o("__init__()"),XLr=o(" (throws an error)."),zLr=l(),Ot=a("div"),F($9.$$.fragment),WLr=l(),kTe=a("p"),QLr=o("Instantiates one of the base model classes of the library from a configuration."),HLr=l(),Sc=a("p"),ULr=o(`Note:
Loading a model from its configuration file does `),STe=a("strong"),JLr=o("not"),YLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),KLr=o("from_pretrained()"),ZLr=o(" to load the model weights."),e8r=l(),F(k5.$$.fragment),o8r=l(),jr=a("div"),F(k9.$$.fragment),r8r=l(),RTe=a("p"),t8r=o("Instantiate one of the base model classes of the library from a pretrained model."),a8r=l(),hn=a("p"),n8r=o("The model class to instantiate is selected based on the "),PTe=a("code"),s8r=o("model_type"),l8r=o(` property of the config object (either
passed as an argument or loaded from `),BTe=a("code"),i8r=o("pretrained_model_name_or_path"),d8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=a("code"),c8r=o("pretrained_model_name_or_path"),f8r=o(":"),m8r=l(),te=a("ul"),S5=a("li"),NTe=a("strong"),g8r=o("albert"),h8r=o(" \u2014 "),OJ=a("a"),p8r=o("FlaxAlbertModel"),_8r=o(" (ALBERT model)"),u8r=l(),R5=a("li"),qTe=a("strong"),b8r=o("bart"),v8r=o(" \u2014 "),VJ=a("a"),F8r=o("FlaxBartModel"),T8r=o(" (BART model)"),M8r=l(),P5=a("li"),jTe=a("strong"),E8r=o("beit"),C8r=o(" \u2014 "),XJ=a("a"),w8r=o("FlaxBeitModel"),A8r=o(" (BEiT model)"),y8r=l(),B5=a("li"),DTe=a("strong"),L8r=o("bert"),x8r=o(" \u2014 "),zJ=a("a"),$8r=o("FlaxBertModel"),k8r=o(" (BERT model)"),S8r=l(),I5=a("li"),GTe=a("strong"),R8r=o("big_bird"),P8r=o(" \u2014 "),WJ=a("a"),B8r=o("FlaxBigBirdModel"),I8r=o(" (BigBird model)"),N8r=l(),N5=a("li"),OTe=a("strong"),q8r=o("blenderbot"),j8r=o(" \u2014 "),QJ=a("a"),D8r=o("FlaxBlenderbotModel"),G8r=o(" (Blenderbot model)"),O8r=l(),q5=a("li"),VTe=a("strong"),V8r=o("blenderbot-small"),X8r=o(" \u2014 "),HJ=a("a"),z8r=o("FlaxBlenderbotSmallModel"),W8r=o(" (BlenderbotSmall model)"),Q8r=l(),j5=a("li"),XTe=a("strong"),H8r=o("clip"),U8r=o(" \u2014 "),UJ=a("a"),J8r=o("FlaxCLIPModel"),Y8r=o(" (CLIP model)"),K8r=l(),D5=a("li"),zTe=a("strong"),Z8r=o("distilbert"),e9r=o(" \u2014 "),JJ=a("a"),o9r=o("FlaxDistilBertModel"),r9r=o(" (DistilBERT model)"),t9r=l(),G5=a("li"),WTe=a("strong"),a9r=o("electra"),n9r=o(" \u2014 "),YJ=a("a"),s9r=o("FlaxElectraModel"),l9r=o(" (ELECTRA model)"),i9r=l(),O5=a("li"),QTe=a("strong"),d9r=o("gpt2"),c9r=o(" \u2014 "),KJ=a("a"),f9r=o("FlaxGPT2Model"),m9r=o(" (OpenAI GPT-2 model)"),g9r=l(),V5=a("li"),HTe=a("strong"),h9r=o("gpt_neo"),p9r=o(" \u2014 "),ZJ=a("a"),_9r=o("FlaxGPTNeoModel"),u9r=o(" (GPT Neo model)"),b9r=l(),X5=a("li"),UTe=a("strong"),v9r=o("gptj"),F9r=o(" \u2014 "),eY=a("a"),T9r=o("FlaxGPTJModel"),M9r=o(" (GPT-J model)"),E9r=l(),z5=a("li"),JTe=a("strong"),C9r=o("marian"),w9r=o(" \u2014 "),oY=a("a"),A9r=o("FlaxMarianModel"),y9r=o(" (Marian model)"),L9r=l(),W5=a("li"),YTe=a("strong"),x9r=o("mbart"),$9r=o(" \u2014 "),rY=a("a"),k9r=o("FlaxMBartModel"),S9r=o(" (mBART model)"),R9r=l(),Q5=a("li"),KTe=a("strong"),P9r=o("mt5"),B9r=o(" \u2014 "),tY=a("a"),I9r=o("FlaxMT5Model"),N9r=o(" (mT5 model)"),q9r=l(),H5=a("li"),ZTe=a("strong"),j9r=o("pegasus"),D9r=o(" \u2014 "),aY=a("a"),G9r=o("FlaxPegasusModel"),O9r=o(" (Pegasus model)"),V9r=l(),U5=a("li"),eMe=a("strong"),X9r=o("roberta"),z9r=o(" \u2014 "),nY=a("a"),W9r=o("FlaxRobertaModel"),Q9r=o(" (RoBERTa model)"),H9r=l(),J5=a("li"),oMe=a("strong"),U9r=o("roformer"),J9r=o(" \u2014 "),sY=a("a"),Y9r=o("FlaxRoFormerModel"),K9r=o(" (RoFormer model)"),Z9r=l(),Y5=a("li"),rMe=a("strong"),exr=o("t5"),oxr=o(" \u2014 "),lY=a("a"),rxr=o("FlaxT5Model"),txr=o(" (T5 model)"),axr=l(),K5=a("li"),tMe=a("strong"),nxr=o("vision-text-dual-encoder"),sxr=o(" \u2014 "),iY=a("a"),lxr=o("FlaxVisionTextDualEncoderModel"),ixr=o(" (VisionTextDualEncoder model)"),dxr=l(),Z5=a("li"),aMe=a("strong"),cxr=o("vit"),fxr=o(" \u2014 "),dY=a("a"),mxr=o("FlaxViTModel"),gxr=o(" (ViT model)"),hxr=l(),e3=a("li"),nMe=a("strong"),pxr=o("wav2vec2"),_xr=o(" \u2014 "),cY=a("a"),uxr=o("FlaxWav2Vec2Model"),bxr=o(" (Wav2Vec2 model)"),vxr=l(),o3=a("li"),sMe=a("strong"),Fxr=o("xglm"),Txr=o(" \u2014 "),fY=a("a"),Mxr=o("FlaxXGLMModel"),Exr=o(" (XGLM model)"),Cxr=l(),r3=a("li"),lMe=a("strong"),wxr=o("xlm-roberta"),Axr=o(" \u2014 "),mY=a("a"),yxr=o("FlaxXLMRobertaModel"),Lxr=o(" (XLM-RoBERTa model)"),xxr=l(),F(t3.$$.fragment),Gje=l(),Rc=a("h2"),a3=a("a"),iMe=a("span"),F(S9.$$.fragment),$xr=l(),dMe=a("span"),kxr=o("FlaxAutoModelForCausalLM"),Oje=l(),mr=a("div"),F(R9.$$.fragment),Sxr=l(),Pc=a("p"),Rxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=a("a"),Pxr=o("from_pretrained()"),Bxr=o(" class method or the "),hY=a("a"),Ixr=o("from_config()"),Nxr=o(` class
method.`),qxr=l(),P9=a("p"),jxr=o("This class cannot be instantiated directly using "),cMe=a("code"),Dxr=o("__init__()"),Gxr=o(" (throws an error)."),Oxr=l(),Vt=a("div"),F(B9.$$.fragment),Vxr=l(),fMe=a("p"),Xxr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),zxr=l(),Bc=a("p"),Wxr=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),Qxr=o("not"),Hxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=a("a"),Uxr=o("from_pretrained()"),Jxr=o(" to load the model weights."),Yxr=l(),F(n3.$$.fragment),Kxr=l(),Dr=a("div"),F(I9.$$.fragment),Zxr=l(),gMe=a("p"),e$r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),o$r=l(),pn=a("p"),r$r=o("The model class to instantiate is selected based on the "),hMe=a("code"),t$r=o("model_type"),a$r=o(` property of the config object (either
passed as an argument or loaded from `),pMe=a("code"),n$r=o("pretrained_model_name_or_path"),s$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=a("code"),l$r=o("pretrained_model_name_or_path"),i$r=o(":"),d$r=l(),Re=a("ul"),s3=a("li"),uMe=a("strong"),c$r=o("bart"),f$r=o(" \u2014 "),_Y=a("a"),m$r=o("FlaxBartForCausalLM"),g$r=o(" (BART model)"),h$r=l(),l3=a("li"),bMe=a("strong"),p$r=o("bert"),_$r=o(" \u2014 "),uY=a("a"),u$r=o("FlaxBertForCausalLM"),b$r=o(" (BERT model)"),v$r=l(),i3=a("li"),vMe=a("strong"),F$r=o("big_bird"),T$r=o(" \u2014 "),bY=a("a"),M$r=o("FlaxBigBirdForCausalLM"),E$r=o(" (BigBird model)"),C$r=l(),d3=a("li"),FMe=a("strong"),w$r=o("electra"),A$r=o(" \u2014 "),vY=a("a"),y$r=o("FlaxElectraForCausalLM"),L$r=o(" (ELECTRA model)"),x$r=l(),c3=a("li"),TMe=a("strong"),$$r=o("gpt2"),k$r=o(" \u2014 "),FY=a("a"),S$r=o("FlaxGPT2LMHeadModel"),R$r=o(" (OpenAI GPT-2 model)"),P$r=l(),f3=a("li"),MMe=a("strong"),B$r=o("gpt_neo"),I$r=o(" \u2014 "),TY=a("a"),N$r=o("FlaxGPTNeoForCausalLM"),q$r=o(" (GPT Neo model)"),j$r=l(),m3=a("li"),EMe=a("strong"),D$r=o("gptj"),G$r=o(" \u2014 "),MY=a("a"),O$r=o("FlaxGPTJForCausalLM"),V$r=o(" (GPT-J model)"),X$r=l(),g3=a("li"),CMe=a("strong"),z$r=o("roberta"),W$r=o(" \u2014 "),EY=a("a"),Q$r=o("FlaxRobertaForCausalLM"),H$r=o(" (RoBERTa model)"),U$r=l(),h3=a("li"),wMe=a("strong"),J$r=o("xglm"),Y$r=o(" \u2014 "),CY=a("a"),K$r=o("FlaxXGLMForCausalLM"),Z$r=o(" (XGLM model)"),ekr=l(),F(p3.$$.fragment),Vje=l(),Ic=a("h2"),_3=a("a"),AMe=a("span"),F(N9.$$.fragment),okr=l(),yMe=a("span"),rkr=o("FlaxAutoModelForPreTraining"),Xje=l(),gr=a("div"),F(q9.$$.fragment),tkr=l(),Nc=a("p"),akr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=a("a"),nkr=o("from_pretrained()"),skr=o(" class method or the "),AY=a("a"),lkr=o("from_config()"),ikr=o(` class
method.`),dkr=l(),j9=a("p"),ckr=o("This class cannot be instantiated directly using "),LMe=a("code"),fkr=o("__init__()"),mkr=o(" (throws an error)."),gkr=l(),Xt=a("div"),F(D9.$$.fragment),hkr=l(),xMe=a("p"),pkr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_kr=l(),qc=a("p"),ukr=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),bkr=o("not"),vkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=a("a"),Fkr=o("from_pretrained()"),Tkr=o(" to load the model weights."),Mkr=l(),F(u3.$$.fragment),Ekr=l(),Gr=a("div"),F(G9.$$.fragment),Ckr=l(),kMe=a("p"),wkr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Akr=l(),_n=a("p"),ykr=o("The model class to instantiate is selected based on the "),SMe=a("code"),Lkr=o("model_type"),xkr=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),$kr=o("pretrained_model_name_or_path"),kkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),Skr=o("pretrained_model_name_or_path"),Rkr=o(":"),Pkr=l(),Ee=a("ul"),b3=a("li"),BMe=a("strong"),Bkr=o("albert"),Ikr=o(" \u2014 "),LY=a("a"),Nkr=o("FlaxAlbertForPreTraining"),qkr=o(" (ALBERT model)"),jkr=l(),v3=a("li"),IMe=a("strong"),Dkr=o("bart"),Gkr=o(" \u2014 "),xY=a("a"),Okr=o("FlaxBartForConditionalGeneration"),Vkr=o(" (BART model)"),Xkr=l(),F3=a("li"),NMe=a("strong"),zkr=o("bert"),Wkr=o(" \u2014 "),$Y=a("a"),Qkr=o("FlaxBertForPreTraining"),Hkr=o(" (BERT model)"),Ukr=l(),T3=a("li"),qMe=a("strong"),Jkr=o("big_bird"),Ykr=o(" \u2014 "),kY=a("a"),Kkr=o("FlaxBigBirdForPreTraining"),Zkr=o(" (BigBird model)"),eSr=l(),M3=a("li"),jMe=a("strong"),oSr=o("electra"),rSr=o(" \u2014 "),SY=a("a"),tSr=o("FlaxElectraForPreTraining"),aSr=o(" (ELECTRA model)"),nSr=l(),E3=a("li"),DMe=a("strong"),sSr=o("mbart"),lSr=o(" \u2014 "),RY=a("a"),iSr=o("FlaxMBartForConditionalGeneration"),dSr=o(" (mBART model)"),cSr=l(),C3=a("li"),GMe=a("strong"),fSr=o("mt5"),mSr=o(" \u2014 "),PY=a("a"),gSr=o("FlaxMT5ForConditionalGeneration"),hSr=o(" (mT5 model)"),pSr=l(),w3=a("li"),OMe=a("strong"),_Sr=o("roberta"),uSr=o(" \u2014 "),BY=a("a"),bSr=o("FlaxRobertaForMaskedLM"),vSr=o(" (RoBERTa model)"),FSr=l(),A3=a("li"),VMe=a("strong"),TSr=o("roformer"),MSr=o(" \u2014 "),IY=a("a"),ESr=o("FlaxRoFormerForMaskedLM"),CSr=o(" (RoFormer model)"),wSr=l(),y3=a("li"),XMe=a("strong"),ASr=o("t5"),ySr=o(" \u2014 "),NY=a("a"),LSr=o("FlaxT5ForConditionalGeneration"),xSr=o(" (T5 model)"),$Sr=l(),L3=a("li"),zMe=a("strong"),kSr=o("wav2vec2"),SSr=o(" \u2014 "),qY=a("a"),RSr=o("FlaxWav2Vec2ForPreTraining"),PSr=o(" (Wav2Vec2 model)"),BSr=l(),x3=a("li"),WMe=a("strong"),ISr=o("xlm-roberta"),NSr=o(" \u2014 "),jY=a("a"),qSr=o("FlaxXLMRobertaForMaskedLM"),jSr=o(" (XLM-RoBERTa model)"),DSr=l(),F($3.$$.fragment),zje=l(),jc=a("h2"),k3=a("a"),QMe=a("span"),F(O9.$$.fragment),GSr=l(),HMe=a("span"),OSr=o("FlaxAutoModelForMaskedLM"),Wje=l(),hr=a("div"),F(V9.$$.fragment),VSr=l(),Dc=a("p"),XSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=a("a"),zSr=o("from_pretrained()"),WSr=o(" class method or the "),GY=a("a"),QSr=o("from_config()"),HSr=o(` class
method.`),USr=l(),X9=a("p"),JSr=o("This class cannot be instantiated directly using "),UMe=a("code"),YSr=o("__init__()"),KSr=o(" (throws an error)."),ZSr=l(),zt=a("div"),F(z9.$$.fragment),eRr=l(),JMe=a("p"),oRr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),rRr=l(),Gc=a("p"),tRr=o(`Note:
Loading a model from its configuration file does `),YMe=a("strong"),aRr=o("not"),nRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),sRr=o("from_pretrained()"),lRr=o(" to load the model weights."),iRr=l(),F(S3.$$.fragment),dRr=l(),Or=a("div"),F(W9.$$.fragment),cRr=l(),KMe=a("p"),fRr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),mRr=l(),un=a("p"),gRr=o("The model class to instantiate is selected based on the "),ZMe=a("code"),hRr=o("model_type"),pRr=o(` property of the config object (either
passed as an argument or loaded from `),eEe=a("code"),_Rr=o("pretrained_model_name_or_path"),uRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=a("code"),bRr=o("pretrained_model_name_or_path"),vRr=o(":"),FRr=l(),Le=a("ul"),R3=a("li"),rEe=a("strong"),TRr=o("albert"),MRr=o(" \u2014 "),VY=a("a"),ERr=o("FlaxAlbertForMaskedLM"),CRr=o(" (ALBERT model)"),wRr=l(),P3=a("li"),tEe=a("strong"),ARr=o("bart"),yRr=o(" \u2014 "),XY=a("a"),LRr=o("FlaxBartForConditionalGeneration"),xRr=o(" (BART model)"),$Rr=l(),B3=a("li"),aEe=a("strong"),kRr=o("bert"),SRr=o(" \u2014 "),zY=a("a"),RRr=o("FlaxBertForMaskedLM"),PRr=o(" (BERT model)"),BRr=l(),I3=a("li"),nEe=a("strong"),IRr=o("big_bird"),NRr=o(" \u2014 "),WY=a("a"),qRr=o("FlaxBigBirdForMaskedLM"),jRr=o(" (BigBird model)"),DRr=l(),N3=a("li"),sEe=a("strong"),GRr=o("distilbert"),ORr=o(" \u2014 "),QY=a("a"),VRr=o("FlaxDistilBertForMaskedLM"),XRr=o(" (DistilBERT model)"),zRr=l(),q3=a("li"),lEe=a("strong"),WRr=o("electra"),QRr=o(" \u2014 "),HY=a("a"),HRr=o("FlaxElectraForMaskedLM"),URr=o(" (ELECTRA model)"),JRr=l(),j3=a("li"),iEe=a("strong"),YRr=o("mbart"),KRr=o(" \u2014 "),UY=a("a"),ZRr=o("FlaxMBartForConditionalGeneration"),ePr=o(" (mBART model)"),oPr=l(),D3=a("li"),dEe=a("strong"),rPr=o("roberta"),tPr=o(" \u2014 "),JY=a("a"),aPr=o("FlaxRobertaForMaskedLM"),nPr=o(" (RoBERTa model)"),sPr=l(),G3=a("li"),cEe=a("strong"),lPr=o("roformer"),iPr=o(" \u2014 "),YY=a("a"),dPr=o("FlaxRoFormerForMaskedLM"),cPr=o(" (RoFormer model)"),fPr=l(),O3=a("li"),fEe=a("strong"),mPr=o("xlm-roberta"),gPr=o(" \u2014 "),KY=a("a"),hPr=o("FlaxXLMRobertaForMaskedLM"),pPr=o(" (XLM-RoBERTa model)"),_Pr=l(),F(V3.$$.fragment),Qje=l(),Oc=a("h2"),X3=a("a"),mEe=a("span"),F(Q9.$$.fragment),uPr=l(),gEe=a("span"),bPr=o("FlaxAutoModelForSeq2SeqLM"),Hje=l(),pr=a("div"),F(H9.$$.fragment),vPr=l(),Vc=a("p"),FPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=a("a"),TPr=o("from_pretrained()"),MPr=o(" class method or the "),eK=a("a"),EPr=o("from_config()"),CPr=o(` class
method.`),wPr=l(),U9=a("p"),APr=o("This class cannot be instantiated directly using "),hEe=a("code"),yPr=o("__init__()"),LPr=o(" (throws an error)."),xPr=l(),Wt=a("div"),F(J9.$$.fragment),$Pr=l(),pEe=a("p"),kPr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),SPr=l(),Xc=a("p"),RPr=o(`Note:
Loading a model from its configuration file does `),_Ee=a("strong"),PPr=o("not"),BPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),IPr=o("from_pretrained()"),NPr=o(" to load the model weights."),qPr=l(),F(z3.$$.fragment),jPr=l(),Vr=a("div"),F(Y9.$$.fragment),DPr=l(),uEe=a("p"),GPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OPr=l(),bn=a("p"),VPr=o("The model class to instantiate is selected based on the "),bEe=a("code"),XPr=o("model_type"),zPr=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),WPr=o("pretrained_model_name_or_path"),QPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),HPr=o("pretrained_model_name_or_path"),UPr=o(":"),JPr=l(),Pe=a("ul"),W3=a("li"),TEe=a("strong"),YPr=o("bart"),KPr=o(" \u2014 "),rK=a("a"),ZPr=o("FlaxBartForConditionalGeneration"),eBr=o(" (BART model)"),oBr=l(),Q3=a("li"),MEe=a("strong"),rBr=o("blenderbot"),tBr=o(" \u2014 "),tK=a("a"),aBr=o("FlaxBlenderbotForConditionalGeneration"),nBr=o(" (Blenderbot model)"),sBr=l(),H3=a("li"),EEe=a("strong"),lBr=o("blenderbot-small"),iBr=o(" \u2014 "),aK=a("a"),dBr=o("FlaxBlenderbotSmallForConditionalGeneration"),cBr=o(" (BlenderbotSmall model)"),fBr=l(),U3=a("li"),CEe=a("strong"),mBr=o("encoder-decoder"),gBr=o(" \u2014 "),nK=a("a"),hBr=o("FlaxEncoderDecoderModel"),pBr=o(" (Encoder decoder model)"),_Br=l(),J3=a("li"),wEe=a("strong"),uBr=o("marian"),bBr=o(" \u2014 "),sK=a("a"),vBr=o("FlaxMarianMTModel"),FBr=o(" (Marian model)"),TBr=l(),Y3=a("li"),AEe=a("strong"),MBr=o("mbart"),EBr=o(" \u2014 "),lK=a("a"),CBr=o("FlaxMBartForConditionalGeneration"),wBr=o(" (mBART model)"),ABr=l(),K3=a("li"),yEe=a("strong"),yBr=o("mt5"),LBr=o(" \u2014 "),iK=a("a"),xBr=o("FlaxMT5ForConditionalGeneration"),$Br=o(" (mT5 model)"),kBr=l(),Z3=a("li"),LEe=a("strong"),SBr=o("pegasus"),RBr=o(" \u2014 "),dK=a("a"),PBr=o("FlaxPegasusForConditionalGeneration"),BBr=o(" (Pegasus model)"),IBr=l(),ew=a("li"),xEe=a("strong"),NBr=o("t5"),qBr=o(" \u2014 "),cK=a("a"),jBr=o("FlaxT5ForConditionalGeneration"),DBr=o(" (T5 model)"),GBr=l(),F(ow.$$.fragment),Uje=l(),zc=a("h2"),rw=a("a"),$Ee=a("span"),F(K9.$$.fragment),OBr=l(),kEe=a("span"),VBr=o("FlaxAutoModelForSequenceClassification"),Jje=l(),_r=a("div"),F(Z9.$$.fragment),XBr=l(),Wc=a("p"),zBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=a("a"),WBr=o("from_pretrained()"),QBr=o(" class method or the "),mK=a("a"),HBr=o("from_config()"),UBr=o(` class
method.`),JBr=l(),ex=a("p"),YBr=o("This class cannot be instantiated directly using "),SEe=a("code"),KBr=o("__init__()"),ZBr=o(" (throws an error)."),eIr=l(),Qt=a("div"),F(ox.$$.fragment),oIr=l(),REe=a("p"),rIr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),tIr=l(),Qc=a("p"),aIr=o(`Note:
Loading a model from its configuration file does `),PEe=a("strong"),nIr=o("not"),sIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),lIr=o("from_pretrained()"),iIr=o(" to load the model weights."),dIr=l(),F(tw.$$.fragment),cIr=l(),Xr=a("div"),F(rx.$$.fragment),fIr=l(),BEe=a("p"),mIr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gIr=l(),vn=a("p"),hIr=o("The model class to instantiate is selected based on the "),IEe=a("code"),pIr=o("model_type"),_Ir=o(` property of the config object (either
passed as an argument or loaded from `),NEe=a("code"),uIr=o("pretrained_model_name_or_path"),bIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=a("code"),vIr=o("pretrained_model_name_or_path"),FIr=o(":"),TIr=l(),xe=a("ul"),aw=a("li"),jEe=a("strong"),MIr=o("albert"),EIr=o(" \u2014 "),hK=a("a"),CIr=o("FlaxAlbertForSequenceClassification"),wIr=o(" (ALBERT model)"),AIr=l(),nw=a("li"),DEe=a("strong"),yIr=o("bart"),LIr=o(" \u2014 "),pK=a("a"),xIr=o("FlaxBartForSequenceClassification"),$Ir=o(" (BART model)"),kIr=l(),sw=a("li"),GEe=a("strong"),SIr=o("bert"),RIr=o(" \u2014 "),_K=a("a"),PIr=o("FlaxBertForSequenceClassification"),BIr=o(" (BERT model)"),IIr=l(),lw=a("li"),OEe=a("strong"),NIr=o("big_bird"),qIr=o(" \u2014 "),uK=a("a"),jIr=o("FlaxBigBirdForSequenceClassification"),DIr=o(" (BigBird model)"),GIr=l(),iw=a("li"),VEe=a("strong"),OIr=o("distilbert"),VIr=o(" \u2014 "),bK=a("a"),XIr=o("FlaxDistilBertForSequenceClassification"),zIr=o(" (DistilBERT model)"),WIr=l(),dw=a("li"),XEe=a("strong"),QIr=o("electra"),HIr=o(" \u2014 "),vK=a("a"),UIr=o("FlaxElectraForSequenceClassification"),JIr=o(" (ELECTRA model)"),YIr=l(),cw=a("li"),zEe=a("strong"),KIr=o("mbart"),ZIr=o(" \u2014 "),FK=a("a"),eNr=o("FlaxMBartForSequenceClassification"),oNr=o(" (mBART model)"),rNr=l(),fw=a("li"),WEe=a("strong"),tNr=o("roberta"),aNr=o(" \u2014 "),TK=a("a"),nNr=o("FlaxRobertaForSequenceClassification"),sNr=o(" (RoBERTa model)"),lNr=l(),mw=a("li"),QEe=a("strong"),iNr=o("roformer"),dNr=o(" \u2014 "),MK=a("a"),cNr=o("FlaxRoFormerForSequenceClassification"),fNr=o(" (RoFormer model)"),mNr=l(),gw=a("li"),HEe=a("strong"),gNr=o("xlm-roberta"),hNr=o(" \u2014 "),EK=a("a"),pNr=o("FlaxXLMRobertaForSequenceClassification"),_Nr=o(" (XLM-RoBERTa model)"),uNr=l(),F(hw.$$.fragment),Yje=l(),Hc=a("h2"),pw=a("a"),UEe=a("span"),F(tx.$$.fragment),bNr=l(),JEe=a("span"),vNr=o("FlaxAutoModelForQuestionAnswering"),Kje=l(),ur=a("div"),F(ax.$$.fragment),FNr=l(),Uc=a("p"),TNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=a("a"),MNr=o("from_pretrained()"),ENr=o(" class method or the "),wK=a("a"),CNr=o("from_config()"),wNr=o(` class
method.`),ANr=l(),nx=a("p"),yNr=o("This class cannot be instantiated directly using "),YEe=a("code"),LNr=o("__init__()"),xNr=o(" (throws an error)."),$Nr=l(),Ht=a("div"),F(sx.$$.fragment),kNr=l(),KEe=a("p"),SNr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RNr=l(),Jc=a("p"),PNr=o(`Note:
Loading a model from its configuration file does `),ZEe=a("strong"),BNr=o("not"),INr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),NNr=o("from_pretrained()"),qNr=o(" to load the model weights."),jNr=l(),F(_w.$$.fragment),DNr=l(),zr=a("div"),F(lx.$$.fragment),GNr=l(),eCe=a("p"),ONr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VNr=l(),Fn=a("p"),XNr=o("The model class to instantiate is selected based on the "),oCe=a("code"),zNr=o("model_type"),WNr=o(` property of the config object (either
passed as an argument or loaded from `),rCe=a("code"),QNr=o("pretrained_model_name_or_path"),HNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=a("code"),UNr=o("pretrained_model_name_or_path"),JNr=o(":"),YNr=l(),$e=a("ul"),uw=a("li"),aCe=a("strong"),KNr=o("albert"),ZNr=o(" \u2014 "),yK=a("a"),eqr=o("FlaxAlbertForQuestionAnswering"),oqr=o(" (ALBERT model)"),rqr=l(),bw=a("li"),nCe=a("strong"),tqr=o("bart"),aqr=o(" \u2014 "),LK=a("a"),nqr=o("FlaxBartForQuestionAnswering"),sqr=o(" (BART model)"),lqr=l(),vw=a("li"),sCe=a("strong"),iqr=o("bert"),dqr=o(" \u2014 "),xK=a("a"),cqr=o("FlaxBertForQuestionAnswering"),fqr=o(" (BERT model)"),mqr=l(),Fw=a("li"),lCe=a("strong"),gqr=o("big_bird"),hqr=o(" \u2014 "),$K=a("a"),pqr=o("FlaxBigBirdForQuestionAnswering"),_qr=o(" (BigBird model)"),uqr=l(),Tw=a("li"),iCe=a("strong"),bqr=o("distilbert"),vqr=o(" \u2014 "),kK=a("a"),Fqr=o("FlaxDistilBertForQuestionAnswering"),Tqr=o(" (DistilBERT model)"),Mqr=l(),Mw=a("li"),dCe=a("strong"),Eqr=o("electra"),Cqr=o(" \u2014 "),SK=a("a"),wqr=o("FlaxElectraForQuestionAnswering"),Aqr=o(" (ELECTRA model)"),yqr=l(),Ew=a("li"),cCe=a("strong"),Lqr=o("mbart"),xqr=o(" \u2014 "),RK=a("a"),$qr=o("FlaxMBartForQuestionAnswering"),kqr=o(" (mBART model)"),Sqr=l(),Cw=a("li"),fCe=a("strong"),Rqr=o("roberta"),Pqr=o(" \u2014 "),PK=a("a"),Bqr=o("FlaxRobertaForQuestionAnswering"),Iqr=o(" (RoBERTa model)"),Nqr=l(),ww=a("li"),mCe=a("strong"),qqr=o("roformer"),jqr=o(" \u2014 "),BK=a("a"),Dqr=o("FlaxRoFormerForQuestionAnswering"),Gqr=o(" (RoFormer model)"),Oqr=l(),Aw=a("li"),gCe=a("strong"),Vqr=o("xlm-roberta"),Xqr=o(" \u2014 "),IK=a("a"),zqr=o("FlaxXLMRobertaForQuestionAnswering"),Wqr=o(" (XLM-RoBERTa model)"),Qqr=l(),F(yw.$$.fragment),Zje=l(),Yc=a("h2"),Lw=a("a"),hCe=a("span"),F(ix.$$.fragment),Hqr=l(),pCe=a("span"),Uqr=o("FlaxAutoModelForTokenClassification"),eDe=l(),br=a("div"),F(dx.$$.fragment),Jqr=l(),Kc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NK=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),qK=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),cx=a("p"),tjr=o("This class cannot be instantiated directly using "),_Ce=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Ut=a("div"),F(fx.$$.fragment),ljr=l(),uCe=a("p"),ijr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),djr=l(),Zc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),bCe=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(xw.$$.fragment),_jr=l(),Wr=a("div"),F(mx.$$.fragment),ujr=l(),vCe=a("p"),bjr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vjr=l(),Tn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),FCe=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),TCe=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),yjr=l(),De=a("ul"),$w=a("li"),ECe=a("strong"),Ljr=o("albert"),xjr=o(" \u2014 "),DK=a("a"),$jr=o("FlaxAlbertForTokenClassification"),kjr=o(" (ALBERT model)"),Sjr=l(),kw=a("li"),CCe=a("strong"),Rjr=o("bert"),Pjr=o(" \u2014 "),GK=a("a"),Bjr=o("FlaxBertForTokenClassification"),Ijr=o(" (BERT model)"),Njr=l(),Sw=a("li"),wCe=a("strong"),qjr=o("big_bird"),jjr=o(" \u2014 "),OK=a("a"),Djr=o("FlaxBigBirdForTokenClassification"),Gjr=o(" (BigBird model)"),Ojr=l(),Rw=a("li"),ACe=a("strong"),Vjr=o("distilbert"),Xjr=o(" \u2014 "),VK=a("a"),zjr=o("FlaxDistilBertForTokenClassification"),Wjr=o(" (DistilBERT model)"),Qjr=l(),Pw=a("li"),yCe=a("strong"),Hjr=o("electra"),Ujr=o(" \u2014 "),XK=a("a"),Jjr=o("FlaxElectraForTokenClassification"),Yjr=o(" (ELECTRA model)"),Kjr=l(),Bw=a("li"),LCe=a("strong"),Zjr=o("roberta"),eDr=o(" \u2014 "),zK=a("a"),oDr=o("FlaxRobertaForTokenClassification"),rDr=o(" (RoBERTa model)"),tDr=l(),Iw=a("li"),xCe=a("strong"),aDr=o("roformer"),nDr=o(" \u2014 "),WK=a("a"),sDr=o("FlaxRoFormerForTokenClassification"),lDr=o(" (RoFormer model)"),iDr=l(),Nw=a("li"),$Ce=a("strong"),dDr=o("xlm-roberta"),cDr=o(" \u2014 "),QK=a("a"),fDr=o("FlaxXLMRobertaForTokenClassification"),mDr=o(" (XLM-RoBERTa model)"),gDr=l(),F(qw.$$.fragment),oDe=l(),ef=a("h2"),jw=a("a"),kCe=a("span"),F(gx.$$.fragment),hDr=l(),SCe=a("span"),pDr=o("FlaxAutoModelForMultipleChoice"),rDe=l(),vr=a("div"),F(hx.$$.fragment),_Dr=l(),of=a("p"),uDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=a("a"),bDr=o("from_pretrained()"),vDr=o(" class method or the "),UK=a("a"),FDr=o("from_config()"),TDr=o(` class
method.`),MDr=l(),px=a("p"),EDr=o("This class cannot be instantiated directly using "),RCe=a("code"),CDr=o("__init__()"),wDr=o(" (throws an error)."),ADr=l(),Jt=a("div"),F(_x.$$.fragment),yDr=l(),PCe=a("p"),LDr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),xDr=l(),rf=a("p"),$Dr=o(`Note:
Loading a model from its configuration file does `),BCe=a("strong"),kDr=o("not"),SDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),RDr=o("from_pretrained()"),PDr=o(" to load the model weights."),BDr=l(),F(Dw.$$.fragment),IDr=l(),Qr=a("div"),F(ux.$$.fragment),NDr=l(),ICe=a("p"),qDr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jDr=l(),Mn=a("p"),DDr=o("The model class to instantiate is selected based on the "),NCe=a("code"),GDr=o("model_type"),ODr=o(` property of the config object (either
passed as an argument or loaded from `),qCe=a("code"),VDr=o("pretrained_model_name_or_path"),XDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=a("code"),zDr=o("pretrained_model_name_or_path"),WDr=o(":"),QDr=l(),Ge=a("ul"),Gw=a("li"),DCe=a("strong"),HDr=o("albert"),UDr=o(" \u2014 "),YK=a("a"),JDr=o("FlaxAlbertForMultipleChoice"),YDr=o(" (ALBERT model)"),KDr=l(),Ow=a("li"),GCe=a("strong"),ZDr=o("bert"),eGr=o(" \u2014 "),KK=a("a"),oGr=o("FlaxBertForMultipleChoice"),rGr=o(" (BERT model)"),tGr=l(),Vw=a("li"),OCe=a("strong"),aGr=o("big_bird"),nGr=o(" \u2014 "),ZK=a("a"),sGr=o("FlaxBigBirdForMultipleChoice"),lGr=o(" (BigBird model)"),iGr=l(),Xw=a("li"),VCe=a("strong"),dGr=o("distilbert"),cGr=o(" \u2014 "),eZ=a("a"),fGr=o("FlaxDistilBertForMultipleChoice"),mGr=o(" (DistilBERT model)"),gGr=l(),zw=a("li"),XCe=a("strong"),hGr=o("electra"),pGr=o(" \u2014 "),oZ=a("a"),_Gr=o("FlaxElectraForMultipleChoice"),uGr=o(" (ELECTRA model)"),bGr=l(),Ww=a("li"),zCe=a("strong"),vGr=o("roberta"),FGr=o(" \u2014 "),rZ=a("a"),TGr=o("FlaxRobertaForMultipleChoice"),MGr=o(" (RoBERTa model)"),EGr=l(),Qw=a("li"),WCe=a("strong"),CGr=o("roformer"),wGr=o(" \u2014 "),tZ=a("a"),AGr=o("FlaxRoFormerForMultipleChoice"),yGr=o(" (RoFormer model)"),LGr=l(),Hw=a("li"),QCe=a("strong"),xGr=o("xlm-roberta"),$Gr=o(" \u2014 "),aZ=a("a"),kGr=o("FlaxXLMRobertaForMultipleChoice"),SGr=o(" (XLM-RoBERTa model)"),RGr=l(),F(Uw.$$.fragment),tDe=l(),tf=a("h2"),Jw=a("a"),HCe=a("span"),F(bx.$$.fragment),PGr=l(),UCe=a("span"),BGr=o("FlaxAutoModelForNextSentencePrediction"),aDe=l(),Fr=a("div"),F(vx.$$.fragment),IGr=l(),af=a("p"),NGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=a("a"),qGr=o("from_pretrained()"),jGr=o(" class method or the "),sZ=a("a"),DGr=o("from_config()"),GGr=o(` class
method.`),OGr=l(),Fx=a("p"),VGr=o("This class cannot be instantiated directly using "),JCe=a("code"),XGr=o("__init__()"),zGr=o(" (throws an error)."),WGr=l(),Yt=a("div"),F(Tx.$$.fragment),QGr=l(),YCe=a("p"),HGr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),UGr=l(),nf=a("p"),JGr=o(`Note:
Loading a model from its configuration file does `),KCe=a("strong"),YGr=o("not"),KGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=a("a"),ZGr=o("from_pretrained()"),eOr=o(" to load the model weights."),oOr=l(),F(Yw.$$.fragment),rOr=l(),Hr=a("div"),F(Mx.$$.fragment),tOr=l(),ZCe=a("p"),aOr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nOr=l(),En=a("p"),sOr=o("The model class to instantiate is selected based on the "),e5e=a("code"),lOr=o("model_type"),iOr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),dOr=o("pretrained_model_name_or_path"),cOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),fOr=o("pretrained_model_name_or_path"),mOr=o(":"),gOr=l(),t5e=a("ul"),Kw=a("li"),a5e=a("strong"),hOr=o("bert"),pOr=o(" \u2014 "),iZ=a("a"),_Or=o("FlaxBertForNextSentencePrediction"),uOr=o(" (BERT model)"),bOr=l(),F(Zw.$$.fragment),nDe=l(),sf=a("h2"),e0=a("a"),n5e=a("span"),F(Ex.$$.fragment),vOr=l(),s5e=a("span"),FOr=o("FlaxAutoModelForImageClassification"),sDe=l(),Tr=a("div"),F(Cx.$$.fragment),TOr=l(),lf=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),cZ=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),yOr=l(),wx=a("p"),LOr=o("This class cannot be instantiated directly using "),l5e=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Kt=a("div"),F(Ax.$$.fragment),SOr=l(),i5e=a("p"),ROr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),POr=l(),df=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(o0.$$.fragment),GOr=l(),Ur=a("div"),F(yx.$$.fragment),OOr=l(),c5e=a("p"),VOr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),XOr=l(),Cn=a("p"),zOr=o("The model class to instantiate is selected based on the "),f5e=a("code"),WOr=o("model_type"),QOr=o(` property of the config object (either
passed as an argument or loaded from `),m5e=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),Lx=a("ul"),r0=a("li"),h5e=a("strong"),ZOr=o("beit"),eVr=o(" \u2014 "),mZ=a("a"),oVr=o("FlaxBeitForImageClassification"),rVr=o(" (BEiT model)"),tVr=l(),t0=a("li"),p5e=a("strong"),aVr=o("vit"),nVr=o(" \u2014 "),gZ=a("a"),sVr=o("FlaxViTForImageClassification"),lVr=o(" (ViT model)"),iVr=l(),F(a0.$$.fragment),lDe=l(),cf=a("h2"),n0=a("a"),_5e=a("span"),F(xx.$$.fragment),dVr=l(),u5e=a("span"),cVr=o("FlaxAutoModelForVision2Seq"),iDe=l(),Mr=a("div"),F($x.$$.fragment),fVr=l(),ff=a("p"),mVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=a("a"),gVr=o("from_pretrained()"),hVr=o(" class method or the "),pZ=a("a"),pVr=o("from_config()"),_Vr=o(` class
method.`),uVr=l(),kx=a("p"),bVr=o("This class cannot be instantiated directly using "),b5e=a("code"),vVr=o("__init__()"),FVr=o(" (throws an error)."),TVr=l(),Zt=a("div"),F(Sx.$$.fragment),MVr=l(),v5e=a("p"),EVr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),CVr=l(),mf=a("p"),wVr=o(`Note:
Loading a model from its configuration file does `),F5e=a("strong"),AVr=o("not"),yVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),LVr=o("from_pretrained()"),xVr=o(" to load the model weights."),$Vr=l(),F(s0.$$.fragment),kVr=l(),Jr=a("div"),F(Rx.$$.fragment),SVr=l(),T5e=a("p"),RVr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),PVr=l(),wn=a("p"),BVr=o("The model class to instantiate is selected based on the "),M5e=a("code"),IVr=o("model_type"),NVr=o(` property of the config object (either
passed as an argument or loaded from `),E5e=a("code"),qVr=o("pretrained_model_name_or_path"),jVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=a("code"),DVr=o("pretrained_model_name_or_path"),GVr=o(":"),OVr=l(),w5e=a("ul"),l0=a("li"),A5e=a("strong"),VVr=o("vision-encoder-decoder"),XVr=o(" \u2014 "),uZ=a("a"),zVr=o("FlaxVisionEncoderDecoderModel"),WVr=o(" (Vision Encoder decoder model)"),QVr=l(),F(i0.$$.fragment),this.h()},l(f){const u=k$t('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var Px=s(p);m=n(Px,"A",{id:!0,class:!0,href:!0});var y5e=s(m);_=n(y5e,"SPAN",{});var L5e=s(_);T(d.$$.fragment,L5e),L5e.forEach(t),y5e.forEach(t),h=i(Px),Mo=n(Px,"SPAN",{});var x5e=s(Mo);mi=r(x5e,"Auto Classes"),x5e.forEach(t),Px.forEach(t),_f=i(f),tt=n(f,"P",{});var Bx=s(tt);gi=r(Bx,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),hi=n(Bx,"CODE",{});var $5e=s(hi);wA=r($5e,"from_pretrained()"),$5e.forEach(t),uf=r(Bx,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Bx.forEach(t),je=i(f),We=n(f,"P",{});var An=s(We);pi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var k5e=s(yn);AA=r(k5e,"AutoConfig"),k5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var S5e=s(xn);yA=r(S5e,"AutoModel"),S5e.forEach(t),_i=r(An,`, and
`),$n=n(An,"A",{href:!0});var R5e=s($n);LA=r(R5e,"AutoTokenizer"),R5e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),bf=i(f),T(wa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var Ix=s(Ae);Q$=r(Ix,"will create a model that is an instance of "),bi=n(Ix,"A",{href:!0});var P5e=s(bi);H$=r(P5e,"BertModel"),P5e.forEach(t),U$=r(Ix,"."),Ix.forEach(t),Eo=i(f),Aa=n(f,"P",{});var Nx=s(Aa);J$=r(Nx,"There is one class of "),vf=n(Nx,"CODE",{});var B5e=s(vf);Y$=r(B5e,"AutoModel"),B5e.forEach(t),uOe=r(Nx," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Nx.forEach(t),sqe=i(f),vi=n(f,"H2",{class:!0});var qx=s(vi);Ff=n(qx,"A",{id:!0,class:!0,href:!0});var I5e=s(Ff);coe=n(I5e,"SPAN",{});var N5e=s(coe);T(xA.$$.fragment,N5e),N5e.forEach(t),I5e.forEach(t),bOe=i(qx),foe=n(qx,"SPAN",{});var q5e=s(foe);vOe=r(q5e,"Extending the Auto Classes"),q5e.forEach(t),qx.forEach(t),lqe=i(f),kn=n(f,"P",{});var gf=s(kn);FOe=r(gf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),moe=n(gf,"CODE",{});var j5e=s(moe);TOe=r(j5e,"NewModel"),j5e.forEach(t),MOe=r(gf,", make sure you have a "),goe=n(gf,"CODE",{});var D5e=s(goe);EOe=r(D5e,"NewModelConfig"),D5e.forEach(t),COe=r(gf,` then you can add those to the auto
classes like this:`),gf.forEach(t),iqe=i(f),T($A.$$.fragment,f),dqe=i(f),K$=n(f,"P",{});var G5e=s(K$);wOe=r(G5e,"You will then be able to use the auto classes like you would usually do!"),G5e.forEach(t),cqe=i(f),T(Tf.$$.fragment,f),fqe=i(f),Fi=n(f,"H2",{class:!0});var jx=s(Fi);Mf=n(jx,"A",{id:!0,class:!0,href:!0});var O5e=s(Mf);hoe=n(O5e,"SPAN",{});var V5e=s(hoe);T(kA.$$.fragment,V5e),V5e.forEach(t),O5e.forEach(t),AOe=i(jx),poe=n(jx,"SPAN",{});var X5e=s(poe);yOe=r(X5e,"AutoConfig"),X5e.forEach(t),jx.forEach(t),mqe=i(f),Co=n(f,"DIV",{class:!0});var ot=s(Co);T(SA.$$.fragment,ot),LOe=i(ot),RA=n(ot,"P",{});var Dx=s(RA);xOe=r(Dx,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Z$=n(Dx,"A",{href:!0});var z5e=s(Z$);$Oe=r(z5e,"from_pretrained()"),z5e.forEach(t),kOe=r(Dx," class method."),Dx.forEach(t),SOe=i(ot),PA=n(ot,"P",{});var Gx=s(PA);ROe=r(Gx,"This class cannot be instantiated directly using "),_oe=n(Gx,"CODE",{});var W5e=s(_oe);POe=r(W5e,"__init__()"),W5e.forEach(t),BOe=r(Gx," (throws an error)."),Gx.forEach(t),IOe=i(ot),Er=n(ot,"DIV",{class:!0});var rt=s(Er);T(BA.$$.fragment,rt),NOe=i(rt),uoe=n(rt,"P",{});var Q5e=s(uoe);qOe=r(Q5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),Q5e.forEach(t),jOe=i(rt),Ti=n(rt,"P",{});var hf=s(Ti);DOe=r(hf,"The configuration class to instantiate is selected based on the "),boe=n(hf,"CODE",{});var H5e=s(boe);GOe=r(H5e,"model_type"),H5e.forEach(t),OOe=r(hf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),voe=n(hf,"CODE",{});var U5e=s(voe);VOe=r(U5e,"pretrained_model_name_or_path"),U5e.forEach(t),XOe=r(hf,":"),hf.forEach(t),zOe=i(rt),A=n(rt,"UL",{});var y=s(A);Ef=n(y,"LI",{});var d0=s(Ef);Foe=n(d0,"STRONG",{});var J5e=s(Foe);WOe=r(J5e,"albert"),J5e.forEach(t),QOe=r(d0," \u2014 "),ek=n(d0,"A",{href:!0});var Y5e=s(ek);HOe=r(Y5e,"AlbertConfig"),Y5e.forEach(t),UOe=r(d0," (ALBERT model)"),d0.forEach(t),JOe=i(y),Cf=n(y,"LI",{});var c0=s(Cf);Toe=n(c0,"STRONG",{});var K5e=s(Toe);YOe=r(K5e,"bart"),K5e.forEach(t),KOe=r(c0," \u2014 "),ok=n(c0,"A",{href:!0});var Z5e=s(ok);ZOe=r(Z5e,"BartConfig"),Z5e.forEach(t),eVe=r(c0," (BART model)"),c0.forEach(t),oVe=i(y),wf=n(y,"LI",{});var f0=s(wf);Moe=n(f0,"STRONG",{});var e3e=s(Moe);rVe=r(e3e,"beit"),e3e.forEach(t),tVe=r(f0," \u2014 "),rk=n(f0,"A",{href:!0});var o3e=s(rk);aVe=r(o3e,"BeitConfig"),o3e.forEach(t),nVe=r(f0," (BEiT model)"),f0.forEach(t),sVe=i(y),Af=n(y,"LI",{});var m0=s(Af);Eoe=n(m0,"STRONG",{});var r3e=s(Eoe);lVe=r(r3e,"bert"),r3e.forEach(t),iVe=r(m0," \u2014 "),tk=n(m0,"A",{href:!0});var t3e=s(tk);dVe=r(t3e,"BertConfig"),t3e.forEach(t),cVe=r(m0," (BERT model)"),m0.forEach(t),fVe=i(y),yf=n(y,"LI",{});var g0=s(yf);Coe=n(g0,"STRONG",{});var a3e=s(Coe);mVe=r(a3e,"bert-generation"),a3e.forEach(t),gVe=r(g0," \u2014 "),ak=n(g0,"A",{href:!0});var n3e=s(ak);hVe=r(n3e,"BertGenerationConfig"),n3e.forEach(t),pVe=r(g0," (Bert Generation model)"),g0.forEach(t),_Ve=i(y),Lf=n(y,"LI",{});var h0=s(Lf);woe=n(h0,"STRONG",{});var s3e=s(woe);uVe=r(s3e,"big_bird"),s3e.forEach(t),bVe=r(h0," \u2014 "),nk=n(h0,"A",{href:!0});var l3e=s(nk);vVe=r(l3e,"BigBirdConfig"),l3e.forEach(t),FVe=r(h0," (BigBird model)"),h0.forEach(t),TVe=i(y),xf=n(y,"LI",{});var p0=s(xf);Aoe=n(p0,"STRONG",{});var i3e=s(Aoe);MVe=r(i3e,"bigbird_pegasus"),i3e.forEach(t),EVe=r(p0," \u2014 "),sk=n(p0,"A",{href:!0});var d3e=s(sk);CVe=r(d3e,"BigBirdPegasusConfig"),d3e.forEach(t),wVe=r(p0," (BigBirdPegasus model)"),p0.forEach(t),AVe=i(y),$f=n(y,"LI",{});var _0=s($f);yoe=n(_0,"STRONG",{});var c3e=s(yoe);yVe=r(c3e,"blenderbot"),c3e.forEach(t),LVe=r(_0," \u2014 "),lk=n(_0,"A",{href:!0});var f3e=s(lk);xVe=r(f3e,"BlenderbotConfig"),f3e.forEach(t),$Ve=r(_0," (Blenderbot model)"),_0.forEach(t),kVe=i(y),kf=n(y,"LI",{});var u0=s(kf);Loe=n(u0,"STRONG",{});var m3e=s(Loe);SVe=r(m3e,"blenderbot-small"),m3e.forEach(t),RVe=r(u0," \u2014 "),ik=n(u0,"A",{href:!0});var g3e=s(ik);PVe=r(g3e,"BlenderbotSmallConfig"),g3e.forEach(t),BVe=r(u0," (BlenderbotSmall model)"),u0.forEach(t),IVe=i(y),Sf=n(y,"LI",{});var b0=s(Sf);xoe=n(b0,"STRONG",{});var h3e=s(xoe);NVe=r(h3e,"camembert"),h3e.forEach(t),qVe=r(b0," \u2014 "),dk=n(b0,"A",{href:!0});var p3e=s(dk);jVe=r(p3e,"CamembertConfig"),p3e.forEach(t),DVe=r(b0," (CamemBERT model)"),b0.forEach(t),GVe=i(y),Rf=n(y,"LI",{});var v0=s(Rf);$oe=n(v0,"STRONG",{});var _3e=s($oe);OVe=r(_3e,"canine"),_3e.forEach(t),VVe=r(v0," \u2014 "),ck=n(v0,"A",{href:!0});var u3e=s(ck);XVe=r(u3e,"CanineConfig"),u3e.forEach(t),zVe=r(v0," (Canine model)"),v0.forEach(t),WVe=i(y),Pf=n(y,"LI",{});var F0=s(Pf);koe=n(F0,"STRONG",{});var b3e=s(koe);QVe=r(b3e,"clip"),b3e.forEach(t),HVe=r(F0," \u2014 "),fk=n(F0,"A",{href:!0});var v3e=s(fk);UVe=r(v3e,"CLIPConfig"),v3e.forEach(t),JVe=r(F0," (CLIP model)"),F0.forEach(t),YVe=i(y),Bf=n(y,"LI",{});var T0=s(Bf);Soe=n(T0,"STRONG",{});var F3e=s(Soe);KVe=r(F3e,"convbert"),F3e.forEach(t),ZVe=r(T0," \u2014 "),mk=n(T0,"A",{href:!0});var T3e=s(mk);eXe=r(T3e,"ConvBertConfig"),T3e.forEach(t),oXe=r(T0," (ConvBERT model)"),T0.forEach(t),rXe=i(y),If=n(y,"LI",{});var M0=s(If);Roe=n(M0,"STRONG",{});var M3e=s(Roe);tXe=r(M3e,"convnext"),M3e.forEach(t),aXe=r(M0," \u2014 "),gk=n(M0,"A",{href:!0});var E3e=s(gk);nXe=r(E3e,"ConvNextConfig"),E3e.forEach(t),sXe=r(M0," (ConvNext model)"),M0.forEach(t),lXe=i(y),Nf=n(y,"LI",{});var E0=s(Nf);Poe=n(E0,"STRONG",{});var C3e=s(Poe);iXe=r(C3e,"ctrl"),C3e.forEach(t),dXe=r(E0," \u2014 "),hk=n(E0,"A",{href:!0});var w3e=s(hk);cXe=r(w3e,"CTRLConfig"),w3e.forEach(t),fXe=r(E0," (CTRL model)"),E0.forEach(t),mXe=i(y),qf=n(y,"LI",{});var C0=s(qf);Boe=n(C0,"STRONG",{});var A3e=s(Boe);gXe=r(A3e,"cvt"),A3e.forEach(t),hXe=r(C0," \u2014 "),pk=n(C0,"A",{href:!0});var y3e=s(pk);pXe=r(y3e,"CvtConfig"),y3e.forEach(t),_Xe=r(C0," (CvT model)"),C0.forEach(t),uXe=i(y),jf=n(y,"LI",{});var w0=s(jf);Ioe=n(w0,"STRONG",{});var L3e=s(Ioe);bXe=r(L3e,"data2vec-audio"),L3e.forEach(t),vXe=r(w0," \u2014 "),_k=n(w0,"A",{href:!0});var x3e=s(_k);FXe=r(x3e,"Data2VecAudioConfig"),x3e.forEach(t),TXe=r(w0," (Data2VecAudio model)"),w0.forEach(t),MXe=i(y),Df=n(y,"LI",{});var A0=s(Df);Noe=n(A0,"STRONG",{});var $3e=s(Noe);EXe=r($3e,"data2vec-text"),$3e.forEach(t),CXe=r(A0," \u2014 "),uk=n(A0,"A",{href:!0});var k3e=s(uk);wXe=r(k3e,"Data2VecTextConfig"),k3e.forEach(t),AXe=r(A0," (Data2VecText model)"),A0.forEach(t),yXe=i(y),Gf=n(y,"LI",{});var y0=s(Gf);qoe=n(y0,"STRONG",{});var S3e=s(qoe);LXe=r(S3e,"data2vec-vision"),S3e.forEach(t),xXe=r(y0," \u2014 "),bk=n(y0,"A",{href:!0});var R3e=s(bk);$Xe=r(R3e,"Data2VecVisionConfig"),R3e.forEach(t),kXe=r(y0," (Data2VecVision model)"),y0.forEach(t),SXe=i(y),Of=n(y,"LI",{});var L0=s(Of);joe=n(L0,"STRONG",{});var P3e=s(joe);RXe=r(P3e,"deberta"),P3e.forEach(t),PXe=r(L0," \u2014 "),vk=n(L0,"A",{href:!0});var B3e=s(vk);BXe=r(B3e,"DebertaConfig"),B3e.forEach(t),IXe=r(L0," (DeBERTa model)"),L0.forEach(t),NXe=i(y),Vf=n(y,"LI",{});var x0=s(Vf);Doe=n(x0,"STRONG",{});var I3e=s(Doe);qXe=r(I3e,"deberta-v2"),I3e.forEach(t),jXe=r(x0," \u2014 "),Fk=n(x0,"A",{href:!0});var N3e=s(Fk);DXe=r(N3e,"DebertaV2Config"),N3e.forEach(t),GXe=r(x0," (DeBERTa-v2 model)"),x0.forEach(t),OXe=i(y),Xf=n(y,"LI",{});var $0=s(Xf);Goe=n($0,"STRONG",{});var q3e=s(Goe);VXe=r(q3e,"decision_transformer"),q3e.forEach(t),XXe=r($0," \u2014 "),Tk=n($0,"A",{href:!0});var j3e=s(Tk);zXe=r(j3e,"DecisionTransformerConfig"),j3e.forEach(t),WXe=r($0," (Decision Transformer model)"),$0.forEach(t),QXe=i(y),zf=n(y,"LI",{});var k0=s(zf);Ooe=n(k0,"STRONG",{});var D3e=s(Ooe);HXe=r(D3e,"deit"),D3e.forEach(t),UXe=r(k0," \u2014 "),Mk=n(k0,"A",{href:!0});var UVr=s(Mk);JXe=r(UVr,"DeiTConfig"),UVr.forEach(t),YXe=r(k0," (DeiT model)"),k0.forEach(t),KXe=i(y),Wf=n(y,"LI",{});var G3e=s(Wf);Voe=n(G3e,"STRONG",{});var JVr=s(Voe);ZXe=r(JVr,"detr"),JVr.forEach(t),eze=r(G3e," \u2014 "),Ek=n(G3e,"A",{href:!0});var YVr=s(Ek);oze=r(YVr,"DetrConfig"),YVr.forEach(t),rze=r(G3e," (DETR model)"),G3e.forEach(t),tze=i(y),Qf=n(y,"LI",{});var O3e=s(Qf);Xoe=n(O3e,"STRONG",{});var KVr=s(Xoe);aze=r(KVr,"distilbert"),KVr.forEach(t),nze=r(O3e," \u2014 "),Ck=n(O3e,"A",{href:!0});var ZVr=s(Ck);sze=r(ZVr,"DistilBertConfig"),ZVr.forEach(t),lze=r(O3e," (DistilBERT model)"),O3e.forEach(t),ize=i(y),Hf=n(y,"LI",{});var V3e=s(Hf);zoe=n(V3e,"STRONG",{});var eXr=s(zoe);dze=r(eXr,"dpr"),eXr.forEach(t),cze=r(V3e," \u2014 "),wk=n(V3e,"A",{href:!0});var oXr=s(wk);fze=r(oXr,"DPRConfig"),oXr.forEach(t),mze=r(V3e," (DPR model)"),V3e.forEach(t),gze=i(y),Uf=n(y,"LI",{});var X3e=s(Uf);Woe=n(X3e,"STRONG",{});var rXr=s(Woe);hze=r(rXr,"dpt"),rXr.forEach(t),pze=r(X3e," \u2014 "),Ak=n(X3e,"A",{href:!0});var tXr=s(Ak);_ze=r(tXr,"DPTConfig"),tXr.forEach(t),uze=r(X3e," (DPT model)"),X3e.forEach(t),bze=i(y),Jf=n(y,"LI",{});var z3e=s(Jf);Qoe=n(z3e,"STRONG",{});var aXr=s(Qoe);vze=r(aXr,"electra"),aXr.forEach(t),Fze=r(z3e," \u2014 "),yk=n(z3e,"A",{href:!0});var nXr=s(yk);Tze=r(nXr,"ElectraConfig"),nXr.forEach(t),Mze=r(z3e," (ELECTRA model)"),z3e.forEach(t),Eze=i(y),Yf=n(y,"LI",{});var W3e=s(Yf);Hoe=n(W3e,"STRONG",{});var sXr=s(Hoe);Cze=r(sXr,"encoder-decoder"),sXr.forEach(t),wze=r(W3e," \u2014 "),Lk=n(W3e,"A",{href:!0});var lXr=s(Lk);Aze=r(lXr,"EncoderDecoderConfig"),lXr.forEach(t),yze=r(W3e," (Encoder decoder model)"),W3e.forEach(t),Lze=i(y),Kf=n(y,"LI",{});var Q3e=s(Kf);Uoe=n(Q3e,"STRONG",{});var iXr=s(Uoe);xze=r(iXr,"flaubert"),iXr.forEach(t),$ze=r(Q3e," \u2014 "),xk=n(Q3e,"A",{href:!0});var dXr=s(xk);kze=r(dXr,"FlaubertConfig"),dXr.forEach(t),Sze=r(Q3e," (FlauBERT model)"),Q3e.forEach(t),Rze=i(y),Zf=n(y,"LI",{});var H3e=s(Zf);Joe=n(H3e,"STRONG",{});var cXr=s(Joe);Pze=r(cXr,"flava"),cXr.forEach(t),Bze=r(H3e," \u2014 "),$k=n(H3e,"A",{href:!0});var fXr=s($k);Ize=r(fXr,"FlavaConfig"),fXr.forEach(t),Nze=r(H3e," (Flava model)"),H3e.forEach(t),qze=i(y),em=n(y,"LI",{});var U3e=s(em);Yoe=n(U3e,"STRONG",{});var mXr=s(Yoe);jze=r(mXr,"fnet"),mXr.forEach(t),Dze=r(U3e," \u2014 "),kk=n(U3e,"A",{href:!0});var gXr=s(kk);Gze=r(gXr,"FNetConfig"),gXr.forEach(t),Oze=r(U3e," (FNet model)"),U3e.forEach(t),Vze=i(y),om=n(y,"LI",{});var J3e=s(om);Koe=n(J3e,"STRONG",{});var hXr=s(Koe);Xze=r(hXr,"fsmt"),hXr.forEach(t),zze=r(J3e," \u2014 "),Sk=n(J3e,"A",{href:!0});var pXr=s(Sk);Wze=r(pXr,"FSMTConfig"),pXr.forEach(t),Qze=r(J3e," (FairSeq Machine-Translation model)"),J3e.forEach(t),Hze=i(y),rm=n(y,"LI",{});var Y3e=s(rm);Zoe=n(Y3e,"STRONG",{});var _Xr=s(Zoe);Uze=r(_Xr,"funnel"),_Xr.forEach(t),Jze=r(Y3e," \u2014 "),Rk=n(Y3e,"A",{href:!0});var uXr=s(Rk);Yze=r(uXr,"FunnelConfig"),uXr.forEach(t),Kze=r(Y3e," (Funnel Transformer model)"),Y3e.forEach(t),Zze=i(y),tm=n(y,"LI",{});var K3e=s(tm);ere=n(K3e,"STRONG",{});var bXr=s(ere);eWe=r(bXr,"glpn"),bXr.forEach(t),oWe=r(K3e," \u2014 "),Pk=n(K3e,"A",{href:!0});var vXr=s(Pk);rWe=r(vXr,"GLPNConfig"),vXr.forEach(t),tWe=r(K3e," (GLPN model)"),K3e.forEach(t),aWe=i(y),am=n(y,"LI",{});var Z3e=s(am);ore=n(Z3e,"STRONG",{});var FXr=s(ore);nWe=r(FXr,"gpt2"),FXr.forEach(t),sWe=r(Z3e," \u2014 "),Bk=n(Z3e,"A",{href:!0});var TXr=s(Bk);lWe=r(TXr,"GPT2Config"),TXr.forEach(t),iWe=r(Z3e," (OpenAI GPT-2 model)"),Z3e.forEach(t),dWe=i(y),nm=n(y,"LI",{});var ewe=s(nm);rre=n(ewe,"STRONG",{});var MXr=s(rre);cWe=r(MXr,"gpt_neo"),MXr.forEach(t),fWe=r(ewe," \u2014 "),Ik=n(ewe,"A",{href:!0});var EXr=s(Ik);mWe=r(EXr,"GPTNeoConfig"),EXr.forEach(t),gWe=r(ewe," (GPT Neo model)"),ewe.forEach(t),hWe=i(y),sm=n(y,"LI",{});var owe=s(sm);tre=n(owe,"STRONG",{});var CXr=s(tre);pWe=r(CXr,"gpt_neox"),CXr.forEach(t),_We=r(owe," \u2014 "),Nk=n(owe,"A",{href:!0});var wXr=s(Nk);uWe=r(wXr,"GPTNeoXConfig"),wXr.forEach(t),bWe=r(owe," (GPT NeoX model)"),owe.forEach(t),vWe=i(y),lm=n(y,"LI",{});var rwe=s(lm);are=n(rwe,"STRONG",{});var AXr=s(are);FWe=r(AXr,"gptj"),AXr.forEach(t),TWe=r(rwe," \u2014 "),qk=n(rwe,"A",{href:!0});var yXr=s(qk);MWe=r(yXr,"GPTJConfig"),yXr.forEach(t),EWe=r(rwe," (GPT-J model)"),rwe.forEach(t),CWe=i(y),im=n(y,"LI",{});var twe=s(im);nre=n(twe,"STRONG",{});var LXr=s(nre);wWe=r(LXr,"hubert"),LXr.forEach(t),AWe=r(twe," \u2014 "),jk=n(twe,"A",{href:!0});var xXr=s(jk);yWe=r(xXr,"HubertConfig"),xXr.forEach(t),LWe=r(twe," (Hubert model)"),twe.forEach(t),xWe=i(y),dm=n(y,"LI",{});var awe=s(dm);sre=n(awe,"STRONG",{});var $Xr=s(sre);$We=r($Xr,"ibert"),$Xr.forEach(t),kWe=r(awe," \u2014 "),Dk=n(awe,"A",{href:!0});var kXr=s(Dk);SWe=r(kXr,"IBertConfig"),kXr.forEach(t),RWe=r(awe," (I-BERT model)"),awe.forEach(t),PWe=i(y),cm=n(y,"LI",{});var nwe=s(cm);lre=n(nwe,"STRONG",{});var SXr=s(lre);BWe=r(SXr,"imagegpt"),SXr.forEach(t),IWe=r(nwe," \u2014 "),Gk=n(nwe,"A",{href:!0});var RXr=s(Gk);NWe=r(RXr,"ImageGPTConfig"),RXr.forEach(t),qWe=r(nwe," (ImageGPT model)"),nwe.forEach(t),jWe=i(y),fm=n(y,"LI",{});var swe=s(fm);ire=n(swe,"STRONG",{});var PXr=s(ire);DWe=r(PXr,"layoutlm"),PXr.forEach(t),GWe=r(swe," \u2014 "),Ok=n(swe,"A",{href:!0});var BXr=s(Ok);OWe=r(BXr,"LayoutLMConfig"),BXr.forEach(t),VWe=r(swe," (LayoutLM model)"),swe.forEach(t),XWe=i(y),mm=n(y,"LI",{});var lwe=s(mm);dre=n(lwe,"STRONG",{});var IXr=s(dre);zWe=r(IXr,"layoutlmv2"),IXr.forEach(t),WWe=r(lwe," \u2014 "),Vk=n(lwe,"A",{href:!0});var NXr=s(Vk);QWe=r(NXr,"LayoutLMv2Config"),NXr.forEach(t),HWe=r(lwe," (LayoutLMv2 model)"),lwe.forEach(t),UWe=i(y),gm=n(y,"LI",{});var iwe=s(gm);cre=n(iwe,"STRONG",{});var qXr=s(cre);JWe=r(qXr,"layoutlmv3"),qXr.forEach(t),YWe=r(iwe," \u2014 "),Xk=n(iwe,"A",{href:!0});var jXr=s(Xk);KWe=r(jXr,"LayoutLMv3Config"),jXr.forEach(t),ZWe=r(iwe," (LayoutLMv3 model)"),iwe.forEach(t),eQe=i(y),hm=n(y,"LI",{});var dwe=s(hm);fre=n(dwe,"STRONG",{});var DXr=s(fre);oQe=r(DXr,"led"),DXr.forEach(t),rQe=r(dwe," \u2014 "),zk=n(dwe,"A",{href:!0});var GXr=s(zk);tQe=r(GXr,"LEDConfig"),GXr.forEach(t),aQe=r(dwe," (LED model)"),dwe.forEach(t),nQe=i(y),pm=n(y,"LI",{});var cwe=s(pm);mre=n(cwe,"STRONG",{});var OXr=s(mre);sQe=r(OXr,"longformer"),OXr.forEach(t),lQe=r(cwe," \u2014 "),Wk=n(cwe,"A",{href:!0});var VXr=s(Wk);iQe=r(VXr,"LongformerConfig"),VXr.forEach(t),dQe=r(cwe," (Longformer model)"),cwe.forEach(t),cQe=i(y),_m=n(y,"LI",{});var fwe=s(_m);gre=n(fwe,"STRONG",{});var XXr=s(gre);fQe=r(XXr,"luke"),XXr.forEach(t),mQe=r(fwe," \u2014 "),Qk=n(fwe,"A",{href:!0});var zXr=s(Qk);gQe=r(zXr,"LukeConfig"),zXr.forEach(t),hQe=r(fwe," (LUKE model)"),fwe.forEach(t),pQe=i(y),um=n(y,"LI",{});var mwe=s(um);hre=n(mwe,"STRONG",{});var WXr=s(hre);_Qe=r(WXr,"lxmert"),WXr.forEach(t),uQe=r(mwe," \u2014 "),Hk=n(mwe,"A",{href:!0});var QXr=s(Hk);bQe=r(QXr,"LxmertConfig"),QXr.forEach(t),vQe=r(mwe," (LXMERT model)"),mwe.forEach(t),FQe=i(y),bm=n(y,"LI",{});var gwe=s(bm);pre=n(gwe,"STRONG",{});var HXr=s(pre);TQe=r(HXr,"m2m_100"),HXr.forEach(t),MQe=r(gwe," \u2014 "),Uk=n(gwe,"A",{href:!0});var UXr=s(Uk);EQe=r(UXr,"M2M100Config"),UXr.forEach(t),CQe=r(gwe," (M2M100 model)"),gwe.forEach(t),wQe=i(y),vm=n(y,"LI",{});var hwe=s(vm);_re=n(hwe,"STRONG",{});var JXr=s(_re);AQe=r(JXr,"marian"),JXr.forEach(t),yQe=r(hwe," \u2014 "),Jk=n(hwe,"A",{href:!0});var YXr=s(Jk);LQe=r(YXr,"MarianConfig"),YXr.forEach(t),xQe=r(hwe," (Marian model)"),hwe.forEach(t),$Qe=i(y),Fm=n(y,"LI",{});var pwe=s(Fm);ure=n(pwe,"STRONG",{});var KXr=s(ure);kQe=r(KXr,"maskformer"),KXr.forEach(t),SQe=r(pwe," \u2014 "),Yk=n(pwe,"A",{href:!0});var ZXr=s(Yk);RQe=r(ZXr,"MaskFormerConfig"),ZXr.forEach(t),PQe=r(pwe," (MaskFormer model)"),pwe.forEach(t),BQe=i(y),Tm=n(y,"LI",{});var _we=s(Tm);bre=n(_we,"STRONG",{});var ezr=s(bre);IQe=r(ezr,"mbart"),ezr.forEach(t),NQe=r(_we," \u2014 "),Kk=n(_we,"A",{href:!0});var ozr=s(Kk);qQe=r(ozr,"MBartConfig"),ozr.forEach(t),jQe=r(_we," (mBART model)"),_we.forEach(t),DQe=i(y),Mm=n(y,"LI",{});var uwe=s(Mm);vre=n(uwe,"STRONG",{});var rzr=s(vre);GQe=r(rzr,"megatron-bert"),rzr.forEach(t),OQe=r(uwe," \u2014 "),Zk=n(uwe,"A",{href:!0});var tzr=s(Zk);VQe=r(tzr,"MegatronBertConfig"),tzr.forEach(t),XQe=r(uwe," (MegatronBert model)"),uwe.forEach(t),zQe=i(y),Em=n(y,"LI",{});var bwe=s(Em);Fre=n(bwe,"STRONG",{});var azr=s(Fre);WQe=r(azr,"mobilebert"),azr.forEach(t),QQe=r(bwe," \u2014 "),eS=n(bwe,"A",{href:!0});var nzr=s(eS);HQe=r(nzr,"MobileBertConfig"),nzr.forEach(t),UQe=r(bwe," (MobileBERT model)"),bwe.forEach(t),JQe=i(y),Cm=n(y,"LI",{});var vwe=s(Cm);Tre=n(vwe,"STRONG",{});var szr=s(Tre);YQe=r(szr,"mpnet"),szr.forEach(t),KQe=r(vwe," \u2014 "),oS=n(vwe,"A",{href:!0});var lzr=s(oS);ZQe=r(lzr,"MPNetConfig"),lzr.forEach(t),eHe=r(vwe," (MPNet model)"),vwe.forEach(t),oHe=i(y),wm=n(y,"LI",{});var Fwe=s(wm);Mre=n(Fwe,"STRONG",{});var izr=s(Mre);rHe=r(izr,"mt5"),izr.forEach(t),tHe=r(Fwe," \u2014 "),rS=n(Fwe,"A",{href:!0});var dzr=s(rS);aHe=r(dzr,"MT5Config"),dzr.forEach(t),nHe=r(Fwe," (mT5 model)"),Fwe.forEach(t),sHe=i(y),Am=n(y,"LI",{});var Twe=s(Am);Ere=n(Twe,"STRONG",{});var czr=s(Ere);lHe=r(czr,"nystromformer"),czr.forEach(t),iHe=r(Twe," \u2014 "),tS=n(Twe,"A",{href:!0});var fzr=s(tS);dHe=r(fzr,"NystromformerConfig"),fzr.forEach(t),cHe=r(Twe," (Nystromformer model)"),Twe.forEach(t),fHe=i(y),ym=n(y,"LI",{});var Mwe=s(ym);Cre=n(Mwe,"STRONG",{});var mzr=s(Cre);mHe=r(mzr,"openai-gpt"),mzr.forEach(t),gHe=r(Mwe," \u2014 "),aS=n(Mwe,"A",{href:!0});var gzr=s(aS);hHe=r(gzr,"OpenAIGPTConfig"),gzr.forEach(t),pHe=r(Mwe," (OpenAI GPT model)"),Mwe.forEach(t),_He=i(y),Lm=n(y,"LI",{});var Ewe=s(Lm);wre=n(Ewe,"STRONG",{});var hzr=s(wre);uHe=r(hzr,"opt"),hzr.forEach(t),bHe=r(Ewe," \u2014 "),nS=n(Ewe,"A",{href:!0});var pzr=s(nS);vHe=r(pzr,"OPTConfig"),pzr.forEach(t),FHe=r(Ewe," (OPT model)"),Ewe.forEach(t),THe=i(y),xm=n(y,"LI",{});var Cwe=s(xm);Are=n(Cwe,"STRONG",{});var _zr=s(Are);MHe=r(_zr,"pegasus"),_zr.forEach(t),EHe=r(Cwe," \u2014 "),sS=n(Cwe,"A",{href:!0});var uzr=s(sS);CHe=r(uzr,"PegasusConfig"),uzr.forEach(t),wHe=r(Cwe," (Pegasus model)"),Cwe.forEach(t),AHe=i(y),$m=n(y,"LI",{});var wwe=s($m);yre=n(wwe,"STRONG",{});var bzr=s(yre);yHe=r(bzr,"perceiver"),bzr.forEach(t),LHe=r(wwe," \u2014 "),lS=n(wwe,"A",{href:!0});var vzr=s(lS);xHe=r(vzr,"PerceiverConfig"),vzr.forEach(t),$He=r(wwe," (Perceiver model)"),wwe.forEach(t),kHe=i(y),km=n(y,"LI",{});var Awe=s(km);Lre=n(Awe,"STRONG",{});var Fzr=s(Lre);SHe=r(Fzr,"plbart"),Fzr.forEach(t),RHe=r(Awe," \u2014 "),iS=n(Awe,"A",{href:!0});var Tzr=s(iS);PHe=r(Tzr,"PLBartConfig"),Tzr.forEach(t),BHe=r(Awe," (PLBart model)"),Awe.forEach(t),IHe=i(y),Sm=n(y,"LI",{});var ywe=s(Sm);xre=n(ywe,"STRONG",{});var Mzr=s(xre);NHe=r(Mzr,"poolformer"),Mzr.forEach(t),qHe=r(ywe," \u2014 "),dS=n(ywe,"A",{href:!0});var Ezr=s(dS);jHe=r(Ezr,"PoolFormerConfig"),Ezr.forEach(t),DHe=r(ywe," (PoolFormer model)"),ywe.forEach(t),GHe=i(y),Rm=n(y,"LI",{});var Lwe=s(Rm);$re=n(Lwe,"STRONG",{});var Czr=s($re);OHe=r(Czr,"prophetnet"),Czr.forEach(t),VHe=r(Lwe," \u2014 "),cS=n(Lwe,"A",{href:!0});var wzr=s(cS);XHe=r(wzr,"ProphetNetConfig"),wzr.forEach(t),zHe=r(Lwe," (ProphetNet model)"),Lwe.forEach(t),WHe=i(y),Pm=n(y,"LI",{});var xwe=s(Pm);kre=n(xwe,"STRONG",{});var Azr=s(kre);QHe=r(Azr,"qdqbert"),Azr.forEach(t),HHe=r(xwe," \u2014 "),fS=n(xwe,"A",{href:!0});var yzr=s(fS);UHe=r(yzr,"QDQBertConfig"),yzr.forEach(t),JHe=r(xwe," (QDQBert model)"),xwe.forEach(t),YHe=i(y),Bm=n(y,"LI",{});var $we=s(Bm);Sre=n($we,"STRONG",{});var Lzr=s(Sre);KHe=r(Lzr,"rag"),Lzr.forEach(t),ZHe=r($we," \u2014 "),mS=n($we,"A",{href:!0});var xzr=s(mS);eUe=r(xzr,"RagConfig"),xzr.forEach(t),oUe=r($we," (RAG model)"),$we.forEach(t),rUe=i(y),Im=n(y,"LI",{});var kwe=s(Im);Rre=n(kwe,"STRONG",{});var $zr=s(Rre);tUe=r($zr,"realm"),$zr.forEach(t),aUe=r(kwe," \u2014 "),gS=n(kwe,"A",{href:!0});var kzr=s(gS);nUe=r(kzr,"RealmConfig"),kzr.forEach(t),sUe=r(kwe," (Realm model)"),kwe.forEach(t),lUe=i(y),Nm=n(y,"LI",{});var Swe=s(Nm);Pre=n(Swe,"STRONG",{});var Szr=s(Pre);iUe=r(Szr,"reformer"),Szr.forEach(t),dUe=r(Swe," \u2014 "),hS=n(Swe,"A",{href:!0});var Rzr=s(hS);cUe=r(Rzr,"ReformerConfig"),Rzr.forEach(t),fUe=r(Swe," (Reformer model)"),Swe.forEach(t),mUe=i(y),qm=n(y,"LI",{});var Rwe=s(qm);Bre=n(Rwe,"STRONG",{});var Pzr=s(Bre);gUe=r(Pzr,"regnet"),Pzr.forEach(t),hUe=r(Rwe," \u2014 "),pS=n(Rwe,"A",{href:!0});var Bzr=s(pS);pUe=r(Bzr,"RegNetConfig"),Bzr.forEach(t),_Ue=r(Rwe," (RegNet model)"),Rwe.forEach(t),uUe=i(y),jm=n(y,"LI",{});var Pwe=s(jm);Ire=n(Pwe,"STRONG",{});var Izr=s(Ire);bUe=r(Izr,"rembert"),Izr.forEach(t),vUe=r(Pwe," \u2014 "),_S=n(Pwe,"A",{href:!0});var Nzr=s(_S);FUe=r(Nzr,"RemBertConfig"),Nzr.forEach(t),TUe=r(Pwe," (RemBERT model)"),Pwe.forEach(t),MUe=i(y),Dm=n(y,"LI",{});var Bwe=s(Dm);Nre=n(Bwe,"STRONG",{});var qzr=s(Nre);EUe=r(qzr,"resnet"),qzr.forEach(t),CUe=r(Bwe," \u2014 "),uS=n(Bwe,"A",{href:!0});var jzr=s(uS);wUe=r(jzr,"ResNetConfig"),jzr.forEach(t),AUe=r(Bwe," (ResNet model)"),Bwe.forEach(t),yUe=i(y),Gm=n(y,"LI",{});var Iwe=s(Gm);qre=n(Iwe,"STRONG",{});var Dzr=s(qre);LUe=r(Dzr,"retribert"),Dzr.forEach(t),xUe=r(Iwe," \u2014 "),bS=n(Iwe,"A",{href:!0});var Gzr=s(bS);$Ue=r(Gzr,"RetriBertConfig"),Gzr.forEach(t),kUe=r(Iwe," (RetriBERT model)"),Iwe.forEach(t),SUe=i(y),Om=n(y,"LI",{});var Nwe=s(Om);jre=n(Nwe,"STRONG",{});var Ozr=s(jre);RUe=r(Ozr,"roberta"),Ozr.forEach(t),PUe=r(Nwe," \u2014 "),vS=n(Nwe,"A",{href:!0});var Vzr=s(vS);BUe=r(Vzr,"RobertaConfig"),Vzr.forEach(t),IUe=r(Nwe," (RoBERTa model)"),Nwe.forEach(t),NUe=i(y),Vm=n(y,"LI",{});var qwe=s(Vm);Dre=n(qwe,"STRONG",{});var Xzr=s(Dre);qUe=r(Xzr,"roformer"),Xzr.forEach(t),jUe=r(qwe," \u2014 "),FS=n(qwe,"A",{href:!0});var zzr=s(FS);DUe=r(zzr,"RoFormerConfig"),zzr.forEach(t),GUe=r(qwe," (RoFormer model)"),qwe.forEach(t),OUe=i(y),Xm=n(y,"LI",{});var jwe=s(Xm);Gre=n(jwe,"STRONG",{});var Wzr=s(Gre);VUe=r(Wzr,"segformer"),Wzr.forEach(t),XUe=r(jwe," \u2014 "),TS=n(jwe,"A",{href:!0});var Qzr=s(TS);zUe=r(Qzr,"SegformerConfig"),Qzr.forEach(t),WUe=r(jwe," (SegFormer model)"),jwe.forEach(t),QUe=i(y),zm=n(y,"LI",{});var Dwe=s(zm);Ore=n(Dwe,"STRONG",{});var Hzr=s(Ore);HUe=r(Hzr,"sew"),Hzr.forEach(t),UUe=r(Dwe," \u2014 "),MS=n(Dwe,"A",{href:!0});var Uzr=s(MS);JUe=r(Uzr,"SEWConfig"),Uzr.forEach(t),YUe=r(Dwe," (SEW model)"),Dwe.forEach(t),KUe=i(y),Wm=n(y,"LI",{});var Gwe=s(Wm);Vre=n(Gwe,"STRONG",{});var Jzr=s(Vre);ZUe=r(Jzr,"sew-d"),Jzr.forEach(t),eJe=r(Gwe," \u2014 "),ES=n(Gwe,"A",{href:!0});var Yzr=s(ES);oJe=r(Yzr,"SEWDConfig"),Yzr.forEach(t),rJe=r(Gwe," (SEW-D model)"),Gwe.forEach(t),tJe=i(y),Qm=n(y,"LI",{});var Owe=s(Qm);Xre=n(Owe,"STRONG",{});var Kzr=s(Xre);aJe=r(Kzr,"speech-encoder-decoder"),Kzr.forEach(t),nJe=r(Owe," \u2014 "),CS=n(Owe,"A",{href:!0});var Zzr=s(CS);sJe=r(Zzr,"SpeechEncoderDecoderConfig"),Zzr.forEach(t),lJe=r(Owe," (Speech Encoder decoder model)"),Owe.forEach(t),iJe=i(y),Hm=n(y,"LI",{});var Vwe=s(Hm);zre=n(Vwe,"STRONG",{});var eWr=s(zre);dJe=r(eWr,"speech_to_text"),eWr.forEach(t),cJe=r(Vwe," \u2014 "),wS=n(Vwe,"A",{href:!0});var oWr=s(wS);fJe=r(oWr,"Speech2TextConfig"),oWr.forEach(t),mJe=r(Vwe," (Speech2Text model)"),Vwe.forEach(t),gJe=i(y),Um=n(y,"LI",{});var Xwe=s(Um);Wre=n(Xwe,"STRONG",{});var rWr=s(Wre);hJe=r(rWr,"speech_to_text_2"),rWr.forEach(t),pJe=r(Xwe," \u2014 "),AS=n(Xwe,"A",{href:!0});var tWr=s(AS);_Je=r(tWr,"Speech2Text2Config"),tWr.forEach(t),uJe=r(Xwe," (Speech2Text2 model)"),Xwe.forEach(t),bJe=i(y),Jm=n(y,"LI",{});var zwe=s(Jm);Qre=n(zwe,"STRONG",{});var aWr=s(Qre);vJe=r(aWr,"splinter"),aWr.forEach(t),FJe=r(zwe," \u2014 "),yS=n(zwe,"A",{href:!0});var nWr=s(yS);TJe=r(nWr,"SplinterConfig"),nWr.forEach(t),MJe=r(zwe," (Splinter model)"),zwe.forEach(t),EJe=i(y),Ym=n(y,"LI",{});var Wwe=s(Ym);Hre=n(Wwe,"STRONG",{});var sWr=s(Hre);CJe=r(sWr,"squeezebert"),sWr.forEach(t),wJe=r(Wwe," \u2014 "),LS=n(Wwe,"A",{href:!0});var lWr=s(LS);AJe=r(lWr,"SqueezeBertConfig"),lWr.forEach(t),yJe=r(Wwe," (SqueezeBERT model)"),Wwe.forEach(t),LJe=i(y),Km=n(y,"LI",{});var Qwe=s(Km);Ure=n(Qwe,"STRONG",{});var iWr=s(Ure);xJe=r(iWr,"swin"),iWr.forEach(t),$Je=r(Qwe," \u2014 "),xS=n(Qwe,"A",{href:!0});var dWr=s(xS);kJe=r(dWr,"SwinConfig"),dWr.forEach(t),SJe=r(Qwe," (Swin model)"),Qwe.forEach(t),RJe=i(y),Zm=n(y,"LI",{});var Hwe=s(Zm);Jre=n(Hwe,"STRONG",{});var cWr=s(Jre);PJe=r(cWr,"t5"),cWr.forEach(t),BJe=r(Hwe," \u2014 "),$S=n(Hwe,"A",{href:!0});var fWr=s($S);IJe=r(fWr,"T5Config"),fWr.forEach(t),NJe=r(Hwe," (T5 model)"),Hwe.forEach(t),qJe=i(y),eg=n(y,"LI",{});var Uwe=s(eg);Yre=n(Uwe,"STRONG",{});var mWr=s(Yre);jJe=r(mWr,"tapas"),mWr.forEach(t),DJe=r(Uwe," \u2014 "),kS=n(Uwe,"A",{href:!0});var gWr=s(kS);GJe=r(gWr,"TapasConfig"),gWr.forEach(t),OJe=r(Uwe," (TAPAS model)"),Uwe.forEach(t),VJe=i(y),og=n(y,"LI",{});var Jwe=s(og);Kre=n(Jwe,"STRONG",{});var hWr=s(Kre);XJe=r(hWr,"trajectory_transformer"),hWr.forEach(t),zJe=r(Jwe," \u2014 "),SS=n(Jwe,"A",{href:!0});var pWr=s(SS);WJe=r(pWr,"TrajectoryTransformerConfig"),pWr.forEach(t),QJe=r(Jwe," (Trajectory Transformer model)"),Jwe.forEach(t),HJe=i(y),rg=n(y,"LI",{});var Ywe=s(rg);Zre=n(Ywe,"STRONG",{});var _Wr=s(Zre);UJe=r(_Wr,"transfo-xl"),_Wr.forEach(t),JJe=r(Ywe," \u2014 "),RS=n(Ywe,"A",{href:!0});var uWr=s(RS);YJe=r(uWr,"TransfoXLConfig"),uWr.forEach(t),KJe=r(Ywe," (Transformer-XL model)"),Ywe.forEach(t),ZJe=i(y),tg=n(y,"LI",{});var Kwe=s(tg);ete=n(Kwe,"STRONG",{});var bWr=s(ete);eYe=r(bWr,"trocr"),bWr.forEach(t),oYe=r(Kwe," \u2014 "),PS=n(Kwe,"A",{href:!0});var vWr=s(PS);rYe=r(vWr,"TrOCRConfig"),vWr.forEach(t),tYe=r(Kwe," (TrOCR model)"),Kwe.forEach(t),aYe=i(y),ag=n(y,"LI",{});var Zwe=s(ag);ote=n(Zwe,"STRONG",{});var FWr=s(ote);nYe=r(FWr,"unispeech"),FWr.forEach(t),sYe=r(Zwe," \u2014 "),BS=n(Zwe,"A",{href:!0});var TWr=s(BS);lYe=r(TWr,"UniSpeechConfig"),TWr.forEach(t),iYe=r(Zwe," (UniSpeech model)"),Zwe.forEach(t),dYe=i(y),ng=n(y,"LI",{});var e0e=s(ng);rte=n(e0e,"STRONG",{});var MWr=s(rte);cYe=r(MWr,"unispeech-sat"),MWr.forEach(t),fYe=r(e0e," \u2014 "),IS=n(e0e,"A",{href:!0});var EWr=s(IS);mYe=r(EWr,"UniSpeechSatConfig"),EWr.forEach(t),gYe=r(e0e," (UniSpeechSat model)"),e0e.forEach(t),hYe=i(y),sg=n(y,"LI",{});var o0e=s(sg);tte=n(o0e,"STRONG",{});var CWr=s(tte);pYe=r(CWr,"van"),CWr.forEach(t),_Ye=r(o0e," \u2014 "),NS=n(o0e,"A",{href:!0});var wWr=s(NS);uYe=r(wWr,"VanConfig"),wWr.forEach(t),bYe=r(o0e," (VAN model)"),o0e.forEach(t),vYe=i(y),lg=n(y,"LI",{});var r0e=s(lg);ate=n(r0e,"STRONG",{});var AWr=s(ate);FYe=r(AWr,"vilt"),AWr.forEach(t),TYe=r(r0e," \u2014 "),qS=n(r0e,"A",{href:!0});var yWr=s(qS);MYe=r(yWr,"ViltConfig"),yWr.forEach(t),EYe=r(r0e," (ViLT model)"),r0e.forEach(t),CYe=i(y),ig=n(y,"LI",{});var t0e=s(ig);nte=n(t0e,"STRONG",{});var LWr=s(nte);wYe=r(LWr,"vision-encoder-decoder"),LWr.forEach(t),AYe=r(t0e," \u2014 "),jS=n(t0e,"A",{href:!0});var xWr=s(jS);yYe=r(xWr,"VisionEncoderDecoderConfig"),xWr.forEach(t),LYe=r(t0e," (Vision Encoder decoder model)"),t0e.forEach(t),xYe=i(y),dg=n(y,"LI",{});var a0e=s(dg);ste=n(a0e,"STRONG",{});var $Wr=s(ste);$Ye=r($Wr,"vision-text-dual-encoder"),$Wr.forEach(t),kYe=r(a0e," \u2014 "),DS=n(a0e,"A",{href:!0});var kWr=s(DS);SYe=r(kWr,"VisionTextDualEncoderConfig"),kWr.forEach(t),RYe=r(a0e," (VisionTextDualEncoder model)"),a0e.forEach(t),PYe=i(y),cg=n(y,"LI",{});var n0e=s(cg);lte=n(n0e,"STRONG",{});var SWr=s(lte);BYe=r(SWr,"visual_bert"),SWr.forEach(t),IYe=r(n0e," \u2014 "),GS=n(n0e,"A",{href:!0});var RWr=s(GS);NYe=r(RWr,"VisualBertConfig"),RWr.forEach(t),qYe=r(n0e," (VisualBert model)"),n0e.forEach(t),jYe=i(y),fg=n(y,"LI",{});var s0e=s(fg);ite=n(s0e,"STRONG",{});var PWr=s(ite);DYe=r(PWr,"vit"),PWr.forEach(t),GYe=r(s0e," \u2014 "),OS=n(s0e,"A",{href:!0});var BWr=s(OS);OYe=r(BWr,"ViTConfig"),BWr.forEach(t),VYe=r(s0e," (ViT model)"),s0e.forEach(t),XYe=i(y),mg=n(y,"LI",{});var l0e=s(mg);dte=n(l0e,"STRONG",{});var IWr=s(dte);zYe=r(IWr,"vit_mae"),IWr.forEach(t),WYe=r(l0e," \u2014 "),VS=n(l0e,"A",{href:!0});var NWr=s(VS);QYe=r(NWr,"ViTMAEConfig"),NWr.forEach(t),HYe=r(l0e," (ViTMAE model)"),l0e.forEach(t),UYe=i(y),gg=n(y,"LI",{});var i0e=s(gg);cte=n(i0e,"STRONG",{});var qWr=s(cte);JYe=r(qWr,"wav2vec2"),qWr.forEach(t),YYe=r(i0e," \u2014 "),XS=n(i0e,"A",{href:!0});var jWr=s(XS);KYe=r(jWr,"Wav2Vec2Config"),jWr.forEach(t),ZYe=r(i0e," (Wav2Vec2 model)"),i0e.forEach(t),eKe=i(y),hg=n(y,"LI",{});var d0e=s(hg);fte=n(d0e,"STRONG",{});var DWr=s(fte);oKe=r(DWr,"wav2vec2-conformer"),DWr.forEach(t),rKe=r(d0e," \u2014 "),zS=n(d0e,"A",{href:!0});var GWr=s(zS);tKe=r(GWr,"Wav2Vec2ConformerConfig"),GWr.forEach(t),aKe=r(d0e," (Wav2Vec2-Conformer model)"),d0e.forEach(t),nKe=i(y),pg=n(y,"LI",{});var c0e=s(pg);mte=n(c0e,"STRONG",{});var OWr=s(mte);sKe=r(OWr,"wavlm"),OWr.forEach(t),lKe=r(c0e," \u2014 "),WS=n(c0e,"A",{href:!0});var VWr=s(WS);iKe=r(VWr,"WavLMConfig"),VWr.forEach(t),dKe=r(c0e," (WavLM model)"),c0e.forEach(t),cKe=i(y),_g=n(y,"LI",{});var f0e=s(_g);gte=n(f0e,"STRONG",{});var XWr=s(gte);fKe=r(XWr,"xglm"),XWr.forEach(t),mKe=r(f0e," \u2014 "),QS=n(f0e,"A",{href:!0});var zWr=s(QS);gKe=r(zWr,"XGLMConfig"),zWr.forEach(t),hKe=r(f0e," (XGLM model)"),f0e.forEach(t),pKe=i(y),ug=n(y,"LI",{});var m0e=s(ug);hte=n(m0e,"STRONG",{});var WWr=s(hte);_Ke=r(WWr,"xlm"),WWr.forEach(t),uKe=r(m0e," \u2014 "),HS=n(m0e,"A",{href:!0});var QWr=s(HS);bKe=r(QWr,"XLMConfig"),QWr.forEach(t),vKe=r(m0e," (XLM model)"),m0e.forEach(t),FKe=i(y),bg=n(y,"LI",{});var g0e=s(bg);pte=n(g0e,"STRONG",{});var HWr=s(pte);TKe=r(HWr,"xlm-prophetnet"),HWr.forEach(t),MKe=r(g0e," \u2014 "),US=n(g0e,"A",{href:!0});var UWr=s(US);EKe=r(UWr,"XLMProphetNetConfig"),UWr.forEach(t),CKe=r(g0e," (XLMProphetNet model)"),g0e.forEach(t),wKe=i(y),vg=n(y,"LI",{});var h0e=s(vg);_te=n(h0e,"STRONG",{});var JWr=s(_te);AKe=r(JWr,"xlm-roberta"),JWr.forEach(t),yKe=r(h0e," \u2014 "),JS=n(h0e,"A",{href:!0});var YWr=s(JS);LKe=r(YWr,"XLMRobertaConfig"),YWr.forEach(t),xKe=r(h0e," (XLM-RoBERTa model)"),h0e.forEach(t),$Ke=i(y),Fg=n(y,"LI",{});var p0e=s(Fg);ute=n(p0e,"STRONG",{});var KWr=s(ute);kKe=r(KWr,"xlm-roberta-xl"),KWr.forEach(t),SKe=r(p0e," \u2014 "),YS=n(p0e,"A",{href:!0});var ZWr=s(YS);RKe=r(ZWr,"XLMRobertaXLConfig"),ZWr.forEach(t),PKe=r(p0e," (XLM-RoBERTa-XL model)"),p0e.forEach(t),BKe=i(y),Tg=n(y,"LI",{});var _0e=s(Tg);bte=n(_0e,"STRONG",{});var eQr=s(bte);IKe=r(eQr,"xlnet"),eQr.forEach(t),NKe=r(_0e," \u2014 "),KS=n(_0e,"A",{href:!0});var oQr=s(KS);qKe=r(oQr,"XLNetConfig"),oQr.forEach(t),jKe=r(_0e," (XLNet model)"),_0e.forEach(t),DKe=i(y),Mg=n(y,"LI",{});var u0e=s(Mg);vte=n(u0e,"STRONG",{});var rQr=s(vte);GKe=r(rQr,"yolos"),rQr.forEach(t),OKe=r(u0e," \u2014 "),ZS=n(u0e,"A",{href:!0});var tQr=s(ZS);VKe=r(tQr,"YolosConfig"),tQr.forEach(t),XKe=r(u0e," (YOLOS model)"),u0e.forEach(t),zKe=i(y),Eg=n(y,"LI",{});var b0e=s(Eg);Fte=n(b0e,"STRONG",{});var aQr=s(Fte);WKe=r(aQr,"yoso"),aQr.forEach(t),QKe=r(b0e," \u2014 "),eR=n(b0e,"A",{href:!0});var nQr=s(eR);HKe=r(nQr,"YosoConfig"),nQr.forEach(t),UKe=r(b0e," (YOSO model)"),b0e.forEach(t),y.forEach(t),JKe=i(rt),T(Cg.$$.fragment,rt),rt.forEach(t),YKe=i(ot),wg=n(ot,"DIV",{class:!0});var cDe=s(wg);T(IA.$$.fragment,cDe),KKe=i(cDe),Tte=n(cDe,"P",{});var sQr=s(Tte);ZKe=r(sQr,"Register a new configuration for this class."),sQr.forEach(t),cDe.forEach(t),ot.forEach(t),gqe=i(f),Mi=n(f,"H2",{class:!0});var fDe=s(Mi);Ag=n(fDe,"A",{id:!0,class:!0,href:!0});var lQr=s(Ag);Mte=n(lQr,"SPAN",{});var iQr=s(Mte);T(NA.$$.fragment,iQr),iQr.forEach(t),lQr.forEach(t),eZe=i(fDe),Ete=n(fDe,"SPAN",{});var dQr=s(Ete);oZe=r(dQr,"AutoTokenizer"),dQr.forEach(t),fDe.forEach(t),hqe=i(f),wo=n(f,"DIV",{class:!0});var Ns=s(wo);T(qA.$$.fragment,Ns),rZe=i(Ns),jA=n(Ns,"P",{});var mDe=s(jA);tZe=r(mDe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oR=n(mDe,"A",{href:!0});var cQr=s(oR);aZe=r(cQr,"AutoTokenizer.from_pretrained()"),cQr.forEach(t),nZe=r(mDe," class method."),mDe.forEach(t),sZe=i(Ns),DA=n(Ns,"P",{});var gDe=s(DA);lZe=r(gDe,"This class cannot be instantiated directly using "),Cte=n(gDe,"CODE",{});var fQr=s(Cte);iZe=r(fQr,"__init__()"),fQr.forEach(t),dZe=r(gDe," (throws an error)."),gDe.forEach(t),cZe=i(Ns),Cr=n(Ns,"DIV",{class:!0});var qs=s(Cr);T(GA.$$.fragment,qs),fZe=i(qs),wte=n(qs,"P",{});var mQr=s(wte);mZe=r(mQr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),mQr.forEach(t),gZe=i(qs),ya=n(qs,"P",{});var S0=s(ya);hZe=r(S0,"The tokenizer class to instantiate is selected based on the "),Ate=n(S0,"CODE",{});var gQr=s(Ate);pZe=r(gQr,"model_type"),gQr.forEach(t),_Ze=r(S0,` property of the config object (either
passed as an argument or loaded from `),yte=n(S0,"CODE",{});var hQr=s(yte);uZe=r(hQr,"pretrained_model_name_or_path"),hQr.forEach(t),bZe=r(S0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lte=n(S0,"CODE",{});var pQr=s(Lte);vZe=r(pQr,"pretrained_model_name_or_path"),pQr.forEach(t),FZe=r(S0,":"),S0.forEach(t),TZe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var Ox=s(Sn);xte=n(Ox,"STRONG",{});var _Qr=s(xte);MZe=r(_Qr,"albert"),_Qr.forEach(t),EZe=r(Ox," \u2014 "),rR=n(Ox,"A",{href:!0});var uQr=s(rR);CZe=r(uQr,"AlbertTokenizer"),uQr.forEach(t),wZe=r(Ox," or "),tR=n(Ox,"A",{href:!0});var bQr=s(tR);AZe=r(bQr,"AlbertTokenizerFast"),bQr.forEach(t),yZe=r(Ox," (ALBERT model)"),Ox.forEach(t),LZe=i(S),Rn=n(S,"LI",{});var Vx=s(Rn);$te=n(Vx,"STRONG",{});var vQr=s($te);xZe=r(vQr,"bart"),vQr.forEach(t),$Ze=r(Vx," \u2014 "),aR=n(Vx,"A",{href:!0});var FQr=s(aR);kZe=r(FQr,"BartTokenizer"),FQr.forEach(t),SZe=r(Vx," or "),nR=n(Vx,"A",{href:!0});var TQr=s(nR);RZe=r(TQr,"BartTokenizerFast"),TQr.forEach(t),PZe=r(Vx," (BART model)"),Vx.forEach(t),BZe=i(S),Pn=n(S,"LI",{});var Xx=s(Pn);kte=n(Xx,"STRONG",{});var MQr=s(kte);IZe=r(MQr,"barthez"),MQr.forEach(t),NZe=r(Xx," \u2014 "),sR=n(Xx,"A",{href:!0});var EQr=s(sR);qZe=r(EQr,"BarthezTokenizer"),EQr.forEach(t),jZe=r(Xx," or "),lR=n(Xx,"A",{href:!0});var CQr=s(lR);DZe=r(CQr,"BarthezTokenizerFast"),CQr.forEach(t),GZe=r(Xx," (BARThez model)"),Xx.forEach(t),OZe=i(S),yg=n(S,"LI",{});var v0e=s(yg);Ste=n(v0e,"STRONG",{});var wQr=s(Ste);VZe=r(wQr,"bartpho"),wQr.forEach(t),XZe=r(v0e," \u2014 "),iR=n(v0e,"A",{href:!0});var AQr=s(iR);zZe=r(AQr,"BartphoTokenizer"),AQr.forEach(t),WZe=r(v0e," (BARTpho model)"),v0e.forEach(t),QZe=i(S),Bn=n(S,"LI",{});var zx=s(Bn);Rte=n(zx,"STRONG",{});var yQr=s(Rte);HZe=r(yQr,"bert"),yQr.forEach(t),UZe=r(zx," \u2014 "),dR=n(zx,"A",{href:!0});var LQr=s(dR);JZe=r(LQr,"BertTokenizer"),LQr.forEach(t),YZe=r(zx," or "),cR=n(zx,"A",{href:!0});var xQr=s(cR);KZe=r(xQr,"BertTokenizerFast"),xQr.forEach(t),ZZe=r(zx," (BERT model)"),zx.forEach(t),eeo=i(S),Lg=n(S,"LI",{});var F0e=s(Lg);Pte=n(F0e,"STRONG",{});var $Qr=s(Pte);oeo=r($Qr,"bert-generation"),$Qr.forEach(t),reo=r(F0e," \u2014 "),fR=n(F0e,"A",{href:!0});var kQr=s(fR);teo=r(kQr,"BertGenerationTokenizer"),kQr.forEach(t),aeo=r(F0e," (Bert Generation model)"),F0e.forEach(t),neo=i(S),xg=n(S,"LI",{});var T0e=s(xg);Bte=n(T0e,"STRONG",{});var SQr=s(Bte);seo=r(SQr,"bert-japanese"),SQr.forEach(t),leo=r(T0e," \u2014 "),mR=n(T0e,"A",{href:!0});var RQr=s(mR);ieo=r(RQr,"BertJapaneseTokenizer"),RQr.forEach(t),deo=r(T0e," (BertJapanese model)"),T0e.forEach(t),ceo=i(S),$g=n(S,"LI",{});var M0e=s($g);Ite=n(M0e,"STRONG",{});var PQr=s(Ite);feo=r(PQr,"bertweet"),PQr.forEach(t),meo=r(M0e," \u2014 "),gR=n(M0e,"A",{href:!0});var BQr=s(gR);geo=r(BQr,"BertweetTokenizer"),BQr.forEach(t),heo=r(M0e," (Bertweet model)"),M0e.forEach(t),peo=i(S),In=n(S,"LI",{});var Wx=s(In);Nte=n(Wx,"STRONG",{});var IQr=s(Nte);_eo=r(IQr,"big_bird"),IQr.forEach(t),ueo=r(Wx," \u2014 "),hR=n(Wx,"A",{href:!0});var NQr=s(hR);beo=r(NQr,"BigBirdTokenizer"),NQr.forEach(t),veo=r(Wx," or "),pR=n(Wx,"A",{href:!0});var qQr=s(pR);Feo=r(qQr,"BigBirdTokenizerFast"),qQr.forEach(t),Teo=r(Wx," (BigBird model)"),Wx.forEach(t),Meo=i(S),Nn=n(S,"LI",{});var Qx=s(Nn);qte=n(Qx,"STRONG",{});var jQr=s(qte);Eeo=r(jQr,"bigbird_pegasus"),jQr.forEach(t),Ceo=r(Qx," \u2014 "),_R=n(Qx,"A",{href:!0});var DQr=s(_R);weo=r(DQr,"PegasusTokenizer"),DQr.forEach(t),Aeo=r(Qx," or "),uR=n(Qx,"A",{href:!0});var GQr=s(uR);yeo=r(GQr,"PegasusTokenizerFast"),GQr.forEach(t),Leo=r(Qx," (BigBirdPegasus model)"),Qx.forEach(t),xeo=i(S),qn=n(S,"LI",{});var Hx=s(qn);jte=n(Hx,"STRONG",{});var OQr=s(jte);$eo=r(OQr,"blenderbot"),OQr.forEach(t),keo=r(Hx," \u2014 "),bR=n(Hx,"A",{href:!0});var VQr=s(bR);Seo=r(VQr,"BlenderbotTokenizer"),VQr.forEach(t),Reo=r(Hx," or "),vR=n(Hx,"A",{href:!0});var XQr=s(vR);Peo=r(XQr,"BlenderbotTokenizerFast"),XQr.forEach(t),Beo=r(Hx," (Blenderbot model)"),Hx.forEach(t),Ieo=i(S),kg=n(S,"LI",{});var E0e=s(kg);Dte=n(E0e,"STRONG",{});var zQr=s(Dte);Neo=r(zQr,"blenderbot-small"),zQr.forEach(t),qeo=r(E0e," \u2014 "),FR=n(E0e,"A",{href:!0});var WQr=s(FR);jeo=r(WQr,"BlenderbotSmallTokenizer"),WQr.forEach(t),Deo=r(E0e," (BlenderbotSmall model)"),E0e.forEach(t),Geo=i(S),Sg=n(S,"LI",{});var C0e=s(Sg);Gte=n(C0e,"STRONG",{});var QQr=s(Gte);Oeo=r(QQr,"byt5"),QQr.forEach(t),Veo=r(C0e," \u2014 "),TR=n(C0e,"A",{href:!0});var HQr=s(TR);Xeo=r(HQr,"ByT5Tokenizer"),HQr.forEach(t),zeo=r(C0e," (ByT5 model)"),C0e.forEach(t),Weo=i(S),jn=n(S,"LI",{});var Ux=s(jn);Ote=n(Ux,"STRONG",{});var UQr=s(Ote);Qeo=r(UQr,"camembert"),UQr.forEach(t),Heo=r(Ux," \u2014 "),MR=n(Ux,"A",{href:!0});var JQr=s(MR);Ueo=r(JQr,"CamembertTokenizer"),JQr.forEach(t),Jeo=r(Ux," or "),ER=n(Ux,"A",{href:!0});var YQr=s(ER);Yeo=r(YQr,"CamembertTokenizerFast"),YQr.forEach(t),Keo=r(Ux," (CamemBERT model)"),Ux.forEach(t),Zeo=i(S),Rg=n(S,"LI",{});var w0e=s(Rg);Vte=n(w0e,"STRONG",{});var KQr=s(Vte);eoo=r(KQr,"canine"),KQr.forEach(t),ooo=r(w0e," \u2014 "),CR=n(w0e,"A",{href:!0});var ZQr=s(CR);roo=r(ZQr,"CanineTokenizer"),ZQr.forEach(t),too=r(w0e," (Canine model)"),w0e.forEach(t),aoo=i(S),Dn=n(S,"LI",{});var Jx=s(Dn);Xte=n(Jx,"STRONG",{});var eHr=s(Xte);noo=r(eHr,"clip"),eHr.forEach(t),soo=r(Jx," \u2014 "),wR=n(Jx,"A",{href:!0});var oHr=s(wR);loo=r(oHr,"CLIPTokenizer"),oHr.forEach(t),ioo=r(Jx," or "),AR=n(Jx,"A",{href:!0});var rHr=s(AR);doo=r(rHr,"CLIPTokenizerFast"),rHr.forEach(t),coo=r(Jx," (CLIP model)"),Jx.forEach(t),foo=i(S),Gn=n(S,"LI",{});var Yx=s(Gn);zte=n(Yx,"STRONG",{});var tHr=s(zte);moo=r(tHr,"convbert"),tHr.forEach(t),goo=r(Yx," \u2014 "),yR=n(Yx,"A",{href:!0});var aHr=s(yR);hoo=r(aHr,"ConvBertTokenizer"),aHr.forEach(t),poo=r(Yx," or "),LR=n(Yx,"A",{href:!0});var nHr=s(LR);_oo=r(nHr,"ConvBertTokenizerFast"),nHr.forEach(t),uoo=r(Yx," (ConvBERT model)"),Yx.forEach(t),boo=i(S),On=n(S,"LI",{});var Kx=s(On);Wte=n(Kx,"STRONG",{});var sHr=s(Wte);voo=r(sHr,"cpm"),sHr.forEach(t),Foo=r(Kx," \u2014 "),xR=n(Kx,"A",{href:!0});var lHr=s(xR);Too=r(lHr,"CpmTokenizer"),lHr.forEach(t),Moo=r(Kx," or "),$R=n(Kx,"A",{href:!0});var iHr=s($R);Eoo=r(iHr,"CpmTokenizerFast"),iHr.forEach(t),Coo=r(Kx," (CPM model)"),Kx.forEach(t),woo=i(S),Pg=n(S,"LI",{});var A0e=s(Pg);Qte=n(A0e,"STRONG",{});var dHr=s(Qte);Aoo=r(dHr,"ctrl"),dHr.forEach(t),yoo=r(A0e," \u2014 "),kR=n(A0e,"A",{href:!0});var cHr=s(kR);Loo=r(cHr,"CTRLTokenizer"),cHr.forEach(t),xoo=r(A0e," (CTRL model)"),A0e.forEach(t),$oo=i(S),Vn=n(S,"LI",{});var Zx=s(Vn);Hte=n(Zx,"STRONG",{});var fHr=s(Hte);koo=r(fHr,"data2vec-text"),fHr.forEach(t),Soo=r(Zx," \u2014 "),SR=n(Zx,"A",{href:!0});var mHr=s(SR);Roo=r(mHr,"RobertaTokenizer"),mHr.forEach(t),Poo=r(Zx," or "),RR=n(Zx,"A",{href:!0});var gHr=s(RR);Boo=r(gHr,"RobertaTokenizerFast"),gHr.forEach(t),Ioo=r(Zx," (Data2VecText model)"),Zx.forEach(t),Noo=i(S),Xn=n(S,"LI",{});var e$=s(Xn);Ute=n(e$,"STRONG",{});var hHr=s(Ute);qoo=r(hHr,"deberta"),hHr.forEach(t),joo=r(e$," \u2014 "),PR=n(e$,"A",{href:!0});var pHr=s(PR);Doo=r(pHr,"DebertaTokenizer"),pHr.forEach(t),Goo=r(e$," or "),BR=n(e$,"A",{href:!0});var _Hr=s(BR);Ooo=r(_Hr,"DebertaTokenizerFast"),_Hr.forEach(t),Voo=r(e$," (DeBERTa model)"),e$.forEach(t),Xoo=i(S),zn=n(S,"LI",{});var o$=s(zn);Jte=n(o$,"STRONG",{});var uHr=s(Jte);zoo=r(uHr,"deberta-v2"),uHr.forEach(t),Woo=r(o$," \u2014 "),IR=n(o$,"A",{href:!0});var bHr=s(IR);Qoo=r(bHr,"DebertaV2Tokenizer"),bHr.forEach(t),Hoo=r(o$," or "),NR=n(o$,"A",{href:!0});var vHr=s(NR);Uoo=r(vHr,"DebertaV2TokenizerFast"),vHr.forEach(t),Joo=r(o$," (DeBERTa-v2 model)"),o$.forEach(t),Yoo=i(S),Wn=n(S,"LI",{});var r$=s(Wn);Yte=n(r$,"STRONG",{});var FHr=s(Yte);Koo=r(FHr,"distilbert"),FHr.forEach(t),Zoo=r(r$," \u2014 "),qR=n(r$,"A",{href:!0});var THr=s(qR);ero=r(THr,"DistilBertTokenizer"),THr.forEach(t),oro=r(r$," or "),jR=n(r$,"A",{href:!0});var MHr=s(jR);rro=r(MHr,"DistilBertTokenizerFast"),MHr.forEach(t),tro=r(r$," (DistilBERT model)"),r$.forEach(t),aro=i(S),Qn=n(S,"LI",{});var t$=s(Qn);Kte=n(t$,"STRONG",{});var EHr=s(Kte);nro=r(EHr,"dpr"),EHr.forEach(t),sro=r(t$," \u2014 "),DR=n(t$,"A",{href:!0});var CHr=s(DR);lro=r(CHr,"DPRQuestionEncoderTokenizer"),CHr.forEach(t),iro=r(t$," or "),GR=n(t$,"A",{href:!0});var wHr=s(GR);dro=r(wHr,"DPRQuestionEncoderTokenizerFast"),wHr.forEach(t),cro=r(t$," (DPR model)"),t$.forEach(t),fro=i(S),Hn=n(S,"LI",{});var a$=s(Hn);Zte=n(a$,"STRONG",{});var AHr=s(Zte);mro=r(AHr,"electra"),AHr.forEach(t),gro=r(a$," \u2014 "),OR=n(a$,"A",{href:!0});var yHr=s(OR);hro=r(yHr,"ElectraTokenizer"),yHr.forEach(t),pro=r(a$," or "),VR=n(a$,"A",{href:!0});var LHr=s(VR);_ro=r(LHr,"ElectraTokenizerFast"),LHr.forEach(t),uro=r(a$," (ELECTRA model)"),a$.forEach(t),bro=i(S),Bg=n(S,"LI",{});var y0e=s(Bg);eae=n(y0e,"STRONG",{});var xHr=s(eae);vro=r(xHr,"flaubert"),xHr.forEach(t),Fro=r(y0e," \u2014 "),XR=n(y0e,"A",{href:!0});var $Hr=s(XR);Tro=r($Hr,"FlaubertTokenizer"),$Hr.forEach(t),Mro=r(y0e," (FlauBERT model)"),y0e.forEach(t),Ero=i(S),Un=n(S,"LI",{});var n$=s(Un);oae=n(n$,"STRONG",{});var kHr=s(oae);Cro=r(kHr,"fnet"),kHr.forEach(t),wro=r(n$," \u2014 "),zR=n(n$,"A",{href:!0});var SHr=s(zR);Aro=r(SHr,"FNetTokenizer"),SHr.forEach(t),yro=r(n$," or "),WR=n(n$,"A",{href:!0});var RHr=s(WR);Lro=r(RHr,"FNetTokenizerFast"),RHr.forEach(t),xro=r(n$," (FNet model)"),n$.forEach(t),$ro=i(S),Ig=n(S,"LI",{});var L0e=s(Ig);rae=n(L0e,"STRONG",{});var PHr=s(rae);kro=r(PHr,"fsmt"),PHr.forEach(t),Sro=r(L0e," \u2014 "),QR=n(L0e,"A",{href:!0});var BHr=s(QR);Rro=r(BHr,"FSMTTokenizer"),BHr.forEach(t),Pro=r(L0e," (FairSeq Machine-Translation model)"),L0e.forEach(t),Bro=i(S),Jn=n(S,"LI",{});var s$=s(Jn);tae=n(s$,"STRONG",{});var IHr=s(tae);Iro=r(IHr,"funnel"),IHr.forEach(t),Nro=r(s$," \u2014 "),HR=n(s$,"A",{href:!0});var NHr=s(HR);qro=r(NHr,"FunnelTokenizer"),NHr.forEach(t),jro=r(s$," or "),UR=n(s$,"A",{href:!0});var qHr=s(UR);Dro=r(qHr,"FunnelTokenizerFast"),qHr.forEach(t),Gro=r(s$," (Funnel Transformer model)"),s$.forEach(t),Oro=i(S),Yn=n(S,"LI",{});var l$=s(Yn);aae=n(l$,"STRONG",{});var jHr=s(aae);Vro=r(jHr,"gpt2"),jHr.forEach(t),Xro=r(l$," \u2014 "),JR=n(l$,"A",{href:!0});var DHr=s(JR);zro=r(DHr,"GPT2Tokenizer"),DHr.forEach(t),Wro=r(l$," or "),YR=n(l$,"A",{href:!0});var GHr=s(YR);Qro=r(GHr,"GPT2TokenizerFast"),GHr.forEach(t),Hro=r(l$," (OpenAI GPT-2 model)"),l$.forEach(t),Uro=i(S),Kn=n(S,"LI",{});var i$=s(Kn);nae=n(i$,"STRONG",{});var OHr=s(nae);Jro=r(OHr,"gpt_neo"),OHr.forEach(t),Yro=r(i$," \u2014 "),KR=n(i$,"A",{href:!0});var VHr=s(KR);Kro=r(VHr,"GPT2Tokenizer"),VHr.forEach(t),Zro=r(i$," or "),ZR=n(i$,"A",{href:!0});var XHr=s(ZR);eto=r(XHr,"GPT2TokenizerFast"),XHr.forEach(t),oto=r(i$," (GPT Neo model)"),i$.forEach(t),rto=i(S),Ng=n(S,"LI",{});var x0e=s(Ng);sae=n(x0e,"STRONG",{});var zHr=s(sae);tto=r(zHr,"gpt_neox"),zHr.forEach(t),ato=r(x0e," \u2014 "),eP=n(x0e,"A",{href:!0});var WHr=s(eP);nto=r(WHr,"GPTNeoXTokenizerFast"),WHr.forEach(t),sto=r(x0e," (GPT NeoX model)"),x0e.forEach(t),lto=i(S),Zn=n(S,"LI",{});var d$=s(Zn);lae=n(d$,"STRONG",{});var QHr=s(lae);ito=r(QHr,"gptj"),QHr.forEach(t),dto=r(d$," \u2014 "),oP=n(d$,"A",{href:!0});var HHr=s(oP);cto=r(HHr,"GPT2Tokenizer"),HHr.forEach(t),fto=r(d$," or "),rP=n(d$,"A",{href:!0});var UHr=s(rP);mto=r(UHr,"GPT2TokenizerFast"),UHr.forEach(t),gto=r(d$," (GPT-J model)"),d$.forEach(t),hto=i(S),es=n(S,"LI",{});var c$=s(es);iae=n(c$,"STRONG",{});var JHr=s(iae);pto=r(JHr,"herbert"),JHr.forEach(t),_to=r(c$," \u2014 "),tP=n(c$,"A",{href:!0});var YHr=s(tP);uto=r(YHr,"HerbertTokenizer"),YHr.forEach(t),bto=r(c$," or "),aP=n(c$,"A",{href:!0});var KHr=s(aP);vto=r(KHr,"HerbertTokenizerFast"),KHr.forEach(t),Fto=r(c$," (HerBERT model)"),c$.forEach(t),Tto=i(S),qg=n(S,"LI",{});var $0e=s(qg);dae=n($0e,"STRONG",{});var ZHr=s(dae);Mto=r(ZHr,"hubert"),ZHr.forEach(t),Eto=r($0e," \u2014 "),nP=n($0e,"A",{href:!0});var eUr=s(nP);Cto=r(eUr,"Wav2Vec2CTCTokenizer"),eUr.forEach(t),wto=r($0e," (Hubert model)"),$0e.forEach(t),Ato=i(S),os=n(S,"LI",{});var f$=s(os);cae=n(f$,"STRONG",{});var oUr=s(cae);yto=r(oUr,"ibert"),oUr.forEach(t),Lto=r(f$," \u2014 "),sP=n(f$,"A",{href:!0});var rUr=s(sP);xto=r(rUr,"RobertaTokenizer"),rUr.forEach(t),$to=r(f$," or "),lP=n(f$,"A",{href:!0});var tUr=s(lP);kto=r(tUr,"RobertaTokenizerFast"),tUr.forEach(t),Sto=r(f$," (I-BERT model)"),f$.forEach(t),Rto=i(S),rs=n(S,"LI",{});var m$=s(rs);fae=n(m$,"STRONG",{});var aUr=s(fae);Pto=r(aUr,"layoutlm"),aUr.forEach(t),Bto=r(m$," \u2014 "),iP=n(m$,"A",{href:!0});var nUr=s(iP);Ito=r(nUr,"LayoutLMTokenizer"),nUr.forEach(t),Nto=r(m$," or "),dP=n(m$,"A",{href:!0});var sUr=s(dP);qto=r(sUr,"LayoutLMTokenizerFast"),sUr.forEach(t),jto=r(m$," (LayoutLM model)"),m$.forEach(t),Dto=i(S),ts=n(S,"LI",{});var g$=s(ts);mae=n(g$,"STRONG",{});var lUr=s(mae);Gto=r(lUr,"layoutlmv2"),lUr.forEach(t),Oto=r(g$," \u2014 "),cP=n(g$,"A",{href:!0});var iUr=s(cP);Vto=r(iUr,"LayoutLMv2Tokenizer"),iUr.forEach(t),Xto=r(g$," or "),fP=n(g$,"A",{href:!0});var dUr=s(fP);zto=r(dUr,"LayoutLMv2TokenizerFast"),dUr.forEach(t),Wto=r(g$," (LayoutLMv2 model)"),g$.forEach(t),Qto=i(S),as=n(S,"LI",{});var h$=s(as);gae=n(h$,"STRONG",{});var cUr=s(gae);Hto=r(cUr,"layoutlmv3"),cUr.forEach(t),Uto=r(h$," \u2014 "),mP=n(h$,"A",{href:!0});var fUr=s(mP);Jto=r(fUr,"LayoutLMv3Tokenizer"),fUr.forEach(t),Yto=r(h$," or "),gP=n(h$,"A",{href:!0});var mUr=s(gP);Kto=r(mUr,"LayoutLMv3TokenizerFast"),mUr.forEach(t),Zto=r(h$," (LayoutLMv3 model)"),h$.forEach(t),eao=i(S),ns=n(S,"LI",{});var p$=s(ns);hae=n(p$,"STRONG",{});var gUr=s(hae);oao=r(gUr,"layoutxlm"),gUr.forEach(t),rao=r(p$," \u2014 "),hP=n(p$,"A",{href:!0});var hUr=s(hP);tao=r(hUr,"LayoutXLMTokenizer"),hUr.forEach(t),aao=r(p$," or "),pP=n(p$,"A",{href:!0});var pUr=s(pP);nao=r(pUr,"LayoutXLMTokenizerFast"),pUr.forEach(t),sao=r(p$," (LayoutXLM model)"),p$.forEach(t),lao=i(S),ss=n(S,"LI",{});var _$=s(ss);pae=n(_$,"STRONG",{});var _Ur=s(pae);iao=r(_Ur,"led"),_Ur.forEach(t),dao=r(_$," \u2014 "),_P=n(_$,"A",{href:!0});var uUr=s(_P);cao=r(uUr,"LEDTokenizer"),uUr.forEach(t),fao=r(_$," or "),uP=n(_$,"A",{href:!0});var bUr=s(uP);mao=r(bUr,"LEDTokenizerFast"),bUr.forEach(t),gao=r(_$," (LED model)"),_$.forEach(t),hao=i(S),ls=n(S,"LI",{});var u$=s(ls);_ae=n(u$,"STRONG",{});var vUr=s(_ae);pao=r(vUr,"longformer"),vUr.forEach(t),_ao=r(u$," \u2014 "),bP=n(u$,"A",{href:!0});var FUr=s(bP);uao=r(FUr,"LongformerTokenizer"),FUr.forEach(t),bao=r(u$," or "),vP=n(u$,"A",{href:!0});var TUr=s(vP);vao=r(TUr,"LongformerTokenizerFast"),TUr.forEach(t),Fao=r(u$," (Longformer model)"),u$.forEach(t),Tao=i(S),jg=n(S,"LI",{});var k0e=s(jg);uae=n(k0e,"STRONG",{});var MUr=s(uae);Mao=r(MUr,"luke"),MUr.forEach(t),Eao=r(k0e," \u2014 "),FP=n(k0e,"A",{href:!0});var EUr=s(FP);Cao=r(EUr,"LukeTokenizer"),EUr.forEach(t),wao=r(k0e," (LUKE model)"),k0e.forEach(t),Aao=i(S),is=n(S,"LI",{});var b$=s(is);bae=n(b$,"STRONG",{});var CUr=s(bae);yao=r(CUr,"lxmert"),CUr.forEach(t),Lao=r(b$," \u2014 "),TP=n(b$,"A",{href:!0});var wUr=s(TP);xao=r(wUr,"LxmertTokenizer"),wUr.forEach(t),$ao=r(b$," or "),MP=n(b$,"A",{href:!0});var AUr=s(MP);kao=r(AUr,"LxmertTokenizerFast"),AUr.forEach(t),Sao=r(b$," (LXMERT model)"),b$.forEach(t),Rao=i(S),Dg=n(S,"LI",{});var S0e=s(Dg);vae=n(S0e,"STRONG",{});var yUr=s(vae);Pao=r(yUr,"m2m_100"),yUr.forEach(t),Bao=r(S0e," \u2014 "),EP=n(S0e,"A",{href:!0});var LUr=s(EP);Iao=r(LUr,"M2M100Tokenizer"),LUr.forEach(t),Nao=r(S0e," (M2M100 model)"),S0e.forEach(t),qao=i(S),Gg=n(S,"LI",{});var R0e=s(Gg);Fae=n(R0e,"STRONG",{});var xUr=s(Fae);jao=r(xUr,"marian"),xUr.forEach(t),Dao=r(R0e," \u2014 "),CP=n(R0e,"A",{href:!0});var $Ur=s(CP);Gao=r($Ur,"MarianTokenizer"),$Ur.forEach(t),Oao=r(R0e," (Marian model)"),R0e.forEach(t),Vao=i(S),ds=n(S,"LI",{});var v$=s(ds);Tae=n(v$,"STRONG",{});var kUr=s(Tae);Xao=r(kUr,"mbart"),kUr.forEach(t),zao=r(v$," \u2014 "),wP=n(v$,"A",{href:!0});var SUr=s(wP);Wao=r(SUr,"MBartTokenizer"),SUr.forEach(t),Qao=r(v$," or "),AP=n(v$,"A",{href:!0});var RUr=s(AP);Hao=r(RUr,"MBartTokenizerFast"),RUr.forEach(t),Uao=r(v$," (mBART model)"),v$.forEach(t),Jao=i(S),cs=n(S,"LI",{});var F$=s(cs);Mae=n(F$,"STRONG",{});var PUr=s(Mae);Yao=r(PUr,"mbart50"),PUr.forEach(t),Kao=r(F$," \u2014 "),yP=n(F$,"A",{href:!0});var BUr=s(yP);Zao=r(BUr,"MBart50Tokenizer"),BUr.forEach(t),eno=r(F$," or "),LP=n(F$,"A",{href:!0});var IUr=s(LP);ono=r(IUr,"MBart50TokenizerFast"),IUr.forEach(t),rno=r(F$," (mBART-50 model)"),F$.forEach(t),tno=i(S),fs=n(S,"LI",{});var T$=s(fs);Eae=n(T$,"STRONG",{});var NUr=s(Eae);ano=r(NUr,"megatron-bert"),NUr.forEach(t),nno=r(T$," \u2014 "),xP=n(T$,"A",{href:!0});var qUr=s(xP);sno=r(qUr,"BertTokenizer"),qUr.forEach(t),lno=r(T$," or "),$P=n(T$,"A",{href:!0});var jUr=s($P);ino=r(jUr,"BertTokenizerFast"),jUr.forEach(t),dno=r(T$," (MegatronBert model)"),T$.forEach(t),cno=i(S),Og=n(S,"LI",{});var P0e=s(Og);Cae=n(P0e,"STRONG",{});var DUr=s(Cae);fno=r(DUr,"mluke"),DUr.forEach(t),mno=r(P0e," \u2014 "),kP=n(P0e,"A",{href:!0});var GUr=s(kP);gno=r(GUr,"MLukeTokenizer"),GUr.forEach(t),hno=r(P0e," (mLUKE model)"),P0e.forEach(t),pno=i(S),ms=n(S,"LI",{});var M$=s(ms);wae=n(M$,"STRONG",{});var OUr=s(wae);_no=r(OUr,"mobilebert"),OUr.forEach(t),uno=r(M$," \u2014 "),SP=n(M$,"A",{href:!0});var VUr=s(SP);bno=r(VUr,"MobileBertTokenizer"),VUr.forEach(t),vno=r(M$," or "),RP=n(M$,"A",{href:!0});var XUr=s(RP);Fno=r(XUr,"MobileBertTokenizerFast"),XUr.forEach(t),Tno=r(M$," (MobileBERT model)"),M$.forEach(t),Mno=i(S),gs=n(S,"LI",{});var E$=s(gs);Aae=n(E$,"STRONG",{});var zUr=s(Aae);Eno=r(zUr,"mpnet"),zUr.forEach(t),Cno=r(E$," \u2014 "),PP=n(E$,"A",{href:!0});var WUr=s(PP);wno=r(WUr,"MPNetTokenizer"),WUr.forEach(t),Ano=r(E$," or "),BP=n(E$,"A",{href:!0});var QUr=s(BP);yno=r(QUr,"MPNetTokenizerFast"),QUr.forEach(t),Lno=r(E$," (MPNet model)"),E$.forEach(t),xno=i(S),hs=n(S,"LI",{});var C$=s(hs);yae=n(C$,"STRONG",{});var HUr=s(yae);$no=r(HUr,"mt5"),HUr.forEach(t),kno=r(C$," \u2014 "),IP=n(C$,"A",{href:!0});var UUr=s(IP);Sno=r(UUr,"MT5Tokenizer"),UUr.forEach(t),Rno=r(C$," or "),NP=n(C$,"A",{href:!0});var JUr=s(NP);Pno=r(JUr,"MT5TokenizerFast"),JUr.forEach(t),Bno=r(C$," (mT5 model)"),C$.forEach(t),Ino=i(S),ps=n(S,"LI",{});var w$=s(ps);Lae=n(w$,"STRONG",{});var YUr=s(Lae);Nno=r(YUr,"nystromformer"),YUr.forEach(t),qno=r(w$," \u2014 "),qP=n(w$,"A",{href:!0});var KUr=s(qP);jno=r(KUr,"AlbertTokenizer"),KUr.forEach(t),Dno=r(w$," or "),jP=n(w$,"A",{href:!0});var ZUr=s(jP);Gno=r(ZUr,"AlbertTokenizerFast"),ZUr.forEach(t),Ono=r(w$," (Nystromformer model)"),w$.forEach(t),Vno=i(S),_s=n(S,"LI",{});var A$=s(_s);xae=n(A$,"STRONG",{});var eJr=s(xae);Xno=r(eJr,"openai-gpt"),eJr.forEach(t),zno=r(A$," \u2014 "),DP=n(A$,"A",{href:!0});var oJr=s(DP);Wno=r(oJr,"OpenAIGPTTokenizer"),oJr.forEach(t),Qno=r(A$," or "),GP=n(A$,"A",{href:!0});var rJr=s(GP);Hno=r(rJr,"OpenAIGPTTokenizerFast"),rJr.forEach(t),Uno=r(A$," (OpenAI GPT model)"),A$.forEach(t),Jno=i(S),Vg=n(S,"LI",{});var B0e=s(Vg);$ae=n(B0e,"STRONG",{});var tJr=s($ae);Yno=r(tJr,"opt"),tJr.forEach(t),Kno=r(B0e," \u2014 "),OP=n(B0e,"A",{href:!0});var aJr=s(OP);Zno=r(aJr,"GPT2Tokenizer"),aJr.forEach(t),eso=r(B0e," (OPT model)"),B0e.forEach(t),oso=i(S),us=n(S,"LI",{});var y$=s(us);kae=n(y$,"STRONG",{});var nJr=s(kae);rso=r(nJr,"pegasus"),nJr.forEach(t),tso=r(y$," \u2014 "),VP=n(y$,"A",{href:!0});var sJr=s(VP);aso=r(sJr,"PegasusTokenizer"),sJr.forEach(t),nso=r(y$," or "),XP=n(y$,"A",{href:!0});var lJr=s(XP);sso=r(lJr,"PegasusTokenizerFast"),lJr.forEach(t),lso=r(y$," (Pegasus model)"),y$.forEach(t),iso=i(S),Xg=n(S,"LI",{});var I0e=s(Xg);Sae=n(I0e,"STRONG",{});var iJr=s(Sae);dso=r(iJr,"perceiver"),iJr.forEach(t),cso=r(I0e," \u2014 "),zP=n(I0e,"A",{href:!0});var dJr=s(zP);fso=r(dJr,"PerceiverTokenizer"),dJr.forEach(t),mso=r(I0e," (Perceiver model)"),I0e.forEach(t),gso=i(S),zg=n(S,"LI",{});var N0e=s(zg);Rae=n(N0e,"STRONG",{});var cJr=s(Rae);hso=r(cJr,"phobert"),cJr.forEach(t),pso=r(N0e," \u2014 "),WP=n(N0e,"A",{href:!0});var fJr=s(WP);_so=r(fJr,"PhobertTokenizer"),fJr.forEach(t),uso=r(N0e," (PhoBERT model)"),N0e.forEach(t),bso=i(S),Wg=n(S,"LI",{});var q0e=s(Wg);Pae=n(q0e,"STRONG",{});var mJr=s(Pae);vso=r(mJr,"plbart"),mJr.forEach(t),Fso=r(q0e," \u2014 "),QP=n(q0e,"A",{href:!0});var gJr=s(QP);Tso=r(gJr,"PLBartTokenizer"),gJr.forEach(t),Mso=r(q0e," (PLBart model)"),q0e.forEach(t),Eso=i(S),Qg=n(S,"LI",{});var j0e=s(Qg);Bae=n(j0e,"STRONG",{});var hJr=s(Bae);Cso=r(hJr,"prophetnet"),hJr.forEach(t),wso=r(j0e," \u2014 "),HP=n(j0e,"A",{href:!0});var pJr=s(HP);Aso=r(pJr,"ProphetNetTokenizer"),pJr.forEach(t),yso=r(j0e," (ProphetNet model)"),j0e.forEach(t),Lso=i(S),bs=n(S,"LI",{});var L$=s(bs);Iae=n(L$,"STRONG",{});var _Jr=s(Iae);xso=r(_Jr,"qdqbert"),_Jr.forEach(t),$so=r(L$," \u2014 "),UP=n(L$,"A",{href:!0});var uJr=s(UP);kso=r(uJr,"BertTokenizer"),uJr.forEach(t),Sso=r(L$," or "),JP=n(L$,"A",{href:!0});var bJr=s(JP);Rso=r(bJr,"BertTokenizerFast"),bJr.forEach(t),Pso=r(L$," (QDQBert model)"),L$.forEach(t),Bso=i(S),Hg=n(S,"LI",{});var D0e=s(Hg);Nae=n(D0e,"STRONG",{});var vJr=s(Nae);Iso=r(vJr,"rag"),vJr.forEach(t),Nso=r(D0e," \u2014 "),YP=n(D0e,"A",{href:!0});var FJr=s(YP);qso=r(FJr,"RagTokenizer"),FJr.forEach(t),jso=r(D0e," (RAG model)"),D0e.forEach(t),Dso=i(S),vs=n(S,"LI",{});var x$=s(vs);qae=n(x$,"STRONG",{});var TJr=s(qae);Gso=r(TJr,"realm"),TJr.forEach(t),Oso=r(x$," \u2014 "),KP=n(x$,"A",{href:!0});var MJr=s(KP);Vso=r(MJr,"RealmTokenizer"),MJr.forEach(t),Xso=r(x$," or "),ZP=n(x$,"A",{href:!0});var EJr=s(ZP);zso=r(EJr,"RealmTokenizerFast"),EJr.forEach(t),Wso=r(x$," (Realm model)"),x$.forEach(t),Qso=i(S),Fs=n(S,"LI",{});var $$=s(Fs);jae=n($$,"STRONG",{});var CJr=s(jae);Hso=r(CJr,"reformer"),CJr.forEach(t),Uso=r($$," \u2014 "),eB=n($$,"A",{href:!0});var wJr=s(eB);Jso=r(wJr,"ReformerTokenizer"),wJr.forEach(t),Yso=r($$," or "),oB=n($$,"A",{href:!0});var AJr=s(oB);Kso=r(AJr,"ReformerTokenizerFast"),AJr.forEach(t),Zso=r($$," (Reformer model)"),$$.forEach(t),elo=i(S),Ts=n(S,"LI",{});var k$=s(Ts);Dae=n(k$,"STRONG",{});var yJr=s(Dae);olo=r(yJr,"rembert"),yJr.forEach(t),rlo=r(k$," \u2014 "),rB=n(k$,"A",{href:!0});var LJr=s(rB);tlo=r(LJr,"RemBertTokenizer"),LJr.forEach(t),alo=r(k$," or "),tB=n(k$,"A",{href:!0});var xJr=s(tB);nlo=r(xJr,"RemBertTokenizerFast"),xJr.forEach(t),slo=r(k$," (RemBERT model)"),k$.forEach(t),llo=i(S),Ms=n(S,"LI",{});var S$=s(Ms);Gae=n(S$,"STRONG",{});var $Jr=s(Gae);ilo=r($Jr,"retribert"),$Jr.forEach(t),dlo=r(S$," \u2014 "),aB=n(S$,"A",{href:!0});var kJr=s(aB);clo=r(kJr,"RetriBertTokenizer"),kJr.forEach(t),flo=r(S$," or "),nB=n(S$,"A",{href:!0});var SJr=s(nB);mlo=r(SJr,"RetriBertTokenizerFast"),SJr.forEach(t),glo=r(S$," (RetriBERT model)"),S$.forEach(t),hlo=i(S),Es=n(S,"LI",{});var R$=s(Es);Oae=n(R$,"STRONG",{});var RJr=s(Oae);plo=r(RJr,"roberta"),RJr.forEach(t),_lo=r(R$," \u2014 "),sB=n(R$,"A",{href:!0});var PJr=s(sB);ulo=r(PJr,"RobertaTokenizer"),PJr.forEach(t),blo=r(R$," or "),lB=n(R$,"A",{href:!0});var BJr=s(lB);vlo=r(BJr,"RobertaTokenizerFast"),BJr.forEach(t),Flo=r(R$," (RoBERTa model)"),R$.forEach(t),Tlo=i(S),Cs=n(S,"LI",{});var P$=s(Cs);Vae=n(P$,"STRONG",{});var IJr=s(Vae);Mlo=r(IJr,"roformer"),IJr.forEach(t),Elo=r(P$," \u2014 "),iB=n(P$,"A",{href:!0});var NJr=s(iB);Clo=r(NJr,"RoFormerTokenizer"),NJr.forEach(t),wlo=r(P$," or "),dB=n(P$,"A",{href:!0});var qJr=s(dB);Alo=r(qJr,"RoFormerTokenizerFast"),qJr.forEach(t),ylo=r(P$," (RoFormer model)"),P$.forEach(t),Llo=i(S),Ug=n(S,"LI",{});var G0e=s(Ug);Xae=n(G0e,"STRONG",{});var jJr=s(Xae);xlo=r(jJr,"speech_to_text"),jJr.forEach(t),$lo=r(G0e," \u2014 "),cB=n(G0e,"A",{href:!0});var DJr=s(cB);klo=r(DJr,"Speech2TextTokenizer"),DJr.forEach(t),Slo=r(G0e," (Speech2Text model)"),G0e.forEach(t),Rlo=i(S),Jg=n(S,"LI",{});var O0e=s(Jg);zae=n(O0e,"STRONG",{});var GJr=s(zae);Plo=r(GJr,"speech_to_text_2"),GJr.forEach(t),Blo=r(O0e," \u2014 "),fB=n(O0e,"A",{href:!0});var OJr=s(fB);Ilo=r(OJr,"Speech2Text2Tokenizer"),OJr.forEach(t),Nlo=r(O0e," (Speech2Text2 model)"),O0e.forEach(t),qlo=i(S),ws=n(S,"LI",{});var B$=s(ws);Wae=n(B$,"STRONG",{});var VJr=s(Wae);jlo=r(VJr,"splinter"),VJr.forEach(t),Dlo=r(B$," \u2014 "),mB=n(B$,"A",{href:!0});var XJr=s(mB);Glo=r(XJr,"SplinterTokenizer"),XJr.forEach(t),Olo=r(B$," or "),gB=n(B$,"A",{href:!0});var zJr=s(gB);Vlo=r(zJr,"SplinterTokenizerFast"),zJr.forEach(t),Xlo=r(B$," (Splinter model)"),B$.forEach(t),zlo=i(S),As=n(S,"LI",{});var I$=s(As);Qae=n(I$,"STRONG",{});var WJr=s(Qae);Wlo=r(WJr,"squeezebert"),WJr.forEach(t),Qlo=r(I$," \u2014 "),hB=n(I$,"A",{href:!0});var QJr=s(hB);Hlo=r(QJr,"SqueezeBertTokenizer"),QJr.forEach(t),Ulo=r(I$," or "),pB=n(I$,"A",{href:!0});var HJr=s(pB);Jlo=r(HJr,"SqueezeBertTokenizerFast"),HJr.forEach(t),Ylo=r(I$," (SqueezeBERT model)"),I$.forEach(t),Klo=i(S),ys=n(S,"LI",{});var N$=s(ys);Hae=n(N$,"STRONG",{});var UJr=s(Hae);Zlo=r(UJr,"t5"),UJr.forEach(t),eio=r(N$," \u2014 "),_B=n(N$,"A",{href:!0});var JJr=s(_B);oio=r(JJr,"T5Tokenizer"),JJr.forEach(t),rio=r(N$," or "),uB=n(N$,"A",{href:!0});var YJr=s(uB);tio=r(YJr,"T5TokenizerFast"),YJr.forEach(t),aio=r(N$," (T5 model)"),N$.forEach(t),nio=i(S),Yg=n(S,"LI",{});var V0e=s(Yg);Uae=n(V0e,"STRONG",{});var KJr=s(Uae);sio=r(KJr,"tapas"),KJr.forEach(t),lio=r(V0e," \u2014 "),bB=n(V0e,"A",{href:!0});var ZJr=s(bB);iio=r(ZJr,"TapasTokenizer"),ZJr.forEach(t),dio=r(V0e," (TAPAS model)"),V0e.forEach(t),cio=i(S),Kg=n(S,"LI",{});var X0e=s(Kg);Jae=n(X0e,"STRONG",{});var eYr=s(Jae);fio=r(eYr,"tapex"),eYr.forEach(t),mio=r(X0e," \u2014 "),vB=n(X0e,"A",{href:!0});var oYr=s(vB);gio=r(oYr,"TapexTokenizer"),oYr.forEach(t),hio=r(X0e," (TAPEX model)"),X0e.forEach(t),pio=i(S),Zg=n(S,"LI",{});var z0e=s(Zg);Yae=n(z0e,"STRONG",{});var rYr=s(Yae);_io=r(rYr,"transfo-xl"),rYr.forEach(t),uio=r(z0e," \u2014 "),FB=n(z0e,"A",{href:!0});var tYr=s(FB);bio=r(tYr,"TransfoXLTokenizer"),tYr.forEach(t),vio=r(z0e," (Transformer-XL model)"),z0e.forEach(t),Fio=i(S),Ls=n(S,"LI",{});var q$=s(Ls);Kae=n(q$,"STRONG",{});var aYr=s(Kae);Tio=r(aYr,"visual_bert"),aYr.forEach(t),Mio=r(q$," \u2014 "),TB=n(q$,"A",{href:!0});var nYr=s(TB);Eio=r(nYr,"BertTokenizer"),nYr.forEach(t),Cio=r(q$," or "),MB=n(q$,"A",{href:!0});var sYr=s(MB);wio=r(sYr,"BertTokenizerFast"),sYr.forEach(t),Aio=r(q$," (VisualBert model)"),q$.forEach(t),yio=i(S),eh=n(S,"LI",{});var W0e=s(eh);Zae=n(W0e,"STRONG",{});var lYr=s(Zae);Lio=r(lYr,"wav2vec2"),lYr.forEach(t),xio=r(W0e," \u2014 "),EB=n(W0e,"A",{href:!0});var iYr=s(EB);$io=r(iYr,"Wav2Vec2CTCTokenizer"),iYr.forEach(t),kio=r(W0e," (Wav2Vec2 model)"),W0e.forEach(t),Sio=i(S),oh=n(S,"LI",{});var Q0e=s(oh);ene=n(Q0e,"STRONG",{});var dYr=s(ene);Rio=r(dYr,"wav2vec2-conformer"),dYr.forEach(t),Pio=r(Q0e," \u2014 "),CB=n(Q0e,"A",{href:!0});var cYr=s(CB);Bio=r(cYr,"Wav2Vec2CTCTokenizer"),cYr.forEach(t),Iio=r(Q0e," (Wav2Vec2-Conformer model)"),Q0e.forEach(t),Nio=i(S),rh=n(S,"LI",{});var H0e=s(rh);one=n(H0e,"STRONG",{});var fYr=s(one);qio=r(fYr,"wav2vec2_phoneme"),fYr.forEach(t),jio=r(H0e," \u2014 "),wB=n(H0e,"A",{href:!0});var mYr=s(wB);Dio=r(mYr,"Wav2Vec2PhonemeCTCTokenizer"),mYr.forEach(t),Gio=r(H0e," (Wav2Vec2Phoneme model)"),H0e.forEach(t),Oio=i(S),xs=n(S,"LI",{});var j$=s(xs);rne=n(j$,"STRONG",{});var gYr=s(rne);Vio=r(gYr,"xglm"),gYr.forEach(t),Xio=r(j$," \u2014 "),AB=n(j$,"A",{href:!0});var hYr=s(AB);zio=r(hYr,"XGLMTokenizer"),hYr.forEach(t),Wio=r(j$," or "),yB=n(j$,"A",{href:!0});var pYr=s(yB);Qio=r(pYr,"XGLMTokenizerFast"),pYr.forEach(t),Hio=r(j$," (XGLM model)"),j$.forEach(t),Uio=i(S),th=n(S,"LI",{});var U0e=s(th);tne=n(U0e,"STRONG",{});var _Yr=s(tne);Jio=r(_Yr,"xlm"),_Yr.forEach(t),Yio=r(U0e," \u2014 "),LB=n(U0e,"A",{href:!0});var uYr=s(LB);Kio=r(uYr,"XLMTokenizer"),uYr.forEach(t),Zio=r(U0e," (XLM model)"),U0e.forEach(t),edo=i(S),ah=n(S,"LI",{});var J0e=s(ah);ane=n(J0e,"STRONG",{});var bYr=s(ane);odo=r(bYr,"xlm-prophetnet"),bYr.forEach(t),rdo=r(J0e," \u2014 "),xB=n(J0e,"A",{href:!0});var vYr=s(xB);tdo=r(vYr,"XLMProphetNetTokenizer"),vYr.forEach(t),ado=r(J0e," (XLMProphetNet model)"),J0e.forEach(t),ndo=i(S),$s=n(S,"LI",{});var D$=s($s);nne=n(D$,"STRONG",{});var FYr=s(nne);sdo=r(FYr,"xlm-roberta"),FYr.forEach(t),ldo=r(D$," \u2014 "),$B=n(D$,"A",{href:!0});var TYr=s($B);ido=r(TYr,"XLMRobertaTokenizer"),TYr.forEach(t),ddo=r(D$," or "),kB=n(D$,"A",{href:!0});var MYr=s(kB);cdo=r(MYr,"XLMRobertaTokenizerFast"),MYr.forEach(t),fdo=r(D$," (XLM-RoBERTa model)"),D$.forEach(t),mdo=i(S),ks=n(S,"LI",{});var G$=s(ks);sne=n(G$,"STRONG",{});var EYr=s(sne);gdo=r(EYr,"xlm-roberta-xl"),EYr.forEach(t),hdo=r(G$," \u2014 "),SB=n(G$,"A",{href:!0});var CYr=s(SB);pdo=r(CYr,"RobertaTokenizer"),CYr.forEach(t),_do=r(G$," or "),RB=n(G$,"A",{href:!0});var wYr=s(RB);udo=r(wYr,"RobertaTokenizerFast"),wYr.forEach(t),bdo=r(G$," (XLM-RoBERTa-XL model)"),G$.forEach(t),vdo=i(S),Ss=n(S,"LI",{});var O$=s(Ss);lne=n(O$,"STRONG",{});var AYr=s(lne);Fdo=r(AYr,"xlnet"),AYr.forEach(t),Tdo=r(O$," \u2014 "),PB=n(O$,"A",{href:!0});var yYr=s(PB);Mdo=r(yYr,"XLNetTokenizer"),yYr.forEach(t),Edo=r(O$," or "),BB=n(O$,"A",{href:!0});var LYr=s(BB);Cdo=r(LYr,"XLNetTokenizerFast"),LYr.forEach(t),wdo=r(O$," (XLNet model)"),O$.forEach(t),Ado=i(S),Rs=n(S,"LI",{});var V$=s(Rs);ine=n(V$,"STRONG",{});var xYr=s(ine);ydo=r(xYr,"yoso"),xYr.forEach(t),Ldo=r(V$," \u2014 "),IB=n(V$,"A",{href:!0});var $Yr=s(IB);xdo=r($Yr,"AlbertTokenizer"),$Yr.forEach(t),$do=r(V$," or "),NB=n(V$,"A",{href:!0});var kYr=s(NB);kdo=r(kYr,"AlbertTokenizerFast"),kYr.forEach(t),Sdo=r(V$," (YOSO model)"),V$.forEach(t),S.forEach(t),Rdo=i(qs),T(nh.$$.fragment,qs),qs.forEach(t),Pdo=i(Ns),sh=n(Ns,"DIV",{class:!0});var hDe=s(sh);T(OA.$$.fragment,hDe),Bdo=i(hDe),dne=n(hDe,"P",{});var SYr=s(dne);Ido=r(SYr,"Register a new tokenizer in this mapping."),SYr.forEach(t),hDe.forEach(t),Ns.forEach(t),pqe=i(f),Ei=n(f,"H2",{class:!0});var pDe=s(Ei);lh=n(pDe,"A",{id:!0,class:!0,href:!0});var RYr=s(lh);cne=n(RYr,"SPAN",{});var PYr=s(cne);T(VA.$$.fragment,PYr),PYr.forEach(t),RYr.forEach(t),Ndo=i(pDe),fne=n(pDe,"SPAN",{});var BYr=s(fne);qdo=r(BYr,"AutoFeatureExtractor"),BYr.forEach(t),pDe.forEach(t),_qe=i(f),Ao=n(f,"DIV",{class:!0});var js=s(Ao);T(XA.$$.fragment,js),jdo=i(js),zA=n(js,"P",{});var _De=s(zA);Ddo=r(_De,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qB=n(_De,"A",{href:!0});var IYr=s(qB);Gdo=r(IYr,"AutoFeatureExtractor.from_pretrained()"),IYr.forEach(t),Odo=r(_De," class method."),_De.forEach(t),Vdo=i(js),WA=n(js,"P",{});var uDe=s(WA);Xdo=r(uDe,"This class cannot be instantiated directly using "),mne=n(uDe,"CODE",{});var NYr=s(mne);zdo=r(NYr,"__init__()"),NYr.forEach(t),Wdo=r(uDe," (throws an error)."),uDe.forEach(t),Qdo=i(js),He=n(js,"DIV",{class:!0});var ea=s(He);T(QA.$$.fragment,ea),Hdo=i(ea),gne=n(ea,"P",{});var qYr=s(gne);Udo=r(qYr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),qYr.forEach(t),Jdo=i(ea),La=n(ea,"P",{});var R0=s(La);Ydo=r(R0,"The feature extractor class to instantiate is selected based on the "),hne=n(R0,"CODE",{});var jYr=s(hne);Kdo=r(jYr,"model_type"),jYr.forEach(t),Zdo=r(R0,` property of the config object
(either passed as an argument or loaded from `),pne=n(R0,"CODE",{});var DYr=s(pne);eco=r(DYr,"pretrained_model_name_or_path"),DYr.forEach(t),oco=r(R0,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),_ne=n(R0,"CODE",{});var GYr=s(_ne);rco=r(GYr,"pretrained_model_name_or_path"),GYr.forEach(t),tco=r(R0,":"),R0.forEach(t),aco=i(ea),Y=n(ea,"UL",{});var Z=s(Y);ih=n(Z,"LI",{});var Y0e=s(ih);une=n(Y0e,"STRONG",{});var OYr=s(une);nco=r(OYr,"beit"),OYr.forEach(t),sco=r(Y0e," \u2014 "),jB=n(Y0e,"A",{href:!0});var VYr=s(jB);lco=r(VYr,"BeitFeatureExtractor"),VYr.forEach(t),ico=r(Y0e," (BEiT model)"),Y0e.forEach(t),dco=i(Z),dh=n(Z,"LI",{});var K0e=s(dh);bne=n(K0e,"STRONG",{});var XYr=s(bne);cco=r(XYr,"clip"),XYr.forEach(t),fco=r(K0e," \u2014 "),DB=n(K0e,"A",{href:!0});var zYr=s(DB);mco=r(zYr,"CLIPFeatureExtractor"),zYr.forEach(t),gco=r(K0e," (CLIP model)"),K0e.forEach(t),hco=i(Z),ch=n(Z,"LI",{});var Z0e=s(ch);vne=n(Z0e,"STRONG",{});var WYr=s(vne);pco=r(WYr,"convnext"),WYr.forEach(t),_co=r(Z0e," \u2014 "),GB=n(Z0e,"A",{href:!0});var QYr=s(GB);uco=r(QYr,"ConvNextFeatureExtractor"),QYr.forEach(t),bco=r(Z0e," (ConvNext model)"),Z0e.forEach(t),vco=i(Z),fh=n(Z,"LI",{});var e6e=s(fh);Fne=n(e6e,"STRONG",{});var HYr=s(Fne);Fco=r(HYr,"cvt"),HYr.forEach(t),Tco=r(e6e," \u2014 "),OB=n(e6e,"A",{href:!0});var UYr=s(OB);Mco=r(UYr,"ConvNextFeatureExtractor"),UYr.forEach(t),Eco=r(e6e," (CvT model)"),e6e.forEach(t),Cco=i(Z),mh=n(Z,"LI",{});var o6e=s(mh);Tne=n(o6e,"STRONG",{});var JYr=s(Tne);wco=r(JYr,"data2vec-audio"),JYr.forEach(t),Aco=r(o6e," \u2014 "),VB=n(o6e,"A",{href:!0});var YYr=s(VB);yco=r(YYr,"Wav2Vec2FeatureExtractor"),YYr.forEach(t),Lco=r(o6e," (Data2VecAudio model)"),o6e.forEach(t),xco=i(Z),gh=n(Z,"LI",{});var r6e=s(gh);Mne=n(r6e,"STRONG",{});var KYr=s(Mne);$co=r(KYr,"data2vec-vision"),KYr.forEach(t),kco=r(r6e," \u2014 "),XB=n(r6e,"A",{href:!0});var ZYr=s(XB);Sco=r(ZYr,"BeitFeatureExtractor"),ZYr.forEach(t),Rco=r(r6e," (Data2VecVision model)"),r6e.forEach(t),Pco=i(Z),hh=n(Z,"LI",{});var t6e=s(hh);Ene=n(t6e,"STRONG",{});var eKr=s(Ene);Bco=r(eKr,"deit"),eKr.forEach(t),Ico=r(t6e," \u2014 "),zB=n(t6e,"A",{href:!0});var oKr=s(zB);Nco=r(oKr,"DeiTFeatureExtractor"),oKr.forEach(t),qco=r(t6e," (DeiT model)"),t6e.forEach(t),jco=i(Z),ph=n(Z,"LI",{});var a6e=s(ph);Cne=n(a6e,"STRONG",{});var rKr=s(Cne);Dco=r(rKr,"detr"),rKr.forEach(t),Gco=r(a6e," \u2014 "),WB=n(a6e,"A",{href:!0});var tKr=s(WB);Oco=r(tKr,"DetrFeatureExtractor"),tKr.forEach(t),Vco=r(a6e," (DETR model)"),a6e.forEach(t),Xco=i(Z),_h=n(Z,"LI",{});var n6e=s(_h);wne=n(n6e,"STRONG",{});var aKr=s(wne);zco=r(aKr,"dpt"),aKr.forEach(t),Wco=r(n6e," \u2014 "),QB=n(n6e,"A",{href:!0});var nKr=s(QB);Qco=r(nKr,"DPTFeatureExtractor"),nKr.forEach(t),Hco=r(n6e," (DPT model)"),n6e.forEach(t),Uco=i(Z),uh=n(Z,"LI",{});var s6e=s(uh);Ane=n(s6e,"STRONG",{});var sKr=s(Ane);Jco=r(sKr,"flava"),sKr.forEach(t),Yco=r(s6e," \u2014 "),HB=n(s6e,"A",{href:!0});var lKr=s(HB);Kco=r(lKr,"FlavaFeatureExtractor"),lKr.forEach(t),Zco=r(s6e," (Flava model)"),s6e.forEach(t),efo=i(Z),bh=n(Z,"LI",{});var l6e=s(bh);yne=n(l6e,"STRONG",{});var iKr=s(yne);ofo=r(iKr,"glpn"),iKr.forEach(t),rfo=r(l6e," \u2014 "),UB=n(l6e,"A",{href:!0});var dKr=s(UB);tfo=r(dKr,"GLPNFeatureExtractor"),dKr.forEach(t),afo=r(l6e," (GLPN model)"),l6e.forEach(t),nfo=i(Z),vh=n(Z,"LI",{});var i6e=s(vh);Lne=n(i6e,"STRONG",{});var cKr=s(Lne);sfo=r(cKr,"hubert"),cKr.forEach(t),lfo=r(i6e," \u2014 "),JB=n(i6e,"A",{href:!0});var fKr=s(JB);ifo=r(fKr,"Wav2Vec2FeatureExtractor"),fKr.forEach(t),dfo=r(i6e," (Hubert model)"),i6e.forEach(t),cfo=i(Z),Fh=n(Z,"LI",{});var d6e=s(Fh);xne=n(d6e,"STRONG",{});var mKr=s(xne);ffo=r(mKr,"imagegpt"),mKr.forEach(t),mfo=r(d6e," \u2014 "),YB=n(d6e,"A",{href:!0});var gKr=s(YB);gfo=r(gKr,"ImageGPTFeatureExtractor"),gKr.forEach(t),hfo=r(d6e," (ImageGPT model)"),d6e.forEach(t),pfo=i(Z),Th=n(Z,"LI",{});var c6e=s(Th);$ne=n(c6e,"STRONG",{});var hKr=s($ne);_fo=r(hKr,"layoutlmv2"),hKr.forEach(t),ufo=r(c6e," \u2014 "),KB=n(c6e,"A",{href:!0});var pKr=s(KB);bfo=r(pKr,"LayoutLMv2FeatureExtractor"),pKr.forEach(t),vfo=r(c6e," (LayoutLMv2 model)"),c6e.forEach(t),Ffo=i(Z),Mh=n(Z,"LI",{});var f6e=s(Mh);kne=n(f6e,"STRONG",{});var _Kr=s(kne);Tfo=r(_Kr,"layoutlmv3"),_Kr.forEach(t),Mfo=r(f6e," \u2014 "),ZB=n(f6e,"A",{href:!0});var uKr=s(ZB);Efo=r(uKr,"LayoutLMv3FeatureExtractor"),uKr.forEach(t),Cfo=r(f6e," (LayoutLMv3 model)"),f6e.forEach(t),wfo=i(Z),Eh=n(Z,"LI",{});var m6e=s(Eh);Sne=n(m6e,"STRONG",{});var bKr=s(Sne);Afo=r(bKr,"maskformer"),bKr.forEach(t),yfo=r(m6e," \u2014 "),eI=n(m6e,"A",{href:!0});var vKr=s(eI);Lfo=r(vKr,"MaskFormerFeatureExtractor"),vKr.forEach(t),xfo=r(m6e," (MaskFormer model)"),m6e.forEach(t),$fo=i(Z),Ch=n(Z,"LI",{});var g6e=s(Ch);Rne=n(g6e,"STRONG",{});var FKr=s(Rne);kfo=r(FKr,"perceiver"),FKr.forEach(t),Sfo=r(g6e," \u2014 "),oI=n(g6e,"A",{href:!0});var TKr=s(oI);Rfo=r(TKr,"PerceiverFeatureExtractor"),TKr.forEach(t),Pfo=r(g6e," (Perceiver model)"),g6e.forEach(t),Bfo=i(Z),wh=n(Z,"LI",{});var h6e=s(wh);Pne=n(h6e,"STRONG",{});var MKr=s(Pne);Ifo=r(MKr,"poolformer"),MKr.forEach(t),Nfo=r(h6e," \u2014 "),rI=n(h6e,"A",{href:!0});var EKr=s(rI);qfo=r(EKr,"PoolFormerFeatureExtractor"),EKr.forEach(t),jfo=r(h6e," (PoolFormer model)"),h6e.forEach(t),Dfo=i(Z),Ah=n(Z,"LI",{});var p6e=s(Ah);Bne=n(p6e,"STRONG",{});var CKr=s(Bne);Gfo=r(CKr,"regnet"),CKr.forEach(t),Ofo=r(p6e," \u2014 "),tI=n(p6e,"A",{href:!0});var wKr=s(tI);Vfo=r(wKr,"ConvNextFeatureExtractor"),wKr.forEach(t),Xfo=r(p6e," (RegNet model)"),p6e.forEach(t),zfo=i(Z),yh=n(Z,"LI",{});var _6e=s(yh);Ine=n(_6e,"STRONG",{});var AKr=s(Ine);Wfo=r(AKr,"resnet"),AKr.forEach(t),Qfo=r(_6e," \u2014 "),aI=n(_6e,"A",{href:!0});var yKr=s(aI);Hfo=r(yKr,"ConvNextFeatureExtractor"),yKr.forEach(t),Ufo=r(_6e," (ResNet model)"),_6e.forEach(t),Jfo=i(Z),Lh=n(Z,"LI",{});var u6e=s(Lh);Nne=n(u6e,"STRONG",{});var LKr=s(Nne);Yfo=r(LKr,"segformer"),LKr.forEach(t),Kfo=r(u6e," \u2014 "),nI=n(u6e,"A",{href:!0});var xKr=s(nI);Zfo=r(xKr,"SegformerFeatureExtractor"),xKr.forEach(t),emo=r(u6e," (SegFormer model)"),u6e.forEach(t),omo=i(Z),xh=n(Z,"LI",{});var b6e=s(xh);qne=n(b6e,"STRONG",{});var $Kr=s(qne);rmo=r($Kr,"speech_to_text"),$Kr.forEach(t),tmo=r(b6e," \u2014 "),sI=n(b6e,"A",{href:!0});var kKr=s(sI);amo=r(kKr,"Speech2TextFeatureExtractor"),kKr.forEach(t),nmo=r(b6e," (Speech2Text model)"),b6e.forEach(t),smo=i(Z),$h=n(Z,"LI",{});var v6e=s($h);jne=n(v6e,"STRONG",{});var SKr=s(jne);lmo=r(SKr,"swin"),SKr.forEach(t),imo=r(v6e," \u2014 "),lI=n(v6e,"A",{href:!0});var RKr=s(lI);dmo=r(RKr,"ViTFeatureExtractor"),RKr.forEach(t),cmo=r(v6e," (Swin model)"),v6e.forEach(t),fmo=i(Z),kh=n(Z,"LI",{});var F6e=s(kh);Dne=n(F6e,"STRONG",{});var PKr=s(Dne);mmo=r(PKr,"van"),PKr.forEach(t),gmo=r(F6e," \u2014 "),iI=n(F6e,"A",{href:!0});var BKr=s(iI);hmo=r(BKr,"ConvNextFeatureExtractor"),BKr.forEach(t),pmo=r(F6e," (VAN model)"),F6e.forEach(t),_mo=i(Z),Sh=n(Z,"LI",{});var T6e=s(Sh);Gne=n(T6e,"STRONG",{});var IKr=s(Gne);umo=r(IKr,"vit"),IKr.forEach(t),bmo=r(T6e," \u2014 "),dI=n(T6e,"A",{href:!0});var NKr=s(dI);vmo=r(NKr,"ViTFeatureExtractor"),NKr.forEach(t),Fmo=r(T6e," (ViT model)"),T6e.forEach(t),Tmo=i(Z),Rh=n(Z,"LI",{});var M6e=s(Rh);One=n(M6e,"STRONG",{});var qKr=s(One);Mmo=r(qKr,"vit_mae"),qKr.forEach(t),Emo=r(M6e," \u2014 "),cI=n(M6e,"A",{href:!0});var jKr=s(cI);Cmo=r(jKr,"ViTFeatureExtractor"),jKr.forEach(t),wmo=r(M6e," (ViTMAE model)"),M6e.forEach(t),Amo=i(Z),Ph=n(Z,"LI",{});var E6e=s(Ph);Vne=n(E6e,"STRONG",{});var DKr=s(Vne);ymo=r(DKr,"wav2vec2"),DKr.forEach(t),Lmo=r(E6e," \u2014 "),fI=n(E6e,"A",{href:!0});var GKr=s(fI);xmo=r(GKr,"Wav2Vec2FeatureExtractor"),GKr.forEach(t),$mo=r(E6e," (Wav2Vec2 model)"),E6e.forEach(t),kmo=i(Z),Bh=n(Z,"LI",{});var C6e=s(Bh);Xne=n(C6e,"STRONG",{});var OKr=s(Xne);Smo=r(OKr,"wav2vec2-conformer"),OKr.forEach(t),Rmo=r(C6e," \u2014 "),mI=n(C6e,"A",{href:!0});var VKr=s(mI);Pmo=r(VKr,"Wav2Vec2FeatureExtractor"),VKr.forEach(t),Bmo=r(C6e," (Wav2Vec2-Conformer model)"),C6e.forEach(t),Imo=i(Z),Ih=n(Z,"LI",{});var w6e=s(Ih);zne=n(w6e,"STRONG",{});var XKr=s(zne);Nmo=r(XKr,"yolos"),XKr.forEach(t),qmo=r(w6e," \u2014 "),gI=n(w6e,"A",{href:!0});var zKr=s(gI);jmo=r(zKr,"YolosFeatureExtractor"),zKr.forEach(t),Dmo=r(w6e," (YOLOS model)"),w6e.forEach(t),Z.forEach(t),Gmo=i(ea),T(Nh.$$.fragment,ea),Omo=i(ea),T(qh.$$.fragment,ea),ea.forEach(t),Vmo=i(js),jh=n(js,"DIV",{class:!0});var bDe=s(jh);T(HA.$$.fragment,bDe),Xmo=i(bDe),Wne=n(bDe,"P",{});var WKr=s(Wne);zmo=r(WKr,"Register a new feature extractor for this class."),WKr.forEach(t),bDe.forEach(t),js.forEach(t),uqe=i(f),Ci=n(f,"H2",{class:!0});var vDe=s(Ci);Dh=n(vDe,"A",{id:!0,class:!0,href:!0});var QKr=s(Dh);Qne=n(QKr,"SPAN",{});var HKr=s(Qne);T(UA.$$.fragment,HKr),HKr.forEach(t),QKr.forEach(t),Wmo=i(vDe),Hne=n(vDe,"SPAN",{});var UKr=s(Hne);Qmo=r(UKr,"AutoProcessor"),UKr.forEach(t),vDe.forEach(t),bqe=i(f),yo=n(f,"DIV",{class:!0});var Ds=s(yo);T(JA.$$.fragment,Ds),Hmo=i(Ds),YA=n(Ds,"P",{});var FDe=s(YA);Umo=r(FDe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),hI=n(FDe,"A",{href:!0});var JKr=s(hI);Jmo=r(JKr,"AutoProcessor.from_pretrained()"),JKr.forEach(t),Ymo=r(FDe," class method."),FDe.forEach(t),Kmo=i(Ds),KA=n(Ds,"P",{});var TDe=s(KA);Zmo=r(TDe,"This class cannot be instantiated directly using "),Une=n(TDe,"CODE",{});var YKr=s(Une);ego=r(YKr,"__init__()"),YKr.forEach(t),ogo=r(TDe," (throws an error)."),TDe.forEach(t),rgo=i(Ds),Ue=n(Ds,"DIV",{class:!0});var oa=s(Ue);T(ZA.$$.fragment,oa),tgo=i(oa),Jne=n(oa,"P",{});var KKr=s(Jne);ago=r(KKr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),KKr.forEach(t),ngo=i(oa),wi=n(oa,"P",{});var bZ=s(wi);sgo=r(bZ,"The processor class to instantiate is selected based on the "),Yne=n(bZ,"CODE",{});var ZKr=s(Yne);lgo=r(ZKr,"model_type"),ZKr.forEach(t),igo=r(bZ,` property of the config object (either
passed as an argument or loaded from `),Kne=n(bZ,"CODE",{});var eZr=s(Kne);dgo=r(eZr,"pretrained_model_name_or_path"),eZr.forEach(t),cgo=r(bZ," if possible):"),bZ.forEach(t),fgo=i(oa),he=n(oa,"UL",{});var ue=s(he);Gh=n(ue,"LI",{});var A6e=s(Gh);Zne=n(A6e,"STRONG",{});var oZr=s(Zne);mgo=r(oZr,"clip"),oZr.forEach(t),ggo=r(A6e," \u2014 "),pI=n(A6e,"A",{href:!0});var rZr=s(pI);hgo=r(rZr,"CLIPProcessor"),rZr.forEach(t),pgo=r(A6e," (CLIP model)"),A6e.forEach(t),_go=i(ue),Oh=n(ue,"LI",{});var y6e=s(Oh);ese=n(y6e,"STRONG",{});var tZr=s(ese);ugo=r(tZr,"flava"),tZr.forEach(t),bgo=r(y6e," \u2014 "),ose=n(y6e,"CODE",{});var aZr=s(ose);vgo=r(aZr,"FLAVAProcessor"),aZr.forEach(t),Fgo=r(y6e," (Flava model)"),y6e.forEach(t),Tgo=i(ue),Vh=n(ue,"LI",{});var L6e=s(Vh);rse=n(L6e,"STRONG",{});var nZr=s(rse);Mgo=r(nZr,"layoutlmv2"),nZr.forEach(t),Ego=r(L6e," \u2014 "),_I=n(L6e,"A",{href:!0});var sZr=s(_I);Cgo=r(sZr,"LayoutLMv2Processor"),sZr.forEach(t),wgo=r(L6e," (LayoutLMv2 model)"),L6e.forEach(t),Ago=i(ue),Xh=n(ue,"LI",{});var x6e=s(Xh);tse=n(x6e,"STRONG",{});var lZr=s(tse);ygo=r(lZr,"layoutlmv3"),lZr.forEach(t),Lgo=r(x6e," \u2014 "),uI=n(x6e,"A",{href:!0});var iZr=s(uI);xgo=r(iZr,"LayoutLMv3Processor"),iZr.forEach(t),$go=r(x6e," (LayoutLMv3 model)"),x6e.forEach(t),kgo=i(ue),zh=n(ue,"LI",{});var $6e=s(zh);ase=n($6e,"STRONG",{});var dZr=s(ase);Sgo=r(dZr,"layoutxlm"),dZr.forEach(t),Rgo=r($6e," \u2014 "),bI=n($6e,"A",{href:!0});var cZr=s(bI);Pgo=r(cZr,"LayoutXLMProcessor"),cZr.forEach(t),Bgo=r($6e," (LayoutXLM model)"),$6e.forEach(t),Igo=i(ue),Wh=n(ue,"LI",{});var k6e=s(Wh);nse=n(k6e,"STRONG",{});var fZr=s(nse);Ngo=r(fZr,"sew"),fZr.forEach(t),qgo=r(k6e," \u2014 "),vI=n(k6e,"A",{href:!0});var mZr=s(vI);jgo=r(mZr,"Wav2Vec2Processor"),mZr.forEach(t),Dgo=r(k6e," (SEW model)"),k6e.forEach(t),Ggo=i(ue),Qh=n(ue,"LI",{});var S6e=s(Qh);sse=n(S6e,"STRONG",{});var gZr=s(sse);Ogo=r(gZr,"sew-d"),gZr.forEach(t),Vgo=r(S6e," \u2014 "),FI=n(S6e,"A",{href:!0});var hZr=s(FI);Xgo=r(hZr,"Wav2Vec2Processor"),hZr.forEach(t),zgo=r(S6e," (SEW-D model)"),S6e.forEach(t),Wgo=i(ue),Hh=n(ue,"LI",{});var R6e=s(Hh);lse=n(R6e,"STRONG",{});var pZr=s(lse);Qgo=r(pZr,"speech_to_text"),pZr.forEach(t),Hgo=r(R6e," \u2014 "),TI=n(R6e,"A",{href:!0});var _Zr=s(TI);Ugo=r(_Zr,"Speech2TextProcessor"),_Zr.forEach(t),Jgo=r(R6e," (Speech2Text model)"),R6e.forEach(t),Ygo=i(ue),Uh=n(ue,"LI",{});var P6e=s(Uh);ise=n(P6e,"STRONG",{});var uZr=s(ise);Kgo=r(uZr,"speech_to_text_2"),uZr.forEach(t),Zgo=r(P6e," \u2014 "),MI=n(P6e,"A",{href:!0});var bZr=s(MI);eho=r(bZr,"Speech2Text2Processor"),bZr.forEach(t),oho=r(P6e," (Speech2Text2 model)"),P6e.forEach(t),rho=i(ue),Jh=n(ue,"LI",{});var B6e=s(Jh);dse=n(B6e,"STRONG",{});var vZr=s(dse);tho=r(vZr,"trocr"),vZr.forEach(t),aho=r(B6e," \u2014 "),EI=n(B6e,"A",{href:!0});var FZr=s(EI);nho=r(FZr,"TrOCRProcessor"),FZr.forEach(t),sho=r(B6e," (TrOCR model)"),B6e.forEach(t),lho=i(ue),Yh=n(ue,"LI",{});var I6e=s(Yh);cse=n(I6e,"STRONG",{});var TZr=s(cse);iho=r(TZr,"unispeech"),TZr.forEach(t),dho=r(I6e," \u2014 "),CI=n(I6e,"A",{href:!0});var MZr=s(CI);cho=r(MZr,"Wav2Vec2Processor"),MZr.forEach(t),fho=r(I6e," (UniSpeech model)"),I6e.forEach(t),mho=i(ue),Kh=n(ue,"LI",{});var N6e=s(Kh);fse=n(N6e,"STRONG",{});var EZr=s(fse);gho=r(EZr,"unispeech-sat"),EZr.forEach(t),hho=r(N6e," \u2014 "),wI=n(N6e,"A",{href:!0});var CZr=s(wI);pho=r(CZr,"Wav2Vec2Processor"),CZr.forEach(t),_ho=r(N6e," (UniSpeechSat model)"),N6e.forEach(t),uho=i(ue),Zh=n(ue,"LI",{});var q6e=s(Zh);mse=n(q6e,"STRONG",{});var wZr=s(mse);bho=r(wZr,"vilt"),wZr.forEach(t),vho=r(q6e," \u2014 "),AI=n(q6e,"A",{href:!0});var AZr=s(AI);Fho=r(AZr,"ViltProcessor"),AZr.forEach(t),Tho=r(q6e," (ViLT model)"),q6e.forEach(t),Mho=i(ue),ep=n(ue,"LI",{});var j6e=s(ep);gse=n(j6e,"STRONG",{});var yZr=s(gse);Eho=r(yZr,"vision-text-dual-encoder"),yZr.forEach(t),Cho=r(j6e," \u2014 "),yI=n(j6e,"A",{href:!0});var LZr=s(yI);who=r(LZr,"VisionTextDualEncoderProcessor"),LZr.forEach(t),Aho=r(j6e," (VisionTextDualEncoder model)"),j6e.forEach(t),yho=i(ue),op=n(ue,"LI",{});var D6e=s(op);hse=n(D6e,"STRONG",{});var xZr=s(hse);Lho=r(xZr,"wav2vec2"),xZr.forEach(t),xho=r(D6e," \u2014 "),LI=n(D6e,"A",{href:!0});var $Zr=s(LI);$ho=r($Zr,"Wav2Vec2Processor"),$Zr.forEach(t),kho=r(D6e," (Wav2Vec2 model)"),D6e.forEach(t),Sho=i(ue),rp=n(ue,"LI",{});var G6e=s(rp);pse=n(G6e,"STRONG",{});var kZr=s(pse);Rho=r(kZr,"wav2vec2-conformer"),kZr.forEach(t),Pho=r(G6e," \u2014 "),xI=n(G6e,"A",{href:!0});var SZr=s(xI);Bho=r(SZr,"Wav2Vec2Processor"),SZr.forEach(t),Iho=r(G6e," (Wav2Vec2-Conformer model)"),G6e.forEach(t),Nho=i(ue),tp=n(ue,"LI",{});var O6e=s(tp);_se=n(O6e,"STRONG",{});var RZr=s(_se);qho=r(RZr,"wavlm"),RZr.forEach(t),jho=r(O6e," \u2014 "),$I=n(O6e,"A",{href:!0});var PZr=s($I);Dho=r(PZr,"Wav2Vec2Processor"),PZr.forEach(t),Gho=r(O6e," (WavLM model)"),O6e.forEach(t),ue.forEach(t),Oho=i(oa),T(ap.$$.fragment,oa),Vho=i(oa),T(np.$$.fragment,oa),oa.forEach(t),Xho=i(Ds),sp=n(Ds,"DIV",{class:!0});var MDe=s(sp);T(ey.$$.fragment,MDe),zho=i(MDe),use=n(MDe,"P",{});var BZr=s(use);Who=r(BZr,"Register a new processor for this class."),BZr.forEach(t),MDe.forEach(t),Ds.forEach(t),vqe=i(f),Ai=n(f,"H2",{class:!0});var EDe=s(Ai);lp=n(EDe,"A",{id:!0,class:!0,href:!0});var IZr=s(lp);bse=n(IZr,"SPAN",{});var NZr=s(bse);T(oy.$$.fragment,NZr),NZr.forEach(t),IZr.forEach(t),Qho=i(EDe),vse=n(EDe,"SPAN",{});var qZr=s(vse);Hho=r(qZr,"AutoModel"),qZr.forEach(t),EDe.forEach(t),Fqe=i(f),Lo=n(f,"DIV",{class:!0});var Gs=s(Lo);T(ry.$$.fragment,Gs),Uho=i(Gs),yi=n(Gs,"P",{});var vZ=s(yi);Jho=r(vZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),kI=n(vZ,"A",{href:!0});var jZr=s(kI);Yho=r(jZr,"from_pretrained()"),jZr.forEach(t),Kho=r(vZ," class method or the "),SI=n(vZ,"A",{href:!0});var DZr=s(SI);Zho=r(DZr,"from_config()"),DZr.forEach(t),epo=r(vZ,` class
method.`),vZ.forEach(t),opo=i(Gs),ty=n(Gs,"P",{});var CDe=s(ty);rpo=r(CDe,"This class cannot be instantiated directly using "),Fse=n(CDe,"CODE",{});var GZr=s(Fse);tpo=r(GZr,"__init__()"),GZr.forEach(t),apo=r(CDe," (throws an error)."),CDe.forEach(t),npo=i(Gs),at=n(Gs,"DIV",{class:!0});var P0=s(at);T(ay.$$.fragment,P0),spo=i(P0),Tse=n(P0,"P",{});var OZr=s(Tse);lpo=r(OZr,"Instantiates one of the base model classes of the library from a configuration."),OZr.forEach(t),ipo=i(P0),Li=n(P0,"P",{});var FZ=s(Li);dpo=r(FZ,`Note:
Loading a model from its configuration file does `),Mse=n(FZ,"STRONG",{});var VZr=s(Mse);cpo=r(VZr,"not"),VZr.forEach(t),fpo=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=n(FZ,"A",{href:!0});var XZr=s(RI);mpo=r(XZr,"from_pretrained()"),XZr.forEach(t),gpo=r(FZ," to load the model weights."),FZ.forEach(t),hpo=i(P0),T(ip.$$.fragment,P0),P0.forEach(t),ppo=i(Gs),Je=n(Gs,"DIV",{class:!0});var ra=s(Je);T(ny.$$.fragment,ra),_po=i(ra),Ese=n(ra,"P",{});var zZr=s(Ese);upo=r(zZr,"Instantiate one of the base model classes of the library from a pretrained model."),zZr.forEach(t),bpo=i(ra),xa=n(ra,"P",{});var B0=s(xa);vpo=r(B0,"The model class to instantiate is selected based on the "),Cse=n(B0,"CODE",{});var WZr=s(Cse);Fpo=r(WZr,"model_type"),WZr.forEach(t),Tpo=r(B0,` property of the config object (either
passed as an argument or loaded from `),wse=n(B0,"CODE",{});var QZr=s(wse);Mpo=r(QZr,"pretrained_model_name_or_path"),QZr.forEach(t),Epo=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ase=n(B0,"CODE",{});var HZr=s(Ase);Cpo=r(HZr,"pretrained_model_name_or_path"),HZr.forEach(t),wpo=r(B0,":"),B0.forEach(t),Apo=i(ra),x=n(ra,"UL",{});var $=s(x);dp=n($,"LI",{});var V6e=s(dp);yse=n(V6e,"STRONG",{});var UZr=s(yse);ypo=r(UZr,"albert"),UZr.forEach(t),Lpo=r(V6e," \u2014 "),PI=n(V6e,"A",{href:!0});var JZr=s(PI);xpo=r(JZr,"AlbertModel"),JZr.forEach(t),$po=r(V6e," (ALBERT model)"),V6e.forEach(t),kpo=i($),cp=n($,"LI",{});var X6e=s(cp);Lse=n(X6e,"STRONG",{});var YZr=s(Lse);Spo=r(YZr,"bart"),YZr.forEach(t),Rpo=r(X6e," \u2014 "),BI=n(X6e,"A",{href:!0});var KZr=s(BI);Ppo=r(KZr,"BartModel"),KZr.forEach(t),Bpo=r(X6e," (BART model)"),X6e.forEach(t),Ipo=i($),fp=n($,"LI",{});var z6e=s(fp);xse=n(z6e,"STRONG",{});var ZZr=s(xse);Npo=r(ZZr,"beit"),ZZr.forEach(t),qpo=r(z6e," \u2014 "),II=n(z6e,"A",{href:!0});var eet=s(II);jpo=r(eet,"BeitModel"),eet.forEach(t),Dpo=r(z6e," (BEiT model)"),z6e.forEach(t),Gpo=i($),mp=n($,"LI",{});var W6e=s(mp);$se=n(W6e,"STRONG",{});var oet=s($se);Opo=r(oet,"bert"),oet.forEach(t),Vpo=r(W6e," \u2014 "),NI=n(W6e,"A",{href:!0});var ret=s(NI);Xpo=r(ret,"BertModel"),ret.forEach(t),zpo=r(W6e," (BERT model)"),W6e.forEach(t),Wpo=i($),gp=n($,"LI",{});var Q6e=s(gp);kse=n(Q6e,"STRONG",{});var tet=s(kse);Qpo=r(tet,"bert-generation"),tet.forEach(t),Hpo=r(Q6e," \u2014 "),qI=n(Q6e,"A",{href:!0});var aet=s(qI);Upo=r(aet,"BertGenerationEncoder"),aet.forEach(t),Jpo=r(Q6e," (Bert Generation model)"),Q6e.forEach(t),Ypo=i($),hp=n($,"LI",{});var H6e=s(hp);Sse=n(H6e,"STRONG",{});var net=s(Sse);Kpo=r(net,"big_bird"),net.forEach(t),Zpo=r(H6e," \u2014 "),jI=n(H6e,"A",{href:!0});var set=s(jI);e_o=r(set,"BigBirdModel"),set.forEach(t),o_o=r(H6e," (BigBird model)"),H6e.forEach(t),r_o=i($),pp=n($,"LI",{});var U6e=s(pp);Rse=n(U6e,"STRONG",{});var iet=s(Rse);t_o=r(iet,"bigbird_pegasus"),iet.forEach(t),a_o=r(U6e," \u2014 "),DI=n(U6e,"A",{href:!0});var det=s(DI);n_o=r(det,"BigBirdPegasusModel"),det.forEach(t),s_o=r(U6e," (BigBirdPegasus model)"),U6e.forEach(t),l_o=i($),_p=n($,"LI",{});var J6e=s(_p);Pse=n(J6e,"STRONG",{});var cet=s(Pse);i_o=r(cet,"blenderbot"),cet.forEach(t),d_o=r(J6e," \u2014 "),GI=n(J6e,"A",{href:!0});var fet=s(GI);c_o=r(fet,"BlenderbotModel"),fet.forEach(t),f_o=r(J6e," (Blenderbot model)"),J6e.forEach(t),m_o=i($),up=n($,"LI",{});var Y6e=s(up);Bse=n(Y6e,"STRONG",{});var met=s(Bse);g_o=r(met,"blenderbot-small"),met.forEach(t),h_o=r(Y6e," \u2014 "),OI=n(Y6e,"A",{href:!0});var get=s(OI);p_o=r(get,"BlenderbotSmallModel"),get.forEach(t),__o=r(Y6e," (BlenderbotSmall model)"),Y6e.forEach(t),u_o=i($),bp=n($,"LI",{});var K6e=s(bp);Ise=n(K6e,"STRONG",{});var het=s(Ise);b_o=r(het,"camembert"),het.forEach(t),v_o=r(K6e," \u2014 "),VI=n(K6e,"A",{href:!0});var pet=s(VI);F_o=r(pet,"CamembertModel"),pet.forEach(t),T_o=r(K6e," (CamemBERT model)"),K6e.forEach(t),M_o=i($),vp=n($,"LI",{});var Z6e=s(vp);Nse=n(Z6e,"STRONG",{});var _et=s(Nse);E_o=r(_et,"canine"),_et.forEach(t),C_o=r(Z6e," \u2014 "),XI=n(Z6e,"A",{href:!0});var uet=s(XI);w_o=r(uet,"CanineModel"),uet.forEach(t),A_o=r(Z6e," (Canine model)"),Z6e.forEach(t),y_o=i($),Fp=n($,"LI",{});var eAe=s(Fp);qse=n(eAe,"STRONG",{});var bet=s(qse);L_o=r(bet,"clip"),bet.forEach(t),x_o=r(eAe," \u2014 "),zI=n(eAe,"A",{href:!0});var vet=s(zI);$_o=r(vet,"CLIPModel"),vet.forEach(t),k_o=r(eAe," (CLIP model)"),eAe.forEach(t),S_o=i($),Tp=n($,"LI",{});var oAe=s(Tp);jse=n(oAe,"STRONG",{});var Fet=s(jse);R_o=r(Fet,"convbert"),Fet.forEach(t),P_o=r(oAe," \u2014 "),WI=n(oAe,"A",{href:!0});var Tet=s(WI);B_o=r(Tet,"ConvBertModel"),Tet.forEach(t),I_o=r(oAe," (ConvBERT model)"),oAe.forEach(t),N_o=i($),Mp=n($,"LI",{});var rAe=s(Mp);Dse=n(rAe,"STRONG",{});var Met=s(Dse);q_o=r(Met,"convnext"),Met.forEach(t),j_o=r(rAe," \u2014 "),QI=n(rAe,"A",{href:!0});var Eet=s(QI);D_o=r(Eet,"ConvNextModel"),Eet.forEach(t),G_o=r(rAe," (ConvNext model)"),rAe.forEach(t),O_o=i($),Ep=n($,"LI",{});var tAe=s(Ep);Gse=n(tAe,"STRONG",{});var Cet=s(Gse);V_o=r(Cet,"ctrl"),Cet.forEach(t),X_o=r(tAe," \u2014 "),HI=n(tAe,"A",{href:!0});var wet=s(HI);z_o=r(wet,"CTRLModel"),wet.forEach(t),W_o=r(tAe," (CTRL model)"),tAe.forEach(t),Q_o=i($),Cp=n($,"LI",{});var aAe=s(Cp);Ose=n(aAe,"STRONG",{});var Aet=s(Ose);H_o=r(Aet,"cvt"),Aet.forEach(t),U_o=r(aAe," \u2014 "),UI=n(aAe,"A",{href:!0});var yet=s(UI);J_o=r(yet,"CvtModel"),yet.forEach(t),Y_o=r(aAe," (CvT model)"),aAe.forEach(t),K_o=i($),wp=n($,"LI",{});var nAe=s(wp);Vse=n(nAe,"STRONG",{});var Let=s(Vse);Z_o=r(Let,"data2vec-audio"),Let.forEach(t),euo=r(nAe," \u2014 "),JI=n(nAe,"A",{href:!0});var xet=s(JI);ouo=r(xet,"Data2VecAudioModel"),xet.forEach(t),ruo=r(nAe," (Data2VecAudio model)"),nAe.forEach(t),tuo=i($),Ap=n($,"LI",{});var sAe=s(Ap);Xse=n(sAe,"STRONG",{});var $et=s(Xse);auo=r($et,"data2vec-text"),$et.forEach(t),nuo=r(sAe," \u2014 "),YI=n(sAe,"A",{href:!0});var ket=s(YI);suo=r(ket,"Data2VecTextModel"),ket.forEach(t),luo=r(sAe," (Data2VecText model)"),sAe.forEach(t),iuo=i($),yp=n($,"LI",{});var lAe=s(yp);zse=n(lAe,"STRONG",{});var Set=s(zse);duo=r(Set,"data2vec-vision"),Set.forEach(t),cuo=r(lAe," \u2014 "),KI=n(lAe,"A",{href:!0});var Ret=s(KI);fuo=r(Ret,"Data2VecVisionModel"),Ret.forEach(t),muo=r(lAe," (Data2VecVision model)"),lAe.forEach(t),guo=i($),Lp=n($,"LI",{});var iAe=s(Lp);Wse=n(iAe,"STRONG",{});var Pet=s(Wse);huo=r(Pet,"deberta"),Pet.forEach(t),puo=r(iAe," \u2014 "),ZI=n(iAe,"A",{href:!0});var Bet=s(ZI);_uo=r(Bet,"DebertaModel"),Bet.forEach(t),uuo=r(iAe," (DeBERTa model)"),iAe.forEach(t),buo=i($),xp=n($,"LI",{});var dAe=s(xp);Qse=n(dAe,"STRONG",{});var Iet=s(Qse);vuo=r(Iet,"deberta-v2"),Iet.forEach(t),Fuo=r(dAe," \u2014 "),eN=n(dAe,"A",{href:!0});var Net=s(eN);Tuo=r(Net,"DebertaV2Model"),Net.forEach(t),Muo=r(dAe," (DeBERTa-v2 model)"),dAe.forEach(t),Euo=i($),$p=n($,"LI",{});var cAe=s($p);Hse=n(cAe,"STRONG",{});var qet=s(Hse);Cuo=r(qet,"decision_transformer"),qet.forEach(t),wuo=r(cAe," \u2014 "),oN=n(cAe,"A",{href:!0});var jet=s(oN);Auo=r(jet,"DecisionTransformerModel"),jet.forEach(t),yuo=r(cAe," (Decision Transformer model)"),cAe.forEach(t),Luo=i($),kp=n($,"LI",{});var fAe=s(kp);Use=n(fAe,"STRONG",{});var Det=s(Use);xuo=r(Det,"deit"),Det.forEach(t),$uo=r(fAe," \u2014 "),rN=n(fAe,"A",{href:!0});var Get=s(rN);kuo=r(Get,"DeiTModel"),Get.forEach(t),Suo=r(fAe," (DeiT model)"),fAe.forEach(t),Ruo=i($),Sp=n($,"LI",{});var mAe=s(Sp);Jse=n(mAe,"STRONG",{});var Oet=s(Jse);Puo=r(Oet,"detr"),Oet.forEach(t),Buo=r(mAe," \u2014 "),tN=n(mAe,"A",{href:!0});var Vet=s(tN);Iuo=r(Vet,"DetrModel"),Vet.forEach(t),Nuo=r(mAe," (DETR model)"),mAe.forEach(t),quo=i($),Rp=n($,"LI",{});var gAe=s(Rp);Yse=n(gAe,"STRONG",{});var Xet=s(Yse);juo=r(Xet,"distilbert"),Xet.forEach(t),Duo=r(gAe," \u2014 "),aN=n(gAe,"A",{href:!0});var zet=s(aN);Guo=r(zet,"DistilBertModel"),zet.forEach(t),Ouo=r(gAe," (DistilBERT model)"),gAe.forEach(t),Vuo=i($),Pp=n($,"LI",{});var hAe=s(Pp);Kse=n(hAe,"STRONG",{});var Wet=s(Kse);Xuo=r(Wet,"dpr"),Wet.forEach(t),zuo=r(hAe," \u2014 "),nN=n(hAe,"A",{href:!0});var Qet=s(nN);Wuo=r(Qet,"DPRQuestionEncoder"),Qet.forEach(t),Quo=r(hAe," (DPR model)"),hAe.forEach(t),Huo=i($),Bp=n($,"LI",{});var pAe=s(Bp);Zse=n(pAe,"STRONG",{});var Het=s(Zse);Uuo=r(Het,"dpt"),Het.forEach(t),Juo=r(pAe," \u2014 "),sN=n(pAe,"A",{href:!0});var Uet=s(sN);Yuo=r(Uet,"DPTModel"),Uet.forEach(t),Kuo=r(pAe," (DPT model)"),pAe.forEach(t),Zuo=i($),Ip=n($,"LI",{});var _Ae=s(Ip);ele=n(_Ae,"STRONG",{});var Jet=s(ele);e2o=r(Jet,"electra"),Jet.forEach(t),o2o=r(_Ae," \u2014 "),lN=n(_Ae,"A",{href:!0});var Yet=s(lN);r2o=r(Yet,"ElectraModel"),Yet.forEach(t),t2o=r(_Ae," (ELECTRA model)"),_Ae.forEach(t),a2o=i($),Np=n($,"LI",{});var uAe=s(Np);ole=n(uAe,"STRONG",{});var Ket=s(ole);n2o=r(Ket,"flaubert"),Ket.forEach(t),s2o=r(uAe," \u2014 "),iN=n(uAe,"A",{href:!0});var Zet=s(iN);l2o=r(Zet,"FlaubertModel"),Zet.forEach(t),i2o=r(uAe," (FlauBERT model)"),uAe.forEach(t),d2o=i($),qp=n($,"LI",{});var bAe=s(qp);rle=n(bAe,"STRONG",{});var eot=s(rle);c2o=r(eot,"flava"),eot.forEach(t),f2o=r(bAe," \u2014 "),dN=n(bAe,"A",{href:!0});var oot=s(dN);m2o=r(oot,"FlavaModel"),oot.forEach(t),g2o=r(bAe," (Flava model)"),bAe.forEach(t),h2o=i($),jp=n($,"LI",{});var vAe=s(jp);tle=n(vAe,"STRONG",{});var rot=s(tle);p2o=r(rot,"fnet"),rot.forEach(t),_2o=r(vAe," \u2014 "),cN=n(vAe,"A",{href:!0});var tot=s(cN);u2o=r(tot,"FNetModel"),tot.forEach(t),b2o=r(vAe," (FNet model)"),vAe.forEach(t),v2o=i($),Dp=n($,"LI",{});var FAe=s(Dp);ale=n(FAe,"STRONG",{});var aot=s(ale);F2o=r(aot,"fsmt"),aot.forEach(t),T2o=r(FAe," \u2014 "),fN=n(FAe,"A",{href:!0});var not=s(fN);M2o=r(not,"FSMTModel"),not.forEach(t),E2o=r(FAe," (FairSeq Machine-Translation model)"),FAe.forEach(t),C2o=i($),Ps=n($,"LI",{});var X$=s(Ps);nle=n(X$,"STRONG",{});var sot=s(nle);w2o=r(sot,"funnel"),sot.forEach(t),A2o=r(X$," \u2014 "),mN=n(X$,"A",{href:!0});var lot=s(mN);y2o=r(lot,"FunnelModel"),lot.forEach(t),L2o=r(X$," or "),gN=n(X$,"A",{href:!0});var iot=s(gN);x2o=r(iot,"FunnelBaseModel"),iot.forEach(t),$2o=r(X$," (Funnel Transformer model)"),X$.forEach(t),k2o=i($),Gp=n($,"LI",{});var TAe=s(Gp);sle=n(TAe,"STRONG",{});var dot=s(sle);S2o=r(dot,"glpn"),dot.forEach(t),R2o=r(TAe," \u2014 "),hN=n(TAe,"A",{href:!0});var cot=s(hN);P2o=r(cot,"GLPNModel"),cot.forEach(t),B2o=r(TAe," (GLPN model)"),TAe.forEach(t),I2o=i($),Op=n($,"LI",{});var MAe=s(Op);lle=n(MAe,"STRONG",{});var fot=s(lle);N2o=r(fot,"gpt2"),fot.forEach(t),q2o=r(MAe," \u2014 "),pN=n(MAe,"A",{href:!0});var mot=s(pN);j2o=r(mot,"GPT2Model"),mot.forEach(t),D2o=r(MAe," (OpenAI GPT-2 model)"),MAe.forEach(t),G2o=i($),Vp=n($,"LI",{});var EAe=s(Vp);ile=n(EAe,"STRONG",{});var got=s(ile);O2o=r(got,"gpt_neo"),got.forEach(t),V2o=r(EAe," \u2014 "),_N=n(EAe,"A",{href:!0});var hot=s(_N);X2o=r(hot,"GPTNeoModel"),hot.forEach(t),z2o=r(EAe," (GPT Neo model)"),EAe.forEach(t),W2o=i($),Xp=n($,"LI",{});var CAe=s(Xp);dle=n(CAe,"STRONG",{});var pot=s(dle);Q2o=r(pot,"gpt_neox"),pot.forEach(t),H2o=r(CAe," \u2014 "),uN=n(CAe,"A",{href:!0});var _ot=s(uN);U2o=r(_ot,"GPTNeoXModel"),_ot.forEach(t),J2o=r(CAe," (GPT NeoX model)"),CAe.forEach(t),Y2o=i($),zp=n($,"LI",{});var wAe=s(zp);cle=n(wAe,"STRONG",{});var uot=s(cle);K2o=r(uot,"gptj"),uot.forEach(t),Z2o=r(wAe," \u2014 "),bN=n(wAe,"A",{href:!0});var bot=s(bN);e1o=r(bot,"GPTJModel"),bot.forEach(t),o1o=r(wAe," (GPT-J model)"),wAe.forEach(t),r1o=i($),Wp=n($,"LI",{});var AAe=s(Wp);fle=n(AAe,"STRONG",{});var vot=s(fle);t1o=r(vot,"hubert"),vot.forEach(t),a1o=r(AAe," \u2014 "),vN=n(AAe,"A",{href:!0});var Fot=s(vN);n1o=r(Fot,"HubertModel"),Fot.forEach(t),s1o=r(AAe," (Hubert model)"),AAe.forEach(t),l1o=i($),Qp=n($,"LI",{});var yAe=s(Qp);mle=n(yAe,"STRONG",{});var Tot=s(mle);i1o=r(Tot,"ibert"),Tot.forEach(t),d1o=r(yAe," \u2014 "),FN=n(yAe,"A",{href:!0});var Mot=s(FN);c1o=r(Mot,"IBertModel"),Mot.forEach(t),f1o=r(yAe," (I-BERT model)"),yAe.forEach(t),m1o=i($),Hp=n($,"LI",{});var LAe=s(Hp);gle=n(LAe,"STRONG",{});var Eot=s(gle);g1o=r(Eot,"imagegpt"),Eot.forEach(t),h1o=r(LAe," \u2014 "),TN=n(LAe,"A",{href:!0});var Cot=s(TN);p1o=r(Cot,"ImageGPTModel"),Cot.forEach(t),_1o=r(LAe," (ImageGPT model)"),LAe.forEach(t),u1o=i($),Up=n($,"LI",{});var xAe=s(Up);hle=n(xAe,"STRONG",{});var wot=s(hle);b1o=r(wot,"layoutlm"),wot.forEach(t),v1o=r(xAe," \u2014 "),MN=n(xAe,"A",{href:!0});var Aot=s(MN);F1o=r(Aot,"LayoutLMModel"),Aot.forEach(t),T1o=r(xAe," (LayoutLM model)"),xAe.forEach(t),M1o=i($),Jp=n($,"LI",{});var $Ae=s(Jp);ple=n($Ae,"STRONG",{});var yot=s(ple);E1o=r(yot,"layoutlmv2"),yot.forEach(t),C1o=r($Ae," \u2014 "),EN=n($Ae,"A",{href:!0});var Lot=s(EN);w1o=r(Lot,"LayoutLMv2Model"),Lot.forEach(t),A1o=r($Ae," (LayoutLMv2 model)"),$Ae.forEach(t),y1o=i($),Yp=n($,"LI",{});var kAe=s(Yp);_le=n(kAe,"STRONG",{});var xot=s(_le);L1o=r(xot,"layoutlmv3"),xot.forEach(t),x1o=r(kAe," \u2014 "),CN=n(kAe,"A",{href:!0});var $ot=s(CN);$1o=r($ot,"LayoutLMv3Model"),$ot.forEach(t),k1o=r(kAe," (LayoutLMv3 model)"),kAe.forEach(t),S1o=i($),Kp=n($,"LI",{});var SAe=s(Kp);ule=n(SAe,"STRONG",{});var kot=s(ule);R1o=r(kot,"led"),kot.forEach(t),P1o=r(SAe," \u2014 "),wN=n(SAe,"A",{href:!0});var Sot=s(wN);B1o=r(Sot,"LEDModel"),Sot.forEach(t),I1o=r(SAe," (LED model)"),SAe.forEach(t),N1o=i($),Zp=n($,"LI",{});var RAe=s(Zp);ble=n(RAe,"STRONG",{});var Rot=s(ble);q1o=r(Rot,"longformer"),Rot.forEach(t),j1o=r(RAe," \u2014 "),AN=n(RAe,"A",{href:!0});var Pot=s(AN);D1o=r(Pot,"LongformerModel"),Pot.forEach(t),G1o=r(RAe," (Longformer model)"),RAe.forEach(t),O1o=i($),e_=n($,"LI",{});var PAe=s(e_);vle=n(PAe,"STRONG",{});var Bot=s(vle);V1o=r(Bot,"luke"),Bot.forEach(t),X1o=r(PAe," \u2014 "),yN=n(PAe,"A",{href:!0});var Iot=s(yN);z1o=r(Iot,"LukeModel"),Iot.forEach(t),W1o=r(PAe," (LUKE model)"),PAe.forEach(t),Q1o=i($),o_=n($,"LI",{});var BAe=s(o_);Fle=n(BAe,"STRONG",{});var Not=s(Fle);H1o=r(Not,"lxmert"),Not.forEach(t),U1o=r(BAe," \u2014 "),LN=n(BAe,"A",{href:!0});var qot=s(LN);J1o=r(qot,"LxmertModel"),qot.forEach(t),Y1o=r(BAe," (LXMERT model)"),BAe.forEach(t),K1o=i($),r_=n($,"LI",{});var IAe=s(r_);Tle=n(IAe,"STRONG",{});var jot=s(Tle);Z1o=r(jot,"m2m_100"),jot.forEach(t),e7o=r(IAe," \u2014 "),xN=n(IAe,"A",{href:!0});var Dot=s(xN);o7o=r(Dot,"M2M100Model"),Dot.forEach(t),r7o=r(IAe," (M2M100 model)"),IAe.forEach(t),t7o=i($),t_=n($,"LI",{});var NAe=s(t_);Mle=n(NAe,"STRONG",{});var Got=s(Mle);a7o=r(Got,"marian"),Got.forEach(t),n7o=r(NAe," \u2014 "),$N=n(NAe,"A",{href:!0});var Oot=s($N);s7o=r(Oot,"MarianModel"),Oot.forEach(t),l7o=r(NAe," (Marian model)"),NAe.forEach(t),i7o=i($),a_=n($,"LI",{});var qAe=s(a_);Ele=n(qAe,"STRONG",{});var Vot=s(Ele);d7o=r(Vot,"maskformer"),Vot.forEach(t),c7o=r(qAe," \u2014 "),kN=n(qAe,"A",{href:!0});var Xot=s(kN);f7o=r(Xot,"MaskFormerModel"),Xot.forEach(t),m7o=r(qAe," (MaskFormer model)"),qAe.forEach(t),g7o=i($),n_=n($,"LI",{});var jAe=s(n_);Cle=n(jAe,"STRONG",{});var zot=s(Cle);h7o=r(zot,"mbart"),zot.forEach(t),p7o=r(jAe," \u2014 "),SN=n(jAe,"A",{href:!0});var Wot=s(SN);_7o=r(Wot,"MBartModel"),Wot.forEach(t),u7o=r(jAe," (mBART model)"),jAe.forEach(t),b7o=i($),s_=n($,"LI",{});var DAe=s(s_);wle=n(DAe,"STRONG",{});var Qot=s(wle);v7o=r(Qot,"megatron-bert"),Qot.forEach(t),F7o=r(DAe," \u2014 "),RN=n(DAe,"A",{href:!0});var Hot=s(RN);T7o=r(Hot,"MegatronBertModel"),Hot.forEach(t),M7o=r(DAe," (MegatronBert model)"),DAe.forEach(t),E7o=i($),l_=n($,"LI",{});var GAe=s(l_);Ale=n(GAe,"STRONG",{});var Uot=s(Ale);C7o=r(Uot,"mobilebert"),Uot.forEach(t),w7o=r(GAe," \u2014 "),PN=n(GAe,"A",{href:!0});var Jot=s(PN);A7o=r(Jot,"MobileBertModel"),Jot.forEach(t),y7o=r(GAe," (MobileBERT model)"),GAe.forEach(t),L7o=i($),i_=n($,"LI",{});var OAe=s(i_);yle=n(OAe,"STRONG",{});var Yot=s(yle);x7o=r(Yot,"mpnet"),Yot.forEach(t),$7o=r(OAe," \u2014 "),BN=n(OAe,"A",{href:!0});var Kot=s(BN);k7o=r(Kot,"MPNetModel"),Kot.forEach(t),S7o=r(OAe," (MPNet model)"),OAe.forEach(t),R7o=i($),d_=n($,"LI",{});var VAe=s(d_);Lle=n(VAe,"STRONG",{});var Zot=s(Lle);P7o=r(Zot,"mt5"),Zot.forEach(t),B7o=r(VAe," \u2014 "),IN=n(VAe,"A",{href:!0});var ert=s(IN);I7o=r(ert,"MT5Model"),ert.forEach(t),N7o=r(VAe," (mT5 model)"),VAe.forEach(t),q7o=i($),c_=n($,"LI",{});var XAe=s(c_);xle=n(XAe,"STRONG",{});var ort=s(xle);j7o=r(ort,"nystromformer"),ort.forEach(t),D7o=r(XAe," \u2014 "),NN=n(XAe,"A",{href:!0});var rrt=s(NN);G7o=r(rrt,"NystromformerModel"),rrt.forEach(t),O7o=r(XAe," (Nystromformer model)"),XAe.forEach(t),V7o=i($),f_=n($,"LI",{});var zAe=s(f_);$le=n(zAe,"STRONG",{});var trt=s($le);X7o=r(trt,"openai-gpt"),trt.forEach(t),z7o=r(zAe," \u2014 "),qN=n(zAe,"A",{href:!0});var art=s(qN);W7o=r(art,"OpenAIGPTModel"),art.forEach(t),Q7o=r(zAe," (OpenAI GPT model)"),zAe.forEach(t),H7o=i($),m_=n($,"LI",{});var WAe=s(m_);kle=n(WAe,"STRONG",{});var nrt=s(kle);U7o=r(nrt,"opt"),nrt.forEach(t),J7o=r(WAe," \u2014 "),jN=n(WAe,"A",{href:!0});var srt=s(jN);Y7o=r(srt,"OPTModel"),srt.forEach(t),K7o=r(WAe," (OPT model)"),WAe.forEach(t),Z7o=i($),g_=n($,"LI",{});var QAe=s(g_);Sle=n(QAe,"STRONG",{});var lrt=s(Sle);ebo=r(lrt,"pegasus"),lrt.forEach(t),obo=r(QAe," \u2014 "),DN=n(QAe,"A",{href:!0});var irt=s(DN);rbo=r(irt,"PegasusModel"),irt.forEach(t),tbo=r(QAe," (Pegasus model)"),QAe.forEach(t),abo=i($),h_=n($,"LI",{});var HAe=s(h_);Rle=n(HAe,"STRONG",{});var drt=s(Rle);nbo=r(drt,"perceiver"),drt.forEach(t),sbo=r(HAe," \u2014 "),GN=n(HAe,"A",{href:!0});var crt=s(GN);lbo=r(crt,"PerceiverModel"),crt.forEach(t),ibo=r(HAe," (Perceiver model)"),HAe.forEach(t),dbo=i($),p_=n($,"LI",{});var UAe=s(p_);Ple=n(UAe,"STRONG",{});var frt=s(Ple);cbo=r(frt,"plbart"),frt.forEach(t),fbo=r(UAe," \u2014 "),ON=n(UAe,"A",{href:!0});var mrt=s(ON);mbo=r(mrt,"PLBartModel"),mrt.forEach(t),gbo=r(UAe," (PLBart model)"),UAe.forEach(t),hbo=i($),__=n($,"LI",{});var JAe=s(__);Ble=n(JAe,"STRONG",{});var grt=s(Ble);pbo=r(grt,"poolformer"),grt.forEach(t),_bo=r(JAe," \u2014 "),VN=n(JAe,"A",{href:!0});var hrt=s(VN);ubo=r(hrt,"PoolFormerModel"),hrt.forEach(t),bbo=r(JAe," (PoolFormer model)"),JAe.forEach(t),vbo=i($),u_=n($,"LI",{});var YAe=s(u_);Ile=n(YAe,"STRONG",{});var prt=s(Ile);Fbo=r(prt,"prophetnet"),prt.forEach(t),Tbo=r(YAe," \u2014 "),XN=n(YAe,"A",{href:!0});var _rt=s(XN);Mbo=r(_rt,"ProphetNetModel"),_rt.forEach(t),Ebo=r(YAe," (ProphetNet model)"),YAe.forEach(t),Cbo=i($),b_=n($,"LI",{});var KAe=s(b_);Nle=n(KAe,"STRONG",{});var urt=s(Nle);wbo=r(urt,"qdqbert"),urt.forEach(t),Abo=r(KAe," \u2014 "),zN=n(KAe,"A",{href:!0});var brt=s(zN);ybo=r(brt,"QDQBertModel"),brt.forEach(t),Lbo=r(KAe," (QDQBert model)"),KAe.forEach(t),xbo=i($),v_=n($,"LI",{});var ZAe=s(v_);qle=n(ZAe,"STRONG",{});var vrt=s(qle);$bo=r(vrt,"reformer"),vrt.forEach(t),kbo=r(ZAe," \u2014 "),WN=n(ZAe,"A",{href:!0});var Frt=s(WN);Sbo=r(Frt,"ReformerModel"),Frt.forEach(t),Rbo=r(ZAe," (Reformer model)"),ZAe.forEach(t),Pbo=i($),F_=n($,"LI",{});var eye=s(F_);jle=n(eye,"STRONG",{});var Trt=s(jle);Bbo=r(Trt,"regnet"),Trt.forEach(t),Ibo=r(eye," \u2014 "),QN=n(eye,"A",{href:!0});var Mrt=s(QN);Nbo=r(Mrt,"RegNetModel"),Mrt.forEach(t),qbo=r(eye," (RegNet model)"),eye.forEach(t),jbo=i($),T_=n($,"LI",{});var oye=s(T_);Dle=n(oye,"STRONG",{});var Ert=s(Dle);Dbo=r(Ert,"rembert"),Ert.forEach(t),Gbo=r(oye," \u2014 "),HN=n(oye,"A",{href:!0});var Crt=s(HN);Obo=r(Crt,"RemBertModel"),Crt.forEach(t),Vbo=r(oye," (RemBERT model)"),oye.forEach(t),Xbo=i($),M_=n($,"LI",{});var rye=s(M_);Gle=n(rye,"STRONG",{});var wrt=s(Gle);zbo=r(wrt,"resnet"),wrt.forEach(t),Wbo=r(rye," \u2014 "),UN=n(rye,"A",{href:!0});var Art=s(UN);Qbo=r(Art,"ResNetModel"),Art.forEach(t),Hbo=r(rye," (ResNet model)"),rye.forEach(t),Ubo=i($),E_=n($,"LI",{});var tye=s(E_);Ole=n(tye,"STRONG",{});var yrt=s(Ole);Jbo=r(yrt,"retribert"),yrt.forEach(t),Ybo=r(tye," \u2014 "),JN=n(tye,"A",{href:!0});var Lrt=s(JN);Kbo=r(Lrt,"RetriBertModel"),Lrt.forEach(t),Zbo=r(tye," (RetriBERT model)"),tye.forEach(t),e4o=i($),C_=n($,"LI",{});var aye=s(C_);Vle=n(aye,"STRONG",{});var xrt=s(Vle);o4o=r(xrt,"roberta"),xrt.forEach(t),r4o=r(aye," \u2014 "),YN=n(aye,"A",{href:!0});var $rt=s(YN);t4o=r($rt,"RobertaModel"),$rt.forEach(t),a4o=r(aye," (RoBERTa model)"),aye.forEach(t),n4o=i($),w_=n($,"LI",{});var nye=s(w_);Xle=n(nye,"STRONG",{});var krt=s(Xle);s4o=r(krt,"roformer"),krt.forEach(t),l4o=r(nye," \u2014 "),KN=n(nye,"A",{href:!0});var Srt=s(KN);i4o=r(Srt,"RoFormerModel"),Srt.forEach(t),d4o=r(nye," (RoFormer model)"),nye.forEach(t),c4o=i($),A_=n($,"LI",{});var sye=s(A_);zle=n(sye,"STRONG",{});var Rrt=s(zle);f4o=r(Rrt,"segformer"),Rrt.forEach(t),m4o=r(sye," \u2014 "),ZN=n(sye,"A",{href:!0});var Prt=s(ZN);g4o=r(Prt,"SegformerModel"),Prt.forEach(t),h4o=r(sye," (SegFormer model)"),sye.forEach(t),p4o=i($),y_=n($,"LI",{});var lye=s(y_);Wle=n(lye,"STRONG",{});var Brt=s(Wle);_4o=r(Brt,"sew"),Brt.forEach(t),u4o=r(lye," \u2014 "),eq=n(lye,"A",{href:!0});var Irt=s(eq);b4o=r(Irt,"SEWModel"),Irt.forEach(t),v4o=r(lye," (SEW model)"),lye.forEach(t),F4o=i($),L_=n($,"LI",{});var iye=s(L_);Qle=n(iye,"STRONG",{});var Nrt=s(Qle);T4o=r(Nrt,"sew-d"),Nrt.forEach(t),M4o=r(iye," \u2014 "),oq=n(iye,"A",{href:!0});var qrt=s(oq);E4o=r(qrt,"SEWDModel"),qrt.forEach(t),C4o=r(iye," (SEW-D model)"),iye.forEach(t),w4o=i($),x_=n($,"LI",{});var dye=s(x_);Hle=n(dye,"STRONG",{});var jrt=s(Hle);A4o=r(jrt,"speech_to_text"),jrt.forEach(t),y4o=r(dye," \u2014 "),rq=n(dye,"A",{href:!0});var Drt=s(rq);L4o=r(Drt,"Speech2TextModel"),Drt.forEach(t),x4o=r(dye," (Speech2Text model)"),dye.forEach(t),$4o=i($),$_=n($,"LI",{});var cye=s($_);Ule=n(cye,"STRONG",{});var Grt=s(Ule);k4o=r(Grt,"splinter"),Grt.forEach(t),S4o=r(cye," \u2014 "),tq=n(cye,"A",{href:!0});var Ort=s(tq);R4o=r(Ort,"SplinterModel"),Ort.forEach(t),P4o=r(cye," (Splinter model)"),cye.forEach(t),B4o=i($),k_=n($,"LI",{});var fye=s(k_);Jle=n(fye,"STRONG",{});var Vrt=s(Jle);I4o=r(Vrt,"squeezebert"),Vrt.forEach(t),N4o=r(fye," \u2014 "),aq=n(fye,"A",{href:!0});var Xrt=s(aq);q4o=r(Xrt,"SqueezeBertModel"),Xrt.forEach(t),j4o=r(fye," (SqueezeBERT model)"),fye.forEach(t),D4o=i($),S_=n($,"LI",{});var mye=s(S_);Yle=n(mye,"STRONG",{});var zrt=s(Yle);G4o=r(zrt,"swin"),zrt.forEach(t),O4o=r(mye," \u2014 "),nq=n(mye,"A",{href:!0});var Wrt=s(nq);V4o=r(Wrt,"SwinModel"),Wrt.forEach(t),X4o=r(mye," (Swin model)"),mye.forEach(t),z4o=i($),R_=n($,"LI",{});var gye=s(R_);Kle=n(gye,"STRONG",{});var Qrt=s(Kle);W4o=r(Qrt,"t5"),Qrt.forEach(t),Q4o=r(gye," \u2014 "),sq=n(gye,"A",{href:!0});var Hrt=s(sq);H4o=r(Hrt,"T5Model"),Hrt.forEach(t),U4o=r(gye," (T5 model)"),gye.forEach(t),J4o=i($),P_=n($,"LI",{});var hye=s(P_);Zle=n(hye,"STRONG",{});var Urt=s(Zle);Y4o=r(Urt,"tapas"),Urt.forEach(t),K4o=r(hye," \u2014 "),lq=n(hye,"A",{href:!0});var Jrt=s(lq);Z4o=r(Jrt,"TapasModel"),Jrt.forEach(t),evo=r(hye," (TAPAS model)"),hye.forEach(t),ovo=i($),B_=n($,"LI",{});var pye=s(B_);eie=n(pye,"STRONG",{});var Yrt=s(eie);rvo=r(Yrt,"trajectory_transformer"),Yrt.forEach(t),tvo=r(pye," \u2014 "),iq=n(pye,"A",{href:!0});var Krt=s(iq);avo=r(Krt,"TrajectoryTransformerModel"),Krt.forEach(t),nvo=r(pye," (Trajectory Transformer model)"),pye.forEach(t),svo=i($),I_=n($,"LI",{});var _ye=s(I_);oie=n(_ye,"STRONG",{});var Zrt=s(oie);lvo=r(Zrt,"transfo-xl"),Zrt.forEach(t),ivo=r(_ye," \u2014 "),dq=n(_ye,"A",{href:!0});var ett=s(dq);dvo=r(ett,"TransfoXLModel"),ett.forEach(t),cvo=r(_ye," (Transformer-XL model)"),_ye.forEach(t),fvo=i($),N_=n($,"LI",{});var uye=s(N_);rie=n(uye,"STRONG",{});var ott=s(rie);mvo=r(ott,"unispeech"),ott.forEach(t),gvo=r(uye," \u2014 "),cq=n(uye,"A",{href:!0});var rtt=s(cq);hvo=r(rtt,"UniSpeechModel"),rtt.forEach(t),pvo=r(uye," (UniSpeech model)"),uye.forEach(t),_vo=i($),q_=n($,"LI",{});var bye=s(q_);tie=n(bye,"STRONG",{});var ttt=s(tie);uvo=r(ttt,"unispeech-sat"),ttt.forEach(t),bvo=r(bye," \u2014 "),fq=n(bye,"A",{href:!0});var att=s(fq);vvo=r(att,"UniSpeechSatModel"),att.forEach(t),Fvo=r(bye," (UniSpeechSat model)"),bye.forEach(t),Tvo=i($),j_=n($,"LI",{});var vye=s(j_);aie=n(vye,"STRONG",{});var ntt=s(aie);Mvo=r(ntt,"van"),ntt.forEach(t),Evo=r(vye," \u2014 "),mq=n(vye,"A",{href:!0});var stt=s(mq);Cvo=r(stt,"VanModel"),stt.forEach(t),wvo=r(vye," (VAN model)"),vye.forEach(t),Avo=i($),D_=n($,"LI",{});var Fye=s(D_);nie=n(Fye,"STRONG",{});var ltt=s(nie);yvo=r(ltt,"vilt"),ltt.forEach(t),Lvo=r(Fye," \u2014 "),gq=n(Fye,"A",{href:!0});var itt=s(gq);xvo=r(itt,"ViltModel"),itt.forEach(t),$vo=r(Fye," (ViLT model)"),Fye.forEach(t),kvo=i($),G_=n($,"LI",{});var Tye=s(G_);sie=n(Tye,"STRONG",{});var dtt=s(sie);Svo=r(dtt,"vision-text-dual-encoder"),dtt.forEach(t),Rvo=r(Tye," \u2014 "),hq=n(Tye,"A",{href:!0});var ctt=s(hq);Pvo=r(ctt,"VisionTextDualEncoderModel"),ctt.forEach(t),Bvo=r(Tye," (VisionTextDualEncoder model)"),Tye.forEach(t),Ivo=i($),O_=n($,"LI",{});var Mye=s(O_);lie=n(Mye,"STRONG",{});var ftt=s(lie);Nvo=r(ftt,"visual_bert"),ftt.forEach(t),qvo=r(Mye," \u2014 "),pq=n(Mye,"A",{href:!0});var mtt=s(pq);jvo=r(mtt,"VisualBertModel"),mtt.forEach(t),Dvo=r(Mye," (VisualBert model)"),Mye.forEach(t),Gvo=i($),V_=n($,"LI",{});var Eye=s(V_);iie=n(Eye,"STRONG",{});var gtt=s(iie);Ovo=r(gtt,"vit"),gtt.forEach(t),Vvo=r(Eye," \u2014 "),_q=n(Eye,"A",{href:!0});var htt=s(_q);Xvo=r(htt,"ViTModel"),htt.forEach(t),zvo=r(Eye," (ViT model)"),Eye.forEach(t),Wvo=i($),X_=n($,"LI",{});var Cye=s(X_);die=n(Cye,"STRONG",{});var ptt=s(die);Qvo=r(ptt,"vit_mae"),ptt.forEach(t),Hvo=r(Cye," \u2014 "),uq=n(Cye,"A",{href:!0});var _tt=s(uq);Uvo=r(_tt,"ViTMAEModel"),_tt.forEach(t),Jvo=r(Cye," (ViTMAE model)"),Cye.forEach(t),Yvo=i($),z_=n($,"LI",{});var wye=s(z_);cie=n(wye,"STRONG",{});var utt=s(cie);Kvo=r(utt,"wav2vec2"),utt.forEach(t),Zvo=r(wye," \u2014 "),bq=n(wye,"A",{href:!0});var btt=s(bq);eFo=r(btt,"Wav2Vec2Model"),btt.forEach(t),oFo=r(wye," (Wav2Vec2 model)"),wye.forEach(t),rFo=i($),W_=n($,"LI",{});var Aye=s(W_);fie=n(Aye,"STRONG",{});var vtt=s(fie);tFo=r(vtt,"wav2vec2-conformer"),vtt.forEach(t),aFo=r(Aye," \u2014 "),vq=n(Aye,"A",{href:!0});var Ftt=s(vq);nFo=r(Ftt,"Wav2Vec2ConformerModel"),Ftt.forEach(t),sFo=r(Aye," (Wav2Vec2-Conformer model)"),Aye.forEach(t),lFo=i($),Q_=n($,"LI",{});var yye=s(Q_);mie=n(yye,"STRONG",{});var Ttt=s(mie);iFo=r(Ttt,"wavlm"),Ttt.forEach(t),dFo=r(yye," \u2014 "),Fq=n(yye,"A",{href:!0});var Mtt=s(Fq);cFo=r(Mtt,"WavLMModel"),Mtt.forEach(t),fFo=r(yye," (WavLM model)"),yye.forEach(t),mFo=i($),H_=n($,"LI",{});var Lye=s(H_);gie=n(Lye,"STRONG",{});var Ett=s(gie);gFo=r(Ett,"xglm"),Ett.forEach(t),hFo=r(Lye," \u2014 "),Tq=n(Lye,"A",{href:!0});var Ctt=s(Tq);pFo=r(Ctt,"XGLMModel"),Ctt.forEach(t),_Fo=r(Lye," (XGLM model)"),Lye.forEach(t),uFo=i($),U_=n($,"LI",{});var xye=s(U_);hie=n(xye,"STRONG",{});var wtt=s(hie);bFo=r(wtt,"xlm"),wtt.forEach(t),vFo=r(xye," \u2014 "),Mq=n(xye,"A",{href:!0});var Att=s(Mq);FFo=r(Att,"XLMModel"),Att.forEach(t),TFo=r(xye," (XLM model)"),xye.forEach(t),MFo=i($),J_=n($,"LI",{});var $ye=s(J_);pie=n($ye,"STRONG",{});var ytt=s(pie);EFo=r(ytt,"xlm-prophetnet"),ytt.forEach(t),CFo=r($ye," \u2014 "),Eq=n($ye,"A",{href:!0});var Ltt=s(Eq);wFo=r(Ltt,"XLMProphetNetModel"),Ltt.forEach(t),AFo=r($ye," (XLMProphetNet model)"),$ye.forEach(t),yFo=i($),Y_=n($,"LI",{});var kye=s(Y_);_ie=n(kye,"STRONG",{});var xtt=s(_ie);LFo=r(xtt,"xlm-roberta"),xtt.forEach(t),xFo=r(kye," \u2014 "),Cq=n(kye,"A",{href:!0});var $tt=s(Cq);$Fo=r($tt,"XLMRobertaModel"),$tt.forEach(t),kFo=r(kye," (XLM-RoBERTa model)"),kye.forEach(t),SFo=i($),K_=n($,"LI",{});var Sye=s(K_);uie=n(Sye,"STRONG",{});var ktt=s(uie);RFo=r(ktt,"xlm-roberta-xl"),ktt.forEach(t),PFo=r(Sye," \u2014 "),wq=n(Sye,"A",{href:!0});var Stt=s(wq);BFo=r(Stt,"XLMRobertaXLModel"),Stt.forEach(t),IFo=r(Sye," (XLM-RoBERTa-XL model)"),Sye.forEach(t),NFo=i($),Z_=n($,"LI",{});var Rye=s(Z_);bie=n(Rye,"STRONG",{});var Rtt=s(bie);qFo=r(Rtt,"xlnet"),Rtt.forEach(t),jFo=r(Rye," \u2014 "),Aq=n(Rye,"A",{href:!0});var Ptt=s(Aq);DFo=r(Ptt,"XLNetModel"),Ptt.forEach(t),GFo=r(Rye," (XLNet model)"),Rye.forEach(t),OFo=i($),eu=n($,"LI",{});var Pye=s(eu);vie=n(Pye,"STRONG",{});var Btt=s(vie);VFo=r(Btt,"yolos"),Btt.forEach(t),XFo=r(Pye," \u2014 "),yq=n(Pye,"A",{href:!0});var Itt=s(yq);zFo=r(Itt,"YolosModel"),Itt.forEach(t),WFo=r(Pye," (YOLOS model)"),Pye.forEach(t),QFo=i($),ou=n($,"LI",{});var Bye=s(ou);Fie=n(Bye,"STRONG",{});var Ntt=s(Fie);HFo=r(Ntt,"yoso"),Ntt.forEach(t),UFo=r(Bye," \u2014 "),Lq=n(Bye,"A",{href:!0});var qtt=s(Lq);JFo=r(qtt,"YosoModel"),qtt.forEach(t),YFo=r(Bye," (YOSO model)"),Bye.forEach(t),$.forEach(t),KFo=i(ra),ru=n(ra,"P",{});var Iye=s(ru);ZFo=r(Iye,"The model is set in evaluation mode by default using "),Tie=n(Iye,"CODE",{});var jtt=s(Tie);eTo=r(jtt,"model.eval()"),jtt.forEach(t),oTo=r(Iye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mie=n(Iye,"CODE",{});var Dtt=s(Mie);rTo=r(Dtt,"model.train()"),Dtt.forEach(t),Iye.forEach(t),tTo=i(ra),T(tu.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),Tqe=i(f),xi=n(f,"H2",{class:!0});var wDe=s(xi);au=n(wDe,"A",{id:!0,class:!0,href:!0});var Gtt=s(au);Eie=n(Gtt,"SPAN",{});var Ott=s(Eie);T(sy.$$.fragment,Ott),Ott.forEach(t),Gtt.forEach(t),aTo=i(wDe),Cie=n(wDe,"SPAN",{});var Vtt=s(Cie);nTo=r(Vtt,"AutoModelForPreTraining"),Vtt.forEach(t),wDe.forEach(t),Mqe=i(f),xo=n(f,"DIV",{class:!0});var Os=s(xo);T(ly.$$.fragment,Os),sTo=i(Os),$i=n(Os,"P",{});var TZ=s($i);lTo=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xq=n(TZ,"A",{href:!0});var Xtt=s(xq);iTo=r(Xtt,"from_pretrained()"),Xtt.forEach(t),dTo=r(TZ," class method or the "),$q=n(TZ,"A",{href:!0});var ztt=s($q);cTo=r(ztt,"from_config()"),ztt.forEach(t),fTo=r(TZ,` class
method.`),TZ.forEach(t),mTo=i(Os),iy=n(Os,"P",{});var ADe=s(iy);gTo=r(ADe,"This class cannot be instantiated directly using "),wie=n(ADe,"CODE",{});var Wtt=s(wie);hTo=r(Wtt,"__init__()"),Wtt.forEach(t),pTo=r(ADe," (throws an error)."),ADe.forEach(t),_To=i(Os),nt=n(Os,"DIV",{class:!0});var I0=s(nt);T(dy.$$.fragment,I0),uTo=i(I0),Aie=n(I0,"P",{});var Qtt=s(Aie);bTo=r(Qtt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qtt.forEach(t),vTo=i(I0),ki=n(I0,"P",{});var MZ=s(ki);FTo=r(MZ,`Note:
Loading a model from its configuration file does `),yie=n(MZ,"STRONG",{});var Htt=s(yie);TTo=r(Htt,"not"),Htt.forEach(t),MTo=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kq=n(MZ,"A",{href:!0});var Utt=s(kq);ETo=r(Utt,"from_pretrained()"),Utt.forEach(t),CTo=r(MZ," to load the model weights."),MZ.forEach(t),wTo=i(I0),T(nu.$$.fragment,I0),I0.forEach(t),ATo=i(Os),Ye=n(Os,"DIV",{class:!0});var ta=s(Ye);T(cy.$$.fragment,ta),yTo=i(ta),Lie=n(ta,"P",{});var Jtt=s(Lie);LTo=r(Jtt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jtt.forEach(t),xTo=i(ta),$a=n(ta,"P",{});var N0=s($a);$To=r(N0,"The model class to instantiate is selected based on the "),xie=n(N0,"CODE",{});var Ytt=s(xie);kTo=r(Ytt,"model_type"),Ytt.forEach(t),STo=r(N0,` property of the config object (either
passed as an argument or loaded from `),$ie=n(N0,"CODE",{});var Ktt=s($ie);RTo=r(Ktt,"pretrained_model_name_or_path"),Ktt.forEach(t),PTo=r(N0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kie=n(N0,"CODE",{});var Ztt=s(kie);BTo=r(Ztt,"pretrained_model_name_or_path"),Ztt.forEach(t),ITo=r(N0,":"),N0.forEach(t),NTo=i(ta),G=n(ta,"UL",{});var O=s(G);su=n(O,"LI",{});var Nye=s(su);Sie=n(Nye,"STRONG",{});var eat=s(Sie);qTo=r(eat,"albert"),eat.forEach(t),jTo=r(Nye," \u2014 "),Sq=n(Nye,"A",{href:!0});var oat=s(Sq);DTo=r(oat,"AlbertForPreTraining"),oat.forEach(t),GTo=r(Nye," (ALBERT model)"),Nye.forEach(t),OTo=i(O),lu=n(O,"LI",{});var qye=s(lu);Rie=n(qye,"STRONG",{});var rat=s(Rie);VTo=r(rat,"bart"),rat.forEach(t),XTo=r(qye," \u2014 "),Rq=n(qye,"A",{href:!0});var tat=s(Rq);zTo=r(tat,"BartForConditionalGeneration"),tat.forEach(t),WTo=r(qye," (BART model)"),qye.forEach(t),QTo=i(O),iu=n(O,"LI",{});var jye=s(iu);Pie=n(jye,"STRONG",{});var aat=s(Pie);HTo=r(aat,"bert"),aat.forEach(t),UTo=r(jye," \u2014 "),Pq=n(jye,"A",{href:!0});var nat=s(Pq);JTo=r(nat,"BertForPreTraining"),nat.forEach(t),YTo=r(jye," (BERT model)"),jye.forEach(t),KTo=i(O),du=n(O,"LI",{});var Dye=s(du);Bie=n(Dye,"STRONG",{});var sat=s(Bie);ZTo=r(sat,"big_bird"),sat.forEach(t),eMo=r(Dye," \u2014 "),Bq=n(Dye,"A",{href:!0});var lat=s(Bq);oMo=r(lat,"BigBirdForPreTraining"),lat.forEach(t),rMo=r(Dye," (BigBird model)"),Dye.forEach(t),tMo=i(O),cu=n(O,"LI",{});var Gye=s(cu);Iie=n(Gye,"STRONG",{});var iat=s(Iie);aMo=r(iat,"camembert"),iat.forEach(t),nMo=r(Gye," \u2014 "),Iq=n(Gye,"A",{href:!0});var dat=s(Iq);sMo=r(dat,"CamembertForMaskedLM"),dat.forEach(t),lMo=r(Gye," (CamemBERT model)"),Gye.forEach(t),iMo=i(O),fu=n(O,"LI",{});var Oye=s(fu);Nie=n(Oye,"STRONG",{});var cat=s(Nie);dMo=r(cat,"ctrl"),cat.forEach(t),cMo=r(Oye," \u2014 "),Nq=n(Oye,"A",{href:!0});var fat=s(Nq);fMo=r(fat,"CTRLLMHeadModel"),fat.forEach(t),mMo=r(Oye," (CTRL model)"),Oye.forEach(t),gMo=i(O),mu=n(O,"LI",{});var Vye=s(mu);qie=n(Vye,"STRONG",{});var mat=s(qie);hMo=r(mat,"data2vec-text"),mat.forEach(t),pMo=r(Vye," \u2014 "),qq=n(Vye,"A",{href:!0});var gat=s(qq);_Mo=r(gat,"Data2VecTextForMaskedLM"),gat.forEach(t),uMo=r(Vye," (Data2VecText model)"),Vye.forEach(t),bMo=i(O),gu=n(O,"LI",{});var Xye=s(gu);jie=n(Xye,"STRONG",{});var hat=s(jie);vMo=r(hat,"deberta"),hat.forEach(t),FMo=r(Xye," \u2014 "),jq=n(Xye,"A",{href:!0});var pat=s(jq);TMo=r(pat,"DebertaForMaskedLM"),pat.forEach(t),MMo=r(Xye," (DeBERTa model)"),Xye.forEach(t),EMo=i(O),hu=n(O,"LI",{});var zye=s(hu);Die=n(zye,"STRONG",{});var _at=s(Die);CMo=r(_at,"deberta-v2"),_at.forEach(t),wMo=r(zye," \u2014 "),Dq=n(zye,"A",{href:!0});var uat=s(Dq);AMo=r(uat,"DebertaV2ForMaskedLM"),uat.forEach(t),yMo=r(zye," (DeBERTa-v2 model)"),zye.forEach(t),LMo=i(O),pu=n(O,"LI",{});var Wye=s(pu);Gie=n(Wye,"STRONG",{});var bat=s(Gie);xMo=r(bat,"distilbert"),bat.forEach(t),$Mo=r(Wye," \u2014 "),Gq=n(Wye,"A",{href:!0});var vat=s(Gq);kMo=r(vat,"DistilBertForMaskedLM"),vat.forEach(t),SMo=r(Wye," (DistilBERT model)"),Wye.forEach(t),RMo=i(O),_u=n(O,"LI",{});var Qye=s(_u);Oie=n(Qye,"STRONG",{});var Fat=s(Oie);PMo=r(Fat,"electra"),Fat.forEach(t),BMo=r(Qye," \u2014 "),Oq=n(Qye,"A",{href:!0});var Tat=s(Oq);IMo=r(Tat,"ElectraForPreTraining"),Tat.forEach(t),NMo=r(Qye," (ELECTRA model)"),Qye.forEach(t),qMo=i(O),uu=n(O,"LI",{});var Hye=s(uu);Vie=n(Hye,"STRONG",{});var Mat=s(Vie);jMo=r(Mat,"flaubert"),Mat.forEach(t),DMo=r(Hye," \u2014 "),Vq=n(Hye,"A",{href:!0});var Eat=s(Vq);GMo=r(Eat,"FlaubertWithLMHeadModel"),Eat.forEach(t),OMo=r(Hye," (FlauBERT model)"),Hye.forEach(t),VMo=i(O),bu=n(O,"LI",{});var Uye=s(bu);Xie=n(Uye,"STRONG",{});var Cat=s(Xie);XMo=r(Cat,"flava"),Cat.forEach(t),zMo=r(Uye," \u2014 "),Xq=n(Uye,"A",{href:!0});var wat=s(Xq);WMo=r(wat,"FlavaForPreTraining"),wat.forEach(t),QMo=r(Uye," (Flava model)"),Uye.forEach(t),HMo=i(O),vu=n(O,"LI",{});var Jye=s(vu);zie=n(Jye,"STRONG",{});var Aat=s(zie);UMo=r(Aat,"fnet"),Aat.forEach(t),JMo=r(Jye," \u2014 "),zq=n(Jye,"A",{href:!0});var yat=s(zq);YMo=r(yat,"FNetForPreTraining"),yat.forEach(t),KMo=r(Jye," (FNet model)"),Jye.forEach(t),ZMo=i(O),Fu=n(O,"LI",{});var Yye=s(Fu);Wie=n(Yye,"STRONG",{});var Lat=s(Wie);eEo=r(Lat,"fsmt"),Lat.forEach(t),oEo=r(Yye," \u2014 "),Wq=n(Yye,"A",{href:!0});var xat=s(Wq);rEo=r(xat,"FSMTForConditionalGeneration"),xat.forEach(t),tEo=r(Yye," (FairSeq Machine-Translation model)"),Yye.forEach(t),aEo=i(O),Tu=n(O,"LI",{});var Kye=s(Tu);Qie=n(Kye,"STRONG",{});var $at=s(Qie);nEo=r($at,"funnel"),$at.forEach(t),sEo=r(Kye," \u2014 "),Qq=n(Kye,"A",{href:!0});var kat=s(Qq);lEo=r(kat,"FunnelForPreTraining"),kat.forEach(t),iEo=r(Kye," (Funnel Transformer model)"),Kye.forEach(t),dEo=i(O),Mu=n(O,"LI",{});var Zye=s(Mu);Hie=n(Zye,"STRONG",{});var Sat=s(Hie);cEo=r(Sat,"gpt2"),Sat.forEach(t),fEo=r(Zye," \u2014 "),Hq=n(Zye,"A",{href:!0});var Rat=s(Hq);mEo=r(Rat,"GPT2LMHeadModel"),Rat.forEach(t),gEo=r(Zye," (OpenAI GPT-2 model)"),Zye.forEach(t),hEo=i(O),Eu=n(O,"LI",{});var eLe=s(Eu);Uie=n(eLe,"STRONG",{});var Pat=s(Uie);pEo=r(Pat,"ibert"),Pat.forEach(t),_Eo=r(eLe," \u2014 "),Uq=n(eLe,"A",{href:!0});var Bat=s(Uq);uEo=r(Bat,"IBertForMaskedLM"),Bat.forEach(t),bEo=r(eLe," (I-BERT model)"),eLe.forEach(t),vEo=i(O),Cu=n(O,"LI",{});var oLe=s(Cu);Jie=n(oLe,"STRONG",{});var Iat=s(Jie);FEo=r(Iat,"layoutlm"),Iat.forEach(t),TEo=r(oLe," \u2014 "),Jq=n(oLe,"A",{href:!0});var Nat=s(Jq);MEo=r(Nat,"LayoutLMForMaskedLM"),Nat.forEach(t),EEo=r(oLe," (LayoutLM model)"),oLe.forEach(t),CEo=i(O),wu=n(O,"LI",{});var rLe=s(wu);Yie=n(rLe,"STRONG",{});var qat=s(Yie);wEo=r(qat,"longformer"),qat.forEach(t),AEo=r(rLe," \u2014 "),Yq=n(rLe,"A",{href:!0});var jat=s(Yq);yEo=r(jat,"LongformerForMaskedLM"),jat.forEach(t),LEo=r(rLe," (Longformer model)"),rLe.forEach(t),xEo=i(O),Au=n(O,"LI",{});var tLe=s(Au);Kie=n(tLe,"STRONG",{});var Dat=s(Kie);$Eo=r(Dat,"lxmert"),Dat.forEach(t),kEo=r(tLe," \u2014 "),Kq=n(tLe,"A",{href:!0});var Gat=s(Kq);SEo=r(Gat,"LxmertForPreTraining"),Gat.forEach(t),REo=r(tLe," (LXMERT model)"),tLe.forEach(t),PEo=i(O),yu=n(O,"LI",{});var aLe=s(yu);Zie=n(aLe,"STRONG",{});var Oat=s(Zie);BEo=r(Oat,"megatron-bert"),Oat.forEach(t),IEo=r(aLe," \u2014 "),Zq=n(aLe,"A",{href:!0});var Vat=s(Zq);NEo=r(Vat,"MegatronBertForPreTraining"),Vat.forEach(t),qEo=r(aLe," (MegatronBert model)"),aLe.forEach(t),jEo=i(O),Lu=n(O,"LI",{});var nLe=s(Lu);ede=n(nLe,"STRONG",{});var Xat=s(ede);DEo=r(Xat,"mobilebert"),Xat.forEach(t),GEo=r(nLe," \u2014 "),ej=n(nLe,"A",{href:!0});var zat=s(ej);OEo=r(zat,"MobileBertForPreTraining"),zat.forEach(t),VEo=r(nLe," (MobileBERT model)"),nLe.forEach(t),XEo=i(O),xu=n(O,"LI",{});var sLe=s(xu);ode=n(sLe,"STRONG",{});var Wat=s(ode);zEo=r(Wat,"mpnet"),Wat.forEach(t),WEo=r(sLe," \u2014 "),oj=n(sLe,"A",{href:!0});var Qat=s(oj);QEo=r(Qat,"MPNetForMaskedLM"),Qat.forEach(t),HEo=r(sLe," (MPNet model)"),sLe.forEach(t),UEo=i(O),$u=n(O,"LI",{});var lLe=s($u);rde=n(lLe,"STRONG",{});var Hat=s(rde);JEo=r(Hat,"openai-gpt"),Hat.forEach(t),YEo=r(lLe," \u2014 "),rj=n(lLe,"A",{href:!0});var Uat=s(rj);KEo=r(Uat,"OpenAIGPTLMHeadModel"),Uat.forEach(t),ZEo=r(lLe," (OpenAI GPT model)"),lLe.forEach(t),eCo=i(O),ku=n(O,"LI",{});var iLe=s(ku);tde=n(iLe,"STRONG",{});var Jat=s(tde);oCo=r(Jat,"retribert"),Jat.forEach(t),rCo=r(iLe," \u2014 "),tj=n(iLe,"A",{href:!0});var Yat=s(tj);tCo=r(Yat,"RetriBertModel"),Yat.forEach(t),aCo=r(iLe," (RetriBERT model)"),iLe.forEach(t),nCo=i(O),Su=n(O,"LI",{});var dLe=s(Su);ade=n(dLe,"STRONG",{});var Kat=s(ade);sCo=r(Kat,"roberta"),Kat.forEach(t),lCo=r(dLe," \u2014 "),aj=n(dLe,"A",{href:!0});var Zat=s(aj);iCo=r(Zat,"RobertaForMaskedLM"),Zat.forEach(t),dCo=r(dLe," (RoBERTa model)"),dLe.forEach(t),cCo=i(O),Ru=n(O,"LI",{});var cLe=s(Ru);nde=n(cLe,"STRONG",{});var ent=s(nde);fCo=r(ent,"splinter"),ent.forEach(t),mCo=r(cLe," \u2014 "),nj=n(cLe,"A",{href:!0});var ont=s(nj);gCo=r(ont,"SplinterForPreTraining"),ont.forEach(t),hCo=r(cLe," (Splinter model)"),cLe.forEach(t),pCo=i(O),Pu=n(O,"LI",{});var fLe=s(Pu);sde=n(fLe,"STRONG",{});var rnt=s(sde);_Co=r(rnt,"squeezebert"),rnt.forEach(t),uCo=r(fLe," \u2014 "),sj=n(fLe,"A",{href:!0});var tnt=s(sj);bCo=r(tnt,"SqueezeBertForMaskedLM"),tnt.forEach(t),vCo=r(fLe," (SqueezeBERT model)"),fLe.forEach(t),FCo=i(O),Bu=n(O,"LI",{});var mLe=s(Bu);lde=n(mLe,"STRONG",{});var ant=s(lde);TCo=r(ant,"t5"),ant.forEach(t),MCo=r(mLe," \u2014 "),lj=n(mLe,"A",{href:!0});var nnt=s(lj);ECo=r(nnt,"T5ForConditionalGeneration"),nnt.forEach(t),CCo=r(mLe," (T5 model)"),mLe.forEach(t),wCo=i(O),Iu=n(O,"LI",{});var gLe=s(Iu);ide=n(gLe,"STRONG",{});var snt=s(ide);ACo=r(snt,"tapas"),snt.forEach(t),yCo=r(gLe," \u2014 "),ij=n(gLe,"A",{href:!0});var lnt=s(ij);LCo=r(lnt,"TapasForMaskedLM"),lnt.forEach(t),xCo=r(gLe," (TAPAS model)"),gLe.forEach(t),$Co=i(O),Nu=n(O,"LI",{});var hLe=s(Nu);dde=n(hLe,"STRONG",{});var int=s(dde);kCo=r(int,"transfo-xl"),int.forEach(t),SCo=r(hLe," \u2014 "),dj=n(hLe,"A",{href:!0});var dnt=s(dj);RCo=r(dnt,"TransfoXLLMHeadModel"),dnt.forEach(t),PCo=r(hLe," (Transformer-XL model)"),hLe.forEach(t),BCo=i(O),qu=n(O,"LI",{});var pLe=s(qu);cde=n(pLe,"STRONG",{});var cnt=s(cde);ICo=r(cnt,"unispeech"),cnt.forEach(t),NCo=r(pLe," \u2014 "),cj=n(pLe,"A",{href:!0});var fnt=s(cj);qCo=r(fnt,"UniSpeechForPreTraining"),fnt.forEach(t),jCo=r(pLe," (UniSpeech model)"),pLe.forEach(t),DCo=i(O),ju=n(O,"LI",{});var _Le=s(ju);fde=n(_Le,"STRONG",{});var mnt=s(fde);GCo=r(mnt,"unispeech-sat"),mnt.forEach(t),OCo=r(_Le," \u2014 "),fj=n(_Le,"A",{href:!0});var gnt=s(fj);VCo=r(gnt,"UniSpeechSatForPreTraining"),gnt.forEach(t),XCo=r(_Le," (UniSpeechSat model)"),_Le.forEach(t),zCo=i(O),Du=n(O,"LI",{});var uLe=s(Du);mde=n(uLe,"STRONG",{});var hnt=s(mde);WCo=r(hnt,"visual_bert"),hnt.forEach(t),QCo=r(uLe," \u2014 "),mj=n(uLe,"A",{href:!0});var pnt=s(mj);HCo=r(pnt,"VisualBertForPreTraining"),pnt.forEach(t),UCo=r(uLe," (VisualBert model)"),uLe.forEach(t),JCo=i(O),Gu=n(O,"LI",{});var bLe=s(Gu);gde=n(bLe,"STRONG",{});var _nt=s(gde);YCo=r(_nt,"vit_mae"),_nt.forEach(t),KCo=r(bLe," \u2014 "),gj=n(bLe,"A",{href:!0});var unt=s(gj);ZCo=r(unt,"ViTMAEForPreTraining"),unt.forEach(t),e5o=r(bLe," (ViTMAE model)"),bLe.forEach(t),o5o=i(O),Ou=n(O,"LI",{});var vLe=s(Ou);hde=n(vLe,"STRONG",{});var bnt=s(hde);r5o=r(bnt,"wav2vec2"),bnt.forEach(t),t5o=r(vLe," \u2014 "),hj=n(vLe,"A",{href:!0});var vnt=s(hj);a5o=r(vnt,"Wav2Vec2ForPreTraining"),vnt.forEach(t),n5o=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),s5o=i(O),Vu=n(O,"LI",{});var FLe=s(Vu);pde=n(FLe,"STRONG",{});var Fnt=s(pde);l5o=r(Fnt,"wav2vec2-conformer"),Fnt.forEach(t),i5o=r(FLe," \u2014 "),pj=n(FLe,"A",{href:!0});var Tnt=s(pj);d5o=r(Tnt,"Wav2Vec2ConformerForPreTraining"),Tnt.forEach(t),c5o=r(FLe," (Wav2Vec2-Conformer model)"),FLe.forEach(t),f5o=i(O),Xu=n(O,"LI",{});var TLe=s(Xu);_de=n(TLe,"STRONG",{});var Mnt=s(_de);m5o=r(Mnt,"xlm"),Mnt.forEach(t),g5o=r(TLe," \u2014 "),_j=n(TLe,"A",{href:!0});var Ent=s(_j);h5o=r(Ent,"XLMWithLMHeadModel"),Ent.forEach(t),p5o=r(TLe," (XLM model)"),TLe.forEach(t),_5o=i(O),zu=n(O,"LI",{});var MLe=s(zu);ude=n(MLe,"STRONG",{});var Cnt=s(ude);u5o=r(Cnt,"xlm-roberta"),Cnt.forEach(t),b5o=r(MLe," \u2014 "),uj=n(MLe,"A",{href:!0});var wnt=s(uj);v5o=r(wnt,"XLMRobertaForMaskedLM"),wnt.forEach(t),F5o=r(MLe," (XLM-RoBERTa model)"),MLe.forEach(t),T5o=i(O),Wu=n(O,"LI",{});var ELe=s(Wu);bde=n(ELe,"STRONG",{});var Ant=s(bde);M5o=r(Ant,"xlm-roberta-xl"),Ant.forEach(t),E5o=r(ELe," \u2014 "),bj=n(ELe,"A",{href:!0});var ynt=s(bj);C5o=r(ynt,"XLMRobertaXLForMaskedLM"),ynt.forEach(t),w5o=r(ELe," (XLM-RoBERTa-XL model)"),ELe.forEach(t),A5o=i(O),Qu=n(O,"LI",{});var CLe=s(Qu);vde=n(CLe,"STRONG",{});var Lnt=s(vde);y5o=r(Lnt,"xlnet"),Lnt.forEach(t),L5o=r(CLe," \u2014 "),vj=n(CLe,"A",{href:!0});var xnt=s(vj);x5o=r(xnt,"XLNetLMHeadModel"),xnt.forEach(t),$5o=r(CLe," (XLNet model)"),CLe.forEach(t),O.forEach(t),k5o=i(ta),Hu=n(ta,"P",{});var wLe=s(Hu);S5o=r(wLe,"The model is set in evaluation mode by default using "),Fde=n(wLe,"CODE",{});var $nt=s(Fde);R5o=r($nt,"model.eval()"),$nt.forEach(t),P5o=r(wLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=n(wLe,"CODE",{});var knt=s(Tde);B5o=r(knt,"model.train()"),knt.forEach(t),wLe.forEach(t),I5o=i(ta),T(Uu.$$.fragment,ta),ta.forEach(t),Os.forEach(t),Eqe=i(f),Si=n(f,"H2",{class:!0});var yDe=s(Si);Ju=n(yDe,"A",{id:!0,class:!0,href:!0});var Snt=s(Ju);Mde=n(Snt,"SPAN",{});var Rnt=s(Mde);T(fy.$$.fragment,Rnt),Rnt.forEach(t),Snt.forEach(t),N5o=i(yDe),Ede=n(yDe,"SPAN",{});var Pnt=s(Ede);q5o=r(Pnt,"AutoModelForCausalLM"),Pnt.forEach(t),yDe.forEach(t),Cqe=i(f),$o=n(f,"DIV",{class:!0});var Vs=s($o);T(my.$$.fragment,Vs),j5o=i(Vs),Ri=n(Vs,"P",{});var EZ=s(Ri);D5o=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Fj=n(EZ,"A",{href:!0});var Bnt=s(Fj);G5o=r(Bnt,"from_pretrained()"),Bnt.forEach(t),O5o=r(EZ," class method or the "),Tj=n(EZ,"A",{href:!0});var Int=s(Tj);V5o=r(Int,"from_config()"),Int.forEach(t),X5o=r(EZ,` class
method.`),EZ.forEach(t),z5o=i(Vs),gy=n(Vs,"P",{});var LDe=s(gy);W5o=r(LDe,"This class cannot be instantiated directly using "),Cde=n(LDe,"CODE",{});var Nnt=s(Cde);Q5o=r(Nnt,"__init__()"),Nnt.forEach(t),H5o=r(LDe," (throws an error)."),LDe.forEach(t),U5o=i(Vs),st=n(Vs,"DIV",{class:!0});var q0=s(st);T(hy.$$.fragment,q0),J5o=i(q0),wde=n(q0,"P",{});var qnt=s(wde);Y5o=r(qnt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),qnt.forEach(t),K5o=i(q0),Pi=n(q0,"P",{});var CZ=s(Pi);Z5o=r(CZ,`Note:
Loading a model from its configuration file does `),Ade=n(CZ,"STRONG",{});var jnt=s(Ade);e3o=r(jnt,"not"),jnt.forEach(t),o3o=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mj=n(CZ,"A",{href:!0});var Dnt=s(Mj);r3o=r(Dnt,"from_pretrained()"),Dnt.forEach(t),t3o=r(CZ," to load the model weights."),CZ.forEach(t),a3o=i(q0),T(Yu.$$.fragment,q0),q0.forEach(t),n3o=i(Vs),Ke=n(Vs,"DIV",{class:!0});var aa=s(Ke);T(py.$$.fragment,aa),s3o=i(aa),yde=n(aa,"P",{});var Gnt=s(yde);l3o=r(Gnt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Gnt.forEach(t),i3o=i(aa),ka=n(aa,"P",{});var j0=s(ka);d3o=r(j0,"The model class to instantiate is selected based on the "),Lde=n(j0,"CODE",{});var Ont=s(Lde);c3o=r(Ont,"model_type"),Ont.forEach(t),f3o=r(j0,` property of the config object (either
passed as an argument or loaded from `),xde=n(j0,"CODE",{});var Vnt=s(xde);m3o=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),g3o=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$de=n(j0,"CODE",{});var Xnt=s($de);h3o=r(Xnt,"pretrained_model_name_or_path"),Xnt.forEach(t),p3o=r(j0,":"),j0.forEach(t),_3o=i(aa),z=n(aa,"UL",{});var W=s(z);Ku=n(W,"LI",{});var ALe=s(Ku);kde=n(ALe,"STRONG",{});var znt=s(kde);u3o=r(znt,"bart"),znt.forEach(t),b3o=r(ALe," \u2014 "),Ej=n(ALe,"A",{href:!0});var Wnt=s(Ej);v3o=r(Wnt,"BartForCausalLM"),Wnt.forEach(t),F3o=r(ALe," (BART model)"),ALe.forEach(t),T3o=i(W),Zu=n(W,"LI",{});var yLe=s(Zu);Sde=n(yLe,"STRONG",{});var Qnt=s(Sde);M3o=r(Qnt,"bert"),Qnt.forEach(t),E3o=r(yLe," \u2014 "),Cj=n(yLe,"A",{href:!0});var Hnt=s(Cj);C3o=r(Hnt,"BertLMHeadModel"),Hnt.forEach(t),w3o=r(yLe," (BERT model)"),yLe.forEach(t),A3o=i(W),e2=n(W,"LI",{});var LLe=s(e2);Rde=n(LLe,"STRONG",{});var Unt=s(Rde);y3o=r(Unt,"bert-generation"),Unt.forEach(t),L3o=r(LLe," \u2014 "),wj=n(LLe,"A",{href:!0});var Jnt=s(wj);x3o=r(Jnt,"BertGenerationDecoder"),Jnt.forEach(t),$3o=r(LLe," (Bert Generation model)"),LLe.forEach(t),k3o=i(W),o2=n(W,"LI",{});var xLe=s(o2);Pde=n(xLe,"STRONG",{});var Ynt=s(Pde);S3o=r(Ynt,"big_bird"),Ynt.forEach(t),R3o=r(xLe," \u2014 "),Aj=n(xLe,"A",{href:!0});var Knt=s(Aj);P3o=r(Knt,"BigBirdForCausalLM"),Knt.forEach(t),B3o=r(xLe," (BigBird model)"),xLe.forEach(t),I3o=i(W),r2=n(W,"LI",{});var $Le=s(r2);Bde=n($Le,"STRONG",{});var Znt=s(Bde);N3o=r(Znt,"bigbird_pegasus"),Znt.forEach(t),q3o=r($Le," \u2014 "),yj=n($Le,"A",{href:!0});var est=s(yj);j3o=r(est,"BigBirdPegasusForCausalLM"),est.forEach(t),D3o=r($Le," (BigBirdPegasus model)"),$Le.forEach(t),G3o=i(W),t2=n(W,"LI",{});var kLe=s(t2);Ide=n(kLe,"STRONG",{});var ost=s(Ide);O3o=r(ost,"blenderbot"),ost.forEach(t),V3o=r(kLe," \u2014 "),Lj=n(kLe,"A",{href:!0});var rst=s(Lj);X3o=r(rst,"BlenderbotForCausalLM"),rst.forEach(t),z3o=r(kLe," (Blenderbot model)"),kLe.forEach(t),W3o=i(W),a2=n(W,"LI",{});var SLe=s(a2);Nde=n(SLe,"STRONG",{});var tst=s(Nde);Q3o=r(tst,"blenderbot-small"),tst.forEach(t),H3o=r(SLe," \u2014 "),xj=n(SLe,"A",{href:!0});var ast=s(xj);U3o=r(ast,"BlenderbotSmallForCausalLM"),ast.forEach(t),J3o=r(SLe," (BlenderbotSmall model)"),SLe.forEach(t),Y3o=i(W),n2=n(W,"LI",{});var RLe=s(n2);qde=n(RLe,"STRONG",{});var nst=s(qde);K3o=r(nst,"camembert"),nst.forEach(t),Z3o=r(RLe," \u2014 "),$j=n(RLe,"A",{href:!0});var sst=s($j);ewo=r(sst,"CamembertForCausalLM"),sst.forEach(t),owo=r(RLe," (CamemBERT model)"),RLe.forEach(t),rwo=i(W),s2=n(W,"LI",{});var PLe=s(s2);jde=n(PLe,"STRONG",{});var lst=s(jde);two=r(lst,"ctrl"),lst.forEach(t),awo=r(PLe," \u2014 "),kj=n(PLe,"A",{href:!0});var ist=s(kj);nwo=r(ist,"CTRLLMHeadModel"),ist.forEach(t),swo=r(PLe," (CTRL model)"),PLe.forEach(t),lwo=i(W),l2=n(W,"LI",{});var BLe=s(l2);Dde=n(BLe,"STRONG",{});var dst=s(Dde);iwo=r(dst,"data2vec-text"),dst.forEach(t),dwo=r(BLe," \u2014 "),Sj=n(BLe,"A",{href:!0});var cst=s(Sj);cwo=r(cst,"Data2VecTextForCausalLM"),cst.forEach(t),fwo=r(BLe," (Data2VecText model)"),BLe.forEach(t),mwo=i(W),i2=n(W,"LI",{});var ILe=s(i2);Gde=n(ILe,"STRONG",{});var fst=s(Gde);gwo=r(fst,"electra"),fst.forEach(t),hwo=r(ILe," \u2014 "),Rj=n(ILe,"A",{href:!0});var mst=s(Rj);pwo=r(mst,"ElectraForCausalLM"),mst.forEach(t),_wo=r(ILe," (ELECTRA model)"),ILe.forEach(t),uwo=i(W),d2=n(W,"LI",{});var NLe=s(d2);Ode=n(NLe,"STRONG",{});var gst=s(Ode);bwo=r(gst,"gpt2"),gst.forEach(t),vwo=r(NLe," \u2014 "),Pj=n(NLe,"A",{href:!0});var hst=s(Pj);Fwo=r(hst,"GPT2LMHeadModel"),hst.forEach(t),Two=r(NLe," (OpenAI GPT-2 model)"),NLe.forEach(t),Mwo=i(W),c2=n(W,"LI",{});var qLe=s(c2);Vde=n(qLe,"STRONG",{});var pst=s(Vde);Ewo=r(pst,"gpt_neo"),pst.forEach(t),Cwo=r(qLe," \u2014 "),Bj=n(qLe,"A",{href:!0});var _st=s(Bj);wwo=r(_st,"GPTNeoForCausalLM"),_st.forEach(t),Awo=r(qLe," (GPT Neo model)"),qLe.forEach(t),ywo=i(W),f2=n(W,"LI",{});var jLe=s(f2);Xde=n(jLe,"STRONG",{});var ust=s(Xde);Lwo=r(ust,"gpt_neox"),ust.forEach(t),xwo=r(jLe," \u2014 "),Ij=n(jLe,"A",{href:!0});var bst=s(Ij);$wo=r(bst,"GPTNeoXForCausalLM"),bst.forEach(t),kwo=r(jLe," (GPT NeoX model)"),jLe.forEach(t),Swo=i(W),m2=n(W,"LI",{});var DLe=s(m2);zde=n(DLe,"STRONG",{});var vst=s(zde);Rwo=r(vst,"gptj"),vst.forEach(t),Pwo=r(DLe," \u2014 "),Nj=n(DLe,"A",{href:!0});var Fst=s(Nj);Bwo=r(Fst,"GPTJForCausalLM"),Fst.forEach(t),Iwo=r(DLe," (GPT-J model)"),DLe.forEach(t),Nwo=i(W),g2=n(W,"LI",{});var GLe=s(g2);Wde=n(GLe,"STRONG",{});var Tst=s(Wde);qwo=r(Tst,"marian"),Tst.forEach(t),jwo=r(GLe," \u2014 "),qj=n(GLe,"A",{href:!0});var Mst=s(qj);Dwo=r(Mst,"MarianForCausalLM"),Mst.forEach(t),Gwo=r(GLe," (Marian model)"),GLe.forEach(t),Owo=i(W),h2=n(W,"LI",{});var OLe=s(h2);Qde=n(OLe,"STRONG",{});var Est=s(Qde);Vwo=r(Est,"mbart"),Est.forEach(t),Xwo=r(OLe," \u2014 "),jj=n(OLe,"A",{href:!0});var Cst=s(jj);zwo=r(Cst,"MBartForCausalLM"),Cst.forEach(t),Wwo=r(OLe," (mBART model)"),OLe.forEach(t),Qwo=i(W),p2=n(W,"LI",{});var VLe=s(p2);Hde=n(VLe,"STRONG",{});var wst=s(Hde);Hwo=r(wst,"megatron-bert"),wst.forEach(t),Uwo=r(VLe," \u2014 "),Dj=n(VLe,"A",{href:!0});var Ast=s(Dj);Jwo=r(Ast,"MegatronBertForCausalLM"),Ast.forEach(t),Ywo=r(VLe," (MegatronBert model)"),VLe.forEach(t),Kwo=i(W),_2=n(W,"LI",{});var XLe=s(_2);Ude=n(XLe,"STRONG",{});var yst=s(Ude);Zwo=r(yst,"openai-gpt"),yst.forEach(t),e0o=r(XLe," \u2014 "),Gj=n(XLe,"A",{href:!0});var Lst=s(Gj);o0o=r(Lst,"OpenAIGPTLMHeadModel"),Lst.forEach(t),r0o=r(XLe," (OpenAI GPT model)"),XLe.forEach(t),t0o=i(W),u2=n(W,"LI",{});var zLe=s(u2);Jde=n(zLe,"STRONG",{});var xst=s(Jde);a0o=r(xst,"opt"),xst.forEach(t),n0o=r(zLe," \u2014 "),Oj=n(zLe,"A",{href:!0});var $st=s(Oj);s0o=r($st,"OPTForCausalLM"),$st.forEach(t),l0o=r(zLe," (OPT model)"),zLe.forEach(t),i0o=i(W),b2=n(W,"LI",{});var WLe=s(b2);Yde=n(WLe,"STRONG",{});var kst=s(Yde);d0o=r(kst,"pegasus"),kst.forEach(t),c0o=r(WLe," \u2014 "),Vj=n(WLe,"A",{href:!0});var Sst=s(Vj);f0o=r(Sst,"PegasusForCausalLM"),Sst.forEach(t),m0o=r(WLe," (Pegasus model)"),WLe.forEach(t),g0o=i(W),v2=n(W,"LI",{});var QLe=s(v2);Kde=n(QLe,"STRONG",{});var Rst=s(Kde);h0o=r(Rst,"plbart"),Rst.forEach(t),p0o=r(QLe," \u2014 "),Xj=n(QLe,"A",{href:!0});var Pst=s(Xj);_0o=r(Pst,"PLBartForCausalLM"),Pst.forEach(t),u0o=r(QLe," (PLBart model)"),QLe.forEach(t),b0o=i(W),F2=n(W,"LI",{});var HLe=s(F2);Zde=n(HLe,"STRONG",{});var Bst=s(Zde);v0o=r(Bst,"prophetnet"),Bst.forEach(t),F0o=r(HLe," \u2014 "),zj=n(HLe,"A",{href:!0});var Ist=s(zj);T0o=r(Ist,"ProphetNetForCausalLM"),Ist.forEach(t),M0o=r(HLe," (ProphetNet model)"),HLe.forEach(t),E0o=i(W),T2=n(W,"LI",{});var ULe=s(T2);ece=n(ULe,"STRONG",{});var Nst=s(ece);C0o=r(Nst,"qdqbert"),Nst.forEach(t),w0o=r(ULe," \u2014 "),Wj=n(ULe,"A",{href:!0});var qst=s(Wj);A0o=r(qst,"QDQBertLMHeadModel"),qst.forEach(t),y0o=r(ULe," (QDQBert model)"),ULe.forEach(t),L0o=i(W),M2=n(W,"LI",{});var JLe=s(M2);oce=n(JLe,"STRONG",{});var jst=s(oce);x0o=r(jst,"reformer"),jst.forEach(t),$0o=r(JLe," \u2014 "),Qj=n(JLe,"A",{href:!0});var Dst=s(Qj);k0o=r(Dst,"ReformerModelWithLMHead"),Dst.forEach(t),S0o=r(JLe," (Reformer model)"),JLe.forEach(t),R0o=i(W),E2=n(W,"LI",{});var YLe=s(E2);rce=n(YLe,"STRONG",{});var Gst=s(rce);P0o=r(Gst,"rembert"),Gst.forEach(t),B0o=r(YLe," \u2014 "),Hj=n(YLe,"A",{href:!0});var Ost=s(Hj);I0o=r(Ost,"RemBertForCausalLM"),Ost.forEach(t),N0o=r(YLe," (RemBERT model)"),YLe.forEach(t),q0o=i(W),C2=n(W,"LI",{});var KLe=s(C2);tce=n(KLe,"STRONG",{});var Vst=s(tce);j0o=r(Vst,"roberta"),Vst.forEach(t),D0o=r(KLe," \u2014 "),Uj=n(KLe,"A",{href:!0});var Xst=s(Uj);G0o=r(Xst,"RobertaForCausalLM"),Xst.forEach(t),O0o=r(KLe," (RoBERTa model)"),KLe.forEach(t),V0o=i(W),w2=n(W,"LI",{});var ZLe=s(w2);ace=n(ZLe,"STRONG",{});var zst=s(ace);X0o=r(zst,"roformer"),zst.forEach(t),z0o=r(ZLe," \u2014 "),Jj=n(ZLe,"A",{href:!0});var Wst=s(Jj);W0o=r(Wst,"RoFormerForCausalLM"),Wst.forEach(t),Q0o=r(ZLe," (RoFormer model)"),ZLe.forEach(t),H0o=i(W),A2=n(W,"LI",{});var e8e=s(A2);nce=n(e8e,"STRONG",{});var Qst=s(nce);U0o=r(Qst,"speech_to_text_2"),Qst.forEach(t),J0o=r(e8e," \u2014 "),Yj=n(e8e,"A",{href:!0});var Hst=s(Yj);Y0o=r(Hst,"Speech2Text2ForCausalLM"),Hst.forEach(t),K0o=r(e8e," (Speech2Text2 model)"),e8e.forEach(t),Z0o=i(W),y2=n(W,"LI",{});var o8e=s(y2);sce=n(o8e,"STRONG",{});var Ust=s(sce);e6o=r(Ust,"transfo-xl"),Ust.forEach(t),o6o=r(o8e," \u2014 "),Kj=n(o8e,"A",{href:!0});var Jst=s(Kj);r6o=r(Jst,"TransfoXLLMHeadModel"),Jst.forEach(t),t6o=r(o8e," (Transformer-XL model)"),o8e.forEach(t),a6o=i(W),L2=n(W,"LI",{});var r8e=s(L2);lce=n(r8e,"STRONG",{});var Yst=s(lce);n6o=r(Yst,"trocr"),Yst.forEach(t),s6o=r(r8e," \u2014 "),Zj=n(r8e,"A",{href:!0});var Kst=s(Zj);l6o=r(Kst,"TrOCRForCausalLM"),Kst.forEach(t),i6o=r(r8e," (TrOCR model)"),r8e.forEach(t),d6o=i(W),x2=n(W,"LI",{});var t8e=s(x2);ice=n(t8e,"STRONG",{});var Zst=s(ice);c6o=r(Zst,"xglm"),Zst.forEach(t),f6o=r(t8e," \u2014 "),eD=n(t8e,"A",{href:!0});var elt=s(eD);m6o=r(elt,"XGLMForCausalLM"),elt.forEach(t),g6o=r(t8e," (XGLM model)"),t8e.forEach(t),h6o=i(W),$2=n(W,"LI",{});var a8e=s($2);dce=n(a8e,"STRONG",{});var olt=s(dce);p6o=r(olt,"xlm"),olt.forEach(t),_6o=r(a8e," \u2014 "),oD=n(a8e,"A",{href:!0});var rlt=s(oD);u6o=r(rlt,"XLMWithLMHeadModel"),rlt.forEach(t),b6o=r(a8e," (XLM model)"),a8e.forEach(t),v6o=i(W),k2=n(W,"LI",{});var n8e=s(k2);cce=n(n8e,"STRONG",{});var tlt=s(cce);F6o=r(tlt,"xlm-prophetnet"),tlt.forEach(t),T6o=r(n8e," \u2014 "),rD=n(n8e,"A",{href:!0});var alt=s(rD);M6o=r(alt,"XLMProphetNetForCausalLM"),alt.forEach(t),E6o=r(n8e," (XLMProphetNet model)"),n8e.forEach(t),C6o=i(W),S2=n(W,"LI",{});var s8e=s(S2);fce=n(s8e,"STRONG",{});var nlt=s(fce);w6o=r(nlt,"xlm-roberta"),nlt.forEach(t),A6o=r(s8e," \u2014 "),tD=n(s8e,"A",{href:!0});var slt=s(tD);y6o=r(slt,"XLMRobertaForCausalLM"),slt.forEach(t),L6o=r(s8e," (XLM-RoBERTa model)"),s8e.forEach(t),x6o=i(W),R2=n(W,"LI",{});var l8e=s(R2);mce=n(l8e,"STRONG",{});var llt=s(mce);$6o=r(llt,"xlm-roberta-xl"),llt.forEach(t),k6o=r(l8e," \u2014 "),aD=n(l8e,"A",{href:!0});var ilt=s(aD);S6o=r(ilt,"XLMRobertaXLForCausalLM"),ilt.forEach(t),R6o=r(l8e," (XLM-RoBERTa-XL model)"),l8e.forEach(t),P6o=i(W),P2=n(W,"LI",{});var i8e=s(P2);gce=n(i8e,"STRONG",{});var dlt=s(gce);B6o=r(dlt,"xlnet"),dlt.forEach(t),I6o=r(i8e," \u2014 "),nD=n(i8e,"A",{href:!0});var clt=s(nD);N6o=r(clt,"XLNetLMHeadModel"),clt.forEach(t),q6o=r(i8e," (XLNet model)"),i8e.forEach(t),W.forEach(t),j6o=i(aa),B2=n(aa,"P",{});var d8e=s(B2);D6o=r(d8e,"The model is set in evaluation mode by default using "),hce=n(d8e,"CODE",{});var flt=s(hce);G6o=r(flt,"model.eval()"),flt.forEach(t),O6o=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pce=n(d8e,"CODE",{});var mlt=s(pce);V6o=r(mlt,"model.train()"),mlt.forEach(t),d8e.forEach(t),X6o=i(aa),T(I2.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),wqe=i(f),Bi=n(f,"H2",{class:!0});var xDe=s(Bi);N2=n(xDe,"A",{id:!0,class:!0,href:!0});var glt=s(N2);_ce=n(glt,"SPAN",{});var hlt=s(_ce);T(_y.$$.fragment,hlt),hlt.forEach(t),glt.forEach(t),z6o=i(xDe),uce=n(xDe,"SPAN",{});var plt=s(uce);W6o=r(plt,"AutoModelForMaskedLM"),plt.forEach(t),xDe.forEach(t),Aqe=i(f),ko=n(f,"DIV",{class:!0});var Xs=s(ko);T(uy.$$.fragment,Xs),Q6o=i(Xs),Ii=n(Xs,"P",{});var wZ=s(Ii);H6o=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sD=n(wZ,"A",{href:!0});var _lt=s(sD);U6o=r(_lt,"from_pretrained()"),_lt.forEach(t),J6o=r(wZ," class method or the "),lD=n(wZ,"A",{href:!0});var ult=s(lD);Y6o=r(ult,"from_config()"),ult.forEach(t),K6o=r(wZ,` class
method.`),wZ.forEach(t),Z6o=i(Xs),by=n(Xs,"P",{});var $De=s(by);eAo=r($De,"This class cannot be instantiated directly using "),bce=n($De,"CODE",{});var blt=s(bce);oAo=r(blt,"__init__()"),blt.forEach(t),rAo=r($De," (throws an error)."),$De.forEach(t),tAo=i(Xs),lt=n(Xs,"DIV",{class:!0});var D0=s(lt);T(vy.$$.fragment,D0),aAo=i(D0),vce=n(D0,"P",{});var vlt=s(vce);nAo=r(vlt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vlt.forEach(t),sAo=i(D0),Ni=n(D0,"P",{});var AZ=s(Ni);lAo=r(AZ,`Note:
Loading a model from its configuration file does `),Fce=n(AZ,"STRONG",{});var Flt=s(Fce);iAo=r(Flt,"not"),Flt.forEach(t),dAo=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iD=n(AZ,"A",{href:!0});var Tlt=s(iD);cAo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),fAo=r(AZ," to load the model weights."),AZ.forEach(t),mAo=i(D0),T(q2.$$.fragment,D0),D0.forEach(t),gAo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var na=s(Ze);T(Fy.$$.fragment,na),hAo=i(na),Tce=n(na,"P",{});var Mlt=s(Tce);pAo=r(Mlt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Mlt.forEach(t),_Ao=i(na),Sa=n(na,"P",{});var G0=s(Sa);uAo=r(G0,"The model class to instantiate is selected based on the "),Mce=n(G0,"CODE",{});var Elt=s(Mce);bAo=r(Elt,"model_type"),Elt.forEach(t),vAo=r(G0,` property of the config object (either
passed as an argument or loaded from `),Ece=n(G0,"CODE",{});var Clt=s(Ece);FAo=r(Clt,"pretrained_model_name_or_path"),Clt.forEach(t),TAo=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cce=n(G0,"CODE",{});var wlt=s(Cce);MAo=r(wlt,"pretrained_model_name_or_path"),wlt.forEach(t),EAo=r(G0,":"),G0.forEach(t),CAo=i(na),Q=n(na,"UL",{});var U=s(Q);j2=n(U,"LI",{});var c8e=s(j2);wce=n(c8e,"STRONG",{});var Alt=s(wce);wAo=r(Alt,"albert"),Alt.forEach(t),AAo=r(c8e," \u2014 "),dD=n(c8e,"A",{href:!0});var ylt=s(dD);yAo=r(ylt,"AlbertForMaskedLM"),ylt.forEach(t),LAo=r(c8e," (ALBERT model)"),c8e.forEach(t),xAo=i(U),D2=n(U,"LI",{});var f8e=s(D2);Ace=n(f8e,"STRONG",{});var Llt=s(Ace);$Ao=r(Llt,"bart"),Llt.forEach(t),kAo=r(f8e," \u2014 "),cD=n(f8e,"A",{href:!0});var xlt=s(cD);SAo=r(xlt,"BartForConditionalGeneration"),xlt.forEach(t),RAo=r(f8e," (BART model)"),f8e.forEach(t),PAo=i(U),G2=n(U,"LI",{});var m8e=s(G2);yce=n(m8e,"STRONG",{});var $lt=s(yce);BAo=r($lt,"bert"),$lt.forEach(t),IAo=r(m8e," \u2014 "),fD=n(m8e,"A",{href:!0});var klt=s(fD);NAo=r(klt,"BertForMaskedLM"),klt.forEach(t),qAo=r(m8e," (BERT model)"),m8e.forEach(t),jAo=i(U),O2=n(U,"LI",{});var g8e=s(O2);Lce=n(g8e,"STRONG",{});var Slt=s(Lce);DAo=r(Slt,"big_bird"),Slt.forEach(t),GAo=r(g8e," \u2014 "),mD=n(g8e,"A",{href:!0});var Rlt=s(mD);OAo=r(Rlt,"BigBirdForMaskedLM"),Rlt.forEach(t),VAo=r(g8e," (BigBird model)"),g8e.forEach(t),XAo=i(U),V2=n(U,"LI",{});var h8e=s(V2);xce=n(h8e,"STRONG",{});var Plt=s(xce);zAo=r(Plt,"camembert"),Plt.forEach(t),WAo=r(h8e," \u2014 "),gD=n(h8e,"A",{href:!0});var Blt=s(gD);QAo=r(Blt,"CamembertForMaskedLM"),Blt.forEach(t),HAo=r(h8e," (CamemBERT model)"),h8e.forEach(t),UAo=i(U),X2=n(U,"LI",{});var p8e=s(X2);$ce=n(p8e,"STRONG",{});var Ilt=s($ce);JAo=r(Ilt,"convbert"),Ilt.forEach(t),YAo=r(p8e," \u2014 "),hD=n(p8e,"A",{href:!0});var Nlt=s(hD);KAo=r(Nlt,"ConvBertForMaskedLM"),Nlt.forEach(t),ZAo=r(p8e," (ConvBERT model)"),p8e.forEach(t),eyo=i(U),z2=n(U,"LI",{});var _8e=s(z2);kce=n(_8e,"STRONG",{});var qlt=s(kce);oyo=r(qlt,"data2vec-text"),qlt.forEach(t),ryo=r(_8e," \u2014 "),pD=n(_8e,"A",{href:!0});var jlt=s(pD);tyo=r(jlt,"Data2VecTextForMaskedLM"),jlt.forEach(t),ayo=r(_8e," (Data2VecText model)"),_8e.forEach(t),nyo=i(U),W2=n(U,"LI",{});var u8e=s(W2);Sce=n(u8e,"STRONG",{});var Dlt=s(Sce);syo=r(Dlt,"deberta"),Dlt.forEach(t),lyo=r(u8e," \u2014 "),_D=n(u8e,"A",{href:!0});var Glt=s(_D);iyo=r(Glt,"DebertaForMaskedLM"),Glt.forEach(t),dyo=r(u8e," (DeBERTa model)"),u8e.forEach(t),cyo=i(U),Q2=n(U,"LI",{});var b8e=s(Q2);Rce=n(b8e,"STRONG",{});var Olt=s(Rce);fyo=r(Olt,"deberta-v2"),Olt.forEach(t),myo=r(b8e," \u2014 "),uD=n(b8e,"A",{href:!0});var Vlt=s(uD);gyo=r(Vlt,"DebertaV2ForMaskedLM"),Vlt.forEach(t),hyo=r(b8e," (DeBERTa-v2 model)"),b8e.forEach(t),pyo=i(U),H2=n(U,"LI",{});var v8e=s(H2);Pce=n(v8e,"STRONG",{});var Xlt=s(Pce);_yo=r(Xlt,"distilbert"),Xlt.forEach(t),uyo=r(v8e," \u2014 "),bD=n(v8e,"A",{href:!0});var zlt=s(bD);byo=r(zlt,"DistilBertForMaskedLM"),zlt.forEach(t),vyo=r(v8e," (DistilBERT model)"),v8e.forEach(t),Fyo=i(U),U2=n(U,"LI",{});var F8e=s(U2);Bce=n(F8e,"STRONG",{});var Wlt=s(Bce);Tyo=r(Wlt,"electra"),Wlt.forEach(t),Myo=r(F8e," \u2014 "),vD=n(F8e,"A",{href:!0});var Qlt=s(vD);Eyo=r(Qlt,"ElectraForMaskedLM"),Qlt.forEach(t),Cyo=r(F8e," (ELECTRA model)"),F8e.forEach(t),wyo=i(U),J2=n(U,"LI",{});var T8e=s(J2);Ice=n(T8e,"STRONG",{});var Hlt=s(Ice);Ayo=r(Hlt,"flaubert"),Hlt.forEach(t),yyo=r(T8e," \u2014 "),FD=n(T8e,"A",{href:!0});var Ult=s(FD);Lyo=r(Ult,"FlaubertWithLMHeadModel"),Ult.forEach(t),xyo=r(T8e," (FlauBERT model)"),T8e.forEach(t),$yo=i(U),Y2=n(U,"LI",{});var M8e=s(Y2);Nce=n(M8e,"STRONG",{});var Jlt=s(Nce);kyo=r(Jlt,"fnet"),Jlt.forEach(t),Syo=r(M8e," \u2014 "),TD=n(M8e,"A",{href:!0});var Ylt=s(TD);Ryo=r(Ylt,"FNetForMaskedLM"),Ylt.forEach(t),Pyo=r(M8e," (FNet model)"),M8e.forEach(t),Byo=i(U),K2=n(U,"LI",{});var E8e=s(K2);qce=n(E8e,"STRONG",{});var Klt=s(qce);Iyo=r(Klt,"funnel"),Klt.forEach(t),Nyo=r(E8e," \u2014 "),MD=n(E8e,"A",{href:!0});var Zlt=s(MD);qyo=r(Zlt,"FunnelForMaskedLM"),Zlt.forEach(t),jyo=r(E8e," (Funnel Transformer model)"),E8e.forEach(t),Dyo=i(U),Z2=n(U,"LI",{});var C8e=s(Z2);jce=n(C8e,"STRONG",{});var eit=s(jce);Gyo=r(eit,"ibert"),eit.forEach(t),Oyo=r(C8e," \u2014 "),ED=n(C8e,"A",{href:!0});var oit=s(ED);Vyo=r(oit,"IBertForMaskedLM"),oit.forEach(t),Xyo=r(C8e," (I-BERT model)"),C8e.forEach(t),zyo=i(U),e1=n(U,"LI",{});var w8e=s(e1);Dce=n(w8e,"STRONG",{});var rit=s(Dce);Wyo=r(rit,"layoutlm"),rit.forEach(t),Qyo=r(w8e," \u2014 "),CD=n(w8e,"A",{href:!0});var tit=s(CD);Hyo=r(tit,"LayoutLMForMaskedLM"),tit.forEach(t),Uyo=r(w8e," (LayoutLM model)"),w8e.forEach(t),Jyo=i(U),o1=n(U,"LI",{});var A8e=s(o1);Gce=n(A8e,"STRONG",{});var ait=s(Gce);Yyo=r(ait,"longformer"),ait.forEach(t),Kyo=r(A8e," \u2014 "),wD=n(A8e,"A",{href:!0});var nit=s(wD);Zyo=r(nit,"LongformerForMaskedLM"),nit.forEach(t),eLo=r(A8e," (Longformer model)"),A8e.forEach(t),oLo=i(U),r1=n(U,"LI",{});var y8e=s(r1);Oce=n(y8e,"STRONG",{});var sit=s(Oce);rLo=r(sit,"mbart"),sit.forEach(t),tLo=r(y8e," \u2014 "),AD=n(y8e,"A",{href:!0});var lit=s(AD);aLo=r(lit,"MBartForConditionalGeneration"),lit.forEach(t),nLo=r(y8e," (mBART model)"),y8e.forEach(t),sLo=i(U),t1=n(U,"LI",{});var L8e=s(t1);Vce=n(L8e,"STRONG",{});var iit=s(Vce);lLo=r(iit,"megatron-bert"),iit.forEach(t),iLo=r(L8e," \u2014 "),yD=n(L8e,"A",{href:!0});var dit=s(yD);dLo=r(dit,"MegatronBertForMaskedLM"),dit.forEach(t),cLo=r(L8e," (MegatronBert model)"),L8e.forEach(t),fLo=i(U),a1=n(U,"LI",{});var x8e=s(a1);Xce=n(x8e,"STRONG",{});var cit=s(Xce);mLo=r(cit,"mobilebert"),cit.forEach(t),gLo=r(x8e," \u2014 "),LD=n(x8e,"A",{href:!0});var fit=s(LD);hLo=r(fit,"MobileBertForMaskedLM"),fit.forEach(t),pLo=r(x8e," (MobileBERT model)"),x8e.forEach(t),_Lo=i(U),n1=n(U,"LI",{});var $8e=s(n1);zce=n($8e,"STRONG",{});var mit=s(zce);uLo=r(mit,"mpnet"),mit.forEach(t),bLo=r($8e," \u2014 "),xD=n($8e,"A",{href:!0});var git=s(xD);vLo=r(git,"MPNetForMaskedLM"),git.forEach(t),FLo=r($8e," (MPNet model)"),$8e.forEach(t),TLo=i(U),s1=n(U,"LI",{});var k8e=s(s1);Wce=n(k8e,"STRONG",{});var hit=s(Wce);MLo=r(hit,"nystromformer"),hit.forEach(t),ELo=r(k8e," \u2014 "),$D=n(k8e,"A",{href:!0});var pit=s($D);CLo=r(pit,"NystromformerForMaskedLM"),pit.forEach(t),wLo=r(k8e," (Nystromformer model)"),k8e.forEach(t),ALo=i(U),l1=n(U,"LI",{});var S8e=s(l1);Qce=n(S8e,"STRONG",{});var _it=s(Qce);yLo=r(_it,"perceiver"),_it.forEach(t),LLo=r(S8e," \u2014 "),kD=n(S8e,"A",{href:!0});var uit=s(kD);xLo=r(uit,"PerceiverForMaskedLM"),uit.forEach(t),$Lo=r(S8e," (Perceiver model)"),S8e.forEach(t),kLo=i(U),i1=n(U,"LI",{});var R8e=s(i1);Hce=n(R8e,"STRONG",{});var bit=s(Hce);SLo=r(bit,"qdqbert"),bit.forEach(t),RLo=r(R8e," \u2014 "),SD=n(R8e,"A",{href:!0});var vit=s(SD);PLo=r(vit,"QDQBertForMaskedLM"),vit.forEach(t),BLo=r(R8e," (QDQBert model)"),R8e.forEach(t),ILo=i(U),d1=n(U,"LI",{});var P8e=s(d1);Uce=n(P8e,"STRONG",{});var Fit=s(Uce);NLo=r(Fit,"reformer"),Fit.forEach(t),qLo=r(P8e," \u2014 "),RD=n(P8e,"A",{href:!0});var Tit=s(RD);jLo=r(Tit,"ReformerForMaskedLM"),Tit.forEach(t),DLo=r(P8e," (Reformer model)"),P8e.forEach(t),GLo=i(U),c1=n(U,"LI",{});var B8e=s(c1);Jce=n(B8e,"STRONG",{});var Mit=s(Jce);OLo=r(Mit,"rembert"),Mit.forEach(t),VLo=r(B8e," \u2014 "),PD=n(B8e,"A",{href:!0});var Eit=s(PD);XLo=r(Eit,"RemBertForMaskedLM"),Eit.forEach(t),zLo=r(B8e," (RemBERT model)"),B8e.forEach(t),WLo=i(U),f1=n(U,"LI",{});var I8e=s(f1);Yce=n(I8e,"STRONG",{});var Cit=s(Yce);QLo=r(Cit,"roberta"),Cit.forEach(t),HLo=r(I8e," \u2014 "),BD=n(I8e,"A",{href:!0});var wit=s(BD);ULo=r(wit,"RobertaForMaskedLM"),wit.forEach(t),JLo=r(I8e," (RoBERTa model)"),I8e.forEach(t),YLo=i(U),m1=n(U,"LI",{});var N8e=s(m1);Kce=n(N8e,"STRONG",{});var Ait=s(Kce);KLo=r(Ait,"roformer"),Ait.forEach(t),ZLo=r(N8e," \u2014 "),ID=n(N8e,"A",{href:!0});var yit=s(ID);e8o=r(yit,"RoFormerForMaskedLM"),yit.forEach(t),o8o=r(N8e," (RoFormer model)"),N8e.forEach(t),r8o=i(U),g1=n(U,"LI",{});var q8e=s(g1);Zce=n(q8e,"STRONG",{});var Lit=s(Zce);t8o=r(Lit,"squeezebert"),Lit.forEach(t),a8o=r(q8e," \u2014 "),ND=n(q8e,"A",{href:!0});var xit=s(ND);n8o=r(xit,"SqueezeBertForMaskedLM"),xit.forEach(t),s8o=r(q8e," (SqueezeBERT model)"),q8e.forEach(t),l8o=i(U),h1=n(U,"LI",{});var j8e=s(h1);efe=n(j8e,"STRONG",{});var $it=s(efe);i8o=r($it,"tapas"),$it.forEach(t),d8o=r(j8e," \u2014 "),qD=n(j8e,"A",{href:!0});var kit=s(qD);c8o=r(kit,"TapasForMaskedLM"),kit.forEach(t),f8o=r(j8e," (TAPAS model)"),j8e.forEach(t),m8o=i(U),p1=n(U,"LI",{});var D8e=s(p1);ofe=n(D8e,"STRONG",{});var Sit=s(ofe);g8o=r(Sit,"wav2vec2"),Sit.forEach(t),h8o=r(D8e," \u2014 "),rfe=n(D8e,"CODE",{});var Rit=s(rfe);p8o=r(Rit,"Wav2Vec2ForMaskedLM"),Rit.forEach(t),_8o=r(D8e," (Wav2Vec2 model)"),D8e.forEach(t),u8o=i(U),_1=n(U,"LI",{});var G8e=s(_1);tfe=n(G8e,"STRONG",{});var Pit=s(tfe);b8o=r(Pit,"xlm"),Pit.forEach(t),v8o=r(G8e," \u2014 "),jD=n(G8e,"A",{href:!0});var Bit=s(jD);F8o=r(Bit,"XLMWithLMHeadModel"),Bit.forEach(t),T8o=r(G8e," (XLM model)"),G8e.forEach(t),M8o=i(U),u1=n(U,"LI",{});var O8e=s(u1);afe=n(O8e,"STRONG",{});var Iit=s(afe);E8o=r(Iit,"xlm-roberta"),Iit.forEach(t),C8o=r(O8e," \u2014 "),DD=n(O8e,"A",{href:!0});var Nit=s(DD);w8o=r(Nit,"XLMRobertaForMaskedLM"),Nit.forEach(t),A8o=r(O8e," (XLM-RoBERTa model)"),O8e.forEach(t),y8o=i(U),b1=n(U,"LI",{});var V8e=s(b1);nfe=n(V8e,"STRONG",{});var qit=s(nfe);L8o=r(qit,"xlm-roberta-xl"),qit.forEach(t),x8o=r(V8e," \u2014 "),GD=n(V8e,"A",{href:!0});var jit=s(GD);$8o=r(jit,"XLMRobertaXLForMaskedLM"),jit.forEach(t),k8o=r(V8e," (XLM-RoBERTa-XL model)"),V8e.forEach(t),S8o=i(U),v1=n(U,"LI",{});var X8e=s(v1);sfe=n(X8e,"STRONG",{});var Dit=s(sfe);R8o=r(Dit,"yoso"),Dit.forEach(t),P8o=r(X8e," \u2014 "),OD=n(X8e,"A",{href:!0});var Git=s(OD);B8o=r(Git,"YosoForMaskedLM"),Git.forEach(t),I8o=r(X8e," (YOSO model)"),X8e.forEach(t),U.forEach(t),N8o=i(na),F1=n(na,"P",{});var z8e=s(F1);q8o=r(z8e,"The model is set in evaluation mode by default using "),lfe=n(z8e,"CODE",{});var Oit=s(lfe);j8o=r(Oit,"model.eval()"),Oit.forEach(t),D8o=r(z8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(z8e,"CODE",{});var Vit=s(ife);G8o=r(Vit,"model.train()"),Vit.forEach(t),z8e.forEach(t),O8o=i(na),T(T1.$$.fragment,na),na.forEach(t),Xs.forEach(t),yqe=i(f),qi=n(f,"H2",{class:!0});var kDe=s(qi);M1=n(kDe,"A",{id:!0,class:!0,href:!0});var Xit=s(M1);dfe=n(Xit,"SPAN",{});var zit=s(dfe);T(Ty.$$.fragment,zit),zit.forEach(t),Xit.forEach(t),V8o=i(kDe),cfe=n(kDe,"SPAN",{});var Wit=s(cfe);X8o=r(Wit,"AutoModelForSeq2SeqLM"),Wit.forEach(t),kDe.forEach(t),Lqe=i(f),So=n(f,"DIV",{class:!0});var zs=s(So);T(My.$$.fragment,zs),z8o=i(zs),ji=n(zs,"P",{});var yZ=s(ji);W8o=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),VD=n(yZ,"A",{href:!0});var Qit=s(VD);Q8o=r(Qit,"from_pretrained()"),Qit.forEach(t),H8o=r(yZ," class method or the "),XD=n(yZ,"A",{href:!0});var Hit=s(XD);U8o=r(Hit,"from_config()"),Hit.forEach(t),J8o=r(yZ,` class
method.`),yZ.forEach(t),Y8o=i(zs),Ey=n(zs,"P",{});var SDe=s(Ey);K8o=r(SDe,"This class cannot be instantiated directly using "),ffe=n(SDe,"CODE",{});var Uit=s(ffe);Z8o=r(Uit,"__init__()"),Uit.forEach(t),e9o=r(SDe," (throws an error)."),SDe.forEach(t),o9o=i(zs),it=n(zs,"DIV",{class:!0});var O0=s(it);T(Cy.$$.fragment,O0),r9o=i(O0),mfe=n(O0,"P",{});var Jit=s(mfe);t9o=r(Jit,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jit.forEach(t),a9o=i(O0),Di=n(O0,"P",{});var LZ=s(Di);n9o=r(LZ,`Note:
Loading a model from its configuration file does `),gfe=n(LZ,"STRONG",{});var Yit=s(gfe);s9o=r(Yit,"not"),Yit.forEach(t),l9o=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zD=n(LZ,"A",{href:!0});var Kit=s(zD);i9o=r(Kit,"from_pretrained()"),Kit.forEach(t),d9o=r(LZ," to load the model weights."),LZ.forEach(t),c9o=i(O0),T(E1.$$.fragment,O0),O0.forEach(t),f9o=i(zs),eo=n(zs,"DIV",{class:!0});var sa=s(eo);T(wy.$$.fragment,sa),m9o=i(sa),hfe=n(sa,"P",{});var Zit=s(hfe);g9o=r(Zit,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zit.forEach(t),h9o=i(sa),Ra=n(sa,"P",{});var V0=s(Ra);p9o=r(V0,"The model class to instantiate is selected based on the "),pfe=n(V0,"CODE",{});var edt=s(pfe);_9o=r(edt,"model_type"),edt.forEach(t),u9o=r(V0,` property of the config object (either
passed as an argument or loaded from `),_fe=n(V0,"CODE",{});var odt=s(_fe);b9o=r(odt,"pretrained_model_name_or_path"),odt.forEach(t),v9o=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ufe=n(V0,"CODE",{});var rdt=s(ufe);F9o=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),T9o=r(V0,":"),V0.forEach(t),M9o=i(sa),_e=n(sa,"UL",{});var ve=s(_e);C1=n(ve,"LI",{});var W8e=s(C1);bfe=n(W8e,"STRONG",{});var tdt=s(bfe);E9o=r(tdt,"bart"),tdt.forEach(t),C9o=r(W8e," \u2014 "),WD=n(W8e,"A",{href:!0});var adt=s(WD);w9o=r(adt,"BartForConditionalGeneration"),adt.forEach(t),A9o=r(W8e," (BART model)"),W8e.forEach(t),y9o=i(ve),w1=n(ve,"LI",{});var Q8e=s(w1);vfe=n(Q8e,"STRONG",{});var ndt=s(vfe);L9o=r(ndt,"bigbird_pegasus"),ndt.forEach(t),x9o=r(Q8e," \u2014 "),QD=n(Q8e,"A",{href:!0});var sdt=s(QD);$9o=r(sdt,"BigBirdPegasusForConditionalGeneration"),sdt.forEach(t),k9o=r(Q8e," (BigBirdPegasus model)"),Q8e.forEach(t),S9o=i(ve),A1=n(ve,"LI",{});var H8e=s(A1);Ffe=n(H8e,"STRONG",{});var ldt=s(Ffe);R9o=r(ldt,"blenderbot"),ldt.forEach(t),P9o=r(H8e," \u2014 "),HD=n(H8e,"A",{href:!0});var idt=s(HD);B9o=r(idt,"BlenderbotForConditionalGeneration"),idt.forEach(t),I9o=r(H8e," (Blenderbot model)"),H8e.forEach(t),N9o=i(ve),y1=n(ve,"LI",{});var U8e=s(y1);Tfe=n(U8e,"STRONG",{});var ddt=s(Tfe);q9o=r(ddt,"blenderbot-small"),ddt.forEach(t),j9o=r(U8e," \u2014 "),UD=n(U8e,"A",{href:!0});var cdt=s(UD);D9o=r(cdt,"BlenderbotSmallForConditionalGeneration"),cdt.forEach(t),G9o=r(U8e," (BlenderbotSmall model)"),U8e.forEach(t),O9o=i(ve),L1=n(ve,"LI",{});var J8e=s(L1);Mfe=n(J8e,"STRONG",{});var fdt=s(Mfe);V9o=r(fdt,"encoder-decoder"),fdt.forEach(t),X9o=r(J8e," \u2014 "),JD=n(J8e,"A",{href:!0});var mdt=s(JD);z9o=r(mdt,"EncoderDecoderModel"),mdt.forEach(t),W9o=r(J8e," (Encoder decoder model)"),J8e.forEach(t),Q9o=i(ve),x1=n(ve,"LI",{});var Y8e=s(x1);Efe=n(Y8e,"STRONG",{});var gdt=s(Efe);H9o=r(gdt,"fsmt"),gdt.forEach(t),U9o=r(Y8e," \u2014 "),YD=n(Y8e,"A",{href:!0});var hdt=s(YD);J9o=r(hdt,"FSMTForConditionalGeneration"),hdt.forEach(t),Y9o=r(Y8e," (FairSeq Machine-Translation model)"),Y8e.forEach(t),K9o=i(ve),$1=n(ve,"LI",{});var K8e=s($1);Cfe=n(K8e,"STRONG",{});var pdt=s(Cfe);Z9o=r(pdt,"led"),pdt.forEach(t),exo=r(K8e," \u2014 "),KD=n(K8e,"A",{href:!0});var _dt=s(KD);oxo=r(_dt,"LEDForConditionalGeneration"),_dt.forEach(t),rxo=r(K8e," (LED model)"),K8e.forEach(t),txo=i(ve),k1=n(ve,"LI",{});var Z8e=s(k1);wfe=n(Z8e,"STRONG",{});var udt=s(wfe);axo=r(udt,"m2m_100"),udt.forEach(t),nxo=r(Z8e," \u2014 "),ZD=n(Z8e,"A",{href:!0});var bdt=s(ZD);sxo=r(bdt,"M2M100ForConditionalGeneration"),bdt.forEach(t),lxo=r(Z8e," (M2M100 model)"),Z8e.forEach(t),ixo=i(ve),S1=n(ve,"LI",{});var e9e=s(S1);Afe=n(e9e,"STRONG",{});var vdt=s(Afe);dxo=r(vdt,"marian"),vdt.forEach(t),cxo=r(e9e," \u2014 "),eG=n(e9e,"A",{href:!0});var Fdt=s(eG);fxo=r(Fdt,"MarianMTModel"),Fdt.forEach(t),mxo=r(e9e," (Marian model)"),e9e.forEach(t),gxo=i(ve),R1=n(ve,"LI",{});var o9e=s(R1);yfe=n(o9e,"STRONG",{});var Tdt=s(yfe);hxo=r(Tdt,"mbart"),Tdt.forEach(t),pxo=r(o9e," \u2014 "),oG=n(o9e,"A",{href:!0});var Mdt=s(oG);_xo=r(Mdt,"MBartForConditionalGeneration"),Mdt.forEach(t),uxo=r(o9e," (mBART model)"),o9e.forEach(t),bxo=i(ve),P1=n(ve,"LI",{});var r9e=s(P1);Lfe=n(r9e,"STRONG",{});var Edt=s(Lfe);vxo=r(Edt,"mt5"),Edt.forEach(t),Fxo=r(r9e," \u2014 "),rG=n(r9e,"A",{href:!0});var Cdt=s(rG);Txo=r(Cdt,"MT5ForConditionalGeneration"),Cdt.forEach(t),Mxo=r(r9e," (mT5 model)"),r9e.forEach(t),Exo=i(ve),B1=n(ve,"LI",{});var t9e=s(B1);xfe=n(t9e,"STRONG",{});var wdt=s(xfe);Cxo=r(wdt,"pegasus"),wdt.forEach(t),wxo=r(t9e," \u2014 "),tG=n(t9e,"A",{href:!0});var Adt=s(tG);Axo=r(Adt,"PegasusForConditionalGeneration"),Adt.forEach(t),yxo=r(t9e," (Pegasus model)"),t9e.forEach(t),Lxo=i(ve),I1=n(ve,"LI",{});var a9e=s(I1);$fe=n(a9e,"STRONG",{});var ydt=s($fe);xxo=r(ydt,"plbart"),ydt.forEach(t),$xo=r(a9e," \u2014 "),aG=n(a9e,"A",{href:!0});var Ldt=s(aG);kxo=r(Ldt,"PLBartForConditionalGeneration"),Ldt.forEach(t),Sxo=r(a9e," (PLBart model)"),a9e.forEach(t),Rxo=i(ve),N1=n(ve,"LI",{});var n9e=s(N1);kfe=n(n9e,"STRONG",{});var xdt=s(kfe);Pxo=r(xdt,"prophetnet"),xdt.forEach(t),Bxo=r(n9e," \u2014 "),nG=n(n9e,"A",{href:!0});var $dt=s(nG);Ixo=r($dt,"ProphetNetForConditionalGeneration"),$dt.forEach(t),Nxo=r(n9e," (ProphetNet model)"),n9e.forEach(t),qxo=i(ve),q1=n(ve,"LI",{});var s9e=s(q1);Sfe=n(s9e,"STRONG",{});var kdt=s(Sfe);jxo=r(kdt,"t5"),kdt.forEach(t),Dxo=r(s9e," \u2014 "),sG=n(s9e,"A",{href:!0});var Sdt=s(sG);Gxo=r(Sdt,"T5ForConditionalGeneration"),Sdt.forEach(t),Oxo=r(s9e," (T5 model)"),s9e.forEach(t),Vxo=i(ve),j1=n(ve,"LI",{});var l9e=s(j1);Rfe=n(l9e,"STRONG",{});var Rdt=s(Rfe);Xxo=r(Rdt,"xlm-prophetnet"),Rdt.forEach(t),zxo=r(l9e," \u2014 "),lG=n(l9e,"A",{href:!0});var Pdt=s(lG);Wxo=r(Pdt,"XLMProphetNetForConditionalGeneration"),Pdt.forEach(t),Qxo=r(l9e," (XLMProphetNet model)"),l9e.forEach(t),ve.forEach(t),Hxo=i(sa),D1=n(sa,"P",{});var i9e=s(D1);Uxo=r(i9e,"The model is set in evaluation mode by default using "),Pfe=n(i9e,"CODE",{});var Bdt=s(Pfe);Jxo=r(Bdt,"model.eval()"),Bdt.forEach(t),Yxo=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(i9e,"CODE",{});var Idt=s(Bfe);Kxo=r(Idt,"model.train()"),Idt.forEach(t),i9e.forEach(t),Zxo=i(sa),T(G1.$$.fragment,sa),sa.forEach(t),zs.forEach(t),xqe=i(f),Gi=n(f,"H2",{class:!0});var RDe=s(Gi);O1=n(RDe,"A",{id:!0,class:!0,href:!0});var Ndt=s(O1);Ife=n(Ndt,"SPAN",{});var qdt=s(Ife);T(Ay.$$.fragment,qdt),qdt.forEach(t),Ndt.forEach(t),e$o=i(RDe),Nfe=n(RDe,"SPAN",{});var jdt=s(Nfe);o$o=r(jdt,"AutoModelForSequenceClassification"),jdt.forEach(t),RDe.forEach(t),$qe=i(f),Ro=n(f,"DIV",{class:!0});var Ws=s(Ro);T(yy.$$.fragment,Ws),r$o=i(Ws),Oi=n(Ws,"P",{});var xZ=s(Oi);t$o=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iG=n(xZ,"A",{href:!0});var Ddt=s(iG);a$o=r(Ddt,"from_pretrained()"),Ddt.forEach(t),n$o=r(xZ," class method or the "),dG=n(xZ,"A",{href:!0});var Gdt=s(dG);s$o=r(Gdt,"from_config()"),Gdt.forEach(t),l$o=r(xZ,` class
method.`),xZ.forEach(t),i$o=i(Ws),Ly=n(Ws,"P",{});var PDe=s(Ly);d$o=r(PDe,"This class cannot be instantiated directly using "),qfe=n(PDe,"CODE",{});var Odt=s(qfe);c$o=r(Odt,"__init__()"),Odt.forEach(t),f$o=r(PDe," (throws an error)."),PDe.forEach(t),m$o=i(Ws),dt=n(Ws,"DIV",{class:!0});var X0=s(dt);T(xy.$$.fragment,X0),g$o=i(X0),jfe=n(X0,"P",{});var Vdt=s(jfe);h$o=r(Vdt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Vdt.forEach(t),p$o=i(X0),Vi=n(X0,"P",{});var $Z=s(Vi);_$o=r($Z,`Note:
Loading a model from its configuration file does `),Dfe=n($Z,"STRONG",{});var Xdt=s(Dfe);u$o=r(Xdt,"not"),Xdt.forEach(t),b$o=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),cG=n($Z,"A",{href:!0});var zdt=s(cG);v$o=r(zdt,"from_pretrained()"),zdt.forEach(t),F$o=r($Z," to load the model weights."),$Z.forEach(t),T$o=i(X0),T(V1.$$.fragment,X0),X0.forEach(t),M$o=i(Ws),oo=n(Ws,"DIV",{class:!0});var la=s(oo);T($y.$$.fragment,la),E$o=i(la),Gfe=n(la,"P",{});var Wdt=s(Gfe);C$o=r(Wdt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Wdt.forEach(t),w$o=i(la),Pa=n(la,"P",{});var z0=s(Pa);A$o=r(z0,"The model class to instantiate is selected based on the "),Ofe=n(z0,"CODE",{});var Qdt=s(Ofe);y$o=r(Qdt,"model_type"),Qdt.forEach(t),L$o=r(z0,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(z0,"CODE",{});var Hdt=s(Vfe);x$o=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),$$o=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(z0,"CODE",{});var Udt=s(Xfe);k$o=r(Udt,"pretrained_model_name_or_path"),Udt.forEach(t),S$o=r(z0,":"),z0.forEach(t),R$o=i(la),N=n(la,"UL",{});var j=s(N);X1=n(j,"LI",{});var d9e=s(X1);zfe=n(d9e,"STRONG",{});var Jdt=s(zfe);P$o=r(Jdt,"albert"),Jdt.forEach(t),B$o=r(d9e," \u2014 "),fG=n(d9e,"A",{href:!0});var Ydt=s(fG);I$o=r(Ydt,"AlbertForSequenceClassification"),Ydt.forEach(t),N$o=r(d9e," (ALBERT model)"),d9e.forEach(t),q$o=i(j),z1=n(j,"LI",{});var c9e=s(z1);Wfe=n(c9e,"STRONG",{});var Kdt=s(Wfe);j$o=r(Kdt,"bart"),Kdt.forEach(t),D$o=r(c9e," \u2014 "),mG=n(c9e,"A",{href:!0});var Zdt=s(mG);G$o=r(Zdt,"BartForSequenceClassification"),Zdt.forEach(t),O$o=r(c9e," (BART model)"),c9e.forEach(t),V$o=i(j),W1=n(j,"LI",{});var f9e=s(W1);Qfe=n(f9e,"STRONG",{});var ect=s(Qfe);X$o=r(ect,"bert"),ect.forEach(t),z$o=r(f9e," \u2014 "),gG=n(f9e,"A",{href:!0});var oct=s(gG);W$o=r(oct,"BertForSequenceClassification"),oct.forEach(t),Q$o=r(f9e," (BERT model)"),f9e.forEach(t),H$o=i(j),Q1=n(j,"LI",{});var m9e=s(Q1);Hfe=n(m9e,"STRONG",{});var rct=s(Hfe);U$o=r(rct,"big_bird"),rct.forEach(t),J$o=r(m9e," \u2014 "),hG=n(m9e,"A",{href:!0});var tct=s(hG);Y$o=r(tct,"BigBirdForSequenceClassification"),tct.forEach(t),K$o=r(m9e," (BigBird model)"),m9e.forEach(t),Z$o=i(j),H1=n(j,"LI",{});var g9e=s(H1);Ufe=n(g9e,"STRONG",{});var act=s(Ufe);eko=r(act,"bigbird_pegasus"),act.forEach(t),oko=r(g9e," \u2014 "),pG=n(g9e,"A",{href:!0});var nct=s(pG);rko=r(nct,"BigBirdPegasusForSequenceClassification"),nct.forEach(t),tko=r(g9e," (BigBirdPegasus model)"),g9e.forEach(t),ako=i(j),U1=n(j,"LI",{});var h9e=s(U1);Jfe=n(h9e,"STRONG",{});var sct=s(Jfe);nko=r(sct,"camembert"),sct.forEach(t),sko=r(h9e," \u2014 "),_G=n(h9e,"A",{href:!0});var lct=s(_G);lko=r(lct,"CamembertForSequenceClassification"),lct.forEach(t),iko=r(h9e," (CamemBERT model)"),h9e.forEach(t),dko=i(j),J1=n(j,"LI",{});var p9e=s(J1);Yfe=n(p9e,"STRONG",{});var ict=s(Yfe);cko=r(ict,"canine"),ict.forEach(t),fko=r(p9e," \u2014 "),uG=n(p9e,"A",{href:!0});var dct=s(uG);mko=r(dct,"CanineForSequenceClassification"),dct.forEach(t),gko=r(p9e," (Canine model)"),p9e.forEach(t),hko=i(j),Y1=n(j,"LI",{});var _9e=s(Y1);Kfe=n(_9e,"STRONG",{});var cct=s(Kfe);pko=r(cct,"convbert"),cct.forEach(t),_ko=r(_9e," \u2014 "),bG=n(_9e,"A",{href:!0});var fct=s(bG);uko=r(fct,"ConvBertForSequenceClassification"),fct.forEach(t),bko=r(_9e," (ConvBERT model)"),_9e.forEach(t),vko=i(j),K1=n(j,"LI",{});var u9e=s(K1);Zfe=n(u9e,"STRONG",{});var mct=s(Zfe);Fko=r(mct,"ctrl"),mct.forEach(t),Tko=r(u9e," \u2014 "),vG=n(u9e,"A",{href:!0});var gct=s(vG);Mko=r(gct,"CTRLForSequenceClassification"),gct.forEach(t),Eko=r(u9e," (CTRL model)"),u9e.forEach(t),Cko=i(j),Z1=n(j,"LI",{});var b9e=s(Z1);eme=n(b9e,"STRONG",{});var hct=s(eme);wko=r(hct,"data2vec-text"),hct.forEach(t),Ako=r(b9e," \u2014 "),FG=n(b9e,"A",{href:!0});var pct=s(FG);yko=r(pct,"Data2VecTextForSequenceClassification"),pct.forEach(t),Lko=r(b9e," (Data2VecText model)"),b9e.forEach(t),xko=i(j),e7=n(j,"LI",{});var v9e=s(e7);ome=n(v9e,"STRONG",{});var _ct=s(ome);$ko=r(_ct,"deberta"),_ct.forEach(t),kko=r(v9e," \u2014 "),TG=n(v9e,"A",{href:!0});var uct=s(TG);Sko=r(uct,"DebertaForSequenceClassification"),uct.forEach(t),Rko=r(v9e," (DeBERTa model)"),v9e.forEach(t),Pko=i(j),o7=n(j,"LI",{});var F9e=s(o7);rme=n(F9e,"STRONG",{});var bct=s(rme);Bko=r(bct,"deberta-v2"),bct.forEach(t),Iko=r(F9e," \u2014 "),MG=n(F9e,"A",{href:!0});var vct=s(MG);Nko=r(vct,"DebertaV2ForSequenceClassification"),vct.forEach(t),qko=r(F9e," (DeBERTa-v2 model)"),F9e.forEach(t),jko=i(j),r7=n(j,"LI",{});var T9e=s(r7);tme=n(T9e,"STRONG",{});var Fct=s(tme);Dko=r(Fct,"distilbert"),Fct.forEach(t),Gko=r(T9e," \u2014 "),EG=n(T9e,"A",{href:!0});var Tct=s(EG);Oko=r(Tct,"DistilBertForSequenceClassification"),Tct.forEach(t),Vko=r(T9e," (DistilBERT model)"),T9e.forEach(t),Xko=i(j),t7=n(j,"LI",{});var M9e=s(t7);ame=n(M9e,"STRONG",{});var Mct=s(ame);zko=r(Mct,"electra"),Mct.forEach(t),Wko=r(M9e," \u2014 "),CG=n(M9e,"A",{href:!0});var Ect=s(CG);Qko=r(Ect,"ElectraForSequenceClassification"),Ect.forEach(t),Hko=r(M9e," (ELECTRA model)"),M9e.forEach(t),Uko=i(j),a7=n(j,"LI",{});var E9e=s(a7);nme=n(E9e,"STRONG",{});var Cct=s(nme);Jko=r(Cct,"flaubert"),Cct.forEach(t),Yko=r(E9e," \u2014 "),wG=n(E9e,"A",{href:!0});var wct=s(wG);Kko=r(wct,"FlaubertForSequenceClassification"),wct.forEach(t),Zko=r(E9e," (FlauBERT model)"),E9e.forEach(t),eSo=i(j),n7=n(j,"LI",{});var C9e=s(n7);sme=n(C9e,"STRONG",{});var Act=s(sme);oSo=r(Act,"fnet"),Act.forEach(t),rSo=r(C9e," \u2014 "),AG=n(C9e,"A",{href:!0});var yct=s(AG);tSo=r(yct,"FNetForSequenceClassification"),yct.forEach(t),aSo=r(C9e," (FNet model)"),C9e.forEach(t),nSo=i(j),s7=n(j,"LI",{});var w9e=s(s7);lme=n(w9e,"STRONG",{});var Lct=s(lme);sSo=r(Lct,"funnel"),Lct.forEach(t),lSo=r(w9e," \u2014 "),yG=n(w9e,"A",{href:!0});var xct=s(yG);iSo=r(xct,"FunnelForSequenceClassification"),xct.forEach(t),dSo=r(w9e," (Funnel Transformer model)"),w9e.forEach(t),cSo=i(j),l7=n(j,"LI",{});var A9e=s(l7);ime=n(A9e,"STRONG",{});var $ct=s(ime);fSo=r($ct,"gpt2"),$ct.forEach(t),mSo=r(A9e," \u2014 "),LG=n(A9e,"A",{href:!0});var kct=s(LG);gSo=r(kct,"GPT2ForSequenceClassification"),kct.forEach(t),hSo=r(A9e," (OpenAI GPT-2 model)"),A9e.forEach(t),pSo=i(j),i7=n(j,"LI",{});var y9e=s(i7);dme=n(y9e,"STRONG",{});var Sct=s(dme);_So=r(Sct,"gpt_neo"),Sct.forEach(t),uSo=r(y9e," \u2014 "),xG=n(y9e,"A",{href:!0});var Rct=s(xG);bSo=r(Rct,"GPTNeoForSequenceClassification"),Rct.forEach(t),vSo=r(y9e," (GPT Neo model)"),y9e.forEach(t),FSo=i(j),d7=n(j,"LI",{});var L9e=s(d7);cme=n(L9e,"STRONG",{});var Pct=s(cme);TSo=r(Pct,"gptj"),Pct.forEach(t),MSo=r(L9e," \u2014 "),$G=n(L9e,"A",{href:!0});var Bct=s($G);ESo=r(Bct,"GPTJForSequenceClassification"),Bct.forEach(t),CSo=r(L9e," (GPT-J model)"),L9e.forEach(t),wSo=i(j),c7=n(j,"LI",{});var x9e=s(c7);fme=n(x9e,"STRONG",{});var Ict=s(fme);ASo=r(Ict,"ibert"),Ict.forEach(t),ySo=r(x9e," \u2014 "),kG=n(x9e,"A",{href:!0});var Nct=s(kG);LSo=r(Nct,"IBertForSequenceClassification"),Nct.forEach(t),xSo=r(x9e," (I-BERT model)"),x9e.forEach(t),$So=i(j),f7=n(j,"LI",{});var $9e=s(f7);mme=n($9e,"STRONG",{});var qct=s(mme);kSo=r(qct,"layoutlm"),qct.forEach(t),SSo=r($9e," \u2014 "),SG=n($9e,"A",{href:!0});var jct=s(SG);RSo=r(jct,"LayoutLMForSequenceClassification"),jct.forEach(t),PSo=r($9e," (LayoutLM model)"),$9e.forEach(t),BSo=i(j),m7=n(j,"LI",{});var k9e=s(m7);gme=n(k9e,"STRONG",{});var Dct=s(gme);ISo=r(Dct,"layoutlmv2"),Dct.forEach(t),NSo=r(k9e," \u2014 "),RG=n(k9e,"A",{href:!0});var Gct=s(RG);qSo=r(Gct,"LayoutLMv2ForSequenceClassification"),Gct.forEach(t),jSo=r(k9e," (LayoutLMv2 model)"),k9e.forEach(t),DSo=i(j),g7=n(j,"LI",{});var S9e=s(g7);hme=n(S9e,"STRONG",{});var Oct=s(hme);GSo=r(Oct,"layoutlmv3"),Oct.forEach(t),OSo=r(S9e," \u2014 "),PG=n(S9e,"A",{href:!0});var Vct=s(PG);VSo=r(Vct,"LayoutLMv3ForSequenceClassification"),Vct.forEach(t),XSo=r(S9e," (LayoutLMv3 model)"),S9e.forEach(t),zSo=i(j),h7=n(j,"LI",{});var R9e=s(h7);pme=n(R9e,"STRONG",{});var Xct=s(pme);WSo=r(Xct,"led"),Xct.forEach(t),QSo=r(R9e," \u2014 "),BG=n(R9e,"A",{href:!0});var zct=s(BG);HSo=r(zct,"LEDForSequenceClassification"),zct.forEach(t),USo=r(R9e," (LED model)"),R9e.forEach(t),JSo=i(j),p7=n(j,"LI",{});var P9e=s(p7);_me=n(P9e,"STRONG",{});var Wct=s(_me);YSo=r(Wct,"longformer"),Wct.forEach(t),KSo=r(P9e," \u2014 "),IG=n(P9e,"A",{href:!0});var Qct=s(IG);ZSo=r(Qct,"LongformerForSequenceClassification"),Qct.forEach(t),eRo=r(P9e," (Longformer model)"),P9e.forEach(t),oRo=i(j),_7=n(j,"LI",{});var B9e=s(_7);ume=n(B9e,"STRONG",{});var Hct=s(ume);rRo=r(Hct,"mbart"),Hct.forEach(t),tRo=r(B9e," \u2014 "),NG=n(B9e,"A",{href:!0});var Uct=s(NG);aRo=r(Uct,"MBartForSequenceClassification"),Uct.forEach(t),nRo=r(B9e," (mBART model)"),B9e.forEach(t),sRo=i(j),u7=n(j,"LI",{});var I9e=s(u7);bme=n(I9e,"STRONG",{});var Jct=s(bme);lRo=r(Jct,"megatron-bert"),Jct.forEach(t),iRo=r(I9e," \u2014 "),qG=n(I9e,"A",{href:!0});var Yct=s(qG);dRo=r(Yct,"MegatronBertForSequenceClassification"),Yct.forEach(t),cRo=r(I9e," (MegatronBert model)"),I9e.forEach(t),fRo=i(j),b7=n(j,"LI",{});var N9e=s(b7);vme=n(N9e,"STRONG",{});var Kct=s(vme);mRo=r(Kct,"mobilebert"),Kct.forEach(t),gRo=r(N9e," \u2014 "),jG=n(N9e,"A",{href:!0});var Zct=s(jG);hRo=r(Zct,"MobileBertForSequenceClassification"),Zct.forEach(t),pRo=r(N9e," (MobileBERT model)"),N9e.forEach(t),_Ro=i(j),v7=n(j,"LI",{});var q9e=s(v7);Fme=n(q9e,"STRONG",{});var eft=s(Fme);uRo=r(eft,"mpnet"),eft.forEach(t),bRo=r(q9e," \u2014 "),DG=n(q9e,"A",{href:!0});var oft=s(DG);vRo=r(oft,"MPNetForSequenceClassification"),oft.forEach(t),FRo=r(q9e," (MPNet model)"),q9e.forEach(t),TRo=i(j),F7=n(j,"LI",{});var j9e=s(F7);Tme=n(j9e,"STRONG",{});var rft=s(Tme);MRo=r(rft,"nystromformer"),rft.forEach(t),ERo=r(j9e," \u2014 "),GG=n(j9e,"A",{href:!0});var tft=s(GG);CRo=r(tft,"NystromformerForSequenceClassification"),tft.forEach(t),wRo=r(j9e," (Nystromformer model)"),j9e.forEach(t),ARo=i(j),T7=n(j,"LI",{});var D9e=s(T7);Mme=n(D9e,"STRONG",{});var aft=s(Mme);yRo=r(aft,"openai-gpt"),aft.forEach(t),LRo=r(D9e," \u2014 "),OG=n(D9e,"A",{href:!0});var nft=s(OG);xRo=r(nft,"OpenAIGPTForSequenceClassification"),nft.forEach(t),$Ro=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),kRo=i(j),M7=n(j,"LI",{});var G9e=s(M7);Eme=n(G9e,"STRONG",{});var sft=s(Eme);SRo=r(sft,"perceiver"),sft.forEach(t),RRo=r(G9e," \u2014 "),VG=n(G9e,"A",{href:!0});var lft=s(VG);PRo=r(lft,"PerceiverForSequenceClassification"),lft.forEach(t),BRo=r(G9e," (Perceiver model)"),G9e.forEach(t),IRo=i(j),E7=n(j,"LI",{});var O9e=s(E7);Cme=n(O9e,"STRONG",{});var ift=s(Cme);NRo=r(ift,"plbart"),ift.forEach(t),qRo=r(O9e," \u2014 "),XG=n(O9e,"A",{href:!0});var dft=s(XG);jRo=r(dft,"PLBartForSequenceClassification"),dft.forEach(t),DRo=r(O9e," (PLBart model)"),O9e.forEach(t),GRo=i(j),C7=n(j,"LI",{});var V9e=s(C7);wme=n(V9e,"STRONG",{});var cft=s(wme);ORo=r(cft,"qdqbert"),cft.forEach(t),VRo=r(V9e," \u2014 "),zG=n(V9e,"A",{href:!0});var fft=s(zG);XRo=r(fft,"QDQBertForSequenceClassification"),fft.forEach(t),zRo=r(V9e," (QDQBert model)"),V9e.forEach(t),WRo=i(j),w7=n(j,"LI",{});var X9e=s(w7);Ame=n(X9e,"STRONG",{});var mft=s(Ame);QRo=r(mft,"reformer"),mft.forEach(t),HRo=r(X9e," \u2014 "),WG=n(X9e,"A",{href:!0});var gft=s(WG);URo=r(gft,"ReformerForSequenceClassification"),gft.forEach(t),JRo=r(X9e," (Reformer model)"),X9e.forEach(t),YRo=i(j),A7=n(j,"LI",{});var z9e=s(A7);yme=n(z9e,"STRONG",{});var hft=s(yme);KRo=r(hft,"rembert"),hft.forEach(t),ZRo=r(z9e," \u2014 "),QG=n(z9e,"A",{href:!0});var pft=s(QG);ePo=r(pft,"RemBertForSequenceClassification"),pft.forEach(t),oPo=r(z9e," (RemBERT model)"),z9e.forEach(t),rPo=i(j),y7=n(j,"LI",{});var W9e=s(y7);Lme=n(W9e,"STRONG",{});var _ft=s(Lme);tPo=r(_ft,"roberta"),_ft.forEach(t),aPo=r(W9e," \u2014 "),HG=n(W9e,"A",{href:!0});var uft=s(HG);nPo=r(uft,"RobertaForSequenceClassification"),uft.forEach(t),sPo=r(W9e," (RoBERTa model)"),W9e.forEach(t),lPo=i(j),L7=n(j,"LI",{});var Q9e=s(L7);xme=n(Q9e,"STRONG",{});var bft=s(xme);iPo=r(bft,"roformer"),bft.forEach(t),dPo=r(Q9e," \u2014 "),UG=n(Q9e,"A",{href:!0});var vft=s(UG);cPo=r(vft,"RoFormerForSequenceClassification"),vft.forEach(t),fPo=r(Q9e," (RoFormer model)"),Q9e.forEach(t),mPo=i(j),x7=n(j,"LI",{});var H9e=s(x7);$me=n(H9e,"STRONG",{});var Fft=s($me);gPo=r(Fft,"squeezebert"),Fft.forEach(t),hPo=r(H9e," \u2014 "),JG=n(H9e,"A",{href:!0});var Tft=s(JG);pPo=r(Tft,"SqueezeBertForSequenceClassification"),Tft.forEach(t),_Po=r(H9e," (SqueezeBERT model)"),H9e.forEach(t),uPo=i(j),$7=n(j,"LI",{});var U9e=s($7);kme=n(U9e,"STRONG",{});var Mft=s(kme);bPo=r(Mft,"tapas"),Mft.forEach(t),vPo=r(U9e," \u2014 "),YG=n(U9e,"A",{href:!0});var Eft=s(YG);FPo=r(Eft,"TapasForSequenceClassification"),Eft.forEach(t),TPo=r(U9e," (TAPAS model)"),U9e.forEach(t),MPo=i(j),k7=n(j,"LI",{});var J9e=s(k7);Sme=n(J9e,"STRONG",{});var Cft=s(Sme);EPo=r(Cft,"transfo-xl"),Cft.forEach(t),CPo=r(J9e," \u2014 "),KG=n(J9e,"A",{href:!0});var wft=s(KG);wPo=r(wft,"TransfoXLForSequenceClassification"),wft.forEach(t),APo=r(J9e," (Transformer-XL model)"),J9e.forEach(t),yPo=i(j),S7=n(j,"LI",{});var Y9e=s(S7);Rme=n(Y9e,"STRONG",{});var Aft=s(Rme);LPo=r(Aft,"xlm"),Aft.forEach(t),xPo=r(Y9e," \u2014 "),ZG=n(Y9e,"A",{href:!0});var yft=s(ZG);$Po=r(yft,"XLMForSequenceClassification"),yft.forEach(t),kPo=r(Y9e," (XLM model)"),Y9e.forEach(t),SPo=i(j),R7=n(j,"LI",{});var K9e=s(R7);Pme=n(K9e,"STRONG",{});var Lft=s(Pme);RPo=r(Lft,"xlm-roberta"),Lft.forEach(t),PPo=r(K9e," \u2014 "),eO=n(K9e,"A",{href:!0});var xft=s(eO);BPo=r(xft,"XLMRobertaForSequenceClassification"),xft.forEach(t),IPo=r(K9e," (XLM-RoBERTa model)"),K9e.forEach(t),NPo=i(j),P7=n(j,"LI",{});var Z9e=s(P7);Bme=n(Z9e,"STRONG",{});var $ft=s(Bme);qPo=r($ft,"xlm-roberta-xl"),$ft.forEach(t),jPo=r(Z9e," \u2014 "),oO=n(Z9e,"A",{href:!0});var kft=s(oO);DPo=r(kft,"XLMRobertaXLForSequenceClassification"),kft.forEach(t),GPo=r(Z9e," (XLM-RoBERTa-XL model)"),Z9e.forEach(t),OPo=i(j),B7=n(j,"LI",{});var exe=s(B7);Ime=n(exe,"STRONG",{});var Sft=s(Ime);VPo=r(Sft,"xlnet"),Sft.forEach(t),XPo=r(exe," \u2014 "),rO=n(exe,"A",{href:!0});var Rft=s(rO);zPo=r(Rft,"XLNetForSequenceClassification"),Rft.forEach(t),WPo=r(exe," (XLNet model)"),exe.forEach(t),QPo=i(j),I7=n(j,"LI",{});var oxe=s(I7);Nme=n(oxe,"STRONG",{});var Pft=s(Nme);HPo=r(Pft,"yoso"),Pft.forEach(t),UPo=r(oxe," \u2014 "),tO=n(oxe,"A",{href:!0});var Bft=s(tO);JPo=r(Bft,"YosoForSequenceClassification"),Bft.forEach(t),YPo=r(oxe," (YOSO model)"),oxe.forEach(t),j.forEach(t),KPo=i(la),N7=n(la,"P",{});var rxe=s(N7);ZPo=r(rxe,"The model is set in evaluation mode by default using "),qme=n(rxe,"CODE",{});var Ift=s(qme);eBo=r(Ift,"model.eval()"),Ift.forEach(t),oBo=r(rxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jme=n(rxe,"CODE",{});var Nft=s(jme);rBo=r(Nft,"model.train()"),Nft.forEach(t),rxe.forEach(t),tBo=i(la),T(q7.$$.fragment,la),la.forEach(t),Ws.forEach(t),kqe=i(f),Xi=n(f,"H2",{class:!0});var BDe=s(Xi);j7=n(BDe,"A",{id:!0,class:!0,href:!0});var qft=s(j7);Dme=n(qft,"SPAN",{});var jft=s(Dme);T(ky.$$.fragment,jft),jft.forEach(t),qft.forEach(t),aBo=i(BDe),Gme=n(BDe,"SPAN",{});var Dft=s(Gme);nBo=r(Dft,"AutoModelForMultipleChoice"),Dft.forEach(t),BDe.forEach(t),Sqe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Sy.$$.fragment,Qs),sBo=i(Qs),zi=n(Qs,"P",{});var kZ=s(zi);lBo=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aO=n(kZ,"A",{href:!0});var Gft=s(aO);iBo=r(Gft,"from_pretrained()"),Gft.forEach(t),dBo=r(kZ," class method or the "),nO=n(kZ,"A",{href:!0});var Oft=s(nO);cBo=r(Oft,"from_config()"),Oft.forEach(t),fBo=r(kZ,` class
method.`),kZ.forEach(t),mBo=i(Qs),Ry=n(Qs,"P",{});var IDe=s(Ry);gBo=r(IDe,"This class cannot be instantiated directly using "),Ome=n(IDe,"CODE",{});var Vft=s(Ome);hBo=r(Vft,"__init__()"),Vft.forEach(t),pBo=r(IDe," (throws an error)."),IDe.forEach(t),_Bo=i(Qs),ct=n(Qs,"DIV",{class:!0});var W0=s(ct);T(Py.$$.fragment,W0),uBo=i(W0),Vme=n(W0,"P",{});var Xft=s(Vme);bBo=r(Xft,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Xft.forEach(t),vBo=i(W0),Wi=n(W0,"P",{});var SZ=s(Wi);FBo=r(SZ,`Note:
Loading a model from its configuration file does `),Xme=n(SZ,"STRONG",{});var zft=s(Xme);TBo=r(zft,"not"),zft.forEach(t),MBo=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(SZ,"A",{href:!0});var Wft=s(sO);EBo=r(Wft,"from_pretrained()"),Wft.forEach(t),CBo=r(SZ," to load the model weights."),SZ.forEach(t),wBo=i(W0),T(D7.$$.fragment,W0),W0.forEach(t),ABo=i(Qs),ro=n(Qs,"DIV",{class:!0});var ia=s(ro);T(By.$$.fragment,ia),yBo=i(ia),zme=n(ia,"P",{});var Qft=s(zme);LBo=r(Qft,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Qft.forEach(t),xBo=i(ia),Ba=n(ia,"P",{});var Q0=s(Ba);$Bo=r(Q0,"The model class to instantiate is selected based on the "),Wme=n(Q0,"CODE",{});var Hft=s(Wme);kBo=r(Hft,"model_type"),Hft.forEach(t),SBo=r(Q0,` property of the config object (either
passed as an argument or loaded from `),Qme=n(Q0,"CODE",{});var Uft=s(Qme);RBo=r(Uft,"pretrained_model_name_or_path"),Uft.forEach(t),PBo=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hme=n(Q0,"CODE",{});var Jft=s(Hme);BBo=r(Jft,"pretrained_model_name_or_path"),Jft.forEach(t),IBo=r(Q0,":"),Q0.forEach(t),NBo=i(ia),K=n(ia,"UL",{});var ee=s(K);G7=n(ee,"LI",{});var txe=s(G7);Ume=n(txe,"STRONG",{});var Yft=s(Ume);qBo=r(Yft,"albert"),Yft.forEach(t),jBo=r(txe," \u2014 "),lO=n(txe,"A",{href:!0});var Kft=s(lO);DBo=r(Kft,"AlbertForMultipleChoice"),Kft.forEach(t),GBo=r(txe," (ALBERT model)"),txe.forEach(t),OBo=i(ee),O7=n(ee,"LI",{});var axe=s(O7);Jme=n(axe,"STRONG",{});var Zft=s(Jme);VBo=r(Zft,"bert"),Zft.forEach(t),XBo=r(axe," \u2014 "),iO=n(axe,"A",{href:!0});var emt=s(iO);zBo=r(emt,"BertForMultipleChoice"),emt.forEach(t),WBo=r(axe," (BERT model)"),axe.forEach(t),QBo=i(ee),V7=n(ee,"LI",{});var nxe=s(V7);Yme=n(nxe,"STRONG",{});var omt=s(Yme);HBo=r(omt,"big_bird"),omt.forEach(t),UBo=r(nxe," \u2014 "),dO=n(nxe,"A",{href:!0});var rmt=s(dO);JBo=r(rmt,"BigBirdForMultipleChoice"),rmt.forEach(t),YBo=r(nxe," (BigBird model)"),nxe.forEach(t),KBo=i(ee),X7=n(ee,"LI",{});var sxe=s(X7);Kme=n(sxe,"STRONG",{});var tmt=s(Kme);ZBo=r(tmt,"camembert"),tmt.forEach(t),eIo=r(sxe," \u2014 "),cO=n(sxe,"A",{href:!0});var amt=s(cO);oIo=r(amt,"CamembertForMultipleChoice"),amt.forEach(t),rIo=r(sxe," (CamemBERT model)"),sxe.forEach(t),tIo=i(ee),z7=n(ee,"LI",{});var lxe=s(z7);Zme=n(lxe,"STRONG",{});var nmt=s(Zme);aIo=r(nmt,"canine"),nmt.forEach(t),nIo=r(lxe," \u2014 "),fO=n(lxe,"A",{href:!0});var smt=s(fO);sIo=r(smt,"CanineForMultipleChoice"),smt.forEach(t),lIo=r(lxe," (Canine model)"),lxe.forEach(t),iIo=i(ee),W7=n(ee,"LI",{});var ixe=s(W7);ege=n(ixe,"STRONG",{});var lmt=s(ege);dIo=r(lmt,"convbert"),lmt.forEach(t),cIo=r(ixe," \u2014 "),mO=n(ixe,"A",{href:!0});var imt=s(mO);fIo=r(imt,"ConvBertForMultipleChoice"),imt.forEach(t),mIo=r(ixe," (ConvBERT model)"),ixe.forEach(t),gIo=i(ee),Q7=n(ee,"LI",{});var dxe=s(Q7);oge=n(dxe,"STRONG",{});var dmt=s(oge);hIo=r(dmt,"data2vec-text"),dmt.forEach(t),pIo=r(dxe," \u2014 "),gO=n(dxe,"A",{href:!0});var cmt=s(gO);_Io=r(cmt,"Data2VecTextForMultipleChoice"),cmt.forEach(t),uIo=r(dxe," (Data2VecText model)"),dxe.forEach(t),bIo=i(ee),H7=n(ee,"LI",{});var cxe=s(H7);rge=n(cxe,"STRONG",{});var fmt=s(rge);vIo=r(fmt,"deberta-v2"),fmt.forEach(t),FIo=r(cxe," \u2014 "),hO=n(cxe,"A",{href:!0});var mmt=s(hO);TIo=r(mmt,"DebertaV2ForMultipleChoice"),mmt.forEach(t),MIo=r(cxe," (DeBERTa-v2 model)"),cxe.forEach(t),EIo=i(ee),U7=n(ee,"LI",{});var fxe=s(U7);tge=n(fxe,"STRONG",{});var gmt=s(tge);CIo=r(gmt,"distilbert"),gmt.forEach(t),wIo=r(fxe," \u2014 "),pO=n(fxe,"A",{href:!0});var hmt=s(pO);AIo=r(hmt,"DistilBertForMultipleChoice"),hmt.forEach(t),yIo=r(fxe," (DistilBERT model)"),fxe.forEach(t),LIo=i(ee),J7=n(ee,"LI",{});var mxe=s(J7);age=n(mxe,"STRONG",{});var pmt=s(age);xIo=r(pmt,"electra"),pmt.forEach(t),$Io=r(mxe," \u2014 "),_O=n(mxe,"A",{href:!0});var _mt=s(_O);kIo=r(_mt,"ElectraForMultipleChoice"),_mt.forEach(t),SIo=r(mxe," (ELECTRA model)"),mxe.forEach(t),RIo=i(ee),Y7=n(ee,"LI",{});var gxe=s(Y7);nge=n(gxe,"STRONG",{});var umt=s(nge);PIo=r(umt,"flaubert"),umt.forEach(t),BIo=r(gxe," \u2014 "),uO=n(gxe,"A",{href:!0});var bmt=s(uO);IIo=r(bmt,"FlaubertForMultipleChoice"),bmt.forEach(t),NIo=r(gxe," (FlauBERT model)"),gxe.forEach(t),qIo=i(ee),K7=n(ee,"LI",{});var hxe=s(K7);sge=n(hxe,"STRONG",{});var vmt=s(sge);jIo=r(vmt,"fnet"),vmt.forEach(t),DIo=r(hxe," \u2014 "),bO=n(hxe,"A",{href:!0});var Fmt=s(bO);GIo=r(Fmt,"FNetForMultipleChoice"),Fmt.forEach(t),OIo=r(hxe," (FNet model)"),hxe.forEach(t),VIo=i(ee),Z7=n(ee,"LI",{});var pxe=s(Z7);lge=n(pxe,"STRONG",{});var Tmt=s(lge);XIo=r(Tmt,"funnel"),Tmt.forEach(t),zIo=r(pxe," \u2014 "),vO=n(pxe,"A",{href:!0});var Mmt=s(vO);WIo=r(Mmt,"FunnelForMultipleChoice"),Mmt.forEach(t),QIo=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),HIo=i(ee),eb=n(ee,"LI",{});var _xe=s(eb);ige=n(_xe,"STRONG",{});var Emt=s(ige);UIo=r(Emt,"ibert"),Emt.forEach(t),JIo=r(_xe," \u2014 "),FO=n(_xe,"A",{href:!0});var Cmt=s(FO);YIo=r(Cmt,"IBertForMultipleChoice"),Cmt.forEach(t),KIo=r(_xe," (I-BERT model)"),_xe.forEach(t),ZIo=i(ee),ob=n(ee,"LI",{});var uxe=s(ob);dge=n(uxe,"STRONG",{});var wmt=s(dge);eNo=r(wmt,"longformer"),wmt.forEach(t),oNo=r(uxe," \u2014 "),TO=n(uxe,"A",{href:!0});var Amt=s(TO);rNo=r(Amt,"LongformerForMultipleChoice"),Amt.forEach(t),tNo=r(uxe," (Longformer model)"),uxe.forEach(t),aNo=i(ee),rb=n(ee,"LI",{});var bxe=s(rb);cge=n(bxe,"STRONG",{});var ymt=s(cge);nNo=r(ymt,"megatron-bert"),ymt.forEach(t),sNo=r(bxe," \u2014 "),MO=n(bxe,"A",{href:!0});var Lmt=s(MO);lNo=r(Lmt,"MegatronBertForMultipleChoice"),Lmt.forEach(t),iNo=r(bxe," (MegatronBert model)"),bxe.forEach(t),dNo=i(ee),tb=n(ee,"LI",{});var vxe=s(tb);fge=n(vxe,"STRONG",{});var xmt=s(fge);cNo=r(xmt,"mobilebert"),xmt.forEach(t),fNo=r(vxe," \u2014 "),EO=n(vxe,"A",{href:!0});var $mt=s(EO);mNo=r($mt,"MobileBertForMultipleChoice"),$mt.forEach(t),gNo=r(vxe," (MobileBERT model)"),vxe.forEach(t),hNo=i(ee),ab=n(ee,"LI",{});var Fxe=s(ab);mge=n(Fxe,"STRONG",{});var kmt=s(mge);pNo=r(kmt,"mpnet"),kmt.forEach(t),_No=r(Fxe," \u2014 "),CO=n(Fxe,"A",{href:!0});var Smt=s(CO);uNo=r(Smt,"MPNetForMultipleChoice"),Smt.forEach(t),bNo=r(Fxe," (MPNet model)"),Fxe.forEach(t),vNo=i(ee),nb=n(ee,"LI",{});var Txe=s(nb);gge=n(Txe,"STRONG",{});var Rmt=s(gge);FNo=r(Rmt,"nystromformer"),Rmt.forEach(t),TNo=r(Txe," \u2014 "),wO=n(Txe,"A",{href:!0});var Pmt=s(wO);MNo=r(Pmt,"NystromformerForMultipleChoice"),Pmt.forEach(t),ENo=r(Txe," (Nystromformer model)"),Txe.forEach(t),CNo=i(ee),sb=n(ee,"LI",{});var Mxe=s(sb);hge=n(Mxe,"STRONG",{});var Bmt=s(hge);wNo=r(Bmt,"qdqbert"),Bmt.forEach(t),ANo=r(Mxe," \u2014 "),AO=n(Mxe,"A",{href:!0});var Imt=s(AO);yNo=r(Imt,"QDQBertForMultipleChoice"),Imt.forEach(t),LNo=r(Mxe," (QDQBert model)"),Mxe.forEach(t),xNo=i(ee),lb=n(ee,"LI",{});var Exe=s(lb);pge=n(Exe,"STRONG",{});var Nmt=s(pge);$No=r(Nmt,"rembert"),Nmt.forEach(t),kNo=r(Exe," \u2014 "),yO=n(Exe,"A",{href:!0});var qmt=s(yO);SNo=r(qmt,"RemBertForMultipleChoice"),qmt.forEach(t),RNo=r(Exe," (RemBERT model)"),Exe.forEach(t),PNo=i(ee),ib=n(ee,"LI",{});var Cxe=s(ib);_ge=n(Cxe,"STRONG",{});var jmt=s(_ge);BNo=r(jmt,"roberta"),jmt.forEach(t),INo=r(Cxe," \u2014 "),LO=n(Cxe,"A",{href:!0});var Dmt=s(LO);NNo=r(Dmt,"RobertaForMultipleChoice"),Dmt.forEach(t),qNo=r(Cxe," (RoBERTa model)"),Cxe.forEach(t),jNo=i(ee),db=n(ee,"LI",{});var wxe=s(db);uge=n(wxe,"STRONG",{});var Gmt=s(uge);DNo=r(Gmt,"roformer"),Gmt.forEach(t),GNo=r(wxe," \u2014 "),xO=n(wxe,"A",{href:!0});var Omt=s(xO);ONo=r(Omt,"RoFormerForMultipleChoice"),Omt.forEach(t),VNo=r(wxe," (RoFormer model)"),wxe.forEach(t),XNo=i(ee),cb=n(ee,"LI",{});var Axe=s(cb);bge=n(Axe,"STRONG",{});var Vmt=s(bge);zNo=r(Vmt,"squeezebert"),Vmt.forEach(t),WNo=r(Axe," \u2014 "),$O=n(Axe,"A",{href:!0});var Xmt=s($O);QNo=r(Xmt,"SqueezeBertForMultipleChoice"),Xmt.forEach(t),HNo=r(Axe," (SqueezeBERT model)"),Axe.forEach(t),UNo=i(ee),fb=n(ee,"LI",{});var yxe=s(fb);vge=n(yxe,"STRONG",{});var zmt=s(vge);JNo=r(zmt,"xlm"),zmt.forEach(t),YNo=r(yxe," \u2014 "),kO=n(yxe,"A",{href:!0});var Wmt=s(kO);KNo=r(Wmt,"XLMForMultipleChoice"),Wmt.forEach(t),ZNo=r(yxe," (XLM model)"),yxe.forEach(t),eqo=i(ee),mb=n(ee,"LI",{});var Lxe=s(mb);Fge=n(Lxe,"STRONG",{});var Qmt=s(Fge);oqo=r(Qmt,"xlm-roberta"),Qmt.forEach(t),rqo=r(Lxe," \u2014 "),SO=n(Lxe,"A",{href:!0});var Hmt=s(SO);tqo=r(Hmt,"XLMRobertaForMultipleChoice"),Hmt.forEach(t),aqo=r(Lxe," (XLM-RoBERTa model)"),Lxe.forEach(t),nqo=i(ee),gb=n(ee,"LI",{});var xxe=s(gb);Tge=n(xxe,"STRONG",{});var Umt=s(Tge);sqo=r(Umt,"xlm-roberta-xl"),Umt.forEach(t),lqo=r(xxe," \u2014 "),RO=n(xxe,"A",{href:!0});var Jmt=s(RO);iqo=r(Jmt,"XLMRobertaXLForMultipleChoice"),Jmt.forEach(t),dqo=r(xxe," (XLM-RoBERTa-XL model)"),xxe.forEach(t),cqo=i(ee),hb=n(ee,"LI",{});var $xe=s(hb);Mge=n($xe,"STRONG",{});var Ymt=s(Mge);fqo=r(Ymt,"xlnet"),Ymt.forEach(t),mqo=r($xe," \u2014 "),PO=n($xe,"A",{href:!0});var Kmt=s(PO);gqo=r(Kmt,"XLNetForMultipleChoice"),Kmt.forEach(t),hqo=r($xe," (XLNet model)"),$xe.forEach(t),pqo=i(ee),pb=n(ee,"LI",{});var kxe=s(pb);Ege=n(kxe,"STRONG",{});var Zmt=s(Ege);_qo=r(Zmt,"yoso"),Zmt.forEach(t),uqo=r(kxe," \u2014 "),BO=n(kxe,"A",{href:!0});var egt=s(BO);bqo=r(egt,"YosoForMultipleChoice"),egt.forEach(t),vqo=r(kxe," (YOSO model)"),kxe.forEach(t),ee.forEach(t),Fqo=i(ia),_b=n(ia,"P",{});var Sxe=s(_b);Tqo=r(Sxe,"The model is set in evaluation mode by default using "),Cge=n(Sxe,"CODE",{});var ogt=s(Cge);Mqo=r(ogt,"model.eval()"),ogt.forEach(t),Eqo=r(Sxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(Sxe,"CODE",{});var rgt=s(wge);Cqo=r(rgt,"model.train()"),rgt.forEach(t),Sxe.forEach(t),wqo=i(ia),T(ub.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),Rqe=i(f),Qi=n(f,"H2",{class:!0});var NDe=s(Qi);bb=n(NDe,"A",{id:!0,class:!0,href:!0});var tgt=s(bb);Age=n(tgt,"SPAN",{});var agt=s(Age);T(Iy.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),Aqo=i(NDe),yge=n(NDe,"SPAN",{});var ngt=s(yge);yqo=r(ngt,"AutoModelForNextSentencePrediction"),ngt.forEach(t),NDe.forEach(t),Pqe=i(f),Bo=n(f,"DIV",{class:!0});var Hs=s(Bo);T(Ny.$$.fragment,Hs),Lqo=i(Hs),Hi=n(Hs,"P",{});var RZ=s(Hi);xqo=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),IO=n(RZ,"A",{href:!0});var sgt=s(IO);$qo=r(sgt,"from_pretrained()"),sgt.forEach(t),kqo=r(RZ," class method or the "),NO=n(RZ,"A",{href:!0});var lgt=s(NO);Sqo=r(lgt,"from_config()"),lgt.forEach(t),Rqo=r(RZ,` class
method.`),RZ.forEach(t),Pqo=i(Hs),qy=n(Hs,"P",{});var qDe=s(qy);Bqo=r(qDe,"This class cannot be instantiated directly using "),Lge=n(qDe,"CODE",{});var igt=s(Lge);Iqo=r(igt,"__init__()"),igt.forEach(t),Nqo=r(qDe," (throws an error)."),qDe.forEach(t),qqo=i(Hs),ft=n(Hs,"DIV",{class:!0});var H0=s(ft);T(jy.$$.fragment,H0),jqo=i(H0),xge=n(H0,"P",{});var dgt=s(xge);Dqo=r(dgt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),dgt.forEach(t),Gqo=i(H0),Ui=n(H0,"P",{});var PZ=s(Ui);Oqo=r(PZ,`Note:
Loading a model from its configuration file does `),$ge=n(PZ,"STRONG",{});var cgt=s($ge);Vqo=r(cgt,"not"),cgt.forEach(t),Xqo=r(PZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qO=n(PZ,"A",{href:!0});var fgt=s(qO);zqo=r(fgt,"from_pretrained()"),fgt.forEach(t),Wqo=r(PZ," to load the model weights."),PZ.forEach(t),Qqo=i(H0),T(vb.$$.fragment,H0),H0.forEach(t),Hqo=i(Hs),to=n(Hs,"DIV",{class:!0});var da=s(to);T(Dy.$$.fragment,da),Uqo=i(da),kge=n(da,"P",{});var mgt=s(kge);Jqo=r(mgt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mgt.forEach(t),Yqo=i(da),Ia=n(da,"P",{});var U0=s(Ia);Kqo=r(U0,"The model class to instantiate is selected based on the "),Sge=n(U0,"CODE",{});var ggt=s(Sge);Zqo=r(ggt,"model_type"),ggt.forEach(t),ejo=r(U0,` property of the config object (either
passed as an argument or loaded from `),Rge=n(U0,"CODE",{});var hgt=s(Rge);ojo=r(hgt,"pretrained_model_name_or_path"),hgt.forEach(t),rjo=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(U0,"CODE",{});var pgt=s(Pge);tjo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),ajo=r(U0,":"),U0.forEach(t),njo=i(da),Yr=n(da,"UL",{});var Us=s(Yr);Fb=n(Us,"LI",{});var Rxe=s(Fb);Bge=n(Rxe,"STRONG",{});var _gt=s(Bge);sjo=r(_gt,"bert"),_gt.forEach(t),ljo=r(Rxe," \u2014 "),jO=n(Rxe,"A",{href:!0});var ugt=s(jO);ijo=r(ugt,"BertForNextSentencePrediction"),ugt.forEach(t),djo=r(Rxe," (BERT model)"),Rxe.forEach(t),cjo=i(Us),Tb=n(Us,"LI",{});var Pxe=s(Tb);Ige=n(Pxe,"STRONG",{});var bgt=s(Ige);fjo=r(bgt,"fnet"),bgt.forEach(t),mjo=r(Pxe," \u2014 "),DO=n(Pxe,"A",{href:!0});var vgt=s(DO);gjo=r(vgt,"FNetForNextSentencePrediction"),vgt.forEach(t),hjo=r(Pxe," (FNet model)"),Pxe.forEach(t),pjo=i(Us),Mb=n(Us,"LI",{});var Bxe=s(Mb);Nge=n(Bxe,"STRONG",{});var Fgt=s(Nge);_jo=r(Fgt,"megatron-bert"),Fgt.forEach(t),ujo=r(Bxe," \u2014 "),GO=n(Bxe,"A",{href:!0});var Tgt=s(GO);bjo=r(Tgt,"MegatronBertForNextSentencePrediction"),Tgt.forEach(t),vjo=r(Bxe," (MegatronBert model)"),Bxe.forEach(t),Fjo=i(Us),Eb=n(Us,"LI",{});var Ixe=s(Eb);qge=n(Ixe,"STRONG",{});var Mgt=s(qge);Tjo=r(Mgt,"mobilebert"),Mgt.forEach(t),Mjo=r(Ixe," \u2014 "),OO=n(Ixe,"A",{href:!0});var Egt=s(OO);Ejo=r(Egt,"MobileBertForNextSentencePrediction"),Egt.forEach(t),Cjo=r(Ixe," (MobileBERT model)"),Ixe.forEach(t),wjo=i(Us),Cb=n(Us,"LI",{});var Nxe=s(Cb);jge=n(Nxe,"STRONG",{});var Cgt=s(jge);Ajo=r(Cgt,"qdqbert"),Cgt.forEach(t),yjo=r(Nxe," \u2014 "),VO=n(Nxe,"A",{href:!0});var wgt=s(VO);Ljo=r(wgt,"QDQBertForNextSentencePrediction"),wgt.forEach(t),xjo=r(Nxe," (QDQBert model)"),Nxe.forEach(t),Us.forEach(t),$jo=i(da),wb=n(da,"P",{});var qxe=s(wb);kjo=r(qxe,"The model is set in evaluation mode by default using "),Dge=n(qxe,"CODE",{});var Agt=s(Dge);Sjo=r(Agt,"model.eval()"),Agt.forEach(t),Rjo=r(qxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gge=n(qxe,"CODE",{});var ygt=s(Gge);Pjo=r(ygt,"model.train()"),ygt.forEach(t),qxe.forEach(t),Bjo=i(da),T(Ab.$$.fragment,da),da.forEach(t),Hs.forEach(t),Bqe=i(f),Ji=n(f,"H2",{class:!0});var jDe=s(Ji);yb=n(jDe,"A",{id:!0,class:!0,href:!0});var Lgt=s(yb);Oge=n(Lgt,"SPAN",{});var xgt=s(Oge);T(Gy.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),Ijo=i(jDe),Vge=n(jDe,"SPAN",{});var $gt=s(Vge);Njo=r($gt,"AutoModelForTokenClassification"),$gt.forEach(t),jDe.forEach(t),Iqe=i(f),Io=n(f,"DIV",{class:!0});var Js=s(Io);T(Oy.$$.fragment,Js),qjo=i(Js),Yi=n(Js,"P",{});var BZ=s(Yi);jjo=r(BZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),XO=n(BZ,"A",{href:!0});var kgt=s(XO);Djo=r(kgt,"from_pretrained()"),kgt.forEach(t),Gjo=r(BZ," class method or the "),zO=n(BZ,"A",{href:!0});var Sgt=s(zO);Ojo=r(Sgt,"from_config()"),Sgt.forEach(t),Vjo=r(BZ,` class
method.`),BZ.forEach(t),Xjo=i(Js),Vy=n(Js,"P",{});var DDe=s(Vy);zjo=r(DDe,"This class cannot be instantiated directly using "),Xge=n(DDe,"CODE",{});var Rgt=s(Xge);Wjo=r(Rgt,"__init__()"),Rgt.forEach(t),Qjo=r(DDe," (throws an error)."),DDe.forEach(t),Hjo=i(Js),mt=n(Js,"DIV",{class:!0});var J0=s(mt);T(Xy.$$.fragment,J0),Ujo=i(J0),zge=n(J0,"P",{});var Pgt=s(zge);Jjo=r(Pgt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pgt.forEach(t),Yjo=i(J0),Ki=n(J0,"P",{});var IZ=s(Ki);Kjo=r(IZ,`Note:
Loading a model from its configuration file does `),Wge=n(IZ,"STRONG",{});var Bgt=s(Wge);Zjo=r(Bgt,"not"),Bgt.forEach(t),eDo=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(IZ,"A",{href:!0});var Igt=s(WO);oDo=r(Igt,"from_pretrained()"),Igt.forEach(t),rDo=r(IZ," to load the model weights."),IZ.forEach(t),tDo=i(J0),T(Lb.$$.fragment,J0),J0.forEach(t),aDo=i(Js),ao=n(Js,"DIV",{class:!0});var ca=s(ao);T(zy.$$.fragment,ca),nDo=i(ca),Qge=n(ca,"P",{});var Ngt=s(Qge);sDo=r(Ngt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ngt.forEach(t),lDo=i(ca),Na=n(ca,"P",{});var Y0=s(Na);iDo=r(Y0,"The model class to instantiate is selected based on the "),Hge=n(Y0,"CODE",{});var qgt=s(Hge);dDo=r(qgt,"model_type"),qgt.forEach(t),cDo=r(Y0,` property of the config object (either
passed as an argument or loaded from `),Uge=n(Y0,"CODE",{});var jgt=s(Uge);fDo=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),mDo=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jge=n(Y0,"CODE",{});var Dgt=s(Jge);gDo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),hDo=r(Y0,":"),Y0.forEach(t),pDo=i(ca),H=n(ca,"UL",{});var J=s(H);xb=n(J,"LI",{});var jxe=s(xb);Yge=n(jxe,"STRONG",{});var Ggt=s(Yge);_Do=r(Ggt,"albert"),Ggt.forEach(t),uDo=r(jxe," \u2014 "),QO=n(jxe,"A",{href:!0});var Ogt=s(QO);bDo=r(Ogt,"AlbertForTokenClassification"),Ogt.forEach(t),vDo=r(jxe," (ALBERT model)"),jxe.forEach(t),FDo=i(J),$b=n(J,"LI",{});var Dxe=s($b);Kge=n(Dxe,"STRONG",{});var Vgt=s(Kge);TDo=r(Vgt,"bert"),Vgt.forEach(t),MDo=r(Dxe," \u2014 "),HO=n(Dxe,"A",{href:!0});var Xgt=s(HO);EDo=r(Xgt,"BertForTokenClassification"),Xgt.forEach(t),CDo=r(Dxe," (BERT model)"),Dxe.forEach(t),wDo=i(J),kb=n(J,"LI",{});var Gxe=s(kb);Zge=n(Gxe,"STRONG",{});var zgt=s(Zge);ADo=r(zgt,"big_bird"),zgt.forEach(t),yDo=r(Gxe," \u2014 "),UO=n(Gxe,"A",{href:!0});var Wgt=s(UO);LDo=r(Wgt,"BigBirdForTokenClassification"),Wgt.forEach(t),xDo=r(Gxe," (BigBird model)"),Gxe.forEach(t),$Do=i(J),Sb=n(J,"LI",{});var Oxe=s(Sb);ehe=n(Oxe,"STRONG",{});var Qgt=s(ehe);kDo=r(Qgt,"camembert"),Qgt.forEach(t),SDo=r(Oxe," \u2014 "),JO=n(Oxe,"A",{href:!0});var Hgt=s(JO);RDo=r(Hgt,"CamembertForTokenClassification"),Hgt.forEach(t),PDo=r(Oxe," (CamemBERT model)"),Oxe.forEach(t),BDo=i(J),Rb=n(J,"LI",{});var Vxe=s(Rb);ohe=n(Vxe,"STRONG",{});var Ugt=s(ohe);IDo=r(Ugt,"canine"),Ugt.forEach(t),NDo=r(Vxe," \u2014 "),YO=n(Vxe,"A",{href:!0});var Jgt=s(YO);qDo=r(Jgt,"CanineForTokenClassification"),Jgt.forEach(t),jDo=r(Vxe," (Canine model)"),Vxe.forEach(t),DDo=i(J),Pb=n(J,"LI",{});var Xxe=s(Pb);rhe=n(Xxe,"STRONG",{});var Ygt=s(rhe);GDo=r(Ygt,"convbert"),Ygt.forEach(t),ODo=r(Xxe," \u2014 "),KO=n(Xxe,"A",{href:!0});var Kgt=s(KO);VDo=r(Kgt,"ConvBertForTokenClassification"),Kgt.forEach(t),XDo=r(Xxe," (ConvBERT model)"),Xxe.forEach(t),zDo=i(J),Bb=n(J,"LI",{});var zxe=s(Bb);the=n(zxe,"STRONG",{});var Zgt=s(the);WDo=r(Zgt,"data2vec-text"),Zgt.forEach(t),QDo=r(zxe," \u2014 "),ZO=n(zxe,"A",{href:!0});var eht=s(ZO);HDo=r(eht,"Data2VecTextForTokenClassification"),eht.forEach(t),UDo=r(zxe," (Data2VecText model)"),zxe.forEach(t),JDo=i(J),Ib=n(J,"LI",{});var Wxe=s(Ib);ahe=n(Wxe,"STRONG",{});var oht=s(ahe);YDo=r(oht,"deberta"),oht.forEach(t),KDo=r(Wxe," \u2014 "),eV=n(Wxe,"A",{href:!0});var rht=s(eV);ZDo=r(rht,"DebertaForTokenClassification"),rht.forEach(t),eGo=r(Wxe," (DeBERTa model)"),Wxe.forEach(t),oGo=i(J),Nb=n(J,"LI",{});var Qxe=s(Nb);nhe=n(Qxe,"STRONG",{});var tht=s(nhe);rGo=r(tht,"deberta-v2"),tht.forEach(t),tGo=r(Qxe," \u2014 "),oV=n(Qxe,"A",{href:!0});var aht=s(oV);aGo=r(aht,"DebertaV2ForTokenClassification"),aht.forEach(t),nGo=r(Qxe," (DeBERTa-v2 model)"),Qxe.forEach(t),sGo=i(J),qb=n(J,"LI",{});var Hxe=s(qb);she=n(Hxe,"STRONG",{});var nht=s(she);lGo=r(nht,"distilbert"),nht.forEach(t),iGo=r(Hxe," \u2014 "),rV=n(Hxe,"A",{href:!0});var sht=s(rV);dGo=r(sht,"DistilBertForTokenClassification"),sht.forEach(t),cGo=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),fGo=i(J),jb=n(J,"LI",{});var Uxe=s(jb);lhe=n(Uxe,"STRONG",{});var lht=s(lhe);mGo=r(lht,"electra"),lht.forEach(t),gGo=r(Uxe," \u2014 "),tV=n(Uxe,"A",{href:!0});var iht=s(tV);hGo=r(iht,"ElectraForTokenClassification"),iht.forEach(t),pGo=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),_Go=i(J),Db=n(J,"LI",{});var Jxe=s(Db);ihe=n(Jxe,"STRONG",{});var dht=s(ihe);uGo=r(dht,"flaubert"),dht.forEach(t),bGo=r(Jxe," \u2014 "),aV=n(Jxe,"A",{href:!0});var cht=s(aV);vGo=r(cht,"FlaubertForTokenClassification"),cht.forEach(t),FGo=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),TGo=i(J),Gb=n(J,"LI",{});var Yxe=s(Gb);dhe=n(Yxe,"STRONG",{});var fht=s(dhe);MGo=r(fht,"fnet"),fht.forEach(t),EGo=r(Yxe," \u2014 "),nV=n(Yxe,"A",{href:!0});var mht=s(nV);CGo=r(mht,"FNetForTokenClassification"),mht.forEach(t),wGo=r(Yxe," (FNet model)"),Yxe.forEach(t),AGo=i(J),Ob=n(J,"LI",{});var Kxe=s(Ob);che=n(Kxe,"STRONG",{});var ght=s(che);yGo=r(ght,"funnel"),ght.forEach(t),LGo=r(Kxe," \u2014 "),sV=n(Kxe,"A",{href:!0});var hht=s(sV);xGo=r(hht,"FunnelForTokenClassification"),hht.forEach(t),$Go=r(Kxe," (Funnel Transformer model)"),Kxe.forEach(t),kGo=i(J),Vb=n(J,"LI",{});var Zxe=s(Vb);fhe=n(Zxe,"STRONG",{});var pht=s(fhe);SGo=r(pht,"gpt2"),pht.forEach(t),RGo=r(Zxe," \u2014 "),lV=n(Zxe,"A",{href:!0});var _ht=s(lV);PGo=r(_ht,"GPT2ForTokenClassification"),_ht.forEach(t),BGo=r(Zxe," (OpenAI GPT-2 model)"),Zxe.forEach(t),IGo=i(J),Xb=n(J,"LI",{});var e$e=s(Xb);mhe=n(e$e,"STRONG",{});var uht=s(mhe);NGo=r(uht,"ibert"),uht.forEach(t),qGo=r(e$e," \u2014 "),iV=n(e$e,"A",{href:!0});var bht=s(iV);jGo=r(bht,"IBertForTokenClassification"),bht.forEach(t),DGo=r(e$e," (I-BERT model)"),e$e.forEach(t),GGo=i(J),zb=n(J,"LI",{});var o$e=s(zb);ghe=n(o$e,"STRONG",{});var vht=s(ghe);OGo=r(vht,"layoutlm"),vht.forEach(t),VGo=r(o$e," \u2014 "),dV=n(o$e,"A",{href:!0});var Fht=s(dV);XGo=r(Fht,"LayoutLMForTokenClassification"),Fht.forEach(t),zGo=r(o$e," (LayoutLM model)"),o$e.forEach(t),WGo=i(J),Wb=n(J,"LI",{});var r$e=s(Wb);hhe=n(r$e,"STRONG",{});var Tht=s(hhe);QGo=r(Tht,"layoutlmv2"),Tht.forEach(t),HGo=r(r$e," \u2014 "),cV=n(r$e,"A",{href:!0});var Mht=s(cV);UGo=r(Mht,"LayoutLMv2ForTokenClassification"),Mht.forEach(t),JGo=r(r$e," (LayoutLMv2 model)"),r$e.forEach(t),YGo=i(J),Qb=n(J,"LI",{});var t$e=s(Qb);phe=n(t$e,"STRONG",{});var Eht=s(phe);KGo=r(Eht,"layoutlmv3"),Eht.forEach(t),ZGo=r(t$e," \u2014 "),fV=n(t$e,"A",{href:!0});var Cht=s(fV);eOo=r(Cht,"LayoutLMv3ForTokenClassification"),Cht.forEach(t),oOo=r(t$e," (LayoutLMv3 model)"),t$e.forEach(t),rOo=i(J),Hb=n(J,"LI",{});var a$e=s(Hb);_he=n(a$e,"STRONG",{});var wht=s(_he);tOo=r(wht,"longformer"),wht.forEach(t),aOo=r(a$e," \u2014 "),mV=n(a$e,"A",{href:!0});var Aht=s(mV);nOo=r(Aht,"LongformerForTokenClassification"),Aht.forEach(t),sOo=r(a$e," (Longformer model)"),a$e.forEach(t),lOo=i(J),Ub=n(J,"LI",{});var n$e=s(Ub);uhe=n(n$e,"STRONG",{});var yht=s(uhe);iOo=r(yht,"megatron-bert"),yht.forEach(t),dOo=r(n$e," \u2014 "),gV=n(n$e,"A",{href:!0});var Lht=s(gV);cOo=r(Lht,"MegatronBertForTokenClassification"),Lht.forEach(t),fOo=r(n$e," (MegatronBert model)"),n$e.forEach(t),mOo=i(J),Jb=n(J,"LI",{});var s$e=s(Jb);bhe=n(s$e,"STRONG",{});var xht=s(bhe);gOo=r(xht,"mobilebert"),xht.forEach(t),hOo=r(s$e," \u2014 "),hV=n(s$e,"A",{href:!0});var $ht=s(hV);pOo=r($ht,"MobileBertForTokenClassification"),$ht.forEach(t),_Oo=r(s$e," (MobileBERT model)"),s$e.forEach(t),uOo=i(J),Yb=n(J,"LI",{});var l$e=s(Yb);vhe=n(l$e,"STRONG",{});var kht=s(vhe);bOo=r(kht,"mpnet"),kht.forEach(t),vOo=r(l$e," \u2014 "),pV=n(l$e,"A",{href:!0});var Sht=s(pV);FOo=r(Sht,"MPNetForTokenClassification"),Sht.forEach(t),TOo=r(l$e," (MPNet model)"),l$e.forEach(t),MOo=i(J),Kb=n(J,"LI",{});var i$e=s(Kb);Fhe=n(i$e,"STRONG",{});var Rht=s(Fhe);EOo=r(Rht,"nystromformer"),Rht.forEach(t),COo=r(i$e," \u2014 "),_V=n(i$e,"A",{href:!0});var Pht=s(_V);wOo=r(Pht,"NystromformerForTokenClassification"),Pht.forEach(t),AOo=r(i$e," (Nystromformer model)"),i$e.forEach(t),yOo=i(J),Zb=n(J,"LI",{});var d$e=s(Zb);The=n(d$e,"STRONG",{});var Bht=s(The);LOo=r(Bht,"qdqbert"),Bht.forEach(t),xOo=r(d$e," \u2014 "),uV=n(d$e,"A",{href:!0});var Iht=s(uV);$Oo=r(Iht,"QDQBertForTokenClassification"),Iht.forEach(t),kOo=r(d$e," (QDQBert model)"),d$e.forEach(t),SOo=i(J),e4=n(J,"LI",{});var c$e=s(e4);Mhe=n(c$e,"STRONG",{});var Nht=s(Mhe);ROo=r(Nht,"rembert"),Nht.forEach(t),POo=r(c$e," \u2014 "),bV=n(c$e,"A",{href:!0});var qht=s(bV);BOo=r(qht,"RemBertForTokenClassification"),qht.forEach(t),IOo=r(c$e," (RemBERT model)"),c$e.forEach(t),NOo=i(J),o4=n(J,"LI",{});var f$e=s(o4);Ehe=n(f$e,"STRONG",{});var jht=s(Ehe);qOo=r(jht,"roberta"),jht.forEach(t),jOo=r(f$e," \u2014 "),vV=n(f$e,"A",{href:!0});var Dht=s(vV);DOo=r(Dht,"RobertaForTokenClassification"),Dht.forEach(t),GOo=r(f$e," (RoBERTa model)"),f$e.forEach(t),OOo=i(J),r4=n(J,"LI",{});var m$e=s(r4);Che=n(m$e,"STRONG",{});var Ght=s(Che);VOo=r(Ght,"roformer"),Ght.forEach(t),XOo=r(m$e," \u2014 "),FV=n(m$e,"A",{href:!0});var Oht=s(FV);zOo=r(Oht,"RoFormerForTokenClassification"),Oht.forEach(t),WOo=r(m$e," (RoFormer model)"),m$e.forEach(t),QOo=i(J),t4=n(J,"LI",{});var g$e=s(t4);whe=n(g$e,"STRONG",{});var Vht=s(whe);HOo=r(Vht,"squeezebert"),Vht.forEach(t),UOo=r(g$e," \u2014 "),TV=n(g$e,"A",{href:!0});var Xht=s(TV);JOo=r(Xht,"SqueezeBertForTokenClassification"),Xht.forEach(t),YOo=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),KOo=i(J),a4=n(J,"LI",{});var h$e=s(a4);Ahe=n(h$e,"STRONG",{});var zht=s(Ahe);ZOo=r(zht,"xlm"),zht.forEach(t),eVo=r(h$e," \u2014 "),MV=n(h$e,"A",{href:!0});var Wht=s(MV);oVo=r(Wht,"XLMForTokenClassification"),Wht.forEach(t),rVo=r(h$e," (XLM model)"),h$e.forEach(t),tVo=i(J),n4=n(J,"LI",{});var p$e=s(n4);yhe=n(p$e,"STRONG",{});var Qht=s(yhe);aVo=r(Qht,"xlm-roberta"),Qht.forEach(t),nVo=r(p$e," \u2014 "),EV=n(p$e,"A",{href:!0});var Hht=s(EV);sVo=r(Hht,"XLMRobertaForTokenClassification"),Hht.forEach(t),lVo=r(p$e," (XLM-RoBERTa model)"),p$e.forEach(t),iVo=i(J),s4=n(J,"LI",{});var _$e=s(s4);Lhe=n(_$e,"STRONG",{});var Uht=s(Lhe);dVo=r(Uht,"xlm-roberta-xl"),Uht.forEach(t),cVo=r(_$e," \u2014 "),CV=n(_$e,"A",{href:!0});var Jht=s(CV);fVo=r(Jht,"XLMRobertaXLForTokenClassification"),Jht.forEach(t),mVo=r(_$e," (XLM-RoBERTa-XL model)"),_$e.forEach(t),gVo=i(J),l4=n(J,"LI",{});var u$e=s(l4);xhe=n(u$e,"STRONG",{});var Yht=s(xhe);hVo=r(Yht,"xlnet"),Yht.forEach(t),pVo=r(u$e," \u2014 "),wV=n(u$e,"A",{href:!0});var Kht=s(wV);_Vo=r(Kht,"XLNetForTokenClassification"),Kht.forEach(t),uVo=r(u$e," (XLNet model)"),u$e.forEach(t),bVo=i(J),i4=n(J,"LI",{});var b$e=s(i4);$he=n(b$e,"STRONG",{});var Zht=s($he);vVo=r(Zht,"yoso"),Zht.forEach(t),FVo=r(b$e," \u2014 "),AV=n(b$e,"A",{href:!0});var ept=s(AV);TVo=r(ept,"YosoForTokenClassification"),ept.forEach(t),MVo=r(b$e," (YOSO model)"),b$e.forEach(t),J.forEach(t),EVo=i(ca),d4=n(ca,"P",{});var v$e=s(d4);CVo=r(v$e,"The model is set in evaluation mode by default using "),khe=n(v$e,"CODE",{});var opt=s(khe);wVo=r(opt,"model.eval()"),opt.forEach(t),AVo=r(v$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),She=n(v$e,"CODE",{});var rpt=s(She);yVo=r(rpt,"model.train()"),rpt.forEach(t),v$e.forEach(t),LVo=i(ca),T(c4.$$.fragment,ca),ca.forEach(t),Js.forEach(t),Nqe=i(f),Zi=n(f,"H2",{class:!0});var GDe=s(Zi);f4=n(GDe,"A",{id:!0,class:!0,href:!0});var tpt=s(f4);Rhe=n(tpt,"SPAN",{});var apt=s(Rhe);T(Wy.$$.fragment,apt),apt.forEach(t),tpt.forEach(t),xVo=i(GDe),Phe=n(GDe,"SPAN",{});var npt=s(Phe);$Vo=r(npt,"AutoModelForQuestionAnswering"),npt.forEach(t),GDe.forEach(t),qqe=i(f),No=n(f,"DIV",{class:!0});var Ys=s(No);T(Qy.$$.fragment,Ys),kVo=i(Ys),ed=n(Ys,"P",{});var NZ=s(ed);SVo=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),yV=n(NZ,"A",{href:!0});var spt=s(yV);RVo=r(spt,"from_pretrained()"),spt.forEach(t),PVo=r(NZ," class method or the "),LV=n(NZ,"A",{href:!0});var lpt=s(LV);BVo=r(lpt,"from_config()"),lpt.forEach(t),IVo=r(NZ,` class
method.`),NZ.forEach(t),NVo=i(Ys),Hy=n(Ys,"P",{});var ODe=s(Hy);qVo=r(ODe,"This class cannot be instantiated directly using "),Bhe=n(ODe,"CODE",{});var ipt=s(Bhe);jVo=r(ipt,"__init__()"),ipt.forEach(t),DVo=r(ODe," (throws an error)."),ODe.forEach(t),GVo=i(Ys),gt=n(Ys,"DIV",{class:!0});var K0=s(gt);T(Uy.$$.fragment,K0),OVo=i(K0),Ihe=n(K0,"P",{});var dpt=s(Ihe);VVo=r(dpt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dpt.forEach(t),XVo=i(K0),od=n(K0,"P",{});var qZ=s(od);zVo=r(qZ,`Note:
Loading a model from its configuration file does `),Nhe=n(qZ,"STRONG",{});var cpt=s(Nhe);WVo=r(cpt,"not"),cpt.forEach(t),QVo=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xV=n(qZ,"A",{href:!0});var fpt=s(xV);HVo=r(fpt,"from_pretrained()"),fpt.forEach(t),UVo=r(qZ," to load the model weights."),qZ.forEach(t),JVo=i(K0),T(m4.$$.fragment,K0),K0.forEach(t),YVo=i(Ys),no=n(Ys,"DIV",{class:!0});var fa=s(no);T(Jy.$$.fragment,fa),KVo=i(fa),qhe=n(fa,"P",{});var mpt=s(qhe);ZVo=r(mpt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mpt.forEach(t),eXo=i(fa),qa=n(fa,"P",{});var Z0=s(qa);oXo=r(Z0,"The model class to instantiate is selected based on the "),jhe=n(Z0,"CODE",{});var gpt=s(jhe);rXo=r(gpt,"model_type"),gpt.forEach(t),tXo=r(Z0,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(Z0,"CODE",{});var hpt=s(Dhe);aXo=r(hpt,"pretrained_model_name_or_path"),hpt.forEach(t),nXo=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(Z0,"CODE",{});var ppt=s(Ghe);sXo=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),lXo=r(Z0,":"),Z0.forEach(t),iXo=i(fa),V=n(fa,"UL",{});var X=s(V);g4=n(X,"LI",{});var F$e=s(g4);Ohe=n(F$e,"STRONG",{});var _pt=s(Ohe);dXo=r(_pt,"albert"),_pt.forEach(t),cXo=r(F$e," \u2014 "),$V=n(F$e,"A",{href:!0});var upt=s($V);fXo=r(upt,"AlbertForQuestionAnswering"),upt.forEach(t),mXo=r(F$e," (ALBERT model)"),F$e.forEach(t),gXo=i(X),h4=n(X,"LI",{});var T$e=s(h4);Vhe=n(T$e,"STRONG",{});var bpt=s(Vhe);hXo=r(bpt,"bart"),bpt.forEach(t),pXo=r(T$e," \u2014 "),kV=n(T$e,"A",{href:!0});var vpt=s(kV);_Xo=r(vpt,"BartForQuestionAnswering"),vpt.forEach(t),uXo=r(T$e," (BART model)"),T$e.forEach(t),bXo=i(X),p4=n(X,"LI",{});var M$e=s(p4);Xhe=n(M$e,"STRONG",{});var Fpt=s(Xhe);vXo=r(Fpt,"bert"),Fpt.forEach(t),FXo=r(M$e," \u2014 "),SV=n(M$e,"A",{href:!0});var Tpt=s(SV);TXo=r(Tpt,"BertForQuestionAnswering"),Tpt.forEach(t),MXo=r(M$e," (BERT model)"),M$e.forEach(t),EXo=i(X),_4=n(X,"LI",{});var E$e=s(_4);zhe=n(E$e,"STRONG",{});var Mpt=s(zhe);CXo=r(Mpt,"big_bird"),Mpt.forEach(t),wXo=r(E$e," \u2014 "),RV=n(E$e,"A",{href:!0});var Ept=s(RV);AXo=r(Ept,"BigBirdForQuestionAnswering"),Ept.forEach(t),yXo=r(E$e," (BigBird model)"),E$e.forEach(t),LXo=i(X),u4=n(X,"LI",{});var C$e=s(u4);Whe=n(C$e,"STRONG",{});var Cpt=s(Whe);xXo=r(Cpt,"bigbird_pegasus"),Cpt.forEach(t),$Xo=r(C$e," \u2014 "),PV=n(C$e,"A",{href:!0});var wpt=s(PV);kXo=r(wpt,"BigBirdPegasusForQuestionAnswering"),wpt.forEach(t),SXo=r(C$e," (BigBirdPegasus model)"),C$e.forEach(t),RXo=i(X),b4=n(X,"LI",{});var w$e=s(b4);Qhe=n(w$e,"STRONG",{});var Apt=s(Qhe);PXo=r(Apt,"camembert"),Apt.forEach(t),BXo=r(w$e," \u2014 "),BV=n(w$e,"A",{href:!0});var ypt=s(BV);IXo=r(ypt,"CamembertForQuestionAnswering"),ypt.forEach(t),NXo=r(w$e," (CamemBERT model)"),w$e.forEach(t),qXo=i(X),v4=n(X,"LI",{});var A$e=s(v4);Hhe=n(A$e,"STRONG",{});var Lpt=s(Hhe);jXo=r(Lpt,"canine"),Lpt.forEach(t),DXo=r(A$e," \u2014 "),IV=n(A$e,"A",{href:!0});var xpt=s(IV);GXo=r(xpt,"CanineForQuestionAnswering"),xpt.forEach(t),OXo=r(A$e," (Canine model)"),A$e.forEach(t),VXo=i(X),F4=n(X,"LI",{});var y$e=s(F4);Uhe=n(y$e,"STRONG",{});var $pt=s(Uhe);XXo=r($pt,"convbert"),$pt.forEach(t),zXo=r(y$e," \u2014 "),NV=n(y$e,"A",{href:!0});var kpt=s(NV);WXo=r(kpt,"ConvBertForQuestionAnswering"),kpt.forEach(t),QXo=r(y$e," (ConvBERT model)"),y$e.forEach(t),HXo=i(X),T4=n(X,"LI",{});var L$e=s(T4);Jhe=n(L$e,"STRONG",{});var Spt=s(Jhe);UXo=r(Spt,"data2vec-text"),Spt.forEach(t),JXo=r(L$e," \u2014 "),qV=n(L$e,"A",{href:!0});var Rpt=s(qV);YXo=r(Rpt,"Data2VecTextForQuestionAnswering"),Rpt.forEach(t),KXo=r(L$e," (Data2VecText model)"),L$e.forEach(t),ZXo=i(X),M4=n(X,"LI",{});var x$e=s(M4);Yhe=n(x$e,"STRONG",{});var Ppt=s(Yhe);ezo=r(Ppt,"deberta"),Ppt.forEach(t),ozo=r(x$e," \u2014 "),jV=n(x$e,"A",{href:!0});var Bpt=s(jV);rzo=r(Bpt,"DebertaForQuestionAnswering"),Bpt.forEach(t),tzo=r(x$e," (DeBERTa model)"),x$e.forEach(t),azo=i(X),E4=n(X,"LI",{});var $$e=s(E4);Khe=n($$e,"STRONG",{});var Ipt=s(Khe);nzo=r(Ipt,"deberta-v2"),Ipt.forEach(t),szo=r($$e," \u2014 "),DV=n($$e,"A",{href:!0});var Npt=s(DV);lzo=r(Npt,"DebertaV2ForQuestionAnswering"),Npt.forEach(t),izo=r($$e," (DeBERTa-v2 model)"),$$e.forEach(t),dzo=i(X),C4=n(X,"LI",{});var k$e=s(C4);Zhe=n(k$e,"STRONG",{});var qpt=s(Zhe);czo=r(qpt,"distilbert"),qpt.forEach(t),fzo=r(k$e," \u2014 "),GV=n(k$e,"A",{href:!0});var jpt=s(GV);mzo=r(jpt,"DistilBertForQuestionAnswering"),jpt.forEach(t),gzo=r(k$e," (DistilBERT model)"),k$e.forEach(t),hzo=i(X),w4=n(X,"LI",{});var S$e=s(w4);epe=n(S$e,"STRONG",{});var Dpt=s(epe);pzo=r(Dpt,"electra"),Dpt.forEach(t),_zo=r(S$e," \u2014 "),OV=n(S$e,"A",{href:!0});var Gpt=s(OV);uzo=r(Gpt,"ElectraForQuestionAnswering"),Gpt.forEach(t),bzo=r(S$e," (ELECTRA model)"),S$e.forEach(t),vzo=i(X),A4=n(X,"LI",{});var R$e=s(A4);ope=n(R$e,"STRONG",{});var Opt=s(ope);Fzo=r(Opt,"flaubert"),Opt.forEach(t),Tzo=r(R$e," \u2014 "),VV=n(R$e,"A",{href:!0});var Vpt=s(VV);Mzo=r(Vpt,"FlaubertForQuestionAnsweringSimple"),Vpt.forEach(t),Ezo=r(R$e," (FlauBERT model)"),R$e.forEach(t),Czo=i(X),y4=n(X,"LI",{});var P$e=s(y4);rpe=n(P$e,"STRONG",{});var Xpt=s(rpe);wzo=r(Xpt,"fnet"),Xpt.forEach(t),Azo=r(P$e," \u2014 "),XV=n(P$e,"A",{href:!0});var zpt=s(XV);yzo=r(zpt,"FNetForQuestionAnswering"),zpt.forEach(t),Lzo=r(P$e," (FNet model)"),P$e.forEach(t),xzo=i(X),L4=n(X,"LI",{});var B$e=s(L4);tpe=n(B$e,"STRONG",{});var Wpt=s(tpe);$zo=r(Wpt,"funnel"),Wpt.forEach(t),kzo=r(B$e," \u2014 "),zV=n(B$e,"A",{href:!0});var Qpt=s(zV);Szo=r(Qpt,"FunnelForQuestionAnswering"),Qpt.forEach(t),Rzo=r(B$e," (Funnel Transformer model)"),B$e.forEach(t),Pzo=i(X),x4=n(X,"LI",{});var I$e=s(x4);ape=n(I$e,"STRONG",{});var Hpt=s(ape);Bzo=r(Hpt,"gptj"),Hpt.forEach(t),Izo=r(I$e," \u2014 "),WV=n(I$e,"A",{href:!0});var Upt=s(WV);Nzo=r(Upt,"GPTJForQuestionAnswering"),Upt.forEach(t),qzo=r(I$e," (GPT-J model)"),I$e.forEach(t),jzo=i(X),$4=n(X,"LI",{});var N$e=s($4);npe=n(N$e,"STRONG",{});var Jpt=s(npe);Dzo=r(Jpt,"ibert"),Jpt.forEach(t),Gzo=r(N$e," \u2014 "),QV=n(N$e,"A",{href:!0});var Ypt=s(QV);Ozo=r(Ypt,"IBertForQuestionAnswering"),Ypt.forEach(t),Vzo=r(N$e," (I-BERT model)"),N$e.forEach(t),Xzo=i(X),k4=n(X,"LI",{});var q$e=s(k4);spe=n(q$e,"STRONG",{});var Kpt=s(spe);zzo=r(Kpt,"layoutlmv2"),Kpt.forEach(t),Wzo=r(q$e," \u2014 "),HV=n(q$e,"A",{href:!0});var Zpt=s(HV);Qzo=r(Zpt,"LayoutLMv2ForQuestionAnswering"),Zpt.forEach(t),Hzo=r(q$e," (LayoutLMv2 model)"),q$e.forEach(t),Uzo=i(X),S4=n(X,"LI",{});var j$e=s(S4);lpe=n(j$e,"STRONG",{});var e_t=s(lpe);Jzo=r(e_t,"layoutlmv3"),e_t.forEach(t),Yzo=r(j$e," \u2014 "),UV=n(j$e,"A",{href:!0});var o_t=s(UV);Kzo=r(o_t,"LayoutLMv3ForQuestionAnswering"),o_t.forEach(t),Zzo=r(j$e," (LayoutLMv3 model)"),j$e.forEach(t),eWo=i(X),R4=n(X,"LI",{});var D$e=s(R4);ipe=n(D$e,"STRONG",{});var r_t=s(ipe);oWo=r(r_t,"led"),r_t.forEach(t),rWo=r(D$e," \u2014 "),JV=n(D$e,"A",{href:!0});var t_t=s(JV);tWo=r(t_t,"LEDForQuestionAnswering"),t_t.forEach(t),aWo=r(D$e," (LED model)"),D$e.forEach(t),nWo=i(X),P4=n(X,"LI",{});var G$e=s(P4);dpe=n(G$e,"STRONG",{});var a_t=s(dpe);sWo=r(a_t,"longformer"),a_t.forEach(t),lWo=r(G$e," \u2014 "),YV=n(G$e,"A",{href:!0});var n_t=s(YV);iWo=r(n_t,"LongformerForQuestionAnswering"),n_t.forEach(t),dWo=r(G$e," (Longformer model)"),G$e.forEach(t),cWo=i(X),B4=n(X,"LI",{});var O$e=s(B4);cpe=n(O$e,"STRONG",{});var s_t=s(cpe);fWo=r(s_t,"lxmert"),s_t.forEach(t),mWo=r(O$e," \u2014 "),KV=n(O$e,"A",{href:!0});var l_t=s(KV);gWo=r(l_t,"LxmertForQuestionAnswering"),l_t.forEach(t),hWo=r(O$e," (LXMERT model)"),O$e.forEach(t),pWo=i(X),I4=n(X,"LI",{});var V$e=s(I4);fpe=n(V$e,"STRONG",{});var i_t=s(fpe);_Wo=r(i_t,"mbart"),i_t.forEach(t),uWo=r(V$e," \u2014 "),ZV=n(V$e,"A",{href:!0});var d_t=s(ZV);bWo=r(d_t,"MBartForQuestionAnswering"),d_t.forEach(t),vWo=r(V$e," (mBART model)"),V$e.forEach(t),FWo=i(X),N4=n(X,"LI",{});var X$e=s(N4);mpe=n(X$e,"STRONG",{});var c_t=s(mpe);TWo=r(c_t,"megatron-bert"),c_t.forEach(t),MWo=r(X$e," \u2014 "),eX=n(X$e,"A",{href:!0});var f_t=s(eX);EWo=r(f_t,"MegatronBertForQuestionAnswering"),f_t.forEach(t),CWo=r(X$e," (MegatronBert model)"),X$e.forEach(t),wWo=i(X),q4=n(X,"LI",{});var z$e=s(q4);gpe=n(z$e,"STRONG",{});var m_t=s(gpe);AWo=r(m_t,"mobilebert"),m_t.forEach(t),yWo=r(z$e," \u2014 "),oX=n(z$e,"A",{href:!0});var g_t=s(oX);LWo=r(g_t,"MobileBertForQuestionAnswering"),g_t.forEach(t),xWo=r(z$e," (MobileBERT model)"),z$e.forEach(t),$Wo=i(X),j4=n(X,"LI",{});var W$e=s(j4);hpe=n(W$e,"STRONG",{});var h_t=s(hpe);kWo=r(h_t,"mpnet"),h_t.forEach(t),SWo=r(W$e," \u2014 "),rX=n(W$e,"A",{href:!0});var p_t=s(rX);RWo=r(p_t,"MPNetForQuestionAnswering"),p_t.forEach(t),PWo=r(W$e," (MPNet model)"),W$e.forEach(t),BWo=i(X),D4=n(X,"LI",{});var Q$e=s(D4);ppe=n(Q$e,"STRONG",{});var __t=s(ppe);IWo=r(__t,"nystromformer"),__t.forEach(t),NWo=r(Q$e," \u2014 "),tX=n(Q$e,"A",{href:!0});var u_t=s(tX);qWo=r(u_t,"NystromformerForQuestionAnswering"),u_t.forEach(t),jWo=r(Q$e," (Nystromformer model)"),Q$e.forEach(t),DWo=i(X),G4=n(X,"LI",{});var H$e=s(G4);_pe=n(H$e,"STRONG",{});var b_t=s(_pe);GWo=r(b_t,"qdqbert"),b_t.forEach(t),OWo=r(H$e," \u2014 "),aX=n(H$e,"A",{href:!0});var v_t=s(aX);VWo=r(v_t,"QDQBertForQuestionAnswering"),v_t.forEach(t),XWo=r(H$e," (QDQBert model)"),H$e.forEach(t),zWo=i(X),O4=n(X,"LI",{});var U$e=s(O4);upe=n(U$e,"STRONG",{});var F_t=s(upe);WWo=r(F_t,"reformer"),F_t.forEach(t),QWo=r(U$e," \u2014 "),nX=n(U$e,"A",{href:!0});var T_t=s(nX);HWo=r(T_t,"ReformerForQuestionAnswering"),T_t.forEach(t),UWo=r(U$e," (Reformer model)"),U$e.forEach(t),JWo=i(X),V4=n(X,"LI",{});var J$e=s(V4);bpe=n(J$e,"STRONG",{});var M_t=s(bpe);YWo=r(M_t,"rembert"),M_t.forEach(t),KWo=r(J$e," \u2014 "),sX=n(J$e,"A",{href:!0});var E_t=s(sX);ZWo=r(E_t,"RemBertForQuestionAnswering"),E_t.forEach(t),eQo=r(J$e," (RemBERT model)"),J$e.forEach(t),oQo=i(X),X4=n(X,"LI",{});var Y$e=s(X4);vpe=n(Y$e,"STRONG",{});var C_t=s(vpe);rQo=r(C_t,"roberta"),C_t.forEach(t),tQo=r(Y$e," \u2014 "),lX=n(Y$e,"A",{href:!0});var w_t=s(lX);aQo=r(w_t,"RobertaForQuestionAnswering"),w_t.forEach(t),nQo=r(Y$e," (RoBERTa model)"),Y$e.forEach(t),sQo=i(X),z4=n(X,"LI",{});var K$e=s(z4);Fpe=n(K$e,"STRONG",{});var A_t=s(Fpe);lQo=r(A_t,"roformer"),A_t.forEach(t),iQo=r(K$e," \u2014 "),iX=n(K$e,"A",{href:!0});var y_t=s(iX);dQo=r(y_t,"RoFormerForQuestionAnswering"),y_t.forEach(t),cQo=r(K$e," (RoFormer model)"),K$e.forEach(t),fQo=i(X),W4=n(X,"LI",{});var Z$e=s(W4);Tpe=n(Z$e,"STRONG",{});var L_t=s(Tpe);mQo=r(L_t,"splinter"),L_t.forEach(t),gQo=r(Z$e," \u2014 "),dX=n(Z$e,"A",{href:!0});var x_t=s(dX);hQo=r(x_t,"SplinterForQuestionAnswering"),x_t.forEach(t),pQo=r(Z$e," (Splinter model)"),Z$e.forEach(t),_Qo=i(X),Q4=n(X,"LI",{});var eke=s(Q4);Mpe=n(eke,"STRONG",{});var $_t=s(Mpe);uQo=r($_t,"squeezebert"),$_t.forEach(t),bQo=r(eke," \u2014 "),cX=n(eke,"A",{href:!0});var k_t=s(cX);vQo=r(k_t,"SqueezeBertForQuestionAnswering"),k_t.forEach(t),FQo=r(eke," (SqueezeBERT model)"),eke.forEach(t),TQo=i(X),H4=n(X,"LI",{});var oke=s(H4);Epe=n(oke,"STRONG",{});var S_t=s(Epe);MQo=r(S_t,"xlm"),S_t.forEach(t),EQo=r(oke," \u2014 "),fX=n(oke,"A",{href:!0});var R_t=s(fX);CQo=r(R_t,"XLMForQuestionAnsweringSimple"),R_t.forEach(t),wQo=r(oke," (XLM model)"),oke.forEach(t),AQo=i(X),U4=n(X,"LI",{});var rke=s(U4);Cpe=n(rke,"STRONG",{});var P_t=s(Cpe);yQo=r(P_t,"xlm-roberta"),P_t.forEach(t),LQo=r(rke," \u2014 "),mX=n(rke,"A",{href:!0});var B_t=s(mX);xQo=r(B_t,"XLMRobertaForQuestionAnswering"),B_t.forEach(t),$Qo=r(rke," (XLM-RoBERTa model)"),rke.forEach(t),kQo=i(X),J4=n(X,"LI",{});var tke=s(J4);wpe=n(tke,"STRONG",{});var I_t=s(wpe);SQo=r(I_t,"xlm-roberta-xl"),I_t.forEach(t),RQo=r(tke," \u2014 "),gX=n(tke,"A",{href:!0});var N_t=s(gX);PQo=r(N_t,"XLMRobertaXLForQuestionAnswering"),N_t.forEach(t),BQo=r(tke," (XLM-RoBERTa-XL model)"),tke.forEach(t),IQo=i(X),Y4=n(X,"LI",{});var ake=s(Y4);Ape=n(ake,"STRONG",{});var q_t=s(Ape);NQo=r(q_t,"xlnet"),q_t.forEach(t),qQo=r(ake," \u2014 "),hX=n(ake,"A",{href:!0});var j_t=s(hX);jQo=r(j_t,"XLNetForQuestionAnsweringSimple"),j_t.forEach(t),DQo=r(ake," (XLNet model)"),ake.forEach(t),GQo=i(X),K4=n(X,"LI",{});var nke=s(K4);ype=n(nke,"STRONG",{});var D_t=s(ype);OQo=r(D_t,"yoso"),D_t.forEach(t),VQo=r(nke," \u2014 "),pX=n(nke,"A",{href:!0});var G_t=s(pX);XQo=r(G_t,"YosoForQuestionAnswering"),G_t.forEach(t),zQo=r(nke," (YOSO model)"),nke.forEach(t),X.forEach(t),WQo=i(fa),Z4=n(fa,"P",{});var ske=s(Z4);QQo=r(ske,"The model is set in evaluation mode by default using "),Lpe=n(ske,"CODE",{});var O_t=s(Lpe);HQo=r(O_t,"model.eval()"),O_t.forEach(t),UQo=r(ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(ske,"CODE",{});var V_t=s(xpe);JQo=r(V_t,"model.train()"),V_t.forEach(t),ske.forEach(t),YQo=i(fa),T(ev.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),jqe=i(f),rd=n(f,"H2",{class:!0});var VDe=s(rd);ov=n(VDe,"A",{id:!0,class:!0,href:!0});var X_t=s(ov);$pe=n(X_t,"SPAN",{});var z_t=s($pe);T(Yy.$$.fragment,z_t),z_t.forEach(t),X_t.forEach(t),KQo=i(VDe),kpe=n(VDe,"SPAN",{});var W_t=s(kpe);ZQo=r(W_t,"AutoModelForTableQuestionAnswering"),W_t.forEach(t),VDe.forEach(t),Dqe=i(f),qo=n(f,"DIV",{class:!0});var Ks=s(qo);T(Ky.$$.fragment,Ks),eHo=i(Ks),td=n(Ks,"P",{});var jZ=s(td);oHo=r(jZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),_X=n(jZ,"A",{href:!0});var Q_t=s(_X);rHo=r(Q_t,"from_pretrained()"),Q_t.forEach(t),tHo=r(jZ," class method or the "),uX=n(jZ,"A",{href:!0});var H_t=s(uX);aHo=r(H_t,"from_config()"),H_t.forEach(t),nHo=r(jZ,` class
method.`),jZ.forEach(t),sHo=i(Ks),Zy=n(Ks,"P",{});var XDe=s(Zy);lHo=r(XDe,"This class cannot be instantiated directly using "),Spe=n(XDe,"CODE",{});var U_t=s(Spe);iHo=r(U_t,"__init__()"),U_t.forEach(t),dHo=r(XDe," (throws an error)."),XDe.forEach(t),cHo=i(Ks),ht=n(Ks,"DIV",{class:!0});var e6=s(ht);T(eL.$$.fragment,e6),fHo=i(e6),Rpe=n(e6,"P",{});var J_t=s(Rpe);mHo=r(J_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),J_t.forEach(t),gHo=i(e6),ad=n(e6,"P",{});var DZ=s(ad);hHo=r(DZ,`Note:
Loading a model from its configuration file does `),Ppe=n(DZ,"STRONG",{});var Y_t=s(Ppe);pHo=r(Y_t,"not"),Y_t.forEach(t),_Ho=r(DZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bX=n(DZ,"A",{href:!0});var K_t=s(bX);uHo=r(K_t,"from_pretrained()"),K_t.forEach(t),bHo=r(DZ," to load the model weights."),DZ.forEach(t),vHo=i(e6),T(rv.$$.fragment,e6),e6.forEach(t),FHo=i(Ks),so=n(Ks,"DIV",{class:!0});var ma=s(so);T(oL.$$.fragment,ma),THo=i(ma),Bpe=n(ma,"P",{});var Z_t=s(Bpe);MHo=r(Z_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Z_t.forEach(t),EHo=i(ma),ja=n(ma,"P",{});var o6=s(ja);CHo=r(o6,"The model class to instantiate is selected based on the "),Ipe=n(o6,"CODE",{});var eut=s(Ipe);wHo=r(eut,"model_type"),eut.forEach(t),AHo=r(o6,` property of the config object (either
passed as an argument or loaded from `),Npe=n(o6,"CODE",{});var out=s(Npe);yHo=r(out,"pretrained_model_name_or_path"),out.forEach(t),LHo=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qpe=n(o6,"CODE",{});var rut=s(qpe);xHo=r(rut,"pretrained_model_name_or_path"),rut.forEach(t),$Ho=r(o6,":"),o6.forEach(t),kHo=i(ma),jpe=n(ma,"UL",{});var tut=s(jpe);tv=n(tut,"LI",{});var lke=s(tv);Dpe=n(lke,"STRONG",{});var aut=s(Dpe);SHo=r(aut,"tapas"),aut.forEach(t),RHo=r(lke," \u2014 "),vX=n(lke,"A",{href:!0});var nut=s(vX);PHo=r(nut,"TapasForQuestionAnswering"),nut.forEach(t),BHo=r(lke," (TAPAS model)"),lke.forEach(t),tut.forEach(t),IHo=i(ma),av=n(ma,"P",{});var ike=s(av);NHo=r(ike,"The model is set in evaluation mode by default using "),Gpe=n(ike,"CODE",{});var sut=s(Gpe);qHo=r(sut,"model.eval()"),sut.forEach(t),jHo=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ope=n(ike,"CODE",{});var lut=s(Ope);DHo=r(lut,"model.train()"),lut.forEach(t),ike.forEach(t),GHo=i(ma),T(nv.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),Gqe=i(f),nd=n(f,"H2",{class:!0});var zDe=s(nd);sv=n(zDe,"A",{id:!0,class:!0,href:!0});var iut=s(sv);Vpe=n(iut,"SPAN",{});var dut=s(Vpe);T(rL.$$.fragment,dut),dut.forEach(t),iut.forEach(t),OHo=i(zDe),Xpe=n(zDe,"SPAN",{});var cut=s(Xpe);VHo=r(cut,"AutoModelForImageClassification"),cut.forEach(t),zDe.forEach(t),Oqe=i(f),jo=n(f,"DIV",{class:!0});var Zs=s(jo);T(tL.$$.fragment,Zs),XHo=i(Zs),sd=n(Zs,"P",{});var GZ=s(sd);zHo=r(GZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),FX=n(GZ,"A",{href:!0});var fut=s(FX);WHo=r(fut,"from_pretrained()"),fut.forEach(t),QHo=r(GZ," class method or the "),TX=n(GZ,"A",{href:!0});var mut=s(TX);HHo=r(mut,"from_config()"),mut.forEach(t),UHo=r(GZ,` class
method.`),GZ.forEach(t),JHo=i(Zs),aL=n(Zs,"P",{});var WDe=s(aL);YHo=r(WDe,"This class cannot be instantiated directly using "),zpe=n(WDe,"CODE",{});var gut=s(zpe);KHo=r(gut,"__init__()"),gut.forEach(t),ZHo=r(WDe," (throws an error)."),WDe.forEach(t),eUo=i(Zs),pt=n(Zs,"DIV",{class:!0});var r6=s(pt);T(nL.$$.fragment,r6),oUo=i(r6),Wpe=n(r6,"P",{});var hut=s(Wpe);rUo=r(hut,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),hut.forEach(t),tUo=i(r6),ld=n(r6,"P",{});var OZ=s(ld);aUo=r(OZ,`Note:
Loading a model from its configuration file does `),Qpe=n(OZ,"STRONG",{});var put=s(Qpe);nUo=r(put,"not"),put.forEach(t),sUo=r(OZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MX=n(OZ,"A",{href:!0});var _ut=s(MX);lUo=r(_ut,"from_pretrained()"),_ut.forEach(t),iUo=r(OZ," to load the model weights."),OZ.forEach(t),dUo=i(r6),T(lv.$$.fragment,r6),r6.forEach(t),cUo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ga=s(lo);T(sL.$$.fragment,ga),fUo=i(ga),Hpe=n(ga,"P",{});var uut=s(Hpe);mUo=r(uut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uut.forEach(t),gUo=i(ga),Da=n(ga,"P",{});var t6=s(Da);hUo=r(t6,"The model class to instantiate is selected based on the "),Upe=n(t6,"CODE",{});var but=s(Upe);pUo=r(but,"model_type"),but.forEach(t),_Uo=r(t6,` property of the config object (either
passed as an argument or loaded from `),Jpe=n(t6,"CODE",{});var vut=s(Jpe);uUo=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),bUo=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ype=n(t6,"CODE",{});var Fut=s(Ype);vUo=r(Fut,"pretrained_model_name_or_path"),Fut.forEach(t),FUo=r(t6,":"),t6.forEach(t),TUo=i(ga),Fe=n(ga,"UL",{});var Te=s(Fe);iv=n(Te,"LI",{});var dke=s(iv);Kpe=n(dke,"STRONG",{});var Tut=s(Kpe);MUo=r(Tut,"beit"),Tut.forEach(t),EUo=r(dke," \u2014 "),EX=n(dke,"A",{href:!0});var Mut=s(EX);CUo=r(Mut,"BeitForImageClassification"),Mut.forEach(t),wUo=r(dke," (BEiT model)"),dke.forEach(t),AUo=i(Te),dv=n(Te,"LI",{});var cke=s(dv);Zpe=n(cke,"STRONG",{});var Eut=s(Zpe);yUo=r(Eut,"convnext"),Eut.forEach(t),LUo=r(cke," \u2014 "),CX=n(cke,"A",{href:!0});var Cut=s(CX);xUo=r(Cut,"ConvNextForImageClassification"),Cut.forEach(t),$Uo=r(cke," (ConvNext model)"),cke.forEach(t),kUo=i(Te),cv=n(Te,"LI",{});var fke=s(cv);e_e=n(fke,"STRONG",{});var wut=s(e_e);SUo=r(wut,"cvt"),wut.forEach(t),RUo=r(fke," \u2014 "),wX=n(fke,"A",{href:!0});var Aut=s(wX);PUo=r(Aut,"CvtForImageClassification"),Aut.forEach(t),BUo=r(fke," (CvT model)"),fke.forEach(t),IUo=i(Te),fv=n(Te,"LI",{});var mke=s(fv);o_e=n(mke,"STRONG",{});var yut=s(o_e);NUo=r(yut,"data2vec-vision"),yut.forEach(t),qUo=r(mke," \u2014 "),AX=n(mke,"A",{href:!0});var Lut=s(AX);jUo=r(Lut,"Data2VecVisionForImageClassification"),Lut.forEach(t),DUo=r(mke," (Data2VecVision model)"),mke.forEach(t),GUo=i(Te),Bs=n(Te,"LI",{});var z$=s(Bs);r_e=n(z$,"STRONG",{});var xut=s(r_e);OUo=r(xut,"deit"),xut.forEach(t),VUo=r(z$," \u2014 "),yX=n(z$,"A",{href:!0});var $ut=s(yX);XUo=r($ut,"DeiTForImageClassification"),$ut.forEach(t),zUo=r(z$," or "),LX=n(z$,"A",{href:!0});var kut=s(LX);WUo=r(kut,"DeiTForImageClassificationWithTeacher"),kut.forEach(t),QUo=r(z$," (DeiT model)"),z$.forEach(t),HUo=i(Te),mv=n(Te,"LI",{});var gke=s(mv);t_e=n(gke,"STRONG",{});var Sut=s(t_e);UUo=r(Sut,"imagegpt"),Sut.forEach(t),JUo=r(gke," \u2014 "),xX=n(gke,"A",{href:!0});var Rut=s(xX);YUo=r(Rut,"ImageGPTForImageClassification"),Rut.forEach(t),KUo=r(gke," (ImageGPT model)"),gke.forEach(t),ZUo=i(Te),_t=n(Te,"LI",{});var pf=s(_t);a_e=n(pf,"STRONG",{});var Put=s(a_e);eJo=r(Put,"perceiver"),Put.forEach(t),oJo=r(pf," \u2014 "),$X=n(pf,"A",{href:!0});var But=s($X);rJo=r(But,"PerceiverForImageClassificationLearned"),But.forEach(t),tJo=r(pf," or "),kX=n(pf,"A",{href:!0});var Iut=s(kX);aJo=r(Iut,"PerceiverForImageClassificationFourier"),Iut.forEach(t),nJo=r(pf," or "),SX=n(pf,"A",{href:!0});var Nut=s(SX);sJo=r(Nut,"PerceiverForImageClassificationConvProcessing"),Nut.forEach(t),lJo=r(pf," (Perceiver model)"),pf.forEach(t),iJo=i(Te),gv=n(Te,"LI",{});var hke=s(gv);n_e=n(hke,"STRONG",{});var qut=s(n_e);dJo=r(qut,"poolformer"),qut.forEach(t),cJo=r(hke," \u2014 "),RX=n(hke,"A",{href:!0});var jut=s(RX);fJo=r(jut,"PoolFormerForImageClassification"),jut.forEach(t),mJo=r(hke," (PoolFormer model)"),hke.forEach(t),gJo=i(Te),hv=n(Te,"LI",{});var pke=s(hv);s_e=n(pke,"STRONG",{});var Dut=s(s_e);hJo=r(Dut,"regnet"),Dut.forEach(t),pJo=r(pke," \u2014 "),PX=n(pke,"A",{href:!0});var Gut=s(PX);_Jo=r(Gut,"RegNetForImageClassification"),Gut.forEach(t),uJo=r(pke," (RegNet model)"),pke.forEach(t),bJo=i(Te),pv=n(Te,"LI",{});var _ke=s(pv);l_e=n(_ke,"STRONG",{});var Out=s(l_e);vJo=r(Out,"resnet"),Out.forEach(t),FJo=r(_ke," \u2014 "),BX=n(_ke,"A",{href:!0});var Vut=s(BX);TJo=r(Vut,"ResNetForImageClassification"),Vut.forEach(t),MJo=r(_ke," (ResNet model)"),_ke.forEach(t),EJo=i(Te),_v=n(Te,"LI",{});var uke=s(_v);i_e=n(uke,"STRONG",{});var Xut=s(i_e);CJo=r(Xut,"segformer"),Xut.forEach(t),wJo=r(uke," \u2014 "),IX=n(uke,"A",{href:!0});var zut=s(IX);AJo=r(zut,"SegformerForImageClassification"),zut.forEach(t),yJo=r(uke," (SegFormer model)"),uke.forEach(t),LJo=i(Te),uv=n(Te,"LI",{});var bke=s(uv);d_e=n(bke,"STRONG",{});var Wut=s(d_e);xJo=r(Wut,"swin"),Wut.forEach(t),$Jo=r(bke," \u2014 "),NX=n(bke,"A",{href:!0});var Qut=s(NX);kJo=r(Qut,"SwinForImageClassification"),Qut.forEach(t),SJo=r(bke," (Swin model)"),bke.forEach(t),RJo=i(Te),bv=n(Te,"LI",{});var vke=s(bv);c_e=n(vke,"STRONG",{});var Hut=s(c_e);PJo=r(Hut,"van"),Hut.forEach(t),BJo=r(vke," \u2014 "),qX=n(vke,"A",{href:!0});var Uut=s(qX);IJo=r(Uut,"VanForImageClassification"),Uut.forEach(t),NJo=r(vke," (VAN model)"),vke.forEach(t),qJo=i(Te),vv=n(Te,"LI",{});var Fke=s(vv);f_e=n(Fke,"STRONG",{});var Jut=s(f_e);jJo=r(Jut,"vit"),Jut.forEach(t),DJo=r(Fke," \u2014 "),jX=n(Fke,"A",{href:!0});var Yut=s(jX);GJo=r(Yut,"ViTForImageClassification"),Yut.forEach(t),OJo=r(Fke," (ViT model)"),Fke.forEach(t),Te.forEach(t),VJo=i(ga),Fv=n(ga,"P",{});var Tke=s(Fv);XJo=r(Tke,"The model is set in evaluation mode by default using "),m_e=n(Tke,"CODE",{});var Kut=s(m_e);zJo=r(Kut,"model.eval()"),Kut.forEach(t),WJo=r(Tke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),g_e=n(Tke,"CODE",{});var Zut=s(g_e);QJo=r(Zut,"model.train()"),Zut.forEach(t),Tke.forEach(t),HJo=i(ga),T(Tv.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),Vqe=i(f),id=n(f,"H2",{class:!0});var QDe=s(id);Mv=n(QDe,"A",{id:!0,class:!0,href:!0});var e2t=s(Mv);h_e=n(e2t,"SPAN",{});var o2t=s(h_e);T(lL.$$.fragment,o2t),o2t.forEach(t),e2t.forEach(t),UJo=i(QDe),p_e=n(QDe,"SPAN",{});var r2t=s(p_e);JJo=r(r2t,"AutoModelForVision2Seq"),r2t.forEach(t),QDe.forEach(t),Xqe=i(f),Do=n(f,"DIV",{class:!0});var el=s(Do);T(iL.$$.fragment,el),YJo=i(el),dd=n(el,"P",{});var VZ=s(dd);KJo=r(VZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DX=n(VZ,"A",{href:!0});var t2t=s(DX);ZJo=r(t2t,"from_pretrained()"),t2t.forEach(t),eYo=r(VZ," class method or the "),GX=n(VZ,"A",{href:!0});var a2t=s(GX);oYo=r(a2t,"from_config()"),a2t.forEach(t),rYo=r(VZ,` class
method.`),VZ.forEach(t),tYo=i(el),dL=n(el,"P",{});var HDe=s(dL);aYo=r(HDe,"This class cannot be instantiated directly using "),__e=n(HDe,"CODE",{});var n2t=s(__e);nYo=r(n2t,"__init__()"),n2t.forEach(t),sYo=r(HDe," (throws an error)."),HDe.forEach(t),lYo=i(el),ut=n(el,"DIV",{class:!0});var a6=s(ut);T(cL.$$.fragment,a6),iYo=i(a6),u_e=n(a6,"P",{});var s2t=s(u_e);dYo=r(s2t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),s2t.forEach(t),cYo=i(a6),cd=n(a6,"P",{});var XZ=s(cd);fYo=r(XZ,`Note:
Loading a model from its configuration file does `),b_e=n(XZ,"STRONG",{});var l2t=s(b_e);mYo=r(l2t,"not"),l2t.forEach(t),gYo=r(XZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(XZ,"A",{href:!0});var i2t=s(OX);hYo=r(i2t,"from_pretrained()"),i2t.forEach(t),pYo=r(XZ," to load the model weights."),XZ.forEach(t),_Yo=i(a6),T(Ev.$$.fragment,a6),a6.forEach(t),uYo=i(el),io=n(el,"DIV",{class:!0});var ha=s(io);T(fL.$$.fragment,ha),bYo=i(ha),v_e=n(ha,"P",{});var d2t=s(v_e);vYo=r(d2t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),d2t.forEach(t),FYo=i(ha),Ga=n(ha,"P",{});var n6=s(Ga);TYo=r(n6,"The model class to instantiate is selected based on the "),F_e=n(n6,"CODE",{});var c2t=s(F_e);MYo=r(c2t,"model_type"),c2t.forEach(t),EYo=r(n6,` property of the config object (either
passed as an argument or loaded from `),T_e=n(n6,"CODE",{});var f2t=s(T_e);CYo=r(f2t,"pretrained_model_name_or_path"),f2t.forEach(t),wYo=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M_e=n(n6,"CODE",{});var m2t=s(M_e);AYo=r(m2t,"pretrained_model_name_or_path"),m2t.forEach(t),yYo=r(n6,":"),n6.forEach(t),LYo=i(ha),E_e=n(ha,"UL",{});var g2t=s(E_e);Cv=n(g2t,"LI",{});var Mke=s(Cv);C_e=n(Mke,"STRONG",{});var h2t=s(C_e);xYo=r(h2t,"vision-encoder-decoder"),h2t.forEach(t),$Yo=r(Mke," \u2014 "),VX=n(Mke,"A",{href:!0});var p2t=s(VX);kYo=r(p2t,"VisionEncoderDecoderModel"),p2t.forEach(t),SYo=r(Mke," (Vision Encoder decoder model)"),Mke.forEach(t),g2t.forEach(t),RYo=i(ha),wv=n(ha,"P",{});var Eke=s(wv);PYo=r(Eke,"The model is set in evaluation mode by default using "),w_e=n(Eke,"CODE",{});var _2t=s(w_e);BYo=r(_2t,"model.eval()"),_2t.forEach(t),IYo=r(Eke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A_e=n(Eke,"CODE",{});var u2t=s(A_e);NYo=r(u2t,"model.train()"),u2t.forEach(t),Eke.forEach(t),qYo=i(ha),T(Av.$$.fragment,ha),ha.forEach(t),el.forEach(t),zqe=i(f),fd=n(f,"H2",{class:!0});var UDe=s(fd);yv=n(UDe,"A",{id:!0,class:!0,href:!0});var b2t=s(yv);y_e=n(b2t,"SPAN",{});var v2t=s(y_e);T(mL.$$.fragment,v2t),v2t.forEach(t),b2t.forEach(t),jYo=i(UDe),L_e=n(UDe,"SPAN",{});var F2t=s(L_e);DYo=r(F2t,"AutoModelForAudioClassification"),F2t.forEach(t),UDe.forEach(t),Wqe=i(f),Go=n(f,"DIV",{class:!0});var ol=s(Go);T(gL.$$.fragment,ol),GYo=i(ol),md=n(ol,"P",{});var zZ=s(md);OYo=r(zZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),XX=n(zZ,"A",{href:!0});var T2t=s(XX);VYo=r(T2t,"from_pretrained()"),T2t.forEach(t),XYo=r(zZ," class method or the "),zX=n(zZ,"A",{href:!0});var M2t=s(zX);zYo=r(M2t,"from_config()"),M2t.forEach(t),WYo=r(zZ,` class
method.`),zZ.forEach(t),QYo=i(ol),hL=n(ol,"P",{});var JDe=s(hL);HYo=r(JDe,"This class cannot be instantiated directly using "),x_e=n(JDe,"CODE",{});var E2t=s(x_e);UYo=r(E2t,"__init__()"),E2t.forEach(t),JYo=r(JDe," (throws an error)."),JDe.forEach(t),YYo=i(ol),bt=n(ol,"DIV",{class:!0});var s6=s(bt);T(pL.$$.fragment,s6),KYo=i(s6),$_e=n(s6,"P",{});var C2t=s($_e);ZYo=r(C2t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),C2t.forEach(t),eKo=i(s6),gd=n(s6,"P",{});var WZ=s(gd);oKo=r(WZ,`Note:
Loading a model from its configuration file does `),k_e=n(WZ,"STRONG",{});var w2t=s(k_e);rKo=r(w2t,"not"),w2t.forEach(t),tKo=r(WZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WX=n(WZ,"A",{href:!0});var A2t=s(WX);aKo=r(A2t,"from_pretrained()"),A2t.forEach(t),nKo=r(WZ," to load the model weights."),WZ.forEach(t),sKo=i(s6),T(Lv.$$.fragment,s6),s6.forEach(t),lKo=i(ol),co=n(ol,"DIV",{class:!0});var pa=s(co);T(_L.$$.fragment,pa),iKo=i(pa),S_e=n(pa,"P",{});var y2t=s(S_e);dKo=r(y2t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),y2t.forEach(t),cKo=i(pa),Oa=n(pa,"P",{});var l6=s(Oa);fKo=r(l6,"The model class to instantiate is selected based on the "),R_e=n(l6,"CODE",{});var L2t=s(R_e);mKo=r(L2t,"model_type"),L2t.forEach(t),gKo=r(l6,` property of the config object (either
passed as an argument or loaded from `),P_e=n(l6,"CODE",{});var x2t=s(P_e);hKo=r(x2t,"pretrained_model_name_or_path"),x2t.forEach(t),pKo=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B_e=n(l6,"CODE",{});var $2t=s(B_e);_Ko=r($2t,"pretrained_model_name_or_path"),$2t.forEach(t),uKo=r(l6,":"),l6.forEach(t),bKo=i(pa),ke=n(pa,"UL",{});var Oe=s(ke);xv=n(Oe,"LI",{});var Cke=s(xv);I_e=n(Cke,"STRONG",{});var k2t=s(I_e);vKo=r(k2t,"data2vec-audio"),k2t.forEach(t),FKo=r(Cke," \u2014 "),QX=n(Cke,"A",{href:!0});var S2t=s(QX);TKo=r(S2t,"Data2VecAudioForSequenceClassification"),S2t.forEach(t),MKo=r(Cke," (Data2VecAudio model)"),Cke.forEach(t),EKo=i(Oe),$v=n(Oe,"LI",{});var wke=s($v);N_e=n(wke,"STRONG",{});var R2t=s(N_e);CKo=r(R2t,"hubert"),R2t.forEach(t),wKo=r(wke," \u2014 "),HX=n(wke,"A",{href:!0});var P2t=s(HX);AKo=r(P2t,"HubertForSequenceClassification"),P2t.forEach(t),yKo=r(wke," (Hubert model)"),wke.forEach(t),LKo=i(Oe),kv=n(Oe,"LI",{});var Ake=s(kv);q_e=n(Ake,"STRONG",{});var B2t=s(q_e);xKo=r(B2t,"sew"),B2t.forEach(t),$Ko=r(Ake," \u2014 "),UX=n(Ake,"A",{href:!0});var I2t=s(UX);kKo=r(I2t,"SEWForSequenceClassification"),I2t.forEach(t),SKo=r(Ake," (SEW model)"),Ake.forEach(t),RKo=i(Oe),Sv=n(Oe,"LI",{});var yke=s(Sv);j_e=n(yke,"STRONG",{});var N2t=s(j_e);PKo=r(N2t,"sew-d"),N2t.forEach(t),BKo=r(yke," \u2014 "),JX=n(yke,"A",{href:!0});var q2t=s(JX);IKo=r(q2t,"SEWDForSequenceClassification"),q2t.forEach(t),NKo=r(yke," (SEW-D model)"),yke.forEach(t),qKo=i(Oe),Rv=n(Oe,"LI",{});var Lke=s(Rv);D_e=n(Lke,"STRONG",{});var j2t=s(D_e);jKo=r(j2t,"unispeech"),j2t.forEach(t),DKo=r(Lke," \u2014 "),YX=n(Lke,"A",{href:!0});var D2t=s(YX);GKo=r(D2t,"UniSpeechForSequenceClassification"),D2t.forEach(t),OKo=r(Lke," (UniSpeech model)"),Lke.forEach(t),VKo=i(Oe),Pv=n(Oe,"LI",{});var xke=s(Pv);G_e=n(xke,"STRONG",{});var G2t=s(G_e);XKo=r(G2t,"unispeech-sat"),G2t.forEach(t),zKo=r(xke," \u2014 "),KX=n(xke,"A",{href:!0});var O2t=s(KX);WKo=r(O2t,"UniSpeechSatForSequenceClassification"),O2t.forEach(t),QKo=r(xke," (UniSpeechSat model)"),xke.forEach(t),HKo=i(Oe),Bv=n(Oe,"LI",{});var $ke=s(Bv);O_e=n($ke,"STRONG",{});var V2t=s(O_e);UKo=r(V2t,"wav2vec2"),V2t.forEach(t),JKo=r($ke," \u2014 "),ZX=n($ke,"A",{href:!0});var X2t=s(ZX);YKo=r(X2t,"Wav2Vec2ForSequenceClassification"),X2t.forEach(t),KKo=r($ke," (Wav2Vec2 model)"),$ke.forEach(t),ZKo=i(Oe),Iv=n(Oe,"LI",{});var kke=s(Iv);V_e=n(kke,"STRONG",{});var z2t=s(V_e);eZo=r(z2t,"wav2vec2-conformer"),z2t.forEach(t),oZo=r(kke," \u2014 "),ez=n(kke,"A",{href:!0});var W2t=s(ez);rZo=r(W2t,"Wav2Vec2ConformerForSequenceClassification"),W2t.forEach(t),tZo=r(kke," (Wav2Vec2-Conformer model)"),kke.forEach(t),aZo=i(Oe),Nv=n(Oe,"LI",{});var Ske=s(Nv);X_e=n(Ske,"STRONG",{});var Q2t=s(X_e);nZo=r(Q2t,"wavlm"),Q2t.forEach(t),sZo=r(Ske," \u2014 "),oz=n(Ske,"A",{href:!0});var H2t=s(oz);lZo=r(H2t,"WavLMForSequenceClassification"),H2t.forEach(t),iZo=r(Ske," (WavLM model)"),Ske.forEach(t),Oe.forEach(t),dZo=i(pa),qv=n(pa,"P",{});var Rke=s(qv);cZo=r(Rke,"The model is set in evaluation mode by default using "),z_e=n(Rke,"CODE",{});var U2t=s(z_e);fZo=r(U2t,"model.eval()"),U2t.forEach(t),mZo=r(Rke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(Rke,"CODE",{});var J2t=s(W_e);gZo=r(J2t,"model.train()"),J2t.forEach(t),Rke.forEach(t),hZo=i(pa),T(jv.$$.fragment,pa),pa.forEach(t),ol.forEach(t),Qqe=i(f),hd=n(f,"H2",{class:!0});var YDe=s(hd);Dv=n(YDe,"A",{id:!0,class:!0,href:!0});var Y2t=s(Dv);Q_e=n(Y2t,"SPAN",{});var K2t=s(Q_e);T(uL.$$.fragment,K2t),K2t.forEach(t),Y2t.forEach(t),pZo=i(YDe),H_e=n(YDe,"SPAN",{});var Z2t=s(H_e);_Zo=r(Z2t,"AutoModelForAudioFrameClassification"),Z2t.forEach(t),YDe.forEach(t),Hqe=i(f),Oo=n(f,"DIV",{class:!0});var rl=s(Oo);T(bL.$$.fragment,rl),uZo=i(rl),pd=n(rl,"P",{});var QZ=s(pd);bZo=r(QZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),rz=n(QZ,"A",{href:!0});var e1t=s(rz);vZo=r(e1t,"from_pretrained()"),e1t.forEach(t),FZo=r(QZ," class method or the "),tz=n(QZ,"A",{href:!0});var o1t=s(tz);TZo=r(o1t,"from_config()"),o1t.forEach(t),MZo=r(QZ,` class
method.`),QZ.forEach(t),EZo=i(rl),vL=n(rl,"P",{});var KDe=s(vL);CZo=r(KDe,"This class cannot be instantiated directly using "),U_e=n(KDe,"CODE",{});var r1t=s(U_e);wZo=r(r1t,"__init__()"),r1t.forEach(t),AZo=r(KDe," (throws an error)."),KDe.forEach(t),yZo=i(rl),vt=n(rl,"DIV",{class:!0});var i6=s(vt);T(FL.$$.fragment,i6),LZo=i(i6),J_e=n(i6,"P",{});var t1t=s(J_e);xZo=r(t1t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),t1t.forEach(t),$Zo=i(i6),_d=n(i6,"P",{});var HZ=s(_d);kZo=r(HZ,`Note:
Loading a model from its configuration file does `),Y_e=n(HZ,"STRONG",{});var a1t=s(Y_e);SZo=r(a1t,"not"),a1t.forEach(t),RZo=r(HZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),az=n(HZ,"A",{href:!0});var n1t=s(az);PZo=r(n1t,"from_pretrained()"),n1t.forEach(t),BZo=r(HZ," to load the model weights."),HZ.forEach(t),IZo=i(i6),T(Gv.$$.fragment,i6),i6.forEach(t),NZo=i(rl),fo=n(rl,"DIV",{class:!0});var _a=s(fo);T(TL.$$.fragment,_a),qZo=i(_a),K_e=n(_a,"P",{});var s1t=s(K_e);jZo=r(s1t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),s1t.forEach(t),DZo=i(_a),Va=n(_a,"P",{});var d6=s(Va);GZo=r(d6,"The model class to instantiate is selected based on the "),Z_e=n(d6,"CODE",{});var l1t=s(Z_e);OZo=r(l1t,"model_type"),l1t.forEach(t),VZo=r(d6,` property of the config object (either
passed as an argument or loaded from `),eue=n(d6,"CODE",{});var i1t=s(eue);XZo=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),zZo=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oue=n(d6,"CODE",{});var d1t=s(oue);WZo=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),QZo=r(d6,":"),d6.forEach(t),HZo=i(_a),Kr=n(_a,"UL",{});var tl=s(Kr);Ov=n(tl,"LI",{});var Pke=s(Ov);rue=n(Pke,"STRONG",{});var c1t=s(rue);UZo=r(c1t,"data2vec-audio"),c1t.forEach(t),JZo=r(Pke," \u2014 "),nz=n(Pke,"A",{href:!0});var f1t=s(nz);YZo=r(f1t,"Data2VecAudioForAudioFrameClassification"),f1t.forEach(t),KZo=r(Pke," (Data2VecAudio model)"),Pke.forEach(t),ZZo=i(tl),Vv=n(tl,"LI",{});var Bke=s(Vv);tue=n(Bke,"STRONG",{});var m1t=s(tue);eer=r(m1t,"unispeech-sat"),m1t.forEach(t),oer=r(Bke," \u2014 "),sz=n(Bke,"A",{href:!0});var g1t=s(sz);rer=r(g1t,"UniSpeechSatForAudioFrameClassification"),g1t.forEach(t),ter=r(Bke," (UniSpeechSat model)"),Bke.forEach(t),aer=i(tl),Xv=n(tl,"LI",{});var Ike=s(Xv);aue=n(Ike,"STRONG",{});var h1t=s(aue);ner=r(h1t,"wav2vec2"),h1t.forEach(t),ser=r(Ike," \u2014 "),lz=n(Ike,"A",{href:!0});var p1t=s(lz);ler=r(p1t,"Wav2Vec2ForAudioFrameClassification"),p1t.forEach(t),ier=r(Ike," (Wav2Vec2 model)"),Ike.forEach(t),der=i(tl),zv=n(tl,"LI",{});var Nke=s(zv);nue=n(Nke,"STRONG",{});var _1t=s(nue);cer=r(_1t,"wav2vec2-conformer"),_1t.forEach(t),fer=r(Nke," \u2014 "),iz=n(Nke,"A",{href:!0});var u1t=s(iz);mer=r(u1t,"Wav2Vec2ConformerForAudioFrameClassification"),u1t.forEach(t),ger=r(Nke," (Wav2Vec2-Conformer model)"),Nke.forEach(t),her=i(tl),Wv=n(tl,"LI",{});var qke=s(Wv);sue=n(qke,"STRONG",{});var b1t=s(sue);per=r(b1t,"wavlm"),b1t.forEach(t),_er=r(qke," \u2014 "),dz=n(qke,"A",{href:!0});var v1t=s(dz);uer=r(v1t,"WavLMForAudioFrameClassification"),v1t.forEach(t),ber=r(qke," (WavLM model)"),qke.forEach(t),tl.forEach(t),ver=i(_a),Qv=n(_a,"P",{});var jke=s(Qv);Fer=r(jke,"The model is set in evaluation mode by default using "),lue=n(jke,"CODE",{});var F1t=s(lue);Ter=r(F1t,"model.eval()"),F1t.forEach(t),Mer=r(jke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(jke,"CODE",{});var T1t=s(iue);Eer=r(T1t,"model.train()"),T1t.forEach(t),jke.forEach(t),Cer=i(_a),T(Hv.$$.fragment,_a),_a.forEach(t),rl.forEach(t),Uqe=i(f),ud=n(f,"H2",{class:!0});var ZDe=s(ud);Uv=n(ZDe,"A",{id:!0,class:!0,href:!0});var M1t=s(Uv);due=n(M1t,"SPAN",{});var E1t=s(due);T(ML.$$.fragment,E1t),E1t.forEach(t),M1t.forEach(t),wer=i(ZDe),cue=n(ZDe,"SPAN",{});var C1t=s(cue);Aer=r(C1t,"AutoModelForCTC"),C1t.forEach(t),ZDe.forEach(t),Jqe=i(f),Vo=n(f,"DIV",{class:!0});var al=s(Vo);T(EL.$$.fragment,al),yer=i(al),bd=n(al,"P",{});var UZ=s(bd);Ler=r(UZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),cz=n(UZ,"A",{href:!0});var w1t=s(cz);xer=r(w1t,"from_pretrained()"),w1t.forEach(t),$er=r(UZ," class method or the "),fz=n(UZ,"A",{href:!0});var A1t=s(fz);ker=r(A1t,"from_config()"),A1t.forEach(t),Ser=r(UZ,` class
method.`),UZ.forEach(t),Rer=i(al),CL=n(al,"P",{});var eGe=s(CL);Per=r(eGe,"This class cannot be instantiated directly using "),fue=n(eGe,"CODE",{});var y1t=s(fue);Ber=r(y1t,"__init__()"),y1t.forEach(t),Ier=r(eGe," (throws an error)."),eGe.forEach(t),Ner=i(al),Ft=n(al,"DIV",{class:!0});var c6=s(Ft);T(wL.$$.fragment,c6),qer=i(c6),mue=n(c6,"P",{});var L1t=s(mue);jer=r(L1t,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),L1t.forEach(t),Der=i(c6),vd=n(c6,"P",{});var JZ=s(vd);Ger=r(JZ,`Note:
Loading a model from its configuration file does `),gue=n(JZ,"STRONG",{});var x1t=s(gue);Oer=r(x1t,"not"),x1t.forEach(t),Ver=r(JZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mz=n(JZ,"A",{href:!0});var $1t=s(mz);Xer=r($1t,"from_pretrained()"),$1t.forEach(t),zer=r(JZ," to load the model weights."),JZ.forEach(t),Wer=i(c6),T(Jv.$$.fragment,c6),c6.forEach(t),Qer=i(al),mo=n(al,"DIV",{class:!0});var ua=s(mo);T(AL.$$.fragment,ua),Her=i(ua),hue=n(ua,"P",{});var k1t=s(hue);Uer=r(k1t,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),k1t.forEach(t),Jer=i(ua),Xa=n(ua,"P",{});var f6=s(Xa);Yer=r(f6,"The model class to instantiate is selected based on the "),pue=n(f6,"CODE",{});var S1t=s(pue);Ker=r(S1t,"model_type"),S1t.forEach(t),Zer=r(f6,` property of the config object (either
passed as an argument or loaded from `),_ue=n(f6,"CODE",{});var R1t=s(_ue);eor=r(R1t,"pretrained_model_name_or_path"),R1t.forEach(t),oor=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(f6,"CODE",{});var P1t=s(uue);ror=r(P1t,"pretrained_model_name_or_path"),P1t.forEach(t),tor=r(f6,":"),f6.forEach(t),aor=i(ua),Se=n(ua,"UL",{});var Ve=s(Se);Yv=n(Ve,"LI",{});var Dke=s(Yv);bue=n(Dke,"STRONG",{});var B1t=s(bue);nor=r(B1t,"data2vec-audio"),B1t.forEach(t),sor=r(Dke," \u2014 "),gz=n(Dke,"A",{href:!0});var I1t=s(gz);lor=r(I1t,"Data2VecAudioForCTC"),I1t.forEach(t),ior=r(Dke," (Data2VecAudio model)"),Dke.forEach(t),dor=i(Ve),Kv=n(Ve,"LI",{});var Gke=s(Kv);vue=n(Gke,"STRONG",{});var N1t=s(vue);cor=r(N1t,"hubert"),N1t.forEach(t),mor=r(Gke," \u2014 "),hz=n(Gke,"A",{href:!0});var q1t=s(hz);gor=r(q1t,"HubertForCTC"),q1t.forEach(t),hor=r(Gke," (Hubert model)"),Gke.forEach(t),por=i(Ve),Zv=n(Ve,"LI",{});var Oke=s(Zv);Fue=n(Oke,"STRONG",{});var j1t=s(Fue);_or=r(j1t,"sew"),j1t.forEach(t),uor=r(Oke," \u2014 "),pz=n(Oke,"A",{href:!0});var D1t=s(pz);bor=r(D1t,"SEWForCTC"),D1t.forEach(t),vor=r(Oke," (SEW model)"),Oke.forEach(t),For=i(Ve),eF=n(Ve,"LI",{});var Vke=s(eF);Tue=n(Vke,"STRONG",{});var G1t=s(Tue);Tor=r(G1t,"sew-d"),G1t.forEach(t),Mor=r(Vke," \u2014 "),_z=n(Vke,"A",{href:!0});var O1t=s(_z);Eor=r(O1t,"SEWDForCTC"),O1t.forEach(t),Cor=r(Vke," (SEW-D model)"),Vke.forEach(t),wor=i(Ve),oF=n(Ve,"LI",{});var Xke=s(oF);Mue=n(Xke,"STRONG",{});var V1t=s(Mue);Aor=r(V1t,"unispeech"),V1t.forEach(t),yor=r(Xke," \u2014 "),uz=n(Xke,"A",{href:!0});var X1t=s(uz);Lor=r(X1t,"UniSpeechForCTC"),X1t.forEach(t),xor=r(Xke," (UniSpeech model)"),Xke.forEach(t),$or=i(Ve),rF=n(Ve,"LI",{});var zke=s(rF);Eue=n(zke,"STRONG",{});var z1t=s(Eue);kor=r(z1t,"unispeech-sat"),z1t.forEach(t),Sor=r(zke," \u2014 "),bz=n(zke,"A",{href:!0});var W1t=s(bz);Ror=r(W1t,"UniSpeechSatForCTC"),W1t.forEach(t),Por=r(zke," (UniSpeechSat model)"),zke.forEach(t),Bor=i(Ve),tF=n(Ve,"LI",{});var Wke=s(tF);Cue=n(Wke,"STRONG",{});var Q1t=s(Cue);Ior=r(Q1t,"wav2vec2"),Q1t.forEach(t),Nor=r(Wke," \u2014 "),vz=n(Wke,"A",{href:!0});var H1t=s(vz);qor=r(H1t,"Wav2Vec2ForCTC"),H1t.forEach(t),jor=r(Wke," (Wav2Vec2 model)"),Wke.forEach(t),Dor=i(Ve),aF=n(Ve,"LI",{});var Qke=s(aF);wue=n(Qke,"STRONG",{});var U1t=s(wue);Gor=r(U1t,"wav2vec2-conformer"),U1t.forEach(t),Oor=r(Qke," \u2014 "),Fz=n(Qke,"A",{href:!0});var J1t=s(Fz);Vor=r(J1t,"Wav2Vec2ConformerForCTC"),J1t.forEach(t),Xor=r(Qke," (Wav2Vec2-Conformer model)"),Qke.forEach(t),zor=i(Ve),nF=n(Ve,"LI",{});var Hke=s(nF);Aue=n(Hke,"STRONG",{});var Y1t=s(Aue);Wor=r(Y1t,"wavlm"),Y1t.forEach(t),Qor=r(Hke," \u2014 "),Tz=n(Hke,"A",{href:!0});var K1t=s(Tz);Hor=r(K1t,"WavLMForCTC"),K1t.forEach(t),Uor=r(Hke," (WavLM model)"),Hke.forEach(t),Ve.forEach(t),Jor=i(ua),sF=n(ua,"P",{});var Uke=s(sF);Yor=r(Uke,"The model is set in evaluation mode by default using "),yue=n(Uke,"CODE",{});var Z1t=s(yue);Kor=r(Z1t,"model.eval()"),Z1t.forEach(t),Zor=r(Uke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lue=n(Uke,"CODE",{});var e7t=s(Lue);err=r(e7t,"model.train()"),e7t.forEach(t),Uke.forEach(t),orr=i(ua),T(lF.$$.fragment,ua),ua.forEach(t),al.forEach(t),Yqe=i(f),Fd=n(f,"H2",{class:!0});var oGe=s(Fd);iF=n(oGe,"A",{id:!0,class:!0,href:!0});var o7t=s(iF);xue=n(o7t,"SPAN",{});var r7t=s(xue);T(yL.$$.fragment,r7t),r7t.forEach(t),o7t.forEach(t),rrr=i(oGe),$ue=n(oGe,"SPAN",{});var t7t=s($ue);trr=r(t7t,"AutoModelForSpeechSeq2Seq"),t7t.forEach(t),oGe.forEach(t),Kqe=i(f),Xo=n(f,"DIV",{class:!0});var nl=s(Xo);T(LL.$$.fragment,nl),arr=i(nl),Td=n(nl,"P",{});var YZ=s(Td);nrr=r(YZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),Mz=n(YZ,"A",{href:!0});var a7t=s(Mz);srr=r(a7t,"from_pretrained()"),a7t.forEach(t),lrr=r(YZ," class method or the "),Ez=n(YZ,"A",{href:!0});var n7t=s(Ez);irr=r(n7t,"from_config()"),n7t.forEach(t),drr=r(YZ,` class
method.`),YZ.forEach(t),crr=i(nl),xL=n(nl,"P",{});var rGe=s(xL);frr=r(rGe,"This class cannot be instantiated directly using "),kue=n(rGe,"CODE",{});var s7t=s(kue);mrr=r(s7t,"__init__()"),s7t.forEach(t),grr=r(rGe," (throws an error)."),rGe.forEach(t),hrr=i(nl),Tt=n(nl,"DIV",{class:!0});var m6=s(Tt);T($L.$$.fragment,m6),prr=i(m6),Sue=n(m6,"P",{});var l7t=s(Sue);_rr=r(l7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),l7t.forEach(t),urr=i(m6),Md=n(m6,"P",{});var KZ=s(Md);brr=r(KZ,`Note:
Loading a model from its configuration file does `),Rue=n(KZ,"STRONG",{});var i7t=s(Rue);vrr=r(i7t,"not"),i7t.forEach(t),Frr=r(KZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cz=n(KZ,"A",{href:!0});var d7t=s(Cz);Trr=r(d7t,"from_pretrained()"),d7t.forEach(t),Mrr=r(KZ," to load the model weights."),KZ.forEach(t),Err=i(m6),T(dF.$$.fragment,m6),m6.forEach(t),Crr=i(nl),go=n(nl,"DIV",{class:!0});var ba=s(go);T(kL.$$.fragment,ba),wrr=i(ba),Pue=n(ba,"P",{});var c7t=s(Pue);Arr=r(c7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),c7t.forEach(t),yrr=i(ba),za=n(ba,"P",{});var g6=s(za);Lrr=r(g6,"The model class to instantiate is selected based on the "),Bue=n(g6,"CODE",{});var f7t=s(Bue);xrr=r(f7t,"model_type"),f7t.forEach(t),$rr=r(g6,` property of the config object (either
passed as an argument or loaded from `),Iue=n(g6,"CODE",{});var m7t=s(Iue);krr=r(m7t,"pretrained_model_name_or_path"),m7t.forEach(t),Srr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nue=n(g6,"CODE",{});var g7t=s(Nue);Rrr=r(g7t,"pretrained_model_name_or_path"),g7t.forEach(t),Prr=r(g6,":"),g6.forEach(t),Brr=i(ba),SL=n(ba,"UL",{});var tGe=s(SL);cF=n(tGe,"LI",{});var Jke=s(cF);que=n(Jke,"STRONG",{});var h7t=s(que);Irr=r(h7t,"speech-encoder-decoder"),h7t.forEach(t),Nrr=r(Jke," \u2014 "),wz=n(Jke,"A",{href:!0});var p7t=s(wz);qrr=r(p7t,"SpeechEncoderDecoderModel"),p7t.forEach(t),jrr=r(Jke," (Speech Encoder decoder model)"),Jke.forEach(t),Drr=i(tGe),fF=n(tGe,"LI",{});var Yke=s(fF);jue=n(Yke,"STRONG",{});var _7t=s(jue);Grr=r(_7t,"speech_to_text"),_7t.forEach(t),Orr=r(Yke," \u2014 "),Az=n(Yke,"A",{href:!0});var u7t=s(Az);Vrr=r(u7t,"Speech2TextForConditionalGeneration"),u7t.forEach(t),Xrr=r(Yke," (Speech2Text model)"),Yke.forEach(t),tGe.forEach(t),zrr=i(ba),mF=n(ba,"P",{});var Kke=s(mF);Wrr=r(Kke,"The model is set in evaluation mode by default using "),Due=n(Kke,"CODE",{});var b7t=s(Due);Qrr=r(b7t,"model.eval()"),b7t.forEach(t),Hrr=r(Kke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gue=n(Kke,"CODE",{});var v7t=s(Gue);Urr=r(v7t,"model.train()"),v7t.forEach(t),Kke.forEach(t),Jrr=i(ba),T(gF.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Zqe=i(f),Ed=n(f,"H2",{class:!0});var aGe=s(Ed);hF=n(aGe,"A",{id:!0,class:!0,href:!0});var F7t=s(hF);Oue=n(F7t,"SPAN",{});var T7t=s(Oue);T(RL.$$.fragment,T7t),T7t.forEach(t),F7t.forEach(t),Yrr=i(aGe),Vue=n(aGe,"SPAN",{});var M7t=s(Vue);Krr=r(M7t,"AutoModelForAudioXVector"),M7t.forEach(t),aGe.forEach(t),eje=i(f),zo=n(f,"DIV",{class:!0});var sl=s(zo);T(PL.$$.fragment,sl),Zrr=i(sl),Cd=n(sl,"P",{});var ZZ=s(Cd);etr=r(ZZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),yz=n(ZZ,"A",{href:!0});var E7t=s(yz);otr=r(E7t,"from_pretrained()"),E7t.forEach(t),rtr=r(ZZ," class method or the "),Lz=n(ZZ,"A",{href:!0});var C7t=s(Lz);ttr=r(C7t,"from_config()"),C7t.forEach(t),atr=r(ZZ,` class
method.`),ZZ.forEach(t),ntr=i(sl),BL=n(sl,"P",{});var nGe=s(BL);str=r(nGe,"This class cannot be instantiated directly using "),Xue=n(nGe,"CODE",{});var w7t=s(Xue);ltr=r(w7t,"__init__()"),w7t.forEach(t),itr=r(nGe," (throws an error)."),nGe.forEach(t),dtr=i(sl),Mt=n(sl,"DIV",{class:!0});var h6=s(Mt);T(IL.$$.fragment,h6),ctr=i(h6),zue=n(h6,"P",{});var A7t=s(zue);ftr=r(A7t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),A7t.forEach(t),mtr=i(h6),wd=n(h6,"P",{});var eee=s(wd);gtr=r(eee,`Note:
Loading a model from its configuration file does `),Wue=n(eee,"STRONG",{});var y7t=s(Wue);htr=r(y7t,"not"),y7t.forEach(t),ptr=r(eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),xz=n(eee,"A",{href:!0});var L7t=s(xz);_tr=r(L7t,"from_pretrained()"),L7t.forEach(t),utr=r(eee," to load the model weights."),eee.forEach(t),btr=i(h6),T(pF.$$.fragment,h6),h6.forEach(t),vtr=i(sl),ho=n(sl,"DIV",{class:!0});var va=s(ho);T(NL.$$.fragment,va),Ftr=i(va),Que=n(va,"P",{});var x7t=s(Que);Ttr=r(x7t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),x7t.forEach(t),Mtr=i(va),Wa=n(va,"P",{});var p6=s(Wa);Etr=r(p6,"The model class to instantiate is selected based on the "),Hue=n(p6,"CODE",{});var $7t=s(Hue);Ctr=r($7t,"model_type"),$7t.forEach(t),wtr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Uue=n(p6,"CODE",{});var k7t=s(Uue);Atr=r(k7t,"pretrained_model_name_or_path"),k7t.forEach(t),ytr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jue=n(p6,"CODE",{});var S7t=s(Jue);Ltr=r(S7t,"pretrained_model_name_or_path"),S7t.forEach(t),xtr=r(p6,":"),p6.forEach(t),$tr=i(va),Zr=n(va,"UL",{});var ll=s(Zr);_F=n(ll,"LI",{});var Zke=s(_F);Yue=n(Zke,"STRONG",{});var R7t=s(Yue);ktr=r(R7t,"data2vec-audio"),R7t.forEach(t),Str=r(Zke," \u2014 "),$z=n(Zke,"A",{href:!0});var P7t=s($z);Rtr=r(P7t,"Data2VecAudioForXVector"),P7t.forEach(t),Ptr=r(Zke," (Data2VecAudio model)"),Zke.forEach(t),Btr=i(ll),uF=n(ll,"LI",{});var eSe=s(uF);Kue=n(eSe,"STRONG",{});var B7t=s(Kue);Itr=r(B7t,"unispeech-sat"),B7t.forEach(t),Ntr=r(eSe," \u2014 "),kz=n(eSe,"A",{href:!0});var I7t=s(kz);qtr=r(I7t,"UniSpeechSatForXVector"),I7t.forEach(t),jtr=r(eSe," (UniSpeechSat model)"),eSe.forEach(t),Dtr=i(ll),bF=n(ll,"LI",{});var oSe=s(bF);Zue=n(oSe,"STRONG",{});var N7t=s(Zue);Gtr=r(N7t,"wav2vec2"),N7t.forEach(t),Otr=r(oSe," \u2014 "),Sz=n(oSe,"A",{href:!0});var q7t=s(Sz);Vtr=r(q7t,"Wav2Vec2ForXVector"),q7t.forEach(t),Xtr=r(oSe," (Wav2Vec2 model)"),oSe.forEach(t),ztr=i(ll),vF=n(ll,"LI",{});var rSe=s(vF);e2e=n(rSe,"STRONG",{});var j7t=s(e2e);Wtr=r(j7t,"wav2vec2-conformer"),j7t.forEach(t),Qtr=r(rSe," \u2014 "),Rz=n(rSe,"A",{href:!0});var D7t=s(Rz);Htr=r(D7t,"Wav2Vec2ConformerForXVector"),D7t.forEach(t),Utr=r(rSe," (Wav2Vec2-Conformer model)"),rSe.forEach(t),Jtr=i(ll),FF=n(ll,"LI",{});var tSe=s(FF);o2e=n(tSe,"STRONG",{});var G7t=s(o2e);Ytr=r(G7t,"wavlm"),G7t.forEach(t),Ktr=r(tSe," \u2014 "),Pz=n(tSe,"A",{href:!0});var O7t=s(Pz);Ztr=r(O7t,"WavLMForXVector"),O7t.forEach(t),ear=r(tSe," (WavLM model)"),tSe.forEach(t),ll.forEach(t),oar=i(va),TF=n(va,"P",{});var aSe=s(TF);rar=r(aSe,"The model is set in evaluation mode by default using "),r2e=n(aSe,"CODE",{});var V7t=s(r2e);tar=r(V7t,"model.eval()"),V7t.forEach(t),aar=r(aSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),t2e=n(aSe,"CODE",{});var X7t=s(t2e);nar=r(X7t,"model.train()"),X7t.forEach(t),aSe.forEach(t),sar=i(va),T(MF.$$.fragment,va),va.forEach(t),sl.forEach(t),oje=i(f),Ad=n(f,"H2",{class:!0});var sGe=s(Ad);EF=n(sGe,"A",{id:!0,class:!0,href:!0});var z7t=s(EF);a2e=n(z7t,"SPAN",{});var W7t=s(a2e);T(qL.$$.fragment,W7t),W7t.forEach(t),z7t.forEach(t),lar=i(sGe),n2e=n(sGe,"SPAN",{});var Q7t=s(n2e);iar=r(Q7t,"AutoModelForMaskedImageModeling"),Q7t.forEach(t),sGe.forEach(t),rje=i(f),Wo=n(f,"DIV",{class:!0});var il=s(Wo);T(jL.$$.fragment,il),dar=i(il),yd=n(il,"P",{});var oee=s(yd);car=r(oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Bz=n(oee,"A",{href:!0});var H7t=s(Bz);far=r(H7t,"from_pretrained()"),H7t.forEach(t),mar=r(oee," class method or the "),Iz=n(oee,"A",{href:!0});var U7t=s(Iz);gar=r(U7t,"from_config()"),U7t.forEach(t),har=r(oee,` class
method.`),oee.forEach(t),par=i(il),DL=n(il,"P",{});var lGe=s(DL);_ar=r(lGe,"This class cannot be instantiated directly using "),s2e=n(lGe,"CODE",{});var J7t=s(s2e);uar=r(J7t,"__init__()"),J7t.forEach(t),bar=r(lGe," (throws an error)."),lGe.forEach(t),Far=i(il),Et=n(il,"DIV",{class:!0});var _6=s(Et);T(GL.$$.fragment,_6),Tar=i(_6),l2e=n(_6,"P",{});var Y7t=s(l2e);Mar=r(Y7t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Y7t.forEach(t),Ear=i(_6),Ld=n(_6,"P",{});var ree=s(Ld);Car=r(ree,`Note:
Loading a model from its configuration file does `),i2e=n(ree,"STRONG",{});var K7t=s(i2e);war=r(K7t,"not"),K7t.forEach(t),Aar=r(ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(ree,"A",{href:!0});var Z7t=s(Nz);yar=r(Z7t,"from_pretrained()"),Z7t.forEach(t),Lar=r(ree," to load the model weights."),ree.forEach(t),xar=i(_6),T(CF.$$.fragment,_6),_6.forEach(t),$ar=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(OL.$$.fragment,Fa),kar=i(Fa),d2e=n(Fa,"P",{});var ebt=s(d2e);Sar=r(ebt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ebt.forEach(t),Rar=i(Fa),Qa=n(Fa,"P",{});var u6=s(Qa);Par=r(u6,"The model class to instantiate is selected based on the "),c2e=n(u6,"CODE",{});var obt=s(c2e);Bar=r(obt,"model_type"),obt.forEach(t),Iar=r(u6,` property of the config object (either
passed as an argument or loaded from `),f2e=n(u6,"CODE",{});var rbt=s(f2e);Nar=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),qar=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m2e=n(u6,"CODE",{});var tbt=s(m2e);jar=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),Dar=r(u6,":"),u6.forEach(t),Gar=i(Fa),xd=n(Fa,"UL",{});var tee=s(xd);wF=n(tee,"LI",{});var nSe=s(wF);g2e=n(nSe,"STRONG",{});var abt=s(g2e);Oar=r(abt,"deit"),abt.forEach(t),Var=r(nSe," \u2014 "),qz=n(nSe,"A",{href:!0});var nbt=s(qz);Xar=r(nbt,"DeiTForMaskedImageModeling"),nbt.forEach(t),zar=r(nSe," (DeiT model)"),nSe.forEach(t),War=i(tee),AF=n(tee,"LI",{});var sSe=s(AF);h2e=n(sSe,"STRONG",{});var sbt=s(h2e);Qar=r(sbt,"swin"),sbt.forEach(t),Har=r(sSe," \u2014 "),jz=n(sSe,"A",{href:!0});var lbt=s(jz);Uar=r(lbt,"SwinForMaskedImageModeling"),lbt.forEach(t),Jar=r(sSe," (Swin model)"),sSe.forEach(t),Yar=i(tee),yF=n(tee,"LI",{});var lSe=s(yF);p2e=n(lSe,"STRONG",{});var ibt=s(p2e);Kar=r(ibt,"vit"),ibt.forEach(t),Zar=r(lSe," \u2014 "),Dz=n(lSe,"A",{href:!0});var dbt=s(Dz);enr=r(dbt,"ViTForMaskedImageModeling"),dbt.forEach(t),onr=r(lSe," (ViT model)"),lSe.forEach(t),tee.forEach(t),rnr=i(Fa),LF=n(Fa,"P",{});var iSe=s(LF);tnr=r(iSe,"The model is set in evaluation mode by default using "),_2e=n(iSe,"CODE",{});var cbt=s(_2e);anr=r(cbt,"model.eval()"),cbt.forEach(t),nnr=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u2e=n(iSe,"CODE",{});var fbt=s(u2e);snr=r(fbt,"model.train()"),fbt.forEach(t),iSe.forEach(t),lnr=i(Fa),T(xF.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),tje=i(f),$d=n(f,"H2",{class:!0});var iGe=s($d);$F=n(iGe,"A",{id:!0,class:!0,href:!0});var mbt=s($F);b2e=n(mbt,"SPAN",{});var gbt=s(b2e);T(VL.$$.fragment,gbt),gbt.forEach(t),mbt.forEach(t),inr=i(iGe),v2e=n(iGe,"SPAN",{});var hbt=s(v2e);dnr=r(hbt,"AutoModelForObjectDetection"),hbt.forEach(t),iGe.forEach(t),aje=i(f),Qo=n(f,"DIV",{class:!0});var dl=s(Qo);T(XL.$$.fragment,dl),cnr=i(dl),kd=n(dl,"P",{});var aee=s(kd);fnr=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),Gz=n(aee,"A",{href:!0});var pbt=s(Gz);mnr=r(pbt,"from_pretrained()"),pbt.forEach(t),gnr=r(aee," class method or the "),Oz=n(aee,"A",{href:!0});var _bt=s(Oz);hnr=r(_bt,"from_config()"),_bt.forEach(t),pnr=r(aee,` class
method.`),aee.forEach(t),_nr=i(dl),zL=n(dl,"P",{});var dGe=s(zL);unr=r(dGe,"This class cannot be instantiated directly using "),F2e=n(dGe,"CODE",{});var ubt=s(F2e);bnr=r(ubt,"__init__()"),ubt.forEach(t),vnr=r(dGe," (throws an error)."),dGe.forEach(t),Fnr=i(dl),Ct=n(dl,"DIV",{class:!0});var b6=s(Ct);T(WL.$$.fragment,b6),Tnr=i(b6),T2e=n(b6,"P",{});var bbt=s(T2e);Mnr=r(bbt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),bbt.forEach(t),Enr=i(b6),Sd=n(b6,"P",{});var nee=s(Sd);Cnr=r(nee,`Note:
Loading a model from its configuration file does `),M2e=n(nee,"STRONG",{});var vbt=s(M2e);wnr=r(vbt,"not"),vbt.forEach(t),Anr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(nee,"A",{href:!0});var Fbt=s(Vz);ynr=r(Fbt,"from_pretrained()"),Fbt.forEach(t),Lnr=r(nee," to load the model weights."),nee.forEach(t),xnr=i(b6),T(kF.$$.fragment,b6),b6.forEach(t),$nr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(QL.$$.fragment,Ta),knr=i(Ta),E2e=n(Ta,"P",{});var Tbt=s(E2e);Snr=r(Tbt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Tbt.forEach(t),Rnr=i(Ta),Ha=n(Ta,"P",{});var v6=s(Ha);Pnr=r(v6,"The model class to instantiate is selected based on the "),C2e=n(v6,"CODE",{});var Mbt=s(C2e);Bnr=r(Mbt,"model_type"),Mbt.forEach(t),Inr=r(v6,` property of the config object (either
passed as an argument or loaded from `),w2e=n(v6,"CODE",{});var Ebt=s(w2e);Nnr=r(Ebt,"pretrained_model_name_or_path"),Ebt.forEach(t),qnr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A2e=n(v6,"CODE",{});var Cbt=s(A2e);jnr=r(Cbt,"pretrained_model_name_or_path"),Cbt.forEach(t),Dnr=r(v6,":"),v6.forEach(t),Gnr=i(Ta),HL=n(Ta,"UL",{});var cGe=s(HL);SF=n(cGe,"LI",{});var dSe=s(SF);y2e=n(dSe,"STRONG",{});var wbt=s(y2e);Onr=r(wbt,"detr"),wbt.forEach(t),Vnr=r(dSe," \u2014 "),Xz=n(dSe,"A",{href:!0});var Abt=s(Xz);Xnr=r(Abt,"DetrForObjectDetection"),Abt.forEach(t),znr=r(dSe," (DETR model)"),dSe.forEach(t),Wnr=i(cGe),RF=n(cGe,"LI",{});var cSe=s(RF);L2e=n(cSe,"STRONG",{});var ybt=s(L2e);Qnr=r(ybt,"yolos"),ybt.forEach(t),Hnr=r(cSe," \u2014 "),zz=n(cSe,"A",{href:!0});var Lbt=s(zz);Unr=r(Lbt,"YolosForObjectDetection"),Lbt.forEach(t),Jnr=r(cSe," (YOLOS model)"),cSe.forEach(t),cGe.forEach(t),Ynr=i(Ta),PF=n(Ta,"P",{});var fSe=s(PF);Knr=r(fSe,"The model is set in evaluation mode by default using "),x2e=n(fSe,"CODE",{});var xbt=s(x2e);Znr=r(xbt,"model.eval()"),xbt.forEach(t),esr=r(fSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$2e=n(fSe,"CODE",{});var $bt=s($2e);osr=r($bt,"model.train()"),$bt.forEach(t),fSe.forEach(t),rsr=i(Ta),T(BF.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),nje=i(f),Rd=n(f,"H2",{class:!0});var fGe=s(Rd);IF=n(fGe,"A",{id:!0,class:!0,href:!0});var kbt=s(IF);k2e=n(kbt,"SPAN",{});var Sbt=s(k2e);T(UL.$$.fragment,Sbt),Sbt.forEach(t),kbt.forEach(t),tsr=i(fGe),S2e=n(fGe,"SPAN",{});var Rbt=s(S2e);asr=r(Rbt,"AutoModelForImageSegmentation"),Rbt.forEach(t),fGe.forEach(t),sje=i(f),Ho=n(f,"DIV",{class:!0});var cl=s(Ho);T(JL.$$.fragment,cl),nsr=i(cl),Pd=n(cl,"P",{});var see=s(Pd);ssr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),Wz=n(see,"A",{href:!0});var Pbt=s(Wz);lsr=r(Pbt,"from_pretrained()"),Pbt.forEach(t),isr=r(see," class method or the "),Qz=n(see,"A",{href:!0});var Bbt=s(Qz);dsr=r(Bbt,"from_config()"),Bbt.forEach(t),csr=r(see,` class
method.`),see.forEach(t),fsr=i(cl),YL=n(cl,"P",{});var mGe=s(YL);msr=r(mGe,"This class cannot be instantiated directly using "),R2e=n(mGe,"CODE",{});var Ibt=s(R2e);gsr=r(Ibt,"__init__()"),Ibt.forEach(t),hsr=r(mGe," (throws an error)."),mGe.forEach(t),psr=i(cl),wt=n(cl,"DIV",{class:!0});var F6=s(wt);T(KL.$$.fragment,F6),_sr=i(F6),P2e=n(F6,"P",{});var Nbt=s(P2e);usr=r(Nbt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Nbt.forEach(t),bsr=i(F6),Bd=n(F6,"P",{});var lee=s(Bd);vsr=r(lee,`Note:
Loading a model from its configuration file does `),B2e=n(lee,"STRONG",{});var qbt=s(B2e);Fsr=r(qbt,"not"),qbt.forEach(t),Tsr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hz=n(lee,"A",{href:!0});var jbt=s(Hz);Msr=r(jbt,"from_pretrained()"),jbt.forEach(t),Esr=r(lee," to load the model weights."),lee.forEach(t),Csr=i(F6),T(NF.$$.fragment,F6),F6.forEach(t),wsr=i(cl),uo=n(cl,"DIV",{class:!0});var Ma=s(uo);T(ZL.$$.fragment,Ma),Asr=i(Ma),I2e=n(Ma,"P",{});var Dbt=s(I2e);ysr=r(Dbt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Dbt.forEach(t),Lsr=i(Ma),Ua=n(Ma,"P",{});var T6=s(Ua);xsr=r(T6,"The model class to instantiate is selected based on the "),N2e=n(T6,"CODE",{});var Gbt=s(N2e);$sr=r(Gbt,"model_type"),Gbt.forEach(t),ksr=r(T6,` property of the config object (either
passed as an argument or loaded from `),q2e=n(T6,"CODE",{});var Obt=s(q2e);Ssr=r(Obt,"pretrained_model_name_or_path"),Obt.forEach(t),Rsr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j2e=n(T6,"CODE",{});var Vbt=s(j2e);Psr=r(Vbt,"pretrained_model_name_or_path"),Vbt.forEach(t),Bsr=r(T6,":"),T6.forEach(t),Isr=i(Ma),D2e=n(Ma,"UL",{});var Xbt=s(D2e);qF=n(Xbt,"LI",{});var mSe=s(qF);G2e=n(mSe,"STRONG",{});var zbt=s(G2e);Nsr=r(zbt,"detr"),zbt.forEach(t),qsr=r(mSe," \u2014 "),Uz=n(mSe,"A",{href:!0});var Wbt=s(Uz);jsr=r(Wbt,"DetrForSegmentation"),Wbt.forEach(t),Dsr=r(mSe," (DETR model)"),mSe.forEach(t),Xbt.forEach(t),Gsr=i(Ma),jF=n(Ma,"P",{});var gSe=s(jF);Osr=r(gSe,"The model is set in evaluation mode by default using "),O2e=n(gSe,"CODE",{});var Qbt=s(O2e);Vsr=r(Qbt,"model.eval()"),Qbt.forEach(t),Xsr=r(gSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),V2e=n(gSe,"CODE",{});var Hbt=s(V2e);zsr=r(Hbt,"model.train()"),Hbt.forEach(t),gSe.forEach(t),Wsr=i(Ma),T(DF.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),lje=i(f),Id=n(f,"H2",{class:!0});var gGe=s(Id);GF=n(gGe,"A",{id:!0,class:!0,href:!0});var Ubt=s(GF);X2e=n(Ubt,"SPAN",{});var Jbt=s(X2e);T(e8.$$.fragment,Jbt),Jbt.forEach(t),Ubt.forEach(t),Qsr=i(gGe),z2e=n(gGe,"SPAN",{});var Ybt=s(z2e);Hsr=r(Ybt,"AutoModelForSemanticSegmentation"),Ybt.forEach(t),gGe.forEach(t),ije=i(f),Uo=n(f,"DIV",{class:!0});var fl=s(Uo);T(o8.$$.fragment,fl),Usr=i(fl),Nd=n(fl,"P",{});var iee=s(Nd);Jsr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Jz=n(iee,"A",{href:!0});var Kbt=s(Jz);Ysr=r(Kbt,"from_pretrained()"),Kbt.forEach(t),Ksr=r(iee," class method or the "),Yz=n(iee,"A",{href:!0});var Zbt=s(Yz);Zsr=r(Zbt,"from_config()"),Zbt.forEach(t),elr=r(iee,` class
method.`),iee.forEach(t),olr=i(fl),r8=n(fl,"P",{});var hGe=s(r8);rlr=r(hGe,"This class cannot be instantiated directly using "),W2e=n(hGe,"CODE",{});var e4t=s(W2e);tlr=r(e4t,"__init__()"),e4t.forEach(t),alr=r(hGe," (throws an error)."),hGe.forEach(t),nlr=i(fl),At=n(fl,"DIV",{class:!0});var M6=s(At);T(t8.$$.fragment,M6),slr=i(M6),Q2e=n(M6,"P",{});var o4t=s(Q2e);llr=r(o4t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),o4t.forEach(t),ilr=i(M6),qd=n(M6,"P",{});var dee=s(qd);dlr=r(dee,`Note:
Loading a model from its configuration file does `),H2e=n(dee,"STRONG",{});var r4t=s(H2e);clr=r(r4t,"not"),r4t.forEach(t),flr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Kz=n(dee,"A",{href:!0});var t4t=s(Kz);mlr=r(t4t,"from_pretrained()"),t4t.forEach(t),glr=r(dee," to load the model weights."),dee.forEach(t),hlr=i(M6),T(OF.$$.fragment,M6),M6.forEach(t),plr=i(fl),bo=n(fl,"DIV",{class:!0});var Ea=s(bo);T(a8.$$.fragment,Ea),_lr=i(Ea),U2e=n(Ea,"P",{});var a4t=s(U2e);ulr=r(a4t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),a4t.forEach(t),blr=i(Ea),Ja=n(Ea,"P",{});var E6=s(Ja);vlr=r(E6,"The model class to instantiate is selected based on the "),J2e=n(E6,"CODE",{});var n4t=s(J2e);Flr=r(n4t,"model_type"),n4t.forEach(t),Tlr=r(E6,` property of the config object (either
passed as an argument or loaded from `),Y2e=n(E6,"CODE",{});var s4t=s(Y2e);Mlr=r(s4t,"pretrained_model_name_or_path"),s4t.forEach(t),Elr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K2e=n(E6,"CODE",{});var l4t=s(K2e);Clr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),wlr=r(E6,":"),E6.forEach(t),Alr=i(Ea),Ya=n(Ea,"UL",{});var C6=s(Ya);VF=n(C6,"LI",{});var hSe=s(VF);Z2e=n(hSe,"STRONG",{});var i4t=s(Z2e);ylr=r(i4t,"beit"),i4t.forEach(t),Llr=r(hSe," \u2014 "),Zz=n(hSe,"A",{href:!0});var d4t=s(Zz);xlr=r(d4t,"BeitForSemanticSegmentation"),d4t.forEach(t),$lr=r(hSe," (BEiT model)"),hSe.forEach(t),klr=i(C6),XF=n(C6,"LI",{});var pSe=s(XF);e1e=n(pSe,"STRONG",{});var c4t=s(e1e);Slr=r(c4t,"data2vec-vision"),c4t.forEach(t),Rlr=r(pSe," \u2014 "),eW=n(pSe,"A",{href:!0});var f4t=s(eW);Plr=r(f4t,"Data2VecVisionForSemanticSegmentation"),f4t.forEach(t),Blr=r(pSe," (Data2VecVision model)"),pSe.forEach(t),Ilr=i(C6),zF=n(C6,"LI",{});var _Se=s(zF);o1e=n(_Se,"STRONG",{});var m4t=s(o1e);Nlr=r(m4t,"dpt"),m4t.forEach(t),qlr=r(_Se," \u2014 "),oW=n(_Se,"A",{href:!0});var g4t=s(oW);jlr=r(g4t,"DPTForSemanticSegmentation"),g4t.forEach(t),Dlr=r(_Se," (DPT model)"),_Se.forEach(t),Glr=i(C6),WF=n(C6,"LI",{});var uSe=s(WF);r1e=n(uSe,"STRONG",{});var h4t=s(r1e);Olr=r(h4t,"segformer"),h4t.forEach(t),Vlr=r(uSe," \u2014 "),rW=n(uSe,"A",{href:!0});var p4t=s(rW);Xlr=r(p4t,"SegformerForSemanticSegmentation"),p4t.forEach(t),zlr=r(uSe," (SegFormer model)"),uSe.forEach(t),C6.forEach(t),Wlr=i(Ea),QF=n(Ea,"P",{});var bSe=s(QF);Qlr=r(bSe,"The model is set in evaluation mode by default using "),t1e=n(bSe,"CODE",{});var _4t=s(t1e);Hlr=r(_4t,"model.eval()"),_4t.forEach(t),Ulr=r(bSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),a1e=n(bSe,"CODE",{});var u4t=s(a1e);Jlr=r(u4t,"model.train()"),u4t.forEach(t),bSe.forEach(t),Ylr=i(Ea),T(HF.$$.fragment,Ea),Ea.forEach(t),fl.forEach(t),dje=i(f),jd=n(f,"H2",{class:!0});var pGe=s(jd);UF=n(pGe,"A",{id:!0,class:!0,href:!0});var b4t=s(UF);n1e=n(b4t,"SPAN",{});var v4t=s(n1e);T(n8.$$.fragment,v4t),v4t.forEach(t),b4t.forEach(t),Klr=i(pGe),s1e=n(pGe,"SPAN",{});var F4t=s(s1e);Zlr=r(F4t,"AutoModelForInstanceSegmentation"),F4t.forEach(t),pGe.forEach(t),cje=i(f),Jo=n(f,"DIV",{class:!0});var ml=s(Jo);T(s8.$$.fragment,ml),eir=i(ml),Dd=n(ml,"P",{});var cee=s(Dd);oir=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),tW=n(cee,"A",{href:!0});var T4t=s(tW);rir=r(T4t,"from_pretrained()"),T4t.forEach(t),tir=r(cee," class method or the "),aW=n(cee,"A",{href:!0});var M4t=s(aW);air=r(M4t,"from_config()"),M4t.forEach(t),nir=r(cee,` class
method.`),cee.forEach(t),sir=i(ml),l8=n(ml,"P",{});var _Ge=s(l8);lir=r(_Ge,"This class cannot be instantiated directly using "),l1e=n(_Ge,"CODE",{});var E4t=s(l1e);iir=r(E4t,"__init__()"),E4t.forEach(t),dir=r(_Ge," (throws an error)."),_Ge.forEach(t),cir=i(ml),yt=n(ml,"DIV",{class:!0});var w6=s(yt);T(i8.$$.fragment,w6),fir=i(w6),i1e=n(w6,"P",{});var C4t=s(i1e);mir=r(C4t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),C4t.forEach(t),gir=i(w6),Gd=n(w6,"P",{});var fee=s(Gd);hir=r(fee,`Note:
Loading a model from its configuration file does `),d1e=n(fee,"STRONG",{});var w4t=s(d1e);pir=r(w4t,"not"),w4t.forEach(t),_ir=r(fee,` load the model weights. It only affects the
model\u2019s configuration. Use `),nW=n(fee,"A",{href:!0});var A4t=s(nW);uir=r(A4t,"from_pretrained()"),A4t.forEach(t),bir=r(fee," to load the model weights."),fee.forEach(t),vir=i(w6),T(JF.$$.fragment,w6),w6.forEach(t),Fir=i(ml),vo=n(ml,"DIV",{class:!0});var Ca=s(vo);T(d8.$$.fragment,Ca),Tir=i(Ca),c1e=n(Ca,"P",{});var y4t=s(c1e);Mir=r(y4t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),y4t.forEach(t),Eir=i(Ca),Ka=n(Ca,"P",{});var A6=s(Ka);Cir=r(A6,"The model class to instantiate is selected based on the "),f1e=n(A6,"CODE",{});var L4t=s(f1e);wir=r(L4t,"model_type"),L4t.forEach(t),Air=r(A6,` property of the config object (either
passed as an argument or loaded from `),m1e=n(A6,"CODE",{});var x4t=s(m1e);yir=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),Lir=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g1e=n(A6,"CODE",{});var $4t=s(g1e);xir=r($4t,"pretrained_model_name_or_path"),$4t.forEach(t),$ir=r(A6,":"),A6.forEach(t),kir=i(Ca),h1e=n(Ca,"UL",{});var k4t=s(h1e);YF=n(k4t,"LI",{});var vSe=s(YF);p1e=n(vSe,"STRONG",{});var S4t=s(p1e);Sir=r(S4t,"maskformer"),S4t.forEach(t),Rir=r(vSe," \u2014 "),sW=n(vSe,"A",{href:!0});var R4t=s(sW);Pir=r(R4t,"MaskFormerForInstanceSegmentation"),R4t.forEach(t),Bir=r(vSe," (MaskFormer model)"),vSe.forEach(t),k4t.forEach(t),Iir=i(Ca),KF=n(Ca,"P",{});var FSe=s(KF);Nir=r(FSe,"The model is set in evaluation mode by default using "),_1e=n(FSe,"CODE",{});var P4t=s(_1e);qir=r(P4t,"model.eval()"),P4t.forEach(t),jir=r(FSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),u1e=n(FSe,"CODE",{});var B4t=s(u1e);Dir=r(B4t,"model.train()"),B4t.forEach(t),FSe.forEach(t),Gir=i(Ca),T(ZF.$$.fragment,Ca),Ca.forEach(t),ml.forEach(t),fje=i(f),Od=n(f,"H2",{class:!0});var uGe=s(Od);eT=n(uGe,"A",{id:!0,class:!0,href:!0});var I4t=s(eT);b1e=n(I4t,"SPAN",{});var N4t=s(b1e);T(c8.$$.fragment,N4t),N4t.forEach(t),I4t.forEach(t),Oir=i(uGe),v1e=n(uGe,"SPAN",{});var q4t=s(v1e);Vir=r(q4t,"TFAutoModel"),q4t.forEach(t),uGe.forEach(t),mje=i(f),Yo=n(f,"DIV",{class:!0});var gl=s(Yo);T(f8.$$.fragment,gl),Xir=i(gl),Vd=n(gl,"P",{});var mee=s(Vd);zir=r(mee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),lW=n(mee,"A",{href:!0});var j4t=s(lW);Wir=r(j4t,"from_pretrained()"),j4t.forEach(t),Qir=r(mee," class method or the "),iW=n(mee,"A",{href:!0});var D4t=s(iW);Hir=r(D4t,"from_config()"),D4t.forEach(t),Uir=r(mee,` class
method.`),mee.forEach(t),Jir=i(gl),m8=n(gl,"P",{});var bGe=s(m8);Yir=r(bGe,"This class cannot be instantiated directly using "),F1e=n(bGe,"CODE",{});var G4t=s(F1e);Kir=r(G4t,"__init__()"),G4t.forEach(t),Zir=r(bGe," (throws an error)."),bGe.forEach(t),edr=i(gl),Lt=n(gl,"DIV",{class:!0});var y6=s(Lt);T(g8.$$.fragment,y6),odr=i(y6),T1e=n(y6,"P",{});var O4t=s(T1e);rdr=r(O4t,"Instantiates one of the base model classes of the library from a configuration."),O4t.forEach(t),tdr=i(y6),Xd=n(y6,"P",{});var gee=s(Xd);adr=r(gee,`Note:
Loading a model from its configuration file does `),M1e=n(gee,"STRONG",{});var V4t=s(M1e);ndr=r(V4t,"not"),V4t.forEach(t),sdr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(gee,"A",{href:!0});var X4t=s(dW);ldr=r(X4t,"from_pretrained()"),X4t.forEach(t),idr=r(gee," to load the model weights."),gee.forEach(t),ddr=i(y6),T(oT.$$.fragment,y6),y6.forEach(t),cdr=i(gl),wr=n(gl,"DIV",{class:!0});var hl=s(wr);T(h8.$$.fragment,hl),fdr=i(hl),E1e=n(hl,"P",{});var z4t=s(E1e);mdr=r(z4t,"Instantiate one of the base model classes of the library from a pretrained model."),z4t.forEach(t),gdr=i(hl),Za=n(hl,"P",{});var L6=s(Za);hdr=r(L6,"The model class to instantiate is selected based on the "),C1e=n(L6,"CODE",{});var W4t=s(C1e);pdr=r(W4t,"model_type"),W4t.forEach(t),_dr=r(L6,` property of the config object (either
passed as an argument or loaded from `),w1e=n(L6,"CODE",{});var Q4t=s(w1e);udr=r(Q4t,"pretrained_model_name_or_path"),Q4t.forEach(t),bdr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A1e=n(L6,"CODE",{});var H4t=s(A1e);vdr=r(H4t,"pretrained_model_name_or_path"),H4t.forEach(t),Fdr=r(L6,":"),L6.forEach(t),Tdr=i(hl),q=n(hl,"UL",{});var D=s(q);rT=n(D,"LI",{});var TSe=s(rT);y1e=n(TSe,"STRONG",{});var U4t=s(y1e);Mdr=r(U4t,"albert"),U4t.forEach(t),Edr=r(TSe," \u2014 "),cW=n(TSe,"A",{href:!0});var J4t=s(cW);Cdr=r(J4t,"TFAlbertModel"),J4t.forEach(t),wdr=r(TSe," (ALBERT model)"),TSe.forEach(t),Adr=i(D),tT=n(D,"LI",{});var MSe=s(tT);L1e=n(MSe,"STRONG",{});var Y4t=s(L1e);ydr=r(Y4t,"bart"),Y4t.forEach(t),Ldr=r(MSe," \u2014 "),fW=n(MSe,"A",{href:!0});var K4t=s(fW);xdr=r(K4t,"TFBartModel"),K4t.forEach(t),$dr=r(MSe," (BART model)"),MSe.forEach(t),kdr=i(D),aT=n(D,"LI",{});var ESe=s(aT);x1e=n(ESe,"STRONG",{});var Z4t=s(x1e);Sdr=r(Z4t,"bert"),Z4t.forEach(t),Rdr=r(ESe," \u2014 "),mW=n(ESe,"A",{href:!0});var evt=s(mW);Pdr=r(evt,"TFBertModel"),evt.forEach(t),Bdr=r(ESe," (BERT model)"),ESe.forEach(t),Idr=i(D),nT=n(D,"LI",{});var CSe=s(nT);$1e=n(CSe,"STRONG",{});var ovt=s($1e);Ndr=r(ovt,"blenderbot"),ovt.forEach(t),qdr=r(CSe," \u2014 "),gW=n(CSe,"A",{href:!0});var rvt=s(gW);jdr=r(rvt,"TFBlenderbotModel"),rvt.forEach(t),Ddr=r(CSe," (Blenderbot model)"),CSe.forEach(t),Gdr=i(D),sT=n(D,"LI",{});var wSe=s(sT);k1e=n(wSe,"STRONG",{});var tvt=s(k1e);Odr=r(tvt,"blenderbot-small"),tvt.forEach(t),Vdr=r(wSe," \u2014 "),hW=n(wSe,"A",{href:!0});var avt=s(hW);Xdr=r(avt,"TFBlenderbotSmallModel"),avt.forEach(t),zdr=r(wSe," (BlenderbotSmall model)"),wSe.forEach(t),Wdr=i(D),lT=n(D,"LI",{});var ASe=s(lT);S1e=n(ASe,"STRONG",{});var nvt=s(S1e);Qdr=r(nvt,"camembert"),nvt.forEach(t),Hdr=r(ASe," \u2014 "),pW=n(ASe,"A",{href:!0});var svt=s(pW);Udr=r(svt,"TFCamembertModel"),svt.forEach(t),Jdr=r(ASe," (CamemBERT model)"),ASe.forEach(t),Ydr=i(D),iT=n(D,"LI",{});var ySe=s(iT);R1e=n(ySe,"STRONG",{});var lvt=s(R1e);Kdr=r(lvt,"clip"),lvt.forEach(t),Zdr=r(ySe," \u2014 "),_W=n(ySe,"A",{href:!0});var ivt=s(_W);ecr=r(ivt,"TFCLIPModel"),ivt.forEach(t),ocr=r(ySe," (CLIP model)"),ySe.forEach(t),rcr=i(D),dT=n(D,"LI",{});var LSe=s(dT);P1e=n(LSe,"STRONG",{});var dvt=s(P1e);tcr=r(dvt,"convbert"),dvt.forEach(t),acr=r(LSe," \u2014 "),uW=n(LSe,"A",{href:!0});var cvt=s(uW);ncr=r(cvt,"TFConvBertModel"),cvt.forEach(t),scr=r(LSe," (ConvBERT model)"),LSe.forEach(t),lcr=i(D),cT=n(D,"LI",{});var xSe=s(cT);B1e=n(xSe,"STRONG",{});var fvt=s(B1e);icr=r(fvt,"convnext"),fvt.forEach(t),dcr=r(xSe," \u2014 "),bW=n(xSe,"A",{href:!0});var mvt=s(bW);ccr=r(mvt,"TFConvNextModel"),mvt.forEach(t),fcr=r(xSe," (ConvNext model)"),xSe.forEach(t),mcr=i(D),fT=n(D,"LI",{});var $Se=s(fT);I1e=n($Se,"STRONG",{});var gvt=s(I1e);gcr=r(gvt,"ctrl"),gvt.forEach(t),hcr=r($Se," \u2014 "),vW=n($Se,"A",{href:!0});var hvt=s(vW);pcr=r(hvt,"TFCTRLModel"),hvt.forEach(t),_cr=r($Se," (CTRL model)"),$Se.forEach(t),ucr=i(D),mT=n(D,"LI",{});var kSe=s(mT);N1e=n(kSe,"STRONG",{});var pvt=s(N1e);bcr=r(pvt,"data2vec-vision"),pvt.forEach(t),vcr=r(kSe," \u2014 "),FW=n(kSe,"A",{href:!0});var _vt=s(FW);Fcr=r(_vt,"TFData2VecVisionModel"),_vt.forEach(t),Tcr=r(kSe," (Data2VecVision model)"),kSe.forEach(t),Mcr=i(D),gT=n(D,"LI",{});var SSe=s(gT);q1e=n(SSe,"STRONG",{});var uvt=s(q1e);Ecr=r(uvt,"deberta"),uvt.forEach(t),Ccr=r(SSe," \u2014 "),TW=n(SSe,"A",{href:!0});var bvt=s(TW);wcr=r(bvt,"TFDebertaModel"),bvt.forEach(t),Acr=r(SSe," (DeBERTa model)"),SSe.forEach(t),ycr=i(D),hT=n(D,"LI",{});var RSe=s(hT);j1e=n(RSe,"STRONG",{});var vvt=s(j1e);Lcr=r(vvt,"deberta-v2"),vvt.forEach(t),xcr=r(RSe," \u2014 "),MW=n(RSe,"A",{href:!0});var Fvt=s(MW);$cr=r(Fvt,"TFDebertaV2Model"),Fvt.forEach(t),kcr=r(RSe," (DeBERTa-v2 model)"),RSe.forEach(t),Scr=i(D),pT=n(D,"LI",{});var PSe=s(pT);D1e=n(PSe,"STRONG",{});var Tvt=s(D1e);Rcr=r(Tvt,"distilbert"),Tvt.forEach(t),Pcr=r(PSe," \u2014 "),EW=n(PSe,"A",{href:!0});var Mvt=s(EW);Bcr=r(Mvt,"TFDistilBertModel"),Mvt.forEach(t),Icr=r(PSe," (DistilBERT model)"),PSe.forEach(t),Ncr=i(D),_T=n(D,"LI",{});var BSe=s(_T);G1e=n(BSe,"STRONG",{});var Evt=s(G1e);qcr=r(Evt,"dpr"),Evt.forEach(t),jcr=r(BSe," \u2014 "),CW=n(BSe,"A",{href:!0});var Cvt=s(CW);Dcr=r(Cvt,"TFDPRQuestionEncoder"),Cvt.forEach(t),Gcr=r(BSe," (DPR model)"),BSe.forEach(t),Ocr=i(D),uT=n(D,"LI",{});var ISe=s(uT);O1e=n(ISe,"STRONG",{});var wvt=s(O1e);Vcr=r(wvt,"electra"),wvt.forEach(t),Xcr=r(ISe," \u2014 "),wW=n(ISe,"A",{href:!0});var Avt=s(wW);zcr=r(Avt,"TFElectraModel"),Avt.forEach(t),Wcr=r(ISe," (ELECTRA model)"),ISe.forEach(t),Qcr=i(D),bT=n(D,"LI",{});var NSe=s(bT);V1e=n(NSe,"STRONG",{});var yvt=s(V1e);Hcr=r(yvt,"flaubert"),yvt.forEach(t),Ucr=r(NSe," \u2014 "),AW=n(NSe,"A",{href:!0});var Lvt=s(AW);Jcr=r(Lvt,"TFFlaubertModel"),Lvt.forEach(t),Ycr=r(NSe," (FlauBERT model)"),NSe.forEach(t),Kcr=i(D),Is=n(D,"LI",{});var W$=s(Is);X1e=n(W$,"STRONG",{});var xvt=s(X1e);Zcr=r(xvt,"funnel"),xvt.forEach(t),efr=r(W$," \u2014 "),yW=n(W$,"A",{href:!0});var $vt=s(yW);ofr=r($vt,"TFFunnelModel"),$vt.forEach(t),rfr=r(W$," or "),LW=n(W$,"A",{href:!0});var kvt=s(LW);tfr=r(kvt,"TFFunnelBaseModel"),kvt.forEach(t),afr=r(W$," (Funnel Transformer model)"),W$.forEach(t),nfr=i(D),vT=n(D,"LI",{});var qSe=s(vT);z1e=n(qSe,"STRONG",{});var Svt=s(z1e);sfr=r(Svt,"gpt2"),Svt.forEach(t),lfr=r(qSe," \u2014 "),xW=n(qSe,"A",{href:!0});var Rvt=s(xW);ifr=r(Rvt,"TFGPT2Model"),Rvt.forEach(t),dfr=r(qSe," (OpenAI GPT-2 model)"),qSe.forEach(t),cfr=i(D),FT=n(D,"LI",{});var jSe=s(FT);W1e=n(jSe,"STRONG",{});var Pvt=s(W1e);ffr=r(Pvt,"gptj"),Pvt.forEach(t),mfr=r(jSe," \u2014 "),$W=n(jSe,"A",{href:!0});var Bvt=s($W);gfr=r(Bvt,"TFGPTJModel"),Bvt.forEach(t),hfr=r(jSe," (GPT-J model)"),jSe.forEach(t),pfr=i(D),TT=n(D,"LI",{});var DSe=s(TT);Q1e=n(DSe,"STRONG",{});var Ivt=s(Q1e);_fr=r(Ivt,"hubert"),Ivt.forEach(t),ufr=r(DSe," \u2014 "),kW=n(DSe,"A",{href:!0});var Nvt=s(kW);bfr=r(Nvt,"TFHubertModel"),Nvt.forEach(t),vfr=r(DSe," (Hubert model)"),DSe.forEach(t),Ffr=i(D),MT=n(D,"LI",{});var GSe=s(MT);H1e=n(GSe,"STRONG",{});var qvt=s(H1e);Tfr=r(qvt,"layoutlm"),qvt.forEach(t),Mfr=r(GSe," \u2014 "),SW=n(GSe,"A",{href:!0});var jvt=s(SW);Efr=r(jvt,"TFLayoutLMModel"),jvt.forEach(t),Cfr=r(GSe," (LayoutLM model)"),GSe.forEach(t),wfr=i(D),ET=n(D,"LI",{});var OSe=s(ET);U1e=n(OSe,"STRONG",{});var Dvt=s(U1e);Afr=r(Dvt,"led"),Dvt.forEach(t),yfr=r(OSe," \u2014 "),RW=n(OSe,"A",{href:!0});var Gvt=s(RW);Lfr=r(Gvt,"TFLEDModel"),Gvt.forEach(t),xfr=r(OSe," (LED model)"),OSe.forEach(t),$fr=i(D),CT=n(D,"LI",{});var VSe=s(CT);J1e=n(VSe,"STRONG",{});var Ovt=s(J1e);kfr=r(Ovt,"longformer"),Ovt.forEach(t),Sfr=r(VSe," \u2014 "),PW=n(VSe,"A",{href:!0});var Vvt=s(PW);Rfr=r(Vvt,"TFLongformerModel"),Vvt.forEach(t),Pfr=r(VSe," (Longformer model)"),VSe.forEach(t),Bfr=i(D),wT=n(D,"LI",{});var XSe=s(wT);Y1e=n(XSe,"STRONG",{});var Xvt=s(Y1e);Ifr=r(Xvt,"lxmert"),Xvt.forEach(t),Nfr=r(XSe," \u2014 "),BW=n(XSe,"A",{href:!0});var zvt=s(BW);qfr=r(zvt,"TFLxmertModel"),zvt.forEach(t),jfr=r(XSe," (LXMERT model)"),XSe.forEach(t),Dfr=i(D),AT=n(D,"LI",{});var zSe=s(AT);K1e=n(zSe,"STRONG",{});var Wvt=s(K1e);Gfr=r(Wvt,"marian"),Wvt.forEach(t),Ofr=r(zSe," \u2014 "),IW=n(zSe,"A",{href:!0});var Qvt=s(IW);Vfr=r(Qvt,"TFMarianModel"),Qvt.forEach(t),Xfr=r(zSe," (Marian model)"),zSe.forEach(t),zfr=i(D),yT=n(D,"LI",{});var WSe=s(yT);Z1e=n(WSe,"STRONG",{});var Hvt=s(Z1e);Wfr=r(Hvt,"mbart"),Hvt.forEach(t),Qfr=r(WSe," \u2014 "),NW=n(WSe,"A",{href:!0});var Uvt=s(NW);Hfr=r(Uvt,"TFMBartModel"),Uvt.forEach(t),Ufr=r(WSe," (mBART model)"),WSe.forEach(t),Jfr=i(D),LT=n(D,"LI",{});var QSe=s(LT);e7e=n(QSe,"STRONG",{});var Jvt=s(e7e);Yfr=r(Jvt,"mobilebert"),Jvt.forEach(t),Kfr=r(QSe," \u2014 "),qW=n(QSe,"A",{href:!0});var Yvt=s(qW);Zfr=r(Yvt,"TFMobileBertModel"),Yvt.forEach(t),emr=r(QSe," (MobileBERT model)"),QSe.forEach(t),omr=i(D),xT=n(D,"LI",{});var HSe=s(xT);o7e=n(HSe,"STRONG",{});var Kvt=s(o7e);rmr=r(Kvt,"mpnet"),Kvt.forEach(t),tmr=r(HSe," \u2014 "),jW=n(HSe,"A",{href:!0});var Zvt=s(jW);amr=r(Zvt,"TFMPNetModel"),Zvt.forEach(t),nmr=r(HSe," (MPNet model)"),HSe.forEach(t),smr=i(D),$T=n(D,"LI",{});var USe=s($T);r7e=n(USe,"STRONG",{});var eFt=s(r7e);lmr=r(eFt,"mt5"),eFt.forEach(t),imr=r(USe," \u2014 "),DW=n(USe,"A",{href:!0});var oFt=s(DW);dmr=r(oFt,"TFMT5Model"),oFt.forEach(t),cmr=r(USe," (mT5 model)"),USe.forEach(t),fmr=i(D),kT=n(D,"LI",{});var JSe=s(kT);t7e=n(JSe,"STRONG",{});var rFt=s(t7e);mmr=r(rFt,"openai-gpt"),rFt.forEach(t),gmr=r(JSe," \u2014 "),GW=n(JSe,"A",{href:!0});var tFt=s(GW);hmr=r(tFt,"TFOpenAIGPTModel"),tFt.forEach(t),pmr=r(JSe," (OpenAI GPT model)"),JSe.forEach(t),_mr=i(D),ST=n(D,"LI",{});var YSe=s(ST);a7e=n(YSe,"STRONG",{});var aFt=s(a7e);umr=r(aFt,"pegasus"),aFt.forEach(t),bmr=r(YSe," \u2014 "),OW=n(YSe,"A",{href:!0});var nFt=s(OW);vmr=r(nFt,"TFPegasusModel"),nFt.forEach(t),Fmr=r(YSe," (Pegasus model)"),YSe.forEach(t),Tmr=i(D),RT=n(D,"LI",{});var KSe=s(RT);n7e=n(KSe,"STRONG",{});var sFt=s(n7e);Mmr=r(sFt,"rembert"),sFt.forEach(t),Emr=r(KSe," \u2014 "),VW=n(KSe,"A",{href:!0});var lFt=s(VW);Cmr=r(lFt,"TFRemBertModel"),lFt.forEach(t),wmr=r(KSe," (RemBERT model)"),KSe.forEach(t),Amr=i(D),PT=n(D,"LI",{});var ZSe=s(PT);s7e=n(ZSe,"STRONG",{});var iFt=s(s7e);ymr=r(iFt,"resnet"),iFt.forEach(t),Lmr=r(ZSe," \u2014 "),XW=n(ZSe,"A",{href:!0});var dFt=s(XW);xmr=r(dFt,"TFResNetModel"),dFt.forEach(t),$mr=r(ZSe," (ResNet model)"),ZSe.forEach(t),kmr=i(D),BT=n(D,"LI",{});var eRe=s(BT);l7e=n(eRe,"STRONG",{});var cFt=s(l7e);Smr=r(cFt,"roberta"),cFt.forEach(t),Rmr=r(eRe," \u2014 "),zW=n(eRe,"A",{href:!0});var fFt=s(zW);Pmr=r(fFt,"TFRobertaModel"),fFt.forEach(t),Bmr=r(eRe," (RoBERTa model)"),eRe.forEach(t),Imr=i(D),IT=n(D,"LI",{});var oRe=s(IT);i7e=n(oRe,"STRONG",{});var mFt=s(i7e);Nmr=r(mFt,"roformer"),mFt.forEach(t),qmr=r(oRe," \u2014 "),WW=n(oRe,"A",{href:!0});var gFt=s(WW);jmr=r(gFt,"TFRoFormerModel"),gFt.forEach(t),Dmr=r(oRe," (RoFormer model)"),oRe.forEach(t),Gmr=i(D),NT=n(D,"LI",{});var rRe=s(NT);d7e=n(rRe,"STRONG",{});var hFt=s(d7e);Omr=r(hFt,"speech_to_text"),hFt.forEach(t),Vmr=r(rRe," \u2014 "),QW=n(rRe,"A",{href:!0});var pFt=s(QW);Xmr=r(pFt,"TFSpeech2TextModel"),pFt.forEach(t),zmr=r(rRe," (Speech2Text model)"),rRe.forEach(t),Wmr=i(D),qT=n(D,"LI",{});var tRe=s(qT);c7e=n(tRe,"STRONG",{});var _Ft=s(c7e);Qmr=r(_Ft,"swin"),_Ft.forEach(t),Hmr=r(tRe," \u2014 "),HW=n(tRe,"A",{href:!0});var uFt=s(HW);Umr=r(uFt,"TFSwinModel"),uFt.forEach(t),Jmr=r(tRe," (Swin model)"),tRe.forEach(t),Ymr=i(D),jT=n(D,"LI",{});var aRe=s(jT);f7e=n(aRe,"STRONG",{});var bFt=s(f7e);Kmr=r(bFt,"t5"),bFt.forEach(t),Zmr=r(aRe," \u2014 "),UW=n(aRe,"A",{href:!0});var vFt=s(UW);egr=r(vFt,"TFT5Model"),vFt.forEach(t),ogr=r(aRe," (T5 model)"),aRe.forEach(t),rgr=i(D),DT=n(D,"LI",{});var nRe=s(DT);m7e=n(nRe,"STRONG",{});var FFt=s(m7e);tgr=r(FFt,"tapas"),FFt.forEach(t),agr=r(nRe," \u2014 "),JW=n(nRe,"A",{href:!0});var TFt=s(JW);ngr=r(TFt,"TFTapasModel"),TFt.forEach(t),sgr=r(nRe," (TAPAS model)"),nRe.forEach(t),lgr=i(D),GT=n(D,"LI",{});var sRe=s(GT);g7e=n(sRe,"STRONG",{});var MFt=s(g7e);igr=r(MFt,"transfo-xl"),MFt.forEach(t),dgr=r(sRe," \u2014 "),YW=n(sRe,"A",{href:!0});var EFt=s(YW);cgr=r(EFt,"TFTransfoXLModel"),EFt.forEach(t),fgr=r(sRe," (Transformer-XL model)"),sRe.forEach(t),mgr=i(D),OT=n(D,"LI",{});var lRe=s(OT);h7e=n(lRe,"STRONG",{});var CFt=s(h7e);ggr=r(CFt,"vit"),CFt.forEach(t),hgr=r(lRe," \u2014 "),KW=n(lRe,"A",{href:!0});var wFt=s(KW);pgr=r(wFt,"TFViTModel"),wFt.forEach(t),_gr=r(lRe," (ViT model)"),lRe.forEach(t),ugr=i(D),VT=n(D,"LI",{});var iRe=s(VT);p7e=n(iRe,"STRONG",{});var AFt=s(p7e);bgr=r(AFt,"vit_mae"),AFt.forEach(t),vgr=r(iRe," \u2014 "),ZW=n(iRe,"A",{href:!0});var yFt=s(ZW);Fgr=r(yFt,"TFViTMAEModel"),yFt.forEach(t),Tgr=r(iRe," (ViTMAE model)"),iRe.forEach(t),Mgr=i(D),XT=n(D,"LI",{});var dRe=s(XT);_7e=n(dRe,"STRONG",{});var LFt=s(_7e);Egr=r(LFt,"wav2vec2"),LFt.forEach(t),Cgr=r(dRe," \u2014 "),eQ=n(dRe,"A",{href:!0});var xFt=s(eQ);wgr=r(xFt,"TFWav2Vec2Model"),xFt.forEach(t),Agr=r(dRe," (Wav2Vec2 model)"),dRe.forEach(t),ygr=i(D),zT=n(D,"LI",{});var cRe=s(zT);u7e=n(cRe,"STRONG",{});var $Ft=s(u7e);Lgr=r($Ft,"xlm"),$Ft.forEach(t),xgr=r(cRe," \u2014 "),oQ=n(cRe,"A",{href:!0});var kFt=s(oQ);$gr=r(kFt,"TFXLMModel"),kFt.forEach(t),kgr=r(cRe," (XLM model)"),cRe.forEach(t),Sgr=i(D),WT=n(D,"LI",{});var fRe=s(WT);b7e=n(fRe,"STRONG",{});var SFt=s(b7e);Rgr=r(SFt,"xlm-roberta"),SFt.forEach(t),Pgr=r(fRe," \u2014 "),rQ=n(fRe,"A",{href:!0});var RFt=s(rQ);Bgr=r(RFt,"TFXLMRobertaModel"),RFt.forEach(t),Igr=r(fRe," (XLM-RoBERTa model)"),fRe.forEach(t),Ngr=i(D),QT=n(D,"LI",{});var mRe=s(QT);v7e=n(mRe,"STRONG",{});var PFt=s(v7e);qgr=r(PFt,"xlnet"),PFt.forEach(t),jgr=r(mRe," \u2014 "),tQ=n(mRe,"A",{href:!0});var BFt=s(tQ);Dgr=r(BFt,"TFXLNetModel"),BFt.forEach(t),Ggr=r(mRe," (XLNet model)"),mRe.forEach(t),D.forEach(t),Ogr=i(hl),T(HT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),gje=i(f),zd=n(f,"H2",{class:!0});var vGe=s(zd);UT=n(vGe,"A",{id:!0,class:!0,href:!0});var IFt=s(UT);F7e=n(IFt,"SPAN",{});var NFt=s(F7e);T(p8.$$.fragment,NFt),NFt.forEach(t),IFt.forEach(t),Vgr=i(vGe),T7e=n(vGe,"SPAN",{});var qFt=s(T7e);Xgr=r(qFt,"TFAutoModelForPreTraining"),qFt.forEach(t),vGe.forEach(t),hje=i(f),Ko=n(f,"DIV",{class:!0});var pl=s(Ko);T(_8.$$.fragment,pl),zgr=i(pl),Wd=n(pl,"P",{});var hee=s(Wd);Wgr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),aQ=n(hee,"A",{href:!0});var jFt=s(aQ);Qgr=r(jFt,"from_pretrained()"),jFt.forEach(t),Hgr=r(hee," class method or the "),nQ=n(hee,"A",{href:!0});var DFt=s(nQ);Ugr=r(DFt,"from_config()"),DFt.forEach(t),Jgr=r(hee,` class
method.`),hee.forEach(t),Ygr=i(pl),u8=n(pl,"P",{});var FGe=s(u8);Kgr=r(FGe,"This class cannot be instantiated directly using "),M7e=n(FGe,"CODE",{});var GFt=s(M7e);Zgr=r(GFt,"__init__()"),GFt.forEach(t),ehr=r(FGe," (throws an error)."),FGe.forEach(t),ohr=i(pl),xt=n(pl,"DIV",{class:!0});var x6=s(xt);T(b8.$$.fragment,x6),rhr=i(x6),E7e=n(x6,"P",{});var OFt=s(E7e);thr=r(OFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),OFt.forEach(t),ahr=i(x6),Qd=n(x6,"P",{});var pee=s(Qd);nhr=r(pee,`Note:
Loading a model from its configuration file does `),C7e=n(pee,"STRONG",{});var VFt=s(C7e);shr=r(VFt,"not"),VFt.forEach(t),lhr=r(pee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(pee,"A",{href:!0});var XFt=s(sQ);ihr=r(XFt,"from_pretrained()"),XFt.forEach(t),dhr=r(pee," to load the model weights."),pee.forEach(t),chr=i(x6),T(JT.$$.fragment,x6),x6.forEach(t),fhr=i(pl),Ar=n(pl,"DIV",{class:!0});var _l=s(Ar);T(v8.$$.fragment,_l),mhr=i(_l),w7e=n(_l,"P",{});var zFt=s(w7e);ghr=r(zFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zFt.forEach(t),hhr=i(_l),en=n(_l,"P",{});var $6=s(en);phr=r($6,"The model class to instantiate is selected based on the "),A7e=n($6,"CODE",{});var WFt=s(A7e);_hr=r(WFt,"model_type"),WFt.forEach(t),uhr=r($6,` property of the config object (either
passed as an argument or loaded from `),y7e=n($6,"CODE",{});var QFt=s(y7e);bhr=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),vhr=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L7e=n($6,"CODE",{});var HFt=s(L7e);Fhr=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),Thr=r($6,":"),$6.forEach(t),Mhr=i(_l),se=n(_l,"UL",{});var le=s(se);YT=n(le,"LI",{});var gRe=s(YT);x7e=n(gRe,"STRONG",{});var UFt=s(x7e);Ehr=r(UFt,"albert"),UFt.forEach(t),Chr=r(gRe," \u2014 "),lQ=n(gRe,"A",{href:!0});var JFt=s(lQ);whr=r(JFt,"TFAlbertForPreTraining"),JFt.forEach(t),Ahr=r(gRe," (ALBERT model)"),gRe.forEach(t),yhr=i(le),KT=n(le,"LI",{});var hRe=s(KT);$7e=n(hRe,"STRONG",{});var YFt=s($7e);Lhr=r(YFt,"bart"),YFt.forEach(t),xhr=r(hRe," \u2014 "),iQ=n(hRe,"A",{href:!0});var KFt=s(iQ);$hr=r(KFt,"TFBartForConditionalGeneration"),KFt.forEach(t),khr=r(hRe," (BART model)"),hRe.forEach(t),Shr=i(le),ZT=n(le,"LI",{});var pRe=s(ZT);k7e=n(pRe,"STRONG",{});var ZFt=s(k7e);Rhr=r(ZFt,"bert"),ZFt.forEach(t),Phr=r(pRe," \u2014 "),dQ=n(pRe,"A",{href:!0});var eTt=s(dQ);Bhr=r(eTt,"TFBertForPreTraining"),eTt.forEach(t),Ihr=r(pRe," (BERT model)"),pRe.forEach(t),Nhr=i(le),eM=n(le,"LI",{});var _Re=s(eM);S7e=n(_Re,"STRONG",{});var oTt=s(S7e);qhr=r(oTt,"camembert"),oTt.forEach(t),jhr=r(_Re," \u2014 "),cQ=n(_Re,"A",{href:!0});var rTt=s(cQ);Dhr=r(rTt,"TFCamembertForMaskedLM"),rTt.forEach(t),Ghr=r(_Re," (CamemBERT model)"),_Re.forEach(t),Ohr=i(le),oM=n(le,"LI",{});var uRe=s(oM);R7e=n(uRe,"STRONG",{});var tTt=s(R7e);Vhr=r(tTt,"ctrl"),tTt.forEach(t),Xhr=r(uRe," \u2014 "),fQ=n(uRe,"A",{href:!0});var aTt=s(fQ);zhr=r(aTt,"TFCTRLLMHeadModel"),aTt.forEach(t),Whr=r(uRe," (CTRL model)"),uRe.forEach(t),Qhr=i(le),rM=n(le,"LI",{});var bRe=s(rM);P7e=n(bRe,"STRONG",{});var nTt=s(P7e);Hhr=r(nTt,"distilbert"),nTt.forEach(t),Uhr=r(bRe," \u2014 "),mQ=n(bRe,"A",{href:!0});var sTt=s(mQ);Jhr=r(sTt,"TFDistilBertForMaskedLM"),sTt.forEach(t),Yhr=r(bRe," (DistilBERT model)"),bRe.forEach(t),Khr=i(le),tM=n(le,"LI",{});var vRe=s(tM);B7e=n(vRe,"STRONG",{});var lTt=s(B7e);Zhr=r(lTt,"electra"),lTt.forEach(t),epr=r(vRe," \u2014 "),gQ=n(vRe,"A",{href:!0});var iTt=s(gQ);opr=r(iTt,"TFElectraForPreTraining"),iTt.forEach(t),rpr=r(vRe," (ELECTRA model)"),vRe.forEach(t),tpr=i(le),aM=n(le,"LI",{});var FRe=s(aM);I7e=n(FRe,"STRONG",{});var dTt=s(I7e);apr=r(dTt,"flaubert"),dTt.forEach(t),npr=r(FRe," \u2014 "),hQ=n(FRe,"A",{href:!0});var cTt=s(hQ);spr=r(cTt,"TFFlaubertWithLMHeadModel"),cTt.forEach(t),lpr=r(FRe," (FlauBERT model)"),FRe.forEach(t),ipr=i(le),nM=n(le,"LI",{});var TRe=s(nM);N7e=n(TRe,"STRONG",{});var fTt=s(N7e);dpr=r(fTt,"funnel"),fTt.forEach(t),cpr=r(TRe," \u2014 "),pQ=n(TRe,"A",{href:!0});var mTt=s(pQ);fpr=r(mTt,"TFFunnelForPreTraining"),mTt.forEach(t),mpr=r(TRe," (Funnel Transformer model)"),TRe.forEach(t),gpr=i(le),sM=n(le,"LI",{});var MRe=s(sM);q7e=n(MRe,"STRONG",{});var gTt=s(q7e);hpr=r(gTt,"gpt2"),gTt.forEach(t),ppr=r(MRe," \u2014 "),_Q=n(MRe,"A",{href:!0});var hTt=s(_Q);_pr=r(hTt,"TFGPT2LMHeadModel"),hTt.forEach(t),upr=r(MRe," (OpenAI GPT-2 model)"),MRe.forEach(t),bpr=i(le),lM=n(le,"LI",{});var ERe=s(lM);j7e=n(ERe,"STRONG",{});var pTt=s(j7e);vpr=r(pTt,"layoutlm"),pTt.forEach(t),Fpr=r(ERe," \u2014 "),uQ=n(ERe,"A",{href:!0});var _Tt=s(uQ);Tpr=r(_Tt,"TFLayoutLMForMaskedLM"),_Tt.forEach(t),Mpr=r(ERe," (LayoutLM model)"),ERe.forEach(t),Epr=i(le),iM=n(le,"LI",{});var CRe=s(iM);D7e=n(CRe,"STRONG",{});var uTt=s(D7e);Cpr=r(uTt,"lxmert"),uTt.forEach(t),wpr=r(CRe," \u2014 "),bQ=n(CRe,"A",{href:!0});var bTt=s(bQ);Apr=r(bTt,"TFLxmertForPreTraining"),bTt.forEach(t),ypr=r(CRe," (LXMERT model)"),CRe.forEach(t),Lpr=i(le),dM=n(le,"LI",{});var wRe=s(dM);G7e=n(wRe,"STRONG",{});var vTt=s(G7e);xpr=r(vTt,"mobilebert"),vTt.forEach(t),$pr=r(wRe," \u2014 "),vQ=n(wRe,"A",{href:!0});var FTt=s(vQ);kpr=r(FTt,"TFMobileBertForPreTraining"),FTt.forEach(t),Spr=r(wRe," (MobileBERT model)"),wRe.forEach(t),Rpr=i(le),cM=n(le,"LI",{});var ARe=s(cM);O7e=n(ARe,"STRONG",{});var TTt=s(O7e);Ppr=r(TTt,"mpnet"),TTt.forEach(t),Bpr=r(ARe," \u2014 "),FQ=n(ARe,"A",{href:!0});var MTt=s(FQ);Ipr=r(MTt,"TFMPNetForMaskedLM"),MTt.forEach(t),Npr=r(ARe," (MPNet model)"),ARe.forEach(t),qpr=i(le),fM=n(le,"LI",{});var yRe=s(fM);V7e=n(yRe,"STRONG",{});var ETt=s(V7e);jpr=r(ETt,"openai-gpt"),ETt.forEach(t),Dpr=r(yRe," \u2014 "),TQ=n(yRe,"A",{href:!0});var CTt=s(TQ);Gpr=r(CTt,"TFOpenAIGPTLMHeadModel"),CTt.forEach(t),Opr=r(yRe," (OpenAI GPT model)"),yRe.forEach(t),Vpr=i(le),mM=n(le,"LI",{});var LRe=s(mM);X7e=n(LRe,"STRONG",{});var wTt=s(X7e);Xpr=r(wTt,"roberta"),wTt.forEach(t),zpr=r(LRe," \u2014 "),MQ=n(LRe,"A",{href:!0});var ATt=s(MQ);Wpr=r(ATt,"TFRobertaForMaskedLM"),ATt.forEach(t),Qpr=r(LRe," (RoBERTa model)"),LRe.forEach(t),Hpr=i(le),gM=n(le,"LI",{});var xRe=s(gM);z7e=n(xRe,"STRONG",{});var yTt=s(z7e);Upr=r(yTt,"t5"),yTt.forEach(t),Jpr=r(xRe," \u2014 "),EQ=n(xRe,"A",{href:!0});var LTt=s(EQ);Ypr=r(LTt,"TFT5ForConditionalGeneration"),LTt.forEach(t),Kpr=r(xRe," (T5 model)"),xRe.forEach(t),Zpr=i(le),hM=n(le,"LI",{});var $Re=s(hM);W7e=n($Re,"STRONG",{});var xTt=s(W7e);e_r=r(xTt,"tapas"),xTt.forEach(t),o_r=r($Re," \u2014 "),CQ=n($Re,"A",{href:!0});var $Tt=s(CQ);r_r=r($Tt,"TFTapasForMaskedLM"),$Tt.forEach(t),t_r=r($Re," (TAPAS model)"),$Re.forEach(t),a_r=i(le),pM=n(le,"LI",{});var kRe=s(pM);Q7e=n(kRe,"STRONG",{});var kTt=s(Q7e);n_r=r(kTt,"transfo-xl"),kTt.forEach(t),s_r=r(kRe," \u2014 "),wQ=n(kRe,"A",{href:!0});var STt=s(wQ);l_r=r(STt,"TFTransfoXLLMHeadModel"),STt.forEach(t),i_r=r(kRe," (Transformer-XL model)"),kRe.forEach(t),d_r=i(le),_M=n(le,"LI",{});var SRe=s(_M);H7e=n(SRe,"STRONG",{});var RTt=s(H7e);c_r=r(RTt,"vit_mae"),RTt.forEach(t),f_r=r(SRe," \u2014 "),AQ=n(SRe,"A",{href:!0});var PTt=s(AQ);m_r=r(PTt,"TFViTMAEForPreTraining"),PTt.forEach(t),g_r=r(SRe," (ViTMAE model)"),SRe.forEach(t),h_r=i(le),uM=n(le,"LI",{});var RRe=s(uM);U7e=n(RRe,"STRONG",{});var BTt=s(U7e);p_r=r(BTt,"xlm"),BTt.forEach(t),__r=r(RRe," \u2014 "),yQ=n(RRe,"A",{href:!0});var ITt=s(yQ);u_r=r(ITt,"TFXLMWithLMHeadModel"),ITt.forEach(t),b_r=r(RRe," (XLM model)"),RRe.forEach(t),v_r=i(le),bM=n(le,"LI",{});var PRe=s(bM);J7e=n(PRe,"STRONG",{});var NTt=s(J7e);F_r=r(NTt,"xlm-roberta"),NTt.forEach(t),T_r=r(PRe," \u2014 "),LQ=n(PRe,"A",{href:!0});var qTt=s(LQ);M_r=r(qTt,"TFXLMRobertaForMaskedLM"),qTt.forEach(t),E_r=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),C_r=i(le),vM=n(le,"LI",{});var BRe=s(vM);Y7e=n(BRe,"STRONG",{});var jTt=s(Y7e);w_r=r(jTt,"xlnet"),jTt.forEach(t),A_r=r(BRe," \u2014 "),xQ=n(BRe,"A",{href:!0});var DTt=s(xQ);y_r=r(DTt,"TFXLNetLMHeadModel"),DTt.forEach(t),L_r=r(BRe," (XLNet model)"),BRe.forEach(t),le.forEach(t),x_r=i(_l),T(FM.$$.fragment,_l),_l.forEach(t),pl.forEach(t),pje=i(f),Hd=n(f,"H2",{class:!0});var TGe=s(Hd);TM=n(TGe,"A",{id:!0,class:!0,href:!0});var GTt=s(TM);K7e=n(GTt,"SPAN",{});var OTt=s(K7e);T(F8.$$.fragment,OTt),OTt.forEach(t),GTt.forEach(t),$_r=i(TGe),Z7e=n(TGe,"SPAN",{});var VTt=s(Z7e);k_r=r(VTt,"TFAutoModelForCausalLM"),VTt.forEach(t),TGe.forEach(t),_je=i(f),Zo=n(f,"DIV",{class:!0});var ul=s(Zo);T(T8.$$.fragment,ul),S_r=i(ul),Ud=n(ul,"P",{});var _ee=s(Ud);R_r=r(_ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),$Q=n(_ee,"A",{href:!0});var XTt=s($Q);P_r=r(XTt,"from_pretrained()"),XTt.forEach(t),B_r=r(_ee," class method or the "),kQ=n(_ee,"A",{href:!0});var zTt=s(kQ);I_r=r(zTt,"from_config()"),zTt.forEach(t),N_r=r(_ee,` class
method.`),_ee.forEach(t),q_r=i(ul),M8=n(ul,"P",{});var MGe=s(M8);j_r=r(MGe,"This class cannot be instantiated directly using "),ebe=n(MGe,"CODE",{});var WTt=s(ebe);D_r=r(WTt,"__init__()"),WTt.forEach(t),G_r=r(MGe," (throws an error)."),MGe.forEach(t),O_r=i(ul),$t=n(ul,"DIV",{class:!0});var k6=s($t);T(E8.$$.fragment,k6),V_r=i(k6),obe=n(k6,"P",{});var QTt=s(obe);X_r=r(QTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QTt.forEach(t),z_r=i(k6),Jd=n(k6,"P",{});var uee=s(Jd);W_r=r(uee,`Note:
Loading a model from its configuration file does `),rbe=n(uee,"STRONG",{});var HTt=s(rbe);Q_r=r(HTt,"not"),HTt.forEach(t),H_r=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(uee,"A",{href:!0});var UTt=s(SQ);U_r=r(UTt,"from_pretrained()"),UTt.forEach(t),J_r=r(uee," to load the model weights."),uee.forEach(t),Y_r=i(k6),T(MM.$$.fragment,k6),k6.forEach(t),K_r=i(ul),yr=n(ul,"DIV",{class:!0});var bl=s(yr);T(C8.$$.fragment,bl),Z_r=i(bl),tbe=n(bl,"P",{});var JTt=s(tbe);eur=r(JTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),JTt.forEach(t),our=i(bl),on=n(bl,"P",{});var S6=s(on);rur=r(S6,"The model class to instantiate is selected based on the "),abe=n(S6,"CODE",{});var YTt=s(abe);tur=r(YTt,"model_type"),YTt.forEach(t),aur=r(S6,` property of the config object (either
passed as an argument or loaded from `),nbe=n(S6,"CODE",{});var KTt=s(nbe);nur=r(KTt,"pretrained_model_name_or_path"),KTt.forEach(t),sur=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(S6,"CODE",{});var ZTt=s(sbe);lur=r(ZTt,"pretrained_model_name_or_path"),ZTt.forEach(t),iur=r(S6,":"),S6.forEach(t),dur=i(bl),Me=n(bl,"UL",{});var Ce=s(Me);EM=n(Ce,"LI",{});var IRe=s(EM);lbe=n(IRe,"STRONG",{});var eMt=s(lbe);cur=r(eMt,"bert"),eMt.forEach(t),fur=r(IRe," \u2014 "),RQ=n(IRe,"A",{href:!0});var oMt=s(RQ);mur=r(oMt,"TFBertLMHeadModel"),oMt.forEach(t),gur=r(IRe," (BERT model)"),IRe.forEach(t),hur=i(Ce),CM=n(Ce,"LI",{});var NRe=s(CM);ibe=n(NRe,"STRONG",{});var rMt=s(ibe);pur=r(rMt,"camembert"),rMt.forEach(t),_ur=r(NRe," \u2014 "),PQ=n(NRe,"A",{href:!0});var tMt=s(PQ);uur=r(tMt,"TFCamembertForCausalLM"),tMt.forEach(t),bur=r(NRe," (CamemBERT model)"),NRe.forEach(t),vur=i(Ce),wM=n(Ce,"LI",{});var qRe=s(wM);dbe=n(qRe,"STRONG",{});var aMt=s(dbe);Fur=r(aMt,"ctrl"),aMt.forEach(t),Tur=r(qRe," \u2014 "),BQ=n(qRe,"A",{href:!0});var nMt=s(BQ);Mur=r(nMt,"TFCTRLLMHeadModel"),nMt.forEach(t),Eur=r(qRe," (CTRL model)"),qRe.forEach(t),Cur=i(Ce),AM=n(Ce,"LI",{});var jRe=s(AM);cbe=n(jRe,"STRONG",{});var sMt=s(cbe);wur=r(sMt,"gpt2"),sMt.forEach(t),Aur=r(jRe," \u2014 "),IQ=n(jRe,"A",{href:!0});var lMt=s(IQ);yur=r(lMt,"TFGPT2LMHeadModel"),lMt.forEach(t),Lur=r(jRe," (OpenAI GPT-2 model)"),jRe.forEach(t),xur=i(Ce),yM=n(Ce,"LI",{});var DRe=s(yM);fbe=n(DRe,"STRONG",{});var iMt=s(fbe);$ur=r(iMt,"gptj"),iMt.forEach(t),kur=r(DRe," \u2014 "),NQ=n(DRe,"A",{href:!0});var dMt=s(NQ);Sur=r(dMt,"TFGPTJForCausalLM"),dMt.forEach(t),Rur=r(DRe," (GPT-J model)"),DRe.forEach(t),Pur=i(Ce),LM=n(Ce,"LI",{});var GRe=s(LM);mbe=n(GRe,"STRONG",{});var cMt=s(mbe);Bur=r(cMt,"openai-gpt"),cMt.forEach(t),Iur=r(GRe," \u2014 "),qQ=n(GRe,"A",{href:!0});var fMt=s(qQ);Nur=r(fMt,"TFOpenAIGPTLMHeadModel"),fMt.forEach(t),qur=r(GRe," (OpenAI GPT model)"),GRe.forEach(t),jur=i(Ce),xM=n(Ce,"LI",{});var ORe=s(xM);gbe=n(ORe,"STRONG",{});var mMt=s(gbe);Dur=r(mMt,"rembert"),mMt.forEach(t),Gur=r(ORe," \u2014 "),jQ=n(ORe,"A",{href:!0});var gMt=s(jQ);Our=r(gMt,"TFRemBertForCausalLM"),gMt.forEach(t),Vur=r(ORe," (RemBERT model)"),ORe.forEach(t),Xur=i(Ce),$M=n(Ce,"LI",{});var VRe=s($M);hbe=n(VRe,"STRONG",{});var hMt=s(hbe);zur=r(hMt,"roberta"),hMt.forEach(t),Wur=r(VRe," \u2014 "),DQ=n(VRe,"A",{href:!0});var pMt=s(DQ);Qur=r(pMt,"TFRobertaForCausalLM"),pMt.forEach(t),Hur=r(VRe," (RoBERTa model)"),VRe.forEach(t),Uur=i(Ce),kM=n(Ce,"LI",{});var XRe=s(kM);pbe=n(XRe,"STRONG",{});var _Mt=s(pbe);Jur=r(_Mt,"roformer"),_Mt.forEach(t),Yur=r(XRe," \u2014 "),GQ=n(XRe,"A",{href:!0});var uMt=s(GQ);Kur=r(uMt,"TFRoFormerForCausalLM"),uMt.forEach(t),Zur=r(XRe," (RoFormer model)"),XRe.forEach(t),e2r=i(Ce),SM=n(Ce,"LI",{});var zRe=s(SM);_be=n(zRe,"STRONG",{});var bMt=s(_be);o2r=r(bMt,"transfo-xl"),bMt.forEach(t),r2r=r(zRe," \u2014 "),OQ=n(zRe,"A",{href:!0});var vMt=s(OQ);t2r=r(vMt,"TFTransfoXLLMHeadModel"),vMt.forEach(t),a2r=r(zRe," (Transformer-XL model)"),zRe.forEach(t),n2r=i(Ce),RM=n(Ce,"LI",{});var WRe=s(RM);ube=n(WRe,"STRONG",{});var FMt=s(ube);s2r=r(FMt,"xlm"),FMt.forEach(t),l2r=r(WRe," \u2014 "),VQ=n(WRe,"A",{href:!0});var TMt=s(VQ);i2r=r(TMt,"TFXLMWithLMHeadModel"),TMt.forEach(t),d2r=r(WRe," (XLM model)"),WRe.forEach(t),c2r=i(Ce),PM=n(Ce,"LI",{});var QRe=s(PM);bbe=n(QRe,"STRONG",{});var MMt=s(bbe);f2r=r(MMt,"xlnet"),MMt.forEach(t),m2r=r(QRe," \u2014 "),XQ=n(QRe,"A",{href:!0});var EMt=s(XQ);g2r=r(EMt,"TFXLNetLMHeadModel"),EMt.forEach(t),h2r=r(QRe," (XLNet model)"),QRe.forEach(t),Ce.forEach(t),p2r=i(bl),T(BM.$$.fragment,bl),bl.forEach(t),ul.forEach(t),uje=i(f),Yd=n(f,"H2",{class:!0});var EGe=s(Yd);IM=n(EGe,"A",{id:!0,class:!0,href:!0});var CMt=s(IM);vbe=n(CMt,"SPAN",{});var wMt=s(vbe);T(w8.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),_2r=i(EGe),Fbe=n(EGe,"SPAN",{});var AMt=s(Fbe);u2r=r(AMt,"TFAutoModelForImageClassification"),AMt.forEach(t),EGe.forEach(t),bje=i(f),er=n(f,"DIV",{class:!0});var vl=s(er);T(A8.$$.fragment,vl),b2r=i(vl),Kd=n(vl,"P",{});var bee=s(Kd);v2r=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zQ=n(bee,"A",{href:!0});var yMt=s(zQ);F2r=r(yMt,"from_pretrained()"),yMt.forEach(t),T2r=r(bee," class method or the "),WQ=n(bee,"A",{href:!0});var LMt=s(WQ);M2r=r(LMt,"from_config()"),LMt.forEach(t),E2r=r(bee,` class
method.`),bee.forEach(t),C2r=i(vl),y8=n(vl,"P",{});var CGe=s(y8);w2r=r(CGe,"This class cannot be instantiated directly using "),Tbe=n(CGe,"CODE",{});var xMt=s(Tbe);A2r=r(xMt,"__init__()"),xMt.forEach(t),y2r=r(CGe," (throws an error)."),CGe.forEach(t),L2r=i(vl),kt=n(vl,"DIV",{class:!0});var R6=s(kt);T(L8.$$.fragment,R6),x2r=i(R6),Mbe=n(R6,"P",{});var $Mt=s(Mbe);$2r=r($Mt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$Mt.forEach(t),k2r=i(R6),Zd=n(R6,"P",{});var vee=s(Zd);S2r=r(vee,`Note:
Loading a model from its configuration file does `),Ebe=n(vee,"STRONG",{});var kMt=s(Ebe);R2r=r(kMt,"not"),kMt.forEach(t),P2r=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(vee,"A",{href:!0});var SMt=s(QQ);B2r=r(SMt,"from_pretrained()"),SMt.forEach(t),I2r=r(vee," to load the model weights."),vee.forEach(t),N2r=i(R6),T(NM.$$.fragment,R6),R6.forEach(t),q2r=i(vl),Lr=n(vl,"DIV",{class:!0});var Fl=s(Lr);T(x8.$$.fragment,Fl),j2r=i(Fl),Cbe=n(Fl,"P",{});var RMt=s(Cbe);D2r=r(RMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),RMt.forEach(t),G2r=i(Fl),rn=n(Fl,"P",{});var P6=s(rn);O2r=r(P6,"The model class to instantiate is selected based on the "),wbe=n(P6,"CODE",{});var PMt=s(wbe);V2r=r(PMt,"model_type"),PMt.forEach(t),X2r=r(P6,` property of the config object (either
passed as an argument or loaded from `),Abe=n(P6,"CODE",{});var BMt=s(Abe);z2r=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),W2r=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(P6,"CODE",{});var IMt=s(ybe);Q2r=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),H2r=r(P6,":"),P6.forEach(t),U2r=i(Fl),et=n(Fl,"UL",{});var Tl=s(et);qM=n(Tl,"LI",{});var HRe=s(qM);Lbe=n(HRe,"STRONG",{});var NMt=s(Lbe);J2r=r(NMt,"convnext"),NMt.forEach(t),Y2r=r(HRe," \u2014 "),HQ=n(HRe,"A",{href:!0});var qMt=s(HQ);K2r=r(qMt,"TFConvNextForImageClassification"),qMt.forEach(t),Z2r=r(HRe," (ConvNext model)"),HRe.forEach(t),e1r=i(Tl),jM=n(Tl,"LI",{});var URe=s(jM);xbe=n(URe,"STRONG",{});var jMt=s(xbe);o1r=r(jMt,"data2vec-vision"),jMt.forEach(t),r1r=r(URe," \u2014 "),UQ=n(URe,"A",{href:!0});var DMt=s(UQ);t1r=r(DMt,"TFData2VecVisionForImageClassification"),DMt.forEach(t),a1r=r(URe," (Data2VecVision model)"),URe.forEach(t),n1r=i(Tl),DM=n(Tl,"LI",{});var JRe=s(DM);$be=n(JRe,"STRONG",{});var GMt=s($be);s1r=r(GMt,"resnet"),GMt.forEach(t),l1r=r(JRe," \u2014 "),JQ=n(JRe,"A",{href:!0});var OMt=s(JQ);i1r=r(OMt,"TFResNetForImageClassification"),OMt.forEach(t),d1r=r(JRe," (ResNet model)"),JRe.forEach(t),c1r=i(Tl),GM=n(Tl,"LI",{});var YRe=s(GM);kbe=n(YRe,"STRONG",{});var VMt=s(kbe);f1r=r(VMt,"swin"),VMt.forEach(t),m1r=r(YRe," \u2014 "),YQ=n(YRe,"A",{href:!0});var XMt=s(YQ);g1r=r(XMt,"TFSwinForImageClassification"),XMt.forEach(t),h1r=r(YRe," (Swin model)"),YRe.forEach(t),p1r=i(Tl),OM=n(Tl,"LI",{});var KRe=s(OM);Sbe=n(KRe,"STRONG",{});var zMt=s(Sbe);_1r=r(zMt,"vit"),zMt.forEach(t),u1r=r(KRe," \u2014 "),KQ=n(KRe,"A",{href:!0});var WMt=s(KQ);b1r=r(WMt,"TFViTForImageClassification"),WMt.forEach(t),v1r=r(KRe," (ViT model)"),KRe.forEach(t),Tl.forEach(t),F1r=i(Fl),T(VM.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),vje=i(f),ec=n(f,"H2",{class:!0});var wGe=s(ec);XM=n(wGe,"A",{id:!0,class:!0,href:!0});var QMt=s(XM);Rbe=n(QMt,"SPAN",{});var HMt=s(Rbe);T($8.$$.fragment,HMt),HMt.forEach(t),QMt.forEach(t),T1r=i(wGe),Pbe=n(wGe,"SPAN",{});var UMt=s(Pbe);M1r=r(UMt,"TFAutoModelForMaskedLM"),UMt.forEach(t),wGe.forEach(t),Fje=i(f),or=n(f,"DIV",{class:!0});var Ml=s(or);T(k8.$$.fragment,Ml),E1r=i(Ml),oc=n(Ml,"P",{});var Fee=s(oc);C1r=r(Fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ZQ=n(Fee,"A",{href:!0});var JMt=s(ZQ);w1r=r(JMt,"from_pretrained()"),JMt.forEach(t),A1r=r(Fee," class method or the "),eH=n(Fee,"A",{href:!0});var YMt=s(eH);y1r=r(YMt,"from_config()"),YMt.forEach(t),L1r=r(Fee,` class
method.`),Fee.forEach(t),x1r=i(Ml),S8=n(Ml,"P",{});var AGe=s(S8);$1r=r(AGe,"This class cannot be instantiated directly using "),Bbe=n(AGe,"CODE",{});var KMt=s(Bbe);k1r=r(KMt,"__init__()"),KMt.forEach(t),S1r=r(AGe," (throws an error)."),AGe.forEach(t),R1r=i(Ml),St=n(Ml,"DIV",{class:!0});var B6=s(St);T(R8.$$.fragment,B6),P1r=i(B6),Ibe=n(B6,"P",{});var ZMt=s(Ibe);B1r=r(ZMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ZMt.forEach(t),I1r=i(B6),rc=n(B6,"P",{});var Tee=s(rc);N1r=r(Tee,`Note:
Loading a model from its configuration file does `),Nbe=n(Tee,"STRONG",{});var eEt=s(Nbe);q1r=r(eEt,"not"),eEt.forEach(t),j1r=r(Tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oH=n(Tee,"A",{href:!0});var oEt=s(oH);D1r=r(oEt,"from_pretrained()"),oEt.forEach(t),G1r=r(Tee," to load the model weights."),Tee.forEach(t),O1r=i(B6),T(zM.$$.fragment,B6),B6.forEach(t),V1r=i(Ml),xr=n(Ml,"DIV",{class:!0});var El=s(xr);T(P8.$$.fragment,El),X1r=i(El),qbe=n(El,"P",{});var rEt=s(qbe);z1r=r(rEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rEt.forEach(t),W1r=i(El),tn=n(El,"P",{});var I6=s(tn);Q1r=r(I6,"The model class to instantiate is selected based on the "),jbe=n(I6,"CODE",{});var tEt=s(jbe);H1r=r(tEt,"model_type"),tEt.forEach(t),U1r=r(I6,` property of the config object (either
passed as an argument or loaded from `),Dbe=n(I6,"CODE",{});var aEt=s(Dbe);J1r=r(aEt,"pretrained_model_name_or_path"),aEt.forEach(t),Y1r=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gbe=n(I6,"CODE",{});var nEt=s(Gbe);K1r=r(nEt,"pretrained_model_name_or_path"),nEt.forEach(t),Z1r=r(I6,":"),I6.forEach(t),e7r=i(El),ie=n(El,"UL",{});var fe=s(ie);WM=n(fe,"LI",{});var ZRe=s(WM);Obe=n(ZRe,"STRONG",{});var sEt=s(Obe);o7r=r(sEt,"albert"),sEt.forEach(t),r7r=r(ZRe," \u2014 "),rH=n(ZRe,"A",{href:!0});var lEt=s(rH);t7r=r(lEt,"TFAlbertForMaskedLM"),lEt.forEach(t),a7r=r(ZRe," (ALBERT model)"),ZRe.forEach(t),n7r=i(fe),QM=n(fe,"LI",{});var ePe=s(QM);Vbe=n(ePe,"STRONG",{});var iEt=s(Vbe);s7r=r(iEt,"bert"),iEt.forEach(t),l7r=r(ePe," \u2014 "),tH=n(ePe,"A",{href:!0});var dEt=s(tH);i7r=r(dEt,"TFBertForMaskedLM"),dEt.forEach(t),d7r=r(ePe," (BERT model)"),ePe.forEach(t),c7r=i(fe),HM=n(fe,"LI",{});var oPe=s(HM);Xbe=n(oPe,"STRONG",{});var cEt=s(Xbe);f7r=r(cEt,"camembert"),cEt.forEach(t),m7r=r(oPe," \u2014 "),aH=n(oPe,"A",{href:!0});var fEt=s(aH);g7r=r(fEt,"TFCamembertForMaskedLM"),fEt.forEach(t),h7r=r(oPe," (CamemBERT model)"),oPe.forEach(t),p7r=i(fe),UM=n(fe,"LI",{});var rPe=s(UM);zbe=n(rPe,"STRONG",{});var mEt=s(zbe);_7r=r(mEt,"convbert"),mEt.forEach(t),u7r=r(rPe," \u2014 "),nH=n(rPe,"A",{href:!0});var gEt=s(nH);b7r=r(gEt,"TFConvBertForMaskedLM"),gEt.forEach(t),v7r=r(rPe," (ConvBERT model)"),rPe.forEach(t),F7r=i(fe),JM=n(fe,"LI",{});var tPe=s(JM);Wbe=n(tPe,"STRONG",{});var hEt=s(Wbe);T7r=r(hEt,"deberta"),hEt.forEach(t),M7r=r(tPe," \u2014 "),sH=n(tPe,"A",{href:!0});var pEt=s(sH);E7r=r(pEt,"TFDebertaForMaskedLM"),pEt.forEach(t),C7r=r(tPe," (DeBERTa model)"),tPe.forEach(t),w7r=i(fe),YM=n(fe,"LI",{});var aPe=s(YM);Qbe=n(aPe,"STRONG",{});var _Et=s(Qbe);A7r=r(_Et,"deberta-v2"),_Et.forEach(t),y7r=r(aPe," \u2014 "),lH=n(aPe,"A",{href:!0});var uEt=s(lH);L7r=r(uEt,"TFDebertaV2ForMaskedLM"),uEt.forEach(t),x7r=r(aPe," (DeBERTa-v2 model)"),aPe.forEach(t),$7r=i(fe),KM=n(fe,"LI",{});var nPe=s(KM);Hbe=n(nPe,"STRONG",{});var bEt=s(Hbe);k7r=r(bEt,"distilbert"),bEt.forEach(t),S7r=r(nPe," \u2014 "),iH=n(nPe,"A",{href:!0});var vEt=s(iH);R7r=r(vEt,"TFDistilBertForMaskedLM"),vEt.forEach(t),P7r=r(nPe," (DistilBERT model)"),nPe.forEach(t),B7r=i(fe),ZM=n(fe,"LI",{});var sPe=s(ZM);Ube=n(sPe,"STRONG",{});var FEt=s(Ube);I7r=r(FEt,"electra"),FEt.forEach(t),N7r=r(sPe," \u2014 "),dH=n(sPe,"A",{href:!0});var TEt=s(dH);q7r=r(TEt,"TFElectraForMaskedLM"),TEt.forEach(t),j7r=r(sPe," (ELECTRA model)"),sPe.forEach(t),D7r=i(fe),eE=n(fe,"LI",{});var lPe=s(eE);Jbe=n(lPe,"STRONG",{});var MEt=s(Jbe);G7r=r(MEt,"flaubert"),MEt.forEach(t),O7r=r(lPe," \u2014 "),cH=n(lPe,"A",{href:!0});var EEt=s(cH);V7r=r(EEt,"TFFlaubertWithLMHeadModel"),EEt.forEach(t),X7r=r(lPe," (FlauBERT model)"),lPe.forEach(t),z7r=i(fe),oE=n(fe,"LI",{});var iPe=s(oE);Ybe=n(iPe,"STRONG",{});var CEt=s(Ybe);W7r=r(CEt,"funnel"),CEt.forEach(t),Q7r=r(iPe," \u2014 "),fH=n(iPe,"A",{href:!0});var wEt=s(fH);H7r=r(wEt,"TFFunnelForMaskedLM"),wEt.forEach(t),U7r=r(iPe," (Funnel Transformer model)"),iPe.forEach(t),J7r=i(fe),rE=n(fe,"LI",{});var dPe=s(rE);Kbe=n(dPe,"STRONG",{});var AEt=s(Kbe);Y7r=r(AEt,"layoutlm"),AEt.forEach(t),K7r=r(dPe," \u2014 "),mH=n(dPe,"A",{href:!0});var yEt=s(mH);Z7r=r(yEt,"TFLayoutLMForMaskedLM"),yEt.forEach(t),ebr=r(dPe," (LayoutLM model)"),dPe.forEach(t),obr=i(fe),tE=n(fe,"LI",{});var cPe=s(tE);Zbe=n(cPe,"STRONG",{});var LEt=s(Zbe);rbr=r(LEt,"longformer"),LEt.forEach(t),tbr=r(cPe," \u2014 "),gH=n(cPe,"A",{href:!0});var xEt=s(gH);abr=r(xEt,"TFLongformerForMaskedLM"),xEt.forEach(t),nbr=r(cPe," (Longformer model)"),cPe.forEach(t),sbr=i(fe),aE=n(fe,"LI",{});var fPe=s(aE);e4e=n(fPe,"STRONG",{});var $Et=s(e4e);lbr=r($Et,"mobilebert"),$Et.forEach(t),ibr=r(fPe," \u2014 "),hH=n(fPe,"A",{href:!0});var kEt=s(hH);dbr=r(kEt,"TFMobileBertForMaskedLM"),kEt.forEach(t),cbr=r(fPe," (MobileBERT model)"),fPe.forEach(t),fbr=i(fe),nE=n(fe,"LI",{});var mPe=s(nE);o4e=n(mPe,"STRONG",{});var SEt=s(o4e);mbr=r(SEt,"mpnet"),SEt.forEach(t),gbr=r(mPe," \u2014 "),pH=n(mPe,"A",{href:!0});var REt=s(pH);hbr=r(REt,"TFMPNetForMaskedLM"),REt.forEach(t),pbr=r(mPe," (MPNet model)"),mPe.forEach(t),_br=i(fe),sE=n(fe,"LI",{});var gPe=s(sE);r4e=n(gPe,"STRONG",{});var PEt=s(r4e);ubr=r(PEt,"rembert"),PEt.forEach(t),bbr=r(gPe," \u2014 "),_H=n(gPe,"A",{href:!0});var BEt=s(_H);vbr=r(BEt,"TFRemBertForMaskedLM"),BEt.forEach(t),Fbr=r(gPe," (RemBERT model)"),gPe.forEach(t),Tbr=i(fe),lE=n(fe,"LI",{});var hPe=s(lE);t4e=n(hPe,"STRONG",{});var IEt=s(t4e);Mbr=r(IEt,"roberta"),IEt.forEach(t),Ebr=r(hPe," \u2014 "),uH=n(hPe,"A",{href:!0});var NEt=s(uH);Cbr=r(NEt,"TFRobertaForMaskedLM"),NEt.forEach(t),wbr=r(hPe," (RoBERTa model)"),hPe.forEach(t),Abr=i(fe),iE=n(fe,"LI",{});var pPe=s(iE);a4e=n(pPe,"STRONG",{});var qEt=s(a4e);ybr=r(qEt,"roformer"),qEt.forEach(t),Lbr=r(pPe," \u2014 "),bH=n(pPe,"A",{href:!0});var jEt=s(bH);xbr=r(jEt,"TFRoFormerForMaskedLM"),jEt.forEach(t),$br=r(pPe," (RoFormer model)"),pPe.forEach(t),kbr=i(fe),dE=n(fe,"LI",{});var _Pe=s(dE);n4e=n(_Pe,"STRONG",{});var DEt=s(n4e);Sbr=r(DEt,"tapas"),DEt.forEach(t),Rbr=r(_Pe," \u2014 "),vH=n(_Pe,"A",{href:!0});var GEt=s(vH);Pbr=r(GEt,"TFTapasForMaskedLM"),GEt.forEach(t),Bbr=r(_Pe," (TAPAS model)"),_Pe.forEach(t),Ibr=i(fe),cE=n(fe,"LI",{});var uPe=s(cE);s4e=n(uPe,"STRONG",{});var OEt=s(s4e);Nbr=r(OEt,"xlm"),OEt.forEach(t),qbr=r(uPe," \u2014 "),FH=n(uPe,"A",{href:!0});var VEt=s(FH);jbr=r(VEt,"TFXLMWithLMHeadModel"),VEt.forEach(t),Dbr=r(uPe," (XLM model)"),uPe.forEach(t),Gbr=i(fe),fE=n(fe,"LI",{});var bPe=s(fE);l4e=n(bPe,"STRONG",{});var XEt=s(l4e);Obr=r(XEt,"xlm-roberta"),XEt.forEach(t),Vbr=r(bPe," \u2014 "),TH=n(bPe,"A",{href:!0});var zEt=s(TH);Xbr=r(zEt,"TFXLMRobertaForMaskedLM"),zEt.forEach(t),zbr=r(bPe," (XLM-RoBERTa model)"),bPe.forEach(t),fe.forEach(t),Wbr=i(El),T(mE.$$.fragment,El),El.forEach(t),Ml.forEach(t),Tje=i(f),tc=n(f,"H2",{class:!0});var yGe=s(tc);gE=n(yGe,"A",{id:!0,class:!0,href:!0});var WEt=s(gE);i4e=n(WEt,"SPAN",{});var QEt=s(i4e);T(B8.$$.fragment,QEt),QEt.forEach(t),WEt.forEach(t),Qbr=i(yGe),d4e=n(yGe,"SPAN",{});var HEt=s(d4e);Hbr=r(HEt,"TFAutoModelForSeq2SeqLM"),HEt.forEach(t),yGe.forEach(t),Mje=i(f),rr=n(f,"DIV",{class:!0});var Cl=s(rr);T(I8.$$.fragment,Cl),Ubr=i(Cl),ac=n(Cl,"P",{});var Mee=s(ac);Jbr=r(Mee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),MH=n(Mee,"A",{href:!0});var UEt=s(MH);Ybr=r(UEt,"from_pretrained()"),UEt.forEach(t),Kbr=r(Mee," class method or the "),EH=n(Mee,"A",{href:!0});var JEt=s(EH);Zbr=r(JEt,"from_config()"),JEt.forEach(t),e4r=r(Mee,` class
method.`),Mee.forEach(t),o4r=i(Cl),N8=n(Cl,"P",{});var LGe=s(N8);r4r=r(LGe,"This class cannot be instantiated directly using "),c4e=n(LGe,"CODE",{});var YEt=s(c4e);t4r=r(YEt,"__init__()"),YEt.forEach(t),a4r=r(LGe," (throws an error)."),LGe.forEach(t),n4r=i(Cl),Rt=n(Cl,"DIV",{class:!0});var N6=s(Rt);T(q8.$$.fragment,N6),s4r=i(N6),f4e=n(N6,"P",{});var KEt=s(f4e);l4r=r(KEt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),KEt.forEach(t),i4r=i(N6),nc=n(N6,"P",{});var Eee=s(nc);d4r=r(Eee,`Note:
Loading a model from its configuration file does `),m4e=n(Eee,"STRONG",{});var ZEt=s(m4e);c4r=r(ZEt,"not"),ZEt.forEach(t),f4r=r(Eee,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(Eee,"A",{href:!0});var eCt=s(CH);m4r=r(eCt,"from_pretrained()"),eCt.forEach(t),g4r=r(Eee," to load the model weights."),Eee.forEach(t),h4r=i(N6),T(hE.$$.fragment,N6),N6.forEach(t),p4r=i(Cl),$r=n(Cl,"DIV",{class:!0});var wl=s($r);T(j8.$$.fragment,wl),_4r=i(wl),g4e=n(wl,"P",{});var oCt=s(g4e);u4r=r(oCt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),oCt.forEach(t),b4r=i(wl),an=n(wl,"P",{});var q6=s(an);v4r=r(q6,"The model class to instantiate is selected based on the "),h4e=n(q6,"CODE",{});var rCt=s(h4e);F4r=r(rCt,"model_type"),rCt.forEach(t),T4r=r(q6,` property of the config object (either
passed as an argument or loaded from `),p4e=n(q6,"CODE",{});var tCt=s(p4e);M4r=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),E4r=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_4e=n(q6,"CODE",{});var aCt=s(_4e);C4r=r(aCt,"pretrained_model_name_or_path"),aCt.forEach(t),w4r=r(q6,":"),q6.forEach(t),A4r=i(wl),ye=n(wl,"UL",{});var Be=s(ye);pE=n(Be,"LI",{});var vPe=s(pE);u4e=n(vPe,"STRONG",{});var nCt=s(u4e);y4r=r(nCt,"bart"),nCt.forEach(t),L4r=r(vPe," \u2014 "),wH=n(vPe,"A",{href:!0});var sCt=s(wH);x4r=r(sCt,"TFBartForConditionalGeneration"),sCt.forEach(t),$4r=r(vPe," (BART model)"),vPe.forEach(t),k4r=i(Be),_E=n(Be,"LI",{});var FPe=s(_E);b4e=n(FPe,"STRONG",{});var lCt=s(b4e);S4r=r(lCt,"blenderbot"),lCt.forEach(t),R4r=r(FPe," \u2014 "),AH=n(FPe,"A",{href:!0});var iCt=s(AH);P4r=r(iCt,"TFBlenderbotForConditionalGeneration"),iCt.forEach(t),B4r=r(FPe," (Blenderbot model)"),FPe.forEach(t),I4r=i(Be),uE=n(Be,"LI",{});var TPe=s(uE);v4e=n(TPe,"STRONG",{});var dCt=s(v4e);N4r=r(dCt,"blenderbot-small"),dCt.forEach(t),q4r=r(TPe," \u2014 "),yH=n(TPe,"A",{href:!0});var cCt=s(yH);j4r=r(cCt,"TFBlenderbotSmallForConditionalGeneration"),cCt.forEach(t),D4r=r(TPe," (BlenderbotSmall model)"),TPe.forEach(t),G4r=i(Be),bE=n(Be,"LI",{});var MPe=s(bE);F4e=n(MPe,"STRONG",{});var fCt=s(F4e);O4r=r(fCt,"encoder-decoder"),fCt.forEach(t),V4r=r(MPe," \u2014 "),LH=n(MPe,"A",{href:!0});var mCt=s(LH);X4r=r(mCt,"TFEncoderDecoderModel"),mCt.forEach(t),z4r=r(MPe," (Encoder decoder model)"),MPe.forEach(t),W4r=i(Be),vE=n(Be,"LI",{});var EPe=s(vE);T4e=n(EPe,"STRONG",{});var gCt=s(T4e);Q4r=r(gCt,"led"),gCt.forEach(t),H4r=r(EPe," \u2014 "),xH=n(EPe,"A",{href:!0});var hCt=s(xH);U4r=r(hCt,"TFLEDForConditionalGeneration"),hCt.forEach(t),J4r=r(EPe," (LED model)"),EPe.forEach(t),Y4r=i(Be),FE=n(Be,"LI",{});var CPe=s(FE);M4e=n(CPe,"STRONG",{});var pCt=s(M4e);K4r=r(pCt,"marian"),pCt.forEach(t),Z4r=r(CPe," \u2014 "),$H=n(CPe,"A",{href:!0});var _Ct=s($H);evr=r(_Ct,"TFMarianMTModel"),_Ct.forEach(t),ovr=r(CPe," (Marian model)"),CPe.forEach(t),rvr=i(Be),TE=n(Be,"LI",{});var wPe=s(TE);E4e=n(wPe,"STRONG",{});var uCt=s(E4e);tvr=r(uCt,"mbart"),uCt.forEach(t),avr=r(wPe," \u2014 "),kH=n(wPe,"A",{href:!0});var bCt=s(kH);nvr=r(bCt,"TFMBartForConditionalGeneration"),bCt.forEach(t),svr=r(wPe," (mBART model)"),wPe.forEach(t),lvr=i(Be),ME=n(Be,"LI",{});var APe=s(ME);C4e=n(APe,"STRONG",{});var vCt=s(C4e);ivr=r(vCt,"mt5"),vCt.forEach(t),dvr=r(APe," \u2014 "),SH=n(APe,"A",{href:!0});var FCt=s(SH);cvr=r(FCt,"TFMT5ForConditionalGeneration"),FCt.forEach(t),fvr=r(APe," (mT5 model)"),APe.forEach(t),mvr=i(Be),EE=n(Be,"LI",{});var yPe=s(EE);w4e=n(yPe,"STRONG",{});var TCt=s(w4e);gvr=r(TCt,"pegasus"),TCt.forEach(t),hvr=r(yPe," \u2014 "),RH=n(yPe,"A",{href:!0});var MCt=s(RH);pvr=r(MCt,"TFPegasusForConditionalGeneration"),MCt.forEach(t),_vr=r(yPe," (Pegasus model)"),yPe.forEach(t),uvr=i(Be),CE=n(Be,"LI",{});var LPe=s(CE);A4e=n(LPe,"STRONG",{});var ECt=s(A4e);bvr=r(ECt,"t5"),ECt.forEach(t),vvr=r(LPe," \u2014 "),PH=n(LPe,"A",{href:!0});var CCt=s(PH);Fvr=r(CCt,"TFT5ForConditionalGeneration"),CCt.forEach(t),Tvr=r(LPe," (T5 model)"),LPe.forEach(t),Be.forEach(t),Mvr=i(wl),T(wE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Eje=i(f),sc=n(f,"H2",{class:!0});var xGe=s(sc);AE=n(xGe,"A",{id:!0,class:!0,href:!0});var wCt=s(AE);y4e=n(wCt,"SPAN",{});var ACt=s(y4e);T(D8.$$.fragment,ACt),ACt.forEach(t),wCt.forEach(t),Evr=i(xGe),L4e=n(xGe,"SPAN",{});var yCt=s(L4e);Cvr=r(yCt,"TFAutoModelForSequenceClassification"),yCt.forEach(t),xGe.forEach(t),Cje=i(f),tr=n(f,"DIV",{class:!0});var Al=s(tr);T(G8.$$.fragment,Al),wvr=i(Al),lc=n(Al,"P",{});var Cee=s(lc);Avr=r(Cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),BH=n(Cee,"A",{href:!0});var LCt=s(BH);yvr=r(LCt,"from_pretrained()"),LCt.forEach(t),Lvr=r(Cee," class method or the "),IH=n(Cee,"A",{href:!0});var xCt=s(IH);xvr=r(xCt,"from_config()"),xCt.forEach(t),$vr=r(Cee,` class
method.`),Cee.forEach(t),kvr=i(Al),O8=n(Al,"P",{});var $Ge=s(O8);Svr=r($Ge,"This class cannot be instantiated directly using "),x4e=n($Ge,"CODE",{});var $Ct=s(x4e);Rvr=r($Ct,"__init__()"),$Ct.forEach(t),Pvr=r($Ge," (throws an error)."),$Ge.forEach(t),Bvr=i(Al),Pt=n(Al,"DIV",{class:!0});var j6=s(Pt);T(V8.$$.fragment,j6),Ivr=i(j6),$4e=n(j6,"P",{});var kCt=s($4e);Nvr=r(kCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kCt.forEach(t),qvr=i(j6),ic=n(j6,"P",{});var wee=s(ic);jvr=r(wee,`Note:
Loading a model from its configuration file does `),k4e=n(wee,"STRONG",{});var SCt=s(k4e);Dvr=r(SCt,"not"),SCt.forEach(t),Gvr=r(wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(wee,"A",{href:!0});var RCt=s(NH);Ovr=r(RCt,"from_pretrained()"),RCt.forEach(t),Vvr=r(wee," to load the model weights."),wee.forEach(t),Xvr=i(j6),T(yE.$$.fragment,j6),j6.forEach(t),zvr=i(Al),kr=n(Al,"DIV",{class:!0});var yl=s(kr);T(X8.$$.fragment,yl),Wvr=i(yl),S4e=n(yl,"P",{});var PCt=s(S4e);Qvr=r(PCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PCt.forEach(t),Hvr=i(yl),nn=n(yl,"P",{});var D6=s(nn);Uvr=r(D6,"The model class to instantiate is selected based on the "),R4e=n(D6,"CODE",{});var BCt=s(R4e);Jvr=r(BCt,"model_type"),BCt.forEach(t),Yvr=r(D6,` property of the config object (either
passed as an argument or loaded from `),P4e=n(D6,"CODE",{});var ICt=s(P4e);Kvr=r(ICt,"pretrained_model_name_or_path"),ICt.forEach(t),Zvr=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B4e=n(D6,"CODE",{});var NCt=s(B4e);eFr=r(NCt,"pretrained_model_name_or_path"),NCt.forEach(t),oFr=r(D6,":"),D6.forEach(t),rFr=i(yl),oe=n(yl,"UL",{});var ae=s(oe);LE=n(ae,"LI",{});var xPe=s(LE);I4e=n(xPe,"STRONG",{});var qCt=s(I4e);tFr=r(qCt,"albert"),qCt.forEach(t),aFr=r(xPe," \u2014 "),qH=n(xPe,"A",{href:!0});var jCt=s(qH);nFr=r(jCt,"TFAlbertForSequenceClassification"),jCt.forEach(t),sFr=r(xPe," (ALBERT model)"),xPe.forEach(t),lFr=i(ae),xE=n(ae,"LI",{});var $Pe=s(xE);N4e=n($Pe,"STRONG",{});var DCt=s(N4e);iFr=r(DCt,"bert"),DCt.forEach(t),dFr=r($Pe," \u2014 "),jH=n($Pe,"A",{href:!0});var GCt=s(jH);cFr=r(GCt,"TFBertForSequenceClassification"),GCt.forEach(t),fFr=r($Pe," (BERT model)"),$Pe.forEach(t),mFr=i(ae),$E=n(ae,"LI",{});var kPe=s($E);q4e=n(kPe,"STRONG",{});var OCt=s(q4e);gFr=r(OCt,"camembert"),OCt.forEach(t),hFr=r(kPe," \u2014 "),DH=n(kPe,"A",{href:!0});var VCt=s(DH);pFr=r(VCt,"TFCamembertForSequenceClassification"),VCt.forEach(t),_Fr=r(kPe," (CamemBERT model)"),kPe.forEach(t),uFr=i(ae),kE=n(ae,"LI",{});var SPe=s(kE);j4e=n(SPe,"STRONG",{});var XCt=s(j4e);bFr=r(XCt,"convbert"),XCt.forEach(t),vFr=r(SPe," \u2014 "),GH=n(SPe,"A",{href:!0});var zCt=s(GH);FFr=r(zCt,"TFConvBertForSequenceClassification"),zCt.forEach(t),TFr=r(SPe," (ConvBERT model)"),SPe.forEach(t),MFr=i(ae),SE=n(ae,"LI",{});var RPe=s(SE);D4e=n(RPe,"STRONG",{});var WCt=s(D4e);EFr=r(WCt,"ctrl"),WCt.forEach(t),CFr=r(RPe," \u2014 "),OH=n(RPe,"A",{href:!0});var QCt=s(OH);wFr=r(QCt,"TFCTRLForSequenceClassification"),QCt.forEach(t),AFr=r(RPe," (CTRL model)"),RPe.forEach(t),yFr=i(ae),RE=n(ae,"LI",{});var PPe=s(RE);G4e=n(PPe,"STRONG",{});var HCt=s(G4e);LFr=r(HCt,"deberta"),HCt.forEach(t),xFr=r(PPe," \u2014 "),VH=n(PPe,"A",{href:!0});var UCt=s(VH);$Fr=r(UCt,"TFDebertaForSequenceClassification"),UCt.forEach(t),kFr=r(PPe," (DeBERTa model)"),PPe.forEach(t),SFr=i(ae),PE=n(ae,"LI",{});var BPe=s(PE);O4e=n(BPe,"STRONG",{});var JCt=s(O4e);RFr=r(JCt,"deberta-v2"),JCt.forEach(t),PFr=r(BPe," \u2014 "),XH=n(BPe,"A",{href:!0});var YCt=s(XH);BFr=r(YCt,"TFDebertaV2ForSequenceClassification"),YCt.forEach(t),IFr=r(BPe," (DeBERTa-v2 model)"),BPe.forEach(t),NFr=i(ae),BE=n(ae,"LI",{});var IPe=s(BE);V4e=n(IPe,"STRONG",{});var KCt=s(V4e);qFr=r(KCt,"distilbert"),KCt.forEach(t),jFr=r(IPe," \u2014 "),zH=n(IPe,"A",{href:!0});var ZCt=s(zH);DFr=r(ZCt,"TFDistilBertForSequenceClassification"),ZCt.forEach(t),GFr=r(IPe," (DistilBERT model)"),IPe.forEach(t),OFr=i(ae),IE=n(ae,"LI",{});var NPe=s(IE);X4e=n(NPe,"STRONG",{});var e5t=s(X4e);VFr=r(e5t,"electra"),e5t.forEach(t),XFr=r(NPe," \u2014 "),WH=n(NPe,"A",{href:!0});var o5t=s(WH);zFr=r(o5t,"TFElectraForSequenceClassification"),o5t.forEach(t),WFr=r(NPe," (ELECTRA model)"),NPe.forEach(t),QFr=i(ae),NE=n(ae,"LI",{});var qPe=s(NE);z4e=n(qPe,"STRONG",{});var r5t=s(z4e);HFr=r(r5t,"flaubert"),r5t.forEach(t),UFr=r(qPe," \u2014 "),QH=n(qPe,"A",{href:!0});var t5t=s(QH);JFr=r(t5t,"TFFlaubertForSequenceClassification"),t5t.forEach(t),YFr=r(qPe," (FlauBERT model)"),qPe.forEach(t),KFr=i(ae),qE=n(ae,"LI",{});var jPe=s(qE);W4e=n(jPe,"STRONG",{});var a5t=s(W4e);ZFr=r(a5t,"funnel"),a5t.forEach(t),eTr=r(jPe," \u2014 "),HH=n(jPe,"A",{href:!0});var n5t=s(HH);oTr=r(n5t,"TFFunnelForSequenceClassification"),n5t.forEach(t),rTr=r(jPe," (Funnel Transformer model)"),jPe.forEach(t),tTr=i(ae),jE=n(ae,"LI",{});var DPe=s(jE);Q4e=n(DPe,"STRONG",{});var s5t=s(Q4e);aTr=r(s5t,"gpt2"),s5t.forEach(t),nTr=r(DPe," \u2014 "),UH=n(DPe,"A",{href:!0});var l5t=s(UH);sTr=r(l5t,"TFGPT2ForSequenceClassification"),l5t.forEach(t),lTr=r(DPe," (OpenAI GPT-2 model)"),DPe.forEach(t),iTr=i(ae),DE=n(ae,"LI",{});var GPe=s(DE);H4e=n(GPe,"STRONG",{});var i5t=s(H4e);dTr=r(i5t,"gptj"),i5t.forEach(t),cTr=r(GPe," \u2014 "),JH=n(GPe,"A",{href:!0});var d5t=s(JH);fTr=r(d5t,"TFGPTJForSequenceClassification"),d5t.forEach(t),mTr=r(GPe," (GPT-J model)"),GPe.forEach(t),gTr=i(ae),GE=n(ae,"LI",{});var OPe=s(GE);U4e=n(OPe,"STRONG",{});var c5t=s(U4e);hTr=r(c5t,"layoutlm"),c5t.forEach(t),pTr=r(OPe," \u2014 "),YH=n(OPe,"A",{href:!0});var f5t=s(YH);_Tr=r(f5t,"TFLayoutLMForSequenceClassification"),f5t.forEach(t),uTr=r(OPe," (LayoutLM model)"),OPe.forEach(t),bTr=i(ae),OE=n(ae,"LI",{});var VPe=s(OE);J4e=n(VPe,"STRONG",{});var m5t=s(J4e);vTr=r(m5t,"longformer"),m5t.forEach(t),FTr=r(VPe," \u2014 "),KH=n(VPe,"A",{href:!0});var g5t=s(KH);TTr=r(g5t,"TFLongformerForSequenceClassification"),g5t.forEach(t),MTr=r(VPe," (Longformer model)"),VPe.forEach(t),ETr=i(ae),VE=n(ae,"LI",{});var XPe=s(VE);Y4e=n(XPe,"STRONG",{});var h5t=s(Y4e);CTr=r(h5t,"mobilebert"),h5t.forEach(t),wTr=r(XPe," \u2014 "),ZH=n(XPe,"A",{href:!0});var p5t=s(ZH);ATr=r(p5t,"TFMobileBertForSequenceClassification"),p5t.forEach(t),yTr=r(XPe," (MobileBERT model)"),XPe.forEach(t),LTr=i(ae),XE=n(ae,"LI",{});var zPe=s(XE);K4e=n(zPe,"STRONG",{});var _5t=s(K4e);xTr=r(_5t,"mpnet"),_5t.forEach(t),$Tr=r(zPe," \u2014 "),eU=n(zPe,"A",{href:!0});var u5t=s(eU);kTr=r(u5t,"TFMPNetForSequenceClassification"),u5t.forEach(t),STr=r(zPe," (MPNet model)"),zPe.forEach(t),RTr=i(ae),zE=n(ae,"LI",{});var WPe=s(zE);Z4e=n(WPe,"STRONG",{});var b5t=s(Z4e);PTr=r(b5t,"openai-gpt"),b5t.forEach(t),BTr=r(WPe," \u2014 "),oU=n(WPe,"A",{href:!0});var v5t=s(oU);ITr=r(v5t,"TFOpenAIGPTForSequenceClassification"),v5t.forEach(t),NTr=r(WPe," (OpenAI GPT model)"),WPe.forEach(t),qTr=i(ae),WE=n(ae,"LI",{});var QPe=s(WE);eve=n(QPe,"STRONG",{});var F5t=s(eve);jTr=r(F5t,"rembert"),F5t.forEach(t),DTr=r(QPe," \u2014 "),rU=n(QPe,"A",{href:!0});var T5t=s(rU);GTr=r(T5t,"TFRemBertForSequenceClassification"),T5t.forEach(t),OTr=r(QPe," (RemBERT model)"),QPe.forEach(t),VTr=i(ae),QE=n(ae,"LI",{});var HPe=s(QE);ove=n(HPe,"STRONG",{});var M5t=s(ove);XTr=r(M5t,"roberta"),M5t.forEach(t),zTr=r(HPe," \u2014 "),tU=n(HPe,"A",{href:!0});var E5t=s(tU);WTr=r(E5t,"TFRobertaForSequenceClassification"),E5t.forEach(t),QTr=r(HPe," (RoBERTa model)"),HPe.forEach(t),HTr=i(ae),HE=n(ae,"LI",{});var UPe=s(HE);rve=n(UPe,"STRONG",{});var C5t=s(rve);UTr=r(C5t,"roformer"),C5t.forEach(t),JTr=r(UPe," \u2014 "),aU=n(UPe,"A",{href:!0});var w5t=s(aU);YTr=r(w5t,"TFRoFormerForSequenceClassification"),w5t.forEach(t),KTr=r(UPe," (RoFormer model)"),UPe.forEach(t),ZTr=i(ae),UE=n(ae,"LI",{});var JPe=s(UE);tve=n(JPe,"STRONG",{});var A5t=s(tve);eMr=r(A5t,"tapas"),A5t.forEach(t),oMr=r(JPe," \u2014 "),nU=n(JPe,"A",{href:!0});var y5t=s(nU);rMr=r(y5t,"TFTapasForSequenceClassification"),y5t.forEach(t),tMr=r(JPe," (TAPAS model)"),JPe.forEach(t),aMr=i(ae),JE=n(ae,"LI",{});var YPe=s(JE);ave=n(YPe,"STRONG",{});var L5t=s(ave);nMr=r(L5t,"transfo-xl"),L5t.forEach(t),sMr=r(YPe," \u2014 "),sU=n(YPe,"A",{href:!0});var x5t=s(sU);lMr=r(x5t,"TFTransfoXLForSequenceClassification"),x5t.forEach(t),iMr=r(YPe," (Transformer-XL model)"),YPe.forEach(t),dMr=i(ae),YE=n(ae,"LI",{});var KPe=s(YE);nve=n(KPe,"STRONG",{});var $5t=s(nve);cMr=r($5t,"xlm"),$5t.forEach(t),fMr=r(KPe," \u2014 "),lU=n(KPe,"A",{href:!0});var k5t=s(lU);mMr=r(k5t,"TFXLMForSequenceClassification"),k5t.forEach(t),gMr=r(KPe," (XLM model)"),KPe.forEach(t),hMr=i(ae),KE=n(ae,"LI",{});var ZPe=s(KE);sve=n(ZPe,"STRONG",{});var S5t=s(sve);pMr=r(S5t,"xlm-roberta"),S5t.forEach(t),_Mr=r(ZPe," \u2014 "),iU=n(ZPe,"A",{href:!0});var R5t=s(iU);uMr=r(R5t,"TFXLMRobertaForSequenceClassification"),R5t.forEach(t),bMr=r(ZPe," (XLM-RoBERTa model)"),ZPe.forEach(t),vMr=i(ae),ZE=n(ae,"LI",{});var eBe=s(ZE);lve=n(eBe,"STRONG",{});var P5t=s(lve);FMr=r(P5t,"xlnet"),P5t.forEach(t),TMr=r(eBe," \u2014 "),dU=n(eBe,"A",{href:!0});var B5t=s(dU);MMr=r(B5t,"TFXLNetForSequenceClassification"),B5t.forEach(t),EMr=r(eBe," (XLNet model)"),eBe.forEach(t),ae.forEach(t),CMr=i(yl),T(eC.$$.fragment,yl),yl.forEach(t),Al.forEach(t),wje=i(f),dc=n(f,"H2",{class:!0});var kGe=s(dc);oC=n(kGe,"A",{id:!0,class:!0,href:!0});var I5t=s(oC);ive=n(I5t,"SPAN",{});var N5t=s(ive);T(z8.$$.fragment,N5t),N5t.forEach(t),I5t.forEach(t),wMr=i(kGe),dve=n(kGe,"SPAN",{});var q5t=s(dve);AMr=r(q5t,"TFAutoModelForMultipleChoice"),q5t.forEach(t),kGe.forEach(t),Aje=i(f),ar=n(f,"DIV",{class:!0});var Ll=s(ar);T(W8.$$.fragment,Ll),yMr=i(Ll),cc=n(Ll,"P",{});var Aee=s(cc);LMr=r(Aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cU=n(Aee,"A",{href:!0});var j5t=s(cU);xMr=r(j5t,"from_pretrained()"),j5t.forEach(t),$Mr=r(Aee," class method or the "),fU=n(Aee,"A",{href:!0});var D5t=s(fU);kMr=r(D5t,"from_config()"),D5t.forEach(t),SMr=r(Aee,` class
method.`),Aee.forEach(t),RMr=i(Ll),Q8=n(Ll,"P",{});var SGe=s(Q8);PMr=r(SGe,"This class cannot be instantiated directly using "),cve=n(SGe,"CODE",{});var G5t=s(cve);BMr=r(G5t,"__init__()"),G5t.forEach(t),IMr=r(SGe," (throws an error)."),SGe.forEach(t),NMr=i(Ll),Bt=n(Ll,"DIV",{class:!0});var G6=s(Bt);T(H8.$$.fragment,G6),qMr=i(G6),fve=n(G6,"P",{});var O5t=s(fve);jMr=r(O5t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O5t.forEach(t),DMr=i(G6),fc=n(G6,"P",{});var yee=s(fc);GMr=r(yee,`Note:
Loading a model from its configuration file does `),mve=n(yee,"STRONG",{});var V5t=s(mve);OMr=r(V5t,"not"),V5t.forEach(t),VMr=r(yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(yee,"A",{href:!0});var X5t=s(mU);XMr=r(X5t,"from_pretrained()"),X5t.forEach(t),zMr=r(yee," to load the model weights."),yee.forEach(t),WMr=i(G6),T(rC.$$.fragment,G6),G6.forEach(t),QMr=i(Ll),Sr=n(Ll,"DIV",{class:!0});var xl=s(Sr);T(U8.$$.fragment,xl),HMr=i(xl),gve=n(xl,"P",{});var z5t=s(gve);UMr=r(z5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z5t.forEach(t),JMr=i(xl),sn=n(xl,"P",{});var O6=s(sn);YMr=r(O6,"The model class to instantiate is selected based on the "),hve=n(O6,"CODE",{});var W5t=s(hve);KMr=r(W5t,"model_type"),W5t.forEach(t),ZMr=r(O6,` property of the config object (either
passed as an argument or loaded from `),pve=n(O6,"CODE",{});var Q5t=s(pve);eEr=r(Q5t,"pretrained_model_name_or_path"),Q5t.forEach(t),oEr=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(O6,"CODE",{});var H5t=s(_ve);rEr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),tEr=r(O6,":"),O6.forEach(t),aEr=i(xl),pe=n(xl,"UL",{});var be=s(pe);tC=n(be,"LI",{});var oBe=s(tC);uve=n(oBe,"STRONG",{});var U5t=s(uve);nEr=r(U5t,"albert"),U5t.forEach(t),sEr=r(oBe," \u2014 "),gU=n(oBe,"A",{href:!0});var J5t=s(gU);lEr=r(J5t,"TFAlbertForMultipleChoice"),J5t.forEach(t),iEr=r(oBe," (ALBERT model)"),oBe.forEach(t),dEr=i(be),aC=n(be,"LI",{});var rBe=s(aC);bve=n(rBe,"STRONG",{});var Y5t=s(bve);cEr=r(Y5t,"bert"),Y5t.forEach(t),fEr=r(rBe," \u2014 "),hU=n(rBe,"A",{href:!0});var K5t=s(hU);mEr=r(K5t,"TFBertForMultipleChoice"),K5t.forEach(t),gEr=r(rBe," (BERT model)"),rBe.forEach(t),hEr=i(be),nC=n(be,"LI",{});var tBe=s(nC);vve=n(tBe,"STRONG",{});var Z5t=s(vve);pEr=r(Z5t,"camembert"),Z5t.forEach(t),_Er=r(tBe," \u2014 "),pU=n(tBe,"A",{href:!0});var e3t=s(pU);uEr=r(e3t,"TFCamembertForMultipleChoice"),e3t.forEach(t),bEr=r(tBe," (CamemBERT model)"),tBe.forEach(t),vEr=i(be),sC=n(be,"LI",{});var aBe=s(sC);Fve=n(aBe,"STRONG",{});var o3t=s(Fve);FEr=r(o3t,"convbert"),o3t.forEach(t),TEr=r(aBe," \u2014 "),_U=n(aBe,"A",{href:!0});var r3t=s(_U);MEr=r(r3t,"TFConvBertForMultipleChoice"),r3t.forEach(t),EEr=r(aBe," (ConvBERT model)"),aBe.forEach(t),CEr=i(be),lC=n(be,"LI",{});var nBe=s(lC);Tve=n(nBe,"STRONG",{});var t3t=s(Tve);wEr=r(t3t,"distilbert"),t3t.forEach(t),AEr=r(nBe," \u2014 "),uU=n(nBe,"A",{href:!0});var a3t=s(uU);yEr=r(a3t,"TFDistilBertForMultipleChoice"),a3t.forEach(t),LEr=r(nBe," (DistilBERT model)"),nBe.forEach(t),xEr=i(be),iC=n(be,"LI",{});var sBe=s(iC);Mve=n(sBe,"STRONG",{});var n3t=s(Mve);$Er=r(n3t,"electra"),n3t.forEach(t),kEr=r(sBe," \u2014 "),bU=n(sBe,"A",{href:!0});var s3t=s(bU);SEr=r(s3t,"TFElectraForMultipleChoice"),s3t.forEach(t),REr=r(sBe," (ELECTRA model)"),sBe.forEach(t),PEr=i(be),dC=n(be,"LI",{});var lBe=s(dC);Eve=n(lBe,"STRONG",{});var l3t=s(Eve);BEr=r(l3t,"flaubert"),l3t.forEach(t),IEr=r(lBe," \u2014 "),vU=n(lBe,"A",{href:!0});var i3t=s(vU);NEr=r(i3t,"TFFlaubertForMultipleChoice"),i3t.forEach(t),qEr=r(lBe," (FlauBERT model)"),lBe.forEach(t),jEr=i(be),cC=n(be,"LI",{});var iBe=s(cC);Cve=n(iBe,"STRONG",{});var d3t=s(Cve);DEr=r(d3t,"funnel"),d3t.forEach(t),GEr=r(iBe," \u2014 "),FU=n(iBe,"A",{href:!0});var c3t=s(FU);OEr=r(c3t,"TFFunnelForMultipleChoice"),c3t.forEach(t),VEr=r(iBe," (Funnel Transformer model)"),iBe.forEach(t),XEr=i(be),fC=n(be,"LI",{});var dBe=s(fC);wve=n(dBe,"STRONG",{});var f3t=s(wve);zEr=r(f3t,"longformer"),f3t.forEach(t),WEr=r(dBe," \u2014 "),TU=n(dBe,"A",{href:!0});var m3t=s(TU);QEr=r(m3t,"TFLongformerForMultipleChoice"),m3t.forEach(t),HEr=r(dBe," (Longformer model)"),dBe.forEach(t),UEr=i(be),mC=n(be,"LI",{});var cBe=s(mC);Ave=n(cBe,"STRONG",{});var g3t=s(Ave);JEr=r(g3t,"mobilebert"),g3t.forEach(t),YEr=r(cBe," \u2014 "),MU=n(cBe,"A",{href:!0});var h3t=s(MU);KEr=r(h3t,"TFMobileBertForMultipleChoice"),h3t.forEach(t),ZEr=r(cBe," (MobileBERT model)"),cBe.forEach(t),eCr=i(be),gC=n(be,"LI",{});var fBe=s(gC);yve=n(fBe,"STRONG",{});var p3t=s(yve);oCr=r(p3t,"mpnet"),p3t.forEach(t),rCr=r(fBe," \u2014 "),EU=n(fBe,"A",{href:!0});var _3t=s(EU);tCr=r(_3t,"TFMPNetForMultipleChoice"),_3t.forEach(t),aCr=r(fBe," (MPNet model)"),fBe.forEach(t),nCr=i(be),hC=n(be,"LI",{});var mBe=s(hC);Lve=n(mBe,"STRONG",{});var u3t=s(Lve);sCr=r(u3t,"rembert"),u3t.forEach(t),lCr=r(mBe," \u2014 "),CU=n(mBe,"A",{href:!0});var b3t=s(CU);iCr=r(b3t,"TFRemBertForMultipleChoice"),b3t.forEach(t),dCr=r(mBe," (RemBERT model)"),mBe.forEach(t),cCr=i(be),pC=n(be,"LI",{});var gBe=s(pC);xve=n(gBe,"STRONG",{});var v3t=s(xve);fCr=r(v3t,"roberta"),v3t.forEach(t),mCr=r(gBe," \u2014 "),wU=n(gBe,"A",{href:!0});var F3t=s(wU);gCr=r(F3t,"TFRobertaForMultipleChoice"),F3t.forEach(t),hCr=r(gBe," (RoBERTa model)"),gBe.forEach(t),pCr=i(be),_C=n(be,"LI",{});var hBe=s(_C);$ve=n(hBe,"STRONG",{});var T3t=s($ve);_Cr=r(T3t,"roformer"),T3t.forEach(t),uCr=r(hBe," \u2014 "),AU=n(hBe,"A",{href:!0});var M3t=s(AU);bCr=r(M3t,"TFRoFormerForMultipleChoice"),M3t.forEach(t),vCr=r(hBe," (RoFormer model)"),hBe.forEach(t),FCr=i(be),uC=n(be,"LI",{});var pBe=s(uC);kve=n(pBe,"STRONG",{});var E3t=s(kve);TCr=r(E3t,"xlm"),E3t.forEach(t),MCr=r(pBe," \u2014 "),yU=n(pBe,"A",{href:!0});var C3t=s(yU);ECr=r(C3t,"TFXLMForMultipleChoice"),C3t.forEach(t),CCr=r(pBe," (XLM model)"),pBe.forEach(t),wCr=i(be),bC=n(be,"LI",{});var _Be=s(bC);Sve=n(_Be,"STRONG",{});var w3t=s(Sve);ACr=r(w3t,"xlm-roberta"),w3t.forEach(t),yCr=r(_Be," \u2014 "),LU=n(_Be,"A",{href:!0});var A3t=s(LU);LCr=r(A3t,"TFXLMRobertaForMultipleChoice"),A3t.forEach(t),xCr=r(_Be," (XLM-RoBERTa model)"),_Be.forEach(t),$Cr=i(be),vC=n(be,"LI",{});var uBe=s(vC);Rve=n(uBe,"STRONG",{});var y3t=s(Rve);kCr=r(y3t,"xlnet"),y3t.forEach(t),SCr=r(uBe," \u2014 "),xU=n(uBe,"A",{href:!0});var L3t=s(xU);RCr=r(L3t,"TFXLNetForMultipleChoice"),L3t.forEach(t),PCr=r(uBe," (XLNet model)"),uBe.forEach(t),be.forEach(t),BCr=i(xl),T(FC.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),yje=i(f),mc=n(f,"H2",{class:!0});var RGe=s(mc);TC=n(RGe,"A",{id:!0,class:!0,href:!0});var x3t=s(TC);Pve=n(x3t,"SPAN",{});var $3t=s(Pve);T(J8.$$.fragment,$3t),$3t.forEach(t),x3t.forEach(t),ICr=i(RGe),Bve=n(RGe,"SPAN",{});var k3t=s(Bve);NCr=r(k3t,"TFAutoModelForNextSentencePrediction"),k3t.forEach(t),RGe.forEach(t),Lje=i(f),nr=n(f,"DIV",{class:!0});var $l=s(nr);T(Y8.$$.fragment,$l),qCr=i($l),gc=n($l,"P",{});var Lee=s(gc);jCr=r(Lee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),$U=n(Lee,"A",{href:!0});var S3t=s($U);DCr=r(S3t,"from_pretrained()"),S3t.forEach(t),GCr=r(Lee," class method or the "),kU=n(Lee,"A",{href:!0});var R3t=s(kU);OCr=r(R3t,"from_config()"),R3t.forEach(t),VCr=r(Lee,` class
method.`),Lee.forEach(t),XCr=i($l),K8=n($l,"P",{});var PGe=s(K8);zCr=r(PGe,"This class cannot be instantiated directly using "),Ive=n(PGe,"CODE",{});var P3t=s(Ive);WCr=r(P3t,"__init__()"),P3t.forEach(t),QCr=r(PGe," (throws an error)."),PGe.forEach(t),HCr=i($l),It=n($l,"DIV",{class:!0});var V6=s(It);T(Z8.$$.fragment,V6),UCr=i(V6),Nve=n(V6,"P",{});var B3t=s(Nve);JCr=r(B3t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),B3t.forEach(t),YCr=i(V6),hc=n(V6,"P",{});var xee=s(hc);KCr=r(xee,`Note:
Loading a model from its configuration file does `),qve=n(xee,"STRONG",{});var I3t=s(qve);ZCr=r(I3t,"not"),I3t.forEach(t),e5r=r(xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SU=n(xee,"A",{href:!0});var N3t=s(SU);o5r=r(N3t,"from_pretrained()"),N3t.forEach(t),r5r=r(xee," to load the model weights."),xee.forEach(t),t5r=i(V6),T(MC.$$.fragment,V6),V6.forEach(t),a5r=i($l),Rr=n($l,"DIV",{class:!0});var kl=s(Rr);T(e9.$$.fragment,kl),n5r=i(kl),jve=n(kl,"P",{});var q3t=s(jve);s5r=r(q3t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),q3t.forEach(t),l5r=i(kl),ln=n(kl,"P",{});var X6=s(ln);i5r=r(X6,"The model class to instantiate is selected based on the "),Dve=n(X6,"CODE",{});var j3t=s(Dve);d5r=r(j3t,"model_type"),j3t.forEach(t),c5r=r(X6,` property of the config object (either
passed as an argument or loaded from `),Gve=n(X6,"CODE",{});var D3t=s(Gve);f5r=r(D3t,"pretrained_model_name_or_path"),D3t.forEach(t),m5r=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ove=n(X6,"CODE",{});var G3t=s(Ove);g5r=r(G3t,"pretrained_model_name_or_path"),G3t.forEach(t),h5r=r(X6,":"),X6.forEach(t),p5r=i(kl),o9=n(kl,"UL",{});var BGe=s(o9);EC=n(BGe,"LI",{});var bBe=s(EC);Vve=n(bBe,"STRONG",{});var O3t=s(Vve);_5r=r(O3t,"bert"),O3t.forEach(t),u5r=r(bBe," \u2014 "),RU=n(bBe,"A",{href:!0});var V3t=s(RU);b5r=r(V3t,"TFBertForNextSentencePrediction"),V3t.forEach(t),v5r=r(bBe," (BERT model)"),bBe.forEach(t),F5r=i(BGe),CC=n(BGe,"LI",{});var vBe=s(CC);Xve=n(vBe,"STRONG",{});var X3t=s(Xve);T5r=r(X3t,"mobilebert"),X3t.forEach(t),M5r=r(vBe," \u2014 "),PU=n(vBe,"A",{href:!0});var z3t=s(PU);E5r=r(z3t,"TFMobileBertForNextSentencePrediction"),z3t.forEach(t),C5r=r(vBe," (MobileBERT model)"),vBe.forEach(t),BGe.forEach(t),w5r=i(kl),T(wC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),xje=i(f),pc=n(f,"H2",{class:!0});var IGe=s(pc);AC=n(IGe,"A",{id:!0,class:!0,href:!0});var W3t=s(AC);zve=n(W3t,"SPAN",{});var Q3t=s(zve);T(r9.$$.fragment,Q3t),Q3t.forEach(t),W3t.forEach(t),A5r=i(IGe),Wve=n(IGe,"SPAN",{});var H3t=s(Wve);y5r=r(H3t,"TFAutoModelForTableQuestionAnswering"),H3t.forEach(t),IGe.forEach(t),$je=i(f),sr=n(f,"DIV",{class:!0});var Sl=s(sr);T(t9.$$.fragment,Sl),L5r=i(Sl),_c=n(Sl,"P",{});var $ee=s(_c);x5r=r($ee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),BU=n($ee,"A",{href:!0});var U3t=s(BU);$5r=r(U3t,"from_pretrained()"),U3t.forEach(t),k5r=r($ee," class method or the "),IU=n($ee,"A",{href:!0});var J3t=s(IU);S5r=r(J3t,"from_config()"),J3t.forEach(t),R5r=r($ee,` class
method.`),$ee.forEach(t),P5r=i(Sl),a9=n(Sl,"P",{});var NGe=s(a9);B5r=r(NGe,"This class cannot be instantiated directly using "),Qve=n(NGe,"CODE",{});var Y3t=s(Qve);I5r=r(Y3t,"__init__()"),Y3t.forEach(t),N5r=r(NGe," (throws an error)."),NGe.forEach(t),q5r=i(Sl),Nt=n(Sl,"DIV",{class:!0});var z6=s(Nt);T(n9.$$.fragment,z6),j5r=i(z6),Hve=n(z6,"P",{});var K3t=s(Hve);D5r=r(K3t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),K3t.forEach(t),G5r=i(z6),uc=n(z6,"P",{});var kee=s(uc);O5r=r(kee,`Note:
Loading a model from its configuration file does `),Uve=n(kee,"STRONG",{});var Z3t=s(Uve);V5r=r(Z3t,"not"),Z3t.forEach(t),X5r=r(kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NU=n(kee,"A",{href:!0});var ewt=s(NU);z5r=r(ewt,"from_pretrained()"),ewt.forEach(t),W5r=r(kee," to load the model weights."),kee.forEach(t),Q5r=i(z6),T(yC.$$.fragment,z6),z6.forEach(t),H5r=i(Sl),Pr=n(Sl,"DIV",{class:!0});var Rl=s(Pr);T(s9.$$.fragment,Rl),U5r=i(Rl),Jve=n(Rl,"P",{});var owt=s(Jve);J5r=r(owt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),owt.forEach(t),Y5r=i(Rl),dn=n(Rl,"P",{});var W6=s(dn);K5r=r(W6,"The model class to instantiate is selected based on the "),Yve=n(W6,"CODE",{});var rwt=s(Yve);Z5r=r(rwt,"model_type"),rwt.forEach(t),e3r=r(W6,` property of the config object (either
passed as an argument or loaded from `),Kve=n(W6,"CODE",{});var twt=s(Kve);o3r=r(twt,"pretrained_model_name_or_path"),twt.forEach(t),r3r=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(W6,"CODE",{});var awt=s(Zve);t3r=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),a3r=r(W6,":"),W6.forEach(t),n3r=i(Rl),eFe=n(Rl,"UL",{});var nwt=s(eFe);LC=n(nwt,"LI",{});var FBe=s(LC);oFe=n(FBe,"STRONG",{});var swt=s(oFe);s3r=r(swt,"tapas"),swt.forEach(t),l3r=r(FBe," \u2014 "),qU=n(FBe,"A",{href:!0});var lwt=s(qU);i3r=r(lwt,"TFTapasForQuestionAnswering"),lwt.forEach(t),d3r=r(FBe," (TAPAS model)"),FBe.forEach(t),nwt.forEach(t),c3r=i(Rl),T(xC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),kje=i(f),bc=n(f,"H2",{class:!0});var qGe=s(bc);$C=n(qGe,"A",{id:!0,class:!0,href:!0});var iwt=s($C);rFe=n(iwt,"SPAN",{});var dwt=s(rFe);T(l9.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),f3r=i(qGe),tFe=n(qGe,"SPAN",{});var cwt=s(tFe);m3r=r(cwt,"TFAutoModelForTokenClassification"),cwt.forEach(t),qGe.forEach(t),Sje=i(f),lr=n(f,"DIV",{class:!0});var Pl=s(lr);T(i9.$$.fragment,Pl),g3r=i(Pl),vc=n(Pl,"P",{});var See=s(vc);h3r=r(See,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),jU=n(See,"A",{href:!0});var fwt=s(jU);p3r=r(fwt,"from_pretrained()"),fwt.forEach(t),_3r=r(See," class method or the "),DU=n(See,"A",{href:!0});var mwt=s(DU);u3r=r(mwt,"from_config()"),mwt.forEach(t),b3r=r(See,` class
method.`),See.forEach(t),v3r=i(Pl),d9=n(Pl,"P",{});var jGe=s(d9);F3r=r(jGe,"This class cannot be instantiated directly using "),aFe=n(jGe,"CODE",{});var gwt=s(aFe);T3r=r(gwt,"__init__()"),gwt.forEach(t),M3r=r(jGe," (throws an error)."),jGe.forEach(t),E3r=i(Pl),qt=n(Pl,"DIV",{class:!0});var Q6=s(qt);T(c9.$$.fragment,Q6),C3r=i(Q6),nFe=n(Q6,"P",{});var hwt=s(nFe);w3r=r(hwt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hwt.forEach(t),A3r=i(Q6),Fc=n(Q6,"P",{});var Ree=s(Fc);y3r=r(Ree,`Note:
Loading a model from its configuration file does `),sFe=n(Ree,"STRONG",{});var pwt=s(sFe);L3r=r(pwt,"not"),pwt.forEach(t),x3r=r(Ree,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(Ree,"A",{href:!0});var _wt=s(GU);$3r=r(_wt,"from_pretrained()"),_wt.forEach(t),k3r=r(Ree," to load the model weights."),Ree.forEach(t),S3r=i(Q6),T(kC.$$.fragment,Q6),Q6.forEach(t),R3r=i(Pl),Br=n(Pl,"DIV",{class:!0});var Bl=s(Br);T(f9.$$.fragment,Bl),P3r=i(Bl),lFe=n(Bl,"P",{});var uwt=s(lFe);B3r=r(uwt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),uwt.forEach(t),I3r=i(Bl),cn=n(Bl,"P",{});var H6=s(cn);N3r=r(H6,"The model class to instantiate is selected based on the "),iFe=n(H6,"CODE",{});var bwt=s(iFe);q3r=r(bwt,"model_type"),bwt.forEach(t),j3r=r(H6,` property of the config object (either
passed as an argument or loaded from `),dFe=n(H6,"CODE",{});var vwt=s(dFe);D3r=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),G3r=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cFe=n(H6,"CODE",{});var Fwt=s(cFe);O3r=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),V3r=r(H6,":"),H6.forEach(t),X3r=i(Bl),de=n(Bl,"UL",{});var me=s(de);SC=n(me,"LI",{});var TBe=s(SC);fFe=n(TBe,"STRONG",{});var Twt=s(fFe);z3r=r(Twt,"albert"),Twt.forEach(t),W3r=r(TBe," \u2014 "),OU=n(TBe,"A",{href:!0});var Mwt=s(OU);Q3r=r(Mwt,"TFAlbertForTokenClassification"),Mwt.forEach(t),H3r=r(TBe," (ALBERT model)"),TBe.forEach(t),U3r=i(me),RC=n(me,"LI",{});var MBe=s(RC);mFe=n(MBe,"STRONG",{});var Ewt=s(mFe);J3r=r(Ewt,"bert"),Ewt.forEach(t),Y3r=r(MBe," \u2014 "),VU=n(MBe,"A",{href:!0});var Cwt=s(VU);K3r=r(Cwt,"TFBertForTokenClassification"),Cwt.forEach(t),Z3r=r(MBe," (BERT model)"),MBe.forEach(t),ewr=i(me),PC=n(me,"LI",{});var EBe=s(PC);gFe=n(EBe,"STRONG",{});var wwt=s(gFe);owr=r(wwt,"camembert"),wwt.forEach(t),rwr=r(EBe," \u2014 "),XU=n(EBe,"A",{href:!0});var Awt=s(XU);twr=r(Awt,"TFCamembertForTokenClassification"),Awt.forEach(t),awr=r(EBe," (CamemBERT model)"),EBe.forEach(t),nwr=i(me),BC=n(me,"LI",{});var CBe=s(BC);hFe=n(CBe,"STRONG",{});var ywt=s(hFe);swr=r(ywt,"convbert"),ywt.forEach(t),lwr=r(CBe," \u2014 "),zU=n(CBe,"A",{href:!0});var Lwt=s(zU);iwr=r(Lwt,"TFConvBertForTokenClassification"),Lwt.forEach(t),dwr=r(CBe," (ConvBERT model)"),CBe.forEach(t),cwr=i(me),IC=n(me,"LI",{});var wBe=s(IC);pFe=n(wBe,"STRONG",{});var xwt=s(pFe);fwr=r(xwt,"deberta"),xwt.forEach(t),mwr=r(wBe," \u2014 "),WU=n(wBe,"A",{href:!0});var $wt=s(WU);gwr=r($wt,"TFDebertaForTokenClassification"),$wt.forEach(t),hwr=r(wBe," (DeBERTa model)"),wBe.forEach(t),pwr=i(me),NC=n(me,"LI",{});var ABe=s(NC);_Fe=n(ABe,"STRONG",{});var kwt=s(_Fe);_wr=r(kwt,"deberta-v2"),kwt.forEach(t),uwr=r(ABe," \u2014 "),QU=n(ABe,"A",{href:!0});var Swt=s(QU);bwr=r(Swt,"TFDebertaV2ForTokenClassification"),Swt.forEach(t),vwr=r(ABe," (DeBERTa-v2 model)"),ABe.forEach(t),Fwr=i(me),qC=n(me,"LI",{});var yBe=s(qC);uFe=n(yBe,"STRONG",{});var Rwt=s(uFe);Twr=r(Rwt,"distilbert"),Rwt.forEach(t),Mwr=r(yBe," \u2014 "),HU=n(yBe,"A",{href:!0});var Pwt=s(HU);Ewr=r(Pwt,"TFDistilBertForTokenClassification"),Pwt.forEach(t),Cwr=r(yBe," (DistilBERT model)"),yBe.forEach(t),wwr=i(me),jC=n(me,"LI",{});var LBe=s(jC);bFe=n(LBe,"STRONG",{});var Bwt=s(bFe);Awr=r(Bwt,"electra"),Bwt.forEach(t),ywr=r(LBe," \u2014 "),UU=n(LBe,"A",{href:!0});var Iwt=s(UU);Lwr=r(Iwt,"TFElectraForTokenClassification"),Iwt.forEach(t),xwr=r(LBe," (ELECTRA model)"),LBe.forEach(t),$wr=i(me),DC=n(me,"LI",{});var xBe=s(DC);vFe=n(xBe,"STRONG",{});var Nwt=s(vFe);kwr=r(Nwt,"flaubert"),Nwt.forEach(t),Swr=r(xBe," \u2014 "),JU=n(xBe,"A",{href:!0});var qwt=s(JU);Rwr=r(qwt,"TFFlaubertForTokenClassification"),qwt.forEach(t),Pwr=r(xBe," (FlauBERT model)"),xBe.forEach(t),Bwr=i(me),GC=n(me,"LI",{});var $Be=s(GC);FFe=n($Be,"STRONG",{});var jwt=s(FFe);Iwr=r(jwt,"funnel"),jwt.forEach(t),Nwr=r($Be," \u2014 "),YU=n($Be,"A",{href:!0});var Dwt=s(YU);qwr=r(Dwt,"TFFunnelForTokenClassification"),Dwt.forEach(t),jwr=r($Be," (Funnel Transformer model)"),$Be.forEach(t),Dwr=i(me),OC=n(me,"LI",{});var kBe=s(OC);TFe=n(kBe,"STRONG",{});var Gwt=s(TFe);Gwr=r(Gwt,"layoutlm"),Gwt.forEach(t),Owr=r(kBe," \u2014 "),KU=n(kBe,"A",{href:!0});var Owt=s(KU);Vwr=r(Owt,"TFLayoutLMForTokenClassification"),Owt.forEach(t),Xwr=r(kBe," (LayoutLM model)"),kBe.forEach(t),zwr=i(me),VC=n(me,"LI",{});var SBe=s(VC);MFe=n(SBe,"STRONG",{});var Vwt=s(MFe);Wwr=r(Vwt,"longformer"),Vwt.forEach(t),Qwr=r(SBe," \u2014 "),ZU=n(SBe,"A",{href:!0});var Xwt=s(ZU);Hwr=r(Xwt,"TFLongformerForTokenClassification"),Xwt.forEach(t),Uwr=r(SBe," (Longformer model)"),SBe.forEach(t),Jwr=i(me),XC=n(me,"LI",{});var RBe=s(XC);EFe=n(RBe,"STRONG",{});var zwt=s(EFe);Ywr=r(zwt,"mobilebert"),zwt.forEach(t),Kwr=r(RBe," \u2014 "),eJ=n(RBe,"A",{href:!0});var Wwt=s(eJ);Zwr=r(Wwt,"TFMobileBertForTokenClassification"),Wwt.forEach(t),e0r=r(RBe," (MobileBERT model)"),RBe.forEach(t),o0r=i(me),zC=n(me,"LI",{});var PBe=s(zC);CFe=n(PBe,"STRONG",{});var Qwt=s(CFe);r0r=r(Qwt,"mpnet"),Qwt.forEach(t),t0r=r(PBe," \u2014 "),oJ=n(PBe,"A",{href:!0});var Hwt=s(oJ);a0r=r(Hwt,"TFMPNetForTokenClassification"),Hwt.forEach(t),n0r=r(PBe," (MPNet model)"),PBe.forEach(t),s0r=i(me),WC=n(me,"LI",{});var BBe=s(WC);wFe=n(BBe,"STRONG",{});var Uwt=s(wFe);l0r=r(Uwt,"rembert"),Uwt.forEach(t),i0r=r(BBe," \u2014 "),rJ=n(BBe,"A",{href:!0});var Jwt=s(rJ);d0r=r(Jwt,"TFRemBertForTokenClassification"),Jwt.forEach(t),c0r=r(BBe," (RemBERT model)"),BBe.forEach(t),f0r=i(me),QC=n(me,"LI",{});var IBe=s(QC);AFe=n(IBe,"STRONG",{});var Ywt=s(AFe);m0r=r(Ywt,"roberta"),Ywt.forEach(t),g0r=r(IBe," \u2014 "),tJ=n(IBe,"A",{href:!0});var Kwt=s(tJ);h0r=r(Kwt,"TFRobertaForTokenClassification"),Kwt.forEach(t),p0r=r(IBe," (RoBERTa model)"),IBe.forEach(t),_0r=i(me),HC=n(me,"LI",{});var NBe=s(HC);yFe=n(NBe,"STRONG",{});var Zwt=s(yFe);u0r=r(Zwt,"roformer"),Zwt.forEach(t),b0r=r(NBe," \u2014 "),aJ=n(NBe,"A",{href:!0});var e0t=s(aJ);v0r=r(e0t,"TFRoFormerForTokenClassification"),e0t.forEach(t),F0r=r(NBe," (RoFormer model)"),NBe.forEach(t),T0r=i(me),UC=n(me,"LI",{});var qBe=s(UC);LFe=n(qBe,"STRONG",{});var o0t=s(LFe);M0r=r(o0t,"xlm"),o0t.forEach(t),E0r=r(qBe," \u2014 "),nJ=n(qBe,"A",{href:!0});var r0t=s(nJ);C0r=r(r0t,"TFXLMForTokenClassification"),r0t.forEach(t),w0r=r(qBe," (XLM model)"),qBe.forEach(t),A0r=i(me),JC=n(me,"LI",{});var jBe=s(JC);xFe=n(jBe,"STRONG",{});var t0t=s(xFe);y0r=r(t0t,"xlm-roberta"),t0t.forEach(t),L0r=r(jBe," \u2014 "),sJ=n(jBe,"A",{href:!0});var a0t=s(sJ);x0r=r(a0t,"TFXLMRobertaForTokenClassification"),a0t.forEach(t),$0r=r(jBe," (XLM-RoBERTa model)"),jBe.forEach(t),k0r=i(me),YC=n(me,"LI",{});var DBe=s(YC);$Fe=n(DBe,"STRONG",{});var n0t=s($Fe);S0r=r(n0t,"xlnet"),n0t.forEach(t),R0r=r(DBe," \u2014 "),lJ=n(DBe,"A",{href:!0});var s0t=s(lJ);P0r=r(s0t,"TFXLNetForTokenClassification"),s0t.forEach(t),B0r=r(DBe," (XLNet model)"),DBe.forEach(t),me.forEach(t),I0r=i(Bl),T(KC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),Rje=i(f),Tc=n(f,"H2",{class:!0});var DGe=s(Tc);ZC=n(DGe,"A",{id:!0,class:!0,href:!0});var l0t=s(ZC);kFe=n(l0t,"SPAN",{});var i0t=s(kFe);T(m9.$$.fragment,i0t),i0t.forEach(t),l0t.forEach(t),N0r=i(DGe),SFe=n(DGe,"SPAN",{});var d0t=s(SFe);q0r=r(d0t,"TFAutoModelForQuestionAnswering"),d0t.forEach(t),DGe.forEach(t),Pje=i(f),ir=n(f,"DIV",{class:!0});var Il=s(ir);T(g9.$$.fragment,Il),j0r=i(Il),Mc=n(Il,"P",{});var Pee=s(Mc);D0r=r(Pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),iJ=n(Pee,"A",{href:!0});var c0t=s(iJ);G0r=r(c0t,"from_pretrained()"),c0t.forEach(t),O0r=r(Pee," class method or the "),dJ=n(Pee,"A",{href:!0});var f0t=s(dJ);V0r=r(f0t,"from_config()"),f0t.forEach(t),X0r=r(Pee,` class
method.`),Pee.forEach(t),z0r=i(Il),h9=n(Il,"P",{});var GGe=s(h9);W0r=r(GGe,"This class cannot be instantiated directly using "),RFe=n(GGe,"CODE",{});var m0t=s(RFe);Q0r=r(m0t,"__init__()"),m0t.forEach(t),H0r=r(GGe," (throws an error)."),GGe.forEach(t),U0r=i(Il),jt=n(Il,"DIV",{class:!0});var U6=s(jt);T(p9.$$.fragment,U6),J0r=i(U6),PFe=n(U6,"P",{});var g0t=s(PFe);Y0r=r(g0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g0t.forEach(t),K0r=i(U6),Ec=n(U6,"P",{});var Bee=s(Ec);Z0r=r(Bee,`Note:
Loading a model from its configuration file does `),BFe=n(Bee,"STRONG",{});var h0t=s(BFe);e6r=r(h0t,"not"),h0t.forEach(t),o6r=r(Bee,` load the model weights. It only affects the
model\u2019s configuration. Use `),cJ=n(Bee,"A",{href:!0});var p0t=s(cJ);r6r=r(p0t,"from_pretrained()"),p0t.forEach(t),t6r=r(Bee," to load the model weights."),Bee.forEach(t),a6r=i(U6),T(e5.$$.fragment,U6),U6.forEach(t),n6r=i(Il),Ir=n(Il,"DIV",{class:!0});var Nl=s(Ir);T(_9.$$.fragment,Nl),s6r=i(Nl),IFe=n(Nl,"P",{});var _0t=s(IFe);l6r=r(_0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_0t.forEach(t),i6r=i(Nl),fn=n(Nl,"P",{});var J6=s(fn);d6r=r(J6,"The model class to instantiate is selected based on the "),NFe=n(J6,"CODE",{});var u0t=s(NFe);c6r=r(u0t,"model_type"),u0t.forEach(t),f6r=r(J6,` property of the config object (either
passed as an argument or loaded from `),qFe=n(J6,"CODE",{});var b0t=s(qFe);m6r=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),g6r=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(J6,"CODE",{});var v0t=s(jFe);h6r=r(v0t,"pretrained_model_name_or_path"),v0t.forEach(t),p6r=r(J6,":"),J6.forEach(t),_6r=i(Nl),ce=n(Nl,"UL",{});var ge=s(ce);o5=n(ge,"LI",{});var GBe=s(o5);DFe=n(GBe,"STRONG",{});var F0t=s(DFe);u6r=r(F0t,"albert"),F0t.forEach(t),b6r=r(GBe," \u2014 "),fJ=n(GBe,"A",{href:!0});var T0t=s(fJ);v6r=r(T0t,"TFAlbertForQuestionAnswering"),T0t.forEach(t),F6r=r(GBe," (ALBERT model)"),GBe.forEach(t),T6r=i(ge),r5=n(ge,"LI",{});var OBe=s(r5);GFe=n(OBe,"STRONG",{});var M0t=s(GFe);M6r=r(M0t,"bert"),M0t.forEach(t),E6r=r(OBe," \u2014 "),mJ=n(OBe,"A",{href:!0});var E0t=s(mJ);C6r=r(E0t,"TFBertForQuestionAnswering"),E0t.forEach(t),w6r=r(OBe," (BERT model)"),OBe.forEach(t),A6r=i(ge),t5=n(ge,"LI",{});var VBe=s(t5);OFe=n(VBe,"STRONG",{});var C0t=s(OFe);y6r=r(C0t,"camembert"),C0t.forEach(t),L6r=r(VBe," \u2014 "),gJ=n(VBe,"A",{href:!0});var w0t=s(gJ);x6r=r(w0t,"TFCamembertForQuestionAnswering"),w0t.forEach(t),$6r=r(VBe," (CamemBERT model)"),VBe.forEach(t),k6r=i(ge),a5=n(ge,"LI",{});var XBe=s(a5);VFe=n(XBe,"STRONG",{});var A0t=s(VFe);S6r=r(A0t,"convbert"),A0t.forEach(t),R6r=r(XBe," \u2014 "),hJ=n(XBe,"A",{href:!0});var y0t=s(hJ);P6r=r(y0t,"TFConvBertForQuestionAnswering"),y0t.forEach(t),B6r=r(XBe," (ConvBERT model)"),XBe.forEach(t),I6r=i(ge),n5=n(ge,"LI",{});var zBe=s(n5);XFe=n(zBe,"STRONG",{});var L0t=s(XFe);N6r=r(L0t,"deberta"),L0t.forEach(t),q6r=r(zBe," \u2014 "),pJ=n(zBe,"A",{href:!0});var x0t=s(pJ);j6r=r(x0t,"TFDebertaForQuestionAnswering"),x0t.forEach(t),D6r=r(zBe," (DeBERTa model)"),zBe.forEach(t),G6r=i(ge),s5=n(ge,"LI",{});var WBe=s(s5);zFe=n(WBe,"STRONG",{});var $0t=s(zFe);O6r=r($0t,"deberta-v2"),$0t.forEach(t),V6r=r(WBe," \u2014 "),_J=n(WBe,"A",{href:!0});var k0t=s(_J);X6r=r(k0t,"TFDebertaV2ForQuestionAnswering"),k0t.forEach(t),z6r=r(WBe," (DeBERTa-v2 model)"),WBe.forEach(t),W6r=i(ge),l5=n(ge,"LI",{});var QBe=s(l5);WFe=n(QBe,"STRONG",{});var S0t=s(WFe);Q6r=r(S0t,"distilbert"),S0t.forEach(t),H6r=r(QBe," \u2014 "),uJ=n(QBe,"A",{href:!0});var R0t=s(uJ);U6r=r(R0t,"TFDistilBertForQuestionAnswering"),R0t.forEach(t),J6r=r(QBe," (DistilBERT model)"),QBe.forEach(t),Y6r=i(ge),i5=n(ge,"LI",{});var HBe=s(i5);QFe=n(HBe,"STRONG",{});var P0t=s(QFe);K6r=r(P0t,"electra"),P0t.forEach(t),Z6r=r(HBe," \u2014 "),bJ=n(HBe,"A",{href:!0});var B0t=s(bJ);eAr=r(B0t,"TFElectraForQuestionAnswering"),B0t.forEach(t),oAr=r(HBe," (ELECTRA model)"),HBe.forEach(t),rAr=i(ge),d5=n(ge,"LI",{});var UBe=s(d5);HFe=n(UBe,"STRONG",{});var I0t=s(HFe);tAr=r(I0t,"flaubert"),I0t.forEach(t),aAr=r(UBe," \u2014 "),vJ=n(UBe,"A",{href:!0});var N0t=s(vJ);nAr=r(N0t,"TFFlaubertForQuestionAnsweringSimple"),N0t.forEach(t),sAr=r(UBe," (FlauBERT model)"),UBe.forEach(t),lAr=i(ge),c5=n(ge,"LI",{});var JBe=s(c5);UFe=n(JBe,"STRONG",{});var q0t=s(UFe);iAr=r(q0t,"funnel"),q0t.forEach(t),dAr=r(JBe," \u2014 "),FJ=n(JBe,"A",{href:!0});var j0t=s(FJ);cAr=r(j0t,"TFFunnelForQuestionAnswering"),j0t.forEach(t),fAr=r(JBe," (Funnel Transformer model)"),JBe.forEach(t),mAr=i(ge),f5=n(ge,"LI",{});var YBe=s(f5);JFe=n(YBe,"STRONG",{});var D0t=s(JFe);gAr=r(D0t,"gptj"),D0t.forEach(t),hAr=r(YBe," \u2014 "),TJ=n(YBe,"A",{href:!0});var G0t=s(TJ);pAr=r(G0t,"TFGPTJForQuestionAnswering"),G0t.forEach(t),_Ar=r(YBe," (GPT-J model)"),YBe.forEach(t),uAr=i(ge),m5=n(ge,"LI",{});var KBe=s(m5);YFe=n(KBe,"STRONG",{});var O0t=s(YFe);bAr=r(O0t,"longformer"),O0t.forEach(t),vAr=r(KBe," \u2014 "),MJ=n(KBe,"A",{href:!0});var V0t=s(MJ);FAr=r(V0t,"TFLongformerForQuestionAnswering"),V0t.forEach(t),TAr=r(KBe," (Longformer model)"),KBe.forEach(t),MAr=i(ge),g5=n(ge,"LI",{});var ZBe=s(g5);KFe=n(ZBe,"STRONG",{});var X0t=s(KFe);EAr=r(X0t,"mobilebert"),X0t.forEach(t),CAr=r(ZBe," \u2014 "),EJ=n(ZBe,"A",{href:!0});var z0t=s(EJ);wAr=r(z0t,"TFMobileBertForQuestionAnswering"),z0t.forEach(t),AAr=r(ZBe," (MobileBERT model)"),ZBe.forEach(t),yAr=i(ge),h5=n(ge,"LI",{});var eIe=s(h5);ZFe=n(eIe,"STRONG",{});var W0t=s(ZFe);LAr=r(W0t,"mpnet"),W0t.forEach(t),xAr=r(eIe," \u2014 "),CJ=n(eIe,"A",{href:!0});var Q0t=s(CJ);$Ar=r(Q0t,"TFMPNetForQuestionAnswering"),Q0t.forEach(t),kAr=r(eIe," (MPNet model)"),eIe.forEach(t),SAr=i(ge),p5=n(ge,"LI",{});var oIe=s(p5);eTe=n(oIe,"STRONG",{});var H0t=s(eTe);RAr=r(H0t,"rembert"),H0t.forEach(t),PAr=r(oIe," \u2014 "),wJ=n(oIe,"A",{href:!0});var U0t=s(wJ);BAr=r(U0t,"TFRemBertForQuestionAnswering"),U0t.forEach(t),IAr=r(oIe," (RemBERT model)"),oIe.forEach(t),NAr=i(ge),_5=n(ge,"LI",{});var rIe=s(_5);oTe=n(rIe,"STRONG",{});var J0t=s(oTe);qAr=r(J0t,"roberta"),J0t.forEach(t),jAr=r(rIe," \u2014 "),AJ=n(rIe,"A",{href:!0});var Y0t=s(AJ);DAr=r(Y0t,"TFRobertaForQuestionAnswering"),Y0t.forEach(t),GAr=r(rIe," (RoBERTa model)"),rIe.forEach(t),OAr=i(ge),u5=n(ge,"LI",{});var tIe=s(u5);rTe=n(tIe,"STRONG",{});var K0t=s(rTe);VAr=r(K0t,"roformer"),K0t.forEach(t),XAr=r(tIe," \u2014 "),yJ=n(tIe,"A",{href:!0});var Z0t=s(yJ);zAr=r(Z0t,"TFRoFormerForQuestionAnswering"),Z0t.forEach(t),WAr=r(tIe," (RoFormer model)"),tIe.forEach(t),QAr=i(ge),b5=n(ge,"LI",{});var aIe=s(b5);tTe=n(aIe,"STRONG",{});var e6t=s(tTe);HAr=r(e6t,"xlm"),e6t.forEach(t),UAr=r(aIe," \u2014 "),LJ=n(aIe,"A",{href:!0});var o6t=s(LJ);JAr=r(o6t,"TFXLMForQuestionAnsweringSimple"),o6t.forEach(t),YAr=r(aIe," (XLM model)"),aIe.forEach(t),KAr=i(ge),v5=n(ge,"LI",{});var nIe=s(v5);aTe=n(nIe,"STRONG",{});var r6t=s(aTe);ZAr=r(r6t,"xlm-roberta"),r6t.forEach(t),eyr=r(nIe," \u2014 "),xJ=n(nIe,"A",{href:!0});var t6t=s(xJ);oyr=r(t6t,"TFXLMRobertaForQuestionAnswering"),t6t.forEach(t),ryr=r(nIe," (XLM-RoBERTa model)"),nIe.forEach(t),tyr=i(ge),F5=n(ge,"LI",{});var sIe=s(F5);nTe=n(sIe,"STRONG",{});var a6t=s(nTe);ayr=r(a6t,"xlnet"),a6t.forEach(t),nyr=r(sIe," \u2014 "),$J=n(sIe,"A",{href:!0});var n6t=s($J);syr=r(n6t,"TFXLNetForQuestionAnsweringSimple"),n6t.forEach(t),lyr=r(sIe," (XLNet model)"),sIe.forEach(t),ge.forEach(t),iyr=i(Nl),T(T5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),Bje=i(f),Cc=n(f,"H2",{class:!0});var OGe=s(Cc);M5=n(OGe,"A",{id:!0,class:!0,href:!0});var s6t=s(M5);sTe=n(s6t,"SPAN",{});var l6t=s(sTe);T(u9.$$.fragment,l6t),l6t.forEach(t),s6t.forEach(t),dyr=i(OGe),lTe=n(OGe,"SPAN",{});var i6t=s(lTe);cyr=r(i6t,"TFAutoModelForVision2Seq"),i6t.forEach(t),OGe.forEach(t),Ije=i(f),dr=n(f,"DIV",{class:!0});var ql=s(dr);T(b9.$$.fragment,ql),fyr=i(ql),wc=n(ql,"P",{});var Iee=s(wc);myr=r(Iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kJ=n(Iee,"A",{href:!0});var d6t=s(kJ);gyr=r(d6t,"from_pretrained()"),d6t.forEach(t),hyr=r(Iee," class method or the "),SJ=n(Iee,"A",{href:!0});var c6t=s(SJ);pyr=r(c6t,"from_config()"),c6t.forEach(t),_yr=r(Iee,` class
method.`),Iee.forEach(t),uyr=i(ql),v9=n(ql,"P",{});var VGe=s(v9);byr=r(VGe,"This class cannot be instantiated directly using "),iTe=n(VGe,"CODE",{});var f6t=s(iTe);vyr=r(f6t,"__init__()"),f6t.forEach(t),Fyr=r(VGe," (throws an error)."),VGe.forEach(t),Tyr=i(ql),Dt=n(ql,"DIV",{class:!0});var Y6=s(Dt);T(F9.$$.fragment,Y6),Myr=i(Y6),dTe=n(Y6,"P",{});var m6t=s(dTe);Eyr=r(m6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),m6t.forEach(t),Cyr=i(Y6),Ac=n(Y6,"P",{});var Nee=s(Ac);wyr=r(Nee,`Note:
Loading a model from its configuration file does `),cTe=n(Nee,"STRONG",{});var g6t=s(cTe);Ayr=r(g6t,"not"),g6t.forEach(t),yyr=r(Nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),RJ=n(Nee,"A",{href:!0});var h6t=s(RJ);Lyr=r(h6t,"from_pretrained()"),h6t.forEach(t),xyr=r(Nee," to load the model weights."),Nee.forEach(t),$yr=i(Y6),T(E5.$$.fragment,Y6),Y6.forEach(t),kyr=i(ql),Nr=n(ql,"DIV",{class:!0});var jl=s(Nr);T(T9.$$.fragment,jl),Syr=i(jl),fTe=n(jl,"P",{});var p6t=s(fTe);Ryr=r(p6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),p6t.forEach(t),Pyr=i(jl),mn=n(jl,"P",{});var K6=s(mn);Byr=r(K6,"The model class to instantiate is selected based on the "),mTe=n(K6,"CODE",{});var _6t=s(mTe);Iyr=r(_6t,"model_type"),_6t.forEach(t),Nyr=r(K6,` property of the config object (either
passed as an argument or loaded from `),gTe=n(K6,"CODE",{});var u6t=s(gTe);qyr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),jyr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hTe=n(K6,"CODE",{});var b6t=s(hTe);Dyr=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),Gyr=r(K6,":"),K6.forEach(t),Oyr=i(jl),pTe=n(jl,"UL",{});var v6t=s(pTe);C5=n(v6t,"LI",{});var lIe=s(C5);_Te=n(lIe,"STRONG",{});var F6t=s(_Te);Vyr=r(F6t,"vision-encoder-decoder"),F6t.forEach(t),Xyr=r(lIe," \u2014 "),PJ=n(lIe,"A",{href:!0});var T6t=s(PJ);zyr=r(T6t,"TFVisionEncoderDecoderModel"),T6t.forEach(t),Wyr=r(lIe," (Vision Encoder decoder model)"),lIe.forEach(t),v6t.forEach(t),Qyr=i(jl),T(w5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),Nje=i(f),yc=n(f,"H2",{class:!0});var XGe=s(yc);A5=n(XGe,"A",{id:!0,class:!0,href:!0});var M6t=s(A5);uTe=n(M6t,"SPAN",{});var E6t=s(uTe);T(M9.$$.fragment,E6t),E6t.forEach(t),M6t.forEach(t),Hyr=i(XGe),bTe=n(XGe,"SPAN",{});var C6t=s(bTe);Uyr=r(C6t,"TFAutoModelForSpeechSeq2Seq"),C6t.forEach(t),XGe.forEach(t),qje=i(f),cr=n(f,"DIV",{class:!0});var Dl=s(cr);T(E9.$$.fragment,Dl),Jyr=i(Dl),Lc=n(Dl,"P",{});var qee=s(Lc);Yyr=r(qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),BJ=n(qee,"A",{href:!0});var w6t=s(BJ);Kyr=r(w6t,"from_pretrained()"),w6t.forEach(t),Zyr=r(qee," class method or the "),IJ=n(qee,"A",{href:!0});var A6t=s(IJ);eLr=r(A6t,"from_config()"),A6t.forEach(t),oLr=r(qee,` class
method.`),qee.forEach(t),rLr=i(Dl),C9=n(Dl,"P",{});var zGe=s(C9);tLr=r(zGe,"This class cannot be instantiated directly using "),vTe=n(zGe,"CODE",{});var y6t=s(vTe);aLr=r(y6t,"__init__()"),y6t.forEach(t),nLr=r(zGe," (throws an error)."),zGe.forEach(t),sLr=i(Dl),Gt=n(Dl,"DIV",{class:!0});var Z6=s(Gt);T(w9.$$.fragment,Z6),lLr=i(Z6),FTe=n(Z6,"P",{});var L6t=s(FTe);iLr=r(L6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),L6t.forEach(t),dLr=i(Z6),xc=n(Z6,"P",{});var jee=s(xc);cLr=r(jee,`Note:
Loading a model from its configuration file does `),TTe=n(jee,"STRONG",{});var x6t=s(TTe);fLr=r(x6t,"not"),x6t.forEach(t),mLr=r(jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),NJ=n(jee,"A",{href:!0});var $6t=s(NJ);gLr=r($6t,"from_pretrained()"),$6t.forEach(t),hLr=r(jee," to load the model weights."),jee.forEach(t),pLr=i(Z6),T(y5.$$.fragment,Z6),Z6.forEach(t),_Lr=i(Dl),qr=n(Dl,"DIV",{class:!0});var Gl=s(qr);T(A9.$$.fragment,Gl),uLr=i(Gl),MTe=n(Gl,"P",{});var k6t=s(MTe);bLr=r(k6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),k6t.forEach(t),vLr=i(Gl),gn=n(Gl,"P",{});var eA=s(gn);FLr=r(eA,"The model class to instantiate is selected based on the "),ETe=n(eA,"CODE",{});var S6t=s(ETe);TLr=r(S6t,"model_type"),S6t.forEach(t),MLr=r(eA,` property of the config object (either
passed as an argument or loaded from `),CTe=n(eA,"CODE",{});var R6t=s(CTe);ELr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),CLr=r(eA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wTe=n(eA,"CODE",{});var P6t=s(wTe);wLr=r(P6t,"pretrained_model_name_or_path"),P6t.forEach(t),ALr=r(eA,":"),eA.forEach(t),yLr=i(Gl),ATe=n(Gl,"UL",{});var B6t=s(ATe);L5=n(B6t,"LI",{});var iIe=s(L5);yTe=n(iIe,"STRONG",{});var I6t=s(yTe);LLr=r(I6t,"speech_to_text"),I6t.forEach(t),xLr=r(iIe," \u2014 "),qJ=n(iIe,"A",{href:!0});var N6t=s(qJ);$Lr=r(N6t,"TFSpeech2TextForConditionalGeneration"),N6t.forEach(t),kLr=r(iIe," (Speech2Text model)"),iIe.forEach(t),B6t.forEach(t),SLr=i(Gl),T(x5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),jje=i(f),$c=n(f,"H2",{class:!0});var WGe=s($c);$5=n(WGe,"A",{id:!0,class:!0,href:!0});var q6t=s($5);LTe=n(q6t,"SPAN",{});var j6t=s(LTe);T(y9.$$.fragment,j6t),j6t.forEach(t),q6t.forEach(t),RLr=i(WGe),xTe=n(WGe,"SPAN",{});var D6t=s(xTe);PLr=r(D6t,"FlaxAutoModel"),D6t.forEach(t),WGe.forEach(t),Dje=i(f),fr=n(f,"DIV",{class:!0});var Ol=s(fr);T(L9.$$.fragment,Ol),BLr=i(Ol),kc=n(Ol,"P",{});var Dee=s(kc);ILr=r(Dee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jJ=n(Dee,"A",{href:!0});var G6t=s(jJ);NLr=r(G6t,"from_pretrained()"),G6t.forEach(t),qLr=r(Dee," class method or the "),DJ=n(Dee,"A",{href:!0});var O6t=s(DJ);jLr=r(O6t,"from_config()"),O6t.forEach(t),DLr=r(Dee,` class
method.`),Dee.forEach(t),GLr=i(Ol),x9=n(Ol,"P",{});var QGe=s(x9);OLr=r(QGe,"This class cannot be instantiated directly using "),$Te=n(QGe,"CODE",{});var V6t=s($Te);VLr=r(V6t,"__init__()"),V6t.forEach(t),XLr=r(QGe," (throws an error)."),QGe.forEach(t),zLr=i(Ol),Ot=n(Ol,"DIV",{class:!0});var oA=s(Ot);T($9.$$.fragment,oA),WLr=i(oA),kTe=n(oA,"P",{});var X6t=s(kTe);QLr=r(X6t,"Instantiates one of the base model classes of the library from a configuration."),X6t.forEach(t),HLr=i(oA),Sc=n(oA,"P",{});var Gee=s(Sc);ULr=r(Gee,`Note:
Loading a model from its configuration file does `),STe=n(Gee,"STRONG",{});var z6t=s(STe);JLr=r(z6t,"not"),z6t.forEach(t),YLr=r(Gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Gee,"A",{href:!0});var W6t=s(GJ);KLr=r(W6t,"from_pretrained()"),W6t.forEach(t),ZLr=r(Gee," to load the model weights."),Gee.forEach(t),e8r=i(oA),T(k5.$$.fragment,oA),oA.forEach(t),o8r=i(Ol),jr=n(Ol,"DIV",{class:!0});var Vl=s(jr);T(k9.$$.fragment,Vl),r8r=i(Vl),RTe=n(Vl,"P",{});var Q6t=s(RTe);t8r=r(Q6t,"Instantiate one of the base model classes of the library from a pretrained model."),Q6t.forEach(t),a8r=i(Vl),hn=n(Vl,"P",{});var rA=s(hn);n8r=r(rA,"The model class to instantiate is selected based on the "),PTe=n(rA,"CODE",{});var H6t=s(PTe);s8r=r(H6t,"model_type"),H6t.forEach(t),l8r=r(rA,` property of the config object (either
passed as an argument or loaded from `),BTe=n(rA,"CODE",{});var U6t=s(BTe);i8r=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),d8r=r(rA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ITe=n(rA,"CODE",{});var J6t=s(ITe);c8r=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),f8r=r(rA,":"),rA.forEach(t),m8r=i(Vl),te=n(Vl,"UL",{});var ne=s(te);S5=n(ne,"LI",{});var dIe=s(S5);NTe=n(dIe,"STRONG",{});var Y6t=s(NTe);g8r=r(Y6t,"albert"),Y6t.forEach(t),h8r=r(dIe," \u2014 "),OJ=n(dIe,"A",{href:!0});var K6t=s(OJ);p8r=r(K6t,"FlaxAlbertModel"),K6t.forEach(t),_8r=r(dIe," (ALBERT model)"),dIe.forEach(t),u8r=i(ne),R5=n(ne,"LI",{});var cIe=s(R5);qTe=n(cIe,"STRONG",{});var Z6t=s(qTe);b8r=r(Z6t,"bart"),Z6t.forEach(t),v8r=r(cIe," \u2014 "),VJ=n(cIe,"A",{href:!0});var eAt=s(VJ);F8r=r(eAt,"FlaxBartModel"),eAt.forEach(t),T8r=r(cIe," (BART model)"),cIe.forEach(t),M8r=i(ne),P5=n(ne,"LI",{});var fIe=s(P5);jTe=n(fIe,"STRONG",{});var oAt=s(jTe);E8r=r(oAt,"beit"),oAt.forEach(t),C8r=r(fIe," \u2014 "),XJ=n(fIe,"A",{href:!0});var rAt=s(XJ);w8r=r(rAt,"FlaxBeitModel"),rAt.forEach(t),A8r=r(fIe," (BEiT model)"),fIe.forEach(t),y8r=i(ne),B5=n(ne,"LI",{});var mIe=s(B5);DTe=n(mIe,"STRONG",{});var tAt=s(DTe);L8r=r(tAt,"bert"),tAt.forEach(t),x8r=r(mIe," \u2014 "),zJ=n(mIe,"A",{href:!0});var aAt=s(zJ);$8r=r(aAt,"FlaxBertModel"),aAt.forEach(t),k8r=r(mIe," (BERT model)"),mIe.forEach(t),S8r=i(ne),I5=n(ne,"LI",{});var gIe=s(I5);GTe=n(gIe,"STRONG",{});var nAt=s(GTe);R8r=r(nAt,"big_bird"),nAt.forEach(t),P8r=r(gIe," \u2014 "),WJ=n(gIe,"A",{href:!0});var sAt=s(WJ);B8r=r(sAt,"FlaxBigBirdModel"),sAt.forEach(t),I8r=r(gIe," (BigBird model)"),gIe.forEach(t),N8r=i(ne),N5=n(ne,"LI",{});var hIe=s(N5);OTe=n(hIe,"STRONG",{});var lAt=s(OTe);q8r=r(lAt,"blenderbot"),lAt.forEach(t),j8r=r(hIe," \u2014 "),QJ=n(hIe,"A",{href:!0});var iAt=s(QJ);D8r=r(iAt,"FlaxBlenderbotModel"),iAt.forEach(t),G8r=r(hIe," (Blenderbot model)"),hIe.forEach(t),O8r=i(ne),q5=n(ne,"LI",{});var pIe=s(q5);VTe=n(pIe,"STRONG",{});var dAt=s(VTe);V8r=r(dAt,"blenderbot-small"),dAt.forEach(t),X8r=r(pIe," \u2014 "),HJ=n(pIe,"A",{href:!0});var cAt=s(HJ);z8r=r(cAt,"FlaxBlenderbotSmallModel"),cAt.forEach(t),W8r=r(pIe," (BlenderbotSmall model)"),pIe.forEach(t),Q8r=i(ne),j5=n(ne,"LI",{});var _Ie=s(j5);XTe=n(_Ie,"STRONG",{});var fAt=s(XTe);H8r=r(fAt,"clip"),fAt.forEach(t),U8r=r(_Ie," \u2014 "),UJ=n(_Ie,"A",{href:!0});var mAt=s(UJ);J8r=r(mAt,"FlaxCLIPModel"),mAt.forEach(t),Y8r=r(_Ie," (CLIP model)"),_Ie.forEach(t),K8r=i(ne),D5=n(ne,"LI",{});var uIe=s(D5);zTe=n(uIe,"STRONG",{});var gAt=s(zTe);Z8r=r(gAt,"distilbert"),gAt.forEach(t),e9r=r(uIe," \u2014 "),JJ=n(uIe,"A",{href:!0});var hAt=s(JJ);o9r=r(hAt,"FlaxDistilBertModel"),hAt.forEach(t),r9r=r(uIe," (DistilBERT model)"),uIe.forEach(t),t9r=i(ne),G5=n(ne,"LI",{});var bIe=s(G5);WTe=n(bIe,"STRONG",{});var pAt=s(WTe);a9r=r(pAt,"electra"),pAt.forEach(t),n9r=r(bIe," \u2014 "),YJ=n(bIe,"A",{href:!0});var _At=s(YJ);s9r=r(_At,"FlaxElectraModel"),_At.forEach(t),l9r=r(bIe," (ELECTRA model)"),bIe.forEach(t),i9r=i(ne),O5=n(ne,"LI",{});var vIe=s(O5);QTe=n(vIe,"STRONG",{});var uAt=s(QTe);d9r=r(uAt,"gpt2"),uAt.forEach(t),c9r=r(vIe," \u2014 "),KJ=n(vIe,"A",{href:!0});var bAt=s(KJ);f9r=r(bAt,"FlaxGPT2Model"),bAt.forEach(t),m9r=r(vIe," (OpenAI GPT-2 model)"),vIe.forEach(t),g9r=i(ne),V5=n(ne,"LI",{});var FIe=s(V5);HTe=n(FIe,"STRONG",{});var vAt=s(HTe);h9r=r(vAt,"gpt_neo"),vAt.forEach(t),p9r=r(FIe," \u2014 "),ZJ=n(FIe,"A",{href:!0});var FAt=s(ZJ);_9r=r(FAt,"FlaxGPTNeoModel"),FAt.forEach(t),u9r=r(FIe," (GPT Neo model)"),FIe.forEach(t),b9r=i(ne),X5=n(ne,"LI",{});var TIe=s(X5);UTe=n(TIe,"STRONG",{});var TAt=s(UTe);v9r=r(TAt,"gptj"),TAt.forEach(t),F9r=r(TIe," \u2014 "),eY=n(TIe,"A",{href:!0});var MAt=s(eY);T9r=r(MAt,"FlaxGPTJModel"),MAt.forEach(t),M9r=r(TIe," (GPT-J model)"),TIe.forEach(t),E9r=i(ne),z5=n(ne,"LI",{});var MIe=s(z5);JTe=n(MIe,"STRONG",{});var EAt=s(JTe);C9r=r(EAt,"marian"),EAt.forEach(t),w9r=r(MIe," \u2014 "),oY=n(MIe,"A",{href:!0});var CAt=s(oY);A9r=r(CAt,"FlaxMarianModel"),CAt.forEach(t),y9r=r(MIe," (Marian model)"),MIe.forEach(t),L9r=i(ne),W5=n(ne,"LI",{});var EIe=s(W5);YTe=n(EIe,"STRONG",{});var wAt=s(YTe);x9r=r(wAt,"mbart"),wAt.forEach(t),$9r=r(EIe," \u2014 "),rY=n(EIe,"A",{href:!0});var AAt=s(rY);k9r=r(AAt,"FlaxMBartModel"),AAt.forEach(t),S9r=r(EIe," (mBART model)"),EIe.forEach(t),R9r=i(ne),Q5=n(ne,"LI",{});var CIe=s(Q5);KTe=n(CIe,"STRONG",{});var yAt=s(KTe);P9r=r(yAt,"mt5"),yAt.forEach(t),B9r=r(CIe," \u2014 "),tY=n(CIe,"A",{href:!0});var LAt=s(tY);I9r=r(LAt,"FlaxMT5Model"),LAt.forEach(t),N9r=r(CIe," (mT5 model)"),CIe.forEach(t),q9r=i(ne),H5=n(ne,"LI",{});var wIe=s(H5);ZTe=n(wIe,"STRONG",{});var xAt=s(ZTe);j9r=r(xAt,"pegasus"),xAt.forEach(t),D9r=r(wIe," \u2014 "),aY=n(wIe,"A",{href:!0});var $At=s(aY);G9r=r($At,"FlaxPegasusModel"),$At.forEach(t),O9r=r(wIe," (Pegasus model)"),wIe.forEach(t),V9r=i(ne),U5=n(ne,"LI",{});var AIe=s(U5);eMe=n(AIe,"STRONG",{});var kAt=s(eMe);X9r=r(kAt,"roberta"),kAt.forEach(t),z9r=r(AIe," \u2014 "),nY=n(AIe,"A",{href:!0});var SAt=s(nY);W9r=r(SAt,"FlaxRobertaModel"),SAt.forEach(t),Q9r=r(AIe," (RoBERTa model)"),AIe.forEach(t),H9r=i(ne),J5=n(ne,"LI",{});var yIe=s(J5);oMe=n(yIe,"STRONG",{});var RAt=s(oMe);U9r=r(RAt,"roformer"),RAt.forEach(t),J9r=r(yIe," \u2014 "),sY=n(yIe,"A",{href:!0});var PAt=s(sY);Y9r=r(PAt,"FlaxRoFormerModel"),PAt.forEach(t),K9r=r(yIe," (RoFormer model)"),yIe.forEach(t),Z9r=i(ne),Y5=n(ne,"LI",{});var LIe=s(Y5);rMe=n(LIe,"STRONG",{});var BAt=s(rMe);exr=r(BAt,"t5"),BAt.forEach(t),oxr=r(LIe," \u2014 "),lY=n(LIe,"A",{href:!0});var IAt=s(lY);rxr=r(IAt,"FlaxT5Model"),IAt.forEach(t),txr=r(LIe," (T5 model)"),LIe.forEach(t),axr=i(ne),K5=n(ne,"LI",{});var xIe=s(K5);tMe=n(xIe,"STRONG",{});var NAt=s(tMe);nxr=r(NAt,"vision-text-dual-encoder"),NAt.forEach(t),sxr=r(xIe," \u2014 "),iY=n(xIe,"A",{href:!0});var qAt=s(iY);lxr=r(qAt,"FlaxVisionTextDualEncoderModel"),qAt.forEach(t),ixr=r(xIe," (VisionTextDualEncoder model)"),xIe.forEach(t),dxr=i(ne),Z5=n(ne,"LI",{});var $Ie=s(Z5);aMe=n($Ie,"STRONG",{});var jAt=s(aMe);cxr=r(jAt,"vit"),jAt.forEach(t),fxr=r($Ie," \u2014 "),dY=n($Ie,"A",{href:!0});var DAt=s(dY);mxr=r(DAt,"FlaxViTModel"),DAt.forEach(t),gxr=r($Ie," (ViT model)"),$Ie.forEach(t),hxr=i(ne),e3=n(ne,"LI",{});var kIe=s(e3);nMe=n(kIe,"STRONG",{});var GAt=s(nMe);pxr=r(GAt,"wav2vec2"),GAt.forEach(t),_xr=r(kIe," \u2014 "),cY=n(kIe,"A",{href:!0});var OAt=s(cY);uxr=r(OAt,"FlaxWav2Vec2Model"),OAt.forEach(t),bxr=r(kIe," (Wav2Vec2 model)"),kIe.forEach(t),vxr=i(ne),o3=n(ne,"LI",{});var SIe=s(o3);sMe=n(SIe,"STRONG",{});var VAt=s(sMe);Fxr=r(VAt,"xglm"),VAt.forEach(t),Txr=r(SIe," \u2014 "),fY=n(SIe,"A",{href:!0});var XAt=s(fY);Mxr=r(XAt,"FlaxXGLMModel"),XAt.forEach(t),Exr=r(SIe," (XGLM model)"),SIe.forEach(t),Cxr=i(ne),r3=n(ne,"LI",{});var RIe=s(r3);lMe=n(RIe,"STRONG",{});var zAt=s(lMe);wxr=r(zAt,"xlm-roberta"),zAt.forEach(t),Axr=r(RIe," \u2014 "),mY=n(RIe,"A",{href:!0});var WAt=s(mY);yxr=r(WAt,"FlaxXLMRobertaModel"),WAt.forEach(t),Lxr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),ne.forEach(t),xxr=i(Vl),T(t3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),Gje=i(f),Rc=n(f,"H2",{class:!0});var HGe=s(Rc);a3=n(HGe,"A",{id:!0,class:!0,href:!0});var QAt=s(a3);iMe=n(QAt,"SPAN",{});var HAt=s(iMe);T(S9.$$.fragment,HAt),HAt.forEach(t),QAt.forEach(t),$xr=i(HGe),dMe=n(HGe,"SPAN",{});var UAt=s(dMe);kxr=r(UAt,"FlaxAutoModelForCausalLM"),UAt.forEach(t),HGe.forEach(t),Oje=i(f),mr=n(f,"DIV",{class:!0});var Xl=s(mr);T(R9.$$.fragment,Xl),Sxr=i(Xl),Pc=n(Xl,"P",{});var Oee=s(Pc);Rxr=r(Oee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),gY=n(Oee,"A",{href:!0});var JAt=s(gY);Pxr=r(JAt,"from_pretrained()"),JAt.forEach(t),Bxr=r(Oee," class method or the "),hY=n(Oee,"A",{href:!0});var YAt=s(hY);Ixr=r(YAt,"from_config()"),YAt.forEach(t),Nxr=r(Oee,` class
method.`),Oee.forEach(t),qxr=i(Xl),P9=n(Xl,"P",{});var UGe=s(P9);jxr=r(UGe,"This class cannot be instantiated directly using "),cMe=n(UGe,"CODE",{});var KAt=s(cMe);Dxr=r(KAt,"__init__()"),KAt.forEach(t),Gxr=r(UGe," (throws an error)."),UGe.forEach(t),Oxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var tA=s(Vt);T(B9.$$.fragment,tA),Vxr=i(tA),fMe=n(tA,"P",{});var ZAt=s(fMe);Xxr=r(ZAt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ZAt.forEach(t),zxr=i(tA),Bc=n(tA,"P",{});var Vee=s(Bc);Wxr=r(Vee,`Note:
Loading a model from its configuration file does `),mMe=n(Vee,"STRONG",{});var eyt=s(mMe);Qxr=r(eyt,"not"),eyt.forEach(t),Hxr=r(Vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pY=n(Vee,"A",{href:!0});var oyt=s(pY);Uxr=r(oyt,"from_pretrained()"),oyt.forEach(t),Jxr=r(Vee," to load the model weights."),Vee.forEach(t),Yxr=i(tA),T(n3.$$.fragment,tA),tA.forEach(t),Kxr=i(Xl),Dr=n(Xl,"DIV",{class:!0});var zl=s(Dr);T(I9.$$.fragment,zl),Zxr=i(zl),gMe=n(zl,"P",{});var ryt=s(gMe);e$r=r(ryt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ryt.forEach(t),o$r=i(zl),pn=n(zl,"P",{});var aA=s(pn);r$r=r(aA,"The model class to instantiate is selected based on the "),hMe=n(aA,"CODE",{});var tyt=s(hMe);t$r=r(tyt,"model_type"),tyt.forEach(t),a$r=r(aA,` property of the config object (either
passed as an argument or loaded from `),pMe=n(aA,"CODE",{});var ayt=s(pMe);n$r=r(ayt,"pretrained_model_name_or_path"),ayt.forEach(t),s$r=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_Me=n(aA,"CODE",{});var nyt=s(_Me);l$r=r(nyt,"pretrained_model_name_or_path"),nyt.forEach(t),i$r=r(aA,":"),aA.forEach(t),d$r=i(zl),Re=n(zl,"UL",{});var Xe=s(Re);s3=n(Xe,"LI",{});var PIe=s(s3);uMe=n(PIe,"STRONG",{});var syt=s(uMe);c$r=r(syt,"bart"),syt.forEach(t),f$r=r(PIe," \u2014 "),_Y=n(PIe,"A",{href:!0});var lyt=s(_Y);m$r=r(lyt,"FlaxBartForCausalLM"),lyt.forEach(t),g$r=r(PIe," (BART model)"),PIe.forEach(t),h$r=i(Xe),l3=n(Xe,"LI",{});var BIe=s(l3);bMe=n(BIe,"STRONG",{});var iyt=s(bMe);p$r=r(iyt,"bert"),iyt.forEach(t),_$r=r(BIe," \u2014 "),uY=n(BIe,"A",{href:!0});var dyt=s(uY);u$r=r(dyt,"FlaxBertForCausalLM"),dyt.forEach(t),b$r=r(BIe," (BERT model)"),BIe.forEach(t),v$r=i(Xe),i3=n(Xe,"LI",{});var IIe=s(i3);vMe=n(IIe,"STRONG",{});var cyt=s(vMe);F$r=r(cyt,"big_bird"),cyt.forEach(t),T$r=r(IIe," \u2014 "),bY=n(IIe,"A",{href:!0});var fyt=s(bY);M$r=r(fyt,"FlaxBigBirdForCausalLM"),fyt.forEach(t),E$r=r(IIe," (BigBird model)"),IIe.forEach(t),C$r=i(Xe),d3=n(Xe,"LI",{});var NIe=s(d3);FMe=n(NIe,"STRONG",{});var myt=s(FMe);w$r=r(myt,"electra"),myt.forEach(t),A$r=r(NIe," \u2014 "),vY=n(NIe,"A",{href:!0});var gyt=s(vY);y$r=r(gyt,"FlaxElectraForCausalLM"),gyt.forEach(t),L$r=r(NIe," (ELECTRA model)"),NIe.forEach(t),x$r=i(Xe),c3=n(Xe,"LI",{});var qIe=s(c3);TMe=n(qIe,"STRONG",{});var hyt=s(TMe);$$r=r(hyt,"gpt2"),hyt.forEach(t),k$r=r(qIe," \u2014 "),FY=n(qIe,"A",{href:!0});var pyt=s(FY);S$r=r(pyt,"FlaxGPT2LMHeadModel"),pyt.forEach(t),R$r=r(qIe," (OpenAI GPT-2 model)"),qIe.forEach(t),P$r=i(Xe),f3=n(Xe,"LI",{});var jIe=s(f3);MMe=n(jIe,"STRONG",{});var _yt=s(MMe);B$r=r(_yt,"gpt_neo"),_yt.forEach(t),I$r=r(jIe," \u2014 "),TY=n(jIe,"A",{href:!0});var uyt=s(TY);N$r=r(uyt,"FlaxGPTNeoForCausalLM"),uyt.forEach(t),q$r=r(jIe," (GPT Neo model)"),jIe.forEach(t),j$r=i(Xe),m3=n(Xe,"LI",{});var DIe=s(m3);EMe=n(DIe,"STRONG",{});var byt=s(EMe);D$r=r(byt,"gptj"),byt.forEach(t),G$r=r(DIe," \u2014 "),MY=n(DIe,"A",{href:!0});var vyt=s(MY);O$r=r(vyt,"FlaxGPTJForCausalLM"),vyt.forEach(t),V$r=r(DIe," (GPT-J model)"),DIe.forEach(t),X$r=i(Xe),g3=n(Xe,"LI",{});var GIe=s(g3);CMe=n(GIe,"STRONG",{});var Fyt=s(CMe);z$r=r(Fyt,"roberta"),Fyt.forEach(t),W$r=r(GIe," \u2014 "),EY=n(GIe,"A",{href:!0});var Tyt=s(EY);Q$r=r(Tyt,"FlaxRobertaForCausalLM"),Tyt.forEach(t),H$r=r(GIe," (RoBERTa model)"),GIe.forEach(t),U$r=i(Xe),h3=n(Xe,"LI",{});var OIe=s(h3);wMe=n(OIe,"STRONG",{});var Myt=s(wMe);J$r=r(Myt,"xglm"),Myt.forEach(t),Y$r=r(OIe," \u2014 "),CY=n(OIe,"A",{href:!0});var Eyt=s(CY);K$r=r(Eyt,"FlaxXGLMForCausalLM"),Eyt.forEach(t),Z$r=r(OIe," (XGLM model)"),OIe.forEach(t),Xe.forEach(t),ekr=i(zl),T(p3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),Vje=i(f),Ic=n(f,"H2",{class:!0});var JGe=s(Ic);_3=n(JGe,"A",{id:!0,class:!0,href:!0});var Cyt=s(_3);AMe=n(Cyt,"SPAN",{});var wyt=s(AMe);T(N9.$$.fragment,wyt),wyt.forEach(t),Cyt.forEach(t),okr=i(JGe),yMe=n(JGe,"SPAN",{});var Ayt=s(yMe);rkr=r(Ayt,"FlaxAutoModelForPreTraining"),Ayt.forEach(t),JGe.forEach(t),Xje=i(f),gr=n(f,"DIV",{class:!0});var Wl=s(gr);T(q9.$$.fragment,Wl),tkr=i(Wl),Nc=n(Wl,"P",{});var Xee=s(Nc);akr=r(Xee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wY=n(Xee,"A",{href:!0});var yyt=s(wY);nkr=r(yyt,"from_pretrained()"),yyt.forEach(t),skr=r(Xee," class method or the "),AY=n(Xee,"A",{href:!0});var Lyt=s(AY);lkr=r(Lyt,"from_config()"),Lyt.forEach(t),ikr=r(Xee,` class
method.`),Xee.forEach(t),dkr=i(Wl),j9=n(Wl,"P",{});var YGe=s(j9);ckr=r(YGe,"This class cannot be instantiated directly using "),LMe=n(YGe,"CODE",{});var xyt=s(LMe);fkr=r(xyt,"__init__()"),xyt.forEach(t),mkr=r(YGe," (throws an error)."),YGe.forEach(t),gkr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var nA=s(Xt);T(D9.$$.fragment,nA),hkr=i(nA),xMe=n(nA,"P",{});var $yt=s(xMe);pkr=r($yt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$yt.forEach(t),_kr=i(nA),qc=n(nA,"P",{});var zee=s(qc);ukr=r(zee,`Note:
Loading a model from its configuration file does `),$Me=n(zee,"STRONG",{});var kyt=s($Me);bkr=r(kyt,"not"),kyt.forEach(t),vkr=r(zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),yY=n(zee,"A",{href:!0});var Syt=s(yY);Fkr=r(Syt,"from_pretrained()"),Syt.forEach(t),Tkr=r(zee," to load the model weights."),zee.forEach(t),Mkr=i(nA),T(u3.$$.fragment,nA),nA.forEach(t),Ekr=i(Wl),Gr=n(Wl,"DIV",{class:!0});var Ql=s(Gr);T(G9.$$.fragment,Ql),Ckr=i(Ql),kMe=n(Ql,"P",{});var Ryt=s(kMe);wkr=r(Ryt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ryt.forEach(t),Akr=i(Ql),_n=n(Ql,"P",{});var sA=s(_n);ykr=r(sA,"The model class to instantiate is selected based on the "),SMe=n(sA,"CODE",{});var Pyt=s(SMe);Lkr=r(Pyt,"model_type"),Pyt.forEach(t),xkr=r(sA,` property of the config object (either
passed as an argument or loaded from `),RMe=n(sA,"CODE",{});var Byt=s(RMe);$kr=r(Byt,"pretrained_model_name_or_path"),Byt.forEach(t),kkr=r(sA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(sA,"CODE",{});var Iyt=s(PMe);Skr=r(Iyt,"pretrained_model_name_or_path"),Iyt.forEach(t),Rkr=r(sA,":"),sA.forEach(t),Pkr=i(Ql),Ee=n(Ql,"UL",{});var we=s(Ee);b3=n(we,"LI",{});var VIe=s(b3);BMe=n(VIe,"STRONG",{});var Nyt=s(BMe);Bkr=r(Nyt,"albert"),Nyt.forEach(t),Ikr=r(VIe," \u2014 "),LY=n(VIe,"A",{href:!0});var qyt=s(LY);Nkr=r(qyt,"FlaxAlbertForPreTraining"),qyt.forEach(t),qkr=r(VIe," (ALBERT model)"),VIe.forEach(t),jkr=i(we),v3=n(we,"LI",{});var XIe=s(v3);IMe=n(XIe,"STRONG",{});var jyt=s(IMe);Dkr=r(jyt,"bart"),jyt.forEach(t),Gkr=r(XIe," \u2014 "),xY=n(XIe,"A",{href:!0});var Dyt=s(xY);Okr=r(Dyt,"FlaxBartForConditionalGeneration"),Dyt.forEach(t),Vkr=r(XIe," (BART model)"),XIe.forEach(t),Xkr=i(we),F3=n(we,"LI",{});var zIe=s(F3);NMe=n(zIe,"STRONG",{});var Gyt=s(NMe);zkr=r(Gyt,"bert"),Gyt.forEach(t),Wkr=r(zIe," \u2014 "),$Y=n(zIe,"A",{href:!0});var Oyt=s($Y);Qkr=r(Oyt,"FlaxBertForPreTraining"),Oyt.forEach(t),Hkr=r(zIe," (BERT model)"),zIe.forEach(t),Ukr=i(we),T3=n(we,"LI",{});var WIe=s(T3);qMe=n(WIe,"STRONG",{});var Vyt=s(qMe);Jkr=r(Vyt,"big_bird"),Vyt.forEach(t),Ykr=r(WIe," \u2014 "),kY=n(WIe,"A",{href:!0});var Xyt=s(kY);Kkr=r(Xyt,"FlaxBigBirdForPreTraining"),Xyt.forEach(t),Zkr=r(WIe," (BigBird model)"),WIe.forEach(t),eSr=i(we),M3=n(we,"LI",{});var QIe=s(M3);jMe=n(QIe,"STRONG",{});var zyt=s(jMe);oSr=r(zyt,"electra"),zyt.forEach(t),rSr=r(QIe," \u2014 "),SY=n(QIe,"A",{href:!0});var Wyt=s(SY);tSr=r(Wyt,"FlaxElectraForPreTraining"),Wyt.forEach(t),aSr=r(QIe," (ELECTRA model)"),QIe.forEach(t),nSr=i(we),E3=n(we,"LI",{});var HIe=s(E3);DMe=n(HIe,"STRONG",{});var Qyt=s(DMe);sSr=r(Qyt,"mbart"),Qyt.forEach(t),lSr=r(HIe," \u2014 "),RY=n(HIe,"A",{href:!0});var Hyt=s(RY);iSr=r(Hyt,"FlaxMBartForConditionalGeneration"),Hyt.forEach(t),dSr=r(HIe," (mBART model)"),HIe.forEach(t),cSr=i(we),C3=n(we,"LI",{});var UIe=s(C3);GMe=n(UIe,"STRONG",{});var Uyt=s(GMe);fSr=r(Uyt,"mt5"),Uyt.forEach(t),mSr=r(UIe," \u2014 "),PY=n(UIe,"A",{href:!0});var Jyt=s(PY);gSr=r(Jyt,"FlaxMT5ForConditionalGeneration"),Jyt.forEach(t),hSr=r(UIe," (mT5 model)"),UIe.forEach(t),pSr=i(we),w3=n(we,"LI",{});var JIe=s(w3);OMe=n(JIe,"STRONG",{});var Yyt=s(OMe);_Sr=r(Yyt,"roberta"),Yyt.forEach(t),uSr=r(JIe," \u2014 "),BY=n(JIe,"A",{href:!0});var Kyt=s(BY);bSr=r(Kyt,"FlaxRobertaForMaskedLM"),Kyt.forEach(t),vSr=r(JIe," (RoBERTa model)"),JIe.forEach(t),FSr=i(we),A3=n(we,"LI",{});var YIe=s(A3);VMe=n(YIe,"STRONG",{});var Zyt=s(VMe);TSr=r(Zyt,"roformer"),Zyt.forEach(t),MSr=r(YIe," \u2014 "),IY=n(YIe,"A",{href:!0});var eLt=s(IY);ESr=r(eLt,"FlaxRoFormerForMaskedLM"),eLt.forEach(t),CSr=r(YIe," (RoFormer model)"),YIe.forEach(t),wSr=i(we),y3=n(we,"LI",{});var KIe=s(y3);XMe=n(KIe,"STRONG",{});var oLt=s(XMe);ASr=r(oLt,"t5"),oLt.forEach(t),ySr=r(KIe," \u2014 "),NY=n(KIe,"A",{href:!0});var rLt=s(NY);LSr=r(rLt,"FlaxT5ForConditionalGeneration"),rLt.forEach(t),xSr=r(KIe," (T5 model)"),KIe.forEach(t),$Sr=i(we),L3=n(we,"LI",{});var ZIe=s(L3);zMe=n(ZIe,"STRONG",{});var tLt=s(zMe);kSr=r(tLt,"wav2vec2"),tLt.forEach(t),SSr=r(ZIe," \u2014 "),qY=n(ZIe,"A",{href:!0});var aLt=s(qY);RSr=r(aLt,"FlaxWav2Vec2ForPreTraining"),aLt.forEach(t),PSr=r(ZIe," (Wav2Vec2 model)"),ZIe.forEach(t),BSr=i(we),x3=n(we,"LI",{});var eNe=s(x3);WMe=n(eNe,"STRONG",{});var nLt=s(WMe);ISr=r(nLt,"xlm-roberta"),nLt.forEach(t),NSr=r(eNe," \u2014 "),jY=n(eNe,"A",{href:!0});var sLt=s(jY);qSr=r(sLt,"FlaxXLMRobertaForMaskedLM"),sLt.forEach(t),jSr=r(eNe," (XLM-RoBERTa model)"),eNe.forEach(t),we.forEach(t),DSr=i(Ql),T($3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),zje=i(f),jc=n(f,"H2",{class:!0});var KGe=s(jc);k3=n(KGe,"A",{id:!0,class:!0,href:!0});var lLt=s(k3);QMe=n(lLt,"SPAN",{});var iLt=s(QMe);T(O9.$$.fragment,iLt),iLt.forEach(t),lLt.forEach(t),GSr=i(KGe),HMe=n(KGe,"SPAN",{});var dLt=s(HMe);OSr=r(dLt,"FlaxAutoModelForMaskedLM"),dLt.forEach(t),KGe.forEach(t),Wje=i(f),hr=n(f,"DIV",{class:!0});var Hl=s(hr);T(V9.$$.fragment,Hl),VSr=i(Hl),Dc=n(Hl,"P",{});var Wee=s(Dc);XSr=r(Wee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),DY=n(Wee,"A",{href:!0});var cLt=s(DY);zSr=r(cLt,"from_pretrained()"),cLt.forEach(t),WSr=r(Wee," class method or the "),GY=n(Wee,"A",{href:!0});var fLt=s(GY);QSr=r(fLt,"from_config()"),fLt.forEach(t),HSr=r(Wee,` class
method.`),Wee.forEach(t),USr=i(Hl),X9=n(Hl,"P",{});var ZGe=s(X9);JSr=r(ZGe,"This class cannot be instantiated directly using "),UMe=n(ZGe,"CODE",{});var mLt=s(UMe);YSr=r(mLt,"__init__()"),mLt.forEach(t),KSr=r(ZGe," (throws an error)."),ZGe.forEach(t),ZSr=i(Hl),zt=n(Hl,"DIV",{class:!0});var lA=s(zt);T(z9.$$.fragment,lA),eRr=i(lA),JMe=n(lA,"P",{});var gLt=s(JMe);oRr=r(gLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gLt.forEach(t),rRr=i(lA),Gc=n(lA,"P",{});var Qee=s(Gc);tRr=r(Qee,`Note:
Loading a model from its configuration file does `),YMe=n(Qee,"STRONG",{});var hLt=s(YMe);aRr=r(hLt,"not"),hLt.forEach(t),nRr=r(Qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(Qee,"A",{href:!0});var pLt=s(OY);sRr=r(pLt,"from_pretrained()"),pLt.forEach(t),lRr=r(Qee," to load the model weights."),Qee.forEach(t),iRr=i(lA),T(S3.$$.fragment,lA),lA.forEach(t),dRr=i(Hl),Or=n(Hl,"DIV",{class:!0});var Ul=s(Or);T(W9.$$.fragment,Ul),cRr=i(Ul),KMe=n(Ul,"P",{});var _Lt=s(KMe);fRr=r(_Lt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),_Lt.forEach(t),mRr=i(Ul),un=n(Ul,"P",{});var iA=s(un);gRr=r(iA,"The model class to instantiate is selected based on the "),ZMe=n(iA,"CODE",{});var uLt=s(ZMe);hRr=r(uLt,"model_type"),uLt.forEach(t),pRr=r(iA,` property of the config object (either
passed as an argument or loaded from `),eEe=n(iA,"CODE",{});var bLt=s(eEe);_Rr=r(bLt,"pretrained_model_name_or_path"),bLt.forEach(t),uRr=r(iA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oEe=n(iA,"CODE",{});var vLt=s(oEe);bRr=r(vLt,"pretrained_model_name_or_path"),vLt.forEach(t),vRr=r(iA,":"),iA.forEach(t),FRr=i(Ul),Le=n(Ul,"UL",{});var Ie=s(Le);R3=n(Ie,"LI",{});var oNe=s(R3);rEe=n(oNe,"STRONG",{});var FLt=s(rEe);TRr=r(FLt,"albert"),FLt.forEach(t),MRr=r(oNe," \u2014 "),VY=n(oNe,"A",{href:!0});var TLt=s(VY);ERr=r(TLt,"FlaxAlbertForMaskedLM"),TLt.forEach(t),CRr=r(oNe," (ALBERT model)"),oNe.forEach(t),wRr=i(Ie),P3=n(Ie,"LI",{});var rNe=s(P3);tEe=n(rNe,"STRONG",{});var MLt=s(tEe);ARr=r(MLt,"bart"),MLt.forEach(t),yRr=r(rNe," \u2014 "),XY=n(rNe,"A",{href:!0});var ELt=s(XY);LRr=r(ELt,"FlaxBartForConditionalGeneration"),ELt.forEach(t),xRr=r(rNe," (BART model)"),rNe.forEach(t),$Rr=i(Ie),B3=n(Ie,"LI",{});var tNe=s(B3);aEe=n(tNe,"STRONG",{});var CLt=s(aEe);kRr=r(CLt,"bert"),CLt.forEach(t),SRr=r(tNe," \u2014 "),zY=n(tNe,"A",{href:!0});var wLt=s(zY);RRr=r(wLt,"FlaxBertForMaskedLM"),wLt.forEach(t),PRr=r(tNe," (BERT model)"),tNe.forEach(t),BRr=i(Ie),I3=n(Ie,"LI",{});var aNe=s(I3);nEe=n(aNe,"STRONG",{});var ALt=s(nEe);IRr=r(ALt,"big_bird"),ALt.forEach(t),NRr=r(aNe," \u2014 "),WY=n(aNe,"A",{href:!0});var yLt=s(WY);qRr=r(yLt,"FlaxBigBirdForMaskedLM"),yLt.forEach(t),jRr=r(aNe," (BigBird model)"),aNe.forEach(t),DRr=i(Ie),N3=n(Ie,"LI",{});var nNe=s(N3);sEe=n(nNe,"STRONG",{});var LLt=s(sEe);GRr=r(LLt,"distilbert"),LLt.forEach(t),ORr=r(nNe," \u2014 "),QY=n(nNe,"A",{href:!0});var xLt=s(QY);VRr=r(xLt,"FlaxDistilBertForMaskedLM"),xLt.forEach(t),XRr=r(nNe," (DistilBERT model)"),nNe.forEach(t),zRr=i(Ie),q3=n(Ie,"LI",{});var sNe=s(q3);lEe=n(sNe,"STRONG",{});var $Lt=s(lEe);WRr=r($Lt,"electra"),$Lt.forEach(t),QRr=r(sNe," \u2014 "),HY=n(sNe,"A",{href:!0});var kLt=s(HY);HRr=r(kLt,"FlaxElectraForMaskedLM"),kLt.forEach(t),URr=r(sNe," (ELECTRA model)"),sNe.forEach(t),JRr=i(Ie),j3=n(Ie,"LI",{});var lNe=s(j3);iEe=n(lNe,"STRONG",{});var SLt=s(iEe);YRr=r(SLt,"mbart"),SLt.forEach(t),KRr=r(lNe," \u2014 "),UY=n(lNe,"A",{href:!0});var RLt=s(UY);ZRr=r(RLt,"FlaxMBartForConditionalGeneration"),RLt.forEach(t),ePr=r(lNe," (mBART model)"),lNe.forEach(t),oPr=i(Ie),D3=n(Ie,"LI",{});var iNe=s(D3);dEe=n(iNe,"STRONG",{});var PLt=s(dEe);rPr=r(PLt,"roberta"),PLt.forEach(t),tPr=r(iNe," \u2014 "),JY=n(iNe,"A",{href:!0});var BLt=s(JY);aPr=r(BLt,"FlaxRobertaForMaskedLM"),BLt.forEach(t),nPr=r(iNe," (RoBERTa model)"),iNe.forEach(t),sPr=i(Ie),G3=n(Ie,"LI",{});var dNe=s(G3);cEe=n(dNe,"STRONG",{});var ILt=s(cEe);lPr=r(ILt,"roformer"),ILt.forEach(t),iPr=r(dNe," \u2014 "),YY=n(dNe,"A",{href:!0});var NLt=s(YY);dPr=r(NLt,"FlaxRoFormerForMaskedLM"),NLt.forEach(t),cPr=r(dNe," (RoFormer model)"),dNe.forEach(t),fPr=i(Ie),O3=n(Ie,"LI",{});var cNe=s(O3);fEe=n(cNe,"STRONG",{});var qLt=s(fEe);mPr=r(qLt,"xlm-roberta"),qLt.forEach(t),gPr=r(cNe," \u2014 "),KY=n(cNe,"A",{href:!0});var jLt=s(KY);hPr=r(jLt,"FlaxXLMRobertaForMaskedLM"),jLt.forEach(t),pPr=r(cNe," (XLM-RoBERTa model)"),cNe.forEach(t),Ie.forEach(t),_Pr=i(Ul),T(V3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),Qje=i(f),Oc=n(f,"H2",{class:!0});var eOe=s(Oc);X3=n(eOe,"A",{id:!0,class:!0,href:!0});var DLt=s(X3);mEe=n(DLt,"SPAN",{});var GLt=s(mEe);T(Q9.$$.fragment,GLt),GLt.forEach(t),DLt.forEach(t),uPr=i(eOe),gEe=n(eOe,"SPAN",{});var OLt=s(gEe);bPr=r(OLt,"FlaxAutoModelForSeq2SeqLM"),OLt.forEach(t),eOe.forEach(t),Hje=i(f),pr=n(f,"DIV",{class:!0});var Jl=s(pr);T(H9.$$.fragment,Jl),vPr=i(Jl),Vc=n(Jl,"P",{});var Hee=s(Vc);FPr=r(Hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),ZY=n(Hee,"A",{href:!0});var VLt=s(ZY);TPr=r(VLt,"from_pretrained()"),VLt.forEach(t),MPr=r(Hee," class method or the "),eK=n(Hee,"A",{href:!0});var XLt=s(eK);EPr=r(XLt,"from_config()"),XLt.forEach(t),CPr=r(Hee,` class
method.`),Hee.forEach(t),wPr=i(Jl),U9=n(Jl,"P",{});var oOe=s(U9);APr=r(oOe,"This class cannot be instantiated directly using "),hEe=n(oOe,"CODE",{});var zLt=s(hEe);yPr=r(zLt,"__init__()"),zLt.forEach(t),LPr=r(oOe," (throws an error)."),oOe.forEach(t),xPr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var dA=s(Wt);T(J9.$$.fragment,dA),$Pr=i(dA),pEe=n(dA,"P",{});var WLt=s(pEe);kPr=r(WLt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WLt.forEach(t),SPr=i(dA),Xc=n(dA,"P",{});var Uee=s(Xc);RPr=r(Uee,`Note:
Loading a model from its configuration file does `),_Ee=n(Uee,"STRONG",{});var QLt=s(_Ee);PPr=r(QLt,"not"),QLt.forEach(t),BPr=r(Uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(Uee,"A",{href:!0});var HLt=s(oK);IPr=r(HLt,"from_pretrained()"),HLt.forEach(t),NPr=r(Uee," to load the model weights."),Uee.forEach(t),qPr=i(dA),T(z3.$$.fragment,dA),dA.forEach(t),jPr=i(Jl),Vr=n(Jl,"DIV",{class:!0});var Yl=s(Vr);T(Y9.$$.fragment,Yl),DPr=i(Yl),uEe=n(Yl,"P",{});var ULt=s(uEe);GPr=r(ULt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ULt.forEach(t),OPr=i(Yl),bn=n(Yl,"P",{});var cA=s(bn);VPr=r(cA,"The model class to instantiate is selected based on the "),bEe=n(cA,"CODE",{});var JLt=s(bEe);XPr=r(JLt,"model_type"),JLt.forEach(t),zPr=r(cA,` property of the config object (either
passed as an argument or loaded from `),vEe=n(cA,"CODE",{});var YLt=s(vEe);WPr=r(YLt,"pretrained_model_name_or_path"),YLt.forEach(t),QPr=r(cA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(cA,"CODE",{});var KLt=s(FEe);HPr=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),UPr=r(cA,":"),cA.forEach(t),JPr=i(Yl),Pe=n(Yl,"UL",{});var ze=s(Pe);W3=n(ze,"LI",{});var fNe=s(W3);TEe=n(fNe,"STRONG",{});var ZLt=s(TEe);YPr=r(ZLt,"bart"),ZLt.forEach(t),KPr=r(fNe," \u2014 "),rK=n(fNe,"A",{href:!0});var e8t=s(rK);ZPr=r(e8t,"FlaxBartForConditionalGeneration"),e8t.forEach(t),eBr=r(fNe," (BART model)"),fNe.forEach(t),oBr=i(ze),Q3=n(ze,"LI",{});var mNe=s(Q3);MEe=n(mNe,"STRONG",{});var o8t=s(MEe);rBr=r(o8t,"blenderbot"),o8t.forEach(t),tBr=r(mNe," \u2014 "),tK=n(mNe,"A",{href:!0});var r8t=s(tK);aBr=r(r8t,"FlaxBlenderbotForConditionalGeneration"),r8t.forEach(t),nBr=r(mNe," (Blenderbot model)"),mNe.forEach(t),sBr=i(ze),H3=n(ze,"LI",{});var gNe=s(H3);EEe=n(gNe,"STRONG",{});var t8t=s(EEe);lBr=r(t8t,"blenderbot-small"),t8t.forEach(t),iBr=r(gNe," \u2014 "),aK=n(gNe,"A",{href:!0});var a8t=s(aK);dBr=r(a8t,"FlaxBlenderbotSmallForConditionalGeneration"),a8t.forEach(t),cBr=r(gNe," (BlenderbotSmall model)"),gNe.forEach(t),fBr=i(ze),U3=n(ze,"LI",{});var hNe=s(U3);CEe=n(hNe,"STRONG",{});var n8t=s(CEe);mBr=r(n8t,"encoder-decoder"),n8t.forEach(t),gBr=r(hNe," \u2014 "),nK=n(hNe,"A",{href:!0});var s8t=s(nK);hBr=r(s8t,"FlaxEncoderDecoderModel"),s8t.forEach(t),pBr=r(hNe," (Encoder decoder model)"),hNe.forEach(t),_Br=i(ze),J3=n(ze,"LI",{});var pNe=s(J3);wEe=n(pNe,"STRONG",{});var l8t=s(wEe);uBr=r(l8t,"marian"),l8t.forEach(t),bBr=r(pNe," \u2014 "),sK=n(pNe,"A",{href:!0});var i8t=s(sK);vBr=r(i8t,"FlaxMarianMTModel"),i8t.forEach(t),FBr=r(pNe," (Marian model)"),pNe.forEach(t),TBr=i(ze),Y3=n(ze,"LI",{});var _Ne=s(Y3);AEe=n(_Ne,"STRONG",{});var d8t=s(AEe);MBr=r(d8t,"mbart"),d8t.forEach(t),EBr=r(_Ne," \u2014 "),lK=n(_Ne,"A",{href:!0});var c8t=s(lK);CBr=r(c8t,"FlaxMBartForConditionalGeneration"),c8t.forEach(t),wBr=r(_Ne," (mBART model)"),_Ne.forEach(t),ABr=i(ze),K3=n(ze,"LI",{});var uNe=s(K3);yEe=n(uNe,"STRONG",{});var f8t=s(yEe);yBr=r(f8t,"mt5"),f8t.forEach(t),LBr=r(uNe," \u2014 "),iK=n(uNe,"A",{href:!0});var m8t=s(iK);xBr=r(m8t,"FlaxMT5ForConditionalGeneration"),m8t.forEach(t),$Br=r(uNe," (mT5 model)"),uNe.forEach(t),kBr=i(ze),Z3=n(ze,"LI",{});var bNe=s(Z3);LEe=n(bNe,"STRONG",{});var g8t=s(LEe);SBr=r(g8t,"pegasus"),g8t.forEach(t),RBr=r(bNe," \u2014 "),dK=n(bNe,"A",{href:!0});var h8t=s(dK);PBr=r(h8t,"FlaxPegasusForConditionalGeneration"),h8t.forEach(t),BBr=r(bNe," (Pegasus model)"),bNe.forEach(t),IBr=i(ze),ew=n(ze,"LI",{});var vNe=s(ew);xEe=n(vNe,"STRONG",{});var p8t=s(xEe);NBr=r(p8t,"t5"),p8t.forEach(t),qBr=r(vNe," \u2014 "),cK=n(vNe,"A",{href:!0});var _8t=s(cK);jBr=r(_8t,"FlaxT5ForConditionalGeneration"),_8t.forEach(t),DBr=r(vNe," (T5 model)"),vNe.forEach(t),ze.forEach(t),GBr=i(Yl),T(ow.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),Uje=i(f),zc=n(f,"H2",{class:!0});var rOe=s(zc);rw=n(rOe,"A",{id:!0,class:!0,href:!0});var u8t=s(rw);$Ee=n(u8t,"SPAN",{});var b8t=s($Ee);T(K9.$$.fragment,b8t),b8t.forEach(t),u8t.forEach(t),OBr=i(rOe),kEe=n(rOe,"SPAN",{});var v8t=s(kEe);VBr=r(v8t,"FlaxAutoModelForSequenceClassification"),v8t.forEach(t),rOe.forEach(t),Jje=i(f),_r=n(f,"DIV",{class:!0});var Kl=s(_r);T(Z9.$$.fragment,Kl),XBr=i(Kl),Wc=n(Kl,"P",{});var Jee=s(Wc);zBr=r(Jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),fK=n(Jee,"A",{href:!0});var F8t=s(fK);WBr=r(F8t,"from_pretrained()"),F8t.forEach(t),QBr=r(Jee," class method or the "),mK=n(Jee,"A",{href:!0});var T8t=s(mK);HBr=r(T8t,"from_config()"),T8t.forEach(t),UBr=r(Jee,` class
method.`),Jee.forEach(t),JBr=i(Kl),ex=n(Kl,"P",{});var tOe=s(ex);YBr=r(tOe,"This class cannot be instantiated directly using "),SEe=n(tOe,"CODE",{});var M8t=s(SEe);KBr=r(M8t,"__init__()"),M8t.forEach(t),ZBr=r(tOe," (throws an error)."),tOe.forEach(t),eIr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var fA=s(Qt);T(ox.$$.fragment,fA),oIr=i(fA),REe=n(fA,"P",{});var E8t=s(REe);rIr=r(E8t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),E8t.forEach(t),tIr=i(fA),Qc=n(fA,"P",{});var Yee=s(Qc);aIr=r(Yee,`Note:
Loading a model from its configuration file does `),PEe=n(Yee,"STRONG",{});var C8t=s(PEe);nIr=r(C8t,"not"),C8t.forEach(t),sIr=r(Yee,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Yee,"A",{href:!0});var w8t=s(gK);lIr=r(w8t,"from_pretrained()"),w8t.forEach(t),iIr=r(Yee," to load the model weights."),Yee.forEach(t),dIr=i(fA),T(tw.$$.fragment,fA),fA.forEach(t),cIr=i(Kl),Xr=n(Kl,"DIV",{class:!0});var Zl=s(Xr);T(rx.$$.fragment,Zl),fIr=i(Zl),BEe=n(Zl,"P",{});var A8t=s(BEe);mIr=r(A8t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),A8t.forEach(t),gIr=i(Zl),vn=n(Zl,"P",{});var mA=s(vn);hIr=r(mA,"The model class to instantiate is selected based on the "),IEe=n(mA,"CODE",{});var y8t=s(IEe);pIr=r(y8t,"model_type"),y8t.forEach(t),_Ir=r(mA,` property of the config object (either
passed as an argument or loaded from `),NEe=n(mA,"CODE",{});var L8t=s(NEe);uIr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),bIr=r(mA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qEe=n(mA,"CODE",{});var x8t=s(qEe);vIr=r(x8t,"pretrained_model_name_or_path"),x8t.forEach(t),FIr=r(mA,":"),mA.forEach(t),TIr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);aw=n(Ne,"LI",{});var FNe=s(aw);jEe=n(FNe,"STRONG",{});var $8t=s(jEe);MIr=r($8t,"albert"),$8t.forEach(t),EIr=r(FNe," \u2014 "),hK=n(FNe,"A",{href:!0});var k8t=s(hK);CIr=r(k8t,"FlaxAlbertForSequenceClassification"),k8t.forEach(t),wIr=r(FNe," (ALBERT model)"),FNe.forEach(t),AIr=i(Ne),nw=n(Ne,"LI",{});var TNe=s(nw);DEe=n(TNe,"STRONG",{});var S8t=s(DEe);yIr=r(S8t,"bart"),S8t.forEach(t),LIr=r(TNe," \u2014 "),pK=n(TNe,"A",{href:!0});var R8t=s(pK);xIr=r(R8t,"FlaxBartForSequenceClassification"),R8t.forEach(t),$Ir=r(TNe," (BART model)"),TNe.forEach(t),kIr=i(Ne),sw=n(Ne,"LI",{});var MNe=s(sw);GEe=n(MNe,"STRONG",{});var P8t=s(GEe);SIr=r(P8t,"bert"),P8t.forEach(t),RIr=r(MNe," \u2014 "),_K=n(MNe,"A",{href:!0});var B8t=s(_K);PIr=r(B8t,"FlaxBertForSequenceClassification"),B8t.forEach(t),BIr=r(MNe," (BERT model)"),MNe.forEach(t),IIr=i(Ne),lw=n(Ne,"LI",{});var ENe=s(lw);OEe=n(ENe,"STRONG",{});var I8t=s(OEe);NIr=r(I8t,"big_bird"),I8t.forEach(t),qIr=r(ENe," \u2014 "),uK=n(ENe,"A",{href:!0});var N8t=s(uK);jIr=r(N8t,"FlaxBigBirdForSequenceClassification"),N8t.forEach(t),DIr=r(ENe," (BigBird model)"),ENe.forEach(t),GIr=i(Ne),iw=n(Ne,"LI",{});var CNe=s(iw);VEe=n(CNe,"STRONG",{});var q8t=s(VEe);OIr=r(q8t,"distilbert"),q8t.forEach(t),VIr=r(CNe," \u2014 "),bK=n(CNe,"A",{href:!0});var j8t=s(bK);XIr=r(j8t,"FlaxDistilBertForSequenceClassification"),j8t.forEach(t),zIr=r(CNe," (DistilBERT model)"),CNe.forEach(t),WIr=i(Ne),dw=n(Ne,"LI",{});var wNe=s(dw);XEe=n(wNe,"STRONG",{});var D8t=s(XEe);QIr=r(D8t,"electra"),D8t.forEach(t),HIr=r(wNe," \u2014 "),vK=n(wNe,"A",{href:!0});var G8t=s(vK);UIr=r(G8t,"FlaxElectraForSequenceClassification"),G8t.forEach(t),JIr=r(wNe," (ELECTRA model)"),wNe.forEach(t),YIr=i(Ne),cw=n(Ne,"LI",{});var ANe=s(cw);zEe=n(ANe,"STRONG",{});var O8t=s(zEe);KIr=r(O8t,"mbart"),O8t.forEach(t),ZIr=r(ANe," \u2014 "),FK=n(ANe,"A",{href:!0});var V8t=s(FK);eNr=r(V8t,"FlaxMBartForSequenceClassification"),V8t.forEach(t),oNr=r(ANe," (mBART model)"),ANe.forEach(t),rNr=i(Ne),fw=n(Ne,"LI",{});var yNe=s(fw);WEe=n(yNe,"STRONG",{});var X8t=s(WEe);tNr=r(X8t,"roberta"),X8t.forEach(t),aNr=r(yNe," \u2014 "),TK=n(yNe,"A",{href:!0});var z8t=s(TK);nNr=r(z8t,"FlaxRobertaForSequenceClassification"),z8t.forEach(t),sNr=r(yNe," (RoBERTa model)"),yNe.forEach(t),lNr=i(Ne),mw=n(Ne,"LI",{});var LNe=s(mw);QEe=n(LNe,"STRONG",{});var W8t=s(QEe);iNr=r(W8t,"roformer"),W8t.forEach(t),dNr=r(LNe," \u2014 "),MK=n(LNe,"A",{href:!0});var Q8t=s(MK);cNr=r(Q8t,"FlaxRoFormerForSequenceClassification"),Q8t.forEach(t),fNr=r(LNe," (RoFormer model)"),LNe.forEach(t),mNr=i(Ne),gw=n(Ne,"LI",{});var xNe=s(gw);HEe=n(xNe,"STRONG",{});var H8t=s(HEe);gNr=r(H8t,"xlm-roberta"),H8t.forEach(t),hNr=r(xNe," \u2014 "),EK=n(xNe,"A",{href:!0});var U8t=s(EK);pNr=r(U8t,"FlaxXLMRobertaForSequenceClassification"),U8t.forEach(t),_Nr=r(xNe," (XLM-RoBERTa model)"),xNe.forEach(t),Ne.forEach(t),uNr=i(Zl),T(hw.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Yje=i(f),Hc=n(f,"H2",{class:!0});var aOe=s(Hc);pw=n(aOe,"A",{id:!0,class:!0,href:!0});var J8t=s(pw);UEe=n(J8t,"SPAN",{});var Y8t=s(UEe);T(tx.$$.fragment,Y8t),Y8t.forEach(t),J8t.forEach(t),bNr=i(aOe),JEe=n(aOe,"SPAN",{});var K8t=s(JEe);vNr=r(K8t,"FlaxAutoModelForQuestionAnswering"),K8t.forEach(t),aOe.forEach(t),Kje=i(f),ur=n(f,"DIV",{class:!0});var ei=s(ur);T(ax.$$.fragment,ei),FNr=i(ei),Uc=n(ei,"P",{});var Kee=s(Uc);TNr=r(Kee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),CK=n(Kee,"A",{href:!0});var Z8t=s(CK);MNr=r(Z8t,"from_pretrained()"),Z8t.forEach(t),ENr=r(Kee," class method or the "),wK=n(Kee,"A",{href:!0});var e9t=s(wK);CNr=r(e9t,"from_config()"),e9t.forEach(t),wNr=r(Kee,` class
method.`),Kee.forEach(t),ANr=i(ei),nx=n(ei,"P",{});var nOe=s(nx);yNr=r(nOe,"This class cannot be instantiated directly using "),YEe=n(nOe,"CODE",{});var o9t=s(YEe);LNr=r(o9t,"__init__()"),o9t.forEach(t),xNr=r(nOe," (throws an error)."),nOe.forEach(t),$Nr=i(ei),Ht=n(ei,"DIV",{class:!0});var gA=s(Ht);T(sx.$$.fragment,gA),kNr=i(gA),KEe=n(gA,"P",{});var r9t=s(KEe);SNr=r(r9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r9t.forEach(t),RNr=i(gA),Jc=n(gA,"P",{});var Zee=s(Jc);PNr=r(Zee,`Note:
Loading a model from its configuration file does `),ZEe=n(Zee,"STRONG",{});var t9t=s(ZEe);BNr=r(t9t,"not"),t9t.forEach(t),INr=r(Zee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(Zee,"A",{href:!0});var a9t=s(AK);NNr=r(a9t,"from_pretrained()"),a9t.forEach(t),qNr=r(Zee," to load the model weights."),Zee.forEach(t),jNr=i(gA),T(_w.$$.fragment,gA),gA.forEach(t),DNr=i(ei),zr=n(ei,"DIV",{class:!0});var oi=s(zr);T(lx.$$.fragment,oi),GNr=i(oi),eCe=n(oi,"P",{});var n9t=s(eCe);ONr=r(n9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n9t.forEach(t),VNr=i(oi),Fn=n(oi,"P",{});var hA=s(Fn);XNr=r(hA,"The model class to instantiate is selected based on the "),oCe=n(hA,"CODE",{});var s9t=s(oCe);zNr=r(s9t,"model_type"),s9t.forEach(t),WNr=r(hA,` property of the config object (either
passed as an argument or loaded from `),rCe=n(hA,"CODE",{});var l9t=s(rCe);QNr=r(l9t,"pretrained_model_name_or_path"),l9t.forEach(t),HNr=r(hA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tCe=n(hA,"CODE",{});var i9t=s(tCe);UNr=r(i9t,"pretrained_model_name_or_path"),i9t.forEach(t),JNr=r(hA,":"),hA.forEach(t),YNr=i(oi),$e=n(oi,"UL",{});var qe=s($e);uw=n(qe,"LI",{});var $Ne=s(uw);aCe=n($Ne,"STRONG",{});var d9t=s(aCe);KNr=r(d9t,"albert"),d9t.forEach(t),ZNr=r($Ne," \u2014 "),yK=n($Ne,"A",{href:!0});var c9t=s(yK);eqr=r(c9t,"FlaxAlbertForQuestionAnswering"),c9t.forEach(t),oqr=r($Ne," (ALBERT model)"),$Ne.forEach(t),rqr=i(qe),bw=n(qe,"LI",{});var kNe=s(bw);nCe=n(kNe,"STRONG",{});var f9t=s(nCe);tqr=r(f9t,"bart"),f9t.forEach(t),aqr=r(kNe," \u2014 "),LK=n(kNe,"A",{href:!0});var m9t=s(LK);nqr=r(m9t,"FlaxBartForQuestionAnswering"),m9t.forEach(t),sqr=r(kNe," (BART model)"),kNe.forEach(t),lqr=i(qe),vw=n(qe,"LI",{});var SNe=s(vw);sCe=n(SNe,"STRONG",{});var g9t=s(sCe);iqr=r(g9t,"bert"),g9t.forEach(t),dqr=r(SNe," \u2014 "),xK=n(SNe,"A",{href:!0});var h9t=s(xK);cqr=r(h9t,"FlaxBertForQuestionAnswering"),h9t.forEach(t),fqr=r(SNe," (BERT model)"),SNe.forEach(t),mqr=i(qe),Fw=n(qe,"LI",{});var RNe=s(Fw);lCe=n(RNe,"STRONG",{});var p9t=s(lCe);gqr=r(p9t,"big_bird"),p9t.forEach(t),hqr=r(RNe," \u2014 "),$K=n(RNe,"A",{href:!0});var _9t=s($K);pqr=r(_9t,"FlaxBigBirdForQuestionAnswering"),_9t.forEach(t),_qr=r(RNe," (BigBird model)"),RNe.forEach(t),uqr=i(qe),Tw=n(qe,"LI",{});var PNe=s(Tw);iCe=n(PNe,"STRONG",{});var u9t=s(iCe);bqr=r(u9t,"distilbert"),u9t.forEach(t),vqr=r(PNe," \u2014 "),kK=n(PNe,"A",{href:!0});var b9t=s(kK);Fqr=r(b9t,"FlaxDistilBertForQuestionAnswering"),b9t.forEach(t),Tqr=r(PNe," (DistilBERT model)"),PNe.forEach(t),Mqr=i(qe),Mw=n(qe,"LI",{});var BNe=s(Mw);dCe=n(BNe,"STRONG",{});var v9t=s(dCe);Eqr=r(v9t,"electra"),v9t.forEach(t),Cqr=r(BNe," \u2014 "),SK=n(BNe,"A",{href:!0});var F9t=s(SK);wqr=r(F9t,"FlaxElectraForQuestionAnswering"),F9t.forEach(t),Aqr=r(BNe," (ELECTRA model)"),BNe.forEach(t),yqr=i(qe),Ew=n(qe,"LI",{});var INe=s(Ew);cCe=n(INe,"STRONG",{});var T9t=s(cCe);Lqr=r(T9t,"mbart"),T9t.forEach(t),xqr=r(INe," \u2014 "),RK=n(INe,"A",{href:!0});var M9t=s(RK);$qr=r(M9t,"FlaxMBartForQuestionAnswering"),M9t.forEach(t),kqr=r(INe," (mBART model)"),INe.forEach(t),Sqr=i(qe),Cw=n(qe,"LI",{});var NNe=s(Cw);fCe=n(NNe,"STRONG",{});var E9t=s(fCe);Rqr=r(E9t,"roberta"),E9t.forEach(t),Pqr=r(NNe," \u2014 "),PK=n(NNe,"A",{href:!0});var C9t=s(PK);Bqr=r(C9t,"FlaxRobertaForQuestionAnswering"),C9t.forEach(t),Iqr=r(NNe," (RoBERTa model)"),NNe.forEach(t),Nqr=i(qe),ww=n(qe,"LI",{});var qNe=s(ww);mCe=n(qNe,"STRONG",{});var w9t=s(mCe);qqr=r(w9t,"roformer"),w9t.forEach(t),jqr=r(qNe," \u2014 "),BK=n(qNe,"A",{href:!0});var A9t=s(BK);Dqr=r(A9t,"FlaxRoFormerForQuestionAnswering"),A9t.forEach(t),Gqr=r(qNe," (RoFormer model)"),qNe.forEach(t),Oqr=i(qe),Aw=n(qe,"LI",{});var jNe=s(Aw);gCe=n(jNe,"STRONG",{});var y9t=s(gCe);Vqr=r(y9t,"xlm-roberta"),y9t.forEach(t),Xqr=r(jNe," \u2014 "),IK=n(jNe,"A",{href:!0});var L9t=s(IK);zqr=r(L9t,"FlaxXLMRobertaForQuestionAnswering"),L9t.forEach(t),Wqr=r(jNe," (XLM-RoBERTa model)"),jNe.forEach(t),qe.forEach(t),Qqr=i(oi),T(yw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Zje=i(f),Yc=n(f,"H2",{class:!0});var sOe=s(Yc);Lw=n(sOe,"A",{id:!0,class:!0,href:!0});var x9t=s(Lw);hCe=n(x9t,"SPAN",{});var $9t=s(hCe);T(ix.$$.fragment,$9t),$9t.forEach(t),x9t.forEach(t),Hqr=i(sOe),pCe=n(sOe,"SPAN",{});var k9t=s(pCe);Uqr=r(k9t,"FlaxAutoModelForTokenClassification"),k9t.forEach(t),sOe.forEach(t),eDe=i(f),br=n(f,"DIV",{class:!0});var ri=s(br);T(dx.$$.fragment,ri),Jqr=i(ri),Kc=n(ri,"P",{});var eoe=s(Kc);Yqr=r(eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),NK=n(eoe,"A",{href:!0});var S9t=s(NK);Kqr=r(S9t,"from_pretrained()"),S9t.forEach(t),Zqr=r(eoe," class method or the "),qK=n(eoe,"A",{href:!0});var R9t=s(qK);ejr=r(R9t,"from_config()"),R9t.forEach(t),ojr=r(eoe,` class
method.`),eoe.forEach(t),rjr=i(ri),cx=n(ri,"P",{});var lOe=s(cx);tjr=r(lOe,"This class cannot be instantiated directly using "),_Ce=n(lOe,"CODE",{});var P9t=s(_Ce);ajr=r(P9t,"__init__()"),P9t.forEach(t),njr=r(lOe," (throws an error)."),lOe.forEach(t),sjr=i(ri),Ut=n(ri,"DIV",{class:!0});var pA=s(Ut);T(fx.$$.fragment,pA),ljr=i(pA),uCe=n(pA,"P",{});var B9t=s(uCe);ijr=r(B9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),B9t.forEach(t),djr=i(pA),Zc=n(pA,"P",{});var ooe=s(Zc);cjr=r(ooe,`Note:
Loading a model from its configuration file does `),bCe=n(ooe,"STRONG",{});var I9t=s(bCe);fjr=r(I9t,"not"),I9t.forEach(t),mjr=r(ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),jK=n(ooe,"A",{href:!0});var N9t=s(jK);gjr=r(N9t,"from_pretrained()"),N9t.forEach(t),hjr=r(ooe," to load the model weights."),ooe.forEach(t),pjr=i(pA),T(xw.$$.fragment,pA),pA.forEach(t),_jr=i(ri),Wr=n(ri,"DIV",{class:!0});var ti=s(Wr);T(mx.$$.fragment,ti),ujr=i(ti),vCe=n(ti,"P",{});var q9t=s(vCe);bjr=r(q9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),q9t.forEach(t),vjr=i(ti),Tn=n(ti,"P",{});var _A=s(Tn);Fjr=r(_A,"The model class to instantiate is selected based on the "),FCe=n(_A,"CODE",{});var j9t=s(FCe);Tjr=r(j9t,"model_type"),j9t.forEach(t),Mjr=r(_A,` property of the config object (either
passed as an argument or loaded from `),TCe=n(_A,"CODE",{});var D9t=s(TCe);Ejr=r(D9t,"pretrained_model_name_or_path"),D9t.forEach(t),Cjr=r(_A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MCe=n(_A,"CODE",{});var G9t=s(MCe);wjr=r(G9t,"pretrained_model_name_or_path"),G9t.forEach(t),Ajr=r(_A,":"),_A.forEach(t),yjr=i(ti),De=n(ti,"UL",{});var Fo=s(De);$w=n(Fo,"LI",{});var DNe=s($w);ECe=n(DNe,"STRONG",{});var O9t=s(ECe);Ljr=r(O9t,"albert"),O9t.forEach(t),xjr=r(DNe," \u2014 "),DK=n(DNe,"A",{href:!0});var V9t=s(DK);$jr=r(V9t,"FlaxAlbertForTokenClassification"),V9t.forEach(t),kjr=r(DNe," (ALBERT model)"),DNe.forEach(t),Sjr=i(Fo),kw=n(Fo,"LI",{});var GNe=s(kw);CCe=n(GNe,"STRONG",{});var X9t=s(CCe);Rjr=r(X9t,"bert"),X9t.forEach(t),Pjr=r(GNe," \u2014 "),GK=n(GNe,"A",{href:!0});var z9t=s(GK);Bjr=r(z9t,"FlaxBertForTokenClassification"),z9t.forEach(t),Ijr=r(GNe," (BERT model)"),GNe.forEach(t),Njr=i(Fo),Sw=n(Fo,"LI",{});var ONe=s(Sw);wCe=n(ONe,"STRONG",{});var W9t=s(wCe);qjr=r(W9t,"big_bird"),W9t.forEach(t),jjr=r(ONe," \u2014 "),OK=n(ONe,"A",{href:!0});var Q9t=s(OK);Djr=r(Q9t,"FlaxBigBirdForTokenClassification"),Q9t.forEach(t),Gjr=r(ONe," (BigBird model)"),ONe.forEach(t),Ojr=i(Fo),Rw=n(Fo,"LI",{});var VNe=s(Rw);ACe=n(VNe,"STRONG",{});var H9t=s(ACe);Vjr=r(H9t,"distilbert"),H9t.forEach(t),Xjr=r(VNe," \u2014 "),VK=n(VNe,"A",{href:!0});var U9t=s(VK);zjr=r(U9t,"FlaxDistilBertForTokenClassification"),U9t.forEach(t),Wjr=r(VNe," (DistilBERT model)"),VNe.forEach(t),Qjr=i(Fo),Pw=n(Fo,"LI",{});var XNe=s(Pw);yCe=n(XNe,"STRONG",{});var J9t=s(yCe);Hjr=r(J9t,"electra"),J9t.forEach(t),Ujr=r(XNe," \u2014 "),XK=n(XNe,"A",{href:!0});var Y9t=s(XK);Jjr=r(Y9t,"FlaxElectraForTokenClassification"),Y9t.forEach(t),Yjr=r(XNe," (ELECTRA model)"),XNe.forEach(t),Kjr=i(Fo),Bw=n(Fo,"LI",{});var zNe=s(Bw);LCe=n(zNe,"STRONG",{});var K9t=s(LCe);Zjr=r(K9t,"roberta"),K9t.forEach(t),eDr=r(zNe," \u2014 "),zK=n(zNe,"A",{href:!0});var Z9t=s(zK);oDr=r(Z9t,"FlaxRobertaForTokenClassification"),Z9t.forEach(t),rDr=r(zNe," (RoBERTa model)"),zNe.forEach(t),tDr=i(Fo),Iw=n(Fo,"LI",{});var WNe=s(Iw);xCe=n(WNe,"STRONG",{});var ext=s(xCe);aDr=r(ext,"roformer"),ext.forEach(t),nDr=r(WNe," \u2014 "),WK=n(WNe,"A",{href:!0});var oxt=s(WK);sDr=r(oxt,"FlaxRoFormerForTokenClassification"),oxt.forEach(t),lDr=r(WNe," (RoFormer model)"),WNe.forEach(t),iDr=i(Fo),Nw=n(Fo,"LI",{});var QNe=s(Nw);$Ce=n(QNe,"STRONG",{});var rxt=s($Ce);dDr=r(rxt,"xlm-roberta"),rxt.forEach(t),cDr=r(QNe," \u2014 "),QK=n(QNe,"A",{href:!0});var txt=s(QK);fDr=r(txt,"FlaxXLMRobertaForTokenClassification"),txt.forEach(t),mDr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),Fo.forEach(t),gDr=i(ti),T(qw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),oDe=i(f),ef=n(f,"H2",{class:!0});var iOe=s(ef);jw=n(iOe,"A",{id:!0,class:!0,href:!0});var axt=s(jw);kCe=n(axt,"SPAN",{});var nxt=s(kCe);T(gx.$$.fragment,nxt),nxt.forEach(t),axt.forEach(t),hDr=i(iOe),SCe=n(iOe,"SPAN",{});var sxt=s(SCe);pDr=r(sxt,"FlaxAutoModelForMultipleChoice"),sxt.forEach(t),iOe.forEach(t),rDe=i(f),vr=n(f,"DIV",{class:!0});var ai=s(vr);T(hx.$$.fragment,ai),_Dr=i(ai),of=n(ai,"P",{});var roe=s(of);uDr=r(roe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),HK=n(roe,"A",{href:!0});var lxt=s(HK);bDr=r(lxt,"from_pretrained()"),lxt.forEach(t),vDr=r(roe," class method or the "),UK=n(roe,"A",{href:!0});var ixt=s(UK);FDr=r(ixt,"from_config()"),ixt.forEach(t),TDr=r(roe,` class
method.`),roe.forEach(t),MDr=i(ai),px=n(ai,"P",{});var dOe=s(px);EDr=r(dOe,"This class cannot be instantiated directly using "),RCe=n(dOe,"CODE",{});var dxt=s(RCe);CDr=r(dxt,"__init__()"),dxt.forEach(t),wDr=r(dOe," (throws an error)."),dOe.forEach(t),ADr=i(ai),Jt=n(ai,"DIV",{class:!0});var uA=s(Jt);T(_x.$$.fragment,uA),yDr=i(uA),PCe=n(uA,"P",{});var cxt=s(PCe);LDr=r(cxt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cxt.forEach(t),xDr=i(uA),rf=n(uA,"P",{});var toe=s(rf);$Dr=r(toe,`Note:
Loading a model from its configuration file does `),BCe=n(toe,"STRONG",{});var fxt=s(BCe);kDr=r(fxt,"not"),fxt.forEach(t),SDr=r(toe,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(toe,"A",{href:!0});var mxt=s(JK);RDr=r(mxt,"from_pretrained()"),mxt.forEach(t),PDr=r(toe," to load the model weights."),toe.forEach(t),BDr=i(uA),T(Dw.$$.fragment,uA),uA.forEach(t),IDr=i(ai),Qr=n(ai,"DIV",{class:!0});var ni=s(Qr);T(ux.$$.fragment,ni),NDr=i(ni),ICe=n(ni,"P",{});var gxt=s(ICe);qDr=r(gxt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gxt.forEach(t),jDr=i(ni),Mn=n(ni,"P",{});var bA=s(Mn);DDr=r(bA,"The model class to instantiate is selected based on the "),NCe=n(bA,"CODE",{});var hxt=s(NCe);GDr=r(hxt,"model_type"),hxt.forEach(t),ODr=r(bA,` property of the config object (either
passed as an argument or loaded from `),qCe=n(bA,"CODE",{});var pxt=s(qCe);VDr=r(pxt,"pretrained_model_name_or_path"),pxt.forEach(t),XDr=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jCe=n(bA,"CODE",{});var _xt=s(jCe);zDr=r(_xt,"pretrained_model_name_or_path"),_xt.forEach(t),WDr=r(bA,":"),bA.forEach(t),QDr=i(ni),Ge=n(ni,"UL",{});var To=s(Ge);Gw=n(To,"LI",{});var HNe=s(Gw);DCe=n(HNe,"STRONG",{});var uxt=s(DCe);HDr=r(uxt,"albert"),uxt.forEach(t),UDr=r(HNe," \u2014 "),YK=n(HNe,"A",{href:!0});var bxt=s(YK);JDr=r(bxt,"FlaxAlbertForMultipleChoice"),bxt.forEach(t),YDr=r(HNe," (ALBERT model)"),HNe.forEach(t),KDr=i(To),Ow=n(To,"LI",{});var UNe=s(Ow);GCe=n(UNe,"STRONG",{});var vxt=s(GCe);ZDr=r(vxt,"bert"),vxt.forEach(t),eGr=r(UNe," \u2014 "),KK=n(UNe,"A",{href:!0});var Fxt=s(KK);oGr=r(Fxt,"FlaxBertForMultipleChoice"),Fxt.forEach(t),rGr=r(UNe," (BERT model)"),UNe.forEach(t),tGr=i(To),Vw=n(To,"LI",{});var JNe=s(Vw);OCe=n(JNe,"STRONG",{});var Txt=s(OCe);aGr=r(Txt,"big_bird"),Txt.forEach(t),nGr=r(JNe," \u2014 "),ZK=n(JNe,"A",{href:!0});var Mxt=s(ZK);sGr=r(Mxt,"FlaxBigBirdForMultipleChoice"),Mxt.forEach(t),lGr=r(JNe," (BigBird model)"),JNe.forEach(t),iGr=i(To),Xw=n(To,"LI",{});var YNe=s(Xw);VCe=n(YNe,"STRONG",{});var Ext=s(VCe);dGr=r(Ext,"distilbert"),Ext.forEach(t),cGr=r(YNe," \u2014 "),eZ=n(YNe,"A",{href:!0});var Cxt=s(eZ);fGr=r(Cxt,"FlaxDistilBertForMultipleChoice"),Cxt.forEach(t),mGr=r(YNe," (DistilBERT model)"),YNe.forEach(t),gGr=i(To),zw=n(To,"LI",{});var KNe=s(zw);XCe=n(KNe,"STRONG",{});var wxt=s(XCe);hGr=r(wxt,"electra"),wxt.forEach(t),pGr=r(KNe," \u2014 "),oZ=n(KNe,"A",{href:!0});var Axt=s(oZ);_Gr=r(Axt,"FlaxElectraForMultipleChoice"),Axt.forEach(t),uGr=r(KNe," (ELECTRA model)"),KNe.forEach(t),bGr=i(To),Ww=n(To,"LI",{});var ZNe=s(Ww);zCe=n(ZNe,"STRONG",{});var yxt=s(zCe);vGr=r(yxt,"roberta"),yxt.forEach(t),FGr=r(ZNe," \u2014 "),rZ=n(ZNe,"A",{href:!0});var Lxt=s(rZ);TGr=r(Lxt,"FlaxRobertaForMultipleChoice"),Lxt.forEach(t),MGr=r(ZNe," (RoBERTa model)"),ZNe.forEach(t),EGr=i(To),Qw=n(To,"LI",{});var eqe=s(Qw);WCe=n(eqe,"STRONG",{});var xxt=s(WCe);CGr=r(xxt,"roformer"),xxt.forEach(t),wGr=r(eqe," \u2014 "),tZ=n(eqe,"A",{href:!0});var $xt=s(tZ);AGr=r($xt,"FlaxRoFormerForMultipleChoice"),$xt.forEach(t),yGr=r(eqe," (RoFormer model)"),eqe.forEach(t),LGr=i(To),Hw=n(To,"LI",{});var oqe=s(Hw);QCe=n(oqe,"STRONG",{});var kxt=s(QCe);xGr=r(kxt,"xlm-roberta"),kxt.forEach(t),$Gr=r(oqe," \u2014 "),aZ=n(oqe,"A",{href:!0});var Sxt=s(aZ);kGr=r(Sxt,"FlaxXLMRobertaForMultipleChoice"),Sxt.forEach(t),SGr=r(oqe," (XLM-RoBERTa model)"),oqe.forEach(t),To.forEach(t),RGr=i(ni),T(Uw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),tDe=i(f),tf=n(f,"H2",{class:!0});var cOe=s(tf);Jw=n(cOe,"A",{id:!0,class:!0,href:!0});var Rxt=s(Jw);HCe=n(Rxt,"SPAN",{});var Pxt=s(HCe);T(bx.$$.fragment,Pxt),Pxt.forEach(t),Rxt.forEach(t),PGr=i(cOe),UCe=n(cOe,"SPAN",{});var Bxt=s(UCe);BGr=r(Bxt,"FlaxAutoModelForNextSentencePrediction"),Bxt.forEach(t),cOe.forEach(t),aDe=i(f),Fr=n(f,"DIV",{class:!0});var si=s(Fr);T(vx.$$.fragment,si),IGr=i(si),af=n(si,"P",{});var aoe=s(af);NGr=r(aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),nZ=n(aoe,"A",{href:!0});var Ixt=s(nZ);qGr=r(Ixt,"from_pretrained()"),Ixt.forEach(t),jGr=r(aoe," class method or the "),sZ=n(aoe,"A",{href:!0});var Nxt=s(sZ);DGr=r(Nxt,"from_config()"),Nxt.forEach(t),GGr=r(aoe,` class
method.`),aoe.forEach(t),OGr=i(si),Fx=n(si,"P",{});var fOe=s(Fx);VGr=r(fOe,"This class cannot be instantiated directly using "),JCe=n(fOe,"CODE",{});var qxt=s(JCe);XGr=r(qxt,"__init__()"),qxt.forEach(t),zGr=r(fOe," (throws an error)."),fOe.forEach(t),WGr=i(si),Yt=n(si,"DIV",{class:!0});var vA=s(Yt);T(Tx.$$.fragment,vA),QGr=i(vA),YCe=n(vA,"P",{});var jxt=s(YCe);HGr=r(jxt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jxt.forEach(t),UGr=i(vA),nf=n(vA,"P",{});var noe=s(nf);JGr=r(noe,`Note:
Loading a model from its configuration file does `),KCe=n(noe,"STRONG",{});var Dxt=s(KCe);YGr=r(Dxt,"not"),Dxt.forEach(t),KGr=r(noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lZ=n(noe,"A",{href:!0});var Gxt=s(lZ);ZGr=r(Gxt,"from_pretrained()"),Gxt.forEach(t),eOr=r(noe," to load the model weights."),noe.forEach(t),oOr=i(vA),T(Yw.$$.fragment,vA),vA.forEach(t),rOr=i(si),Hr=n(si,"DIV",{class:!0});var li=s(Hr);T(Mx.$$.fragment,li),tOr=i(li),ZCe=n(li,"P",{});var Oxt=s(ZCe);aOr=r(Oxt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Oxt.forEach(t),nOr=i(li),En=n(li,"P",{});var FA=s(En);sOr=r(FA,"The model class to instantiate is selected based on the "),e5e=n(FA,"CODE",{});var Vxt=s(e5e);lOr=r(Vxt,"model_type"),Vxt.forEach(t),iOr=r(FA,` property of the config object (either
passed as an argument or loaded from `),o5e=n(FA,"CODE",{});var Xxt=s(o5e);dOr=r(Xxt,"pretrained_model_name_or_path"),Xxt.forEach(t),cOr=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(FA,"CODE",{});var zxt=s(r5e);fOr=r(zxt,"pretrained_model_name_or_path"),zxt.forEach(t),mOr=r(FA,":"),FA.forEach(t),gOr=i(li),t5e=n(li,"UL",{});var Wxt=s(t5e);Kw=n(Wxt,"LI",{});var rqe=s(Kw);a5e=n(rqe,"STRONG",{});var Qxt=s(a5e);hOr=r(Qxt,"bert"),Qxt.forEach(t),pOr=r(rqe," \u2014 "),iZ=n(rqe,"A",{href:!0});var Hxt=s(iZ);_Or=r(Hxt,"FlaxBertForNextSentencePrediction"),Hxt.forEach(t),uOr=r(rqe," (BERT model)"),rqe.forEach(t),Wxt.forEach(t),bOr=i(li),T(Zw.$$.fragment,li),li.forEach(t),si.forEach(t),nDe=i(f),sf=n(f,"H2",{class:!0});var mOe=s(sf);e0=n(mOe,"A",{id:!0,class:!0,href:!0});var Uxt=s(e0);n5e=n(Uxt,"SPAN",{});var Jxt=s(n5e);T(Ex.$$.fragment,Jxt),Jxt.forEach(t),Uxt.forEach(t),vOr=i(mOe),s5e=n(mOe,"SPAN",{});var Yxt=s(s5e);FOr=r(Yxt,"FlaxAutoModelForImageClassification"),Yxt.forEach(t),mOe.forEach(t),sDe=i(f),Tr=n(f,"DIV",{class:!0});var ii=s(Tr);T(Cx.$$.fragment,ii),TOr=i(ii),lf=n(ii,"P",{});var soe=s(lf);MOr=r(soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dZ=n(soe,"A",{href:!0});var Kxt=s(dZ);EOr=r(Kxt,"from_pretrained()"),Kxt.forEach(t),COr=r(soe," class method or the "),cZ=n(soe,"A",{href:!0});var Zxt=s(cZ);wOr=r(Zxt,"from_config()"),Zxt.forEach(t),AOr=r(soe,` class
method.`),soe.forEach(t),yOr=i(ii),wx=n(ii,"P",{});var gOe=s(wx);LOr=r(gOe,"This class cannot be instantiated directly using "),l5e=n(gOe,"CODE",{});var e$t=s(l5e);xOr=r(e$t,"__init__()"),e$t.forEach(t),$Or=r(gOe," (throws an error)."),gOe.forEach(t),kOr=i(ii),Kt=n(ii,"DIV",{class:!0});var TA=s(Kt);T(Ax.$$.fragment,TA),SOr=i(TA),i5e=n(TA,"P",{});var o$t=s(i5e);ROr=r(o$t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),o$t.forEach(t),POr=i(TA),df=n(TA,"P",{});var loe=s(df);BOr=r(loe,`Note:
Loading a model from its configuration file does `),d5e=n(loe,"STRONG",{});var r$t=s(d5e);IOr=r(r$t,"not"),r$t.forEach(t),NOr=r(loe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(loe,"A",{href:!0});var t$t=s(fZ);qOr=r(t$t,"from_pretrained()"),t$t.forEach(t),jOr=r(loe," to load the model weights."),loe.forEach(t),DOr=i(TA),T(o0.$$.fragment,TA),TA.forEach(t),GOr=i(ii),Ur=n(ii,"DIV",{class:!0});var di=s(Ur);T(yx.$$.fragment,di),OOr=i(di),c5e=n(di,"P",{});var a$t=s(c5e);VOr=r(a$t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),a$t.forEach(t),XOr=i(di),Cn=n(di,"P",{});var MA=s(Cn);zOr=r(MA,"The model class to instantiate is selected based on the "),f5e=n(MA,"CODE",{});var n$t=s(f5e);WOr=r(n$t,"model_type"),n$t.forEach(t),QOr=r(MA,` property of the config object (either
passed as an argument or loaded from `),m5e=n(MA,"CODE",{});var s$t=s(m5e);HOr=r(s$t,"pretrained_model_name_or_path"),s$t.forEach(t),UOr=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(MA,"CODE",{});var l$t=s(g5e);JOr=r(l$t,"pretrained_model_name_or_path"),l$t.forEach(t),YOr=r(MA,":"),MA.forEach(t),KOr=i(di),Lx=n(di,"UL",{});var hOe=s(Lx);r0=n(hOe,"LI",{});var tqe=s(r0);h5e=n(tqe,"STRONG",{});var i$t=s(h5e);ZOr=r(i$t,"beit"),i$t.forEach(t),eVr=r(tqe," \u2014 "),mZ=n(tqe,"A",{href:!0});var d$t=s(mZ);oVr=r(d$t,"FlaxBeitForImageClassification"),d$t.forEach(t),rVr=r(tqe," (BEiT model)"),tqe.forEach(t),tVr=i(hOe),t0=n(hOe,"LI",{});var aqe=s(t0);p5e=n(aqe,"STRONG",{});var c$t=s(p5e);aVr=r(c$t,"vit"),c$t.forEach(t),nVr=r(aqe," \u2014 "),gZ=n(aqe,"A",{href:!0});var f$t=s(gZ);sVr=r(f$t,"FlaxViTForImageClassification"),f$t.forEach(t),lVr=r(aqe," (ViT model)"),aqe.forEach(t),hOe.forEach(t),iVr=i(di),T(a0.$$.fragment,di),di.forEach(t),ii.forEach(t),lDe=i(f),cf=n(f,"H2",{class:!0});var pOe=s(cf);n0=n(pOe,"A",{id:!0,class:!0,href:!0});var m$t=s(n0);_5e=n(m$t,"SPAN",{});var g$t=s(_5e);T(xx.$$.fragment,g$t),g$t.forEach(t),m$t.forEach(t),dVr=i(pOe),u5e=n(pOe,"SPAN",{});var h$t=s(u5e);cVr=r(h$t,"FlaxAutoModelForVision2Seq"),h$t.forEach(t),pOe.forEach(t),iDe=i(f),Mr=n(f,"DIV",{class:!0});var ci=s(Mr);T($x.$$.fragment,ci),fVr=i(ci),ff=n(ci,"P",{});var ioe=s(ff);mVr=r(ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),hZ=n(ioe,"A",{href:!0});var p$t=s(hZ);gVr=r(p$t,"from_pretrained()"),p$t.forEach(t),hVr=r(ioe," class method or the "),pZ=n(ioe,"A",{href:!0});var _$t=s(pZ);pVr=r(_$t,"from_config()"),_$t.forEach(t),_Vr=r(ioe,` class
method.`),ioe.forEach(t),uVr=i(ci),kx=n(ci,"P",{});var _Oe=s(kx);bVr=r(_Oe,"This class cannot be instantiated directly using "),b5e=n(_Oe,"CODE",{});var u$t=s(b5e);vVr=r(u$t,"__init__()"),u$t.forEach(t),FVr=r(_Oe," (throws an error)."),_Oe.forEach(t),TVr=i(ci),Zt=n(ci,"DIV",{class:!0});var EA=s(Zt);T(Sx.$$.fragment,EA),MVr=i(EA),v5e=n(EA,"P",{});var b$t=s(v5e);EVr=r(b$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),b$t.forEach(t),CVr=i(EA),mf=n(EA,"P",{});var doe=s(mf);wVr=r(doe,`Note:
Loading a model from its configuration file does `),F5e=n(doe,"STRONG",{});var v$t=s(F5e);AVr=r(v$t,"not"),v$t.forEach(t),yVr=r(doe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(doe,"A",{href:!0});var F$t=s(_Z);LVr=r(F$t,"from_pretrained()"),F$t.forEach(t),xVr=r(doe," to load the model weights."),doe.forEach(t),$Vr=i(EA),T(s0.$$.fragment,EA),EA.forEach(t),kVr=i(ci),Jr=n(ci,"DIV",{class:!0});var fi=s(Jr);T(Rx.$$.fragment,fi),SVr=i(fi),T5e=n(fi,"P",{});var T$t=s(T5e);RVr=r(T$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),T$t.forEach(t),PVr=i(fi),wn=n(fi,"P",{});var CA=s(wn);BVr=r(CA,"The model class to instantiate is selected based on the "),M5e=n(CA,"CODE",{});var M$t=s(M5e);IVr=r(M$t,"model_type"),M$t.forEach(t),NVr=r(CA,` property of the config object (either
passed as an argument or loaded from `),E5e=n(CA,"CODE",{});var E$t=s(E5e);qVr=r(E$t,"pretrained_model_name_or_path"),E$t.forEach(t),jVr=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),C5e=n(CA,"CODE",{});var C$t=s(C5e);DVr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),GVr=r(CA,":"),CA.forEach(t),OVr=i(fi),w5e=n(fi,"UL",{});var w$t=s(w5e);l0=n(w$t,"LI",{});var nqe=s(l0);A5e=n(nqe,"STRONG",{});var A$t=s(A5e);VVr=r(A$t,"vision-encoder-decoder"),A$t.forEach(t),XVr=r(nqe," \u2014 "),uZ=n(nqe,"A",{href:!0});var y$t=s(uZ);zVr=r(y$t,"FlaxVisionEncoderDecoderModel"),y$t.forEach(t),WVr=r(nqe," (Vision Encoder decoder model)"),nqe.forEach(t),w$t.forEach(t),QVr=i(fi),T(i0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(kSt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(yn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer"),c(bi,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(Ff,"id","extending-the-auto-classes"),c(Ff,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ff,"href","#extending-the-auto-classes"),c(vi,"class","relative group"),c(Mf,"id","transformers.AutoConfig"),c(Mf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mf,"href","#transformers.AutoConfig"),c(Fi,"class","relative group"),c(Z$,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(ek,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig"),c(ok,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig"),c(rk,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig"),c(tk,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig"),c(ak,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(nk,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig"),c(sk,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(lk,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(ik,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(dk,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig"),c(ck,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig"),c(fk,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig"),c(mk,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig"),c(gk,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig"),c(hk,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig"),c(pk,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig"),c(_k,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(uk,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(bk,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(vk,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig"),c(Fk,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Tk,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Mk,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig"),c(Ek,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig"),c(Ck,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig"),c(wk,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig"),c(Ak,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig"),c(yk,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig"),c(Lk,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(xk,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig"),c($k,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig"),c(kk,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig"),c(Sk,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig"),c(Rk,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig"),c(Pk,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig"),c(Bk,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config"),c(Ik,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(Nk,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(qk,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig"),c(jk,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig"),c(Dk,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig"),c(Gk,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Ok,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(Vk,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Xk,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(zk,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig"),c(Wk,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig"),c(Qk,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig"),c(Hk,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig"),c(Uk,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config"),c(Jk,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig"),c(Yk,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(Kk,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig"),c(Zk,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(eS,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(oS,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig"),c(rS,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config"),c(tS,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(aS,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(nS,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig"),c(sS,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig"),c(lS,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig"),c(iS,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig"),c(dS,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(cS,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(fS,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(mS,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagConfig"),c(gS,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmConfig"),c(hS,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig"),c(pS,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig"),c(_S,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig"),c(uS,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig"),c(bS,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig"),c(vS,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig"),c(FS,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig"),c(TS,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig"),c(MS,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig"),c(ES,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig"),c(CS,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wS,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(AS,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(yS,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig"),c(LS,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xS,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig"),c($S,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config"),c(kS,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig"),c(SS,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(RS,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(PS,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig"),c(BS,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(IS,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(NS,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig"),c(qS,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig"),c(jS,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(DS,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(GS,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(OS,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig"),c(VS,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(XS,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(zS,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(WS,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig"),c(QS,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig"),c(HS,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig"),c(US,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(JS,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(YS,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(KS,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig"),c(ZS,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig"),c(eR,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ag,"id","transformers.AutoTokenizer"),c(Ag,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ag,"href","#transformers.AutoTokenizer"),c(Mi,"class","relative group"),c(oR,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(rR,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(tR,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aR,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizer"),c(nR,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizerFast"),c(sR,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizer"),c(lR,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(iR,"href","/docs/transformers/pr_17427/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(dR,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(cR,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(fR,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(mR,"href","/docs/transformers/pr_17427/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(gR,"href","/docs/transformers/pr_17427/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(hR,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(pR,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(_R,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uR,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bR,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(vR,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(FR,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(TR,"href","/docs/transformers/pr_17427/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(MR,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ER,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(CR,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineTokenizer"),c(wR,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizer"),c(AR,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(yR,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(LR,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(xR,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizer"),c($R,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(kR,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(SR,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RR,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PR,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizer"),c(BR,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(IR,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(NR,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(qR,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(jR,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(DR,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(GR,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(OR,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizer"),c(VR,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(XR,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(zR,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizer"),c(WR,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(QR,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(HR,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizer"),c(UR,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(JR,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(YR,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(KR,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZR,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eP,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(oP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(rP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(tP,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizer"),c(aP,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(nP,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(sP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(dP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(cP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(fP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(mP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(gP,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(hP,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(pP,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(_P,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizer"),c(uP,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizerFast"),c(bP,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizer"),c(vP,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(FP,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeTokenizer"),c(TP,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(MP,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(CP,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianTokenizer"),c(wP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizer"),c(AP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(LP,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(xP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c($P,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(kP,"href","/docs/transformers/pr_17427/en/model_doc/mluke#transformers.MLukeTokenizer"),c(SP,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(RP,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(BP,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(IP,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(NP,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(qP,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(jP,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(DP,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(GP,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(OP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(VP,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XP,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zP,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(WP,"href","/docs/transformers/pr_17427/en/model_doc/phobert#transformers.PhobertTokenizer"),c(QP,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartTokenizer"),c(HP,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(UP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(JP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(YP,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagTokenizer"),c(KP,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizer"),c(ZP,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizerFast"),c(eB,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizer"),c(oB,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(rB,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizer"),c(tB,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(aB,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(nB,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iB,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(dB,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(cB,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(fB,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(mB,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizer"),c(gB,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(hB,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(pB,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(uB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(bB,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasTokenizer"),c(vB,"href","/docs/transformers/pr_17427/en/model_doc/tapex#transformers.TapexTokenizer"),c(FB,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(TB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(MB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(EB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(CB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(wB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(AB,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizer"),c(yB,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(LB,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMTokenizer"),c(xB,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c($B,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(kB,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(SB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(RB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(BB,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(IB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(NB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lh,"id","transformers.AutoFeatureExtractor"),c(lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lh,"href","#transformers.AutoFeatureExtractor"),c(Ei,"class","relative group"),c(qB,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(jB,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(DB,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(GB,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(OB,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(WB,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(QB,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(UB,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(JB,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(KB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(ZB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(eI,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(oI,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(rI,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(tI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(aI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(nI,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(sI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(lI,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(dI,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cI,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gI,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoProcessor"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoProcessor"),c(Ci,"class","relative group"),c(hI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(pI,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPProcessor"),c(_I,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uI,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(bI,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(vI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(MI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(EI,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRProcessor"),c(CI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AI,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltProcessor"),c(yI,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(LI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($I,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lp,"id","transformers.AutoModel"),c(lp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lp,"href","#transformers.AutoModel"),c(Ai,"class","relative group"),c(kI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PI,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel"),c(BI,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel"),c(II,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel"),c(NI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(qI,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(jI,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel"),c(DI,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(GI,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(OI,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(VI,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel"),c(XI,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel"),c(zI,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel"),c(WI,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel"),c(QI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel"),c(HI,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel"),c(UI,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel"),c(JI,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(YI,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(KI,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(ZI,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel"),c(eN,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(oN,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(rN,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel"),c(tN,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel"),c(aN,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel"),c(nN,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(sN,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel"),c(lN,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel"),c(iN,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel"),c(dN,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel"),c(cN,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel"),c(fN,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel"),c(mN,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel"),c(gN,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hN,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel"),c(pN,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model"),c(_N,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(uN,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(bN,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel"),c(vN,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel"),c(FN,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel"),c(TN,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(MN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(EN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(CN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(wN,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel"),c(AN,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel"),c(yN,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel"),c(LN,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel"),c(xN,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model"),c($N,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel"),c(kN,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel"),c(SN,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel"),c(RN,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(PN,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel"),c(BN,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel"),c(IN,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model"),c(NN,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel"),c(qN,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(jN,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel"),c(DN,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel"),c(GN,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel"),c(ON,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel"),c(VN,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel"),c(XN,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(zN,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel"),c(WN,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel"),c(QN,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel"),c(HN,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel"),c(UN,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel"),c(JN,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(YN,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel"),c(KN,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel"),c(ZN,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel"),c(eq,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel"),c(oq,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel"),c(rq,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(tq,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel"),c(aq,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(nq,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel"),c(sq,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model"),c(lq,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel"),c(iq,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(dq,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(cq,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel"),c(fq,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(mq,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel"),c(gq,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel"),c(hq,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(pq,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel"),c(_q,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel"),c(uq,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(bq,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(vq,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Fq,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel"),c(Tq,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel"),c(Mq,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel"),c(Eq,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Cq,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(wq,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Aq,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel"),c(yq,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel"),c(Lq,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(au,"id","transformers.AutoModelForPreTraining"),c(au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(au,"href","#transformers.AutoModelForPreTraining"),c(xi,"class","relative group"),c(xq,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($q,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kq,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sq,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Rq,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Pq,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining"),c(Bq,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Iq,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Nq,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(qq,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(jq,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Dq,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Gq,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Oq,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Vq,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Xq,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining"),c(zq,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Wq,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Qq,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Hq,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Uq,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Jq,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Yq,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Kq,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(Zq,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(ej,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(oj,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(rj,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(tj,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(aj,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(nj,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(sj,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lj,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ij,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dj,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cj,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fj,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mj,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gj,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(_j,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vj,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ju,"id","transformers.AutoModelForCausalLM"),c(Ju,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ju,"href","#transformers.AutoModelForCausalLM"),c(Si,"class","relative group"),c(Fj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ej,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM"),c(Cj,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel"),c(wj,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(Aj,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(yj,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(Lj,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(xj,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c($j,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(kj,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Sj,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Rj,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Pj,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Bj,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Ij,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(Nj,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qj,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM"),c(jj,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Dj,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(Gj,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Oj,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM"),c(Vj,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Xj,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(zj,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Wj,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Qj,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(Hj,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Uj,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Jj,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Yj,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Kj,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Zj,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(eD,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(oD,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(tD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(aD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(nD,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N2,"id","transformers.AutoModelForMaskedLM"),c(N2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N2,"href","#transformers.AutoModelForMaskedLM"),c(Bi,"class","relative group"),c(sD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dD,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM"),c(mD,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(gD,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hD,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(pD,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(_D,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(uD,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bD,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vD,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FD,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TD,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MD,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(ED,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CD,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wD,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AD,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yD,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(LD,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(xD,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c($D,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(kD,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(SD,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(RD,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(PD,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(BD,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(ID,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(ND,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(qD,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(jD,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(DD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(GD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(OD,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M1,"id","transformers.AutoModelForSeq2SeqLM"),c(M1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M1,"href","#transformers.AutoModelForSeq2SeqLM"),c(qi,"class","relative group"),c(VD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WD,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(QD,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(HD,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(UD,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(JD,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(YD,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(KD,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(ZD,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(eG,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel"),c(oG,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(tG,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(aG,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(nG,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(sG,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(lG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O1,"id","transformers.AutoModelForSequenceClassification"),c(O1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O1,"href","#transformers.AutoModelForSequenceClassification"),c(Gi,"class","relative group"),c(iG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fG,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(mG,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification"),c(gG,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification"),c(hG,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(pG,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(_G,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(uG,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(bG,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(vG,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(FG,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(TG,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(MG,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(EG,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(CG,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(wG,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(AG,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(yG,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(LG,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(xG,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c($G,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(kG,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(SG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(RG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(PG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(BG,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification"),c(IG,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(NG,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(qG,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(jG,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(DG,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(GG,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(OG,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(VG,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(XG,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(zG,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(WG,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(QG,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(HG,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(UG,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(JG,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(YG,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(KG,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ZG,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(eO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(oO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(rO,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(tO,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j7,"id","transformers.AutoModelForMultipleChoice"),c(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j7,"href","#transformers.AutoModelForMultipleChoice"),c(Xi,"class","relative group"),c(aO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(iO,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice"),c(dO,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(cO,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(fO,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(mO,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(gO,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(hO,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(pO,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(_O,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(uO,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(bO,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(vO,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(FO,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(TO,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(MO,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(EO,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(CO,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(wO,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(AO,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(yO,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(LO,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(xO,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c($O,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(kO,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(SO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(RO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(PO,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(BO,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bb,"id","transformers.AutoModelForNextSentencePrediction"),c(bb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bb,"href","#transformers.AutoModelForNextSentencePrediction"),c(Qi,"class","relative group"),c(IO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jO,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(DO,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(GO,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(OO,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(VO,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yb,"id","transformers.AutoModelForTokenClassification"),c(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yb,"href","#transformers.AutoModelForTokenClassification"),c(Ji,"class","relative group"),c(XO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QO,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(HO,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification"),c(UO,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(JO,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(YO,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification"),c(KO,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(ZO,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(eV,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(oV,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(rV,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(tV,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(aV,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(nV,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(sV,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(lV,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(iV,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(dV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(cV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(fV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(mV,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(gV,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(hV,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(pV,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(_V,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(uV,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(bV,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(vV,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(FV,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(TV,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(MV,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(EV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(CV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(wV,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(AV,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f4,"id","transformers.AutoModelForQuestionAnswering"),c(f4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f4,"href","#transformers.AutoModelForQuestionAnswering"),c(Zi,"class","relative group"),c(yV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($V,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(kV,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(SV,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(RV,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(PV,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(BV,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(IV,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(NV,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(qV,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(jV,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(DV,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(GV,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(OV,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(VV,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(XV,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(zV,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(WV,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(QV,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(HV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(UV,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(JV,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(YV,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(KV,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(ZV,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(eX,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(oX,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(rX,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(tX,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(aX,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(nX,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(sX,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(lX,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(iX,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(dX,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(cX,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(fX,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(mX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(gX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(hX,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(pX,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ov,"id","transformers.AutoModelForTableQuestionAnswering"),c(ov,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ov,"href","#transformers.AutoModelForTableQuestionAnswering"),c(rd,"class","relative group"),c(_X,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vX,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sv,"id","transformers.AutoModelForImageClassification"),c(sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sv,"href","#transformers.AutoModelForImageClassification"),c(nd,"class","relative group"),c(FX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EX,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification"),c(CX,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(wX,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification"),c(AX,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(yX,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification"),c(LX,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(xX,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c($X,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(kX,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(SX,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(RX,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(PX,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(BX,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(IX,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(NX,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification"),c(qX,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification"),c(jX,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForVision2Seq"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForVision2Seq"),c(id,"class","relative group"),c(DX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForAudioClassification"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForAudioClassification"),c(fd,"class","relative group"),c(XX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QX,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(HX,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(UX,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(JX,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(YX,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(KX,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(ZX,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(ez,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(oz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dv,"id","transformers.AutoModelForAudioFrameClassification"),c(Dv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dv,"href","#transformers.AutoModelForAudioFrameClassification"),c(hd,"class","relative group"),c(rz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(az,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(sz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(lz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(iz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(dz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uv,"id","transformers.AutoModelForCTC"),c(Uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Uv,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(cz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(hz,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC"),c(pz,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC"),c(_z,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC"),c(uz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(bz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(vz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(Fz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(Tz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Fd,"class","relative group"),c(Mz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ez,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wz,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(Az,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hF,"id","transformers.AutoModelForAudioXVector"),c(hF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hF,"href","#transformers.AutoModelForAudioXVector"),c(Ed,"class","relative group"),c(yz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($z,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(kz,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(Sz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(Rz,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(Pz,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EF,"id","transformers.AutoModelForMaskedImageModeling"),c(EF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Ad,"class","relative group"),c(Bz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Iz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qz,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(jz,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(Dz,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($F,"id","transformers.AutoModelForObjectDetection"),c($F,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($F,"href","#transformers.AutoModelForObjectDetection"),c($d,"class","relative group"),c(Gz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection"),c(zz,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForImageSegmentation"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForImageSegmentation"),c(Rd,"class","relative group"),c(Wz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uz,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForSemanticSegmentation"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForSemanticSegmentation"),c(Id,"class","relative group"),c(Jz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Kz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zz,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(eW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(oW,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(rW,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForInstanceSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForInstanceSegmentation"),c(jd,"class","relative group"),c(tW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sW,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eT,"id","transformers.TFAutoModel"),c(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eT,"href","#transformers.TFAutoModel"),c(Od,"class","relative group"),c(lW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel"),c(fW,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel"),c(mW,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel"),c(gW,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(hW,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(pW,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel"),c(_W,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel"),c(uW,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel"),c(bW,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel"),c(vW,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel"),c(FW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(TW,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel"),c(MW,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(EW,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(CW,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(wW,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel"),c(AW,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(yW,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel"),c(LW,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(xW,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model"),c($W,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel"),c(kW,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel"),c(SW,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(RW,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel"),c(PW,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel"),c(BW,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel"),c(IW,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel"),c(NW,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel"),c(qW,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(jW,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel"),c(DW,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model"),c(GW,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(OW,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel"),c(VW,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel"),c(XW,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel"),c(zW,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel"),c(WW,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel"),c(QW,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(HW,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel"),c(UW,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model"),c(JW,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel"),c(YW,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(KW,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel"),c(ZW,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(eQ,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(oQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel"),c(rQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(tQ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForPreTraining"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForPreTraining"),c(zd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(iQ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dQ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining"),c(cQ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(fQ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(mQ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(gQ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(hQ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(pQ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(_Q,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(uQ,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(bQ,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(vQ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(FQ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(TQ,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(MQ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(EQ,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(CQ,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(wQ,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(AQ,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(yQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xQ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.TFAutoModelForCausalLM"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.TFAutoModelForCausalLM"),c(Hd,"class","relative group"),c($Q,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(PQ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(BQ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(IQ,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(NQ,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(qQ,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jQ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(DQ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(GQ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(OQ,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VQ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XQ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IM,"id","transformers.TFAutoModelForImageClassification"),c(IM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IM,"href","#transformers.TFAutoModelForImageClassification"),c(Yd,"class","relative group"),c(zQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(UQ,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(JQ,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(YQ,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(KQ,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XM,"id","transformers.TFAutoModelForMaskedLM"),c(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XM,"href","#transformers.TFAutoModelForMaskedLM"),c(ec,"class","relative group"),c(ZQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rH,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(tH,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(aH,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(nH,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(sH,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(lH,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(iH,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(dH,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(cH,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(fH,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(mH,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(gH,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(hH,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(pH,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(_H,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(uH,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(bH,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(vH,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(FH,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(TH,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(tc,"class","relative group"),c(MH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wH,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AH,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yH,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(LH,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(xH,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c($H,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel"),c(kH,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(SH,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(RH,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(PH,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.TFAutoModelForSequenceClassification"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.TFAutoModelForSequenceClassification"),c(sc,"class","relative group"),c(BH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(jH,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(DH,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(GH,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(OH,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(VH,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(XH,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(zH,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WH,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(QH,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(HH,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(UH,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(JH,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(YH,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(KH,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(ZH,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(eU,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(oU,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(rU,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(tU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(aU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(nU,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(sU,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(lU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(iU,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(dU,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oC,"id","transformers.TFAutoModelForMultipleChoice"),c(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oC,"href","#transformers.TFAutoModelForMultipleChoice"),c(dc,"class","relative group"),c(cU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gU,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(hU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(pU,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(_U,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(uU,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(bU,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(vU,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(FU,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(TU,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(MU,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(EU,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(CU,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(wU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(AU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(LU,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(xU,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(mc,"class","relative group"),c($U,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(PU,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(pc,"class","relative group"),c(BU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qU,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($C,"id","transformers.TFAutoModelForTokenClassification"),c($C,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($C,"href","#transformers.TFAutoModelForTokenClassification"),c(bc,"class","relative group"),c(jU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(VU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(XU,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(zU,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WU,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(QU,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(HU,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(UU,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(JU,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(YU,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(KU,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(ZU,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(eJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(oJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(rJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(tJ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(aJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(nJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(sJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(lJ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForQuestionAnswering"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Tc,"class","relative group"),c(iJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(mJ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(gJ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(hJ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(pJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(_J,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(uJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(bJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(vJ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(FJ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(TJ,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(MJ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(EJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(CJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(wJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(AJ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(LJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(xJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c($J,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M5,"id","transformers.TFAutoModelForVision2Seq"),c(M5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M5,"href","#transformers.TFAutoModelForVision2Seq"),c(Cc,"class","relative group"),c(kJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PJ,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(yc,"class","relative group"),c(BJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qJ,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($5,"id","transformers.FlaxAutoModel"),c($5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($5,"href","#transformers.FlaxAutoModel"),c($c,"class","relative group"),c(jJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel"),c(VJ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel"),c(XJ,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel"),c(zJ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel"),c(WJ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(QJ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(HJ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(UJ,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel"),c(JJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(YJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel"),c(KJ,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(ZJ,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(eY,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(oY,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel"),c(rY,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel"),c(tY,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model"),c(aY,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(nY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(sY,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(lY,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model"),c(iY,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(dY,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel"),c(cY,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(fY,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(mY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.FlaxAutoModelForCausalLM"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Rc,"class","relative group"),c(gY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Y,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(uY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(bY,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(vY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(FY,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(TY,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(MY,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(EY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(CY,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_3,"id","transformers.FlaxAutoModelForPreTraining"),c(_3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Ic,"class","relative group"),c(wY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(xY,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Y,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(kY,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(SY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(RY,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(IY,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(NY,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(qY,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(jY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k3,"id","transformers.FlaxAutoModelForMaskedLM"),c(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k3,"href","#transformers.FlaxAutoModelForMaskedLM"),c(jc,"class","relative group"),c(DY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(XY,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(zY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(WY,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(QY,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(HY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(UY,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(YY,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(KY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(X3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Oc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(tK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(aK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(nK,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(sK,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(lK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iK,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dK,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(cK,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(rw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(zc,"class","relative group"),c(fK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(pK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(_K,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(uK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(bK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(vK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(FK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(TK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(MK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(EK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Hc,"class","relative group"),c(CK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(LK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(xK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c($K,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(kK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(SK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(RK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(PK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(BK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(IK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForTokenClassification"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Yc,"class","relative group"),c(NK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(GK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(OK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(VK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(XK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(zK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(WK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(QK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(ef,"class","relative group"),c(HK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(KK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(ZK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(eZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(oZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(rZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(tZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(aZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(tf,"class","relative group"),c(nZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.FlaxAutoModelForImageClassification"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.FlaxAutoModelForImageClassification"),c(sf,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(gZ,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.FlaxAutoModelForVision2Seq"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.FlaxAutoModelForVision2Seq"),c(cf,"class","relative group"),c(hZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uZ,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Mo),e(Mo,mi),b(f,_f,u),b(f,tt,u),e(tt,gi),e(tt,hi),e(hi,wA),e(tt,uf),b(f,je,u),b(f,We,u),e(We,pi),e(We,yn),e(yn,AA),e(We,Ln),e(We,xn),e(xn,yA),e(We,_i),e(We,$n),e($n,LA),e(We,ui),b(f,bf,u),M(wa,f,u),b(f,Qe,u),b(f,Ae,u),e(Ae,Q$),e(Ae,bi),e(bi,H$),e(Ae,U$),b(f,Eo,u),b(f,Aa,u),e(Aa,J$),e(Aa,vf),e(vf,Y$),e(Aa,uOe),b(f,sqe,u),b(f,vi,u),e(vi,Ff),e(Ff,coe),M(xA,coe,null),e(vi,bOe),e(vi,foe),e(foe,vOe),b(f,lqe,u),b(f,kn,u),e(kn,FOe),e(kn,moe),e(moe,TOe),e(kn,MOe),e(kn,goe),e(goe,EOe),e(kn,COe),b(f,iqe,u),M($A,f,u),b(f,dqe,u),b(f,K$,u),e(K$,wOe),b(f,cqe,u),M(Tf,f,u),b(f,fqe,u),b(f,Fi,u),e(Fi,Mf),e(Mf,hoe),M(kA,hoe,null),e(Fi,AOe),e(Fi,poe),e(poe,yOe),b(f,mqe,u),b(f,Co,u),M(SA,Co,null),e(Co,LOe),e(Co,RA),e(RA,xOe),e(RA,Z$),e(Z$,$Oe),e(RA,kOe),e(Co,SOe),e(Co,PA),e(PA,ROe),e(PA,_oe),e(_oe,POe),e(PA,BOe),e(Co,IOe),e(Co,Er),M(BA,Er,null),e(Er,NOe),e(Er,uoe),e(uoe,qOe),e(Er,jOe),e(Er,Ti),e(Ti,DOe),e(Ti,boe),e(boe,GOe),e(Ti,OOe),e(Ti,voe),e(voe,VOe),e(Ti,XOe),e(Er,zOe),e(Er,A),e(A,Ef),e(Ef,Foe),e(Foe,WOe),e(Ef,QOe),e(Ef,ek),e(ek,HOe),e(Ef,UOe),e(A,JOe),e(A,Cf),e(Cf,Toe),e(Toe,YOe),e(Cf,KOe),e(Cf,ok),e(ok,ZOe),e(Cf,eVe),e(A,oVe),e(A,wf),e(wf,Moe),e(Moe,rVe),e(wf,tVe),e(wf,rk),e(rk,aVe),e(wf,nVe),e(A,sVe),e(A,Af),e(Af,Eoe),e(Eoe,lVe),e(Af,iVe),e(Af,tk),e(tk,dVe),e(Af,cVe),e(A,fVe),e(A,yf),e(yf,Coe),e(Coe,mVe),e(yf,gVe),e(yf,ak),e(ak,hVe),e(yf,pVe),e(A,_Ve),e(A,Lf),e(Lf,woe),e(woe,uVe),e(Lf,bVe),e(Lf,nk),e(nk,vVe),e(Lf,FVe),e(A,TVe),e(A,xf),e(xf,Aoe),e(Aoe,MVe),e(xf,EVe),e(xf,sk),e(sk,CVe),e(xf,wVe),e(A,AVe),e(A,$f),e($f,yoe),e(yoe,yVe),e($f,LVe),e($f,lk),e(lk,xVe),e($f,$Ve),e(A,kVe),e(A,kf),e(kf,Loe),e(Loe,SVe),e(kf,RVe),e(kf,ik),e(ik,PVe),e(kf,BVe),e(A,IVe),e(A,Sf),e(Sf,xoe),e(xoe,NVe),e(Sf,qVe),e(Sf,dk),e(dk,jVe),e(Sf,DVe),e(A,GVe),e(A,Rf),e(Rf,$oe),e($oe,OVe),e(Rf,VVe),e(Rf,ck),e(ck,XVe),e(Rf,zVe),e(A,WVe),e(A,Pf),e(Pf,koe),e(koe,QVe),e(Pf,HVe),e(Pf,fk),e(fk,UVe),e(Pf,JVe),e(A,YVe),e(A,Bf),e(Bf,Soe),e(Soe,KVe),e(Bf,ZVe),e(Bf,mk),e(mk,eXe),e(Bf,oXe),e(A,rXe),e(A,If),e(If,Roe),e(Roe,tXe),e(If,aXe),e(If,gk),e(gk,nXe),e(If,sXe),e(A,lXe),e(A,Nf),e(Nf,Poe),e(Poe,iXe),e(Nf,dXe),e(Nf,hk),e(hk,cXe),e(Nf,fXe),e(A,mXe),e(A,qf),e(qf,Boe),e(Boe,gXe),e(qf,hXe),e(qf,pk),e(pk,pXe),e(qf,_Xe),e(A,uXe),e(A,jf),e(jf,Ioe),e(Ioe,bXe),e(jf,vXe),e(jf,_k),e(_k,FXe),e(jf,TXe),e(A,MXe),e(A,Df),e(Df,Noe),e(Noe,EXe),e(Df,CXe),e(Df,uk),e(uk,wXe),e(Df,AXe),e(A,yXe),e(A,Gf),e(Gf,qoe),e(qoe,LXe),e(Gf,xXe),e(Gf,bk),e(bk,$Xe),e(Gf,kXe),e(A,SXe),e(A,Of),e(Of,joe),e(joe,RXe),e(Of,PXe),e(Of,vk),e(vk,BXe),e(Of,IXe),e(A,NXe),e(A,Vf),e(Vf,Doe),e(Doe,qXe),e(Vf,jXe),e(Vf,Fk),e(Fk,DXe),e(Vf,GXe),e(A,OXe),e(A,Xf),e(Xf,Goe),e(Goe,VXe),e(Xf,XXe),e(Xf,Tk),e(Tk,zXe),e(Xf,WXe),e(A,QXe),e(A,zf),e(zf,Ooe),e(Ooe,HXe),e(zf,UXe),e(zf,Mk),e(Mk,JXe),e(zf,YXe),e(A,KXe),e(A,Wf),e(Wf,Voe),e(Voe,ZXe),e(Wf,eze),e(Wf,Ek),e(Ek,oze),e(Wf,rze),e(A,tze),e(A,Qf),e(Qf,Xoe),e(Xoe,aze),e(Qf,nze),e(Qf,Ck),e(Ck,sze),e(Qf,lze),e(A,ize),e(A,Hf),e(Hf,zoe),e(zoe,dze),e(Hf,cze),e(Hf,wk),e(wk,fze),e(Hf,mze),e(A,gze),e(A,Uf),e(Uf,Woe),e(Woe,hze),e(Uf,pze),e(Uf,Ak),e(Ak,_ze),e(Uf,uze),e(A,bze),e(A,Jf),e(Jf,Qoe),e(Qoe,vze),e(Jf,Fze),e(Jf,yk),e(yk,Tze),e(Jf,Mze),e(A,Eze),e(A,Yf),e(Yf,Hoe),e(Hoe,Cze),e(Yf,wze),e(Yf,Lk),e(Lk,Aze),e(Yf,yze),e(A,Lze),e(A,Kf),e(Kf,Uoe),e(Uoe,xze),e(Kf,$ze),e(Kf,xk),e(xk,kze),e(Kf,Sze),e(A,Rze),e(A,Zf),e(Zf,Joe),e(Joe,Pze),e(Zf,Bze),e(Zf,$k),e($k,Ize),e(Zf,Nze),e(A,qze),e(A,em),e(em,Yoe),e(Yoe,jze),e(em,Dze),e(em,kk),e(kk,Gze),e(em,Oze),e(A,Vze),e(A,om),e(om,Koe),e(Koe,Xze),e(om,zze),e(om,Sk),e(Sk,Wze),e(om,Qze),e(A,Hze),e(A,rm),e(rm,Zoe),e(Zoe,Uze),e(rm,Jze),e(rm,Rk),e(Rk,Yze),e(rm,Kze),e(A,Zze),e(A,tm),e(tm,ere),e(ere,eWe),e(tm,oWe),e(tm,Pk),e(Pk,rWe),e(tm,tWe),e(A,aWe),e(A,am),e(am,ore),e(ore,nWe),e(am,sWe),e(am,Bk),e(Bk,lWe),e(am,iWe),e(A,dWe),e(A,nm),e(nm,rre),e(rre,cWe),e(nm,fWe),e(nm,Ik),e(Ik,mWe),e(nm,gWe),e(A,hWe),e(A,sm),e(sm,tre),e(tre,pWe),e(sm,_We),e(sm,Nk),e(Nk,uWe),e(sm,bWe),e(A,vWe),e(A,lm),e(lm,are),e(are,FWe),e(lm,TWe),e(lm,qk),e(qk,MWe),e(lm,EWe),e(A,CWe),e(A,im),e(im,nre),e(nre,wWe),e(im,AWe),e(im,jk),e(jk,yWe),e(im,LWe),e(A,xWe),e(A,dm),e(dm,sre),e(sre,$We),e(dm,kWe),e(dm,Dk),e(Dk,SWe),e(dm,RWe),e(A,PWe),e(A,cm),e(cm,lre),e(lre,BWe),e(cm,IWe),e(cm,Gk),e(Gk,NWe),e(cm,qWe),e(A,jWe),e(A,fm),e(fm,ire),e(ire,DWe),e(fm,GWe),e(fm,Ok),e(Ok,OWe),e(fm,VWe),e(A,XWe),e(A,mm),e(mm,dre),e(dre,zWe),e(mm,WWe),e(mm,Vk),e(Vk,QWe),e(mm,HWe),e(A,UWe),e(A,gm),e(gm,cre),e(cre,JWe),e(gm,YWe),e(gm,Xk),e(Xk,KWe),e(gm,ZWe),e(A,eQe),e(A,hm),e(hm,fre),e(fre,oQe),e(hm,rQe),e(hm,zk),e(zk,tQe),e(hm,aQe),e(A,nQe),e(A,pm),e(pm,mre),e(mre,sQe),e(pm,lQe),e(pm,Wk),e(Wk,iQe),e(pm,dQe),e(A,cQe),e(A,_m),e(_m,gre),e(gre,fQe),e(_m,mQe),e(_m,Qk),e(Qk,gQe),e(_m,hQe),e(A,pQe),e(A,um),e(um,hre),e(hre,_Qe),e(um,uQe),e(um,Hk),e(Hk,bQe),e(um,vQe),e(A,FQe),e(A,bm),e(bm,pre),e(pre,TQe),e(bm,MQe),e(bm,Uk),e(Uk,EQe),e(bm,CQe),e(A,wQe),e(A,vm),e(vm,_re),e(_re,AQe),e(vm,yQe),e(vm,Jk),e(Jk,LQe),e(vm,xQe),e(A,$Qe),e(A,Fm),e(Fm,ure),e(ure,kQe),e(Fm,SQe),e(Fm,Yk),e(Yk,RQe),e(Fm,PQe),e(A,BQe),e(A,Tm),e(Tm,bre),e(bre,IQe),e(Tm,NQe),e(Tm,Kk),e(Kk,qQe),e(Tm,jQe),e(A,DQe),e(A,Mm),e(Mm,vre),e(vre,GQe),e(Mm,OQe),e(Mm,Zk),e(Zk,VQe),e(Mm,XQe),e(A,zQe),e(A,Em),e(Em,Fre),e(Fre,WQe),e(Em,QQe),e(Em,eS),e(eS,HQe),e(Em,UQe),e(A,JQe),e(A,Cm),e(Cm,Tre),e(Tre,YQe),e(Cm,KQe),e(Cm,oS),e(oS,ZQe),e(Cm,eHe),e(A,oHe),e(A,wm),e(wm,Mre),e(Mre,rHe),e(wm,tHe),e(wm,rS),e(rS,aHe),e(wm,nHe),e(A,sHe),e(A,Am),e(Am,Ere),e(Ere,lHe),e(Am,iHe),e(Am,tS),e(tS,dHe),e(Am,cHe),e(A,fHe),e(A,ym),e(ym,Cre),e(Cre,mHe),e(ym,gHe),e(ym,aS),e(aS,hHe),e(ym,pHe),e(A,_He),e(A,Lm),e(Lm,wre),e(wre,uHe),e(Lm,bHe),e(Lm,nS),e(nS,vHe),e(Lm,FHe),e(A,THe),e(A,xm),e(xm,Are),e(Are,MHe),e(xm,EHe),e(xm,sS),e(sS,CHe),e(xm,wHe),e(A,AHe),e(A,$m),e($m,yre),e(yre,yHe),e($m,LHe),e($m,lS),e(lS,xHe),e($m,$He),e(A,kHe),e(A,km),e(km,Lre),e(Lre,SHe),e(km,RHe),e(km,iS),e(iS,PHe),e(km,BHe),e(A,IHe),e(A,Sm),e(Sm,xre),e(xre,NHe),e(Sm,qHe),e(Sm,dS),e(dS,jHe),e(Sm,DHe),e(A,GHe),e(A,Rm),e(Rm,$re),e($re,OHe),e(Rm,VHe),e(Rm,cS),e(cS,XHe),e(Rm,zHe),e(A,WHe),e(A,Pm),e(Pm,kre),e(kre,QHe),e(Pm,HHe),e(Pm,fS),e(fS,UHe),e(Pm,JHe),e(A,YHe),e(A,Bm),e(Bm,Sre),e(Sre,KHe),e(Bm,ZHe),e(Bm,mS),e(mS,eUe),e(Bm,oUe),e(A,rUe),e(A,Im),e(Im,Rre),e(Rre,tUe),e(Im,aUe),e(Im,gS),e(gS,nUe),e(Im,sUe),e(A,lUe),e(A,Nm),e(Nm,Pre),e(Pre,iUe),e(Nm,dUe),e(Nm,hS),e(hS,cUe),e(Nm,fUe),e(A,mUe),e(A,qm),e(qm,Bre),e(Bre,gUe),e(qm,hUe),e(qm,pS),e(pS,pUe),e(qm,_Ue),e(A,uUe),e(A,jm),e(jm,Ire),e(Ire,bUe),e(jm,vUe),e(jm,_S),e(_S,FUe),e(jm,TUe),e(A,MUe),e(A,Dm),e(Dm,Nre),e(Nre,EUe),e(Dm,CUe),e(Dm,uS),e(uS,wUe),e(Dm,AUe),e(A,yUe),e(A,Gm),e(Gm,qre),e(qre,LUe),e(Gm,xUe),e(Gm,bS),e(bS,$Ue),e(Gm,kUe),e(A,SUe),e(A,Om),e(Om,jre),e(jre,RUe),e(Om,PUe),e(Om,vS),e(vS,BUe),e(Om,IUe),e(A,NUe),e(A,Vm),e(Vm,Dre),e(Dre,qUe),e(Vm,jUe),e(Vm,FS),e(FS,DUe),e(Vm,GUe),e(A,OUe),e(A,Xm),e(Xm,Gre),e(Gre,VUe),e(Xm,XUe),e(Xm,TS),e(TS,zUe),e(Xm,WUe),e(A,QUe),e(A,zm),e(zm,Ore),e(Ore,HUe),e(zm,UUe),e(zm,MS),e(MS,JUe),e(zm,YUe),e(A,KUe),e(A,Wm),e(Wm,Vre),e(Vre,ZUe),e(Wm,eJe),e(Wm,ES),e(ES,oJe),e(Wm,rJe),e(A,tJe),e(A,Qm),e(Qm,Xre),e(Xre,aJe),e(Qm,nJe),e(Qm,CS),e(CS,sJe),e(Qm,lJe),e(A,iJe),e(A,Hm),e(Hm,zre),e(zre,dJe),e(Hm,cJe),e(Hm,wS),e(wS,fJe),e(Hm,mJe),e(A,gJe),e(A,Um),e(Um,Wre),e(Wre,hJe),e(Um,pJe),e(Um,AS),e(AS,_Je),e(Um,uJe),e(A,bJe),e(A,Jm),e(Jm,Qre),e(Qre,vJe),e(Jm,FJe),e(Jm,yS),e(yS,TJe),e(Jm,MJe),e(A,EJe),e(A,Ym),e(Ym,Hre),e(Hre,CJe),e(Ym,wJe),e(Ym,LS),e(LS,AJe),e(Ym,yJe),e(A,LJe),e(A,Km),e(Km,Ure),e(Ure,xJe),e(Km,$Je),e(Km,xS),e(xS,kJe),e(Km,SJe),e(A,RJe),e(A,Zm),e(Zm,Jre),e(Jre,PJe),e(Zm,BJe),e(Zm,$S),e($S,IJe),e(Zm,NJe),e(A,qJe),e(A,eg),e(eg,Yre),e(Yre,jJe),e(eg,DJe),e(eg,kS),e(kS,GJe),e(eg,OJe),e(A,VJe),e(A,og),e(og,Kre),e(Kre,XJe),e(og,zJe),e(og,SS),e(SS,WJe),e(og,QJe),e(A,HJe),e(A,rg),e(rg,Zre),e(Zre,UJe),e(rg,JJe),e(rg,RS),e(RS,YJe),e(rg,KJe),e(A,ZJe),e(A,tg),e(tg,ete),e(ete,eYe),e(tg,oYe),e(tg,PS),e(PS,rYe),e(tg,tYe),e(A,aYe),e(A,ag),e(ag,ote),e(ote,nYe),e(ag,sYe),e(ag,BS),e(BS,lYe),e(ag,iYe),e(A,dYe),e(A,ng),e(ng,rte),e(rte,cYe),e(ng,fYe),e(ng,IS),e(IS,mYe),e(ng,gYe),e(A,hYe),e(A,sg),e(sg,tte),e(tte,pYe),e(sg,_Ye),e(sg,NS),e(NS,uYe),e(sg,bYe),e(A,vYe),e(A,lg),e(lg,ate),e(ate,FYe),e(lg,TYe),e(lg,qS),e(qS,MYe),e(lg,EYe),e(A,CYe),e(A,ig),e(ig,nte),e(nte,wYe),e(ig,AYe),e(ig,jS),e(jS,yYe),e(ig,LYe),e(A,xYe),e(A,dg),e(dg,ste),e(ste,$Ye),e(dg,kYe),e(dg,DS),e(DS,SYe),e(dg,RYe),e(A,PYe),e(A,cg),e(cg,lte),e(lte,BYe),e(cg,IYe),e(cg,GS),e(GS,NYe),e(cg,qYe),e(A,jYe),e(A,fg),e(fg,ite),e(ite,DYe),e(fg,GYe),e(fg,OS),e(OS,OYe),e(fg,VYe),e(A,XYe),e(A,mg),e(mg,dte),e(dte,zYe),e(mg,WYe),e(mg,VS),e(VS,QYe),e(mg,HYe),e(A,UYe),e(A,gg),e(gg,cte),e(cte,JYe),e(gg,YYe),e(gg,XS),e(XS,KYe),e(gg,ZYe),e(A,eKe),e(A,hg),e(hg,fte),e(fte,oKe),e(hg,rKe),e(hg,zS),e(zS,tKe),e(hg,aKe),e(A,nKe),e(A,pg),e(pg,mte),e(mte,sKe),e(pg,lKe),e(pg,WS),e(WS,iKe),e(pg,dKe),e(A,cKe),e(A,_g),e(_g,gte),e(gte,fKe),e(_g,mKe),e(_g,QS),e(QS,gKe),e(_g,hKe),e(A,pKe),e(A,ug),e(ug,hte),e(hte,_Ke),e(ug,uKe),e(ug,HS),e(HS,bKe),e(ug,vKe),e(A,FKe),e(A,bg),e(bg,pte),e(pte,TKe),e(bg,MKe),e(bg,US),e(US,EKe),e(bg,CKe),e(A,wKe),e(A,vg),e(vg,_te),e(_te,AKe),e(vg,yKe),e(vg,JS),e(JS,LKe),e(vg,xKe),e(A,$Ke),e(A,Fg),e(Fg,ute),e(ute,kKe),e(Fg,SKe),e(Fg,YS),e(YS,RKe),e(Fg,PKe),e(A,BKe),e(A,Tg),e(Tg,bte),e(bte,IKe),e(Tg,NKe),e(Tg,KS),e(KS,qKe),e(Tg,jKe),e(A,DKe),e(A,Mg),e(Mg,vte),e(vte,GKe),e(Mg,OKe),e(Mg,ZS),e(ZS,VKe),e(Mg,XKe),e(A,zKe),e(A,Eg),e(Eg,Fte),e(Fte,WKe),e(Eg,QKe),e(Eg,eR),e(eR,HKe),e(Eg,UKe),e(Er,JKe),M(Cg,Er,null),e(Co,YKe),e(Co,wg),M(IA,wg,null),e(wg,KKe),e(wg,Tte),e(Tte,ZKe),b(f,gqe,u),b(f,Mi,u),e(Mi,Ag),e(Ag,Mte),M(NA,Mte,null),e(Mi,eZe),e(Mi,Ete),e(Ete,oZe),b(f,hqe,u),b(f,wo,u),M(qA,wo,null),e(wo,rZe),e(wo,jA),e(jA,tZe),e(jA,oR),e(oR,aZe),e(jA,nZe),e(wo,sZe),e(wo,DA),e(DA,lZe),e(DA,Cte),e(Cte,iZe),e(DA,dZe),e(wo,cZe),e(wo,Cr),M(GA,Cr,null),e(Cr,fZe),e(Cr,wte),e(wte,mZe),e(Cr,gZe),e(Cr,ya),e(ya,hZe),e(ya,Ate),e(Ate,pZe),e(ya,_Ze),e(ya,yte),e(yte,uZe),e(ya,bZe),e(ya,Lte),e(Lte,vZe),e(ya,FZe),e(Cr,TZe),e(Cr,k),e(k,Sn),e(Sn,xte),e(xte,MZe),e(Sn,EZe),e(Sn,rR),e(rR,CZe),e(Sn,wZe),e(Sn,tR),e(tR,AZe),e(Sn,yZe),e(k,LZe),e(k,Rn),e(Rn,$te),e($te,xZe),e(Rn,$Ze),e(Rn,aR),e(aR,kZe),e(Rn,SZe),e(Rn,nR),e(nR,RZe),e(Rn,PZe),e(k,BZe),e(k,Pn),e(Pn,kte),e(kte,IZe),e(Pn,NZe),e(Pn,sR),e(sR,qZe),e(Pn,jZe),e(Pn,lR),e(lR,DZe),e(Pn,GZe),e(k,OZe),e(k,yg),e(yg,Ste),e(Ste,VZe),e(yg,XZe),e(yg,iR),e(iR,zZe),e(yg,WZe),e(k,QZe),e(k,Bn),e(Bn,Rte),e(Rte,HZe),e(Bn,UZe),e(Bn,dR),e(dR,JZe),e(Bn,YZe),e(Bn,cR),e(cR,KZe),e(Bn,ZZe),e(k,eeo),e(k,Lg),e(Lg,Pte),e(Pte,oeo),e(Lg,reo),e(Lg,fR),e(fR,teo),e(Lg,aeo),e(k,neo),e(k,xg),e(xg,Bte),e(Bte,seo),e(xg,leo),e(xg,mR),e(mR,ieo),e(xg,deo),e(k,ceo),e(k,$g),e($g,Ite),e(Ite,feo),e($g,meo),e($g,gR),e(gR,geo),e($g,heo),e(k,peo),e(k,In),e(In,Nte),e(Nte,_eo),e(In,ueo),e(In,hR),e(hR,beo),e(In,veo),e(In,pR),e(pR,Feo),e(In,Teo),e(k,Meo),e(k,Nn),e(Nn,qte),e(qte,Eeo),e(Nn,Ceo),e(Nn,_R),e(_R,weo),e(Nn,Aeo),e(Nn,uR),e(uR,yeo),e(Nn,Leo),e(k,xeo),e(k,qn),e(qn,jte),e(jte,$eo),e(qn,keo),e(qn,bR),e(bR,Seo),e(qn,Reo),e(qn,vR),e(vR,Peo),e(qn,Beo),e(k,Ieo),e(k,kg),e(kg,Dte),e(Dte,Neo),e(kg,qeo),e(kg,FR),e(FR,jeo),e(kg,Deo),e(k,Geo),e(k,Sg),e(Sg,Gte),e(Gte,Oeo),e(Sg,Veo),e(Sg,TR),e(TR,Xeo),e(Sg,zeo),e(k,Weo),e(k,jn),e(jn,Ote),e(Ote,Qeo),e(jn,Heo),e(jn,MR),e(MR,Ueo),e(jn,Jeo),e(jn,ER),e(ER,Yeo),e(jn,Keo),e(k,Zeo),e(k,Rg),e(Rg,Vte),e(Vte,eoo),e(Rg,ooo),e(Rg,CR),e(CR,roo),e(Rg,too),e(k,aoo),e(k,Dn),e(Dn,Xte),e(Xte,noo),e(Dn,soo),e(Dn,wR),e(wR,loo),e(Dn,ioo),e(Dn,AR),e(AR,doo),e(Dn,coo),e(k,foo),e(k,Gn),e(Gn,zte),e(zte,moo),e(Gn,goo),e(Gn,yR),e(yR,hoo),e(Gn,poo),e(Gn,LR),e(LR,_oo),e(Gn,uoo),e(k,boo),e(k,On),e(On,Wte),e(Wte,voo),e(On,Foo),e(On,xR),e(xR,Too),e(On,Moo),e(On,$R),e($R,Eoo),e(On,Coo),e(k,woo),e(k,Pg),e(Pg,Qte),e(Qte,Aoo),e(Pg,yoo),e(Pg,kR),e(kR,Loo),e(Pg,xoo),e(k,$oo),e(k,Vn),e(Vn,Hte),e(Hte,koo),e(Vn,Soo),e(Vn,SR),e(SR,Roo),e(Vn,Poo),e(Vn,RR),e(RR,Boo),e(Vn,Ioo),e(k,Noo),e(k,Xn),e(Xn,Ute),e(Ute,qoo),e(Xn,joo),e(Xn,PR),e(PR,Doo),e(Xn,Goo),e(Xn,BR),e(BR,Ooo),e(Xn,Voo),e(k,Xoo),e(k,zn),e(zn,Jte),e(Jte,zoo),e(zn,Woo),e(zn,IR),e(IR,Qoo),e(zn,Hoo),e(zn,NR),e(NR,Uoo),e(zn,Joo),e(k,Yoo),e(k,Wn),e(Wn,Yte),e(Yte,Koo),e(Wn,Zoo),e(Wn,qR),e(qR,ero),e(Wn,oro),e(Wn,jR),e(jR,rro),e(Wn,tro),e(k,aro),e(k,Qn),e(Qn,Kte),e(Kte,nro),e(Qn,sro),e(Qn,DR),e(DR,lro),e(Qn,iro),e(Qn,GR),e(GR,dro),e(Qn,cro),e(k,fro),e(k,Hn),e(Hn,Zte),e(Zte,mro),e(Hn,gro),e(Hn,OR),e(OR,hro),e(Hn,pro),e(Hn,VR),e(VR,_ro),e(Hn,uro),e(k,bro),e(k,Bg),e(Bg,eae),e(eae,vro),e(Bg,Fro),e(Bg,XR),e(XR,Tro),e(Bg,Mro),e(k,Ero),e(k,Un),e(Un,oae),e(oae,Cro),e(Un,wro),e(Un,zR),e(zR,Aro),e(Un,yro),e(Un,WR),e(WR,Lro),e(Un,xro),e(k,$ro),e(k,Ig),e(Ig,rae),e(rae,kro),e(Ig,Sro),e(Ig,QR),e(QR,Rro),e(Ig,Pro),e(k,Bro),e(k,Jn),e(Jn,tae),e(tae,Iro),e(Jn,Nro),e(Jn,HR),e(HR,qro),e(Jn,jro),e(Jn,UR),e(UR,Dro),e(Jn,Gro),e(k,Oro),e(k,Yn),e(Yn,aae),e(aae,Vro),e(Yn,Xro),e(Yn,JR),e(JR,zro),e(Yn,Wro),e(Yn,YR),e(YR,Qro),e(Yn,Hro),e(k,Uro),e(k,Kn),e(Kn,nae),e(nae,Jro),e(Kn,Yro),e(Kn,KR),e(KR,Kro),e(Kn,Zro),e(Kn,ZR),e(ZR,eto),e(Kn,oto),e(k,rto),e(k,Ng),e(Ng,sae),e(sae,tto),e(Ng,ato),e(Ng,eP),e(eP,nto),e(Ng,sto),e(k,lto),e(k,Zn),e(Zn,lae),e(lae,ito),e(Zn,dto),e(Zn,oP),e(oP,cto),e(Zn,fto),e(Zn,rP),e(rP,mto),e(Zn,gto),e(k,hto),e(k,es),e(es,iae),e(iae,pto),e(es,_to),e(es,tP),e(tP,uto),e(es,bto),e(es,aP),e(aP,vto),e(es,Fto),e(k,Tto),e(k,qg),e(qg,dae),e(dae,Mto),e(qg,Eto),e(qg,nP),e(nP,Cto),e(qg,wto),e(k,Ato),e(k,os),e(os,cae),e(cae,yto),e(os,Lto),e(os,sP),e(sP,xto),e(os,$to),e(os,lP),e(lP,kto),e(os,Sto),e(k,Rto),e(k,rs),e(rs,fae),e(fae,Pto),e(rs,Bto),e(rs,iP),e(iP,Ito),e(rs,Nto),e(rs,dP),e(dP,qto),e(rs,jto),e(k,Dto),e(k,ts),e(ts,mae),e(mae,Gto),e(ts,Oto),e(ts,cP),e(cP,Vto),e(ts,Xto),e(ts,fP),e(fP,zto),e(ts,Wto),e(k,Qto),e(k,as),e(as,gae),e(gae,Hto),e(as,Uto),e(as,mP),e(mP,Jto),e(as,Yto),e(as,gP),e(gP,Kto),e(as,Zto),e(k,eao),e(k,ns),e(ns,hae),e(hae,oao),e(ns,rao),e(ns,hP),e(hP,tao),e(ns,aao),e(ns,pP),e(pP,nao),e(ns,sao),e(k,lao),e(k,ss),e(ss,pae),e(pae,iao),e(ss,dao),e(ss,_P),e(_P,cao),e(ss,fao),e(ss,uP),e(uP,mao),e(ss,gao),e(k,hao),e(k,ls),e(ls,_ae),e(_ae,pao),e(ls,_ao),e(ls,bP),e(bP,uao),e(ls,bao),e(ls,vP),e(vP,vao),e(ls,Fao),e(k,Tao),e(k,jg),e(jg,uae),e(uae,Mao),e(jg,Eao),e(jg,FP),e(FP,Cao),e(jg,wao),e(k,Aao),e(k,is),e(is,bae),e(bae,yao),e(is,Lao),e(is,TP),e(TP,xao),e(is,$ao),e(is,MP),e(MP,kao),e(is,Sao),e(k,Rao),e(k,Dg),e(Dg,vae),e(vae,Pao),e(Dg,Bao),e(Dg,EP),e(EP,Iao),e(Dg,Nao),e(k,qao),e(k,Gg),e(Gg,Fae),e(Fae,jao),e(Gg,Dao),e(Gg,CP),e(CP,Gao),e(Gg,Oao),e(k,Vao),e(k,ds),e(ds,Tae),e(Tae,Xao),e(ds,zao),e(ds,wP),e(wP,Wao),e(ds,Qao),e(ds,AP),e(AP,Hao),e(ds,Uao),e(k,Jao),e(k,cs),e(cs,Mae),e(Mae,Yao),e(cs,Kao),e(cs,yP),e(yP,Zao),e(cs,eno),e(cs,LP),e(LP,ono),e(cs,rno),e(k,tno),e(k,fs),e(fs,Eae),e(Eae,ano),e(fs,nno),e(fs,xP),e(xP,sno),e(fs,lno),e(fs,$P),e($P,ino),e(fs,dno),e(k,cno),e(k,Og),e(Og,Cae),e(Cae,fno),e(Og,mno),e(Og,kP),e(kP,gno),e(Og,hno),e(k,pno),e(k,ms),e(ms,wae),e(wae,_no),e(ms,uno),e(ms,SP),e(SP,bno),e(ms,vno),e(ms,RP),e(RP,Fno),e(ms,Tno),e(k,Mno),e(k,gs),e(gs,Aae),e(Aae,Eno),e(gs,Cno),e(gs,PP),e(PP,wno),e(gs,Ano),e(gs,BP),e(BP,yno),e(gs,Lno),e(k,xno),e(k,hs),e(hs,yae),e(yae,$no),e(hs,kno),e(hs,IP),e(IP,Sno),e(hs,Rno),e(hs,NP),e(NP,Pno),e(hs,Bno),e(k,Ino),e(k,ps),e(ps,Lae),e(Lae,Nno),e(ps,qno),e(ps,qP),e(qP,jno),e(ps,Dno),e(ps,jP),e(jP,Gno),e(ps,Ono),e(k,Vno),e(k,_s),e(_s,xae),e(xae,Xno),e(_s,zno),e(_s,DP),e(DP,Wno),e(_s,Qno),e(_s,GP),e(GP,Hno),e(_s,Uno),e(k,Jno),e(k,Vg),e(Vg,$ae),e($ae,Yno),e(Vg,Kno),e(Vg,OP),e(OP,Zno),e(Vg,eso),e(k,oso),e(k,us),e(us,kae),e(kae,rso),e(us,tso),e(us,VP),e(VP,aso),e(us,nso),e(us,XP),e(XP,sso),e(us,lso),e(k,iso),e(k,Xg),e(Xg,Sae),e(Sae,dso),e(Xg,cso),e(Xg,zP),e(zP,fso),e(Xg,mso),e(k,gso),e(k,zg),e(zg,Rae),e(Rae,hso),e(zg,pso),e(zg,WP),e(WP,_so),e(zg,uso),e(k,bso),e(k,Wg),e(Wg,Pae),e(Pae,vso),e(Wg,Fso),e(Wg,QP),e(QP,Tso),e(Wg,Mso),e(k,Eso),e(k,Qg),e(Qg,Bae),e(Bae,Cso),e(Qg,wso),e(Qg,HP),e(HP,Aso),e(Qg,yso),e(k,Lso),e(k,bs),e(bs,Iae),e(Iae,xso),e(bs,$so),e(bs,UP),e(UP,kso),e(bs,Sso),e(bs,JP),e(JP,Rso),e(bs,Pso),e(k,Bso),e(k,Hg),e(Hg,Nae),e(Nae,Iso),e(Hg,Nso),e(Hg,YP),e(YP,qso),e(Hg,jso),e(k,Dso),e(k,vs),e(vs,qae),e(qae,Gso),e(vs,Oso),e(vs,KP),e(KP,Vso),e(vs,Xso),e(vs,ZP),e(ZP,zso),e(vs,Wso),e(k,Qso),e(k,Fs),e(Fs,jae),e(jae,Hso),e(Fs,Uso),e(Fs,eB),e(eB,Jso),e(Fs,Yso),e(Fs,oB),e(oB,Kso),e(Fs,Zso),e(k,elo),e(k,Ts),e(Ts,Dae),e(Dae,olo),e(Ts,rlo),e(Ts,rB),e(rB,tlo),e(Ts,alo),e(Ts,tB),e(tB,nlo),e(Ts,slo),e(k,llo),e(k,Ms),e(Ms,Gae),e(Gae,ilo),e(Ms,dlo),e(Ms,aB),e(aB,clo),e(Ms,flo),e(Ms,nB),e(nB,mlo),e(Ms,glo),e(k,hlo),e(k,Es),e(Es,Oae),e(Oae,plo),e(Es,_lo),e(Es,sB),e(sB,ulo),e(Es,blo),e(Es,lB),e(lB,vlo),e(Es,Flo),e(k,Tlo),e(k,Cs),e(Cs,Vae),e(Vae,Mlo),e(Cs,Elo),e(Cs,iB),e(iB,Clo),e(Cs,wlo),e(Cs,dB),e(dB,Alo),e(Cs,ylo),e(k,Llo),e(k,Ug),e(Ug,Xae),e(Xae,xlo),e(Ug,$lo),e(Ug,cB),e(cB,klo),e(Ug,Slo),e(k,Rlo),e(k,Jg),e(Jg,zae),e(zae,Plo),e(Jg,Blo),e(Jg,fB),e(fB,Ilo),e(Jg,Nlo),e(k,qlo),e(k,ws),e(ws,Wae),e(Wae,jlo),e(ws,Dlo),e(ws,mB),e(mB,Glo),e(ws,Olo),e(ws,gB),e(gB,Vlo),e(ws,Xlo),e(k,zlo),e(k,As),e(As,Qae),e(Qae,Wlo),e(As,Qlo),e(As,hB),e(hB,Hlo),e(As,Ulo),e(As,pB),e(pB,Jlo),e(As,Ylo),e(k,Klo),e(k,ys),e(ys,Hae),e(Hae,Zlo),e(ys,eio),e(ys,_B),e(_B,oio),e(ys,rio),e(ys,uB),e(uB,tio),e(ys,aio),e(k,nio),e(k,Yg),e(Yg,Uae),e(Uae,sio),e(Yg,lio),e(Yg,bB),e(bB,iio),e(Yg,dio),e(k,cio),e(k,Kg),e(Kg,Jae),e(Jae,fio),e(Kg,mio),e(Kg,vB),e(vB,gio),e(Kg,hio),e(k,pio),e(k,Zg),e(Zg,Yae),e(Yae,_io),e(Zg,uio),e(Zg,FB),e(FB,bio),e(Zg,vio),e(k,Fio),e(k,Ls),e(Ls,Kae),e(Kae,Tio),e(Ls,Mio),e(Ls,TB),e(TB,Eio),e(Ls,Cio),e(Ls,MB),e(MB,wio),e(Ls,Aio),e(k,yio),e(k,eh),e(eh,Zae),e(Zae,Lio),e(eh,xio),e(eh,EB),e(EB,$io),e(eh,kio),e(k,Sio),e(k,oh),e(oh,ene),e(ene,Rio),e(oh,Pio),e(oh,CB),e(CB,Bio),e(oh,Iio),e(k,Nio),e(k,rh),e(rh,one),e(one,qio),e(rh,jio),e(rh,wB),e(wB,Dio),e(rh,Gio),e(k,Oio),e(k,xs),e(xs,rne),e(rne,Vio),e(xs,Xio),e(xs,AB),e(AB,zio),e(xs,Wio),e(xs,yB),e(yB,Qio),e(xs,Hio),e(k,Uio),e(k,th),e(th,tne),e(tne,Jio),e(th,Yio),e(th,LB),e(LB,Kio),e(th,Zio),e(k,edo),e(k,ah),e(ah,ane),e(ane,odo),e(ah,rdo),e(ah,xB),e(xB,tdo),e(ah,ado),e(k,ndo),e(k,$s),e($s,nne),e(nne,sdo),e($s,ldo),e($s,$B),e($B,ido),e($s,ddo),e($s,kB),e(kB,cdo),e($s,fdo),e(k,mdo),e(k,ks),e(ks,sne),e(sne,gdo),e(ks,hdo),e(ks,SB),e(SB,pdo),e(ks,_do),e(ks,RB),e(RB,udo),e(ks,bdo),e(k,vdo),e(k,Ss),e(Ss,lne),e(lne,Fdo),e(Ss,Tdo),e(Ss,PB),e(PB,Mdo),e(Ss,Edo),e(Ss,BB),e(BB,Cdo),e(Ss,wdo),e(k,Ado),e(k,Rs),e(Rs,ine),e(ine,ydo),e(Rs,Ldo),e(Rs,IB),e(IB,xdo),e(Rs,$do),e(Rs,NB),e(NB,kdo),e(Rs,Sdo),e(Cr,Rdo),M(nh,Cr,null),e(wo,Pdo),e(wo,sh),M(OA,sh,null),e(sh,Bdo),e(sh,dne),e(dne,Ido),b(f,pqe,u),b(f,Ei,u),e(Ei,lh),e(lh,cne),M(VA,cne,null),e(Ei,Ndo),e(Ei,fne),e(fne,qdo),b(f,_qe,u),b(f,Ao,u),M(XA,Ao,null),e(Ao,jdo),e(Ao,zA),e(zA,Ddo),e(zA,qB),e(qB,Gdo),e(zA,Odo),e(Ao,Vdo),e(Ao,WA),e(WA,Xdo),e(WA,mne),e(mne,zdo),e(WA,Wdo),e(Ao,Qdo),e(Ao,He),M(QA,He,null),e(He,Hdo),e(He,gne),e(gne,Udo),e(He,Jdo),e(He,La),e(La,Ydo),e(La,hne),e(hne,Kdo),e(La,Zdo),e(La,pne),e(pne,eco),e(La,oco),e(La,_ne),e(_ne,rco),e(La,tco),e(He,aco),e(He,Y),e(Y,ih),e(ih,une),e(une,nco),e(ih,sco),e(ih,jB),e(jB,lco),e(ih,ico),e(Y,dco),e(Y,dh),e(dh,bne),e(bne,cco),e(dh,fco),e(dh,DB),e(DB,mco),e(dh,gco),e(Y,hco),e(Y,ch),e(ch,vne),e(vne,pco),e(ch,_co),e(ch,GB),e(GB,uco),e(ch,bco),e(Y,vco),e(Y,fh),e(fh,Fne),e(Fne,Fco),e(fh,Tco),e(fh,OB),e(OB,Mco),e(fh,Eco),e(Y,Cco),e(Y,mh),e(mh,Tne),e(Tne,wco),e(mh,Aco),e(mh,VB),e(VB,yco),e(mh,Lco),e(Y,xco),e(Y,gh),e(gh,Mne),e(Mne,$co),e(gh,kco),e(gh,XB),e(XB,Sco),e(gh,Rco),e(Y,Pco),e(Y,hh),e(hh,Ene),e(Ene,Bco),e(hh,Ico),e(hh,zB),e(zB,Nco),e(hh,qco),e(Y,jco),e(Y,ph),e(ph,Cne),e(Cne,Dco),e(ph,Gco),e(ph,WB),e(WB,Oco),e(ph,Vco),e(Y,Xco),e(Y,_h),e(_h,wne),e(wne,zco),e(_h,Wco),e(_h,QB),e(QB,Qco),e(_h,Hco),e(Y,Uco),e(Y,uh),e(uh,Ane),e(Ane,Jco),e(uh,Yco),e(uh,HB),e(HB,Kco),e(uh,Zco),e(Y,efo),e(Y,bh),e(bh,yne),e(yne,ofo),e(bh,rfo),e(bh,UB),e(UB,tfo),e(bh,afo),e(Y,nfo),e(Y,vh),e(vh,Lne),e(Lne,sfo),e(vh,lfo),e(vh,JB),e(JB,ifo),e(vh,dfo),e(Y,cfo),e(Y,Fh),e(Fh,xne),e(xne,ffo),e(Fh,mfo),e(Fh,YB),e(YB,gfo),e(Fh,hfo),e(Y,pfo),e(Y,Th),e(Th,$ne),e($ne,_fo),e(Th,ufo),e(Th,KB),e(KB,bfo),e(Th,vfo),e(Y,Ffo),e(Y,Mh),e(Mh,kne),e(kne,Tfo),e(Mh,Mfo),e(Mh,ZB),e(ZB,Efo),e(Mh,Cfo),e(Y,wfo),e(Y,Eh),e(Eh,Sne),e(Sne,Afo),e(Eh,yfo),e(Eh,eI),e(eI,Lfo),e(Eh,xfo),e(Y,$fo),e(Y,Ch),e(Ch,Rne),e(Rne,kfo),e(Ch,Sfo),e(Ch,oI),e(oI,Rfo),e(Ch,Pfo),e(Y,Bfo),e(Y,wh),e(wh,Pne),e(Pne,Ifo),e(wh,Nfo),e(wh,rI),e(rI,qfo),e(wh,jfo),e(Y,Dfo),e(Y,Ah),e(Ah,Bne),e(Bne,Gfo),e(Ah,Ofo),e(Ah,tI),e(tI,Vfo),e(Ah,Xfo),e(Y,zfo),e(Y,yh),e(yh,Ine),e(Ine,Wfo),e(yh,Qfo),e(yh,aI),e(aI,Hfo),e(yh,Ufo),e(Y,Jfo),e(Y,Lh),e(Lh,Nne),e(Nne,Yfo),e(Lh,Kfo),e(Lh,nI),e(nI,Zfo),e(Lh,emo),e(Y,omo),e(Y,xh),e(xh,qne),e(qne,rmo),e(xh,tmo),e(xh,sI),e(sI,amo),e(xh,nmo),e(Y,smo),e(Y,$h),e($h,jne),e(jne,lmo),e($h,imo),e($h,lI),e(lI,dmo),e($h,cmo),e(Y,fmo),e(Y,kh),e(kh,Dne),e(Dne,mmo),e(kh,gmo),e(kh,iI),e(iI,hmo),e(kh,pmo),e(Y,_mo),e(Y,Sh),e(Sh,Gne),e(Gne,umo),e(Sh,bmo),e(Sh,dI),e(dI,vmo),e(Sh,Fmo),e(Y,Tmo),e(Y,Rh),e(Rh,One),e(One,Mmo),e(Rh,Emo),e(Rh,cI),e(cI,Cmo),e(Rh,wmo),e(Y,Amo),e(Y,Ph),e(Ph,Vne),e(Vne,ymo),e(Ph,Lmo),e(Ph,fI),e(fI,xmo),e(Ph,$mo),e(Y,kmo),e(Y,Bh),e(Bh,Xne),e(Xne,Smo),e(Bh,Rmo),e(Bh,mI),e(mI,Pmo),e(Bh,Bmo),e(Y,Imo),e(Y,Ih),e(Ih,zne),e(zne,Nmo),e(Ih,qmo),e(Ih,gI),e(gI,jmo),e(Ih,Dmo),e(He,Gmo),M(Nh,He,null),e(He,Omo),M(qh,He,null),e(Ao,Vmo),e(Ao,jh),M(HA,jh,null),e(jh,Xmo),e(jh,Wne),e(Wne,zmo),b(f,uqe,u),b(f,Ci,u),e(Ci,Dh),e(Dh,Qne),M(UA,Qne,null),e(Ci,Wmo),e(Ci,Hne),e(Hne,Qmo),b(f,bqe,u),b(f,yo,u),M(JA,yo,null),e(yo,Hmo),e(yo,YA),e(YA,Umo),e(YA,hI),e(hI,Jmo),e(YA,Ymo),e(yo,Kmo),e(yo,KA),e(KA,Zmo),e(KA,Une),e(Une,ego),e(KA,ogo),e(yo,rgo),e(yo,Ue),M(ZA,Ue,null),e(Ue,tgo),e(Ue,Jne),e(Jne,ago),e(Ue,ngo),e(Ue,wi),e(wi,sgo),e(wi,Yne),e(Yne,lgo),e(wi,igo),e(wi,Kne),e(Kne,dgo),e(wi,cgo),e(Ue,fgo),e(Ue,he),e(he,Gh),e(Gh,Zne),e(Zne,mgo),e(Gh,ggo),e(Gh,pI),e(pI,hgo),e(Gh,pgo),e(he,_go),e(he,Oh),e(Oh,ese),e(ese,ugo),e(Oh,bgo),e(Oh,ose),e(ose,vgo),e(Oh,Fgo),e(he,Tgo),e(he,Vh),e(Vh,rse),e(rse,Mgo),e(Vh,Ego),e(Vh,_I),e(_I,Cgo),e(Vh,wgo),e(he,Ago),e(he,Xh),e(Xh,tse),e(tse,ygo),e(Xh,Lgo),e(Xh,uI),e(uI,xgo),e(Xh,$go),e(he,kgo),e(he,zh),e(zh,ase),e(ase,Sgo),e(zh,Rgo),e(zh,bI),e(bI,Pgo),e(zh,Bgo),e(he,Igo),e(he,Wh),e(Wh,nse),e(nse,Ngo),e(Wh,qgo),e(Wh,vI),e(vI,jgo),e(Wh,Dgo),e(he,Ggo),e(he,Qh),e(Qh,sse),e(sse,Ogo),e(Qh,Vgo),e(Qh,FI),e(FI,Xgo),e(Qh,zgo),e(he,Wgo),e(he,Hh),e(Hh,lse),e(lse,Qgo),e(Hh,Hgo),e(Hh,TI),e(TI,Ugo),e(Hh,Jgo),e(he,Ygo),e(he,Uh),e(Uh,ise),e(ise,Kgo),e(Uh,Zgo),e(Uh,MI),e(MI,eho),e(Uh,oho),e(he,rho),e(he,Jh),e(Jh,dse),e(dse,tho),e(Jh,aho),e(Jh,EI),e(EI,nho),e(Jh,sho),e(he,lho),e(he,Yh),e(Yh,cse),e(cse,iho),e(Yh,dho),e(Yh,CI),e(CI,cho),e(Yh,fho),e(he,mho),e(he,Kh),e(Kh,fse),e(fse,gho),e(Kh,hho),e(Kh,wI),e(wI,pho),e(Kh,_ho),e(he,uho),e(he,Zh),e(Zh,mse),e(mse,bho),e(Zh,vho),e(Zh,AI),e(AI,Fho),e(Zh,Tho),e(he,Mho),e(he,ep),e(ep,gse),e(gse,Eho),e(ep,Cho),e(ep,yI),e(yI,who),e(ep,Aho),e(he,yho),e(he,op),e(op,hse),e(hse,Lho),e(op,xho),e(op,LI),e(LI,$ho),e(op,kho),e(he,Sho),e(he,rp),e(rp,pse),e(pse,Rho),e(rp,Pho),e(rp,xI),e(xI,Bho),e(rp,Iho),e(he,Nho),e(he,tp),e(tp,_se),e(_se,qho),e(tp,jho),e(tp,$I),e($I,Dho),e(tp,Gho),e(Ue,Oho),M(ap,Ue,null),e(Ue,Vho),M(np,Ue,null),e(yo,Xho),e(yo,sp),M(ey,sp,null),e(sp,zho),e(sp,use),e(use,Who),b(f,vqe,u),b(f,Ai,u),e(Ai,lp),e(lp,bse),M(oy,bse,null),e(Ai,Qho),e(Ai,vse),e(vse,Hho),b(f,Fqe,u),b(f,Lo,u),M(ry,Lo,null),e(Lo,Uho),e(Lo,yi),e(yi,Jho),e(yi,kI),e(kI,Yho),e(yi,Kho),e(yi,SI),e(SI,Zho),e(yi,epo),e(Lo,opo),e(Lo,ty),e(ty,rpo),e(ty,Fse),e(Fse,tpo),e(ty,apo),e(Lo,npo),e(Lo,at),M(ay,at,null),e(at,spo),e(at,Tse),e(Tse,lpo),e(at,ipo),e(at,Li),e(Li,dpo),e(Li,Mse),e(Mse,cpo),e(Li,fpo),e(Li,RI),e(RI,mpo),e(Li,gpo),e(at,hpo),M(ip,at,null),e(Lo,ppo),e(Lo,Je),M(ny,Je,null),e(Je,_po),e(Je,Ese),e(Ese,upo),e(Je,bpo),e(Je,xa),e(xa,vpo),e(xa,Cse),e(Cse,Fpo),e(xa,Tpo),e(xa,wse),e(wse,Mpo),e(xa,Epo),e(xa,Ase),e(Ase,Cpo),e(xa,wpo),e(Je,Apo),e(Je,x),e(x,dp),e(dp,yse),e(yse,ypo),e(dp,Lpo),e(dp,PI),e(PI,xpo),e(dp,$po),e(x,kpo),e(x,cp),e(cp,Lse),e(Lse,Spo),e(cp,Rpo),e(cp,BI),e(BI,Ppo),e(cp,Bpo),e(x,Ipo),e(x,fp),e(fp,xse),e(xse,Npo),e(fp,qpo),e(fp,II),e(II,jpo),e(fp,Dpo),e(x,Gpo),e(x,mp),e(mp,$se),e($se,Opo),e(mp,Vpo),e(mp,NI),e(NI,Xpo),e(mp,zpo),e(x,Wpo),e(x,gp),e(gp,kse),e(kse,Qpo),e(gp,Hpo),e(gp,qI),e(qI,Upo),e(gp,Jpo),e(x,Ypo),e(x,hp),e(hp,Sse),e(Sse,Kpo),e(hp,Zpo),e(hp,jI),e(jI,e_o),e(hp,o_o),e(x,r_o),e(x,pp),e(pp,Rse),e(Rse,t_o),e(pp,a_o),e(pp,DI),e(DI,n_o),e(pp,s_o),e(x,l_o),e(x,_p),e(_p,Pse),e(Pse,i_o),e(_p,d_o),e(_p,GI),e(GI,c_o),e(_p,f_o),e(x,m_o),e(x,up),e(up,Bse),e(Bse,g_o),e(up,h_o),e(up,OI),e(OI,p_o),e(up,__o),e(x,u_o),e(x,bp),e(bp,Ise),e(Ise,b_o),e(bp,v_o),e(bp,VI),e(VI,F_o),e(bp,T_o),e(x,M_o),e(x,vp),e(vp,Nse),e(Nse,E_o),e(vp,C_o),e(vp,XI),e(XI,w_o),e(vp,A_o),e(x,y_o),e(x,Fp),e(Fp,qse),e(qse,L_o),e(Fp,x_o),e(Fp,zI),e(zI,$_o),e(Fp,k_o),e(x,S_o),e(x,Tp),e(Tp,jse),e(jse,R_o),e(Tp,P_o),e(Tp,WI),e(WI,B_o),e(Tp,I_o),e(x,N_o),e(x,Mp),e(Mp,Dse),e(Dse,q_o),e(Mp,j_o),e(Mp,QI),e(QI,D_o),e(Mp,G_o),e(x,O_o),e(x,Ep),e(Ep,Gse),e(Gse,V_o),e(Ep,X_o),e(Ep,HI),e(HI,z_o),e(Ep,W_o),e(x,Q_o),e(x,Cp),e(Cp,Ose),e(Ose,H_o),e(Cp,U_o),e(Cp,UI),e(UI,J_o),e(Cp,Y_o),e(x,K_o),e(x,wp),e(wp,Vse),e(Vse,Z_o),e(wp,euo),e(wp,JI),e(JI,ouo),e(wp,ruo),e(x,tuo),e(x,Ap),e(Ap,Xse),e(Xse,auo),e(Ap,nuo),e(Ap,YI),e(YI,suo),e(Ap,luo),e(x,iuo),e(x,yp),e(yp,zse),e(zse,duo),e(yp,cuo),e(yp,KI),e(KI,fuo),e(yp,muo),e(x,guo),e(x,Lp),e(Lp,Wse),e(Wse,huo),e(Lp,puo),e(Lp,ZI),e(ZI,_uo),e(Lp,uuo),e(x,buo),e(x,xp),e(xp,Qse),e(Qse,vuo),e(xp,Fuo),e(xp,eN),e(eN,Tuo),e(xp,Muo),e(x,Euo),e(x,$p),e($p,Hse),e(Hse,Cuo),e($p,wuo),e($p,oN),e(oN,Auo),e($p,yuo),e(x,Luo),e(x,kp),e(kp,Use),e(Use,xuo),e(kp,$uo),e(kp,rN),e(rN,kuo),e(kp,Suo),e(x,Ruo),e(x,Sp),e(Sp,Jse),e(Jse,Puo),e(Sp,Buo),e(Sp,tN),e(tN,Iuo),e(Sp,Nuo),e(x,quo),e(x,Rp),e(Rp,Yse),e(Yse,juo),e(Rp,Duo),e(Rp,aN),e(aN,Guo),e(Rp,Ouo),e(x,Vuo),e(x,Pp),e(Pp,Kse),e(Kse,Xuo),e(Pp,zuo),e(Pp,nN),e(nN,Wuo),e(Pp,Quo),e(x,Huo),e(x,Bp),e(Bp,Zse),e(Zse,Uuo),e(Bp,Juo),e(Bp,sN),e(sN,Yuo),e(Bp,Kuo),e(x,Zuo),e(x,Ip),e(Ip,ele),e(ele,e2o),e(Ip,o2o),e(Ip,lN),e(lN,r2o),e(Ip,t2o),e(x,a2o),e(x,Np),e(Np,ole),e(ole,n2o),e(Np,s2o),e(Np,iN),e(iN,l2o),e(Np,i2o),e(x,d2o),e(x,qp),e(qp,rle),e(rle,c2o),e(qp,f2o),e(qp,dN),e(dN,m2o),e(qp,g2o),e(x,h2o),e(x,jp),e(jp,tle),e(tle,p2o),e(jp,_2o),e(jp,cN),e(cN,u2o),e(jp,b2o),e(x,v2o),e(x,Dp),e(Dp,ale),e(ale,F2o),e(Dp,T2o),e(Dp,fN),e(fN,M2o),e(Dp,E2o),e(x,C2o),e(x,Ps),e(Ps,nle),e(nle,w2o),e(Ps,A2o),e(Ps,mN),e(mN,y2o),e(Ps,L2o),e(Ps,gN),e(gN,x2o),e(Ps,$2o),e(x,k2o),e(x,Gp),e(Gp,sle),e(sle,S2o),e(Gp,R2o),e(Gp,hN),e(hN,P2o),e(Gp,B2o),e(x,I2o),e(x,Op),e(Op,lle),e(lle,N2o),e(Op,q2o),e(Op,pN),e(pN,j2o),e(Op,D2o),e(x,G2o),e(x,Vp),e(Vp,ile),e(ile,O2o),e(Vp,V2o),e(Vp,_N),e(_N,X2o),e(Vp,z2o),e(x,W2o),e(x,Xp),e(Xp,dle),e(dle,Q2o),e(Xp,H2o),e(Xp,uN),e(uN,U2o),e(Xp,J2o),e(x,Y2o),e(x,zp),e(zp,cle),e(cle,K2o),e(zp,Z2o),e(zp,bN),e(bN,e1o),e(zp,o1o),e(x,r1o),e(x,Wp),e(Wp,fle),e(fle,t1o),e(Wp,a1o),e(Wp,vN),e(vN,n1o),e(Wp,s1o),e(x,l1o),e(x,Qp),e(Qp,mle),e(mle,i1o),e(Qp,d1o),e(Qp,FN),e(FN,c1o),e(Qp,f1o),e(x,m1o),e(x,Hp),e(Hp,gle),e(gle,g1o),e(Hp,h1o),e(Hp,TN),e(TN,p1o),e(Hp,_1o),e(x,u1o),e(x,Up),e(Up,hle),e(hle,b1o),e(Up,v1o),e(Up,MN),e(MN,F1o),e(Up,T1o),e(x,M1o),e(x,Jp),e(Jp,ple),e(ple,E1o),e(Jp,C1o),e(Jp,EN),e(EN,w1o),e(Jp,A1o),e(x,y1o),e(x,Yp),e(Yp,_le),e(_le,L1o),e(Yp,x1o),e(Yp,CN),e(CN,$1o),e(Yp,k1o),e(x,S1o),e(x,Kp),e(Kp,ule),e(ule,R1o),e(Kp,P1o),e(Kp,wN),e(wN,B1o),e(Kp,I1o),e(x,N1o),e(x,Zp),e(Zp,ble),e(ble,q1o),e(Zp,j1o),e(Zp,AN),e(AN,D1o),e(Zp,G1o),e(x,O1o),e(x,e_),e(e_,vle),e(vle,V1o),e(e_,X1o),e(e_,yN),e(yN,z1o),e(e_,W1o),e(x,Q1o),e(x,o_),e(o_,Fle),e(Fle,H1o),e(o_,U1o),e(o_,LN),e(LN,J1o),e(o_,Y1o),e(x,K1o),e(x,r_),e(r_,Tle),e(Tle,Z1o),e(r_,e7o),e(r_,xN),e(xN,o7o),e(r_,r7o),e(x,t7o),e(x,t_),e(t_,Mle),e(Mle,a7o),e(t_,n7o),e(t_,$N),e($N,s7o),e(t_,l7o),e(x,i7o),e(x,a_),e(a_,Ele),e(Ele,d7o),e(a_,c7o),e(a_,kN),e(kN,f7o),e(a_,m7o),e(x,g7o),e(x,n_),e(n_,Cle),e(Cle,h7o),e(n_,p7o),e(n_,SN),e(SN,_7o),e(n_,u7o),e(x,b7o),e(x,s_),e(s_,wle),e(wle,v7o),e(s_,F7o),e(s_,RN),e(RN,T7o),e(s_,M7o),e(x,E7o),e(x,l_),e(l_,Ale),e(Ale,C7o),e(l_,w7o),e(l_,PN),e(PN,A7o),e(l_,y7o),e(x,L7o),e(x,i_),e(i_,yle),e(yle,x7o),e(i_,$7o),e(i_,BN),e(BN,k7o),e(i_,S7o),e(x,R7o),e(x,d_),e(d_,Lle),e(Lle,P7o),e(d_,B7o),e(d_,IN),e(IN,I7o),e(d_,N7o),e(x,q7o),e(x,c_),e(c_,xle),e(xle,j7o),e(c_,D7o),e(c_,NN),e(NN,G7o),e(c_,O7o),e(x,V7o),e(x,f_),e(f_,$le),e($le,X7o),e(f_,z7o),e(f_,qN),e(qN,W7o),e(f_,Q7o),e(x,H7o),e(x,m_),e(m_,kle),e(kle,U7o),e(m_,J7o),e(m_,jN),e(jN,Y7o),e(m_,K7o),e(x,Z7o),e(x,g_),e(g_,Sle),e(Sle,ebo),e(g_,obo),e(g_,DN),e(DN,rbo),e(g_,tbo),e(x,abo),e(x,h_),e(h_,Rle),e(Rle,nbo),e(h_,sbo),e(h_,GN),e(GN,lbo),e(h_,ibo),e(x,dbo),e(x,p_),e(p_,Ple),e(Ple,cbo),e(p_,fbo),e(p_,ON),e(ON,mbo),e(p_,gbo),e(x,hbo),e(x,__),e(__,Ble),e(Ble,pbo),e(__,_bo),e(__,VN),e(VN,ubo),e(__,bbo),e(x,vbo),e(x,u_),e(u_,Ile),e(Ile,Fbo),e(u_,Tbo),e(u_,XN),e(XN,Mbo),e(u_,Ebo),e(x,Cbo),e(x,b_),e(b_,Nle),e(Nle,wbo),e(b_,Abo),e(b_,zN),e(zN,ybo),e(b_,Lbo),e(x,xbo),e(x,v_),e(v_,qle),e(qle,$bo),e(v_,kbo),e(v_,WN),e(WN,Sbo),e(v_,Rbo),e(x,Pbo),e(x,F_),e(F_,jle),e(jle,Bbo),e(F_,Ibo),e(F_,QN),e(QN,Nbo),e(F_,qbo),e(x,jbo),e(x,T_),e(T_,Dle),e(Dle,Dbo),e(T_,Gbo),e(T_,HN),e(HN,Obo),e(T_,Vbo),e(x,Xbo),e(x,M_),e(M_,Gle),e(Gle,zbo),e(M_,Wbo),e(M_,UN),e(UN,Qbo),e(M_,Hbo),e(x,Ubo),e(x,E_),e(E_,Ole),e(Ole,Jbo),e(E_,Ybo),e(E_,JN),e(JN,Kbo),e(E_,Zbo),e(x,e4o),e(x,C_),e(C_,Vle),e(Vle,o4o),e(C_,r4o),e(C_,YN),e(YN,t4o),e(C_,a4o),e(x,n4o),e(x,w_),e(w_,Xle),e(Xle,s4o),e(w_,l4o),e(w_,KN),e(KN,i4o),e(w_,d4o),e(x,c4o),e(x,A_),e(A_,zle),e(zle,f4o),e(A_,m4o),e(A_,ZN),e(ZN,g4o),e(A_,h4o),e(x,p4o),e(x,y_),e(y_,Wle),e(Wle,_4o),e(y_,u4o),e(y_,eq),e(eq,b4o),e(y_,v4o),e(x,F4o),e(x,L_),e(L_,Qle),e(Qle,T4o),e(L_,M4o),e(L_,oq),e(oq,E4o),e(L_,C4o),e(x,w4o),e(x,x_),e(x_,Hle),e(Hle,A4o),e(x_,y4o),e(x_,rq),e(rq,L4o),e(x_,x4o),e(x,$4o),e(x,$_),e($_,Ule),e(Ule,k4o),e($_,S4o),e($_,tq),e(tq,R4o),e($_,P4o),e(x,B4o),e(x,k_),e(k_,Jle),e(Jle,I4o),e(k_,N4o),e(k_,aq),e(aq,q4o),e(k_,j4o),e(x,D4o),e(x,S_),e(S_,Yle),e(Yle,G4o),e(S_,O4o),e(S_,nq),e(nq,V4o),e(S_,X4o),e(x,z4o),e(x,R_),e(R_,Kle),e(Kle,W4o),e(R_,Q4o),e(R_,sq),e(sq,H4o),e(R_,U4o),e(x,J4o),e(x,P_),e(P_,Zle),e(Zle,Y4o),e(P_,K4o),e(P_,lq),e(lq,Z4o),e(P_,evo),e(x,ovo),e(x,B_),e(B_,eie),e(eie,rvo),e(B_,tvo),e(B_,iq),e(iq,avo),e(B_,nvo),e(x,svo),e(x,I_),e(I_,oie),e(oie,lvo),e(I_,ivo),e(I_,dq),e(dq,dvo),e(I_,cvo),e(x,fvo),e(x,N_),e(N_,rie),e(rie,mvo),e(N_,gvo),e(N_,cq),e(cq,hvo),e(N_,pvo),e(x,_vo),e(x,q_),e(q_,tie),e(tie,uvo),e(q_,bvo),e(q_,fq),e(fq,vvo),e(q_,Fvo),e(x,Tvo),e(x,j_),e(j_,aie),e(aie,Mvo),e(j_,Evo),e(j_,mq),e(mq,Cvo),e(j_,wvo),e(x,Avo),e(x,D_),e(D_,nie),e(nie,yvo),e(D_,Lvo),e(D_,gq),e(gq,xvo),e(D_,$vo),e(x,kvo),e(x,G_),e(G_,sie),e(sie,Svo),e(G_,Rvo),e(G_,hq),e(hq,Pvo),e(G_,Bvo),e(x,Ivo),e(x,O_),e(O_,lie),e(lie,Nvo),e(O_,qvo),e(O_,pq),e(pq,jvo),e(O_,Dvo),e(x,Gvo),e(x,V_),e(V_,iie),e(iie,Ovo),e(V_,Vvo),e(V_,_q),e(_q,Xvo),e(V_,zvo),e(x,Wvo),e(x,X_),e(X_,die),e(die,Qvo),e(X_,Hvo),e(X_,uq),e(uq,Uvo),e(X_,Jvo),e(x,Yvo),e(x,z_),e(z_,cie),e(cie,Kvo),e(z_,Zvo),e(z_,bq),e(bq,eFo),e(z_,oFo),e(x,rFo),e(x,W_),e(W_,fie),e(fie,tFo),e(W_,aFo),e(W_,vq),e(vq,nFo),e(W_,sFo),e(x,lFo),e(x,Q_),e(Q_,mie),e(mie,iFo),e(Q_,dFo),e(Q_,Fq),e(Fq,cFo),e(Q_,fFo),e(x,mFo),e(x,H_),e(H_,gie),e(gie,gFo),e(H_,hFo),e(H_,Tq),e(Tq,pFo),e(H_,_Fo),e(x,uFo),e(x,U_),e(U_,hie),e(hie,bFo),e(U_,vFo),e(U_,Mq),e(Mq,FFo),e(U_,TFo),e(x,MFo),e(x,J_),e(J_,pie),e(pie,EFo),e(J_,CFo),e(J_,Eq),e(Eq,wFo),e(J_,AFo),e(x,yFo),e(x,Y_),e(Y_,_ie),e(_ie,LFo),e(Y_,xFo),e(Y_,Cq),e(Cq,$Fo),e(Y_,kFo),e(x,SFo),e(x,K_),e(K_,uie),e(uie,RFo),e(K_,PFo),e(K_,wq),e(wq,BFo),e(K_,IFo),e(x,NFo),e(x,Z_),e(Z_,bie),e(bie,qFo),e(Z_,jFo),e(Z_,Aq),e(Aq,DFo),e(Z_,GFo),e(x,OFo),e(x,eu),e(eu,vie),e(vie,VFo),e(eu,XFo),e(eu,yq),e(yq,zFo),e(eu,WFo),e(x,QFo),e(x,ou),e(ou,Fie),e(Fie,HFo),e(ou,UFo),e(ou,Lq),e(Lq,JFo),e(ou,YFo),e(Je,KFo),e(Je,ru),e(ru,ZFo),e(ru,Tie),e(Tie,eTo),e(ru,oTo),e(ru,Mie),e(Mie,rTo),e(Je,tTo),M(tu,Je,null),b(f,Tqe,u),b(f,xi,u),e(xi,au),e(au,Eie),M(sy,Eie,null),e(xi,aTo),e(xi,Cie),e(Cie,nTo),b(f,Mqe,u),b(f,xo,u),M(ly,xo,null),e(xo,sTo),e(xo,$i),e($i,lTo),e($i,xq),e(xq,iTo),e($i,dTo),e($i,$q),e($q,cTo),e($i,fTo),e(xo,mTo),e(xo,iy),e(iy,gTo),e(iy,wie),e(wie,hTo),e(iy,pTo),e(xo,_To),e(xo,nt),M(dy,nt,null),e(nt,uTo),e(nt,Aie),e(Aie,bTo),e(nt,vTo),e(nt,ki),e(ki,FTo),e(ki,yie),e(yie,TTo),e(ki,MTo),e(ki,kq),e(kq,ETo),e(ki,CTo),e(nt,wTo),M(nu,nt,null),e(xo,ATo),e(xo,Ye),M(cy,Ye,null),e(Ye,yTo),e(Ye,Lie),e(Lie,LTo),e(Ye,xTo),e(Ye,$a),e($a,$To),e($a,xie),e(xie,kTo),e($a,STo),e($a,$ie),e($ie,RTo),e($a,PTo),e($a,kie),e(kie,BTo),e($a,ITo),e(Ye,NTo),e(Ye,G),e(G,su),e(su,Sie),e(Sie,qTo),e(su,jTo),e(su,Sq),e(Sq,DTo),e(su,GTo),e(G,OTo),e(G,lu),e(lu,Rie),e(Rie,VTo),e(lu,XTo),e(lu,Rq),e(Rq,zTo),e(lu,WTo),e(G,QTo),e(G,iu),e(iu,Pie),e(Pie,HTo),e(iu,UTo),e(iu,Pq),e(Pq,JTo),e(iu,YTo),e(G,KTo),e(G,du),e(du,Bie),e(Bie,ZTo),e(du,eMo),e(du,Bq),e(Bq,oMo),e(du,rMo),e(G,tMo),e(G,cu),e(cu,Iie),e(Iie,aMo),e(cu,nMo),e(cu,Iq),e(Iq,sMo),e(cu,lMo),e(G,iMo),e(G,fu),e(fu,Nie),e(Nie,dMo),e(fu,cMo),e(fu,Nq),e(Nq,fMo),e(fu,mMo),e(G,gMo),e(G,mu),e(mu,qie),e(qie,hMo),e(mu,pMo),e(mu,qq),e(qq,_Mo),e(mu,uMo),e(G,bMo),e(G,gu),e(gu,jie),e(jie,vMo),e(gu,FMo),e(gu,jq),e(jq,TMo),e(gu,MMo),e(G,EMo),e(G,hu),e(hu,Die),e(Die,CMo),e(hu,wMo),e(hu,Dq),e(Dq,AMo),e(hu,yMo),e(G,LMo),e(G,pu),e(pu,Gie),e(Gie,xMo),e(pu,$Mo),e(pu,Gq),e(Gq,kMo),e(pu,SMo),e(G,RMo),e(G,_u),e(_u,Oie),e(Oie,PMo),e(_u,BMo),e(_u,Oq),e(Oq,IMo),e(_u,NMo),e(G,qMo),e(G,uu),e(uu,Vie),e(Vie,jMo),e(uu,DMo),e(uu,Vq),e(Vq,GMo),e(uu,OMo),e(G,VMo),e(G,bu),e(bu,Xie),e(Xie,XMo),e(bu,zMo),e(bu,Xq),e(Xq,WMo),e(bu,QMo),e(G,HMo),e(G,vu),e(vu,zie),e(zie,UMo),e(vu,JMo),e(vu,zq),e(zq,YMo),e(vu,KMo),e(G,ZMo),e(G,Fu),e(Fu,Wie),e(Wie,eEo),e(Fu,oEo),e(Fu,Wq),e(Wq,rEo),e(Fu,tEo),e(G,aEo),e(G,Tu),e(Tu,Qie),e(Qie,nEo),e(Tu,sEo),e(Tu,Qq),e(Qq,lEo),e(Tu,iEo),e(G,dEo),e(G,Mu),e(Mu,Hie),e(Hie,cEo),e(Mu,fEo),e(Mu,Hq),e(Hq,mEo),e(Mu,gEo),e(G,hEo),e(G,Eu),e(Eu,Uie),e(Uie,pEo),e(Eu,_Eo),e(Eu,Uq),e(Uq,uEo),e(Eu,bEo),e(G,vEo),e(G,Cu),e(Cu,Jie),e(Jie,FEo),e(Cu,TEo),e(Cu,Jq),e(Jq,MEo),e(Cu,EEo),e(G,CEo),e(G,wu),e(wu,Yie),e(Yie,wEo),e(wu,AEo),e(wu,Yq),e(Yq,yEo),e(wu,LEo),e(G,xEo),e(G,Au),e(Au,Kie),e(Kie,$Eo),e(Au,kEo),e(Au,Kq),e(Kq,SEo),e(Au,REo),e(G,PEo),e(G,yu),e(yu,Zie),e(Zie,BEo),e(yu,IEo),e(yu,Zq),e(Zq,NEo),e(yu,qEo),e(G,jEo),e(G,Lu),e(Lu,ede),e(ede,DEo),e(Lu,GEo),e(Lu,ej),e(ej,OEo),e(Lu,VEo),e(G,XEo),e(G,xu),e(xu,ode),e(ode,zEo),e(xu,WEo),e(xu,oj),e(oj,QEo),e(xu,HEo),e(G,UEo),e(G,$u),e($u,rde),e(rde,JEo),e($u,YEo),e($u,rj),e(rj,KEo),e($u,ZEo),e(G,eCo),e(G,ku),e(ku,tde),e(tde,oCo),e(ku,rCo),e(ku,tj),e(tj,tCo),e(ku,aCo),e(G,nCo),e(G,Su),e(Su,ade),e(ade,sCo),e(Su,lCo),e(Su,aj),e(aj,iCo),e(Su,dCo),e(G,cCo),e(G,Ru),e(Ru,nde),e(nde,fCo),e(Ru,mCo),e(Ru,nj),e(nj,gCo),e(Ru,hCo),e(G,pCo),e(G,Pu),e(Pu,sde),e(sde,_Co),e(Pu,uCo),e(Pu,sj),e(sj,bCo),e(Pu,vCo),e(G,FCo),e(G,Bu),e(Bu,lde),e(lde,TCo),e(Bu,MCo),e(Bu,lj),e(lj,ECo),e(Bu,CCo),e(G,wCo),e(G,Iu),e(Iu,ide),e(ide,ACo),e(Iu,yCo),e(Iu,ij),e(ij,LCo),e(Iu,xCo),e(G,$Co),e(G,Nu),e(Nu,dde),e(dde,kCo),e(Nu,SCo),e(Nu,dj),e(dj,RCo),e(Nu,PCo),e(G,BCo),e(G,qu),e(qu,cde),e(cde,ICo),e(qu,NCo),e(qu,cj),e(cj,qCo),e(qu,jCo),e(G,DCo),e(G,ju),e(ju,fde),e(fde,GCo),e(ju,OCo),e(ju,fj),e(fj,VCo),e(ju,XCo),e(G,zCo),e(G,Du),e(Du,mde),e(mde,WCo),e(Du,QCo),e(Du,mj),e(mj,HCo),e(Du,UCo),e(G,JCo),e(G,Gu),e(Gu,gde),e(gde,YCo),e(Gu,KCo),e(Gu,gj),e(gj,ZCo),e(Gu,e5o),e(G,o5o),e(G,Ou),e(Ou,hde),e(hde,r5o),e(Ou,t5o),e(Ou,hj),e(hj,a5o),e(Ou,n5o),e(G,s5o),e(G,Vu),e(Vu,pde),e(pde,l5o),e(Vu,i5o),e(Vu,pj),e(pj,d5o),e(Vu,c5o),e(G,f5o),e(G,Xu),e(Xu,_de),e(_de,m5o),e(Xu,g5o),e(Xu,_j),e(_j,h5o),e(Xu,p5o),e(G,_5o),e(G,zu),e(zu,ude),e(ude,u5o),e(zu,b5o),e(zu,uj),e(uj,v5o),e(zu,F5o),e(G,T5o),e(G,Wu),e(Wu,bde),e(bde,M5o),e(Wu,E5o),e(Wu,bj),e(bj,C5o),e(Wu,w5o),e(G,A5o),e(G,Qu),e(Qu,vde),e(vde,y5o),e(Qu,L5o),e(Qu,vj),e(vj,x5o),e(Qu,$5o),e(Ye,k5o),e(Ye,Hu),e(Hu,S5o),e(Hu,Fde),e(Fde,R5o),e(Hu,P5o),e(Hu,Tde),e(Tde,B5o),e(Ye,I5o),M(Uu,Ye,null),b(f,Eqe,u),b(f,Si,u),e(Si,Ju),e(Ju,Mde),M(fy,Mde,null),e(Si,N5o),e(Si,Ede),e(Ede,q5o),b(f,Cqe,u),b(f,$o,u),M(my,$o,null),e($o,j5o),e($o,Ri),e(Ri,D5o),e(Ri,Fj),e(Fj,G5o),e(Ri,O5o),e(Ri,Tj),e(Tj,V5o),e(Ri,X5o),e($o,z5o),e($o,gy),e(gy,W5o),e(gy,Cde),e(Cde,Q5o),e(gy,H5o),e($o,U5o),e($o,st),M(hy,st,null),e(st,J5o),e(st,wde),e(wde,Y5o),e(st,K5o),e(st,Pi),e(Pi,Z5o),e(Pi,Ade),e(Ade,e3o),e(Pi,o3o),e(Pi,Mj),e(Mj,r3o),e(Pi,t3o),e(st,a3o),M(Yu,st,null),e($o,n3o),e($o,Ke),M(py,Ke,null),e(Ke,s3o),e(Ke,yde),e(yde,l3o),e(Ke,i3o),e(Ke,ka),e(ka,d3o),e(ka,Lde),e(Lde,c3o),e(ka,f3o),e(ka,xde),e(xde,m3o),e(ka,g3o),e(ka,$de),e($de,h3o),e(ka,p3o),e(Ke,_3o),e(Ke,z),e(z,Ku),e(Ku,kde),e(kde,u3o),e(Ku,b3o),e(Ku,Ej),e(Ej,v3o),e(Ku,F3o),e(z,T3o),e(z,Zu),e(Zu,Sde),e(Sde,M3o),e(Zu,E3o),e(Zu,Cj),e(Cj,C3o),e(Zu,w3o),e(z,A3o),e(z,e2),e(e2,Rde),e(Rde,y3o),e(e2,L3o),e(e2,wj),e(wj,x3o),e(e2,$3o),e(z,k3o),e(z,o2),e(o2,Pde),e(Pde,S3o),e(o2,R3o),e(o2,Aj),e(Aj,P3o),e(o2,B3o),e(z,I3o),e(z,r2),e(r2,Bde),e(Bde,N3o),e(r2,q3o),e(r2,yj),e(yj,j3o),e(r2,D3o),e(z,G3o),e(z,t2),e(t2,Ide),e(Ide,O3o),e(t2,V3o),e(t2,Lj),e(Lj,X3o),e(t2,z3o),e(z,W3o),e(z,a2),e(a2,Nde),e(Nde,Q3o),e(a2,H3o),e(a2,xj),e(xj,U3o),e(a2,J3o),e(z,Y3o),e(z,n2),e(n2,qde),e(qde,K3o),e(n2,Z3o),e(n2,$j),e($j,ewo),e(n2,owo),e(z,rwo),e(z,s2),e(s2,jde),e(jde,two),e(s2,awo),e(s2,kj),e(kj,nwo),e(s2,swo),e(z,lwo),e(z,l2),e(l2,Dde),e(Dde,iwo),e(l2,dwo),e(l2,Sj),e(Sj,cwo),e(l2,fwo),e(z,mwo),e(z,i2),e(i2,Gde),e(Gde,gwo),e(i2,hwo),e(i2,Rj),e(Rj,pwo),e(i2,_wo),e(z,uwo),e(z,d2),e(d2,Ode),e(Ode,bwo),e(d2,vwo),e(d2,Pj),e(Pj,Fwo),e(d2,Two),e(z,Mwo),e(z,c2),e(c2,Vde),e(Vde,Ewo),e(c2,Cwo),e(c2,Bj),e(Bj,wwo),e(c2,Awo),e(z,ywo),e(z,f2),e(f2,Xde),e(Xde,Lwo),e(f2,xwo),e(f2,Ij),e(Ij,$wo),e(f2,kwo),e(z,Swo),e(z,m2),e(m2,zde),e(zde,Rwo),e(m2,Pwo),e(m2,Nj),e(Nj,Bwo),e(m2,Iwo),e(z,Nwo),e(z,g2),e(g2,Wde),e(Wde,qwo),e(g2,jwo),e(g2,qj),e(qj,Dwo),e(g2,Gwo),e(z,Owo),e(z,h2),e(h2,Qde),e(Qde,Vwo),e(h2,Xwo),e(h2,jj),e(jj,zwo),e(h2,Wwo),e(z,Qwo),e(z,p2),e(p2,Hde),e(Hde,Hwo),e(p2,Uwo),e(p2,Dj),e(Dj,Jwo),e(p2,Ywo),e(z,Kwo),e(z,_2),e(_2,Ude),e(Ude,Zwo),e(_2,e0o),e(_2,Gj),e(Gj,o0o),e(_2,r0o),e(z,t0o),e(z,u2),e(u2,Jde),e(Jde,a0o),e(u2,n0o),e(u2,Oj),e(Oj,s0o),e(u2,l0o),e(z,i0o),e(z,b2),e(b2,Yde),e(Yde,d0o),e(b2,c0o),e(b2,Vj),e(Vj,f0o),e(b2,m0o),e(z,g0o),e(z,v2),e(v2,Kde),e(Kde,h0o),e(v2,p0o),e(v2,Xj),e(Xj,_0o),e(v2,u0o),e(z,b0o),e(z,F2),e(F2,Zde),e(Zde,v0o),e(F2,F0o),e(F2,zj),e(zj,T0o),e(F2,M0o),e(z,E0o),e(z,T2),e(T2,ece),e(ece,C0o),e(T2,w0o),e(T2,Wj),e(Wj,A0o),e(T2,y0o),e(z,L0o),e(z,M2),e(M2,oce),e(oce,x0o),e(M2,$0o),e(M2,Qj),e(Qj,k0o),e(M2,S0o),e(z,R0o),e(z,E2),e(E2,rce),e(rce,P0o),e(E2,B0o),e(E2,Hj),e(Hj,I0o),e(E2,N0o),e(z,q0o),e(z,C2),e(C2,tce),e(tce,j0o),e(C2,D0o),e(C2,Uj),e(Uj,G0o),e(C2,O0o),e(z,V0o),e(z,w2),e(w2,ace),e(ace,X0o),e(w2,z0o),e(w2,Jj),e(Jj,W0o),e(w2,Q0o),e(z,H0o),e(z,A2),e(A2,nce),e(nce,U0o),e(A2,J0o),e(A2,Yj),e(Yj,Y0o),e(A2,K0o),e(z,Z0o),e(z,y2),e(y2,sce),e(sce,e6o),e(y2,o6o),e(y2,Kj),e(Kj,r6o),e(y2,t6o),e(z,a6o),e(z,L2),e(L2,lce),e(lce,n6o),e(L2,s6o),e(L2,Zj),e(Zj,l6o),e(L2,i6o),e(z,d6o),e(z,x2),e(x2,ice),e(ice,c6o),e(x2,f6o),e(x2,eD),e(eD,m6o),e(x2,g6o),e(z,h6o),e(z,$2),e($2,dce),e(dce,p6o),e($2,_6o),e($2,oD),e(oD,u6o),e($2,b6o),e(z,v6o),e(z,k2),e(k2,cce),e(cce,F6o),e(k2,T6o),e(k2,rD),e(rD,M6o),e(k2,E6o),e(z,C6o),e(z,S2),e(S2,fce),e(fce,w6o),e(S2,A6o),e(S2,tD),e(tD,y6o),e(S2,L6o),e(z,x6o),e(z,R2),e(R2,mce),e(mce,$6o),e(R2,k6o),e(R2,aD),e(aD,S6o),e(R2,R6o),e(z,P6o),e(z,P2),e(P2,gce),e(gce,B6o),e(P2,I6o),e(P2,nD),e(nD,N6o),e(P2,q6o),e(Ke,j6o),e(Ke,B2),e(B2,D6o),e(B2,hce),e(hce,G6o),e(B2,O6o),e(B2,pce),e(pce,V6o),e(Ke,X6o),M(I2,Ke,null),b(f,wqe,u),b(f,Bi,u),e(Bi,N2),e(N2,_ce),M(_y,_ce,null),e(Bi,z6o),e(Bi,uce),e(uce,W6o),b(f,Aqe,u),b(f,ko,u),M(uy,ko,null),e(ko,Q6o),e(ko,Ii),e(Ii,H6o),e(Ii,sD),e(sD,U6o),e(Ii,J6o),e(Ii,lD),e(lD,Y6o),e(Ii,K6o),e(ko,Z6o),e(ko,by),e(by,eAo),e(by,bce),e(bce,oAo),e(by,rAo),e(ko,tAo),e(ko,lt),M(vy,lt,null),e(lt,aAo),e(lt,vce),e(vce,nAo),e(lt,sAo),e(lt,Ni),e(Ni,lAo),e(Ni,Fce),e(Fce,iAo),e(Ni,dAo),e(Ni,iD),e(iD,cAo),e(Ni,fAo),e(lt,mAo),M(q2,lt,null),e(ko,gAo),e(ko,Ze),M(Fy,Ze,null),e(Ze,hAo),e(Ze,Tce),e(Tce,pAo),e(Ze,_Ao),e(Ze,Sa),e(Sa,uAo),e(Sa,Mce),e(Mce,bAo),e(Sa,vAo),e(Sa,Ece),e(Ece,FAo),e(Sa,TAo),e(Sa,Cce),e(Cce,MAo),e(Sa,EAo),e(Ze,CAo),e(Ze,Q),e(Q,j2),e(j2,wce),e(wce,wAo),e(j2,AAo),e(j2,dD),e(dD,yAo),e(j2,LAo),e(Q,xAo),e(Q,D2),e(D2,Ace),e(Ace,$Ao),e(D2,kAo),e(D2,cD),e(cD,SAo),e(D2,RAo),e(Q,PAo),e(Q,G2),e(G2,yce),e(yce,BAo),e(G2,IAo),e(G2,fD),e(fD,NAo),e(G2,qAo),e(Q,jAo),e(Q,O2),e(O2,Lce),e(Lce,DAo),e(O2,GAo),e(O2,mD),e(mD,OAo),e(O2,VAo),e(Q,XAo),e(Q,V2),e(V2,xce),e(xce,zAo),e(V2,WAo),e(V2,gD),e(gD,QAo),e(V2,HAo),e(Q,UAo),e(Q,X2),e(X2,$ce),e($ce,JAo),e(X2,YAo),e(X2,hD),e(hD,KAo),e(X2,ZAo),e(Q,eyo),e(Q,z2),e(z2,kce),e(kce,oyo),e(z2,ryo),e(z2,pD),e(pD,tyo),e(z2,ayo),e(Q,nyo),e(Q,W2),e(W2,Sce),e(Sce,syo),e(W2,lyo),e(W2,_D),e(_D,iyo),e(W2,dyo),e(Q,cyo),e(Q,Q2),e(Q2,Rce),e(Rce,fyo),e(Q2,myo),e(Q2,uD),e(uD,gyo),e(Q2,hyo),e(Q,pyo),e(Q,H2),e(H2,Pce),e(Pce,_yo),e(H2,uyo),e(H2,bD),e(bD,byo),e(H2,vyo),e(Q,Fyo),e(Q,U2),e(U2,Bce),e(Bce,Tyo),e(U2,Myo),e(U2,vD),e(vD,Eyo),e(U2,Cyo),e(Q,wyo),e(Q,J2),e(J2,Ice),e(Ice,Ayo),e(J2,yyo),e(J2,FD),e(FD,Lyo),e(J2,xyo),e(Q,$yo),e(Q,Y2),e(Y2,Nce),e(Nce,kyo),e(Y2,Syo),e(Y2,TD),e(TD,Ryo),e(Y2,Pyo),e(Q,Byo),e(Q,K2),e(K2,qce),e(qce,Iyo),e(K2,Nyo),e(K2,MD),e(MD,qyo),e(K2,jyo),e(Q,Dyo),e(Q,Z2),e(Z2,jce),e(jce,Gyo),e(Z2,Oyo),e(Z2,ED),e(ED,Vyo),e(Z2,Xyo),e(Q,zyo),e(Q,e1),e(e1,Dce),e(Dce,Wyo),e(e1,Qyo),e(e1,CD),e(CD,Hyo),e(e1,Uyo),e(Q,Jyo),e(Q,o1),e(o1,Gce),e(Gce,Yyo),e(o1,Kyo),e(o1,wD),e(wD,Zyo),e(o1,eLo),e(Q,oLo),e(Q,r1),e(r1,Oce),e(Oce,rLo),e(r1,tLo),e(r1,AD),e(AD,aLo),e(r1,nLo),e(Q,sLo),e(Q,t1),e(t1,Vce),e(Vce,lLo),e(t1,iLo),e(t1,yD),e(yD,dLo),e(t1,cLo),e(Q,fLo),e(Q,a1),e(a1,Xce),e(Xce,mLo),e(a1,gLo),e(a1,LD),e(LD,hLo),e(a1,pLo),e(Q,_Lo),e(Q,n1),e(n1,zce),e(zce,uLo),e(n1,bLo),e(n1,xD),e(xD,vLo),e(n1,FLo),e(Q,TLo),e(Q,s1),e(s1,Wce),e(Wce,MLo),e(s1,ELo),e(s1,$D),e($D,CLo),e(s1,wLo),e(Q,ALo),e(Q,l1),e(l1,Qce),e(Qce,yLo),e(l1,LLo),e(l1,kD),e(kD,xLo),e(l1,$Lo),e(Q,kLo),e(Q,i1),e(i1,Hce),e(Hce,SLo),e(i1,RLo),e(i1,SD),e(SD,PLo),e(i1,BLo),e(Q,ILo),e(Q,d1),e(d1,Uce),e(Uce,NLo),e(d1,qLo),e(d1,RD),e(RD,jLo),e(d1,DLo),e(Q,GLo),e(Q,c1),e(c1,Jce),e(Jce,OLo),e(c1,VLo),e(c1,PD),e(PD,XLo),e(c1,zLo),e(Q,WLo),e(Q,f1),e(f1,Yce),e(Yce,QLo),e(f1,HLo),e(f1,BD),e(BD,ULo),e(f1,JLo),e(Q,YLo),e(Q,m1),e(m1,Kce),e(Kce,KLo),e(m1,ZLo),e(m1,ID),e(ID,e8o),e(m1,o8o),e(Q,r8o),e(Q,g1),e(g1,Zce),e(Zce,t8o),e(g1,a8o),e(g1,ND),e(ND,n8o),e(g1,s8o),e(Q,l8o),e(Q,h1),e(h1,efe),e(efe,i8o),e(h1,d8o),e(h1,qD),e(qD,c8o),e(h1,f8o),e(Q,m8o),e(Q,p1),e(p1,ofe),e(ofe,g8o),e(p1,h8o),e(p1,rfe),e(rfe,p8o),e(p1,_8o),e(Q,u8o),e(Q,_1),e(_1,tfe),e(tfe,b8o),e(_1,v8o),e(_1,jD),e(jD,F8o),e(_1,T8o),e(Q,M8o),e(Q,u1),e(u1,afe),e(afe,E8o),e(u1,C8o),e(u1,DD),e(DD,w8o),e(u1,A8o),e(Q,y8o),e(Q,b1),e(b1,nfe),e(nfe,L8o),e(b1,x8o),e(b1,GD),e(GD,$8o),e(b1,k8o),e(Q,S8o),e(Q,v1),e(v1,sfe),e(sfe,R8o),e(v1,P8o),e(v1,OD),e(OD,B8o),e(v1,I8o),e(Ze,N8o),e(Ze,F1),e(F1,q8o),e(F1,lfe),e(lfe,j8o),e(F1,D8o),e(F1,ife),e(ife,G8o),e(Ze,O8o),M(T1,Ze,null),b(f,yqe,u),b(f,qi,u),e(qi,M1),e(M1,dfe),M(Ty,dfe,null),e(qi,V8o),e(qi,cfe),e(cfe,X8o),b(f,Lqe,u),b(f,So,u),M(My,So,null),e(So,z8o),e(So,ji),e(ji,W8o),e(ji,VD),e(VD,Q8o),e(ji,H8o),e(ji,XD),e(XD,U8o),e(ji,J8o),e(So,Y8o),e(So,Ey),e(Ey,K8o),e(Ey,ffe),e(ffe,Z8o),e(Ey,e9o),e(So,o9o),e(So,it),M(Cy,it,null),e(it,r9o),e(it,mfe),e(mfe,t9o),e(it,a9o),e(it,Di),e(Di,n9o),e(Di,gfe),e(gfe,s9o),e(Di,l9o),e(Di,zD),e(zD,i9o),e(Di,d9o),e(it,c9o),M(E1,it,null),e(So,f9o),e(So,eo),M(wy,eo,null),e(eo,m9o),e(eo,hfe),e(hfe,g9o),e(eo,h9o),e(eo,Ra),e(Ra,p9o),e(Ra,pfe),e(pfe,_9o),e(Ra,u9o),e(Ra,_fe),e(_fe,b9o),e(Ra,v9o),e(Ra,ufe),e(ufe,F9o),e(Ra,T9o),e(eo,M9o),e(eo,_e),e(_e,C1),e(C1,bfe),e(bfe,E9o),e(C1,C9o),e(C1,WD),e(WD,w9o),e(C1,A9o),e(_e,y9o),e(_e,w1),e(w1,vfe),e(vfe,L9o),e(w1,x9o),e(w1,QD),e(QD,$9o),e(w1,k9o),e(_e,S9o),e(_e,A1),e(A1,Ffe),e(Ffe,R9o),e(A1,P9o),e(A1,HD),e(HD,B9o),e(A1,I9o),e(_e,N9o),e(_e,y1),e(y1,Tfe),e(Tfe,q9o),e(y1,j9o),e(y1,UD),e(UD,D9o),e(y1,G9o),e(_e,O9o),e(_e,L1),e(L1,Mfe),e(Mfe,V9o),e(L1,X9o),e(L1,JD),e(JD,z9o),e(L1,W9o),e(_e,Q9o),e(_e,x1),e(x1,Efe),e(Efe,H9o),e(x1,U9o),e(x1,YD),e(YD,J9o),e(x1,Y9o),e(_e,K9o),e(_e,$1),e($1,Cfe),e(Cfe,Z9o),e($1,exo),e($1,KD),e(KD,oxo),e($1,rxo),e(_e,txo),e(_e,k1),e(k1,wfe),e(wfe,axo),e(k1,nxo),e(k1,ZD),e(ZD,sxo),e(k1,lxo),e(_e,ixo),e(_e,S1),e(S1,Afe),e(Afe,dxo),e(S1,cxo),e(S1,eG),e(eG,fxo),e(S1,mxo),e(_e,gxo),e(_e,R1),e(R1,yfe),e(yfe,hxo),e(R1,pxo),e(R1,oG),e(oG,_xo),e(R1,uxo),e(_e,bxo),e(_e,P1),e(P1,Lfe),e(Lfe,vxo),e(P1,Fxo),e(P1,rG),e(rG,Txo),e(P1,Mxo),e(_e,Exo),e(_e,B1),e(B1,xfe),e(xfe,Cxo),e(B1,wxo),e(B1,tG),e(tG,Axo),e(B1,yxo),e(_e,Lxo),e(_e,I1),e(I1,$fe),e($fe,xxo),e(I1,$xo),e(I1,aG),e(aG,kxo),e(I1,Sxo),e(_e,Rxo),e(_e,N1),e(N1,kfe),e(kfe,Pxo),e(N1,Bxo),e(N1,nG),e(nG,Ixo),e(N1,Nxo),e(_e,qxo),e(_e,q1),e(q1,Sfe),e(Sfe,jxo),e(q1,Dxo),e(q1,sG),e(sG,Gxo),e(q1,Oxo),e(_e,Vxo),e(_e,j1),e(j1,Rfe),e(Rfe,Xxo),e(j1,zxo),e(j1,lG),e(lG,Wxo),e(j1,Qxo),e(eo,Hxo),e(eo,D1),e(D1,Uxo),e(D1,Pfe),e(Pfe,Jxo),e(D1,Yxo),e(D1,Bfe),e(Bfe,Kxo),e(eo,Zxo),M(G1,eo,null),b(f,xqe,u),b(f,Gi,u),e(Gi,O1),e(O1,Ife),M(Ay,Ife,null),e(Gi,e$o),e(Gi,Nfe),e(Nfe,o$o),b(f,$qe,u),b(f,Ro,u),M(yy,Ro,null),e(Ro,r$o),e(Ro,Oi),e(Oi,t$o),e(Oi,iG),e(iG,a$o),e(Oi,n$o),e(Oi,dG),e(dG,s$o),e(Oi,l$o),e(Ro,i$o),e(Ro,Ly),e(Ly,d$o),e(Ly,qfe),e(qfe,c$o),e(Ly,f$o),e(Ro,m$o),e(Ro,dt),M(xy,dt,null),e(dt,g$o),e(dt,jfe),e(jfe,h$o),e(dt,p$o),e(dt,Vi),e(Vi,_$o),e(Vi,Dfe),e(Dfe,u$o),e(Vi,b$o),e(Vi,cG),e(cG,v$o),e(Vi,F$o),e(dt,T$o),M(V1,dt,null),e(Ro,M$o),e(Ro,oo),M($y,oo,null),e(oo,E$o),e(oo,Gfe),e(Gfe,C$o),e(oo,w$o),e(oo,Pa),e(Pa,A$o),e(Pa,Ofe),e(Ofe,y$o),e(Pa,L$o),e(Pa,Vfe),e(Vfe,x$o),e(Pa,$$o),e(Pa,Xfe),e(Xfe,k$o),e(Pa,S$o),e(oo,R$o),e(oo,N),e(N,X1),e(X1,zfe),e(zfe,P$o),e(X1,B$o),e(X1,fG),e(fG,I$o),e(X1,N$o),e(N,q$o),e(N,z1),e(z1,Wfe),e(Wfe,j$o),e(z1,D$o),e(z1,mG),e(mG,G$o),e(z1,O$o),e(N,V$o),e(N,W1),e(W1,Qfe),e(Qfe,X$o),e(W1,z$o),e(W1,gG),e(gG,W$o),e(W1,Q$o),e(N,H$o),e(N,Q1),e(Q1,Hfe),e(Hfe,U$o),e(Q1,J$o),e(Q1,hG),e(hG,Y$o),e(Q1,K$o),e(N,Z$o),e(N,H1),e(H1,Ufe),e(Ufe,eko),e(H1,oko),e(H1,pG),e(pG,rko),e(H1,tko),e(N,ako),e(N,U1),e(U1,Jfe),e(Jfe,nko),e(U1,sko),e(U1,_G),e(_G,lko),e(U1,iko),e(N,dko),e(N,J1),e(J1,Yfe),e(Yfe,cko),e(J1,fko),e(J1,uG),e(uG,mko),e(J1,gko),e(N,hko),e(N,Y1),e(Y1,Kfe),e(Kfe,pko),e(Y1,_ko),e(Y1,bG),e(bG,uko),e(Y1,bko),e(N,vko),e(N,K1),e(K1,Zfe),e(Zfe,Fko),e(K1,Tko),e(K1,vG),e(vG,Mko),e(K1,Eko),e(N,Cko),e(N,Z1),e(Z1,eme),e(eme,wko),e(Z1,Ako),e(Z1,FG),e(FG,yko),e(Z1,Lko),e(N,xko),e(N,e7),e(e7,ome),e(ome,$ko),e(e7,kko),e(e7,TG),e(TG,Sko),e(e7,Rko),e(N,Pko),e(N,o7),e(o7,rme),e(rme,Bko),e(o7,Iko),e(o7,MG),e(MG,Nko),e(o7,qko),e(N,jko),e(N,r7),e(r7,tme),e(tme,Dko),e(r7,Gko),e(r7,EG),e(EG,Oko),e(r7,Vko),e(N,Xko),e(N,t7),e(t7,ame),e(ame,zko),e(t7,Wko),e(t7,CG),e(CG,Qko),e(t7,Hko),e(N,Uko),e(N,a7),e(a7,nme),e(nme,Jko),e(a7,Yko),e(a7,wG),e(wG,Kko),e(a7,Zko),e(N,eSo),e(N,n7),e(n7,sme),e(sme,oSo),e(n7,rSo),e(n7,AG),e(AG,tSo),e(n7,aSo),e(N,nSo),e(N,s7),e(s7,lme),e(lme,sSo),e(s7,lSo),e(s7,yG),e(yG,iSo),e(s7,dSo),e(N,cSo),e(N,l7),e(l7,ime),e(ime,fSo),e(l7,mSo),e(l7,LG),e(LG,gSo),e(l7,hSo),e(N,pSo),e(N,i7),e(i7,dme),e(dme,_So),e(i7,uSo),e(i7,xG),e(xG,bSo),e(i7,vSo),e(N,FSo),e(N,d7),e(d7,cme),e(cme,TSo),e(d7,MSo),e(d7,$G),e($G,ESo),e(d7,CSo),e(N,wSo),e(N,c7),e(c7,fme),e(fme,ASo),e(c7,ySo),e(c7,kG),e(kG,LSo),e(c7,xSo),e(N,$So),e(N,f7),e(f7,mme),e(mme,kSo),e(f7,SSo),e(f7,SG),e(SG,RSo),e(f7,PSo),e(N,BSo),e(N,m7),e(m7,gme),e(gme,ISo),e(m7,NSo),e(m7,RG),e(RG,qSo),e(m7,jSo),e(N,DSo),e(N,g7),e(g7,hme),e(hme,GSo),e(g7,OSo),e(g7,PG),e(PG,VSo),e(g7,XSo),e(N,zSo),e(N,h7),e(h7,pme),e(pme,WSo),e(h7,QSo),e(h7,BG),e(BG,HSo),e(h7,USo),e(N,JSo),e(N,p7),e(p7,_me),e(_me,YSo),e(p7,KSo),e(p7,IG),e(IG,ZSo),e(p7,eRo),e(N,oRo),e(N,_7),e(_7,ume),e(ume,rRo),e(_7,tRo),e(_7,NG),e(NG,aRo),e(_7,nRo),e(N,sRo),e(N,u7),e(u7,bme),e(bme,lRo),e(u7,iRo),e(u7,qG),e(qG,dRo),e(u7,cRo),e(N,fRo),e(N,b7),e(b7,vme),e(vme,mRo),e(b7,gRo),e(b7,jG),e(jG,hRo),e(b7,pRo),e(N,_Ro),e(N,v7),e(v7,Fme),e(Fme,uRo),e(v7,bRo),e(v7,DG),e(DG,vRo),e(v7,FRo),e(N,TRo),e(N,F7),e(F7,Tme),e(Tme,MRo),e(F7,ERo),e(F7,GG),e(GG,CRo),e(F7,wRo),e(N,ARo),e(N,T7),e(T7,Mme),e(Mme,yRo),e(T7,LRo),e(T7,OG),e(OG,xRo),e(T7,$Ro),e(N,kRo),e(N,M7),e(M7,Eme),e(Eme,SRo),e(M7,RRo),e(M7,VG),e(VG,PRo),e(M7,BRo),e(N,IRo),e(N,E7),e(E7,Cme),e(Cme,NRo),e(E7,qRo),e(E7,XG),e(XG,jRo),e(E7,DRo),e(N,GRo),e(N,C7),e(C7,wme),e(wme,ORo),e(C7,VRo),e(C7,zG),e(zG,XRo),e(C7,zRo),e(N,WRo),e(N,w7),e(w7,Ame),e(Ame,QRo),e(w7,HRo),e(w7,WG),e(WG,URo),e(w7,JRo),e(N,YRo),e(N,A7),e(A7,yme),e(yme,KRo),e(A7,ZRo),e(A7,QG),e(QG,ePo),e(A7,oPo),e(N,rPo),e(N,y7),e(y7,Lme),e(Lme,tPo),e(y7,aPo),e(y7,HG),e(HG,nPo),e(y7,sPo),e(N,lPo),e(N,L7),e(L7,xme),e(xme,iPo),e(L7,dPo),e(L7,UG),e(UG,cPo),e(L7,fPo),e(N,mPo),e(N,x7),e(x7,$me),e($me,gPo),e(x7,hPo),e(x7,JG),e(JG,pPo),e(x7,_Po),e(N,uPo),e(N,$7),e($7,kme),e(kme,bPo),e($7,vPo),e($7,YG),e(YG,FPo),e($7,TPo),e(N,MPo),e(N,k7),e(k7,Sme),e(Sme,EPo),e(k7,CPo),e(k7,KG),e(KG,wPo),e(k7,APo),e(N,yPo),e(N,S7),e(S7,Rme),e(Rme,LPo),e(S7,xPo),e(S7,ZG),e(ZG,$Po),e(S7,kPo),e(N,SPo),e(N,R7),e(R7,Pme),e(Pme,RPo),e(R7,PPo),e(R7,eO),e(eO,BPo),e(R7,IPo),e(N,NPo),e(N,P7),e(P7,Bme),e(Bme,qPo),e(P7,jPo),e(P7,oO),e(oO,DPo),e(P7,GPo),e(N,OPo),e(N,B7),e(B7,Ime),e(Ime,VPo),e(B7,XPo),e(B7,rO),e(rO,zPo),e(B7,WPo),e(N,QPo),e(N,I7),e(I7,Nme),e(Nme,HPo),e(I7,UPo),e(I7,tO),e(tO,JPo),e(I7,YPo),e(oo,KPo),e(oo,N7),e(N7,ZPo),e(N7,qme),e(qme,eBo),e(N7,oBo),e(N7,jme),e(jme,rBo),e(oo,tBo),M(q7,oo,null),b(f,kqe,u),b(f,Xi,u),e(Xi,j7),e(j7,Dme),M(ky,Dme,null),e(Xi,aBo),e(Xi,Gme),e(Gme,nBo),b(f,Sqe,u),b(f,Po,u),M(Sy,Po,null),e(Po,sBo),e(Po,zi),e(zi,lBo),e(zi,aO),e(aO,iBo),e(zi,dBo),e(zi,nO),e(nO,cBo),e(zi,fBo),e(Po,mBo),e(Po,Ry),e(Ry,gBo),e(Ry,Ome),e(Ome,hBo),e(Ry,pBo),e(Po,_Bo),e(Po,ct),M(Py,ct,null),e(ct,uBo),e(ct,Vme),e(Vme,bBo),e(ct,vBo),e(ct,Wi),e(Wi,FBo),e(Wi,Xme),e(Xme,TBo),e(Wi,MBo),e(Wi,sO),e(sO,EBo),e(Wi,CBo),e(ct,wBo),M(D7,ct,null),e(Po,ABo),e(Po,ro),M(By,ro,null),e(ro,yBo),e(ro,zme),e(zme,LBo),e(ro,xBo),e(ro,Ba),e(Ba,$Bo),e(Ba,Wme),e(Wme,kBo),e(Ba,SBo),e(Ba,Qme),e(Qme,RBo),e(Ba,PBo),e(Ba,Hme),e(Hme,BBo),e(Ba,IBo),e(ro,NBo),e(ro,K),e(K,G7),e(G7,Ume),e(Ume,qBo),e(G7,jBo),e(G7,lO),e(lO,DBo),e(G7,GBo),e(K,OBo),e(K,O7),e(O7,Jme),e(Jme,VBo),e(O7,XBo),e(O7,iO),e(iO,zBo),e(O7,WBo),e(K,QBo),e(K,V7),e(V7,Yme),e(Yme,HBo),e(V7,UBo),e(V7,dO),e(dO,JBo),e(V7,YBo),e(K,KBo),e(K,X7),e(X7,Kme),e(Kme,ZBo),e(X7,eIo),e(X7,cO),e(cO,oIo),e(X7,rIo),e(K,tIo),e(K,z7),e(z7,Zme),e(Zme,aIo),e(z7,nIo),e(z7,fO),e(fO,sIo),e(z7,lIo),e(K,iIo),e(K,W7),e(W7,ege),e(ege,dIo),e(W7,cIo),e(W7,mO),e(mO,fIo),e(W7,mIo),e(K,gIo),e(K,Q7),e(Q7,oge),e(oge,hIo),e(Q7,pIo),e(Q7,gO),e(gO,_Io),e(Q7,uIo),e(K,bIo),e(K,H7),e(H7,rge),e(rge,vIo),e(H7,FIo),e(H7,hO),e(hO,TIo),e(H7,MIo),e(K,EIo),e(K,U7),e(U7,tge),e(tge,CIo),e(U7,wIo),e(U7,pO),e(pO,AIo),e(U7,yIo),e(K,LIo),e(K,J7),e(J7,age),e(age,xIo),e(J7,$Io),e(J7,_O),e(_O,kIo),e(J7,SIo),e(K,RIo),e(K,Y7),e(Y7,nge),e(nge,PIo),e(Y7,BIo),e(Y7,uO),e(uO,IIo),e(Y7,NIo),e(K,qIo),e(K,K7),e(K7,sge),e(sge,jIo),e(K7,DIo),e(K7,bO),e(bO,GIo),e(K7,OIo),e(K,VIo),e(K,Z7),e(Z7,lge),e(lge,XIo),e(Z7,zIo),e(Z7,vO),e(vO,WIo),e(Z7,QIo),e(K,HIo),e(K,eb),e(eb,ige),e(ige,UIo),e(eb,JIo),e(eb,FO),e(FO,YIo),e(eb,KIo),e(K,ZIo),e(K,ob),e(ob,dge),e(dge,eNo),e(ob,oNo),e(ob,TO),e(TO,rNo),e(ob,tNo),e(K,aNo),e(K,rb),e(rb,cge),e(cge,nNo),e(rb,sNo),e(rb,MO),e(MO,lNo),e(rb,iNo),e(K,dNo),e(K,tb),e(tb,fge),e(fge,cNo),e(tb,fNo),e(tb,EO),e(EO,mNo),e(tb,gNo),e(K,hNo),e(K,ab),e(ab,mge),e(mge,pNo),e(ab,_No),e(ab,CO),e(CO,uNo),e(ab,bNo),e(K,vNo),e(K,nb),e(nb,gge),e(gge,FNo),e(nb,TNo),e(nb,wO),e(wO,MNo),e(nb,ENo),e(K,CNo),e(K,sb),e(sb,hge),e(hge,wNo),e(sb,ANo),e(sb,AO),e(AO,yNo),e(sb,LNo),e(K,xNo),e(K,lb),e(lb,pge),e(pge,$No),e(lb,kNo),e(lb,yO),e(yO,SNo),e(lb,RNo),e(K,PNo),e(K,ib),e(ib,_ge),e(_ge,BNo),e(ib,INo),e(ib,LO),e(LO,NNo),e(ib,qNo),e(K,jNo),e(K,db),e(db,uge),e(uge,DNo),e(db,GNo),e(db,xO),e(xO,ONo),e(db,VNo),e(K,XNo),e(K,cb),e(cb,bge),e(bge,zNo),e(cb,WNo),e(cb,$O),e($O,QNo),e(cb,HNo),e(K,UNo),e(K,fb),e(fb,vge),e(vge,JNo),e(fb,YNo),e(fb,kO),e(kO,KNo),e(fb,ZNo),e(K,eqo),e(K,mb),e(mb,Fge),e(Fge,oqo),e(mb,rqo),e(mb,SO),e(SO,tqo),e(mb,aqo),e(K,nqo),e(K,gb),e(gb,Tge),e(Tge,sqo),e(gb,lqo),e(gb,RO),e(RO,iqo),e(gb,dqo),e(K,cqo),e(K,hb),e(hb,Mge),e(Mge,fqo),e(hb,mqo),e(hb,PO),e(PO,gqo),e(hb,hqo),e(K,pqo),e(K,pb),e(pb,Ege),e(Ege,_qo),e(pb,uqo),e(pb,BO),e(BO,bqo),e(pb,vqo),e(ro,Fqo),e(ro,_b),e(_b,Tqo),e(_b,Cge),e(Cge,Mqo),e(_b,Eqo),e(_b,wge),e(wge,Cqo),e(ro,wqo),M(ub,ro,null),b(f,Rqe,u),b(f,Qi,u),e(Qi,bb),e(bb,Age),M(Iy,Age,null),e(Qi,Aqo),e(Qi,yge),e(yge,yqo),b(f,Pqe,u),b(f,Bo,u),M(Ny,Bo,null),e(Bo,Lqo),e(Bo,Hi),e(Hi,xqo),e(Hi,IO),e(IO,$qo),e(Hi,kqo),e(Hi,NO),e(NO,Sqo),e(Hi,Rqo),e(Bo,Pqo),e(Bo,qy),e(qy,Bqo),e(qy,Lge),e(Lge,Iqo),e(qy,Nqo),e(Bo,qqo),e(Bo,ft),M(jy,ft,null),e(ft,jqo),e(ft,xge),e(xge,Dqo),e(ft,Gqo),e(ft,Ui),e(Ui,Oqo),e(Ui,$ge),e($ge,Vqo),e(Ui,Xqo),e(Ui,qO),e(qO,zqo),e(Ui,Wqo),e(ft,Qqo),M(vb,ft,null),e(Bo,Hqo),e(Bo,to),M(Dy,to,null),e(to,Uqo),e(to,kge),e(kge,Jqo),e(to,Yqo),e(to,Ia),e(Ia,Kqo),e(Ia,Sge),e(Sge,Zqo),e(Ia,ejo),e(Ia,Rge),e(Rge,ojo),e(Ia,rjo),e(Ia,Pge),e(Pge,tjo),e(Ia,ajo),e(to,njo),e(to,Yr),e(Yr,Fb),e(Fb,Bge),e(Bge,sjo),e(Fb,ljo),e(Fb,jO),e(jO,ijo),e(Fb,djo),e(Yr,cjo),e(Yr,Tb),e(Tb,Ige),e(Ige,fjo),e(Tb,mjo),e(Tb,DO),e(DO,gjo),e(Tb,hjo),e(Yr,pjo),e(Yr,Mb),e(Mb,Nge),e(Nge,_jo),e(Mb,ujo),e(Mb,GO),e(GO,bjo),e(Mb,vjo),e(Yr,Fjo),e(Yr,Eb),e(Eb,qge),e(qge,Tjo),e(Eb,Mjo),e(Eb,OO),e(OO,Ejo),e(Eb,Cjo),e(Yr,wjo),e(Yr,Cb),e(Cb,jge),e(jge,Ajo),e(Cb,yjo),e(Cb,VO),e(VO,Ljo),e(Cb,xjo),e(to,$jo),e(to,wb),e(wb,kjo),e(wb,Dge),e(Dge,Sjo),e(wb,Rjo),e(wb,Gge),e(Gge,Pjo),e(to,Bjo),M(Ab,to,null),b(f,Bqe,u),b(f,Ji,u),e(Ji,yb),e(yb,Oge),M(Gy,Oge,null),e(Ji,Ijo),e(Ji,Vge),e(Vge,Njo),b(f,Iqe,u),b(f,Io,u),M(Oy,Io,null),e(Io,qjo),e(Io,Yi),e(Yi,jjo),e(Yi,XO),e(XO,Djo),e(Yi,Gjo),e(Yi,zO),e(zO,Ojo),e(Yi,Vjo),e(Io,Xjo),e(Io,Vy),e(Vy,zjo),e(Vy,Xge),e(Xge,Wjo),e(Vy,Qjo),e(Io,Hjo),e(Io,mt),M(Xy,mt,null),e(mt,Ujo),e(mt,zge),e(zge,Jjo),e(mt,Yjo),e(mt,Ki),e(Ki,Kjo),e(Ki,Wge),e(Wge,Zjo),e(Ki,eDo),e(Ki,WO),e(WO,oDo),e(Ki,rDo),e(mt,tDo),M(Lb,mt,null),e(Io,aDo),e(Io,ao),M(zy,ao,null),e(ao,nDo),e(ao,Qge),e(Qge,sDo),e(ao,lDo),e(ao,Na),e(Na,iDo),e(Na,Hge),e(Hge,dDo),e(Na,cDo),e(Na,Uge),e(Uge,fDo),e(Na,mDo),e(Na,Jge),e(Jge,gDo),e(Na,hDo),e(ao,pDo),e(ao,H),e(H,xb),e(xb,Yge),e(Yge,_Do),e(xb,uDo),e(xb,QO),e(QO,bDo),e(xb,vDo),e(H,FDo),e(H,$b),e($b,Kge),e(Kge,TDo),e($b,MDo),e($b,HO),e(HO,EDo),e($b,CDo),e(H,wDo),e(H,kb),e(kb,Zge),e(Zge,ADo),e(kb,yDo),e(kb,UO),e(UO,LDo),e(kb,xDo),e(H,$Do),e(H,Sb),e(Sb,ehe),e(ehe,kDo),e(Sb,SDo),e(Sb,JO),e(JO,RDo),e(Sb,PDo),e(H,BDo),e(H,Rb),e(Rb,ohe),e(ohe,IDo),e(Rb,NDo),e(Rb,YO),e(YO,qDo),e(Rb,jDo),e(H,DDo),e(H,Pb),e(Pb,rhe),e(rhe,GDo),e(Pb,ODo),e(Pb,KO),e(KO,VDo),e(Pb,XDo),e(H,zDo),e(H,Bb),e(Bb,the),e(the,WDo),e(Bb,QDo),e(Bb,ZO),e(ZO,HDo),e(Bb,UDo),e(H,JDo),e(H,Ib),e(Ib,ahe),e(ahe,YDo),e(Ib,KDo),e(Ib,eV),e(eV,ZDo),e(Ib,eGo),e(H,oGo),e(H,Nb),e(Nb,nhe),e(nhe,rGo),e(Nb,tGo),e(Nb,oV),e(oV,aGo),e(Nb,nGo),e(H,sGo),e(H,qb),e(qb,she),e(she,lGo),e(qb,iGo),e(qb,rV),e(rV,dGo),e(qb,cGo),e(H,fGo),e(H,jb),e(jb,lhe),e(lhe,mGo),e(jb,gGo),e(jb,tV),e(tV,hGo),e(jb,pGo),e(H,_Go),e(H,Db),e(Db,ihe),e(ihe,uGo),e(Db,bGo),e(Db,aV),e(aV,vGo),e(Db,FGo),e(H,TGo),e(H,Gb),e(Gb,dhe),e(dhe,MGo),e(Gb,EGo),e(Gb,nV),e(nV,CGo),e(Gb,wGo),e(H,AGo),e(H,Ob),e(Ob,che),e(che,yGo),e(Ob,LGo),e(Ob,sV),e(sV,xGo),e(Ob,$Go),e(H,kGo),e(H,Vb),e(Vb,fhe),e(fhe,SGo),e(Vb,RGo),e(Vb,lV),e(lV,PGo),e(Vb,BGo),e(H,IGo),e(H,Xb),e(Xb,mhe),e(mhe,NGo),e(Xb,qGo),e(Xb,iV),e(iV,jGo),e(Xb,DGo),e(H,GGo),e(H,zb),e(zb,ghe),e(ghe,OGo),e(zb,VGo),e(zb,dV),e(dV,XGo),e(zb,zGo),e(H,WGo),e(H,Wb),e(Wb,hhe),e(hhe,QGo),e(Wb,HGo),e(Wb,cV),e(cV,UGo),e(Wb,JGo),e(H,YGo),e(H,Qb),e(Qb,phe),e(phe,KGo),e(Qb,ZGo),e(Qb,fV),e(fV,eOo),e(Qb,oOo),e(H,rOo),e(H,Hb),e(Hb,_he),e(_he,tOo),e(Hb,aOo),e(Hb,mV),e(mV,nOo),e(Hb,sOo),e(H,lOo),e(H,Ub),e(Ub,uhe),e(uhe,iOo),e(Ub,dOo),e(Ub,gV),e(gV,cOo),e(Ub,fOo),e(H,mOo),e(H,Jb),e(Jb,bhe),e(bhe,gOo),e(Jb,hOo),e(Jb,hV),e(hV,pOo),e(Jb,_Oo),e(H,uOo),e(H,Yb),e(Yb,vhe),e(vhe,bOo),e(Yb,vOo),e(Yb,pV),e(pV,FOo),e(Yb,TOo),e(H,MOo),e(H,Kb),e(Kb,Fhe),e(Fhe,EOo),e(Kb,COo),e(Kb,_V),e(_V,wOo),e(Kb,AOo),e(H,yOo),e(H,Zb),e(Zb,The),e(The,LOo),e(Zb,xOo),e(Zb,uV),e(uV,$Oo),e(Zb,kOo),e(H,SOo),e(H,e4),e(e4,Mhe),e(Mhe,ROo),e(e4,POo),e(e4,bV),e(bV,BOo),e(e4,IOo),e(H,NOo),e(H,o4),e(o4,Ehe),e(Ehe,qOo),e(o4,jOo),e(o4,vV),e(vV,DOo),e(o4,GOo),e(H,OOo),e(H,r4),e(r4,Che),e(Che,VOo),e(r4,XOo),e(r4,FV),e(FV,zOo),e(r4,WOo),e(H,QOo),e(H,t4),e(t4,whe),e(whe,HOo),e(t4,UOo),e(t4,TV),e(TV,JOo),e(t4,YOo),e(H,KOo),e(H,a4),e(a4,Ahe),e(Ahe,ZOo),e(a4,eVo),e(a4,MV),e(MV,oVo),e(a4,rVo),e(H,tVo),e(H,n4),e(n4,yhe),e(yhe,aVo),e(n4,nVo),e(n4,EV),e(EV,sVo),e(n4,lVo),e(H,iVo),e(H,s4),e(s4,Lhe),e(Lhe,dVo),e(s4,cVo),e(s4,CV),e(CV,fVo),e(s4,mVo),e(H,gVo),e(H,l4),e(l4,xhe),e(xhe,hVo),e(l4,pVo),e(l4,wV),e(wV,_Vo),e(l4,uVo),e(H,bVo),e(H,i4),e(i4,$he),e($he,vVo),e(i4,FVo),e(i4,AV),e(AV,TVo),e(i4,MVo),e(ao,EVo),e(ao,d4),e(d4,CVo),e(d4,khe),e(khe,wVo),e(d4,AVo),e(d4,She),e(She,yVo),e(ao,LVo),M(c4,ao,null),b(f,Nqe,u),b(f,Zi,u),e(Zi,f4),e(f4,Rhe),M(Wy,Rhe,null),e(Zi,xVo),e(Zi,Phe),e(Phe,$Vo),b(f,qqe,u),b(f,No,u),M(Qy,No,null),e(No,kVo),e(No,ed),e(ed,SVo),e(ed,yV),e(yV,RVo),e(ed,PVo),e(ed,LV),e(LV,BVo),e(ed,IVo),e(No,NVo),e(No,Hy),e(Hy,qVo),e(Hy,Bhe),e(Bhe,jVo),e(Hy,DVo),e(No,GVo),e(No,gt),M(Uy,gt,null),e(gt,OVo),e(gt,Ihe),e(Ihe,VVo),e(gt,XVo),e(gt,od),e(od,zVo),e(od,Nhe),e(Nhe,WVo),e(od,QVo),e(od,xV),e(xV,HVo),e(od,UVo),e(gt,JVo),M(m4,gt,null),e(No,YVo),e(No,no),M(Jy,no,null),e(no,KVo),e(no,qhe),e(qhe,ZVo),e(no,eXo),e(no,qa),e(qa,oXo),e(qa,jhe),e(jhe,rXo),e(qa,tXo),e(qa,Dhe),e(Dhe,aXo),e(qa,nXo),e(qa,Ghe),e(Ghe,sXo),e(qa,lXo),e(no,iXo),e(no,V),e(V,g4),e(g4,Ohe),e(Ohe,dXo),e(g4,cXo),e(g4,$V),e($V,fXo),e(g4,mXo),e(V,gXo),e(V,h4),e(h4,Vhe),e(Vhe,hXo),e(h4,pXo),e(h4,kV),e(kV,_Xo),e(h4,uXo),e(V,bXo),e(V,p4),e(p4,Xhe),e(Xhe,vXo),e(p4,FXo),e(p4,SV),e(SV,TXo),e(p4,MXo),e(V,EXo),e(V,_4),e(_4,zhe),e(zhe,CXo),e(_4,wXo),e(_4,RV),e(RV,AXo),e(_4,yXo),e(V,LXo),e(V,u4),e(u4,Whe),e(Whe,xXo),e(u4,$Xo),e(u4,PV),e(PV,kXo),e(u4,SXo),e(V,RXo),e(V,b4),e(b4,Qhe),e(Qhe,PXo),e(b4,BXo),e(b4,BV),e(BV,IXo),e(b4,NXo),e(V,qXo),e(V,v4),e(v4,Hhe),e(Hhe,jXo),e(v4,DXo),e(v4,IV),e(IV,GXo),e(v4,OXo),e(V,VXo),e(V,F4),e(F4,Uhe),e(Uhe,XXo),e(F4,zXo),e(F4,NV),e(NV,WXo),e(F4,QXo),e(V,HXo),e(V,T4),e(T4,Jhe),e(Jhe,UXo),e(T4,JXo),e(T4,qV),e(qV,YXo),e(T4,KXo),e(V,ZXo),e(V,M4),e(M4,Yhe),e(Yhe,ezo),e(M4,ozo),e(M4,jV),e(jV,rzo),e(M4,tzo),e(V,azo),e(V,E4),e(E4,Khe),e(Khe,nzo),e(E4,szo),e(E4,DV),e(DV,lzo),e(E4,izo),e(V,dzo),e(V,C4),e(C4,Zhe),e(Zhe,czo),e(C4,fzo),e(C4,GV),e(GV,mzo),e(C4,gzo),e(V,hzo),e(V,w4),e(w4,epe),e(epe,pzo),e(w4,_zo),e(w4,OV),e(OV,uzo),e(w4,bzo),e(V,vzo),e(V,A4),e(A4,ope),e(ope,Fzo),e(A4,Tzo),e(A4,VV),e(VV,Mzo),e(A4,Ezo),e(V,Czo),e(V,y4),e(y4,rpe),e(rpe,wzo),e(y4,Azo),e(y4,XV),e(XV,yzo),e(y4,Lzo),e(V,xzo),e(V,L4),e(L4,tpe),e(tpe,$zo),e(L4,kzo),e(L4,zV),e(zV,Szo),e(L4,Rzo),e(V,Pzo),e(V,x4),e(x4,ape),e(ape,Bzo),e(x4,Izo),e(x4,WV),e(WV,Nzo),e(x4,qzo),e(V,jzo),e(V,$4),e($4,npe),e(npe,Dzo),e($4,Gzo),e($4,QV),e(QV,Ozo),e($4,Vzo),e(V,Xzo),e(V,k4),e(k4,spe),e(spe,zzo),e(k4,Wzo),e(k4,HV),e(HV,Qzo),e(k4,Hzo),e(V,Uzo),e(V,S4),e(S4,lpe),e(lpe,Jzo),e(S4,Yzo),e(S4,UV),e(UV,Kzo),e(S4,Zzo),e(V,eWo),e(V,R4),e(R4,ipe),e(ipe,oWo),e(R4,rWo),e(R4,JV),e(JV,tWo),e(R4,aWo),e(V,nWo),e(V,P4),e(P4,dpe),e(dpe,sWo),e(P4,lWo),e(P4,YV),e(YV,iWo),e(P4,dWo),e(V,cWo),e(V,B4),e(B4,cpe),e(cpe,fWo),e(B4,mWo),e(B4,KV),e(KV,gWo),e(B4,hWo),e(V,pWo),e(V,I4),e(I4,fpe),e(fpe,_Wo),e(I4,uWo),e(I4,ZV),e(ZV,bWo),e(I4,vWo),e(V,FWo),e(V,N4),e(N4,mpe),e(mpe,TWo),e(N4,MWo),e(N4,eX),e(eX,EWo),e(N4,CWo),e(V,wWo),e(V,q4),e(q4,gpe),e(gpe,AWo),e(q4,yWo),e(q4,oX),e(oX,LWo),e(q4,xWo),e(V,$Wo),e(V,j4),e(j4,hpe),e(hpe,kWo),e(j4,SWo),e(j4,rX),e(rX,RWo),e(j4,PWo),e(V,BWo),e(V,D4),e(D4,ppe),e(ppe,IWo),e(D4,NWo),e(D4,tX),e(tX,qWo),e(D4,jWo),e(V,DWo),e(V,G4),e(G4,_pe),e(_pe,GWo),e(G4,OWo),e(G4,aX),e(aX,VWo),e(G4,XWo),e(V,zWo),e(V,O4),e(O4,upe),e(upe,WWo),e(O4,QWo),e(O4,nX),e(nX,HWo),e(O4,UWo),e(V,JWo),e(V,V4),e(V4,bpe),e(bpe,YWo),e(V4,KWo),e(V4,sX),e(sX,ZWo),e(V4,eQo),e(V,oQo),e(V,X4),e(X4,vpe),e(vpe,rQo),e(X4,tQo),e(X4,lX),e(lX,aQo),e(X4,nQo),e(V,sQo),e(V,z4),e(z4,Fpe),e(Fpe,lQo),e(z4,iQo),e(z4,iX),e(iX,dQo),e(z4,cQo),e(V,fQo),e(V,W4),e(W4,Tpe),e(Tpe,mQo),e(W4,gQo),e(W4,dX),e(dX,hQo),e(W4,pQo),e(V,_Qo),e(V,Q4),e(Q4,Mpe),e(Mpe,uQo),e(Q4,bQo),e(Q4,cX),e(cX,vQo),e(Q4,FQo),e(V,TQo),e(V,H4),e(H4,Epe),e(Epe,MQo),e(H4,EQo),e(H4,fX),e(fX,CQo),e(H4,wQo),e(V,AQo),e(V,U4),e(U4,Cpe),e(Cpe,yQo),e(U4,LQo),e(U4,mX),e(mX,xQo),e(U4,$Qo),e(V,kQo),e(V,J4),e(J4,wpe),e(wpe,SQo),e(J4,RQo),e(J4,gX),e(gX,PQo),e(J4,BQo),e(V,IQo),e(V,Y4),e(Y4,Ape),e(Ape,NQo),e(Y4,qQo),e(Y4,hX),e(hX,jQo),e(Y4,DQo),e(V,GQo),e(V,K4),e(K4,ype),e(ype,OQo),e(K4,VQo),e(K4,pX),e(pX,XQo),e(K4,zQo),e(no,WQo),e(no,Z4),e(Z4,QQo),e(Z4,Lpe),e(Lpe,HQo),e(Z4,UQo),e(Z4,xpe),e(xpe,JQo),e(no,YQo),M(ev,no,null),b(f,jqe,u),b(f,rd,u),e(rd,ov),e(ov,$pe),M(Yy,$pe,null),e(rd,KQo),e(rd,kpe),e(kpe,ZQo),b(f,Dqe,u),b(f,qo,u),M(Ky,qo,null),e(qo,eHo),e(qo,td),e(td,oHo),e(td,_X),e(_X,rHo),e(td,tHo),e(td,uX),e(uX,aHo),e(td,nHo),e(qo,sHo),e(qo,Zy),e(Zy,lHo),e(Zy,Spe),e(Spe,iHo),e(Zy,dHo),e(qo,cHo),e(qo,ht),M(eL,ht,null),e(ht,fHo),e(ht,Rpe),e(Rpe,mHo),e(ht,gHo),e(ht,ad),e(ad,hHo),e(ad,Ppe),e(Ppe,pHo),e(ad,_Ho),e(ad,bX),e(bX,uHo),e(ad,bHo),e(ht,vHo),M(rv,ht,null),e(qo,FHo),e(qo,so),M(oL,so,null),e(so,THo),e(so,Bpe),e(Bpe,MHo),e(so,EHo),e(so,ja),e(ja,CHo),e(ja,Ipe),e(Ipe,wHo),e(ja,AHo),e(ja,Npe),e(Npe,yHo),e(ja,LHo),e(ja,qpe),e(qpe,xHo),e(ja,$Ho),e(so,kHo),e(so,jpe),e(jpe,tv),e(tv,Dpe),e(Dpe,SHo),e(tv,RHo),e(tv,vX),e(vX,PHo),e(tv,BHo),e(so,IHo),e(so,av),e(av,NHo),e(av,Gpe),e(Gpe,qHo),e(av,jHo),e(av,Ope),e(Ope,DHo),e(so,GHo),M(nv,so,null),b(f,Gqe,u),b(f,nd,u),e(nd,sv),e(sv,Vpe),M(rL,Vpe,null),e(nd,OHo),e(nd,Xpe),e(Xpe,VHo),b(f,Oqe,u),b(f,jo,u),M(tL,jo,null),e(jo,XHo),e(jo,sd),e(sd,zHo),e(sd,FX),e(FX,WHo),e(sd,QHo),e(sd,TX),e(TX,HHo),e(sd,UHo),e(jo,JHo),e(jo,aL),e(aL,YHo),e(aL,zpe),e(zpe,KHo),e(aL,ZHo),e(jo,eUo),e(jo,pt),M(nL,pt,null),e(pt,oUo),e(pt,Wpe),e(Wpe,rUo),e(pt,tUo),e(pt,ld),e(ld,aUo),e(ld,Qpe),e(Qpe,nUo),e(ld,sUo),e(ld,MX),e(MX,lUo),e(ld,iUo),e(pt,dUo),M(lv,pt,null),e(jo,cUo),e(jo,lo),M(sL,lo,null),e(lo,fUo),e(lo,Hpe),e(Hpe,mUo),e(lo,gUo),e(lo,Da),e(Da,hUo),e(Da,Upe),e(Upe,pUo),e(Da,_Uo),e(Da,Jpe),e(Jpe,uUo),e(Da,bUo),e(Da,Ype),e(Ype,vUo),e(Da,FUo),e(lo,TUo),e(lo,Fe),e(Fe,iv),e(iv,Kpe),e(Kpe,MUo),e(iv,EUo),e(iv,EX),e(EX,CUo),e(iv,wUo),e(Fe,AUo),e(Fe,dv),e(dv,Zpe),e(Zpe,yUo),e(dv,LUo),e(dv,CX),e(CX,xUo),e(dv,$Uo),e(Fe,kUo),e(Fe,cv),e(cv,e_e),e(e_e,SUo),e(cv,RUo),e(cv,wX),e(wX,PUo),e(cv,BUo),e(Fe,IUo),e(Fe,fv),e(fv,o_e),e(o_e,NUo),e(fv,qUo),e(fv,AX),e(AX,jUo),e(fv,DUo),e(Fe,GUo),e(Fe,Bs),e(Bs,r_e),e(r_e,OUo),e(Bs,VUo),e(Bs,yX),e(yX,XUo),e(Bs,zUo),e(Bs,LX),e(LX,WUo),e(Bs,QUo),e(Fe,HUo),e(Fe,mv),e(mv,t_e),e(t_e,UUo),e(mv,JUo),e(mv,xX),e(xX,YUo),e(mv,KUo),e(Fe,ZUo),e(Fe,_t),e(_t,a_e),e(a_e,eJo),e(_t,oJo),e(_t,$X),e($X,rJo),e(_t,tJo),e(_t,kX),e(kX,aJo),e(_t,nJo),e(_t,SX),e(SX,sJo),e(_t,lJo),e(Fe,iJo),e(Fe,gv),e(gv,n_e),e(n_e,dJo),e(gv,cJo),e(gv,RX),e(RX,fJo),e(gv,mJo),e(Fe,gJo),e(Fe,hv),e(hv,s_e),e(s_e,hJo),e(hv,pJo),e(hv,PX),e(PX,_Jo),e(hv,uJo),e(Fe,bJo),e(Fe,pv),e(pv,l_e),e(l_e,vJo),e(pv,FJo),e(pv,BX),e(BX,TJo),e(pv,MJo),e(Fe,EJo),e(Fe,_v),e(_v,i_e),e(i_e,CJo),e(_v,wJo),e(_v,IX),e(IX,AJo),e(_v,yJo),e(Fe,LJo),e(Fe,uv),e(uv,d_e),e(d_e,xJo),e(uv,$Jo),e(uv,NX),e(NX,kJo),e(uv,SJo),e(Fe,RJo),e(Fe,bv),e(bv,c_e),e(c_e,PJo),e(bv,BJo),e(bv,qX),e(qX,IJo),e(bv,NJo),e(Fe,qJo),e(Fe,vv),e(vv,f_e),e(f_e,jJo),e(vv,DJo),e(vv,jX),e(jX,GJo),e(vv,OJo),e(lo,VJo),e(lo,Fv),e(Fv,XJo),e(Fv,m_e),e(m_e,zJo),e(Fv,WJo),e(Fv,g_e),e(g_e,QJo),e(lo,HJo),M(Tv,lo,null),b(f,Vqe,u),b(f,id,u),e(id,Mv),e(Mv,h_e),M(lL,h_e,null),e(id,UJo),e(id,p_e),e(p_e,JJo),b(f,Xqe,u),b(f,Do,u),M(iL,Do,null),e(Do,YJo),e(Do,dd),e(dd,KJo),e(dd,DX),e(DX,ZJo),e(dd,eYo),e(dd,GX),e(GX,oYo),e(dd,rYo),e(Do,tYo),e(Do,dL),e(dL,aYo),e(dL,__e),e(__e,nYo),e(dL,sYo),e(Do,lYo),e(Do,ut),M(cL,ut,null),e(ut,iYo),e(ut,u_e),e(u_e,dYo),e(ut,cYo),e(ut,cd),e(cd,fYo),e(cd,b_e),e(b_e,mYo),e(cd,gYo),e(cd,OX),e(OX,hYo),e(cd,pYo),e(ut,_Yo),M(Ev,ut,null),e(Do,uYo),e(Do,io),M(fL,io,null),e(io,bYo),e(io,v_e),e(v_e,vYo),e(io,FYo),e(io,Ga),e(Ga,TYo),e(Ga,F_e),e(F_e,MYo),e(Ga,EYo),e(Ga,T_e),e(T_e,CYo),e(Ga,wYo),e(Ga,M_e),e(M_e,AYo),e(Ga,yYo),e(io,LYo),e(io,E_e),e(E_e,Cv),e(Cv,C_e),e(C_e,xYo),e(Cv,$Yo),e(Cv,VX),e(VX,kYo),e(Cv,SYo),e(io,RYo),e(io,wv),e(wv,PYo),e(wv,w_e),e(w_e,BYo),e(wv,IYo),e(wv,A_e),e(A_e,NYo),e(io,qYo),M(Av,io,null),b(f,zqe,u),b(f,fd,u),e(fd,yv),e(yv,y_e),M(mL,y_e,null),e(fd,jYo),e(fd,L_e),e(L_e,DYo),b(f,Wqe,u),b(f,Go,u),M(gL,Go,null),e(Go,GYo),e(Go,md),e(md,OYo),e(md,XX),e(XX,VYo),e(md,XYo),e(md,zX),e(zX,zYo),e(md,WYo),e(Go,QYo),e(Go,hL),e(hL,HYo),e(hL,x_e),e(x_e,UYo),e(hL,JYo),e(Go,YYo),e(Go,bt),M(pL,bt,null),e(bt,KYo),e(bt,$_e),e($_e,ZYo),e(bt,eKo),e(bt,gd),e(gd,oKo),e(gd,k_e),e(k_e,rKo),e(gd,tKo),e(gd,WX),e(WX,aKo),e(gd,nKo),e(bt,sKo),M(Lv,bt,null),e(Go,lKo),e(Go,co),M(_L,co,null),e(co,iKo),e(co,S_e),e(S_e,dKo),e(co,cKo),e(co,Oa),e(Oa,fKo),e(Oa,R_e),e(R_e,mKo),e(Oa,gKo),e(Oa,P_e),e(P_e,hKo),e(Oa,pKo),e(Oa,B_e),e(B_e,_Ko),e(Oa,uKo),e(co,bKo),e(co,ke),e(ke,xv),e(xv,I_e),e(I_e,vKo),e(xv,FKo),e(xv,QX),e(QX,TKo),e(xv,MKo),e(ke,EKo),e(ke,$v),e($v,N_e),e(N_e,CKo),e($v,wKo),e($v,HX),e(HX,AKo),e($v,yKo),e(ke,LKo),e(ke,kv),e(kv,q_e),e(q_e,xKo),e(kv,$Ko),e(kv,UX),e(UX,kKo),e(kv,SKo),e(ke,RKo),e(ke,Sv),e(Sv,j_e),e(j_e,PKo),e(Sv,BKo),e(Sv,JX),e(JX,IKo),e(Sv,NKo),e(ke,qKo),e(ke,Rv),e(Rv,D_e),e(D_e,jKo),e(Rv,DKo),e(Rv,YX),e(YX,GKo),e(Rv,OKo),e(ke,VKo),e(ke,Pv),e(Pv,G_e),e(G_e,XKo),e(Pv,zKo),e(Pv,KX),e(KX,WKo),e(Pv,QKo),e(ke,HKo),e(ke,Bv),e(Bv,O_e),e(O_e,UKo),e(Bv,JKo),e(Bv,ZX),e(ZX,YKo),e(Bv,KKo),e(ke,ZKo),e(ke,Iv),e(Iv,V_e),e(V_e,eZo),e(Iv,oZo),e(Iv,ez),e(ez,rZo),e(Iv,tZo),e(ke,aZo),e(ke,Nv),e(Nv,X_e),e(X_e,nZo),e(Nv,sZo),e(Nv,oz),e(oz,lZo),e(Nv,iZo),e(co,dZo),e(co,qv),e(qv,cZo),e(qv,z_e),e(z_e,fZo),e(qv,mZo),e(qv,W_e),e(W_e,gZo),e(co,hZo),M(jv,co,null),b(f,Qqe,u),b(f,hd,u),e(hd,Dv),e(Dv,Q_e),M(uL,Q_e,null),e(hd,pZo),e(hd,H_e),e(H_e,_Zo),b(f,Hqe,u),b(f,Oo,u),M(bL,Oo,null),e(Oo,uZo),e(Oo,pd),e(pd,bZo),e(pd,rz),e(rz,vZo),e(pd,FZo),e(pd,tz),e(tz,TZo),e(pd,MZo),e(Oo,EZo),e(Oo,vL),e(vL,CZo),e(vL,U_e),e(U_e,wZo),e(vL,AZo),e(Oo,yZo),e(Oo,vt),M(FL,vt,null),e(vt,LZo),e(vt,J_e),e(J_e,xZo),e(vt,$Zo),e(vt,_d),e(_d,kZo),e(_d,Y_e),e(Y_e,SZo),e(_d,RZo),e(_d,az),e(az,PZo),e(_d,BZo),e(vt,IZo),M(Gv,vt,null),e(Oo,NZo),e(Oo,fo),M(TL,fo,null),e(fo,qZo),e(fo,K_e),e(K_e,jZo),e(fo,DZo),e(fo,Va),e(Va,GZo),e(Va,Z_e),e(Z_e,OZo),e(Va,VZo),e(Va,eue),e(eue,XZo),e(Va,zZo),e(Va,oue),e(oue,WZo),e(Va,QZo),e(fo,HZo),e(fo,Kr),e(Kr,Ov),e(Ov,rue),e(rue,UZo),e(Ov,JZo),e(Ov,nz),e(nz,YZo),e(Ov,KZo),e(Kr,ZZo),e(Kr,Vv),e(Vv,tue),e(tue,eer),e(Vv,oer),e(Vv,sz),e(sz,rer),e(Vv,ter),e(Kr,aer),e(Kr,Xv),e(Xv,aue),e(aue,ner),e(Xv,ser),e(Xv,lz),e(lz,ler),e(Xv,ier),e(Kr,der),e(Kr,zv),e(zv,nue),e(nue,cer),e(zv,fer),e(zv,iz),e(iz,mer),e(zv,ger),e(Kr,her),e(Kr,Wv),e(Wv,sue),e(sue,per),e(Wv,_er),e(Wv,dz),e(dz,uer),e(Wv,ber),e(fo,ver),e(fo,Qv),e(Qv,Fer),e(Qv,lue),e(lue,Ter),e(Qv,Mer),e(Qv,iue),e(iue,Eer),e(fo,Cer),M(Hv,fo,null),b(f,Uqe,u),b(f,ud,u),e(ud,Uv),e(Uv,due),M(ML,due,null),e(ud,wer),e(ud,cue),e(cue,Aer),b(f,Jqe,u),b(f,Vo,u),M(EL,Vo,null),e(Vo,yer),e(Vo,bd),e(bd,Ler),e(bd,cz),e(cz,xer),e(bd,$er),e(bd,fz),e(fz,ker),e(bd,Ser),e(Vo,Rer),e(Vo,CL),e(CL,Per),e(CL,fue),e(fue,Ber),e(CL,Ier),e(Vo,Ner),e(Vo,Ft),M(wL,Ft,null),e(Ft,qer),e(Ft,mue),e(mue,jer),e(Ft,Der),e(Ft,vd),e(vd,Ger),e(vd,gue),e(gue,Oer),e(vd,Ver),e(vd,mz),e(mz,Xer),e(vd,zer),e(Ft,Wer),M(Jv,Ft,null),e(Vo,Qer),e(Vo,mo),M(AL,mo,null),e(mo,Her),e(mo,hue),e(hue,Uer),e(mo,Jer),e(mo,Xa),e(Xa,Yer),e(Xa,pue),e(pue,Ker),e(Xa,Zer),e(Xa,_ue),e(_ue,eor),e(Xa,oor),e(Xa,uue),e(uue,ror),e(Xa,tor),e(mo,aor),e(mo,Se),e(Se,Yv),e(Yv,bue),e(bue,nor),e(Yv,sor),e(Yv,gz),e(gz,lor),e(Yv,ior),e(Se,dor),e(Se,Kv),e(Kv,vue),e(vue,cor),e(Kv,mor),e(Kv,hz),e(hz,gor),e(Kv,hor),e(Se,por),e(Se,Zv),e(Zv,Fue),e(Fue,_or),e(Zv,uor),e(Zv,pz),e(pz,bor),e(Zv,vor),e(Se,For),e(Se,eF),e(eF,Tue),e(Tue,Tor),e(eF,Mor),e(eF,_z),e(_z,Eor),e(eF,Cor),e(Se,wor),e(Se,oF),e(oF,Mue),e(Mue,Aor),e(oF,yor),e(oF,uz),e(uz,Lor),e(oF,xor),e(Se,$or),e(Se,rF),e(rF,Eue),e(Eue,kor),e(rF,Sor),e(rF,bz),e(bz,Ror),e(rF,Por),e(Se,Bor),e(Se,tF),e(tF,Cue),e(Cue,Ior),e(tF,Nor),e(tF,vz),e(vz,qor),e(tF,jor),e(Se,Dor),e(Se,aF),e(aF,wue),e(wue,Gor),e(aF,Oor),e(aF,Fz),e(Fz,Vor),e(aF,Xor),e(Se,zor),e(Se,nF),e(nF,Aue),e(Aue,Wor),e(nF,Qor),e(nF,Tz),e(Tz,Hor),e(nF,Uor),e(mo,Jor),e(mo,sF),e(sF,Yor),e(sF,yue),e(yue,Kor),e(sF,Zor),e(sF,Lue),e(Lue,err),e(mo,orr),M(lF,mo,null),b(f,Yqe,u),b(f,Fd,u),e(Fd,iF),e(iF,xue),M(yL,xue,null),e(Fd,rrr),e(Fd,$ue),e($ue,trr),b(f,Kqe,u),b(f,Xo,u),M(LL,Xo,null),e(Xo,arr),e(Xo,Td),e(Td,nrr),e(Td,Mz),e(Mz,srr),e(Td,lrr),e(Td,Ez),e(Ez,irr),e(Td,drr),e(Xo,crr),e(Xo,xL),e(xL,frr),e(xL,kue),e(kue,mrr),e(xL,grr),e(Xo,hrr),e(Xo,Tt),M($L,Tt,null),e(Tt,prr),e(Tt,Sue),e(Sue,_rr),e(Tt,urr),e(Tt,Md),e(Md,brr),e(Md,Rue),e(Rue,vrr),e(Md,Frr),e(Md,Cz),e(Cz,Trr),e(Md,Mrr),e(Tt,Err),M(dF,Tt,null),e(Xo,Crr),e(Xo,go),M(kL,go,null),e(go,wrr),e(go,Pue),e(Pue,Arr),e(go,yrr),e(go,za),e(za,Lrr),e(za,Bue),e(Bue,xrr),e(za,$rr),e(za,Iue),e(Iue,krr),e(za,Srr),e(za,Nue),e(Nue,Rrr),e(za,Prr),e(go,Brr),e(go,SL),e(SL,cF),e(cF,que),e(que,Irr),e(cF,Nrr),e(cF,wz),e(wz,qrr),e(cF,jrr),e(SL,Drr),e(SL,fF),e(fF,jue),e(jue,Grr),e(fF,Orr),e(fF,Az),e(Az,Vrr),e(fF,Xrr),e(go,zrr),e(go,mF),e(mF,Wrr),e(mF,Due),e(Due,Qrr),e(mF,Hrr),e(mF,Gue),e(Gue,Urr),e(go,Jrr),M(gF,go,null),b(f,Zqe,u),b(f,Ed,u),e(Ed,hF),e(hF,Oue),M(RL,Oue,null),e(Ed,Yrr),e(Ed,Vue),e(Vue,Krr),b(f,eje,u),b(f,zo,u),M(PL,zo,null),e(zo,Zrr),e(zo,Cd),e(Cd,etr),e(Cd,yz),e(yz,otr),e(Cd,rtr),e(Cd,Lz),e(Lz,ttr),e(Cd,atr),e(zo,ntr),e(zo,BL),e(BL,str),e(BL,Xue),e(Xue,ltr),e(BL,itr),e(zo,dtr),e(zo,Mt),M(IL,Mt,null),e(Mt,ctr),e(Mt,zue),e(zue,ftr),e(Mt,mtr),e(Mt,wd),e(wd,gtr),e(wd,Wue),e(Wue,htr),e(wd,ptr),e(wd,xz),e(xz,_tr),e(wd,utr),e(Mt,btr),M(pF,Mt,null),e(zo,vtr),e(zo,ho),M(NL,ho,null),e(ho,Ftr),e(ho,Que),e(Que,Ttr),e(ho,Mtr),e(ho,Wa),e(Wa,Etr),e(Wa,Hue),e(Hue,Ctr),e(Wa,wtr),e(Wa,Uue),e(Uue,Atr),e(Wa,ytr),e(Wa,Jue),e(Jue,Ltr),e(Wa,xtr),e(ho,$tr),e(ho,Zr),e(Zr,_F),e(_F,Yue),e(Yue,ktr),e(_F,Str),e(_F,$z),e($z,Rtr),e(_F,Ptr),e(Zr,Btr),e(Zr,uF),e(uF,Kue),e(Kue,Itr),e(uF,Ntr),e(uF,kz),e(kz,qtr),e(uF,jtr),e(Zr,Dtr),e(Zr,bF),e(bF,Zue),e(Zue,Gtr),e(bF,Otr),e(bF,Sz),e(Sz,Vtr),e(bF,Xtr),e(Zr,ztr),e(Zr,vF),e(vF,e2e),e(e2e,Wtr),e(vF,Qtr),e(vF,Rz),e(Rz,Htr),e(vF,Utr),e(Zr,Jtr),e(Zr,FF),e(FF,o2e),e(o2e,Ytr),e(FF,Ktr),e(FF,Pz),e(Pz,Ztr),e(FF,ear),e(ho,oar),e(ho,TF),e(TF,rar),e(TF,r2e),e(r2e,tar),e(TF,aar),e(TF,t2e),e(t2e,nar),e(ho,sar),M(MF,ho,null),b(f,oje,u),b(f,Ad,u),e(Ad,EF),e(EF,a2e),M(qL,a2e,null),e(Ad,lar),e(Ad,n2e),e(n2e,iar),b(f,rje,u),b(f,Wo,u),M(jL,Wo,null),e(Wo,dar),e(Wo,yd),e(yd,car),e(yd,Bz),e(Bz,far),e(yd,mar),e(yd,Iz),e(Iz,gar),e(yd,har),e(Wo,par),e(Wo,DL),e(DL,_ar),e(DL,s2e),e(s2e,uar),e(DL,bar),e(Wo,Far),e(Wo,Et),M(GL,Et,null),e(Et,Tar),e(Et,l2e),e(l2e,Mar),e(Et,Ear),e(Et,Ld),e(Ld,Car),e(Ld,i2e),e(i2e,war),e(Ld,Aar),e(Ld,Nz),e(Nz,yar),e(Ld,Lar),e(Et,xar),M(CF,Et,null),e(Wo,$ar),e(Wo,po),M(OL,po,null),e(po,kar),e(po,d2e),e(d2e,Sar),e(po,Rar),e(po,Qa),e(Qa,Par),e(Qa,c2e),e(c2e,Bar),e(Qa,Iar),e(Qa,f2e),e(f2e,Nar),e(Qa,qar),e(Qa,m2e),e(m2e,jar),e(Qa,Dar),e(po,Gar),e(po,xd),e(xd,wF),e(wF,g2e),e(g2e,Oar),e(wF,Var),e(wF,qz),e(qz,Xar),e(wF,zar),e(xd,War),e(xd,AF),e(AF,h2e),e(h2e,Qar),e(AF,Har),e(AF,jz),e(jz,Uar),e(AF,Jar),e(xd,Yar),e(xd,yF),e(yF,p2e),e(p2e,Kar),e(yF,Zar),e(yF,Dz),e(Dz,enr),e(yF,onr),e(po,rnr),e(po,LF),e(LF,tnr),e(LF,_2e),e(_2e,anr),e(LF,nnr),e(LF,u2e),e(u2e,snr),e(po,lnr),M(xF,po,null),b(f,tje,u),b(f,$d,u),e($d,$F),e($F,b2e),M(VL,b2e,null),e($d,inr),e($d,v2e),e(v2e,dnr),b(f,aje,u),b(f,Qo,u),M(XL,Qo,null),e(Qo,cnr),e(Qo,kd),e(kd,fnr),e(kd,Gz),e(Gz,mnr),e(kd,gnr),e(kd,Oz),e(Oz,hnr),e(kd,pnr),e(Qo,_nr),e(Qo,zL),e(zL,unr),e(zL,F2e),e(F2e,bnr),e(zL,vnr),e(Qo,Fnr),e(Qo,Ct),M(WL,Ct,null),e(Ct,Tnr),e(Ct,T2e),e(T2e,Mnr),e(Ct,Enr),e(Ct,Sd),e(Sd,Cnr),e(Sd,M2e),e(M2e,wnr),e(Sd,Anr),e(Sd,Vz),e(Vz,ynr),e(Sd,Lnr),e(Ct,xnr),M(kF,Ct,null),e(Qo,$nr),e(Qo,_o),M(QL,_o,null),e(_o,knr),e(_o,E2e),e(E2e,Snr),e(_o,Rnr),e(_o,Ha),e(Ha,Pnr),e(Ha,C2e),e(C2e,Bnr),e(Ha,Inr),e(Ha,w2e),e(w2e,Nnr),e(Ha,qnr),e(Ha,A2e),e(A2e,jnr),e(Ha,Dnr),e(_o,Gnr),e(_o,HL),e(HL,SF),e(SF,y2e),e(y2e,Onr),e(SF,Vnr),e(SF,Xz),e(Xz,Xnr),e(SF,znr),e(HL,Wnr),e(HL,RF),e(RF,L2e),e(L2e,Qnr),e(RF,Hnr),e(RF,zz),e(zz,Unr),e(RF,Jnr),e(_o,Ynr),e(_o,PF),e(PF,Knr),e(PF,x2e),e(x2e,Znr),e(PF,esr),e(PF,$2e),e($2e,osr),e(_o,rsr),M(BF,_o,null),b(f,nje,u),b(f,Rd,u),e(Rd,IF),e(IF,k2e),M(UL,k2e,null),e(Rd,tsr),e(Rd,S2e),e(S2e,asr),b(f,sje,u),b(f,Ho,u),M(JL,Ho,null),e(Ho,nsr),e(Ho,Pd),e(Pd,ssr),e(Pd,Wz),e(Wz,lsr),e(Pd,isr),e(Pd,Qz),e(Qz,dsr),e(Pd,csr),e(Ho,fsr),e(Ho,YL),e(YL,msr),e(YL,R2e),e(R2e,gsr),e(YL,hsr),e(Ho,psr),e(Ho,wt),M(KL,wt,null),e(wt,_sr),e(wt,P2e),e(P2e,usr),e(wt,bsr),e(wt,Bd),e(Bd,vsr),e(Bd,B2e),e(B2e,Fsr),e(Bd,Tsr),e(Bd,Hz),e(Hz,Msr),e(Bd,Esr),e(wt,Csr),M(NF,wt,null),e(Ho,wsr),e(Ho,uo),M(ZL,uo,null),e(uo,Asr),e(uo,I2e),e(I2e,ysr),e(uo,Lsr),e(uo,Ua),e(Ua,xsr),e(Ua,N2e),e(N2e,$sr),e(Ua,ksr),e(Ua,q2e),e(q2e,Ssr),e(Ua,Rsr),e(Ua,j2e),e(j2e,Psr),e(Ua,Bsr),e(uo,Isr),e(uo,D2e),e(D2e,qF),e(qF,G2e),e(G2e,Nsr),e(qF,qsr),e(qF,Uz),e(Uz,jsr),e(qF,Dsr),e(uo,Gsr),e(uo,jF),e(jF,Osr),e(jF,O2e),e(O2e,Vsr),e(jF,Xsr),e(jF,V2e),e(V2e,zsr),e(uo,Wsr),M(DF,uo,null),b(f,lje,u),b(f,Id,u),e(Id,GF),e(GF,X2e),M(e8,X2e,null),e(Id,Qsr),e(Id,z2e),e(z2e,Hsr),b(f,ije,u),b(f,Uo,u),M(o8,Uo,null),e(Uo,Usr),e(Uo,Nd),e(Nd,Jsr),e(Nd,Jz),e(Jz,Ysr),e(Nd,Ksr),e(Nd,Yz),e(Yz,Zsr),e(Nd,elr),e(Uo,olr),e(Uo,r8),e(r8,rlr),e(r8,W2e),e(W2e,tlr),e(r8,alr),e(Uo,nlr),e(Uo,At),M(t8,At,null),e(At,slr),e(At,Q2e),e(Q2e,llr),e(At,ilr),e(At,qd),e(qd,dlr),e(qd,H2e),e(H2e,clr),e(qd,flr),e(qd,Kz),e(Kz,mlr),e(qd,glr),e(At,hlr),M(OF,At,null),e(Uo,plr),e(Uo,bo),M(a8,bo,null),e(bo,_lr),e(bo,U2e),e(U2e,ulr),e(bo,blr),e(bo,Ja),e(Ja,vlr),e(Ja,J2e),e(J2e,Flr),e(Ja,Tlr),e(Ja,Y2e),e(Y2e,Mlr),e(Ja,Elr),e(Ja,K2e),e(K2e,Clr),e(Ja,wlr),e(bo,Alr),e(bo,Ya),e(Ya,VF),e(VF,Z2e),e(Z2e,ylr),e(VF,Llr),e(VF,Zz),e(Zz,xlr),e(VF,$lr),e(Ya,klr),e(Ya,XF),e(XF,e1e),e(e1e,Slr),e(XF,Rlr),e(XF,eW),e(eW,Plr),e(XF,Blr),e(Ya,Ilr),e(Ya,zF),e(zF,o1e),e(o1e,Nlr),e(zF,qlr),e(zF,oW),e(oW,jlr),e(zF,Dlr),e(Ya,Glr),e(Ya,WF),e(WF,r1e),e(r1e,Olr),e(WF,Vlr),e(WF,rW),e(rW,Xlr),e(WF,zlr),e(bo,Wlr),e(bo,QF),e(QF,Qlr),e(QF,t1e),e(t1e,Hlr),e(QF,Ulr),e(QF,a1e),e(a1e,Jlr),e(bo,Ylr),M(HF,bo,null),b(f,dje,u),b(f,jd,u),e(jd,UF),e(UF,n1e),M(n8,n1e,null),e(jd,Klr),e(jd,s1e),e(s1e,Zlr),b(f,cje,u),b(f,Jo,u),M(s8,Jo,null),e(Jo,eir),e(Jo,Dd),e(Dd,oir),e(Dd,tW),e(tW,rir),e(Dd,tir),e(Dd,aW),e(aW,air),e(Dd,nir),e(Jo,sir),e(Jo,l8),e(l8,lir),e(l8,l1e),e(l1e,iir),e(l8,dir),e(Jo,cir),e(Jo,yt),M(i8,yt,null),e(yt,fir),e(yt,i1e),e(i1e,mir),e(yt,gir),e(yt,Gd),e(Gd,hir),e(Gd,d1e),e(d1e,pir),e(Gd,_ir),e(Gd,nW),e(nW,uir),e(Gd,bir),e(yt,vir),M(JF,yt,null),e(Jo,Fir),e(Jo,vo),M(d8,vo,null),e(vo,Tir),e(vo,c1e),e(c1e,Mir),e(vo,Eir),e(vo,Ka),e(Ka,Cir),e(Ka,f1e),e(f1e,wir),e(Ka,Air),e(Ka,m1e),e(m1e,yir),e(Ka,Lir),e(Ka,g1e),e(g1e,xir),e(Ka,$ir),e(vo,kir),e(vo,h1e),e(h1e,YF),e(YF,p1e),e(p1e,Sir),e(YF,Rir),e(YF,sW),e(sW,Pir),e(YF,Bir),e(vo,Iir),e(vo,KF),e(KF,Nir),e(KF,_1e),e(_1e,qir),e(KF,jir),e(KF,u1e),e(u1e,Dir),e(vo,Gir),M(ZF,vo,null),b(f,fje,u),b(f,Od,u),e(Od,eT),e(eT,b1e),M(c8,b1e,null),e(Od,Oir),e(Od,v1e),e(v1e,Vir),b(f,mje,u),b(f,Yo,u),M(f8,Yo,null),e(Yo,Xir),e(Yo,Vd),e(Vd,zir),e(Vd,lW),e(lW,Wir),e(Vd,Qir),e(Vd,iW),e(iW,Hir),e(Vd,Uir),e(Yo,Jir),e(Yo,m8),e(m8,Yir),e(m8,F1e),e(F1e,Kir),e(m8,Zir),e(Yo,edr),e(Yo,Lt),M(g8,Lt,null),e(Lt,odr),e(Lt,T1e),e(T1e,rdr),e(Lt,tdr),e(Lt,Xd),e(Xd,adr),e(Xd,M1e),e(M1e,ndr),e(Xd,sdr),e(Xd,dW),e(dW,ldr),e(Xd,idr),e(Lt,ddr),M(oT,Lt,null),e(Yo,cdr),e(Yo,wr),M(h8,wr,null),e(wr,fdr),e(wr,E1e),e(E1e,mdr),e(wr,gdr),e(wr,Za),e(Za,hdr),e(Za,C1e),e(C1e,pdr),e(Za,_dr),e(Za,w1e),e(w1e,udr),e(Za,bdr),e(Za,A1e),e(A1e,vdr),e(Za,Fdr),e(wr,Tdr),e(wr,q),e(q,rT),e(rT,y1e),e(y1e,Mdr),e(rT,Edr),e(rT,cW),e(cW,Cdr),e(rT,wdr),e(q,Adr),e(q,tT),e(tT,L1e),e(L1e,ydr),e(tT,Ldr),e(tT,fW),e(fW,xdr),e(tT,$dr),e(q,kdr),e(q,aT),e(aT,x1e),e(x1e,Sdr),e(aT,Rdr),e(aT,mW),e(mW,Pdr),e(aT,Bdr),e(q,Idr),e(q,nT),e(nT,$1e),e($1e,Ndr),e(nT,qdr),e(nT,gW),e(gW,jdr),e(nT,Ddr),e(q,Gdr),e(q,sT),e(sT,k1e),e(k1e,Odr),e(sT,Vdr),e(sT,hW),e(hW,Xdr),e(sT,zdr),e(q,Wdr),e(q,lT),e(lT,S1e),e(S1e,Qdr),e(lT,Hdr),e(lT,pW),e(pW,Udr),e(lT,Jdr),e(q,Ydr),e(q,iT),e(iT,R1e),e(R1e,Kdr),e(iT,Zdr),e(iT,_W),e(_W,ecr),e(iT,ocr),e(q,rcr),e(q,dT),e(dT,P1e),e(P1e,tcr),e(dT,acr),e(dT,uW),e(uW,ncr),e(dT,scr),e(q,lcr),e(q,cT),e(cT,B1e),e(B1e,icr),e(cT,dcr),e(cT,bW),e(bW,ccr),e(cT,fcr),e(q,mcr),e(q,fT),e(fT,I1e),e(I1e,gcr),e(fT,hcr),e(fT,vW),e(vW,pcr),e(fT,_cr),e(q,ucr),e(q,mT),e(mT,N1e),e(N1e,bcr),e(mT,vcr),e(mT,FW),e(FW,Fcr),e(mT,Tcr),e(q,Mcr),e(q,gT),e(gT,q1e),e(q1e,Ecr),e(gT,Ccr),e(gT,TW),e(TW,wcr),e(gT,Acr),e(q,ycr),e(q,hT),e(hT,j1e),e(j1e,Lcr),e(hT,xcr),e(hT,MW),e(MW,$cr),e(hT,kcr),e(q,Scr),e(q,pT),e(pT,D1e),e(D1e,Rcr),e(pT,Pcr),e(pT,EW),e(EW,Bcr),e(pT,Icr),e(q,Ncr),e(q,_T),e(_T,G1e),e(G1e,qcr),e(_T,jcr),e(_T,CW),e(CW,Dcr),e(_T,Gcr),e(q,Ocr),e(q,uT),e(uT,O1e),e(O1e,Vcr),e(uT,Xcr),e(uT,wW),e(wW,zcr),e(uT,Wcr),e(q,Qcr),e(q,bT),e(bT,V1e),e(V1e,Hcr),e(bT,Ucr),e(bT,AW),e(AW,Jcr),e(bT,Ycr),e(q,Kcr),e(q,Is),e(Is,X1e),e(X1e,Zcr),e(Is,efr),e(Is,yW),e(yW,ofr),e(Is,rfr),e(Is,LW),e(LW,tfr),e(Is,afr),e(q,nfr),e(q,vT),e(vT,z1e),e(z1e,sfr),e(vT,lfr),e(vT,xW),e(xW,ifr),e(vT,dfr),e(q,cfr),e(q,FT),e(FT,W1e),e(W1e,ffr),e(FT,mfr),e(FT,$W),e($W,gfr),e(FT,hfr),e(q,pfr),e(q,TT),e(TT,Q1e),e(Q1e,_fr),e(TT,ufr),e(TT,kW),e(kW,bfr),e(TT,vfr),e(q,Ffr),e(q,MT),e(MT,H1e),e(H1e,Tfr),e(MT,Mfr),e(MT,SW),e(SW,Efr),e(MT,Cfr),e(q,wfr),e(q,ET),e(ET,U1e),e(U1e,Afr),e(ET,yfr),e(ET,RW),e(RW,Lfr),e(ET,xfr),e(q,$fr),e(q,CT),e(CT,J1e),e(J1e,kfr),e(CT,Sfr),e(CT,PW),e(PW,Rfr),e(CT,Pfr),e(q,Bfr),e(q,wT),e(wT,Y1e),e(Y1e,Ifr),e(wT,Nfr),e(wT,BW),e(BW,qfr),e(wT,jfr),e(q,Dfr),e(q,AT),e(AT,K1e),e(K1e,Gfr),e(AT,Ofr),e(AT,IW),e(IW,Vfr),e(AT,Xfr),e(q,zfr),e(q,yT),e(yT,Z1e),e(Z1e,Wfr),e(yT,Qfr),e(yT,NW),e(NW,Hfr),e(yT,Ufr),e(q,Jfr),e(q,LT),e(LT,e7e),e(e7e,Yfr),e(LT,Kfr),e(LT,qW),e(qW,Zfr),e(LT,emr),e(q,omr),e(q,xT),e(xT,o7e),e(o7e,rmr),e(xT,tmr),e(xT,jW),e(jW,amr),e(xT,nmr),e(q,smr),e(q,$T),e($T,r7e),e(r7e,lmr),e($T,imr),e($T,DW),e(DW,dmr),e($T,cmr),e(q,fmr),e(q,kT),e(kT,t7e),e(t7e,mmr),e(kT,gmr),e(kT,GW),e(GW,hmr),e(kT,pmr),e(q,_mr),e(q,ST),e(ST,a7e),e(a7e,umr),e(ST,bmr),e(ST,OW),e(OW,vmr),e(ST,Fmr),e(q,Tmr),e(q,RT),e(RT,n7e),e(n7e,Mmr),e(RT,Emr),e(RT,VW),e(VW,Cmr),e(RT,wmr),e(q,Amr),e(q,PT),e(PT,s7e),e(s7e,ymr),e(PT,Lmr),e(PT,XW),e(XW,xmr),e(PT,$mr),e(q,kmr),e(q,BT),e(BT,l7e),e(l7e,Smr),e(BT,Rmr),e(BT,zW),e(zW,Pmr),e(BT,Bmr),e(q,Imr),e(q,IT),e(IT,i7e),e(i7e,Nmr),e(IT,qmr),e(IT,WW),e(WW,jmr),e(IT,Dmr),e(q,Gmr),e(q,NT),e(NT,d7e),e(d7e,Omr),e(NT,Vmr),e(NT,QW),e(QW,Xmr),e(NT,zmr),e(q,Wmr),e(q,qT),e(qT,c7e),e(c7e,Qmr),e(qT,Hmr),e(qT,HW),e(HW,Umr),e(qT,Jmr),e(q,Ymr),e(q,jT),e(jT,f7e),e(f7e,Kmr),e(jT,Zmr),e(jT,UW),e(UW,egr),e(jT,ogr),e(q,rgr),e(q,DT),e(DT,m7e),e(m7e,tgr),e(DT,agr),e(DT,JW),e(JW,ngr),e(DT,sgr),e(q,lgr),e(q,GT),e(GT,g7e),e(g7e,igr),e(GT,dgr),e(GT,YW),e(YW,cgr),e(GT,fgr),e(q,mgr),e(q,OT),e(OT,h7e),e(h7e,ggr),e(OT,hgr),e(OT,KW),e(KW,pgr),e(OT,_gr),e(q,ugr),e(q,VT),e(VT,p7e),e(p7e,bgr),e(VT,vgr),e(VT,ZW),e(ZW,Fgr),e(VT,Tgr),e(q,Mgr),e(q,XT),e(XT,_7e),e(_7e,Egr),e(XT,Cgr),e(XT,eQ),e(eQ,wgr),e(XT,Agr),e(q,ygr),e(q,zT),e(zT,u7e),e(u7e,Lgr),e(zT,xgr),e(zT,oQ),e(oQ,$gr),e(zT,kgr),e(q,Sgr),e(q,WT),e(WT,b7e),e(b7e,Rgr),e(WT,Pgr),e(WT,rQ),e(rQ,Bgr),e(WT,Igr),e(q,Ngr),e(q,QT),e(QT,v7e),e(v7e,qgr),e(QT,jgr),e(QT,tQ),e(tQ,Dgr),e(QT,Ggr),e(wr,Ogr),M(HT,wr,null),b(f,gje,u),b(f,zd,u),e(zd,UT),e(UT,F7e),M(p8,F7e,null),e(zd,Vgr),e(zd,T7e),e(T7e,Xgr),b(f,hje,u),b(f,Ko,u),M(_8,Ko,null),e(Ko,zgr),e(Ko,Wd),e(Wd,Wgr),e(Wd,aQ),e(aQ,Qgr),e(Wd,Hgr),e(Wd,nQ),e(nQ,Ugr),e(Wd,Jgr),e(Ko,Ygr),e(Ko,u8),e(u8,Kgr),e(u8,M7e),e(M7e,Zgr),e(u8,ehr),e(Ko,ohr),e(Ko,xt),M(b8,xt,null),e(xt,rhr),e(xt,E7e),e(E7e,thr),e(xt,ahr),e(xt,Qd),e(Qd,nhr),e(Qd,C7e),e(C7e,shr),e(Qd,lhr),e(Qd,sQ),e(sQ,ihr),e(Qd,dhr),e(xt,chr),M(JT,xt,null),e(Ko,fhr),e(Ko,Ar),M(v8,Ar,null),e(Ar,mhr),e(Ar,w7e),e(w7e,ghr),e(Ar,hhr),e(Ar,en),e(en,phr),e(en,A7e),e(A7e,_hr),e(en,uhr),e(en,y7e),e(y7e,bhr),e(en,vhr),e(en,L7e),e(L7e,Fhr),e(en,Thr),e(Ar,Mhr),e(Ar,se),e(se,YT),e(YT,x7e),e(x7e,Ehr),e(YT,Chr),e(YT,lQ),e(lQ,whr),e(YT,Ahr),e(se,yhr),e(se,KT),e(KT,$7e),e($7e,Lhr),e(KT,xhr),e(KT,iQ),e(iQ,$hr),e(KT,khr),e(se,Shr),e(se,ZT),e(ZT,k7e),e(k7e,Rhr),e(ZT,Phr),e(ZT,dQ),e(dQ,Bhr),e(ZT,Ihr),e(se,Nhr),e(se,eM),e(eM,S7e),e(S7e,qhr),e(eM,jhr),e(eM,cQ),e(cQ,Dhr),e(eM,Ghr),e(se,Ohr),e(se,oM),e(oM,R7e),e(R7e,Vhr),e(oM,Xhr),e(oM,fQ),e(fQ,zhr),e(oM,Whr),e(se,Qhr),e(se,rM),e(rM,P7e),e(P7e,Hhr),e(rM,Uhr),e(rM,mQ),e(mQ,Jhr),e(rM,Yhr),e(se,Khr),e(se,tM),e(tM,B7e),e(B7e,Zhr),e(tM,epr),e(tM,gQ),e(gQ,opr),e(tM,rpr),e(se,tpr),e(se,aM),e(aM,I7e),e(I7e,apr),e(aM,npr),e(aM,hQ),e(hQ,spr),e(aM,lpr),e(se,ipr),e(se,nM),e(nM,N7e),e(N7e,dpr),e(nM,cpr),e(nM,pQ),e(pQ,fpr),e(nM,mpr),e(se,gpr),e(se,sM),e(sM,q7e),e(q7e,hpr),e(sM,ppr),e(sM,_Q),e(_Q,_pr),e(sM,upr),e(se,bpr),e(se,lM),e(lM,j7e),e(j7e,vpr),e(lM,Fpr),e(lM,uQ),e(uQ,Tpr),e(lM,Mpr),e(se,Epr),e(se,iM),e(iM,D7e),e(D7e,Cpr),e(iM,wpr),e(iM,bQ),e(bQ,Apr),e(iM,ypr),e(se,Lpr),e(se,dM),e(dM,G7e),e(G7e,xpr),e(dM,$pr),e(dM,vQ),e(vQ,kpr),e(dM,Spr),e(se,Rpr),e(se,cM),e(cM,O7e),e(O7e,Ppr),e(cM,Bpr),e(cM,FQ),e(FQ,Ipr),e(cM,Npr),e(se,qpr),e(se,fM),e(fM,V7e),e(V7e,jpr),e(fM,Dpr),e(fM,TQ),e(TQ,Gpr),e(fM,Opr),e(se,Vpr),e(se,mM),e(mM,X7e),e(X7e,Xpr),e(mM,zpr),e(mM,MQ),e(MQ,Wpr),e(mM,Qpr),e(se,Hpr),e(se,gM),e(gM,z7e),e(z7e,Upr),e(gM,Jpr),e(gM,EQ),e(EQ,Ypr),e(gM,Kpr),e(se,Zpr),e(se,hM),e(hM,W7e),e(W7e,e_r),e(hM,o_r),e(hM,CQ),e(CQ,r_r),e(hM,t_r),e(se,a_r),e(se,pM),e(pM,Q7e),e(Q7e,n_r),e(pM,s_r),e(pM,wQ),e(wQ,l_r),e(pM,i_r),e(se,d_r),e(se,_M),e(_M,H7e),e(H7e,c_r),e(_M,f_r),e(_M,AQ),e(AQ,m_r),e(_M,g_r),e(se,h_r),e(se,uM),e(uM,U7e),e(U7e,p_r),e(uM,__r),e(uM,yQ),e(yQ,u_r),e(uM,b_r),e(se,v_r),e(se,bM),e(bM,J7e),e(J7e,F_r),e(bM,T_r),e(bM,LQ),e(LQ,M_r),e(bM,E_r),e(se,C_r),e(se,vM),e(vM,Y7e),e(Y7e,w_r),e(vM,A_r),e(vM,xQ),e(xQ,y_r),e(vM,L_r),e(Ar,x_r),M(FM,Ar,null),b(f,pje,u),b(f,Hd,u),e(Hd,TM),e(TM,K7e),M(F8,K7e,null),e(Hd,$_r),e(Hd,Z7e),e(Z7e,k_r),b(f,_je,u),b(f,Zo,u),M(T8,Zo,null),e(Zo,S_r),e(Zo,Ud),e(Ud,R_r),e(Ud,$Q),e($Q,P_r),e(Ud,B_r),e(Ud,kQ),e(kQ,I_r),e(Ud,N_r),e(Zo,q_r),e(Zo,M8),e(M8,j_r),e(M8,ebe),e(ebe,D_r),e(M8,G_r),e(Zo,O_r),e(Zo,$t),M(E8,$t,null),e($t,V_r),e($t,obe),e(obe,X_r),e($t,z_r),e($t,Jd),e(Jd,W_r),e(Jd,rbe),e(rbe,Q_r),e(Jd,H_r),e(Jd,SQ),e(SQ,U_r),e(Jd,J_r),e($t,Y_r),M(MM,$t,null),e(Zo,K_r),e(Zo,yr),M(C8,yr,null),e(yr,Z_r),e(yr,tbe),e(tbe,eur),e(yr,our),e(yr,on),e(on,rur),e(on,abe),e(abe,tur),e(on,aur),e(on,nbe),e(nbe,nur),e(on,sur),e(on,sbe),e(sbe,lur),e(on,iur),e(yr,dur),e(yr,Me),e(Me,EM),e(EM,lbe),e(lbe,cur),e(EM,fur),e(EM,RQ),e(RQ,mur),e(EM,gur),e(Me,hur),e(Me,CM),e(CM,ibe),e(ibe,pur),e(CM,_ur),e(CM,PQ),e(PQ,uur),e(CM,bur),e(Me,vur),e(Me,wM),e(wM,dbe),e(dbe,Fur),e(wM,Tur),e(wM,BQ),e(BQ,Mur),e(wM,Eur),e(Me,Cur),e(Me,AM),e(AM,cbe),e(cbe,wur),e(AM,Aur),e(AM,IQ),e(IQ,yur),e(AM,Lur),e(Me,xur),e(Me,yM),e(yM,fbe),e(fbe,$ur),e(yM,kur),e(yM,NQ),e(NQ,Sur),e(yM,Rur),e(Me,Pur),e(Me,LM),e(LM,mbe),e(mbe,Bur),e(LM,Iur),e(LM,qQ),e(qQ,Nur),e(LM,qur),e(Me,jur),e(Me,xM),e(xM,gbe),e(gbe,Dur),e(xM,Gur),e(xM,jQ),e(jQ,Our),e(xM,Vur),e(Me,Xur),e(Me,$M),e($M,hbe),e(hbe,zur),e($M,Wur),e($M,DQ),e(DQ,Qur),e($M,Hur),e(Me,Uur),e(Me,kM),e(kM,pbe),e(pbe,Jur),e(kM,Yur),e(kM,GQ),e(GQ,Kur),e(kM,Zur),e(Me,e2r),e(Me,SM),e(SM,_be),e(_be,o2r),e(SM,r2r),e(SM,OQ),e(OQ,t2r),e(SM,a2r),e(Me,n2r),e(Me,RM),e(RM,ube),e(ube,s2r),e(RM,l2r),e(RM,VQ),e(VQ,i2r),e(RM,d2r),e(Me,c2r),e(Me,PM),e(PM,bbe),e(bbe,f2r),e(PM,m2r),e(PM,XQ),e(XQ,g2r),e(PM,h2r),e(yr,p2r),M(BM,yr,null),b(f,uje,u),b(f,Yd,u),e(Yd,IM),e(IM,vbe),M(w8,vbe,null),e(Yd,_2r),e(Yd,Fbe),e(Fbe,u2r),b(f,bje,u),b(f,er,u),M(A8,er,null),e(er,b2r),e(er,Kd),e(Kd,v2r),e(Kd,zQ),e(zQ,F2r),e(Kd,T2r),e(Kd,WQ),e(WQ,M2r),e(Kd,E2r),e(er,C2r),e(er,y8),e(y8,w2r),e(y8,Tbe),e(Tbe,A2r),e(y8,y2r),e(er,L2r),e(er,kt),M(L8,kt,null),e(kt,x2r),e(kt,Mbe),e(Mbe,$2r),e(kt,k2r),e(kt,Zd),e(Zd,S2r),e(Zd,Ebe),e(Ebe,R2r),e(Zd,P2r),e(Zd,QQ),e(QQ,B2r),e(Zd,I2r),e(kt,N2r),M(NM,kt,null),e(er,q2r),e(er,Lr),M(x8,Lr,null),e(Lr,j2r),e(Lr,Cbe),e(Cbe,D2r),e(Lr,G2r),e(Lr,rn),e(rn,O2r),e(rn,wbe),e(wbe,V2r),e(rn,X2r),e(rn,Abe),e(Abe,z2r),e(rn,W2r),e(rn,ybe),e(ybe,Q2r),e(rn,H2r),e(Lr,U2r),e(Lr,et),e(et,qM),e(qM,Lbe),e(Lbe,J2r),e(qM,Y2r),e(qM,HQ),e(HQ,K2r),e(qM,Z2r),e(et,e1r),e(et,jM),e(jM,xbe),e(xbe,o1r),e(jM,r1r),e(jM,UQ),e(UQ,t1r),e(jM,a1r),e(et,n1r),e(et,DM),e(DM,$be),e($be,s1r),e(DM,l1r),e(DM,JQ),e(JQ,i1r),e(DM,d1r),e(et,c1r),e(et,GM),e(GM,kbe),e(kbe,f1r),e(GM,m1r),e(GM,YQ),e(YQ,g1r),e(GM,h1r),e(et,p1r),e(et,OM),e(OM,Sbe),e(Sbe,_1r),e(OM,u1r),e(OM,KQ),e(KQ,b1r),e(OM,v1r),e(Lr,F1r),M(VM,Lr,null),b(f,vje,u),b(f,ec,u),e(ec,XM),e(XM,Rbe),M($8,Rbe,null),e(ec,T1r),e(ec,Pbe),e(Pbe,M1r),b(f,Fje,u),b(f,or,u),M(k8,or,null),e(or,E1r),e(or,oc),e(oc,C1r),e(oc,ZQ),e(ZQ,w1r),e(oc,A1r),e(oc,eH),e(eH,y1r),e(oc,L1r),e(or,x1r),e(or,S8),e(S8,$1r),e(S8,Bbe),e(Bbe,k1r),e(S8,S1r),e(or,R1r),e(or,St),M(R8,St,null),e(St,P1r),e(St,Ibe),e(Ibe,B1r),e(St,I1r),e(St,rc),e(rc,N1r),e(rc,Nbe),e(Nbe,q1r),e(rc,j1r),e(rc,oH),e(oH,D1r),e(rc,G1r),e(St,O1r),M(zM,St,null),e(or,V1r),e(or,xr),M(P8,xr,null),e(xr,X1r),e(xr,qbe),e(qbe,z1r),e(xr,W1r),e(xr,tn),e(tn,Q1r),e(tn,jbe),e(jbe,H1r),e(tn,U1r),e(tn,Dbe),e(Dbe,J1r),e(tn,Y1r),e(tn,Gbe),e(Gbe,K1r),e(tn,Z1r),e(xr,e7r),e(xr,ie),e(ie,WM),e(WM,Obe),e(Obe,o7r),e(WM,r7r),e(WM,rH),e(rH,t7r),e(WM,a7r),e(ie,n7r),e(ie,QM),e(QM,Vbe),e(Vbe,s7r),e(QM,l7r),e(QM,tH),e(tH,i7r),e(QM,d7r),e(ie,c7r),e(ie,HM),e(HM,Xbe),e(Xbe,f7r),e(HM,m7r),e(HM,aH),e(aH,g7r),e(HM,h7r),e(ie,p7r),e(ie,UM),e(UM,zbe),e(zbe,_7r),e(UM,u7r),e(UM,nH),e(nH,b7r),e(UM,v7r),e(ie,F7r),e(ie,JM),e(JM,Wbe),e(Wbe,T7r),e(JM,M7r),e(JM,sH),e(sH,E7r),e(JM,C7r),e(ie,w7r),e(ie,YM),e(YM,Qbe),e(Qbe,A7r),e(YM,y7r),e(YM,lH),e(lH,L7r),e(YM,x7r),e(ie,$7r),e(ie,KM),e(KM,Hbe),e(Hbe,k7r),e(KM,S7r),e(KM,iH),e(iH,R7r),e(KM,P7r),e(ie,B7r),e(ie,ZM),e(ZM,Ube),e(Ube,I7r),e(ZM,N7r),e(ZM,dH),e(dH,q7r),e(ZM,j7r),e(ie,D7r),e(ie,eE),e(eE,Jbe),e(Jbe,G7r),e(eE,O7r),e(eE,cH),e(cH,V7r),e(eE,X7r),e(ie,z7r),e(ie,oE),e(oE,Ybe),e(Ybe,W7r),e(oE,Q7r),e(oE,fH),e(fH,H7r),e(oE,U7r),e(ie,J7r),e(ie,rE),e(rE,Kbe),e(Kbe,Y7r),e(rE,K7r),e(rE,mH),e(mH,Z7r),e(rE,ebr),e(ie,obr),e(ie,tE),e(tE,Zbe),e(Zbe,rbr),e(tE,tbr),e(tE,gH),e(gH,abr),e(tE,nbr),e(ie,sbr),e(ie,aE),e(aE,e4e),e(e4e,lbr),e(aE,ibr),e(aE,hH),e(hH,dbr),e(aE,cbr),e(ie,fbr),e(ie,nE),e(nE,o4e),e(o4e,mbr),e(nE,gbr),e(nE,pH),e(pH,hbr),e(nE,pbr),e(ie,_br),e(ie,sE),e(sE,r4e),e(r4e,ubr),e(sE,bbr),e(sE,_H),e(_H,vbr),e(sE,Fbr),e(ie,Tbr),e(ie,lE),e(lE,t4e),e(t4e,Mbr),e(lE,Ebr),e(lE,uH),e(uH,Cbr),e(lE,wbr),e(ie,Abr),e(ie,iE),e(iE,a4e),e(a4e,ybr),e(iE,Lbr),e(iE,bH),e(bH,xbr),e(iE,$br),e(ie,kbr),e(ie,dE),e(dE,n4e),e(n4e,Sbr),e(dE,Rbr),e(dE,vH),e(vH,Pbr),e(dE,Bbr),e(ie,Ibr),e(ie,cE),e(cE,s4e),e(s4e,Nbr),e(cE,qbr),e(cE,FH),e(FH,jbr),e(cE,Dbr),e(ie,Gbr),e(ie,fE),e(fE,l4e),e(l4e,Obr),e(fE,Vbr),e(fE,TH),e(TH,Xbr),e(fE,zbr),e(xr,Wbr),M(mE,xr,null),b(f,Tje,u),b(f,tc,u),e(tc,gE),e(gE,i4e),M(B8,i4e,null),e(tc,Qbr),e(tc,d4e),e(d4e,Hbr),b(f,Mje,u),b(f,rr,u),M(I8,rr,null),e(rr,Ubr),e(rr,ac),e(ac,Jbr),e(ac,MH),e(MH,Ybr),e(ac,Kbr),e(ac,EH),e(EH,Zbr),e(ac,e4r),e(rr,o4r),e(rr,N8),e(N8,r4r),e(N8,c4e),e(c4e,t4r),e(N8,a4r),e(rr,n4r),e(rr,Rt),M(q8,Rt,null),e(Rt,s4r),e(Rt,f4e),e(f4e,l4r),e(Rt,i4r),e(Rt,nc),e(nc,d4r),e(nc,m4e),e(m4e,c4r),e(nc,f4r),e(nc,CH),e(CH,m4r),e(nc,g4r),e(Rt,h4r),M(hE,Rt,null),e(rr,p4r),e(rr,$r),M(j8,$r,null),e($r,_4r),e($r,g4e),e(g4e,u4r),e($r,b4r),e($r,an),e(an,v4r),e(an,h4e),e(h4e,F4r),e(an,T4r),e(an,p4e),e(p4e,M4r),e(an,E4r),e(an,_4e),e(_4e,C4r),e(an,w4r),e($r,A4r),e($r,ye),e(ye,pE),e(pE,u4e),e(u4e,y4r),e(pE,L4r),e(pE,wH),e(wH,x4r),e(pE,$4r),e(ye,k4r),e(ye,_E),e(_E,b4e),e(b4e,S4r),e(_E,R4r),e(_E,AH),e(AH,P4r),e(_E,B4r),e(ye,I4r),e(ye,uE),e(uE,v4e),e(v4e,N4r),e(uE,q4r),e(uE,yH),e(yH,j4r),e(uE,D4r),e(ye,G4r),e(ye,bE),e(bE,F4e),e(F4e,O4r),e(bE,V4r),e(bE,LH),e(LH,X4r),e(bE,z4r),e(ye,W4r),e(ye,vE),e(vE,T4e),e(T4e,Q4r),e(vE,H4r),e(vE,xH),e(xH,U4r),e(vE,J4r),e(ye,Y4r),e(ye,FE),e(FE,M4e),e(M4e,K4r),e(FE,Z4r),e(FE,$H),e($H,evr),e(FE,ovr),e(ye,rvr),e(ye,TE),e(TE,E4e),e(E4e,tvr),e(TE,avr),e(TE,kH),e(kH,nvr),e(TE,svr),e(ye,lvr),e(ye,ME),e(ME,C4e),e(C4e,ivr),e(ME,dvr),e(ME,SH),e(SH,cvr),e(ME,fvr),e(ye,mvr),e(ye,EE),e(EE,w4e),e(w4e,gvr),e(EE,hvr),e(EE,RH),e(RH,pvr),e(EE,_vr),e(ye,uvr),e(ye,CE),e(CE,A4e),e(A4e,bvr),e(CE,vvr),e(CE,PH),e(PH,Fvr),e(CE,Tvr),e($r,Mvr),M(wE,$r,null),b(f,Eje,u),b(f,sc,u),e(sc,AE),e(AE,y4e),M(D8,y4e,null),e(sc,Evr),e(sc,L4e),e(L4e,Cvr),b(f,Cje,u),b(f,tr,u),M(G8,tr,null),e(tr,wvr),e(tr,lc),e(lc,Avr),e(lc,BH),e(BH,yvr),e(lc,Lvr),e(lc,IH),e(IH,xvr),e(lc,$vr),e(tr,kvr),e(tr,O8),e(O8,Svr),e(O8,x4e),e(x4e,Rvr),e(O8,Pvr),e(tr,Bvr),e(tr,Pt),M(V8,Pt,null),e(Pt,Ivr),e(Pt,$4e),e($4e,Nvr),e(Pt,qvr),e(Pt,ic),e(ic,jvr),e(ic,k4e),e(k4e,Dvr),e(ic,Gvr),e(ic,NH),e(NH,Ovr),e(ic,Vvr),e(Pt,Xvr),M(yE,Pt,null),e(tr,zvr),e(tr,kr),M(X8,kr,null),e(kr,Wvr),e(kr,S4e),e(S4e,Qvr),e(kr,Hvr),e(kr,nn),e(nn,Uvr),e(nn,R4e),e(R4e,Jvr),e(nn,Yvr),e(nn,P4e),e(P4e,Kvr),e(nn,Zvr),e(nn,B4e),e(B4e,eFr),e(nn,oFr),e(kr,rFr),e(kr,oe),e(oe,LE),e(LE,I4e),e(I4e,tFr),e(LE,aFr),e(LE,qH),e(qH,nFr),e(LE,sFr),e(oe,lFr),e(oe,xE),e(xE,N4e),e(N4e,iFr),e(xE,dFr),e(xE,jH),e(jH,cFr),e(xE,fFr),e(oe,mFr),e(oe,$E),e($E,q4e),e(q4e,gFr),e($E,hFr),e($E,DH),e(DH,pFr),e($E,_Fr),e(oe,uFr),e(oe,kE),e(kE,j4e),e(j4e,bFr),e(kE,vFr),e(kE,GH),e(GH,FFr),e(kE,TFr),e(oe,MFr),e(oe,SE),e(SE,D4e),e(D4e,EFr),e(SE,CFr),e(SE,OH),e(OH,wFr),e(SE,AFr),e(oe,yFr),e(oe,RE),e(RE,G4e),e(G4e,LFr),e(RE,xFr),e(RE,VH),e(VH,$Fr),e(RE,kFr),e(oe,SFr),e(oe,PE),e(PE,O4e),e(O4e,RFr),e(PE,PFr),e(PE,XH),e(XH,BFr),e(PE,IFr),e(oe,NFr),e(oe,BE),e(BE,V4e),e(V4e,qFr),e(BE,jFr),e(BE,zH),e(zH,DFr),e(BE,GFr),e(oe,OFr),e(oe,IE),e(IE,X4e),e(X4e,VFr),e(IE,XFr),e(IE,WH),e(WH,zFr),e(IE,WFr),e(oe,QFr),e(oe,NE),e(NE,z4e),e(z4e,HFr),e(NE,UFr),e(NE,QH),e(QH,JFr),e(NE,YFr),e(oe,KFr),e(oe,qE),e(qE,W4e),e(W4e,ZFr),e(qE,eTr),e(qE,HH),e(HH,oTr),e(qE,rTr),e(oe,tTr),e(oe,jE),e(jE,Q4e),e(Q4e,aTr),e(jE,nTr),e(jE,UH),e(UH,sTr),e(jE,lTr),e(oe,iTr),e(oe,DE),e(DE,H4e),e(H4e,dTr),e(DE,cTr),e(DE,JH),e(JH,fTr),e(DE,mTr),e(oe,gTr),e(oe,GE),e(GE,U4e),e(U4e,hTr),e(GE,pTr),e(GE,YH),e(YH,_Tr),e(GE,uTr),e(oe,bTr),e(oe,OE),e(OE,J4e),e(J4e,vTr),e(OE,FTr),e(OE,KH),e(KH,TTr),e(OE,MTr),e(oe,ETr),e(oe,VE),e(VE,Y4e),e(Y4e,CTr),e(VE,wTr),e(VE,ZH),e(ZH,ATr),e(VE,yTr),e(oe,LTr),e(oe,XE),e(XE,K4e),e(K4e,xTr),e(XE,$Tr),e(XE,eU),e(eU,kTr),e(XE,STr),e(oe,RTr),e(oe,zE),e(zE,Z4e),e(Z4e,PTr),e(zE,BTr),e(zE,oU),e(oU,ITr),e(zE,NTr),e(oe,qTr),e(oe,WE),e(WE,eve),e(eve,jTr),e(WE,DTr),e(WE,rU),e(rU,GTr),e(WE,OTr),e(oe,VTr),e(oe,QE),e(QE,ove),e(ove,XTr),e(QE,zTr),e(QE,tU),e(tU,WTr),e(QE,QTr),e(oe,HTr),e(oe,HE),e(HE,rve),e(rve,UTr),e(HE,JTr),e(HE,aU),e(aU,YTr),e(HE,KTr),e(oe,ZTr),e(oe,UE),e(UE,tve),e(tve,eMr),e(UE,oMr),e(UE,nU),e(nU,rMr),e(UE,tMr),e(oe,aMr),e(oe,JE),e(JE,ave),e(ave,nMr),e(JE,sMr),e(JE,sU),e(sU,lMr),e(JE,iMr),e(oe,dMr),e(oe,YE),e(YE,nve),e(nve,cMr),e(YE,fMr),e(YE,lU),e(lU,mMr),e(YE,gMr),e(oe,hMr),e(oe,KE),e(KE,sve),e(sve,pMr),e(KE,_Mr),e(KE,iU),e(iU,uMr),e(KE,bMr),e(oe,vMr),e(oe,ZE),e(ZE,lve),e(lve,FMr),e(ZE,TMr),e(ZE,dU),e(dU,MMr),e(ZE,EMr),e(kr,CMr),M(eC,kr,null),b(f,wje,u),b(f,dc,u),e(dc,oC),e(oC,ive),M(z8,ive,null),e(dc,wMr),e(dc,dve),e(dve,AMr),b(f,Aje,u),b(f,ar,u),M(W8,ar,null),e(ar,yMr),e(ar,cc),e(cc,LMr),e(cc,cU),e(cU,xMr),e(cc,$Mr),e(cc,fU),e(fU,kMr),e(cc,SMr),e(ar,RMr),e(ar,Q8),e(Q8,PMr),e(Q8,cve),e(cve,BMr),e(Q8,IMr),e(ar,NMr),e(ar,Bt),M(H8,Bt,null),e(Bt,qMr),e(Bt,fve),e(fve,jMr),e(Bt,DMr),e(Bt,fc),e(fc,GMr),e(fc,mve),e(mve,OMr),e(fc,VMr),e(fc,mU),e(mU,XMr),e(fc,zMr),e(Bt,WMr),M(rC,Bt,null),e(ar,QMr),e(ar,Sr),M(U8,Sr,null),e(Sr,HMr),e(Sr,gve),e(gve,UMr),e(Sr,JMr),e(Sr,sn),e(sn,YMr),e(sn,hve),e(hve,KMr),e(sn,ZMr),e(sn,pve),e(pve,eEr),e(sn,oEr),e(sn,_ve),e(_ve,rEr),e(sn,tEr),e(Sr,aEr),e(Sr,pe),e(pe,tC),e(tC,uve),e(uve,nEr),e(tC,sEr),e(tC,gU),e(gU,lEr),e(tC,iEr),e(pe,dEr),e(pe,aC),e(aC,bve),e(bve,cEr),e(aC,fEr),e(aC,hU),e(hU,mEr),e(aC,gEr),e(pe,hEr),e(pe,nC),e(nC,vve),e(vve,pEr),e(nC,_Er),e(nC,pU),e(pU,uEr),e(nC,bEr),e(pe,vEr),e(pe,sC),e(sC,Fve),e(Fve,FEr),e(sC,TEr),e(sC,_U),e(_U,MEr),e(sC,EEr),e(pe,CEr),e(pe,lC),e(lC,Tve),e(Tve,wEr),e(lC,AEr),e(lC,uU),e(uU,yEr),e(lC,LEr),e(pe,xEr),e(pe,iC),e(iC,Mve),e(Mve,$Er),e(iC,kEr),e(iC,bU),e(bU,SEr),e(iC,REr),e(pe,PEr),e(pe,dC),e(dC,Eve),e(Eve,BEr),e(dC,IEr),e(dC,vU),e(vU,NEr),e(dC,qEr),e(pe,jEr),e(pe,cC),e(cC,Cve),e(Cve,DEr),e(cC,GEr),e(cC,FU),e(FU,OEr),e(cC,VEr),e(pe,XEr),e(pe,fC),e(fC,wve),e(wve,zEr),e(fC,WEr),e(fC,TU),e(TU,QEr),e(fC,HEr),e(pe,UEr),e(pe,mC),e(mC,Ave),e(Ave,JEr),e(mC,YEr),e(mC,MU),e(MU,KEr),e(mC,ZEr),e(pe,eCr),e(pe,gC),e(gC,yve),e(yve,oCr),e(gC,rCr),e(gC,EU),e(EU,tCr),e(gC,aCr),e(pe,nCr),e(pe,hC),e(hC,Lve),e(Lve,sCr),e(hC,lCr),e(hC,CU),e(CU,iCr),e(hC,dCr),e(pe,cCr),e(pe,pC),e(pC,xve),e(xve,fCr),e(pC,mCr),e(pC,wU),e(wU,gCr),e(pC,hCr),e(pe,pCr),e(pe,_C),e(_C,$ve),e($ve,_Cr),e(_C,uCr),e(_C,AU),e(AU,bCr),e(_C,vCr),e(pe,FCr),e(pe,uC),e(uC,kve),e(kve,TCr),e(uC,MCr),e(uC,yU),e(yU,ECr),e(uC,CCr),e(pe,wCr),e(pe,bC),e(bC,Sve),e(Sve,ACr),e(bC,yCr),e(bC,LU),e(LU,LCr),e(bC,xCr),e(pe,$Cr),e(pe,vC),e(vC,Rve),e(Rve,kCr),e(vC,SCr),e(vC,xU),e(xU,RCr),e(vC,PCr),e(Sr,BCr),M(FC,Sr,null),b(f,yje,u),b(f,mc,u),e(mc,TC),e(TC,Pve),M(J8,Pve,null),e(mc,ICr),e(mc,Bve),e(Bve,NCr),b(f,Lje,u),b(f,nr,u),M(Y8,nr,null),e(nr,qCr),e(nr,gc),e(gc,jCr),e(gc,$U),e($U,DCr),e(gc,GCr),e(gc,kU),e(kU,OCr),e(gc,VCr),e(nr,XCr),e(nr,K8),e(K8,zCr),e(K8,Ive),e(Ive,WCr),e(K8,QCr),e(nr,HCr),e(nr,It),M(Z8,It,null),e(It,UCr),e(It,Nve),e(Nve,JCr),e(It,YCr),e(It,hc),e(hc,KCr),e(hc,qve),e(qve,ZCr),e(hc,e5r),e(hc,SU),e(SU,o5r),e(hc,r5r),e(It,t5r),M(MC,It,null),e(nr,a5r),e(nr,Rr),M(e9,Rr,null),e(Rr,n5r),e(Rr,jve),e(jve,s5r),e(Rr,l5r),e(Rr,ln),e(ln,i5r),e(ln,Dve),e(Dve,d5r),e(ln,c5r),e(ln,Gve),e(Gve,f5r),e(ln,m5r),e(ln,Ove),e(Ove,g5r),e(ln,h5r),e(Rr,p5r),e(Rr,o9),e(o9,EC),e(EC,Vve),e(Vve,_5r),e(EC,u5r),e(EC,RU),e(RU,b5r),e(EC,v5r),e(o9,F5r),e(o9,CC),e(CC,Xve),e(Xve,T5r),e(CC,M5r),e(CC,PU),e(PU,E5r),e(CC,C5r),e(Rr,w5r),M(wC,Rr,null),b(f,xje,u),b(f,pc,u),e(pc,AC),e(AC,zve),M(r9,zve,null),e(pc,A5r),e(pc,Wve),e(Wve,y5r),b(f,$je,u),b(f,sr,u),M(t9,sr,null),e(sr,L5r),e(sr,_c),e(_c,x5r),e(_c,BU),e(BU,$5r),e(_c,k5r),e(_c,IU),e(IU,S5r),e(_c,R5r),e(sr,P5r),e(sr,a9),e(a9,B5r),e(a9,Qve),e(Qve,I5r),e(a9,N5r),e(sr,q5r),e(sr,Nt),M(n9,Nt,null),e(Nt,j5r),e(Nt,Hve),e(Hve,D5r),e(Nt,G5r),e(Nt,uc),e(uc,O5r),e(uc,Uve),e(Uve,V5r),e(uc,X5r),e(uc,NU),e(NU,z5r),e(uc,W5r),e(Nt,Q5r),M(yC,Nt,null),e(sr,H5r),e(sr,Pr),M(s9,Pr,null),e(Pr,U5r),e(Pr,Jve),e(Jve,J5r),e(Pr,Y5r),e(Pr,dn),e(dn,K5r),e(dn,Yve),e(Yve,Z5r),e(dn,e3r),e(dn,Kve),e(Kve,o3r),e(dn,r3r),e(dn,Zve),e(Zve,t3r),e(dn,a3r),e(Pr,n3r),e(Pr,eFe),e(eFe,LC),e(LC,oFe),e(oFe,s3r),e(LC,l3r),e(LC,qU),e(qU,i3r),e(LC,d3r),e(Pr,c3r),M(xC,Pr,null),b(f,kje,u),b(f,bc,u),e(bc,$C),e($C,rFe),M(l9,rFe,null),e(bc,f3r),e(bc,tFe),e(tFe,m3r),b(f,Sje,u),b(f,lr,u),M(i9,lr,null),e(lr,g3r),e(lr,vc),e(vc,h3r),e(vc,jU),e(jU,p3r),e(vc,_3r),e(vc,DU),e(DU,u3r),e(vc,b3r),e(lr,v3r),e(lr,d9),e(d9,F3r),e(d9,aFe),e(aFe,T3r),e(d9,M3r),e(lr,E3r),e(lr,qt),M(c9,qt,null),e(qt,C3r),e(qt,nFe),e(nFe,w3r),e(qt,A3r),e(qt,Fc),e(Fc,y3r),e(Fc,sFe),e(sFe,L3r),e(Fc,x3r),e(Fc,GU),e(GU,$3r),e(Fc,k3r),e(qt,S3r),M(kC,qt,null),e(lr,R3r),e(lr,Br),M(f9,Br,null),e(Br,P3r),e(Br,lFe),e(lFe,B3r),e(Br,I3r),e(Br,cn),e(cn,N3r),e(cn,iFe),e(iFe,q3r),e(cn,j3r),e(cn,dFe),e(dFe,D3r),e(cn,G3r),e(cn,cFe),e(cFe,O3r),e(cn,V3r),e(Br,X3r),e(Br,de),e(de,SC),e(SC,fFe),e(fFe,z3r),e(SC,W3r),e(SC,OU),e(OU,Q3r),e(SC,H3r),e(de,U3r),e(de,RC),e(RC,mFe),e(mFe,J3r),e(RC,Y3r),e(RC,VU),e(VU,K3r),e(RC,Z3r),e(de,ewr),e(de,PC),e(PC,gFe),e(gFe,owr),e(PC,rwr),e(PC,XU),e(XU,twr),e(PC,awr),e(de,nwr),e(de,BC),e(BC,hFe),e(hFe,swr),e(BC,lwr),e(BC,zU),e(zU,iwr),e(BC,dwr),e(de,cwr),e(de,IC),e(IC,pFe),e(pFe,fwr),e(IC,mwr),e(IC,WU),e(WU,gwr),e(IC,hwr),e(de,pwr),e(de,NC),e(NC,_Fe),e(_Fe,_wr),e(NC,uwr),e(NC,QU),e(QU,bwr),e(NC,vwr),e(de,Fwr),e(de,qC),e(qC,uFe),e(uFe,Twr),e(qC,Mwr),e(qC,HU),e(HU,Ewr),e(qC,Cwr),e(de,wwr),e(de,jC),e(jC,bFe),e(bFe,Awr),e(jC,ywr),e(jC,UU),e(UU,Lwr),e(jC,xwr),e(de,$wr),e(de,DC),e(DC,vFe),e(vFe,kwr),e(DC,Swr),e(DC,JU),e(JU,Rwr),e(DC,Pwr),e(de,Bwr),e(de,GC),e(GC,FFe),e(FFe,Iwr),e(GC,Nwr),e(GC,YU),e(YU,qwr),e(GC,jwr),e(de,Dwr),e(de,OC),e(OC,TFe),e(TFe,Gwr),e(OC,Owr),e(OC,KU),e(KU,Vwr),e(OC,Xwr),e(de,zwr),e(de,VC),e(VC,MFe),e(MFe,Wwr),e(VC,Qwr),e(VC,ZU),e(ZU,Hwr),e(VC,Uwr),e(de,Jwr),e(de,XC),e(XC,EFe),e(EFe,Ywr),e(XC,Kwr),e(XC,eJ),e(eJ,Zwr),e(XC,e0r),e(de,o0r),e(de,zC),e(zC,CFe),e(CFe,r0r),e(zC,t0r),e(zC,oJ),e(oJ,a0r),e(zC,n0r),e(de,s0r),e(de,WC),e(WC,wFe),e(wFe,l0r),e(WC,i0r),e(WC,rJ),e(rJ,d0r),e(WC,c0r),e(de,f0r),e(de,QC),e(QC,AFe),e(AFe,m0r),e(QC,g0r),e(QC,tJ),e(tJ,h0r),e(QC,p0r),e(de,_0r),e(de,HC),e(HC,yFe),e(yFe,u0r),e(HC,b0r),e(HC,aJ),e(aJ,v0r),e(HC,F0r),e(de,T0r),e(de,UC),e(UC,LFe),e(LFe,M0r),e(UC,E0r),e(UC,nJ),e(nJ,C0r),e(UC,w0r),e(de,A0r),e(de,JC),e(JC,xFe),e(xFe,y0r),e(JC,L0r),e(JC,sJ),e(sJ,x0r),e(JC,$0r),e(de,k0r),e(de,YC),e(YC,$Fe),e($Fe,S0r),e(YC,R0r),e(YC,lJ),e(lJ,P0r),e(YC,B0r),e(Br,I0r),M(KC,Br,null),b(f,Rje,u),b(f,Tc,u),e(Tc,ZC),e(ZC,kFe),M(m9,kFe,null),e(Tc,N0r),e(Tc,SFe),e(SFe,q0r),b(f,Pje,u),b(f,ir,u),M(g9,ir,null),e(ir,j0r),e(ir,Mc),e(Mc,D0r),e(Mc,iJ),e(iJ,G0r),e(Mc,O0r),e(Mc,dJ),e(dJ,V0r),e(Mc,X0r),e(ir,z0r),e(ir,h9),e(h9,W0r),e(h9,RFe),e(RFe,Q0r),e(h9,H0r),e(ir,U0r),e(ir,jt),M(p9,jt,null),e(jt,J0r),e(jt,PFe),e(PFe,Y0r),e(jt,K0r),e(jt,Ec),e(Ec,Z0r),e(Ec,BFe),e(BFe,e6r),e(Ec,o6r),e(Ec,cJ),e(cJ,r6r),e(Ec,t6r),e(jt,a6r),M(e5,jt,null),e(ir,n6r),e(ir,Ir),M(_9,Ir,null),e(Ir,s6r),e(Ir,IFe),e(IFe,l6r),e(Ir,i6r),e(Ir,fn),e(fn,d6r),e(fn,NFe),e(NFe,c6r),e(fn,f6r),e(fn,qFe),e(qFe,m6r),e(fn,g6r),e(fn,jFe),e(jFe,h6r),e(fn,p6r),e(Ir,_6r),e(Ir,ce),e(ce,o5),e(o5,DFe),e(DFe,u6r),e(o5,b6r),e(o5,fJ),e(fJ,v6r),e(o5,F6r),e(ce,T6r),e(ce,r5),e(r5,GFe),e(GFe,M6r),e(r5,E6r),e(r5,mJ),e(mJ,C6r),e(r5,w6r),e(ce,A6r),e(ce,t5),e(t5,OFe),e(OFe,y6r),e(t5,L6r),e(t5,gJ),e(gJ,x6r),e(t5,$6r),e(ce,k6r),e(ce,a5),e(a5,VFe),e(VFe,S6r),e(a5,R6r),e(a5,hJ),e(hJ,P6r),e(a5,B6r),e(ce,I6r),e(ce,n5),e(n5,XFe),e(XFe,N6r),e(n5,q6r),e(n5,pJ),e(pJ,j6r),e(n5,D6r),e(ce,G6r),e(ce,s5),e(s5,zFe),e(zFe,O6r),e(s5,V6r),e(s5,_J),e(_J,X6r),e(s5,z6r),e(ce,W6r),e(ce,l5),e(l5,WFe),e(WFe,Q6r),e(l5,H6r),e(l5,uJ),e(uJ,U6r),e(l5,J6r),e(ce,Y6r),e(ce,i5),e(i5,QFe),e(QFe,K6r),e(i5,Z6r),e(i5,bJ),e(bJ,eAr),e(i5,oAr),e(ce,rAr),e(ce,d5),e(d5,HFe),e(HFe,tAr),e(d5,aAr),e(d5,vJ),e(vJ,nAr),e(d5,sAr),e(ce,lAr),e(ce,c5),e(c5,UFe),e(UFe,iAr),e(c5,dAr),e(c5,FJ),e(FJ,cAr),e(c5,fAr),e(ce,mAr),e(ce,f5),e(f5,JFe),e(JFe,gAr),e(f5,hAr),e(f5,TJ),e(TJ,pAr),e(f5,_Ar),e(ce,uAr),e(ce,m5),e(m5,YFe),e(YFe,bAr),e(m5,vAr),e(m5,MJ),e(MJ,FAr),e(m5,TAr),e(ce,MAr),e(ce,g5),e(g5,KFe),e(KFe,EAr),e(g5,CAr),e(g5,EJ),e(EJ,wAr),e(g5,AAr),e(ce,yAr),e(ce,h5),e(h5,ZFe),e(ZFe,LAr),e(h5,xAr),e(h5,CJ),e(CJ,$Ar),e(h5,kAr),e(ce,SAr),e(ce,p5),e(p5,eTe),e(eTe,RAr),e(p5,PAr),e(p5,wJ),e(wJ,BAr),e(p5,IAr),e(ce,NAr),e(ce,_5),e(_5,oTe),e(oTe,qAr),e(_5,jAr),e(_5,AJ),e(AJ,DAr),e(_5,GAr),e(ce,OAr),e(ce,u5),e(u5,rTe),e(rTe,VAr),e(u5,XAr),e(u5,yJ),e(yJ,zAr),e(u5,WAr),e(ce,QAr),e(ce,b5),e(b5,tTe),e(tTe,HAr),e(b5,UAr),e(b5,LJ),e(LJ,JAr),e(b5,YAr),e(ce,KAr),e(ce,v5),e(v5,aTe),e(aTe,ZAr),e(v5,eyr),e(v5,xJ),e(xJ,oyr),e(v5,ryr),e(ce,tyr),e(ce,F5),e(F5,nTe),e(nTe,ayr),e(F5,nyr),e(F5,$J),e($J,syr),e(F5,lyr),e(Ir,iyr),M(T5,Ir,null),b(f,Bje,u),b(f,Cc,u),e(Cc,M5),e(M5,sTe),M(u9,sTe,null),e(Cc,dyr),e(Cc,lTe),e(lTe,cyr),b(f,Ije,u),b(f,dr,u),M(b9,dr,null),e(dr,fyr),e(dr,wc),e(wc,myr),e(wc,kJ),e(kJ,gyr),e(wc,hyr),e(wc,SJ),e(SJ,pyr),e(wc,_yr),e(dr,uyr),e(dr,v9),e(v9,byr),e(v9,iTe),e(iTe,vyr),e(v9,Fyr),e(dr,Tyr),e(dr,Dt),M(F9,Dt,null),e(Dt,Myr),e(Dt,dTe),e(dTe,Eyr),e(Dt,Cyr),e(Dt,Ac),e(Ac,wyr),e(Ac,cTe),e(cTe,Ayr),e(Ac,yyr),e(Ac,RJ),e(RJ,Lyr),e(Ac,xyr),e(Dt,$yr),M(E5,Dt,null),e(dr,kyr),e(dr,Nr),M(T9,Nr,null),e(Nr,Syr),e(Nr,fTe),e(fTe,Ryr),e(Nr,Pyr),e(Nr,mn),e(mn,Byr),e(mn,mTe),e(mTe,Iyr),e(mn,Nyr),e(mn,gTe),e(gTe,qyr),e(mn,jyr),e(mn,hTe),e(hTe,Dyr),e(mn,Gyr),e(Nr,Oyr),e(Nr,pTe),e(pTe,C5),e(C5,_Te),e(_Te,Vyr),e(C5,Xyr),e(C5,PJ),e(PJ,zyr),e(C5,Wyr),e(Nr,Qyr),M(w5,Nr,null),b(f,Nje,u),b(f,yc,u),e(yc,A5),e(A5,uTe),M(M9,uTe,null),e(yc,Hyr),e(yc,bTe),e(bTe,Uyr),b(f,qje,u),b(f,cr,u),M(E9,cr,null),e(cr,Jyr),e(cr,Lc),e(Lc,Yyr),e(Lc,BJ),e(BJ,Kyr),e(Lc,Zyr),e(Lc,IJ),e(IJ,eLr),e(Lc,oLr),e(cr,rLr),e(cr,C9),e(C9,tLr),e(C9,vTe),e(vTe,aLr),e(C9,nLr),e(cr,sLr),e(cr,Gt),M(w9,Gt,null),e(Gt,lLr),e(Gt,FTe),e(FTe,iLr),e(Gt,dLr),e(Gt,xc),e(xc,cLr),e(xc,TTe),e(TTe,fLr),e(xc,mLr),e(xc,NJ),e(NJ,gLr),e(xc,hLr),e(Gt,pLr),M(y5,Gt,null),e(cr,_Lr),e(cr,qr),M(A9,qr,null),e(qr,uLr),e(qr,MTe),e(MTe,bLr),e(qr,vLr),e(qr,gn),e(gn,FLr),e(gn,ETe),e(ETe,TLr),e(gn,MLr),e(gn,CTe),e(CTe,ELr),e(gn,CLr),e(gn,wTe),e(wTe,wLr),e(gn,ALr),e(qr,yLr),e(qr,ATe),e(ATe,L5),e(L5,yTe),e(yTe,LLr),e(L5,xLr),e(L5,qJ),e(qJ,$Lr),e(L5,kLr),e(qr,SLr),M(x5,qr,null),b(f,jje,u),b(f,$c,u),e($c,$5),e($5,LTe),M(y9,LTe,null),e($c,RLr),e($c,xTe),e(xTe,PLr),b(f,Dje,u),b(f,fr,u),M(L9,fr,null),e(fr,BLr),e(fr,kc),e(kc,ILr),e(kc,jJ),e(jJ,NLr),e(kc,qLr),e(kc,DJ),e(DJ,jLr),e(kc,DLr),e(fr,GLr),e(fr,x9),e(x9,OLr),e(x9,$Te),e($Te,VLr),e(x9,XLr),e(fr,zLr),e(fr,Ot),M($9,Ot,null),e(Ot,WLr),e(Ot,kTe),e(kTe,QLr),e(Ot,HLr),e(Ot,Sc),e(Sc,ULr),e(Sc,STe),e(STe,JLr),e(Sc,YLr),e(Sc,GJ),e(GJ,KLr),e(Sc,ZLr),e(Ot,e8r),M(k5,Ot,null),e(fr,o8r),e(fr,jr),M(k9,jr,null),e(jr,r8r),e(jr,RTe),e(RTe,t8r),e(jr,a8r),e(jr,hn),e(hn,n8r),e(hn,PTe),e(PTe,s8r),e(hn,l8r),e(hn,BTe),e(BTe,i8r),e(hn,d8r),e(hn,ITe),e(ITe,c8r),e(hn,f8r),e(jr,m8r),e(jr,te),e(te,S5),e(S5,NTe),e(NTe,g8r),e(S5,h8r),e(S5,OJ),e(OJ,p8r),e(S5,_8r),e(te,u8r),e(te,R5),e(R5,qTe),e(qTe,b8r),e(R5,v8r),e(R5,VJ),e(VJ,F8r),e(R5,T8r),e(te,M8r),e(te,P5),e(P5,jTe),e(jTe,E8r),e(P5,C8r),e(P5,XJ),e(XJ,w8r),e(P5,A8r),e(te,y8r),e(te,B5),e(B5,DTe),e(DTe,L8r),e(B5,x8r),e(B5,zJ),e(zJ,$8r),e(B5,k8r),e(te,S8r),e(te,I5),e(I5,GTe),e(GTe,R8r),e(I5,P8r),e(I5,WJ),e(WJ,B8r),e(I5,I8r),e(te,N8r),e(te,N5),e(N5,OTe),e(OTe,q8r),e(N5,j8r),e(N5,QJ),e(QJ,D8r),e(N5,G8r),e(te,O8r),e(te,q5),e(q5,VTe),e(VTe,V8r),e(q5,X8r),e(q5,HJ),e(HJ,z8r),e(q5,W8r),e(te,Q8r),e(te,j5),e(j5,XTe),e(XTe,H8r),e(j5,U8r),e(j5,UJ),e(UJ,J8r),e(j5,Y8r),e(te,K8r),e(te,D5),e(D5,zTe),e(zTe,Z8r),e(D5,e9r),e(D5,JJ),e(JJ,o9r),e(D5,r9r),e(te,t9r),e(te,G5),e(G5,WTe),e(WTe,a9r),e(G5,n9r),e(G5,YJ),e(YJ,s9r),e(G5,l9r),e(te,i9r),e(te,O5),e(O5,QTe),e(QTe,d9r),e(O5,c9r),e(O5,KJ),e(KJ,f9r),e(O5,m9r),e(te,g9r),e(te,V5),e(V5,HTe),e(HTe,h9r),e(V5,p9r),e(V5,ZJ),e(ZJ,_9r),e(V5,u9r),e(te,b9r),e(te,X5),e(X5,UTe),e(UTe,v9r),e(X5,F9r),e(X5,eY),e(eY,T9r),e(X5,M9r),e(te,E9r),e(te,z5),e(z5,JTe),e(JTe,C9r),e(z5,w9r),e(z5,oY),e(oY,A9r),e(z5,y9r),e(te,L9r),e(te,W5),e(W5,YTe),e(YTe,x9r),e(W5,$9r),e(W5,rY),e(rY,k9r),e(W5,S9r),e(te,R9r),e(te,Q5),e(Q5,KTe),e(KTe,P9r),e(Q5,B9r),e(Q5,tY),e(tY,I9r),e(Q5,N9r),e(te,q9r),e(te,H5),e(H5,ZTe),e(ZTe,j9r),e(H5,D9r),e(H5,aY),e(aY,G9r),e(H5,O9r),e(te,V9r),e(te,U5),e(U5,eMe),e(eMe,X9r),e(U5,z9r),e(U5,nY),e(nY,W9r),e(U5,Q9r),e(te,H9r),e(te,J5),e(J5,oMe),e(oMe,U9r),e(J5,J9r),e(J5,sY),e(sY,Y9r),e(J5,K9r),e(te,Z9r),e(te,Y5),e(Y5,rMe),e(rMe,exr),e(Y5,oxr),e(Y5,lY),e(lY,rxr),e(Y5,txr),e(te,axr),e(te,K5),e(K5,tMe),e(tMe,nxr),e(K5,sxr),e(K5,iY),e(iY,lxr),e(K5,ixr),e(te,dxr),e(te,Z5),e(Z5,aMe),e(aMe,cxr),e(Z5,fxr),e(Z5,dY),e(dY,mxr),e(Z5,gxr),e(te,hxr),e(te,e3),e(e3,nMe),e(nMe,pxr),e(e3,_xr),e(e3,cY),e(cY,uxr),e(e3,bxr),e(te,vxr),e(te,o3),e(o3,sMe),e(sMe,Fxr),e(o3,Txr),e(o3,fY),e(fY,Mxr),e(o3,Exr),e(te,Cxr),e(te,r3),e(r3,lMe),e(lMe,wxr),e(r3,Axr),e(r3,mY),e(mY,yxr),e(r3,Lxr),e(jr,xxr),M(t3,jr,null),b(f,Gje,u),b(f,Rc,u),e(Rc,a3),e(a3,iMe),M(S9,iMe,null),e(Rc,$xr),e(Rc,dMe),e(dMe,kxr),b(f,Oje,u),b(f,mr,u),M(R9,mr,null),e(mr,Sxr),e(mr,Pc),e(Pc,Rxr),e(Pc,gY),e(gY,Pxr),e(Pc,Bxr),e(Pc,hY),e(hY,Ixr),e(Pc,Nxr),e(mr,qxr),e(mr,P9),e(P9,jxr),e(P9,cMe),e(cMe,Dxr),e(P9,Gxr),e(mr,Oxr),e(mr,Vt),M(B9,Vt,null),e(Vt,Vxr),e(Vt,fMe),e(fMe,Xxr),e(Vt,zxr),e(Vt,Bc),e(Bc,Wxr),e(Bc,mMe),e(mMe,Qxr),e(Bc,Hxr),e(Bc,pY),e(pY,Uxr),e(Bc,Jxr),e(Vt,Yxr),M(n3,Vt,null),e(mr,Kxr),e(mr,Dr),M(I9,Dr,null),e(Dr,Zxr),e(Dr,gMe),e(gMe,e$r),e(Dr,o$r),e(Dr,pn),e(pn,r$r),e(pn,hMe),e(hMe,t$r),e(pn,a$r),e(pn,pMe),e(pMe,n$r),e(pn,s$r),e(pn,_Me),e(_Me,l$r),e(pn,i$r),e(Dr,d$r),e(Dr,Re),e(Re,s3),e(s3,uMe),e(uMe,c$r),e(s3,f$r),e(s3,_Y),e(_Y,m$r),e(s3,g$r),e(Re,h$r),e(Re,l3),e(l3,bMe),e(bMe,p$r),e(l3,_$r),e(l3,uY),e(uY,u$r),e(l3,b$r),e(Re,v$r),e(Re,i3),e(i3,vMe),e(vMe,F$r),e(i3,T$r),e(i3,bY),e(bY,M$r),e(i3,E$r),e(Re,C$r),e(Re,d3),e(d3,FMe),e(FMe,w$r),e(d3,A$r),e(d3,vY),e(vY,y$r),e(d3,L$r),e(Re,x$r),e(Re,c3),e(c3,TMe),e(TMe,$$r),e(c3,k$r),e(c3,FY),e(FY,S$r),e(c3,R$r),e(Re,P$r),e(Re,f3),e(f3,MMe),e(MMe,B$r),e(f3,I$r),e(f3,TY),e(TY,N$r),e(f3,q$r),e(Re,j$r),e(Re,m3),e(m3,EMe),e(EMe,D$r),e(m3,G$r),e(m3,MY),e(MY,O$r),e(m3,V$r),e(Re,X$r),e(Re,g3),e(g3,CMe),e(CMe,z$r),e(g3,W$r),e(g3,EY),e(EY,Q$r),e(g3,H$r),e(Re,U$r),e(Re,h3),e(h3,wMe),e(wMe,J$r),e(h3,Y$r),e(h3,CY),e(CY,K$r),e(h3,Z$r),e(Dr,ekr),M(p3,Dr,null),b(f,Vje,u),b(f,Ic,u),e(Ic,_3),e(_3,AMe),M(N9,AMe,null),e(Ic,okr),e(Ic,yMe),e(yMe,rkr),b(f,Xje,u),b(f,gr,u),M(q9,gr,null),e(gr,tkr),e(gr,Nc),e(Nc,akr),e(Nc,wY),e(wY,nkr),e(Nc,skr),e(Nc,AY),e(AY,lkr),e(Nc,ikr),e(gr,dkr),e(gr,j9),e(j9,ckr),e(j9,LMe),e(LMe,fkr),e(j9,mkr),e(gr,gkr),e(gr,Xt),M(D9,Xt,null),e(Xt,hkr),e(Xt,xMe),e(xMe,pkr),e(Xt,_kr),e(Xt,qc),e(qc,ukr),e(qc,$Me),e($Me,bkr),e(qc,vkr),e(qc,yY),e(yY,Fkr),e(qc,Tkr),e(Xt,Mkr),M(u3,Xt,null),e(gr,Ekr),e(gr,Gr),M(G9,Gr,null),e(Gr,Ckr),e(Gr,kMe),e(kMe,wkr),e(Gr,Akr),e(Gr,_n),e(_n,ykr),e(_n,SMe),e(SMe,Lkr),e(_n,xkr),e(_n,RMe),e(RMe,$kr),e(_n,kkr),e(_n,PMe),e(PMe,Skr),e(_n,Rkr),e(Gr,Pkr),e(Gr,Ee),e(Ee,b3),e(b3,BMe),e(BMe,Bkr),e(b3,Ikr),e(b3,LY),e(LY,Nkr),e(b3,qkr),e(Ee,jkr),e(Ee,v3),e(v3,IMe),e(IMe,Dkr),e(v3,Gkr),e(v3,xY),e(xY,Okr),e(v3,Vkr),e(Ee,Xkr),e(Ee,F3),e(F3,NMe),e(NMe,zkr),e(F3,Wkr),e(F3,$Y),e($Y,Qkr),e(F3,Hkr),e(Ee,Ukr),e(Ee,T3),e(T3,qMe),e(qMe,Jkr),e(T3,Ykr),e(T3,kY),e(kY,Kkr),e(T3,Zkr),e(Ee,eSr),e(Ee,M3),e(M3,jMe),e(jMe,oSr),e(M3,rSr),e(M3,SY),e(SY,tSr),e(M3,aSr),e(Ee,nSr),e(Ee,E3),e(E3,DMe),e(DMe,sSr),e(E3,lSr),e(E3,RY),e(RY,iSr),e(E3,dSr),e(Ee,cSr),e(Ee,C3),e(C3,GMe),e(GMe,fSr),e(C3,mSr),e(C3,PY),e(PY,gSr),e(C3,hSr),e(Ee,pSr),e(Ee,w3),e(w3,OMe),e(OMe,_Sr),e(w3,uSr),e(w3,BY),e(BY,bSr),e(w3,vSr),e(Ee,FSr),e(Ee,A3),e(A3,VMe),e(VMe,TSr),e(A3,MSr),e(A3,IY),e(IY,ESr),e(A3,CSr),e(Ee,wSr),e(Ee,y3),e(y3,XMe),e(XMe,ASr),e(y3,ySr),e(y3,NY),e(NY,LSr),e(y3,xSr),e(Ee,$Sr),e(Ee,L3),e(L3,zMe),e(zMe,kSr),e(L3,SSr),e(L3,qY),e(qY,RSr),e(L3,PSr),e(Ee,BSr),e(Ee,x3),e(x3,WMe),e(WMe,ISr),e(x3,NSr),e(x3,jY),e(jY,qSr),e(x3,jSr),e(Gr,DSr),M($3,Gr,null),b(f,zje,u),b(f,jc,u),e(jc,k3),e(k3,QMe),M(O9,QMe,null),e(jc,GSr),e(jc,HMe),e(HMe,OSr),b(f,Wje,u),b(f,hr,u),M(V9,hr,null),e(hr,VSr),e(hr,Dc),e(Dc,XSr),e(Dc,DY),e(DY,zSr),e(Dc,WSr),e(Dc,GY),e(GY,QSr),e(Dc,HSr),e(hr,USr),e(hr,X9),e(X9,JSr),e(X9,UMe),e(UMe,YSr),e(X9,KSr),e(hr,ZSr),e(hr,zt),M(z9,zt,null),e(zt,eRr),e(zt,JMe),e(JMe,oRr),e(zt,rRr),e(zt,Gc),e(Gc,tRr),e(Gc,YMe),e(YMe,aRr),e(Gc,nRr),e(Gc,OY),e(OY,sRr),e(Gc,lRr),e(zt,iRr),M(S3,zt,null),e(hr,dRr),e(hr,Or),M(W9,Or,null),e(Or,cRr),e(Or,KMe),e(KMe,fRr),e(Or,mRr),e(Or,un),e(un,gRr),e(un,ZMe),e(ZMe,hRr),e(un,pRr),e(un,eEe),e(eEe,_Rr),e(un,uRr),e(un,oEe),e(oEe,bRr),e(un,vRr),e(Or,FRr),e(Or,Le),e(Le,R3),e(R3,rEe),e(rEe,TRr),e(R3,MRr),e(R3,VY),e(VY,ERr),e(R3,CRr),e(Le,wRr),e(Le,P3),e(P3,tEe),e(tEe,ARr),e(P3,yRr),e(P3,XY),e(XY,LRr),e(P3,xRr),e(Le,$Rr),e(Le,B3),e(B3,aEe),e(aEe,kRr),e(B3,SRr),e(B3,zY),e(zY,RRr),e(B3,PRr),e(Le,BRr),e(Le,I3),e(I3,nEe),e(nEe,IRr),e(I3,NRr),e(I3,WY),e(WY,qRr),e(I3,jRr),e(Le,DRr),e(Le,N3),e(N3,sEe),e(sEe,GRr),e(N3,ORr),e(N3,QY),e(QY,VRr),e(N3,XRr),e(Le,zRr),e(Le,q3),e(q3,lEe),e(lEe,WRr),e(q3,QRr),e(q3,HY),e(HY,HRr),e(q3,URr),e(Le,JRr),e(Le,j3),e(j3,iEe),e(iEe,YRr),e(j3,KRr),e(j3,UY),e(UY,ZRr),e(j3,ePr),e(Le,oPr),e(Le,D3),e(D3,dEe),e(dEe,rPr),e(D3,tPr),e(D3,JY),e(JY,aPr),e(D3,nPr),e(Le,sPr),e(Le,G3),e(G3,cEe),e(cEe,lPr),e(G3,iPr),e(G3,YY),e(YY,dPr),e(G3,cPr),e(Le,fPr),e(Le,O3),e(O3,fEe),e(fEe,mPr),e(O3,gPr),e(O3,KY),e(KY,hPr),e(O3,pPr),e(Or,_Pr),M(V3,Or,null),b(f,Qje,u),b(f,Oc,u),e(Oc,X3),e(X3,mEe),M(Q9,mEe,null),e(Oc,uPr),e(Oc,gEe),e(gEe,bPr),b(f,Hje,u),b(f,pr,u),M(H9,pr,null),e(pr,vPr),e(pr,Vc),e(Vc,FPr),e(Vc,ZY),e(ZY,TPr),e(Vc,MPr),e(Vc,eK),e(eK,EPr),e(Vc,CPr),e(pr,wPr),e(pr,U9),e(U9,APr),e(U9,hEe),e(hEe,yPr),e(U9,LPr),e(pr,xPr),e(pr,Wt),M(J9,Wt,null),e(Wt,$Pr),e(Wt,pEe),e(pEe,kPr),e(Wt,SPr),e(Wt,Xc),e(Xc,RPr),e(Xc,_Ee),e(_Ee,PPr),e(Xc,BPr),e(Xc,oK),e(oK,IPr),e(Xc,NPr),e(Wt,qPr),M(z3,Wt,null),e(pr,jPr),e(pr,Vr),M(Y9,Vr,null),e(Vr,DPr),e(Vr,uEe),e(uEe,GPr),e(Vr,OPr),e(Vr,bn),e(bn,VPr),e(bn,bEe),e(bEe,XPr),e(bn,zPr),e(bn,vEe),e(vEe,WPr),e(bn,QPr),e(bn,FEe),e(FEe,HPr),e(bn,UPr),e(Vr,JPr),e(Vr,Pe),e(Pe,W3),e(W3,TEe),e(TEe,YPr),e(W3,KPr),e(W3,rK),e(rK,ZPr),e(W3,eBr),e(Pe,oBr),e(Pe,Q3),e(Q3,MEe),e(MEe,rBr),e(Q3,tBr),e(Q3,tK),e(tK,aBr),e(Q3,nBr),e(Pe,sBr),e(Pe,H3),e(H3,EEe),e(EEe,lBr),e(H3,iBr),e(H3,aK),e(aK,dBr),e(H3,cBr),e(Pe,fBr),e(Pe,U3),e(U3,CEe),e(CEe,mBr),e(U3,gBr),e(U3,nK),e(nK,hBr),e(U3,pBr),e(Pe,_Br),e(Pe,J3),e(J3,wEe),e(wEe,uBr),e(J3,bBr),e(J3,sK),e(sK,vBr),e(J3,FBr),e(Pe,TBr),e(Pe,Y3),e(Y3,AEe),e(AEe,MBr),e(Y3,EBr),e(Y3,lK),e(lK,CBr),e(Y3,wBr),e(Pe,ABr),e(Pe,K3),e(K3,yEe),e(yEe,yBr),e(K3,LBr),e(K3,iK),e(iK,xBr),e(K3,$Br),e(Pe,kBr),e(Pe,Z3),e(Z3,LEe),e(LEe,SBr),e(Z3,RBr),e(Z3,dK),e(dK,PBr),e(Z3,BBr),e(Pe,IBr),e(Pe,ew),e(ew,xEe),e(xEe,NBr),e(ew,qBr),e(ew,cK),e(cK,jBr),e(ew,DBr),e(Vr,GBr),M(ow,Vr,null),b(f,Uje,u),b(f,zc,u),e(zc,rw),e(rw,$Ee),M(K9,$Ee,null),e(zc,OBr),e(zc,kEe),e(kEe,VBr),b(f,Jje,u),b(f,_r,u),M(Z9,_r,null),e(_r,XBr),e(_r,Wc),e(Wc,zBr),e(Wc,fK),e(fK,WBr),e(Wc,QBr),e(Wc,mK),e(mK,HBr),e(Wc,UBr),e(_r,JBr),e(_r,ex),e(ex,YBr),e(ex,SEe),e(SEe,KBr),e(ex,ZBr),e(_r,eIr),e(_r,Qt),M(ox,Qt,null),e(Qt,oIr),e(Qt,REe),e(REe,rIr),e(Qt,tIr),e(Qt,Qc),e(Qc,aIr),e(Qc,PEe),e(PEe,nIr),e(Qc,sIr),e(Qc,gK),e(gK,lIr),e(Qc,iIr),e(Qt,dIr),M(tw,Qt,null),e(_r,cIr),e(_r,Xr),M(rx,Xr,null),e(Xr,fIr),e(Xr,BEe),e(BEe,mIr),e(Xr,gIr),e(Xr,vn),e(vn,hIr),e(vn,IEe),e(IEe,pIr),e(vn,_Ir),e(vn,NEe),e(NEe,uIr),e(vn,bIr),e(vn,qEe),e(qEe,vIr),e(vn,FIr),e(Xr,TIr),e(Xr,xe),e(xe,aw),e(aw,jEe),e(jEe,MIr),e(aw,EIr),e(aw,hK),e(hK,CIr),e(aw,wIr),e(xe,AIr),e(xe,nw),e(nw,DEe),e(DEe,yIr),e(nw,LIr),e(nw,pK),e(pK,xIr),e(nw,$Ir),e(xe,kIr),e(xe,sw),e(sw,GEe),e(GEe,SIr),e(sw,RIr),e(sw,_K),e(_K,PIr),e(sw,BIr),e(xe,IIr),e(xe,lw),e(lw,OEe),e(OEe,NIr),e(lw,qIr),e(lw,uK),e(uK,jIr),e(lw,DIr),e(xe,GIr),e(xe,iw),e(iw,VEe),e(VEe,OIr),e(iw,VIr),e(iw,bK),e(bK,XIr),e(iw,zIr),e(xe,WIr),e(xe,dw),e(dw,XEe),e(XEe,QIr),e(dw,HIr),e(dw,vK),e(vK,UIr),e(dw,JIr),e(xe,YIr),e(xe,cw),e(cw,zEe),e(zEe,KIr),e(cw,ZIr),e(cw,FK),e(FK,eNr),e(cw,oNr),e(xe,rNr),e(xe,fw),e(fw,WEe),e(WEe,tNr),e(fw,aNr),e(fw,TK),e(TK,nNr),e(fw,sNr),e(xe,lNr),e(xe,mw),e(mw,QEe),e(QEe,iNr),e(mw,dNr),e(mw,MK),e(MK,cNr),e(mw,fNr),e(xe,mNr),e(xe,gw),e(gw,HEe),e(HEe,gNr),e(gw,hNr),e(gw,EK),e(EK,pNr),e(gw,_Nr),e(Xr,uNr),M(hw,Xr,null),b(f,Yje,u),b(f,Hc,u),e(Hc,pw),e(pw,UEe),M(tx,UEe,null),e(Hc,bNr),e(Hc,JEe),e(JEe,vNr),b(f,Kje,u),b(f,ur,u),M(ax,ur,null),e(ur,FNr),e(ur,Uc),e(Uc,TNr),e(Uc,CK),e(CK,MNr),e(Uc,ENr),e(Uc,wK),e(wK,CNr),e(Uc,wNr),e(ur,ANr),e(ur,nx),e(nx,yNr),e(nx,YEe),e(YEe,LNr),e(nx,xNr),e(ur,$Nr),e(ur,Ht),M(sx,Ht,null),e(Ht,kNr),e(Ht,KEe),e(KEe,SNr),e(Ht,RNr),e(Ht,Jc),e(Jc,PNr),e(Jc,ZEe),e(ZEe,BNr),e(Jc,INr),e(Jc,AK),e(AK,NNr),e(Jc,qNr),e(Ht,jNr),M(_w,Ht,null),e(ur,DNr),e(ur,zr),M(lx,zr,null),e(zr,GNr),e(zr,eCe),e(eCe,ONr),e(zr,VNr),e(zr,Fn),e(Fn,XNr),e(Fn,oCe),e(oCe,zNr),e(Fn,WNr),e(Fn,rCe),e(rCe,QNr),e(Fn,HNr),e(Fn,tCe),e(tCe,UNr),e(Fn,JNr),e(zr,YNr),e(zr,$e),e($e,uw),e(uw,aCe),e(aCe,KNr),e(uw,ZNr),e(uw,yK),e(yK,eqr),e(uw,oqr),e($e,rqr),e($e,bw),e(bw,nCe),e(nCe,tqr),e(bw,aqr),e(bw,LK),e(LK,nqr),e(bw,sqr),e($e,lqr),e($e,vw),e(vw,sCe),e(sCe,iqr),e(vw,dqr),e(vw,xK),e(xK,cqr),e(vw,fqr),e($e,mqr),e($e,Fw),e(Fw,lCe),e(lCe,gqr),e(Fw,hqr),e(Fw,$K),e($K,pqr),e(Fw,_qr),e($e,uqr),e($e,Tw),e(Tw,iCe),e(iCe,bqr),e(Tw,vqr),e(Tw,kK),e(kK,Fqr),e(Tw,Tqr),e($e,Mqr),e($e,Mw),e(Mw,dCe),e(dCe,Eqr),e(Mw,Cqr),e(Mw,SK),e(SK,wqr),e(Mw,Aqr),e($e,yqr),e($e,Ew),e(Ew,cCe),e(cCe,Lqr),e(Ew,xqr),e(Ew,RK),e(RK,$qr),e(Ew,kqr),e($e,Sqr),e($e,Cw),e(Cw,fCe),e(fCe,Rqr),e(Cw,Pqr),e(Cw,PK),e(PK,Bqr),e(Cw,Iqr),e($e,Nqr),e($e,ww),e(ww,mCe),e(mCe,qqr),e(ww,jqr),e(ww,BK),e(BK,Dqr),e(ww,Gqr),e($e,Oqr),e($e,Aw),e(Aw,gCe),e(gCe,Vqr),e(Aw,Xqr),e(Aw,IK),e(IK,zqr),e(Aw,Wqr),e(zr,Qqr),M(yw,zr,null),b(f,Zje,u),b(f,Yc,u),e(Yc,Lw),e(Lw,hCe),M(ix,hCe,null),e(Yc,Hqr),e(Yc,pCe),e(pCe,Uqr),b(f,eDe,u),b(f,br,u),M(dx,br,null),e(br,Jqr),e(br,Kc),e(Kc,Yqr),e(Kc,NK),e(NK,Kqr),e(Kc,Zqr),e(Kc,qK),e(qK,ejr),e(Kc,ojr),e(br,rjr),e(br,cx),e(cx,tjr),e(cx,_Ce),e(_Ce,ajr),e(cx,njr),e(br,sjr),e(br,Ut),M(fx,Ut,null),e(Ut,ljr),e(Ut,uCe),e(uCe,ijr),e(Ut,djr),e(Ut,Zc),e(Zc,cjr),e(Zc,bCe),e(bCe,fjr),e(Zc,mjr),e(Zc,jK),e(jK,gjr),e(Zc,hjr),e(Ut,pjr),M(xw,Ut,null),e(br,_jr),e(br,Wr),M(mx,Wr,null),e(Wr,ujr),e(Wr,vCe),e(vCe,bjr),e(Wr,vjr),e(Wr,Tn),e(Tn,Fjr),e(Tn,FCe),e(FCe,Tjr),e(Tn,Mjr),e(Tn,TCe),e(TCe,Ejr),e(Tn,Cjr),e(Tn,MCe),e(MCe,wjr),e(Tn,Ajr),e(Wr,yjr),e(Wr,De),e(De,$w),e($w,ECe),e(ECe,Ljr),e($w,xjr),e($w,DK),e(DK,$jr),e($w,kjr),e(De,Sjr),e(De,kw),e(kw,CCe),e(CCe,Rjr),e(kw,Pjr),e(kw,GK),e(GK,Bjr),e(kw,Ijr),e(De,Njr),e(De,Sw),e(Sw,wCe),e(wCe,qjr),e(Sw,jjr),e(Sw,OK),e(OK,Djr),e(Sw,Gjr),e(De,Ojr),e(De,Rw),e(Rw,ACe),e(ACe,Vjr),e(Rw,Xjr),e(Rw,VK),e(VK,zjr),e(Rw,Wjr),e(De,Qjr),e(De,Pw),e(Pw,yCe),e(yCe,Hjr),e(Pw,Ujr),e(Pw,XK),e(XK,Jjr),e(Pw,Yjr),e(De,Kjr),e(De,Bw),e(Bw,LCe),e(LCe,Zjr),e(Bw,eDr),e(Bw,zK),e(zK,oDr),e(Bw,rDr),e(De,tDr),e(De,Iw),e(Iw,xCe),e(xCe,aDr),e(Iw,nDr),e(Iw,WK),e(WK,sDr),e(Iw,lDr),e(De,iDr),e(De,Nw),e(Nw,$Ce),e($Ce,dDr),e(Nw,cDr),e(Nw,QK),e(QK,fDr),e(Nw,mDr),e(Wr,gDr),M(qw,Wr,null),b(f,oDe,u),b(f,ef,u),e(ef,jw),e(jw,kCe),M(gx,kCe,null),e(ef,hDr),e(ef,SCe),e(SCe,pDr),b(f,rDe,u),b(f,vr,u),M(hx,vr,null),e(vr,_Dr),e(vr,of),e(of,uDr),e(of,HK),e(HK,bDr),e(of,vDr),e(of,UK),e(UK,FDr),e(of,TDr),e(vr,MDr),e(vr,px),e(px,EDr),e(px,RCe),e(RCe,CDr),e(px,wDr),e(vr,ADr),e(vr,Jt),M(_x,Jt,null),e(Jt,yDr),e(Jt,PCe),e(PCe,LDr),e(Jt,xDr),e(Jt,rf),e(rf,$Dr),e(rf,BCe),e(BCe,kDr),e(rf,SDr),e(rf,JK),e(JK,RDr),e(rf,PDr),e(Jt,BDr),M(Dw,Jt,null),e(vr,IDr),e(vr,Qr),M(ux,Qr,null),e(Qr,NDr),e(Qr,ICe),e(ICe,qDr),e(Qr,jDr),e(Qr,Mn),e(Mn,DDr),e(Mn,NCe),e(NCe,GDr),e(Mn,ODr),e(Mn,qCe),e(qCe,VDr),e(Mn,XDr),e(Mn,jCe),e(jCe,zDr),e(Mn,WDr),e(Qr,QDr),e(Qr,Ge),e(Ge,Gw),e(Gw,DCe),e(DCe,HDr),e(Gw,UDr),e(Gw,YK),e(YK,JDr),e(Gw,YDr),e(Ge,KDr),e(Ge,Ow),e(Ow,GCe),e(GCe,ZDr),e(Ow,eGr),e(Ow,KK),e(KK,oGr),e(Ow,rGr),e(Ge,tGr),e(Ge,Vw),e(Vw,OCe),e(OCe,aGr),e(Vw,nGr),e(Vw,ZK),e(ZK,sGr),e(Vw,lGr),e(Ge,iGr),e(Ge,Xw),e(Xw,VCe),e(VCe,dGr),e(Xw,cGr),e(Xw,eZ),e(eZ,fGr),e(Xw,mGr),e(Ge,gGr),e(Ge,zw),e(zw,XCe),e(XCe,hGr),e(zw,pGr),e(zw,oZ),e(oZ,_Gr),e(zw,uGr),e(Ge,bGr),e(Ge,Ww),e(Ww,zCe),e(zCe,vGr),e(Ww,FGr),e(Ww,rZ),e(rZ,TGr),e(Ww,MGr),e(Ge,EGr),e(Ge,Qw),e(Qw,WCe),e(WCe,CGr),e(Qw,wGr),e(Qw,tZ),e(tZ,AGr),e(Qw,yGr),e(Ge,LGr),e(Ge,Hw),e(Hw,QCe),e(QCe,xGr),e(Hw,$Gr),e(Hw,aZ),e(aZ,kGr),e(Hw,SGr),e(Qr,RGr),M(Uw,Qr,null),b(f,tDe,u),b(f,tf,u),e(tf,Jw),e(Jw,HCe),M(bx,HCe,null),e(tf,PGr),e(tf,UCe),e(UCe,BGr),b(f,aDe,u),b(f,Fr,u),M(vx,Fr,null),e(Fr,IGr),e(Fr,af),e(af,NGr),e(af,nZ),e(nZ,qGr),e(af,jGr),e(af,sZ),e(sZ,DGr),e(af,GGr),e(Fr,OGr),e(Fr,Fx),e(Fx,VGr),e(Fx,JCe),e(JCe,XGr),e(Fx,zGr),e(Fr,WGr),e(Fr,Yt),M(Tx,Yt,null),e(Yt,QGr),e(Yt,YCe),e(YCe,HGr),e(Yt,UGr),e(Yt,nf),e(nf,JGr),e(nf,KCe),e(KCe,YGr),e(nf,KGr),e(nf,lZ),e(lZ,ZGr),e(nf,eOr),e(Yt,oOr),M(Yw,Yt,null),e(Fr,rOr),e(Fr,Hr),M(Mx,Hr,null),e(Hr,tOr),e(Hr,ZCe),e(ZCe,aOr),e(Hr,nOr),e(Hr,En),e(En,sOr),e(En,e5e),e(e5e,lOr),e(En,iOr),e(En,o5e),e(o5e,dOr),e(En,cOr),e(En,r5e),e(r5e,fOr),e(En,mOr),e(Hr,gOr),e(Hr,t5e),e(t5e,Kw),e(Kw,a5e),e(a5e,hOr),e(Kw,pOr),e(Kw,iZ),e(iZ,_Or),e(Kw,uOr),e(Hr,bOr),M(Zw,Hr,null),b(f,nDe,u),b(f,sf,u),e(sf,e0),e(e0,n5e),M(Ex,n5e,null),e(sf,vOr),e(sf,s5e),e(s5e,FOr),b(f,sDe,u),b(f,Tr,u),M(Cx,Tr,null),e(Tr,TOr),e(Tr,lf),e(lf,MOr),e(lf,dZ),e(dZ,EOr),e(lf,COr),e(lf,cZ),e(cZ,wOr),e(lf,AOr),e(Tr,yOr),e(Tr,wx),e(wx,LOr),e(wx,l5e),e(l5e,xOr),e(wx,$Or),e(Tr,kOr),e(Tr,Kt),M(Ax,Kt,null),e(Kt,SOr),e(Kt,i5e),e(i5e,ROr),e(Kt,POr),e(Kt,df),e(df,BOr),e(df,d5e),e(d5e,IOr),e(df,NOr),e(df,fZ),e(fZ,qOr),e(df,jOr),e(Kt,DOr),M(o0,Kt,null),e(Tr,GOr),e(Tr,Ur),M(yx,Ur,null),e(Ur,OOr),e(Ur,c5e),e(c5e,VOr),e(Ur,XOr),e(Ur,Cn),e(Cn,zOr),e(Cn,f5e),e(f5e,WOr),e(Cn,QOr),e(Cn,m5e),e(m5e,HOr),e(Cn,UOr),e(Cn,g5e),e(g5e,JOr),e(Cn,YOr),e(Ur,KOr),e(Ur,Lx),e(Lx,r0),e(r0,h5e),e(h5e,ZOr),e(r0,eVr),e(r0,mZ),e(mZ,oVr),e(r0,rVr),e(Lx,tVr),e(Lx,t0),e(t0,p5e),e(p5e,aVr),e(t0,nVr),e(t0,gZ),e(gZ,sVr),e(t0,lVr),e(Ur,iVr),M(a0,Ur,null),b(f,lDe,u),b(f,cf,u),e(cf,n0),e(n0,_5e),M(xx,_5e,null),e(cf,dVr),e(cf,u5e),e(u5e,cVr),b(f,iDe,u),b(f,Mr,u),M($x,Mr,null),e(Mr,fVr),e(Mr,ff),e(ff,mVr),e(ff,hZ),e(hZ,gVr),e(ff,hVr),e(ff,pZ),e(pZ,pVr),e(ff,_Vr),e(Mr,uVr),e(Mr,kx),e(kx,bVr),e(kx,b5e),e(b5e,vVr),e(kx,FVr),e(Mr,TVr),e(Mr,Zt),M(Sx,Zt,null),e(Zt,MVr),e(Zt,v5e),e(v5e,EVr),e(Zt,CVr),e(Zt,mf),e(mf,wVr),e(mf,F5e),e(F5e,AVr),e(mf,yVr),e(mf,_Z),e(_Z,LVr),e(mf,xVr),e(Zt,$Vr),M(s0,Zt,null),e(Mr,kVr),e(Mr,Jr),M(Rx,Jr,null),e(Jr,SVr),e(Jr,T5e),e(T5e,RVr),e(Jr,PVr),e(Jr,wn),e(wn,BVr),e(wn,M5e),e(M5e,IVr),e(wn,NVr),e(wn,E5e),e(E5e,qVr),e(wn,jVr),e(wn,C5e),e(C5e,DVr),e(wn,GVr),e(Jr,OVr),e(Jr,w5e),e(w5e,l0),e(l0,A5e),e(A5e,VVr),e(l0,XVr),e(l0,uZ),e(uZ,zVr),e(l0,WVr),e(Jr,QVr),M(i0,Jr,null),dDe=!0},p(f,[u]){const Px={};u&2&&(Px.$$scope={dirty:u,ctx:f}),Tf.$set(Px);const y5e={};u&2&&(y5e.$$scope={dirty:u,ctx:f}),Cg.$set(y5e);const L5e={};u&2&&(L5e.$$scope={dirty:u,ctx:f}),nh.$set(L5e);const x5e={};u&2&&(x5e.$$scope={dirty:u,ctx:f}),Nh.$set(x5e);const Bx={};u&2&&(Bx.$$scope={dirty:u,ctx:f}),qh.$set(Bx);const $5e={};u&2&&($5e.$$scope={dirty:u,ctx:f}),ap.$set($5e);const An={};u&2&&(An.$$scope={dirty:u,ctx:f}),np.$set(An);const k5e={};u&2&&(k5e.$$scope={dirty:u,ctx:f}),ip.$set(k5e);const S5e={};u&2&&(S5e.$$scope={dirty:u,ctx:f}),tu.$set(S5e);const R5e={};u&2&&(R5e.$$scope={dirty:u,ctx:f}),nu.$set(R5e);const Ix={};u&2&&(Ix.$$scope={dirty:u,ctx:f}),Uu.$set(Ix);const P5e={};u&2&&(P5e.$$scope={dirty:u,ctx:f}),Yu.$set(P5e);const Nx={};u&2&&(Nx.$$scope={dirty:u,ctx:f}),I2.$set(Nx);const B5e={};u&2&&(B5e.$$scope={dirty:u,ctx:f}),q2.$set(B5e);const qx={};u&2&&(qx.$$scope={dirty:u,ctx:f}),T1.$set(qx);const I5e={};u&2&&(I5e.$$scope={dirty:u,ctx:f}),E1.$set(I5e);const N5e={};u&2&&(N5e.$$scope={dirty:u,ctx:f}),G1.$set(N5e);const q5e={};u&2&&(q5e.$$scope={dirty:u,ctx:f}),V1.$set(q5e);const gf={};u&2&&(gf.$$scope={dirty:u,ctx:f}),q7.$set(gf);const j5e={};u&2&&(j5e.$$scope={dirty:u,ctx:f}),D7.$set(j5e);const D5e={};u&2&&(D5e.$$scope={dirty:u,ctx:f}),ub.$set(D5e);const G5e={};u&2&&(G5e.$$scope={dirty:u,ctx:f}),vb.$set(G5e);const jx={};u&2&&(jx.$$scope={dirty:u,ctx:f}),Ab.$set(jx);const O5e={};u&2&&(O5e.$$scope={dirty:u,ctx:f}),Lb.$set(O5e);const V5e={};u&2&&(V5e.$$scope={dirty:u,ctx:f}),c4.$set(V5e);const X5e={};u&2&&(X5e.$$scope={dirty:u,ctx:f}),m4.$set(X5e);const ot={};u&2&&(ot.$$scope={dirty:u,ctx:f}),ev.$set(ot);const Dx={};u&2&&(Dx.$$scope={dirty:u,ctx:f}),rv.$set(Dx);const z5e={};u&2&&(z5e.$$scope={dirty:u,ctx:f}),nv.$set(z5e);const Gx={};u&2&&(Gx.$$scope={dirty:u,ctx:f}),lv.$set(Gx);const W5e={};u&2&&(W5e.$$scope={dirty:u,ctx:f}),Tv.$set(W5e);const rt={};u&2&&(rt.$$scope={dirty:u,ctx:f}),Ev.$set(rt);const Q5e={};u&2&&(Q5e.$$scope={dirty:u,ctx:f}),Av.$set(Q5e);const hf={};u&2&&(hf.$$scope={dirty:u,ctx:f}),Lv.$set(hf);const H5e={};u&2&&(H5e.$$scope={dirty:u,ctx:f}),jv.$set(H5e);const U5e={};u&2&&(U5e.$$scope={dirty:u,ctx:f}),Gv.$set(U5e);const y={};u&2&&(y.$$scope={dirty:u,ctx:f}),Hv.$set(y);const d0={};u&2&&(d0.$$scope={dirty:u,ctx:f}),Jv.$set(d0);const J5e={};u&2&&(J5e.$$scope={dirty:u,ctx:f}),lF.$set(J5e);const Y5e={};u&2&&(Y5e.$$scope={dirty:u,ctx:f}),dF.$set(Y5e);const c0={};u&2&&(c0.$$scope={dirty:u,ctx:f}),gF.$set(c0);const K5e={};u&2&&(K5e.$$scope={dirty:u,ctx:f}),pF.$set(K5e);const Z5e={};u&2&&(Z5e.$$scope={dirty:u,ctx:f}),MF.$set(Z5e);const f0={};u&2&&(f0.$$scope={dirty:u,ctx:f}),CF.$set(f0);const e3e={};u&2&&(e3e.$$scope={dirty:u,ctx:f}),xF.$set(e3e);const o3e={};u&2&&(o3e.$$scope={dirty:u,ctx:f}),kF.$set(o3e);const m0={};u&2&&(m0.$$scope={dirty:u,ctx:f}),BF.$set(m0);const r3e={};u&2&&(r3e.$$scope={dirty:u,ctx:f}),NF.$set(r3e);const t3e={};u&2&&(t3e.$$scope={dirty:u,ctx:f}),DF.$set(t3e);const g0={};u&2&&(g0.$$scope={dirty:u,ctx:f}),OF.$set(g0);const a3e={};u&2&&(a3e.$$scope={dirty:u,ctx:f}),HF.$set(a3e);const n3e={};u&2&&(n3e.$$scope={dirty:u,ctx:f}),JF.$set(n3e);const h0={};u&2&&(h0.$$scope={dirty:u,ctx:f}),ZF.$set(h0);const s3e={};u&2&&(s3e.$$scope={dirty:u,ctx:f}),oT.$set(s3e);const l3e={};u&2&&(l3e.$$scope={dirty:u,ctx:f}),HT.$set(l3e);const p0={};u&2&&(p0.$$scope={dirty:u,ctx:f}),JT.$set(p0);const i3e={};u&2&&(i3e.$$scope={dirty:u,ctx:f}),FM.$set(i3e);const d3e={};u&2&&(d3e.$$scope={dirty:u,ctx:f}),MM.$set(d3e);const _0={};u&2&&(_0.$$scope={dirty:u,ctx:f}),BM.$set(_0);const c3e={};u&2&&(c3e.$$scope={dirty:u,ctx:f}),NM.$set(c3e);const f3e={};u&2&&(f3e.$$scope={dirty:u,ctx:f}),VM.$set(f3e);const u0={};u&2&&(u0.$$scope={dirty:u,ctx:f}),zM.$set(u0);const m3e={};u&2&&(m3e.$$scope={dirty:u,ctx:f}),mE.$set(m3e);const g3e={};u&2&&(g3e.$$scope={dirty:u,ctx:f}),hE.$set(g3e);const b0={};u&2&&(b0.$$scope={dirty:u,ctx:f}),wE.$set(b0);const h3e={};u&2&&(h3e.$$scope={dirty:u,ctx:f}),yE.$set(h3e);const p3e={};u&2&&(p3e.$$scope={dirty:u,ctx:f}),eC.$set(p3e);const v0={};u&2&&(v0.$$scope={dirty:u,ctx:f}),rC.$set(v0);const _3e={};u&2&&(_3e.$$scope={dirty:u,ctx:f}),FC.$set(_3e);const u3e={};u&2&&(u3e.$$scope={dirty:u,ctx:f}),MC.$set(u3e);const F0={};u&2&&(F0.$$scope={dirty:u,ctx:f}),wC.$set(F0);const b3e={};u&2&&(b3e.$$scope={dirty:u,ctx:f}),yC.$set(b3e);const v3e={};u&2&&(v3e.$$scope={dirty:u,ctx:f}),xC.$set(v3e);const T0={};u&2&&(T0.$$scope={dirty:u,ctx:f}),kC.$set(T0);const F3e={};u&2&&(F3e.$$scope={dirty:u,ctx:f}),KC.$set(F3e);const T3e={};u&2&&(T3e.$$scope={dirty:u,ctx:f}),e5.$set(T3e);const M0={};u&2&&(M0.$$scope={dirty:u,ctx:f}),T5.$set(M0);const M3e={};u&2&&(M3e.$$scope={dirty:u,ctx:f}),E5.$set(M3e);const E3e={};u&2&&(E3e.$$scope={dirty:u,ctx:f}),w5.$set(E3e);const E0={};u&2&&(E0.$$scope={dirty:u,ctx:f}),y5.$set(E0);const C3e={};u&2&&(C3e.$$scope={dirty:u,ctx:f}),x5.$set(C3e);const w3e={};u&2&&(w3e.$$scope={dirty:u,ctx:f}),k5.$set(w3e);const C0={};u&2&&(C0.$$scope={dirty:u,ctx:f}),t3.$set(C0);const A3e={};u&2&&(A3e.$$scope={dirty:u,ctx:f}),n3.$set(A3e);const y3e={};u&2&&(y3e.$$scope={dirty:u,ctx:f}),p3.$set(y3e);const w0={};u&2&&(w0.$$scope={dirty:u,ctx:f}),u3.$set(w0);const L3e={};u&2&&(L3e.$$scope={dirty:u,ctx:f}),$3.$set(L3e);const x3e={};u&2&&(x3e.$$scope={dirty:u,ctx:f}),S3.$set(x3e);const A0={};u&2&&(A0.$$scope={dirty:u,ctx:f}),V3.$set(A0);const $3e={};u&2&&($3e.$$scope={dirty:u,ctx:f}),z3.$set($3e);const k3e={};u&2&&(k3e.$$scope={dirty:u,ctx:f}),ow.$set(k3e);const y0={};u&2&&(y0.$$scope={dirty:u,ctx:f}),tw.$set(y0);const S3e={};u&2&&(S3e.$$scope={dirty:u,ctx:f}),hw.$set(S3e);const R3e={};u&2&&(R3e.$$scope={dirty:u,ctx:f}),_w.$set(R3e);const L0={};u&2&&(L0.$$scope={dirty:u,ctx:f}),yw.$set(L0);const P3e={};u&2&&(P3e.$$scope={dirty:u,ctx:f}),xw.$set(P3e);const B3e={};u&2&&(B3e.$$scope={dirty:u,ctx:f}),qw.$set(B3e);const x0={};u&2&&(x0.$$scope={dirty:u,ctx:f}),Dw.$set(x0);const I3e={};u&2&&(I3e.$$scope={dirty:u,ctx:f}),Uw.$set(I3e);const N3e={};u&2&&(N3e.$$scope={dirty:u,ctx:f}),Yw.$set(N3e);const $0={};u&2&&($0.$$scope={dirty:u,ctx:f}),Zw.$set($0);const q3e={};u&2&&(q3e.$$scope={dirty:u,ctx:f}),o0.$set(q3e);const j3e={};u&2&&(j3e.$$scope={dirty:u,ctx:f}),a0.$set(j3e);const k0={};u&2&&(k0.$$scope={dirty:u,ctx:f}),s0.$set(k0);const D3e={};u&2&&(D3e.$$scope={dirty:u,ctx:f}),i0.$set(D3e)},i(f){dDe||(E(d.$$.fragment,f),E(wa.$$.fragment,f),E(xA.$$.fragment,f),E($A.$$.fragment,f),E(Tf.$$.fragment,f),E(kA.$$.fragment,f),E(SA.$$.fragment,f),E(BA.$$.fragment,f),E(Cg.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(qA.$$.fragment,f),E(GA.$$.fragment,f),E(nh.$$.fragment,f),E(OA.$$.fragment,f),E(VA.$$.fragment,f),E(XA.$$.fragment,f),E(QA.$$.fragment,f),E(Nh.$$.fragment,f),E(qh.$$.fragment,f),E(HA.$$.fragment,f),E(UA.$$.fragment,f),E(JA.$$.fragment,f),E(ZA.$$.fragment,f),E(ap.$$.fragment,f),E(np.$$.fragment,f),E(ey.$$.fragment,f),E(oy.$$.fragment,f),E(ry.$$.fragment,f),E(ay.$$.fragment,f),E(ip.$$.fragment,f),E(ny.$$.fragment,f),E(tu.$$.fragment,f),E(sy.$$.fragment,f),E(ly.$$.fragment,f),E(dy.$$.fragment,f),E(nu.$$.fragment,f),E(cy.$$.fragment,f),E(Uu.$$.fragment,f),E(fy.$$.fragment,f),E(my.$$.fragment,f),E(hy.$$.fragment,f),E(Yu.$$.fragment,f),E(py.$$.fragment,f),E(I2.$$.fragment,f),E(_y.$$.fragment,f),E(uy.$$.fragment,f),E(vy.$$.fragment,f),E(q2.$$.fragment,f),E(Fy.$$.fragment,f),E(T1.$$.fragment,f),E(Ty.$$.fragment,f),E(My.$$.fragment,f),E(Cy.$$.fragment,f),E(E1.$$.fragment,f),E(wy.$$.fragment,f),E(G1.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E(xy.$$.fragment,f),E(V1.$$.fragment,f),E($y.$$.fragment,f),E(q7.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Py.$$.fragment,f),E(D7.$$.fragment,f),E(By.$$.fragment,f),E(ub.$$.fragment,f),E(Iy.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(vb.$$.fragment,f),E(Dy.$$.fragment,f),E(Ab.$$.fragment,f),E(Gy.$$.fragment,f),E(Oy.$$.fragment,f),E(Xy.$$.fragment,f),E(Lb.$$.fragment,f),E(zy.$$.fragment,f),E(c4.$$.fragment,f),E(Wy.$$.fragment,f),E(Qy.$$.fragment,f),E(Uy.$$.fragment,f),E(m4.$$.fragment,f),E(Jy.$$.fragment,f),E(ev.$$.fragment,f),E(Yy.$$.fragment,f),E(Ky.$$.fragment,f),E(eL.$$.fragment,f),E(rv.$$.fragment,f),E(oL.$$.fragment,f),E(nv.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(nL.$$.fragment,f),E(lv.$$.fragment,f),E(sL.$$.fragment,f),E(Tv.$$.fragment,f),E(lL.$$.fragment,f),E(iL.$$.fragment,f),E(cL.$$.fragment,f),E(Ev.$$.fragment,f),E(fL.$$.fragment,f),E(Av.$$.fragment,f),E(mL.$$.fragment,f),E(gL.$$.fragment,f),E(pL.$$.fragment,f),E(Lv.$$.fragment,f),E(_L.$$.fragment,f),E(jv.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(FL.$$.fragment,f),E(Gv.$$.fragment,f),E(TL.$$.fragment,f),E(Hv.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(wL.$$.fragment,f),E(Jv.$$.fragment,f),E(AL.$$.fragment,f),E(lF.$$.fragment,f),E(yL.$$.fragment,f),E(LL.$$.fragment,f),E($L.$$.fragment,f),E(dF.$$.fragment,f),E(kL.$$.fragment,f),E(gF.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(pF.$$.fragment,f),E(NL.$$.fragment,f),E(MF.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(CF.$$.fragment,f),E(OL.$$.fragment,f),E(xF.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(WL.$$.fragment,f),E(kF.$$.fragment,f),E(QL.$$.fragment,f),E(BF.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(NF.$$.fragment,f),E(ZL.$$.fragment,f),E(DF.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(OF.$$.fragment,f),E(a8.$$.fragment,f),E(HF.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(JF.$$.fragment,f),E(d8.$$.fragment,f),E(ZF.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(oT.$$.fragment,f),E(h8.$$.fragment,f),E(HT.$$.fragment,f),E(p8.$$.fragment,f),E(_8.$$.fragment,f),E(b8.$$.fragment,f),E(JT.$$.fragment,f),E(v8.$$.fragment,f),E(FM.$$.fragment,f),E(F8.$$.fragment,f),E(T8.$$.fragment,f),E(E8.$$.fragment,f),E(MM.$$.fragment,f),E(C8.$$.fragment,f),E(BM.$$.fragment,f),E(w8.$$.fragment,f),E(A8.$$.fragment,f),E(L8.$$.fragment,f),E(NM.$$.fragment,f),E(x8.$$.fragment,f),E(VM.$$.fragment,f),E($8.$$.fragment,f),E(k8.$$.fragment,f),E(R8.$$.fragment,f),E(zM.$$.fragment,f),E(P8.$$.fragment,f),E(mE.$$.fragment,f),E(B8.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(hE.$$.fragment,f),E(j8.$$.fragment,f),E(wE.$$.fragment,f),E(D8.$$.fragment,f),E(G8.$$.fragment,f),E(V8.$$.fragment,f),E(yE.$$.fragment,f),E(X8.$$.fragment,f),E(eC.$$.fragment,f),E(z8.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(rC.$$.fragment,f),E(U8.$$.fragment,f),E(FC.$$.fragment,f),E(J8.$$.fragment,f),E(Y8.$$.fragment,f),E(Z8.$$.fragment,f),E(MC.$$.fragment,f),E(e9.$$.fragment,f),E(wC.$$.fragment,f),E(r9.$$.fragment,f),E(t9.$$.fragment,f),E(n9.$$.fragment,f),E(yC.$$.fragment,f),E(s9.$$.fragment,f),E(xC.$$.fragment,f),E(l9.$$.fragment,f),E(i9.$$.fragment,f),E(c9.$$.fragment,f),E(kC.$$.fragment,f),E(f9.$$.fragment,f),E(KC.$$.fragment,f),E(m9.$$.fragment,f),E(g9.$$.fragment,f),E(p9.$$.fragment,f),E(e5.$$.fragment,f),E(_9.$$.fragment,f),E(T5.$$.fragment,f),E(u9.$$.fragment,f),E(b9.$$.fragment,f),E(F9.$$.fragment,f),E(E5.$$.fragment,f),E(T9.$$.fragment,f),E(w5.$$.fragment,f),E(M9.$$.fragment,f),E(E9.$$.fragment,f),E(w9.$$.fragment,f),E(y5.$$.fragment,f),E(A9.$$.fragment,f),E(x5.$$.fragment,f),E(y9.$$.fragment,f),E(L9.$$.fragment,f),E($9.$$.fragment,f),E(k5.$$.fragment,f),E(k9.$$.fragment,f),E(t3.$$.fragment,f),E(S9.$$.fragment,f),E(R9.$$.fragment,f),E(B9.$$.fragment,f),E(n3.$$.fragment,f),E(I9.$$.fragment,f),E(p3.$$.fragment,f),E(N9.$$.fragment,f),E(q9.$$.fragment,f),E(D9.$$.fragment,f),E(u3.$$.fragment,f),E(G9.$$.fragment,f),E($3.$$.fragment,f),E(O9.$$.fragment,f),E(V9.$$.fragment,f),E(z9.$$.fragment,f),E(S3.$$.fragment,f),E(W9.$$.fragment,f),E(V3.$$.fragment,f),E(Q9.$$.fragment,f),E(H9.$$.fragment,f),E(J9.$$.fragment,f),E(z3.$$.fragment,f),E(Y9.$$.fragment,f),E(ow.$$.fragment,f),E(K9.$$.fragment,f),E(Z9.$$.fragment,f),E(ox.$$.fragment,f),E(tw.$$.fragment,f),E(rx.$$.fragment,f),E(hw.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(_w.$$.fragment,f),E(lx.$$.fragment,f),E(yw.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(xw.$$.fragment,f),E(mx.$$.fragment,f),E(qw.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(Dw.$$.fragment,f),E(ux.$$.fragment,f),E(Uw.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(Yw.$$.fragment,f),E(Mx.$$.fragment,f),E(Zw.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(o0.$$.fragment,f),E(yx.$$.fragment,f),E(a0.$$.fragment,f),E(xx.$$.fragment,f),E($x.$$.fragment,f),E(Sx.$$.fragment,f),E(s0.$$.fragment,f),E(Rx.$$.fragment,f),E(i0.$$.fragment,f),dDe=!0)},o(f){C(d.$$.fragment,f),C(wa.$$.fragment,f),C(xA.$$.fragment,f),C($A.$$.fragment,f),C(Tf.$$.fragment,f),C(kA.$$.fragment,f),C(SA.$$.fragment,f),C(BA.$$.fragment,f),C(Cg.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(qA.$$.fragment,f),C(GA.$$.fragment,f),C(nh.$$.fragment,f),C(OA.$$.fragment,f),C(VA.$$.fragment,f),C(XA.$$.fragment,f),C(QA.$$.fragment,f),C(Nh.$$.fragment,f),C(qh.$$.fragment,f),C(HA.$$.fragment,f),C(UA.$$.fragment,f),C(JA.$$.fragment,f),C(ZA.$$.fragment,f),C(ap.$$.fragment,f),C(np.$$.fragment,f),C(ey.$$.fragment,f),C(oy.$$.fragment,f),C(ry.$$.fragment,f),C(ay.$$.fragment,f),C(ip.$$.fragment,f),C(ny.$$.fragment,f),C(tu.$$.fragment,f),C(sy.$$.fragment,f),C(ly.$$.fragment,f),C(dy.$$.fragment,f),C(nu.$$.fragment,f),C(cy.$$.fragment,f),C(Uu.$$.fragment,f),C(fy.$$.fragment,f),C(my.$$.fragment,f),C(hy.$$.fragment,f),C(Yu.$$.fragment,f),C(py.$$.fragment,f),C(I2.$$.fragment,f),C(_y.$$.fragment,f),C(uy.$$.fragment,f),C(vy.$$.fragment,f),C(q2.$$.fragment,f),C(Fy.$$.fragment,f),C(T1.$$.fragment,f),C(Ty.$$.fragment,f),C(My.$$.fragment,f),C(Cy.$$.fragment,f),C(E1.$$.fragment,f),C(wy.$$.fragment,f),C(G1.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C(xy.$$.fragment,f),C(V1.$$.fragment,f),C($y.$$.fragment,f),C(q7.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Py.$$.fragment,f),C(D7.$$.fragment,f),C(By.$$.fragment,f),C(ub.$$.fragment,f),C(Iy.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(vb.$$.fragment,f),C(Dy.$$.fragment,f),C(Ab.$$.fragment,f),C(Gy.$$.fragment,f),C(Oy.$$.fragment,f),C(Xy.$$.fragment,f),C(Lb.$$.fragment,f),C(zy.$$.fragment,f),C(c4.$$.fragment,f),C(Wy.$$.fragment,f),C(Qy.$$.fragment,f),C(Uy.$$.fragment,f),C(m4.$$.fragment,f),C(Jy.$$.fragment,f),C(ev.$$.fragment,f),C(Yy.$$.fragment,f),C(Ky.$$.fragment,f),C(eL.$$.fragment,f),C(rv.$$.fragment,f),C(oL.$$.fragment,f),C(nv.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(nL.$$.fragment,f),C(lv.$$.fragment,f),C(sL.$$.fragment,f),C(Tv.$$.fragment,f),C(lL.$$.fragment,f),C(iL.$$.fragment,f),C(cL.$$.fragment,f),C(Ev.$$.fragment,f),C(fL.$$.fragment,f),C(Av.$$.fragment,f),C(mL.$$.fragment,f),C(gL.$$.fragment,f),C(pL.$$.fragment,f),C(Lv.$$.fragment,f),C(_L.$$.fragment,f),C(jv.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(FL.$$.fragment,f),C(Gv.$$.fragment,f),C(TL.$$.fragment,f),C(Hv.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(wL.$$.fragment,f),C(Jv.$$.fragment,f),C(AL.$$.fragment,f),C(lF.$$.fragment,f),C(yL.$$.fragment,f),C(LL.$$.fragment,f),C($L.$$.fragment,f),C(dF.$$.fragment,f),C(kL.$$.fragment,f),C(gF.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(pF.$$.fragment,f),C(NL.$$.fragment,f),C(MF.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(CF.$$.fragment,f),C(OL.$$.fragment,f),C(xF.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(WL.$$.fragment,f),C(kF.$$.fragment,f),C(QL.$$.fragment,f),C(BF.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(NF.$$.fragment,f),C(ZL.$$.fragment,f),C(DF.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(OF.$$.fragment,f),C(a8.$$.fragment,f),C(HF.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(JF.$$.fragment,f),C(d8.$$.fragment,f),C(ZF.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(oT.$$.fragment,f),C(h8.$$.fragment,f),C(HT.$$.fragment,f),C(p8.$$.fragment,f),C(_8.$$.fragment,f),C(b8.$$.fragment,f),C(JT.$$.fragment,f),C(v8.$$.fragment,f),C(FM.$$.fragment,f),C(F8.$$.fragment,f),C(T8.$$.fragment,f),C(E8.$$.fragment,f),C(MM.$$.fragment,f),C(C8.$$.fragment,f),C(BM.$$.fragment,f),C(w8.$$.fragment,f),C(A8.$$.fragment,f),C(L8.$$.fragment,f),C(NM.$$.fragment,f),C(x8.$$.fragment,f),C(VM.$$.fragment,f),C($8.$$.fragment,f),C(k8.$$.fragment,f),C(R8.$$.fragment,f),C(zM.$$.fragment,f),C(P8.$$.fragment,f),C(mE.$$.fragment,f),C(B8.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(hE.$$.fragment,f),C(j8.$$.fragment,f),C(wE.$$.fragment,f),C(D8.$$.fragment,f),C(G8.$$.fragment,f),C(V8.$$.fragment,f),C(yE.$$.fragment,f),C(X8.$$.fragment,f),C(eC.$$.fragment,f),C(z8.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(rC.$$.fragment,f),C(U8.$$.fragment,f),C(FC.$$.fragment,f),C(J8.$$.fragment,f),C(Y8.$$.fragment,f),C(Z8.$$.fragment,f),C(MC.$$.fragment,f),C(e9.$$.fragment,f),C(wC.$$.fragment,f),C(r9.$$.fragment,f),C(t9.$$.fragment,f),C(n9.$$.fragment,f),C(yC.$$.fragment,f),C(s9.$$.fragment,f),C(xC.$$.fragment,f),C(l9.$$.fragment,f),C(i9.$$.fragment,f),C(c9.$$.fragment,f),C(kC.$$.fragment,f),C(f9.$$.fragment,f),C(KC.$$.fragment,f),C(m9.$$.fragment,f),C(g9.$$.fragment,f),C(p9.$$.fragment,f),C(e5.$$.fragment,f),C(_9.$$.fragment,f),C(T5.$$.fragment,f),C(u9.$$.fragment,f),C(b9.$$.fragment,f),C(F9.$$.fragment,f),C(E5.$$.fragment,f),C(T9.$$.fragment,f),C(w5.$$.fragment,f),C(M9.$$.fragment,f),C(E9.$$.fragment,f),C(w9.$$.fragment,f),C(y5.$$.fragment,f),C(A9.$$.fragment,f),C(x5.$$.fragment,f),C(y9.$$.fragment,f),C(L9.$$.fragment,f),C($9.$$.fragment,f),C(k5.$$.fragment,f),C(k9.$$.fragment,f),C(t3.$$.fragment,f),C(S9.$$.fragment,f),C(R9.$$.fragment,f),C(B9.$$.fragment,f),C(n3.$$.fragment,f),C(I9.$$.fragment,f),C(p3.$$.fragment,f),C(N9.$$.fragment,f),C(q9.$$.fragment,f),C(D9.$$.fragment,f),C(u3.$$.fragment,f),C(G9.$$.fragment,f),C($3.$$.fragment,f),C(O9.$$.fragment,f),C(V9.$$.fragment,f),C(z9.$$.fragment,f),C(S3.$$.fragment,f),C(W9.$$.fragment,f),C(V3.$$.fragment,f),C(Q9.$$.fragment,f),C(H9.$$.fragment,f),C(J9.$$.fragment,f),C(z3.$$.fragment,f),C(Y9.$$.fragment,f),C(ow.$$.fragment,f),C(K9.$$.fragment,f),C(Z9.$$.fragment,f),C(ox.$$.fragment,f),C(tw.$$.fragment,f),C(rx.$$.fragment,f),C(hw.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(_w.$$.fragment,f),C(lx.$$.fragment,f),C(yw.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(xw.$$.fragment,f),C(mx.$$.fragment,f),C(qw.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(Dw.$$.fragment,f),C(ux.$$.fragment,f),C(Uw.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(Yw.$$.fragment,f),C(Mx.$$.fragment,f),C(Zw.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(o0.$$.fragment,f),C(yx.$$.fragment,f),C(a0.$$.fragment,f),C(xx.$$.fragment,f),C($x.$$.fragment,f),C(Sx.$$.fragment,f),C(s0.$$.fragment,f),C(Rx.$$.fragment,f),C(i0.$$.fragment,f),dDe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(_f),f&&t(tt),f&&t(je),f&&t(We),f&&t(bf),w(wa,f),f&&t(Qe),f&&t(Ae),f&&t(Eo),f&&t(Aa),f&&t(sqe),f&&t(vi),w(xA),f&&t(lqe),f&&t(kn),f&&t(iqe),w($A,f),f&&t(dqe),f&&t(K$),f&&t(cqe),w(Tf,f),f&&t(fqe),f&&t(Fi),w(kA),f&&t(mqe),f&&t(Co),w(SA),w(BA),w(Cg),w(IA),f&&t(gqe),f&&t(Mi),w(NA),f&&t(hqe),f&&t(wo),w(qA),w(GA),w(nh),w(OA),f&&t(pqe),f&&t(Ei),w(VA),f&&t(_qe),f&&t(Ao),w(XA),w(QA),w(Nh),w(qh),w(HA),f&&t(uqe),f&&t(Ci),w(UA),f&&t(bqe),f&&t(yo),w(JA),w(ZA),w(ap),w(np),w(ey),f&&t(vqe),f&&t(Ai),w(oy),f&&t(Fqe),f&&t(Lo),w(ry),w(ay),w(ip),w(ny),w(tu),f&&t(Tqe),f&&t(xi),w(sy),f&&t(Mqe),f&&t(xo),w(ly),w(dy),w(nu),w(cy),w(Uu),f&&t(Eqe),f&&t(Si),w(fy),f&&t(Cqe),f&&t($o),w(my),w(hy),w(Yu),w(py),w(I2),f&&t(wqe),f&&t(Bi),w(_y),f&&t(Aqe),f&&t(ko),w(uy),w(vy),w(q2),w(Fy),w(T1),f&&t(yqe),f&&t(qi),w(Ty),f&&t(Lqe),f&&t(So),w(My),w(Cy),w(E1),w(wy),w(G1),f&&t(xqe),f&&t(Gi),w(Ay),f&&t($qe),f&&t(Ro),w(yy),w(xy),w(V1),w($y),w(q7),f&&t(kqe),f&&t(Xi),w(ky),f&&t(Sqe),f&&t(Po),w(Sy),w(Py),w(D7),w(By),w(ub),f&&t(Rqe),f&&t(Qi),w(Iy),f&&t(Pqe),f&&t(Bo),w(Ny),w(jy),w(vb),w(Dy),w(Ab),f&&t(Bqe),f&&t(Ji),w(Gy),f&&t(Iqe),f&&t(Io),w(Oy),w(Xy),w(Lb),w(zy),w(c4),f&&t(Nqe),f&&t(Zi),w(Wy),f&&t(qqe),f&&t(No),w(Qy),w(Uy),w(m4),w(Jy),w(ev),f&&t(jqe),f&&t(rd),w(Yy),f&&t(Dqe),f&&t(qo),w(Ky),w(eL),w(rv),w(oL),w(nv),f&&t(Gqe),f&&t(nd),w(rL),f&&t(Oqe),f&&t(jo),w(tL),w(nL),w(lv),w(sL),w(Tv),f&&t(Vqe),f&&t(id),w(lL),f&&t(Xqe),f&&t(Do),w(iL),w(cL),w(Ev),w(fL),w(Av),f&&t(zqe),f&&t(fd),w(mL),f&&t(Wqe),f&&t(Go),w(gL),w(pL),w(Lv),w(_L),w(jv),f&&t(Qqe),f&&t(hd),w(uL),f&&t(Hqe),f&&t(Oo),w(bL),w(FL),w(Gv),w(TL),w(Hv),f&&t(Uqe),f&&t(ud),w(ML),f&&t(Jqe),f&&t(Vo),w(EL),w(wL),w(Jv),w(AL),w(lF),f&&t(Yqe),f&&t(Fd),w(yL),f&&t(Kqe),f&&t(Xo),w(LL),w($L),w(dF),w(kL),w(gF),f&&t(Zqe),f&&t(Ed),w(RL),f&&t(eje),f&&t(zo),w(PL),w(IL),w(pF),w(NL),w(MF),f&&t(oje),f&&t(Ad),w(qL),f&&t(rje),f&&t(Wo),w(jL),w(GL),w(CF),w(OL),w(xF),f&&t(tje),f&&t($d),w(VL),f&&t(aje),f&&t(Qo),w(XL),w(WL),w(kF),w(QL),w(BF),f&&t(nje),f&&t(Rd),w(UL),f&&t(sje),f&&t(Ho),w(JL),w(KL),w(NF),w(ZL),w(DF),f&&t(lje),f&&t(Id),w(e8),f&&t(ije),f&&t(Uo),w(o8),w(t8),w(OF),w(a8),w(HF),f&&t(dje),f&&t(jd),w(n8),f&&t(cje),f&&t(Jo),w(s8),w(i8),w(JF),w(d8),w(ZF),f&&t(fje),f&&t(Od),w(c8),f&&t(mje),f&&t(Yo),w(f8),w(g8),w(oT),w(h8),w(HT),f&&t(gje),f&&t(zd),w(p8),f&&t(hje),f&&t(Ko),w(_8),w(b8),w(JT),w(v8),w(FM),f&&t(pje),f&&t(Hd),w(F8),f&&t(_je),f&&t(Zo),w(T8),w(E8),w(MM),w(C8),w(BM),f&&t(uje),f&&t(Yd),w(w8),f&&t(bje),f&&t(er),w(A8),w(L8),w(NM),w(x8),w(VM),f&&t(vje),f&&t(ec),w($8),f&&t(Fje),f&&t(or),w(k8),w(R8),w(zM),w(P8),w(mE),f&&t(Tje),f&&t(tc),w(B8),f&&t(Mje),f&&t(rr),w(I8),w(q8),w(hE),w(j8),w(wE),f&&t(Eje),f&&t(sc),w(D8),f&&t(Cje),f&&t(tr),w(G8),w(V8),w(yE),w(X8),w(eC),f&&t(wje),f&&t(dc),w(z8),f&&t(Aje),f&&t(ar),w(W8),w(H8),w(rC),w(U8),w(FC),f&&t(yje),f&&t(mc),w(J8),f&&t(Lje),f&&t(nr),w(Y8),w(Z8),w(MC),w(e9),w(wC),f&&t(xje),f&&t(pc),w(r9),f&&t($je),f&&t(sr),w(t9),w(n9),w(yC),w(s9),w(xC),f&&t(kje),f&&t(bc),w(l9),f&&t(Sje),f&&t(lr),w(i9),w(c9),w(kC),w(f9),w(KC),f&&t(Rje),f&&t(Tc),w(m9),f&&t(Pje),f&&t(ir),w(g9),w(p9),w(e5),w(_9),w(T5),f&&t(Bje),f&&t(Cc),w(u9),f&&t(Ije),f&&t(dr),w(b9),w(F9),w(E5),w(T9),w(w5),f&&t(Nje),f&&t(yc),w(M9),f&&t(qje),f&&t(cr),w(E9),w(w9),w(y5),w(A9),w(x5),f&&t(jje),f&&t($c),w(y9),f&&t(Dje),f&&t(fr),w(L9),w($9),w(k5),w(k9),w(t3),f&&t(Gje),f&&t(Rc),w(S9),f&&t(Oje),f&&t(mr),w(R9),w(B9),w(n3),w(I9),w(p3),f&&t(Vje),f&&t(Ic),w(N9),f&&t(Xje),f&&t(gr),w(q9),w(D9),w(u3),w(G9),w($3),f&&t(zje),f&&t(jc),w(O9),f&&t(Wje),f&&t(hr),w(V9),w(z9),w(S3),w(W9),w(V3),f&&t(Qje),f&&t(Oc),w(Q9),f&&t(Hje),f&&t(pr),w(H9),w(J9),w(z3),w(Y9),w(ow),f&&t(Uje),f&&t(zc),w(K9),f&&t(Jje),f&&t(_r),w(Z9),w(ox),w(tw),w(rx),w(hw),f&&t(Yje),f&&t(Hc),w(tx),f&&t(Kje),f&&t(ur),w(ax),w(sx),w(_w),w(lx),w(yw),f&&t(Zje),f&&t(Yc),w(ix),f&&t(eDe),f&&t(br),w(dx),w(fx),w(xw),w(mx),w(qw),f&&t(oDe),f&&t(ef),w(gx),f&&t(rDe),f&&t(vr),w(hx),w(_x),w(Dw),w(ux),w(Uw),f&&t(tDe),f&&t(tf),w(bx),f&&t(aDe),f&&t(Fr),w(vx),w(Tx),w(Yw),w(Mx),w(Zw),f&&t(nDe),f&&t(sf),w(Ex),f&&t(sDe),f&&t(Tr),w(Cx),w(Ax),w(o0),w(yx),w(a0),f&&t(lDe),f&&t(cf),w(xx),f&&t(iDe),f&&t(Mr),w($x),w(Sx),w(s0),w(Rx),w(i0)}}}const kSt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function SSt(L){return S$t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class jSt extends L$t{constructor(g){super();x$t(this,g,SSt,$St,$$t,{})}}export{jSt as default,kSt as metadata};
