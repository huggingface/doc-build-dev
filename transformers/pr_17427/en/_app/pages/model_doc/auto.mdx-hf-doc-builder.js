import{S as DIt,i as GIt,s as OIt,e as a,k as l,w as F,t as o,M as VIt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as XIt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as oUr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function zIt(L){let g,v,p,m,u,d,h,Eo,Fi,yf,nt,Ti,Mi,iy,Lf,Ge,We,Ei,Sn,dy,Rn,Pn,cy,Ci,Bn,fy,wi,xf,xa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),yf=o("model_type"),nt=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),iy=o(")."),Lf=l(),Ge=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),dy=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),cy=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),fy=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),xf=o("NewModelConfig"),xa=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Nk=s(p);m=r(Nk,"NewModelConfig"),Nk.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var qk=s(Fi);yf=r(qk,"model_type"),qk.forEach(t),nt=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var jk=s(Ti);Mi=r(jk,'"new-model"'),jk.forEach(t),iy=r(Ae,")."),Ae.forEach(t),Lf=i(Qe),Ge=n(Qe,"P",{});var Co=s(Ge);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var $a=s(Ei);Sn=r($a,"NewModel"),$a.forEach(t),dy=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Dk=s(Rn);Pn=r(Dk,"PreTrainedModel"),Dk.forEach(t),cy=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var $f=s(Ci);Bn=r($f,"config_class"),$f.forEach(t),fy=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Gk=s(wi);xf=r(Gk,"NewModelConfig"),Gk.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,yf),e(g,nt),e(g,Ti),e(Ti,Mi),e(g,iy),b(Qe,Lf,Ae),b(Qe,Ge,Ae),e(Ge,We),e(Ge,Ei),e(Ei,Sn),e(Ge,dy),e(Ge,Rn),e(Rn,Pn),e(Ge,cy),e(Ge,Ci),e(Ci,Bn),e(Ge,fy),e(Ge,wi),e(wi,xf),e(Ge,xa)},d(Qe){Qe&&t(g),Qe&&t(Lf),Qe&&t(Ge)}}}function WIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HIt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function UIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JIt(L){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function YIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZIt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Nt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ENt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ANt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Nt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function INt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ONt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZNt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _qt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Fqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Tqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Mqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Eqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Cqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Aqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Lqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $qt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Sqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Rqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Pqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Bqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Iqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Nqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Dqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Gqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Oqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Vqt(L){let g,v,p,m,u;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Xqt(L){let g,v,p,m,u,d,h,Eo,Fi,yf,nt,Ti,Mi,iy,Lf,Ge,We,Ei,Sn,dy,Rn,Pn,cy,Ci,Bn,fy,wi,xf,xa,Qe,Ae,Nk,Ai,qk,jk,Co,$a,Dk,$f,Gk,qXe,EDe,yi,kf,Lre,my,jXe,xre,DXe,CDe,In,GXe,$re,OXe,VXe,kre,XXe,zXe,wDe,gy,ADe,Ok,WXe,yDe,Sf,LDe,Li,Rf,Sre,hy,QXe,Rre,HXe,xDe,wo,py,UXe,uy,JXe,Vk,YXe,KXe,ZXe,_y,eze,Pre,oze,rze,tze,wr,by,aze,Bre,nze,sze,xi,lze,Ire,ize,dze,Nre,cze,fze,mze,A,Pf,qre,gze,hze,Xk,pze,uze,_ze,Bf,jre,bze,vze,zk,Fze,Tze,Mze,If,Dre,Eze,Cze,Wk,wze,Aze,yze,Nf,Gre,Lze,xze,Qk,$ze,kze,Sze,qf,Ore,Rze,Pze,Hk,Bze,Ize,Nze,jf,Vre,qze,jze,Uk,Dze,Gze,Oze,Df,Xre,Vze,Xze,Jk,zze,Wze,Qze,Gf,zre,Hze,Uze,Yk,Jze,Yze,Kze,Of,Wre,Zze,eWe,Kk,oWe,rWe,tWe,Vf,Qre,aWe,nWe,Zk,sWe,lWe,iWe,Xf,Hre,dWe,cWe,eS,fWe,mWe,gWe,zf,Ure,hWe,pWe,oS,uWe,_We,bWe,Wf,Jre,vWe,FWe,rS,TWe,MWe,EWe,Qf,Yre,CWe,wWe,tS,AWe,yWe,LWe,Hf,Kre,xWe,$We,aS,kWe,SWe,RWe,Uf,Zre,PWe,BWe,nS,IWe,NWe,qWe,Jf,ete,jWe,DWe,sS,GWe,OWe,VWe,Yf,ote,XWe,zWe,lS,WWe,QWe,HWe,Kf,rte,UWe,JWe,iS,YWe,KWe,ZWe,Zf,tte,eQe,oQe,dS,rQe,tQe,aQe,em,ate,nQe,sQe,cS,lQe,iQe,dQe,om,nte,cQe,fQe,fS,mQe,gQe,hQe,rm,ste,pQe,uQe,mS,_Qe,bQe,vQe,tm,lte,FQe,TQe,gS,MQe,EQe,CQe,am,ite,wQe,AQe,hS,yQe,LQe,xQe,nm,dte,$Qe,kQe,pS,SQe,RQe,PQe,sm,cte,BQe,IQe,uS,NQe,qQe,jQe,lm,fte,DQe,GQe,_S,OQe,VQe,XQe,im,mte,zQe,WQe,bS,QQe,HQe,UQe,dm,gte,JQe,YQe,vS,KQe,ZQe,eHe,cm,hte,oHe,rHe,FS,tHe,aHe,nHe,fm,pte,sHe,lHe,TS,iHe,dHe,cHe,mm,ute,fHe,mHe,MS,gHe,hHe,pHe,gm,_te,uHe,_He,ES,bHe,vHe,FHe,hm,bte,THe,MHe,CS,EHe,CHe,wHe,pm,vte,AHe,yHe,wS,LHe,xHe,$He,um,Fte,kHe,SHe,AS,RHe,PHe,BHe,_m,Tte,IHe,NHe,yS,qHe,jHe,DHe,bm,Mte,GHe,OHe,LS,VHe,XHe,zHe,vm,Ete,WHe,QHe,xS,HHe,UHe,JHe,Fm,Cte,YHe,KHe,$S,ZHe,eUe,oUe,Tm,wte,rUe,tUe,kS,aUe,nUe,sUe,Mm,Ate,lUe,iUe,SS,dUe,cUe,fUe,Em,yte,mUe,gUe,RS,hUe,pUe,uUe,Cm,Lte,_Ue,bUe,PS,vUe,FUe,TUe,wm,xte,MUe,EUe,BS,CUe,wUe,AUe,Am,$te,yUe,LUe,IS,xUe,$Ue,kUe,ym,kte,SUe,RUe,NS,PUe,BUe,IUe,Lm,Ste,NUe,qUe,qS,jUe,DUe,GUe,xm,Rte,OUe,VUe,jS,XUe,zUe,WUe,$m,Pte,QUe,HUe,DS,UUe,JUe,YUe,km,Bte,KUe,ZUe,GS,eJe,oJe,rJe,Sm,Ite,tJe,aJe,OS,nJe,sJe,lJe,Rm,Nte,iJe,dJe,VS,cJe,fJe,mJe,Pm,qte,gJe,hJe,XS,pJe,uJe,_Je,Bm,jte,bJe,vJe,zS,FJe,TJe,MJe,Im,Dte,EJe,CJe,WS,wJe,AJe,yJe,Nm,Gte,LJe,xJe,QS,$Je,kJe,SJe,qm,Ote,RJe,PJe,HS,BJe,IJe,NJe,jm,Vte,qJe,jJe,US,DJe,GJe,OJe,Dm,Xte,VJe,XJe,JS,zJe,WJe,QJe,Gm,zte,HJe,UJe,YS,JJe,YJe,KJe,Om,Wte,ZJe,eYe,KS,oYe,rYe,tYe,Vm,Qte,aYe,nYe,ZS,sYe,lYe,iYe,Xm,Hte,dYe,cYe,eR,fYe,mYe,gYe,zm,Ute,hYe,pYe,oR,uYe,_Ye,bYe,Wm,Jte,vYe,FYe,rR,TYe,MYe,EYe,Qm,Yte,CYe,wYe,tR,AYe,yYe,LYe,Hm,Kte,xYe,$Ye,aR,kYe,SYe,RYe,Um,Zte,PYe,BYe,nR,IYe,NYe,qYe,Jm,eae,jYe,DYe,sR,GYe,OYe,VYe,Ym,oae,XYe,zYe,lR,WYe,QYe,HYe,Km,rae,UYe,JYe,iR,YYe,KYe,ZYe,Zm,tae,eKe,oKe,dR,rKe,tKe,aKe,eg,aae,nKe,sKe,cR,lKe,iKe,dKe,og,nae,cKe,fKe,fR,mKe,gKe,hKe,rg,sae,pKe,uKe,mR,_Ke,bKe,vKe,tg,lae,FKe,TKe,gR,MKe,EKe,CKe,ag,iae,wKe,AKe,hR,yKe,LKe,xKe,ng,dae,$Ke,kKe,pR,SKe,RKe,PKe,sg,cae,BKe,IKe,uR,NKe,qKe,jKe,lg,fae,DKe,GKe,_R,OKe,VKe,XKe,ig,mae,zKe,WKe,bR,QKe,HKe,UKe,dg,gae,JKe,YKe,vR,KKe,ZKe,eZe,cg,hae,oZe,rZe,FR,tZe,aZe,nZe,fg,pae,sZe,lZe,TR,iZe,dZe,cZe,mg,uae,fZe,mZe,MR,gZe,hZe,pZe,gg,_ae,uZe,_Ze,ER,bZe,vZe,FZe,hg,bae,TZe,MZe,CR,EZe,CZe,wZe,pg,vae,AZe,yZe,wR,LZe,xZe,$Ze,ug,Fae,kZe,SZe,AR,RZe,PZe,BZe,_g,Tae,IZe,NZe,yR,qZe,jZe,DZe,bg,Mae,GZe,OZe,LR,VZe,XZe,zZe,vg,Eae,WZe,QZe,xR,HZe,UZe,JZe,Fg,Cae,YZe,KZe,$R,ZZe,eeo,oeo,Tg,wae,reo,teo,kR,aeo,neo,seo,Mg,Aae,leo,ieo,SR,deo,ceo,feo,Eg,yae,meo,geo,RR,heo,peo,ueo,Cg,Lae,_eo,beo,PR,veo,Feo,Teo,wg,xae,Meo,Eeo,BR,Ceo,weo,Aeo,Ag,$ae,yeo,Leo,IR,xeo,$eo,keo,yg,kae,Seo,Reo,NR,Peo,Beo,Ieo,Lg,Sae,Neo,qeo,qR,jeo,Deo,Geo,xg,Rae,Oeo,Veo,jR,Xeo,zeo,Weo,$g,Pae,Qeo,Heo,DR,Ueo,Jeo,Yeo,kg,Bae,Keo,Zeo,GR,eoo,ooo,roo,Sg,Iae,too,aoo,OR,noo,soo,loo,Rg,Nae,ioo,doo,VR,coo,foo,moo,Pg,qae,goo,hoo,XR,poo,uoo,_oo,Bg,jae,boo,voo,zR,Foo,Too,Moo,Ig,Dae,Eoo,Coo,WR,woo,Aoo,yoo,Ng,Gae,Loo,xoo,QR,$oo,koo,Soo,qg,Roo,jg,vy,Poo,Oae,Boo,$De,$i,Dg,Vae,Fy,Ioo,Xae,Noo,kDe,Ao,Ty,qoo,My,joo,HR,Doo,Goo,Ooo,Ey,Voo,zae,Xoo,zoo,Woo,Ar,Cy,Qoo,Wae,Hoo,Uoo,ka,Joo,Qae,Yoo,Koo,Hae,Zoo,ero,Uae,oro,rro,tro,k,Nn,Jae,aro,nro,UR,sro,lro,JR,iro,dro,cro,qn,Yae,fro,mro,YR,gro,hro,KR,pro,uro,_ro,jn,Kae,bro,vro,ZR,Fro,Tro,eP,Mro,Ero,Cro,Gg,Zae,wro,Aro,oP,yro,Lro,xro,Dn,ene,$ro,kro,rP,Sro,Rro,tP,Pro,Bro,Iro,Og,one,Nro,qro,aP,jro,Dro,Gro,Vg,rne,Oro,Vro,nP,Xro,zro,Wro,Xg,tne,Qro,Hro,sP,Uro,Jro,Yro,Gn,ane,Kro,Zro,lP,eto,oto,iP,rto,tto,ato,On,nne,nto,sto,dP,lto,ito,cP,dto,cto,fto,Vn,sne,mto,gto,fP,hto,pto,mP,uto,_to,bto,zg,lne,vto,Fto,gP,Tto,Mto,Eto,Wg,ine,Cto,wto,hP,Ato,yto,Lto,Qg,dne,xto,$to,pP,kto,Sto,Rto,Xn,cne,Pto,Bto,uP,Ito,Nto,_P,qto,jto,Dto,Hg,fne,Gto,Oto,bP,Vto,Xto,zto,zn,mne,Wto,Qto,vP,Hto,Uto,FP,Jto,Yto,Kto,Wn,gne,Zto,eao,TP,oao,rao,MP,tao,aao,nao,Qn,hne,sao,lao,EP,iao,dao,CP,cao,fao,mao,Ug,pne,gao,hao,wP,pao,uao,_ao,Hn,une,bao,vao,AP,Fao,Tao,yP,Mao,Eao,Cao,Un,_ne,wao,Aao,LP,yao,Lao,xP,xao,$ao,kao,Jn,bne,Sao,Rao,$P,Pao,Bao,kP,Iao,Nao,qao,Yn,vne,jao,Dao,SP,Gao,Oao,RP,Vao,Xao,zao,Kn,Fne,Wao,Qao,PP,Hao,Uao,BP,Jao,Yao,Kao,Zn,Tne,Zao,eno,IP,ono,rno,NP,tno,ano,nno,Jg,Mne,sno,lno,qP,ino,dno,cno,es,Ene,fno,mno,jP,gno,hno,DP,pno,uno,_no,Yg,Cne,bno,vno,GP,Fno,Tno,Mno,os,wne,Eno,Cno,OP,wno,Ano,VP,yno,Lno,xno,rs,Ane,$no,kno,XP,Sno,Rno,zP,Pno,Bno,Ino,ts,yne,Nno,qno,WP,jno,Dno,QP,Gno,Ono,Vno,Kg,Lne,Xno,zno,HP,Wno,Qno,Hno,as,xne,Uno,Jno,UP,Yno,Kno,JP,Zno,eso,oso,ns,$ne,rso,tso,YP,aso,nso,KP,sso,lso,iso,Zg,kne,dso,cso,ZP,fso,mso,gso,ss,Sne,hso,pso,eB,uso,_so,oB,bso,vso,Fso,ls,Rne,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,yso,is,Pne,Lso,xso,aB,$so,kso,nB,Sso,Rso,Pso,ds,Bne,Bso,Iso,sB,Nso,qso,lB,jso,Dso,Gso,cs,Ine,Oso,Vso,iB,Xso,zso,dB,Wso,Qso,Hso,fs,Nne,Uso,Jso,cB,Yso,Kso,fB,Zso,elo,olo,ms,qne,rlo,tlo,mB,alo,nlo,gB,slo,llo,ilo,eh,jne,dlo,clo,hB,flo,mlo,glo,gs,Dne,hlo,plo,pB,ulo,_lo,uB,blo,vlo,Flo,oh,Gne,Tlo,Mlo,_B,Elo,Clo,wlo,rh,One,Alo,ylo,bB,Llo,xlo,$lo,hs,Vne,klo,Slo,vB,Rlo,Plo,FB,Blo,Ilo,Nlo,ps,Xne,qlo,jlo,TB,Dlo,Glo,MB,Olo,Vlo,Xlo,us,zne,zlo,Wlo,EB,Qlo,Hlo,CB,Ulo,Jlo,Ylo,th,Wne,Klo,Zlo,wB,eio,oio,rio,_s,Qne,tio,aio,AB,nio,sio,yB,lio,iio,dio,bs,Hne,cio,fio,LB,mio,gio,xB,hio,pio,uio,vs,Une,_io,bio,$B,vio,Fio,kB,Tio,Mio,Eio,Fs,Jne,Cio,wio,SB,Aio,yio,RB,Lio,xio,$io,Ts,Yne,kio,Sio,PB,Rio,Pio,BB,Bio,Iio,Nio,ah,Kne,qio,jio,IB,Dio,Gio,Oio,Ms,Zne,Vio,Xio,NB,zio,Wio,qB,Qio,Hio,Uio,nh,ese,Jio,Yio,jB,Kio,Zio,edo,sh,ose,odo,rdo,DB,tdo,ado,ndo,lh,rse,sdo,ldo,GB,ido,ddo,cdo,ih,tse,fdo,mdo,OB,gdo,hdo,pdo,Es,ase,udo,_do,VB,bdo,vdo,XB,Fdo,Tdo,Mdo,dh,nse,Edo,Cdo,zB,wdo,Ado,ydo,Cs,sse,Ldo,xdo,WB,$do,kdo,QB,Sdo,Rdo,Pdo,ws,lse,Bdo,Ido,HB,Ndo,qdo,UB,jdo,Ddo,Gdo,As,ise,Odo,Vdo,JB,Xdo,zdo,YB,Wdo,Qdo,Hdo,ys,dse,Udo,Jdo,KB,Ydo,Kdo,ZB,Zdo,eco,oco,Ls,cse,rco,tco,eI,aco,nco,oI,sco,lco,ico,xs,fse,dco,cco,rI,fco,mco,tI,gco,hco,pco,ch,mse,uco,_co,aI,bco,vco,Fco,fh,gse,Tco,Mco,nI,Eco,Cco,wco,$s,hse,Aco,yco,sI,Lco,xco,lI,$co,kco,Sco,ks,pse,Rco,Pco,iI,Bco,Ico,dI,Nco,qco,jco,Ss,use,Dco,Gco,cI,Oco,Vco,fI,Xco,zco,Wco,mh,_se,Qco,Hco,mI,Uco,Jco,Yco,gh,bse,Kco,Zco,gI,efo,ofo,rfo,hh,vse,tfo,afo,hI,nfo,sfo,lfo,Rs,Fse,ifo,dfo,pI,cfo,ffo,uI,mfo,gfo,hfo,Ps,Tse,pfo,ufo,_I,_fo,bfo,bI,vfo,Ffo,Tfo,ph,Mse,Mfo,Efo,vI,Cfo,wfo,Afo,uh,Ese,yfo,Lfo,FI,xfo,$fo,kfo,_h,Cse,Sfo,Rfo,TI,Pfo,Bfo,Ifo,Bs,wse,Nfo,qfo,MI,jfo,Dfo,EI,Gfo,Ofo,Vfo,bh,Ase,Xfo,zfo,CI,Wfo,Qfo,Hfo,vh,yse,Ufo,Jfo,wI,Yfo,Kfo,Zfo,Is,Lse,emo,omo,AI,rmo,tmo,yI,amo,nmo,smo,Ns,xse,lmo,imo,LI,dmo,cmo,xI,fmo,mmo,gmo,qs,$se,hmo,pmo,$I,umo,_mo,kI,bmo,vmo,Fmo,js,kse,Tmo,Mmo,SI,Emo,Cmo,RI,wmo,Amo,ymo,Fh,Lmo,Th,wy,xmo,Sse,$mo,SDe,ki,Mh,Rse,Ay,kmo,Pse,Smo,RDe,yo,yy,Rmo,Ly,Pmo,PI,Bmo,Imo,Nmo,xy,qmo,Bse,jmo,Dmo,Gmo,He,$y,Omo,Ise,Vmo,Xmo,Sa,zmo,Nse,Wmo,Qmo,qse,Hmo,Umo,jse,Jmo,Ymo,Kmo,Y,Eh,Dse,Zmo,ego,BI,ogo,rgo,tgo,Ch,Gse,ago,ngo,II,sgo,lgo,igo,wh,Ose,dgo,cgo,NI,fgo,mgo,ggo,Ah,Vse,hgo,pgo,qI,ugo,_go,bgo,yh,Xse,vgo,Fgo,jI,Tgo,Mgo,Ego,Lh,zse,Cgo,wgo,DI,Ago,ygo,Lgo,xh,Wse,xgo,$go,GI,kgo,Sgo,Rgo,$h,Qse,Pgo,Bgo,OI,Igo,Ngo,qgo,kh,Hse,jgo,Dgo,VI,Ggo,Ogo,Vgo,Sh,Use,Xgo,zgo,XI,Wgo,Qgo,Hgo,Rh,Jse,Ugo,Jgo,zI,Ygo,Kgo,Zgo,Ph,Yse,eho,oho,WI,rho,tho,aho,Bh,Kse,nho,sho,QI,lho,iho,dho,Ih,Zse,cho,fho,HI,mho,gho,hho,Nh,ele,pho,uho,UI,_ho,bho,vho,qh,ole,Fho,Tho,JI,Mho,Eho,Cho,jh,rle,who,Aho,YI,yho,Lho,xho,Dh,tle,$ho,kho,KI,Sho,Rho,Pho,Gh,ale,Bho,Iho,ZI,Nho,qho,jho,Oh,nle,Dho,Gho,eN,Oho,Vho,Xho,Vh,sle,zho,Who,oN,Qho,Hho,Uho,Xh,lle,Jho,Yho,rN,Kho,Zho,epo,zh,ile,opo,rpo,tN,tpo,apo,npo,Wh,dle,spo,lpo,aN,ipo,dpo,cpo,Qh,cle,fpo,mpo,nN,gpo,hpo,ppo,Hh,fle,upo,_po,sN,bpo,vpo,Fpo,Uh,mle,Tpo,Mpo,lN,Epo,Cpo,wpo,Jh,gle,Apo,ypo,iN,Lpo,xpo,$po,Yh,hle,kpo,Spo,dN,Rpo,Ppo,Bpo,Kh,ple,Ipo,Npo,cN,qpo,jpo,Dpo,Zh,ule,Gpo,Opo,fN,Vpo,Xpo,zpo,ep,_le,Wpo,Qpo,mN,Hpo,Upo,Jpo,op,Ypo,rp,Kpo,tp,ky,Zpo,ble,euo,PDe,Si,ap,vle,Sy,ouo,Fle,ruo,BDe,Lo,Ry,tuo,Py,auo,gN,nuo,suo,luo,By,iuo,Tle,duo,cuo,fuo,Ue,Iy,muo,Mle,guo,huo,Ri,puo,Ele,uuo,_uo,Cle,buo,vuo,Fuo,he,np,wle,Tuo,Muo,hN,Euo,Cuo,wuo,sp,Ale,Auo,yuo,yle,Luo,xuo,$uo,lp,Lle,kuo,Suo,pN,Ruo,Puo,Buo,ip,xle,Iuo,Nuo,uN,quo,juo,Duo,dp,$le,Guo,Ouo,_N,Vuo,Xuo,zuo,cp,kle,Wuo,Quo,bN,Huo,Uuo,Juo,fp,Sle,Yuo,Kuo,vN,Zuo,e_o,o_o,mp,Rle,r_o,t_o,FN,a_o,n_o,s_o,gp,Ple,l_o,i_o,TN,d_o,c_o,f_o,hp,Ble,m_o,g_o,MN,h_o,p_o,u_o,pp,Ile,__o,b_o,EN,v_o,F_o,T_o,up,Nle,M_o,E_o,CN,C_o,w_o,A_o,_p,qle,y_o,L_o,wN,x_o,$_o,k_o,bp,jle,S_o,R_o,AN,P_o,B_o,I_o,vp,Dle,N_o,q_o,yN,j_o,D_o,G_o,Fp,Gle,O_o,V_o,LN,X_o,z_o,W_o,Tp,Ole,Q_o,H_o,xN,U_o,J_o,Y_o,Mp,K_o,Ep,Z_o,Cp,Ny,e2o,Vle,o2o,IDe,Pi,wp,Xle,qy,r2o,zle,t2o,NDe,xo,jy,a2o,Bi,n2o,$N,s2o,l2o,kN,i2o,d2o,c2o,Dy,f2o,Wle,m2o,g2o,h2o,st,Gy,p2o,Qle,u2o,_2o,Ii,b2o,Hle,v2o,F2o,SN,T2o,M2o,E2o,Ap,C2o,Je,Oy,w2o,Ule,A2o,y2o,Ra,L2o,Jle,x2o,$2o,Yle,k2o,S2o,Kle,R2o,P2o,B2o,x,yp,Zle,I2o,N2o,RN,q2o,j2o,D2o,Lp,eie,G2o,O2o,PN,V2o,X2o,z2o,xp,oie,W2o,Q2o,BN,H2o,U2o,J2o,$p,rie,Y2o,K2o,IN,Z2o,e1o,o1o,kp,tie,r1o,t1o,NN,a1o,n1o,s1o,Sp,aie,l1o,i1o,qN,d1o,c1o,f1o,Rp,nie,m1o,g1o,jN,h1o,p1o,u1o,Pp,sie,_1o,b1o,DN,v1o,F1o,T1o,Bp,lie,M1o,E1o,GN,C1o,w1o,A1o,Ip,iie,y1o,L1o,ON,x1o,$1o,k1o,Np,die,S1o,R1o,VN,P1o,B1o,I1o,qp,cie,N1o,q1o,XN,j1o,D1o,G1o,jp,fie,O1o,V1o,zN,X1o,z1o,W1o,Dp,mie,Q1o,H1o,WN,U1o,J1o,Y1o,Gp,gie,K1o,Z1o,QN,e7o,o7o,r7o,Op,hie,t7o,a7o,HN,n7o,s7o,l7o,Vp,pie,i7o,d7o,UN,c7o,f7o,m7o,Xp,uie,g7o,h7o,JN,p7o,u7o,_7o,zp,_ie,b7o,v7o,YN,F7o,T7o,M7o,Wp,bie,E7o,C7o,KN,w7o,A7o,y7o,Qp,vie,L7o,x7o,ZN,$7o,k7o,S7o,Hp,Fie,R7o,P7o,eq,B7o,I7o,N7o,Up,Tie,q7o,j7o,oq,D7o,G7o,O7o,Jp,Mie,V7o,X7o,rq,z7o,W7o,Q7o,Yp,Eie,H7o,U7o,tq,J7o,Y7o,K7o,Kp,Cie,Z7o,ebo,aq,obo,rbo,tbo,Zp,wie,abo,nbo,nq,sbo,lbo,ibo,eu,Aie,dbo,cbo,sq,fbo,mbo,gbo,ou,yie,hbo,pbo,lq,ubo,_bo,bbo,ru,Lie,vbo,Fbo,iq,Tbo,Mbo,Ebo,tu,xie,Cbo,wbo,dq,Abo,ybo,Lbo,au,$ie,xbo,$bo,cq,kbo,Sbo,Rbo,nu,kie,Pbo,Bbo,fq,Ibo,Nbo,qbo,Ds,Sie,jbo,Dbo,mq,Gbo,Obo,gq,Vbo,Xbo,zbo,su,Rie,Wbo,Qbo,hq,Hbo,Ubo,Jbo,lu,Pie,Ybo,Kbo,pq,Zbo,e4o,o4o,iu,Bie,r4o,t4o,uq,a4o,n4o,s4o,du,Iie,l4o,i4o,_q,d4o,c4o,f4o,cu,Nie,m4o,g4o,bq,h4o,p4o,u4o,fu,qie,_4o,b4o,vq,v4o,F4o,T4o,mu,jie,M4o,E4o,Fq,C4o,w4o,A4o,gu,Die,y4o,L4o,Tq,x4o,$4o,k4o,hu,Gie,S4o,R4o,Mq,P4o,B4o,I4o,pu,Oie,N4o,q4o,Eq,j4o,D4o,G4o,uu,Vie,O4o,V4o,Cq,X4o,z4o,W4o,_u,Xie,Q4o,H4o,wq,U4o,J4o,Y4o,bu,zie,K4o,Z4o,Aq,evo,ovo,rvo,vu,Wie,tvo,avo,yq,nvo,svo,lvo,Fu,Qie,ivo,dvo,Lq,cvo,fvo,mvo,Tu,Hie,gvo,hvo,xq,pvo,uvo,_vo,Mu,Uie,bvo,vvo,$q,Fvo,Tvo,Mvo,Eu,Jie,Evo,Cvo,kq,wvo,Avo,yvo,Cu,Yie,Lvo,xvo,Sq,$vo,kvo,Svo,wu,Kie,Rvo,Pvo,Rq,Bvo,Ivo,Nvo,Au,Zie,qvo,jvo,Pq,Dvo,Gvo,Ovo,yu,ede,Vvo,Xvo,Bq,zvo,Wvo,Qvo,Lu,ode,Hvo,Uvo,Iq,Jvo,Yvo,Kvo,xu,rde,Zvo,eFo,Nq,oFo,rFo,tFo,$u,tde,aFo,nFo,qq,sFo,lFo,iFo,ku,ade,dFo,cFo,jq,fFo,mFo,gFo,Su,nde,hFo,pFo,Dq,uFo,_Fo,bFo,Ru,sde,vFo,FFo,Gq,TFo,MFo,EFo,Pu,lde,CFo,wFo,Oq,AFo,yFo,LFo,Bu,ide,xFo,$Fo,Vq,kFo,SFo,RFo,Iu,dde,PFo,BFo,Xq,IFo,NFo,qFo,Nu,cde,jFo,DFo,zq,GFo,OFo,VFo,qu,fde,XFo,zFo,Wq,WFo,QFo,HFo,ju,mde,UFo,JFo,Qq,YFo,KFo,ZFo,Du,gde,eTo,oTo,Hq,rTo,tTo,aTo,Gu,hde,nTo,sTo,Uq,lTo,iTo,dTo,Ou,pde,cTo,fTo,Jq,mTo,gTo,hTo,Vu,ude,pTo,uTo,Yq,_To,bTo,vTo,Xu,_de,FTo,TTo,Kq,MTo,ETo,CTo,zu,bde,wTo,ATo,Zq,yTo,LTo,xTo,Wu,vde,$To,kTo,ej,STo,RTo,PTo,Qu,Fde,BTo,ITo,oj,NTo,qTo,jTo,Hu,Tde,DTo,GTo,rj,OTo,VTo,XTo,Uu,Mde,zTo,WTo,tj,QTo,HTo,UTo,Ju,Ede,JTo,YTo,aj,KTo,ZTo,eMo,Yu,Cde,oMo,rMo,nj,tMo,aMo,nMo,Ku,wde,sMo,lMo,sj,iMo,dMo,cMo,Zu,Ade,fMo,mMo,lj,gMo,hMo,pMo,e_,yde,uMo,_Mo,ij,bMo,vMo,FMo,o_,Lde,TMo,MMo,dj,EMo,CMo,wMo,r_,xde,AMo,yMo,cj,LMo,xMo,$Mo,t_,$de,kMo,SMo,fj,RMo,PMo,BMo,a_,kde,IMo,NMo,mj,qMo,jMo,DMo,n_,Sde,GMo,OMo,gj,VMo,XMo,zMo,s_,Rde,WMo,QMo,hj,HMo,UMo,JMo,l_,Pde,YMo,KMo,pj,ZMo,eEo,oEo,i_,Bde,rEo,tEo,uj,aEo,nEo,sEo,d_,Ide,lEo,iEo,_j,dEo,cEo,fEo,c_,Nde,mEo,gEo,bj,hEo,pEo,uEo,f_,qde,_Eo,bEo,vj,vEo,FEo,TEo,m_,jde,MEo,EEo,Fj,CEo,wEo,AEo,g_,Dde,yEo,LEo,Tj,xEo,$Eo,kEo,h_,Gde,SEo,REo,Mj,PEo,BEo,IEo,p_,Ode,NEo,qEo,Ej,jEo,DEo,GEo,u_,Vde,OEo,VEo,Cj,XEo,zEo,WEo,__,Xde,QEo,HEo,wj,UEo,JEo,YEo,b_,zde,KEo,ZEo,Aj,eCo,oCo,rCo,v_,Wde,tCo,aCo,yj,nCo,sCo,lCo,F_,Qde,iCo,dCo,Lj,cCo,fCo,mCo,T_,Hde,gCo,hCo,xj,pCo,uCo,_Co,M_,Ude,bCo,vCo,$j,FCo,TCo,MCo,E_,ECo,Jde,CCo,wCo,Yde,ACo,yCo,C_,qDe,Ni,w_,Kde,Vy,LCo,Zde,xCo,jDe,$o,Xy,$Co,qi,kCo,kj,SCo,RCo,Sj,PCo,BCo,ICo,zy,NCo,ece,qCo,jCo,DCo,lt,Wy,GCo,oce,OCo,VCo,ji,XCo,rce,zCo,WCo,Rj,QCo,HCo,UCo,A_,JCo,Ye,Qy,YCo,tce,KCo,ZCo,Pa,e5o,ace,o5o,r5o,nce,t5o,a5o,sce,n5o,s5o,l5o,G,y_,lce,i5o,d5o,Pj,c5o,f5o,m5o,L_,ice,g5o,h5o,Bj,p5o,u5o,_5o,x_,dce,b5o,v5o,Ij,F5o,T5o,M5o,$_,cce,E5o,C5o,Nj,w5o,A5o,y5o,k_,fce,L5o,x5o,qj,$5o,k5o,S5o,S_,mce,R5o,P5o,jj,B5o,I5o,N5o,R_,gce,q5o,j5o,Dj,D5o,G5o,O5o,P_,hce,V5o,X5o,Gj,z5o,W5o,Q5o,B_,pce,H5o,U5o,Oj,J5o,Y5o,K5o,I_,uce,Z5o,e3o,Vj,o3o,r3o,t3o,N_,_ce,a3o,n3o,Xj,s3o,l3o,i3o,q_,bce,d3o,c3o,zj,f3o,m3o,g3o,j_,vce,h3o,p3o,Wj,u3o,_3o,b3o,D_,Fce,v3o,F3o,Qj,T3o,M3o,E3o,G_,Tce,C3o,w3o,Hj,A3o,y3o,L3o,O_,Mce,x3o,$3o,Uj,k3o,S3o,R3o,V_,Ece,P3o,B3o,Jj,I3o,N3o,q3o,X_,Cce,j3o,D3o,Yj,G3o,O3o,V3o,z_,wce,X3o,z3o,Kj,W3o,Q3o,H3o,W_,Ace,U3o,J3o,Zj,Y3o,K3o,Z3o,Q_,yce,e0o,o0o,eD,r0o,t0o,a0o,H_,Lce,n0o,s0o,oD,l0o,i0o,d0o,U_,xce,c0o,f0o,rD,m0o,g0o,h0o,J_,$ce,p0o,u0o,tD,_0o,b0o,v0o,Y_,kce,F0o,T0o,aD,M0o,E0o,C0o,K_,Sce,w0o,A0o,nD,y0o,L0o,x0o,Z_,Rce,$0o,k0o,sD,S0o,R0o,P0o,e2,Pce,B0o,I0o,lD,N0o,q0o,j0o,o2,Bce,D0o,G0o,iD,O0o,V0o,X0o,r2,Ice,z0o,W0o,dD,Q0o,H0o,U0o,t2,Nce,J0o,Y0o,cD,K0o,Z0o,ewo,a2,qce,owo,rwo,fD,two,awo,nwo,n2,jce,swo,lwo,mD,iwo,dwo,cwo,s2,Dce,fwo,mwo,gD,gwo,hwo,pwo,l2,Gce,uwo,_wo,hD,bwo,vwo,Fwo,i2,Oce,Two,Mwo,pD,Ewo,Cwo,wwo,d2,Vce,Awo,ywo,uD,Lwo,xwo,$wo,c2,Xce,kwo,Swo,_D,Rwo,Pwo,Bwo,f2,zce,Iwo,Nwo,bD,qwo,jwo,Dwo,m2,Wce,Gwo,Owo,vD,Vwo,Xwo,zwo,g2,Qce,Wwo,Qwo,FD,Hwo,Uwo,Jwo,h2,Hce,Ywo,Kwo,TD,Zwo,eAo,oAo,p2,Uce,rAo,tAo,MD,aAo,nAo,sAo,u2,lAo,Jce,iAo,dAo,Yce,cAo,fAo,_2,DDe,Di,b2,Kce,Hy,mAo,Zce,gAo,GDe,ko,Uy,hAo,Gi,pAo,ED,uAo,_Ao,CD,bAo,vAo,FAo,Jy,TAo,efe,MAo,EAo,CAo,it,Yy,wAo,ofe,AAo,yAo,Oi,LAo,rfe,xAo,$Ao,wD,kAo,SAo,RAo,v2,PAo,Ke,Ky,BAo,tfe,IAo,NAo,Ba,qAo,afe,jAo,DAo,nfe,GAo,OAo,sfe,VAo,XAo,zAo,z,F2,lfe,WAo,QAo,AD,HAo,UAo,JAo,T2,ife,YAo,KAo,yD,ZAo,e6o,o6o,M2,dfe,r6o,t6o,LD,a6o,n6o,s6o,E2,cfe,l6o,i6o,xD,d6o,c6o,f6o,C2,ffe,m6o,g6o,$D,h6o,p6o,u6o,w2,mfe,_6o,b6o,kD,v6o,F6o,T6o,A2,gfe,M6o,E6o,SD,C6o,w6o,A6o,y2,hfe,y6o,L6o,RD,x6o,$6o,k6o,L2,pfe,S6o,R6o,PD,P6o,B6o,I6o,x2,ufe,N6o,q6o,BD,j6o,D6o,G6o,$2,_fe,O6o,V6o,ID,X6o,z6o,W6o,k2,bfe,Q6o,H6o,ND,U6o,J6o,Y6o,S2,vfe,K6o,Z6o,qD,eyo,oyo,ryo,R2,Ffe,tyo,ayo,jD,nyo,syo,lyo,P2,Tfe,iyo,dyo,DD,cyo,fyo,myo,B2,Mfe,gyo,hyo,GD,pyo,uyo,_yo,I2,Efe,byo,vyo,OD,Fyo,Tyo,Myo,N2,Cfe,Eyo,Cyo,VD,wyo,Ayo,yyo,q2,wfe,Lyo,xyo,XD,$yo,kyo,Syo,j2,Afe,Ryo,Pyo,zD,Byo,Iyo,Nyo,D2,yfe,qyo,jyo,WD,Dyo,Gyo,Oyo,G2,Lfe,Vyo,Xyo,QD,zyo,Wyo,Qyo,O2,xfe,Hyo,Uyo,HD,Jyo,Yyo,Kyo,V2,$fe,Zyo,eLo,UD,oLo,rLo,tLo,X2,kfe,aLo,nLo,JD,sLo,lLo,iLo,z2,Sfe,dLo,cLo,YD,fLo,mLo,gLo,W2,Rfe,hLo,pLo,KD,uLo,_Lo,bLo,Q2,Pfe,vLo,FLo,ZD,TLo,MLo,ELo,H2,Bfe,CLo,wLo,eG,ALo,yLo,LLo,U2,Ife,xLo,$Lo,oG,kLo,SLo,RLo,J2,Nfe,PLo,BLo,rG,ILo,NLo,qLo,Y2,qfe,jLo,DLo,tG,GLo,OLo,VLo,K2,jfe,XLo,zLo,aG,WLo,QLo,HLo,Z2,Dfe,ULo,JLo,nG,YLo,KLo,ZLo,e1,Gfe,e8o,o8o,sG,r8o,t8o,a8o,o1,Ofe,n8o,s8o,lG,l8o,i8o,d8o,r1,Vfe,c8o,f8o,iG,m8o,g8o,h8o,t1,Xfe,p8o,u8o,dG,_8o,b8o,v8o,a1,F8o,zfe,T8o,M8o,Wfe,E8o,C8o,n1,ODe,Vi,s1,Qfe,Zy,w8o,Hfe,A8o,VDe,So,eL,y8o,Xi,L8o,cG,x8o,$8o,fG,k8o,S8o,R8o,oL,P8o,Ufe,B8o,I8o,N8o,dt,rL,q8o,Jfe,j8o,D8o,zi,G8o,Yfe,O8o,V8o,mG,X8o,z8o,W8o,l1,Q8o,Ze,tL,H8o,Kfe,U8o,J8o,Ia,Y8o,Zfe,K8o,Z8o,eme,e9o,o9o,ome,r9o,t9o,a9o,Q,i1,rme,n9o,s9o,gG,l9o,i9o,d9o,d1,tme,c9o,f9o,hG,m9o,g9o,h9o,c1,ame,p9o,u9o,pG,_9o,b9o,v9o,f1,nme,F9o,T9o,uG,M9o,E9o,C9o,m1,sme,w9o,A9o,_G,y9o,L9o,x9o,g1,lme,$9o,k9o,bG,S9o,R9o,P9o,h1,ime,B9o,I9o,vG,N9o,q9o,j9o,p1,dme,D9o,G9o,FG,O9o,V9o,X9o,u1,cme,z9o,W9o,TG,Q9o,H9o,U9o,_1,fme,J9o,Y9o,MG,K9o,Z9o,exo,b1,mme,oxo,rxo,EG,txo,axo,nxo,v1,gme,sxo,lxo,CG,ixo,dxo,cxo,F1,hme,fxo,mxo,wG,gxo,hxo,pxo,T1,pme,uxo,_xo,AG,bxo,vxo,Fxo,M1,ume,Txo,Mxo,yG,Exo,Cxo,wxo,E1,_me,Axo,yxo,LG,Lxo,xxo,$xo,C1,bme,kxo,Sxo,xG,Rxo,Pxo,Bxo,w1,vme,Ixo,Nxo,$G,qxo,jxo,Dxo,A1,Fme,Gxo,Oxo,kG,Vxo,Xxo,zxo,y1,Tme,Wxo,Qxo,SG,Hxo,Uxo,Jxo,L1,Mme,Yxo,Kxo,RG,Zxo,e$o,o$o,x1,Eme,r$o,t$o,PG,a$o,n$o,s$o,$1,Cme,l$o,i$o,BG,d$o,c$o,f$o,k1,wme,m$o,g$o,IG,h$o,p$o,u$o,S1,Ame,_$o,b$o,NG,v$o,F$o,T$o,R1,yme,M$o,E$o,qG,C$o,w$o,A$o,P1,Lme,y$o,L$o,jG,x$o,$$o,k$o,B1,xme,S$o,R$o,DG,P$o,B$o,I$o,I1,$me,N$o,q$o,GG,j$o,D$o,G$o,N1,kme,O$o,V$o,OG,X$o,z$o,W$o,q1,Sme,Q$o,H$o,VG,U$o,J$o,Y$o,j1,Rme,K$o,Z$o,Pme,eko,oko,rko,D1,Bme,tko,ako,XG,nko,sko,lko,G1,Ime,iko,dko,zG,cko,fko,mko,O1,Nme,gko,hko,WG,pko,uko,_ko,V1,qme,bko,vko,QG,Fko,Tko,Mko,X1,Eko,jme,Cko,wko,Dme,Ako,yko,z1,XDe,Wi,W1,Gme,aL,Lko,Ome,xko,zDe,Ro,nL,$ko,Qi,kko,HG,Sko,Rko,UG,Pko,Bko,Iko,sL,Nko,Vme,qko,jko,Dko,ct,lL,Gko,Xme,Oko,Vko,Hi,Xko,zme,zko,Wko,JG,Qko,Hko,Uko,Q1,Jko,eo,iL,Yko,Wme,Kko,Zko,Na,eSo,Qme,oSo,rSo,Hme,tSo,aSo,Ume,nSo,sSo,lSo,ue,H1,Jme,iSo,dSo,YG,cSo,fSo,mSo,U1,Yme,gSo,hSo,KG,pSo,uSo,_So,J1,Kme,bSo,vSo,ZG,FSo,TSo,MSo,Y1,Zme,ESo,CSo,eO,wSo,ASo,ySo,K1,ege,LSo,xSo,oO,$So,kSo,SSo,Z1,oge,RSo,PSo,rO,BSo,ISo,NSo,e7,rge,qSo,jSo,tO,DSo,GSo,OSo,o7,tge,VSo,XSo,aO,zSo,WSo,QSo,r7,age,HSo,USo,nO,JSo,YSo,KSo,t7,nge,ZSo,eRo,sO,oRo,rRo,tRo,a7,sge,aRo,nRo,lO,sRo,lRo,iRo,n7,lge,dRo,cRo,iO,fRo,mRo,gRo,s7,ige,hRo,pRo,dO,uRo,_Ro,bRo,l7,dge,vRo,FRo,cO,TRo,MRo,ERo,i7,cge,CRo,wRo,fO,ARo,yRo,LRo,d7,fge,xRo,$Ro,mO,kRo,SRo,RRo,c7,PRo,mge,BRo,IRo,gge,NRo,qRo,f7,WDe,Ui,m7,hge,dL,jRo,pge,DRo,QDe,Po,cL,GRo,Ji,ORo,gO,VRo,XRo,hO,zRo,WRo,QRo,fL,HRo,uge,URo,JRo,YRo,ft,mL,KRo,_ge,ZRo,ePo,Yi,oPo,bge,rPo,tPo,pO,aPo,nPo,sPo,g7,lPo,oo,gL,iPo,vge,dPo,cPo,qa,fPo,Fge,mPo,gPo,Tge,hPo,pPo,Mge,uPo,_Po,bPo,q,h7,Ege,vPo,FPo,uO,TPo,MPo,EPo,p7,Cge,CPo,wPo,_O,APo,yPo,LPo,u7,wge,xPo,$Po,bO,kPo,SPo,RPo,_7,Age,PPo,BPo,vO,IPo,NPo,qPo,b7,yge,jPo,DPo,FO,GPo,OPo,VPo,v7,Lge,XPo,zPo,TO,WPo,QPo,HPo,F7,xge,UPo,JPo,MO,YPo,KPo,ZPo,T7,$ge,eBo,oBo,EO,rBo,tBo,aBo,M7,kge,nBo,sBo,CO,lBo,iBo,dBo,E7,Sge,cBo,fBo,wO,mBo,gBo,hBo,C7,Rge,pBo,uBo,AO,_Bo,bBo,vBo,w7,Pge,FBo,TBo,yO,MBo,EBo,CBo,A7,Bge,wBo,ABo,LO,yBo,LBo,xBo,y7,Ige,$Bo,kBo,xO,SBo,RBo,PBo,L7,Nge,BBo,IBo,$O,NBo,qBo,jBo,x7,qge,DBo,GBo,kO,OBo,VBo,XBo,$7,jge,zBo,WBo,SO,QBo,HBo,UBo,k7,Dge,JBo,YBo,RO,KBo,ZBo,eIo,S7,Gge,oIo,rIo,PO,tIo,aIo,nIo,R7,Oge,sIo,lIo,BO,iIo,dIo,cIo,P7,Vge,fIo,mIo,IO,gIo,hIo,pIo,B7,Xge,uIo,_Io,NO,bIo,vIo,FIo,I7,zge,TIo,MIo,qO,EIo,CIo,wIo,N7,Wge,AIo,yIo,jO,LIo,xIo,$Io,q7,Qge,kIo,SIo,DO,RIo,PIo,BIo,j7,Hge,IIo,NIo,GO,qIo,jIo,DIo,D7,Uge,GIo,OIo,OO,VIo,XIo,zIo,G7,Jge,WIo,QIo,VO,HIo,UIo,JIo,O7,Yge,YIo,KIo,XO,ZIo,eNo,oNo,V7,Kge,rNo,tNo,zO,aNo,nNo,sNo,X7,Zge,lNo,iNo,WO,dNo,cNo,fNo,z7,ehe,mNo,gNo,QO,hNo,pNo,uNo,W7,ohe,_No,bNo,HO,vNo,FNo,TNo,Q7,rhe,MNo,ENo,UO,CNo,wNo,ANo,H7,the,yNo,LNo,JO,xNo,$No,kNo,U7,ahe,SNo,RNo,YO,PNo,BNo,INo,J7,nhe,NNo,qNo,KO,jNo,DNo,GNo,Y7,she,ONo,VNo,ZO,XNo,zNo,WNo,K7,lhe,QNo,HNo,eV,UNo,JNo,YNo,Z7,ihe,KNo,ZNo,oV,eqo,oqo,rqo,eb,dhe,tqo,aqo,rV,nqo,sqo,lqo,ob,che,iqo,dqo,tV,cqo,fqo,mqo,rb,fhe,gqo,hqo,aV,pqo,uqo,_qo,tb,mhe,bqo,vqo,nV,Fqo,Tqo,Mqo,ab,ghe,Eqo,Cqo,sV,wqo,Aqo,yqo,nb,hhe,Lqo,xqo,lV,$qo,kqo,Sqo,sb,phe,Rqo,Pqo,iV,Bqo,Iqo,Nqo,lb,qqo,uhe,jqo,Dqo,_he,Gqo,Oqo,ib,HDe,Ki,db,bhe,hL,Vqo,vhe,Xqo,UDe,Bo,pL,zqo,Zi,Wqo,dV,Qqo,Hqo,cV,Uqo,Jqo,Yqo,uL,Kqo,Fhe,Zqo,ejo,ojo,mt,_L,rjo,The,tjo,ajo,ed,njo,Mhe,sjo,ljo,fV,ijo,djo,cjo,cb,fjo,ro,bL,mjo,Ehe,gjo,hjo,ja,pjo,Che,ujo,_jo,whe,bjo,vjo,Ahe,Fjo,Tjo,Mjo,Z,fb,yhe,Ejo,Cjo,mV,wjo,Ajo,yjo,mb,Lhe,Ljo,xjo,gV,$jo,kjo,Sjo,gb,xhe,Rjo,Pjo,hV,Bjo,Ijo,Njo,hb,$he,qjo,jjo,pV,Djo,Gjo,Ojo,pb,khe,Vjo,Xjo,uV,zjo,Wjo,Qjo,ub,She,Hjo,Ujo,_V,Jjo,Yjo,Kjo,_b,Rhe,Zjo,eDo,bV,oDo,rDo,tDo,bb,Phe,aDo,nDo,vV,sDo,lDo,iDo,vb,Bhe,dDo,cDo,FV,fDo,mDo,gDo,Fb,Ihe,hDo,pDo,TV,uDo,_Do,bDo,Tb,Nhe,vDo,FDo,MV,TDo,MDo,EDo,Mb,qhe,CDo,wDo,EV,ADo,yDo,LDo,Eb,jhe,xDo,$Do,CV,kDo,SDo,RDo,Cb,Dhe,PDo,BDo,wV,IDo,NDo,qDo,wb,Ghe,jDo,DDo,AV,GDo,ODo,VDo,Ab,Ohe,XDo,zDo,yV,WDo,QDo,HDo,yb,Vhe,UDo,JDo,LV,YDo,KDo,ZDo,Lb,Xhe,eGo,oGo,xV,rGo,tGo,aGo,xb,zhe,nGo,sGo,$V,lGo,iGo,dGo,$b,Whe,cGo,fGo,kV,mGo,gGo,hGo,kb,Qhe,pGo,uGo,SV,_Go,bGo,vGo,Sb,Hhe,FGo,TGo,RV,MGo,EGo,CGo,Rb,Uhe,wGo,AGo,PV,yGo,LGo,xGo,Pb,Jhe,$Go,kGo,BV,SGo,RGo,PGo,Bb,Yhe,BGo,IGo,IV,NGo,qGo,jGo,Ib,Khe,DGo,GGo,NV,OGo,VGo,XGo,Nb,Zhe,zGo,WGo,qV,QGo,HGo,UGo,qb,epe,JGo,YGo,jV,KGo,ZGo,eOo,jb,ope,oOo,rOo,DV,tOo,aOo,nOo,Db,sOo,rpe,lOo,iOo,tpe,dOo,cOo,Gb,JDe,od,Ob,ape,vL,fOo,npe,mOo,YDe,Io,FL,gOo,rd,hOo,GV,pOo,uOo,OV,_Oo,bOo,vOo,TL,FOo,spe,TOo,MOo,EOo,gt,ML,COo,lpe,wOo,AOo,td,yOo,ipe,LOo,xOo,VV,$Oo,kOo,SOo,Vb,ROo,to,EL,POo,dpe,BOo,IOo,Da,NOo,cpe,qOo,jOo,fpe,DOo,GOo,mpe,OOo,VOo,XOo,Zr,Xb,gpe,zOo,WOo,XV,QOo,HOo,UOo,zb,hpe,JOo,YOo,zV,KOo,ZOo,eVo,Wb,ppe,oVo,rVo,WV,tVo,aVo,nVo,Qb,upe,sVo,lVo,QV,iVo,dVo,cVo,Hb,_pe,fVo,mVo,HV,gVo,hVo,pVo,Ub,uVo,bpe,_Vo,bVo,vpe,vVo,FVo,Jb,KDe,ad,Yb,Fpe,CL,TVo,Tpe,MVo,ZDe,No,wL,EVo,nd,CVo,UV,wVo,AVo,JV,yVo,LVo,xVo,AL,$Vo,Mpe,kVo,SVo,RVo,ht,yL,PVo,Epe,BVo,IVo,sd,NVo,Cpe,qVo,jVo,YV,DVo,GVo,OVo,Kb,VVo,ao,LL,XVo,wpe,zVo,WVo,Ga,QVo,Ape,HVo,UVo,ype,JVo,YVo,Lpe,KVo,ZVo,eXo,U,Zb,xpe,oXo,rXo,KV,tXo,aXo,nXo,e4,$pe,sXo,lXo,ZV,iXo,dXo,cXo,o4,kpe,fXo,mXo,eX,gXo,hXo,pXo,r4,Spe,uXo,_Xo,oX,bXo,vXo,FXo,t4,Rpe,TXo,MXo,rX,EXo,CXo,wXo,a4,Ppe,AXo,yXo,tX,LXo,xXo,$Xo,n4,Bpe,kXo,SXo,aX,RXo,PXo,BXo,s4,Ipe,IXo,NXo,nX,qXo,jXo,DXo,l4,Npe,GXo,OXo,sX,VXo,XXo,zXo,i4,qpe,WXo,QXo,lX,HXo,UXo,JXo,d4,jpe,YXo,KXo,iX,ZXo,ezo,ozo,c4,Dpe,rzo,tzo,dX,azo,nzo,szo,f4,Gpe,lzo,izo,cX,dzo,czo,fzo,m4,Ope,mzo,gzo,fX,hzo,pzo,uzo,g4,Vpe,_zo,bzo,mX,vzo,Fzo,Tzo,h4,Xpe,Mzo,Ezo,gX,Czo,wzo,Azo,p4,zpe,yzo,Lzo,hX,xzo,$zo,kzo,u4,Wpe,Szo,Rzo,pX,Pzo,Bzo,Izo,_4,Qpe,Nzo,qzo,uX,jzo,Dzo,Gzo,b4,Hpe,Ozo,Vzo,_X,Xzo,zzo,Wzo,v4,Upe,Qzo,Hzo,bX,Uzo,Jzo,Yzo,F4,Jpe,Kzo,Zzo,vX,eWo,oWo,rWo,T4,Ype,tWo,aWo,FX,nWo,sWo,lWo,M4,Kpe,iWo,dWo,TX,cWo,fWo,mWo,E4,Zpe,gWo,hWo,MX,pWo,uWo,_Wo,C4,eue,bWo,vWo,EX,FWo,TWo,MWo,w4,oue,EWo,CWo,CX,wWo,AWo,yWo,A4,rue,LWo,xWo,wX,$Wo,kWo,SWo,y4,tue,RWo,PWo,AX,BWo,IWo,NWo,L4,aue,qWo,jWo,yX,DWo,GWo,OWo,x4,nue,VWo,XWo,LX,zWo,WWo,QWo,$4,sue,HWo,UWo,xX,JWo,YWo,KWo,k4,lue,ZWo,eQo,$X,oQo,rQo,tQo,S4,iue,aQo,nQo,kX,sQo,lQo,iQo,R4,dQo,due,cQo,fQo,cue,mQo,gQo,P4,eGe,ld,B4,fue,xL,hQo,mue,pQo,oGe,qo,$L,uQo,id,_Qo,SX,bQo,vQo,RX,FQo,TQo,MQo,kL,EQo,gue,CQo,wQo,AQo,pt,SL,yQo,hue,LQo,xQo,dd,$Qo,pue,kQo,SQo,PX,RQo,PQo,BQo,I4,IQo,no,RL,NQo,uue,qQo,jQo,Oa,DQo,_ue,GQo,OQo,bue,VQo,XQo,vue,zQo,WQo,QQo,V,N4,Fue,HQo,UQo,BX,JQo,YQo,KQo,q4,Tue,ZQo,eHo,IX,oHo,rHo,tHo,j4,Mue,aHo,nHo,NX,sHo,lHo,iHo,D4,Eue,dHo,cHo,qX,fHo,mHo,gHo,G4,Cue,hHo,pHo,jX,uHo,_Ho,bHo,O4,wue,vHo,FHo,DX,THo,MHo,EHo,V4,Aue,CHo,wHo,GX,AHo,yHo,LHo,X4,yue,xHo,$Ho,OX,kHo,SHo,RHo,z4,Lue,PHo,BHo,VX,IHo,NHo,qHo,W4,xue,jHo,DHo,XX,GHo,OHo,VHo,Q4,$ue,XHo,zHo,zX,WHo,QHo,HHo,H4,kue,UHo,JHo,WX,YHo,KHo,ZHo,U4,Sue,eUo,oUo,QX,rUo,tUo,aUo,J4,Rue,nUo,sUo,HX,lUo,iUo,dUo,Y4,Pue,cUo,fUo,UX,mUo,gUo,hUo,K4,Bue,pUo,uUo,JX,_Uo,bUo,vUo,Z4,Iue,FUo,TUo,YX,MUo,EUo,CUo,ev,Nue,wUo,AUo,KX,yUo,LUo,xUo,ov,que,$Uo,kUo,ZX,SUo,RUo,PUo,rv,jue,BUo,IUo,ez,NUo,qUo,jUo,tv,Due,DUo,GUo,oz,OUo,VUo,XUo,av,Gue,zUo,WUo,rz,QUo,HUo,UUo,nv,Oue,JUo,YUo,tz,KUo,ZUo,eJo,sv,Vue,oJo,rJo,az,tJo,aJo,nJo,lv,Xue,sJo,lJo,nz,iJo,dJo,cJo,iv,zue,fJo,mJo,sz,gJo,hJo,pJo,dv,Wue,uJo,_Jo,lz,bJo,vJo,FJo,cv,Que,TJo,MJo,iz,EJo,CJo,wJo,fv,Hue,AJo,yJo,dz,LJo,xJo,$Jo,mv,Uue,kJo,SJo,cz,RJo,PJo,BJo,gv,Jue,IJo,NJo,fz,qJo,jJo,DJo,hv,Yue,GJo,OJo,mz,VJo,XJo,zJo,pv,Kue,WJo,QJo,gz,HJo,UJo,JJo,uv,Zue,YJo,KJo,hz,ZJo,eYo,oYo,_v,e_e,rYo,tYo,pz,aYo,nYo,sYo,bv,o_e,lYo,iYo,uz,dYo,cYo,fYo,vv,r_e,mYo,gYo,_z,hYo,pYo,uYo,Fv,t_e,_Yo,bYo,bz,vYo,FYo,TYo,Tv,a_e,MYo,EYo,vz,CYo,wYo,AYo,Mv,n_e,yYo,LYo,Fz,xYo,$Yo,kYo,Ev,SYo,s_e,RYo,PYo,l_e,BYo,IYo,Cv,rGe,cd,wv,i_e,PL,NYo,d_e,qYo,tGe,jo,BL,jYo,fd,DYo,Tz,GYo,OYo,Mz,VYo,XYo,zYo,IL,WYo,c_e,QYo,HYo,UYo,ut,NL,JYo,f_e,YYo,KYo,md,ZYo,m_e,eKo,oKo,Ez,rKo,tKo,aKo,Av,nKo,so,qL,sKo,g_e,lKo,iKo,Va,dKo,h_e,cKo,fKo,p_e,mKo,gKo,u_e,hKo,pKo,uKo,__e,yv,b_e,_Ko,bKo,Cz,vKo,FKo,TKo,Lv,MKo,v_e,EKo,CKo,F_e,wKo,AKo,xv,aGe,gd,$v,T_e,jL,yKo,M_e,LKo,nGe,Do,DL,xKo,hd,$Ko,wz,kKo,SKo,Az,RKo,PKo,BKo,GL,IKo,E_e,NKo,qKo,jKo,_t,OL,DKo,C_e,GKo,OKo,pd,VKo,w_e,XKo,zKo,yz,WKo,QKo,HKo,kv,UKo,lo,VL,JKo,A_e,YKo,KKo,Xa,ZKo,y_e,eZo,oZo,L_e,rZo,tZo,x_e,aZo,nZo,sZo,ve,Sv,$_e,lZo,iZo,Lz,dZo,cZo,fZo,Rv,k_e,mZo,gZo,xz,hZo,pZo,uZo,Pv,S_e,_Zo,bZo,$z,vZo,FZo,TZo,Bv,R_e,MZo,EZo,kz,CZo,wZo,AZo,Gs,P_e,yZo,LZo,Sz,xZo,$Zo,Rz,kZo,SZo,RZo,Iv,B_e,PZo,BZo,Pz,IZo,NZo,qZo,Os,I_e,jZo,DZo,Bz,GZo,OZo,Iz,VZo,XZo,zZo,bt,N_e,WZo,QZo,Nz,HZo,UZo,qz,JZo,YZo,jz,KZo,ZZo,eer,Nv,q_e,oer,rer,Dz,ter,aer,ner,qv,j_e,ser,ler,Gz,ier,der,cer,jv,D_e,fer,mer,Oz,ger,her,per,Dv,G_e,uer,_er,Vz,ber,ver,Fer,Gv,O_e,Ter,Mer,Xz,Eer,Cer,wer,Ov,V_e,Aer,yer,zz,Ler,xer,$er,Vv,X_e,ker,Ser,Wz,Rer,Per,Ber,Xv,Ier,z_e,Ner,qer,W_e,jer,Der,zv,sGe,ud,Wv,Q_e,XL,Ger,H_e,Oer,lGe,Go,zL,Ver,_d,Xer,Qz,zer,Wer,Hz,Qer,Her,Uer,WL,Jer,U_e,Yer,Ker,Zer,vt,QL,eor,J_e,oor,ror,bd,tor,Y_e,aor,nor,Uz,sor,lor,ior,Qv,dor,io,HL,cor,K_e,mor,gor,za,hor,Z_e,por,uor,e2e,_or,bor,o2e,vor,For,Tor,r2e,Hv,t2e,Mor,Eor,Jz,Cor,wor,Aor,Uv,yor,a2e,Lor,xor,n2e,$or,kor,Jv,iGe,vd,Yv,s2e,UL,Sor,l2e,Ror,dGe,Oo,JL,Por,Fd,Bor,Yz,Ior,Nor,Kz,qor,jor,Dor,YL,Gor,i2e,Oor,Vor,Xor,Ft,KL,zor,d2e,Wor,Qor,Td,Hor,c2e,Uor,Jor,Zz,Yor,Kor,Zor,Kv,err,co,ZL,orr,f2e,rrr,trr,Wa,arr,m2e,nrr,srr,g2e,lrr,irr,h2e,drr,crr,frr,p2e,Zv,u2e,mrr,grr,eW,hrr,prr,urr,eF,_rr,_2e,brr,vrr,b2e,Frr,Trr,oF,cGe,Md,rF,v2e,e8,Mrr,F2e,Err,fGe,Vo,o8,Crr,Ed,wrr,oW,Arr,yrr,rW,Lrr,xrr,$rr,r8,krr,T2e,Srr,Rrr,Prr,Tt,t8,Brr,M2e,Irr,Nrr,Cd,qrr,E2e,jrr,Drr,tW,Grr,Orr,Vrr,tF,Xrr,fo,a8,zrr,C2e,Wrr,Qrr,Qa,Hrr,w2e,Urr,Jrr,A2e,Yrr,Krr,y2e,Zrr,etr,otr,Re,aF,L2e,rtr,ttr,aW,atr,ntr,str,nF,x2e,ltr,itr,nW,dtr,ctr,ftr,sF,$2e,mtr,gtr,sW,htr,ptr,utr,lF,k2e,_tr,btr,lW,vtr,Ftr,Ttr,iF,S2e,Mtr,Etr,iW,Ctr,wtr,Atr,dF,R2e,ytr,Ltr,dW,xtr,$tr,ktr,cF,P2e,Str,Rtr,cW,Ptr,Btr,Itr,fF,B2e,Ntr,qtr,fW,jtr,Dtr,Gtr,mF,I2e,Otr,Vtr,mW,Xtr,ztr,Wtr,gF,Qtr,N2e,Htr,Utr,q2e,Jtr,Ytr,hF,mGe,wd,pF,j2e,n8,Ktr,D2e,Ztr,gGe,Xo,s8,ear,Ad,oar,gW,rar,tar,hW,aar,nar,sar,l8,lar,G2e,iar,dar,car,Mt,i8,far,O2e,mar,gar,yd,har,V2e,par,uar,pW,_ar,bar,Far,uF,Tar,mo,d8,Mar,X2e,Ear,Car,Ha,war,z2e,Aar,yar,W2e,Lar,xar,Q2e,$ar,kar,Sar,et,_F,H2e,Rar,Par,uW,Bar,Iar,Nar,bF,U2e,qar,jar,_W,Dar,Gar,Oar,vF,J2e,Var,Xar,bW,zar,War,Qar,FF,Y2e,Har,Uar,vW,Jar,Yar,Kar,TF,K2e,Zar,enr,FW,onr,rnr,tnr,MF,anr,Z2e,nnr,snr,e1e,lnr,inr,EF,hGe,Ld,CF,o1e,c8,dnr,r1e,cnr,pGe,zo,f8,fnr,xd,mnr,TW,gnr,hnr,MW,pnr,unr,_nr,m8,bnr,t1e,vnr,Fnr,Tnr,Et,g8,Mnr,a1e,Enr,Cnr,$d,wnr,n1e,Anr,ynr,EW,Lnr,xnr,$nr,wF,knr,go,h8,Snr,s1e,Rnr,Pnr,Ua,Bnr,l1e,Inr,Nnr,i1e,qnr,jnr,d1e,Dnr,Gnr,Onr,ye,AF,c1e,Vnr,Xnr,CW,znr,Wnr,Qnr,yF,f1e,Hnr,Unr,wW,Jnr,Ynr,Knr,LF,m1e,Znr,esr,AW,osr,rsr,tsr,xF,g1e,asr,nsr,yW,ssr,lsr,isr,$F,h1e,dsr,csr,LW,fsr,msr,gsr,kF,p1e,hsr,psr,xW,usr,_sr,bsr,SF,u1e,vsr,Fsr,$W,Tsr,Msr,Esr,RF,_1e,Csr,wsr,kW,Asr,ysr,Lsr,PF,b1e,xsr,$sr,SW,ksr,Ssr,Rsr,BF,v1e,Psr,Bsr,RW,Isr,Nsr,qsr,IF,jsr,F1e,Dsr,Gsr,T1e,Osr,Vsr,NF,uGe,kd,qF,M1e,p8,Xsr,E1e,zsr,_Ge,Wo,u8,Wsr,Sd,Qsr,PW,Hsr,Usr,BW,Jsr,Ysr,Ksr,_8,Zsr,C1e,elr,olr,rlr,Ct,b8,tlr,w1e,alr,nlr,Rd,slr,A1e,llr,ilr,IW,dlr,clr,flr,jF,mlr,ho,v8,glr,y1e,hlr,plr,Ja,ulr,L1e,_lr,blr,x1e,vlr,Flr,$1e,Tlr,Mlr,Elr,F8,DF,k1e,Clr,wlr,NW,Alr,ylr,Llr,GF,S1e,xlr,$lr,qW,klr,Slr,Rlr,OF,Plr,R1e,Blr,Ilr,P1e,Nlr,qlr,VF,bGe,Pd,XF,B1e,T8,jlr,I1e,Dlr,vGe,Qo,M8,Glr,Bd,Olr,jW,Vlr,Xlr,DW,zlr,Wlr,Qlr,E8,Hlr,N1e,Ulr,Jlr,Ylr,wt,C8,Klr,q1e,Zlr,eir,Id,oir,j1e,rir,tir,GW,air,nir,sir,zF,lir,po,w8,iir,D1e,dir,cir,Ya,fir,G1e,mir,gir,O1e,hir,pir,V1e,uir,_ir,bir,ot,WF,X1e,vir,Fir,OW,Tir,Mir,Eir,QF,z1e,Cir,wir,VW,Air,yir,Lir,HF,W1e,xir,$ir,XW,kir,Sir,Rir,UF,Q1e,Pir,Bir,zW,Iir,Nir,qir,JF,H1e,jir,Dir,WW,Gir,Oir,Vir,YF,Xir,U1e,zir,Wir,J1e,Qir,Hir,KF,FGe,Nd,ZF,Y1e,A8,Uir,K1e,Jir,TGe,Ho,y8,Yir,qd,Kir,QW,Zir,edr,HW,odr,rdr,tdr,L8,adr,Z1e,ndr,sdr,ldr,At,x8,idr,e7e,ddr,cdr,jd,fdr,o7e,mdr,gdr,UW,hdr,pdr,udr,eT,_dr,uo,$8,bdr,r7e,vdr,Fdr,Ka,Tdr,t7e,Mdr,Edr,a7e,Cdr,wdr,n7e,Adr,ydr,Ldr,Dd,oT,s7e,xdr,$dr,JW,kdr,Sdr,Rdr,rT,l7e,Pdr,Bdr,YW,Idr,Ndr,qdr,tT,i7e,jdr,Ddr,KW,Gdr,Odr,Vdr,aT,Xdr,d7e,zdr,Wdr,c7e,Qdr,Hdr,nT,MGe,Gd,sT,f7e,k8,Udr,m7e,Jdr,EGe,Uo,S8,Ydr,Od,Kdr,ZW,Zdr,ecr,eQ,ocr,rcr,tcr,R8,acr,g7e,ncr,scr,lcr,yt,P8,icr,h7e,dcr,ccr,Vd,fcr,p7e,mcr,gcr,oQ,hcr,pcr,ucr,lT,_cr,_o,B8,bcr,u7e,vcr,Fcr,Za,Tcr,_7e,Mcr,Ecr,b7e,Ccr,wcr,v7e,Acr,ycr,Lcr,I8,iT,F7e,xcr,$cr,rQ,kcr,Scr,Rcr,dT,T7e,Pcr,Bcr,tQ,Icr,Ncr,qcr,cT,jcr,M7e,Dcr,Gcr,E7e,Ocr,Vcr,fT,CGe,Xd,mT,C7e,N8,Xcr,w7e,zcr,wGe,Jo,q8,Wcr,zd,Qcr,aQ,Hcr,Ucr,nQ,Jcr,Ycr,Kcr,j8,Zcr,A7e,efr,ofr,rfr,Lt,D8,tfr,y7e,afr,nfr,Wd,sfr,L7e,lfr,ifr,sQ,dfr,cfr,ffr,gT,mfr,bo,G8,gfr,x7e,hfr,pfr,en,ufr,$7e,_fr,bfr,k7e,vfr,Ffr,S7e,Tfr,Mfr,Efr,R7e,hT,P7e,Cfr,wfr,lQ,Afr,yfr,Lfr,pT,xfr,B7e,$fr,kfr,I7e,Sfr,Rfr,uT,AGe,Qd,_T,N7e,O8,Pfr,q7e,Bfr,yGe,Yo,V8,Ifr,Hd,Nfr,iQ,qfr,jfr,dQ,Dfr,Gfr,Ofr,X8,Vfr,j7e,Xfr,zfr,Wfr,xt,z8,Qfr,D7e,Hfr,Ufr,Ud,Jfr,G7e,Yfr,Kfr,cQ,Zfr,emr,omr,bT,rmr,vo,W8,tmr,O7e,amr,nmr,on,smr,V7e,lmr,imr,X7e,dmr,cmr,z7e,fmr,mmr,gmr,rn,vT,W7e,hmr,pmr,fQ,umr,_mr,bmr,FT,Q7e,vmr,Fmr,mQ,Tmr,Mmr,Emr,TT,H7e,Cmr,wmr,gQ,Amr,ymr,Lmr,MT,U7e,xmr,$mr,hQ,kmr,Smr,Rmr,ET,Pmr,J7e,Bmr,Imr,Y7e,Nmr,qmr,CT,LGe,Jd,wT,K7e,Q8,jmr,Z7e,Dmr,xGe,Ko,H8,Gmr,Yd,Omr,pQ,Vmr,Xmr,uQ,zmr,Wmr,Qmr,U8,Hmr,ebe,Umr,Jmr,Ymr,$t,J8,Kmr,obe,Zmr,egr,Kd,ogr,rbe,rgr,tgr,_Q,agr,ngr,sgr,AT,lgr,Fo,Y8,igr,tbe,dgr,cgr,tn,fgr,abe,mgr,ggr,nbe,hgr,pgr,sbe,ugr,_gr,bgr,lbe,yT,ibe,vgr,Fgr,bQ,Tgr,Mgr,Egr,LT,Cgr,dbe,wgr,Agr,cbe,ygr,Lgr,xT,$Ge,Zd,$T,fbe,K8,xgr,mbe,$gr,kGe,Zo,Z8,kgr,ec,Sgr,vQ,Rgr,Pgr,FQ,Bgr,Igr,Ngr,e9,qgr,gbe,jgr,Dgr,Ggr,kt,o9,Ogr,hbe,Vgr,Xgr,oc,zgr,pbe,Wgr,Qgr,TQ,Hgr,Ugr,Jgr,kT,Ygr,yr,r9,Kgr,ube,Zgr,ehr,an,ohr,_be,rhr,thr,bbe,ahr,nhr,vbe,shr,lhr,ihr,N,ST,Fbe,dhr,chr,MQ,fhr,mhr,ghr,RT,Tbe,hhr,phr,EQ,uhr,_hr,bhr,PT,Mbe,vhr,Fhr,CQ,Thr,Mhr,Ehr,BT,Ebe,Chr,whr,wQ,Ahr,yhr,Lhr,IT,Cbe,xhr,$hr,AQ,khr,Shr,Rhr,NT,wbe,Phr,Bhr,yQ,Ihr,Nhr,qhr,qT,Abe,jhr,Dhr,LQ,Ghr,Ohr,Vhr,jT,ybe,Xhr,zhr,xQ,Whr,Qhr,Hhr,DT,Lbe,Uhr,Jhr,$Q,Yhr,Khr,Zhr,GT,xbe,epr,opr,kQ,rpr,tpr,apr,OT,$be,npr,spr,SQ,lpr,ipr,dpr,VT,kbe,cpr,fpr,RQ,mpr,gpr,hpr,XT,Sbe,ppr,upr,PQ,_pr,bpr,vpr,zT,Rbe,Fpr,Tpr,BQ,Mpr,Epr,Cpr,WT,Pbe,wpr,Apr,IQ,ypr,Lpr,xpr,QT,Bbe,$pr,kpr,NQ,Spr,Rpr,Ppr,HT,Ibe,Bpr,Ipr,qQ,Npr,qpr,jpr,Vs,Nbe,Dpr,Gpr,jQ,Opr,Vpr,DQ,Xpr,zpr,Wpr,UT,qbe,Qpr,Hpr,GQ,Upr,Jpr,Ypr,JT,jbe,Kpr,Zpr,OQ,eur,our,rur,YT,Dbe,tur,aur,VQ,nur,sur,lur,KT,Gbe,iur,dur,XQ,cur,fur,mur,ZT,Obe,gur,hur,zQ,pur,uur,_ur,eM,Vbe,bur,vur,WQ,Fur,Tur,Mur,oM,Xbe,Eur,Cur,QQ,wur,Aur,yur,rM,zbe,Lur,xur,HQ,$ur,kur,Sur,tM,Wbe,Rur,Pur,UQ,Bur,Iur,Nur,aM,Qbe,qur,jur,JQ,Dur,Gur,Our,nM,Hbe,Vur,Xur,YQ,zur,Wur,Qur,sM,Ube,Hur,Uur,KQ,Jur,Yur,Kur,lM,Jbe,Zur,e_r,ZQ,o_r,r_r,t_r,iM,Ybe,a_r,n_r,eH,s_r,l_r,i_r,dM,Kbe,d_r,c_r,oH,f_r,m_r,g_r,cM,Zbe,h_r,p_r,rH,u_r,__r,b_r,fM,e4e,v_r,F_r,tH,T_r,M_r,E_r,mM,o4e,C_r,w_r,aH,A_r,y_r,L_r,gM,r4e,x_r,$_r,nH,k_r,S_r,R_r,hM,t4e,P_r,B_r,sH,I_r,N_r,q_r,pM,a4e,j_r,D_r,lH,G_r,O_r,V_r,uM,n4e,X_r,z_r,iH,W_r,Q_r,H_r,_M,s4e,U_r,J_r,dH,Y_r,K_r,Z_r,bM,l4e,e2r,o2r,cH,r2r,t2r,a2r,vM,i4e,n2r,s2r,fH,l2r,i2r,d2r,FM,d4e,c2r,f2r,mH,m2r,g2r,h2r,TM,c4e,p2r,u2r,gH,_2r,b2r,v2r,MM,f4e,F2r,T2r,hH,M2r,E2r,C2r,EM,m4e,w2r,A2r,pH,y2r,L2r,x2r,CM,g4e,$2r,k2r,uH,S2r,R2r,P2r,wM,SGe,rc,AM,h4e,t9,B2r,p4e,I2r,RGe,er,a9,N2r,tc,q2r,_H,j2r,D2r,bH,G2r,O2r,V2r,n9,X2r,u4e,z2r,W2r,Q2r,St,s9,H2r,_4e,U2r,J2r,ac,Y2r,b4e,K2r,Z2r,vH,e1r,o1r,r1r,yM,t1r,Lr,l9,a1r,v4e,n1r,s1r,nn,l1r,F4e,i1r,d1r,T4e,c1r,f1r,M4e,m1r,g1r,h1r,se,LM,E4e,p1r,u1r,FH,_1r,b1r,v1r,xM,C4e,F1r,T1r,TH,M1r,E1r,C1r,$M,w4e,w1r,A1r,MH,y1r,L1r,x1r,kM,A4e,$1r,k1r,EH,S1r,R1r,P1r,SM,y4e,B1r,I1r,CH,N1r,q1r,j1r,RM,L4e,D1r,G1r,wH,O1r,V1r,X1r,PM,x4e,z1r,W1r,AH,Q1r,H1r,U1r,BM,$4e,J1r,Y1r,yH,K1r,Z1r,e7r,IM,k4e,o7r,r7r,LH,t7r,a7r,n7r,NM,S4e,s7r,l7r,xH,i7r,d7r,c7r,qM,R4e,f7r,m7r,$H,g7r,h7r,p7r,jM,P4e,u7r,_7r,kH,b7r,v7r,F7r,DM,B4e,T7r,M7r,SH,E7r,C7r,w7r,GM,I4e,A7r,y7r,RH,L7r,x7r,$7r,OM,N4e,k7r,S7r,PH,R7r,P7r,B7r,VM,q4e,I7r,N7r,BH,q7r,j7r,D7r,XM,j4e,G7r,O7r,IH,V7r,X7r,z7r,zM,D4e,W7r,Q7r,NH,H7r,U7r,J7r,WM,G4e,Y7r,K7r,qH,Z7r,ebr,obr,QM,O4e,rbr,tbr,jH,abr,nbr,sbr,HM,V4e,lbr,ibr,DH,dbr,cbr,fbr,UM,X4e,mbr,gbr,GH,hbr,pbr,ubr,JM,z4e,_br,bbr,OH,vbr,Fbr,Tbr,YM,PGe,nc,KM,W4e,i9,Mbr,Q4e,Ebr,BGe,or,d9,Cbr,sc,wbr,VH,Abr,ybr,XH,Lbr,xbr,$br,c9,kbr,H4e,Sbr,Rbr,Pbr,Rt,f9,Bbr,U4e,Ibr,Nbr,lc,qbr,J4e,jbr,Dbr,zH,Gbr,Obr,Vbr,ZM,Xbr,xr,m9,zbr,Y4e,Wbr,Qbr,sn,Hbr,K4e,Ubr,Jbr,Z4e,Ybr,Kbr,eve,Zbr,e4r,o4r,Me,eE,ove,r4r,t4r,WH,a4r,n4r,s4r,oE,rve,l4r,i4r,QH,d4r,c4r,f4r,rE,tve,m4r,g4r,HH,h4r,p4r,u4r,tE,ave,_4r,b4r,UH,v4r,F4r,T4r,aE,nve,M4r,E4r,JH,C4r,w4r,A4r,nE,sve,y4r,L4r,YH,x4r,$4r,k4r,sE,lve,S4r,R4r,KH,P4r,B4r,I4r,lE,ive,N4r,q4r,ZH,j4r,D4r,G4r,iE,dve,O4r,V4r,eU,X4r,z4r,W4r,dE,cve,Q4r,H4r,oU,U4r,J4r,Y4r,cE,fve,K4r,Z4r,rU,evr,ovr,rvr,fE,mve,tvr,avr,tU,nvr,svr,lvr,mE,gve,ivr,dvr,aU,cvr,fvr,mvr,gE,IGe,ic,hE,hve,g9,gvr,pve,hvr,NGe,rr,h9,pvr,dc,uvr,nU,_vr,bvr,sU,vvr,Fvr,Tvr,p9,Mvr,uve,Evr,Cvr,wvr,Pt,u9,Avr,_ve,yvr,Lvr,cc,xvr,bve,$vr,kvr,lU,Svr,Rvr,Pvr,pE,Bvr,$r,_9,Ivr,vve,Nvr,qvr,ln,jvr,Fve,Dvr,Gvr,Tve,Ovr,Vvr,Mve,Xvr,zvr,Wvr,rt,uE,Eve,Qvr,Hvr,iU,Uvr,Jvr,Yvr,_E,Cve,Kvr,Zvr,dU,eFr,oFr,rFr,bE,wve,tFr,aFr,cU,nFr,sFr,lFr,vE,Ave,iFr,dFr,fU,cFr,fFr,mFr,FE,yve,gFr,hFr,mU,pFr,uFr,_Fr,TE,qGe,fc,ME,Lve,b9,bFr,xve,vFr,jGe,tr,v9,FFr,mc,TFr,gU,MFr,EFr,hU,CFr,wFr,AFr,F9,yFr,$ve,LFr,xFr,$Fr,Bt,T9,kFr,kve,SFr,RFr,gc,PFr,Sve,BFr,IFr,pU,NFr,qFr,jFr,EE,DFr,kr,M9,GFr,Rve,OFr,VFr,dn,XFr,Pve,zFr,WFr,Bve,QFr,HFr,Ive,UFr,JFr,YFr,ie,CE,Nve,KFr,ZFr,uU,eTr,oTr,rTr,wE,qve,tTr,aTr,_U,nTr,sTr,lTr,AE,jve,iTr,dTr,bU,cTr,fTr,mTr,yE,Dve,gTr,hTr,vU,pTr,uTr,_Tr,LE,Gve,bTr,vTr,FU,FTr,TTr,MTr,xE,Ove,ETr,CTr,TU,wTr,ATr,yTr,$E,Vve,LTr,xTr,MU,$Tr,kTr,STr,kE,Xve,RTr,PTr,EU,BTr,ITr,NTr,SE,zve,qTr,jTr,CU,DTr,GTr,OTr,RE,Wve,VTr,XTr,wU,zTr,WTr,QTr,PE,Qve,HTr,UTr,AU,JTr,YTr,KTr,BE,Hve,ZTr,eMr,yU,oMr,rMr,tMr,IE,Uve,aMr,nMr,LU,sMr,lMr,iMr,NE,Jve,dMr,cMr,xU,fMr,mMr,gMr,qE,Yve,hMr,pMr,$U,uMr,_Mr,bMr,jE,Kve,vMr,FMr,kU,TMr,MMr,EMr,DE,Zve,CMr,wMr,SU,AMr,yMr,LMr,GE,eFe,xMr,$Mr,RU,kMr,SMr,RMr,OE,oFe,PMr,BMr,PU,IMr,NMr,qMr,VE,rFe,jMr,DMr,BU,GMr,OMr,VMr,XE,DGe,hc,zE,tFe,E9,XMr,aFe,zMr,GGe,ar,C9,WMr,pc,QMr,IU,HMr,UMr,NU,JMr,YMr,KMr,w9,ZMr,nFe,eEr,oEr,rEr,It,A9,tEr,sFe,aEr,nEr,uc,sEr,lFe,lEr,iEr,qU,dEr,cEr,fEr,WE,mEr,Sr,y9,gEr,iFe,hEr,pEr,cn,uEr,dFe,_Er,bEr,cFe,vEr,FEr,fFe,TEr,MEr,EEr,Le,QE,mFe,CEr,wEr,jU,AEr,yEr,LEr,HE,gFe,xEr,$Er,DU,kEr,SEr,REr,UE,hFe,PEr,BEr,GU,IEr,NEr,qEr,JE,pFe,jEr,DEr,OU,GEr,OEr,VEr,YE,uFe,XEr,zEr,VU,WEr,QEr,HEr,KE,_Fe,UEr,JEr,XU,YEr,KEr,ZEr,ZE,bFe,eCr,oCr,zU,rCr,tCr,aCr,eC,vFe,nCr,sCr,WU,lCr,iCr,dCr,oC,FFe,cCr,fCr,QU,mCr,gCr,hCr,rC,TFe,pCr,uCr,HU,_Cr,bCr,vCr,tC,OGe,_c,aC,MFe,L9,FCr,EFe,TCr,VGe,nr,x9,MCr,bc,ECr,UU,CCr,wCr,JU,ACr,yCr,LCr,$9,xCr,CFe,$Cr,kCr,SCr,Nt,k9,RCr,wFe,PCr,BCr,vc,ICr,AFe,NCr,qCr,YU,jCr,DCr,GCr,nC,OCr,Rr,S9,VCr,yFe,XCr,zCr,fn,WCr,LFe,QCr,HCr,xFe,UCr,JCr,$Fe,YCr,KCr,ZCr,re,sC,kFe,e5r,o5r,KU,r5r,t5r,a5r,lC,SFe,n5r,s5r,ZU,l5r,i5r,d5r,iC,RFe,c5r,f5r,eJ,m5r,g5r,h5r,dC,PFe,p5r,u5r,oJ,_5r,b5r,v5r,cC,BFe,F5r,T5r,rJ,M5r,E5r,C5r,fC,IFe,w5r,A5r,tJ,y5r,L5r,x5r,mC,NFe,$5r,k5r,aJ,S5r,R5r,P5r,gC,qFe,B5r,I5r,nJ,N5r,q5r,j5r,hC,jFe,D5r,G5r,sJ,O5r,V5r,X5r,pC,DFe,z5r,W5r,lJ,Q5r,H5r,U5r,uC,GFe,J5r,Y5r,iJ,K5r,Z5r,e3r,_C,OFe,o3r,r3r,dJ,t3r,a3r,n3r,bC,VFe,s3r,l3r,cJ,i3r,d3r,c3r,vC,XFe,f3r,m3r,fJ,g3r,h3r,p3r,FC,zFe,u3r,_3r,mJ,b3r,v3r,F3r,TC,WFe,T3r,M3r,gJ,E3r,C3r,w3r,MC,QFe,A3r,y3r,hJ,L3r,x3r,$3r,EC,HFe,k3r,S3r,pJ,R3r,P3r,B3r,CC,UFe,I3r,N3r,uJ,q3r,j3r,D3r,wC,JFe,G3r,O3r,_J,V3r,X3r,z3r,AC,YFe,W3r,Q3r,bJ,H3r,U3r,J3r,yC,KFe,Y3r,K3r,vJ,Z3r,e0r,o0r,LC,ZFe,r0r,t0r,FJ,a0r,n0r,s0r,xC,eTe,l0r,i0r,TJ,d0r,c0r,f0r,$C,oTe,m0r,g0r,MJ,h0r,p0r,u0r,kC,rTe,_0r,b0r,EJ,v0r,F0r,T0r,SC,XGe,Fc,RC,tTe,R9,M0r,aTe,E0r,zGe,sr,P9,C0r,Tc,w0r,CJ,A0r,y0r,wJ,L0r,x0r,$0r,B9,k0r,nTe,S0r,R0r,P0r,qt,I9,B0r,sTe,I0r,N0r,Mc,q0r,lTe,j0r,D0r,AJ,G0r,O0r,V0r,PC,X0r,Pr,N9,z0r,iTe,W0r,Q0r,mn,H0r,dTe,U0r,J0r,cTe,Y0r,K0r,fTe,Z0r,ewr,owr,pe,BC,mTe,rwr,twr,yJ,awr,nwr,swr,IC,gTe,lwr,iwr,LJ,dwr,cwr,fwr,NC,hTe,mwr,gwr,xJ,hwr,pwr,uwr,qC,pTe,_wr,bwr,$J,vwr,Fwr,Twr,jC,uTe,Mwr,Ewr,kJ,Cwr,wwr,Awr,DC,_Te,ywr,Lwr,SJ,xwr,$wr,kwr,GC,bTe,Swr,Rwr,RJ,Pwr,Bwr,Iwr,OC,vTe,Nwr,qwr,PJ,jwr,Dwr,Gwr,VC,FTe,Owr,Vwr,BJ,Xwr,zwr,Wwr,XC,TTe,Qwr,Hwr,IJ,Uwr,Jwr,Ywr,zC,MTe,Kwr,Zwr,NJ,eAr,oAr,rAr,WC,ETe,tAr,aAr,qJ,nAr,sAr,lAr,QC,CTe,iAr,dAr,jJ,cAr,fAr,mAr,HC,wTe,gAr,hAr,DJ,pAr,uAr,_Ar,UC,ATe,bAr,vAr,GJ,FAr,TAr,MAr,JC,yTe,EAr,CAr,OJ,wAr,AAr,yAr,YC,LTe,LAr,xAr,VJ,$Ar,kAr,SAr,KC,WGe,Ec,ZC,xTe,q9,RAr,$Te,PAr,QGe,lr,j9,BAr,Cc,IAr,XJ,NAr,qAr,zJ,jAr,DAr,GAr,D9,OAr,kTe,VAr,XAr,zAr,jt,G9,WAr,STe,QAr,HAr,wc,UAr,RTe,JAr,YAr,WJ,KAr,ZAr,e6r,e5,o6r,Br,O9,r6r,PTe,t6r,a6r,gn,n6r,BTe,s6r,l6r,ITe,i6r,d6r,NTe,c6r,f6r,m6r,V9,o5,qTe,g6r,h6r,QJ,p6r,u6r,_6r,r5,jTe,b6r,v6r,HJ,F6r,T6r,M6r,t5,HGe,Ac,a5,DTe,X9,E6r,GTe,C6r,UGe,ir,z9,w6r,yc,A6r,UJ,y6r,L6r,JJ,x6r,$6r,k6r,W9,S6r,OTe,R6r,P6r,B6r,Dt,Q9,I6r,VTe,N6r,q6r,Lc,j6r,XTe,D6r,G6r,YJ,O6r,V6r,X6r,n5,z6r,Ir,H9,W6r,zTe,Q6r,H6r,hn,U6r,WTe,J6r,Y6r,QTe,K6r,Z6r,HTe,eyr,oyr,ryr,UTe,s5,JTe,tyr,ayr,KJ,nyr,syr,lyr,l5,JGe,xc,i5,YTe,U9,iyr,KTe,dyr,YGe,dr,J9,cyr,$c,fyr,ZJ,myr,gyr,eY,hyr,pyr,uyr,Y9,_yr,ZTe,byr,vyr,Fyr,Gt,K9,Tyr,eMe,Myr,Eyr,kc,Cyr,oMe,wyr,Ayr,oY,yyr,Lyr,xyr,d5,$yr,Nr,Z9,kyr,rMe,Syr,Ryr,pn,Pyr,tMe,Byr,Iyr,aMe,Nyr,qyr,nMe,jyr,Dyr,Gyr,de,c5,sMe,Oyr,Vyr,rY,Xyr,zyr,Wyr,f5,lMe,Qyr,Hyr,tY,Uyr,Jyr,Yyr,m5,iMe,Kyr,Zyr,aY,eLr,oLr,rLr,g5,dMe,tLr,aLr,nY,nLr,sLr,lLr,h5,cMe,iLr,dLr,sY,cLr,fLr,mLr,p5,fMe,gLr,hLr,lY,pLr,uLr,_Lr,u5,mMe,bLr,vLr,iY,FLr,TLr,MLr,_5,gMe,ELr,CLr,dY,wLr,ALr,yLr,b5,hMe,LLr,xLr,cY,$Lr,kLr,SLr,v5,pMe,RLr,PLr,fY,BLr,ILr,NLr,F5,uMe,qLr,jLr,mY,DLr,GLr,OLr,T5,_Me,VLr,XLr,gY,zLr,WLr,QLr,M5,bMe,HLr,ULr,hY,JLr,YLr,KLr,E5,vMe,ZLr,e8r,pY,o8r,r8r,t8r,C5,FMe,a8r,n8r,uY,s8r,l8r,i8r,w5,TMe,d8r,c8r,_Y,f8r,m8r,g8r,A5,MMe,h8r,p8r,bY,u8r,_8r,b8r,y5,EMe,v8r,F8r,vY,T8r,M8r,E8r,L5,CMe,C8r,w8r,FY,A8r,y8r,L8r,x5,wMe,x8r,$8r,TY,k8r,S8r,R8r,$5,KGe,Sc,k5,AMe,ex,P8r,yMe,B8r,ZGe,cr,ox,I8r,Rc,N8r,MY,q8r,j8r,EY,D8r,G8r,O8r,rx,V8r,LMe,X8r,z8r,W8r,Ot,tx,Q8r,xMe,H8r,U8r,Pc,J8r,$Me,Y8r,K8r,CY,Z8r,e9r,o9r,S5,r9r,qr,ax,t9r,kMe,a9r,n9r,un,s9r,SMe,l9r,i9r,RMe,d9r,c9r,PMe,f9r,m9r,g9r,ce,R5,BMe,h9r,p9r,wY,u9r,_9r,b9r,P5,IMe,v9r,F9r,AY,T9r,M9r,E9r,B5,NMe,C9r,w9r,yY,A9r,y9r,L9r,I5,qMe,x9r,$9r,LY,k9r,S9r,R9r,N5,jMe,P9r,B9r,xY,I9r,N9r,q9r,q5,DMe,j9r,D9r,$Y,G9r,O9r,V9r,j5,GMe,X9r,z9r,kY,W9r,Q9r,H9r,D5,OMe,U9r,J9r,SY,Y9r,K9r,Z9r,G5,VMe,exr,oxr,RY,rxr,txr,axr,O5,XMe,nxr,sxr,PY,lxr,ixr,dxr,V5,zMe,cxr,fxr,BY,mxr,gxr,hxr,X5,WMe,pxr,uxr,IY,_xr,bxr,vxr,z5,QMe,Fxr,Txr,NY,Mxr,Exr,Cxr,W5,HMe,wxr,Axr,qY,yxr,Lxr,xxr,Q5,UMe,$xr,kxr,jY,Sxr,Rxr,Pxr,H5,JMe,Bxr,Ixr,DY,Nxr,qxr,jxr,U5,YMe,Dxr,Gxr,GY,Oxr,Vxr,Xxr,J5,KMe,zxr,Wxr,OY,Qxr,Hxr,Uxr,Y5,ZMe,Jxr,Yxr,VY,Kxr,Zxr,e$r,K5,eEe,o$r,r$r,XY,t$r,a$r,n$r,Z5,eOe,Bc,e3,oEe,nx,s$r,rEe,l$r,oOe,fr,sx,i$r,Ic,d$r,zY,c$r,f$r,WY,m$r,g$r,h$r,lx,p$r,tEe,u$r,_$r,b$r,Vt,ix,v$r,aEe,F$r,T$r,Nc,M$r,nEe,E$r,C$r,QY,w$r,A$r,y$r,o3,L$r,jr,dx,x$r,sEe,$$r,k$r,_n,S$r,lEe,R$r,P$r,iEe,B$r,I$r,dEe,N$r,q$r,j$r,cEe,r3,fEe,D$r,G$r,HY,O$r,V$r,X$r,t3,rOe,qc,a3,mEe,cx,z$r,gEe,W$r,tOe,mr,fx,Q$r,jc,H$r,UY,U$r,J$r,JY,Y$r,K$r,Z$r,mx,ekr,hEe,okr,rkr,tkr,Xt,gx,akr,pEe,nkr,skr,Dc,lkr,uEe,ikr,dkr,YY,ckr,fkr,mkr,n3,gkr,Dr,hx,hkr,_Ee,pkr,ukr,bn,_kr,bEe,bkr,vkr,vEe,Fkr,Tkr,FEe,Mkr,Ekr,Ckr,TEe,s3,MEe,wkr,Akr,KY,ykr,Lkr,xkr,l3,aOe,Gc,i3,EEe,px,$kr,CEe,kkr,nOe,gr,ux,Skr,Oc,Rkr,ZY,Pkr,Bkr,eK,Ikr,Nkr,qkr,_x,jkr,wEe,Dkr,Gkr,Okr,zt,bx,Vkr,AEe,Xkr,zkr,Vc,Wkr,yEe,Qkr,Hkr,oK,Ukr,Jkr,Ykr,d3,Kkr,Gr,vx,Zkr,LEe,eSr,oSr,vn,rSr,xEe,tSr,aSr,$Ee,nSr,sSr,kEe,lSr,iSr,dSr,te,c3,SEe,cSr,fSr,rK,mSr,gSr,hSr,f3,REe,pSr,uSr,tK,_Sr,bSr,vSr,m3,PEe,FSr,TSr,aK,MSr,ESr,CSr,g3,BEe,wSr,ASr,nK,ySr,LSr,xSr,h3,IEe,$Sr,kSr,sK,SSr,RSr,PSr,p3,NEe,BSr,ISr,lK,NSr,qSr,jSr,u3,qEe,DSr,GSr,iK,OSr,VSr,XSr,_3,jEe,zSr,WSr,dK,QSr,HSr,USr,b3,DEe,JSr,YSr,cK,KSr,ZSr,eRr,v3,GEe,oRr,rRr,fK,tRr,aRr,nRr,F3,OEe,sRr,lRr,mK,iRr,dRr,cRr,T3,VEe,fRr,mRr,gK,gRr,hRr,pRr,M3,XEe,uRr,_Rr,hK,bRr,vRr,FRr,E3,zEe,TRr,MRr,pK,ERr,CRr,wRr,C3,WEe,ARr,yRr,uK,LRr,xRr,$Rr,w3,QEe,kRr,SRr,_K,RRr,PRr,BRr,A3,HEe,IRr,NRr,bK,qRr,jRr,DRr,y3,UEe,GRr,ORr,vK,VRr,XRr,zRr,L3,JEe,WRr,QRr,FK,HRr,URr,JRr,x3,YEe,YRr,KRr,TK,ZRr,ePr,oPr,$3,KEe,rPr,tPr,MK,aPr,nPr,sPr,k3,ZEe,lPr,iPr,EK,dPr,cPr,fPr,S3,eCe,mPr,gPr,CK,hPr,pPr,uPr,R3,oCe,_Pr,bPr,wK,vPr,FPr,TPr,P3,rCe,MPr,EPr,AK,CPr,wPr,APr,B3,tCe,yPr,LPr,yK,xPr,$Pr,kPr,I3,sOe,Xc,N3,aCe,Fx,SPr,nCe,RPr,lOe,hr,Tx,PPr,zc,BPr,LK,IPr,NPr,xK,qPr,jPr,DPr,Mx,GPr,sCe,OPr,VPr,XPr,Wt,Ex,zPr,lCe,WPr,QPr,Wc,HPr,iCe,UPr,JPr,$K,YPr,KPr,ZPr,q3,eBr,Or,Cx,oBr,dCe,rBr,tBr,Fn,aBr,cCe,nBr,sBr,fCe,lBr,iBr,mCe,dBr,cBr,fBr,xe,j3,gCe,mBr,gBr,kK,hBr,pBr,uBr,D3,hCe,_Br,bBr,SK,vBr,FBr,TBr,G3,pCe,MBr,EBr,RK,CBr,wBr,ABr,O3,uCe,yBr,LBr,PK,xBr,$Br,kBr,V3,_Ce,SBr,RBr,BK,PBr,BBr,IBr,X3,bCe,NBr,qBr,IK,jBr,DBr,GBr,z3,vCe,OBr,VBr,NK,XBr,zBr,WBr,W3,FCe,QBr,HBr,qK,UBr,JBr,YBr,Q3,TCe,KBr,ZBr,jK,eIr,oIr,rIr,H3,MCe,tIr,aIr,DK,nIr,sIr,lIr,U3,iOe,Qc,J3,ECe,wx,iIr,CCe,dIr,dOe,pr,Ax,cIr,Hc,fIr,GK,mIr,gIr,OK,hIr,pIr,uIr,yx,_Ir,wCe,bIr,vIr,FIr,Qt,Lx,TIr,ACe,MIr,EIr,Uc,CIr,yCe,wIr,AIr,VK,yIr,LIr,xIr,Y3,$Ir,Vr,xx,kIr,LCe,SIr,RIr,Tn,PIr,xCe,BIr,IIr,$Ce,NIr,qIr,kCe,jIr,DIr,GIr,Ee,K3,SCe,OIr,VIr,XK,XIr,zIr,WIr,Z3,RCe,QIr,HIr,zK,UIr,JIr,YIr,e0,PCe,KIr,ZIr,WK,eNr,oNr,rNr,o0,BCe,tNr,aNr,QK,nNr,sNr,lNr,r0,ICe,iNr,dNr,HK,cNr,fNr,mNr,t0,NCe,gNr,hNr,UK,pNr,uNr,_Nr,a0,qCe,bNr,vNr,JK,FNr,TNr,MNr,n0,jCe,ENr,CNr,YK,wNr,ANr,yNr,s0,DCe,LNr,xNr,KK,$Nr,kNr,SNr,l0,GCe,RNr,PNr,ZK,BNr,INr,NNr,i0,OCe,qNr,jNr,eZ,DNr,GNr,ONr,d0,VCe,VNr,XNr,oZ,zNr,WNr,QNr,c0,cOe,Jc,f0,XCe,$x,HNr,zCe,UNr,fOe,ur,kx,JNr,Yc,YNr,rZ,KNr,ZNr,tZ,eqr,oqr,rqr,Sx,tqr,WCe,aqr,nqr,sqr,Ht,Rx,lqr,QCe,iqr,dqr,Kc,cqr,HCe,fqr,mqr,aZ,gqr,hqr,pqr,m0,uqr,Xr,Px,_qr,UCe,bqr,vqr,Mn,Fqr,JCe,Tqr,Mqr,YCe,Eqr,Cqr,KCe,wqr,Aqr,yqr,$e,g0,ZCe,Lqr,xqr,nZ,$qr,kqr,Sqr,h0,e5e,Rqr,Pqr,sZ,Bqr,Iqr,Nqr,p0,o5e,qqr,jqr,lZ,Dqr,Gqr,Oqr,u0,r5e,Vqr,Xqr,iZ,zqr,Wqr,Qqr,_0,t5e,Hqr,Uqr,dZ,Jqr,Yqr,Kqr,b0,a5e,Zqr,ejr,cZ,ojr,rjr,tjr,v0,n5e,ajr,njr,fZ,sjr,ljr,ijr,F0,s5e,djr,cjr,mZ,fjr,mjr,gjr,T0,l5e,hjr,pjr,gZ,ujr,_jr,bjr,M0,i5e,vjr,Fjr,hZ,Tjr,Mjr,Ejr,E0,mOe,Zc,C0,d5e,Bx,Cjr,c5e,wjr,gOe,_r,Ix,Ajr,ef,yjr,pZ,Ljr,xjr,uZ,$jr,kjr,Sjr,Nx,Rjr,f5e,Pjr,Bjr,Ijr,Ut,qx,Njr,m5e,qjr,jjr,of,Djr,g5e,Gjr,Ojr,_Z,Vjr,Xjr,zjr,w0,Wjr,zr,jx,Qjr,h5e,Hjr,Ujr,En,Jjr,p5e,Yjr,Kjr,u5e,Zjr,eDr,_5e,oDr,rDr,tDr,Pe,A0,b5e,aDr,nDr,bZ,sDr,lDr,iDr,y0,v5e,dDr,cDr,vZ,fDr,mDr,gDr,L0,F5e,hDr,pDr,FZ,uDr,_Dr,bDr,x0,T5e,vDr,FDr,TZ,TDr,MDr,EDr,$0,M5e,CDr,wDr,MZ,ADr,yDr,LDr,k0,E5e,xDr,$Dr,EZ,kDr,SDr,RDr,S0,C5e,PDr,BDr,CZ,IDr,NDr,qDr,R0,w5e,jDr,DDr,wZ,GDr,ODr,VDr,P0,A5e,XDr,zDr,AZ,WDr,QDr,HDr,B0,hOe,rf,I0,y5e,Dx,UDr,L5e,JDr,pOe,br,Gx,YDr,tf,KDr,yZ,ZDr,eGr,LZ,oGr,rGr,tGr,Ox,aGr,x5e,nGr,sGr,lGr,Jt,Vx,iGr,$5e,dGr,cGr,af,fGr,k5e,mGr,gGr,xZ,hGr,pGr,uGr,N0,_Gr,Wr,Xx,bGr,S5e,vGr,FGr,Cn,TGr,R5e,MGr,EGr,P5e,CGr,wGr,B5e,AGr,yGr,LGr,ke,q0,I5e,xGr,$Gr,$Z,kGr,SGr,RGr,j0,N5e,PGr,BGr,kZ,IGr,NGr,qGr,D0,q5e,jGr,DGr,SZ,GGr,OGr,VGr,G0,j5e,XGr,zGr,RZ,WGr,QGr,HGr,O0,D5e,UGr,JGr,PZ,YGr,KGr,ZGr,V0,G5e,eOr,oOr,BZ,rOr,tOr,aOr,X0,O5e,nOr,sOr,IZ,lOr,iOr,dOr,z0,V5e,cOr,fOr,NZ,mOr,gOr,hOr,W0,X5e,pOr,uOr,qZ,_Or,bOr,vOr,Q0,z5e,FOr,TOr,jZ,MOr,EOr,COr,H0,uOe,nf,U0,W5e,zx,wOr,Q5e,AOr,_Oe,vr,Wx,yOr,sf,LOr,DZ,xOr,$Or,GZ,kOr,SOr,ROr,Qx,POr,H5e,BOr,IOr,NOr,Yt,Hx,qOr,U5e,jOr,DOr,lf,GOr,J5e,OOr,VOr,OZ,XOr,zOr,WOr,J0,QOr,Qr,Ux,HOr,Y5e,UOr,JOr,wn,YOr,K5e,KOr,ZOr,Z5e,eVr,oVr,e3e,rVr,tVr,aVr,Se,Y0,o3e,nVr,sVr,VZ,lVr,iVr,dVr,K0,r3e,cVr,fVr,XZ,mVr,gVr,hVr,Z0,t3e,pVr,uVr,zZ,_Vr,bVr,vVr,ew,a3e,FVr,TVr,WZ,MVr,EVr,CVr,ow,n3e,wVr,AVr,QZ,yVr,LVr,xVr,rw,s3e,$Vr,kVr,HZ,SVr,RVr,PVr,tw,l3e,BVr,IVr,UZ,NVr,qVr,jVr,aw,i3e,DVr,GVr,JZ,OVr,VVr,XVr,nw,d3e,zVr,WVr,YZ,QVr,HVr,UVr,sw,c3e,JVr,YVr,KZ,KVr,ZVr,eXr,lw,bOe,df,iw,f3e,Jx,oXr,m3e,rXr,vOe,Fr,Yx,tXr,cf,aXr,ZZ,nXr,sXr,eee,lXr,iXr,dXr,Kx,cXr,g3e,fXr,mXr,gXr,Kt,Zx,hXr,h3e,pXr,uXr,ff,_Xr,p3e,bXr,vXr,oee,FXr,TXr,MXr,dw,EXr,Hr,e$,CXr,u3e,wXr,AXr,An,yXr,_3e,LXr,xXr,b3e,$Xr,kXr,v3e,SXr,RXr,PXr,Oe,cw,F3e,BXr,IXr,ree,NXr,qXr,jXr,fw,T3e,DXr,GXr,tee,OXr,VXr,XXr,mw,M3e,zXr,WXr,aee,QXr,HXr,UXr,gw,E3e,JXr,YXr,nee,KXr,ZXr,ezr,hw,C3e,ozr,rzr,see,tzr,azr,nzr,pw,w3e,szr,lzr,lee,izr,dzr,czr,uw,A3e,fzr,mzr,iee,gzr,hzr,pzr,_w,y3e,uzr,_zr,dee,bzr,vzr,Fzr,bw,FOe,mf,vw,L3e,o$,Tzr,x3e,Mzr,TOe,Tr,r$,Ezr,gf,Czr,cee,wzr,Azr,fee,yzr,Lzr,xzr,t$,$zr,$3e,kzr,Szr,Rzr,Zt,a$,Pzr,k3e,Bzr,Izr,hf,Nzr,S3e,qzr,jzr,mee,Dzr,Gzr,Ozr,Fw,Vzr,Ur,n$,Xzr,R3e,zzr,Wzr,yn,Qzr,P3e,Hzr,Uzr,B3e,Jzr,Yzr,I3e,Kzr,Zzr,eWr,Ve,Tw,N3e,oWr,rWr,gee,tWr,aWr,nWr,Mw,q3e,sWr,lWr,hee,iWr,dWr,cWr,Ew,j3e,fWr,mWr,pee,gWr,hWr,pWr,Cw,D3e,uWr,_Wr,uee,bWr,vWr,FWr,ww,G3e,TWr,MWr,_ee,EWr,CWr,wWr,Aw,O3e,AWr,yWr,bee,LWr,xWr,$Wr,yw,V3e,kWr,SWr,vee,RWr,PWr,BWr,Lw,X3e,IWr,NWr,Fee,qWr,jWr,DWr,xw,MOe,pf,$w,z3e,s$,GWr,W3e,OWr,EOe,Mr,l$,VWr,uf,XWr,Tee,zWr,WWr,Mee,QWr,HWr,UWr,i$,JWr,Q3e,YWr,KWr,ZWr,ea,d$,eQr,H3e,oQr,rQr,_f,tQr,U3e,aQr,nQr,Eee,sQr,lQr,iQr,kw,dQr,Jr,c$,cQr,J3e,fQr,mQr,Ln,gQr,Y3e,hQr,pQr,K3e,uQr,_Qr,Z3e,bQr,vQr,FQr,e0e,Sw,o0e,TQr,MQr,Cee,EQr,CQr,wQr,Rw,COe,bf,Pw,r0e,f$,AQr,t0e,yQr,wOe,Er,m$,LQr,vf,xQr,wee,$Qr,kQr,Aee,SQr,RQr,PQr,g$,BQr,a0e,IQr,NQr,qQr,oa,h$,jQr,n0e,DQr,GQr,Ff,OQr,s0e,VQr,XQr,yee,zQr,WQr,QQr,Bw,HQr,Yr,p$,UQr,l0e,JQr,YQr,xn,KQr,i0e,ZQr,eHr,d0e,oHr,rHr,c0e,tHr,aHr,nHr,u$,Iw,f0e,sHr,lHr,Lee,iHr,dHr,cHr,Nw,m0e,fHr,mHr,xee,gHr,hHr,pHr,qw,AOe,Tf,jw,g0e,_$,uHr,h0e,_Hr,yOe,Cr,b$,bHr,Mf,vHr,$ee,FHr,THr,kee,MHr,EHr,CHr,v$,wHr,p0e,AHr,yHr,LHr,ra,F$,xHr,u0e,$Hr,kHr,Ef,SHr,_0e,RHr,PHr,See,BHr,IHr,NHr,Dw,qHr,Kr,T$,jHr,b0e,DHr,GHr,$n,OHr,v0e,VHr,XHr,F0e,zHr,WHr,T0e,QHr,HHr,UHr,M0e,Gw,E0e,JHr,YHr,Ree,KHr,ZHr,eUr,Ow,LOe;return d=new oe({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),my=new oe({}),gy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Sf=new oUr({props:{warning:!0,$$slots:{default:[zIt]},$$scope:{ctx:L}}}),hy=new oe({}),py=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L591"}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L614"}}),qg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[WIt]},$$scope:{ctx:L}}}),vy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/configuration_auto.py#L737"}}),Fy=new oe({}),Ty=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L392"}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17427/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L406"}}),Fh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[QIt]},$$scope:{ctx:L}}}),wy=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/tokenization_auto.py#L605"}}),Ay=new oe({}),yy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),$y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17427/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),op=new oUr({props:{$$slots:{default:[HIt]},$$scope:{ctx:L}}}),rp=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[UIt]},$$scope:{ctx:L}}}),ky=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),Sy=new oe({}),Ry=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L88"}}),Iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L102"}}),Mp=new oUr({props:{$$slots:{default:[JIt]},$$scope:{ctx:L}}}),Ep=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[YIt]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/processing_auto.py#L255"}}),qy=new oe({}),jy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L753"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Ap=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[KIt]},$$scope:{ctx:L}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),C_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[ZIt]},$$scope:{ctx:L}}}),Vy=new oe({}),Xy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L760"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),A_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[eNt]},$$scope:{ctx:L}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[oNt]},$$scope:{ctx:L}}}),Hy=new oe({}),Uy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L775"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[rNt]},$$scope:{ctx:L}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),n1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[tNt]},$$scope:{ctx:L}}}),Zy=new oe({}),eL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L782"}}),rL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),l1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[aNt]},$$scope:{ctx:L}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),z1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nNt]},$$scope:{ctx:L}}}),aL=new oe({}),nL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L789"}}),lL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Q1=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sNt]},$$scope:{ctx:L}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),f7=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lNt]},$$scope:{ctx:L}}}),dL=new oe({}),cL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L798"}}),mL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),g7=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[iNt]},$$scope:{ctx:L}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),ib=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dNt]},$$scope:{ctx:L}}}),hL=new oe({}),pL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L843"}}),_L=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),cb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[cNt]},$$scope:{ctx:L}}}),bL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Gb=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fNt]},$$scope:{ctx:L}}}),vL=new oe({}),FL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L850"}}),ML=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Vb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mNt]},$$scope:{ctx:L}}}),EL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Jb=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gNt]},$$scope:{ctx:L}}}),CL=new oe({}),wL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L836"}}),yL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Kb=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[hNt]},$$scope:{ctx:L}}}),LL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),P4=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[pNt]},$$scope:{ctx:L}}}),xL=new oe({}),$L=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L807"}}),SL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[uNt]},$$scope:{ctx:L}}}),RL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Cv=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[_Nt]},$$scope:{ctx:L}}}),PL=new oe({}),BL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L814"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Av=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[bNt]},$$scope:{ctx:L}}}),qL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),xv=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[vNt]},$$scope:{ctx:L}}}),jL=new oe({}),DL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L859"}}),OL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),kv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[FNt]},$$scope:{ctx:L}}}),VL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),zv=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[TNt]},$$scope:{ctx:L}}}),XL=new oe({}),zL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L898"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Qv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[MNt]},$$scope:{ctx:L}}}),HL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Jv=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ENt]},$$scope:{ctx:L}}}),UL=new oe({}),JL=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L825"}}),KL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Kv=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[CNt]},$$scope:{ctx:L}}}),ZL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),oF=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[wNt]},$$scope:{ctx:L}}}),e8=new oe({}),o8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L905"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),tF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[ANt]},$$scope:{ctx:L}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),hF=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[yNt]},$$scope:{ctx:L}}}),n8=new oe({}),s8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L928"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),uF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[LNt]},$$scope:{ctx:L}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[xNt]},$$scope:{ctx:L}}}),c8=new oe({}),f8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L912"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[$Nt]},$$scope:{ctx:L}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),NF=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[kNt]},$$scope:{ctx:L}}}),p8=new oe({}),u8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L919"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),jF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[SNt]},$$scope:{ctx:L}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),VF=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[RNt]},$$scope:{ctx:L}}}),T8=new oe({}),M8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L937"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),zF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[PNt]},$$scope:{ctx:L}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),KF=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[BNt]},$$scope:{ctx:L}}}),A8=new oe({}),y8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L944"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),eT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[INt]},$$scope:{ctx:L}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),nT=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[NNt]},$$scope:{ctx:L}}}),k8=new oe({}),S8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L891"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),lT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[qNt]},$$scope:{ctx:L}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),fT=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[jNt]},$$scope:{ctx:L}}}),N8=new oe({}),q8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L866"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),gT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[DNt]},$$scope:{ctx:L}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),uT=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[GNt]},$$scope:{ctx:L}}}),O8=new oe({}),V8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L873"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),bT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[ONt]},$$scope:{ctx:L}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),CT=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[VNt]},$$scope:{ctx:L}}}),Q8=new oe({}),H8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_auto.py#L882"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),AT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[XNt]},$$scope:{ctx:L}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),xT=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[zNt]},$$scope:{ctx:L}}}),K8=new oe({}),Z8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L408"}}),o9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),kT=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[WNt]},$$scope:{ctx:L}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[QNt]},$$scope:{ctx:L}}}),t9=new oe({}),a9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L415"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[HNt]},$$scope:{ctx:L}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),YM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[UNt]},$$scope:{ctx:L}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L430"}}),f9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),ZM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[JNt]},$$scope:{ctx:L}}}),m9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[YNt]},$$scope:{ctx:L}}}),g9=new oe({}),h9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L446"}}),u9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[KNt]},$$scope:{ctx:L}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZNt]},$$scope:{ctx:L}}}),b9=new oe({}),v9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[eqt]},$$scope:{ctx:L}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[oqt]},$$scope:{ctx:L}}}),E9=new oe({}),C9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rqt]},$$scope:{ctx:L}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[tqt]},$$scope:{ctx:L}}}),L9=new oe({}),x9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[aqt]},$$scope:{ctx:L}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nqt]},$$scope:{ctx:L}}}),R9=new oe({}),P9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L523"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[sqt]},$$scope:{ctx:L}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[lqt]},$$scope:{ctx:L}}}),q9=new oe({}),j9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L530"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[iqt]},$$scope:{ctx:L}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[dqt]},$$scope:{ctx:L}}}),X9=new oe({}),z9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L503"}}),Q9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[cqt]},$$scope:{ctx:L}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[fqt]},$$scope:{ctx:L}}}),U9=new oe({}),J9=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L514"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[mqt]},$$scope:{ctx:L}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gqt]},$$scope:{ctx:L}}}),ex=new oe({}),ox=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[hqt]},$$scope:{ctx:L}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[pqt]},$$scope:{ctx:L}}}),nx=new oe({}),sx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[uqt]},$$scope:{ctx:L}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_qt]},$$scope:{ctx:L}}}),cx=new oe({}),fx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_tf_auto.py#L539"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[bqt]},$$scope:{ctx:L}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[vqt]},$$scope:{ctx:L}}}),px=new oe({}),ux=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L243"}}),bx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Fqt]},$$scope:{ctx:L}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),I3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Tqt]},$$scope:{ctx:L}}}),Fx=new oe({}),Tx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L257"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Mqt]},$$scope:{ctx:L}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Eqt]},$$scope:{ctx:L}}}),wx=new oe({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L250"}}),Lx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Cqt]},$$scope:{ctx:L}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[wqt]},$$scope:{ctx:L}}}),$x=new oe({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L264"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Aqt]},$$scope:{ctx:L}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[yqt]},$$scope:{ctx:L}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L271"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Lqt]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[xqt]},$$scope:{ctx:L}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L280"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[$qt]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[kqt]},$$scope:{ctx:L}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L289"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),J0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Sqt]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Rqt]},$$scope:{ctx:L}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L296"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Pqt]},$$scope:{ctx:L}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Bqt]},$$scope:{ctx:L}}}),o$=new oe({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L305"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Iqt]},$$scope:{ctx:L}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Nqt]},$$scope:{ctx:L}}}),s$=new oe({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L312"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[qqt]},$$scope:{ctx:L}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[jqt]},$$scope:{ctx:L}}}),f$=new oe({}),m$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L321"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Dqt]},$$scope:{ctx:L}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Gqt]},$$scope:{ctx:L}}}),_$=new oe({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/modeling_flax_auto.py#L330"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L389"}}),Dw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Oqt]},$$scope:{ctx:L}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17427/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17427/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17427/src/transformers/models/auto/auto_factory.py#L417"}}),Ow=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Vqt]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),yf=l(),nt=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),iy=o("from_pretrained()"),Lf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ge=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),dy=o("AutoConfig"),Rn=o(", "),Pn=a("a"),cy=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),fy=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),xf=l(),F(xa.$$.fragment),Qe=l(),Ae=a("p"),Nk=o("will create a model that is an instance of "),Ai=a("a"),qk=o("BertModel"),jk=o("."),Co=l(),$a=a("p"),Dk=o("There is one class of "),$f=a("code"),Gk=o("AutoModel"),qXe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),EDe=l(),yi=a("h2"),kf=a("a"),Lre=a("span"),F(my.$$.fragment),jXe=l(),xre=a("span"),DXe=o("Extending the Auto Classes"),CDe=l(),In=a("p"),GXe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$re=a("code"),OXe=o("NewModel"),VXe=o(", make sure you have a "),kre=a("code"),XXe=o("NewModelConfig"),zXe=o(` then you can add those to the auto
classes like this:`),wDe=l(),F(gy.$$.fragment),ADe=l(),Ok=a("p"),WXe=o("You will then be able to use the auto classes like you would usually do!"),yDe=l(),F(Sf.$$.fragment),LDe=l(),Li=a("h2"),Rf=a("a"),Sre=a("span"),F(hy.$$.fragment),QXe=l(),Rre=a("span"),HXe=o("AutoConfig"),xDe=l(),wo=a("div"),F(py.$$.fragment),UXe=l(),uy=a("p"),JXe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Vk=a("a"),YXe=o("from_pretrained()"),KXe=o(" class method."),ZXe=l(),_y=a("p"),eze=o("This class cannot be instantiated directly using "),Pre=a("code"),oze=o("__init__()"),rze=o(" (throws an error)."),tze=l(),wr=a("div"),F(by.$$.fragment),aze=l(),Bre=a("p"),nze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sze=l(),xi=a("p"),lze=o("The configuration class to instantiate is selected based on the "),Ire=a("code"),ize=o("model_type"),dze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nre=a("code"),cze=o("pretrained_model_name_or_path"),fze=o(":"),mze=l(),A=a("ul"),Pf=a("li"),qre=a("strong"),gze=o("albert"),hze=o(" \u2014 "),Xk=a("a"),pze=o("AlbertConfig"),uze=o(" (ALBERT model)"),_ze=l(),Bf=a("li"),jre=a("strong"),bze=o("bart"),vze=o(" \u2014 "),zk=a("a"),Fze=o("BartConfig"),Tze=o(" (BART model)"),Mze=l(),If=a("li"),Dre=a("strong"),Eze=o("beit"),Cze=o(" \u2014 "),Wk=a("a"),wze=o("BeitConfig"),Aze=o(" (BEiT model)"),yze=l(),Nf=a("li"),Gre=a("strong"),Lze=o("bert"),xze=o(" \u2014 "),Qk=a("a"),$ze=o("BertConfig"),kze=o(" (BERT model)"),Sze=l(),qf=a("li"),Ore=a("strong"),Rze=o("bert-generation"),Pze=o(" \u2014 "),Hk=a("a"),Bze=o("BertGenerationConfig"),Ize=o(" (Bert Generation model)"),Nze=l(),jf=a("li"),Vre=a("strong"),qze=o("big_bird"),jze=o(" \u2014 "),Uk=a("a"),Dze=o("BigBirdConfig"),Gze=o(" (BigBird model)"),Oze=l(),Df=a("li"),Xre=a("strong"),Vze=o("bigbird_pegasus"),Xze=o(" \u2014 "),Jk=a("a"),zze=o("BigBirdPegasusConfig"),Wze=o(" (BigBird-Pegasus model)"),Qze=l(),Gf=a("li"),zre=a("strong"),Hze=o("blenderbot"),Uze=o(" \u2014 "),Yk=a("a"),Jze=o("BlenderbotConfig"),Yze=o(" (Blenderbot model)"),Kze=l(),Of=a("li"),Wre=a("strong"),Zze=o("blenderbot-small"),eWe=o(" \u2014 "),Kk=a("a"),oWe=o("BlenderbotSmallConfig"),rWe=o(" (BlenderbotSmall model)"),tWe=l(),Vf=a("li"),Qre=a("strong"),aWe=o("bloom"),nWe=o(" \u2014 "),Zk=a("a"),sWe=o("BloomConfig"),lWe=o(" (BLOOM model)"),iWe=l(),Xf=a("li"),Hre=a("strong"),dWe=o("camembert"),cWe=o(" \u2014 "),eS=a("a"),fWe=o("CamembertConfig"),mWe=o(" (CamemBERT model)"),gWe=l(),zf=a("li"),Ure=a("strong"),hWe=o("canine"),pWe=o(" \u2014 "),oS=a("a"),uWe=o("CanineConfig"),_We=o(" (CANINE model)"),bWe=l(),Wf=a("li"),Jre=a("strong"),vWe=o("clip"),FWe=o(" \u2014 "),rS=a("a"),TWe=o("CLIPConfig"),MWe=o(" (CLIP model)"),EWe=l(),Qf=a("li"),Yre=a("strong"),CWe=o("convbert"),wWe=o(" \u2014 "),tS=a("a"),AWe=o("ConvBertConfig"),yWe=o(" (ConvBERT model)"),LWe=l(),Hf=a("li"),Kre=a("strong"),xWe=o("convnext"),$We=o(" \u2014 "),aS=a("a"),kWe=o("ConvNextConfig"),SWe=o(" (ConvNeXT model)"),RWe=l(),Uf=a("li"),Zre=a("strong"),PWe=o("ctrl"),BWe=o(" \u2014 "),nS=a("a"),IWe=o("CTRLConfig"),NWe=o(" (CTRL model)"),qWe=l(),Jf=a("li"),ete=a("strong"),jWe=o("cvt"),DWe=o(" \u2014 "),sS=a("a"),GWe=o("CvtConfig"),OWe=o(" (CvT model)"),VWe=l(),Yf=a("li"),ote=a("strong"),XWe=o("data2vec-audio"),zWe=o(" \u2014 "),lS=a("a"),WWe=o("Data2VecAudioConfig"),QWe=o(" (Data2VecAudio model)"),HWe=l(),Kf=a("li"),rte=a("strong"),UWe=o("data2vec-text"),JWe=o(" \u2014 "),iS=a("a"),YWe=o("Data2VecTextConfig"),KWe=o(" (Data2VecText model)"),ZWe=l(),Zf=a("li"),tte=a("strong"),eQe=o("data2vec-vision"),oQe=o(" \u2014 "),dS=a("a"),rQe=o("Data2VecVisionConfig"),tQe=o(" (Data2VecVision model)"),aQe=l(),em=a("li"),ate=a("strong"),nQe=o("deberta"),sQe=o(" \u2014 "),cS=a("a"),lQe=o("DebertaConfig"),iQe=o(" (DeBERTa model)"),dQe=l(),om=a("li"),nte=a("strong"),cQe=o("deberta-v2"),fQe=o(" \u2014 "),fS=a("a"),mQe=o("DebertaV2Config"),gQe=o(" (DeBERTa-v2 model)"),hQe=l(),rm=a("li"),ste=a("strong"),pQe=o("decision_transformer"),uQe=o(" \u2014 "),mS=a("a"),_Qe=o("DecisionTransformerConfig"),bQe=o(" (Decision Transformer model)"),vQe=l(),tm=a("li"),lte=a("strong"),FQe=o("deit"),TQe=o(" \u2014 "),gS=a("a"),MQe=o("DeiTConfig"),EQe=o(" (DeiT model)"),CQe=l(),am=a("li"),ite=a("strong"),wQe=o("detr"),AQe=o(" \u2014 "),hS=a("a"),yQe=o("DetrConfig"),LQe=o(" (DETR model)"),xQe=l(),nm=a("li"),dte=a("strong"),$Qe=o("distilbert"),kQe=o(" \u2014 "),pS=a("a"),SQe=o("DistilBertConfig"),RQe=o(" (DistilBERT model)"),PQe=l(),sm=a("li"),cte=a("strong"),BQe=o("dpr"),IQe=o(" \u2014 "),uS=a("a"),NQe=o("DPRConfig"),qQe=o(" (DPR model)"),jQe=l(),lm=a("li"),fte=a("strong"),DQe=o("dpt"),GQe=o(" \u2014 "),_S=a("a"),OQe=o("DPTConfig"),VQe=o(" (DPT model)"),XQe=l(),im=a("li"),mte=a("strong"),zQe=o("electra"),WQe=o(" \u2014 "),bS=a("a"),QQe=o("ElectraConfig"),HQe=o(" (ELECTRA model)"),UQe=l(),dm=a("li"),gte=a("strong"),JQe=o("encoder-decoder"),YQe=o(" \u2014 "),vS=a("a"),KQe=o("EncoderDecoderConfig"),ZQe=o(" (Encoder decoder model)"),eHe=l(),cm=a("li"),hte=a("strong"),oHe=o("flaubert"),rHe=o(" \u2014 "),FS=a("a"),tHe=o("FlaubertConfig"),aHe=o(" (FlauBERT model)"),nHe=l(),fm=a("li"),pte=a("strong"),sHe=o("flava"),lHe=o(" \u2014 "),TS=a("a"),iHe=o("FlavaConfig"),dHe=o(" (FLAVA model)"),cHe=l(),mm=a("li"),ute=a("strong"),fHe=o("fnet"),mHe=o(" \u2014 "),MS=a("a"),gHe=o("FNetConfig"),hHe=o(" (FNet model)"),pHe=l(),gm=a("li"),_te=a("strong"),uHe=o("fsmt"),_He=o(" \u2014 "),ES=a("a"),bHe=o("FSMTConfig"),vHe=o(" (FairSeq Machine-Translation model)"),FHe=l(),hm=a("li"),bte=a("strong"),THe=o("funnel"),MHe=o(" \u2014 "),CS=a("a"),EHe=o("FunnelConfig"),CHe=o(" (Funnel Transformer model)"),wHe=l(),pm=a("li"),vte=a("strong"),AHe=o("glpn"),yHe=o(" \u2014 "),wS=a("a"),LHe=o("GLPNConfig"),xHe=o(" (GLPN model)"),$He=l(),um=a("li"),Fte=a("strong"),kHe=o("gpt2"),SHe=o(" \u2014 "),AS=a("a"),RHe=o("GPT2Config"),PHe=o(" (OpenAI GPT-2 model)"),BHe=l(),_m=a("li"),Tte=a("strong"),IHe=o("gpt_neo"),NHe=o(" \u2014 "),yS=a("a"),qHe=o("GPTNeoConfig"),jHe=o(" (GPT Neo model)"),DHe=l(),bm=a("li"),Mte=a("strong"),GHe=o("gpt_neox"),OHe=o(" \u2014 "),LS=a("a"),VHe=o("GPTNeoXConfig"),XHe=o(" (GPT NeoX model)"),zHe=l(),vm=a("li"),Ete=a("strong"),WHe=o("gptj"),QHe=o(" \u2014 "),xS=a("a"),HHe=o("GPTJConfig"),UHe=o(" (GPT-J model)"),JHe=l(),Fm=a("li"),Cte=a("strong"),YHe=o("hubert"),KHe=o(" \u2014 "),$S=a("a"),ZHe=o("HubertConfig"),eUe=o(" (Hubert model)"),oUe=l(),Tm=a("li"),wte=a("strong"),rUe=o("ibert"),tUe=o(" \u2014 "),kS=a("a"),aUe=o("IBertConfig"),nUe=o(" (I-BERT model)"),sUe=l(),Mm=a("li"),Ate=a("strong"),lUe=o("imagegpt"),iUe=o(" \u2014 "),SS=a("a"),dUe=o("ImageGPTConfig"),cUe=o(" (ImageGPT model)"),fUe=l(),Em=a("li"),yte=a("strong"),mUe=o("layoutlm"),gUe=o(" \u2014 "),RS=a("a"),hUe=o("LayoutLMConfig"),pUe=o(" (LayoutLM model)"),uUe=l(),Cm=a("li"),Lte=a("strong"),_Ue=o("layoutlmv2"),bUe=o(" \u2014 "),PS=a("a"),vUe=o("LayoutLMv2Config"),FUe=o(" (LayoutLMv2 model)"),TUe=l(),wm=a("li"),xte=a("strong"),MUe=o("layoutlmv3"),EUe=o(" \u2014 "),BS=a("a"),CUe=o("LayoutLMv3Config"),wUe=o(" (LayoutLMv3 model)"),AUe=l(),Am=a("li"),$te=a("strong"),yUe=o("led"),LUe=o(" \u2014 "),IS=a("a"),xUe=o("LEDConfig"),$Ue=o(" (LED model)"),kUe=l(),ym=a("li"),kte=a("strong"),SUe=o("levit"),RUe=o(" \u2014 "),NS=a("a"),PUe=o("LevitConfig"),BUe=o(" (LeViT model)"),IUe=l(),Lm=a("li"),Ste=a("strong"),NUe=o("longformer"),qUe=o(" \u2014 "),qS=a("a"),jUe=o("LongformerConfig"),DUe=o(" (Longformer model)"),GUe=l(),xm=a("li"),Rte=a("strong"),OUe=o("luke"),VUe=o(" \u2014 "),jS=a("a"),XUe=o("LukeConfig"),zUe=o(" (LUKE model)"),WUe=l(),$m=a("li"),Pte=a("strong"),QUe=o("lxmert"),HUe=o(" \u2014 "),DS=a("a"),UUe=o("LxmertConfig"),JUe=o(" (LXMERT model)"),YUe=l(),km=a("li"),Bte=a("strong"),KUe=o("m2m_100"),ZUe=o(" \u2014 "),GS=a("a"),eJe=o("M2M100Config"),oJe=o(" (M2M100 model)"),rJe=l(),Sm=a("li"),Ite=a("strong"),tJe=o("marian"),aJe=o(" \u2014 "),OS=a("a"),nJe=o("MarianConfig"),sJe=o(" (Marian model)"),lJe=l(),Rm=a("li"),Nte=a("strong"),iJe=o("maskformer"),dJe=o(" \u2014 "),VS=a("a"),cJe=o("MaskFormerConfig"),fJe=o(" (MaskFormer model)"),mJe=l(),Pm=a("li"),qte=a("strong"),gJe=o("mbart"),hJe=o(" \u2014 "),XS=a("a"),pJe=o("MBartConfig"),uJe=o(" (mBART model)"),_Je=l(),Bm=a("li"),jte=a("strong"),bJe=o("mctct"),vJe=o(" \u2014 "),zS=a("a"),FJe=o("MCTCTConfig"),TJe=o(" (M-CTC-T model)"),MJe=l(),Im=a("li"),Dte=a("strong"),EJe=o("megatron-bert"),CJe=o(" \u2014 "),WS=a("a"),wJe=o("MegatronBertConfig"),AJe=o(" (Megatron-BERT model)"),yJe=l(),Nm=a("li"),Gte=a("strong"),LJe=o("mobilebert"),xJe=o(" \u2014 "),QS=a("a"),$Je=o("MobileBertConfig"),kJe=o(" (MobileBERT model)"),SJe=l(),qm=a("li"),Ote=a("strong"),RJe=o("mpnet"),PJe=o(" \u2014 "),HS=a("a"),BJe=o("MPNetConfig"),IJe=o(" (MPNet model)"),NJe=l(),jm=a("li"),Vte=a("strong"),qJe=o("mt5"),jJe=o(" \u2014 "),US=a("a"),DJe=o("MT5Config"),GJe=o(" (MT5 model)"),OJe=l(),Dm=a("li"),Xte=a("strong"),VJe=o("nystromformer"),XJe=o(" \u2014 "),JS=a("a"),zJe=o("NystromformerConfig"),WJe=o(" (Nystr\xF6mformer model)"),QJe=l(),Gm=a("li"),zte=a("strong"),HJe=o("openai-gpt"),UJe=o(" \u2014 "),YS=a("a"),JJe=o("OpenAIGPTConfig"),YJe=o(" (OpenAI GPT model)"),KJe=l(),Om=a("li"),Wte=a("strong"),ZJe=o("opt"),eYe=o(" \u2014 "),KS=a("a"),oYe=o("OPTConfig"),rYe=o(" (OPT model)"),tYe=l(),Vm=a("li"),Qte=a("strong"),aYe=o("pegasus"),nYe=o(" \u2014 "),ZS=a("a"),sYe=o("PegasusConfig"),lYe=o(" (Pegasus model)"),iYe=l(),Xm=a("li"),Hte=a("strong"),dYe=o("perceiver"),cYe=o(" \u2014 "),eR=a("a"),fYe=o("PerceiverConfig"),mYe=o(" (Perceiver model)"),gYe=l(),zm=a("li"),Ute=a("strong"),hYe=o("plbart"),pYe=o(" \u2014 "),oR=a("a"),uYe=o("PLBartConfig"),_Ye=o(" (PLBart model)"),bYe=l(),Wm=a("li"),Jte=a("strong"),vYe=o("poolformer"),FYe=o(" \u2014 "),rR=a("a"),TYe=o("PoolFormerConfig"),MYe=o(" (PoolFormer model)"),EYe=l(),Qm=a("li"),Yte=a("strong"),CYe=o("prophetnet"),wYe=o(" \u2014 "),tR=a("a"),AYe=o("ProphetNetConfig"),yYe=o(" (ProphetNet model)"),LYe=l(),Hm=a("li"),Kte=a("strong"),xYe=o("qdqbert"),$Ye=o(" \u2014 "),aR=a("a"),kYe=o("QDQBertConfig"),SYe=o(" (QDQBert model)"),RYe=l(),Um=a("li"),Zte=a("strong"),PYe=o("rag"),BYe=o(" \u2014 "),nR=a("a"),IYe=o("RagConfig"),NYe=o(" (RAG model)"),qYe=l(),Jm=a("li"),eae=a("strong"),jYe=o("realm"),DYe=o(" \u2014 "),sR=a("a"),GYe=o("RealmConfig"),OYe=o(" (REALM model)"),VYe=l(),Ym=a("li"),oae=a("strong"),XYe=o("reformer"),zYe=o(" \u2014 "),lR=a("a"),WYe=o("ReformerConfig"),QYe=o(" (Reformer model)"),HYe=l(),Km=a("li"),rae=a("strong"),UYe=o("regnet"),JYe=o(" \u2014 "),iR=a("a"),YYe=o("RegNetConfig"),KYe=o(" (RegNet model)"),ZYe=l(),Zm=a("li"),tae=a("strong"),eKe=o("rembert"),oKe=o(" \u2014 "),dR=a("a"),rKe=o("RemBertConfig"),tKe=o(" (RemBERT model)"),aKe=l(),eg=a("li"),aae=a("strong"),nKe=o("resnet"),sKe=o(" \u2014 "),cR=a("a"),lKe=o("ResNetConfig"),iKe=o(" (ResNet model)"),dKe=l(),og=a("li"),nae=a("strong"),cKe=o("retribert"),fKe=o(" \u2014 "),fR=a("a"),mKe=o("RetriBertConfig"),gKe=o(" (RetriBERT model)"),hKe=l(),rg=a("li"),sae=a("strong"),pKe=o("roberta"),uKe=o(" \u2014 "),mR=a("a"),_Ke=o("RobertaConfig"),bKe=o(" (RoBERTa model)"),vKe=l(),tg=a("li"),lae=a("strong"),FKe=o("roformer"),TKe=o(" \u2014 "),gR=a("a"),MKe=o("RoFormerConfig"),EKe=o(" (RoFormer model)"),CKe=l(),ag=a("li"),iae=a("strong"),wKe=o("segformer"),AKe=o(" \u2014 "),hR=a("a"),yKe=o("SegformerConfig"),LKe=o(" (SegFormer model)"),xKe=l(),ng=a("li"),dae=a("strong"),$Ke=o("sew"),kKe=o(" \u2014 "),pR=a("a"),SKe=o("SEWConfig"),RKe=o(" (SEW model)"),PKe=l(),sg=a("li"),cae=a("strong"),BKe=o("sew-d"),IKe=o(" \u2014 "),uR=a("a"),NKe=o("SEWDConfig"),qKe=o(" (SEW-D model)"),jKe=l(),lg=a("li"),fae=a("strong"),DKe=o("speech-encoder-decoder"),GKe=o(" \u2014 "),_R=a("a"),OKe=o("SpeechEncoderDecoderConfig"),VKe=o(" (Speech Encoder decoder model)"),XKe=l(),ig=a("li"),mae=a("strong"),zKe=o("speech_to_text"),WKe=o(" \u2014 "),bR=a("a"),QKe=o("Speech2TextConfig"),HKe=o(" (Speech2Text model)"),UKe=l(),dg=a("li"),gae=a("strong"),JKe=o("speech_to_text_2"),YKe=o(" \u2014 "),vR=a("a"),KKe=o("Speech2Text2Config"),ZKe=o(" (Speech2Text2 model)"),eZe=l(),cg=a("li"),hae=a("strong"),oZe=o("splinter"),rZe=o(" \u2014 "),FR=a("a"),tZe=o("SplinterConfig"),aZe=o(" (Splinter model)"),nZe=l(),fg=a("li"),pae=a("strong"),sZe=o("squeezebert"),lZe=o(" \u2014 "),TR=a("a"),iZe=o("SqueezeBertConfig"),dZe=o(" (SqueezeBERT model)"),cZe=l(),mg=a("li"),uae=a("strong"),fZe=o("swin"),mZe=o(" \u2014 "),MR=a("a"),gZe=o("SwinConfig"),hZe=o(" (Swin Transformer model)"),pZe=l(),gg=a("li"),_ae=a("strong"),uZe=o("t5"),_Ze=o(" \u2014 "),ER=a("a"),bZe=o("T5Config"),vZe=o(" (T5 model)"),FZe=l(),hg=a("li"),bae=a("strong"),TZe=o("tapas"),MZe=o(" \u2014 "),CR=a("a"),EZe=o("TapasConfig"),CZe=o(" (TAPAS model)"),wZe=l(),pg=a("li"),vae=a("strong"),AZe=o("trajectory_transformer"),yZe=o(" \u2014 "),wR=a("a"),LZe=o("TrajectoryTransformerConfig"),xZe=o(" (Trajectory Transformer model)"),$Ze=l(),ug=a("li"),Fae=a("strong"),kZe=o("transfo-xl"),SZe=o(" \u2014 "),AR=a("a"),RZe=o("TransfoXLConfig"),PZe=o(" (Transformer-XL model)"),BZe=l(),_g=a("li"),Tae=a("strong"),IZe=o("trocr"),NZe=o(" \u2014 "),yR=a("a"),qZe=o("TrOCRConfig"),jZe=o(" (TrOCR model)"),DZe=l(),bg=a("li"),Mae=a("strong"),GZe=o("unispeech"),OZe=o(" \u2014 "),LR=a("a"),VZe=o("UniSpeechConfig"),XZe=o(" (UniSpeech model)"),zZe=l(),vg=a("li"),Eae=a("strong"),WZe=o("unispeech-sat"),QZe=o(" \u2014 "),xR=a("a"),HZe=o("UniSpeechSatConfig"),UZe=o(" (UniSpeechSat model)"),JZe=l(),Fg=a("li"),Cae=a("strong"),YZe=o("van"),KZe=o(" \u2014 "),$R=a("a"),ZZe=o("VanConfig"),eeo=o(" (VAN model)"),oeo=l(),Tg=a("li"),wae=a("strong"),reo=o("vilt"),teo=o(" \u2014 "),kR=a("a"),aeo=o("ViltConfig"),neo=o(" (ViLT model)"),seo=l(),Mg=a("li"),Aae=a("strong"),leo=o("vision-encoder-decoder"),ieo=o(" \u2014 "),SR=a("a"),deo=o("VisionEncoderDecoderConfig"),ceo=o(" (Vision Encoder decoder model)"),feo=l(),Eg=a("li"),yae=a("strong"),meo=o("vision-text-dual-encoder"),geo=o(" \u2014 "),RR=a("a"),heo=o("VisionTextDualEncoderConfig"),peo=o(" (VisionTextDualEncoder model)"),ueo=l(),Cg=a("li"),Lae=a("strong"),_eo=o("visual_bert"),beo=o(" \u2014 "),PR=a("a"),veo=o("VisualBertConfig"),Feo=o(" (VisualBERT model)"),Teo=l(),wg=a("li"),xae=a("strong"),Meo=o("vit"),Eeo=o(" \u2014 "),BR=a("a"),Ceo=o("ViTConfig"),weo=o(" (ViT model)"),Aeo=l(),Ag=a("li"),$ae=a("strong"),yeo=o("vit_mae"),Leo=o(" \u2014 "),IR=a("a"),xeo=o("ViTMAEConfig"),$eo=o(" (ViTMAE model)"),keo=l(),yg=a("li"),kae=a("strong"),Seo=o("wav2vec2"),Reo=o(" \u2014 "),NR=a("a"),Peo=o("Wav2Vec2Config"),Beo=o(" (Wav2Vec2 model)"),Ieo=l(),Lg=a("li"),Sae=a("strong"),Neo=o("wav2vec2-conformer"),qeo=o(" \u2014 "),qR=a("a"),jeo=o("Wav2Vec2ConformerConfig"),Deo=o(" (Wav2Vec2-Conformer model)"),Geo=l(),xg=a("li"),Rae=a("strong"),Oeo=o("wavlm"),Veo=o(" \u2014 "),jR=a("a"),Xeo=o("WavLMConfig"),zeo=o(" (WavLM model)"),Weo=l(),$g=a("li"),Pae=a("strong"),Qeo=o("xglm"),Heo=o(" \u2014 "),DR=a("a"),Ueo=o("XGLMConfig"),Jeo=o(" (XGLM model)"),Yeo=l(),kg=a("li"),Bae=a("strong"),Keo=o("xlm"),Zeo=o(" \u2014 "),GR=a("a"),eoo=o("XLMConfig"),ooo=o(" (XLM model)"),roo=l(),Sg=a("li"),Iae=a("strong"),too=o("xlm-prophetnet"),aoo=o(" \u2014 "),OR=a("a"),noo=o("XLMProphetNetConfig"),soo=o(" (XLM-ProphetNet model)"),loo=l(),Rg=a("li"),Nae=a("strong"),ioo=o("xlm-roberta"),doo=o(" \u2014 "),VR=a("a"),coo=o("XLMRobertaConfig"),foo=o(" (XLM-RoBERTa model)"),moo=l(),Pg=a("li"),qae=a("strong"),goo=o("xlm-roberta-xl"),hoo=o(" \u2014 "),XR=a("a"),poo=o("XLMRobertaXLConfig"),uoo=o(" (XLM-RoBERTa-XL model)"),_oo=l(),Bg=a("li"),jae=a("strong"),boo=o("xlnet"),voo=o(" \u2014 "),zR=a("a"),Foo=o("XLNetConfig"),Too=o(" (XLNet model)"),Moo=l(),Ig=a("li"),Dae=a("strong"),Eoo=o("yolos"),Coo=o(" \u2014 "),WR=a("a"),woo=o("YolosConfig"),Aoo=o(" (YOLOS model)"),yoo=l(),Ng=a("li"),Gae=a("strong"),Loo=o("yoso"),xoo=o(" \u2014 "),QR=a("a"),$oo=o("YosoConfig"),koo=o(" (YOSO model)"),Soo=l(),F(qg.$$.fragment),Roo=l(),jg=a("div"),F(vy.$$.fragment),Poo=l(),Oae=a("p"),Boo=o("Register a new configuration for this class."),$De=l(),$i=a("h2"),Dg=a("a"),Vae=a("span"),F(Fy.$$.fragment),Ioo=l(),Xae=a("span"),Noo=o("AutoTokenizer"),kDe=l(),Ao=a("div"),F(Ty.$$.fragment),qoo=l(),My=a("p"),joo=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HR=a("a"),Doo=o("AutoTokenizer.from_pretrained()"),Goo=o(" class method."),Ooo=l(),Ey=a("p"),Voo=o("This class cannot be instantiated directly using "),zae=a("code"),Xoo=o("__init__()"),zoo=o(" (throws an error)."),Woo=l(),Ar=a("div"),F(Cy.$$.fragment),Qoo=l(),Wae=a("p"),Hoo=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Uoo=l(),ka=a("p"),Joo=o("The tokenizer class to instantiate is selected based on the "),Qae=a("code"),Yoo=o("model_type"),Koo=o(` property of the config object (either
passed as an argument or loaded from `),Hae=a("code"),Zoo=o("pretrained_model_name_or_path"),ero=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uae=a("code"),oro=o("pretrained_model_name_or_path"),rro=o(":"),tro=l(),k=a("ul"),Nn=a("li"),Jae=a("strong"),aro=o("albert"),nro=o(" \u2014 "),UR=a("a"),sro=o("AlbertTokenizer"),lro=o(" or "),JR=a("a"),iro=o("AlbertTokenizerFast"),dro=o(" (ALBERT model)"),cro=l(),qn=a("li"),Yae=a("strong"),fro=o("bart"),mro=o(" \u2014 "),YR=a("a"),gro=o("BartTokenizer"),hro=o(" or "),KR=a("a"),pro=o("BartTokenizerFast"),uro=o(" (BART model)"),_ro=l(),jn=a("li"),Kae=a("strong"),bro=o("barthez"),vro=o(" \u2014 "),ZR=a("a"),Fro=o("BarthezTokenizer"),Tro=o(" or "),eP=a("a"),Mro=o("BarthezTokenizerFast"),Ero=o(" (BARThez model)"),Cro=l(),Gg=a("li"),Zae=a("strong"),wro=o("bartpho"),Aro=o(" \u2014 "),oP=a("a"),yro=o("BartphoTokenizer"),Lro=o(" (BARTpho model)"),xro=l(),Dn=a("li"),ene=a("strong"),$ro=o("bert"),kro=o(" \u2014 "),rP=a("a"),Sro=o("BertTokenizer"),Rro=o(" or "),tP=a("a"),Pro=o("BertTokenizerFast"),Bro=o(" (BERT model)"),Iro=l(),Og=a("li"),one=a("strong"),Nro=o("bert-generation"),qro=o(" \u2014 "),aP=a("a"),jro=o("BertGenerationTokenizer"),Dro=o(" (Bert Generation model)"),Gro=l(),Vg=a("li"),rne=a("strong"),Oro=o("bert-japanese"),Vro=o(" \u2014 "),nP=a("a"),Xro=o("BertJapaneseTokenizer"),zro=o(" (BertJapanese model)"),Wro=l(),Xg=a("li"),tne=a("strong"),Qro=o("bertweet"),Hro=o(" \u2014 "),sP=a("a"),Uro=o("BertweetTokenizer"),Jro=o(" (BERTweet model)"),Yro=l(),Gn=a("li"),ane=a("strong"),Kro=o("big_bird"),Zro=o(" \u2014 "),lP=a("a"),eto=o("BigBirdTokenizer"),oto=o(" or "),iP=a("a"),rto=o("BigBirdTokenizerFast"),tto=o(" (BigBird model)"),ato=l(),On=a("li"),nne=a("strong"),nto=o("bigbird_pegasus"),sto=o(" \u2014 "),dP=a("a"),lto=o("PegasusTokenizer"),ito=o(" or "),cP=a("a"),dto=o("PegasusTokenizerFast"),cto=o(" (BigBird-Pegasus model)"),fto=l(),Vn=a("li"),sne=a("strong"),mto=o("blenderbot"),gto=o(" \u2014 "),fP=a("a"),hto=o("BlenderbotTokenizer"),pto=o(" or "),mP=a("a"),uto=o("BlenderbotTokenizerFast"),_to=o(" (Blenderbot model)"),bto=l(),zg=a("li"),lne=a("strong"),vto=o("blenderbot-small"),Fto=o(" \u2014 "),gP=a("a"),Tto=o("BlenderbotSmallTokenizer"),Mto=o(" (BlenderbotSmall model)"),Eto=l(),Wg=a("li"),ine=a("strong"),Cto=o("bloom"),wto=o(" \u2014 "),hP=a("a"),Ato=o("BloomTokenizerFast"),yto=o(" (BLOOM model)"),Lto=l(),Qg=a("li"),dne=a("strong"),xto=o("byt5"),$to=o(" \u2014 "),pP=a("a"),kto=o("ByT5Tokenizer"),Sto=o(" (ByT5 model)"),Rto=l(),Xn=a("li"),cne=a("strong"),Pto=o("camembert"),Bto=o(" \u2014 "),uP=a("a"),Ito=o("CamembertTokenizer"),Nto=o(" or "),_P=a("a"),qto=o("CamembertTokenizerFast"),jto=o(" (CamemBERT model)"),Dto=l(),Hg=a("li"),fne=a("strong"),Gto=o("canine"),Oto=o(" \u2014 "),bP=a("a"),Vto=o("CanineTokenizer"),Xto=o(" (CANINE model)"),zto=l(),zn=a("li"),mne=a("strong"),Wto=o("clip"),Qto=o(" \u2014 "),vP=a("a"),Hto=o("CLIPTokenizer"),Uto=o(" or "),FP=a("a"),Jto=o("CLIPTokenizerFast"),Yto=o(" (CLIP model)"),Kto=l(),Wn=a("li"),gne=a("strong"),Zto=o("convbert"),eao=o(" \u2014 "),TP=a("a"),oao=o("ConvBertTokenizer"),rao=o(" or "),MP=a("a"),tao=o("ConvBertTokenizerFast"),aao=o(" (ConvBERT model)"),nao=l(),Qn=a("li"),hne=a("strong"),sao=o("cpm"),lao=o(" \u2014 "),EP=a("a"),iao=o("CpmTokenizer"),dao=o(" or "),CP=a("a"),cao=o("CpmTokenizerFast"),fao=o(" (CPM model)"),mao=l(),Ug=a("li"),pne=a("strong"),gao=o("ctrl"),hao=o(" \u2014 "),wP=a("a"),pao=o("CTRLTokenizer"),uao=o(" (CTRL model)"),_ao=l(),Hn=a("li"),une=a("strong"),bao=o("data2vec-text"),vao=o(" \u2014 "),AP=a("a"),Fao=o("RobertaTokenizer"),Tao=o(" or "),yP=a("a"),Mao=o("RobertaTokenizerFast"),Eao=o(" (Data2VecText model)"),Cao=l(),Un=a("li"),_ne=a("strong"),wao=o("deberta"),Aao=o(" \u2014 "),LP=a("a"),yao=o("DebertaTokenizer"),Lao=o(" or "),xP=a("a"),xao=o("DebertaTokenizerFast"),$ao=o(" (DeBERTa model)"),kao=l(),Jn=a("li"),bne=a("strong"),Sao=o("deberta-v2"),Rao=o(" \u2014 "),$P=a("a"),Pao=o("DebertaV2Tokenizer"),Bao=o(" or "),kP=a("a"),Iao=o("DebertaV2TokenizerFast"),Nao=o(" (DeBERTa-v2 model)"),qao=l(),Yn=a("li"),vne=a("strong"),jao=o("distilbert"),Dao=o(" \u2014 "),SP=a("a"),Gao=o("DistilBertTokenizer"),Oao=o(" or "),RP=a("a"),Vao=o("DistilBertTokenizerFast"),Xao=o(" (DistilBERT model)"),zao=l(),Kn=a("li"),Fne=a("strong"),Wao=o("dpr"),Qao=o(" \u2014 "),PP=a("a"),Hao=o("DPRQuestionEncoderTokenizer"),Uao=o(" or "),BP=a("a"),Jao=o("DPRQuestionEncoderTokenizerFast"),Yao=o(" (DPR model)"),Kao=l(),Zn=a("li"),Tne=a("strong"),Zao=o("electra"),eno=o(" \u2014 "),IP=a("a"),ono=o("ElectraTokenizer"),rno=o(" or "),NP=a("a"),tno=o("ElectraTokenizerFast"),ano=o(" (ELECTRA model)"),nno=l(),Jg=a("li"),Mne=a("strong"),sno=o("flaubert"),lno=o(" \u2014 "),qP=a("a"),ino=o("FlaubertTokenizer"),dno=o(" (FlauBERT model)"),cno=l(),es=a("li"),Ene=a("strong"),fno=o("fnet"),mno=o(" \u2014 "),jP=a("a"),gno=o("FNetTokenizer"),hno=o(" or "),DP=a("a"),pno=o("FNetTokenizerFast"),uno=o(" (FNet model)"),_no=l(),Yg=a("li"),Cne=a("strong"),bno=o("fsmt"),vno=o(" \u2014 "),GP=a("a"),Fno=o("FSMTTokenizer"),Tno=o(" (FairSeq Machine-Translation model)"),Mno=l(),os=a("li"),wne=a("strong"),Eno=o("funnel"),Cno=o(" \u2014 "),OP=a("a"),wno=o("FunnelTokenizer"),Ano=o(" or "),VP=a("a"),yno=o("FunnelTokenizerFast"),Lno=o(" (Funnel Transformer model)"),xno=l(),rs=a("li"),Ane=a("strong"),$no=o("gpt2"),kno=o(" \u2014 "),XP=a("a"),Sno=o("GPT2Tokenizer"),Rno=o(" or "),zP=a("a"),Pno=o("GPT2TokenizerFast"),Bno=o(" (OpenAI GPT-2 model)"),Ino=l(),ts=a("li"),yne=a("strong"),Nno=o("gpt_neo"),qno=o(" \u2014 "),WP=a("a"),jno=o("GPT2Tokenizer"),Dno=o(" or "),QP=a("a"),Gno=o("GPT2TokenizerFast"),Ono=o(" (GPT Neo model)"),Vno=l(),Kg=a("li"),Lne=a("strong"),Xno=o("gpt_neox"),zno=o(" \u2014 "),HP=a("a"),Wno=o("GPTNeoXTokenizerFast"),Qno=o(" (GPT NeoX model)"),Hno=l(),as=a("li"),xne=a("strong"),Uno=o("gptj"),Jno=o(" \u2014 "),UP=a("a"),Yno=o("GPT2Tokenizer"),Kno=o(" or "),JP=a("a"),Zno=o("GPT2TokenizerFast"),eso=o(" (GPT-J model)"),oso=l(),ns=a("li"),$ne=a("strong"),rso=o("herbert"),tso=o(" \u2014 "),YP=a("a"),aso=o("HerbertTokenizer"),nso=o(" or "),KP=a("a"),sso=o("HerbertTokenizerFast"),lso=o(" (HerBERT model)"),iso=l(),Zg=a("li"),kne=a("strong"),dso=o("hubert"),cso=o(" \u2014 "),ZP=a("a"),fso=o("Wav2Vec2CTCTokenizer"),mso=o(" (Hubert model)"),gso=l(),ss=a("li"),Sne=a("strong"),hso=o("ibert"),pso=o(" \u2014 "),eB=a("a"),uso=o("RobertaTokenizer"),_so=o(" or "),oB=a("a"),bso=o("RobertaTokenizerFast"),vso=o(" (I-BERT model)"),Fso=l(),ls=a("li"),Rne=a("strong"),Tso=o("layoutlm"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("LayoutLMTokenizer"),Cso=o(" or "),tB=a("a"),wso=o("LayoutLMTokenizerFast"),Aso=o(" (LayoutLM model)"),yso=l(),is=a("li"),Pne=a("strong"),Lso=o("layoutlmv2"),xso=o(" \u2014 "),aB=a("a"),$so=o("LayoutLMv2Tokenizer"),kso=o(" or "),nB=a("a"),Sso=o("LayoutLMv2TokenizerFast"),Rso=o(" (LayoutLMv2 model)"),Pso=l(),ds=a("li"),Bne=a("strong"),Bso=o("layoutlmv3"),Iso=o(" \u2014 "),sB=a("a"),Nso=o("LayoutLMv3Tokenizer"),qso=o(" or "),lB=a("a"),jso=o("LayoutLMv3TokenizerFast"),Dso=o(" (LayoutLMv3 model)"),Gso=l(),cs=a("li"),Ine=a("strong"),Oso=o("layoutxlm"),Vso=o(" \u2014 "),iB=a("a"),Xso=o("LayoutXLMTokenizer"),zso=o(" or "),dB=a("a"),Wso=o("LayoutXLMTokenizerFast"),Qso=o(" (LayoutXLM model)"),Hso=l(),fs=a("li"),Nne=a("strong"),Uso=o("led"),Jso=o(" \u2014 "),cB=a("a"),Yso=o("LEDTokenizer"),Kso=o(" or "),fB=a("a"),Zso=o("LEDTokenizerFast"),elo=o(" (LED model)"),olo=l(),ms=a("li"),qne=a("strong"),rlo=o("longformer"),tlo=o(" \u2014 "),mB=a("a"),alo=o("LongformerTokenizer"),nlo=o(" or "),gB=a("a"),slo=o("LongformerTokenizerFast"),llo=o(" (Longformer model)"),ilo=l(),eh=a("li"),jne=a("strong"),dlo=o("luke"),clo=o(" \u2014 "),hB=a("a"),flo=o("LukeTokenizer"),mlo=o(" (LUKE model)"),glo=l(),gs=a("li"),Dne=a("strong"),hlo=o("lxmert"),plo=o(" \u2014 "),pB=a("a"),ulo=o("LxmertTokenizer"),_lo=o(" or "),uB=a("a"),blo=o("LxmertTokenizerFast"),vlo=o(" (LXMERT model)"),Flo=l(),oh=a("li"),Gne=a("strong"),Tlo=o("m2m_100"),Mlo=o(" \u2014 "),_B=a("a"),Elo=o("M2M100Tokenizer"),Clo=o(" (M2M100 model)"),wlo=l(),rh=a("li"),One=a("strong"),Alo=o("marian"),ylo=o(" \u2014 "),bB=a("a"),Llo=o("MarianTokenizer"),xlo=o(" (Marian model)"),$lo=l(),hs=a("li"),Vne=a("strong"),klo=o("mbart"),Slo=o(" \u2014 "),vB=a("a"),Rlo=o("MBartTokenizer"),Plo=o(" or "),FB=a("a"),Blo=o("MBartTokenizerFast"),Ilo=o(" (mBART model)"),Nlo=l(),ps=a("li"),Xne=a("strong"),qlo=o("mbart50"),jlo=o(" \u2014 "),TB=a("a"),Dlo=o("MBart50Tokenizer"),Glo=o(" or "),MB=a("a"),Olo=o("MBart50TokenizerFast"),Vlo=o(" (mBART-50 model)"),Xlo=l(),us=a("li"),zne=a("strong"),zlo=o("megatron-bert"),Wlo=o(" \u2014 "),EB=a("a"),Qlo=o("BertTokenizer"),Hlo=o(" or "),CB=a("a"),Ulo=o("BertTokenizerFast"),Jlo=o(" (Megatron-BERT model)"),Ylo=l(),th=a("li"),Wne=a("strong"),Klo=o("mluke"),Zlo=o(" \u2014 "),wB=a("a"),eio=o("MLukeTokenizer"),oio=o(" (mLUKE model)"),rio=l(),_s=a("li"),Qne=a("strong"),tio=o("mobilebert"),aio=o(" \u2014 "),AB=a("a"),nio=o("MobileBertTokenizer"),sio=o(" or "),yB=a("a"),lio=o("MobileBertTokenizerFast"),iio=o(" (MobileBERT model)"),dio=l(),bs=a("li"),Hne=a("strong"),cio=o("mpnet"),fio=o(" \u2014 "),LB=a("a"),mio=o("MPNetTokenizer"),gio=o(" or "),xB=a("a"),hio=o("MPNetTokenizerFast"),pio=o(" (MPNet model)"),uio=l(),vs=a("li"),Une=a("strong"),_io=o("mt5"),bio=o(" \u2014 "),$B=a("a"),vio=o("MT5Tokenizer"),Fio=o(" or "),kB=a("a"),Tio=o("MT5TokenizerFast"),Mio=o(" (MT5 model)"),Eio=l(),Fs=a("li"),Jne=a("strong"),Cio=o("nystromformer"),wio=o(" \u2014 "),SB=a("a"),Aio=o("AlbertTokenizer"),yio=o(" or "),RB=a("a"),Lio=o("AlbertTokenizerFast"),xio=o(" (Nystr\xF6mformer model)"),$io=l(),Ts=a("li"),Yne=a("strong"),kio=o("openai-gpt"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("OpenAIGPTTokenizer"),Pio=o(" or "),BB=a("a"),Bio=o("OpenAIGPTTokenizerFast"),Iio=o(" (OpenAI GPT model)"),Nio=l(),ah=a("li"),Kne=a("strong"),qio=o("opt"),jio=o(" \u2014 "),IB=a("a"),Dio=o("GPT2Tokenizer"),Gio=o(" (OPT model)"),Oio=l(),Ms=a("li"),Zne=a("strong"),Vio=o("pegasus"),Xio=o(" \u2014 "),NB=a("a"),zio=o("PegasusTokenizer"),Wio=o(" or "),qB=a("a"),Qio=o("PegasusTokenizerFast"),Hio=o(" (Pegasus model)"),Uio=l(),nh=a("li"),ese=a("strong"),Jio=o("perceiver"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("PerceiverTokenizer"),Zio=o(" (Perceiver model)"),edo=l(),sh=a("li"),ose=a("strong"),odo=o("phobert"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("PhobertTokenizer"),ado=o(" (PhoBERT model)"),ndo=l(),lh=a("li"),rse=a("strong"),sdo=o("plbart"),ldo=o(" \u2014 "),GB=a("a"),ido=o("PLBartTokenizer"),ddo=o(" (PLBart model)"),cdo=l(),ih=a("li"),tse=a("strong"),fdo=o("prophetnet"),mdo=o(" \u2014 "),OB=a("a"),gdo=o("ProphetNetTokenizer"),hdo=o(" (ProphetNet model)"),pdo=l(),Es=a("li"),ase=a("strong"),udo=o("qdqbert"),_do=o(" \u2014 "),VB=a("a"),bdo=o("BertTokenizer"),vdo=o(" or "),XB=a("a"),Fdo=o("BertTokenizerFast"),Tdo=o(" (QDQBert model)"),Mdo=l(),dh=a("li"),nse=a("strong"),Edo=o("rag"),Cdo=o(" \u2014 "),zB=a("a"),wdo=o("RagTokenizer"),Ado=o(" (RAG model)"),ydo=l(),Cs=a("li"),sse=a("strong"),Ldo=o("realm"),xdo=o(" \u2014 "),WB=a("a"),$do=o("RealmTokenizer"),kdo=o(" or "),QB=a("a"),Sdo=o("RealmTokenizerFast"),Rdo=o(" (REALM model)"),Pdo=l(),ws=a("li"),lse=a("strong"),Bdo=o("reformer"),Ido=o(" \u2014 "),HB=a("a"),Ndo=o("ReformerTokenizer"),qdo=o(" or "),UB=a("a"),jdo=o("ReformerTokenizerFast"),Ddo=o(" (Reformer model)"),Gdo=l(),As=a("li"),ise=a("strong"),Odo=o("rembert"),Vdo=o(" \u2014 "),JB=a("a"),Xdo=o("RemBertTokenizer"),zdo=o(" or "),YB=a("a"),Wdo=o("RemBertTokenizerFast"),Qdo=o(" (RemBERT model)"),Hdo=l(),ys=a("li"),dse=a("strong"),Udo=o("retribert"),Jdo=o(" \u2014 "),KB=a("a"),Ydo=o("RetriBertTokenizer"),Kdo=o(" or "),ZB=a("a"),Zdo=o("RetriBertTokenizerFast"),eco=o(" (RetriBERT model)"),oco=l(),Ls=a("li"),cse=a("strong"),rco=o("roberta"),tco=o(" \u2014 "),eI=a("a"),aco=o("RobertaTokenizer"),nco=o(" or "),oI=a("a"),sco=o("RobertaTokenizerFast"),lco=o(" (RoBERTa model)"),ico=l(),xs=a("li"),fse=a("strong"),dco=o("roformer"),cco=o(" \u2014 "),rI=a("a"),fco=o("RoFormerTokenizer"),mco=o(" or "),tI=a("a"),gco=o("RoFormerTokenizerFast"),hco=o(" (RoFormer model)"),pco=l(),ch=a("li"),mse=a("strong"),uco=o("speech_to_text"),_co=o(" \u2014 "),aI=a("a"),bco=o("Speech2TextTokenizer"),vco=o(" (Speech2Text model)"),Fco=l(),fh=a("li"),gse=a("strong"),Tco=o("speech_to_text_2"),Mco=o(" \u2014 "),nI=a("a"),Eco=o("Speech2Text2Tokenizer"),Cco=o(" (Speech2Text2 model)"),wco=l(),$s=a("li"),hse=a("strong"),Aco=o("splinter"),yco=o(" \u2014 "),sI=a("a"),Lco=o("SplinterTokenizer"),xco=o(" or "),lI=a("a"),$co=o("SplinterTokenizerFast"),kco=o(" (Splinter model)"),Sco=l(),ks=a("li"),pse=a("strong"),Rco=o("squeezebert"),Pco=o(" \u2014 "),iI=a("a"),Bco=o("SqueezeBertTokenizer"),Ico=o(" or "),dI=a("a"),Nco=o("SqueezeBertTokenizerFast"),qco=o(" (SqueezeBERT model)"),jco=l(),Ss=a("li"),use=a("strong"),Dco=o("t5"),Gco=o(" \u2014 "),cI=a("a"),Oco=o("T5Tokenizer"),Vco=o(" or "),fI=a("a"),Xco=o("T5TokenizerFast"),zco=o(" (T5 model)"),Wco=l(),mh=a("li"),_se=a("strong"),Qco=o("tapas"),Hco=o(" \u2014 "),mI=a("a"),Uco=o("TapasTokenizer"),Jco=o(" (TAPAS model)"),Yco=l(),gh=a("li"),bse=a("strong"),Kco=o("tapex"),Zco=o(" \u2014 "),gI=a("a"),efo=o("TapexTokenizer"),ofo=o(" (TAPEX model)"),rfo=l(),hh=a("li"),vse=a("strong"),tfo=o("transfo-xl"),afo=o(" \u2014 "),hI=a("a"),nfo=o("TransfoXLTokenizer"),sfo=o(" (Transformer-XL model)"),lfo=l(),Rs=a("li"),Fse=a("strong"),ifo=o("vilt"),dfo=o(" \u2014 "),pI=a("a"),cfo=o("BertTokenizer"),ffo=o(" or "),uI=a("a"),mfo=o("BertTokenizerFast"),gfo=o(" (ViLT model)"),hfo=l(),Ps=a("li"),Tse=a("strong"),pfo=o("visual_bert"),ufo=o(" \u2014 "),_I=a("a"),_fo=o("BertTokenizer"),bfo=o(" or "),bI=a("a"),vfo=o("BertTokenizerFast"),Ffo=o(" (VisualBERT model)"),Tfo=l(),ph=a("li"),Mse=a("strong"),Mfo=o("wav2vec2"),Efo=o(" \u2014 "),vI=a("a"),Cfo=o("Wav2Vec2CTCTokenizer"),wfo=o(" (Wav2Vec2 model)"),Afo=l(),uh=a("li"),Ese=a("strong"),yfo=o("wav2vec2-conformer"),Lfo=o(" \u2014 "),FI=a("a"),xfo=o("Wav2Vec2CTCTokenizer"),$fo=o(" (Wav2Vec2-Conformer model)"),kfo=l(),_h=a("li"),Cse=a("strong"),Sfo=o("wav2vec2_phoneme"),Rfo=o(" \u2014 "),TI=a("a"),Pfo=o("Wav2Vec2PhonemeCTCTokenizer"),Bfo=o(" (Wav2Vec2Phoneme model)"),Ifo=l(),Bs=a("li"),wse=a("strong"),Nfo=o("xglm"),qfo=o(" \u2014 "),MI=a("a"),jfo=o("XGLMTokenizer"),Dfo=o(" or "),EI=a("a"),Gfo=o("XGLMTokenizerFast"),Ofo=o(" (XGLM model)"),Vfo=l(),bh=a("li"),Ase=a("strong"),Xfo=o("xlm"),zfo=o(" \u2014 "),CI=a("a"),Wfo=o("XLMTokenizer"),Qfo=o(" (XLM model)"),Hfo=l(),vh=a("li"),yse=a("strong"),Ufo=o("xlm-prophetnet"),Jfo=o(" \u2014 "),wI=a("a"),Yfo=o("XLMProphetNetTokenizer"),Kfo=o(" (XLM-ProphetNet model)"),Zfo=l(),Is=a("li"),Lse=a("strong"),emo=o("xlm-roberta"),omo=o(" \u2014 "),AI=a("a"),rmo=o("XLMRobertaTokenizer"),tmo=o(" or "),yI=a("a"),amo=o("XLMRobertaTokenizerFast"),nmo=o(" (XLM-RoBERTa model)"),smo=l(),Ns=a("li"),xse=a("strong"),lmo=o("xlm-roberta-xl"),imo=o(" \u2014 "),LI=a("a"),dmo=o("RobertaTokenizer"),cmo=o(" or "),xI=a("a"),fmo=o("RobertaTokenizerFast"),mmo=o(" (XLM-RoBERTa-XL model)"),gmo=l(),qs=a("li"),$se=a("strong"),hmo=o("xlnet"),pmo=o(" \u2014 "),$I=a("a"),umo=o("XLNetTokenizer"),_mo=o(" or "),kI=a("a"),bmo=o("XLNetTokenizerFast"),vmo=o(" (XLNet model)"),Fmo=l(),js=a("li"),kse=a("strong"),Tmo=o("yoso"),Mmo=o(" \u2014 "),SI=a("a"),Emo=o("AlbertTokenizer"),Cmo=o(" or "),RI=a("a"),wmo=o("AlbertTokenizerFast"),Amo=o(" (YOSO model)"),ymo=l(),F(Fh.$$.fragment),Lmo=l(),Th=a("div"),F(wy.$$.fragment),xmo=l(),Sse=a("p"),$mo=o("Register a new tokenizer in this mapping."),SDe=l(),ki=a("h2"),Mh=a("a"),Rse=a("span"),F(Ay.$$.fragment),kmo=l(),Pse=a("span"),Smo=o("AutoFeatureExtractor"),RDe=l(),yo=a("div"),F(yy.$$.fragment),Rmo=l(),Ly=a("p"),Pmo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),PI=a("a"),Bmo=o("AutoFeatureExtractor.from_pretrained()"),Imo=o(" class method."),Nmo=l(),xy=a("p"),qmo=o("This class cannot be instantiated directly using "),Bse=a("code"),jmo=o("__init__()"),Dmo=o(" (throws an error)."),Gmo=l(),He=a("div"),F($y.$$.fragment),Omo=l(),Ise=a("p"),Vmo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Xmo=l(),Sa=a("p"),zmo=o("The feature extractor class to instantiate is selected based on the "),Nse=a("code"),Wmo=o("model_type"),Qmo=o(` property of the config object
(either passed as an argument or loaded from `),qse=a("code"),Hmo=o("pretrained_model_name_or_path"),Umo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jse=a("code"),Jmo=o("pretrained_model_name_or_path"),Ymo=o(":"),Kmo=l(),Y=a("ul"),Eh=a("li"),Dse=a("strong"),Zmo=o("beit"),ego=o(" \u2014 "),BI=a("a"),ogo=o("BeitFeatureExtractor"),rgo=o(" (BEiT model)"),tgo=l(),Ch=a("li"),Gse=a("strong"),ago=o("clip"),ngo=o(" \u2014 "),II=a("a"),sgo=o("CLIPFeatureExtractor"),lgo=o(" (CLIP model)"),igo=l(),wh=a("li"),Ose=a("strong"),dgo=o("convnext"),cgo=o(" \u2014 "),NI=a("a"),fgo=o("ConvNextFeatureExtractor"),mgo=o(" (ConvNeXT model)"),ggo=l(),Ah=a("li"),Vse=a("strong"),hgo=o("cvt"),pgo=o(" \u2014 "),qI=a("a"),ugo=o("ConvNextFeatureExtractor"),_go=o(" (CvT model)"),bgo=l(),yh=a("li"),Xse=a("strong"),vgo=o("data2vec-audio"),Fgo=o(" \u2014 "),jI=a("a"),Tgo=o("Wav2Vec2FeatureExtractor"),Mgo=o(" (Data2VecAudio model)"),Ego=l(),Lh=a("li"),zse=a("strong"),Cgo=o("data2vec-vision"),wgo=o(" \u2014 "),DI=a("a"),Ago=o("BeitFeatureExtractor"),ygo=o(" (Data2VecVision model)"),Lgo=l(),xh=a("li"),Wse=a("strong"),xgo=o("deit"),$go=o(" \u2014 "),GI=a("a"),kgo=o("DeiTFeatureExtractor"),Sgo=o(" (DeiT model)"),Rgo=l(),$h=a("li"),Qse=a("strong"),Pgo=o("detr"),Bgo=o(" \u2014 "),OI=a("a"),Igo=o("DetrFeatureExtractor"),Ngo=o(" (DETR model)"),qgo=l(),kh=a("li"),Hse=a("strong"),jgo=o("dpt"),Dgo=o(" \u2014 "),VI=a("a"),Ggo=o("DPTFeatureExtractor"),Ogo=o(" (DPT model)"),Vgo=l(),Sh=a("li"),Use=a("strong"),Xgo=o("flava"),zgo=o(" \u2014 "),XI=a("a"),Wgo=o("FlavaFeatureExtractor"),Qgo=o(" (FLAVA model)"),Hgo=l(),Rh=a("li"),Jse=a("strong"),Ugo=o("glpn"),Jgo=o(" \u2014 "),zI=a("a"),Ygo=o("GLPNFeatureExtractor"),Kgo=o(" (GLPN model)"),Zgo=l(),Ph=a("li"),Yse=a("strong"),eho=o("hubert"),oho=o(" \u2014 "),WI=a("a"),rho=o("Wav2Vec2FeatureExtractor"),tho=o(" (Hubert model)"),aho=l(),Bh=a("li"),Kse=a("strong"),nho=o("imagegpt"),sho=o(" \u2014 "),QI=a("a"),lho=o("ImageGPTFeatureExtractor"),iho=o(" (ImageGPT model)"),dho=l(),Ih=a("li"),Zse=a("strong"),cho=o("layoutlmv2"),fho=o(" \u2014 "),HI=a("a"),mho=o("LayoutLMv2FeatureExtractor"),gho=o(" (LayoutLMv2 model)"),hho=l(),Nh=a("li"),ele=a("strong"),pho=o("layoutlmv3"),uho=o(" \u2014 "),UI=a("a"),_ho=o("LayoutLMv3FeatureExtractor"),bho=o(" (LayoutLMv3 model)"),vho=l(),qh=a("li"),ole=a("strong"),Fho=o("levit"),Tho=o(" \u2014 "),JI=a("a"),Mho=o("LevitFeatureExtractor"),Eho=o(" (LeViT model)"),Cho=l(),jh=a("li"),rle=a("strong"),who=o("maskformer"),Aho=o(" \u2014 "),YI=a("a"),yho=o("MaskFormerFeatureExtractor"),Lho=o(" (MaskFormer model)"),xho=l(),Dh=a("li"),tle=a("strong"),$ho=o("mctct"),kho=o(" \u2014 "),KI=a("a"),Sho=o("MCTCTFeatureExtractor"),Rho=o(" (M-CTC-T model)"),Pho=l(),Gh=a("li"),ale=a("strong"),Bho=o("perceiver"),Iho=o(" \u2014 "),ZI=a("a"),Nho=o("PerceiverFeatureExtractor"),qho=o(" (Perceiver model)"),jho=l(),Oh=a("li"),nle=a("strong"),Dho=o("poolformer"),Gho=o(" \u2014 "),eN=a("a"),Oho=o("PoolFormerFeatureExtractor"),Vho=o(" (PoolFormer model)"),Xho=l(),Vh=a("li"),sle=a("strong"),zho=o("regnet"),Who=o(" \u2014 "),oN=a("a"),Qho=o("ConvNextFeatureExtractor"),Hho=o(" (RegNet model)"),Uho=l(),Xh=a("li"),lle=a("strong"),Jho=o("resnet"),Yho=o(" \u2014 "),rN=a("a"),Kho=o("ConvNextFeatureExtractor"),Zho=o(" (ResNet model)"),epo=l(),zh=a("li"),ile=a("strong"),opo=o("segformer"),rpo=o(" \u2014 "),tN=a("a"),tpo=o("SegformerFeatureExtractor"),apo=o(" (SegFormer model)"),npo=l(),Wh=a("li"),dle=a("strong"),spo=o("speech_to_text"),lpo=o(" \u2014 "),aN=a("a"),ipo=o("Speech2TextFeatureExtractor"),dpo=o(" (Speech2Text model)"),cpo=l(),Qh=a("li"),cle=a("strong"),fpo=o("swin"),mpo=o(" \u2014 "),nN=a("a"),gpo=o("ViTFeatureExtractor"),hpo=o(" (Swin Transformer model)"),ppo=l(),Hh=a("li"),fle=a("strong"),upo=o("van"),_po=o(" \u2014 "),sN=a("a"),bpo=o("ConvNextFeatureExtractor"),vpo=o(" (VAN model)"),Fpo=l(),Uh=a("li"),mle=a("strong"),Tpo=o("vilt"),Mpo=o(" \u2014 "),lN=a("a"),Epo=o("ViltFeatureExtractor"),Cpo=o(" (ViLT model)"),wpo=l(),Jh=a("li"),gle=a("strong"),Apo=o("vit"),ypo=o(" \u2014 "),iN=a("a"),Lpo=o("ViTFeatureExtractor"),xpo=o(" (ViT model)"),$po=l(),Yh=a("li"),hle=a("strong"),kpo=o("vit_mae"),Spo=o(" \u2014 "),dN=a("a"),Rpo=o("ViTFeatureExtractor"),Ppo=o(" (ViTMAE model)"),Bpo=l(),Kh=a("li"),ple=a("strong"),Ipo=o("wav2vec2"),Npo=o(" \u2014 "),cN=a("a"),qpo=o("Wav2Vec2FeatureExtractor"),jpo=o(" (Wav2Vec2 model)"),Dpo=l(),Zh=a("li"),ule=a("strong"),Gpo=o("wav2vec2-conformer"),Opo=o(" \u2014 "),fN=a("a"),Vpo=o("Wav2Vec2FeatureExtractor"),Xpo=o(" (Wav2Vec2-Conformer model)"),zpo=l(),ep=a("li"),_le=a("strong"),Wpo=o("yolos"),Qpo=o(" \u2014 "),mN=a("a"),Hpo=o("YolosFeatureExtractor"),Upo=o(" (YOLOS model)"),Jpo=l(),F(op.$$.fragment),Ypo=l(),F(rp.$$.fragment),Kpo=l(),tp=a("div"),F(ky.$$.fragment),Zpo=l(),ble=a("p"),euo=o("Register a new feature extractor for this class."),PDe=l(),Si=a("h2"),ap=a("a"),vle=a("span"),F(Sy.$$.fragment),ouo=l(),Fle=a("span"),ruo=o("AutoProcessor"),BDe=l(),Lo=a("div"),F(Ry.$$.fragment),tuo=l(),Py=a("p"),auo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gN=a("a"),nuo=o("AutoProcessor.from_pretrained()"),suo=o(" class method."),luo=l(),By=a("p"),iuo=o("This class cannot be instantiated directly using "),Tle=a("code"),duo=o("__init__()"),cuo=o(" (throws an error)."),fuo=l(),Ue=a("div"),F(Iy.$$.fragment),muo=l(),Mle=a("p"),guo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),huo=l(),Ri=a("p"),puo=o("The processor class to instantiate is selected based on the "),Ele=a("code"),uuo=o("model_type"),_uo=o(` property of the config object (either
passed as an argument or loaded from `),Cle=a("code"),buo=o("pretrained_model_name_or_path"),vuo=o(" if possible):"),Fuo=l(),he=a("ul"),np=a("li"),wle=a("strong"),Tuo=o("clip"),Muo=o(" \u2014 "),hN=a("a"),Euo=o("CLIPProcessor"),Cuo=o(" (CLIP model)"),wuo=l(),sp=a("li"),Ale=a("strong"),Auo=o("flava"),yuo=o(" \u2014 "),yle=a("code"),Luo=o("FLAVAProcessor"),xuo=o(" (FLAVA model)"),$uo=l(),lp=a("li"),Lle=a("strong"),kuo=o("layoutlmv2"),Suo=o(" \u2014 "),pN=a("a"),Ruo=o("LayoutLMv2Processor"),Puo=o(" (LayoutLMv2 model)"),Buo=l(),ip=a("li"),xle=a("strong"),Iuo=o("layoutlmv3"),Nuo=o(" \u2014 "),uN=a("a"),quo=o("LayoutLMv3Processor"),juo=o(" (LayoutLMv3 model)"),Duo=l(),dp=a("li"),$le=a("strong"),Guo=o("layoutxlm"),Ouo=o(" \u2014 "),_N=a("a"),Vuo=o("LayoutXLMProcessor"),Xuo=o(" (LayoutXLM model)"),zuo=l(),cp=a("li"),kle=a("strong"),Wuo=o("sew"),Quo=o(" \u2014 "),bN=a("a"),Huo=o("Wav2Vec2Processor"),Uuo=o(" (SEW model)"),Juo=l(),fp=a("li"),Sle=a("strong"),Yuo=o("sew-d"),Kuo=o(" \u2014 "),vN=a("a"),Zuo=o("Wav2Vec2Processor"),e_o=o(" (SEW-D model)"),o_o=l(),mp=a("li"),Rle=a("strong"),r_o=o("speech_to_text"),t_o=o(" \u2014 "),FN=a("a"),a_o=o("Speech2TextProcessor"),n_o=o(" (Speech2Text model)"),s_o=l(),gp=a("li"),Ple=a("strong"),l_o=o("speech_to_text_2"),i_o=o(" \u2014 "),TN=a("a"),d_o=o("Speech2Text2Processor"),c_o=o(" (Speech2Text2 model)"),f_o=l(),hp=a("li"),Ble=a("strong"),m_o=o("trocr"),g_o=o(" \u2014 "),MN=a("a"),h_o=o("TrOCRProcessor"),p_o=o(" (TrOCR model)"),u_o=l(),pp=a("li"),Ile=a("strong"),__o=o("unispeech"),b_o=o(" \u2014 "),EN=a("a"),v_o=o("Wav2Vec2Processor"),F_o=o(" (UniSpeech model)"),T_o=l(),up=a("li"),Nle=a("strong"),M_o=o("unispeech-sat"),E_o=o(" \u2014 "),CN=a("a"),C_o=o("Wav2Vec2Processor"),w_o=o(" (UniSpeechSat model)"),A_o=l(),_p=a("li"),qle=a("strong"),y_o=o("vilt"),L_o=o(" \u2014 "),wN=a("a"),x_o=o("ViltProcessor"),$_o=o(" (ViLT model)"),k_o=l(),bp=a("li"),jle=a("strong"),S_o=o("vision-text-dual-encoder"),R_o=o(" \u2014 "),AN=a("a"),P_o=o("VisionTextDualEncoderProcessor"),B_o=o(" (VisionTextDualEncoder model)"),I_o=l(),vp=a("li"),Dle=a("strong"),N_o=o("wav2vec2"),q_o=o(" \u2014 "),yN=a("a"),j_o=o("Wav2Vec2Processor"),D_o=o(" (Wav2Vec2 model)"),G_o=l(),Fp=a("li"),Gle=a("strong"),O_o=o("wav2vec2-conformer"),V_o=o(" \u2014 "),LN=a("a"),X_o=o("Wav2Vec2Processor"),z_o=o(" (Wav2Vec2-Conformer model)"),W_o=l(),Tp=a("li"),Ole=a("strong"),Q_o=o("wavlm"),H_o=o(" \u2014 "),xN=a("a"),U_o=o("Wav2Vec2Processor"),J_o=o(" (WavLM model)"),Y_o=l(),F(Mp.$$.fragment),K_o=l(),F(Ep.$$.fragment),Z_o=l(),Cp=a("div"),F(Ny.$$.fragment),e2o=l(),Vle=a("p"),o2o=o("Register a new processor for this class."),IDe=l(),Pi=a("h2"),wp=a("a"),Xle=a("span"),F(qy.$$.fragment),r2o=l(),zle=a("span"),t2o=o("AutoModel"),NDe=l(),xo=a("div"),F(jy.$$.fragment),a2o=l(),Bi=a("p"),n2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$N=a("a"),s2o=o("from_pretrained()"),l2o=o(" class method or the "),kN=a("a"),i2o=o("from_config()"),d2o=o(` class
method.`),c2o=l(),Dy=a("p"),f2o=o("This class cannot be instantiated directly using "),Wle=a("code"),m2o=o("__init__()"),g2o=o(" (throws an error)."),h2o=l(),st=a("div"),F(Gy.$$.fragment),p2o=l(),Qle=a("p"),u2o=o("Instantiates one of the base model classes of the library from a configuration."),_2o=l(),Ii=a("p"),b2o=o(`Note:
Loading a model from its configuration file does `),Hle=a("strong"),v2o=o("not"),F2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=a("a"),T2o=o("from_pretrained()"),M2o=o(" to load the model weights."),E2o=l(),F(Ap.$$.fragment),C2o=l(),Je=a("div"),F(Oy.$$.fragment),w2o=l(),Ule=a("p"),A2o=o("Instantiate one of the base model classes of the library from a pretrained model."),y2o=l(),Ra=a("p"),L2o=o("The model class to instantiate is selected based on the "),Jle=a("code"),x2o=o("model_type"),$2o=o(` property of the config object (either
passed as an argument or loaded from `),Yle=a("code"),k2o=o("pretrained_model_name_or_path"),S2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kle=a("code"),R2o=o("pretrained_model_name_or_path"),P2o=o(":"),B2o=l(),x=a("ul"),yp=a("li"),Zle=a("strong"),I2o=o("albert"),N2o=o(" \u2014 "),RN=a("a"),q2o=o("AlbertModel"),j2o=o(" (ALBERT model)"),D2o=l(),Lp=a("li"),eie=a("strong"),G2o=o("bart"),O2o=o(" \u2014 "),PN=a("a"),V2o=o("BartModel"),X2o=o(" (BART model)"),z2o=l(),xp=a("li"),oie=a("strong"),W2o=o("beit"),Q2o=o(" \u2014 "),BN=a("a"),H2o=o("BeitModel"),U2o=o(" (BEiT model)"),J2o=l(),$p=a("li"),rie=a("strong"),Y2o=o("bert"),K2o=o(" \u2014 "),IN=a("a"),Z2o=o("BertModel"),e1o=o(" (BERT model)"),o1o=l(),kp=a("li"),tie=a("strong"),r1o=o("bert-generation"),t1o=o(" \u2014 "),NN=a("a"),a1o=o("BertGenerationEncoder"),n1o=o(" (Bert Generation model)"),s1o=l(),Sp=a("li"),aie=a("strong"),l1o=o("big_bird"),i1o=o(" \u2014 "),qN=a("a"),d1o=o("BigBirdModel"),c1o=o(" (BigBird model)"),f1o=l(),Rp=a("li"),nie=a("strong"),m1o=o("bigbird_pegasus"),g1o=o(" \u2014 "),jN=a("a"),h1o=o("BigBirdPegasusModel"),p1o=o(" (BigBird-Pegasus model)"),u1o=l(),Pp=a("li"),sie=a("strong"),_1o=o("blenderbot"),b1o=o(" \u2014 "),DN=a("a"),v1o=o("BlenderbotModel"),F1o=o(" (Blenderbot model)"),T1o=l(),Bp=a("li"),lie=a("strong"),M1o=o("blenderbot-small"),E1o=o(" \u2014 "),GN=a("a"),C1o=o("BlenderbotSmallModel"),w1o=o(" (BlenderbotSmall model)"),A1o=l(),Ip=a("li"),iie=a("strong"),y1o=o("bloom"),L1o=o(" \u2014 "),ON=a("a"),x1o=o("BloomModel"),$1o=o(" (BLOOM model)"),k1o=l(),Np=a("li"),die=a("strong"),S1o=o("camembert"),R1o=o(" \u2014 "),VN=a("a"),P1o=o("CamembertModel"),B1o=o(" (CamemBERT model)"),I1o=l(),qp=a("li"),cie=a("strong"),N1o=o("canine"),q1o=o(" \u2014 "),XN=a("a"),j1o=o("CanineModel"),D1o=o(" (CANINE model)"),G1o=l(),jp=a("li"),fie=a("strong"),O1o=o("clip"),V1o=o(" \u2014 "),zN=a("a"),X1o=o("CLIPModel"),z1o=o(" (CLIP model)"),W1o=l(),Dp=a("li"),mie=a("strong"),Q1o=o("convbert"),H1o=o(" \u2014 "),WN=a("a"),U1o=o("ConvBertModel"),J1o=o(" (ConvBERT model)"),Y1o=l(),Gp=a("li"),gie=a("strong"),K1o=o("convnext"),Z1o=o(" \u2014 "),QN=a("a"),e7o=o("ConvNextModel"),o7o=o(" (ConvNeXT model)"),r7o=l(),Op=a("li"),hie=a("strong"),t7o=o("ctrl"),a7o=o(" \u2014 "),HN=a("a"),n7o=o("CTRLModel"),s7o=o(" (CTRL model)"),l7o=l(),Vp=a("li"),pie=a("strong"),i7o=o("cvt"),d7o=o(" \u2014 "),UN=a("a"),c7o=o("CvtModel"),f7o=o(" (CvT model)"),m7o=l(),Xp=a("li"),uie=a("strong"),g7o=o("data2vec-audio"),h7o=o(" \u2014 "),JN=a("a"),p7o=o("Data2VecAudioModel"),u7o=o(" (Data2VecAudio model)"),_7o=l(),zp=a("li"),_ie=a("strong"),b7o=o("data2vec-text"),v7o=o(" \u2014 "),YN=a("a"),F7o=o("Data2VecTextModel"),T7o=o(" (Data2VecText model)"),M7o=l(),Wp=a("li"),bie=a("strong"),E7o=o("data2vec-vision"),C7o=o(" \u2014 "),KN=a("a"),w7o=o("Data2VecVisionModel"),A7o=o(" (Data2VecVision model)"),y7o=l(),Qp=a("li"),vie=a("strong"),L7o=o("deberta"),x7o=o(" \u2014 "),ZN=a("a"),$7o=o("DebertaModel"),k7o=o(" (DeBERTa model)"),S7o=l(),Hp=a("li"),Fie=a("strong"),R7o=o("deberta-v2"),P7o=o(" \u2014 "),eq=a("a"),B7o=o("DebertaV2Model"),I7o=o(" (DeBERTa-v2 model)"),N7o=l(),Up=a("li"),Tie=a("strong"),q7o=o("decision_transformer"),j7o=o(" \u2014 "),oq=a("a"),D7o=o("DecisionTransformerModel"),G7o=o(" (Decision Transformer model)"),O7o=l(),Jp=a("li"),Mie=a("strong"),V7o=o("deit"),X7o=o(" \u2014 "),rq=a("a"),z7o=o("DeiTModel"),W7o=o(" (DeiT model)"),Q7o=l(),Yp=a("li"),Eie=a("strong"),H7o=o("detr"),U7o=o(" \u2014 "),tq=a("a"),J7o=o("DetrModel"),Y7o=o(" (DETR model)"),K7o=l(),Kp=a("li"),Cie=a("strong"),Z7o=o("distilbert"),ebo=o(" \u2014 "),aq=a("a"),obo=o("DistilBertModel"),rbo=o(" (DistilBERT model)"),tbo=l(),Zp=a("li"),wie=a("strong"),abo=o("dpr"),nbo=o(" \u2014 "),nq=a("a"),sbo=o("DPRQuestionEncoder"),lbo=o(" (DPR model)"),ibo=l(),eu=a("li"),Aie=a("strong"),dbo=o("dpt"),cbo=o(" \u2014 "),sq=a("a"),fbo=o("DPTModel"),mbo=o(" (DPT model)"),gbo=l(),ou=a("li"),yie=a("strong"),hbo=o("electra"),pbo=o(" \u2014 "),lq=a("a"),ubo=o("ElectraModel"),_bo=o(" (ELECTRA model)"),bbo=l(),ru=a("li"),Lie=a("strong"),vbo=o("flaubert"),Fbo=o(" \u2014 "),iq=a("a"),Tbo=o("FlaubertModel"),Mbo=o(" (FlauBERT model)"),Ebo=l(),tu=a("li"),xie=a("strong"),Cbo=o("flava"),wbo=o(" \u2014 "),dq=a("a"),Abo=o("FlavaModel"),ybo=o(" (FLAVA model)"),Lbo=l(),au=a("li"),$ie=a("strong"),xbo=o("fnet"),$bo=o(" \u2014 "),cq=a("a"),kbo=o("FNetModel"),Sbo=o(" (FNet model)"),Rbo=l(),nu=a("li"),kie=a("strong"),Pbo=o("fsmt"),Bbo=o(" \u2014 "),fq=a("a"),Ibo=o("FSMTModel"),Nbo=o(" (FairSeq Machine-Translation model)"),qbo=l(),Ds=a("li"),Sie=a("strong"),jbo=o("funnel"),Dbo=o(" \u2014 "),mq=a("a"),Gbo=o("FunnelModel"),Obo=o(" or "),gq=a("a"),Vbo=o("FunnelBaseModel"),Xbo=o(" (Funnel Transformer model)"),zbo=l(),su=a("li"),Rie=a("strong"),Wbo=o("glpn"),Qbo=o(" \u2014 "),hq=a("a"),Hbo=o("GLPNModel"),Ubo=o(" (GLPN model)"),Jbo=l(),lu=a("li"),Pie=a("strong"),Ybo=o("gpt2"),Kbo=o(" \u2014 "),pq=a("a"),Zbo=o("GPT2Model"),e4o=o(" (OpenAI GPT-2 model)"),o4o=l(),iu=a("li"),Bie=a("strong"),r4o=o("gpt_neo"),t4o=o(" \u2014 "),uq=a("a"),a4o=o("GPTNeoModel"),n4o=o(" (GPT Neo model)"),s4o=l(),du=a("li"),Iie=a("strong"),l4o=o("gpt_neox"),i4o=o(" \u2014 "),_q=a("a"),d4o=o("GPTNeoXModel"),c4o=o(" (GPT NeoX model)"),f4o=l(),cu=a("li"),Nie=a("strong"),m4o=o("gptj"),g4o=o(" \u2014 "),bq=a("a"),h4o=o("GPTJModel"),p4o=o(" (GPT-J model)"),u4o=l(),fu=a("li"),qie=a("strong"),_4o=o("hubert"),b4o=o(" \u2014 "),vq=a("a"),v4o=o("HubertModel"),F4o=o(" (Hubert model)"),T4o=l(),mu=a("li"),jie=a("strong"),M4o=o("ibert"),E4o=o(" \u2014 "),Fq=a("a"),C4o=o("IBertModel"),w4o=o(" (I-BERT model)"),A4o=l(),gu=a("li"),Die=a("strong"),y4o=o("imagegpt"),L4o=o(" \u2014 "),Tq=a("a"),x4o=o("ImageGPTModel"),$4o=o(" (ImageGPT model)"),k4o=l(),hu=a("li"),Gie=a("strong"),S4o=o("layoutlm"),R4o=o(" \u2014 "),Mq=a("a"),P4o=o("LayoutLMModel"),B4o=o(" (LayoutLM model)"),I4o=l(),pu=a("li"),Oie=a("strong"),N4o=o("layoutlmv2"),q4o=o(" \u2014 "),Eq=a("a"),j4o=o("LayoutLMv2Model"),D4o=o(" (LayoutLMv2 model)"),G4o=l(),uu=a("li"),Vie=a("strong"),O4o=o("layoutlmv3"),V4o=o(" \u2014 "),Cq=a("a"),X4o=o("LayoutLMv3Model"),z4o=o(" (LayoutLMv3 model)"),W4o=l(),_u=a("li"),Xie=a("strong"),Q4o=o("led"),H4o=o(" \u2014 "),wq=a("a"),U4o=o("LEDModel"),J4o=o(" (LED model)"),Y4o=l(),bu=a("li"),zie=a("strong"),K4o=o("levit"),Z4o=o(" \u2014 "),Aq=a("a"),evo=o("LevitModel"),ovo=o(" (LeViT model)"),rvo=l(),vu=a("li"),Wie=a("strong"),tvo=o("longformer"),avo=o(" \u2014 "),yq=a("a"),nvo=o("LongformerModel"),svo=o(" (Longformer model)"),lvo=l(),Fu=a("li"),Qie=a("strong"),ivo=o("luke"),dvo=o(" \u2014 "),Lq=a("a"),cvo=o("LukeModel"),fvo=o(" (LUKE model)"),mvo=l(),Tu=a("li"),Hie=a("strong"),gvo=o("lxmert"),hvo=o(" \u2014 "),xq=a("a"),pvo=o("LxmertModel"),uvo=o(" (LXMERT model)"),_vo=l(),Mu=a("li"),Uie=a("strong"),bvo=o("m2m_100"),vvo=o(" \u2014 "),$q=a("a"),Fvo=o("M2M100Model"),Tvo=o(" (M2M100 model)"),Mvo=l(),Eu=a("li"),Jie=a("strong"),Evo=o("marian"),Cvo=o(" \u2014 "),kq=a("a"),wvo=o("MarianModel"),Avo=o(" (Marian model)"),yvo=l(),Cu=a("li"),Yie=a("strong"),Lvo=o("maskformer"),xvo=o(" \u2014 "),Sq=a("a"),$vo=o("MaskFormerModel"),kvo=o(" (MaskFormer model)"),Svo=l(),wu=a("li"),Kie=a("strong"),Rvo=o("mbart"),Pvo=o(" \u2014 "),Rq=a("a"),Bvo=o("MBartModel"),Ivo=o(" (mBART model)"),Nvo=l(),Au=a("li"),Zie=a("strong"),qvo=o("mctct"),jvo=o(" \u2014 "),Pq=a("a"),Dvo=o("MCTCTModel"),Gvo=o(" (M-CTC-T model)"),Ovo=l(),yu=a("li"),ede=a("strong"),Vvo=o("megatron-bert"),Xvo=o(" \u2014 "),Bq=a("a"),zvo=o("MegatronBertModel"),Wvo=o(" (Megatron-BERT model)"),Qvo=l(),Lu=a("li"),ode=a("strong"),Hvo=o("mobilebert"),Uvo=o(" \u2014 "),Iq=a("a"),Jvo=o("MobileBertModel"),Yvo=o(" (MobileBERT model)"),Kvo=l(),xu=a("li"),rde=a("strong"),Zvo=o("mpnet"),eFo=o(" \u2014 "),Nq=a("a"),oFo=o("MPNetModel"),rFo=o(" (MPNet model)"),tFo=l(),$u=a("li"),tde=a("strong"),aFo=o("mt5"),nFo=o(" \u2014 "),qq=a("a"),sFo=o("MT5Model"),lFo=o(" (MT5 model)"),iFo=l(),ku=a("li"),ade=a("strong"),dFo=o("nystromformer"),cFo=o(" \u2014 "),jq=a("a"),fFo=o("NystromformerModel"),mFo=o(" (Nystr\xF6mformer model)"),gFo=l(),Su=a("li"),nde=a("strong"),hFo=o("openai-gpt"),pFo=o(" \u2014 "),Dq=a("a"),uFo=o("OpenAIGPTModel"),_Fo=o(" (OpenAI GPT model)"),bFo=l(),Ru=a("li"),sde=a("strong"),vFo=o("opt"),FFo=o(" \u2014 "),Gq=a("a"),TFo=o("OPTModel"),MFo=o(" (OPT model)"),EFo=l(),Pu=a("li"),lde=a("strong"),CFo=o("pegasus"),wFo=o(" \u2014 "),Oq=a("a"),AFo=o("PegasusModel"),yFo=o(" (Pegasus model)"),LFo=l(),Bu=a("li"),ide=a("strong"),xFo=o("perceiver"),$Fo=o(" \u2014 "),Vq=a("a"),kFo=o("PerceiverModel"),SFo=o(" (Perceiver model)"),RFo=l(),Iu=a("li"),dde=a("strong"),PFo=o("plbart"),BFo=o(" \u2014 "),Xq=a("a"),IFo=o("PLBartModel"),NFo=o(" (PLBart model)"),qFo=l(),Nu=a("li"),cde=a("strong"),jFo=o("poolformer"),DFo=o(" \u2014 "),zq=a("a"),GFo=o("PoolFormerModel"),OFo=o(" (PoolFormer model)"),VFo=l(),qu=a("li"),fde=a("strong"),XFo=o("prophetnet"),zFo=o(" \u2014 "),Wq=a("a"),WFo=o("ProphetNetModel"),QFo=o(" (ProphetNet model)"),HFo=l(),ju=a("li"),mde=a("strong"),UFo=o("qdqbert"),JFo=o(" \u2014 "),Qq=a("a"),YFo=o("QDQBertModel"),KFo=o(" (QDQBert model)"),ZFo=l(),Du=a("li"),gde=a("strong"),eTo=o("reformer"),oTo=o(" \u2014 "),Hq=a("a"),rTo=o("ReformerModel"),tTo=o(" (Reformer model)"),aTo=l(),Gu=a("li"),hde=a("strong"),nTo=o("regnet"),sTo=o(" \u2014 "),Uq=a("a"),lTo=o("RegNetModel"),iTo=o(" (RegNet model)"),dTo=l(),Ou=a("li"),pde=a("strong"),cTo=o("rembert"),fTo=o(" \u2014 "),Jq=a("a"),mTo=o("RemBertModel"),gTo=o(" (RemBERT model)"),hTo=l(),Vu=a("li"),ude=a("strong"),pTo=o("resnet"),uTo=o(" \u2014 "),Yq=a("a"),_To=o("ResNetModel"),bTo=o(" (ResNet model)"),vTo=l(),Xu=a("li"),_de=a("strong"),FTo=o("retribert"),TTo=o(" \u2014 "),Kq=a("a"),MTo=o("RetriBertModel"),ETo=o(" (RetriBERT model)"),CTo=l(),zu=a("li"),bde=a("strong"),wTo=o("roberta"),ATo=o(" \u2014 "),Zq=a("a"),yTo=o("RobertaModel"),LTo=o(" (RoBERTa model)"),xTo=l(),Wu=a("li"),vde=a("strong"),$To=o("roformer"),kTo=o(" \u2014 "),ej=a("a"),STo=o("RoFormerModel"),RTo=o(" (RoFormer model)"),PTo=l(),Qu=a("li"),Fde=a("strong"),BTo=o("segformer"),ITo=o(" \u2014 "),oj=a("a"),NTo=o("SegformerModel"),qTo=o(" (SegFormer model)"),jTo=l(),Hu=a("li"),Tde=a("strong"),DTo=o("sew"),GTo=o(" \u2014 "),rj=a("a"),OTo=o("SEWModel"),VTo=o(" (SEW model)"),XTo=l(),Uu=a("li"),Mde=a("strong"),zTo=o("sew-d"),WTo=o(" \u2014 "),tj=a("a"),QTo=o("SEWDModel"),HTo=o(" (SEW-D model)"),UTo=l(),Ju=a("li"),Ede=a("strong"),JTo=o("speech_to_text"),YTo=o(" \u2014 "),aj=a("a"),KTo=o("Speech2TextModel"),ZTo=o(" (Speech2Text model)"),eMo=l(),Yu=a("li"),Cde=a("strong"),oMo=o("splinter"),rMo=o(" \u2014 "),nj=a("a"),tMo=o("SplinterModel"),aMo=o(" (Splinter model)"),nMo=l(),Ku=a("li"),wde=a("strong"),sMo=o("squeezebert"),lMo=o(" \u2014 "),sj=a("a"),iMo=o("SqueezeBertModel"),dMo=o(" (SqueezeBERT model)"),cMo=l(),Zu=a("li"),Ade=a("strong"),fMo=o("swin"),mMo=o(" \u2014 "),lj=a("a"),gMo=o("SwinModel"),hMo=o(" (Swin Transformer model)"),pMo=l(),e_=a("li"),yde=a("strong"),uMo=o("t5"),_Mo=o(" \u2014 "),ij=a("a"),bMo=o("T5Model"),vMo=o(" (T5 model)"),FMo=l(),o_=a("li"),Lde=a("strong"),TMo=o("tapas"),MMo=o(" \u2014 "),dj=a("a"),EMo=o("TapasModel"),CMo=o(" (TAPAS model)"),wMo=l(),r_=a("li"),xde=a("strong"),AMo=o("trajectory_transformer"),yMo=o(" \u2014 "),cj=a("a"),LMo=o("TrajectoryTransformerModel"),xMo=o(" (Trajectory Transformer model)"),$Mo=l(),t_=a("li"),$de=a("strong"),kMo=o("transfo-xl"),SMo=o(" \u2014 "),fj=a("a"),RMo=o("TransfoXLModel"),PMo=o(" (Transformer-XL model)"),BMo=l(),a_=a("li"),kde=a("strong"),IMo=o("unispeech"),NMo=o(" \u2014 "),mj=a("a"),qMo=o("UniSpeechModel"),jMo=o(" (UniSpeech model)"),DMo=l(),n_=a("li"),Sde=a("strong"),GMo=o("unispeech-sat"),OMo=o(" \u2014 "),gj=a("a"),VMo=o("UniSpeechSatModel"),XMo=o(" (UniSpeechSat model)"),zMo=l(),s_=a("li"),Rde=a("strong"),WMo=o("van"),QMo=o(" \u2014 "),hj=a("a"),HMo=o("VanModel"),UMo=o(" (VAN model)"),JMo=l(),l_=a("li"),Pde=a("strong"),YMo=o("vilt"),KMo=o(" \u2014 "),pj=a("a"),ZMo=o("ViltModel"),eEo=o(" (ViLT model)"),oEo=l(),i_=a("li"),Bde=a("strong"),rEo=o("vision-text-dual-encoder"),tEo=o(" \u2014 "),uj=a("a"),aEo=o("VisionTextDualEncoderModel"),nEo=o(" (VisionTextDualEncoder model)"),sEo=l(),d_=a("li"),Ide=a("strong"),lEo=o("visual_bert"),iEo=o(" \u2014 "),_j=a("a"),dEo=o("VisualBertModel"),cEo=o(" (VisualBERT model)"),fEo=l(),c_=a("li"),Nde=a("strong"),mEo=o("vit"),gEo=o(" \u2014 "),bj=a("a"),hEo=o("ViTModel"),pEo=o(" (ViT model)"),uEo=l(),f_=a("li"),qde=a("strong"),_Eo=o("vit_mae"),bEo=o(" \u2014 "),vj=a("a"),vEo=o("ViTMAEModel"),FEo=o(" (ViTMAE model)"),TEo=l(),m_=a("li"),jde=a("strong"),MEo=o("wav2vec2"),EEo=o(" \u2014 "),Fj=a("a"),CEo=o("Wav2Vec2Model"),wEo=o(" (Wav2Vec2 model)"),AEo=l(),g_=a("li"),Dde=a("strong"),yEo=o("wav2vec2-conformer"),LEo=o(" \u2014 "),Tj=a("a"),xEo=o("Wav2Vec2ConformerModel"),$Eo=o(" (Wav2Vec2-Conformer model)"),kEo=l(),h_=a("li"),Gde=a("strong"),SEo=o("wavlm"),REo=o(" \u2014 "),Mj=a("a"),PEo=o("WavLMModel"),BEo=o(" (WavLM model)"),IEo=l(),p_=a("li"),Ode=a("strong"),NEo=o("xglm"),qEo=o(" \u2014 "),Ej=a("a"),jEo=o("XGLMModel"),DEo=o(" (XGLM model)"),GEo=l(),u_=a("li"),Vde=a("strong"),OEo=o("xlm"),VEo=o(" \u2014 "),Cj=a("a"),XEo=o("XLMModel"),zEo=o(" (XLM model)"),WEo=l(),__=a("li"),Xde=a("strong"),QEo=o("xlm-prophetnet"),HEo=o(" \u2014 "),wj=a("a"),UEo=o("XLMProphetNetModel"),JEo=o(" (XLM-ProphetNet model)"),YEo=l(),b_=a("li"),zde=a("strong"),KEo=o("xlm-roberta"),ZEo=o(" \u2014 "),Aj=a("a"),eCo=o("XLMRobertaModel"),oCo=o(" (XLM-RoBERTa model)"),rCo=l(),v_=a("li"),Wde=a("strong"),tCo=o("xlm-roberta-xl"),aCo=o(" \u2014 "),yj=a("a"),nCo=o("XLMRobertaXLModel"),sCo=o(" (XLM-RoBERTa-XL model)"),lCo=l(),F_=a("li"),Qde=a("strong"),iCo=o("xlnet"),dCo=o(" \u2014 "),Lj=a("a"),cCo=o("XLNetModel"),fCo=o(" (XLNet model)"),mCo=l(),T_=a("li"),Hde=a("strong"),gCo=o("yolos"),hCo=o(" \u2014 "),xj=a("a"),pCo=o("YolosModel"),uCo=o(" (YOLOS model)"),_Co=l(),M_=a("li"),Ude=a("strong"),bCo=o("yoso"),vCo=o(" \u2014 "),$j=a("a"),FCo=o("YosoModel"),TCo=o(" (YOSO model)"),MCo=l(),E_=a("p"),ECo=o("The model is set in evaluation mode by default using "),Jde=a("code"),CCo=o("model.eval()"),wCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=a("code"),ACo=o("model.train()"),yCo=l(),F(C_.$$.fragment),qDe=l(),Ni=a("h2"),w_=a("a"),Kde=a("span"),F(Vy.$$.fragment),LCo=l(),Zde=a("span"),xCo=o("AutoModelForPreTraining"),jDe=l(),$o=a("div"),F(Xy.$$.fragment),$Co=l(),qi=a("p"),kCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kj=a("a"),SCo=o("from_pretrained()"),RCo=o(" class method or the "),Sj=a("a"),PCo=o("from_config()"),BCo=o(` class
method.`),ICo=l(),zy=a("p"),NCo=o("This class cannot be instantiated directly using "),ece=a("code"),qCo=o("__init__()"),jCo=o(" (throws an error)."),DCo=l(),lt=a("div"),F(Wy.$$.fragment),GCo=l(),oce=a("p"),OCo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VCo=l(),ji=a("p"),XCo=o(`Note:
Loading a model from its configuration file does `),rce=a("strong"),zCo=o("not"),WCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=a("a"),QCo=o("from_pretrained()"),HCo=o(" to load the model weights."),UCo=l(),F(A_.$$.fragment),JCo=l(),Ye=a("div"),F(Qy.$$.fragment),YCo=l(),tce=a("p"),KCo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZCo=l(),Pa=a("p"),e5o=o("The model class to instantiate is selected based on the "),ace=a("code"),o5o=o("model_type"),r5o=o(` property of the config object (either
passed as an argument or loaded from `),nce=a("code"),t5o=o("pretrained_model_name_or_path"),a5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=a("code"),n5o=o("pretrained_model_name_or_path"),s5o=o(":"),l5o=l(),G=a("ul"),y_=a("li"),lce=a("strong"),i5o=o("albert"),d5o=o(" \u2014 "),Pj=a("a"),c5o=o("AlbertForPreTraining"),f5o=o(" (ALBERT model)"),m5o=l(),L_=a("li"),ice=a("strong"),g5o=o("bart"),h5o=o(" \u2014 "),Bj=a("a"),p5o=o("BartForConditionalGeneration"),u5o=o(" (BART model)"),_5o=l(),x_=a("li"),dce=a("strong"),b5o=o("bert"),v5o=o(" \u2014 "),Ij=a("a"),F5o=o("BertForPreTraining"),T5o=o(" (BERT model)"),M5o=l(),$_=a("li"),cce=a("strong"),E5o=o("big_bird"),C5o=o(" \u2014 "),Nj=a("a"),w5o=o("BigBirdForPreTraining"),A5o=o(" (BigBird model)"),y5o=l(),k_=a("li"),fce=a("strong"),L5o=o("bloom"),x5o=o(" \u2014 "),qj=a("a"),$5o=o("BloomForCausalLM"),k5o=o(" (BLOOM model)"),S5o=l(),S_=a("li"),mce=a("strong"),R5o=o("camembert"),P5o=o(" \u2014 "),jj=a("a"),B5o=o("CamembertForMaskedLM"),I5o=o(" (CamemBERT model)"),N5o=l(),R_=a("li"),gce=a("strong"),q5o=o("ctrl"),j5o=o(" \u2014 "),Dj=a("a"),D5o=o("CTRLLMHeadModel"),G5o=o(" (CTRL model)"),O5o=l(),P_=a("li"),hce=a("strong"),V5o=o("data2vec-text"),X5o=o(" \u2014 "),Gj=a("a"),z5o=o("Data2VecTextForMaskedLM"),W5o=o(" (Data2VecText model)"),Q5o=l(),B_=a("li"),pce=a("strong"),H5o=o("deberta"),U5o=o(" \u2014 "),Oj=a("a"),J5o=o("DebertaForMaskedLM"),Y5o=o(" (DeBERTa model)"),K5o=l(),I_=a("li"),uce=a("strong"),Z5o=o("deberta-v2"),e3o=o(" \u2014 "),Vj=a("a"),o3o=o("DebertaV2ForMaskedLM"),r3o=o(" (DeBERTa-v2 model)"),t3o=l(),N_=a("li"),_ce=a("strong"),a3o=o("distilbert"),n3o=o(" \u2014 "),Xj=a("a"),s3o=o("DistilBertForMaskedLM"),l3o=o(" (DistilBERT model)"),i3o=l(),q_=a("li"),bce=a("strong"),d3o=o("electra"),c3o=o(" \u2014 "),zj=a("a"),f3o=o("ElectraForPreTraining"),m3o=o(" (ELECTRA model)"),g3o=l(),j_=a("li"),vce=a("strong"),h3o=o("flaubert"),p3o=o(" \u2014 "),Wj=a("a"),u3o=o("FlaubertWithLMHeadModel"),_3o=o(" (FlauBERT model)"),b3o=l(),D_=a("li"),Fce=a("strong"),v3o=o("flava"),F3o=o(" \u2014 "),Qj=a("a"),T3o=o("FlavaForPreTraining"),M3o=o(" (FLAVA model)"),E3o=l(),G_=a("li"),Tce=a("strong"),C3o=o("fnet"),w3o=o(" \u2014 "),Hj=a("a"),A3o=o("FNetForPreTraining"),y3o=o(" (FNet model)"),L3o=l(),O_=a("li"),Mce=a("strong"),x3o=o("fsmt"),$3o=o(" \u2014 "),Uj=a("a"),k3o=o("FSMTForConditionalGeneration"),S3o=o(" (FairSeq Machine-Translation model)"),R3o=l(),V_=a("li"),Ece=a("strong"),P3o=o("funnel"),B3o=o(" \u2014 "),Jj=a("a"),I3o=o("FunnelForPreTraining"),N3o=o(" (Funnel Transformer model)"),q3o=l(),X_=a("li"),Cce=a("strong"),j3o=o("gpt2"),D3o=o(" \u2014 "),Yj=a("a"),G3o=o("GPT2LMHeadModel"),O3o=o(" (OpenAI GPT-2 model)"),V3o=l(),z_=a("li"),wce=a("strong"),X3o=o("ibert"),z3o=o(" \u2014 "),Kj=a("a"),W3o=o("IBertForMaskedLM"),Q3o=o(" (I-BERT model)"),H3o=l(),W_=a("li"),Ace=a("strong"),U3o=o("layoutlm"),J3o=o(" \u2014 "),Zj=a("a"),Y3o=o("LayoutLMForMaskedLM"),K3o=o(" (LayoutLM model)"),Z3o=l(),Q_=a("li"),yce=a("strong"),e0o=o("longformer"),o0o=o(" \u2014 "),eD=a("a"),r0o=o("LongformerForMaskedLM"),t0o=o(" (Longformer model)"),a0o=l(),H_=a("li"),Lce=a("strong"),n0o=o("lxmert"),s0o=o(" \u2014 "),oD=a("a"),l0o=o("LxmertForPreTraining"),i0o=o(" (LXMERT model)"),d0o=l(),U_=a("li"),xce=a("strong"),c0o=o("megatron-bert"),f0o=o(" \u2014 "),rD=a("a"),m0o=o("MegatronBertForPreTraining"),g0o=o(" (Megatron-BERT model)"),h0o=l(),J_=a("li"),$ce=a("strong"),p0o=o("mobilebert"),u0o=o(" \u2014 "),tD=a("a"),_0o=o("MobileBertForPreTraining"),b0o=o(" (MobileBERT model)"),v0o=l(),Y_=a("li"),kce=a("strong"),F0o=o("mpnet"),T0o=o(" \u2014 "),aD=a("a"),M0o=o("MPNetForMaskedLM"),E0o=o(" (MPNet model)"),C0o=l(),K_=a("li"),Sce=a("strong"),w0o=o("openai-gpt"),A0o=o(" \u2014 "),nD=a("a"),y0o=o("OpenAIGPTLMHeadModel"),L0o=o(" (OpenAI GPT model)"),x0o=l(),Z_=a("li"),Rce=a("strong"),$0o=o("retribert"),k0o=o(" \u2014 "),sD=a("a"),S0o=o("RetriBertModel"),R0o=o(" (RetriBERT model)"),P0o=l(),e2=a("li"),Pce=a("strong"),B0o=o("roberta"),I0o=o(" \u2014 "),lD=a("a"),N0o=o("RobertaForMaskedLM"),q0o=o(" (RoBERTa model)"),j0o=l(),o2=a("li"),Bce=a("strong"),D0o=o("splinter"),G0o=o(" \u2014 "),iD=a("a"),O0o=o("SplinterForPreTraining"),V0o=o(" (Splinter model)"),X0o=l(),r2=a("li"),Ice=a("strong"),z0o=o("squeezebert"),W0o=o(" \u2014 "),dD=a("a"),Q0o=o("SqueezeBertForMaskedLM"),H0o=o(" (SqueezeBERT model)"),U0o=l(),t2=a("li"),Nce=a("strong"),J0o=o("t5"),Y0o=o(" \u2014 "),cD=a("a"),K0o=o("T5ForConditionalGeneration"),Z0o=o(" (T5 model)"),ewo=l(),a2=a("li"),qce=a("strong"),owo=o("tapas"),rwo=o(" \u2014 "),fD=a("a"),two=o("TapasForMaskedLM"),awo=o(" (TAPAS model)"),nwo=l(),n2=a("li"),jce=a("strong"),swo=o("transfo-xl"),lwo=o(" \u2014 "),mD=a("a"),iwo=o("TransfoXLLMHeadModel"),dwo=o(" (Transformer-XL model)"),cwo=l(),s2=a("li"),Dce=a("strong"),fwo=o("unispeech"),mwo=o(" \u2014 "),gD=a("a"),gwo=o("UniSpeechForPreTraining"),hwo=o(" (UniSpeech model)"),pwo=l(),l2=a("li"),Gce=a("strong"),uwo=o("unispeech-sat"),_wo=o(" \u2014 "),hD=a("a"),bwo=o("UniSpeechSatForPreTraining"),vwo=o(" (UniSpeechSat model)"),Fwo=l(),i2=a("li"),Oce=a("strong"),Two=o("visual_bert"),Mwo=o(" \u2014 "),pD=a("a"),Ewo=o("VisualBertForPreTraining"),Cwo=o(" (VisualBERT model)"),wwo=l(),d2=a("li"),Vce=a("strong"),Awo=o("vit_mae"),ywo=o(" \u2014 "),uD=a("a"),Lwo=o("ViTMAEForPreTraining"),xwo=o(" (ViTMAE model)"),$wo=l(),c2=a("li"),Xce=a("strong"),kwo=o("wav2vec2"),Swo=o(" \u2014 "),_D=a("a"),Rwo=o("Wav2Vec2ForPreTraining"),Pwo=o(" (Wav2Vec2 model)"),Bwo=l(),f2=a("li"),zce=a("strong"),Iwo=o("wav2vec2-conformer"),Nwo=o(" \u2014 "),bD=a("a"),qwo=o("Wav2Vec2ConformerForPreTraining"),jwo=o(" (Wav2Vec2-Conformer model)"),Dwo=l(),m2=a("li"),Wce=a("strong"),Gwo=o("xlm"),Owo=o(" \u2014 "),vD=a("a"),Vwo=o("XLMWithLMHeadModel"),Xwo=o(" (XLM model)"),zwo=l(),g2=a("li"),Qce=a("strong"),Wwo=o("xlm-roberta"),Qwo=o(" \u2014 "),FD=a("a"),Hwo=o("XLMRobertaForMaskedLM"),Uwo=o(" (XLM-RoBERTa model)"),Jwo=l(),h2=a("li"),Hce=a("strong"),Ywo=o("xlm-roberta-xl"),Kwo=o(" \u2014 "),TD=a("a"),Zwo=o("XLMRobertaXLForMaskedLM"),eAo=o(" (XLM-RoBERTa-XL model)"),oAo=l(),p2=a("li"),Uce=a("strong"),rAo=o("xlnet"),tAo=o(" \u2014 "),MD=a("a"),aAo=o("XLNetLMHeadModel"),nAo=o(" (XLNet model)"),sAo=l(),u2=a("p"),lAo=o("The model is set in evaluation mode by default using "),Jce=a("code"),iAo=o("model.eval()"),dAo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=a("code"),cAo=o("model.train()"),fAo=l(),F(_2.$$.fragment),DDe=l(),Di=a("h2"),b2=a("a"),Kce=a("span"),F(Hy.$$.fragment),mAo=l(),Zce=a("span"),gAo=o("AutoModelForCausalLM"),GDe=l(),ko=a("div"),F(Uy.$$.fragment),hAo=l(),Gi=a("p"),pAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ED=a("a"),uAo=o("from_pretrained()"),_Ao=o(" class method or the "),CD=a("a"),bAo=o("from_config()"),vAo=o(` class
method.`),FAo=l(),Jy=a("p"),TAo=o("This class cannot be instantiated directly using "),efe=a("code"),MAo=o("__init__()"),EAo=o(" (throws an error)."),CAo=l(),it=a("div"),F(Yy.$$.fragment),wAo=l(),ofe=a("p"),AAo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),yAo=l(),Oi=a("p"),LAo=o(`Note:
Loading a model from its configuration file does `),rfe=a("strong"),xAo=o("not"),$Ao=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=a("a"),kAo=o("from_pretrained()"),SAo=o(" to load the model weights."),RAo=l(),F(v2.$$.fragment),PAo=l(),Ke=a("div"),F(Ky.$$.fragment),BAo=l(),tfe=a("p"),IAo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),NAo=l(),Ba=a("p"),qAo=o("The model class to instantiate is selected based on the "),afe=a("code"),jAo=o("model_type"),DAo=o(` property of the config object (either
passed as an argument or loaded from `),nfe=a("code"),GAo=o("pretrained_model_name_or_path"),OAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=a("code"),VAo=o("pretrained_model_name_or_path"),XAo=o(":"),zAo=l(),z=a("ul"),F2=a("li"),lfe=a("strong"),WAo=o("bart"),QAo=o(" \u2014 "),AD=a("a"),HAo=o("BartForCausalLM"),UAo=o(" (BART model)"),JAo=l(),T2=a("li"),ife=a("strong"),YAo=o("bert"),KAo=o(" \u2014 "),yD=a("a"),ZAo=o("BertLMHeadModel"),e6o=o(" (BERT model)"),o6o=l(),M2=a("li"),dfe=a("strong"),r6o=o("bert-generation"),t6o=o(" \u2014 "),LD=a("a"),a6o=o("BertGenerationDecoder"),n6o=o(" (Bert Generation model)"),s6o=l(),E2=a("li"),cfe=a("strong"),l6o=o("big_bird"),i6o=o(" \u2014 "),xD=a("a"),d6o=o("BigBirdForCausalLM"),c6o=o(" (BigBird model)"),f6o=l(),C2=a("li"),ffe=a("strong"),m6o=o("bigbird_pegasus"),g6o=o(" \u2014 "),$D=a("a"),h6o=o("BigBirdPegasusForCausalLM"),p6o=o(" (BigBird-Pegasus model)"),u6o=l(),w2=a("li"),mfe=a("strong"),_6o=o("blenderbot"),b6o=o(" \u2014 "),kD=a("a"),v6o=o("BlenderbotForCausalLM"),F6o=o(" (Blenderbot model)"),T6o=l(),A2=a("li"),gfe=a("strong"),M6o=o("blenderbot-small"),E6o=o(" \u2014 "),SD=a("a"),C6o=o("BlenderbotSmallForCausalLM"),w6o=o(" (BlenderbotSmall model)"),A6o=l(),y2=a("li"),hfe=a("strong"),y6o=o("bloom"),L6o=o(" \u2014 "),RD=a("a"),x6o=o("BloomForCausalLM"),$6o=o(" (BLOOM model)"),k6o=l(),L2=a("li"),pfe=a("strong"),S6o=o("camembert"),R6o=o(" \u2014 "),PD=a("a"),P6o=o("CamembertForCausalLM"),B6o=o(" (CamemBERT model)"),I6o=l(),x2=a("li"),ufe=a("strong"),N6o=o("ctrl"),q6o=o(" \u2014 "),BD=a("a"),j6o=o("CTRLLMHeadModel"),D6o=o(" (CTRL model)"),G6o=l(),$2=a("li"),_fe=a("strong"),O6o=o("data2vec-text"),V6o=o(" \u2014 "),ID=a("a"),X6o=o("Data2VecTextForCausalLM"),z6o=o(" (Data2VecText model)"),W6o=l(),k2=a("li"),bfe=a("strong"),Q6o=o("electra"),H6o=o(" \u2014 "),ND=a("a"),U6o=o("ElectraForCausalLM"),J6o=o(" (ELECTRA model)"),Y6o=l(),S2=a("li"),vfe=a("strong"),K6o=o("gpt2"),Z6o=o(" \u2014 "),qD=a("a"),eyo=o("GPT2LMHeadModel"),oyo=o(" (OpenAI GPT-2 model)"),ryo=l(),R2=a("li"),Ffe=a("strong"),tyo=o("gpt_neo"),ayo=o(" \u2014 "),jD=a("a"),nyo=o("GPTNeoForCausalLM"),syo=o(" (GPT Neo model)"),lyo=l(),P2=a("li"),Tfe=a("strong"),iyo=o("gpt_neox"),dyo=o(" \u2014 "),DD=a("a"),cyo=o("GPTNeoXForCausalLM"),fyo=o(" (GPT NeoX model)"),myo=l(),B2=a("li"),Mfe=a("strong"),gyo=o("gptj"),hyo=o(" \u2014 "),GD=a("a"),pyo=o("GPTJForCausalLM"),uyo=o(" (GPT-J model)"),_yo=l(),I2=a("li"),Efe=a("strong"),byo=o("marian"),vyo=o(" \u2014 "),OD=a("a"),Fyo=o("MarianForCausalLM"),Tyo=o(" (Marian model)"),Myo=l(),N2=a("li"),Cfe=a("strong"),Eyo=o("mbart"),Cyo=o(" \u2014 "),VD=a("a"),wyo=o("MBartForCausalLM"),Ayo=o(" (mBART model)"),yyo=l(),q2=a("li"),wfe=a("strong"),Lyo=o("megatron-bert"),xyo=o(" \u2014 "),XD=a("a"),$yo=o("MegatronBertForCausalLM"),kyo=o(" (Megatron-BERT model)"),Syo=l(),j2=a("li"),Afe=a("strong"),Ryo=o("openai-gpt"),Pyo=o(" \u2014 "),zD=a("a"),Byo=o("OpenAIGPTLMHeadModel"),Iyo=o(" (OpenAI GPT model)"),Nyo=l(),D2=a("li"),yfe=a("strong"),qyo=o("opt"),jyo=o(" \u2014 "),WD=a("a"),Dyo=o("OPTForCausalLM"),Gyo=o(" (OPT model)"),Oyo=l(),G2=a("li"),Lfe=a("strong"),Vyo=o("pegasus"),Xyo=o(" \u2014 "),QD=a("a"),zyo=o("PegasusForCausalLM"),Wyo=o(" (Pegasus model)"),Qyo=l(),O2=a("li"),xfe=a("strong"),Hyo=o("plbart"),Uyo=o(" \u2014 "),HD=a("a"),Jyo=o("PLBartForCausalLM"),Yyo=o(" (PLBart model)"),Kyo=l(),V2=a("li"),$fe=a("strong"),Zyo=o("prophetnet"),eLo=o(" \u2014 "),UD=a("a"),oLo=o("ProphetNetForCausalLM"),rLo=o(" (ProphetNet model)"),tLo=l(),X2=a("li"),kfe=a("strong"),aLo=o("qdqbert"),nLo=o(" \u2014 "),JD=a("a"),sLo=o("QDQBertLMHeadModel"),lLo=o(" (QDQBert model)"),iLo=l(),z2=a("li"),Sfe=a("strong"),dLo=o("reformer"),cLo=o(" \u2014 "),YD=a("a"),fLo=o("ReformerModelWithLMHead"),mLo=o(" (Reformer model)"),gLo=l(),W2=a("li"),Rfe=a("strong"),hLo=o("rembert"),pLo=o(" \u2014 "),KD=a("a"),uLo=o("RemBertForCausalLM"),_Lo=o(" (RemBERT model)"),bLo=l(),Q2=a("li"),Pfe=a("strong"),vLo=o("roberta"),FLo=o(" \u2014 "),ZD=a("a"),TLo=o("RobertaForCausalLM"),MLo=o(" (RoBERTa model)"),ELo=l(),H2=a("li"),Bfe=a("strong"),CLo=o("roformer"),wLo=o(" \u2014 "),eG=a("a"),ALo=o("RoFormerForCausalLM"),yLo=o(" (RoFormer model)"),LLo=l(),U2=a("li"),Ife=a("strong"),xLo=o("speech_to_text_2"),$Lo=o(" \u2014 "),oG=a("a"),kLo=o("Speech2Text2ForCausalLM"),SLo=o(" (Speech2Text2 model)"),RLo=l(),J2=a("li"),Nfe=a("strong"),PLo=o("transfo-xl"),BLo=o(" \u2014 "),rG=a("a"),ILo=o("TransfoXLLMHeadModel"),NLo=o(" (Transformer-XL model)"),qLo=l(),Y2=a("li"),qfe=a("strong"),jLo=o("trocr"),DLo=o(" \u2014 "),tG=a("a"),GLo=o("TrOCRForCausalLM"),OLo=o(" (TrOCR model)"),VLo=l(),K2=a("li"),jfe=a("strong"),XLo=o("xglm"),zLo=o(" \u2014 "),aG=a("a"),WLo=o("XGLMForCausalLM"),QLo=o(" (XGLM model)"),HLo=l(),Z2=a("li"),Dfe=a("strong"),ULo=o("xlm"),JLo=o(" \u2014 "),nG=a("a"),YLo=o("XLMWithLMHeadModel"),KLo=o(" (XLM model)"),ZLo=l(),e1=a("li"),Gfe=a("strong"),e8o=o("xlm-prophetnet"),o8o=o(" \u2014 "),sG=a("a"),r8o=o("XLMProphetNetForCausalLM"),t8o=o(" (XLM-ProphetNet model)"),a8o=l(),o1=a("li"),Ofe=a("strong"),n8o=o("xlm-roberta"),s8o=o(" \u2014 "),lG=a("a"),l8o=o("XLMRobertaForCausalLM"),i8o=o(" (XLM-RoBERTa model)"),d8o=l(),r1=a("li"),Vfe=a("strong"),c8o=o("xlm-roberta-xl"),f8o=o(" \u2014 "),iG=a("a"),m8o=o("XLMRobertaXLForCausalLM"),g8o=o(" (XLM-RoBERTa-XL model)"),h8o=l(),t1=a("li"),Xfe=a("strong"),p8o=o("xlnet"),u8o=o(" \u2014 "),dG=a("a"),_8o=o("XLNetLMHeadModel"),b8o=o(" (XLNet model)"),v8o=l(),a1=a("p"),F8o=o("The model is set in evaluation mode by default using "),zfe=a("code"),T8o=o("model.eval()"),M8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=a("code"),E8o=o("model.train()"),C8o=l(),F(n1.$$.fragment),ODe=l(),Vi=a("h2"),s1=a("a"),Qfe=a("span"),F(Zy.$$.fragment),w8o=l(),Hfe=a("span"),A8o=o("AutoModelForMaskedLM"),VDe=l(),So=a("div"),F(eL.$$.fragment),y8o=l(),Xi=a("p"),L8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cG=a("a"),x8o=o("from_pretrained()"),$8o=o(" class method or the "),fG=a("a"),k8o=o("from_config()"),S8o=o(` class
method.`),R8o=l(),oL=a("p"),P8o=o("This class cannot be instantiated directly using "),Ufe=a("code"),B8o=o("__init__()"),I8o=o(" (throws an error)."),N8o=l(),dt=a("div"),F(rL.$$.fragment),q8o=l(),Jfe=a("p"),j8o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),D8o=l(),zi=a("p"),G8o=o(`Note:
Loading a model from its configuration file does `),Yfe=a("strong"),O8o=o("not"),V8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),X8o=o("from_pretrained()"),z8o=o(" to load the model weights."),W8o=l(),F(l1.$$.fragment),Q8o=l(),Ze=a("div"),F(tL.$$.fragment),H8o=l(),Kfe=a("p"),U8o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),J8o=l(),Ia=a("p"),Y8o=o("The model class to instantiate is selected based on the "),Zfe=a("code"),K8o=o("model_type"),Z8o=o(` property of the config object (either
passed as an argument or loaded from `),eme=a("code"),e9o=o("pretrained_model_name_or_path"),o9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=a("code"),r9o=o("pretrained_model_name_or_path"),t9o=o(":"),a9o=l(),Q=a("ul"),i1=a("li"),rme=a("strong"),n9o=o("albert"),s9o=o(" \u2014 "),gG=a("a"),l9o=o("AlbertForMaskedLM"),i9o=o(" (ALBERT model)"),d9o=l(),d1=a("li"),tme=a("strong"),c9o=o("bart"),f9o=o(" \u2014 "),hG=a("a"),m9o=o("BartForConditionalGeneration"),g9o=o(" (BART model)"),h9o=l(),c1=a("li"),ame=a("strong"),p9o=o("bert"),u9o=o(" \u2014 "),pG=a("a"),_9o=o("BertForMaskedLM"),b9o=o(" (BERT model)"),v9o=l(),f1=a("li"),nme=a("strong"),F9o=o("big_bird"),T9o=o(" \u2014 "),uG=a("a"),M9o=o("BigBirdForMaskedLM"),E9o=o(" (BigBird model)"),C9o=l(),m1=a("li"),sme=a("strong"),w9o=o("camembert"),A9o=o(" \u2014 "),_G=a("a"),y9o=o("CamembertForMaskedLM"),L9o=o(" (CamemBERT model)"),x9o=l(),g1=a("li"),lme=a("strong"),$9o=o("convbert"),k9o=o(" \u2014 "),bG=a("a"),S9o=o("ConvBertForMaskedLM"),R9o=o(" (ConvBERT model)"),P9o=l(),h1=a("li"),ime=a("strong"),B9o=o("data2vec-text"),I9o=o(" \u2014 "),vG=a("a"),N9o=o("Data2VecTextForMaskedLM"),q9o=o(" (Data2VecText model)"),j9o=l(),p1=a("li"),dme=a("strong"),D9o=o("deberta"),G9o=o(" \u2014 "),FG=a("a"),O9o=o("DebertaForMaskedLM"),V9o=o(" (DeBERTa model)"),X9o=l(),u1=a("li"),cme=a("strong"),z9o=o("deberta-v2"),W9o=o(" \u2014 "),TG=a("a"),Q9o=o("DebertaV2ForMaskedLM"),H9o=o(" (DeBERTa-v2 model)"),U9o=l(),_1=a("li"),fme=a("strong"),J9o=o("distilbert"),Y9o=o(" \u2014 "),MG=a("a"),K9o=o("DistilBertForMaskedLM"),Z9o=o(" (DistilBERT model)"),exo=l(),b1=a("li"),mme=a("strong"),oxo=o("electra"),rxo=o(" \u2014 "),EG=a("a"),txo=o("ElectraForMaskedLM"),axo=o(" (ELECTRA model)"),nxo=l(),v1=a("li"),gme=a("strong"),sxo=o("flaubert"),lxo=o(" \u2014 "),CG=a("a"),ixo=o("FlaubertWithLMHeadModel"),dxo=o(" (FlauBERT model)"),cxo=l(),F1=a("li"),hme=a("strong"),fxo=o("fnet"),mxo=o(" \u2014 "),wG=a("a"),gxo=o("FNetForMaskedLM"),hxo=o(" (FNet model)"),pxo=l(),T1=a("li"),pme=a("strong"),uxo=o("funnel"),_xo=o(" \u2014 "),AG=a("a"),bxo=o("FunnelForMaskedLM"),vxo=o(" (Funnel Transformer model)"),Fxo=l(),M1=a("li"),ume=a("strong"),Txo=o("ibert"),Mxo=o(" \u2014 "),yG=a("a"),Exo=o("IBertForMaskedLM"),Cxo=o(" (I-BERT model)"),wxo=l(),E1=a("li"),_me=a("strong"),Axo=o("layoutlm"),yxo=o(" \u2014 "),LG=a("a"),Lxo=o("LayoutLMForMaskedLM"),xxo=o(" (LayoutLM model)"),$xo=l(),C1=a("li"),bme=a("strong"),kxo=o("longformer"),Sxo=o(" \u2014 "),xG=a("a"),Rxo=o("LongformerForMaskedLM"),Pxo=o(" (Longformer model)"),Bxo=l(),w1=a("li"),vme=a("strong"),Ixo=o("luke"),Nxo=o(" \u2014 "),$G=a("a"),qxo=o("LukeForMaskedLM"),jxo=o(" (LUKE model)"),Dxo=l(),A1=a("li"),Fme=a("strong"),Gxo=o("mbart"),Oxo=o(" \u2014 "),kG=a("a"),Vxo=o("MBartForConditionalGeneration"),Xxo=o(" (mBART model)"),zxo=l(),y1=a("li"),Tme=a("strong"),Wxo=o("megatron-bert"),Qxo=o(" \u2014 "),SG=a("a"),Hxo=o("MegatronBertForMaskedLM"),Uxo=o(" (Megatron-BERT model)"),Jxo=l(),L1=a("li"),Mme=a("strong"),Yxo=o("mobilebert"),Kxo=o(" \u2014 "),RG=a("a"),Zxo=o("MobileBertForMaskedLM"),e$o=o(" (MobileBERT model)"),o$o=l(),x1=a("li"),Eme=a("strong"),r$o=o("mpnet"),t$o=o(" \u2014 "),PG=a("a"),a$o=o("MPNetForMaskedLM"),n$o=o(" (MPNet model)"),s$o=l(),$1=a("li"),Cme=a("strong"),l$o=o("nystromformer"),i$o=o(" \u2014 "),BG=a("a"),d$o=o("NystromformerForMaskedLM"),c$o=o(" (Nystr\xF6mformer model)"),f$o=l(),k1=a("li"),wme=a("strong"),m$o=o("perceiver"),g$o=o(" \u2014 "),IG=a("a"),h$o=o("PerceiverForMaskedLM"),p$o=o(" (Perceiver model)"),u$o=l(),S1=a("li"),Ame=a("strong"),_$o=o("qdqbert"),b$o=o(" \u2014 "),NG=a("a"),v$o=o("QDQBertForMaskedLM"),F$o=o(" (QDQBert model)"),T$o=l(),R1=a("li"),yme=a("strong"),M$o=o("reformer"),E$o=o(" \u2014 "),qG=a("a"),C$o=o("ReformerForMaskedLM"),w$o=o(" (Reformer model)"),A$o=l(),P1=a("li"),Lme=a("strong"),y$o=o("rembert"),L$o=o(" \u2014 "),jG=a("a"),x$o=o("RemBertForMaskedLM"),$$o=o(" (RemBERT model)"),k$o=l(),B1=a("li"),xme=a("strong"),S$o=o("roberta"),R$o=o(" \u2014 "),DG=a("a"),P$o=o("RobertaForMaskedLM"),B$o=o(" (RoBERTa model)"),I$o=l(),I1=a("li"),$me=a("strong"),N$o=o("roformer"),q$o=o(" \u2014 "),GG=a("a"),j$o=o("RoFormerForMaskedLM"),D$o=o(" (RoFormer model)"),G$o=l(),N1=a("li"),kme=a("strong"),O$o=o("squeezebert"),V$o=o(" \u2014 "),OG=a("a"),X$o=o("SqueezeBertForMaskedLM"),z$o=o(" (SqueezeBERT model)"),W$o=l(),q1=a("li"),Sme=a("strong"),Q$o=o("tapas"),H$o=o(" \u2014 "),VG=a("a"),U$o=o("TapasForMaskedLM"),J$o=o(" (TAPAS model)"),Y$o=l(),j1=a("li"),Rme=a("strong"),K$o=o("wav2vec2"),Z$o=o(" \u2014 "),Pme=a("code"),eko=o("Wav2Vec2ForMaskedLM"),oko=o(" (Wav2Vec2 model)"),rko=l(),D1=a("li"),Bme=a("strong"),tko=o("xlm"),ako=o(" \u2014 "),XG=a("a"),nko=o("XLMWithLMHeadModel"),sko=o(" (XLM model)"),lko=l(),G1=a("li"),Ime=a("strong"),iko=o("xlm-roberta"),dko=o(" \u2014 "),zG=a("a"),cko=o("XLMRobertaForMaskedLM"),fko=o(" (XLM-RoBERTa model)"),mko=l(),O1=a("li"),Nme=a("strong"),gko=o("xlm-roberta-xl"),hko=o(" \u2014 "),WG=a("a"),pko=o("XLMRobertaXLForMaskedLM"),uko=o(" (XLM-RoBERTa-XL model)"),_ko=l(),V1=a("li"),qme=a("strong"),bko=o("yoso"),vko=o(" \u2014 "),QG=a("a"),Fko=o("YosoForMaskedLM"),Tko=o(" (YOSO model)"),Mko=l(),X1=a("p"),Eko=o("The model is set in evaluation mode by default using "),jme=a("code"),Cko=o("model.eval()"),wko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),Ako=o("model.train()"),yko=l(),F(z1.$$.fragment),XDe=l(),Wi=a("h2"),W1=a("a"),Gme=a("span"),F(aL.$$.fragment),Lko=l(),Ome=a("span"),xko=o("AutoModelForSeq2SeqLM"),zDe=l(),Ro=a("div"),F(nL.$$.fragment),$ko=l(),Qi=a("p"),kko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HG=a("a"),Sko=o("from_pretrained()"),Rko=o(" class method or the "),UG=a("a"),Pko=o("from_config()"),Bko=o(` class
method.`),Iko=l(),sL=a("p"),Nko=o("This class cannot be instantiated directly using "),Vme=a("code"),qko=o("__init__()"),jko=o(" (throws an error)."),Dko=l(),ct=a("div"),F(lL.$$.fragment),Gko=l(),Xme=a("p"),Oko=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vko=l(),Hi=a("p"),Xko=o(`Note:
Loading a model from its configuration file does `),zme=a("strong"),zko=o("not"),Wko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=a("a"),Qko=o("from_pretrained()"),Hko=o(" to load the model weights."),Uko=l(),F(Q1.$$.fragment),Jko=l(),eo=a("div"),F(iL.$$.fragment),Yko=l(),Wme=a("p"),Kko=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zko=l(),Na=a("p"),eSo=o("The model class to instantiate is selected based on the "),Qme=a("code"),oSo=o("model_type"),rSo=o(` property of the config object (either
passed as an argument or loaded from `),Hme=a("code"),tSo=o("pretrained_model_name_or_path"),aSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=a("code"),nSo=o("pretrained_model_name_or_path"),sSo=o(":"),lSo=l(),ue=a("ul"),H1=a("li"),Jme=a("strong"),iSo=o("bart"),dSo=o(" \u2014 "),YG=a("a"),cSo=o("BartForConditionalGeneration"),fSo=o(" (BART model)"),mSo=l(),U1=a("li"),Yme=a("strong"),gSo=o("bigbird_pegasus"),hSo=o(" \u2014 "),KG=a("a"),pSo=o("BigBirdPegasusForConditionalGeneration"),uSo=o(" (BigBird-Pegasus model)"),_So=l(),J1=a("li"),Kme=a("strong"),bSo=o("blenderbot"),vSo=o(" \u2014 "),ZG=a("a"),FSo=o("BlenderbotForConditionalGeneration"),TSo=o(" (Blenderbot model)"),MSo=l(),Y1=a("li"),Zme=a("strong"),ESo=o("blenderbot-small"),CSo=o(" \u2014 "),eO=a("a"),wSo=o("BlenderbotSmallForConditionalGeneration"),ASo=o(" (BlenderbotSmall model)"),ySo=l(),K1=a("li"),ege=a("strong"),LSo=o("encoder-decoder"),xSo=o(" \u2014 "),oO=a("a"),$So=o("EncoderDecoderModel"),kSo=o(" (Encoder decoder model)"),SSo=l(),Z1=a("li"),oge=a("strong"),RSo=o("fsmt"),PSo=o(" \u2014 "),rO=a("a"),BSo=o("FSMTForConditionalGeneration"),ISo=o(" (FairSeq Machine-Translation model)"),NSo=l(),e7=a("li"),rge=a("strong"),qSo=o("led"),jSo=o(" \u2014 "),tO=a("a"),DSo=o("LEDForConditionalGeneration"),GSo=o(" (LED model)"),OSo=l(),o7=a("li"),tge=a("strong"),VSo=o("m2m_100"),XSo=o(" \u2014 "),aO=a("a"),zSo=o("M2M100ForConditionalGeneration"),WSo=o(" (M2M100 model)"),QSo=l(),r7=a("li"),age=a("strong"),HSo=o("marian"),USo=o(" \u2014 "),nO=a("a"),JSo=o("MarianMTModel"),YSo=o(" (Marian model)"),KSo=l(),t7=a("li"),nge=a("strong"),ZSo=o("mbart"),eRo=o(" \u2014 "),sO=a("a"),oRo=o("MBartForConditionalGeneration"),rRo=o(" (mBART model)"),tRo=l(),a7=a("li"),sge=a("strong"),aRo=o("mt5"),nRo=o(" \u2014 "),lO=a("a"),sRo=o("MT5ForConditionalGeneration"),lRo=o(" (MT5 model)"),iRo=l(),n7=a("li"),lge=a("strong"),dRo=o("pegasus"),cRo=o(" \u2014 "),iO=a("a"),fRo=o("PegasusForConditionalGeneration"),mRo=o(" (Pegasus model)"),gRo=l(),s7=a("li"),ige=a("strong"),hRo=o("plbart"),pRo=o(" \u2014 "),dO=a("a"),uRo=o("PLBartForConditionalGeneration"),_Ro=o(" (PLBart model)"),bRo=l(),l7=a("li"),dge=a("strong"),vRo=o("prophetnet"),FRo=o(" \u2014 "),cO=a("a"),TRo=o("ProphetNetForConditionalGeneration"),MRo=o(" (ProphetNet model)"),ERo=l(),i7=a("li"),cge=a("strong"),CRo=o("t5"),wRo=o(" \u2014 "),fO=a("a"),ARo=o("T5ForConditionalGeneration"),yRo=o(" (T5 model)"),LRo=l(),d7=a("li"),fge=a("strong"),xRo=o("xlm-prophetnet"),$Ro=o(" \u2014 "),mO=a("a"),kRo=o("XLMProphetNetForConditionalGeneration"),SRo=o(" (XLM-ProphetNet model)"),RRo=l(),c7=a("p"),PRo=o("The model is set in evaluation mode by default using "),mge=a("code"),BRo=o("model.eval()"),IRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=a("code"),NRo=o("model.train()"),qRo=l(),F(f7.$$.fragment),WDe=l(),Ui=a("h2"),m7=a("a"),hge=a("span"),F(dL.$$.fragment),jRo=l(),pge=a("span"),DRo=o("AutoModelForSequenceClassification"),QDe=l(),Po=a("div"),F(cL.$$.fragment),GRo=l(),Ji=a("p"),ORo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gO=a("a"),VRo=o("from_pretrained()"),XRo=o(" class method or the "),hO=a("a"),zRo=o("from_config()"),WRo=o(` class
method.`),QRo=l(),fL=a("p"),HRo=o("This class cannot be instantiated directly using "),uge=a("code"),URo=o("__init__()"),JRo=o(" (throws an error)."),YRo=l(),ft=a("div"),F(mL.$$.fragment),KRo=l(),_ge=a("p"),ZRo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ePo=l(),Yi=a("p"),oPo=o(`Note:
Loading a model from its configuration file does `),bge=a("strong"),rPo=o("not"),tPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=a("a"),aPo=o("from_pretrained()"),nPo=o(" to load the model weights."),sPo=l(),F(g7.$$.fragment),lPo=l(),oo=a("div"),F(gL.$$.fragment),iPo=l(),vge=a("p"),dPo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),cPo=l(),qa=a("p"),fPo=o("The model class to instantiate is selected based on the "),Fge=a("code"),mPo=o("model_type"),gPo=o(` property of the config object (either
passed as an argument or loaded from `),Tge=a("code"),hPo=o("pretrained_model_name_or_path"),pPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=a("code"),uPo=o("pretrained_model_name_or_path"),_Po=o(":"),bPo=l(),q=a("ul"),h7=a("li"),Ege=a("strong"),vPo=o("albert"),FPo=o(" \u2014 "),uO=a("a"),TPo=o("AlbertForSequenceClassification"),MPo=o(" (ALBERT model)"),EPo=l(),p7=a("li"),Cge=a("strong"),CPo=o("bart"),wPo=o(" \u2014 "),_O=a("a"),APo=o("BartForSequenceClassification"),yPo=o(" (BART model)"),LPo=l(),u7=a("li"),wge=a("strong"),xPo=o("bert"),$Po=o(" \u2014 "),bO=a("a"),kPo=o("BertForSequenceClassification"),SPo=o(" (BERT model)"),RPo=l(),_7=a("li"),Age=a("strong"),PPo=o("big_bird"),BPo=o(" \u2014 "),vO=a("a"),IPo=o("BigBirdForSequenceClassification"),NPo=o(" (BigBird model)"),qPo=l(),b7=a("li"),yge=a("strong"),jPo=o("bigbird_pegasus"),DPo=o(" \u2014 "),FO=a("a"),GPo=o("BigBirdPegasusForSequenceClassification"),OPo=o(" (BigBird-Pegasus model)"),VPo=l(),v7=a("li"),Lge=a("strong"),XPo=o("camembert"),zPo=o(" \u2014 "),TO=a("a"),WPo=o("CamembertForSequenceClassification"),QPo=o(" (CamemBERT model)"),HPo=l(),F7=a("li"),xge=a("strong"),UPo=o("canine"),JPo=o(" \u2014 "),MO=a("a"),YPo=o("CanineForSequenceClassification"),KPo=o(" (CANINE model)"),ZPo=l(),T7=a("li"),$ge=a("strong"),eBo=o("convbert"),oBo=o(" \u2014 "),EO=a("a"),rBo=o("ConvBertForSequenceClassification"),tBo=o(" (ConvBERT model)"),aBo=l(),M7=a("li"),kge=a("strong"),nBo=o("ctrl"),sBo=o(" \u2014 "),CO=a("a"),lBo=o("CTRLForSequenceClassification"),iBo=o(" (CTRL model)"),dBo=l(),E7=a("li"),Sge=a("strong"),cBo=o("data2vec-text"),fBo=o(" \u2014 "),wO=a("a"),mBo=o("Data2VecTextForSequenceClassification"),gBo=o(" (Data2VecText model)"),hBo=l(),C7=a("li"),Rge=a("strong"),pBo=o("deberta"),uBo=o(" \u2014 "),AO=a("a"),_Bo=o("DebertaForSequenceClassification"),bBo=o(" (DeBERTa model)"),vBo=l(),w7=a("li"),Pge=a("strong"),FBo=o("deberta-v2"),TBo=o(" \u2014 "),yO=a("a"),MBo=o("DebertaV2ForSequenceClassification"),EBo=o(" (DeBERTa-v2 model)"),CBo=l(),A7=a("li"),Bge=a("strong"),wBo=o("distilbert"),ABo=o(" \u2014 "),LO=a("a"),yBo=o("DistilBertForSequenceClassification"),LBo=o(" (DistilBERT model)"),xBo=l(),y7=a("li"),Ige=a("strong"),$Bo=o("electra"),kBo=o(" \u2014 "),xO=a("a"),SBo=o("ElectraForSequenceClassification"),RBo=o(" (ELECTRA model)"),PBo=l(),L7=a("li"),Nge=a("strong"),BBo=o("flaubert"),IBo=o(" \u2014 "),$O=a("a"),NBo=o("FlaubertForSequenceClassification"),qBo=o(" (FlauBERT model)"),jBo=l(),x7=a("li"),qge=a("strong"),DBo=o("fnet"),GBo=o(" \u2014 "),kO=a("a"),OBo=o("FNetForSequenceClassification"),VBo=o(" (FNet model)"),XBo=l(),$7=a("li"),jge=a("strong"),zBo=o("funnel"),WBo=o(" \u2014 "),SO=a("a"),QBo=o("FunnelForSequenceClassification"),HBo=o(" (Funnel Transformer model)"),UBo=l(),k7=a("li"),Dge=a("strong"),JBo=o("gpt2"),YBo=o(" \u2014 "),RO=a("a"),KBo=o("GPT2ForSequenceClassification"),ZBo=o(" (OpenAI GPT-2 model)"),eIo=l(),S7=a("li"),Gge=a("strong"),oIo=o("gpt_neo"),rIo=o(" \u2014 "),PO=a("a"),tIo=o("GPTNeoForSequenceClassification"),aIo=o(" (GPT Neo model)"),nIo=l(),R7=a("li"),Oge=a("strong"),sIo=o("gptj"),lIo=o(" \u2014 "),BO=a("a"),iIo=o("GPTJForSequenceClassification"),dIo=o(" (GPT-J model)"),cIo=l(),P7=a("li"),Vge=a("strong"),fIo=o("ibert"),mIo=o(" \u2014 "),IO=a("a"),gIo=o("IBertForSequenceClassification"),hIo=o(" (I-BERT model)"),pIo=l(),B7=a("li"),Xge=a("strong"),uIo=o("layoutlm"),_Io=o(" \u2014 "),NO=a("a"),bIo=o("LayoutLMForSequenceClassification"),vIo=o(" (LayoutLM model)"),FIo=l(),I7=a("li"),zge=a("strong"),TIo=o("layoutlmv2"),MIo=o(" \u2014 "),qO=a("a"),EIo=o("LayoutLMv2ForSequenceClassification"),CIo=o(" (LayoutLMv2 model)"),wIo=l(),N7=a("li"),Wge=a("strong"),AIo=o("layoutlmv3"),yIo=o(" \u2014 "),jO=a("a"),LIo=o("LayoutLMv3ForSequenceClassification"),xIo=o(" (LayoutLMv3 model)"),$Io=l(),q7=a("li"),Qge=a("strong"),kIo=o("led"),SIo=o(" \u2014 "),DO=a("a"),RIo=o("LEDForSequenceClassification"),PIo=o(" (LED model)"),BIo=l(),j7=a("li"),Hge=a("strong"),IIo=o("longformer"),NIo=o(" \u2014 "),GO=a("a"),qIo=o("LongformerForSequenceClassification"),jIo=o(" (Longformer model)"),DIo=l(),D7=a("li"),Uge=a("strong"),GIo=o("mbart"),OIo=o(" \u2014 "),OO=a("a"),VIo=o("MBartForSequenceClassification"),XIo=o(" (mBART model)"),zIo=l(),G7=a("li"),Jge=a("strong"),WIo=o("megatron-bert"),QIo=o(" \u2014 "),VO=a("a"),HIo=o("MegatronBertForSequenceClassification"),UIo=o(" (Megatron-BERT model)"),JIo=l(),O7=a("li"),Yge=a("strong"),YIo=o("mobilebert"),KIo=o(" \u2014 "),XO=a("a"),ZIo=o("MobileBertForSequenceClassification"),eNo=o(" (MobileBERT model)"),oNo=l(),V7=a("li"),Kge=a("strong"),rNo=o("mpnet"),tNo=o(" \u2014 "),zO=a("a"),aNo=o("MPNetForSequenceClassification"),nNo=o(" (MPNet model)"),sNo=l(),X7=a("li"),Zge=a("strong"),lNo=o("nystromformer"),iNo=o(" \u2014 "),WO=a("a"),dNo=o("NystromformerForSequenceClassification"),cNo=o(" (Nystr\xF6mformer model)"),fNo=l(),z7=a("li"),ehe=a("strong"),mNo=o("openai-gpt"),gNo=o(" \u2014 "),QO=a("a"),hNo=o("OpenAIGPTForSequenceClassification"),pNo=o(" (OpenAI GPT model)"),uNo=l(),W7=a("li"),ohe=a("strong"),_No=o("perceiver"),bNo=o(" \u2014 "),HO=a("a"),vNo=o("PerceiverForSequenceClassification"),FNo=o(" (Perceiver model)"),TNo=l(),Q7=a("li"),rhe=a("strong"),MNo=o("plbart"),ENo=o(" \u2014 "),UO=a("a"),CNo=o("PLBartForSequenceClassification"),wNo=o(" (PLBart model)"),ANo=l(),H7=a("li"),the=a("strong"),yNo=o("qdqbert"),LNo=o(" \u2014 "),JO=a("a"),xNo=o("QDQBertForSequenceClassification"),$No=o(" (QDQBert model)"),kNo=l(),U7=a("li"),ahe=a("strong"),SNo=o("reformer"),RNo=o(" \u2014 "),YO=a("a"),PNo=o("ReformerForSequenceClassification"),BNo=o(" (Reformer model)"),INo=l(),J7=a("li"),nhe=a("strong"),NNo=o("rembert"),qNo=o(" \u2014 "),KO=a("a"),jNo=o("RemBertForSequenceClassification"),DNo=o(" (RemBERT model)"),GNo=l(),Y7=a("li"),she=a("strong"),ONo=o("roberta"),VNo=o(" \u2014 "),ZO=a("a"),XNo=o("RobertaForSequenceClassification"),zNo=o(" (RoBERTa model)"),WNo=l(),K7=a("li"),lhe=a("strong"),QNo=o("roformer"),HNo=o(" \u2014 "),eV=a("a"),UNo=o("RoFormerForSequenceClassification"),JNo=o(" (RoFormer model)"),YNo=l(),Z7=a("li"),ihe=a("strong"),KNo=o("squeezebert"),ZNo=o(" \u2014 "),oV=a("a"),eqo=o("SqueezeBertForSequenceClassification"),oqo=o(" (SqueezeBERT model)"),rqo=l(),eb=a("li"),dhe=a("strong"),tqo=o("tapas"),aqo=o(" \u2014 "),rV=a("a"),nqo=o("TapasForSequenceClassification"),sqo=o(" (TAPAS model)"),lqo=l(),ob=a("li"),che=a("strong"),iqo=o("transfo-xl"),dqo=o(" \u2014 "),tV=a("a"),cqo=o("TransfoXLForSequenceClassification"),fqo=o(" (Transformer-XL model)"),mqo=l(),rb=a("li"),fhe=a("strong"),gqo=o("xlm"),hqo=o(" \u2014 "),aV=a("a"),pqo=o("XLMForSequenceClassification"),uqo=o(" (XLM model)"),_qo=l(),tb=a("li"),mhe=a("strong"),bqo=o("xlm-roberta"),vqo=o(" \u2014 "),nV=a("a"),Fqo=o("XLMRobertaForSequenceClassification"),Tqo=o(" (XLM-RoBERTa model)"),Mqo=l(),ab=a("li"),ghe=a("strong"),Eqo=o("xlm-roberta-xl"),Cqo=o(" \u2014 "),sV=a("a"),wqo=o("XLMRobertaXLForSequenceClassification"),Aqo=o(" (XLM-RoBERTa-XL model)"),yqo=l(),nb=a("li"),hhe=a("strong"),Lqo=o("xlnet"),xqo=o(" \u2014 "),lV=a("a"),$qo=o("XLNetForSequenceClassification"),kqo=o(" (XLNet model)"),Sqo=l(),sb=a("li"),phe=a("strong"),Rqo=o("yoso"),Pqo=o(" \u2014 "),iV=a("a"),Bqo=o("YosoForSequenceClassification"),Iqo=o(" (YOSO model)"),Nqo=l(),lb=a("p"),qqo=o("The model is set in evaluation mode by default using "),uhe=a("code"),jqo=o("model.eval()"),Dqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=a("code"),Gqo=o("model.train()"),Oqo=l(),F(ib.$$.fragment),HDe=l(),Ki=a("h2"),db=a("a"),bhe=a("span"),F(hL.$$.fragment),Vqo=l(),vhe=a("span"),Xqo=o("AutoModelForMultipleChoice"),UDe=l(),Bo=a("div"),F(pL.$$.fragment),zqo=l(),Zi=a("p"),Wqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dV=a("a"),Qqo=o("from_pretrained()"),Hqo=o(" class method or the "),cV=a("a"),Uqo=o("from_config()"),Jqo=o(` class
method.`),Yqo=l(),uL=a("p"),Kqo=o("This class cannot be instantiated directly using "),Fhe=a("code"),Zqo=o("__init__()"),ejo=o(" (throws an error)."),ojo=l(),mt=a("div"),F(_L.$$.fragment),rjo=l(),The=a("p"),tjo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ajo=l(),ed=a("p"),njo=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),sjo=o("not"),ljo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=a("a"),ijo=o("from_pretrained()"),djo=o(" to load the model weights."),cjo=l(),F(cb.$$.fragment),fjo=l(),ro=a("div"),F(bL.$$.fragment),mjo=l(),Ehe=a("p"),gjo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hjo=l(),ja=a("p"),pjo=o("The model class to instantiate is selected based on the "),Che=a("code"),ujo=o("model_type"),_jo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),bjo=o("pretrained_model_name_or_path"),vjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),Fjo=o("pretrained_model_name_or_path"),Tjo=o(":"),Mjo=l(),Z=a("ul"),fb=a("li"),yhe=a("strong"),Ejo=o("albert"),Cjo=o(" \u2014 "),mV=a("a"),wjo=o("AlbertForMultipleChoice"),Ajo=o(" (ALBERT model)"),yjo=l(),mb=a("li"),Lhe=a("strong"),Ljo=o("bert"),xjo=o(" \u2014 "),gV=a("a"),$jo=o("BertForMultipleChoice"),kjo=o(" (BERT model)"),Sjo=l(),gb=a("li"),xhe=a("strong"),Rjo=o("big_bird"),Pjo=o(" \u2014 "),hV=a("a"),Bjo=o("BigBirdForMultipleChoice"),Ijo=o(" (BigBird model)"),Njo=l(),hb=a("li"),$he=a("strong"),qjo=o("camembert"),jjo=o(" \u2014 "),pV=a("a"),Djo=o("CamembertForMultipleChoice"),Gjo=o(" (CamemBERT model)"),Ojo=l(),pb=a("li"),khe=a("strong"),Vjo=o("canine"),Xjo=o(" \u2014 "),uV=a("a"),zjo=o("CanineForMultipleChoice"),Wjo=o(" (CANINE model)"),Qjo=l(),ub=a("li"),She=a("strong"),Hjo=o("convbert"),Ujo=o(" \u2014 "),_V=a("a"),Jjo=o("ConvBertForMultipleChoice"),Yjo=o(" (ConvBERT model)"),Kjo=l(),_b=a("li"),Rhe=a("strong"),Zjo=o("data2vec-text"),eDo=o(" \u2014 "),bV=a("a"),oDo=o("Data2VecTextForMultipleChoice"),rDo=o(" (Data2VecText model)"),tDo=l(),bb=a("li"),Phe=a("strong"),aDo=o("deberta-v2"),nDo=o(" \u2014 "),vV=a("a"),sDo=o("DebertaV2ForMultipleChoice"),lDo=o(" (DeBERTa-v2 model)"),iDo=l(),vb=a("li"),Bhe=a("strong"),dDo=o("distilbert"),cDo=o(" \u2014 "),FV=a("a"),fDo=o("DistilBertForMultipleChoice"),mDo=o(" (DistilBERT model)"),gDo=l(),Fb=a("li"),Ihe=a("strong"),hDo=o("electra"),pDo=o(" \u2014 "),TV=a("a"),uDo=o("ElectraForMultipleChoice"),_Do=o(" (ELECTRA model)"),bDo=l(),Tb=a("li"),Nhe=a("strong"),vDo=o("flaubert"),FDo=o(" \u2014 "),MV=a("a"),TDo=o("FlaubertForMultipleChoice"),MDo=o(" (FlauBERT model)"),EDo=l(),Mb=a("li"),qhe=a("strong"),CDo=o("fnet"),wDo=o(" \u2014 "),EV=a("a"),ADo=o("FNetForMultipleChoice"),yDo=o(" (FNet model)"),LDo=l(),Eb=a("li"),jhe=a("strong"),xDo=o("funnel"),$Do=o(" \u2014 "),CV=a("a"),kDo=o("FunnelForMultipleChoice"),SDo=o(" (Funnel Transformer model)"),RDo=l(),Cb=a("li"),Dhe=a("strong"),PDo=o("ibert"),BDo=o(" \u2014 "),wV=a("a"),IDo=o("IBertForMultipleChoice"),NDo=o(" (I-BERT model)"),qDo=l(),wb=a("li"),Ghe=a("strong"),jDo=o("longformer"),DDo=o(" \u2014 "),AV=a("a"),GDo=o("LongformerForMultipleChoice"),ODo=o(" (Longformer model)"),VDo=l(),Ab=a("li"),Ohe=a("strong"),XDo=o("megatron-bert"),zDo=o(" \u2014 "),yV=a("a"),WDo=o("MegatronBertForMultipleChoice"),QDo=o(" (Megatron-BERT model)"),HDo=l(),yb=a("li"),Vhe=a("strong"),UDo=o("mobilebert"),JDo=o(" \u2014 "),LV=a("a"),YDo=o("MobileBertForMultipleChoice"),KDo=o(" (MobileBERT model)"),ZDo=l(),Lb=a("li"),Xhe=a("strong"),eGo=o("mpnet"),oGo=o(" \u2014 "),xV=a("a"),rGo=o("MPNetForMultipleChoice"),tGo=o(" (MPNet model)"),aGo=l(),xb=a("li"),zhe=a("strong"),nGo=o("nystromformer"),sGo=o(" \u2014 "),$V=a("a"),lGo=o("NystromformerForMultipleChoice"),iGo=o(" (Nystr\xF6mformer model)"),dGo=l(),$b=a("li"),Whe=a("strong"),cGo=o("qdqbert"),fGo=o(" \u2014 "),kV=a("a"),mGo=o("QDQBertForMultipleChoice"),gGo=o(" (QDQBert model)"),hGo=l(),kb=a("li"),Qhe=a("strong"),pGo=o("rembert"),uGo=o(" \u2014 "),SV=a("a"),_Go=o("RemBertForMultipleChoice"),bGo=o(" (RemBERT model)"),vGo=l(),Sb=a("li"),Hhe=a("strong"),FGo=o("roberta"),TGo=o(" \u2014 "),RV=a("a"),MGo=o("RobertaForMultipleChoice"),EGo=o(" (RoBERTa model)"),CGo=l(),Rb=a("li"),Uhe=a("strong"),wGo=o("roformer"),AGo=o(" \u2014 "),PV=a("a"),yGo=o("RoFormerForMultipleChoice"),LGo=o(" (RoFormer model)"),xGo=l(),Pb=a("li"),Jhe=a("strong"),$Go=o("squeezebert"),kGo=o(" \u2014 "),BV=a("a"),SGo=o("SqueezeBertForMultipleChoice"),RGo=o(" (SqueezeBERT model)"),PGo=l(),Bb=a("li"),Yhe=a("strong"),BGo=o("xlm"),IGo=o(" \u2014 "),IV=a("a"),NGo=o("XLMForMultipleChoice"),qGo=o(" (XLM model)"),jGo=l(),Ib=a("li"),Khe=a("strong"),DGo=o("xlm-roberta"),GGo=o(" \u2014 "),NV=a("a"),OGo=o("XLMRobertaForMultipleChoice"),VGo=o(" (XLM-RoBERTa model)"),XGo=l(),Nb=a("li"),Zhe=a("strong"),zGo=o("xlm-roberta-xl"),WGo=o(" \u2014 "),qV=a("a"),QGo=o("XLMRobertaXLForMultipleChoice"),HGo=o(" (XLM-RoBERTa-XL model)"),UGo=l(),qb=a("li"),epe=a("strong"),JGo=o("xlnet"),YGo=o(" \u2014 "),jV=a("a"),KGo=o("XLNetForMultipleChoice"),ZGo=o(" (XLNet model)"),eOo=l(),jb=a("li"),ope=a("strong"),oOo=o("yoso"),rOo=o(" \u2014 "),DV=a("a"),tOo=o("YosoForMultipleChoice"),aOo=o(" (YOSO model)"),nOo=l(),Db=a("p"),sOo=o("The model is set in evaluation mode by default using "),rpe=a("code"),lOo=o("model.eval()"),iOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),dOo=o("model.train()"),cOo=l(),F(Gb.$$.fragment),JDe=l(),od=a("h2"),Ob=a("a"),ape=a("span"),F(vL.$$.fragment),fOo=l(),npe=a("span"),mOo=o("AutoModelForNextSentencePrediction"),YDe=l(),Io=a("div"),F(FL.$$.fragment),gOo=l(),rd=a("p"),hOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GV=a("a"),pOo=o("from_pretrained()"),uOo=o(" class method or the "),OV=a("a"),_Oo=o("from_config()"),bOo=o(` class
method.`),vOo=l(),TL=a("p"),FOo=o("This class cannot be instantiated directly using "),spe=a("code"),TOo=o("__init__()"),MOo=o(" (throws an error)."),EOo=l(),gt=a("div"),F(ML.$$.fragment),COo=l(),lpe=a("p"),wOo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),AOo=l(),td=a("p"),yOo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),LOo=o("not"),xOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),$Oo=o("from_pretrained()"),kOo=o(" to load the model weights."),SOo=l(),F(Vb.$$.fragment),ROo=l(),to=a("div"),F(EL.$$.fragment),POo=l(),dpe=a("p"),BOo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IOo=l(),Da=a("p"),NOo=o("The model class to instantiate is selected based on the "),cpe=a("code"),qOo=o("model_type"),jOo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),DOo=o("pretrained_model_name_or_path"),GOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),OOo=o("pretrained_model_name_or_path"),VOo=o(":"),XOo=l(),Zr=a("ul"),Xb=a("li"),gpe=a("strong"),zOo=o("bert"),WOo=o(" \u2014 "),XV=a("a"),QOo=o("BertForNextSentencePrediction"),HOo=o(" (BERT model)"),UOo=l(),zb=a("li"),hpe=a("strong"),JOo=o("fnet"),YOo=o(" \u2014 "),zV=a("a"),KOo=o("FNetForNextSentencePrediction"),ZOo=o(" (FNet model)"),eVo=l(),Wb=a("li"),ppe=a("strong"),oVo=o("megatron-bert"),rVo=o(" \u2014 "),WV=a("a"),tVo=o("MegatronBertForNextSentencePrediction"),aVo=o(" (Megatron-BERT model)"),nVo=l(),Qb=a("li"),upe=a("strong"),sVo=o("mobilebert"),lVo=o(" \u2014 "),QV=a("a"),iVo=o("MobileBertForNextSentencePrediction"),dVo=o(" (MobileBERT model)"),cVo=l(),Hb=a("li"),_pe=a("strong"),fVo=o("qdqbert"),mVo=o(" \u2014 "),HV=a("a"),gVo=o("QDQBertForNextSentencePrediction"),hVo=o(" (QDQBert model)"),pVo=l(),Ub=a("p"),uVo=o("The model is set in evaluation mode by default using "),bpe=a("code"),_Vo=o("model.eval()"),bVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),vVo=o("model.train()"),FVo=l(),F(Jb.$$.fragment),KDe=l(),ad=a("h2"),Yb=a("a"),Fpe=a("span"),F(CL.$$.fragment),TVo=l(),Tpe=a("span"),MVo=o("AutoModelForTokenClassification"),ZDe=l(),No=a("div"),F(wL.$$.fragment),EVo=l(),nd=a("p"),CVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UV=a("a"),wVo=o("from_pretrained()"),AVo=o(" class method or the "),JV=a("a"),yVo=o("from_config()"),LVo=o(` class
method.`),xVo=l(),AL=a("p"),$Vo=o("This class cannot be instantiated directly using "),Mpe=a("code"),kVo=o("__init__()"),SVo=o(" (throws an error)."),RVo=l(),ht=a("div"),F(yL.$$.fragment),PVo=l(),Epe=a("p"),BVo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IVo=l(),sd=a("p"),NVo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),qVo=o("not"),jVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=a("a"),DVo=o("from_pretrained()"),GVo=o(" to load the model weights."),OVo=l(),F(Kb.$$.fragment),VVo=l(),ao=a("div"),F(LL.$$.fragment),XVo=l(),wpe=a("p"),zVo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),WVo=l(),Ga=a("p"),QVo=o("The model class to instantiate is selected based on the "),Ape=a("code"),HVo=o("model_type"),UVo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),JVo=o("pretrained_model_name_or_path"),YVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),KVo=o("pretrained_model_name_or_path"),ZVo=o(":"),eXo=l(),U=a("ul"),Zb=a("li"),xpe=a("strong"),oXo=o("albert"),rXo=o(" \u2014 "),KV=a("a"),tXo=o("AlbertForTokenClassification"),aXo=o(" (ALBERT model)"),nXo=l(),e4=a("li"),$pe=a("strong"),sXo=o("bert"),lXo=o(" \u2014 "),ZV=a("a"),iXo=o("BertForTokenClassification"),dXo=o(" (BERT model)"),cXo=l(),o4=a("li"),kpe=a("strong"),fXo=o("big_bird"),mXo=o(" \u2014 "),eX=a("a"),gXo=o("BigBirdForTokenClassification"),hXo=o(" (BigBird model)"),pXo=l(),r4=a("li"),Spe=a("strong"),uXo=o("camembert"),_Xo=o(" \u2014 "),oX=a("a"),bXo=o("CamembertForTokenClassification"),vXo=o(" (CamemBERT model)"),FXo=l(),t4=a("li"),Rpe=a("strong"),TXo=o("canine"),MXo=o(" \u2014 "),rX=a("a"),EXo=o("CanineForTokenClassification"),CXo=o(" (CANINE model)"),wXo=l(),a4=a("li"),Ppe=a("strong"),AXo=o("convbert"),yXo=o(" \u2014 "),tX=a("a"),LXo=o("ConvBertForTokenClassification"),xXo=o(" (ConvBERT model)"),$Xo=l(),n4=a("li"),Bpe=a("strong"),kXo=o("data2vec-text"),SXo=o(" \u2014 "),aX=a("a"),RXo=o("Data2VecTextForTokenClassification"),PXo=o(" (Data2VecText model)"),BXo=l(),s4=a("li"),Ipe=a("strong"),IXo=o("deberta"),NXo=o(" \u2014 "),nX=a("a"),qXo=o("DebertaForTokenClassification"),jXo=o(" (DeBERTa model)"),DXo=l(),l4=a("li"),Npe=a("strong"),GXo=o("deberta-v2"),OXo=o(" \u2014 "),sX=a("a"),VXo=o("DebertaV2ForTokenClassification"),XXo=o(" (DeBERTa-v2 model)"),zXo=l(),i4=a("li"),qpe=a("strong"),WXo=o("distilbert"),QXo=o(" \u2014 "),lX=a("a"),HXo=o("DistilBertForTokenClassification"),UXo=o(" (DistilBERT model)"),JXo=l(),d4=a("li"),jpe=a("strong"),YXo=o("electra"),KXo=o(" \u2014 "),iX=a("a"),ZXo=o("ElectraForTokenClassification"),ezo=o(" (ELECTRA model)"),ozo=l(),c4=a("li"),Dpe=a("strong"),rzo=o("flaubert"),tzo=o(" \u2014 "),dX=a("a"),azo=o("FlaubertForTokenClassification"),nzo=o(" (FlauBERT model)"),szo=l(),f4=a("li"),Gpe=a("strong"),lzo=o("fnet"),izo=o(" \u2014 "),cX=a("a"),dzo=o("FNetForTokenClassification"),czo=o(" (FNet model)"),fzo=l(),m4=a("li"),Ope=a("strong"),mzo=o("funnel"),gzo=o(" \u2014 "),fX=a("a"),hzo=o("FunnelForTokenClassification"),pzo=o(" (Funnel Transformer model)"),uzo=l(),g4=a("li"),Vpe=a("strong"),_zo=o("gpt2"),bzo=o(" \u2014 "),mX=a("a"),vzo=o("GPT2ForTokenClassification"),Fzo=o(" (OpenAI GPT-2 model)"),Tzo=l(),h4=a("li"),Xpe=a("strong"),Mzo=o("ibert"),Ezo=o(" \u2014 "),gX=a("a"),Czo=o("IBertForTokenClassification"),wzo=o(" (I-BERT model)"),Azo=l(),p4=a("li"),zpe=a("strong"),yzo=o("layoutlm"),Lzo=o(" \u2014 "),hX=a("a"),xzo=o("LayoutLMForTokenClassification"),$zo=o(" (LayoutLM model)"),kzo=l(),u4=a("li"),Wpe=a("strong"),Szo=o("layoutlmv2"),Rzo=o(" \u2014 "),pX=a("a"),Pzo=o("LayoutLMv2ForTokenClassification"),Bzo=o(" (LayoutLMv2 model)"),Izo=l(),_4=a("li"),Qpe=a("strong"),Nzo=o("layoutlmv3"),qzo=o(" \u2014 "),uX=a("a"),jzo=o("LayoutLMv3ForTokenClassification"),Dzo=o(" (LayoutLMv3 model)"),Gzo=l(),b4=a("li"),Hpe=a("strong"),Ozo=o("longformer"),Vzo=o(" \u2014 "),_X=a("a"),Xzo=o("LongformerForTokenClassification"),zzo=o(" (Longformer model)"),Wzo=l(),v4=a("li"),Upe=a("strong"),Qzo=o("megatron-bert"),Hzo=o(" \u2014 "),bX=a("a"),Uzo=o("MegatronBertForTokenClassification"),Jzo=o(" (Megatron-BERT model)"),Yzo=l(),F4=a("li"),Jpe=a("strong"),Kzo=o("mobilebert"),Zzo=o(" \u2014 "),vX=a("a"),eWo=o("MobileBertForTokenClassification"),oWo=o(" (MobileBERT model)"),rWo=l(),T4=a("li"),Ype=a("strong"),tWo=o("mpnet"),aWo=o(" \u2014 "),FX=a("a"),nWo=o("MPNetForTokenClassification"),sWo=o(" (MPNet model)"),lWo=l(),M4=a("li"),Kpe=a("strong"),iWo=o("nystromformer"),dWo=o(" \u2014 "),TX=a("a"),cWo=o("NystromformerForTokenClassification"),fWo=o(" (Nystr\xF6mformer model)"),mWo=l(),E4=a("li"),Zpe=a("strong"),gWo=o("qdqbert"),hWo=o(" \u2014 "),MX=a("a"),pWo=o("QDQBertForTokenClassification"),uWo=o(" (QDQBert model)"),_Wo=l(),C4=a("li"),eue=a("strong"),bWo=o("rembert"),vWo=o(" \u2014 "),EX=a("a"),FWo=o("RemBertForTokenClassification"),TWo=o(" (RemBERT model)"),MWo=l(),w4=a("li"),oue=a("strong"),EWo=o("roberta"),CWo=o(" \u2014 "),CX=a("a"),wWo=o("RobertaForTokenClassification"),AWo=o(" (RoBERTa model)"),yWo=l(),A4=a("li"),rue=a("strong"),LWo=o("roformer"),xWo=o(" \u2014 "),wX=a("a"),$Wo=o("RoFormerForTokenClassification"),kWo=o(" (RoFormer model)"),SWo=l(),y4=a("li"),tue=a("strong"),RWo=o("squeezebert"),PWo=o(" \u2014 "),AX=a("a"),BWo=o("SqueezeBertForTokenClassification"),IWo=o(" (SqueezeBERT model)"),NWo=l(),L4=a("li"),aue=a("strong"),qWo=o("xlm"),jWo=o(" \u2014 "),yX=a("a"),DWo=o("XLMForTokenClassification"),GWo=o(" (XLM model)"),OWo=l(),x4=a("li"),nue=a("strong"),VWo=o("xlm-roberta"),XWo=o(" \u2014 "),LX=a("a"),zWo=o("XLMRobertaForTokenClassification"),WWo=o(" (XLM-RoBERTa model)"),QWo=l(),$4=a("li"),sue=a("strong"),HWo=o("xlm-roberta-xl"),UWo=o(" \u2014 "),xX=a("a"),JWo=o("XLMRobertaXLForTokenClassification"),YWo=o(" (XLM-RoBERTa-XL model)"),KWo=l(),k4=a("li"),lue=a("strong"),ZWo=o("xlnet"),eQo=o(" \u2014 "),$X=a("a"),oQo=o("XLNetForTokenClassification"),rQo=o(" (XLNet model)"),tQo=l(),S4=a("li"),iue=a("strong"),aQo=o("yoso"),nQo=o(" \u2014 "),kX=a("a"),sQo=o("YosoForTokenClassification"),lQo=o(" (YOSO model)"),iQo=l(),R4=a("p"),dQo=o("The model is set in evaluation mode by default using "),due=a("code"),cQo=o("model.eval()"),fQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=a("code"),mQo=o("model.train()"),gQo=l(),F(P4.$$.fragment),eGe=l(),ld=a("h2"),B4=a("a"),fue=a("span"),F(xL.$$.fragment),hQo=l(),mue=a("span"),pQo=o("AutoModelForQuestionAnswering"),oGe=l(),qo=a("div"),F($L.$$.fragment),uQo=l(),id=a("p"),_Qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SX=a("a"),bQo=o("from_pretrained()"),vQo=o(" class method or the "),RX=a("a"),FQo=o("from_config()"),TQo=o(` class
method.`),MQo=l(),kL=a("p"),EQo=o("This class cannot be instantiated directly using "),gue=a("code"),CQo=o("__init__()"),wQo=o(" (throws an error)."),AQo=l(),pt=a("div"),F(SL.$$.fragment),yQo=l(),hue=a("p"),LQo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),xQo=l(),dd=a("p"),$Qo=o(`Note:
Loading a model from its configuration file does `),pue=a("strong"),kQo=o("not"),SQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),RQo=o("from_pretrained()"),PQo=o(" to load the model weights."),BQo=l(),F(I4.$$.fragment),IQo=l(),no=a("div"),F(RL.$$.fragment),NQo=l(),uue=a("p"),qQo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),jQo=l(),Oa=a("p"),DQo=o("The model class to instantiate is selected based on the "),_ue=a("code"),GQo=o("model_type"),OQo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),VQo=o("pretrained_model_name_or_path"),XQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),zQo=o("pretrained_model_name_or_path"),WQo=o(":"),QQo=l(),V=a("ul"),N4=a("li"),Fue=a("strong"),HQo=o("albert"),UQo=o(" \u2014 "),BX=a("a"),JQo=o("AlbertForQuestionAnswering"),YQo=o(" (ALBERT model)"),KQo=l(),q4=a("li"),Tue=a("strong"),ZQo=o("bart"),eHo=o(" \u2014 "),IX=a("a"),oHo=o("BartForQuestionAnswering"),rHo=o(" (BART model)"),tHo=l(),j4=a("li"),Mue=a("strong"),aHo=o("bert"),nHo=o(" \u2014 "),NX=a("a"),sHo=o("BertForQuestionAnswering"),lHo=o(" (BERT model)"),iHo=l(),D4=a("li"),Eue=a("strong"),dHo=o("big_bird"),cHo=o(" \u2014 "),qX=a("a"),fHo=o("BigBirdForQuestionAnswering"),mHo=o(" (BigBird model)"),gHo=l(),G4=a("li"),Cue=a("strong"),hHo=o("bigbird_pegasus"),pHo=o(" \u2014 "),jX=a("a"),uHo=o("BigBirdPegasusForQuestionAnswering"),_Ho=o(" (BigBird-Pegasus model)"),bHo=l(),O4=a("li"),wue=a("strong"),vHo=o("camembert"),FHo=o(" \u2014 "),DX=a("a"),THo=o("CamembertForQuestionAnswering"),MHo=o(" (CamemBERT model)"),EHo=l(),V4=a("li"),Aue=a("strong"),CHo=o("canine"),wHo=o(" \u2014 "),GX=a("a"),AHo=o("CanineForQuestionAnswering"),yHo=o(" (CANINE model)"),LHo=l(),X4=a("li"),yue=a("strong"),xHo=o("convbert"),$Ho=o(" \u2014 "),OX=a("a"),kHo=o("ConvBertForQuestionAnswering"),SHo=o(" (ConvBERT model)"),RHo=l(),z4=a("li"),Lue=a("strong"),PHo=o("data2vec-text"),BHo=o(" \u2014 "),VX=a("a"),IHo=o("Data2VecTextForQuestionAnswering"),NHo=o(" (Data2VecText model)"),qHo=l(),W4=a("li"),xue=a("strong"),jHo=o("deberta"),DHo=o(" \u2014 "),XX=a("a"),GHo=o("DebertaForQuestionAnswering"),OHo=o(" (DeBERTa model)"),VHo=l(),Q4=a("li"),$ue=a("strong"),XHo=o("deberta-v2"),zHo=o(" \u2014 "),zX=a("a"),WHo=o("DebertaV2ForQuestionAnswering"),QHo=o(" (DeBERTa-v2 model)"),HHo=l(),H4=a("li"),kue=a("strong"),UHo=o("distilbert"),JHo=o(" \u2014 "),WX=a("a"),YHo=o("DistilBertForQuestionAnswering"),KHo=o(" (DistilBERT model)"),ZHo=l(),U4=a("li"),Sue=a("strong"),eUo=o("electra"),oUo=o(" \u2014 "),QX=a("a"),rUo=o("ElectraForQuestionAnswering"),tUo=o(" (ELECTRA model)"),aUo=l(),J4=a("li"),Rue=a("strong"),nUo=o("flaubert"),sUo=o(" \u2014 "),HX=a("a"),lUo=o("FlaubertForQuestionAnsweringSimple"),iUo=o(" (FlauBERT model)"),dUo=l(),Y4=a("li"),Pue=a("strong"),cUo=o("fnet"),fUo=o(" \u2014 "),UX=a("a"),mUo=o("FNetForQuestionAnswering"),gUo=o(" (FNet model)"),hUo=l(),K4=a("li"),Bue=a("strong"),pUo=o("funnel"),uUo=o(" \u2014 "),JX=a("a"),_Uo=o("FunnelForQuestionAnswering"),bUo=o(" (Funnel Transformer model)"),vUo=l(),Z4=a("li"),Iue=a("strong"),FUo=o("gptj"),TUo=o(" \u2014 "),YX=a("a"),MUo=o("GPTJForQuestionAnswering"),EUo=o(" (GPT-J model)"),CUo=l(),ev=a("li"),Nue=a("strong"),wUo=o("ibert"),AUo=o(" \u2014 "),KX=a("a"),yUo=o("IBertForQuestionAnswering"),LUo=o(" (I-BERT model)"),xUo=l(),ov=a("li"),que=a("strong"),$Uo=o("layoutlmv2"),kUo=o(" \u2014 "),ZX=a("a"),SUo=o("LayoutLMv2ForQuestionAnswering"),RUo=o(" (LayoutLMv2 model)"),PUo=l(),rv=a("li"),jue=a("strong"),BUo=o("layoutlmv3"),IUo=o(" \u2014 "),ez=a("a"),NUo=o("LayoutLMv3ForQuestionAnswering"),qUo=o(" (LayoutLMv3 model)"),jUo=l(),tv=a("li"),Due=a("strong"),DUo=o("led"),GUo=o(" \u2014 "),oz=a("a"),OUo=o("LEDForQuestionAnswering"),VUo=o(" (LED model)"),XUo=l(),av=a("li"),Gue=a("strong"),zUo=o("longformer"),WUo=o(" \u2014 "),rz=a("a"),QUo=o("LongformerForQuestionAnswering"),HUo=o(" (Longformer model)"),UUo=l(),nv=a("li"),Oue=a("strong"),JUo=o("lxmert"),YUo=o(" \u2014 "),tz=a("a"),KUo=o("LxmertForQuestionAnswering"),ZUo=o(" (LXMERT model)"),eJo=l(),sv=a("li"),Vue=a("strong"),oJo=o("mbart"),rJo=o(" \u2014 "),az=a("a"),tJo=o("MBartForQuestionAnswering"),aJo=o(" (mBART model)"),nJo=l(),lv=a("li"),Xue=a("strong"),sJo=o("megatron-bert"),lJo=o(" \u2014 "),nz=a("a"),iJo=o("MegatronBertForQuestionAnswering"),dJo=o(" (Megatron-BERT model)"),cJo=l(),iv=a("li"),zue=a("strong"),fJo=o("mobilebert"),mJo=o(" \u2014 "),sz=a("a"),gJo=o("MobileBertForQuestionAnswering"),hJo=o(" (MobileBERT model)"),pJo=l(),dv=a("li"),Wue=a("strong"),uJo=o("mpnet"),_Jo=o(" \u2014 "),lz=a("a"),bJo=o("MPNetForQuestionAnswering"),vJo=o(" (MPNet model)"),FJo=l(),cv=a("li"),Que=a("strong"),TJo=o("nystromformer"),MJo=o(" \u2014 "),iz=a("a"),EJo=o("NystromformerForQuestionAnswering"),CJo=o(" (Nystr\xF6mformer model)"),wJo=l(),fv=a("li"),Hue=a("strong"),AJo=o("qdqbert"),yJo=o(" \u2014 "),dz=a("a"),LJo=o("QDQBertForQuestionAnswering"),xJo=o(" (QDQBert model)"),$Jo=l(),mv=a("li"),Uue=a("strong"),kJo=o("reformer"),SJo=o(" \u2014 "),cz=a("a"),RJo=o("ReformerForQuestionAnswering"),PJo=o(" (Reformer model)"),BJo=l(),gv=a("li"),Jue=a("strong"),IJo=o("rembert"),NJo=o(" \u2014 "),fz=a("a"),qJo=o("RemBertForQuestionAnswering"),jJo=o(" (RemBERT model)"),DJo=l(),hv=a("li"),Yue=a("strong"),GJo=o("roberta"),OJo=o(" \u2014 "),mz=a("a"),VJo=o("RobertaForQuestionAnswering"),XJo=o(" (RoBERTa model)"),zJo=l(),pv=a("li"),Kue=a("strong"),WJo=o("roformer"),QJo=o(" \u2014 "),gz=a("a"),HJo=o("RoFormerForQuestionAnswering"),UJo=o(" (RoFormer model)"),JJo=l(),uv=a("li"),Zue=a("strong"),YJo=o("splinter"),KJo=o(" \u2014 "),hz=a("a"),ZJo=o("SplinterForQuestionAnswering"),eYo=o(" (Splinter model)"),oYo=l(),_v=a("li"),e_e=a("strong"),rYo=o("squeezebert"),tYo=o(" \u2014 "),pz=a("a"),aYo=o("SqueezeBertForQuestionAnswering"),nYo=o(" (SqueezeBERT model)"),sYo=l(),bv=a("li"),o_e=a("strong"),lYo=o("xlm"),iYo=o(" \u2014 "),uz=a("a"),dYo=o("XLMForQuestionAnsweringSimple"),cYo=o(" (XLM model)"),fYo=l(),vv=a("li"),r_e=a("strong"),mYo=o("xlm-roberta"),gYo=o(" \u2014 "),_z=a("a"),hYo=o("XLMRobertaForQuestionAnswering"),pYo=o(" (XLM-RoBERTa model)"),uYo=l(),Fv=a("li"),t_e=a("strong"),_Yo=o("xlm-roberta-xl"),bYo=o(" \u2014 "),bz=a("a"),vYo=o("XLMRobertaXLForQuestionAnswering"),FYo=o(" (XLM-RoBERTa-XL model)"),TYo=l(),Tv=a("li"),a_e=a("strong"),MYo=o("xlnet"),EYo=o(" \u2014 "),vz=a("a"),CYo=o("XLNetForQuestionAnsweringSimple"),wYo=o(" (XLNet model)"),AYo=l(),Mv=a("li"),n_e=a("strong"),yYo=o("yoso"),LYo=o(" \u2014 "),Fz=a("a"),xYo=o("YosoForQuestionAnswering"),$Yo=o(" (YOSO model)"),kYo=l(),Ev=a("p"),SYo=o("The model is set in evaluation mode by default using "),s_e=a("code"),RYo=o("model.eval()"),PYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),BYo=o("model.train()"),IYo=l(),F(Cv.$$.fragment),rGe=l(),cd=a("h2"),wv=a("a"),i_e=a("span"),F(PL.$$.fragment),NYo=l(),d_e=a("span"),qYo=o("AutoModelForTableQuestionAnswering"),tGe=l(),jo=a("div"),F(BL.$$.fragment),jYo=l(),fd=a("p"),DYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tz=a("a"),GYo=o("from_pretrained()"),OYo=o(" class method or the "),Mz=a("a"),VYo=o("from_config()"),XYo=o(` class
method.`),zYo=l(),IL=a("p"),WYo=o("This class cannot be instantiated directly using "),c_e=a("code"),QYo=o("__init__()"),HYo=o(" (throws an error)."),UYo=l(),ut=a("div"),F(NL.$$.fragment),JYo=l(),f_e=a("p"),YYo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KYo=l(),md=a("p"),ZYo=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),eKo=o("not"),oKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=a("a"),rKo=o("from_pretrained()"),tKo=o(" to load the model weights."),aKo=l(),F(Av.$$.fragment),nKo=l(),so=a("div"),F(qL.$$.fragment),sKo=l(),g_e=a("p"),lKo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),iKo=l(),Va=a("p"),dKo=o("The model class to instantiate is selected based on the "),h_e=a("code"),cKo=o("model_type"),fKo=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),mKo=o("pretrained_model_name_or_path"),gKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),hKo=o("pretrained_model_name_or_path"),pKo=o(":"),uKo=l(),__e=a("ul"),yv=a("li"),b_e=a("strong"),_Ko=o("tapas"),bKo=o(" \u2014 "),Cz=a("a"),vKo=o("TapasForQuestionAnswering"),FKo=o(" (TAPAS model)"),TKo=l(),Lv=a("p"),MKo=o("The model is set in evaluation mode by default using "),v_e=a("code"),EKo=o("model.eval()"),CKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=a("code"),wKo=o("model.train()"),AKo=l(),F(xv.$$.fragment),aGe=l(),gd=a("h2"),$v=a("a"),T_e=a("span"),F(jL.$$.fragment),yKo=l(),M_e=a("span"),LKo=o("AutoModelForImageClassification"),nGe=l(),Do=a("div"),F(DL.$$.fragment),xKo=l(),hd=a("p"),$Ko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wz=a("a"),kKo=o("from_pretrained()"),SKo=o(" class method or the "),Az=a("a"),RKo=o("from_config()"),PKo=o(` class
method.`),BKo=l(),GL=a("p"),IKo=o("This class cannot be instantiated directly using "),E_e=a("code"),NKo=o("__init__()"),qKo=o(" (throws an error)."),jKo=l(),_t=a("div"),F(OL.$$.fragment),DKo=l(),C_e=a("p"),GKo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),OKo=l(),pd=a("p"),VKo=o(`Note:
Loading a model from its configuration file does `),w_e=a("strong"),XKo=o("not"),zKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=a("a"),WKo=o("from_pretrained()"),QKo=o(" to load the model weights."),HKo=l(),F(kv.$$.fragment),UKo=l(),lo=a("div"),F(VL.$$.fragment),JKo=l(),A_e=a("p"),YKo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KKo=l(),Xa=a("p"),ZKo=o("The model class to instantiate is selected based on the "),y_e=a("code"),eZo=o("model_type"),oZo=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),rZo=o("pretrained_model_name_or_path"),tZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(":"),sZo=l(),ve=a("ul"),Sv=a("li"),$_e=a("strong"),lZo=o("beit"),iZo=o(" \u2014 "),Lz=a("a"),dZo=o("BeitForImageClassification"),cZo=o(" (BEiT model)"),fZo=l(),Rv=a("li"),k_e=a("strong"),mZo=o("convnext"),gZo=o(" \u2014 "),xz=a("a"),hZo=o("ConvNextForImageClassification"),pZo=o(" (ConvNeXT model)"),uZo=l(),Pv=a("li"),S_e=a("strong"),_Zo=o("cvt"),bZo=o(" \u2014 "),$z=a("a"),vZo=o("CvtForImageClassification"),FZo=o(" (CvT model)"),TZo=l(),Bv=a("li"),R_e=a("strong"),MZo=o("data2vec-vision"),EZo=o(" \u2014 "),kz=a("a"),CZo=o("Data2VecVisionForImageClassification"),wZo=o(" (Data2VecVision model)"),AZo=l(),Gs=a("li"),P_e=a("strong"),yZo=o("deit"),LZo=o(" \u2014 "),Sz=a("a"),xZo=o("DeiTForImageClassification"),$Zo=o(" or "),Rz=a("a"),kZo=o("DeiTForImageClassificationWithTeacher"),SZo=o(" (DeiT model)"),RZo=l(),Iv=a("li"),B_e=a("strong"),PZo=o("imagegpt"),BZo=o(" \u2014 "),Pz=a("a"),IZo=o("ImageGPTForImageClassification"),NZo=o(" (ImageGPT model)"),qZo=l(),Os=a("li"),I_e=a("strong"),jZo=o("levit"),DZo=o(" \u2014 "),Bz=a("a"),GZo=o("LevitForImageClassification"),OZo=o(" or "),Iz=a("a"),VZo=o("LevitForImageClassificationWithTeacher"),XZo=o(" (LeViT model)"),zZo=l(),bt=a("li"),N_e=a("strong"),WZo=o("perceiver"),QZo=o(" \u2014 "),Nz=a("a"),HZo=o("PerceiverForImageClassificationLearned"),UZo=o(" or "),qz=a("a"),JZo=o("PerceiverForImageClassificationFourier"),YZo=o(" or "),jz=a("a"),KZo=o("PerceiverForImageClassificationConvProcessing"),ZZo=o(" (Perceiver model)"),eer=l(),Nv=a("li"),q_e=a("strong"),oer=o("poolformer"),rer=o(" \u2014 "),Dz=a("a"),ter=o("PoolFormerForImageClassification"),aer=o(" (PoolFormer model)"),ner=l(),qv=a("li"),j_e=a("strong"),ser=o("regnet"),ler=o(" \u2014 "),Gz=a("a"),ier=o("RegNetForImageClassification"),der=o(" (RegNet model)"),cer=l(),jv=a("li"),D_e=a("strong"),fer=o("resnet"),mer=o(" \u2014 "),Oz=a("a"),ger=o("ResNetForImageClassification"),her=o(" (ResNet model)"),per=l(),Dv=a("li"),G_e=a("strong"),uer=o("segformer"),_er=o(" \u2014 "),Vz=a("a"),ber=o("SegformerForImageClassification"),ver=o(" (SegFormer model)"),Fer=l(),Gv=a("li"),O_e=a("strong"),Ter=o("swin"),Mer=o(" \u2014 "),Xz=a("a"),Eer=o("SwinForImageClassification"),Cer=o(" (Swin Transformer model)"),wer=l(),Ov=a("li"),V_e=a("strong"),Aer=o("van"),yer=o(" \u2014 "),zz=a("a"),Ler=o("VanForImageClassification"),xer=o(" (VAN model)"),$er=l(),Vv=a("li"),X_e=a("strong"),ker=o("vit"),Ser=o(" \u2014 "),Wz=a("a"),Rer=o("ViTForImageClassification"),Per=o(" (ViT model)"),Ber=l(),Xv=a("p"),Ier=o("The model is set in evaluation mode by default using "),z_e=a("code"),Ner=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=a("code"),jer=o("model.train()"),Der=l(),F(zv.$$.fragment),sGe=l(),ud=a("h2"),Wv=a("a"),Q_e=a("span"),F(XL.$$.fragment),Ger=l(),H_e=a("span"),Oer=o("AutoModelForVision2Seq"),lGe=l(),Go=a("div"),F(zL.$$.fragment),Ver=l(),_d=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qz=a("a"),zer=o("from_pretrained()"),Wer=o(" class method or the "),Hz=a("a"),Qer=o("from_config()"),Her=o(` class
method.`),Uer=l(),WL=a("p"),Jer=o("This class cannot be instantiated directly using "),U_e=a("code"),Yer=o("__init__()"),Ker=o(" (throws an error)."),Zer=l(),vt=a("div"),F(QL.$$.fragment),eor=l(),J_e=a("p"),oor=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ror=l(),bd=a("p"),tor=o(`Note:
Loading a model from its configuration file does `),Y_e=a("strong"),aor=o("not"),nor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=a("a"),sor=o("from_pretrained()"),lor=o(" to load the model weights."),ior=l(),F(Qv.$$.fragment),dor=l(),io=a("div"),F(HL.$$.fragment),cor=l(),K_e=a("p"),mor=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gor=l(),za=a("p"),hor=o("The model class to instantiate is selected based on the "),Z_e=a("code"),por=o("model_type"),uor=o(` property of the config object (either
passed as an argument or loaded from `),e2e=a("code"),_or=o("pretrained_model_name_or_path"),bor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=a("code"),vor=o("pretrained_model_name_or_path"),For=o(":"),Tor=l(),r2e=a("ul"),Hv=a("li"),t2e=a("strong"),Mor=o("vision-encoder-decoder"),Eor=o(" \u2014 "),Jz=a("a"),Cor=o("VisionEncoderDecoderModel"),wor=o(" (Vision Encoder decoder model)"),Aor=l(),Uv=a("p"),yor=o("The model is set in evaluation mode by default using "),a2e=a("code"),Lor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=a("code"),$or=o("model.train()"),kor=l(),F(Jv.$$.fragment),iGe=l(),vd=a("h2"),Yv=a("a"),s2e=a("span"),F(UL.$$.fragment),Sor=l(),l2e=a("span"),Ror=o("AutoModelForVisualQuestionAnswering"),dGe=l(),Oo=a("div"),F(JL.$$.fragment),Por=l(),Fd=a("p"),Bor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),Yz=a("a"),Ior=o("from_pretrained()"),Nor=o(" class method or the "),Kz=a("a"),qor=o("from_config()"),jor=o(` class
method.`),Dor=l(),YL=a("p"),Gor=o("This class cannot be instantiated directly using "),i2e=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),Ft=a("div"),F(KL.$$.fragment),zor=l(),d2e=a("p"),Wor=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Qor=l(),Td=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),c2e=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),F(Kv.$$.fragment),err=l(),co=a("div"),F(ZL.$$.fragment),orr=l(),f2e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),trr=l(),Wa=a("p"),arr=o("The model class to instantiate is selected based on the "),m2e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),g2e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),frr=l(),p2e=a("ul"),Zv=a("li"),u2e=a("strong"),mrr=o("vilt"),grr=o(" \u2014 "),eW=a("a"),hrr=o("ViltForQuestionAnswering"),prr=o(" (ViLT model)"),urr=l(),eF=a("p"),_rr=o("The model is set in evaluation mode by default using "),_2e=a("code"),brr=o("model.eval()"),vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=a("code"),Frr=o("model.train()"),Trr=l(),F(oF.$$.fragment),cGe=l(),Md=a("h2"),rF=a("a"),v2e=a("span"),F(e8.$$.fragment),Mrr=l(),F2e=a("span"),Err=o("AutoModelForAudioClassification"),fGe=l(),Vo=a("div"),F(o8.$$.fragment),Crr=l(),Ed=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oW=a("a"),Arr=o("from_pretrained()"),yrr=o(" class method or the "),rW=a("a"),Lrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),r8=a("p"),krr=o("This class cannot be instantiated directly using "),T2e=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Prr=l(),Tt=a("div"),F(t8.$$.fragment),Brr=l(),M2e=a("p"),Irr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Nrr=l(),Cd=a("p"),qrr=o(`Note:
Loading a model from its configuration file does `),E2e=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),F(tF.$$.fragment),Xrr=l(),fo=a("div"),F(a8.$$.fragment),zrr=l(),C2e=a("p"),Wrr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Qrr=l(),Qa=a("p"),Hrr=o("The model class to instantiate is selected based on the "),w2e=a("code"),Urr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),Re=a("ul"),aF=a("li"),L2e=a("strong"),rtr=o("data2vec-audio"),ttr=o(" \u2014 "),aW=a("a"),atr=o("Data2VecAudioForSequenceClassification"),ntr=o(" (Data2VecAudio model)"),str=l(),nF=a("li"),x2e=a("strong"),ltr=o("hubert"),itr=o(" \u2014 "),nW=a("a"),dtr=o("HubertForSequenceClassification"),ctr=o(" (Hubert model)"),ftr=l(),sF=a("li"),$2e=a("strong"),mtr=o("sew"),gtr=o(" \u2014 "),sW=a("a"),htr=o("SEWForSequenceClassification"),ptr=o(" (SEW model)"),utr=l(),lF=a("li"),k2e=a("strong"),_tr=o("sew-d"),btr=o(" \u2014 "),lW=a("a"),vtr=o("SEWDForSequenceClassification"),Ftr=o(" (SEW-D model)"),Ttr=l(),iF=a("li"),S2e=a("strong"),Mtr=o("unispeech"),Etr=o(" \u2014 "),iW=a("a"),Ctr=o("UniSpeechForSequenceClassification"),wtr=o(" (UniSpeech model)"),Atr=l(),dF=a("li"),R2e=a("strong"),ytr=o("unispeech-sat"),Ltr=o(" \u2014 "),dW=a("a"),xtr=o("UniSpeechSatForSequenceClassification"),$tr=o(" (UniSpeechSat model)"),ktr=l(),cF=a("li"),P2e=a("strong"),Str=o("wav2vec2"),Rtr=o(" \u2014 "),cW=a("a"),Ptr=o("Wav2Vec2ForSequenceClassification"),Btr=o(" (Wav2Vec2 model)"),Itr=l(),fF=a("li"),B2e=a("strong"),Ntr=o("wav2vec2-conformer"),qtr=o(" \u2014 "),fW=a("a"),jtr=o("Wav2Vec2ConformerForSequenceClassification"),Dtr=o(" (Wav2Vec2-Conformer model)"),Gtr=l(),mF=a("li"),I2e=a("strong"),Otr=o("wavlm"),Vtr=o(" \u2014 "),mW=a("a"),Xtr=o("WavLMForSequenceClassification"),ztr=o(" (WavLM model)"),Wtr=l(),gF=a("p"),Qtr=o("The model is set in evaluation mode by default using "),N2e=a("code"),Htr=o("model.eval()"),Utr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),Jtr=o("model.train()"),Ytr=l(),F(hF.$$.fragment),mGe=l(),wd=a("h2"),pF=a("a"),j2e=a("span"),F(n8.$$.fragment),Ktr=l(),D2e=a("span"),Ztr=o("AutoModelForAudioFrameClassification"),gGe=l(),Xo=a("div"),F(s8.$$.fragment),ear=l(),Ad=a("p"),oar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gW=a("a"),rar=o("from_pretrained()"),tar=o(" class method or the "),hW=a("a"),aar=o("from_config()"),nar=o(` class
method.`),sar=l(),l8=a("p"),lar=o("This class cannot be instantiated directly using "),G2e=a("code"),iar=o("__init__()"),dar=o(" (throws an error)."),car=l(),Mt=a("div"),F(i8.$$.fragment),far=l(),O2e=a("p"),mar=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),gar=l(),yd=a("p"),har=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),par=o("not"),uar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),_ar=o("from_pretrained()"),bar=o(" to load the model weights."),Far=l(),F(uF.$$.fragment),Tar=l(),mo=a("div"),F(d8.$$.fragment),Mar=l(),X2e=a("p"),Ear=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Car=l(),Ha=a("p"),war=o("The model class to instantiate is selected based on the "),z2e=a("code"),Aar=o("model_type"),yar=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),Lar=o("pretrained_model_name_or_path"),xar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=a("code"),$ar=o("pretrained_model_name_or_path"),kar=o(":"),Sar=l(),et=a("ul"),_F=a("li"),H2e=a("strong"),Rar=o("data2vec-audio"),Par=o(" \u2014 "),uW=a("a"),Bar=o("Data2VecAudioForAudioFrameClassification"),Iar=o(" (Data2VecAudio model)"),Nar=l(),bF=a("li"),U2e=a("strong"),qar=o("unispeech-sat"),jar=o(" \u2014 "),_W=a("a"),Dar=o("UniSpeechSatForAudioFrameClassification"),Gar=o(" (UniSpeechSat model)"),Oar=l(),vF=a("li"),J2e=a("strong"),Var=o("wav2vec2"),Xar=o(" \u2014 "),bW=a("a"),zar=o("Wav2Vec2ForAudioFrameClassification"),War=o(" (Wav2Vec2 model)"),Qar=l(),FF=a("li"),Y2e=a("strong"),Har=o("wav2vec2-conformer"),Uar=o(" \u2014 "),vW=a("a"),Jar=o("Wav2Vec2ConformerForAudioFrameClassification"),Yar=o(" (Wav2Vec2-Conformer model)"),Kar=l(),TF=a("li"),K2e=a("strong"),Zar=o("wavlm"),enr=o(" \u2014 "),FW=a("a"),onr=o("WavLMForAudioFrameClassification"),rnr=o(" (WavLM model)"),tnr=l(),MF=a("p"),anr=o("The model is set in evaluation mode by default using "),Z2e=a("code"),nnr=o("model.eval()"),snr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=a("code"),lnr=o("model.train()"),inr=l(),F(EF.$$.fragment),hGe=l(),Ld=a("h2"),CF=a("a"),o1e=a("span"),F(c8.$$.fragment),dnr=l(),r1e=a("span"),cnr=o("AutoModelForCTC"),pGe=l(),zo=a("div"),F(f8.$$.fragment),fnr=l(),xd=a("p"),mnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TW=a("a"),gnr=o("from_pretrained()"),hnr=o(" class method or the "),MW=a("a"),pnr=o("from_config()"),unr=o(` class
method.`),_nr=l(),m8=a("p"),bnr=o("This class cannot be instantiated directly using "),t1e=a("code"),vnr=o("__init__()"),Fnr=o(" (throws an error)."),Tnr=l(),Et=a("div"),F(g8.$$.fragment),Mnr=l(),a1e=a("p"),Enr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Cnr=l(),$d=a("p"),wnr=o(`Note:
Loading a model from its configuration file does `),n1e=a("strong"),Anr=o("not"),ynr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=a("a"),Lnr=o("from_pretrained()"),xnr=o(" to load the model weights."),$nr=l(),F(wF.$$.fragment),knr=l(),go=a("div"),F(h8.$$.fragment),Snr=l(),s1e=a("p"),Rnr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Pnr=l(),Ua=a("p"),Bnr=o("The model class to instantiate is selected based on the "),l1e=a("code"),Inr=o("model_type"),Nnr=o(` property of the config object (either
passed as an argument or loaded from `),i1e=a("code"),qnr=o("pretrained_model_name_or_path"),jnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=a("code"),Dnr=o("pretrained_model_name_or_path"),Gnr=o(":"),Onr=l(),ye=a("ul"),AF=a("li"),c1e=a("strong"),Vnr=o("data2vec-audio"),Xnr=o(" \u2014 "),CW=a("a"),znr=o("Data2VecAudioForCTC"),Wnr=o(" (Data2VecAudio model)"),Qnr=l(),yF=a("li"),f1e=a("strong"),Hnr=o("hubert"),Unr=o(" \u2014 "),wW=a("a"),Jnr=o("HubertForCTC"),Ynr=o(" (Hubert model)"),Knr=l(),LF=a("li"),m1e=a("strong"),Znr=o("mctct"),esr=o(" \u2014 "),AW=a("a"),osr=o("MCTCTForCTC"),rsr=o(" (M-CTC-T model)"),tsr=l(),xF=a("li"),g1e=a("strong"),asr=o("sew"),nsr=o(" \u2014 "),yW=a("a"),ssr=o("SEWForCTC"),lsr=o(" (SEW model)"),isr=l(),$F=a("li"),h1e=a("strong"),dsr=o("sew-d"),csr=o(" \u2014 "),LW=a("a"),fsr=o("SEWDForCTC"),msr=o(" (SEW-D model)"),gsr=l(),kF=a("li"),p1e=a("strong"),hsr=o("unispeech"),psr=o(" \u2014 "),xW=a("a"),usr=o("UniSpeechForCTC"),_sr=o(" (UniSpeech model)"),bsr=l(),SF=a("li"),u1e=a("strong"),vsr=o("unispeech-sat"),Fsr=o(" \u2014 "),$W=a("a"),Tsr=o("UniSpeechSatForCTC"),Msr=o(" (UniSpeechSat model)"),Esr=l(),RF=a("li"),_1e=a("strong"),Csr=o("wav2vec2"),wsr=o(" \u2014 "),kW=a("a"),Asr=o("Wav2Vec2ForCTC"),ysr=o(" (Wav2Vec2 model)"),Lsr=l(),PF=a("li"),b1e=a("strong"),xsr=o("wav2vec2-conformer"),$sr=o(" \u2014 "),SW=a("a"),ksr=o("Wav2Vec2ConformerForCTC"),Ssr=o(" (Wav2Vec2-Conformer model)"),Rsr=l(),BF=a("li"),v1e=a("strong"),Psr=o("wavlm"),Bsr=o(" \u2014 "),RW=a("a"),Isr=o("WavLMForCTC"),Nsr=o(" (WavLM model)"),qsr=l(),IF=a("p"),jsr=o("The model is set in evaluation mode by default using "),F1e=a("code"),Dsr=o("model.eval()"),Gsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=a("code"),Osr=o("model.train()"),Vsr=l(),F(NF.$$.fragment),uGe=l(),kd=a("h2"),qF=a("a"),M1e=a("span"),F(p8.$$.fragment),Xsr=l(),E1e=a("span"),zsr=o("AutoModelForSpeechSeq2Seq"),_Ge=l(),Wo=a("div"),F(u8.$$.fragment),Wsr=l(),Sd=a("p"),Qsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PW=a("a"),Hsr=o("from_pretrained()"),Usr=o(" class method or the "),BW=a("a"),Jsr=o("from_config()"),Ysr=o(` class
method.`),Ksr=l(),_8=a("p"),Zsr=o("This class cannot be instantiated directly using "),C1e=a("code"),elr=o("__init__()"),olr=o(" (throws an error)."),rlr=l(),Ct=a("div"),F(b8.$$.fragment),tlr=l(),w1e=a("p"),alr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nlr=l(),Rd=a("p"),slr=o(`Note:
Loading a model from its configuration file does `),A1e=a("strong"),llr=o("not"),ilr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=a("a"),dlr=o("from_pretrained()"),clr=o(" to load the model weights."),flr=l(),F(jF.$$.fragment),mlr=l(),ho=a("div"),F(v8.$$.fragment),glr=l(),y1e=a("p"),hlr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),plr=l(),Ja=a("p"),ulr=o("The model class to instantiate is selected based on the "),L1e=a("code"),_lr=o("model_type"),blr=o(` property of the config object (either
passed as an argument or loaded from `),x1e=a("code"),vlr=o("pretrained_model_name_or_path"),Flr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=a("code"),Tlr=o("pretrained_model_name_or_path"),Mlr=o(":"),Elr=l(),F8=a("ul"),DF=a("li"),k1e=a("strong"),Clr=o("speech-encoder-decoder"),wlr=o(" \u2014 "),NW=a("a"),Alr=o("SpeechEncoderDecoderModel"),ylr=o(" (Speech Encoder decoder model)"),Llr=l(),GF=a("li"),S1e=a("strong"),xlr=o("speech_to_text"),$lr=o(" \u2014 "),qW=a("a"),klr=o("Speech2TextForConditionalGeneration"),Slr=o(" (Speech2Text model)"),Rlr=l(),OF=a("p"),Plr=o("The model is set in evaluation mode by default using "),R1e=a("code"),Blr=o("model.eval()"),Ilr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),Nlr=o("model.train()"),qlr=l(),F(VF.$$.fragment),bGe=l(),Pd=a("h2"),XF=a("a"),B1e=a("span"),F(T8.$$.fragment),jlr=l(),I1e=a("span"),Dlr=o("AutoModelForAudioXVector"),vGe=l(),Qo=a("div"),F(M8.$$.fragment),Glr=l(),Bd=a("p"),Olr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jW=a("a"),Vlr=o("from_pretrained()"),Xlr=o(" class method or the "),DW=a("a"),zlr=o("from_config()"),Wlr=o(` class
method.`),Qlr=l(),E8=a("p"),Hlr=o("This class cannot be instantiated directly using "),N1e=a("code"),Ulr=o("__init__()"),Jlr=o(" (throws an error)."),Ylr=l(),wt=a("div"),F(C8.$$.fragment),Klr=l(),q1e=a("p"),Zlr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),eir=l(),Id=a("p"),oir=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),rir=o("not"),tir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),air=o("from_pretrained()"),nir=o(" to load the model weights."),sir=l(),F(zF.$$.fragment),lir=l(),po=a("div"),F(w8.$$.fragment),iir=l(),D1e=a("p"),dir=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),cir=l(),Ya=a("p"),fir=o("The model class to instantiate is selected based on the "),G1e=a("code"),mir=o("model_type"),gir=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),hir=o("pretrained_model_name_or_path"),pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),uir=o("pretrained_model_name_or_path"),_ir=o(":"),bir=l(),ot=a("ul"),WF=a("li"),X1e=a("strong"),vir=o("data2vec-audio"),Fir=o(" \u2014 "),OW=a("a"),Tir=o("Data2VecAudioForXVector"),Mir=o(" (Data2VecAudio model)"),Eir=l(),QF=a("li"),z1e=a("strong"),Cir=o("unispeech-sat"),wir=o(" \u2014 "),VW=a("a"),Air=o("UniSpeechSatForXVector"),yir=o(" (UniSpeechSat model)"),Lir=l(),HF=a("li"),W1e=a("strong"),xir=o("wav2vec2"),$ir=o(" \u2014 "),XW=a("a"),kir=o("Wav2Vec2ForXVector"),Sir=o(" (Wav2Vec2 model)"),Rir=l(),UF=a("li"),Q1e=a("strong"),Pir=o("wav2vec2-conformer"),Bir=o(" \u2014 "),zW=a("a"),Iir=o("Wav2Vec2ConformerForXVector"),Nir=o(" (Wav2Vec2-Conformer model)"),qir=l(),JF=a("li"),H1e=a("strong"),jir=o("wavlm"),Dir=o(" \u2014 "),WW=a("a"),Gir=o("WavLMForXVector"),Oir=o(" (WavLM model)"),Vir=l(),YF=a("p"),Xir=o("The model is set in evaluation mode by default using "),U1e=a("code"),zir=o("model.eval()"),Wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=a("code"),Qir=o("model.train()"),Hir=l(),F(KF.$$.fragment),FGe=l(),Nd=a("h2"),ZF=a("a"),Y1e=a("span"),F(A8.$$.fragment),Uir=l(),K1e=a("span"),Jir=o("AutoModelForMaskedImageModeling"),TGe=l(),Ho=a("div"),F(y8.$$.fragment),Yir=l(),qd=a("p"),Kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QW=a("a"),Zir=o("from_pretrained()"),edr=o(" class method or the "),HW=a("a"),odr=o("from_config()"),rdr=o(` class
method.`),tdr=l(),L8=a("p"),adr=o("This class cannot be instantiated directly using "),Z1e=a("code"),ndr=o("__init__()"),sdr=o(" (throws an error)."),ldr=l(),At=a("div"),F(x8.$$.fragment),idr=l(),e7e=a("p"),ddr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cdr=l(),jd=a("p"),fdr=o(`Note:
Loading a model from its configuration file does `),o7e=a("strong"),mdr=o("not"),gdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=a("a"),hdr=o("from_pretrained()"),pdr=o(" to load the model weights."),udr=l(),F(eT.$$.fragment),_dr=l(),uo=a("div"),F($8.$$.fragment),bdr=l(),r7e=a("p"),vdr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Fdr=l(),Ka=a("p"),Tdr=o("The model class to instantiate is selected based on the "),t7e=a("code"),Mdr=o("model_type"),Edr=o(` property of the config object (either
passed as an argument or loaded from `),a7e=a("code"),Cdr=o("pretrained_model_name_or_path"),wdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=a("code"),Adr=o("pretrained_model_name_or_path"),ydr=o(":"),Ldr=l(),Dd=a("ul"),oT=a("li"),s7e=a("strong"),xdr=o("deit"),$dr=o(" \u2014 "),JW=a("a"),kdr=o("DeiTForMaskedImageModeling"),Sdr=o(" (DeiT model)"),Rdr=l(),rT=a("li"),l7e=a("strong"),Pdr=o("swin"),Bdr=o(" \u2014 "),YW=a("a"),Idr=o("SwinForMaskedImageModeling"),Ndr=o(" (Swin Transformer model)"),qdr=l(),tT=a("li"),i7e=a("strong"),jdr=o("vit"),Ddr=o(" \u2014 "),KW=a("a"),Gdr=o("ViTForMaskedImageModeling"),Odr=o(" (ViT model)"),Vdr=l(),aT=a("p"),Xdr=o("The model is set in evaluation mode by default using "),d7e=a("code"),zdr=o("model.eval()"),Wdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c7e=a("code"),Qdr=o("model.train()"),Hdr=l(),F(nT.$$.fragment),MGe=l(),Gd=a("h2"),sT=a("a"),f7e=a("span"),F(k8.$$.fragment),Udr=l(),m7e=a("span"),Jdr=o("AutoModelForObjectDetection"),EGe=l(),Uo=a("div"),F(S8.$$.fragment),Ydr=l(),Od=a("p"),Kdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZW=a("a"),Zdr=o("from_pretrained()"),ecr=o(" class method or the "),eQ=a("a"),ocr=o("from_config()"),rcr=o(` class
method.`),tcr=l(),R8=a("p"),acr=o("This class cannot be instantiated directly using "),g7e=a("code"),ncr=o("__init__()"),scr=o(" (throws an error)."),lcr=l(),yt=a("div"),F(P8.$$.fragment),icr=l(),h7e=a("p"),dcr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),ccr=l(),Vd=a("p"),fcr=o(`Note:
Loading a model from its configuration file does `),p7e=a("strong"),mcr=o("not"),gcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=a("a"),hcr=o("from_pretrained()"),pcr=o(" to load the model weights."),ucr=l(),F(lT.$$.fragment),_cr=l(),_o=a("div"),F(B8.$$.fragment),bcr=l(),u7e=a("p"),vcr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Fcr=l(),Za=a("p"),Tcr=o("The model class to instantiate is selected based on the "),_7e=a("code"),Mcr=o("model_type"),Ecr=o(` property of the config object (either
passed as an argument or loaded from `),b7e=a("code"),Ccr=o("pretrained_model_name_or_path"),wcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=a("code"),Acr=o("pretrained_model_name_or_path"),ycr=o(":"),Lcr=l(),I8=a("ul"),iT=a("li"),F7e=a("strong"),xcr=o("detr"),$cr=o(" \u2014 "),rQ=a("a"),kcr=o("DetrForObjectDetection"),Scr=o(" (DETR model)"),Rcr=l(),dT=a("li"),T7e=a("strong"),Pcr=o("yolos"),Bcr=o(" \u2014 "),tQ=a("a"),Icr=o("YolosForObjectDetection"),Ncr=o(" (YOLOS model)"),qcr=l(),cT=a("p"),jcr=o("The model is set in evaluation mode by default using "),M7e=a("code"),Dcr=o("model.eval()"),Gcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E7e=a("code"),Ocr=o("model.train()"),Vcr=l(),F(fT.$$.fragment),CGe=l(),Xd=a("h2"),mT=a("a"),C7e=a("span"),F(N8.$$.fragment),Xcr=l(),w7e=a("span"),zcr=o("AutoModelForImageSegmentation"),wGe=l(),Jo=a("div"),F(q8.$$.fragment),Wcr=l(),zd=a("p"),Qcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aQ=a("a"),Hcr=o("from_pretrained()"),Ucr=o(" class method or the "),nQ=a("a"),Jcr=o("from_config()"),Ycr=o(` class
method.`),Kcr=l(),j8=a("p"),Zcr=o("This class cannot be instantiated directly using "),A7e=a("code"),efr=o("__init__()"),ofr=o(" (throws an error)."),rfr=l(),Lt=a("div"),F(D8.$$.fragment),tfr=l(),y7e=a("p"),afr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),nfr=l(),Wd=a("p"),sfr=o(`Note:
Loading a model from its configuration file does `),L7e=a("strong"),lfr=o("not"),ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),dfr=o("from_pretrained()"),cfr=o(" to load the model weights."),ffr=l(),F(gT.$$.fragment),mfr=l(),bo=a("div"),F(G8.$$.fragment),gfr=l(),x7e=a("p"),hfr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),pfr=l(),en=a("p"),ufr=o("The model class to instantiate is selected based on the "),$7e=a("code"),_fr=o("model_type"),bfr=o(` property of the config object (either
passed as an argument or loaded from `),k7e=a("code"),vfr=o("pretrained_model_name_or_path"),Ffr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=a("code"),Tfr=o("pretrained_model_name_or_path"),Mfr=o(":"),Efr=l(),R7e=a("ul"),hT=a("li"),P7e=a("strong"),Cfr=o("detr"),wfr=o(" \u2014 "),lQ=a("a"),Afr=o("DetrForSegmentation"),yfr=o(" (DETR model)"),Lfr=l(),pT=a("p"),xfr=o("The model is set in evaluation mode by default using "),B7e=a("code"),$fr=o("model.eval()"),kfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I7e=a("code"),Sfr=o("model.train()"),Rfr=l(),F(uT.$$.fragment),AGe=l(),Qd=a("h2"),_T=a("a"),N7e=a("span"),F(O8.$$.fragment),Pfr=l(),q7e=a("span"),Bfr=o("AutoModelForSemanticSegmentation"),yGe=l(),Yo=a("div"),F(V8.$$.fragment),Ifr=l(),Hd=a("p"),Nfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iQ=a("a"),qfr=o("from_pretrained()"),jfr=o(" class method or the "),dQ=a("a"),Dfr=o("from_config()"),Gfr=o(` class
method.`),Ofr=l(),X8=a("p"),Vfr=o("This class cannot be instantiated directly using "),j7e=a("code"),Xfr=o("__init__()"),zfr=o(" (throws an error)."),Wfr=l(),xt=a("div"),F(z8.$$.fragment),Qfr=l(),D7e=a("p"),Hfr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ufr=l(),Ud=a("p"),Jfr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),Yfr=o("not"),Kfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=a("a"),Zfr=o("from_pretrained()"),emr=o(" to load the model weights."),omr=l(),F(bT.$$.fragment),rmr=l(),vo=a("div"),F(W8.$$.fragment),tmr=l(),O7e=a("p"),amr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),nmr=l(),on=a("p"),smr=o("The model class to instantiate is selected based on the "),V7e=a("code"),lmr=o("model_type"),imr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),dmr=o("pretrained_model_name_or_path"),cmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),fmr=o("pretrained_model_name_or_path"),mmr=o(":"),gmr=l(),rn=a("ul"),vT=a("li"),W7e=a("strong"),hmr=o("beit"),pmr=o(" \u2014 "),fQ=a("a"),umr=o("BeitForSemanticSegmentation"),_mr=o(" (BEiT model)"),bmr=l(),FT=a("li"),Q7e=a("strong"),vmr=o("data2vec-vision"),Fmr=o(" \u2014 "),mQ=a("a"),Tmr=o("Data2VecVisionForSemanticSegmentation"),Mmr=o(" (Data2VecVision model)"),Emr=l(),TT=a("li"),H7e=a("strong"),Cmr=o("dpt"),wmr=o(" \u2014 "),gQ=a("a"),Amr=o("DPTForSemanticSegmentation"),ymr=o(" (DPT model)"),Lmr=l(),MT=a("li"),U7e=a("strong"),xmr=o("segformer"),$mr=o(" \u2014 "),hQ=a("a"),kmr=o("SegformerForSemanticSegmentation"),Smr=o(" (SegFormer model)"),Rmr=l(),ET=a("p"),Pmr=o("The model is set in evaluation mode by default using "),J7e=a("code"),Bmr=o("model.eval()"),Imr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y7e=a("code"),Nmr=o("model.train()"),qmr=l(),F(CT.$$.fragment),LGe=l(),Jd=a("h2"),wT=a("a"),K7e=a("span"),F(Q8.$$.fragment),jmr=l(),Z7e=a("span"),Dmr=o("AutoModelForInstanceSegmentation"),xGe=l(),Ko=a("div"),F(H8.$$.fragment),Gmr=l(),Yd=a("p"),Omr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pQ=a("a"),Vmr=o("from_pretrained()"),Xmr=o(" class method or the "),uQ=a("a"),zmr=o("from_config()"),Wmr=o(` class
method.`),Qmr=l(),U8=a("p"),Hmr=o("This class cannot be instantiated directly using "),ebe=a("code"),Umr=o("__init__()"),Jmr=o(" (throws an error)."),Ymr=l(),$t=a("div"),F(J8.$$.fragment),Kmr=l(),obe=a("p"),Zmr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),egr=l(),Kd=a("p"),ogr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),rgr=o("not"),tgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),agr=o("from_pretrained()"),ngr=o(" to load the model weights."),sgr=l(),F(AT.$$.fragment),lgr=l(),Fo=a("div"),F(Y8.$$.fragment),igr=l(),tbe=a("p"),dgr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),cgr=l(),tn=a("p"),fgr=o("The model class to instantiate is selected based on the "),abe=a("code"),mgr=o("model_type"),ggr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),hgr=o("pretrained_model_name_or_path"),pgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),ugr=o("pretrained_model_name_or_path"),_gr=o(":"),bgr=l(),lbe=a("ul"),yT=a("li"),ibe=a("strong"),vgr=o("maskformer"),Fgr=o(" \u2014 "),bQ=a("a"),Tgr=o("MaskFormerForInstanceSegmentation"),Mgr=o(" (MaskFormer model)"),Egr=l(),LT=a("p"),Cgr=o("The model is set in evaluation mode by default using "),dbe=a("code"),wgr=o("model.eval()"),Agr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=a("code"),ygr=o("model.train()"),Lgr=l(),F(xT.$$.fragment),$Ge=l(),Zd=a("h2"),$T=a("a"),fbe=a("span"),F(K8.$$.fragment),xgr=l(),mbe=a("span"),$gr=o("TFAutoModel"),kGe=l(),Zo=a("div"),F(Z8.$$.fragment),kgr=l(),ec=a("p"),Sgr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vQ=a("a"),Rgr=o("from_pretrained()"),Pgr=o(" class method or the "),FQ=a("a"),Bgr=o("from_config()"),Igr=o(` class
method.`),Ngr=l(),e9=a("p"),qgr=o("This class cannot be instantiated directly using "),gbe=a("code"),jgr=o("__init__()"),Dgr=o(" (throws an error)."),Ggr=l(),kt=a("div"),F(o9.$$.fragment),Ogr=l(),hbe=a("p"),Vgr=o("Instantiates one of the base model classes of the library from a configuration."),Xgr=l(),oc=a("p"),zgr=o(`Note:
Loading a model from its configuration file does `),pbe=a("strong"),Wgr=o("not"),Qgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Hgr=o("from_pretrained()"),Ugr=o(" to load the model weights."),Jgr=l(),F(kT.$$.fragment),Ygr=l(),yr=a("div"),F(r9.$$.fragment),Kgr=l(),ube=a("p"),Zgr=o("Instantiate one of the base model classes of the library from a pretrained model."),ehr=l(),an=a("p"),ohr=o("The model class to instantiate is selected based on the "),_be=a("code"),rhr=o("model_type"),thr=o(` property of the config object (either
passed as an argument or loaded from `),bbe=a("code"),ahr=o("pretrained_model_name_or_path"),nhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=a("code"),shr=o("pretrained_model_name_or_path"),lhr=o(":"),ihr=l(),N=a("ul"),ST=a("li"),Fbe=a("strong"),dhr=o("albert"),chr=o(" \u2014 "),MQ=a("a"),fhr=o("TFAlbertModel"),mhr=o(" (ALBERT model)"),ghr=l(),RT=a("li"),Tbe=a("strong"),hhr=o("bart"),phr=o(" \u2014 "),EQ=a("a"),uhr=o("TFBartModel"),_hr=o(" (BART model)"),bhr=l(),PT=a("li"),Mbe=a("strong"),vhr=o("bert"),Fhr=o(" \u2014 "),CQ=a("a"),Thr=o("TFBertModel"),Mhr=o(" (BERT model)"),Ehr=l(),BT=a("li"),Ebe=a("strong"),Chr=o("blenderbot"),whr=o(" \u2014 "),wQ=a("a"),Ahr=o("TFBlenderbotModel"),yhr=o(" (Blenderbot model)"),Lhr=l(),IT=a("li"),Cbe=a("strong"),xhr=o("blenderbot-small"),$hr=o(" \u2014 "),AQ=a("a"),khr=o("TFBlenderbotSmallModel"),Shr=o(" (BlenderbotSmall model)"),Rhr=l(),NT=a("li"),wbe=a("strong"),Phr=o("camembert"),Bhr=o(" \u2014 "),yQ=a("a"),Ihr=o("TFCamembertModel"),Nhr=o(" (CamemBERT model)"),qhr=l(),qT=a("li"),Abe=a("strong"),jhr=o("clip"),Dhr=o(" \u2014 "),LQ=a("a"),Ghr=o("TFCLIPModel"),Ohr=o(" (CLIP model)"),Vhr=l(),jT=a("li"),ybe=a("strong"),Xhr=o("convbert"),zhr=o(" \u2014 "),xQ=a("a"),Whr=o("TFConvBertModel"),Qhr=o(" (ConvBERT model)"),Hhr=l(),DT=a("li"),Lbe=a("strong"),Uhr=o("convnext"),Jhr=o(" \u2014 "),$Q=a("a"),Yhr=o("TFConvNextModel"),Khr=o(" (ConvNeXT model)"),Zhr=l(),GT=a("li"),xbe=a("strong"),epr=o("ctrl"),opr=o(" \u2014 "),kQ=a("a"),rpr=o("TFCTRLModel"),tpr=o(" (CTRL model)"),apr=l(),OT=a("li"),$be=a("strong"),npr=o("data2vec-vision"),spr=o(" \u2014 "),SQ=a("a"),lpr=o("TFData2VecVisionModel"),ipr=o(" (Data2VecVision model)"),dpr=l(),VT=a("li"),kbe=a("strong"),cpr=o("deberta"),fpr=o(" \u2014 "),RQ=a("a"),mpr=o("TFDebertaModel"),gpr=o(" (DeBERTa model)"),hpr=l(),XT=a("li"),Sbe=a("strong"),ppr=o("deberta-v2"),upr=o(" \u2014 "),PQ=a("a"),_pr=o("TFDebertaV2Model"),bpr=o(" (DeBERTa-v2 model)"),vpr=l(),zT=a("li"),Rbe=a("strong"),Fpr=o("distilbert"),Tpr=o(" \u2014 "),BQ=a("a"),Mpr=o("TFDistilBertModel"),Epr=o(" (DistilBERT model)"),Cpr=l(),WT=a("li"),Pbe=a("strong"),wpr=o("dpr"),Apr=o(" \u2014 "),IQ=a("a"),ypr=o("TFDPRQuestionEncoder"),Lpr=o(" (DPR model)"),xpr=l(),QT=a("li"),Bbe=a("strong"),$pr=o("electra"),kpr=o(" \u2014 "),NQ=a("a"),Spr=o("TFElectraModel"),Rpr=o(" (ELECTRA model)"),Ppr=l(),HT=a("li"),Ibe=a("strong"),Bpr=o("flaubert"),Ipr=o(" \u2014 "),qQ=a("a"),Npr=o("TFFlaubertModel"),qpr=o(" (FlauBERT model)"),jpr=l(),Vs=a("li"),Nbe=a("strong"),Dpr=o("funnel"),Gpr=o(" \u2014 "),jQ=a("a"),Opr=o("TFFunnelModel"),Vpr=o(" or "),DQ=a("a"),Xpr=o("TFFunnelBaseModel"),zpr=o(" (Funnel Transformer model)"),Wpr=l(),UT=a("li"),qbe=a("strong"),Qpr=o("gpt2"),Hpr=o(" \u2014 "),GQ=a("a"),Upr=o("TFGPT2Model"),Jpr=o(" (OpenAI GPT-2 model)"),Ypr=l(),JT=a("li"),jbe=a("strong"),Kpr=o("gptj"),Zpr=o(" \u2014 "),OQ=a("a"),eur=o("TFGPTJModel"),our=o(" (GPT-J model)"),rur=l(),YT=a("li"),Dbe=a("strong"),tur=o("hubert"),aur=o(" \u2014 "),VQ=a("a"),nur=o("TFHubertModel"),sur=o(" (Hubert model)"),lur=l(),KT=a("li"),Gbe=a("strong"),iur=o("layoutlm"),dur=o(" \u2014 "),XQ=a("a"),cur=o("TFLayoutLMModel"),fur=o(" (LayoutLM model)"),mur=l(),ZT=a("li"),Obe=a("strong"),gur=o("led"),hur=o(" \u2014 "),zQ=a("a"),pur=o("TFLEDModel"),uur=o(" (LED model)"),_ur=l(),eM=a("li"),Vbe=a("strong"),bur=o("longformer"),vur=o(" \u2014 "),WQ=a("a"),Fur=o("TFLongformerModel"),Tur=o(" (Longformer model)"),Mur=l(),oM=a("li"),Xbe=a("strong"),Eur=o("lxmert"),Cur=o(" \u2014 "),QQ=a("a"),wur=o("TFLxmertModel"),Aur=o(" (LXMERT model)"),yur=l(),rM=a("li"),zbe=a("strong"),Lur=o("marian"),xur=o(" \u2014 "),HQ=a("a"),$ur=o("TFMarianModel"),kur=o(" (Marian model)"),Sur=l(),tM=a("li"),Wbe=a("strong"),Rur=o("mbart"),Pur=o(" \u2014 "),UQ=a("a"),Bur=o("TFMBartModel"),Iur=o(" (mBART model)"),Nur=l(),aM=a("li"),Qbe=a("strong"),qur=o("mobilebert"),jur=o(" \u2014 "),JQ=a("a"),Dur=o("TFMobileBertModel"),Gur=o(" (MobileBERT model)"),Our=l(),nM=a("li"),Hbe=a("strong"),Vur=o("mpnet"),Xur=o(" \u2014 "),YQ=a("a"),zur=o("TFMPNetModel"),Wur=o(" (MPNet model)"),Qur=l(),sM=a("li"),Ube=a("strong"),Hur=o("mt5"),Uur=o(" \u2014 "),KQ=a("a"),Jur=o("TFMT5Model"),Yur=o(" (MT5 model)"),Kur=l(),lM=a("li"),Jbe=a("strong"),Zur=o("openai-gpt"),e_r=o(" \u2014 "),ZQ=a("a"),o_r=o("TFOpenAIGPTModel"),r_r=o(" (OpenAI GPT model)"),t_r=l(),iM=a("li"),Ybe=a("strong"),a_r=o("opt"),n_r=o(" \u2014 "),eH=a("a"),s_r=o("TFOPTModel"),l_r=o(" (OPT model)"),i_r=l(),dM=a("li"),Kbe=a("strong"),d_r=o("pegasus"),c_r=o(" \u2014 "),oH=a("a"),f_r=o("TFPegasusModel"),m_r=o(" (Pegasus model)"),g_r=l(),cM=a("li"),Zbe=a("strong"),h_r=o("rembert"),p_r=o(" \u2014 "),rH=a("a"),u_r=o("TFRemBertModel"),__r=o(" (RemBERT model)"),b_r=l(),fM=a("li"),e4e=a("strong"),v_r=o("resnet"),F_r=o(" \u2014 "),tH=a("a"),T_r=o("TFResNetModel"),M_r=o(" (ResNet model)"),E_r=l(),mM=a("li"),o4e=a("strong"),C_r=o("roberta"),w_r=o(" \u2014 "),aH=a("a"),A_r=o("TFRobertaModel"),y_r=o(" (RoBERTa model)"),L_r=l(),gM=a("li"),r4e=a("strong"),x_r=o("roformer"),$_r=o(" \u2014 "),nH=a("a"),k_r=o("TFRoFormerModel"),S_r=o(" (RoFormer model)"),R_r=l(),hM=a("li"),t4e=a("strong"),P_r=o("speech_to_text"),B_r=o(" \u2014 "),sH=a("a"),I_r=o("TFSpeech2TextModel"),N_r=o(" (Speech2Text model)"),q_r=l(),pM=a("li"),a4e=a("strong"),j_r=o("swin"),D_r=o(" \u2014 "),lH=a("a"),G_r=o("TFSwinModel"),O_r=o(" (Swin Transformer model)"),V_r=l(),uM=a("li"),n4e=a("strong"),X_r=o("t5"),z_r=o(" \u2014 "),iH=a("a"),W_r=o("TFT5Model"),Q_r=o(" (T5 model)"),H_r=l(),_M=a("li"),s4e=a("strong"),U_r=o("tapas"),J_r=o(" \u2014 "),dH=a("a"),Y_r=o("TFTapasModel"),K_r=o(" (TAPAS model)"),Z_r=l(),bM=a("li"),l4e=a("strong"),e2r=o("transfo-xl"),o2r=o(" \u2014 "),cH=a("a"),r2r=o("TFTransfoXLModel"),t2r=o(" (Transformer-XL model)"),a2r=l(),vM=a("li"),i4e=a("strong"),n2r=o("vit"),s2r=o(" \u2014 "),fH=a("a"),l2r=o("TFViTModel"),i2r=o(" (ViT model)"),d2r=l(),FM=a("li"),d4e=a("strong"),c2r=o("vit_mae"),f2r=o(" \u2014 "),mH=a("a"),m2r=o("TFViTMAEModel"),g2r=o(" (ViTMAE model)"),h2r=l(),TM=a("li"),c4e=a("strong"),p2r=o("wav2vec2"),u2r=o(" \u2014 "),gH=a("a"),_2r=o("TFWav2Vec2Model"),b2r=o(" (Wav2Vec2 model)"),v2r=l(),MM=a("li"),f4e=a("strong"),F2r=o("xlm"),T2r=o(" \u2014 "),hH=a("a"),M2r=o("TFXLMModel"),E2r=o(" (XLM model)"),C2r=l(),EM=a("li"),m4e=a("strong"),w2r=o("xlm-roberta"),A2r=o(" \u2014 "),pH=a("a"),y2r=o("TFXLMRobertaModel"),L2r=o(" (XLM-RoBERTa model)"),x2r=l(),CM=a("li"),g4e=a("strong"),$2r=o("xlnet"),k2r=o(" \u2014 "),uH=a("a"),S2r=o("TFXLNetModel"),R2r=o(" (XLNet model)"),P2r=l(),F(wM.$$.fragment),SGe=l(),rc=a("h2"),AM=a("a"),h4e=a("span"),F(t9.$$.fragment),B2r=l(),p4e=a("span"),I2r=o("TFAutoModelForPreTraining"),RGe=l(),er=a("div"),F(a9.$$.fragment),N2r=l(),tc=a("p"),q2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_H=a("a"),j2r=o("from_pretrained()"),D2r=o(" class method or the "),bH=a("a"),G2r=o("from_config()"),O2r=o(` class
method.`),V2r=l(),n9=a("p"),X2r=o("This class cannot be instantiated directly using "),u4e=a("code"),z2r=o("__init__()"),W2r=o(" (throws an error)."),Q2r=l(),St=a("div"),F(s9.$$.fragment),H2r=l(),_4e=a("p"),U2r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),J2r=l(),ac=a("p"),Y2r=o(`Note:
Loading a model from its configuration file does `),b4e=a("strong"),K2r=o("not"),Z2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),e1r=o("from_pretrained()"),o1r=o(" to load the model weights."),r1r=l(),F(yM.$$.fragment),t1r=l(),Lr=a("div"),F(l9.$$.fragment),a1r=l(),v4e=a("p"),n1r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),s1r=l(),nn=a("p"),l1r=o("The model class to instantiate is selected based on the "),F4e=a("code"),i1r=o("model_type"),d1r=o(` property of the config object (either
passed as an argument or loaded from `),T4e=a("code"),c1r=o("pretrained_model_name_or_path"),f1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=a("code"),m1r=o("pretrained_model_name_or_path"),g1r=o(":"),h1r=l(),se=a("ul"),LM=a("li"),E4e=a("strong"),p1r=o("albert"),u1r=o(" \u2014 "),FH=a("a"),_1r=o("TFAlbertForPreTraining"),b1r=o(" (ALBERT model)"),v1r=l(),xM=a("li"),C4e=a("strong"),F1r=o("bart"),T1r=o(" \u2014 "),TH=a("a"),M1r=o("TFBartForConditionalGeneration"),E1r=o(" (BART model)"),C1r=l(),$M=a("li"),w4e=a("strong"),w1r=o("bert"),A1r=o(" \u2014 "),MH=a("a"),y1r=o("TFBertForPreTraining"),L1r=o(" (BERT model)"),x1r=l(),kM=a("li"),A4e=a("strong"),$1r=o("camembert"),k1r=o(" \u2014 "),EH=a("a"),S1r=o("TFCamembertForMaskedLM"),R1r=o(" (CamemBERT model)"),P1r=l(),SM=a("li"),y4e=a("strong"),B1r=o("ctrl"),I1r=o(" \u2014 "),CH=a("a"),N1r=o("TFCTRLLMHeadModel"),q1r=o(" (CTRL model)"),j1r=l(),RM=a("li"),L4e=a("strong"),D1r=o("distilbert"),G1r=o(" \u2014 "),wH=a("a"),O1r=o("TFDistilBertForMaskedLM"),V1r=o(" (DistilBERT model)"),X1r=l(),PM=a("li"),x4e=a("strong"),z1r=o("electra"),W1r=o(" \u2014 "),AH=a("a"),Q1r=o("TFElectraForPreTraining"),H1r=o(" (ELECTRA model)"),U1r=l(),BM=a("li"),$4e=a("strong"),J1r=o("flaubert"),Y1r=o(" \u2014 "),yH=a("a"),K1r=o("TFFlaubertWithLMHeadModel"),Z1r=o(" (FlauBERT model)"),e7r=l(),IM=a("li"),k4e=a("strong"),o7r=o("funnel"),r7r=o(" \u2014 "),LH=a("a"),t7r=o("TFFunnelForPreTraining"),a7r=o(" (Funnel Transformer model)"),n7r=l(),NM=a("li"),S4e=a("strong"),s7r=o("gpt2"),l7r=o(" \u2014 "),xH=a("a"),i7r=o("TFGPT2LMHeadModel"),d7r=o(" (OpenAI GPT-2 model)"),c7r=l(),qM=a("li"),R4e=a("strong"),f7r=o("layoutlm"),m7r=o(" \u2014 "),$H=a("a"),g7r=o("TFLayoutLMForMaskedLM"),h7r=o(" (LayoutLM model)"),p7r=l(),jM=a("li"),P4e=a("strong"),u7r=o("lxmert"),_7r=o(" \u2014 "),kH=a("a"),b7r=o("TFLxmertForPreTraining"),v7r=o(" (LXMERT model)"),F7r=l(),DM=a("li"),B4e=a("strong"),T7r=o("mobilebert"),M7r=o(" \u2014 "),SH=a("a"),E7r=o("TFMobileBertForPreTraining"),C7r=o(" (MobileBERT model)"),w7r=l(),GM=a("li"),I4e=a("strong"),A7r=o("mpnet"),y7r=o(" \u2014 "),RH=a("a"),L7r=o("TFMPNetForMaskedLM"),x7r=o(" (MPNet model)"),$7r=l(),OM=a("li"),N4e=a("strong"),k7r=o("openai-gpt"),S7r=o(" \u2014 "),PH=a("a"),R7r=o("TFOpenAIGPTLMHeadModel"),P7r=o(" (OpenAI GPT model)"),B7r=l(),VM=a("li"),q4e=a("strong"),I7r=o("roberta"),N7r=o(" \u2014 "),BH=a("a"),q7r=o("TFRobertaForMaskedLM"),j7r=o(" (RoBERTa model)"),D7r=l(),XM=a("li"),j4e=a("strong"),G7r=o("t5"),O7r=o(" \u2014 "),IH=a("a"),V7r=o("TFT5ForConditionalGeneration"),X7r=o(" (T5 model)"),z7r=l(),zM=a("li"),D4e=a("strong"),W7r=o("tapas"),Q7r=o(" \u2014 "),NH=a("a"),H7r=o("TFTapasForMaskedLM"),U7r=o(" (TAPAS model)"),J7r=l(),WM=a("li"),G4e=a("strong"),Y7r=o("transfo-xl"),K7r=o(" \u2014 "),qH=a("a"),Z7r=o("TFTransfoXLLMHeadModel"),ebr=o(" (Transformer-XL model)"),obr=l(),QM=a("li"),O4e=a("strong"),rbr=o("vit_mae"),tbr=o(" \u2014 "),jH=a("a"),abr=o("TFViTMAEForPreTraining"),nbr=o(" (ViTMAE model)"),sbr=l(),HM=a("li"),V4e=a("strong"),lbr=o("xlm"),ibr=o(" \u2014 "),DH=a("a"),dbr=o("TFXLMWithLMHeadModel"),cbr=o(" (XLM model)"),fbr=l(),UM=a("li"),X4e=a("strong"),mbr=o("xlm-roberta"),gbr=o(" \u2014 "),GH=a("a"),hbr=o("TFXLMRobertaForMaskedLM"),pbr=o(" (XLM-RoBERTa model)"),ubr=l(),JM=a("li"),z4e=a("strong"),_br=o("xlnet"),bbr=o(" \u2014 "),OH=a("a"),vbr=o("TFXLNetLMHeadModel"),Fbr=o(" (XLNet model)"),Tbr=l(),F(YM.$$.fragment),PGe=l(),nc=a("h2"),KM=a("a"),W4e=a("span"),F(i9.$$.fragment),Mbr=l(),Q4e=a("span"),Ebr=o("TFAutoModelForCausalLM"),BGe=l(),or=a("div"),F(d9.$$.fragment),Cbr=l(),sc=a("p"),wbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VH=a("a"),Abr=o("from_pretrained()"),ybr=o(" class method or the "),XH=a("a"),Lbr=o("from_config()"),xbr=o(` class
method.`),$br=l(),c9=a("p"),kbr=o("This class cannot be instantiated directly using "),H4e=a("code"),Sbr=o("__init__()"),Rbr=o(" (throws an error)."),Pbr=l(),Rt=a("div"),F(f9.$$.fragment),Bbr=l(),U4e=a("p"),Ibr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Nbr=l(),lc=a("p"),qbr=o(`Note:
Loading a model from its configuration file does `),J4e=a("strong"),jbr=o("not"),Dbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=a("a"),Gbr=o("from_pretrained()"),Obr=o(" to load the model weights."),Vbr=l(),F(ZM.$$.fragment),Xbr=l(),xr=a("div"),F(m9.$$.fragment),zbr=l(),Y4e=a("p"),Wbr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Qbr=l(),sn=a("p"),Hbr=o("The model class to instantiate is selected based on the "),K4e=a("code"),Ubr=o("model_type"),Jbr=o(` property of the config object (either
passed as an argument or loaded from `),Z4e=a("code"),Ybr=o("pretrained_model_name_or_path"),Kbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),Zbr=o("pretrained_model_name_or_path"),e4r=o(":"),o4r=l(),Me=a("ul"),eE=a("li"),ove=a("strong"),r4r=o("bert"),t4r=o(" \u2014 "),WH=a("a"),a4r=o("TFBertLMHeadModel"),n4r=o(" (BERT model)"),s4r=l(),oE=a("li"),rve=a("strong"),l4r=o("camembert"),i4r=o(" \u2014 "),QH=a("a"),d4r=o("TFCamembertForCausalLM"),c4r=o(" (CamemBERT model)"),f4r=l(),rE=a("li"),tve=a("strong"),m4r=o("ctrl"),g4r=o(" \u2014 "),HH=a("a"),h4r=o("TFCTRLLMHeadModel"),p4r=o(" (CTRL model)"),u4r=l(),tE=a("li"),ave=a("strong"),_4r=o("gpt2"),b4r=o(" \u2014 "),UH=a("a"),v4r=o("TFGPT2LMHeadModel"),F4r=o(" (OpenAI GPT-2 model)"),T4r=l(),aE=a("li"),nve=a("strong"),M4r=o("gptj"),E4r=o(" \u2014 "),JH=a("a"),C4r=o("TFGPTJForCausalLM"),w4r=o(" (GPT-J model)"),A4r=l(),nE=a("li"),sve=a("strong"),y4r=o("openai-gpt"),L4r=o(" \u2014 "),YH=a("a"),x4r=o("TFOpenAIGPTLMHeadModel"),$4r=o(" (OpenAI GPT model)"),k4r=l(),sE=a("li"),lve=a("strong"),S4r=o("opt"),R4r=o(" \u2014 "),KH=a("a"),P4r=o("TFOPTForCausalLM"),B4r=o(" (OPT model)"),I4r=l(),lE=a("li"),ive=a("strong"),N4r=o("rembert"),q4r=o(" \u2014 "),ZH=a("a"),j4r=o("TFRemBertForCausalLM"),D4r=o(" (RemBERT model)"),G4r=l(),iE=a("li"),dve=a("strong"),O4r=o("roberta"),V4r=o(" \u2014 "),eU=a("a"),X4r=o("TFRobertaForCausalLM"),z4r=o(" (RoBERTa model)"),W4r=l(),dE=a("li"),cve=a("strong"),Q4r=o("roformer"),H4r=o(" \u2014 "),oU=a("a"),U4r=o("TFRoFormerForCausalLM"),J4r=o(" (RoFormer model)"),Y4r=l(),cE=a("li"),fve=a("strong"),K4r=o("transfo-xl"),Z4r=o(" \u2014 "),rU=a("a"),evr=o("TFTransfoXLLMHeadModel"),ovr=o(" (Transformer-XL model)"),rvr=l(),fE=a("li"),mve=a("strong"),tvr=o("xlm"),avr=o(" \u2014 "),tU=a("a"),nvr=o("TFXLMWithLMHeadModel"),svr=o(" (XLM model)"),lvr=l(),mE=a("li"),gve=a("strong"),ivr=o("xlnet"),dvr=o(" \u2014 "),aU=a("a"),cvr=o("TFXLNetLMHeadModel"),fvr=o(" (XLNet model)"),mvr=l(),F(gE.$$.fragment),IGe=l(),ic=a("h2"),hE=a("a"),hve=a("span"),F(g9.$$.fragment),gvr=l(),pve=a("span"),hvr=o("TFAutoModelForImageClassification"),NGe=l(),rr=a("div"),F(h9.$$.fragment),pvr=l(),dc=a("p"),uvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nU=a("a"),_vr=o("from_pretrained()"),bvr=o(" class method or the "),sU=a("a"),vvr=o("from_config()"),Fvr=o(` class
method.`),Tvr=l(),p9=a("p"),Mvr=o("This class cannot be instantiated directly using "),uve=a("code"),Evr=o("__init__()"),Cvr=o(" (throws an error)."),wvr=l(),Pt=a("div"),F(u9.$$.fragment),Avr=l(),_ve=a("p"),yvr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lvr=l(),cc=a("p"),xvr=o(`Note:
Loading a model from its configuration file does `),bve=a("strong"),$vr=o("not"),kvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=a("a"),Svr=o("from_pretrained()"),Rvr=o(" to load the model weights."),Pvr=l(),F(pE.$$.fragment),Bvr=l(),$r=a("div"),F(_9.$$.fragment),Ivr=l(),vve=a("p"),Nvr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qvr=l(),ln=a("p"),jvr=o("The model class to instantiate is selected based on the "),Fve=a("code"),Dvr=o("model_type"),Gvr=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),Ovr=o("pretrained_model_name_or_path"),Vvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),Xvr=o("pretrained_model_name_or_path"),zvr=o(":"),Wvr=l(),rt=a("ul"),uE=a("li"),Eve=a("strong"),Qvr=o("convnext"),Hvr=o(" \u2014 "),iU=a("a"),Uvr=o("TFConvNextForImageClassification"),Jvr=o(" (ConvNeXT model)"),Yvr=l(),_E=a("li"),Cve=a("strong"),Kvr=o("data2vec-vision"),Zvr=o(" \u2014 "),dU=a("a"),eFr=o("TFData2VecVisionForImageClassification"),oFr=o(" (Data2VecVision model)"),rFr=l(),bE=a("li"),wve=a("strong"),tFr=o("resnet"),aFr=o(" \u2014 "),cU=a("a"),nFr=o("TFResNetForImageClassification"),sFr=o(" (ResNet model)"),lFr=l(),vE=a("li"),Ave=a("strong"),iFr=o("swin"),dFr=o(" \u2014 "),fU=a("a"),cFr=o("TFSwinForImageClassification"),fFr=o(" (Swin Transformer model)"),mFr=l(),FE=a("li"),yve=a("strong"),gFr=o("vit"),hFr=o(" \u2014 "),mU=a("a"),pFr=o("TFViTForImageClassification"),uFr=o(" (ViT model)"),_Fr=l(),F(TE.$$.fragment),qGe=l(),fc=a("h2"),ME=a("a"),Lve=a("span"),F(b9.$$.fragment),bFr=l(),xve=a("span"),vFr=o("TFAutoModelForMaskedLM"),jGe=l(),tr=a("div"),F(v9.$$.fragment),FFr=l(),mc=a("p"),TFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gU=a("a"),MFr=o("from_pretrained()"),EFr=o(" class method or the "),hU=a("a"),CFr=o("from_config()"),wFr=o(` class
method.`),AFr=l(),F9=a("p"),yFr=o("This class cannot be instantiated directly using "),$ve=a("code"),LFr=o("__init__()"),xFr=o(" (throws an error)."),$Fr=l(),Bt=a("div"),F(T9.$$.fragment),kFr=l(),kve=a("p"),SFr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),RFr=l(),gc=a("p"),PFr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),BFr=o("not"),IFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=a("a"),NFr=o("from_pretrained()"),qFr=o(" to load the model weights."),jFr=l(),F(EE.$$.fragment),DFr=l(),kr=a("div"),F(M9.$$.fragment),GFr=l(),Rve=a("p"),OFr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),VFr=l(),dn=a("p"),XFr=o("The model class to instantiate is selected based on the "),Pve=a("code"),zFr=o("model_type"),WFr=o(` property of the config object (either
passed as an argument or loaded from `),Bve=a("code"),QFr=o("pretrained_model_name_or_path"),HFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),UFr=o("pretrained_model_name_or_path"),JFr=o(":"),YFr=l(),ie=a("ul"),CE=a("li"),Nve=a("strong"),KFr=o("albert"),ZFr=o(" \u2014 "),uU=a("a"),eTr=o("TFAlbertForMaskedLM"),oTr=o(" (ALBERT model)"),rTr=l(),wE=a("li"),qve=a("strong"),tTr=o("bert"),aTr=o(" \u2014 "),_U=a("a"),nTr=o("TFBertForMaskedLM"),sTr=o(" (BERT model)"),lTr=l(),AE=a("li"),jve=a("strong"),iTr=o("camembert"),dTr=o(" \u2014 "),bU=a("a"),cTr=o("TFCamembertForMaskedLM"),fTr=o(" (CamemBERT model)"),mTr=l(),yE=a("li"),Dve=a("strong"),gTr=o("convbert"),hTr=o(" \u2014 "),vU=a("a"),pTr=o("TFConvBertForMaskedLM"),uTr=o(" (ConvBERT model)"),_Tr=l(),LE=a("li"),Gve=a("strong"),bTr=o("deberta"),vTr=o(" \u2014 "),FU=a("a"),FTr=o("TFDebertaForMaskedLM"),TTr=o(" (DeBERTa model)"),MTr=l(),xE=a("li"),Ove=a("strong"),ETr=o("deberta-v2"),CTr=o(" \u2014 "),TU=a("a"),wTr=o("TFDebertaV2ForMaskedLM"),ATr=o(" (DeBERTa-v2 model)"),yTr=l(),$E=a("li"),Vve=a("strong"),LTr=o("distilbert"),xTr=o(" \u2014 "),MU=a("a"),$Tr=o("TFDistilBertForMaskedLM"),kTr=o(" (DistilBERT model)"),STr=l(),kE=a("li"),Xve=a("strong"),RTr=o("electra"),PTr=o(" \u2014 "),EU=a("a"),BTr=o("TFElectraForMaskedLM"),ITr=o(" (ELECTRA model)"),NTr=l(),SE=a("li"),zve=a("strong"),qTr=o("flaubert"),jTr=o(" \u2014 "),CU=a("a"),DTr=o("TFFlaubertWithLMHeadModel"),GTr=o(" (FlauBERT model)"),OTr=l(),RE=a("li"),Wve=a("strong"),VTr=o("funnel"),XTr=o(" \u2014 "),wU=a("a"),zTr=o("TFFunnelForMaskedLM"),WTr=o(" (Funnel Transformer model)"),QTr=l(),PE=a("li"),Qve=a("strong"),HTr=o("layoutlm"),UTr=o(" \u2014 "),AU=a("a"),JTr=o("TFLayoutLMForMaskedLM"),YTr=o(" (LayoutLM model)"),KTr=l(),BE=a("li"),Hve=a("strong"),ZTr=o("longformer"),eMr=o(" \u2014 "),yU=a("a"),oMr=o("TFLongformerForMaskedLM"),rMr=o(" (Longformer model)"),tMr=l(),IE=a("li"),Uve=a("strong"),aMr=o("mobilebert"),nMr=o(" \u2014 "),LU=a("a"),sMr=o("TFMobileBertForMaskedLM"),lMr=o(" (MobileBERT model)"),iMr=l(),NE=a("li"),Jve=a("strong"),dMr=o("mpnet"),cMr=o(" \u2014 "),xU=a("a"),fMr=o("TFMPNetForMaskedLM"),mMr=o(" (MPNet model)"),gMr=l(),qE=a("li"),Yve=a("strong"),hMr=o("rembert"),pMr=o(" \u2014 "),$U=a("a"),uMr=o("TFRemBertForMaskedLM"),_Mr=o(" (RemBERT model)"),bMr=l(),jE=a("li"),Kve=a("strong"),vMr=o("roberta"),FMr=o(" \u2014 "),kU=a("a"),TMr=o("TFRobertaForMaskedLM"),MMr=o(" (RoBERTa model)"),EMr=l(),DE=a("li"),Zve=a("strong"),CMr=o("roformer"),wMr=o(" \u2014 "),SU=a("a"),AMr=o("TFRoFormerForMaskedLM"),yMr=o(" (RoFormer model)"),LMr=l(),GE=a("li"),eFe=a("strong"),xMr=o("tapas"),$Mr=o(" \u2014 "),RU=a("a"),kMr=o("TFTapasForMaskedLM"),SMr=o(" (TAPAS model)"),RMr=l(),OE=a("li"),oFe=a("strong"),PMr=o("xlm"),BMr=o(" \u2014 "),PU=a("a"),IMr=o("TFXLMWithLMHeadModel"),NMr=o(" (XLM model)"),qMr=l(),VE=a("li"),rFe=a("strong"),jMr=o("xlm-roberta"),DMr=o(" \u2014 "),BU=a("a"),GMr=o("TFXLMRobertaForMaskedLM"),OMr=o(" (XLM-RoBERTa model)"),VMr=l(),F(XE.$$.fragment),DGe=l(),hc=a("h2"),zE=a("a"),tFe=a("span"),F(E9.$$.fragment),XMr=l(),aFe=a("span"),zMr=o("TFAutoModelForSeq2SeqLM"),GGe=l(),ar=a("div"),F(C9.$$.fragment),WMr=l(),pc=a("p"),QMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IU=a("a"),HMr=o("from_pretrained()"),UMr=o(" class method or the "),NU=a("a"),JMr=o("from_config()"),YMr=o(` class
method.`),KMr=l(),w9=a("p"),ZMr=o("This class cannot be instantiated directly using "),nFe=a("code"),eEr=o("__init__()"),oEr=o(" (throws an error)."),rEr=l(),It=a("div"),F(A9.$$.fragment),tEr=l(),sFe=a("p"),aEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nEr=l(),uc=a("p"),sEr=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),lEr=o("not"),iEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=a("a"),dEr=o("from_pretrained()"),cEr=o(" to load the model weights."),fEr=l(),F(WE.$$.fragment),mEr=l(),Sr=a("div"),F(y9.$$.fragment),gEr=l(),iFe=a("p"),hEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),pEr=l(),cn=a("p"),uEr=o("The model class to instantiate is selected based on the "),dFe=a("code"),_Er=o("model_type"),bEr=o(` property of the config object (either
passed as an argument or loaded from `),cFe=a("code"),vEr=o("pretrained_model_name_or_path"),FEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),TEr=o("pretrained_model_name_or_path"),MEr=o(":"),EEr=l(),Le=a("ul"),QE=a("li"),mFe=a("strong"),CEr=o("bart"),wEr=o(" \u2014 "),jU=a("a"),AEr=o("TFBartForConditionalGeneration"),yEr=o(" (BART model)"),LEr=l(),HE=a("li"),gFe=a("strong"),xEr=o("blenderbot"),$Er=o(" \u2014 "),DU=a("a"),kEr=o("TFBlenderbotForConditionalGeneration"),SEr=o(" (Blenderbot model)"),REr=l(),UE=a("li"),hFe=a("strong"),PEr=o("blenderbot-small"),BEr=o(" \u2014 "),GU=a("a"),IEr=o("TFBlenderbotSmallForConditionalGeneration"),NEr=o(" (BlenderbotSmall model)"),qEr=l(),JE=a("li"),pFe=a("strong"),jEr=o("encoder-decoder"),DEr=o(" \u2014 "),OU=a("a"),GEr=o("TFEncoderDecoderModel"),OEr=o(" (Encoder decoder model)"),VEr=l(),YE=a("li"),uFe=a("strong"),XEr=o("led"),zEr=o(" \u2014 "),VU=a("a"),WEr=o("TFLEDForConditionalGeneration"),QEr=o(" (LED model)"),HEr=l(),KE=a("li"),_Fe=a("strong"),UEr=o("marian"),JEr=o(" \u2014 "),XU=a("a"),YEr=o("TFMarianMTModel"),KEr=o(" (Marian model)"),ZEr=l(),ZE=a("li"),bFe=a("strong"),eCr=o("mbart"),oCr=o(" \u2014 "),zU=a("a"),rCr=o("TFMBartForConditionalGeneration"),tCr=o(" (mBART model)"),aCr=l(),eC=a("li"),vFe=a("strong"),nCr=o("mt5"),sCr=o(" \u2014 "),WU=a("a"),lCr=o("TFMT5ForConditionalGeneration"),iCr=o(" (MT5 model)"),dCr=l(),oC=a("li"),FFe=a("strong"),cCr=o("pegasus"),fCr=o(" \u2014 "),QU=a("a"),mCr=o("TFPegasusForConditionalGeneration"),gCr=o(" (Pegasus model)"),hCr=l(),rC=a("li"),TFe=a("strong"),pCr=o("t5"),uCr=o(" \u2014 "),HU=a("a"),_Cr=o("TFT5ForConditionalGeneration"),bCr=o(" (T5 model)"),vCr=l(),F(tC.$$.fragment),OGe=l(),_c=a("h2"),aC=a("a"),MFe=a("span"),F(L9.$$.fragment),FCr=l(),EFe=a("span"),TCr=o("TFAutoModelForSequenceClassification"),VGe=l(),nr=a("div"),F(x9.$$.fragment),MCr=l(),bc=a("p"),ECr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=a("a"),CCr=o("from_pretrained()"),wCr=o(" class method or the "),JU=a("a"),ACr=o("from_config()"),yCr=o(` class
method.`),LCr=l(),$9=a("p"),xCr=o("This class cannot be instantiated directly using "),CFe=a("code"),$Cr=o("__init__()"),kCr=o(" (throws an error)."),SCr=l(),Nt=a("div"),F(k9.$$.fragment),RCr=l(),wFe=a("p"),PCr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BCr=l(),vc=a("p"),ICr=o(`Note:
Loading a model from its configuration file does `),AFe=a("strong"),NCr=o("not"),qCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),jCr=o("from_pretrained()"),DCr=o(" to load the model weights."),GCr=l(),F(nC.$$.fragment),OCr=l(),Rr=a("div"),F(S9.$$.fragment),VCr=l(),yFe=a("p"),XCr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zCr=l(),fn=a("p"),WCr=o("The model class to instantiate is selected based on the "),LFe=a("code"),QCr=o("model_type"),HCr=o(` property of the config object (either
passed as an argument or loaded from `),xFe=a("code"),UCr=o("pretrained_model_name_or_path"),JCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(":"),ZCr=l(),re=a("ul"),sC=a("li"),kFe=a("strong"),e5r=o("albert"),o5r=o(" \u2014 "),KU=a("a"),r5r=o("TFAlbertForSequenceClassification"),t5r=o(" (ALBERT model)"),a5r=l(),lC=a("li"),SFe=a("strong"),n5r=o("bert"),s5r=o(" \u2014 "),ZU=a("a"),l5r=o("TFBertForSequenceClassification"),i5r=o(" (BERT model)"),d5r=l(),iC=a("li"),RFe=a("strong"),c5r=o("camembert"),f5r=o(" \u2014 "),eJ=a("a"),m5r=o("TFCamembertForSequenceClassification"),g5r=o(" (CamemBERT model)"),h5r=l(),dC=a("li"),PFe=a("strong"),p5r=o("convbert"),u5r=o(" \u2014 "),oJ=a("a"),_5r=o("TFConvBertForSequenceClassification"),b5r=o(" (ConvBERT model)"),v5r=l(),cC=a("li"),BFe=a("strong"),F5r=o("ctrl"),T5r=o(" \u2014 "),rJ=a("a"),M5r=o("TFCTRLForSequenceClassification"),E5r=o(" (CTRL model)"),C5r=l(),fC=a("li"),IFe=a("strong"),w5r=o("deberta"),A5r=o(" \u2014 "),tJ=a("a"),y5r=o("TFDebertaForSequenceClassification"),L5r=o(" (DeBERTa model)"),x5r=l(),mC=a("li"),NFe=a("strong"),$5r=o("deberta-v2"),k5r=o(" \u2014 "),aJ=a("a"),S5r=o("TFDebertaV2ForSequenceClassification"),R5r=o(" (DeBERTa-v2 model)"),P5r=l(),gC=a("li"),qFe=a("strong"),B5r=o("distilbert"),I5r=o(" \u2014 "),nJ=a("a"),N5r=o("TFDistilBertForSequenceClassification"),q5r=o(" (DistilBERT model)"),j5r=l(),hC=a("li"),jFe=a("strong"),D5r=o("electra"),G5r=o(" \u2014 "),sJ=a("a"),O5r=o("TFElectraForSequenceClassification"),V5r=o(" (ELECTRA model)"),X5r=l(),pC=a("li"),DFe=a("strong"),z5r=o("flaubert"),W5r=o(" \u2014 "),lJ=a("a"),Q5r=o("TFFlaubertForSequenceClassification"),H5r=o(" (FlauBERT model)"),U5r=l(),uC=a("li"),GFe=a("strong"),J5r=o("funnel"),Y5r=o(" \u2014 "),iJ=a("a"),K5r=o("TFFunnelForSequenceClassification"),Z5r=o(" (Funnel Transformer model)"),e3r=l(),_C=a("li"),OFe=a("strong"),o3r=o("gpt2"),r3r=o(" \u2014 "),dJ=a("a"),t3r=o("TFGPT2ForSequenceClassification"),a3r=o(" (OpenAI GPT-2 model)"),n3r=l(),bC=a("li"),VFe=a("strong"),s3r=o("gptj"),l3r=o(" \u2014 "),cJ=a("a"),i3r=o("TFGPTJForSequenceClassification"),d3r=o(" (GPT-J model)"),c3r=l(),vC=a("li"),XFe=a("strong"),f3r=o("layoutlm"),m3r=o(" \u2014 "),fJ=a("a"),g3r=o("TFLayoutLMForSequenceClassification"),h3r=o(" (LayoutLM model)"),p3r=l(),FC=a("li"),zFe=a("strong"),u3r=o("longformer"),_3r=o(" \u2014 "),mJ=a("a"),b3r=o("TFLongformerForSequenceClassification"),v3r=o(" (Longformer model)"),F3r=l(),TC=a("li"),WFe=a("strong"),T3r=o("mobilebert"),M3r=o(" \u2014 "),gJ=a("a"),E3r=o("TFMobileBertForSequenceClassification"),C3r=o(" (MobileBERT model)"),w3r=l(),MC=a("li"),QFe=a("strong"),A3r=o("mpnet"),y3r=o(" \u2014 "),hJ=a("a"),L3r=o("TFMPNetForSequenceClassification"),x3r=o(" (MPNet model)"),$3r=l(),EC=a("li"),HFe=a("strong"),k3r=o("openai-gpt"),S3r=o(" \u2014 "),pJ=a("a"),R3r=o("TFOpenAIGPTForSequenceClassification"),P3r=o(" (OpenAI GPT model)"),B3r=l(),CC=a("li"),UFe=a("strong"),I3r=o("rembert"),N3r=o(" \u2014 "),uJ=a("a"),q3r=o("TFRemBertForSequenceClassification"),j3r=o(" (RemBERT model)"),D3r=l(),wC=a("li"),JFe=a("strong"),G3r=o("roberta"),O3r=o(" \u2014 "),_J=a("a"),V3r=o("TFRobertaForSequenceClassification"),X3r=o(" (RoBERTa model)"),z3r=l(),AC=a("li"),YFe=a("strong"),W3r=o("roformer"),Q3r=o(" \u2014 "),bJ=a("a"),H3r=o("TFRoFormerForSequenceClassification"),U3r=o(" (RoFormer model)"),J3r=l(),yC=a("li"),KFe=a("strong"),Y3r=o("tapas"),K3r=o(" \u2014 "),vJ=a("a"),Z3r=o("TFTapasForSequenceClassification"),e0r=o(" (TAPAS model)"),o0r=l(),LC=a("li"),ZFe=a("strong"),r0r=o("transfo-xl"),t0r=o(" \u2014 "),FJ=a("a"),a0r=o("TFTransfoXLForSequenceClassification"),n0r=o(" (Transformer-XL model)"),s0r=l(),xC=a("li"),eTe=a("strong"),l0r=o("xlm"),i0r=o(" \u2014 "),TJ=a("a"),d0r=o("TFXLMForSequenceClassification"),c0r=o(" (XLM model)"),f0r=l(),$C=a("li"),oTe=a("strong"),m0r=o("xlm-roberta"),g0r=o(" \u2014 "),MJ=a("a"),h0r=o("TFXLMRobertaForSequenceClassification"),p0r=o(" (XLM-RoBERTa model)"),u0r=l(),kC=a("li"),rTe=a("strong"),_0r=o("xlnet"),b0r=o(" \u2014 "),EJ=a("a"),v0r=o("TFXLNetForSequenceClassification"),F0r=o(" (XLNet model)"),T0r=l(),F(SC.$$.fragment),XGe=l(),Fc=a("h2"),RC=a("a"),tTe=a("span"),F(R9.$$.fragment),M0r=l(),aTe=a("span"),E0r=o("TFAutoModelForMultipleChoice"),zGe=l(),sr=a("div"),F(P9.$$.fragment),C0r=l(),Tc=a("p"),w0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CJ=a("a"),A0r=o("from_pretrained()"),y0r=o(" class method or the "),wJ=a("a"),L0r=o("from_config()"),x0r=o(` class
method.`),$0r=l(),B9=a("p"),k0r=o("This class cannot be instantiated directly using "),nTe=a("code"),S0r=o("__init__()"),R0r=o(" (throws an error)."),P0r=l(),qt=a("div"),F(I9.$$.fragment),B0r=l(),sTe=a("p"),I0r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),N0r=l(),Mc=a("p"),q0r=o(`Note:
Loading a model from its configuration file does `),lTe=a("strong"),j0r=o("not"),D0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=a("a"),G0r=o("from_pretrained()"),O0r=o(" to load the model weights."),V0r=l(),F(PC.$$.fragment),X0r=l(),Pr=a("div"),F(N9.$$.fragment),z0r=l(),iTe=a("p"),W0r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Q0r=l(),mn=a("p"),H0r=o("The model class to instantiate is selected based on the "),dTe=a("code"),U0r=o("model_type"),J0r=o(` property of the config object (either
passed as an argument or loaded from `),cTe=a("code"),Y0r=o("pretrained_model_name_or_path"),K0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=a("code"),Z0r=o("pretrained_model_name_or_path"),ewr=o(":"),owr=l(),pe=a("ul"),BC=a("li"),mTe=a("strong"),rwr=o("albert"),twr=o(" \u2014 "),yJ=a("a"),awr=o("TFAlbertForMultipleChoice"),nwr=o(" (ALBERT model)"),swr=l(),IC=a("li"),gTe=a("strong"),lwr=o("bert"),iwr=o(" \u2014 "),LJ=a("a"),dwr=o("TFBertForMultipleChoice"),cwr=o(" (BERT model)"),fwr=l(),NC=a("li"),hTe=a("strong"),mwr=o("camembert"),gwr=o(" \u2014 "),xJ=a("a"),hwr=o("TFCamembertForMultipleChoice"),pwr=o(" (CamemBERT model)"),uwr=l(),qC=a("li"),pTe=a("strong"),_wr=o("convbert"),bwr=o(" \u2014 "),$J=a("a"),vwr=o("TFConvBertForMultipleChoice"),Fwr=o(" (ConvBERT model)"),Twr=l(),jC=a("li"),uTe=a("strong"),Mwr=o("distilbert"),Ewr=o(" \u2014 "),kJ=a("a"),Cwr=o("TFDistilBertForMultipleChoice"),wwr=o(" (DistilBERT model)"),Awr=l(),DC=a("li"),_Te=a("strong"),ywr=o("electra"),Lwr=o(" \u2014 "),SJ=a("a"),xwr=o("TFElectraForMultipleChoice"),$wr=o(" (ELECTRA model)"),kwr=l(),GC=a("li"),bTe=a("strong"),Swr=o("flaubert"),Rwr=o(" \u2014 "),RJ=a("a"),Pwr=o("TFFlaubertForMultipleChoice"),Bwr=o(" (FlauBERT model)"),Iwr=l(),OC=a("li"),vTe=a("strong"),Nwr=o("funnel"),qwr=o(" \u2014 "),PJ=a("a"),jwr=o("TFFunnelForMultipleChoice"),Dwr=o(" (Funnel Transformer model)"),Gwr=l(),VC=a("li"),FTe=a("strong"),Owr=o("longformer"),Vwr=o(" \u2014 "),BJ=a("a"),Xwr=o("TFLongformerForMultipleChoice"),zwr=o(" (Longformer model)"),Wwr=l(),XC=a("li"),TTe=a("strong"),Qwr=o("mobilebert"),Hwr=o(" \u2014 "),IJ=a("a"),Uwr=o("TFMobileBertForMultipleChoice"),Jwr=o(" (MobileBERT model)"),Ywr=l(),zC=a("li"),MTe=a("strong"),Kwr=o("mpnet"),Zwr=o(" \u2014 "),NJ=a("a"),eAr=o("TFMPNetForMultipleChoice"),oAr=o(" (MPNet model)"),rAr=l(),WC=a("li"),ETe=a("strong"),tAr=o("rembert"),aAr=o(" \u2014 "),qJ=a("a"),nAr=o("TFRemBertForMultipleChoice"),sAr=o(" (RemBERT model)"),lAr=l(),QC=a("li"),CTe=a("strong"),iAr=o("roberta"),dAr=o(" \u2014 "),jJ=a("a"),cAr=o("TFRobertaForMultipleChoice"),fAr=o(" (RoBERTa model)"),mAr=l(),HC=a("li"),wTe=a("strong"),gAr=o("roformer"),hAr=o(" \u2014 "),DJ=a("a"),pAr=o("TFRoFormerForMultipleChoice"),uAr=o(" (RoFormer model)"),_Ar=l(),UC=a("li"),ATe=a("strong"),bAr=o("xlm"),vAr=o(" \u2014 "),GJ=a("a"),FAr=o("TFXLMForMultipleChoice"),TAr=o(" (XLM model)"),MAr=l(),JC=a("li"),yTe=a("strong"),EAr=o("xlm-roberta"),CAr=o(" \u2014 "),OJ=a("a"),wAr=o("TFXLMRobertaForMultipleChoice"),AAr=o(" (XLM-RoBERTa model)"),yAr=l(),YC=a("li"),LTe=a("strong"),LAr=o("xlnet"),xAr=o(" \u2014 "),VJ=a("a"),$Ar=o("TFXLNetForMultipleChoice"),kAr=o(" (XLNet model)"),SAr=l(),F(KC.$$.fragment),WGe=l(),Ec=a("h2"),ZC=a("a"),xTe=a("span"),F(q9.$$.fragment),RAr=l(),$Te=a("span"),PAr=o("TFAutoModelForNextSentencePrediction"),QGe=l(),lr=a("div"),F(j9.$$.fragment),BAr=l(),Cc=a("p"),IAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XJ=a("a"),NAr=o("from_pretrained()"),qAr=o(" class method or the "),zJ=a("a"),jAr=o("from_config()"),DAr=o(` class
method.`),GAr=l(),D9=a("p"),OAr=o("This class cannot be instantiated directly using "),kTe=a("code"),VAr=o("__init__()"),XAr=o(" (throws an error)."),zAr=l(),jt=a("div"),F(G9.$$.fragment),WAr=l(),STe=a("p"),QAr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),HAr=l(),wc=a("p"),UAr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),JAr=o("not"),YAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),KAr=o("from_pretrained()"),ZAr=o(" to load the model weights."),e6r=l(),F(e5.$$.fragment),o6r=l(),Br=a("div"),F(O9.$$.fragment),r6r=l(),PTe=a("p"),t6r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),a6r=l(),gn=a("p"),n6r=o("The model class to instantiate is selected based on the "),BTe=a("code"),s6r=o("model_type"),l6r=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),c6r=o("pretrained_model_name_or_path"),f6r=o(":"),m6r=l(),V9=a("ul"),o5=a("li"),qTe=a("strong"),g6r=o("bert"),h6r=o(" \u2014 "),QJ=a("a"),p6r=o("TFBertForNextSentencePrediction"),u6r=o(" (BERT model)"),_6r=l(),r5=a("li"),jTe=a("strong"),b6r=o("mobilebert"),v6r=o(" \u2014 "),HJ=a("a"),F6r=o("TFMobileBertForNextSentencePrediction"),T6r=o(" (MobileBERT model)"),M6r=l(),F(t5.$$.fragment),HGe=l(),Ac=a("h2"),a5=a("a"),DTe=a("span"),F(X9.$$.fragment),E6r=l(),GTe=a("span"),C6r=o("TFAutoModelForTableQuestionAnswering"),UGe=l(),ir=a("div"),F(z9.$$.fragment),w6r=l(),yc=a("p"),A6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UJ=a("a"),y6r=o("from_pretrained()"),L6r=o(" class method or the "),JJ=a("a"),x6r=o("from_config()"),$6r=o(` class
method.`),k6r=l(),W9=a("p"),S6r=o("This class cannot be instantiated directly using "),OTe=a("code"),R6r=o("__init__()"),P6r=o(" (throws an error)."),B6r=l(),Dt=a("div"),F(Q9.$$.fragment),I6r=l(),VTe=a("p"),N6r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),q6r=l(),Lc=a("p"),j6r=o(`Note:
Loading a model from its configuration file does `),XTe=a("strong"),D6r=o("not"),G6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=a("a"),O6r=o("from_pretrained()"),V6r=o(" to load the model weights."),X6r=l(),F(n5.$$.fragment),z6r=l(),Ir=a("div"),F(H9.$$.fragment),W6r=l(),zTe=a("p"),Q6r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),H6r=l(),hn=a("p"),U6r=o("The model class to instantiate is selected based on the "),WTe=a("code"),J6r=o("model_type"),Y6r=o(` property of the config object (either
passed as an argument or loaded from `),QTe=a("code"),K6r=o("pretrained_model_name_or_path"),Z6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=a("code"),eyr=o("pretrained_model_name_or_path"),oyr=o(":"),ryr=l(),UTe=a("ul"),s5=a("li"),JTe=a("strong"),tyr=o("tapas"),ayr=o(" \u2014 "),KJ=a("a"),nyr=o("TFTapasForQuestionAnswering"),syr=o(" (TAPAS model)"),lyr=l(),F(l5.$$.fragment),JGe=l(),xc=a("h2"),i5=a("a"),YTe=a("span"),F(U9.$$.fragment),iyr=l(),KTe=a("span"),dyr=o("TFAutoModelForTokenClassification"),YGe=l(),dr=a("div"),F(J9.$$.fragment),cyr=l(),$c=a("p"),fyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZJ=a("a"),myr=o("from_pretrained()"),gyr=o(" class method or the "),eY=a("a"),hyr=o("from_config()"),pyr=o(` class
method.`),uyr=l(),Y9=a("p"),_yr=o("This class cannot be instantiated directly using "),ZTe=a("code"),byr=o("__init__()"),vyr=o(" (throws an error)."),Fyr=l(),Gt=a("div"),F(K9.$$.fragment),Tyr=l(),eMe=a("p"),Myr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Eyr=l(),kc=a("p"),Cyr=o(`Note:
Loading a model from its configuration file does `),oMe=a("strong"),wyr=o("not"),Ayr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),yyr=o("from_pretrained()"),Lyr=o(" to load the model weights."),xyr=l(),F(d5.$$.fragment),$yr=l(),Nr=a("div"),F(Z9.$$.fragment),kyr=l(),rMe=a("p"),Syr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ryr=l(),pn=a("p"),Pyr=o("The model class to instantiate is selected based on the "),tMe=a("code"),Byr=o("model_type"),Iyr=o(` property of the config object (either
passed as an argument or loaded from `),aMe=a("code"),Nyr=o("pretrained_model_name_or_path"),qyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=a("code"),jyr=o("pretrained_model_name_or_path"),Dyr=o(":"),Gyr=l(),de=a("ul"),c5=a("li"),sMe=a("strong"),Oyr=o("albert"),Vyr=o(" \u2014 "),rY=a("a"),Xyr=o("TFAlbertForTokenClassification"),zyr=o(" (ALBERT model)"),Wyr=l(),f5=a("li"),lMe=a("strong"),Qyr=o("bert"),Hyr=o(" \u2014 "),tY=a("a"),Uyr=o("TFBertForTokenClassification"),Jyr=o(" (BERT model)"),Yyr=l(),m5=a("li"),iMe=a("strong"),Kyr=o("camembert"),Zyr=o(" \u2014 "),aY=a("a"),eLr=o("TFCamembertForTokenClassification"),oLr=o(" (CamemBERT model)"),rLr=l(),g5=a("li"),dMe=a("strong"),tLr=o("convbert"),aLr=o(" \u2014 "),nY=a("a"),nLr=o("TFConvBertForTokenClassification"),sLr=o(" (ConvBERT model)"),lLr=l(),h5=a("li"),cMe=a("strong"),iLr=o("deberta"),dLr=o(" \u2014 "),sY=a("a"),cLr=o("TFDebertaForTokenClassification"),fLr=o(" (DeBERTa model)"),mLr=l(),p5=a("li"),fMe=a("strong"),gLr=o("deberta-v2"),hLr=o(" \u2014 "),lY=a("a"),pLr=o("TFDebertaV2ForTokenClassification"),uLr=o(" (DeBERTa-v2 model)"),_Lr=l(),u5=a("li"),mMe=a("strong"),bLr=o("distilbert"),vLr=o(" \u2014 "),iY=a("a"),FLr=o("TFDistilBertForTokenClassification"),TLr=o(" (DistilBERT model)"),MLr=l(),_5=a("li"),gMe=a("strong"),ELr=o("electra"),CLr=o(" \u2014 "),dY=a("a"),wLr=o("TFElectraForTokenClassification"),ALr=o(" (ELECTRA model)"),yLr=l(),b5=a("li"),hMe=a("strong"),LLr=o("flaubert"),xLr=o(" \u2014 "),cY=a("a"),$Lr=o("TFFlaubertForTokenClassification"),kLr=o(" (FlauBERT model)"),SLr=l(),v5=a("li"),pMe=a("strong"),RLr=o("funnel"),PLr=o(" \u2014 "),fY=a("a"),BLr=o("TFFunnelForTokenClassification"),ILr=o(" (Funnel Transformer model)"),NLr=l(),F5=a("li"),uMe=a("strong"),qLr=o("layoutlm"),jLr=o(" \u2014 "),mY=a("a"),DLr=o("TFLayoutLMForTokenClassification"),GLr=o(" (LayoutLM model)"),OLr=l(),T5=a("li"),_Me=a("strong"),VLr=o("longformer"),XLr=o(" \u2014 "),gY=a("a"),zLr=o("TFLongformerForTokenClassification"),WLr=o(" (Longformer model)"),QLr=l(),M5=a("li"),bMe=a("strong"),HLr=o("mobilebert"),ULr=o(" \u2014 "),hY=a("a"),JLr=o("TFMobileBertForTokenClassification"),YLr=o(" (MobileBERT model)"),KLr=l(),E5=a("li"),vMe=a("strong"),ZLr=o("mpnet"),e8r=o(" \u2014 "),pY=a("a"),o8r=o("TFMPNetForTokenClassification"),r8r=o(" (MPNet model)"),t8r=l(),C5=a("li"),FMe=a("strong"),a8r=o("rembert"),n8r=o(" \u2014 "),uY=a("a"),s8r=o("TFRemBertForTokenClassification"),l8r=o(" (RemBERT model)"),i8r=l(),w5=a("li"),TMe=a("strong"),d8r=o("roberta"),c8r=o(" \u2014 "),_Y=a("a"),f8r=o("TFRobertaForTokenClassification"),m8r=o(" (RoBERTa model)"),g8r=l(),A5=a("li"),MMe=a("strong"),h8r=o("roformer"),p8r=o(" \u2014 "),bY=a("a"),u8r=o("TFRoFormerForTokenClassification"),_8r=o(" (RoFormer model)"),b8r=l(),y5=a("li"),EMe=a("strong"),v8r=o("xlm"),F8r=o(" \u2014 "),vY=a("a"),T8r=o("TFXLMForTokenClassification"),M8r=o(" (XLM model)"),E8r=l(),L5=a("li"),CMe=a("strong"),C8r=o("xlm-roberta"),w8r=o(" \u2014 "),FY=a("a"),A8r=o("TFXLMRobertaForTokenClassification"),y8r=o(" (XLM-RoBERTa model)"),L8r=l(),x5=a("li"),wMe=a("strong"),x8r=o("xlnet"),$8r=o(" \u2014 "),TY=a("a"),k8r=o("TFXLNetForTokenClassification"),S8r=o(" (XLNet model)"),R8r=l(),F($5.$$.fragment),KGe=l(),Sc=a("h2"),k5=a("a"),AMe=a("span"),F(ex.$$.fragment),P8r=l(),yMe=a("span"),B8r=o("TFAutoModelForQuestionAnswering"),ZGe=l(),cr=a("div"),F(ox.$$.fragment),I8r=l(),Rc=a("p"),N8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MY=a("a"),q8r=o("from_pretrained()"),j8r=o(" class method or the "),EY=a("a"),D8r=o("from_config()"),G8r=o(` class
method.`),O8r=l(),rx=a("p"),V8r=o("This class cannot be instantiated directly using "),LMe=a("code"),X8r=o("__init__()"),z8r=o(" (throws an error)."),W8r=l(),Ot=a("div"),F(tx.$$.fragment),Q8r=l(),xMe=a("p"),H8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),U8r=l(),Pc=a("p"),J8r=o(`Note:
Loading a model from its configuration file does `),$Me=a("strong"),Y8r=o("not"),K8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=a("a"),Z8r=o("from_pretrained()"),e9r=o(" to load the model weights."),o9r=l(),F(S5.$$.fragment),r9r=l(),qr=a("div"),F(ax.$$.fragment),t9r=l(),kMe=a("p"),a9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),n9r=l(),un=a("p"),s9r=o("The model class to instantiate is selected based on the "),SMe=a("code"),l9r=o("model_type"),i9r=o(` property of the config object (either
passed as an argument or loaded from `),RMe=a("code"),d9r=o("pretrained_model_name_or_path"),c9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),f9r=o("pretrained_model_name_or_path"),m9r=o(":"),g9r=l(),ce=a("ul"),R5=a("li"),BMe=a("strong"),h9r=o("albert"),p9r=o(" \u2014 "),wY=a("a"),u9r=o("TFAlbertForQuestionAnswering"),_9r=o(" (ALBERT model)"),b9r=l(),P5=a("li"),IMe=a("strong"),v9r=o("bert"),F9r=o(" \u2014 "),AY=a("a"),T9r=o("TFBertForQuestionAnswering"),M9r=o(" (BERT model)"),E9r=l(),B5=a("li"),NMe=a("strong"),C9r=o("camembert"),w9r=o(" \u2014 "),yY=a("a"),A9r=o("TFCamembertForQuestionAnswering"),y9r=o(" (CamemBERT model)"),L9r=l(),I5=a("li"),qMe=a("strong"),x9r=o("convbert"),$9r=o(" \u2014 "),LY=a("a"),k9r=o("TFConvBertForQuestionAnswering"),S9r=o(" (ConvBERT model)"),R9r=l(),N5=a("li"),jMe=a("strong"),P9r=o("deberta"),B9r=o(" \u2014 "),xY=a("a"),I9r=o("TFDebertaForQuestionAnswering"),N9r=o(" (DeBERTa model)"),q9r=l(),q5=a("li"),DMe=a("strong"),j9r=o("deberta-v2"),D9r=o(" \u2014 "),$Y=a("a"),G9r=o("TFDebertaV2ForQuestionAnswering"),O9r=o(" (DeBERTa-v2 model)"),V9r=l(),j5=a("li"),GMe=a("strong"),X9r=o("distilbert"),z9r=o(" \u2014 "),kY=a("a"),W9r=o("TFDistilBertForQuestionAnswering"),Q9r=o(" (DistilBERT model)"),H9r=l(),D5=a("li"),OMe=a("strong"),U9r=o("electra"),J9r=o(" \u2014 "),SY=a("a"),Y9r=o("TFElectraForQuestionAnswering"),K9r=o(" (ELECTRA model)"),Z9r=l(),G5=a("li"),VMe=a("strong"),exr=o("flaubert"),oxr=o(" \u2014 "),RY=a("a"),rxr=o("TFFlaubertForQuestionAnsweringSimple"),txr=o(" (FlauBERT model)"),axr=l(),O5=a("li"),XMe=a("strong"),nxr=o("funnel"),sxr=o(" \u2014 "),PY=a("a"),lxr=o("TFFunnelForQuestionAnswering"),ixr=o(" (Funnel Transformer model)"),dxr=l(),V5=a("li"),zMe=a("strong"),cxr=o("gptj"),fxr=o(" \u2014 "),BY=a("a"),mxr=o("TFGPTJForQuestionAnswering"),gxr=o(" (GPT-J model)"),hxr=l(),X5=a("li"),WMe=a("strong"),pxr=o("longformer"),uxr=o(" \u2014 "),IY=a("a"),_xr=o("TFLongformerForQuestionAnswering"),bxr=o(" (Longformer model)"),vxr=l(),z5=a("li"),QMe=a("strong"),Fxr=o("mobilebert"),Txr=o(" \u2014 "),NY=a("a"),Mxr=o("TFMobileBertForQuestionAnswering"),Exr=o(" (MobileBERT model)"),Cxr=l(),W5=a("li"),HMe=a("strong"),wxr=o("mpnet"),Axr=o(" \u2014 "),qY=a("a"),yxr=o("TFMPNetForQuestionAnswering"),Lxr=o(" (MPNet model)"),xxr=l(),Q5=a("li"),UMe=a("strong"),$xr=o("rembert"),kxr=o(" \u2014 "),jY=a("a"),Sxr=o("TFRemBertForQuestionAnswering"),Rxr=o(" (RemBERT model)"),Pxr=l(),H5=a("li"),JMe=a("strong"),Bxr=o("roberta"),Ixr=o(" \u2014 "),DY=a("a"),Nxr=o("TFRobertaForQuestionAnswering"),qxr=o(" (RoBERTa model)"),jxr=l(),U5=a("li"),YMe=a("strong"),Dxr=o("roformer"),Gxr=o(" \u2014 "),GY=a("a"),Oxr=o("TFRoFormerForQuestionAnswering"),Vxr=o(" (RoFormer model)"),Xxr=l(),J5=a("li"),KMe=a("strong"),zxr=o("xlm"),Wxr=o(" \u2014 "),OY=a("a"),Qxr=o("TFXLMForQuestionAnsweringSimple"),Hxr=o(" (XLM model)"),Uxr=l(),Y5=a("li"),ZMe=a("strong"),Jxr=o("xlm-roberta"),Yxr=o(" \u2014 "),VY=a("a"),Kxr=o("TFXLMRobertaForQuestionAnswering"),Zxr=o(" (XLM-RoBERTa model)"),e$r=l(),K5=a("li"),eEe=a("strong"),o$r=o("xlnet"),r$r=o(" \u2014 "),XY=a("a"),t$r=o("TFXLNetForQuestionAnsweringSimple"),a$r=o(" (XLNet model)"),n$r=l(),F(Z5.$$.fragment),eOe=l(),Bc=a("h2"),e3=a("a"),oEe=a("span"),F(nx.$$.fragment),s$r=l(),rEe=a("span"),l$r=o("TFAutoModelForVision2Seq"),oOe=l(),fr=a("div"),F(sx.$$.fragment),i$r=l(),Ic=a("p"),d$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zY=a("a"),c$r=o("from_pretrained()"),f$r=o(" class method or the "),WY=a("a"),m$r=o("from_config()"),g$r=o(` class
method.`),h$r=l(),lx=a("p"),p$r=o("This class cannot be instantiated directly using "),tEe=a("code"),u$r=o("__init__()"),_$r=o(" (throws an error)."),b$r=l(),Vt=a("div"),F(ix.$$.fragment),v$r=l(),aEe=a("p"),F$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),T$r=l(),Nc=a("p"),M$r=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),E$r=o("not"),C$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=a("a"),w$r=o("from_pretrained()"),A$r=o(" to load the model weights."),y$r=l(),F(o3.$$.fragment),L$r=l(),jr=a("div"),F(dx.$$.fragment),x$r=l(),sEe=a("p"),$$r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),k$r=l(),_n=a("p"),S$r=o("The model class to instantiate is selected based on the "),lEe=a("code"),R$r=o("model_type"),P$r=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),B$r=o("pretrained_model_name_or_path"),I$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),N$r=o("pretrained_model_name_or_path"),q$r=o(":"),j$r=l(),cEe=a("ul"),r3=a("li"),fEe=a("strong"),D$r=o("vision-encoder-decoder"),G$r=o(" \u2014 "),HY=a("a"),O$r=o("TFVisionEncoderDecoderModel"),V$r=o(" (Vision Encoder decoder model)"),X$r=l(),F(t3.$$.fragment),rOe=l(),qc=a("h2"),a3=a("a"),mEe=a("span"),F(cx.$$.fragment),z$r=l(),gEe=a("span"),W$r=o("TFAutoModelForSpeechSeq2Seq"),tOe=l(),mr=a("div"),F(fx.$$.fragment),Q$r=l(),jc=a("p"),H$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UY=a("a"),U$r=o("from_pretrained()"),J$r=o(" class method or the "),JY=a("a"),Y$r=o("from_config()"),K$r=o(` class
method.`),Z$r=l(),mx=a("p"),ekr=o("This class cannot be instantiated directly using "),hEe=a("code"),okr=o("__init__()"),rkr=o(" (throws an error)."),tkr=l(),Xt=a("div"),F(gx.$$.fragment),akr=l(),pEe=a("p"),nkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),skr=l(),Dc=a("p"),lkr=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),ikr=o("not"),dkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=a("a"),ckr=o("from_pretrained()"),fkr=o(" to load the model weights."),mkr=l(),F(n3.$$.fragment),gkr=l(),Dr=a("div"),F(hx.$$.fragment),hkr=l(),_Ee=a("p"),pkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),ukr=l(),bn=a("p"),_kr=o("The model class to instantiate is selected based on the "),bEe=a("code"),bkr=o("model_type"),vkr=o(` property of the config object (either
passed as an argument or loaded from `),vEe=a("code"),Fkr=o("pretrained_model_name_or_path"),Tkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=a("code"),Mkr=o("pretrained_model_name_or_path"),Ekr=o(":"),Ckr=l(),TEe=a("ul"),s3=a("li"),MEe=a("strong"),wkr=o("speech_to_text"),Akr=o(" \u2014 "),KY=a("a"),ykr=o("TFSpeech2TextForConditionalGeneration"),Lkr=o(" (Speech2Text model)"),xkr=l(),F(l3.$$.fragment),aOe=l(),Gc=a("h2"),i3=a("a"),EEe=a("span"),F(px.$$.fragment),$kr=l(),CEe=a("span"),kkr=o("FlaxAutoModel"),nOe=l(),gr=a("div"),F(ux.$$.fragment),Skr=l(),Oc=a("p"),Rkr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZY=a("a"),Pkr=o("from_pretrained()"),Bkr=o(" class method or the "),eK=a("a"),Ikr=o("from_config()"),Nkr=o(` class
method.`),qkr=l(),_x=a("p"),jkr=o("This class cannot be instantiated directly using "),wEe=a("code"),Dkr=o("__init__()"),Gkr=o(" (throws an error)."),Okr=l(),zt=a("div"),F(bx.$$.fragment),Vkr=l(),AEe=a("p"),Xkr=o("Instantiates one of the base model classes of the library from a configuration."),zkr=l(),Vc=a("p"),Wkr=o(`Note:
Loading a model from its configuration file does `),yEe=a("strong"),Qkr=o("not"),Hkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=a("a"),Ukr=o("from_pretrained()"),Jkr=o(" to load the model weights."),Ykr=l(),F(d3.$$.fragment),Kkr=l(),Gr=a("div"),F(vx.$$.fragment),Zkr=l(),LEe=a("p"),eSr=o("Instantiate one of the base model classes of the library from a pretrained model."),oSr=l(),vn=a("p"),rSr=o("The model class to instantiate is selected based on the "),xEe=a("code"),tSr=o("model_type"),aSr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),nSr=o("pretrained_model_name_or_path"),sSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),lSr=o("pretrained_model_name_or_path"),iSr=o(":"),dSr=l(),te=a("ul"),c3=a("li"),SEe=a("strong"),cSr=o("albert"),fSr=o(" \u2014 "),rK=a("a"),mSr=o("FlaxAlbertModel"),gSr=o(" (ALBERT model)"),hSr=l(),f3=a("li"),REe=a("strong"),pSr=o("bart"),uSr=o(" \u2014 "),tK=a("a"),_Sr=o("FlaxBartModel"),bSr=o(" (BART model)"),vSr=l(),m3=a("li"),PEe=a("strong"),FSr=o("beit"),TSr=o(" \u2014 "),aK=a("a"),MSr=o("FlaxBeitModel"),ESr=o(" (BEiT model)"),CSr=l(),g3=a("li"),BEe=a("strong"),wSr=o("bert"),ASr=o(" \u2014 "),nK=a("a"),ySr=o("FlaxBertModel"),LSr=o(" (BERT model)"),xSr=l(),h3=a("li"),IEe=a("strong"),$Sr=o("big_bird"),kSr=o(" \u2014 "),sK=a("a"),SSr=o("FlaxBigBirdModel"),RSr=o(" (BigBird model)"),PSr=l(),p3=a("li"),NEe=a("strong"),BSr=o("blenderbot"),ISr=o(" \u2014 "),lK=a("a"),NSr=o("FlaxBlenderbotModel"),qSr=o(" (Blenderbot model)"),jSr=l(),u3=a("li"),qEe=a("strong"),DSr=o("blenderbot-small"),GSr=o(" \u2014 "),iK=a("a"),OSr=o("FlaxBlenderbotSmallModel"),VSr=o(" (BlenderbotSmall model)"),XSr=l(),_3=a("li"),jEe=a("strong"),zSr=o("clip"),WSr=o(" \u2014 "),dK=a("a"),QSr=o("FlaxCLIPModel"),HSr=o(" (CLIP model)"),USr=l(),b3=a("li"),DEe=a("strong"),JSr=o("distilbert"),YSr=o(" \u2014 "),cK=a("a"),KSr=o("FlaxDistilBertModel"),ZSr=o(" (DistilBERT model)"),eRr=l(),v3=a("li"),GEe=a("strong"),oRr=o("electra"),rRr=o(" \u2014 "),fK=a("a"),tRr=o("FlaxElectraModel"),aRr=o(" (ELECTRA model)"),nRr=l(),F3=a("li"),OEe=a("strong"),sRr=o("gpt2"),lRr=o(" \u2014 "),mK=a("a"),iRr=o("FlaxGPT2Model"),dRr=o(" (OpenAI GPT-2 model)"),cRr=l(),T3=a("li"),VEe=a("strong"),fRr=o("gpt_neo"),mRr=o(" \u2014 "),gK=a("a"),gRr=o("FlaxGPTNeoModel"),hRr=o(" (GPT Neo model)"),pRr=l(),M3=a("li"),XEe=a("strong"),uRr=o("gptj"),_Rr=o(" \u2014 "),hK=a("a"),bRr=o("FlaxGPTJModel"),vRr=o(" (GPT-J model)"),FRr=l(),E3=a("li"),zEe=a("strong"),TRr=o("marian"),MRr=o(" \u2014 "),pK=a("a"),ERr=o("FlaxMarianModel"),CRr=o(" (Marian model)"),wRr=l(),C3=a("li"),WEe=a("strong"),ARr=o("mbart"),yRr=o(" \u2014 "),uK=a("a"),LRr=o("FlaxMBartModel"),xRr=o(" (mBART model)"),$Rr=l(),w3=a("li"),QEe=a("strong"),kRr=o("mt5"),SRr=o(" \u2014 "),_K=a("a"),RRr=o("FlaxMT5Model"),PRr=o(" (MT5 model)"),BRr=l(),A3=a("li"),HEe=a("strong"),IRr=o("opt"),NRr=o(" \u2014 "),bK=a("a"),qRr=o("FlaxOPTModel"),jRr=o(" (OPT model)"),DRr=l(),y3=a("li"),UEe=a("strong"),GRr=o("pegasus"),ORr=o(" \u2014 "),vK=a("a"),VRr=o("FlaxPegasusModel"),XRr=o(" (Pegasus model)"),zRr=l(),L3=a("li"),JEe=a("strong"),WRr=o("roberta"),QRr=o(" \u2014 "),FK=a("a"),HRr=o("FlaxRobertaModel"),URr=o(" (RoBERTa model)"),JRr=l(),x3=a("li"),YEe=a("strong"),YRr=o("roformer"),KRr=o(" \u2014 "),TK=a("a"),ZRr=o("FlaxRoFormerModel"),ePr=o(" (RoFormer model)"),oPr=l(),$3=a("li"),KEe=a("strong"),rPr=o("t5"),tPr=o(" \u2014 "),MK=a("a"),aPr=o("FlaxT5Model"),nPr=o(" (T5 model)"),sPr=l(),k3=a("li"),ZEe=a("strong"),lPr=o("vision-text-dual-encoder"),iPr=o(" \u2014 "),EK=a("a"),dPr=o("FlaxVisionTextDualEncoderModel"),cPr=o(" (VisionTextDualEncoder model)"),fPr=l(),S3=a("li"),eCe=a("strong"),mPr=o("vit"),gPr=o(" \u2014 "),CK=a("a"),hPr=o("FlaxViTModel"),pPr=o(" (ViT model)"),uPr=l(),R3=a("li"),oCe=a("strong"),_Pr=o("wav2vec2"),bPr=o(" \u2014 "),wK=a("a"),vPr=o("FlaxWav2Vec2Model"),FPr=o(" (Wav2Vec2 model)"),TPr=l(),P3=a("li"),rCe=a("strong"),MPr=o("xglm"),EPr=o(" \u2014 "),AK=a("a"),CPr=o("FlaxXGLMModel"),wPr=o(" (XGLM model)"),APr=l(),B3=a("li"),tCe=a("strong"),yPr=o("xlm-roberta"),LPr=o(" \u2014 "),yK=a("a"),xPr=o("FlaxXLMRobertaModel"),$Pr=o(" (XLM-RoBERTa model)"),kPr=l(),F(I3.$$.fragment),sOe=l(),Xc=a("h2"),N3=a("a"),aCe=a("span"),F(Fx.$$.fragment),SPr=l(),nCe=a("span"),RPr=o("FlaxAutoModelForCausalLM"),lOe=l(),hr=a("div"),F(Tx.$$.fragment),PPr=l(),zc=a("p"),BPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LK=a("a"),IPr=o("from_pretrained()"),NPr=o(" class method or the "),xK=a("a"),qPr=o("from_config()"),jPr=o(` class
method.`),DPr=l(),Mx=a("p"),GPr=o("This class cannot be instantiated directly using "),sCe=a("code"),OPr=o("__init__()"),VPr=o(" (throws an error)."),XPr=l(),Wt=a("div"),F(Ex.$$.fragment),zPr=l(),lCe=a("p"),WPr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),QPr=l(),Wc=a("p"),HPr=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),UPr=o("not"),JPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=a("a"),YPr=o("from_pretrained()"),KPr=o(" to load the model weights."),ZPr=l(),F(q3.$$.fragment),eBr=l(),Or=a("div"),F(Cx.$$.fragment),oBr=l(),dCe=a("p"),rBr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),tBr=l(),Fn=a("p"),aBr=o("The model class to instantiate is selected based on the "),cCe=a("code"),nBr=o("model_type"),sBr=o(` property of the config object (either
passed as an argument or loaded from `),fCe=a("code"),lBr=o("pretrained_model_name_or_path"),iBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),dBr=o("pretrained_model_name_or_path"),cBr=o(":"),fBr=l(),xe=a("ul"),j3=a("li"),gCe=a("strong"),mBr=o("bart"),gBr=o(" \u2014 "),kK=a("a"),hBr=o("FlaxBartForCausalLM"),pBr=o(" (BART model)"),uBr=l(),D3=a("li"),hCe=a("strong"),_Br=o("bert"),bBr=o(" \u2014 "),SK=a("a"),vBr=o("FlaxBertForCausalLM"),FBr=o(" (BERT model)"),TBr=l(),G3=a("li"),pCe=a("strong"),MBr=o("big_bird"),EBr=o(" \u2014 "),RK=a("a"),CBr=o("FlaxBigBirdForCausalLM"),wBr=o(" (BigBird model)"),ABr=l(),O3=a("li"),uCe=a("strong"),yBr=o("electra"),LBr=o(" \u2014 "),PK=a("a"),xBr=o("FlaxElectraForCausalLM"),$Br=o(" (ELECTRA model)"),kBr=l(),V3=a("li"),_Ce=a("strong"),SBr=o("gpt2"),RBr=o(" \u2014 "),BK=a("a"),PBr=o("FlaxGPT2LMHeadModel"),BBr=o(" (OpenAI GPT-2 model)"),IBr=l(),X3=a("li"),bCe=a("strong"),NBr=o("gpt_neo"),qBr=o(" \u2014 "),IK=a("a"),jBr=o("FlaxGPTNeoForCausalLM"),DBr=o(" (GPT Neo model)"),GBr=l(),z3=a("li"),vCe=a("strong"),OBr=o("gptj"),VBr=o(" \u2014 "),NK=a("a"),XBr=o("FlaxGPTJForCausalLM"),zBr=o(" (GPT-J model)"),WBr=l(),W3=a("li"),FCe=a("strong"),QBr=o("opt"),HBr=o(" \u2014 "),qK=a("a"),UBr=o("FlaxOPTForCausalLM"),JBr=o(" (OPT model)"),YBr=l(),Q3=a("li"),TCe=a("strong"),KBr=o("roberta"),ZBr=o(" \u2014 "),jK=a("a"),eIr=o("FlaxRobertaForCausalLM"),oIr=o(" (RoBERTa model)"),rIr=l(),H3=a("li"),MCe=a("strong"),tIr=o("xglm"),aIr=o(" \u2014 "),DK=a("a"),nIr=o("FlaxXGLMForCausalLM"),sIr=o(" (XGLM model)"),lIr=l(),F(U3.$$.fragment),iOe=l(),Qc=a("h2"),J3=a("a"),ECe=a("span"),F(wx.$$.fragment),iIr=l(),CCe=a("span"),dIr=o("FlaxAutoModelForPreTraining"),dOe=l(),pr=a("div"),F(Ax.$$.fragment),cIr=l(),Hc=a("p"),fIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GK=a("a"),mIr=o("from_pretrained()"),gIr=o(" class method or the "),OK=a("a"),hIr=o("from_config()"),pIr=o(` class
method.`),uIr=l(),yx=a("p"),_Ir=o("This class cannot be instantiated directly using "),wCe=a("code"),bIr=o("__init__()"),vIr=o(" (throws an error)."),FIr=l(),Qt=a("div"),F(Lx.$$.fragment),TIr=l(),ACe=a("p"),MIr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),EIr=l(),Uc=a("p"),CIr=o(`Note:
Loading a model from its configuration file does `),yCe=a("strong"),wIr=o("not"),AIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=a("a"),yIr=o("from_pretrained()"),LIr=o(" to load the model weights."),xIr=l(),F(Y3.$$.fragment),$Ir=l(),Vr=a("div"),F(xx.$$.fragment),kIr=l(),LCe=a("p"),SIr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),RIr=l(),Tn=a("p"),PIr=o("The model class to instantiate is selected based on the "),xCe=a("code"),BIr=o("model_type"),IIr=o(` property of the config object (either
passed as an argument or loaded from `),$Ce=a("code"),NIr=o("pretrained_model_name_or_path"),qIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=a("code"),jIr=o("pretrained_model_name_or_path"),DIr=o(":"),GIr=l(),Ee=a("ul"),K3=a("li"),SCe=a("strong"),OIr=o("albert"),VIr=o(" \u2014 "),XK=a("a"),XIr=o("FlaxAlbertForPreTraining"),zIr=o(" (ALBERT model)"),WIr=l(),Z3=a("li"),RCe=a("strong"),QIr=o("bart"),HIr=o(" \u2014 "),zK=a("a"),UIr=o("FlaxBartForConditionalGeneration"),JIr=o(" (BART model)"),YIr=l(),e0=a("li"),PCe=a("strong"),KIr=o("bert"),ZIr=o(" \u2014 "),WK=a("a"),eNr=o("FlaxBertForPreTraining"),oNr=o(" (BERT model)"),rNr=l(),o0=a("li"),BCe=a("strong"),tNr=o("big_bird"),aNr=o(" \u2014 "),QK=a("a"),nNr=o("FlaxBigBirdForPreTraining"),sNr=o(" (BigBird model)"),lNr=l(),r0=a("li"),ICe=a("strong"),iNr=o("electra"),dNr=o(" \u2014 "),HK=a("a"),cNr=o("FlaxElectraForPreTraining"),fNr=o(" (ELECTRA model)"),mNr=l(),t0=a("li"),NCe=a("strong"),gNr=o("mbart"),hNr=o(" \u2014 "),UK=a("a"),pNr=o("FlaxMBartForConditionalGeneration"),uNr=o(" (mBART model)"),_Nr=l(),a0=a("li"),qCe=a("strong"),bNr=o("mt5"),vNr=o(" \u2014 "),JK=a("a"),FNr=o("FlaxMT5ForConditionalGeneration"),TNr=o(" (MT5 model)"),MNr=l(),n0=a("li"),jCe=a("strong"),ENr=o("roberta"),CNr=o(" \u2014 "),YK=a("a"),wNr=o("FlaxRobertaForMaskedLM"),ANr=o(" (RoBERTa model)"),yNr=l(),s0=a("li"),DCe=a("strong"),LNr=o("roformer"),xNr=o(" \u2014 "),KK=a("a"),$Nr=o("FlaxRoFormerForMaskedLM"),kNr=o(" (RoFormer model)"),SNr=l(),l0=a("li"),GCe=a("strong"),RNr=o("t5"),PNr=o(" \u2014 "),ZK=a("a"),BNr=o("FlaxT5ForConditionalGeneration"),INr=o(" (T5 model)"),NNr=l(),i0=a("li"),OCe=a("strong"),qNr=o("wav2vec2"),jNr=o(" \u2014 "),eZ=a("a"),DNr=o("FlaxWav2Vec2ForPreTraining"),GNr=o(" (Wav2Vec2 model)"),ONr=l(),d0=a("li"),VCe=a("strong"),VNr=o("xlm-roberta"),XNr=o(" \u2014 "),oZ=a("a"),zNr=o("FlaxXLMRobertaForMaskedLM"),WNr=o(" (XLM-RoBERTa model)"),QNr=l(),F(c0.$$.fragment),cOe=l(),Jc=a("h2"),f0=a("a"),XCe=a("span"),F($x.$$.fragment),HNr=l(),zCe=a("span"),UNr=o("FlaxAutoModelForMaskedLM"),fOe=l(),ur=a("div"),F(kx.$$.fragment),JNr=l(),Yc=a("p"),YNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rZ=a("a"),KNr=o("from_pretrained()"),ZNr=o(" class method or the "),tZ=a("a"),eqr=o("from_config()"),oqr=o(` class
method.`),rqr=l(),Sx=a("p"),tqr=o("This class cannot be instantiated directly using "),WCe=a("code"),aqr=o("__init__()"),nqr=o(" (throws an error)."),sqr=l(),Ht=a("div"),F(Rx.$$.fragment),lqr=l(),QCe=a("p"),iqr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),dqr=l(),Kc=a("p"),cqr=o(`Note:
Loading a model from its configuration file does `),HCe=a("strong"),fqr=o("not"),mqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),gqr=o("from_pretrained()"),hqr=o(" to load the model weights."),pqr=l(),F(m0.$$.fragment),uqr=l(),Xr=a("div"),F(Px.$$.fragment),_qr=l(),UCe=a("p"),bqr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),vqr=l(),Mn=a("p"),Fqr=o("The model class to instantiate is selected based on the "),JCe=a("code"),Tqr=o("model_type"),Mqr=o(` property of the config object (either
passed as an argument or loaded from `),YCe=a("code"),Eqr=o("pretrained_model_name_or_path"),Cqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=a("code"),wqr=o("pretrained_model_name_or_path"),Aqr=o(":"),yqr=l(),$e=a("ul"),g0=a("li"),ZCe=a("strong"),Lqr=o("albert"),xqr=o(" \u2014 "),nZ=a("a"),$qr=o("FlaxAlbertForMaskedLM"),kqr=o(" (ALBERT model)"),Sqr=l(),h0=a("li"),e5e=a("strong"),Rqr=o("bart"),Pqr=o(" \u2014 "),sZ=a("a"),Bqr=o("FlaxBartForConditionalGeneration"),Iqr=o(" (BART model)"),Nqr=l(),p0=a("li"),o5e=a("strong"),qqr=o("bert"),jqr=o(" \u2014 "),lZ=a("a"),Dqr=o("FlaxBertForMaskedLM"),Gqr=o(" (BERT model)"),Oqr=l(),u0=a("li"),r5e=a("strong"),Vqr=o("big_bird"),Xqr=o(" \u2014 "),iZ=a("a"),zqr=o("FlaxBigBirdForMaskedLM"),Wqr=o(" (BigBird model)"),Qqr=l(),_0=a("li"),t5e=a("strong"),Hqr=o("distilbert"),Uqr=o(" \u2014 "),dZ=a("a"),Jqr=o("FlaxDistilBertForMaskedLM"),Yqr=o(" (DistilBERT model)"),Kqr=l(),b0=a("li"),a5e=a("strong"),Zqr=o("electra"),ejr=o(" \u2014 "),cZ=a("a"),ojr=o("FlaxElectraForMaskedLM"),rjr=o(" (ELECTRA model)"),tjr=l(),v0=a("li"),n5e=a("strong"),ajr=o("mbart"),njr=o(" \u2014 "),fZ=a("a"),sjr=o("FlaxMBartForConditionalGeneration"),ljr=o(" (mBART model)"),ijr=l(),F0=a("li"),s5e=a("strong"),djr=o("roberta"),cjr=o(" \u2014 "),mZ=a("a"),fjr=o("FlaxRobertaForMaskedLM"),mjr=o(" (RoBERTa model)"),gjr=l(),T0=a("li"),l5e=a("strong"),hjr=o("roformer"),pjr=o(" \u2014 "),gZ=a("a"),ujr=o("FlaxRoFormerForMaskedLM"),_jr=o(" (RoFormer model)"),bjr=l(),M0=a("li"),i5e=a("strong"),vjr=o("xlm-roberta"),Fjr=o(" \u2014 "),hZ=a("a"),Tjr=o("FlaxXLMRobertaForMaskedLM"),Mjr=o(" (XLM-RoBERTa model)"),Ejr=l(),F(E0.$$.fragment),mOe=l(),Zc=a("h2"),C0=a("a"),d5e=a("span"),F(Bx.$$.fragment),Cjr=l(),c5e=a("span"),wjr=o("FlaxAutoModelForSeq2SeqLM"),gOe=l(),_r=a("div"),F(Ix.$$.fragment),Ajr=l(),ef=a("p"),yjr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pZ=a("a"),Ljr=o("from_pretrained()"),xjr=o(" class method or the "),uZ=a("a"),$jr=o("from_config()"),kjr=o(` class
method.`),Sjr=l(),Nx=a("p"),Rjr=o("This class cannot be instantiated directly using "),f5e=a("code"),Pjr=o("__init__()"),Bjr=o(" (throws an error)."),Ijr=l(),Ut=a("div"),F(qx.$$.fragment),Njr=l(),m5e=a("p"),qjr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),jjr=l(),of=a("p"),Djr=o(`Note:
Loading a model from its configuration file does `),g5e=a("strong"),Gjr=o("not"),Ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=a("a"),Vjr=o("from_pretrained()"),Xjr=o(" to load the model weights."),zjr=l(),F(w0.$$.fragment),Wjr=l(),zr=a("div"),F(jx.$$.fragment),Qjr=l(),h5e=a("p"),Hjr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ujr=l(),En=a("p"),Jjr=o("The model class to instantiate is selected based on the "),p5e=a("code"),Yjr=o("model_type"),Kjr=o(` property of the config object (either
passed as an argument or loaded from `),u5e=a("code"),Zjr=o("pretrained_model_name_or_path"),eDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=a("code"),oDr=o("pretrained_model_name_or_path"),rDr=o(":"),tDr=l(),Pe=a("ul"),A0=a("li"),b5e=a("strong"),aDr=o("bart"),nDr=o(" \u2014 "),bZ=a("a"),sDr=o("FlaxBartForConditionalGeneration"),lDr=o(" (BART model)"),iDr=l(),y0=a("li"),v5e=a("strong"),dDr=o("blenderbot"),cDr=o(" \u2014 "),vZ=a("a"),fDr=o("FlaxBlenderbotForConditionalGeneration"),mDr=o(" (Blenderbot model)"),gDr=l(),L0=a("li"),F5e=a("strong"),hDr=o("blenderbot-small"),pDr=o(" \u2014 "),FZ=a("a"),uDr=o("FlaxBlenderbotSmallForConditionalGeneration"),_Dr=o(" (BlenderbotSmall model)"),bDr=l(),x0=a("li"),T5e=a("strong"),vDr=o("encoder-decoder"),FDr=o(" \u2014 "),TZ=a("a"),TDr=o("FlaxEncoderDecoderModel"),MDr=o(" (Encoder decoder model)"),EDr=l(),$0=a("li"),M5e=a("strong"),CDr=o("marian"),wDr=o(" \u2014 "),MZ=a("a"),ADr=o("FlaxMarianMTModel"),yDr=o(" (Marian model)"),LDr=l(),k0=a("li"),E5e=a("strong"),xDr=o("mbart"),$Dr=o(" \u2014 "),EZ=a("a"),kDr=o("FlaxMBartForConditionalGeneration"),SDr=o(" (mBART model)"),RDr=l(),S0=a("li"),C5e=a("strong"),PDr=o("mt5"),BDr=o(" \u2014 "),CZ=a("a"),IDr=o("FlaxMT5ForConditionalGeneration"),NDr=o(" (MT5 model)"),qDr=l(),R0=a("li"),w5e=a("strong"),jDr=o("pegasus"),DDr=o(" \u2014 "),wZ=a("a"),GDr=o("FlaxPegasusForConditionalGeneration"),ODr=o(" (Pegasus model)"),VDr=l(),P0=a("li"),A5e=a("strong"),XDr=o("t5"),zDr=o(" \u2014 "),AZ=a("a"),WDr=o("FlaxT5ForConditionalGeneration"),QDr=o(" (T5 model)"),HDr=l(),F(B0.$$.fragment),hOe=l(),rf=a("h2"),I0=a("a"),y5e=a("span"),F(Dx.$$.fragment),UDr=l(),L5e=a("span"),JDr=o("FlaxAutoModelForSequenceClassification"),pOe=l(),br=a("div"),F(Gx.$$.fragment),YDr=l(),tf=a("p"),KDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yZ=a("a"),ZDr=o("from_pretrained()"),eGr=o(" class method or the "),LZ=a("a"),oGr=o("from_config()"),rGr=o(` class
method.`),tGr=l(),Ox=a("p"),aGr=o("This class cannot be instantiated directly using "),x5e=a("code"),nGr=o("__init__()"),sGr=o(" (throws an error)."),lGr=l(),Jt=a("div"),F(Vx.$$.fragment),iGr=l(),$5e=a("p"),dGr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cGr=l(),af=a("p"),fGr=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),mGr=o("not"),gGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=a("a"),hGr=o("from_pretrained()"),pGr=o(" to load the model weights."),uGr=l(),F(N0.$$.fragment),_Gr=l(),Wr=a("div"),F(Xx.$$.fragment),bGr=l(),S5e=a("p"),vGr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FGr=l(),Cn=a("p"),TGr=o("The model class to instantiate is selected based on the "),R5e=a("code"),MGr=o("model_type"),EGr=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),CGr=o("pretrained_model_name_or_path"),wGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),AGr=o("pretrained_model_name_or_path"),yGr=o(":"),LGr=l(),ke=a("ul"),q0=a("li"),I5e=a("strong"),xGr=o("albert"),$Gr=o(" \u2014 "),$Z=a("a"),kGr=o("FlaxAlbertForSequenceClassification"),SGr=o(" (ALBERT model)"),RGr=l(),j0=a("li"),N5e=a("strong"),PGr=o("bart"),BGr=o(" \u2014 "),kZ=a("a"),IGr=o("FlaxBartForSequenceClassification"),NGr=o(" (BART model)"),qGr=l(),D0=a("li"),q5e=a("strong"),jGr=o("bert"),DGr=o(" \u2014 "),SZ=a("a"),GGr=o("FlaxBertForSequenceClassification"),OGr=o(" (BERT model)"),VGr=l(),G0=a("li"),j5e=a("strong"),XGr=o("big_bird"),zGr=o(" \u2014 "),RZ=a("a"),WGr=o("FlaxBigBirdForSequenceClassification"),QGr=o(" (BigBird model)"),HGr=l(),O0=a("li"),D5e=a("strong"),UGr=o("distilbert"),JGr=o(" \u2014 "),PZ=a("a"),YGr=o("FlaxDistilBertForSequenceClassification"),KGr=o(" (DistilBERT model)"),ZGr=l(),V0=a("li"),G5e=a("strong"),eOr=o("electra"),oOr=o(" \u2014 "),BZ=a("a"),rOr=o("FlaxElectraForSequenceClassification"),tOr=o(" (ELECTRA model)"),aOr=l(),X0=a("li"),O5e=a("strong"),nOr=o("mbart"),sOr=o(" \u2014 "),IZ=a("a"),lOr=o("FlaxMBartForSequenceClassification"),iOr=o(" (mBART model)"),dOr=l(),z0=a("li"),V5e=a("strong"),cOr=o("roberta"),fOr=o(" \u2014 "),NZ=a("a"),mOr=o("FlaxRobertaForSequenceClassification"),gOr=o(" (RoBERTa model)"),hOr=l(),W0=a("li"),X5e=a("strong"),pOr=o("roformer"),uOr=o(" \u2014 "),qZ=a("a"),_Or=o("FlaxRoFormerForSequenceClassification"),bOr=o(" (RoFormer model)"),vOr=l(),Q0=a("li"),z5e=a("strong"),FOr=o("xlm-roberta"),TOr=o(" \u2014 "),jZ=a("a"),MOr=o("FlaxXLMRobertaForSequenceClassification"),EOr=o(" (XLM-RoBERTa model)"),COr=l(),F(H0.$$.fragment),uOe=l(),nf=a("h2"),U0=a("a"),W5e=a("span"),F(zx.$$.fragment),wOr=l(),Q5e=a("span"),AOr=o("FlaxAutoModelForQuestionAnswering"),_Oe=l(),vr=a("div"),F(Wx.$$.fragment),yOr=l(),sf=a("p"),LOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DZ=a("a"),xOr=o("from_pretrained()"),$Or=o(" class method or the "),GZ=a("a"),kOr=o("from_config()"),SOr=o(` class
method.`),ROr=l(),Qx=a("p"),POr=o("This class cannot be instantiated directly using "),H5e=a("code"),BOr=o("__init__()"),IOr=o(" (throws an error)."),NOr=l(),Yt=a("div"),F(Hx.$$.fragment),qOr=l(),U5e=a("p"),jOr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),DOr=l(),lf=a("p"),GOr=o(`Note:
Loading a model from its configuration file does `),J5e=a("strong"),OOr=o("not"),VOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),XOr=o("from_pretrained()"),zOr=o(" to load the model weights."),WOr=l(),F(J0.$$.fragment),QOr=l(),Qr=a("div"),F(Ux.$$.fragment),HOr=l(),Y5e=a("p"),UOr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JOr=l(),wn=a("p"),YOr=o("The model class to instantiate is selected based on the "),K5e=a("code"),KOr=o("model_type"),ZOr=o(` property of the config object (either
passed as an argument or loaded from `),Z5e=a("code"),eVr=o("pretrained_model_name_or_path"),oVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=a("code"),rVr=o("pretrained_model_name_or_path"),tVr=o(":"),aVr=l(),Se=a("ul"),Y0=a("li"),o3e=a("strong"),nVr=o("albert"),sVr=o(" \u2014 "),VZ=a("a"),lVr=o("FlaxAlbertForQuestionAnswering"),iVr=o(" (ALBERT model)"),dVr=l(),K0=a("li"),r3e=a("strong"),cVr=o("bart"),fVr=o(" \u2014 "),XZ=a("a"),mVr=o("FlaxBartForQuestionAnswering"),gVr=o(" (BART model)"),hVr=l(),Z0=a("li"),t3e=a("strong"),pVr=o("bert"),uVr=o(" \u2014 "),zZ=a("a"),_Vr=o("FlaxBertForQuestionAnswering"),bVr=o(" (BERT model)"),vVr=l(),ew=a("li"),a3e=a("strong"),FVr=o("big_bird"),TVr=o(" \u2014 "),WZ=a("a"),MVr=o("FlaxBigBirdForQuestionAnswering"),EVr=o(" (BigBird model)"),CVr=l(),ow=a("li"),n3e=a("strong"),wVr=o("distilbert"),AVr=o(" \u2014 "),QZ=a("a"),yVr=o("FlaxDistilBertForQuestionAnswering"),LVr=o(" (DistilBERT model)"),xVr=l(),rw=a("li"),s3e=a("strong"),$Vr=o("electra"),kVr=o(" \u2014 "),HZ=a("a"),SVr=o("FlaxElectraForQuestionAnswering"),RVr=o(" (ELECTRA model)"),PVr=l(),tw=a("li"),l3e=a("strong"),BVr=o("mbart"),IVr=o(" \u2014 "),UZ=a("a"),NVr=o("FlaxMBartForQuestionAnswering"),qVr=o(" (mBART model)"),jVr=l(),aw=a("li"),i3e=a("strong"),DVr=o("roberta"),GVr=o(" \u2014 "),JZ=a("a"),OVr=o("FlaxRobertaForQuestionAnswering"),VVr=o(" (RoBERTa model)"),XVr=l(),nw=a("li"),d3e=a("strong"),zVr=o("roformer"),WVr=o(" \u2014 "),YZ=a("a"),QVr=o("FlaxRoFormerForQuestionAnswering"),HVr=o(" (RoFormer model)"),UVr=l(),sw=a("li"),c3e=a("strong"),JVr=o("xlm-roberta"),YVr=o(" \u2014 "),KZ=a("a"),KVr=o("FlaxXLMRobertaForQuestionAnswering"),ZVr=o(" (XLM-RoBERTa model)"),eXr=l(),F(lw.$$.fragment),bOe=l(),df=a("h2"),iw=a("a"),f3e=a("span"),F(Jx.$$.fragment),oXr=l(),m3e=a("span"),rXr=o("FlaxAutoModelForTokenClassification"),vOe=l(),Fr=a("div"),F(Yx.$$.fragment),tXr=l(),cf=a("p"),aXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZZ=a("a"),nXr=o("from_pretrained()"),sXr=o(" class method or the "),eee=a("a"),lXr=o("from_config()"),iXr=o(` class
method.`),dXr=l(),Kx=a("p"),cXr=o("This class cannot be instantiated directly using "),g3e=a("code"),fXr=o("__init__()"),mXr=o(" (throws an error)."),gXr=l(),Kt=a("div"),F(Zx.$$.fragment),hXr=l(),h3e=a("p"),pXr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),uXr=l(),ff=a("p"),_Xr=o(`Note:
Loading a model from its configuration file does `),p3e=a("strong"),bXr=o("not"),vXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=a("a"),FXr=o("from_pretrained()"),TXr=o(" to load the model weights."),MXr=l(),F(dw.$$.fragment),EXr=l(),Hr=a("div"),F(e$.$$.fragment),CXr=l(),u3e=a("p"),wXr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AXr=l(),An=a("p"),yXr=o("The model class to instantiate is selected based on the "),_3e=a("code"),LXr=o("model_type"),xXr=o(` property of the config object (either
passed as an argument or loaded from `),b3e=a("code"),$Xr=o("pretrained_model_name_or_path"),kXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=a("code"),SXr=o("pretrained_model_name_or_path"),RXr=o(":"),PXr=l(),Oe=a("ul"),cw=a("li"),F3e=a("strong"),BXr=o("albert"),IXr=o(" \u2014 "),ree=a("a"),NXr=o("FlaxAlbertForTokenClassification"),qXr=o(" (ALBERT model)"),jXr=l(),fw=a("li"),T3e=a("strong"),DXr=o("bert"),GXr=o(" \u2014 "),tee=a("a"),OXr=o("FlaxBertForTokenClassification"),VXr=o(" (BERT model)"),XXr=l(),mw=a("li"),M3e=a("strong"),zXr=o("big_bird"),WXr=o(" \u2014 "),aee=a("a"),QXr=o("FlaxBigBirdForTokenClassification"),HXr=o(" (BigBird model)"),UXr=l(),gw=a("li"),E3e=a("strong"),JXr=o("distilbert"),YXr=o(" \u2014 "),nee=a("a"),KXr=o("FlaxDistilBertForTokenClassification"),ZXr=o(" (DistilBERT model)"),ezr=l(),hw=a("li"),C3e=a("strong"),ozr=o("electra"),rzr=o(" \u2014 "),see=a("a"),tzr=o("FlaxElectraForTokenClassification"),azr=o(" (ELECTRA model)"),nzr=l(),pw=a("li"),w3e=a("strong"),szr=o("roberta"),lzr=o(" \u2014 "),lee=a("a"),izr=o("FlaxRobertaForTokenClassification"),dzr=o(" (RoBERTa model)"),czr=l(),uw=a("li"),A3e=a("strong"),fzr=o("roformer"),mzr=o(" \u2014 "),iee=a("a"),gzr=o("FlaxRoFormerForTokenClassification"),hzr=o(" (RoFormer model)"),pzr=l(),_w=a("li"),y3e=a("strong"),uzr=o("xlm-roberta"),_zr=o(" \u2014 "),dee=a("a"),bzr=o("FlaxXLMRobertaForTokenClassification"),vzr=o(" (XLM-RoBERTa model)"),Fzr=l(),F(bw.$$.fragment),FOe=l(),mf=a("h2"),vw=a("a"),L3e=a("span"),F(o$.$$.fragment),Tzr=l(),x3e=a("span"),Mzr=o("FlaxAutoModelForMultipleChoice"),TOe=l(),Tr=a("div"),F(r$.$$.fragment),Ezr=l(),gf=a("p"),Czr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cee=a("a"),wzr=o("from_pretrained()"),Azr=o(" class method or the "),fee=a("a"),yzr=o("from_config()"),Lzr=o(` class
method.`),xzr=l(),t$=a("p"),$zr=o("This class cannot be instantiated directly using "),$3e=a("code"),kzr=o("__init__()"),Szr=o(" (throws an error)."),Rzr=l(),Zt=a("div"),F(a$.$$.fragment),Pzr=l(),k3e=a("p"),Bzr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Izr=l(),hf=a("p"),Nzr=o(`Note:
Loading a model from its configuration file does `),S3e=a("strong"),qzr=o("not"),jzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=a("a"),Dzr=o("from_pretrained()"),Gzr=o(" to load the model weights."),Ozr=l(),F(Fw.$$.fragment),Vzr=l(),Ur=a("div"),F(n$.$$.fragment),Xzr=l(),R3e=a("p"),zzr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wzr=l(),yn=a("p"),Qzr=o("The model class to instantiate is selected based on the "),P3e=a("code"),Hzr=o("model_type"),Uzr=o(` property of the config object (either
passed as an argument or loaded from `),B3e=a("code"),Jzr=o("pretrained_model_name_or_path"),Yzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=a("code"),Kzr=o("pretrained_model_name_or_path"),Zzr=o(":"),eWr=l(),Ve=a("ul"),Tw=a("li"),N3e=a("strong"),oWr=o("albert"),rWr=o(" \u2014 "),gee=a("a"),tWr=o("FlaxAlbertForMultipleChoice"),aWr=o(" (ALBERT model)"),nWr=l(),Mw=a("li"),q3e=a("strong"),sWr=o("bert"),lWr=o(" \u2014 "),hee=a("a"),iWr=o("FlaxBertForMultipleChoice"),dWr=o(" (BERT model)"),cWr=l(),Ew=a("li"),j3e=a("strong"),fWr=o("big_bird"),mWr=o(" \u2014 "),pee=a("a"),gWr=o("FlaxBigBirdForMultipleChoice"),hWr=o(" (BigBird model)"),pWr=l(),Cw=a("li"),D3e=a("strong"),uWr=o("distilbert"),_Wr=o(" \u2014 "),uee=a("a"),bWr=o("FlaxDistilBertForMultipleChoice"),vWr=o(" (DistilBERT model)"),FWr=l(),ww=a("li"),G3e=a("strong"),TWr=o("electra"),MWr=o(" \u2014 "),_ee=a("a"),EWr=o("FlaxElectraForMultipleChoice"),CWr=o(" (ELECTRA model)"),wWr=l(),Aw=a("li"),O3e=a("strong"),AWr=o("roberta"),yWr=o(" \u2014 "),bee=a("a"),LWr=o("FlaxRobertaForMultipleChoice"),xWr=o(" (RoBERTa model)"),$Wr=l(),yw=a("li"),V3e=a("strong"),kWr=o("roformer"),SWr=o(" \u2014 "),vee=a("a"),RWr=o("FlaxRoFormerForMultipleChoice"),PWr=o(" (RoFormer model)"),BWr=l(),Lw=a("li"),X3e=a("strong"),IWr=o("xlm-roberta"),NWr=o(" \u2014 "),Fee=a("a"),qWr=o("FlaxXLMRobertaForMultipleChoice"),jWr=o(" (XLM-RoBERTa model)"),DWr=l(),F(xw.$$.fragment),MOe=l(),pf=a("h2"),$w=a("a"),z3e=a("span"),F(s$.$$.fragment),GWr=l(),W3e=a("span"),OWr=o("FlaxAutoModelForNextSentencePrediction"),EOe=l(),Mr=a("div"),F(l$.$$.fragment),VWr=l(),uf=a("p"),XWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tee=a("a"),zWr=o("from_pretrained()"),WWr=o(" class method or the "),Mee=a("a"),QWr=o("from_config()"),HWr=o(` class
method.`),UWr=l(),i$=a("p"),JWr=o("This class cannot be instantiated directly using "),Q3e=a("code"),YWr=o("__init__()"),KWr=o(" (throws an error)."),ZWr=l(),ea=a("div"),F(d$.$$.fragment),eQr=l(),H3e=a("p"),oQr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rQr=l(),_f=a("p"),tQr=o(`Note:
Loading a model from its configuration file does `),U3e=a("strong"),aQr=o("not"),nQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=a("a"),sQr=o("from_pretrained()"),lQr=o(" to load the model weights."),iQr=l(),F(kw.$$.fragment),dQr=l(),Jr=a("div"),F(c$.$$.fragment),cQr=l(),J3e=a("p"),fQr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),mQr=l(),Ln=a("p"),gQr=o("The model class to instantiate is selected based on the "),Y3e=a("code"),hQr=o("model_type"),pQr=o(` property of the config object (either
passed as an argument or loaded from `),K3e=a("code"),uQr=o("pretrained_model_name_or_path"),_Qr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=a("code"),bQr=o("pretrained_model_name_or_path"),vQr=o(":"),FQr=l(),e0e=a("ul"),Sw=a("li"),o0e=a("strong"),TQr=o("bert"),MQr=o(" \u2014 "),Cee=a("a"),EQr=o("FlaxBertForNextSentencePrediction"),CQr=o(" (BERT model)"),wQr=l(),F(Rw.$$.fragment),COe=l(),bf=a("h2"),Pw=a("a"),r0e=a("span"),F(f$.$$.fragment),AQr=l(),t0e=a("span"),yQr=o("FlaxAutoModelForImageClassification"),wOe=l(),Er=a("div"),F(m$.$$.fragment),LQr=l(),vf=a("p"),xQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wee=a("a"),$Qr=o("from_pretrained()"),kQr=o(" class method or the "),Aee=a("a"),SQr=o("from_config()"),RQr=o(` class
method.`),PQr=l(),g$=a("p"),BQr=o("This class cannot be instantiated directly using "),a0e=a("code"),IQr=o("__init__()"),NQr=o(" (throws an error)."),qQr=l(),oa=a("div"),F(h$.$$.fragment),jQr=l(),n0e=a("p"),DQr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),GQr=l(),Ff=a("p"),OQr=o(`Note:
Loading a model from its configuration file does `),s0e=a("strong"),VQr=o("not"),XQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=a("a"),zQr=o("from_pretrained()"),WQr=o(" to load the model weights."),QQr=l(),F(Bw.$$.fragment),HQr=l(),Yr=a("div"),F(p$.$$.fragment),UQr=l(),l0e=a("p"),JQr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),YQr=l(),xn=a("p"),KQr=o("The model class to instantiate is selected based on the "),i0e=a("code"),ZQr=o("model_type"),eHr=o(` property of the config object (either
passed as an argument or loaded from `),d0e=a("code"),oHr=o("pretrained_model_name_or_path"),rHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=a("code"),tHr=o("pretrained_model_name_or_path"),aHr=o(":"),nHr=l(),u$=a("ul"),Iw=a("li"),f0e=a("strong"),sHr=o("beit"),lHr=o(" \u2014 "),Lee=a("a"),iHr=o("FlaxBeitForImageClassification"),dHr=o(" (BEiT model)"),cHr=l(),Nw=a("li"),m0e=a("strong"),fHr=o("vit"),mHr=o(" \u2014 "),xee=a("a"),gHr=o("FlaxViTForImageClassification"),hHr=o(" (ViT model)"),pHr=l(),F(qw.$$.fragment),AOe=l(),Tf=a("h2"),jw=a("a"),g0e=a("span"),F(_$.$$.fragment),uHr=l(),h0e=a("span"),_Hr=o("FlaxAutoModelForVision2Seq"),yOe=l(),Cr=a("div"),F(b$.$$.fragment),bHr=l(),Mf=a("p"),vHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$ee=a("a"),FHr=o("from_pretrained()"),THr=o(" class method or the "),kee=a("a"),MHr=o("from_config()"),EHr=o(` class
method.`),CHr=l(),v$=a("p"),wHr=o("This class cannot be instantiated directly using "),p0e=a("code"),AHr=o("__init__()"),yHr=o(" (throws an error)."),LHr=l(),ra=a("div"),F(F$.$$.fragment),xHr=l(),u0e=a("p"),$Hr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),kHr=l(),Ef=a("p"),SHr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),RHr=o("not"),PHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),See=a("a"),BHr=o("from_pretrained()"),IHr=o(" to load the model weights."),NHr=l(),F(Dw.$$.fragment),qHr=l(),Kr=a("div"),F(T$.$$.fragment),jHr=l(),b0e=a("p"),DHr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),GHr=l(),$n=a("p"),OHr=o("The model class to instantiate is selected based on the "),v0e=a("code"),VHr=o("model_type"),XHr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),zHr=o("pretrained_model_name_or_path"),WHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),QHr=o("pretrained_model_name_or_path"),HHr=o(":"),UHr=l(),M0e=a("ul"),Gw=a("li"),E0e=a("strong"),JHr=o("vision-encoder-decoder"),YHr=o(" \u2014 "),Ree=a("a"),KHr=o("FlaxVisionEncoderDecoderModel"),ZHr=o(" (Vision Encoder decoder model)"),eUr=l(),F(Ow.$$.fragment),this.h()},l(f){const _=VIt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var M$=s(p);m=n(M$,"A",{id:!0,class:!0,href:!0});var C0e=s(m);u=n(C0e,"SPAN",{});var w0e=s(u);T(d.$$.fragment,w0e),w0e.forEach(t),C0e.forEach(t),h=i(M$),Eo=n(M$,"SPAN",{});var A0e=s(Eo);Fi=r(A0e,"Auto Classes"),A0e.forEach(t),M$.forEach(t),yf=i(f),nt=n(f,"P",{});var E$=s(nt);Ti=r(E$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(E$,"CODE",{});var y0e=s(Mi);iy=r(y0e,"from_pretrained()"),y0e.forEach(t),Lf=r(E$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),E$.forEach(t),Ge=i(f),We=n(f,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var L0e=s(Sn);dy=r(L0e,"AutoConfig"),L0e.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var x0e=s(Pn);cy=r(x0e,"AutoModel"),x0e.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var $0e=s(Bn);fy=r($0e,"AutoTokenizer"),$0e.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),xf=i(f),T(xa.$$.fragment,f),Qe=i(f),Ae=n(f,"P",{});var C$=s(Ae);Nk=r(C$,"will create a model that is an instance of "),Ai=n(C$,"A",{href:!0});var k0e=s(Ai);qk=r(k0e,"BertModel"),k0e.forEach(t),jk=r(C$,"."),C$.forEach(t),Co=i(f),$a=n(f,"P",{});var w$=s($a);Dk=r(w$,"There is one class of "),$f=n(w$,"CODE",{});var S0e=s($f);Gk=r(S0e,"AutoModel"),S0e.forEach(t),qXe=r(w$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),w$.forEach(t),EDe=i(f),yi=n(f,"H2",{class:!0});var A$=s(yi);kf=n(A$,"A",{id:!0,class:!0,href:!0});var R0e=s(kf);Lre=n(R0e,"SPAN",{});var P0e=s(Lre);T(my.$$.fragment,P0e),P0e.forEach(t),R0e.forEach(t),jXe=i(A$),xre=n(A$,"SPAN",{});var B0e=s(xre);DXe=r(B0e,"Extending the Auto Classes"),B0e.forEach(t),A$.forEach(t),CDe=i(f),In=n(f,"P",{});var Cf=s(In);GXe=r(Cf,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),$re=n(Cf,"CODE",{});var I0e=s($re);OXe=r(I0e,"NewModel"),I0e.forEach(t),VXe=r(Cf,", make sure you have a "),kre=n(Cf,"CODE",{});var N0e=s(kre);XXe=r(N0e,"NewModelConfig"),N0e.forEach(t),zXe=r(Cf,` then you can add those to the auto
classes like this:`),Cf.forEach(t),wDe=i(f),T(gy.$$.fragment,f),ADe=i(f),Ok=n(f,"P",{});var q0e=s(Ok);WXe=r(q0e,"You will then be able to use the auto classes like you would usually do!"),q0e.forEach(t),yDe=i(f),T(Sf.$$.fragment,f),LDe=i(f),Li=n(f,"H2",{class:!0});var y$=s(Li);Rf=n(y$,"A",{id:!0,class:!0,href:!0});var j0e=s(Rf);Sre=n(j0e,"SPAN",{});var D0e=s(Sre);T(hy.$$.fragment,D0e),D0e.forEach(t),j0e.forEach(t),QXe=i(y$),Rre=n(y$,"SPAN",{});var G0e=s(Rre);HXe=r(G0e,"AutoConfig"),G0e.forEach(t),y$.forEach(t),xDe=i(f),wo=n(f,"DIV",{class:!0});var tt=s(wo);T(py.$$.fragment,tt),UXe=i(tt),uy=n(tt,"P",{});var L$=s(uy);JXe=r(L$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Vk=n(L$,"A",{href:!0});var O0e=s(Vk);YXe=r(O0e,"from_pretrained()"),O0e.forEach(t),KXe=r(L$," class method."),L$.forEach(t),ZXe=i(tt),_y=n(tt,"P",{});var x$=s(_y);eze=r(x$,"This class cannot be instantiated directly using "),Pre=n(x$,"CODE",{});var V0e=s(Pre);oze=r(V0e,"__init__()"),V0e.forEach(t),rze=r(x$," (throws an error)."),x$.forEach(t),tze=i(tt),wr=n(tt,"DIV",{class:!0});var at=s(wr);T(by.$$.fragment,at),aze=i(at),Bre=n(at,"P",{});var X0e=s(Bre);nze=r(X0e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),X0e.forEach(t),sze=i(at),xi=n(at,"P",{});var wf=s(xi);lze=r(wf,"The configuration class to instantiate is selected based on the "),Ire=n(wf,"CODE",{});var z0e=s(Ire);ize=r(z0e,"model_type"),z0e.forEach(t),dze=r(wf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Nre=n(wf,"CODE",{});var W0e=s(Nre);cze=r(W0e,"pretrained_model_name_or_path"),W0e.forEach(t),fze=r(wf,":"),wf.forEach(t),mze=i(at),A=n(at,"UL",{});var y=s(A);Pf=n(y,"LI",{});var Vw=s(Pf);qre=n(Vw,"STRONG",{});var Q0e=s(qre);gze=r(Q0e,"albert"),Q0e.forEach(t),hze=r(Vw," \u2014 "),Xk=n(Vw,"A",{href:!0});var H0e=s(Xk);pze=r(H0e,"AlbertConfig"),H0e.forEach(t),uze=r(Vw," (ALBERT model)"),Vw.forEach(t),_ze=i(y),Bf=n(y,"LI",{});var Xw=s(Bf);jre=n(Xw,"STRONG",{});var U0e=s(jre);bze=r(U0e,"bart"),U0e.forEach(t),vze=r(Xw," \u2014 "),zk=n(Xw,"A",{href:!0});var J0e=s(zk);Fze=r(J0e,"BartConfig"),J0e.forEach(t),Tze=r(Xw," (BART model)"),Xw.forEach(t),Mze=i(y),If=n(y,"LI",{});var zw=s(If);Dre=n(zw,"STRONG",{});var Y0e=s(Dre);Eze=r(Y0e,"beit"),Y0e.forEach(t),Cze=r(zw," \u2014 "),Wk=n(zw,"A",{href:!0});var K0e=s(Wk);wze=r(K0e,"BeitConfig"),K0e.forEach(t),Aze=r(zw," (BEiT model)"),zw.forEach(t),yze=i(y),Nf=n(y,"LI",{});var Ww=s(Nf);Gre=n(Ww,"STRONG",{});var Z0e=s(Gre);Lze=r(Z0e,"bert"),Z0e.forEach(t),xze=r(Ww," \u2014 "),Qk=n(Ww,"A",{href:!0});var ewe=s(Qk);$ze=r(ewe,"BertConfig"),ewe.forEach(t),kze=r(Ww," (BERT model)"),Ww.forEach(t),Sze=i(y),qf=n(y,"LI",{});var Qw=s(qf);Ore=n(Qw,"STRONG",{});var owe=s(Ore);Rze=r(owe,"bert-generation"),owe.forEach(t),Pze=r(Qw," \u2014 "),Hk=n(Qw,"A",{href:!0});var rwe=s(Hk);Bze=r(rwe,"BertGenerationConfig"),rwe.forEach(t),Ize=r(Qw," (Bert Generation model)"),Qw.forEach(t),Nze=i(y),jf=n(y,"LI",{});var Hw=s(jf);Vre=n(Hw,"STRONG",{});var twe=s(Vre);qze=r(twe,"big_bird"),twe.forEach(t),jze=r(Hw," \u2014 "),Uk=n(Hw,"A",{href:!0});var awe=s(Uk);Dze=r(awe,"BigBirdConfig"),awe.forEach(t),Gze=r(Hw," (BigBird model)"),Hw.forEach(t),Oze=i(y),Df=n(y,"LI",{});var Uw=s(Df);Xre=n(Uw,"STRONG",{});var nwe=s(Xre);Vze=r(nwe,"bigbird_pegasus"),nwe.forEach(t),Xze=r(Uw," \u2014 "),Jk=n(Uw,"A",{href:!0});var swe=s(Jk);zze=r(swe,"BigBirdPegasusConfig"),swe.forEach(t),Wze=r(Uw," (BigBird-Pegasus model)"),Uw.forEach(t),Qze=i(y),Gf=n(y,"LI",{});var Jw=s(Gf);zre=n(Jw,"STRONG",{});var lwe=s(zre);Hze=r(lwe,"blenderbot"),lwe.forEach(t),Uze=r(Jw," \u2014 "),Yk=n(Jw,"A",{href:!0});var iwe=s(Yk);Jze=r(iwe,"BlenderbotConfig"),iwe.forEach(t),Yze=r(Jw," (Blenderbot model)"),Jw.forEach(t),Kze=i(y),Of=n(y,"LI",{});var Yw=s(Of);Wre=n(Yw,"STRONG",{});var dwe=s(Wre);Zze=r(dwe,"blenderbot-small"),dwe.forEach(t),eWe=r(Yw," \u2014 "),Kk=n(Yw,"A",{href:!0});var cwe=s(Kk);oWe=r(cwe,"BlenderbotSmallConfig"),cwe.forEach(t),rWe=r(Yw," (BlenderbotSmall model)"),Yw.forEach(t),tWe=i(y),Vf=n(y,"LI",{});var Kw=s(Vf);Qre=n(Kw,"STRONG",{});var fwe=s(Qre);aWe=r(fwe,"bloom"),fwe.forEach(t),nWe=r(Kw," \u2014 "),Zk=n(Kw,"A",{href:!0});var mwe=s(Zk);sWe=r(mwe,"BloomConfig"),mwe.forEach(t),lWe=r(Kw," (BLOOM model)"),Kw.forEach(t),iWe=i(y),Xf=n(y,"LI",{});var Zw=s(Xf);Hre=n(Zw,"STRONG",{});var gwe=s(Hre);dWe=r(gwe,"camembert"),gwe.forEach(t),cWe=r(Zw," \u2014 "),eS=n(Zw,"A",{href:!0});var hwe=s(eS);fWe=r(hwe,"CamembertConfig"),hwe.forEach(t),mWe=r(Zw," (CamemBERT model)"),Zw.forEach(t),gWe=i(y),zf=n(y,"LI",{});var eA=s(zf);Ure=n(eA,"STRONG",{});var pwe=s(Ure);hWe=r(pwe,"canine"),pwe.forEach(t),pWe=r(eA," \u2014 "),oS=n(eA,"A",{href:!0});var uwe=s(oS);uWe=r(uwe,"CanineConfig"),uwe.forEach(t),_We=r(eA," (CANINE model)"),eA.forEach(t),bWe=i(y),Wf=n(y,"LI",{});var oA=s(Wf);Jre=n(oA,"STRONG",{});var _we=s(Jre);vWe=r(_we,"clip"),_we.forEach(t),FWe=r(oA," \u2014 "),rS=n(oA,"A",{href:!0});var bwe=s(rS);TWe=r(bwe,"CLIPConfig"),bwe.forEach(t),MWe=r(oA," (CLIP model)"),oA.forEach(t),EWe=i(y),Qf=n(y,"LI",{});var rA=s(Qf);Yre=n(rA,"STRONG",{});var vwe=s(Yre);CWe=r(vwe,"convbert"),vwe.forEach(t),wWe=r(rA," \u2014 "),tS=n(rA,"A",{href:!0});var Fwe=s(tS);AWe=r(Fwe,"ConvBertConfig"),Fwe.forEach(t),yWe=r(rA," (ConvBERT model)"),rA.forEach(t),LWe=i(y),Hf=n(y,"LI",{});var tA=s(Hf);Kre=n(tA,"STRONG",{});var Twe=s(Kre);xWe=r(Twe,"convnext"),Twe.forEach(t),$We=r(tA," \u2014 "),aS=n(tA,"A",{href:!0});var Mwe=s(aS);kWe=r(Mwe,"ConvNextConfig"),Mwe.forEach(t),SWe=r(tA," (ConvNeXT model)"),tA.forEach(t),RWe=i(y),Uf=n(y,"LI",{});var aA=s(Uf);Zre=n(aA,"STRONG",{});var Ewe=s(Zre);PWe=r(Ewe,"ctrl"),Ewe.forEach(t),BWe=r(aA," \u2014 "),nS=n(aA,"A",{href:!0});var Cwe=s(nS);IWe=r(Cwe,"CTRLConfig"),Cwe.forEach(t),NWe=r(aA," (CTRL model)"),aA.forEach(t),qWe=i(y),Jf=n(y,"LI",{});var nA=s(Jf);ete=n(nA,"STRONG",{});var wwe=s(ete);jWe=r(wwe,"cvt"),wwe.forEach(t),DWe=r(nA," \u2014 "),sS=n(nA,"A",{href:!0});var Awe=s(sS);GWe=r(Awe,"CvtConfig"),Awe.forEach(t),OWe=r(nA," (CvT model)"),nA.forEach(t),VWe=i(y),Yf=n(y,"LI",{});var sA=s(Yf);ote=n(sA,"STRONG",{});var ywe=s(ote);XWe=r(ywe,"data2vec-audio"),ywe.forEach(t),zWe=r(sA," \u2014 "),lS=n(sA,"A",{href:!0});var Lwe=s(lS);WWe=r(Lwe,"Data2VecAudioConfig"),Lwe.forEach(t),QWe=r(sA," (Data2VecAudio model)"),sA.forEach(t),HWe=i(y),Kf=n(y,"LI",{});var lA=s(Kf);rte=n(lA,"STRONG",{});var xwe=s(rte);UWe=r(xwe,"data2vec-text"),xwe.forEach(t),JWe=r(lA," \u2014 "),iS=n(lA,"A",{href:!0});var $we=s(iS);YWe=r($we,"Data2VecTextConfig"),$we.forEach(t),KWe=r(lA," (Data2VecText model)"),lA.forEach(t),ZWe=i(y),Zf=n(y,"LI",{});var iA=s(Zf);tte=n(iA,"STRONG",{});var kwe=s(tte);eQe=r(kwe,"data2vec-vision"),kwe.forEach(t),oQe=r(iA," \u2014 "),dS=n(iA,"A",{href:!0});var Swe=s(dS);rQe=r(Swe,"Data2VecVisionConfig"),Swe.forEach(t),tQe=r(iA," (Data2VecVision model)"),iA.forEach(t),aQe=i(y),em=n(y,"LI",{});var dA=s(em);ate=n(dA,"STRONG",{});var Rwe=s(ate);nQe=r(Rwe,"deberta"),Rwe.forEach(t),sQe=r(dA," \u2014 "),cS=n(dA,"A",{href:!0});var Pwe=s(cS);lQe=r(Pwe,"DebertaConfig"),Pwe.forEach(t),iQe=r(dA," (DeBERTa model)"),dA.forEach(t),dQe=i(y),om=n(y,"LI",{});var cA=s(om);nte=n(cA,"STRONG",{});var Bwe=s(nte);cQe=r(Bwe,"deberta-v2"),Bwe.forEach(t),fQe=r(cA," \u2014 "),fS=n(cA,"A",{href:!0});var Iwe=s(fS);mQe=r(Iwe,"DebertaV2Config"),Iwe.forEach(t),gQe=r(cA," (DeBERTa-v2 model)"),cA.forEach(t),hQe=i(y),rm=n(y,"LI",{});var fA=s(rm);ste=n(fA,"STRONG",{});var Nwe=s(ste);pQe=r(Nwe,"decision_transformer"),Nwe.forEach(t),uQe=r(fA," \u2014 "),mS=n(fA,"A",{href:!0});var qwe=s(mS);_Qe=r(qwe,"DecisionTransformerConfig"),qwe.forEach(t),bQe=r(fA," (Decision Transformer model)"),fA.forEach(t),vQe=i(y),tm=n(y,"LI",{});var mA=s(tm);lte=n(mA,"STRONG",{});var rUr=s(lte);FQe=r(rUr,"deit"),rUr.forEach(t),TQe=r(mA," \u2014 "),gS=n(mA,"A",{href:!0});var tUr=s(gS);MQe=r(tUr,"DeiTConfig"),tUr.forEach(t),EQe=r(mA," (DeiT model)"),mA.forEach(t),CQe=i(y),am=n(y,"LI",{});var jwe=s(am);ite=n(jwe,"STRONG",{});var aUr=s(ite);wQe=r(aUr,"detr"),aUr.forEach(t),AQe=r(jwe," \u2014 "),hS=n(jwe,"A",{href:!0});var nUr=s(hS);yQe=r(nUr,"DetrConfig"),nUr.forEach(t),LQe=r(jwe," (DETR model)"),jwe.forEach(t),xQe=i(y),nm=n(y,"LI",{});var Dwe=s(nm);dte=n(Dwe,"STRONG",{});var sUr=s(dte);$Qe=r(sUr,"distilbert"),sUr.forEach(t),kQe=r(Dwe," \u2014 "),pS=n(Dwe,"A",{href:!0});var lUr=s(pS);SQe=r(lUr,"DistilBertConfig"),lUr.forEach(t),RQe=r(Dwe," (DistilBERT model)"),Dwe.forEach(t),PQe=i(y),sm=n(y,"LI",{});var Gwe=s(sm);cte=n(Gwe,"STRONG",{});var iUr=s(cte);BQe=r(iUr,"dpr"),iUr.forEach(t),IQe=r(Gwe," \u2014 "),uS=n(Gwe,"A",{href:!0});var dUr=s(uS);NQe=r(dUr,"DPRConfig"),dUr.forEach(t),qQe=r(Gwe," (DPR model)"),Gwe.forEach(t),jQe=i(y),lm=n(y,"LI",{});var Owe=s(lm);fte=n(Owe,"STRONG",{});var cUr=s(fte);DQe=r(cUr,"dpt"),cUr.forEach(t),GQe=r(Owe," \u2014 "),_S=n(Owe,"A",{href:!0});var fUr=s(_S);OQe=r(fUr,"DPTConfig"),fUr.forEach(t),VQe=r(Owe," (DPT model)"),Owe.forEach(t),XQe=i(y),im=n(y,"LI",{});var Vwe=s(im);mte=n(Vwe,"STRONG",{});var mUr=s(mte);zQe=r(mUr,"electra"),mUr.forEach(t),WQe=r(Vwe," \u2014 "),bS=n(Vwe,"A",{href:!0});var gUr=s(bS);QQe=r(gUr,"ElectraConfig"),gUr.forEach(t),HQe=r(Vwe," (ELECTRA model)"),Vwe.forEach(t),UQe=i(y),dm=n(y,"LI",{});var Xwe=s(dm);gte=n(Xwe,"STRONG",{});var hUr=s(gte);JQe=r(hUr,"encoder-decoder"),hUr.forEach(t),YQe=r(Xwe," \u2014 "),vS=n(Xwe,"A",{href:!0});var pUr=s(vS);KQe=r(pUr,"EncoderDecoderConfig"),pUr.forEach(t),ZQe=r(Xwe," (Encoder decoder model)"),Xwe.forEach(t),eHe=i(y),cm=n(y,"LI",{});var zwe=s(cm);hte=n(zwe,"STRONG",{});var uUr=s(hte);oHe=r(uUr,"flaubert"),uUr.forEach(t),rHe=r(zwe," \u2014 "),FS=n(zwe,"A",{href:!0});var _Ur=s(FS);tHe=r(_Ur,"FlaubertConfig"),_Ur.forEach(t),aHe=r(zwe," (FlauBERT model)"),zwe.forEach(t),nHe=i(y),fm=n(y,"LI",{});var Wwe=s(fm);pte=n(Wwe,"STRONG",{});var bUr=s(pte);sHe=r(bUr,"flava"),bUr.forEach(t),lHe=r(Wwe," \u2014 "),TS=n(Wwe,"A",{href:!0});var vUr=s(TS);iHe=r(vUr,"FlavaConfig"),vUr.forEach(t),dHe=r(Wwe," (FLAVA model)"),Wwe.forEach(t),cHe=i(y),mm=n(y,"LI",{});var Qwe=s(mm);ute=n(Qwe,"STRONG",{});var FUr=s(ute);fHe=r(FUr,"fnet"),FUr.forEach(t),mHe=r(Qwe," \u2014 "),MS=n(Qwe,"A",{href:!0});var TUr=s(MS);gHe=r(TUr,"FNetConfig"),TUr.forEach(t),hHe=r(Qwe," (FNet model)"),Qwe.forEach(t),pHe=i(y),gm=n(y,"LI",{});var Hwe=s(gm);_te=n(Hwe,"STRONG",{});var MUr=s(_te);uHe=r(MUr,"fsmt"),MUr.forEach(t),_He=r(Hwe," \u2014 "),ES=n(Hwe,"A",{href:!0});var EUr=s(ES);bHe=r(EUr,"FSMTConfig"),EUr.forEach(t),vHe=r(Hwe," (FairSeq Machine-Translation model)"),Hwe.forEach(t),FHe=i(y),hm=n(y,"LI",{});var Uwe=s(hm);bte=n(Uwe,"STRONG",{});var CUr=s(bte);THe=r(CUr,"funnel"),CUr.forEach(t),MHe=r(Uwe," \u2014 "),CS=n(Uwe,"A",{href:!0});var wUr=s(CS);EHe=r(wUr,"FunnelConfig"),wUr.forEach(t),CHe=r(Uwe," (Funnel Transformer model)"),Uwe.forEach(t),wHe=i(y),pm=n(y,"LI",{});var Jwe=s(pm);vte=n(Jwe,"STRONG",{});var AUr=s(vte);AHe=r(AUr,"glpn"),AUr.forEach(t),yHe=r(Jwe," \u2014 "),wS=n(Jwe,"A",{href:!0});var yUr=s(wS);LHe=r(yUr,"GLPNConfig"),yUr.forEach(t),xHe=r(Jwe," (GLPN model)"),Jwe.forEach(t),$He=i(y),um=n(y,"LI",{});var Ywe=s(um);Fte=n(Ywe,"STRONG",{});var LUr=s(Fte);kHe=r(LUr,"gpt2"),LUr.forEach(t),SHe=r(Ywe," \u2014 "),AS=n(Ywe,"A",{href:!0});var xUr=s(AS);RHe=r(xUr,"GPT2Config"),xUr.forEach(t),PHe=r(Ywe," (OpenAI GPT-2 model)"),Ywe.forEach(t),BHe=i(y),_m=n(y,"LI",{});var Kwe=s(_m);Tte=n(Kwe,"STRONG",{});var $Ur=s(Tte);IHe=r($Ur,"gpt_neo"),$Ur.forEach(t),NHe=r(Kwe," \u2014 "),yS=n(Kwe,"A",{href:!0});var kUr=s(yS);qHe=r(kUr,"GPTNeoConfig"),kUr.forEach(t),jHe=r(Kwe," (GPT Neo model)"),Kwe.forEach(t),DHe=i(y),bm=n(y,"LI",{});var Zwe=s(bm);Mte=n(Zwe,"STRONG",{});var SUr=s(Mte);GHe=r(SUr,"gpt_neox"),SUr.forEach(t),OHe=r(Zwe," \u2014 "),LS=n(Zwe,"A",{href:!0});var RUr=s(LS);VHe=r(RUr,"GPTNeoXConfig"),RUr.forEach(t),XHe=r(Zwe," (GPT NeoX model)"),Zwe.forEach(t),zHe=i(y),vm=n(y,"LI",{});var eAe=s(vm);Ete=n(eAe,"STRONG",{});var PUr=s(Ete);WHe=r(PUr,"gptj"),PUr.forEach(t),QHe=r(eAe," \u2014 "),xS=n(eAe,"A",{href:!0});var BUr=s(xS);HHe=r(BUr,"GPTJConfig"),BUr.forEach(t),UHe=r(eAe," (GPT-J model)"),eAe.forEach(t),JHe=i(y),Fm=n(y,"LI",{});var oAe=s(Fm);Cte=n(oAe,"STRONG",{});var IUr=s(Cte);YHe=r(IUr,"hubert"),IUr.forEach(t),KHe=r(oAe," \u2014 "),$S=n(oAe,"A",{href:!0});var NUr=s($S);ZHe=r(NUr,"HubertConfig"),NUr.forEach(t),eUe=r(oAe," (Hubert model)"),oAe.forEach(t),oUe=i(y),Tm=n(y,"LI",{});var rAe=s(Tm);wte=n(rAe,"STRONG",{});var qUr=s(wte);rUe=r(qUr,"ibert"),qUr.forEach(t),tUe=r(rAe," \u2014 "),kS=n(rAe,"A",{href:!0});var jUr=s(kS);aUe=r(jUr,"IBertConfig"),jUr.forEach(t),nUe=r(rAe," (I-BERT model)"),rAe.forEach(t),sUe=i(y),Mm=n(y,"LI",{});var tAe=s(Mm);Ate=n(tAe,"STRONG",{});var DUr=s(Ate);lUe=r(DUr,"imagegpt"),DUr.forEach(t),iUe=r(tAe," \u2014 "),SS=n(tAe,"A",{href:!0});var GUr=s(SS);dUe=r(GUr,"ImageGPTConfig"),GUr.forEach(t),cUe=r(tAe," (ImageGPT model)"),tAe.forEach(t),fUe=i(y),Em=n(y,"LI",{});var aAe=s(Em);yte=n(aAe,"STRONG",{});var OUr=s(yte);mUe=r(OUr,"layoutlm"),OUr.forEach(t),gUe=r(aAe," \u2014 "),RS=n(aAe,"A",{href:!0});var VUr=s(RS);hUe=r(VUr,"LayoutLMConfig"),VUr.forEach(t),pUe=r(aAe," (LayoutLM model)"),aAe.forEach(t),uUe=i(y),Cm=n(y,"LI",{});var nAe=s(Cm);Lte=n(nAe,"STRONG",{});var XUr=s(Lte);_Ue=r(XUr,"layoutlmv2"),XUr.forEach(t),bUe=r(nAe," \u2014 "),PS=n(nAe,"A",{href:!0});var zUr=s(PS);vUe=r(zUr,"LayoutLMv2Config"),zUr.forEach(t),FUe=r(nAe," (LayoutLMv2 model)"),nAe.forEach(t),TUe=i(y),wm=n(y,"LI",{});var sAe=s(wm);xte=n(sAe,"STRONG",{});var WUr=s(xte);MUe=r(WUr,"layoutlmv3"),WUr.forEach(t),EUe=r(sAe," \u2014 "),BS=n(sAe,"A",{href:!0});var QUr=s(BS);CUe=r(QUr,"LayoutLMv3Config"),QUr.forEach(t),wUe=r(sAe," (LayoutLMv3 model)"),sAe.forEach(t),AUe=i(y),Am=n(y,"LI",{});var lAe=s(Am);$te=n(lAe,"STRONG",{});var HUr=s($te);yUe=r(HUr,"led"),HUr.forEach(t),LUe=r(lAe," \u2014 "),IS=n(lAe,"A",{href:!0});var UUr=s(IS);xUe=r(UUr,"LEDConfig"),UUr.forEach(t),$Ue=r(lAe," (LED model)"),lAe.forEach(t),kUe=i(y),ym=n(y,"LI",{});var iAe=s(ym);kte=n(iAe,"STRONG",{});var JUr=s(kte);SUe=r(JUr,"levit"),JUr.forEach(t),RUe=r(iAe," \u2014 "),NS=n(iAe,"A",{href:!0});var YUr=s(NS);PUe=r(YUr,"LevitConfig"),YUr.forEach(t),BUe=r(iAe," (LeViT model)"),iAe.forEach(t),IUe=i(y),Lm=n(y,"LI",{});var dAe=s(Lm);Ste=n(dAe,"STRONG",{});var KUr=s(Ste);NUe=r(KUr,"longformer"),KUr.forEach(t),qUe=r(dAe," \u2014 "),qS=n(dAe,"A",{href:!0});var ZUr=s(qS);jUe=r(ZUr,"LongformerConfig"),ZUr.forEach(t),DUe=r(dAe," (Longformer model)"),dAe.forEach(t),GUe=i(y),xm=n(y,"LI",{});var cAe=s(xm);Rte=n(cAe,"STRONG",{});var eJr=s(Rte);OUe=r(eJr,"luke"),eJr.forEach(t),VUe=r(cAe," \u2014 "),jS=n(cAe,"A",{href:!0});var oJr=s(jS);XUe=r(oJr,"LukeConfig"),oJr.forEach(t),zUe=r(cAe," (LUKE model)"),cAe.forEach(t),WUe=i(y),$m=n(y,"LI",{});var fAe=s($m);Pte=n(fAe,"STRONG",{});var rJr=s(Pte);QUe=r(rJr,"lxmert"),rJr.forEach(t),HUe=r(fAe," \u2014 "),DS=n(fAe,"A",{href:!0});var tJr=s(DS);UUe=r(tJr,"LxmertConfig"),tJr.forEach(t),JUe=r(fAe," (LXMERT model)"),fAe.forEach(t),YUe=i(y),km=n(y,"LI",{});var mAe=s(km);Bte=n(mAe,"STRONG",{});var aJr=s(Bte);KUe=r(aJr,"m2m_100"),aJr.forEach(t),ZUe=r(mAe," \u2014 "),GS=n(mAe,"A",{href:!0});var nJr=s(GS);eJe=r(nJr,"M2M100Config"),nJr.forEach(t),oJe=r(mAe," (M2M100 model)"),mAe.forEach(t),rJe=i(y),Sm=n(y,"LI",{});var gAe=s(Sm);Ite=n(gAe,"STRONG",{});var sJr=s(Ite);tJe=r(sJr,"marian"),sJr.forEach(t),aJe=r(gAe," \u2014 "),OS=n(gAe,"A",{href:!0});var lJr=s(OS);nJe=r(lJr,"MarianConfig"),lJr.forEach(t),sJe=r(gAe," (Marian model)"),gAe.forEach(t),lJe=i(y),Rm=n(y,"LI",{});var hAe=s(Rm);Nte=n(hAe,"STRONG",{});var iJr=s(Nte);iJe=r(iJr,"maskformer"),iJr.forEach(t),dJe=r(hAe," \u2014 "),VS=n(hAe,"A",{href:!0});var dJr=s(VS);cJe=r(dJr,"MaskFormerConfig"),dJr.forEach(t),fJe=r(hAe," (MaskFormer model)"),hAe.forEach(t),mJe=i(y),Pm=n(y,"LI",{});var pAe=s(Pm);qte=n(pAe,"STRONG",{});var cJr=s(qte);gJe=r(cJr,"mbart"),cJr.forEach(t),hJe=r(pAe," \u2014 "),XS=n(pAe,"A",{href:!0});var fJr=s(XS);pJe=r(fJr,"MBartConfig"),fJr.forEach(t),uJe=r(pAe," (mBART model)"),pAe.forEach(t),_Je=i(y),Bm=n(y,"LI",{});var uAe=s(Bm);jte=n(uAe,"STRONG",{});var mJr=s(jte);bJe=r(mJr,"mctct"),mJr.forEach(t),vJe=r(uAe," \u2014 "),zS=n(uAe,"A",{href:!0});var gJr=s(zS);FJe=r(gJr,"MCTCTConfig"),gJr.forEach(t),TJe=r(uAe," (M-CTC-T model)"),uAe.forEach(t),MJe=i(y),Im=n(y,"LI",{});var _Ae=s(Im);Dte=n(_Ae,"STRONG",{});var hJr=s(Dte);EJe=r(hJr,"megatron-bert"),hJr.forEach(t),CJe=r(_Ae," \u2014 "),WS=n(_Ae,"A",{href:!0});var pJr=s(WS);wJe=r(pJr,"MegatronBertConfig"),pJr.forEach(t),AJe=r(_Ae," (Megatron-BERT model)"),_Ae.forEach(t),yJe=i(y),Nm=n(y,"LI",{});var bAe=s(Nm);Gte=n(bAe,"STRONG",{});var uJr=s(Gte);LJe=r(uJr,"mobilebert"),uJr.forEach(t),xJe=r(bAe," \u2014 "),QS=n(bAe,"A",{href:!0});var _Jr=s(QS);$Je=r(_Jr,"MobileBertConfig"),_Jr.forEach(t),kJe=r(bAe," (MobileBERT model)"),bAe.forEach(t),SJe=i(y),qm=n(y,"LI",{});var vAe=s(qm);Ote=n(vAe,"STRONG",{});var bJr=s(Ote);RJe=r(bJr,"mpnet"),bJr.forEach(t),PJe=r(vAe," \u2014 "),HS=n(vAe,"A",{href:!0});var vJr=s(HS);BJe=r(vJr,"MPNetConfig"),vJr.forEach(t),IJe=r(vAe," (MPNet model)"),vAe.forEach(t),NJe=i(y),jm=n(y,"LI",{});var FAe=s(jm);Vte=n(FAe,"STRONG",{});var FJr=s(Vte);qJe=r(FJr,"mt5"),FJr.forEach(t),jJe=r(FAe," \u2014 "),US=n(FAe,"A",{href:!0});var TJr=s(US);DJe=r(TJr,"MT5Config"),TJr.forEach(t),GJe=r(FAe," (MT5 model)"),FAe.forEach(t),OJe=i(y),Dm=n(y,"LI",{});var TAe=s(Dm);Xte=n(TAe,"STRONG",{});var MJr=s(Xte);VJe=r(MJr,"nystromformer"),MJr.forEach(t),XJe=r(TAe," \u2014 "),JS=n(TAe,"A",{href:!0});var EJr=s(JS);zJe=r(EJr,"NystromformerConfig"),EJr.forEach(t),WJe=r(TAe," (Nystr\xF6mformer model)"),TAe.forEach(t),QJe=i(y),Gm=n(y,"LI",{});var MAe=s(Gm);zte=n(MAe,"STRONG",{});var CJr=s(zte);HJe=r(CJr,"openai-gpt"),CJr.forEach(t),UJe=r(MAe," \u2014 "),YS=n(MAe,"A",{href:!0});var wJr=s(YS);JJe=r(wJr,"OpenAIGPTConfig"),wJr.forEach(t),YJe=r(MAe," (OpenAI GPT model)"),MAe.forEach(t),KJe=i(y),Om=n(y,"LI",{});var EAe=s(Om);Wte=n(EAe,"STRONG",{});var AJr=s(Wte);ZJe=r(AJr,"opt"),AJr.forEach(t),eYe=r(EAe," \u2014 "),KS=n(EAe,"A",{href:!0});var yJr=s(KS);oYe=r(yJr,"OPTConfig"),yJr.forEach(t),rYe=r(EAe," (OPT model)"),EAe.forEach(t),tYe=i(y),Vm=n(y,"LI",{});var CAe=s(Vm);Qte=n(CAe,"STRONG",{});var LJr=s(Qte);aYe=r(LJr,"pegasus"),LJr.forEach(t),nYe=r(CAe," \u2014 "),ZS=n(CAe,"A",{href:!0});var xJr=s(ZS);sYe=r(xJr,"PegasusConfig"),xJr.forEach(t),lYe=r(CAe," (Pegasus model)"),CAe.forEach(t),iYe=i(y),Xm=n(y,"LI",{});var wAe=s(Xm);Hte=n(wAe,"STRONG",{});var $Jr=s(Hte);dYe=r($Jr,"perceiver"),$Jr.forEach(t),cYe=r(wAe," \u2014 "),eR=n(wAe,"A",{href:!0});var kJr=s(eR);fYe=r(kJr,"PerceiverConfig"),kJr.forEach(t),mYe=r(wAe," (Perceiver model)"),wAe.forEach(t),gYe=i(y),zm=n(y,"LI",{});var AAe=s(zm);Ute=n(AAe,"STRONG",{});var SJr=s(Ute);hYe=r(SJr,"plbart"),SJr.forEach(t),pYe=r(AAe," \u2014 "),oR=n(AAe,"A",{href:!0});var RJr=s(oR);uYe=r(RJr,"PLBartConfig"),RJr.forEach(t),_Ye=r(AAe," (PLBart model)"),AAe.forEach(t),bYe=i(y),Wm=n(y,"LI",{});var yAe=s(Wm);Jte=n(yAe,"STRONG",{});var PJr=s(Jte);vYe=r(PJr,"poolformer"),PJr.forEach(t),FYe=r(yAe," \u2014 "),rR=n(yAe,"A",{href:!0});var BJr=s(rR);TYe=r(BJr,"PoolFormerConfig"),BJr.forEach(t),MYe=r(yAe," (PoolFormer model)"),yAe.forEach(t),EYe=i(y),Qm=n(y,"LI",{});var LAe=s(Qm);Yte=n(LAe,"STRONG",{});var IJr=s(Yte);CYe=r(IJr,"prophetnet"),IJr.forEach(t),wYe=r(LAe," \u2014 "),tR=n(LAe,"A",{href:!0});var NJr=s(tR);AYe=r(NJr,"ProphetNetConfig"),NJr.forEach(t),yYe=r(LAe," (ProphetNet model)"),LAe.forEach(t),LYe=i(y),Hm=n(y,"LI",{});var xAe=s(Hm);Kte=n(xAe,"STRONG",{});var qJr=s(Kte);xYe=r(qJr,"qdqbert"),qJr.forEach(t),$Ye=r(xAe," \u2014 "),aR=n(xAe,"A",{href:!0});var jJr=s(aR);kYe=r(jJr,"QDQBertConfig"),jJr.forEach(t),SYe=r(xAe," (QDQBert model)"),xAe.forEach(t),RYe=i(y),Um=n(y,"LI",{});var $Ae=s(Um);Zte=n($Ae,"STRONG",{});var DJr=s(Zte);PYe=r(DJr,"rag"),DJr.forEach(t),BYe=r($Ae," \u2014 "),nR=n($Ae,"A",{href:!0});var GJr=s(nR);IYe=r(GJr,"RagConfig"),GJr.forEach(t),NYe=r($Ae," (RAG model)"),$Ae.forEach(t),qYe=i(y),Jm=n(y,"LI",{});var kAe=s(Jm);eae=n(kAe,"STRONG",{});var OJr=s(eae);jYe=r(OJr,"realm"),OJr.forEach(t),DYe=r(kAe," \u2014 "),sR=n(kAe,"A",{href:!0});var VJr=s(sR);GYe=r(VJr,"RealmConfig"),VJr.forEach(t),OYe=r(kAe," (REALM model)"),kAe.forEach(t),VYe=i(y),Ym=n(y,"LI",{});var SAe=s(Ym);oae=n(SAe,"STRONG",{});var XJr=s(oae);XYe=r(XJr,"reformer"),XJr.forEach(t),zYe=r(SAe," \u2014 "),lR=n(SAe,"A",{href:!0});var zJr=s(lR);WYe=r(zJr,"ReformerConfig"),zJr.forEach(t),QYe=r(SAe," (Reformer model)"),SAe.forEach(t),HYe=i(y),Km=n(y,"LI",{});var RAe=s(Km);rae=n(RAe,"STRONG",{});var WJr=s(rae);UYe=r(WJr,"regnet"),WJr.forEach(t),JYe=r(RAe," \u2014 "),iR=n(RAe,"A",{href:!0});var QJr=s(iR);YYe=r(QJr,"RegNetConfig"),QJr.forEach(t),KYe=r(RAe," (RegNet model)"),RAe.forEach(t),ZYe=i(y),Zm=n(y,"LI",{});var PAe=s(Zm);tae=n(PAe,"STRONG",{});var HJr=s(tae);eKe=r(HJr,"rembert"),HJr.forEach(t),oKe=r(PAe," \u2014 "),dR=n(PAe,"A",{href:!0});var UJr=s(dR);rKe=r(UJr,"RemBertConfig"),UJr.forEach(t),tKe=r(PAe," (RemBERT model)"),PAe.forEach(t),aKe=i(y),eg=n(y,"LI",{});var BAe=s(eg);aae=n(BAe,"STRONG",{});var JJr=s(aae);nKe=r(JJr,"resnet"),JJr.forEach(t),sKe=r(BAe," \u2014 "),cR=n(BAe,"A",{href:!0});var YJr=s(cR);lKe=r(YJr,"ResNetConfig"),YJr.forEach(t),iKe=r(BAe," (ResNet model)"),BAe.forEach(t),dKe=i(y),og=n(y,"LI",{});var IAe=s(og);nae=n(IAe,"STRONG",{});var KJr=s(nae);cKe=r(KJr,"retribert"),KJr.forEach(t),fKe=r(IAe," \u2014 "),fR=n(IAe,"A",{href:!0});var ZJr=s(fR);mKe=r(ZJr,"RetriBertConfig"),ZJr.forEach(t),gKe=r(IAe," (RetriBERT model)"),IAe.forEach(t),hKe=i(y),rg=n(y,"LI",{});var NAe=s(rg);sae=n(NAe,"STRONG",{});var eYr=s(sae);pKe=r(eYr,"roberta"),eYr.forEach(t),uKe=r(NAe," \u2014 "),mR=n(NAe,"A",{href:!0});var oYr=s(mR);_Ke=r(oYr,"RobertaConfig"),oYr.forEach(t),bKe=r(NAe," (RoBERTa model)"),NAe.forEach(t),vKe=i(y),tg=n(y,"LI",{});var qAe=s(tg);lae=n(qAe,"STRONG",{});var rYr=s(lae);FKe=r(rYr,"roformer"),rYr.forEach(t),TKe=r(qAe," \u2014 "),gR=n(qAe,"A",{href:!0});var tYr=s(gR);MKe=r(tYr,"RoFormerConfig"),tYr.forEach(t),EKe=r(qAe," (RoFormer model)"),qAe.forEach(t),CKe=i(y),ag=n(y,"LI",{});var jAe=s(ag);iae=n(jAe,"STRONG",{});var aYr=s(iae);wKe=r(aYr,"segformer"),aYr.forEach(t),AKe=r(jAe," \u2014 "),hR=n(jAe,"A",{href:!0});var nYr=s(hR);yKe=r(nYr,"SegformerConfig"),nYr.forEach(t),LKe=r(jAe," (SegFormer model)"),jAe.forEach(t),xKe=i(y),ng=n(y,"LI",{});var DAe=s(ng);dae=n(DAe,"STRONG",{});var sYr=s(dae);$Ke=r(sYr,"sew"),sYr.forEach(t),kKe=r(DAe," \u2014 "),pR=n(DAe,"A",{href:!0});var lYr=s(pR);SKe=r(lYr,"SEWConfig"),lYr.forEach(t),RKe=r(DAe," (SEW model)"),DAe.forEach(t),PKe=i(y),sg=n(y,"LI",{});var GAe=s(sg);cae=n(GAe,"STRONG",{});var iYr=s(cae);BKe=r(iYr,"sew-d"),iYr.forEach(t),IKe=r(GAe," \u2014 "),uR=n(GAe,"A",{href:!0});var dYr=s(uR);NKe=r(dYr,"SEWDConfig"),dYr.forEach(t),qKe=r(GAe," (SEW-D model)"),GAe.forEach(t),jKe=i(y),lg=n(y,"LI",{});var OAe=s(lg);fae=n(OAe,"STRONG",{});var cYr=s(fae);DKe=r(cYr,"speech-encoder-decoder"),cYr.forEach(t),GKe=r(OAe," \u2014 "),_R=n(OAe,"A",{href:!0});var fYr=s(_R);OKe=r(fYr,"SpeechEncoderDecoderConfig"),fYr.forEach(t),VKe=r(OAe," (Speech Encoder decoder model)"),OAe.forEach(t),XKe=i(y),ig=n(y,"LI",{});var VAe=s(ig);mae=n(VAe,"STRONG",{});var mYr=s(mae);zKe=r(mYr,"speech_to_text"),mYr.forEach(t),WKe=r(VAe," \u2014 "),bR=n(VAe,"A",{href:!0});var gYr=s(bR);QKe=r(gYr,"Speech2TextConfig"),gYr.forEach(t),HKe=r(VAe," (Speech2Text model)"),VAe.forEach(t),UKe=i(y),dg=n(y,"LI",{});var XAe=s(dg);gae=n(XAe,"STRONG",{});var hYr=s(gae);JKe=r(hYr,"speech_to_text_2"),hYr.forEach(t),YKe=r(XAe," \u2014 "),vR=n(XAe,"A",{href:!0});var pYr=s(vR);KKe=r(pYr,"Speech2Text2Config"),pYr.forEach(t),ZKe=r(XAe," (Speech2Text2 model)"),XAe.forEach(t),eZe=i(y),cg=n(y,"LI",{});var zAe=s(cg);hae=n(zAe,"STRONG",{});var uYr=s(hae);oZe=r(uYr,"splinter"),uYr.forEach(t),rZe=r(zAe," \u2014 "),FR=n(zAe,"A",{href:!0});var _Yr=s(FR);tZe=r(_Yr,"SplinterConfig"),_Yr.forEach(t),aZe=r(zAe," (Splinter model)"),zAe.forEach(t),nZe=i(y),fg=n(y,"LI",{});var WAe=s(fg);pae=n(WAe,"STRONG",{});var bYr=s(pae);sZe=r(bYr,"squeezebert"),bYr.forEach(t),lZe=r(WAe," \u2014 "),TR=n(WAe,"A",{href:!0});var vYr=s(TR);iZe=r(vYr,"SqueezeBertConfig"),vYr.forEach(t),dZe=r(WAe," (SqueezeBERT model)"),WAe.forEach(t),cZe=i(y),mg=n(y,"LI",{});var QAe=s(mg);uae=n(QAe,"STRONG",{});var FYr=s(uae);fZe=r(FYr,"swin"),FYr.forEach(t),mZe=r(QAe," \u2014 "),MR=n(QAe,"A",{href:!0});var TYr=s(MR);gZe=r(TYr,"SwinConfig"),TYr.forEach(t),hZe=r(QAe," (Swin Transformer model)"),QAe.forEach(t),pZe=i(y),gg=n(y,"LI",{});var HAe=s(gg);_ae=n(HAe,"STRONG",{});var MYr=s(_ae);uZe=r(MYr,"t5"),MYr.forEach(t),_Ze=r(HAe," \u2014 "),ER=n(HAe,"A",{href:!0});var EYr=s(ER);bZe=r(EYr,"T5Config"),EYr.forEach(t),vZe=r(HAe," (T5 model)"),HAe.forEach(t),FZe=i(y),hg=n(y,"LI",{});var UAe=s(hg);bae=n(UAe,"STRONG",{});var CYr=s(bae);TZe=r(CYr,"tapas"),CYr.forEach(t),MZe=r(UAe," \u2014 "),CR=n(UAe,"A",{href:!0});var wYr=s(CR);EZe=r(wYr,"TapasConfig"),wYr.forEach(t),CZe=r(UAe," (TAPAS model)"),UAe.forEach(t),wZe=i(y),pg=n(y,"LI",{});var JAe=s(pg);vae=n(JAe,"STRONG",{});var AYr=s(vae);AZe=r(AYr,"trajectory_transformer"),AYr.forEach(t),yZe=r(JAe," \u2014 "),wR=n(JAe,"A",{href:!0});var yYr=s(wR);LZe=r(yYr,"TrajectoryTransformerConfig"),yYr.forEach(t),xZe=r(JAe," (Trajectory Transformer model)"),JAe.forEach(t),$Ze=i(y),ug=n(y,"LI",{});var YAe=s(ug);Fae=n(YAe,"STRONG",{});var LYr=s(Fae);kZe=r(LYr,"transfo-xl"),LYr.forEach(t),SZe=r(YAe," \u2014 "),AR=n(YAe,"A",{href:!0});var xYr=s(AR);RZe=r(xYr,"TransfoXLConfig"),xYr.forEach(t),PZe=r(YAe," (Transformer-XL model)"),YAe.forEach(t),BZe=i(y),_g=n(y,"LI",{});var KAe=s(_g);Tae=n(KAe,"STRONG",{});var $Yr=s(Tae);IZe=r($Yr,"trocr"),$Yr.forEach(t),NZe=r(KAe," \u2014 "),yR=n(KAe,"A",{href:!0});var kYr=s(yR);qZe=r(kYr,"TrOCRConfig"),kYr.forEach(t),jZe=r(KAe," (TrOCR model)"),KAe.forEach(t),DZe=i(y),bg=n(y,"LI",{});var ZAe=s(bg);Mae=n(ZAe,"STRONG",{});var SYr=s(Mae);GZe=r(SYr,"unispeech"),SYr.forEach(t),OZe=r(ZAe," \u2014 "),LR=n(ZAe,"A",{href:!0});var RYr=s(LR);VZe=r(RYr,"UniSpeechConfig"),RYr.forEach(t),XZe=r(ZAe," (UniSpeech model)"),ZAe.forEach(t),zZe=i(y),vg=n(y,"LI",{});var e6e=s(vg);Eae=n(e6e,"STRONG",{});var PYr=s(Eae);WZe=r(PYr,"unispeech-sat"),PYr.forEach(t),QZe=r(e6e," \u2014 "),xR=n(e6e,"A",{href:!0});var BYr=s(xR);HZe=r(BYr,"UniSpeechSatConfig"),BYr.forEach(t),UZe=r(e6e," (UniSpeechSat model)"),e6e.forEach(t),JZe=i(y),Fg=n(y,"LI",{});var o6e=s(Fg);Cae=n(o6e,"STRONG",{});var IYr=s(Cae);YZe=r(IYr,"van"),IYr.forEach(t),KZe=r(o6e," \u2014 "),$R=n(o6e,"A",{href:!0});var NYr=s($R);ZZe=r(NYr,"VanConfig"),NYr.forEach(t),eeo=r(o6e," (VAN model)"),o6e.forEach(t),oeo=i(y),Tg=n(y,"LI",{});var r6e=s(Tg);wae=n(r6e,"STRONG",{});var qYr=s(wae);reo=r(qYr,"vilt"),qYr.forEach(t),teo=r(r6e," \u2014 "),kR=n(r6e,"A",{href:!0});var jYr=s(kR);aeo=r(jYr,"ViltConfig"),jYr.forEach(t),neo=r(r6e," (ViLT model)"),r6e.forEach(t),seo=i(y),Mg=n(y,"LI",{});var t6e=s(Mg);Aae=n(t6e,"STRONG",{});var DYr=s(Aae);leo=r(DYr,"vision-encoder-decoder"),DYr.forEach(t),ieo=r(t6e," \u2014 "),SR=n(t6e,"A",{href:!0});var GYr=s(SR);deo=r(GYr,"VisionEncoderDecoderConfig"),GYr.forEach(t),ceo=r(t6e," (Vision Encoder decoder model)"),t6e.forEach(t),feo=i(y),Eg=n(y,"LI",{});var a6e=s(Eg);yae=n(a6e,"STRONG",{});var OYr=s(yae);meo=r(OYr,"vision-text-dual-encoder"),OYr.forEach(t),geo=r(a6e," \u2014 "),RR=n(a6e,"A",{href:!0});var VYr=s(RR);heo=r(VYr,"VisionTextDualEncoderConfig"),VYr.forEach(t),peo=r(a6e," (VisionTextDualEncoder model)"),a6e.forEach(t),ueo=i(y),Cg=n(y,"LI",{});var n6e=s(Cg);Lae=n(n6e,"STRONG",{});var XYr=s(Lae);_eo=r(XYr,"visual_bert"),XYr.forEach(t),beo=r(n6e," \u2014 "),PR=n(n6e,"A",{href:!0});var zYr=s(PR);veo=r(zYr,"VisualBertConfig"),zYr.forEach(t),Feo=r(n6e," (VisualBERT model)"),n6e.forEach(t),Teo=i(y),wg=n(y,"LI",{});var s6e=s(wg);xae=n(s6e,"STRONG",{});var WYr=s(xae);Meo=r(WYr,"vit"),WYr.forEach(t),Eeo=r(s6e," \u2014 "),BR=n(s6e,"A",{href:!0});var QYr=s(BR);Ceo=r(QYr,"ViTConfig"),QYr.forEach(t),weo=r(s6e," (ViT model)"),s6e.forEach(t),Aeo=i(y),Ag=n(y,"LI",{});var l6e=s(Ag);$ae=n(l6e,"STRONG",{});var HYr=s($ae);yeo=r(HYr,"vit_mae"),HYr.forEach(t),Leo=r(l6e," \u2014 "),IR=n(l6e,"A",{href:!0});var UYr=s(IR);xeo=r(UYr,"ViTMAEConfig"),UYr.forEach(t),$eo=r(l6e," (ViTMAE model)"),l6e.forEach(t),keo=i(y),yg=n(y,"LI",{});var i6e=s(yg);kae=n(i6e,"STRONG",{});var JYr=s(kae);Seo=r(JYr,"wav2vec2"),JYr.forEach(t),Reo=r(i6e," \u2014 "),NR=n(i6e,"A",{href:!0});var YYr=s(NR);Peo=r(YYr,"Wav2Vec2Config"),YYr.forEach(t),Beo=r(i6e," (Wav2Vec2 model)"),i6e.forEach(t),Ieo=i(y),Lg=n(y,"LI",{});var d6e=s(Lg);Sae=n(d6e,"STRONG",{});var KYr=s(Sae);Neo=r(KYr,"wav2vec2-conformer"),KYr.forEach(t),qeo=r(d6e," \u2014 "),qR=n(d6e,"A",{href:!0});var ZYr=s(qR);jeo=r(ZYr,"Wav2Vec2ConformerConfig"),ZYr.forEach(t),Deo=r(d6e," (Wav2Vec2-Conformer model)"),d6e.forEach(t),Geo=i(y),xg=n(y,"LI",{});var c6e=s(xg);Rae=n(c6e,"STRONG",{});var eKr=s(Rae);Oeo=r(eKr,"wavlm"),eKr.forEach(t),Veo=r(c6e," \u2014 "),jR=n(c6e,"A",{href:!0});var oKr=s(jR);Xeo=r(oKr,"WavLMConfig"),oKr.forEach(t),zeo=r(c6e," (WavLM model)"),c6e.forEach(t),Weo=i(y),$g=n(y,"LI",{});var f6e=s($g);Pae=n(f6e,"STRONG",{});var rKr=s(Pae);Qeo=r(rKr,"xglm"),rKr.forEach(t),Heo=r(f6e," \u2014 "),DR=n(f6e,"A",{href:!0});var tKr=s(DR);Ueo=r(tKr,"XGLMConfig"),tKr.forEach(t),Jeo=r(f6e," (XGLM model)"),f6e.forEach(t),Yeo=i(y),kg=n(y,"LI",{});var m6e=s(kg);Bae=n(m6e,"STRONG",{});var aKr=s(Bae);Keo=r(aKr,"xlm"),aKr.forEach(t),Zeo=r(m6e," \u2014 "),GR=n(m6e,"A",{href:!0});var nKr=s(GR);eoo=r(nKr,"XLMConfig"),nKr.forEach(t),ooo=r(m6e," (XLM model)"),m6e.forEach(t),roo=i(y),Sg=n(y,"LI",{});var g6e=s(Sg);Iae=n(g6e,"STRONG",{});var sKr=s(Iae);too=r(sKr,"xlm-prophetnet"),sKr.forEach(t),aoo=r(g6e," \u2014 "),OR=n(g6e,"A",{href:!0});var lKr=s(OR);noo=r(lKr,"XLMProphetNetConfig"),lKr.forEach(t),soo=r(g6e," (XLM-ProphetNet model)"),g6e.forEach(t),loo=i(y),Rg=n(y,"LI",{});var h6e=s(Rg);Nae=n(h6e,"STRONG",{});var iKr=s(Nae);ioo=r(iKr,"xlm-roberta"),iKr.forEach(t),doo=r(h6e," \u2014 "),VR=n(h6e,"A",{href:!0});var dKr=s(VR);coo=r(dKr,"XLMRobertaConfig"),dKr.forEach(t),foo=r(h6e," (XLM-RoBERTa model)"),h6e.forEach(t),moo=i(y),Pg=n(y,"LI",{});var p6e=s(Pg);qae=n(p6e,"STRONG",{});var cKr=s(qae);goo=r(cKr,"xlm-roberta-xl"),cKr.forEach(t),hoo=r(p6e," \u2014 "),XR=n(p6e,"A",{href:!0});var fKr=s(XR);poo=r(fKr,"XLMRobertaXLConfig"),fKr.forEach(t),uoo=r(p6e," (XLM-RoBERTa-XL model)"),p6e.forEach(t),_oo=i(y),Bg=n(y,"LI",{});var u6e=s(Bg);jae=n(u6e,"STRONG",{});var mKr=s(jae);boo=r(mKr,"xlnet"),mKr.forEach(t),voo=r(u6e," \u2014 "),zR=n(u6e,"A",{href:!0});var gKr=s(zR);Foo=r(gKr,"XLNetConfig"),gKr.forEach(t),Too=r(u6e," (XLNet model)"),u6e.forEach(t),Moo=i(y),Ig=n(y,"LI",{});var _6e=s(Ig);Dae=n(_6e,"STRONG",{});var hKr=s(Dae);Eoo=r(hKr,"yolos"),hKr.forEach(t),Coo=r(_6e," \u2014 "),WR=n(_6e,"A",{href:!0});var pKr=s(WR);woo=r(pKr,"YolosConfig"),pKr.forEach(t),Aoo=r(_6e," (YOLOS model)"),_6e.forEach(t),yoo=i(y),Ng=n(y,"LI",{});var b6e=s(Ng);Gae=n(b6e,"STRONG",{});var uKr=s(Gae);Loo=r(uKr,"yoso"),uKr.forEach(t),xoo=r(b6e," \u2014 "),QR=n(b6e,"A",{href:!0});var _Kr=s(QR);$oo=r(_Kr,"YosoConfig"),_Kr.forEach(t),koo=r(b6e," (YOSO model)"),b6e.forEach(t),y.forEach(t),Soo=i(at),T(qg.$$.fragment,at),at.forEach(t),Roo=i(tt),jg=n(tt,"DIV",{class:!0});var xOe=s(jg);T(vy.$$.fragment,xOe),Poo=i(xOe),Oae=n(xOe,"P",{});var bKr=s(Oae);Boo=r(bKr,"Register a new configuration for this class."),bKr.forEach(t),xOe.forEach(t),tt.forEach(t),$De=i(f),$i=n(f,"H2",{class:!0});var $Oe=s($i);Dg=n($Oe,"A",{id:!0,class:!0,href:!0});var vKr=s(Dg);Vae=n(vKr,"SPAN",{});var FKr=s(Vae);T(Fy.$$.fragment,FKr),FKr.forEach(t),vKr.forEach(t),Ioo=i($Oe),Xae=n($Oe,"SPAN",{});var TKr=s(Xae);Noo=r(TKr,"AutoTokenizer"),TKr.forEach(t),$Oe.forEach(t),kDe=i(f),Ao=n(f,"DIV",{class:!0});var Xs=s(Ao);T(Ty.$$.fragment,Xs),qoo=i(Xs),My=n(Xs,"P",{});var kOe=s(My);joo=r(kOe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),HR=n(kOe,"A",{href:!0});var MKr=s(HR);Doo=r(MKr,"AutoTokenizer.from_pretrained()"),MKr.forEach(t),Goo=r(kOe," class method."),kOe.forEach(t),Ooo=i(Xs),Ey=n(Xs,"P",{});var SOe=s(Ey);Voo=r(SOe,"This class cannot be instantiated directly using "),zae=n(SOe,"CODE",{});var EKr=s(zae);Xoo=r(EKr,"__init__()"),EKr.forEach(t),zoo=r(SOe," (throws an error)."),SOe.forEach(t),Woo=i(Xs),Ar=n(Xs,"DIV",{class:!0});var zs=s(Ar);T(Cy.$$.fragment,zs),Qoo=i(zs),Wae=n(zs,"P",{});var CKr=s(Wae);Hoo=r(CKr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),CKr.forEach(t),Uoo=i(zs),ka=n(zs,"P",{});var gA=s(ka);Joo=r(gA,"The tokenizer class to instantiate is selected based on the "),Qae=n(gA,"CODE",{});var wKr=s(Qae);Yoo=r(wKr,"model_type"),wKr.forEach(t),Koo=r(gA,` property of the config object (either
passed as an argument or loaded from `),Hae=n(gA,"CODE",{});var AKr=s(Hae);Zoo=r(AKr,"pretrained_model_name_or_path"),AKr.forEach(t),ero=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uae=n(gA,"CODE",{});var yKr=s(Uae);oro=r(yKr,"pretrained_model_name_or_path"),yKr.forEach(t),rro=r(gA,":"),gA.forEach(t),tro=i(zs),k=n(zs,"UL",{});var S=s(k);Nn=n(S,"LI",{});var $$=s(Nn);Jae=n($$,"STRONG",{});var LKr=s(Jae);aro=r(LKr,"albert"),LKr.forEach(t),nro=r($$," \u2014 "),UR=n($$,"A",{href:!0});var xKr=s(UR);sro=r(xKr,"AlbertTokenizer"),xKr.forEach(t),lro=r($$," or "),JR=n($$,"A",{href:!0});var $Kr=s(JR);iro=r($Kr,"AlbertTokenizerFast"),$Kr.forEach(t),dro=r($$," (ALBERT model)"),$$.forEach(t),cro=i(S),qn=n(S,"LI",{});var k$=s(qn);Yae=n(k$,"STRONG",{});var kKr=s(Yae);fro=r(kKr,"bart"),kKr.forEach(t),mro=r(k$," \u2014 "),YR=n(k$,"A",{href:!0});var SKr=s(YR);gro=r(SKr,"BartTokenizer"),SKr.forEach(t),hro=r(k$," or "),KR=n(k$,"A",{href:!0});var RKr=s(KR);pro=r(RKr,"BartTokenizerFast"),RKr.forEach(t),uro=r(k$," (BART model)"),k$.forEach(t),_ro=i(S),jn=n(S,"LI",{});var S$=s(jn);Kae=n(S$,"STRONG",{});var PKr=s(Kae);bro=r(PKr,"barthez"),PKr.forEach(t),vro=r(S$," \u2014 "),ZR=n(S$,"A",{href:!0});var BKr=s(ZR);Fro=r(BKr,"BarthezTokenizer"),BKr.forEach(t),Tro=r(S$," or "),eP=n(S$,"A",{href:!0});var IKr=s(eP);Mro=r(IKr,"BarthezTokenizerFast"),IKr.forEach(t),Ero=r(S$," (BARThez model)"),S$.forEach(t),Cro=i(S),Gg=n(S,"LI",{});var v6e=s(Gg);Zae=n(v6e,"STRONG",{});var NKr=s(Zae);wro=r(NKr,"bartpho"),NKr.forEach(t),Aro=r(v6e," \u2014 "),oP=n(v6e,"A",{href:!0});var qKr=s(oP);yro=r(qKr,"BartphoTokenizer"),qKr.forEach(t),Lro=r(v6e," (BARTpho model)"),v6e.forEach(t),xro=i(S),Dn=n(S,"LI",{});var R$=s(Dn);ene=n(R$,"STRONG",{});var jKr=s(ene);$ro=r(jKr,"bert"),jKr.forEach(t),kro=r(R$," \u2014 "),rP=n(R$,"A",{href:!0});var DKr=s(rP);Sro=r(DKr,"BertTokenizer"),DKr.forEach(t),Rro=r(R$," or "),tP=n(R$,"A",{href:!0});var GKr=s(tP);Pro=r(GKr,"BertTokenizerFast"),GKr.forEach(t),Bro=r(R$," (BERT model)"),R$.forEach(t),Iro=i(S),Og=n(S,"LI",{});var F6e=s(Og);one=n(F6e,"STRONG",{});var OKr=s(one);Nro=r(OKr,"bert-generation"),OKr.forEach(t),qro=r(F6e," \u2014 "),aP=n(F6e,"A",{href:!0});var VKr=s(aP);jro=r(VKr,"BertGenerationTokenizer"),VKr.forEach(t),Dro=r(F6e," (Bert Generation model)"),F6e.forEach(t),Gro=i(S),Vg=n(S,"LI",{});var T6e=s(Vg);rne=n(T6e,"STRONG",{});var XKr=s(rne);Oro=r(XKr,"bert-japanese"),XKr.forEach(t),Vro=r(T6e," \u2014 "),nP=n(T6e,"A",{href:!0});var zKr=s(nP);Xro=r(zKr,"BertJapaneseTokenizer"),zKr.forEach(t),zro=r(T6e," (BertJapanese model)"),T6e.forEach(t),Wro=i(S),Xg=n(S,"LI",{});var M6e=s(Xg);tne=n(M6e,"STRONG",{});var WKr=s(tne);Qro=r(WKr,"bertweet"),WKr.forEach(t),Hro=r(M6e," \u2014 "),sP=n(M6e,"A",{href:!0});var QKr=s(sP);Uro=r(QKr,"BertweetTokenizer"),QKr.forEach(t),Jro=r(M6e," (BERTweet model)"),M6e.forEach(t),Yro=i(S),Gn=n(S,"LI",{});var P$=s(Gn);ane=n(P$,"STRONG",{});var HKr=s(ane);Kro=r(HKr,"big_bird"),HKr.forEach(t),Zro=r(P$," \u2014 "),lP=n(P$,"A",{href:!0});var UKr=s(lP);eto=r(UKr,"BigBirdTokenizer"),UKr.forEach(t),oto=r(P$," or "),iP=n(P$,"A",{href:!0});var JKr=s(iP);rto=r(JKr,"BigBirdTokenizerFast"),JKr.forEach(t),tto=r(P$," (BigBird model)"),P$.forEach(t),ato=i(S),On=n(S,"LI",{});var B$=s(On);nne=n(B$,"STRONG",{});var YKr=s(nne);nto=r(YKr,"bigbird_pegasus"),YKr.forEach(t),sto=r(B$," \u2014 "),dP=n(B$,"A",{href:!0});var KKr=s(dP);lto=r(KKr,"PegasusTokenizer"),KKr.forEach(t),ito=r(B$," or "),cP=n(B$,"A",{href:!0});var ZKr=s(cP);dto=r(ZKr,"PegasusTokenizerFast"),ZKr.forEach(t),cto=r(B$," (BigBird-Pegasus model)"),B$.forEach(t),fto=i(S),Vn=n(S,"LI",{});var I$=s(Vn);sne=n(I$,"STRONG",{});var eZr=s(sne);mto=r(eZr,"blenderbot"),eZr.forEach(t),gto=r(I$," \u2014 "),fP=n(I$,"A",{href:!0});var oZr=s(fP);hto=r(oZr,"BlenderbotTokenizer"),oZr.forEach(t),pto=r(I$," or "),mP=n(I$,"A",{href:!0});var rZr=s(mP);uto=r(rZr,"BlenderbotTokenizerFast"),rZr.forEach(t),_to=r(I$," (Blenderbot model)"),I$.forEach(t),bto=i(S),zg=n(S,"LI",{});var E6e=s(zg);lne=n(E6e,"STRONG",{});var tZr=s(lne);vto=r(tZr,"blenderbot-small"),tZr.forEach(t),Fto=r(E6e," \u2014 "),gP=n(E6e,"A",{href:!0});var aZr=s(gP);Tto=r(aZr,"BlenderbotSmallTokenizer"),aZr.forEach(t),Mto=r(E6e," (BlenderbotSmall model)"),E6e.forEach(t),Eto=i(S),Wg=n(S,"LI",{});var C6e=s(Wg);ine=n(C6e,"STRONG",{});var nZr=s(ine);Cto=r(nZr,"bloom"),nZr.forEach(t),wto=r(C6e," \u2014 "),hP=n(C6e,"A",{href:!0});var sZr=s(hP);Ato=r(sZr,"BloomTokenizerFast"),sZr.forEach(t),yto=r(C6e," (BLOOM model)"),C6e.forEach(t),Lto=i(S),Qg=n(S,"LI",{});var w6e=s(Qg);dne=n(w6e,"STRONG",{});var lZr=s(dne);xto=r(lZr,"byt5"),lZr.forEach(t),$to=r(w6e," \u2014 "),pP=n(w6e,"A",{href:!0});var iZr=s(pP);kto=r(iZr,"ByT5Tokenizer"),iZr.forEach(t),Sto=r(w6e," (ByT5 model)"),w6e.forEach(t),Rto=i(S),Xn=n(S,"LI",{});var N$=s(Xn);cne=n(N$,"STRONG",{});var dZr=s(cne);Pto=r(dZr,"camembert"),dZr.forEach(t),Bto=r(N$," \u2014 "),uP=n(N$,"A",{href:!0});var cZr=s(uP);Ito=r(cZr,"CamembertTokenizer"),cZr.forEach(t),Nto=r(N$," or "),_P=n(N$,"A",{href:!0});var fZr=s(_P);qto=r(fZr,"CamembertTokenizerFast"),fZr.forEach(t),jto=r(N$," (CamemBERT model)"),N$.forEach(t),Dto=i(S),Hg=n(S,"LI",{});var A6e=s(Hg);fne=n(A6e,"STRONG",{});var mZr=s(fne);Gto=r(mZr,"canine"),mZr.forEach(t),Oto=r(A6e," \u2014 "),bP=n(A6e,"A",{href:!0});var gZr=s(bP);Vto=r(gZr,"CanineTokenizer"),gZr.forEach(t),Xto=r(A6e," (CANINE model)"),A6e.forEach(t),zto=i(S),zn=n(S,"LI",{});var q$=s(zn);mne=n(q$,"STRONG",{});var hZr=s(mne);Wto=r(hZr,"clip"),hZr.forEach(t),Qto=r(q$," \u2014 "),vP=n(q$,"A",{href:!0});var pZr=s(vP);Hto=r(pZr,"CLIPTokenizer"),pZr.forEach(t),Uto=r(q$," or "),FP=n(q$,"A",{href:!0});var uZr=s(FP);Jto=r(uZr,"CLIPTokenizerFast"),uZr.forEach(t),Yto=r(q$," (CLIP model)"),q$.forEach(t),Kto=i(S),Wn=n(S,"LI",{});var j$=s(Wn);gne=n(j$,"STRONG",{});var _Zr=s(gne);Zto=r(_Zr,"convbert"),_Zr.forEach(t),eao=r(j$," \u2014 "),TP=n(j$,"A",{href:!0});var bZr=s(TP);oao=r(bZr,"ConvBertTokenizer"),bZr.forEach(t),rao=r(j$," or "),MP=n(j$,"A",{href:!0});var vZr=s(MP);tao=r(vZr,"ConvBertTokenizerFast"),vZr.forEach(t),aao=r(j$," (ConvBERT model)"),j$.forEach(t),nao=i(S),Qn=n(S,"LI",{});var D$=s(Qn);hne=n(D$,"STRONG",{});var FZr=s(hne);sao=r(FZr,"cpm"),FZr.forEach(t),lao=r(D$," \u2014 "),EP=n(D$,"A",{href:!0});var TZr=s(EP);iao=r(TZr,"CpmTokenizer"),TZr.forEach(t),dao=r(D$," or "),CP=n(D$,"A",{href:!0});var MZr=s(CP);cao=r(MZr,"CpmTokenizerFast"),MZr.forEach(t),fao=r(D$," (CPM model)"),D$.forEach(t),mao=i(S),Ug=n(S,"LI",{});var y6e=s(Ug);pne=n(y6e,"STRONG",{});var EZr=s(pne);gao=r(EZr,"ctrl"),EZr.forEach(t),hao=r(y6e," \u2014 "),wP=n(y6e,"A",{href:!0});var CZr=s(wP);pao=r(CZr,"CTRLTokenizer"),CZr.forEach(t),uao=r(y6e," (CTRL model)"),y6e.forEach(t),_ao=i(S),Hn=n(S,"LI",{});var G$=s(Hn);une=n(G$,"STRONG",{});var wZr=s(une);bao=r(wZr,"data2vec-text"),wZr.forEach(t),vao=r(G$," \u2014 "),AP=n(G$,"A",{href:!0});var AZr=s(AP);Fao=r(AZr,"RobertaTokenizer"),AZr.forEach(t),Tao=r(G$," or "),yP=n(G$,"A",{href:!0});var yZr=s(yP);Mao=r(yZr,"RobertaTokenizerFast"),yZr.forEach(t),Eao=r(G$," (Data2VecText model)"),G$.forEach(t),Cao=i(S),Un=n(S,"LI",{});var O$=s(Un);_ne=n(O$,"STRONG",{});var LZr=s(_ne);wao=r(LZr,"deberta"),LZr.forEach(t),Aao=r(O$," \u2014 "),LP=n(O$,"A",{href:!0});var xZr=s(LP);yao=r(xZr,"DebertaTokenizer"),xZr.forEach(t),Lao=r(O$," or "),xP=n(O$,"A",{href:!0});var $Zr=s(xP);xao=r($Zr,"DebertaTokenizerFast"),$Zr.forEach(t),$ao=r(O$," (DeBERTa model)"),O$.forEach(t),kao=i(S),Jn=n(S,"LI",{});var V$=s(Jn);bne=n(V$,"STRONG",{});var kZr=s(bne);Sao=r(kZr,"deberta-v2"),kZr.forEach(t),Rao=r(V$," \u2014 "),$P=n(V$,"A",{href:!0});var SZr=s($P);Pao=r(SZr,"DebertaV2Tokenizer"),SZr.forEach(t),Bao=r(V$," or "),kP=n(V$,"A",{href:!0});var RZr=s(kP);Iao=r(RZr,"DebertaV2TokenizerFast"),RZr.forEach(t),Nao=r(V$," (DeBERTa-v2 model)"),V$.forEach(t),qao=i(S),Yn=n(S,"LI",{});var X$=s(Yn);vne=n(X$,"STRONG",{});var PZr=s(vne);jao=r(PZr,"distilbert"),PZr.forEach(t),Dao=r(X$," \u2014 "),SP=n(X$,"A",{href:!0});var BZr=s(SP);Gao=r(BZr,"DistilBertTokenizer"),BZr.forEach(t),Oao=r(X$," or "),RP=n(X$,"A",{href:!0});var IZr=s(RP);Vao=r(IZr,"DistilBertTokenizerFast"),IZr.forEach(t),Xao=r(X$," (DistilBERT model)"),X$.forEach(t),zao=i(S),Kn=n(S,"LI",{});var z$=s(Kn);Fne=n(z$,"STRONG",{});var NZr=s(Fne);Wao=r(NZr,"dpr"),NZr.forEach(t),Qao=r(z$," \u2014 "),PP=n(z$,"A",{href:!0});var qZr=s(PP);Hao=r(qZr,"DPRQuestionEncoderTokenizer"),qZr.forEach(t),Uao=r(z$," or "),BP=n(z$,"A",{href:!0});var jZr=s(BP);Jao=r(jZr,"DPRQuestionEncoderTokenizerFast"),jZr.forEach(t),Yao=r(z$," (DPR model)"),z$.forEach(t),Kao=i(S),Zn=n(S,"LI",{});var W$=s(Zn);Tne=n(W$,"STRONG",{});var DZr=s(Tne);Zao=r(DZr,"electra"),DZr.forEach(t),eno=r(W$," \u2014 "),IP=n(W$,"A",{href:!0});var GZr=s(IP);ono=r(GZr,"ElectraTokenizer"),GZr.forEach(t),rno=r(W$," or "),NP=n(W$,"A",{href:!0});var OZr=s(NP);tno=r(OZr,"ElectraTokenizerFast"),OZr.forEach(t),ano=r(W$," (ELECTRA model)"),W$.forEach(t),nno=i(S),Jg=n(S,"LI",{});var L6e=s(Jg);Mne=n(L6e,"STRONG",{});var VZr=s(Mne);sno=r(VZr,"flaubert"),VZr.forEach(t),lno=r(L6e," \u2014 "),qP=n(L6e,"A",{href:!0});var XZr=s(qP);ino=r(XZr,"FlaubertTokenizer"),XZr.forEach(t),dno=r(L6e," (FlauBERT model)"),L6e.forEach(t),cno=i(S),es=n(S,"LI",{});var Q$=s(es);Ene=n(Q$,"STRONG",{});var zZr=s(Ene);fno=r(zZr,"fnet"),zZr.forEach(t),mno=r(Q$," \u2014 "),jP=n(Q$,"A",{href:!0});var WZr=s(jP);gno=r(WZr,"FNetTokenizer"),WZr.forEach(t),hno=r(Q$," or "),DP=n(Q$,"A",{href:!0});var QZr=s(DP);pno=r(QZr,"FNetTokenizerFast"),QZr.forEach(t),uno=r(Q$," (FNet model)"),Q$.forEach(t),_no=i(S),Yg=n(S,"LI",{});var x6e=s(Yg);Cne=n(x6e,"STRONG",{});var HZr=s(Cne);bno=r(HZr,"fsmt"),HZr.forEach(t),vno=r(x6e," \u2014 "),GP=n(x6e,"A",{href:!0});var UZr=s(GP);Fno=r(UZr,"FSMTTokenizer"),UZr.forEach(t),Tno=r(x6e," (FairSeq Machine-Translation model)"),x6e.forEach(t),Mno=i(S),os=n(S,"LI",{});var H$=s(os);wne=n(H$,"STRONG",{});var JZr=s(wne);Eno=r(JZr,"funnel"),JZr.forEach(t),Cno=r(H$," \u2014 "),OP=n(H$,"A",{href:!0});var YZr=s(OP);wno=r(YZr,"FunnelTokenizer"),YZr.forEach(t),Ano=r(H$," or "),VP=n(H$,"A",{href:!0});var KZr=s(VP);yno=r(KZr,"FunnelTokenizerFast"),KZr.forEach(t),Lno=r(H$," (Funnel Transformer model)"),H$.forEach(t),xno=i(S),rs=n(S,"LI",{});var U$=s(rs);Ane=n(U$,"STRONG",{});var ZZr=s(Ane);$no=r(ZZr,"gpt2"),ZZr.forEach(t),kno=r(U$," \u2014 "),XP=n(U$,"A",{href:!0});var eet=s(XP);Sno=r(eet,"GPT2Tokenizer"),eet.forEach(t),Rno=r(U$," or "),zP=n(U$,"A",{href:!0});var oet=s(zP);Pno=r(oet,"GPT2TokenizerFast"),oet.forEach(t),Bno=r(U$," (OpenAI GPT-2 model)"),U$.forEach(t),Ino=i(S),ts=n(S,"LI",{});var J$=s(ts);yne=n(J$,"STRONG",{});var ret=s(yne);Nno=r(ret,"gpt_neo"),ret.forEach(t),qno=r(J$," \u2014 "),WP=n(J$,"A",{href:!0});var tet=s(WP);jno=r(tet,"GPT2Tokenizer"),tet.forEach(t),Dno=r(J$," or "),QP=n(J$,"A",{href:!0});var aet=s(QP);Gno=r(aet,"GPT2TokenizerFast"),aet.forEach(t),Ono=r(J$," (GPT Neo model)"),J$.forEach(t),Vno=i(S),Kg=n(S,"LI",{});var $6e=s(Kg);Lne=n($6e,"STRONG",{});var net=s(Lne);Xno=r(net,"gpt_neox"),net.forEach(t),zno=r($6e," \u2014 "),HP=n($6e,"A",{href:!0});var set=s(HP);Wno=r(set,"GPTNeoXTokenizerFast"),set.forEach(t),Qno=r($6e," (GPT NeoX model)"),$6e.forEach(t),Hno=i(S),as=n(S,"LI",{});var Y$=s(as);xne=n(Y$,"STRONG",{});var iet=s(xne);Uno=r(iet,"gptj"),iet.forEach(t),Jno=r(Y$," \u2014 "),UP=n(Y$,"A",{href:!0});var det=s(UP);Yno=r(det,"GPT2Tokenizer"),det.forEach(t),Kno=r(Y$," or "),JP=n(Y$,"A",{href:!0});var cet=s(JP);Zno=r(cet,"GPT2TokenizerFast"),cet.forEach(t),eso=r(Y$," (GPT-J model)"),Y$.forEach(t),oso=i(S),ns=n(S,"LI",{});var K$=s(ns);$ne=n(K$,"STRONG",{});var fet=s($ne);rso=r(fet,"herbert"),fet.forEach(t),tso=r(K$," \u2014 "),YP=n(K$,"A",{href:!0});var met=s(YP);aso=r(met,"HerbertTokenizer"),met.forEach(t),nso=r(K$," or "),KP=n(K$,"A",{href:!0});var get=s(KP);sso=r(get,"HerbertTokenizerFast"),get.forEach(t),lso=r(K$," (HerBERT model)"),K$.forEach(t),iso=i(S),Zg=n(S,"LI",{});var k6e=s(Zg);kne=n(k6e,"STRONG",{});var het=s(kne);dso=r(het,"hubert"),het.forEach(t),cso=r(k6e," \u2014 "),ZP=n(k6e,"A",{href:!0});var pet=s(ZP);fso=r(pet,"Wav2Vec2CTCTokenizer"),pet.forEach(t),mso=r(k6e," (Hubert model)"),k6e.forEach(t),gso=i(S),ss=n(S,"LI",{});var Z$=s(ss);Sne=n(Z$,"STRONG",{});var uet=s(Sne);hso=r(uet,"ibert"),uet.forEach(t),pso=r(Z$," \u2014 "),eB=n(Z$,"A",{href:!0});var _et=s(eB);uso=r(_et,"RobertaTokenizer"),_et.forEach(t),_so=r(Z$," or "),oB=n(Z$,"A",{href:!0});var bet=s(oB);bso=r(bet,"RobertaTokenizerFast"),bet.forEach(t),vso=r(Z$," (I-BERT model)"),Z$.forEach(t),Fso=i(S),ls=n(S,"LI",{});var ek=s(ls);Rne=n(ek,"STRONG",{});var vet=s(Rne);Tso=r(vet,"layoutlm"),vet.forEach(t),Mso=r(ek," \u2014 "),rB=n(ek,"A",{href:!0});var Fet=s(rB);Eso=r(Fet,"LayoutLMTokenizer"),Fet.forEach(t),Cso=r(ek," or "),tB=n(ek,"A",{href:!0});var Tet=s(tB);wso=r(Tet,"LayoutLMTokenizerFast"),Tet.forEach(t),Aso=r(ek," (LayoutLM model)"),ek.forEach(t),yso=i(S),is=n(S,"LI",{});var ok=s(is);Pne=n(ok,"STRONG",{});var Met=s(Pne);Lso=r(Met,"layoutlmv2"),Met.forEach(t),xso=r(ok," \u2014 "),aB=n(ok,"A",{href:!0});var Eet=s(aB);$so=r(Eet,"LayoutLMv2Tokenizer"),Eet.forEach(t),kso=r(ok," or "),nB=n(ok,"A",{href:!0});var Cet=s(nB);Sso=r(Cet,"LayoutLMv2TokenizerFast"),Cet.forEach(t),Rso=r(ok," (LayoutLMv2 model)"),ok.forEach(t),Pso=i(S),ds=n(S,"LI",{});var rk=s(ds);Bne=n(rk,"STRONG",{});var wet=s(Bne);Bso=r(wet,"layoutlmv3"),wet.forEach(t),Iso=r(rk," \u2014 "),sB=n(rk,"A",{href:!0});var Aet=s(sB);Nso=r(Aet,"LayoutLMv3Tokenizer"),Aet.forEach(t),qso=r(rk," or "),lB=n(rk,"A",{href:!0});var yet=s(lB);jso=r(yet,"LayoutLMv3TokenizerFast"),yet.forEach(t),Dso=r(rk," (LayoutLMv3 model)"),rk.forEach(t),Gso=i(S),cs=n(S,"LI",{});var tk=s(cs);Ine=n(tk,"STRONG",{});var Let=s(Ine);Oso=r(Let,"layoutxlm"),Let.forEach(t),Vso=r(tk," \u2014 "),iB=n(tk,"A",{href:!0});var xet=s(iB);Xso=r(xet,"LayoutXLMTokenizer"),xet.forEach(t),zso=r(tk," or "),dB=n(tk,"A",{href:!0});var $et=s(dB);Wso=r($et,"LayoutXLMTokenizerFast"),$et.forEach(t),Qso=r(tk," (LayoutXLM model)"),tk.forEach(t),Hso=i(S),fs=n(S,"LI",{});var ak=s(fs);Nne=n(ak,"STRONG",{});var ket=s(Nne);Uso=r(ket,"led"),ket.forEach(t),Jso=r(ak," \u2014 "),cB=n(ak,"A",{href:!0});var Set=s(cB);Yso=r(Set,"LEDTokenizer"),Set.forEach(t),Kso=r(ak," or "),fB=n(ak,"A",{href:!0});var Ret=s(fB);Zso=r(Ret,"LEDTokenizerFast"),Ret.forEach(t),elo=r(ak," (LED model)"),ak.forEach(t),olo=i(S),ms=n(S,"LI",{});var nk=s(ms);qne=n(nk,"STRONG",{});var Pet=s(qne);rlo=r(Pet,"longformer"),Pet.forEach(t),tlo=r(nk," \u2014 "),mB=n(nk,"A",{href:!0});var Bet=s(mB);alo=r(Bet,"LongformerTokenizer"),Bet.forEach(t),nlo=r(nk," or "),gB=n(nk,"A",{href:!0});var Iet=s(gB);slo=r(Iet,"LongformerTokenizerFast"),Iet.forEach(t),llo=r(nk," (Longformer model)"),nk.forEach(t),ilo=i(S),eh=n(S,"LI",{});var S6e=s(eh);jne=n(S6e,"STRONG",{});var Net=s(jne);dlo=r(Net,"luke"),Net.forEach(t),clo=r(S6e," \u2014 "),hB=n(S6e,"A",{href:!0});var qet=s(hB);flo=r(qet,"LukeTokenizer"),qet.forEach(t),mlo=r(S6e," (LUKE model)"),S6e.forEach(t),glo=i(S),gs=n(S,"LI",{});var sk=s(gs);Dne=n(sk,"STRONG",{});var jet=s(Dne);hlo=r(jet,"lxmert"),jet.forEach(t),plo=r(sk," \u2014 "),pB=n(sk,"A",{href:!0});var Det=s(pB);ulo=r(Det,"LxmertTokenizer"),Det.forEach(t),_lo=r(sk," or "),uB=n(sk,"A",{href:!0});var Get=s(uB);blo=r(Get,"LxmertTokenizerFast"),Get.forEach(t),vlo=r(sk," (LXMERT model)"),sk.forEach(t),Flo=i(S),oh=n(S,"LI",{});var R6e=s(oh);Gne=n(R6e,"STRONG",{});var Oet=s(Gne);Tlo=r(Oet,"m2m_100"),Oet.forEach(t),Mlo=r(R6e," \u2014 "),_B=n(R6e,"A",{href:!0});var Vet=s(_B);Elo=r(Vet,"M2M100Tokenizer"),Vet.forEach(t),Clo=r(R6e," (M2M100 model)"),R6e.forEach(t),wlo=i(S),rh=n(S,"LI",{});var P6e=s(rh);One=n(P6e,"STRONG",{});var Xet=s(One);Alo=r(Xet,"marian"),Xet.forEach(t),ylo=r(P6e," \u2014 "),bB=n(P6e,"A",{href:!0});var zet=s(bB);Llo=r(zet,"MarianTokenizer"),zet.forEach(t),xlo=r(P6e," (Marian model)"),P6e.forEach(t),$lo=i(S),hs=n(S,"LI",{});var lk=s(hs);Vne=n(lk,"STRONG",{});var Wet=s(Vne);klo=r(Wet,"mbart"),Wet.forEach(t),Slo=r(lk," \u2014 "),vB=n(lk,"A",{href:!0});var Qet=s(vB);Rlo=r(Qet,"MBartTokenizer"),Qet.forEach(t),Plo=r(lk," or "),FB=n(lk,"A",{href:!0});var Het=s(FB);Blo=r(Het,"MBartTokenizerFast"),Het.forEach(t),Ilo=r(lk," (mBART model)"),lk.forEach(t),Nlo=i(S),ps=n(S,"LI",{});var ik=s(ps);Xne=n(ik,"STRONG",{});var Uet=s(Xne);qlo=r(Uet,"mbart50"),Uet.forEach(t),jlo=r(ik," \u2014 "),TB=n(ik,"A",{href:!0});var Jet=s(TB);Dlo=r(Jet,"MBart50Tokenizer"),Jet.forEach(t),Glo=r(ik," or "),MB=n(ik,"A",{href:!0});var Yet=s(MB);Olo=r(Yet,"MBart50TokenizerFast"),Yet.forEach(t),Vlo=r(ik," (mBART-50 model)"),ik.forEach(t),Xlo=i(S),us=n(S,"LI",{});var dk=s(us);zne=n(dk,"STRONG",{});var Ket=s(zne);zlo=r(Ket,"megatron-bert"),Ket.forEach(t),Wlo=r(dk," \u2014 "),EB=n(dk,"A",{href:!0});var Zet=s(EB);Qlo=r(Zet,"BertTokenizer"),Zet.forEach(t),Hlo=r(dk," or "),CB=n(dk,"A",{href:!0});var eot=s(CB);Ulo=r(eot,"BertTokenizerFast"),eot.forEach(t),Jlo=r(dk," (Megatron-BERT model)"),dk.forEach(t),Ylo=i(S),th=n(S,"LI",{});var B6e=s(th);Wne=n(B6e,"STRONG",{});var oot=s(Wne);Klo=r(oot,"mluke"),oot.forEach(t),Zlo=r(B6e," \u2014 "),wB=n(B6e,"A",{href:!0});var rot=s(wB);eio=r(rot,"MLukeTokenizer"),rot.forEach(t),oio=r(B6e," (mLUKE model)"),B6e.forEach(t),rio=i(S),_s=n(S,"LI",{});var ck=s(_s);Qne=n(ck,"STRONG",{});var tot=s(Qne);tio=r(tot,"mobilebert"),tot.forEach(t),aio=r(ck," \u2014 "),AB=n(ck,"A",{href:!0});var aot=s(AB);nio=r(aot,"MobileBertTokenizer"),aot.forEach(t),sio=r(ck," or "),yB=n(ck,"A",{href:!0});var not=s(yB);lio=r(not,"MobileBertTokenizerFast"),not.forEach(t),iio=r(ck," (MobileBERT model)"),ck.forEach(t),dio=i(S),bs=n(S,"LI",{});var fk=s(bs);Hne=n(fk,"STRONG",{});var sot=s(Hne);cio=r(sot,"mpnet"),sot.forEach(t),fio=r(fk," \u2014 "),LB=n(fk,"A",{href:!0});var lot=s(LB);mio=r(lot,"MPNetTokenizer"),lot.forEach(t),gio=r(fk," or "),xB=n(fk,"A",{href:!0});var iot=s(xB);hio=r(iot,"MPNetTokenizerFast"),iot.forEach(t),pio=r(fk," (MPNet model)"),fk.forEach(t),uio=i(S),vs=n(S,"LI",{});var mk=s(vs);Une=n(mk,"STRONG",{});var dot=s(Une);_io=r(dot,"mt5"),dot.forEach(t),bio=r(mk," \u2014 "),$B=n(mk,"A",{href:!0});var cot=s($B);vio=r(cot,"MT5Tokenizer"),cot.forEach(t),Fio=r(mk," or "),kB=n(mk,"A",{href:!0});var fot=s(kB);Tio=r(fot,"MT5TokenizerFast"),fot.forEach(t),Mio=r(mk," (MT5 model)"),mk.forEach(t),Eio=i(S),Fs=n(S,"LI",{});var gk=s(Fs);Jne=n(gk,"STRONG",{});var mot=s(Jne);Cio=r(mot,"nystromformer"),mot.forEach(t),wio=r(gk," \u2014 "),SB=n(gk,"A",{href:!0});var got=s(SB);Aio=r(got,"AlbertTokenizer"),got.forEach(t),yio=r(gk," or "),RB=n(gk,"A",{href:!0});var hot=s(RB);Lio=r(hot,"AlbertTokenizerFast"),hot.forEach(t),xio=r(gk," (Nystr\xF6mformer model)"),gk.forEach(t),$io=i(S),Ts=n(S,"LI",{});var hk=s(Ts);Yne=n(hk,"STRONG",{});var pot=s(Yne);kio=r(pot,"openai-gpt"),pot.forEach(t),Sio=r(hk," \u2014 "),PB=n(hk,"A",{href:!0});var uot=s(PB);Rio=r(uot,"OpenAIGPTTokenizer"),uot.forEach(t),Pio=r(hk," or "),BB=n(hk,"A",{href:!0});var _ot=s(BB);Bio=r(_ot,"OpenAIGPTTokenizerFast"),_ot.forEach(t),Iio=r(hk," (OpenAI GPT model)"),hk.forEach(t),Nio=i(S),ah=n(S,"LI",{});var I6e=s(ah);Kne=n(I6e,"STRONG",{});var bot=s(Kne);qio=r(bot,"opt"),bot.forEach(t),jio=r(I6e," \u2014 "),IB=n(I6e,"A",{href:!0});var vot=s(IB);Dio=r(vot,"GPT2Tokenizer"),vot.forEach(t),Gio=r(I6e," (OPT model)"),I6e.forEach(t),Oio=i(S),Ms=n(S,"LI",{});var pk=s(Ms);Zne=n(pk,"STRONG",{});var Fot=s(Zne);Vio=r(Fot,"pegasus"),Fot.forEach(t),Xio=r(pk," \u2014 "),NB=n(pk,"A",{href:!0});var Tot=s(NB);zio=r(Tot,"PegasusTokenizer"),Tot.forEach(t),Wio=r(pk," or "),qB=n(pk,"A",{href:!0});var Mot=s(qB);Qio=r(Mot,"PegasusTokenizerFast"),Mot.forEach(t),Hio=r(pk," (Pegasus model)"),pk.forEach(t),Uio=i(S),nh=n(S,"LI",{});var N6e=s(nh);ese=n(N6e,"STRONG",{});var Eot=s(ese);Jio=r(Eot,"perceiver"),Eot.forEach(t),Yio=r(N6e," \u2014 "),jB=n(N6e,"A",{href:!0});var Cot=s(jB);Kio=r(Cot,"PerceiverTokenizer"),Cot.forEach(t),Zio=r(N6e," (Perceiver model)"),N6e.forEach(t),edo=i(S),sh=n(S,"LI",{});var q6e=s(sh);ose=n(q6e,"STRONG",{});var wot=s(ose);odo=r(wot,"phobert"),wot.forEach(t),rdo=r(q6e," \u2014 "),DB=n(q6e,"A",{href:!0});var Aot=s(DB);tdo=r(Aot,"PhobertTokenizer"),Aot.forEach(t),ado=r(q6e," (PhoBERT model)"),q6e.forEach(t),ndo=i(S),lh=n(S,"LI",{});var j6e=s(lh);rse=n(j6e,"STRONG",{});var yot=s(rse);sdo=r(yot,"plbart"),yot.forEach(t),ldo=r(j6e," \u2014 "),GB=n(j6e,"A",{href:!0});var Lot=s(GB);ido=r(Lot,"PLBartTokenizer"),Lot.forEach(t),ddo=r(j6e," (PLBart model)"),j6e.forEach(t),cdo=i(S),ih=n(S,"LI",{});var D6e=s(ih);tse=n(D6e,"STRONG",{});var xot=s(tse);fdo=r(xot,"prophetnet"),xot.forEach(t),mdo=r(D6e," \u2014 "),OB=n(D6e,"A",{href:!0});var $ot=s(OB);gdo=r($ot,"ProphetNetTokenizer"),$ot.forEach(t),hdo=r(D6e," (ProphetNet model)"),D6e.forEach(t),pdo=i(S),Es=n(S,"LI",{});var uk=s(Es);ase=n(uk,"STRONG",{});var kot=s(ase);udo=r(kot,"qdqbert"),kot.forEach(t),_do=r(uk," \u2014 "),VB=n(uk,"A",{href:!0});var Sot=s(VB);bdo=r(Sot,"BertTokenizer"),Sot.forEach(t),vdo=r(uk," or "),XB=n(uk,"A",{href:!0});var Rot=s(XB);Fdo=r(Rot,"BertTokenizerFast"),Rot.forEach(t),Tdo=r(uk," (QDQBert model)"),uk.forEach(t),Mdo=i(S),dh=n(S,"LI",{});var G6e=s(dh);nse=n(G6e,"STRONG",{});var Pot=s(nse);Edo=r(Pot,"rag"),Pot.forEach(t),Cdo=r(G6e," \u2014 "),zB=n(G6e,"A",{href:!0});var Bot=s(zB);wdo=r(Bot,"RagTokenizer"),Bot.forEach(t),Ado=r(G6e," (RAG model)"),G6e.forEach(t),ydo=i(S),Cs=n(S,"LI",{});var _k=s(Cs);sse=n(_k,"STRONG",{});var Iot=s(sse);Ldo=r(Iot,"realm"),Iot.forEach(t),xdo=r(_k," \u2014 "),WB=n(_k,"A",{href:!0});var Not=s(WB);$do=r(Not,"RealmTokenizer"),Not.forEach(t),kdo=r(_k," or "),QB=n(_k,"A",{href:!0});var qot=s(QB);Sdo=r(qot,"RealmTokenizerFast"),qot.forEach(t),Rdo=r(_k," (REALM model)"),_k.forEach(t),Pdo=i(S),ws=n(S,"LI",{});var bk=s(ws);lse=n(bk,"STRONG",{});var jot=s(lse);Bdo=r(jot,"reformer"),jot.forEach(t),Ido=r(bk," \u2014 "),HB=n(bk,"A",{href:!0});var Dot=s(HB);Ndo=r(Dot,"ReformerTokenizer"),Dot.forEach(t),qdo=r(bk," or "),UB=n(bk,"A",{href:!0});var Got=s(UB);jdo=r(Got,"ReformerTokenizerFast"),Got.forEach(t),Ddo=r(bk," (Reformer model)"),bk.forEach(t),Gdo=i(S),As=n(S,"LI",{});var vk=s(As);ise=n(vk,"STRONG",{});var Oot=s(ise);Odo=r(Oot,"rembert"),Oot.forEach(t),Vdo=r(vk," \u2014 "),JB=n(vk,"A",{href:!0});var Vot=s(JB);Xdo=r(Vot,"RemBertTokenizer"),Vot.forEach(t),zdo=r(vk," or "),YB=n(vk,"A",{href:!0});var Xot=s(YB);Wdo=r(Xot,"RemBertTokenizerFast"),Xot.forEach(t),Qdo=r(vk," (RemBERT model)"),vk.forEach(t),Hdo=i(S),ys=n(S,"LI",{});var Fk=s(ys);dse=n(Fk,"STRONG",{});var zot=s(dse);Udo=r(zot,"retribert"),zot.forEach(t),Jdo=r(Fk," \u2014 "),KB=n(Fk,"A",{href:!0});var Wot=s(KB);Ydo=r(Wot,"RetriBertTokenizer"),Wot.forEach(t),Kdo=r(Fk," or "),ZB=n(Fk,"A",{href:!0});var Qot=s(ZB);Zdo=r(Qot,"RetriBertTokenizerFast"),Qot.forEach(t),eco=r(Fk," (RetriBERT model)"),Fk.forEach(t),oco=i(S),Ls=n(S,"LI",{});var Tk=s(Ls);cse=n(Tk,"STRONG",{});var Hot=s(cse);rco=r(Hot,"roberta"),Hot.forEach(t),tco=r(Tk," \u2014 "),eI=n(Tk,"A",{href:!0});var Uot=s(eI);aco=r(Uot,"RobertaTokenizer"),Uot.forEach(t),nco=r(Tk," or "),oI=n(Tk,"A",{href:!0});var Jot=s(oI);sco=r(Jot,"RobertaTokenizerFast"),Jot.forEach(t),lco=r(Tk," (RoBERTa model)"),Tk.forEach(t),ico=i(S),xs=n(S,"LI",{});var Mk=s(xs);fse=n(Mk,"STRONG",{});var Yot=s(fse);dco=r(Yot,"roformer"),Yot.forEach(t),cco=r(Mk," \u2014 "),rI=n(Mk,"A",{href:!0});var Kot=s(rI);fco=r(Kot,"RoFormerTokenizer"),Kot.forEach(t),mco=r(Mk," or "),tI=n(Mk,"A",{href:!0});var Zot=s(tI);gco=r(Zot,"RoFormerTokenizerFast"),Zot.forEach(t),hco=r(Mk," (RoFormer model)"),Mk.forEach(t),pco=i(S),ch=n(S,"LI",{});var O6e=s(ch);mse=n(O6e,"STRONG",{});var ert=s(mse);uco=r(ert,"speech_to_text"),ert.forEach(t),_co=r(O6e," \u2014 "),aI=n(O6e,"A",{href:!0});var ort=s(aI);bco=r(ort,"Speech2TextTokenizer"),ort.forEach(t),vco=r(O6e," (Speech2Text model)"),O6e.forEach(t),Fco=i(S),fh=n(S,"LI",{});var V6e=s(fh);gse=n(V6e,"STRONG",{});var rrt=s(gse);Tco=r(rrt,"speech_to_text_2"),rrt.forEach(t),Mco=r(V6e," \u2014 "),nI=n(V6e,"A",{href:!0});var trt=s(nI);Eco=r(trt,"Speech2Text2Tokenizer"),trt.forEach(t),Cco=r(V6e," (Speech2Text2 model)"),V6e.forEach(t),wco=i(S),$s=n(S,"LI",{});var Ek=s($s);hse=n(Ek,"STRONG",{});var art=s(hse);Aco=r(art,"splinter"),art.forEach(t),yco=r(Ek," \u2014 "),sI=n(Ek,"A",{href:!0});var nrt=s(sI);Lco=r(nrt,"SplinterTokenizer"),nrt.forEach(t),xco=r(Ek," or "),lI=n(Ek,"A",{href:!0});var srt=s(lI);$co=r(srt,"SplinterTokenizerFast"),srt.forEach(t),kco=r(Ek," (Splinter model)"),Ek.forEach(t),Sco=i(S),ks=n(S,"LI",{});var Ck=s(ks);pse=n(Ck,"STRONG",{});var lrt=s(pse);Rco=r(lrt,"squeezebert"),lrt.forEach(t),Pco=r(Ck," \u2014 "),iI=n(Ck,"A",{href:!0});var irt=s(iI);Bco=r(irt,"SqueezeBertTokenizer"),irt.forEach(t),Ico=r(Ck," or "),dI=n(Ck,"A",{href:!0});var drt=s(dI);Nco=r(drt,"SqueezeBertTokenizerFast"),drt.forEach(t),qco=r(Ck," (SqueezeBERT model)"),Ck.forEach(t),jco=i(S),Ss=n(S,"LI",{});var wk=s(Ss);use=n(wk,"STRONG",{});var crt=s(use);Dco=r(crt,"t5"),crt.forEach(t),Gco=r(wk," \u2014 "),cI=n(wk,"A",{href:!0});var frt=s(cI);Oco=r(frt,"T5Tokenizer"),frt.forEach(t),Vco=r(wk," or "),fI=n(wk,"A",{href:!0});var mrt=s(fI);Xco=r(mrt,"T5TokenizerFast"),mrt.forEach(t),zco=r(wk," (T5 model)"),wk.forEach(t),Wco=i(S),mh=n(S,"LI",{});var X6e=s(mh);_se=n(X6e,"STRONG",{});var grt=s(_se);Qco=r(grt,"tapas"),grt.forEach(t),Hco=r(X6e," \u2014 "),mI=n(X6e,"A",{href:!0});var hrt=s(mI);Uco=r(hrt,"TapasTokenizer"),hrt.forEach(t),Jco=r(X6e," (TAPAS model)"),X6e.forEach(t),Yco=i(S),gh=n(S,"LI",{});var z6e=s(gh);bse=n(z6e,"STRONG",{});var prt=s(bse);Kco=r(prt,"tapex"),prt.forEach(t),Zco=r(z6e," \u2014 "),gI=n(z6e,"A",{href:!0});var urt=s(gI);efo=r(urt,"TapexTokenizer"),urt.forEach(t),ofo=r(z6e," (TAPEX model)"),z6e.forEach(t),rfo=i(S),hh=n(S,"LI",{});var W6e=s(hh);vse=n(W6e,"STRONG",{});var _rt=s(vse);tfo=r(_rt,"transfo-xl"),_rt.forEach(t),afo=r(W6e," \u2014 "),hI=n(W6e,"A",{href:!0});var brt=s(hI);nfo=r(brt,"TransfoXLTokenizer"),brt.forEach(t),sfo=r(W6e," (Transformer-XL model)"),W6e.forEach(t),lfo=i(S),Rs=n(S,"LI",{});var Ak=s(Rs);Fse=n(Ak,"STRONG",{});var vrt=s(Fse);ifo=r(vrt,"vilt"),vrt.forEach(t),dfo=r(Ak," \u2014 "),pI=n(Ak,"A",{href:!0});var Frt=s(pI);cfo=r(Frt,"BertTokenizer"),Frt.forEach(t),ffo=r(Ak," or "),uI=n(Ak,"A",{href:!0});var Trt=s(uI);mfo=r(Trt,"BertTokenizerFast"),Trt.forEach(t),gfo=r(Ak," (ViLT model)"),Ak.forEach(t),hfo=i(S),Ps=n(S,"LI",{});var yk=s(Ps);Tse=n(yk,"STRONG",{});var Mrt=s(Tse);pfo=r(Mrt,"visual_bert"),Mrt.forEach(t),ufo=r(yk," \u2014 "),_I=n(yk,"A",{href:!0});var Ert=s(_I);_fo=r(Ert,"BertTokenizer"),Ert.forEach(t),bfo=r(yk," or "),bI=n(yk,"A",{href:!0});var Crt=s(bI);vfo=r(Crt,"BertTokenizerFast"),Crt.forEach(t),Ffo=r(yk," (VisualBERT model)"),yk.forEach(t),Tfo=i(S),ph=n(S,"LI",{});var Q6e=s(ph);Mse=n(Q6e,"STRONG",{});var wrt=s(Mse);Mfo=r(wrt,"wav2vec2"),wrt.forEach(t),Efo=r(Q6e," \u2014 "),vI=n(Q6e,"A",{href:!0});var Art=s(vI);Cfo=r(Art,"Wav2Vec2CTCTokenizer"),Art.forEach(t),wfo=r(Q6e," (Wav2Vec2 model)"),Q6e.forEach(t),Afo=i(S),uh=n(S,"LI",{});var H6e=s(uh);Ese=n(H6e,"STRONG",{});var yrt=s(Ese);yfo=r(yrt,"wav2vec2-conformer"),yrt.forEach(t),Lfo=r(H6e," \u2014 "),FI=n(H6e,"A",{href:!0});var Lrt=s(FI);xfo=r(Lrt,"Wav2Vec2CTCTokenizer"),Lrt.forEach(t),$fo=r(H6e," (Wav2Vec2-Conformer model)"),H6e.forEach(t),kfo=i(S),_h=n(S,"LI",{});var U6e=s(_h);Cse=n(U6e,"STRONG",{});var xrt=s(Cse);Sfo=r(xrt,"wav2vec2_phoneme"),xrt.forEach(t),Rfo=r(U6e," \u2014 "),TI=n(U6e,"A",{href:!0});var $rt=s(TI);Pfo=r($rt,"Wav2Vec2PhonemeCTCTokenizer"),$rt.forEach(t),Bfo=r(U6e," (Wav2Vec2Phoneme model)"),U6e.forEach(t),Ifo=i(S),Bs=n(S,"LI",{});var Lk=s(Bs);wse=n(Lk,"STRONG",{});var krt=s(wse);Nfo=r(krt,"xglm"),krt.forEach(t),qfo=r(Lk," \u2014 "),MI=n(Lk,"A",{href:!0});var Srt=s(MI);jfo=r(Srt,"XGLMTokenizer"),Srt.forEach(t),Dfo=r(Lk," or "),EI=n(Lk,"A",{href:!0});var Rrt=s(EI);Gfo=r(Rrt,"XGLMTokenizerFast"),Rrt.forEach(t),Ofo=r(Lk," (XGLM model)"),Lk.forEach(t),Vfo=i(S),bh=n(S,"LI",{});var J6e=s(bh);Ase=n(J6e,"STRONG",{});var Prt=s(Ase);Xfo=r(Prt,"xlm"),Prt.forEach(t),zfo=r(J6e," \u2014 "),CI=n(J6e,"A",{href:!0});var Brt=s(CI);Wfo=r(Brt,"XLMTokenizer"),Brt.forEach(t),Qfo=r(J6e," (XLM model)"),J6e.forEach(t),Hfo=i(S),vh=n(S,"LI",{});var Y6e=s(vh);yse=n(Y6e,"STRONG",{});var Irt=s(yse);Ufo=r(Irt,"xlm-prophetnet"),Irt.forEach(t),Jfo=r(Y6e," \u2014 "),wI=n(Y6e,"A",{href:!0});var Nrt=s(wI);Yfo=r(Nrt,"XLMProphetNetTokenizer"),Nrt.forEach(t),Kfo=r(Y6e," (XLM-ProphetNet model)"),Y6e.forEach(t),Zfo=i(S),Is=n(S,"LI",{});var xk=s(Is);Lse=n(xk,"STRONG",{});var qrt=s(Lse);emo=r(qrt,"xlm-roberta"),qrt.forEach(t),omo=r(xk," \u2014 "),AI=n(xk,"A",{href:!0});var jrt=s(AI);rmo=r(jrt,"XLMRobertaTokenizer"),jrt.forEach(t),tmo=r(xk," or "),yI=n(xk,"A",{href:!0});var Drt=s(yI);amo=r(Drt,"XLMRobertaTokenizerFast"),Drt.forEach(t),nmo=r(xk," (XLM-RoBERTa model)"),xk.forEach(t),smo=i(S),Ns=n(S,"LI",{});var $k=s(Ns);xse=n($k,"STRONG",{});var Grt=s(xse);lmo=r(Grt,"xlm-roberta-xl"),Grt.forEach(t),imo=r($k," \u2014 "),LI=n($k,"A",{href:!0});var Ort=s(LI);dmo=r(Ort,"RobertaTokenizer"),Ort.forEach(t),cmo=r($k," or "),xI=n($k,"A",{href:!0});var Vrt=s(xI);fmo=r(Vrt,"RobertaTokenizerFast"),Vrt.forEach(t),mmo=r($k," (XLM-RoBERTa-XL model)"),$k.forEach(t),gmo=i(S),qs=n(S,"LI",{});var kk=s(qs);$se=n(kk,"STRONG",{});var Xrt=s($se);hmo=r(Xrt,"xlnet"),Xrt.forEach(t),pmo=r(kk," \u2014 "),$I=n(kk,"A",{href:!0});var zrt=s($I);umo=r(zrt,"XLNetTokenizer"),zrt.forEach(t),_mo=r(kk," or "),kI=n(kk,"A",{href:!0});var Wrt=s(kI);bmo=r(Wrt,"XLNetTokenizerFast"),Wrt.forEach(t),vmo=r(kk," (XLNet model)"),kk.forEach(t),Fmo=i(S),js=n(S,"LI",{});var Sk=s(js);kse=n(Sk,"STRONG",{});var Qrt=s(kse);Tmo=r(Qrt,"yoso"),Qrt.forEach(t),Mmo=r(Sk," \u2014 "),SI=n(Sk,"A",{href:!0});var Hrt=s(SI);Emo=r(Hrt,"AlbertTokenizer"),Hrt.forEach(t),Cmo=r(Sk," or "),RI=n(Sk,"A",{href:!0});var Urt=s(RI);wmo=r(Urt,"AlbertTokenizerFast"),Urt.forEach(t),Amo=r(Sk," (YOSO model)"),Sk.forEach(t),S.forEach(t),ymo=i(zs),T(Fh.$$.fragment,zs),zs.forEach(t),Lmo=i(Xs),Th=n(Xs,"DIV",{class:!0});var ROe=s(Th);T(wy.$$.fragment,ROe),xmo=i(ROe),Sse=n(ROe,"P",{});var Jrt=s(Sse);$mo=r(Jrt,"Register a new tokenizer in this mapping."),Jrt.forEach(t),ROe.forEach(t),Xs.forEach(t),SDe=i(f),ki=n(f,"H2",{class:!0});var POe=s(ki);Mh=n(POe,"A",{id:!0,class:!0,href:!0});var Yrt=s(Mh);Rse=n(Yrt,"SPAN",{});var Krt=s(Rse);T(Ay.$$.fragment,Krt),Krt.forEach(t),Yrt.forEach(t),kmo=i(POe),Pse=n(POe,"SPAN",{});var Zrt=s(Pse);Smo=r(Zrt,"AutoFeatureExtractor"),Zrt.forEach(t),POe.forEach(t),RDe=i(f),yo=n(f,"DIV",{class:!0});var Ws=s(yo);T(yy.$$.fragment,Ws),Rmo=i(Ws),Ly=n(Ws,"P",{});var BOe=s(Ly);Pmo=r(BOe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),PI=n(BOe,"A",{href:!0});var ett=s(PI);Bmo=r(ett,"AutoFeatureExtractor.from_pretrained()"),ett.forEach(t),Imo=r(BOe," class method."),BOe.forEach(t),Nmo=i(Ws),xy=n(Ws,"P",{});var IOe=s(xy);qmo=r(IOe,"This class cannot be instantiated directly using "),Bse=n(IOe,"CODE",{});var ott=s(Bse);jmo=r(ott,"__init__()"),ott.forEach(t),Dmo=r(IOe," (throws an error)."),IOe.forEach(t),Gmo=i(Ws),He=n(Ws,"DIV",{class:!0});var ta=s(He);T($y.$$.fragment,ta),Omo=i(ta),Ise=n(ta,"P",{});var rtt=s(Ise);Vmo=r(rtt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),rtt.forEach(t),Xmo=i(ta),Sa=n(ta,"P",{});var hA=s(Sa);zmo=r(hA,"The feature extractor class to instantiate is selected based on the "),Nse=n(hA,"CODE",{});var ttt=s(Nse);Wmo=r(ttt,"model_type"),ttt.forEach(t),Qmo=r(hA,` property of the config object
(either passed as an argument or loaded from `),qse=n(hA,"CODE",{});var att=s(qse);Hmo=r(att,"pretrained_model_name_or_path"),att.forEach(t),Umo=r(hA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),jse=n(hA,"CODE",{});var ntt=s(jse);Jmo=r(ntt,"pretrained_model_name_or_path"),ntt.forEach(t),Ymo=r(hA,":"),hA.forEach(t),Kmo=i(ta),Y=n(ta,"UL",{});var K=s(Y);Eh=n(K,"LI",{});var K6e=s(Eh);Dse=n(K6e,"STRONG",{});var stt=s(Dse);Zmo=r(stt,"beit"),stt.forEach(t),ego=r(K6e," \u2014 "),BI=n(K6e,"A",{href:!0});var ltt=s(BI);ogo=r(ltt,"BeitFeatureExtractor"),ltt.forEach(t),rgo=r(K6e," (BEiT model)"),K6e.forEach(t),tgo=i(K),Ch=n(K,"LI",{});var Z6e=s(Ch);Gse=n(Z6e,"STRONG",{});var itt=s(Gse);ago=r(itt,"clip"),itt.forEach(t),ngo=r(Z6e," \u2014 "),II=n(Z6e,"A",{href:!0});var dtt=s(II);sgo=r(dtt,"CLIPFeatureExtractor"),dtt.forEach(t),lgo=r(Z6e," (CLIP model)"),Z6e.forEach(t),igo=i(K),wh=n(K,"LI",{});var eye=s(wh);Ose=n(eye,"STRONG",{});var ctt=s(Ose);dgo=r(ctt,"convnext"),ctt.forEach(t),cgo=r(eye," \u2014 "),NI=n(eye,"A",{href:!0});var ftt=s(NI);fgo=r(ftt,"ConvNextFeatureExtractor"),ftt.forEach(t),mgo=r(eye," (ConvNeXT model)"),eye.forEach(t),ggo=i(K),Ah=n(K,"LI",{});var oye=s(Ah);Vse=n(oye,"STRONG",{});var mtt=s(Vse);hgo=r(mtt,"cvt"),mtt.forEach(t),pgo=r(oye," \u2014 "),qI=n(oye,"A",{href:!0});var gtt=s(qI);ugo=r(gtt,"ConvNextFeatureExtractor"),gtt.forEach(t),_go=r(oye," (CvT model)"),oye.forEach(t),bgo=i(K),yh=n(K,"LI",{});var rye=s(yh);Xse=n(rye,"STRONG",{});var htt=s(Xse);vgo=r(htt,"data2vec-audio"),htt.forEach(t),Fgo=r(rye," \u2014 "),jI=n(rye,"A",{href:!0});var ptt=s(jI);Tgo=r(ptt,"Wav2Vec2FeatureExtractor"),ptt.forEach(t),Mgo=r(rye," (Data2VecAudio model)"),rye.forEach(t),Ego=i(K),Lh=n(K,"LI",{});var tye=s(Lh);zse=n(tye,"STRONG",{});var utt=s(zse);Cgo=r(utt,"data2vec-vision"),utt.forEach(t),wgo=r(tye," \u2014 "),DI=n(tye,"A",{href:!0});var _tt=s(DI);Ago=r(_tt,"BeitFeatureExtractor"),_tt.forEach(t),ygo=r(tye," (Data2VecVision model)"),tye.forEach(t),Lgo=i(K),xh=n(K,"LI",{});var aye=s(xh);Wse=n(aye,"STRONG",{});var btt=s(Wse);xgo=r(btt,"deit"),btt.forEach(t),$go=r(aye," \u2014 "),GI=n(aye,"A",{href:!0});var vtt=s(GI);kgo=r(vtt,"DeiTFeatureExtractor"),vtt.forEach(t),Sgo=r(aye," (DeiT model)"),aye.forEach(t),Rgo=i(K),$h=n(K,"LI",{});var nye=s($h);Qse=n(nye,"STRONG",{});var Ftt=s(Qse);Pgo=r(Ftt,"detr"),Ftt.forEach(t),Bgo=r(nye," \u2014 "),OI=n(nye,"A",{href:!0});var Ttt=s(OI);Igo=r(Ttt,"DetrFeatureExtractor"),Ttt.forEach(t),Ngo=r(nye," (DETR model)"),nye.forEach(t),qgo=i(K),kh=n(K,"LI",{});var sye=s(kh);Hse=n(sye,"STRONG",{});var Mtt=s(Hse);jgo=r(Mtt,"dpt"),Mtt.forEach(t),Dgo=r(sye," \u2014 "),VI=n(sye,"A",{href:!0});var Ett=s(VI);Ggo=r(Ett,"DPTFeatureExtractor"),Ett.forEach(t),Ogo=r(sye," (DPT model)"),sye.forEach(t),Vgo=i(K),Sh=n(K,"LI",{});var lye=s(Sh);Use=n(lye,"STRONG",{});var Ctt=s(Use);Xgo=r(Ctt,"flava"),Ctt.forEach(t),zgo=r(lye," \u2014 "),XI=n(lye,"A",{href:!0});var wtt=s(XI);Wgo=r(wtt,"FlavaFeatureExtractor"),wtt.forEach(t),Qgo=r(lye," (FLAVA model)"),lye.forEach(t),Hgo=i(K),Rh=n(K,"LI",{});var iye=s(Rh);Jse=n(iye,"STRONG",{});var Att=s(Jse);Ugo=r(Att,"glpn"),Att.forEach(t),Jgo=r(iye," \u2014 "),zI=n(iye,"A",{href:!0});var ytt=s(zI);Ygo=r(ytt,"GLPNFeatureExtractor"),ytt.forEach(t),Kgo=r(iye," (GLPN model)"),iye.forEach(t),Zgo=i(K),Ph=n(K,"LI",{});var dye=s(Ph);Yse=n(dye,"STRONG",{});var Ltt=s(Yse);eho=r(Ltt,"hubert"),Ltt.forEach(t),oho=r(dye," \u2014 "),WI=n(dye,"A",{href:!0});var xtt=s(WI);rho=r(xtt,"Wav2Vec2FeatureExtractor"),xtt.forEach(t),tho=r(dye," (Hubert model)"),dye.forEach(t),aho=i(K),Bh=n(K,"LI",{});var cye=s(Bh);Kse=n(cye,"STRONG",{});var $tt=s(Kse);nho=r($tt,"imagegpt"),$tt.forEach(t),sho=r(cye," \u2014 "),QI=n(cye,"A",{href:!0});var ktt=s(QI);lho=r(ktt,"ImageGPTFeatureExtractor"),ktt.forEach(t),iho=r(cye," (ImageGPT model)"),cye.forEach(t),dho=i(K),Ih=n(K,"LI",{});var fye=s(Ih);Zse=n(fye,"STRONG",{});var Stt=s(Zse);cho=r(Stt,"layoutlmv2"),Stt.forEach(t),fho=r(fye," \u2014 "),HI=n(fye,"A",{href:!0});var Rtt=s(HI);mho=r(Rtt,"LayoutLMv2FeatureExtractor"),Rtt.forEach(t),gho=r(fye," (LayoutLMv2 model)"),fye.forEach(t),hho=i(K),Nh=n(K,"LI",{});var mye=s(Nh);ele=n(mye,"STRONG",{});var Ptt=s(ele);pho=r(Ptt,"layoutlmv3"),Ptt.forEach(t),uho=r(mye," \u2014 "),UI=n(mye,"A",{href:!0});var Btt=s(UI);_ho=r(Btt,"LayoutLMv3FeatureExtractor"),Btt.forEach(t),bho=r(mye," (LayoutLMv3 model)"),mye.forEach(t),vho=i(K),qh=n(K,"LI",{});var gye=s(qh);ole=n(gye,"STRONG",{});var Itt=s(ole);Fho=r(Itt,"levit"),Itt.forEach(t),Tho=r(gye," \u2014 "),JI=n(gye,"A",{href:!0});var Ntt=s(JI);Mho=r(Ntt,"LevitFeatureExtractor"),Ntt.forEach(t),Eho=r(gye," (LeViT model)"),gye.forEach(t),Cho=i(K),jh=n(K,"LI",{});var hye=s(jh);rle=n(hye,"STRONG",{});var qtt=s(rle);who=r(qtt,"maskformer"),qtt.forEach(t),Aho=r(hye," \u2014 "),YI=n(hye,"A",{href:!0});var jtt=s(YI);yho=r(jtt,"MaskFormerFeatureExtractor"),jtt.forEach(t),Lho=r(hye," (MaskFormer model)"),hye.forEach(t),xho=i(K),Dh=n(K,"LI",{});var pye=s(Dh);tle=n(pye,"STRONG",{});var Dtt=s(tle);$ho=r(Dtt,"mctct"),Dtt.forEach(t),kho=r(pye," \u2014 "),KI=n(pye,"A",{href:!0});var Gtt=s(KI);Sho=r(Gtt,"MCTCTFeatureExtractor"),Gtt.forEach(t),Rho=r(pye," (M-CTC-T model)"),pye.forEach(t),Pho=i(K),Gh=n(K,"LI",{});var uye=s(Gh);ale=n(uye,"STRONG",{});var Ott=s(ale);Bho=r(Ott,"perceiver"),Ott.forEach(t),Iho=r(uye," \u2014 "),ZI=n(uye,"A",{href:!0});var Vtt=s(ZI);Nho=r(Vtt,"PerceiverFeatureExtractor"),Vtt.forEach(t),qho=r(uye," (Perceiver model)"),uye.forEach(t),jho=i(K),Oh=n(K,"LI",{});var _ye=s(Oh);nle=n(_ye,"STRONG",{});var Xtt=s(nle);Dho=r(Xtt,"poolformer"),Xtt.forEach(t),Gho=r(_ye," \u2014 "),eN=n(_ye,"A",{href:!0});var ztt=s(eN);Oho=r(ztt,"PoolFormerFeatureExtractor"),ztt.forEach(t),Vho=r(_ye," (PoolFormer model)"),_ye.forEach(t),Xho=i(K),Vh=n(K,"LI",{});var bye=s(Vh);sle=n(bye,"STRONG",{});var Wtt=s(sle);zho=r(Wtt,"regnet"),Wtt.forEach(t),Who=r(bye," \u2014 "),oN=n(bye,"A",{href:!0});var Qtt=s(oN);Qho=r(Qtt,"ConvNextFeatureExtractor"),Qtt.forEach(t),Hho=r(bye," (RegNet model)"),bye.forEach(t),Uho=i(K),Xh=n(K,"LI",{});var vye=s(Xh);lle=n(vye,"STRONG",{});var Htt=s(lle);Jho=r(Htt,"resnet"),Htt.forEach(t),Yho=r(vye," \u2014 "),rN=n(vye,"A",{href:!0});var Utt=s(rN);Kho=r(Utt,"ConvNextFeatureExtractor"),Utt.forEach(t),Zho=r(vye," (ResNet model)"),vye.forEach(t),epo=i(K),zh=n(K,"LI",{});var Fye=s(zh);ile=n(Fye,"STRONG",{});var Jtt=s(ile);opo=r(Jtt,"segformer"),Jtt.forEach(t),rpo=r(Fye," \u2014 "),tN=n(Fye,"A",{href:!0});var Ytt=s(tN);tpo=r(Ytt,"SegformerFeatureExtractor"),Ytt.forEach(t),apo=r(Fye," (SegFormer model)"),Fye.forEach(t),npo=i(K),Wh=n(K,"LI",{});var Tye=s(Wh);dle=n(Tye,"STRONG",{});var Ktt=s(dle);spo=r(Ktt,"speech_to_text"),Ktt.forEach(t),lpo=r(Tye," \u2014 "),aN=n(Tye,"A",{href:!0});var Ztt=s(aN);ipo=r(Ztt,"Speech2TextFeatureExtractor"),Ztt.forEach(t),dpo=r(Tye," (Speech2Text model)"),Tye.forEach(t),cpo=i(K),Qh=n(K,"LI",{});var Mye=s(Qh);cle=n(Mye,"STRONG",{});var eat=s(cle);fpo=r(eat,"swin"),eat.forEach(t),mpo=r(Mye," \u2014 "),nN=n(Mye,"A",{href:!0});var oat=s(nN);gpo=r(oat,"ViTFeatureExtractor"),oat.forEach(t),hpo=r(Mye," (Swin Transformer model)"),Mye.forEach(t),ppo=i(K),Hh=n(K,"LI",{});var Eye=s(Hh);fle=n(Eye,"STRONG",{});var rat=s(fle);upo=r(rat,"van"),rat.forEach(t),_po=r(Eye," \u2014 "),sN=n(Eye,"A",{href:!0});var tat=s(sN);bpo=r(tat,"ConvNextFeatureExtractor"),tat.forEach(t),vpo=r(Eye," (VAN model)"),Eye.forEach(t),Fpo=i(K),Uh=n(K,"LI",{});var Cye=s(Uh);mle=n(Cye,"STRONG",{});var aat=s(mle);Tpo=r(aat,"vilt"),aat.forEach(t),Mpo=r(Cye," \u2014 "),lN=n(Cye,"A",{href:!0});var nat=s(lN);Epo=r(nat,"ViltFeatureExtractor"),nat.forEach(t),Cpo=r(Cye," (ViLT model)"),Cye.forEach(t),wpo=i(K),Jh=n(K,"LI",{});var wye=s(Jh);gle=n(wye,"STRONG",{});var sat=s(gle);Apo=r(sat,"vit"),sat.forEach(t),ypo=r(wye," \u2014 "),iN=n(wye,"A",{href:!0});var lat=s(iN);Lpo=r(lat,"ViTFeatureExtractor"),lat.forEach(t),xpo=r(wye," (ViT model)"),wye.forEach(t),$po=i(K),Yh=n(K,"LI",{});var Aye=s(Yh);hle=n(Aye,"STRONG",{});var iat=s(hle);kpo=r(iat,"vit_mae"),iat.forEach(t),Spo=r(Aye," \u2014 "),dN=n(Aye,"A",{href:!0});var dat=s(dN);Rpo=r(dat,"ViTFeatureExtractor"),dat.forEach(t),Ppo=r(Aye," (ViTMAE model)"),Aye.forEach(t),Bpo=i(K),Kh=n(K,"LI",{});var yye=s(Kh);ple=n(yye,"STRONG",{});var cat=s(ple);Ipo=r(cat,"wav2vec2"),cat.forEach(t),Npo=r(yye," \u2014 "),cN=n(yye,"A",{href:!0});var fat=s(cN);qpo=r(fat,"Wav2Vec2FeatureExtractor"),fat.forEach(t),jpo=r(yye," (Wav2Vec2 model)"),yye.forEach(t),Dpo=i(K),Zh=n(K,"LI",{});var Lye=s(Zh);ule=n(Lye,"STRONG",{});var mat=s(ule);Gpo=r(mat,"wav2vec2-conformer"),mat.forEach(t),Opo=r(Lye," \u2014 "),fN=n(Lye,"A",{href:!0});var gat=s(fN);Vpo=r(gat,"Wav2Vec2FeatureExtractor"),gat.forEach(t),Xpo=r(Lye," (Wav2Vec2-Conformer model)"),Lye.forEach(t),zpo=i(K),ep=n(K,"LI",{});var xye=s(ep);_le=n(xye,"STRONG",{});var hat=s(_le);Wpo=r(hat,"yolos"),hat.forEach(t),Qpo=r(xye," \u2014 "),mN=n(xye,"A",{href:!0});var pat=s(mN);Hpo=r(pat,"YolosFeatureExtractor"),pat.forEach(t),Upo=r(xye," (YOLOS model)"),xye.forEach(t),K.forEach(t),Jpo=i(ta),T(op.$$.fragment,ta),Ypo=i(ta),T(rp.$$.fragment,ta),ta.forEach(t),Kpo=i(Ws),tp=n(Ws,"DIV",{class:!0});var NOe=s(tp);T(ky.$$.fragment,NOe),Zpo=i(NOe),ble=n(NOe,"P",{});var uat=s(ble);euo=r(uat,"Register a new feature extractor for this class."),uat.forEach(t),NOe.forEach(t),Ws.forEach(t),PDe=i(f),Si=n(f,"H2",{class:!0});var qOe=s(Si);ap=n(qOe,"A",{id:!0,class:!0,href:!0});var _at=s(ap);vle=n(_at,"SPAN",{});var bat=s(vle);T(Sy.$$.fragment,bat),bat.forEach(t),_at.forEach(t),ouo=i(qOe),Fle=n(qOe,"SPAN",{});var vat=s(Fle);ruo=r(vat,"AutoProcessor"),vat.forEach(t),qOe.forEach(t),BDe=i(f),Lo=n(f,"DIV",{class:!0});var Qs=s(Lo);T(Ry.$$.fragment,Qs),tuo=i(Qs),Py=n(Qs,"P",{});var jOe=s(Py);auo=r(jOe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),gN=n(jOe,"A",{href:!0});var Fat=s(gN);nuo=r(Fat,"AutoProcessor.from_pretrained()"),Fat.forEach(t),suo=r(jOe," class method."),jOe.forEach(t),luo=i(Qs),By=n(Qs,"P",{});var DOe=s(By);iuo=r(DOe,"This class cannot be instantiated directly using "),Tle=n(DOe,"CODE",{});var Tat=s(Tle);duo=r(Tat,"__init__()"),Tat.forEach(t),cuo=r(DOe," (throws an error)."),DOe.forEach(t),fuo=i(Qs),Ue=n(Qs,"DIV",{class:!0});var aa=s(Ue);T(Iy.$$.fragment,aa),muo=i(aa),Mle=n(aa,"P",{});var Mat=s(Mle);guo=r(Mat,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mat.forEach(t),huo=i(aa),Ri=n(aa,"P",{});var Pee=s(Ri);puo=r(Pee,"The processor class to instantiate is selected based on the "),Ele=n(Pee,"CODE",{});var Eat=s(Ele);uuo=r(Eat,"model_type"),Eat.forEach(t),_uo=r(Pee,` property of the config object (either
passed as an argument or loaded from `),Cle=n(Pee,"CODE",{});var Cat=s(Cle);buo=r(Cat,"pretrained_model_name_or_path"),Cat.forEach(t),vuo=r(Pee," if possible):"),Pee.forEach(t),Fuo=i(aa),he=n(aa,"UL",{});var _e=s(he);np=n(_e,"LI",{});var $ye=s(np);wle=n($ye,"STRONG",{});var wat=s(wle);Tuo=r(wat,"clip"),wat.forEach(t),Muo=r($ye," \u2014 "),hN=n($ye,"A",{href:!0});var Aat=s(hN);Euo=r(Aat,"CLIPProcessor"),Aat.forEach(t),Cuo=r($ye," (CLIP model)"),$ye.forEach(t),wuo=i(_e),sp=n(_e,"LI",{});var kye=s(sp);Ale=n(kye,"STRONG",{});var yat=s(Ale);Auo=r(yat,"flava"),yat.forEach(t),yuo=r(kye," \u2014 "),yle=n(kye,"CODE",{});var Lat=s(yle);Luo=r(Lat,"FLAVAProcessor"),Lat.forEach(t),xuo=r(kye," (FLAVA model)"),kye.forEach(t),$uo=i(_e),lp=n(_e,"LI",{});var Sye=s(lp);Lle=n(Sye,"STRONG",{});var xat=s(Lle);kuo=r(xat,"layoutlmv2"),xat.forEach(t),Suo=r(Sye," \u2014 "),pN=n(Sye,"A",{href:!0});var $at=s(pN);Ruo=r($at,"LayoutLMv2Processor"),$at.forEach(t),Puo=r(Sye," (LayoutLMv2 model)"),Sye.forEach(t),Buo=i(_e),ip=n(_e,"LI",{});var Rye=s(ip);xle=n(Rye,"STRONG",{});var kat=s(xle);Iuo=r(kat,"layoutlmv3"),kat.forEach(t),Nuo=r(Rye," \u2014 "),uN=n(Rye,"A",{href:!0});var Sat=s(uN);quo=r(Sat,"LayoutLMv3Processor"),Sat.forEach(t),juo=r(Rye," (LayoutLMv3 model)"),Rye.forEach(t),Duo=i(_e),dp=n(_e,"LI",{});var Pye=s(dp);$le=n(Pye,"STRONG",{});var Rat=s($le);Guo=r(Rat,"layoutxlm"),Rat.forEach(t),Ouo=r(Pye," \u2014 "),_N=n(Pye,"A",{href:!0});var Pat=s(_N);Vuo=r(Pat,"LayoutXLMProcessor"),Pat.forEach(t),Xuo=r(Pye," (LayoutXLM model)"),Pye.forEach(t),zuo=i(_e),cp=n(_e,"LI",{});var Bye=s(cp);kle=n(Bye,"STRONG",{});var Bat=s(kle);Wuo=r(Bat,"sew"),Bat.forEach(t),Quo=r(Bye," \u2014 "),bN=n(Bye,"A",{href:!0});var Iat=s(bN);Huo=r(Iat,"Wav2Vec2Processor"),Iat.forEach(t),Uuo=r(Bye," (SEW model)"),Bye.forEach(t),Juo=i(_e),fp=n(_e,"LI",{});var Iye=s(fp);Sle=n(Iye,"STRONG",{});var Nat=s(Sle);Yuo=r(Nat,"sew-d"),Nat.forEach(t),Kuo=r(Iye," \u2014 "),vN=n(Iye,"A",{href:!0});var qat=s(vN);Zuo=r(qat,"Wav2Vec2Processor"),qat.forEach(t),e_o=r(Iye," (SEW-D model)"),Iye.forEach(t),o_o=i(_e),mp=n(_e,"LI",{});var Nye=s(mp);Rle=n(Nye,"STRONG",{});var jat=s(Rle);r_o=r(jat,"speech_to_text"),jat.forEach(t),t_o=r(Nye," \u2014 "),FN=n(Nye,"A",{href:!0});var Dat=s(FN);a_o=r(Dat,"Speech2TextProcessor"),Dat.forEach(t),n_o=r(Nye," (Speech2Text model)"),Nye.forEach(t),s_o=i(_e),gp=n(_e,"LI",{});var qye=s(gp);Ple=n(qye,"STRONG",{});var Gat=s(Ple);l_o=r(Gat,"speech_to_text_2"),Gat.forEach(t),i_o=r(qye," \u2014 "),TN=n(qye,"A",{href:!0});var Oat=s(TN);d_o=r(Oat,"Speech2Text2Processor"),Oat.forEach(t),c_o=r(qye," (Speech2Text2 model)"),qye.forEach(t),f_o=i(_e),hp=n(_e,"LI",{});var jye=s(hp);Ble=n(jye,"STRONG",{});var Vat=s(Ble);m_o=r(Vat,"trocr"),Vat.forEach(t),g_o=r(jye," \u2014 "),MN=n(jye,"A",{href:!0});var Xat=s(MN);h_o=r(Xat,"TrOCRProcessor"),Xat.forEach(t),p_o=r(jye," (TrOCR model)"),jye.forEach(t),u_o=i(_e),pp=n(_e,"LI",{});var Dye=s(pp);Ile=n(Dye,"STRONG",{});var zat=s(Ile);__o=r(zat,"unispeech"),zat.forEach(t),b_o=r(Dye," \u2014 "),EN=n(Dye,"A",{href:!0});var Wat=s(EN);v_o=r(Wat,"Wav2Vec2Processor"),Wat.forEach(t),F_o=r(Dye," (UniSpeech model)"),Dye.forEach(t),T_o=i(_e),up=n(_e,"LI",{});var Gye=s(up);Nle=n(Gye,"STRONG",{});var Qat=s(Nle);M_o=r(Qat,"unispeech-sat"),Qat.forEach(t),E_o=r(Gye," \u2014 "),CN=n(Gye,"A",{href:!0});var Hat=s(CN);C_o=r(Hat,"Wav2Vec2Processor"),Hat.forEach(t),w_o=r(Gye," (UniSpeechSat model)"),Gye.forEach(t),A_o=i(_e),_p=n(_e,"LI",{});var Oye=s(_p);qle=n(Oye,"STRONG",{});var Uat=s(qle);y_o=r(Uat,"vilt"),Uat.forEach(t),L_o=r(Oye," \u2014 "),wN=n(Oye,"A",{href:!0});var Jat=s(wN);x_o=r(Jat,"ViltProcessor"),Jat.forEach(t),$_o=r(Oye," (ViLT model)"),Oye.forEach(t),k_o=i(_e),bp=n(_e,"LI",{});var Vye=s(bp);jle=n(Vye,"STRONG",{});var Yat=s(jle);S_o=r(Yat,"vision-text-dual-encoder"),Yat.forEach(t),R_o=r(Vye," \u2014 "),AN=n(Vye,"A",{href:!0});var Kat=s(AN);P_o=r(Kat,"VisionTextDualEncoderProcessor"),Kat.forEach(t),B_o=r(Vye," (VisionTextDualEncoder model)"),Vye.forEach(t),I_o=i(_e),vp=n(_e,"LI",{});var Xye=s(vp);Dle=n(Xye,"STRONG",{});var Zat=s(Dle);N_o=r(Zat,"wav2vec2"),Zat.forEach(t),q_o=r(Xye," \u2014 "),yN=n(Xye,"A",{href:!0});var ent=s(yN);j_o=r(ent,"Wav2Vec2Processor"),ent.forEach(t),D_o=r(Xye," (Wav2Vec2 model)"),Xye.forEach(t),G_o=i(_e),Fp=n(_e,"LI",{});var zye=s(Fp);Gle=n(zye,"STRONG",{});var ont=s(Gle);O_o=r(ont,"wav2vec2-conformer"),ont.forEach(t),V_o=r(zye," \u2014 "),LN=n(zye,"A",{href:!0});var rnt=s(LN);X_o=r(rnt,"Wav2Vec2Processor"),rnt.forEach(t),z_o=r(zye," (Wav2Vec2-Conformer model)"),zye.forEach(t),W_o=i(_e),Tp=n(_e,"LI",{});var Wye=s(Tp);Ole=n(Wye,"STRONG",{});var tnt=s(Ole);Q_o=r(tnt,"wavlm"),tnt.forEach(t),H_o=r(Wye," \u2014 "),xN=n(Wye,"A",{href:!0});var ant=s(xN);U_o=r(ant,"Wav2Vec2Processor"),ant.forEach(t),J_o=r(Wye," (WavLM model)"),Wye.forEach(t),_e.forEach(t),Y_o=i(aa),T(Mp.$$.fragment,aa),K_o=i(aa),T(Ep.$$.fragment,aa),aa.forEach(t),Z_o=i(Qs),Cp=n(Qs,"DIV",{class:!0});var GOe=s(Cp);T(Ny.$$.fragment,GOe),e2o=i(GOe),Vle=n(GOe,"P",{});var nnt=s(Vle);o2o=r(nnt,"Register a new processor for this class."),nnt.forEach(t),GOe.forEach(t),Qs.forEach(t),IDe=i(f),Pi=n(f,"H2",{class:!0});var OOe=s(Pi);wp=n(OOe,"A",{id:!0,class:!0,href:!0});var snt=s(wp);Xle=n(snt,"SPAN",{});var lnt=s(Xle);T(qy.$$.fragment,lnt),lnt.forEach(t),snt.forEach(t),r2o=i(OOe),zle=n(OOe,"SPAN",{});var int=s(zle);t2o=r(int,"AutoModel"),int.forEach(t),OOe.forEach(t),NDe=i(f),xo=n(f,"DIV",{class:!0});var Hs=s(xo);T(jy.$$.fragment,Hs),a2o=i(Hs),Bi=n(Hs,"P",{});var Bee=s(Bi);n2o=r(Bee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$N=n(Bee,"A",{href:!0});var dnt=s($N);s2o=r(dnt,"from_pretrained()"),dnt.forEach(t),l2o=r(Bee," class method or the "),kN=n(Bee,"A",{href:!0});var cnt=s(kN);i2o=r(cnt,"from_config()"),cnt.forEach(t),d2o=r(Bee,` class
method.`),Bee.forEach(t),c2o=i(Hs),Dy=n(Hs,"P",{});var VOe=s(Dy);f2o=r(VOe,"This class cannot be instantiated directly using "),Wle=n(VOe,"CODE",{});var fnt=s(Wle);m2o=r(fnt,"__init__()"),fnt.forEach(t),g2o=r(VOe," (throws an error)."),VOe.forEach(t),h2o=i(Hs),st=n(Hs,"DIV",{class:!0});var pA=s(st);T(Gy.$$.fragment,pA),p2o=i(pA),Qle=n(pA,"P",{});var mnt=s(Qle);u2o=r(mnt,"Instantiates one of the base model classes of the library from a configuration."),mnt.forEach(t),_2o=i(pA),Ii=n(pA,"P",{});var Iee=s(Ii);b2o=r(Iee,`Note:
Loading a model from its configuration file does `),Hle=n(Iee,"STRONG",{});var gnt=s(Hle);v2o=r(gnt,"not"),gnt.forEach(t),F2o=r(Iee,` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=n(Iee,"A",{href:!0});var hnt=s(SN);T2o=r(hnt,"from_pretrained()"),hnt.forEach(t),M2o=r(Iee," to load the model weights."),Iee.forEach(t),E2o=i(pA),T(Ap.$$.fragment,pA),pA.forEach(t),C2o=i(Hs),Je=n(Hs,"DIV",{class:!0});var na=s(Je);T(Oy.$$.fragment,na),w2o=i(na),Ule=n(na,"P",{});var pnt=s(Ule);A2o=r(pnt,"Instantiate one of the base model classes of the library from a pretrained model."),pnt.forEach(t),y2o=i(na),Ra=n(na,"P",{});var uA=s(Ra);L2o=r(uA,"The model class to instantiate is selected based on the "),Jle=n(uA,"CODE",{});var unt=s(Jle);x2o=r(unt,"model_type"),unt.forEach(t),$2o=r(uA,` property of the config object (either
passed as an argument or loaded from `),Yle=n(uA,"CODE",{});var _nt=s(Yle);k2o=r(_nt,"pretrained_model_name_or_path"),_nt.forEach(t),S2o=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kle=n(uA,"CODE",{});var bnt=s(Kle);R2o=r(bnt,"pretrained_model_name_or_path"),bnt.forEach(t),P2o=r(uA,":"),uA.forEach(t),B2o=i(na),x=n(na,"UL",{});var $=s(x);yp=n($,"LI",{});var Qye=s(yp);Zle=n(Qye,"STRONG",{});var vnt=s(Zle);I2o=r(vnt,"albert"),vnt.forEach(t),N2o=r(Qye," \u2014 "),RN=n(Qye,"A",{href:!0});var Fnt=s(RN);q2o=r(Fnt,"AlbertModel"),Fnt.forEach(t),j2o=r(Qye," (ALBERT model)"),Qye.forEach(t),D2o=i($),Lp=n($,"LI",{});var Hye=s(Lp);eie=n(Hye,"STRONG",{});var Tnt=s(eie);G2o=r(Tnt,"bart"),Tnt.forEach(t),O2o=r(Hye," \u2014 "),PN=n(Hye,"A",{href:!0});var Mnt=s(PN);V2o=r(Mnt,"BartModel"),Mnt.forEach(t),X2o=r(Hye," (BART model)"),Hye.forEach(t),z2o=i($),xp=n($,"LI",{});var Uye=s(xp);oie=n(Uye,"STRONG",{});var Ent=s(oie);W2o=r(Ent,"beit"),Ent.forEach(t),Q2o=r(Uye," \u2014 "),BN=n(Uye,"A",{href:!0});var Cnt=s(BN);H2o=r(Cnt,"BeitModel"),Cnt.forEach(t),U2o=r(Uye," (BEiT model)"),Uye.forEach(t),J2o=i($),$p=n($,"LI",{});var Jye=s($p);rie=n(Jye,"STRONG",{});var wnt=s(rie);Y2o=r(wnt,"bert"),wnt.forEach(t),K2o=r(Jye," \u2014 "),IN=n(Jye,"A",{href:!0});var Ant=s(IN);Z2o=r(Ant,"BertModel"),Ant.forEach(t),e1o=r(Jye," (BERT model)"),Jye.forEach(t),o1o=i($),kp=n($,"LI",{});var Yye=s(kp);tie=n(Yye,"STRONG",{});var ynt=s(tie);r1o=r(ynt,"bert-generation"),ynt.forEach(t),t1o=r(Yye," \u2014 "),NN=n(Yye,"A",{href:!0});var Lnt=s(NN);a1o=r(Lnt,"BertGenerationEncoder"),Lnt.forEach(t),n1o=r(Yye," (Bert Generation model)"),Yye.forEach(t),s1o=i($),Sp=n($,"LI",{});var Kye=s(Sp);aie=n(Kye,"STRONG",{});var xnt=s(aie);l1o=r(xnt,"big_bird"),xnt.forEach(t),i1o=r(Kye," \u2014 "),qN=n(Kye,"A",{href:!0});var $nt=s(qN);d1o=r($nt,"BigBirdModel"),$nt.forEach(t),c1o=r(Kye," (BigBird model)"),Kye.forEach(t),f1o=i($),Rp=n($,"LI",{});var Zye=s(Rp);nie=n(Zye,"STRONG",{});var knt=s(nie);m1o=r(knt,"bigbird_pegasus"),knt.forEach(t),g1o=r(Zye," \u2014 "),jN=n(Zye,"A",{href:!0});var Snt=s(jN);h1o=r(Snt,"BigBirdPegasusModel"),Snt.forEach(t),p1o=r(Zye," (BigBird-Pegasus model)"),Zye.forEach(t),u1o=i($),Pp=n($,"LI",{});var eLe=s(Pp);sie=n(eLe,"STRONG",{});var Rnt=s(sie);_1o=r(Rnt,"blenderbot"),Rnt.forEach(t),b1o=r(eLe," \u2014 "),DN=n(eLe,"A",{href:!0});var Pnt=s(DN);v1o=r(Pnt,"BlenderbotModel"),Pnt.forEach(t),F1o=r(eLe," (Blenderbot model)"),eLe.forEach(t),T1o=i($),Bp=n($,"LI",{});var oLe=s(Bp);lie=n(oLe,"STRONG",{});var Bnt=s(lie);M1o=r(Bnt,"blenderbot-small"),Bnt.forEach(t),E1o=r(oLe," \u2014 "),GN=n(oLe,"A",{href:!0});var Int=s(GN);C1o=r(Int,"BlenderbotSmallModel"),Int.forEach(t),w1o=r(oLe," (BlenderbotSmall model)"),oLe.forEach(t),A1o=i($),Ip=n($,"LI",{});var rLe=s(Ip);iie=n(rLe,"STRONG",{});var Nnt=s(iie);y1o=r(Nnt,"bloom"),Nnt.forEach(t),L1o=r(rLe," \u2014 "),ON=n(rLe,"A",{href:!0});var qnt=s(ON);x1o=r(qnt,"BloomModel"),qnt.forEach(t),$1o=r(rLe," (BLOOM model)"),rLe.forEach(t),k1o=i($),Np=n($,"LI",{});var tLe=s(Np);die=n(tLe,"STRONG",{});var jnt=s(die);S1o=r(jnt,"camembert"),jnt.forEach(t),R1o=r(tLe," \u2014 "),VN=n(tLe,"A",{href:!0});var Dnt=s(VN);P1o=r(Dnt,"CamembertModel"),Dnt.forEach(t),B1o=r(tLe," (CamemBERT model)"),tLe.forEach(t),I1o=i($),qp=n($,"LI",{});var aLe=s(qp);cie=n(aLe,"STRONG",{});var Gnt=s(cie);N1o=r(Gnt,"canine"),Gnt.forEach(t),q1o=r(aLe," \u2014 "),XN=n(aLe,"A",{href:!0});var Ont=s(XN);j1o=r(Ont,"CanineModel"),Ont.forEach(t),D1o=r(aLe," (CANINE model)"),aLe.forEach(t),G1o=i($),jp=n($,"LI",{});var nLe=s(jp);fie=n(nLe,"STRONG",{});var Vnt=s(fie);O1o=r(Vnt,"clip"),Vnt.forEach(t),V1o=r(nLe," \u2014 "),zN=n(nLe,"A",{href:!0});var Xnt=s(zN);X1o=r(Xnt,"CLIPModel"),Xnt.forEach(t),z1o=r(nLe," (CLIP model)"),nLe.forEach(t),W1o=i($),Dp=n($,"LI",{});var sLe=s(Dp);mie=n(sLe,"STRONG",{});var znt=s(mie);Q1o=r(znt,"convbert"),znt.forEach(t),H1o=r(sLe," \u2014 "),WN=n(sLe,"A",{href:!0});var Wnt=s(WN);U1o=r(Wnt,"ConvBertModel"),Wnt.forEach(t),J1o=r(sLe," (ConvBERT model)"),sLe.forEach(t),Y1o=i($),Gp=n($,"LI",{});var lLe=s(Gp);gie=n(lLe,"STRONG",{});var Qnt=s(gie);K1o=r(Qnt,"convnext"),Qnt.forEach(t),Z1o=r(lLe," \u2014 "),QN=n(lLe,"A",{href:!0});var Hnt=s(QN);e7o=r(Hnt,"ConvNextModel"),Hnt.forEach(t),o7o=r(lLe," (ConvNeXT model)"),lLe.forEach(t),r7o=i($),Op=n($,"LI",{});var iLe=s(Op);hie=n(iLe,"STRONG",{});var Unt=s(hie);t7o=r(Unt,"ctrl"),Unt.forEach(t),a7o=r(iLe," \u2014 "),HN=n(iLe,"A",{href:!0});var Jnt=s(HN);n7o=r(Jnt,"CTRLModel"),Jnt.forEach(t),s7o=r(iLe," (CTRL model)"),iLe.forEach(t),l7o=i($),Vp=n($,"LI",{});var dLe=s(Vp);pie=n(dLe,"STRONG",{});var Ynt=s(pie);i7o=r(Ynt,"cvt"),Ynt.forEach(t),d7o=r(dLe," \u2014 "),UN=n(dLe,"A",{href:!0});var Knt=s(UN);c7o=r(Knt,"CvtModel"),Knt.forEach(t),f7o=r(dLe," (CvT model)"),dLe.forEach(t),m7o=i($),Xp=n($,"LI",{});var cLe=s(Xp);uie=n(cLe,"STRONG",{});var Znt=s(uie);g7o=r(Znt,"data2vec-audio"),Znt.forEach(t),h7o=r(cLe," \u2014 "),JN=n(cLe,"A",{href:!0});var est=s(JN);p7o=r(est,"Data2VecAudioModel"),est.forEach(t),u7o=r(cLe," (Data2VecAudio model)"),cLe.forEach(t),_7o=i($),zp=n($,"LI",{});var fLe=s(zp);_ie=n(fLe,"STRONG",{});var ost=s(_ie);b7o=r(ost,"data2vec-text"),ost.forEach(t),v7o=r(fLe," \u2014 "),YN=n(fLe,"A",{href:!0});var rst=s(YN);F7o=r(rst,"Data2VecTextModel"),rst.forEach(t),T7o=r(fLe," (Data2VecText model)"),fLe.forEach(t),M7o=i($),Wp=n($,"LI",{});var mLe=s(Wp);bie=n(mLe,"STRONG",{});var tst=s(bie);E7o=r(tst,"data2vec-vision"),tst.forEach(t),C7o=r(mLe," \u2014 "),KN=n(mLe,"A",{href:!0});var ast=s(KN);w7o=r(ast,"Data2VecVisionModel"),ast.forEach(t),A7o=r(mLe," (Data2VecVision model)"),mLe.forEach(t),y7o=i($),Qp=n($,"LI",{});var gLe=s(Qp);vie=n(gLe,"STRONG",{});var nst=s(vie);L7o=r(nst,"deberta"),nst.forEach(t),x7o=r(gLe," \u2014 "),ZN=n(gLe,"A",{href:!0});var sst=s(ZN);$7o=r(sst,"DebertaModel"),sst.forEach(t),k7o=r(gLe," (DeBERTa model)"),gLe.forEach(t),S7o=i($),Hp=n($,"LI",{});var hLe=s(Hp);Fie=n(hLe,"STRONG",{});var lst=s(Fie);R7o=r(lst,"deberta-v2"),lst.forEach(t),P7o=r(hLe," \u2014 "),eq=n(hLe,"A",{href:!0});var ist=s(eq);B7o=r(ist,"DebertaV2Model"),ist.forEach(t),I7o=r(hLe," (DeBERTa-v2 model)"),hLe.forEach(t),N7o=i($),Up=n($,"LI",{});var pLe=s(Up);Tie=n(pLe,"STRONG",{});var dst=s(Tie);q7o=r(dst,"decision_transformer"),dst.forEach(t),j7o=r(pLe," \u2014 "),oq=n(pLe,"A",{href:!0});var cst=s(oq);D7o=r(cst,"DecisionTransformerModel"),cst.forEach(t),G7o=r(pLe," (Decision Transformer model)"),pLe.forEach(t),O7o=i($),Jp=n($,"LI",{});var uLe=s(Jp);Mie=n(uLe,"STRONG",{});var fst=s(Mie);V7o=r(fst,"deit"),fst.forEach(t),X7o=r(uLe," \u2014 "),rq=n(uLe,"A",{href:!0});var mst=s(rq);z7o=r(mst,"DeiTModel"),mst.forEach(t),W7o=r(uLe," (DeiT model)"),uLe.forEach(t),Q7o=i($),Yp=n($,"LI",{});var _Le=s(Yp);Eie=n(_Le,"STRONG",{});var gst=s(Eie);H7o=r(gst,"detr"),gst.forEach(t),U7o=r(_Le," \u2014 "),tq=n(_Le,"A",{href:!0});var hst=s(tq);J7o=r(hst,"DetrModel"),hst.forEach(t),Y7o=r(_Le," (DETR model)"),_Le.forEach(t),K7o=i($),Kp=n($,"LI",{});var bLe=s(Kp);Cie=n(bLe,"STRONG",{});var pst=s(Cie);Z7o=r(pst,"distilbert"),pst.forEach(t),ebo=r(bLe," \u2014 "),aq=n(bLe,"A",{href:!0});var ust=s(aq);obo=r(ust,"DistilBertModel"),ust.forEach(t),rbo=r(bLe," (DistilBERT model)"),bLe.forEach(t),tbo=i($),Zp=n($,"LI",{});var vLe=s(Zp);wie=n(vLe,"STRONG",{});var _st=s(wie);abo=r(_st,"dpr"),_st.forEach(t),nbo=r(vLe," \u2014 "),nq=n(vLe,"A",{href:!0});var bst=s(nq);sbo=r(bst,"DPRQuestionEncoder"),bst.forEach(t),lbo=r(vLe," (DPR model)"),vLe.forEach(t),ibo=i($),eu=n($,"LI",{});var FLe=s(eu);Aie=n(FLe,"STRONG",{});var vst=s(Aie);dbo=r(vst,"dpt"),vst.forEach(t),cbo=r(FLe," \u2014 "),sq=n(FLe,"A",{href:!0});var Fst=s(sq);fbo=r(Fst,"DPTModel"),Fst.forEach(t),mbo=r(FLe," (DPT model)"),FLe.forEach(t),gbo=i($),ou=n($,"LI",{});var TLe=s(ou);yie=n(TLe,"STRONG",{});var Tst=s(yie);hbo=r(Tst,"electra"),Tst.forEach(t),pbo=r(TLe," \u2014 "),lq=n(TLe,"A",{href:!0});var Mst=s(lq);ubo=r(Mst,"ElectraModel"),Mst.forEach(t),_bo=r(TLe," (ELECTRA model)"),TLe.forEach(t),bbo=i($),ru=n($,"LI",{});var MLe=s(ru);Lie=n(MLe,"STRONG",{});var Est=s(Lie);vbo=r(Est,"flaubert"),Est.forEach(t),Fbo=r(MLe," \u2014 "),iq=n(MLe,"A",{href:!0});var Cst=s(iq);Tbo=r(Cst,"FlaubertModel"),Cst.forEach(t),Mbo=r(MLe," (FlauBERT model)"),MLe.forEach(t),Ebo=i($),tu=n($,"LI",{});var ELe=s(tu);xie=n(ELe,"STRONG",{});var wst=s(xie);Cbo=r(wst,"flava"),wst.forEach(t),wbo=r(ELe," \u2014 "),dq=n(ELe,"A",{href:!0});var Ast=s(dq);Abo=r(Ast,"FlavaModel"),Ast.forEach(t),ybo=r(ELe," (FLAVA model)"),ELe.forEach(t),Lbo=i($),au=n($,"LI",{});var CLe=s(au);$ie=n(CLe,"STRONG",{});var yst=s($ie);xbo=r(yst,"fnet"),yst.forEach(t),$bo=r(CLe," \u2014 "),cq=n(CLe,"A",{href:!0});var Lst=s(cq);kbo=r(Lst,"FNetModel"),Lst.forEach(t),Sbo=r(CLe," (FNet model)"),CLe.forEach(t),Rbo=i($),nu=n($,"LI",{});var wLe=s(nu);kie=n(wLe,"STRONG",{});var xst=s(kie);Pbo=r(xst,"fsmt"),xst.forEach(t),Bbo=r(wLe," \u2014 "),fq=n(wLe,"A",{href:!0});var $st=s(fq);Ibo=r($st,"FSMTModel"),$st.forEach(t),Nbo=r(wLe," (FairSeq Machine-Translation model)"),wLe.forEach(t),qbo=i($),Ds=n($,"LI",{});var Rk=s(Ds);Sie=n(Rk,"STRONG",{});var kst=s(Sie);jbo=r(kst,"funnel"),kst.forEach(t),Dbo=r(Rk," \u2014 "),mq=n(Rk,"A",{href:!0});var Sst=s(mq);Gbo=r(Sst,"FunnelModel"),Sst.forEach(t),Obo=r(Rk," or "),gq=n(Rk,"A",{href:!0});var Rst=s(gq);Vbo=r(Rst,"FunnelBaseModel"),Rst.forEach(t),Xbo=r(Rk," (Funnel Transformer model)"),Rk.forEach(t),zbo=i($),su=n($,"LI",{});var ALe=s(su);Rie=n(ALe,"STRONG",{});var Pst=s(Rie);Wbo=r(Pst,"glpn"),Pst.forEach(t),Qbo=r(ALe," \u2014 "),hq=n(ALe,"A",{href:!0});var Bst=s(hq);Hbo=r(Bst,"GLPNModel"),Bst.forEach(t),Ubo=r(ALe," (GLPN model)"),ALe.forEach(t),Jbo=i($),lu=n($,"LI",{});var yLe=s(lu);Pie=n(yLe,"STRONG",{});var Ist=s(Pie);Ybo=r(Ist,"gpt2"),Ist.forEach(t),Kbo=r(yLe," \u2014 "),pq=n(yLe,"A",{href:!0});var Nst=s(pq);Zbo=r(Nst,"GPT2Model"),Nst.forEach(t),e4o=r(yLe," (OpenAI GPT-2 model)"),yLe.forEach(t),o4o=i($),iu=n($,"LI",{});var LLe=s(iu);Bie=n(LLe,"STRONG",{});var qst=s(Bie);r4o=r(qst,"gpt_neo"),qst.forEach(t),t4o=r(LLe," \u2014 "),uq=n(LLe,"A",{href:!0});var jst=s(uq);a4o=r(jst,"GPTNeoModel"),jst.forEach(t),n4o=r(LLe," (GPT Neo model)"),LLe.forEach(t),s4o=i($),du=n($,"LI",{});var xLe=s(du);Iie=n(xLe,"STRONG",{});var Dst=s(Iie);l4o=r(Dst,"gpt_neox"),Dst.forEach(t),i4o=r(xLe," \u2014 "),_q=n(xLe,"A",{href:!0});var Gst=s(_q);d4o=r(Gst,"GPTNeoXModel"),Gst.forEach(t),c4o=r(xLe," (GPT NeoX model)"),xLe.forEach(t),f4o=i($),cu=n($,"LI",{});var $Le=s(cu);Nie=n($Le,"STRONG",{});var Ost=s(Nie);m4o=r(Ost,"gptj"),Ost.forEach(t),g4o=r($Le," \u2014 "),bq=n($Le,"A",{href:!0});var Vst=s(bq);h4o=r(Vst,"GPTJModel"),Vst.forEach(t),p4o=r($Le," (GPT-J model)"),$Le.forEach(t),u4o=i($),fu=n($,"LI",{});var kLe=s(fu);qie=n(kLe,"STRONG",{});var Xst=s(qie);_4o=r(Xst,"hubert"),Xst.forEach(t),b4o=r(kLe," \u2014 "),vq=n(kLe,"A",{href:!0});var zst=s(vq);v4o=r(zst,"HubertModel"),zst.forEach(t),F4o=r(kLe," (Hubert model)"),kLe.forEach(t),T4o=i($),mu=n($,"LI",{});var SLe=s(mu);jie=n(SLe,"STRONG",{});var Wst=s(jie);M4o=r(Wst,"ibert"),Wst.forEach(t),E4o=r(SLe," \u2014 "),Fq=n(SLe,"A",{href:!0});var Qst=s(Fq);C4o=r(Qst,"IBertModel"),Qst.forEach(t),w4o=r(SLe," (I-BERT model)"),SLe.forEach(t),A4o=i($),gu=n($,"LI",{});var RLe=s(gu);Die=n(RLe,"STRONG",{});var Hst=s(Die);y4o=r(Hst,"imagegpt"),Hst.forEach(t),L4o=r(RLe," \u2014 "),Tq=n(RLe,"A",{href:!0});var Ust=s(Tq);x4o=r(Ust,"ImageGPTModel"),Ust.forEach(t),$4o=r(RLe," (ImageGPT model)"),RLe.forEach(t),k4o=i($),hu=n($,"LI",{});var PLe=s(hu);Gie=n(PLe,"STRONG",{});var Jst=s(Gie);S4o=r(Jst,"layoutlm"),Jst.forEach(t),R4o=r(PLe," \u2014 "),Mq=n(PLe,"A",{href:!0});var Yst=s(Mq);P4o=r(Yst,"LayoutLMModel"),Yst.forEach(t),B4o=r(PLe," (LayoutLM model)"),PLe.forEach(t),I4o=i($),pu=n($,"LI",{});var BLe=s(pu);Oie=n(BLe,"STRONG",{});var Kst=s(Oie);N4o=r(Kst,"layoutlmv2"),Kst.forEach(t),q4o=r(BLe," \u2014 "),Eq=n(BLe,"A",{href:!0});var Zst=s(Eq);j4o=r(Zst,"LayoutLMv2Model"),Zst.forEach(t),D4o=r(BLe," (LayoutLMv2 model)"),BLe.forEach(t),G4o=i($),uu=n($,"LI",{});var ILe=s(uu);Vie=n(ILe,"STRONG",{});var elt=s(Vie);O4o=r(elt,"layoutlmv3"),elt.forEach(t),V4o=r(ILe," \u2014 "),Cq=n(ILe,"A",{href:!0});var olt=s(Cq);X4o=r(olt,"LayoutLMv3Model"),olt.forEach(t),z4o=r(ILe," (LayoutLMv3 model)"),ILe.forEach(t),W4o=i($),_u=n($,"LI",{});var NLe=s(_u);Xie=n(NLe,"STRONG",{});var rlt=s(Xie);Q4o=r(rlt,"led"),rlt.forEach(t),H4o=r(NLe," \u2014 "),wq=n(NLe,"A",{href:!0});var tlt=s(wq);U4o=r(tlt,"LEDModel"),tlt.forEach(t),J4o=r(NLe," (LED model)"),NLe.forEach(t),Y4o=i($),bu=n($,"LI",{});var qLe=s(bu);zie=n(qLe,"STRONG",{});var alt=s(zie);K4o=r(alt,"levit"),alt.forEach(t),Z4o=r(qLe," \u2014 "),Aq=n(qLe,"A",{href:!0});var nlt=s(Aq);evo=r(nlt,"LevitModel"),nlt.forEach(t),ovo=r(qLe," (LeViT model)"),qLe.forEach(t),rvo=i($),vu=n($,"LI",{});var jLe=s(vu);Wie=n(jLe,"STRONG",{});var slt=s(Wie);tvo=r(slt,"longformer"),slt.forEach(t),avo=r(jLe," \u2014 "),yq=n(jLe,"A",{href:!0});var llt=s(yq);nvo=r(llt,"LongformerModel"),llt.forEach(t),svo=r(jLe," (Longformer model)"),jLe.forEach(t),lvo=i($),Fu=n($,"LI",{});var DLe=s(Fu);Qie=n(DLe,"STRONG",{});var ilt=s(Qie);ivo=r(ilt,"luke"),ilt.forEach(t),dvo=r(DLe," \u2014 "),Lq=n(DLe,"A",{href:!0});var dlt=s(Lq);cvo=r(dlt,"LukeModel"),dlt.forEach(t),fvo=r(DLe," (LUKE model)"),DLe.forEach(t),mvo=i($),Tu=n($,"LI",{});var GLe=s(Tu);Hie=n(GLe,"STRONG",{});var clt=s(Hie);gvo=r(clt,"lxmert"),clt.forEach(t),hvo=r(GLe," \u2014 "),xq=n(GLe,"A",{href:!0});var flt=s(xq);pvo=r(flt,"LxmertModel"),flt.forEach(t),uvo=r(GLe," (LXMERT model)"),GLe.forEach(t),_vo=i($),Mu=n($,"LI",{});var OLe=s(Mu);Uie=n(OLe,"STRONG",{});var mlt=s(Uie);bvo=r(mlt,"m2m_100"),mlt.forEach(t),vvo=r(OLe," \u2014 "),$q=n(OLe,"A",{href:!0});var glt=s($q);Fvo=r(glt,"M2M100Model"),glt.forEach(t),Tvo=r(OLe," (M2M100 model)"),OLe.forEach(t),Mvo=i($),Eu=n($,"LI",{});var VLe=s(Eu);Jie=n(VLe,"STRONG",{});var hlt=s(Jie);Evo=r(hlt,"marian"),hlt.forEach(t),Cvo=r(VLe," \u2014 "),kq=n(VLe,"A",{href:!0});var plt=s(kq);wvo=r(plt,"MarianModel"),plt.forEach(t),Avo=r(VLe," (Marian model)"),VLe.forEach(t),yvo=i($),Cu=n($,"LI",{});var XLe=s(Cu);Yie=n(XLe,"STRONG",{});var ult=s(Yie);Lvo=r(ult,"maskformer"),ult.forEach(t),xvo=r(XLe," \u2014 "),Sq=n(XLe,"A",{href:!0});var _lt=s(Sq);$vo=r(_lt,"MaskFormerModel"),_lt.forEach(t),kvo=r(XLe," (MaskFormer model)"),XLe.forEach(t),Svo=i($),wu=n($,"LI",{});var zLe=s(wu);Kie=n(zLe,"STRONG",{});var blt=s(Kie);Rvo=r(blt,"mbart"),blt.forEach(t),Pvo=r(zLe," \u2014 "),Rq=n(zLe,"A",{href:!0});var vlt=s(Rq);Bvo=r(vlt,"MBartModel"),vlt.forEach(t),Ivo=r(zLe," (mBART model)"),zLe.forEach(t),Nvo=i($),Au=n($,"LI",{});var WLe=s(Au);Zie=n(WLe,"STRONG",{});var Flt=s(Zie);qvo=r(Flt,"mctct"),Flt.forEach(t),jvo=r(WLe," \u2014 "),Pq=n(WLe,"A",{href:!0});var Tlt=s(Pq);Dvo=r(Tlt,"MCTCTModel"),Tlt.forEach(t),Gvo=r(WLe," (M-CTC-T model)"),WLe.forEach(t),Ovo=i($),yu=n($,"LI",{});var QLe=s(yu);ede=n(QLe,"STRONG",{});var Mlt=s(ede);Vvo=r(Mlt,"megatron-bert"),Mlt.forEach(t),Xvo=r(QLe," \u2014 "),Bq=n(QLe,"A",{href:!0});var Elt=s(Bq);zvo=r(Elt,"MegatronBertModel"),Elt.forEach(t),Wvo=r(QLe," (Megatron-BERT model)"),QLe.forEach(t),Qvo=i($),Lu=n($,"LI",{});var HLe=s(Lu);ode=n(HLe,"STRONG",{});var Clt=s(ode);Hvo=r(Clt,"mobilebert"),Clt.forEach(t),Uvo=r(HLe," \u2014 "),Iq=n(HLe,"A",{href:!0});var wlt=s(Iq);Jvo=r(wlt,"MobileBertModel"),wlt.forEach(t),Yvo=r(HLe," (MobileBERT model)"),HLe.forEach(t),Kvo=i($),xu=n($,"LI",{});var ULe=s(xu);rde=n(ULe,"STRONG",{});var Alt=s(rde);Zvo=r(Alt,"mpnet"),Alt.forEach(t),eFo=r(ULe," \u2014 "),Nq=n(ULe,"A",{href:!0});var ylt=s(Nq);oFo=r(ylt,"MPNetModel"),ylt.forEach(t),rFo=r(ULe," (MPNet model)"),ULe.forEach(t),tFo=i($),$u=n($,"LI",{});var JLe=s($u);tde=n(JLe,"STRONG",{});var Llt=s(tde);aFo=r(Llt,"mt5"),Llt.forEach(t),nFo=r(JLe," \u2014 "),qq=n(JLe,"A",{href:!0});var xlt=s(qq);sFo=r(xlt,"MT5Model"),xlt.forEach(t),lFo=r(JLe," (MT5 model)"),JLe.forEach(t),iFo=i($),ku=n($,"LI",{});var YLe=s(ku);ade=n(YLe,"STRONG",{});var $lt=s(ade);dFo=r($lt,"nystromformer"),$lt.forEach(t),cFo=r(YLe," \u2014 "),jq=n(YLe,"A",{href:!0});var klt=s(jq);fFo=r(klt,"NystromformerModel"),klt.forEach(t),mFo=r(YLe," (Nystr\xF6mformer model)"),YLe.forEach(t),gFo=i($),Su=n($,"LI",{});var KLe=s(Su);nde=n(KLe,"STRONG",{});var Slt=s(nde);hFo=r(Slt,"openai-gpt"),Slt.forEach(t),pFo=r(KLe," \u2014 "),Dq=n(KLe,"A",{href:!0});var Rlt=s(Dq);uFo=r(Rlt,"OpenAIGPTModel"),Rlt.forEach(t),_Fo=r(KLe," (OpenAI GPT model)"),KLe.forEach(t),bFo=i($),Ru=n($,"LI",{});var ZLe=s(Ru);sde=n(ZLe,"STRONG",{});var Plt=s(sde);vFo=r(Plt,"opt"),Plt.forEach(t),FFo=r(ZLe," \u2014 "),Gq=n(ZLe,"A",{href:!0});var Blt=s(Gq);TFo=r(Blt,"OPTModel"),Blt.forEach(t),MFo=r(ZLe," (OPT model)"),ZLe.forEach(t),EFo=i($),Pu=n($,"LI",{});var e8e=s(Pu);lde=n(e8e,"STRONG",{});var Ilt=s(lde);CFo=r(Ilt,"pegasus"),Ilt.forEach(t),wFo=r(e8e," \u2014 "),Oq=n(e8e,"A",{href:!0});var Nlt=s(Oq);AFo=r(Nlt,"PegasusModel"),Nlt.forEach(t),yFo=r(e8e," (Pegasus model)"),e8e.forEach(t),LFo=i($),Bu=n($,"LI",{});var o8e=s(Bu);ide=n(o8e,"STRONG",{});var qlt=s(ide);xFo=r(qlt,"perceiver"),qlt.forEach(t),$Fo=r(o8e," \u2014 "),Vq=n(o8e,"A",{href:!0});var jlt=s(Vq);kFo=r(jlt,"PerceiverModel"),jlt.forEach(t),SFo=r(o8e," (Perceiver model)"),o8e.forEach(t),RFo=i($),Iu=n($,"LI",{});var r8e=s(Iu);dde=n(r8e,"STRONG",{});var Dlt=s(dde);PFo=r(Dlt,"plbart"),Dlt.forEach(t),BFo=r(r8e," \u2014 "),Xq=n(r8e,"A",{href:!0});var Glt=s(Xq);IFo=r(Glt,"PLBartModel"),Glt.forEach(t),NFo=r(r8e," (PLBart model)"),r8e.forEach(t),qFo=i($),Nu=n($,"LI",{});var t8e=s(Nu);cde=n(t8e,"STRONG",{});var Olt=s(cde);jFo=r(Olt,"poolformer"),Olt.forEach(t),DFo=r(t8e," \u2014 "),zq=n(t8e,"A",{href:!0});var Vlt=s(zq);GFo=r(Vlt,"PoolFormerModel"),Vlt.forEach(t),OFo=r(t8e," (PoolFormer model)"),t8e.forEach(t),VFo=i($),qu=n($,"LI",{});var a8e=s(qu);fde=n(a8e,"STRONG",{});var Xlt=s(fde);XFo=r(Xlt,"prophetnet"),Xlt.forEach(t),zFo=r(a8e," \u2014 "),Wq=n(a8e,"A",{href:!0});var zlt=s(Wq);WFo=r(zlt,"ProphetNetModel"),zlt.forEach(t),QFo=r(a8e," (ProphetNet model)"),a8e.forEach(t),HFo=i($),ju=n($,"LI",{});var n8e=s(ju);mde=n(n8e,"STRONG",{});var Wlt=s(mde);UFo=r(Wlt,"qdqbert"),Wlt.forEach(t),JFo=r(n8e," \u2014 "),Qq=n(n8e,"A",{href:!0});var Qlt=s(Qq);YFo=r(Qlt,"QDQBertModel"),Qlt.forEach(t),KFo=r(n8e," (QDQBert model)"),n8e.forEach(t),ZFo=i($),Du=n($,"LI",{});var s8e=s(Du);gde=n(s8e,"STRONG",{});var Hlt=s(gde);eTo=r(Hlt,"reformer"),Hlt.forEach(t),oTo=r(s8e," \u2014 "),Hq=n(s8e,"A",{href:!0});var Ult=s(Hq);rTo=r(Ult,"ReformerModel"),Ult.forEach(t),tTo=r(s8e," (Reformer model)"),s8e.forEach(t),aTo=i($),Gu=n($,"LI",{});var l8e=s(Gu);hde=n(l8e,"STRONG",{});var Jlt=s(hde);nTo=r(Jlt,"regnet"),Jlt.forEach(t),sTo=r(l8e," \u2014 "),Uq=n(l8e,"A",{href:!0});var Ylt=s(Uq);lTo=r(Ylt,"RegNetModel"),Ylt.forEach(t),iTo=r(l8e," (RegNet model)"),l8e.forEach(t),dTo=i($),Ou=n($,"LI",{});var i8e=s(Ou);pde=n(i8e,"STRONG",{});var Klt=s(pde);cTo=r(Klt,"rembert"),Klt.forEach(t),fTo=r(i8e," \u2014 "),Jq=n(i8e,"A",{href:!0});var Zlt=s(Jq);mTo=r(Zlt,"RemBertModel"),Zlt.forEach(t),gTo=r(i8e," (RemBERT model)"),i8e.forEach(t),hTo=i($),Vu=n($,"LI",{});var d8e=s(Vu);ude=n(d8e,"STRONG",{});var eit=s(ude);pTo=r(eit,"resnet"),eit.forEach(t),uTo=r(d8e," \u2014 "),Yq=n(d8e,"A",{href:!0});var oit=s(Yq);_To=r(oit,"ResNetModel"),oit.forEach(t),bTo=r(d8e," (ResNet model)"),d8e.forEach(t),vTo=i($),Xu=n($,"LI",{});var c8e=s(Xu);_de=n(c8e,"STRONG",{});var rit=s(_de);FTo=r(rit,"retribert"),rit.forEach(t),TTo=r(c8e," \u2014 "),Kq=n(c8e,"A",{href:!0});var tit=s(Kq);MTo=r(tit,"RetriBertModel"),tit.forEach(t),ETo=r(c8e," (RetriBERT model)"),c8e.forEach(t),CTo=i($),zu=n($,"LI",{});var f8e=s(zu);bde=n(f8e,"STRONG",{});var ait=s(bde);wTo=r(ait,"roberta"),ait.forEach(t),ATo=r(f8e," \u2014 "),Zq=n(f8e,"A",{href:!0});var nit=s(Zq);yTo=r(nit,"RobertaModel"),nit.forEach(t),LTo=r(f8e," (RoBERTa model)"),f8e.forEach(t),xTo=i($),Wu=n($,"LI",{});var m8e=s(Wu);vde=n(m8e,"STRONG",{});var sit=s(vde);$To=r(sit,"roformer"),sit.forEach(t),kTo=r(m8e," \u2014 "),ej=n(m8e,"A",{href:!0});var lit=s(ej);STo=r(lit,"RoFormerModel"),lit.forEach(t),RTo=r(m8e," (RoFormer model)"),m8e.forEach(t),PTo=i($),Qu=n($,"LI",{});var g8e=s(Qu);Fde=n(g8e,"STRONG",{});var iit=s(Fde);BTo=r(iit,"segformer"),iit.forEach(t),ITo=r(g8e," \u2014 "),oj=n(g8e,"A",{href:!0});var dit=s(oj);NTo=r(dit,"SegformerModel"),dit.forEach(t),qTo=r(g8e," (SegFormer model)"),g8e.forEach(t),jTo=i($),Hu=n($,"LI",{});var h8e=s(Hu);Tde=n(h8e,"STRONG",{});var cit=s(Tde);DTo=r(cit,"sew"),cit.forEach(t),GTo=r(h8e," \u2014 "),rj=n(h8e,"A",{href:!0});var fit=s(rj);OTo=r(fit,"SEWModel"),fit.forEach(t),VTo=r(h8e," (SEW model)"),h8e.forEach(t),XTo=i($),Uu=n($,"LI",{});var p8e=s(Uu);Mde=n(p8e,"STRONG",{});var mit=s(Mde);zTo=r(mit,"sew-d"),mit.forEach(t),WTo=r(p8e," \u2014 "),tj=n(p8e,"A",{href:!0});var git=s(tj);QTo=r(git,"SEWDModel"),git.forEach(t),HTo=r(p8e," (SEW-D model)"),p8e.forEach(t),UTo=i($),Ju=n($,"LI",{});var u8e=s(Ju);Ede=n(u8e,"STRONG",{});var hit=s(Ede);JTo=r(hit,"speech_to_text"),hit.forEach(t),YTo=r(u8e," \u2014 "),aj=n(u8e,"A",{href:!0});var pit=s(aj);KTo=r(pit,"Speech2TextModel"),pit.forEach(t),ZTo=r(u8e," (Speech2Text model)"),u8e.forEach(t),eMo=i($),Yu=n($,"LI",{});var _8e=s(Yu);Cde=n(_8e,"STRONG",{});var uit=s(Cde);oMo=r(uit,"splinter"),uit.forEach(t),rMo=r(_8e," \u2014 "),nj=n(_8e,"A",{href:!0});var _it=s(nj);tMo=r(_it,"SplinterModel"),_it.forEach(t),aMo=r(_8e," (Splinter model)"),_8e.forEach(t),nMo=i($),Ku=n($,"LI",{});var b8e=s(Ku);wde=n(b8e,"STRONG",{});var bit=s(wde);sMo=r(bit,"squeezebert"),bit.forEach(t),lMo=r(b8e," \u2014 "),sj=n(b8e,"A",{href:!0});var vit=s(sj);iMo=r(vit,"SqueezeBertModel"),vit.forEach(t),dMo=r(b8e," (SqueezeBERT model)"),b8e.forEach(t),cMo=i($),Zu=n($,"LI",{});var v8e=s(Zu);Ade=n(v8e,"STRONG",{});var Fit=s(Ade);fMo=r(Fit,"swin"),Fit.forEach(t),mMo=r(v8e," \u2014 "),lj=n(v8e,"A",{href:!0});var Tit=s(lj);gMo=r(Tit,"SwinModel"),Tit.forEach(t),hMo=r(v8e," (Swin Transformer model)"),v8e.forEach(t),pMo=i($),e_=n($,"LI",{});var F8e=s(e_);yde=n(F8e,"STRONG",{});var Mit=s(yde);uMo=r(Mit,"t5"),Mit.forEach(t),_Mo=r(F8e," \u2014 "),ij=n(F8e,"A",{href:!0});var Eit=s(ij);bMo=r(Eit,"T5Model"),Eit.forEach(t),vMo=r(F8e," (T5 model)"),F8e.forEach(t),FMo=i($),o_=n($,"LI",{});var T8e=s(o_);Lde=n(T8e,"STRONG",{});var Cit=s(Lde);TMo=r(Cit,"tapas"),Cit.forEach(t),MMo=r(T8e," \u2014 "),dj=n(T8e,"A",{href:!0});var wit=s(dj);EMo=r(wit,"TapasModel"),wit.forEach(t),CMo=r(T8e," (TAPAS model)"),T8e.forEach(t),wMo=i($),r_=n($,"LI",{});var M8e=s(r_);xde=n(M8e,"STRONG",{});var Ait=s(xde);AMo=r(Ait,"trajectory_transformer"),Ait.forEach(t),yMo=r(M8e," \u2014 "),cj=n(M8e,"A",{href:!0});var yit=s(cj);LMo=r(yit,"TrajectoryTransformerModel"),yit.forEach(t),xMo=r(M8e," (Trajectory Transformer model)"),M8e.forEach(t),$Mo=i($),t_=n($,"LI",{});var E8e=s(t_);$de=n(E8e,"STRONG",{});var Lit=s($de);kMo=r(Lit,"transfo-xl"),Lit.forEach(t),SMo=r(E8e," \u2014 "),fj=n(E8e,"A",{href:!0});var xit=s(fj);RMo=r(xit,"TransfoXLModel"),xit.forEach(t),PMo=r(E8e," (Transformer-XL model)"),E8e.forEach(t),BMo=i($),a_=n($,"LI",{});var C8e=s(a_);kde=n(C8e,"STRONG",{});var $it=s(kde);IMo=r($it,"unispeech"),$it.forEach(t),NMo=r(C8e," \u2014 "),mj=n(C8e,"A",{href:!0});var kit=s(mj);qMo=r(kit,"UniSpeechModel"),kit.forEach(t),jMo=r(C8e," (UniSpeech model)"),C8e.forEach(t),DMo=i($),n_=n($,"LI",{});var w8e=s(n_);Sde=n(w8e,"STRONG",{});var Sit=s(Sde);GMo=r(Sit,"unispeech-sat"),Sit.forEach(t),OMo=r(w8e," \u2014 "),gj=n(w8e,"A",{href:!0});var Rit=s(gj);VMo=r(Rit,"UniSpeechSatModel"),Rit.forEach(t),XMo=r(w8e," (UniSpeechSat model)"),w8e.forEach(t),zMo=i($),s_=n($,"LI",{});var A8e=s(s_);Rde=n(A8e,"STRONG",{});var Pit=s(Rde);WMo=r(Pit,"van"),Pit.forEach(t),QMo=r(A8e," \u2014 "),hj=n(A8e,"A",{href:!0});var Bit=s(hj);HMo=r(Bit,"VanModel"),Bit.forEach(t),UMo=r(A8e," (VAN model)"),A8e.forEach(t),JMo=i($),l_=n($,"LI",{});var y8e=s(l_);Pde=n(y8e,"STRONG",{});var Iit=s(Pde);YMo=r(Iit,"vilt"),Iit.forEach(t),KMo=r(y8e," \u2014 "),pj=n(y8e,"A",{href:!0});var Nit=s(pj);ZMo=r(Nit,"ViltModel"),Nit.forEach(t),eEo=r(y8e," (ViLT model)"),y8e.forEach(t),oEo=i($),i_=n($,"LI",{});var L8e=s(i_);Bde=n(L8e,"STRONG",{});var qit=s(Bde);rEo=r(qit,"vision-text-dual-encoder"),qit.forEach(t),tEo=r(L8e," \u2014 "),uj=n(L8e,"A",{href:!0});var jit=s(uj);aEo=r(jit,"VisionTextDualEncoderModel"),jit.forEach(t),nEo=r(L8e," (VisionTextDualEncoder model)"),L8e.forEach(t),sEo=i($),d_=n($,"LI",{});var x8e=s(d_);Ide=n(x8e,"STRONG",{});var Dit=s(Ide);lEo=r(Dit,"visual_bert"),Dit.forEach(t),iEo=r(x8e," \u2014 "),_j=n(x8e,"A",{href:!0});var Git=s(_j);dEo=r(Git,"VisualBertModel"),Git.forEach(t),cEo=r(x8e," (VisualBERT model)"),x8e.forEach(t),fEo=i($),c_=n($,"LI",{});var $8e=s(c_);Nde=n($8e,"STRONG",{});var Oit=s(Nde);mEo=r(Oit,"vit"),Oit.forEach(t),gEo=r($8e," \u2014 "),bj=n($8e,"A",{href:!0});var Vit=s(bj);hEo=r(Vit,"ViTModel"),Vit.forEach(t),pEo=r($8e," (ViT model)"),$8e.forEach(t),uEo=i($),f_=n($,"LI",{});var k8e=s(f_);qde=n(k8e,"STRONG",{});var Xit=s(qde);_Eo=r(Xit,"vit_mae"),Xit.forEach(t),bEo=r(k8e," \u2014 "),vj=n(k8e,"A",{href:!0});var zit=s(vj);vEo=r(zit,"ViTMAEModel"),zit.forEach(t),FEo=r(k8e," (ViTMAE model)"),k8e.forEach(t),TEo=i($),m_=n($,"LI",{});var S8e=s(m_);jde=n(S8e,"STRONG",{});var Wit=s(jde);MEo=r(Wit,"wav2vec2"),Wit.forEach(t),EEo=r(S8e," \u2014 "),Fj=n(S8e,"A",{href:!0});var Qit=s(Fj);CEo=r(Qit,"Wav2Vec2Model"),Qit.forEach(t),wEo=r(S8e," (Wav2Vec2 model)"),S8e.forEach(t),AEo=i($),g_=n($,"LI",{});var R8e=s(g_);Dde=n(R8e,"STRONG",{});var Hit=s(Dde);yEo=r(Hit,"wav2vec2-conformer"),Hit.forEach(t),LEo=r(R8e," \u2014 "),Tj=n(R8e,"A",{href:!0});var Uit=s(Tj);xEo=r(Uit,"Wav2Vec2ConformerModel"),Uit.forEach(t),$Eo=r(R8e," (Wav2Vec2-Conformer model)"),R8e.forEach(t),kEo=i($),h_=n($,"LI",{});var P8e=s(h_);Gde=n(P8e,"STRONG",{});var Jit=s(Gde);SEo=r(Jit,"wavlm"),Jit.forEach(t),REo=r(P8e," \u2014 "),Mj=n(P8e,"A",{href:!0});var Yit=s(Mj);PEo=r(Yit,"WavLMModel"),Yit.forEach(t),BEo=r(P8e," (WavLM model)"),P8e.forEach(t),IEo=i($),p_=n($,"LI",{});var B8e=s(p_);Ode=n(B8e,"STRONG",{});var Kit=s(Ode);NEo=r(Kit,"xglm"),Kit.forEach(t),qEo=r(B8e," \u2014 "),Ej=n(B8e,"A",{href:!0});var Zit=s(Ej);jEo=r(Zit,"XGLMModel"),Zit.forEach(t),DEo=r(B8e," (XGLM model)"),B8e.forEach(t),GEo=i($),u_=n($,"LI",{});var I8e=s(u_);Vde=n(I8e,"STRONG",{});var edt=s(Vde);OEo=r(edt,"xlm"),edt.forEach(t),VEo=r(I8e," \u2014 "),Cj=n(I8e,"A",{href:!0});var odt=s(Cj);XEo=r(odt,"XLMModel"),odt.forEach(t),zEo=r(I8e," (XLM model)"),I8e.forEach(t),WEo=i($),__=n($,"LI",{});var N8e=s(__);Xde=n(N8e,"STRONG",{});var rdt=s(Xde);QEo=r(rdt,"xlm-prophetnet"),rdt.forEach(t),HEo=r(N8e," \u2014 "),wj=n(N8e,"A",{href:!0});var tdt=s(wj);UEo=r(tdt,"XLMProphetNetModel"),tdt.forEach(t),JEo=r(N8e," (XLM-ProphetNet model)"),N8e.forEach(t),YEo=i($),b_=n($,"LI",{});var q8e=s(b_);zde=n(q8e,"STRONG",{});var adt=s(zde);KEo=r(adt,"xlm-roberta"),adt.forEach(t),ZEo=r(q8e," \u2014 "),Aj=n(q8e,"A",{href:!0});var ndt=s(Aj);eCo=r(ndt,"XLMRobertaModel"),ndt.forEach(t),oCo=r(q8e," (XLM-RoBERTa model)"),q8e.forEach(t),rCo=i($),v_=n($,"LI",{});var j8e=s(v_);Wde=n(j8e,"STRONG",{});var sdt=s(Wde);tCo=r(sdt,"xlm-roberta-xl"),sdt.forEach(t),aCo=r(j8e," \u2014 "),yj=n(j8e,"A",{href:!0});var ldt=s(yj);nCo=r(ldt,"XLMRobertaXLModel"),ldt.forEach(t),sCo=r(j8e," (XLM-RoBERTa-XL model)"),j8e.forEach(t),lCo=i($),F_=n($,"LI",{});var D8e=s(F_);Qde=n(D8e,"STRONG",{});var idt=s(Qde);iCo=r(idt,"xlnet"),idt.forEach(t),dCo=r(D8e," \u2014 "),Lj=n(D8e,"A",{href:!0});var ddt=s(Lj);cCo=r(ddt,"XLNetModel"),ddt.forEach(t),fCo=r(D8e," (XLNet model)"),D8e.forEach(t),mCo=i($),T_=n($,"LI",{});var G8e=s(T_);Hde=n(G8e,"STRONG",{});var cdt=s(Hde);gCo=r(cdt,"yolos"),cdt.forEach(t),hCo=r(G8e," \u2014 "),xj=n(G8e,"A",{href:!0});var fdt=s(xj);pCo=r(fdt,"YolosModel"),fdt.forEach(t),uCo=r(G8e," (YOLOS model)"),G8e.forEach(t),_Co=i($),M_=n($,"LI",{});var O8e=s(M_);Ude=n(O8e,"STRONG",{});var mdt=s(Ude);bCo=r(mdt,"yoso"),mdt.forEach(t),vCo=r(O8e," \u2014 "),$j=n(O8e,"A",{href:!0});var gdt=s($j);FCo=r(gdt,"YosoModel"),gdt.forEach(t),TCo=r(O8e," (YOSO model)"),O8e.forEach(t),$.forEach(t),MCo=i(na),E_=n(na,"P",{});var V8e=s(E_);ECo=r(V8e,"The model is set in evaluation mode by default using "),Jde=n(V8e,"CODE",{});var hdt=s(Jde);CCo=r(hdt,"model.eval()"),hdt.forEach(t),wCo=r(V8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yde=n(V8e,"CODE",{});var pdt=s(Yde);ACo=r(pdt,"model.train()"),pdt.forEach(t),V8e.forEach(t),yCo=i(na),T(C_.$$.fragment,na),na.forEach(t),Hs.forEach(t),qDe=i(f),Ni=n(f,"H2",{class:!0});var XOe=s(Ni);w_=n(XOe,"A",{id:!0,class:!0,href:!0});var udt=s(w_);Kde=n(udt,"SPAN",{});var _dt=s(Kde);T(Vy.$$.fragment,_dt),_dt.forEach(t),udt.forEach(t),LCo=i(XOe),Zde=n(XOe,"SPAN",{});var bdt=s(Zde);xCo=r(bdt,"AutoModelForPreTraining"),bdt.forEach(t),XOe.forEach(t),jDe=i(f),$o=n(f,"DIV",{class:!0});var Us=s($o);T(Xy.$$.fragment,Us),$Co=i(Us),qi=n(Us,"P",{});var Nee=s(qi);kCo=r(Nee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kj=n(Nee,"A",{href:!0});var vdt=s(kj);SCo=r(vdt,"from_pretrained()"),vdt.forEach(t),RCo=r(Nee," class method or the "),Sj=n(Nee,"A",{href:!0});var Fdt=s(Sj);PCo=r(Fdt,"from_config()"),Fdt.forEach(t),BCo=r(Nee,` class
method.`),Nee.forEach(t),ICo=i(Us),zy=n(Us,"P",{});var zOe=s(zy);NCo=r(zOe,"This class cannot be instantiated directly using "),ece=n(zOe,"CODE",{});var Tdt=s(ece);qCo=r(Tdt,"__init__()"),Tdt.forEach(t),jCo=r(zOe," (throws an error)."),zOe.forEach(t),DCo=i(Us),lt=n(Us,"DIV",{class:!0});var _A=s(lt);T(Wy.$$.fragment,_A),GCo=i(_A),oce=n(_A,"P",{});var Mdt=s(oce);OCo=r(Mdt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Mdt.forEach(t),VCo=i(_A),ji=n(_A,"P",{});var qee=s(ji);XCo=r(qee,`Note:
Loading a model from its configuration file does `),rce=n(qee,"STRONG",{});var Edt=s(rce);zCo=r(Edt,"not"),Edt.forEach(t),WCo=r(qee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rj=n(qee,"A",{href:!0});var Cdt=s(Rj);QCo=r(Cdt,"from_pretrained()"),Cdt.forEach(t),HCo=r(qee," to load the model weights."),qee.forEach(t),UCo=i(_A),T(A_.$$.fragment,_A),_A.forEach(t),JCo=i(Us),Ye=n(Us,"DIV",{class:!0});var sa=s(Ye);T(Qy.$$.fragment,sa),YCo=i(sa),tce=n(sa,"P",{});var wdt=s(tce);KCo=r(wdt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wdt.forEach(t),ZCo=i(sa),Pa=n(sa,"P",{});var bA=s(Pa);e5o=r(bA,"The model class to instantiate is selected based on the "),ace=n(bA,"CODE",{});var Adt=s(ace);o5o=r(Adt,"model_type"),Adt.forEach(t),r5o=r(bA,` property of the config object (either
passed as an argument or loaded from `),nce=n(bA,"CODE",{});var ydt=s(nce);t5o=r(ydt,"pretrained_model_name_or_path"),ydt.forEach(t),a5o=r(bA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sce=n(bA,"CODE",{});var Ldt=s(sce);n5o=r(Ldt,"pretrained_model_name_or_path"),Ldt.forEach(t),s5o=r(bA,":"),bA.forEach(t),l5o=i(sa),G=n(sa,"UL",{});var O=s(G);y_=n(O,"LI",{});var X8e=s(y_);lce=n(X8e,"STRONG",{});var xdt=s(lce);i5o=r(xdt,"albert"),xdt.forEach(t),d5o=r(X8e," \u2014 "),Pj=n(X8e,"A",{href:!0});var $dt=s(Pj);c5o=r($dt,"AlbertForPreTraining"),$dt.forEach(t),f5o=r(X8e," (ALBERT model)"),X8e.forEach(t),m5o=i(O),L_=n(O,"LI",{});var z8e=s(L_);ice=n(z8e,"STRONG",{});var kdt=s(ice);g5o=r(kdt,"bart"),kdt.forEach(t),h5o=r(z8e," \u2014 "),Bj=n(z8e,"A",{href:!0});var Sdt=s(Bj);p5o=r(Sdt,"BartForConditionalGeneration"),Sdt.forEach(t),u5o=r(z8e," (BART model)"),z8e.forEach(t),_5o=i(O),x_=n(O,"LI",{});var W8e=s(x_);dce=n(W8e,"STRONG",{});var Rdt=s(dce);b5o=r(Rdt,"bert"),Rdt.forEach(t),v5o=r(W8e," \u2014 "),Ij=n(W8e,"A",{href:!0});var Pdt=s(Ij);F5o=r(Pdt,"BertForPreTraining"),Pdt.forEach(t),T5o=r(W8e," (BERT model)"),W8e.forEach(t),M5o=i(O),$_=n(O,"LI",{});var Q8e=s($_);cce=n(Q8e,"STRONG",{});var Bdt=s(cce);E5o=r(Bdt,"big_bird"),Bdt.forEach(t),C5o=r(Q8e," \u2014 "),Nj=n(Q8e,"A",{href:!0});var Idt=s(Nj);w5o=r(Idt,"BigBirdForPreTraining"),Idt.forEach(t),A5o=r(Q8e," (BigBird model)"),Q8e.forEach(t),y5o=i(O),k_=n(O,"LI",{});var H8e=s(k_);fce=n(H8e,"STRONG",{});var Ndt=s(fce);L5o=r(Ndt,"bloom"),Ndt.forEach(t),x5o=r(H8e," \u2014 "),qj=n(H8e,"A",{href:!0});var qdt=s(qj);$5o=r(qdt,"BloomForCausalLM"),qdt.forEach(t),k5o=r(H8e," (BLOOM model)"),H8e.forEach(t),S5o=i(O),S_=n(O,"LI",{});var U8e=s(S_);mce=n(U8e,"STRONG",{});var jdt=s(mce);R5o=r(jdt,"camembert"),jdt.forEach(t),P5o=r(U8e," \u2014 "),jj=n(U8e,"A",{href:!0});var Ddt=s(jj);B5o=r(Ddt,"CamembertForMaskedLM"),Ddt.forEach(t),I5o=r(U8e," (CamemBERT model)"),U8e.forEach(t),N5o=i(O),R_=n(O,"LI",{});var J8e=s(R_);gce=n(J8e,"STRONG",{});var Gdt=s(gce);q5o=r(Gdt,"ctrl"),Gdt.forEach(t),j5o=r(J8e," \u2014 "),Dj=n(J8e,"A",{href:!0});var Odt=s(Dj);D5o=r(Odt,"CTRLLMHeadModel"),Odt.forEach(t),G5o=r(J8e," (CTRL model)"),J8e.forEach(t),O5o=i(O),P_=n(O,"LI",{});var Y8e=s(P_);hce=n(Y8e,"STRONG",{});var Vdt=s(hce);V5o=r(Vdt,"data2vec-text"),Vdt.forEach(t),X5o=r(Y8e," \u2014 "),Gj=n(Y8e,"A",{href:!0});var Xdt=s(Gj);z5o=r(Xdt,"Data2VecTextForMaskedLM"),Xdt.forEach(t),W5o=r(Y8e," (Data2VecText model)"),Y8e.forEach(t),Q5o=i(O),B_=n(O,"LI",{});var K8e=s(B_);pce=n(K8e,"STRONG",{});var zdt=s(pce);H5o=r(zdt,"deberta"),zdt.forEach(t),U5o=r(K8e," \u2014 "),Oj=n(K8e,"A",{href:!0});var Wdt=s(Oj);J5o=r(Wdt,"DebertaForMaskedLM"),Wdt.forEach(t),Y5o=r(K8e," (DeBERTa model)"),K8e.forEach(t),K5o=i(O),I_=n(O,"LI",{});var Z8e=s(I_);uce=n(Z8e,"STRONG",{});var Qdt=s(uce);Z5o=r(Qdt,"deberta-v2"),Qdt.forEach(t),e3o=r(Z8e," \u2014 "),Vj=n(Z8e,"A",{href:!0});var Hdt=s(Vj);o3o=r(Hdt,"DebertaV2ForMaskedLM"),Hdt.forEach(t),r3o=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),t3o=i(O),N_=n(O,"LI",{});var e9e=s(N_);_ce=n(e9e,"STRONG",{});var Udt=s(_ce);a3o=r(Udt,"distilbert"),Udt.forEach(t),n3o=r(e9e," \u2014 "),Xj=n(e9e,"A",{href:!0});var Jdt=s(Xj);s3o=r(Jdt,"DistilBertForMaskedLM"),Jdt.forEach(t),l3o=r(e9e," (DistilBERT model)"),e9e.forEach(t),i3o=i(O),q_=n(O,"LI",{});var o9e=s(q_);bce=n(o9e,"STRONG",{});var Ydt=s(bce);d3o=r(Ydt,"electra"),Ydt.forEach(t),c3o=r(o9e," \u2014 "),zj=n(o9e,"A",{href:!0});var Kdt=s(zj);f3o=r(Kdt,"ElectraForPreTraining"),Kdt.forEach(t),m3o=r(o9e," (ELECTRA model)"),o9e.forEach(t),g3o=i(O),j_=n(O,"LI",{});var r9e=s(j_);vce=n(r9e,"STRONG",{});var Zdt=s(vce);h3o=r(Zdt,"flaubert"),Zdt.forEach(t),p3o=r(r9e," \u2014 "),Wj=n(r9e,"A",{href:!0});var ect=s(Wj);u3o=r(ect,"FlaubertWithLMHeadModel"),ect.forEach(t),_3o=r(r9e," (FlauBERT model)"),r9e.forEach(t),b3o=i(O),D_=n(O,"LI",{});var t9e=s(D_);Fce=n(t9e,"STRONG",{});var oct=s(Fce);v3o=r(oct,"flava"),oct.forEach(t),F3o=r(t9e," \u2014 "),Qj=n(t9e,"A",{href:!0});var rct=s(Qj);T3o=r(rct,"FlavaForPreTraining"),rct.forEach(t),M3o=r(t9e," (FLAVA model)"),t9e.forEach(t),E3o=i(O),G_=n(O,"LI",{});var a9e=s(G_);Tce=n(a9e,"STRONG",{});var tct=s(Tce);C3o=r(tct,"fnet"),tct.forEach(t),w3o=r(a9e," \u2014 "),Hj=n(a9e,"A",{href:!0});var act=s(Hj);A3o=r(act,"FNetForPreTraining"),act.forEach(t),y3o=r(a9e," (FNet model)"),a9e.forEach(t),L3o=i(O),O_=n(O,"LI",{});var n9e=s(O_);Mce=n(n9e,"STRONG",{});var nct=s(Mce);x3o=r(nct,"fsmt"),nct.forEach(t),$3o=r(n9e," \u2014 "),Uj=n(n9e,"A",{href:!0});var sct=s(Uj);k3o=r(sct,"FSMTForConditionalGeneration"),sct.forEach(t),S3o=r(n9e," (FairSeq Machine-Translation model)"),n9e.forEach(t),R3o=i(O),V_=n(O,"LI",{});var s9e=s(V_);Ece=n(s9e,"STRONG",{});var lct=s(Ece);P3o=r(lct,"funnel"),lct.forEach(t),B3o=r(s9e," \u2014 "),Jj=n(s9e,"A",{href:!0});var ict=s(Jj);I3o=r(ict,"FunnelForPreTraining"),ict.forEach(t),N3o=r(s9e," (Funnel Transformer model)"),s9e.forEach(t),q3o=i(O),X_=n(O,"LI",{});var l9e=s(X_);Cce=n(l9e,"STRONG",{});var dct=s(Cce);j3o=r(dct,"gpt2"),dct.forEach(t),D3o=r(l9e," \u2014 "),Yj=n(l9e,"A",{href:!0});var cct=s(Yj);G3o=r(cct,"GPT2LMHeadModel"),cct.forEach(t),O3o=r(l9e," (OpenAI GPT-2 model)"),l9e.forEach(t),V3o=i(O),z_=n(O,"LI",{});var i9e=s(z_);wce=n(i9e,"STRONG",{});var fct=s(wce);X3o=r(fct,"ibert"),fct.forEach(t),z3o=r(i9e," \u2014 "),Kj=n(i9e,"A",{href:!0});var mct=s(Kj);W3o=r(mct,"IBertForMaskedLM"),mct.forEach(t),Q3o=r(i9e," (I-BERT model)"),i9e.forEach(t),H3o=i(O),W_=n(O,"LI",{});var d9e=s(W_);Ace=n(d9e,"STRONG",{});var gct=s(Ace);U3o=r(gct,"layoutlm"),gct.forEach(t),J3o=r(d9e," \u2014 "),Zj=n(d9e,"A",{href:!0});var hct=s(Zj);Y3o=r(hct,"LayoutLMForMaskedLM"),hct.forEach(t),K3o=r(d9e," (LayoutLM model)"),d9e.forEach(t),Z3o=i(O),Q_=n(O,"LI",{});var c9e=s(Q_);yce=n(c9e,"STRONG",{});var pct=s(yce);e0o=r(pct,"longformer"),pct.forEach(t),o0o=r(c9e," \u2014 "),eD=n(c9e,"A",{href:!0});var uct=s(eD);r0o=r(uct,"LongformerForMaskedLM"),uct.forEach(t),t0o=r(c9e," (Longformer model)"),c9e.forEach(t),a0o=i(O),H_=n(O,"LI",{});var f9e=s(H_);Lce=n(f9e,"STRONG",{});var _ct=s(Lce);n0o=r(_ct,"lxmert"),_ct.forEach(t),s0o=r(f9e," \u2014 "),oD=n(f9e,"A",{href:!0});var bct=s(oD);l0o=r(bct,"LxmertForPreTraining"),bct.forEach(t),i0o=r(f9e," (LXMERT model)"),f9e.forEach(t),d0o=i(O),U_=n(O,"LI",{});var m9e=s(U_);xce=n(m9e,"STRONG",{});var vct=s(xce);c0o=r(vct,"megatron-bert"),vct.forEach(t),f0o=r(m9e," \u2014 "),rD=n(m9e,"A",{href:!0});var Fct=s(rD);m0o=r(Fct,"MegatronBertForPreTraining"),Fct.forEach(t),g0o=r(m9e," (Megatron-BERT model)"),m9e.forEach(t),h0o=i(O),J_=n(O,"LI",{});var g9e=s(J_);$ce=n(g9e,"STRONG",{});var Tct=s($ce);p0o=r(Tct,"mobilebert"),Tct.forEach(t),u0o=r(g9e," \u2014 "),tD=n(g9e,"A",{href:!0});var Mct=s(tD);_0o=r(Mct,"MobileBertForPreTraining"),Mct.forEach(t),b0o=r(g9e," (MobileBERT model)"),g9e.forEach(t),v0o=i(O),Y_=n(O,"LI",{});var h9e=s(Y_);kce=n(h9e,"STRONG",{});var Ect=s(kce);F0o=r(Ect,"mpnet"),Ect.forEach(t),T0o=r(h9e," \u2014 "),aD=n(h9e,"A",{href:!0});var Cct=s(aD);M0o=r(Cct,"MPNetForMaskedLM"),Cct.forEach(t),E0o=r(h9e," (MPNet model)"),h9e.forEach(t),C0o=i(O),K_=n(O,"LI",{});var p9e=s(K_);Sce=n(p9e,"STRONG",{});var wct=s(Sce);w0o=r(wct,"openai-gpt"),wct.forEach(t),A0o=r(p9e," \u2014 "),nD=n(p9e,"A",{href:!0});var Act=s(nD);y0o=r(Act,"OpenAIGPTLMHeadModel"),Act.forEach(t),L0o=r(p9e," (OpenAI GPT model)"),p9e.forEach(t),x0o=i(O),Z_=n(O,"LI",{});var u9e=s(Z_);Rce=n(u9e,"STRONG",{});var yct=s(Rce);$0o=r(yct,"retribert"),yct.forEach(t),k0o=r(u9e," \u2014 "),sD=n(u9e,"A",{href:!0});var Lct=s(sD);S0o=r(Lct,"RetriBertModel"),Lct.forEach(t),R0o=r(u9e," (RetriBERT model)"),u9e.forEach(t),P0o=i(O),e2=n(O,"LI",{});var _9e=s(e2);Pce=n(_9e,"STRONG",{});var xct=s(Pce);B0o=r(xct,"roberta"),xct.forEach(t),I0o=r(_9e," \u2014 "),lD=n(_9e,"A",{href:!0});var $ct=s(lD);N0o=r($ct,"RobertaForMaskedLM"),$ct.forEach(t),q0o=r(_9e," (RoBERTa model)"),_9e.forEach(t),j0o=i(O),o2=n(O,"LI",{});var b9e=s(o2);Bce=n(b9e,"STRONG",{});var kct=s(Bce);D0o=r(kct,"splinter"),kct.forEach(t),G0o=r(b9e," \u2014 "),iD=n(b9e,"A",{href:!0});var Sct=s(iD);O0o=r(Sct,"SplinterForPreTraining"),Sct.forEach(t),V0o=r(b9e," (Splinter model)"),b9e.forEach(t),X0o=i(O),r2=n(O,"LI",{});var v9e=s(r2);Ice=n(v9e,"STRONG",{});var Rct=s(Ice);z0o=r(Rct,"squeezebert"),Rct.forEach(t),W0o=r(v9e," \u2014 "),dD=n(v9e,"A",{href:!0});var Pct=s(dD);Q0o=r(Pct,"SqueezeBertForMaskedLM"),Pct.forEach(t),H0o=r(v9e," (SqueezeBERT model)"),v9e.forEach(t),U0o=i(O),t2=n(O,"LI",{});var F9e=s(t2);Nce=n(F9e,"STRONG",{});var Bct=s(Nce);J0o=r(Bct,"t5"),Bct.forEach(t),Y0o=r(F9e," \u2014 "),cD=n(F9e,"A",{href:!0});var Ict=s(cD);K0o=r(Ict,"T5ForConditionalGeneration"),Ict.forEach(t),Z0o=r(F9e," (T5 model)"),F9e.forEach(t),ewo=i(O),a2=n(O,"LI",{});var T9e=s(a2);qce=n(T9e,"STRONG",{});var Nct=s(qce);owo=r(Nct,"tapas"),Nct.forEach(t),rwo=r(T9e," \u2014 "),fD=n(T9e,"A",{href:!0});var qct=s(fD);two=r(qct,"TapasForMaskedLM"),qct.forEach(t),awo=r(T9e," (TAPAS model)"),T9e.forEach(t),nwo=i(O),n2=n(O,"LI",{});var M9e=s(n2);jce=n(M9e,"STRONG",{});var jct=s(jce);swo=r(jct,"transfo-xl"),jct.forEach(t),lwo=r(M9e," \u2014 "),mD=n(M9e,"A",{href:!0});var Dct=s(mD);iwo=r(Dct,"TransfoXLLMHeadModel"),Dct.forEach(t),dwo=r(M9e," (Transformer-XL model)"),M9e.forEach(t),cwo=i(O),s2=n(O,"LI",{});var E9e=s(s2);Dce=n(E9e,"STRONG",{});var Gct=s(Dce);fwo=r(Gct,"unispeech"),Gct.forEach(t),mwo=r(E9e," \u2014 "),gD=n(E9e,"A",{href:!0});var Oct=s(gD);gwo=r(Oct,"UniSpeechForPreTraining"),Oct.forEach(t),hwo=r(E9e," (UniSpeech model)"),E9e.forEach(t),pwo=i(O),l2=n(O,"LI",{});var C9e=s(l2);Gce=n(C9e,"STRONG",{});var Vct=s(Gce);uwo=r(Vct,"unispeech-sat"),Vct.forEach(t),_wo=r(C9e," \u2014 "),hD=n(C9e,"A",{href:!0});var Xct=s(hD);bwo=r(Xct,"UniSpeechSatForPreTraining"),Xct.forEach(t),vwo=r(C9e," (UniSpeechSat model)"),C9e.forEach(t),Fwo=i(O),i2=n(O,"LI",{});var w9e=s(i2);Oce=n(w9e,"STRONG",{});var zct=s(Oce);Two=r(zct,"visual_bert"),zct.forEach(t),Mwo=r(w9e," \u2014 "),pD=n(w9e,"A",{href:!0});var Wct=s(pD);Ewo=r(Wct,"VisualBertForPreTraining"),Wct.forEach(t),Cwo=r(w9e," (VisualBERT model)"),w9e.forEach(t),wwo=i(O),d2=n(O,"LI",{});var A9e=s(d2);Vce=n(A9e,"STRONG",{});var Qct=s(Vce);Awo=r(Qct,"vit_mae"),Qct.forEach(t),ywo=r(A9e," \u2014 "),uD=n(A9e,"A",{href:!0});var Hct=s(uD);Lwo=r(Hct,"ViTMAEForPreTraining"),Hct.forEach(t),xwo=r(A9e," (ViTMAE model)"),A9e.forEach(t),$wo=i(O),c2=n(O,"LI",{});var y9e=s(c2);Xce=n(y9e,"STRONG",{});var Uct=s(Xce);kwo=r(Uct,"wav2vec2"),Uct.forEach(t),Swo=r(y9e," \u2014 "),_D=n(y9e,"A",{href:!0});var Jct=s(_D);Rwo=r(Jct,"Wav2Vec2ForPreTraining"),Jct.forEach(t),Pwo=r(y9e," (Wav2Vec2 model)"),y9e.forEach(t),Bwo=i(O),f2=n(O,"LI",{});var L9e=s(f2);zce=n(L9e,"STRONG",{});var Yct=s(zce);Iwo=r(Yct,"wav2vec2-conformer"),Yct.forEach(t),Nwo=r(L9e," \u2014 "),bD=n(L9e,"A",{href:!0});var Kct=s(bD);qwo=r(Kct,"Wav2Vec2ConformerForPreTraining"),Kct.forEach(t),jwo=r(L9e," (Wav2Vec2-Conformer model)"),L9e.forEach(t),Dwo=i(O),m2=n(O,"LI",{});var x9e=s(m2);Wce=n(x9e,"STRONG",{});var Zct=s(Wce);Gwo=r(Zct,"xlm"),Zct.forEach(t),Owo=r(x9e," \u2014 "),vD=n(x9e,"A",{href:!0});var eft=s(vD);Vwo=r(eft,"XLMWithLMHeadModel"),eft.forEach(t),Xwo=r(x9e," (XLM model)"),x9e.forEach(t),zwo=i(O),g2=n(O,"LI",{});var $9e=s(g2);Qce=n($9e,"STRONG",{});var oft=s(Qce);Wwo=r(oft,"xlm-roberta"),oft.forEach(t),Qwo=r($9e," \u2014 "),FD=n($9e,"A",{href:!0});var rft=s(FD);Hwo=r(rft,"XLMRobertaForMaskedLM"),rft.forEach(t),Uwo=r($9e," (XLM-RoBERTa model)"),$9e.forEach(t),Jwo=i(O),h2=n(O,"LI",{});var k9e=s(h2);Hce=n(k9e,"STRONG",{});var tft=s(Hce);Ywo=r(tft,"xlm-roberta-xl"),tft.forEach(t),Kwo=r(k9e," \u2014 "),TD=n(k9e,"A",{href:!0});var aft=s(TD);Zwo=r(aft,"XLMRobertaXLForMaskedLM"),aft.forEach(t),eAo=r(k9e," (XLM-RoBERTa-XL model)"),k9e.forEach(t),oAo=i(O),p2=n(O,"LI",{});var S9e=s(p2);Uce=n(S9e,"STRONG",{});var nft=s(Uce);rAo=r(nft,"xlnet"),nft.forEach(t),tAo=r(S9e," \u2014 "),MD=n(S9e,"A",{href:!0});var sft=s(MD);aAo=r(sft,"XLNetLMHeadModel"),sft.forEach(t),nAo=r(S9e," (XLNet model)"),S9e.forEach(t),O.forEach(t),sAo=i(sa),u2=n(sa,"P",{});var R9e=s(u2);lAo=r(R9e,"The model is set in evaluation mode by default using "),Jce=n(R9e,"CODE",{});var lft=s(Jce);iAo=r(lft,"model.eval()"),lft.forEach(t),dAo=r(R9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yce=n(R9e,"CODE",{});var ift=s(Yce);cAo=r(ift,"model.train()"),ift.forEach(t),R9e.forEach(t),fAo=i(sa),T(_2.$$.fragment,sa),sa.forEach(t),Us.forEach(t),DDe=i(f),Di=n(f,"H2",{class:!0});var WOe=s(Di);b2=n(WOe,"A",{id:!0,class:!0,href:!0});var dft=s(b2);Kce=n(dft,"SPAN",{});var cft=s(Kce);T(Hy.$$.fragment,cft),cft.forEach(t),dft.forEach(t),mAo=i(WOe),Zce=n(WOe,"SPAN",{});var fft=s(Zce);gAo=r(fft,"AutoModelForCausalLM"),fft.forEach(t),WOe.forEach(t),GDe=i(f),ko=n(f,"DIV",{class:!0});var Js=s(ko);T(Uy.$$.fragment,Js),hAo=i(Js),Gi=n(Js,"P",{});var jee=s(Gi);pAo=r(jee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ED=n(jee,"A",{href:!0});var mft=s(ED);uAo=r(mft,"from_pretrained()"),mft.forEach(t),_Ao=r(jee," class method or the "),CD=n(jee,"A",{href:!0});var gft=s(CD);bAo=r(gft,"from_config()"),gft.forEach(t),vAo=r(jee,` class
method.`),jee.forEach(t),FAo=i(Js),Jy=n(Js,"P",{});var QOe=s(Jy);TAo=r(QOe,"This class cannot be instantiated directly using "),efe=n(QOe,"CODE",{});var hft=s(efe);MAo=r(hft,"__init__()"),hft.forEach(t),EAo=r(QOe," (throws an error)."),QOe.forEach(t),CAo=i(Js),it=n(Js,"DIV",{class:!0});var vA=s(it);T(Yy.$$.fragment,vA),wAo=i(vA),ofe=n(vA,"P",{});var pft=s(ofe);AAo=r(pft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pft.forEach(t),yAo=i(vA),Oi=n(vA,"P",{});var Dee=s(Oi);LAo=r(Dee,`Note:
Loading a model from its configuration file does `),rfe=n(Dee,"STRONG",{});var uft=s(rfe);xAo=r(uft,"not"),uft.forEach(t),$Ao=r(Dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),wD=n(Dee,"A",{href:!0});var _ft=s(wD);kAo=r(_ft,"from_pretrained()"),_ft.forEach(t),SAo=r(Dee," to load the model weights."),Dee.forEach(t),RAo=i(vA),T(v2.$$.fragment,vA),vA.forEach(t),PAo=i(Js),Ke=n(Js,"DIV",{class:!0});var la=s(Ke);T(Ky.$$.fragment,la),BAo=i(la),tfe=n(la,"P",{});var bft=s(tfe);IAo=r(bft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),bft.forEach(t),NAo=i(la),Ba=n(la,"P",{});var FA=s(Ba);qAo=r(FA,"The model class to instantiate is selected based on the "),afe=n(FA,"CODE",{});var vft=s(afe);jAo=r(vft,"model_type"),vft.forEach(t),DAo=r(FA,` property of the config object (either
passed as an argument or loaded from `),nfe=n(FA,"CODE",{});var Fft=s(nfe);GAo=r(Fft,"pretrained_model_name_or_path"),Fft.forEach(t),OAo=r(FA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sfe=n(FA,"CODE",{});var Tft=s(sfe);VAo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),XAo=r(FA,":"),FA.forEach(t),zAo=i(la),z=n(la,"UL",{});var W=s(z);F2=n(W,"LI",{});var P9e=s(F2);lfe=n(P9e,"STRONG",{});var Mft=s(lfe);WAo=r(Mft,"bart"),Mft.forEach(t),QAo=r(P9e," \u2014 "),AD=n(P9e,"A",{href:!0});var Eft=s(AD);HAo=r(Eft,"BartForCausalLM"),Eft.forEach(t),UAo=r(P9e," (BART model)"),P9e.forEach(t),JAo=i(W),T2=n(W,"LI",{});var B9e=s(T2);ife=n(B9e,"STRONG",{});var Cft=s(ife);YAo=r(Cft,"bert"),Cft.forEach(t),KAo=r(B9e," \u2014 "),yD=n(B9e,"A",{href:!0});var wft=s(yD);ZAo=r(wft,"BertLMHeadModel"),wft.forEach(t),e6o=r(B9e," (BERT model)"),B9e.forEach(t),o6o=i(W),M2=n(W,"LI",{});var I9e=s(M2);dfe=n(I9e,"STRONG",{});var Aft=s(dfe);r6o=r(Aft,"bert-generation"),Aft.forEach(t),t6o=r(I9e," \u2014 "),LD=n(I9e,"A",{href:!0});var yft=s(LD);a6o=r(yft,"BertGenerationDecoder"),yft.forEach(t),n6o=r(I9e," (Bert Generation model)"),I9e.forEach(t),s6o=i(W),E2=n(W,"LI",{});var N9e=s(E2);cfe=n(N9e,"STRONG",{});var Lft=s(cfe);l6o=r(Lft,"big_bird"),Lft.forEach(t),i6o=r(N9e," \u2014 "),xD=n(N9e,"A",{href:!0});var xft=s(xD);d6o=r(xft,"BigBirdForCausalLM"),xft.forEach(t),c6o=r(N9e," (BigBird model)"),N9e.forEach(t),f6o=i(W),C2=n(W,"LI",{});var q9e=s(C2);ffe=n(q9e,"STRONG",{});var $ft=s(ffe);m6o=r($ft,"bigbird_pegasus"),$ft.forEach(t),g6o=r(q9e," \u2014 "),$D=n(q9e,"A",{href:!0});var kft=s($D);h6o=r(kft,"BigBirdPegasusForCausalLM"),kft.forEach(t),p6o=r(q9e," (BigBird-Pegasus model)"),q9e.forEach(t),u6o=i(W),w2=n(W,"LI",{});var j9e=s(w2);mfe=n(j9e,"STRONG",{});var Sft=s(mfe);_6o=r(Sft,"blenderbot"),Sft.forEach(t),b6o=r(j9e," \u2014 "),kD=n(j9e,"A",{href:!0});var Rft=s(kD);v6o=r(Rft,"BlenderbotForCausalLM"),Rft.forEach(t),F6o=r(j9e," (Blenderbot model)"),j9e.forEach(t),T6o=i(W),A2=n(W,"LI",{});var D9e=s(A2);gfe=n(D9e,"STRONG",{});var Pft=s(gfe);M6o=r(Pft,"blenderbot-small"),Pft.forEach(t),E6o=r(D9e," \u2014 "),SD=n(D9e,"A",{href:!0});var Bft=s(SD);C6o=r(Bft,"BlenderbotSmallForCausalLM"),Bft.forEach(t),w6o=r(D9e," (BlenderbotSmall model)"),D9e.forEach(t),A6o=i(W),y2=n(W,"LI",{});var G9e=s(y2);hfe=n(G9e,"STRONG",{});var Ift=s(hfe);y6o=r(Ift,"bloom"),Ift.forEach(t),L6o=r(G9e," \u2014 "),RD=n(G9e,"A",{href:!0});var Nft=s(RD);x6o=r(Nft,"BloomForCausalLM"),Nft.forEach(t),$6o=r(G9e," (BLOOM model)"),G9e.forEach(t),k6o=i(W),L2=n(W,"LI",{});var O9e=s(L2);pfe=n(O9e,"STRONG",{});var qft=s(pfe);S6o=r(qft,"camembert"),qft.forEach(t),R6o=r(O9e," \u2014 "),PD=n(O9e,"A",{href:!0});var jft=s(PD);P6o=r(jft,"CamembertForCausalLM"),jft.forEach(t),B6o=r(O9e," (CamemBERT model)"),O9e.forEach(t),I6o=i(W),x2=n(W,"LI",{});var V9e=s(x2);ufe=n(V9e,"STRONG",{});var Dft=s(ufe);N6o=r(Dft,"ctrl"),Dft.forEach(t),q6o=r(V9e," \u2014 "),BD=n(V9e,"A",{href:!0});var Gft=s(BD);j6o=r(Gft,"CTRLLMHeadModel"),Gft.forEach(t),D6o=r(V9e," (CTRL model)"),V9e.forEach(t),G6o=i(W),$2=n(W,"LI",{});var X9e=s($2);_fe=n(X9e,"STRONG",{});var Oft=s(_fe);O6o=r(Oft,"data2vec-text"),Oft.forEach(t),V6o=r(X9e," \u2014 "),ID=n(X9e,"A",{href:!0});var Vft=s(ID);X6o=r(Vft,"Data2VecTextForCausalLM"),Vft.forEach(t),z6o=r(X9e," (Data2VecText model)"),X9e.forEach(t),W6o=i(W),k2=n(W,"LI",{});var z9e=s(k2);bfe=n(z9e,"STRONG",{});var Xft=s(bfe);Q6o=r(Xft,"electra"),Xft.forEach(t),H6o=r(z9e," \u2014 "),ND=n(z9e,"A",{href:!0});var zft=s(ND);U6o=r(zft,"ElectraForCausalLM"),zft.forEach(t),J6o=r(z9e," (ELECTRA model)"),z9e.forEach(t),Y6o=i(W),S2=n(W,"LI",{});var W9e=s(S2);vfe=n(W9e,"STRONG",{});var Wft=s(vfe);K6o=r(Wft,"gpt2"),Wft.forEach(t),Z6o=r(W9e," \u2014 "),qD=n(W9e,"A",{href:!0});var Qft=s(qD);eyo=r(Qft,"GPT2LMHeadModel"),Qft.forEach(t),oyo=r(W9e," (OpenAI GPT-2 model)"),W9e.forEach(t),ryo=i(W),R2=n(W,"LI",{});var Q9e=s(R2);Ffe=n(Q9e,"STRONG",{});var Hft=s(Ffe);tyo=r(Hft,"gpt_neo"),Hft.forEach(t),ayo=r(Q9e," \u2014 "),jD=n(Q9e,"A",{href:!0});var Uft=s(jD);nyo=r(Uft,"GPTNeoForCausalLM"),Uft.forEach(t),syo=r(Q9e," (GPT Neo model)"),Q9e.forEach(t),lyo=i(W),P2=n(W,"LI",{});var H9e=s(P2);Tfe=n(H9e,"STRONG",{});var Jft=s(Tfe);iyo=r(Jft,"gpt_neox"),Jft.forEach(t),dyo=r(H9e," \u2014 "),DD=n(H9e,"A",{href:!0});var Yft=s(DD);cyo=r(Yft,"GPTNeoXForCausalLM"),Yft.forEach(t),fyo=r(H9e," (GPT NeoX model)"),H9e.forEach(t),myo=i(W),B2=n(W,"LI",{});var U9e=s(B2);Mfe=n(U9e,"STRONG",{});var Kft=s(Mfe);gyo=r(Kft,"gptj"),Kft.forEach(t),hyo=r(U9e," \u2014 "),GD=n(U9e,"A",{href:!0});var Zft=s(GD);pyo=r(Zft,"GPTJForCausalLM"),Zft.forEach(t),uyo=r(U9e," (GPT-J model)"),U9e.forEach(t),_yo=i(W),I2=n(W,"LI",{});var J9e=s(I2);Efe=n(J9e,"STRONG",{});var emt=s(Efe);byo=r(emt,"marian"),emt.forEach(t),vyo=r(J9e," \u2014 "),OD=n(J9e,"A",{href:!0});var omt=s(OD);Fyo=r(omt,"MarianForCausalLM"),omt.forEach(t),Tyo=r(J9e," (Marian model)"),J9e.forEach(t),Myo=i(W),N2=n(W,"LI",{});var Y9e=s(N2);Cfe=n(Y9e,"STRONG",{});var rmt=s(Cfe);Eyo=r(rmt,"mbart"),rmt.forEach(t),Cyo=r(Y9e," \u2014 "),VD=n(Y9e,"A",{href:!0});var tmt=s(VD);wyo=r(tmt,"MBartForCausalLM"),tmt.forEach(t),Ayo=r(Y9e," (mBART model)"),Y9e.forEach(t),yyo=i(W),q2=n(W,"LI",{});var K9e=s(q2);wfe=n(K9e,"STRONG",{});var amt=s(wfe);Lyo=r(amt,"megatron-bert"),amt.forEach(t),xyo=r(K9e," \u2014 "),XD=n(K9e,"A",{href:!0});var nmt=s(XD);$yo=r(nmt,"MegatronBertForCausalLM"),nmt.forEach(t),kyo=r(K9e," (Megatron-BERT model)"),K9e.forEach(t),Syo=i(W),j2=n(W,"LI",{});var Z9e=s(j2);Afe=n(Z9e,"STRONG",{});var smt=s(Afe);Ryo=r(smt,"openai-gpt"),smt.forEach(t),Pyo=r(Z9e," \u2014 "),zD=n(Z9e,"A",{href:!0});var lmt=s(zD);Byo=r(lmt,"OpenAIGPTLMHeadModel"),lmt.forEach(t),Iyo=r(Z9e," (OpenAI GPT model)"),Z9e.forEach(t),Nyo=i(W),D2=n(W,"LI",{});var exe=s(D2);yfe=n(exe,"STRONG",{});var imt=s(yfe);qyo=r(imt,"opt"),imt.forEach(t),jyo=r(exe," \u2014 "),WD=n(exe,"A",{href:!0});var dmt=s(WD);Dyo=r(dmt,"OPTForCausalLM"),dmt.forEach(t),Gyo=r(exe," (OPT model)"),exe.forEach(t),Oyo=i(W),G2=n(W,"LI",{});var oxe=s(G2);Lfe=n(oxe,"STRONG",{});var cmt=s(Lfe);Vyo=r(cmt,"pegasus"),cmt.forEach(t),Xyo=r(oxe," \u2014 "),QD=n(oxe,"A",{href:!0});var fmt=s(QD);zyo=r(fmt,"PegasusForCausalLM"),fmt.forEach(t),Wyo=r(oxe," (Pegasus model)"),oxe.forEach(t),Qyo=i(W),O2=n(W,"LI",{});var rxe=s(O2);xfe=n(rxe,"STRONG",{});var mmt=s(xfe);Hyo=r(mmt,"plbart"),mmt.forEach(t),Uyo=r(rxe," \u2014 "),HD=n(rxe,"A",{href:!0});var gmt=s(HD);Jyo=r(gmt,"PLBartForCausalLM"),gmt.forEach(t),Yyo=r(rxe," (PLBart model)"),rxe.forEach(t),Kyo=i(W),V2=n(W,"LI",{});var txe=s(V2);$fe=n(txe,"STRONG",{});var hmt=s($fe);Zyo=r(hmt,"prophetnet"),hmt.forEach(t),eLo=r(txe," \u2014 "),UD=n(txe,"A",{href:!0});var pmt=s(UD);oLo=r(pmt,"ProphetNetForCausalLM"),pmt.forEach(t),rLo=r(txe," (ProphetNet model)"),txe.forEach(t),tLo=i(W),X2=n(W,"LI",{});var axe=s(X2);kfe=n(axe,"STRONG",{});var umt=s(kfe);aLo=r(umt,"qdqbert"),umt.forEach(t),nLo=r(axe," \u2014 "),JD=n(axe,"A",{href:!0});var _mt=s(JD);sLo=r(_mt,"QDQBertLMHeadModel"),_mt.forEach(t),lLo=r(axe," (QDQBert model)"),axe.forEach(t),iLo=i(W),z2=n(W,"LI",{});var nxe=s(z2);Sfe=n(nxe,"STRONG",{});var bmt=s(Sfe);dLo=r(bmt,"reformer"),bmt.forEach(t),cLo=r(nxe," \u2014 "),YD=n(nxe,"A",{href:!0});var vmt=s(YD);fLo=r(vmt,"ReformerModelWithLMHead"),vmt.forEach(t),mLo=r(nxe," (Reformer model)"),nxe.forEach(t),gLo=i(W),W2=n(W,"LI",{});var sxe=s(W2);Rfe=n(sxe,"STRONG",{});var Fmt=s(Rfe);hLo=r(Fmt,"rembert"),Fmt.forEach(t),pLo=r(sxe," \u2014 "),KD=n(sxe,"A",{href:!0});var Tmt=s(KD);uLo=r(Tmt,"RemBertForCausalLM"),Tmt.forEach(t),_Lo=r(sxe," (RemBERT model)"),sxe.forEach(t),bLo=i(W),Q2=n(W,"LI",{});var lxe=s(Q2);Pfe=n(lxe,"STRONG",{});var Mmt=s(Pfe);vLo=r(Mmt,"roberta"),Mmt.forEach(t),FLo=r(lxe," \u2014 "),ZD=n(lxe,"A",{href:!0});var Emt=s(ZD);TLo=r(Emt,"RobertaForCausalLM"),Emt.forEach(t),MLo=r(lxe," (RoBERTa model)"),lxe.forEach(t),ELo=i(W),H2=n(W,"LI",{});var ixe=s(H2);Bfe=n(ixe,"STRONG",{});var Cmt=s(Bfe);CLo=r(Cmt,"roformer"),Cmt.forEach(t),wLo=r(ixe," \u2014 "),eG=n(ixe,"A",{href:!0});var wmt=s(eG);ALo=r(wmt,"RoFormerForCausalLM"),wmt.forEach(t),yLo=r(ixe," (RoFormer model)"),ixe.forEach(t),LLo=i(W),U2=n(W,"LI",{});var dxe=s(U2);Ife=n(dxe,"STRONG",{});var Amt=s(Ife);xLo=r(Amt,"speech_to_text_2"),Amt.forEach(t),$Lo=r(dxe," \u2014 "),oG=n(dxe,"A",{href:!0});var ymt=s(oG);kLo=r(ymt,"Speech2Text2ForCausalLM"),ymt.forEach(t),SLo=r(dxe," (Speech2Text2 model)"),dxe.forEach(t),RLo=i(W),J2=n(W,"LI",{});var cxe=s(J2);Nfe=n(cxe,"STRONG",{});var Lmt=s(Nfe);PLo=r(Lmt,"transfo-xl"),Lmt.forEach(t),BLo=r(cxe," \u2014 "),rG=n(cxe,"A",{href:!0});var xmt=s(rG);ILo=r(xmt,"TransfoXLLMHeadModel"),xmt.forEach(t),NLo=r(cxe," (Transformer-XL model)"),cxe.forEach(t),qLo=i(W),Y2=n(W,"LI",{});var fxe=s(Y2);qfe=n(fxe,"STRONG",{});var $mt=s(qfe);jLo=r($mt,"trocr"),$mt.forEach(t),DLo=r(fxe," \u2014 "),tG=n(fxe,"A",{href:!0});var kmt=s(tG);GLo=r(kmt,"TrOCRForCausalLM"),kmt.forEach(t),OLo=r(fxe," (TrOCR model)"),fxe.forEach(t),VLo=i(W),K2=n(W,"LI",{});var mxe=s(K2);jfe=n(mxe,"STRONG",{});var Smt=s(jfe);XLo=r(Smt,"xglm"),Smt.forEach(t),zLo=r(mxe," \u2014 "),aG=n(mxe,"A",{href:!0});var Rmt=s(aG);WLo=r(Rmt,"XGLMForCausalLM"),Rmt.forEach(t),QLo=r(mxe," (XGLM model)"),mxe.forEach(t),HLo=i(W),Z2=n(W,"LI",{});var gxe=s(Z2);Dfe=n(gxe,"STRONG",{});var Pmt=s(Dfe);ULo=r(Pmt,"xlm"),Pmt.forEach(t),JLo=r(gxe," \u2014 "),nG=n(gxe,"A",{href:!0});var Bmt=s(nG);YLo=r(Bmt,"XLMWithLMHeadModel"),Bmt.forEach(t),KLo=r(gxe," (XLM model)"),gxe.forEach(t),ZLo=i(W),e1=n(W,"LI",{});var hxe=s(e1);Gfe=n(hxe,"STRONG",{});var Imt=s(Gfe);e8o=r(Imt,"xlm-prophetnet"),Imt.forEach(t),o8o=r(hxe," \u2014 "),sG=n(hxe,"A",{href:!0});var Nmt=s(sG);r8o=r(Nmt,"XLMProphetNetForCausalLM"),Nmt.forEach(t),t8o=r(hxe," (XLM-ProphetNet model)"),hxe.forEach(t),a8o=i(W),o1=n(W,"LI",{});var pxe=s(o1);Ofe=n(pxe,"STRONG",{});var qmt=s(Ofe);n8o=r(qmt,"xlm-roberta"),qmt.forEach(t),s8o=r(pxe," \u2014 "),lG=n(pxe,"A",{href:!0});var jmt=s(lG);l8o=r(jmt,"XLMRobertaForCausalLM"),jmt.forEach(t),i8o=r(pxe," (XLM-RoBERTa model)"),pxe.forEach(t),d8o=i(W),r1=n(W,"LI",{});var uxe=s(r1);Vfe=n(uxe,"STRONG",{});var Dmt=s(Vfe);c8o=r(Dmt,"xlm-roberta-xl"),Dmt.forEach(t),f8o=r(uxe," \u2014 "),iG=n(uxe,"A",{href:!0});var Gmt=s(iG);m8o=r(Gmt,"XLMRobertaXLForCausalLM"),Gmt.forEach(t),g8o=r(uxe," (XLM-RoBERTa-XL model)"),uxe.forEach(t),h8o=i(W),t1=n(W,"LI",{});var _xe=s(t1);Xfe=n(_xe,"STRONG",{});var Omt=s(Xfe);p8o=r(Omt,"xlnet"),Omt.forEach(t),u8o=r(_xe," \u2014 "),dG=n(_xe,"A",{href:!0});var Vmt=s(dG);_8o=r(Vmt,"XLNetLMHeadModel"),Vmt.forEach(t),b8o=r(_xe," (XLNet model)"),_xe.forEach(t),W.forEach(t),v8o=i(la),a1=n(la,"P",{});var bxe=s(a1);F8o=r(bxe,"The model is set in evaluation mode by default using "),zfe=n(bxe,"CODE",{});var Xmt=s(zfe);T8o=r(Xmt,"model.eval()"),Xmt.forEach(t),M8o=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wfe=n(bxe,"CODE",{});var zmt=s(Wfe);E8o=r(zmt,"model.train()"),zmt.forEach(t),bxe.forEach(t),C8o=i(la),T(n1.$$.fragment,la),la.forEach(t),Js.forEach(t),ODe=i(f),Vi=n(f,"H2",{class:!0});var HOe=s(Vi);s1=n(HOe,"A",{id:!0,class:!0,href:!0});var Wmt=s(s1);Qfe=n(Wmt,"SPAN",{});var Qmt=s(Qfe);T(Zy.$$.fragment,Qmt),Qmt.forEach(t),Wmt.forEach(t),w8o=i(HOe),Hfe=n(HOe,"SPAN",{});var Hmt=s(Hfe);A8o=r(Hmt,"AutoModelForMaskedLM"),Hmt.forEach(t),HOe.forEach(t),VDe=i(f),So=n(f,"DIV",{class:!0});var Ys=s(So);T(eL.$$.fragment,Ys),y8o=i(Ys),Xi=n(Ys,"P",{});var Gee=s(Xi);L8o=r(Gee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),cG=n(Gee,"A",{href:!0});var Umt=s(cG);x8o=r(Umt,"from_pretrained()"),Umt.forEach(t),$8o=r(Gee," class method or the "),fG=n(Gee,"A",{href:!0});var Jmt=s(fG);k8o=r(Jmt,"from_config()"),Jmt.forEach(t),S8o=r(Gee,` class
method.`),Gee.forEach(t),R8o=i(Ys),oL=n(Ys,"P",{});var UOe=s(oL);P8o=r(UOe,"This class cannot be instantiated directly using "),Ufe=n(UOe,"CODE",{});var Ymt=s(Ufe);B8o=r(Ymt,"__init__()"),Ymt.forEach(t),I8o=r(UOe," (throws an error)."),UOe.forEach(t),N8o=i(Ys),dt=n(Ys,"DIV",{class:!0});var TA=s(dt);T(rL.$$.fragment,TA),q8o=i(TA),Jfe=n(TA,"P",{});var Kmt=s(Jfe);j8o=r(Kmt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Kmt.forEach(t),D8o=i(TA),zi=n(TA,"P",{});var Oee=s(zi);G8o=r(Oee,`Note:
Loading a model from its configuration file does `),Yfe=n(Oee,"STRONG",{});var Zmt=s(Yfe);O8o=r(Zmt,"not"),Zmt.forEach(t),V8o=r(Oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(Oee,"A",{href:!0});var egt=s(mG);X8o=r(egt,"from_pretrained()"),egt.forEach(t),z8o=r(Oee," to load the model weights."),Oee.forEach(t),W8o=i(TA),T(l1.$$.fragment,TA),TA.forEach(t),Q8o=i(Ys),Ze=n(Ys,"DIV",{class:!0});var ia=s(Ze);T(tL.$$.fragment,ia),H8o=i(ia),Kfe=n(ia,"P",{});var ogt=s(Kfe);U8o=r(ogt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ogt.forEach(t),J8o=i(ia),Ia=n(ia,"P",{});var MA=s(Ia);Y8o=r(MA,"The model class to instantiate is selected based on the "),Zfe=n(MA,"CODE",{});var rgt=s(Zfe);K8o=r(rgt,"model_type"),rgt.forEach(t),Z8o=r(MA,` property of the config object (either
passed as an argument or loaded from `),eme=n(MA,"CODE",{});var tgt=s(eme);e9o=r(tgt,"pretrained_model_name_or_path"),tgt.forEach(t),o9o=r(MA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ome=n(MA,"CODE",{});var agt=s(ome);r9o=r(agt,"pretrained_model_name_or_path"),agt.forEach(t),t9o=r(MA,":"),MA.forEach(t),a9o=i(ia),Q=n(ia,"UL",{});var H=s(Q);i1=n(H,"LI",{});var vxe=s(i1);rme=n(vxe,"STRONG",{});var ngt=s(rme);n9o=r(ngt,"albert"),ngt.forEach(t),s9o=r(vxe," \u2014 "),gG=n(vxe,"A",{href:!0});var sgt=s(gG);l9o=r(sgt,"AlbertForMaskedLM"),sgt.forEach(t),i9o=r(vxe," (ALBERT model)"),vxe.forEach(t),d9o=i(H),d1=n(H,"LI",{});var Fxe=s(d1);tme=n(Fxe,"STRONG",{});var lgt=s(tme);c9o=r(lgt,"bart"),lgt.forEach(t),f9o=r(Fxe," \u2014 "),hG=n(Fxe,"A",{href:!0});var igt=s(hG);m9o=r(igt,"BartForConditionalGeneration"),igt.forEach(t),g9o=r(Fxe," (BART model)"),Fxe.forEach(t),h9o=i(H),c1=n(H,"LI",{});var Txe=s(c1);ame=n(Txe,"STRONG",{});var dgt=s(ame);p9o=r(dgt,"bert"),dgt.forEach(t),u9o=r(Txe," \u2014 "),pG=n(Txe,"A",{href:!0});var cgt=s(pG);_9o=r(cgt,"BertForMaskedLM"),cgt.forEach(t),b9o=r(Txe," (BERT model)"),Txe.forEach(t),v9o=i(H),f1=n(H,"LI",{});var Mxe=s(f1);nme=n(Mxe,"STRONG",{});var fgt=s(nme);F9o=r(fgt,"big_bird"),fgt.forEach(t),T9o=r(Mxe," \u2014 "),uG=n(Mxe,"A",{href:!0});var mgt=s(uG);M9o=r(mgt,"BigBirdForMaskedLM"),mgt.forEach(t),E9o=r(Mxe," (BigBird model)"),Mxe.forEach(t),C9o=i(H),m1=n(H,"LI",{});var Exe=s(m1);sme=n(Exe,"STRONG",{});var ggt=s(sme);w9o=r(ggt,"camembert"),ggt.forEach(t),A9o=r(Exe," \u2014 "),_G=n(Exe,"A",{href:!0});var hgt=s(_G);y9o=r(hgt,"CamembertForMaskedLM"),hgt.forEach(t),L9o=r(Exe," (CamemBERT model)"),Exe.forEach(t),x9o=i(H),g1=n(H,"LI",{});var Cxe=s(g1);lme=n(Cxe,"STRONG",{});var pgt=s(lme);$9o=r(pgt,"convbert"),pgt.forEach(t),k9o=r(Cxe," \u2014 "),bG=n(Cxe,"A",{href:!0});var ugt=s(bG);S9o=r(ugt,"ConvBertForMaskedLM"),ugt.forEach(t),R9o=r(Cxe," (ConvBERT model)"),Cxe.forEach(t),P9o=i(H),h1=n(H,"LI",{});var wxe=s(h1);ime=n(wxe,"STRONG",{});var _gt=s(ime);B9o=r(_gt,"data2vec-text"),_gt.forEach(t),I9o=r(wxe," \u2014 "),vG=n(wxe,"A",{href:!0});var bgt=s(vG);N9o=r(bgt,"Data2VecTextForMaskedLM"),bgt.forEach(t),q9o=r(wxe," (Data2VecText model)"),wxe.forEach(t),j9o=i(H),p1=n(H,"LI",{});var Axe=s(p1);dme=n(Axe,"STRONG",{});var vgt=s(dme);D9o=r(vgt,"deberta"),vgt.forEach(t),G9o=r(Axe," \u2014 "),FG=n(Axe,"A",{href:!0});var Fgt=s(FG);O9o=r(Fgt,"DebertaForMaskedLM"),Fgt.forEach(t),V9o=r(Axe," (DeBERTa model)"),Axe.forEach(t),X9o=i(H),u1=n(H,"LI",{});var yxe=s(u1);cme=n(yxe,"STRONG",{});var Tgt=s(cme);z9o=r(Tgt,"deberta-v2"),Tgt.forEach(t),W9o=r(yxe," \u2014 "),TG=n(yxe,"A",{href:!0});var Mgt=s(TG);Q9o=r(Mgt,"DebertaV2ForMaskedLM"),Mgt.forEach(t),H9o=r(yxe," (DeBERTa-v2 model)"),yxe.forEach(t),U9o=i(H),_1=n(H,"LI",{});var Lxe=s(_1);fme=n(Lxe,"STRONG",{});var Egt=s(fme);J9o=r(Egt,"distilbert"),Egt.forEach(t),Y9o=r(Lxe," \u2014 "),MG=n(Lxe,"A",{href:!0});var Cgt=s(MG);K9o=r(Cgt,"DistilBertForMaskedLM"),Cgt.forEach(t),Z9o=r(Lxe," (DistilBERT model)"),Lxe.forEach(t),exo=i(H),b1=n(H,"LI",{});var xxe=s(b1);mme=n(xxe,"STRONG",{});var wgt=s(mme);oxo=r(wgt,"electra"),wgt.forEach(t),rxo=r(xxe," \u2014 "),EG=n(xxe,"A",{href:!0});var Agt=s(EG);txo=r(Agt,"ElectraForMaskedLM"),Agt.forEach(t),axo=r(xxe," (ELECTRA model)"),xxe.forEach(t),nxo=i(H),v1=n(H,"LI",{});var $xe=s(v1);gme=n($xe,"STRONG",{});var ygt=s(gme);sxo=r(ygt,"flaubert"),ygt.forEach(t),lxo=r($xe," \u2014 "),CG=n($xe,"A",{href:!0});var Lgt=s(CG);ixo=r(Lgt,"FlaubertWithLMHeadModel"),Lgt.forEach(t),dxo=r($xe," (FlauBERT model)"),$xe.forEach(t),cxo=i(H),F1=n(H,"LI",{});var kxe=s(F1);hme=n(kxe,"STRONG",{});var xgt=s(hme);fxo=r(xgt,"fnet"),xgt.forEach(t),mxo=r(kxe," \u2014 "),wG=n(kxe,"A",{href:!0});var $gt=s(wG);gxo=r($gt,"FNetForMaskedLM"),$gt.forEach(t),hxo=r(kxe," (FNet model)"),kxe.forEach(t),pxo=i(H),T1=n(H,"LI",{});var Sxe=s(T1);pme=n(Sxe,"STRONG",{});var kgt=s(pme);uxo=r(kgt,"funnel"),kgt.forEach(t),_xo=r(Sxe," \u2014 "),AG=n(Sxe,"A",{href:!0});var Sgt=s(AG);bxo=r(Sgt,"FunnelForMaskedLM"),Sgt.forEach(t),vxo=r(Sxe," (Funnel Transformer model)"),Sxe.forEach(t),Fxo=i(H),M1=n(H,"LI",{});var Rxe=s(M1);ume=n(Rxe,"STRONG",{});var Rgt=s(ume);Txo=r(Rgt,"ibert"),Rgt.forEach(t),Mxo=r(Rxe," \u2014 "),yG=n(Rxe,"A",{href:!0});var Pgt=s(yG);Exo=r(Pgt,"IBertForMaskedLM"),Pgt.forEach(t),Cxo=r(Rxe," (I-BERT model)"),Rxe.forEach(t),wxo=i(H),E1=n(H,"LI",{});var Pxe=s(E1);_me=n(Pxe,"STRONG",{});var Bgt=s(_me);Axo=r(Bgt,"layoutlm"),Bgt.forEach(t),yxo=r(Pxe," \u2014 "),LG=n(Pxe,"A",{href:!0});var Igt=s(LG);Lxo=r(Igt,"LayoutLMForMaskedLM"),Igt.forEach(t),xxo=r(Pxe," (LayoutLM model)"),Pxe.forEach(t),$xo=i(H),C1=n(H,"LI",{});var Bxe=s(C1);bme=n(Bxe,"STRONG",{});var Ngt=s(bme);kxo=r(Ngt,"longformer"),Ngt.forEach(t),Sxo=r(Bxe," \u2014 "),xG=n(Bxe,"A",{href:!0});var qgt=s(xG);Rxo=r(qgt,"LongformerForMaskedLM"),qgt.forEach(t),Pxo=r(Bxe," (Longformer model)"),Bxe.forEach(t),Bxo=i(H),w1=n(H,"LI",{});var Ixe=s(w1);vme=n(Ixe,"STRONG",{});var jgt=s(vme);Ixo=r(jgt,"luke"),jgt.forEach(t),Nxo=r(Ixe," \u2014 "),$G=n(Ixe,"A",{href:!0});var Dgt=s($G);qxo=r(Dgt,"LukeForMaskedLM"),Dgt.forEach(t),jxo=r(Ixe," (LUKE model)"),Ixe.forEach(t),Dxo=i(H),A1=n(H,"LI",{});var Nxe=s(A1);Fme=n(Nxe,"STRONG",{});var Ggt=s(Fme);Gxo=r(Ggt,"mbart"),Ggt.forEach(t),Oxo=r(Nxe," \u2014 "),kG=n(Nxe,"A",{href:!0});var Ogt=s(kG);Vxo=r(Ogt,"MBartForConditionalGeneration"),Ogt.forEach(t),Xxo=r(Nxe," (mBART model)"),Nxe.forEach(t),zxo=i(H),y1=n(H,"LI",{});var qxe=s(y1);Tme=n(qxe,"STRONG",{});var Vgt=s(Tme);Wxo=r(Vgt,"megatron-bert"),Vgt.forEach(t),Qxo=r(qxe," \u2014 "),SG=n(qxe,"A",{href:!0});var Xgt=s(SG);Hxo=r(Xgt,"MegatronBertForMaskedLM"),Xgt.forEach(t),Uxo=r(qxe," (Megatron-BERT model)"),qxe.forEach(t),Jxo=i(H),L1=n(H,"LI",{});var jxe=s(L1);Mme=n(jxe,"STRONG",{});var zgt=s(Mme);Yxo=r(zgt,"mobilebert"),zgt.forEach(t),Kxo=r(jxe," \u2014 "),RG=n(jxe,"A",{href:!0});var Wgt=s(RG);Zxo=r(Wgt,"MobileBertForMaskedLM"),Wgt.forEach(t),e$o=r(jxe," (MobileBERT model)"),jxe.forEach(t),o$o=i(H),x1=n(H,"LI",{});var Dxe=s(x1);Eme=n(Dxe,"STRONG",{});var Qgt=s(Eme);r$o=r(Qgt,"mpnet"),Qgt.forEach(t),t$o=r(Dxe," \u2014 "),PG=n(Dxe,"A",{href:!0});var Hgt=s(PG);a$o=r(Hgt,"MPNetForMaskedLM"),Hgt.forEach(t),n$o=r(Dxe," (MPNet model)"),Dxe.forEach(t),s$o=i(H),$1=n(H,"LI",{});var Gxe=s($1);Cme=n(Gxe,"STRONG",{});var Ugt=s(Cme);l$o=r(Ugt,"nystromformer"),Ugt.forEach(t),i$o=r(Gxe," \u2014 "),BG=n(Gxe,"A",{href:!0});var Jgt=s(BG);d$o=r(Jgt,"NystromformerForMaskedLM"),Jgt.forEach(t),c$o=r(Gxe," (Nystr\xF6mformer model)"),Gxe.forEach(t),f$o=i(H),k1=n(H,"LI",{});var Oxe=s(k1);wme=n(Oxe,"STRONG",{});var Ygt=s(wme);m$o=r(Ygt,"perceiver"),Ygt.forEach(t),g$o=r(Oxe," \u2014 "),IG=n(Oxe,"A",{href:!0});var Kgt=s(IG);h$o=r(Kgt,"PerceiverForMaskedLM"),Kgt.forEach(t),p$o=r(Oxe," (Perceiver model)"),Oxe.forEach(t),u$o=i(H),S1=n(H,"LI",{});var Vxe=s(S1);Ame=n(Vxe,"STRONG",{});var Zgt=s(Ame);_$o=r(Zgt,"qdqbert"),Zgt.forEach(t),b$o=r(Vxe," \u2014 "),NG=n(Vxe,"A",{href:!0});var eht=s(NG);v$o=r(eht,"QDQBertForMaskedLM"),eht.forEach(t),F$o=r(Vxe," (QDQBert model)"),Vxe.forEach(t),T$o=i(H),R1=n(H,"LI",{});var Xxe=s(R1);yme=n(Xxe,"STRONG",{});var oht=s(yme);M$o=r(oht,"reformer"),oht.forEach(t),E$o=r(Xxe," \u2014 "),qG=n(Xxe,"A",{href:!0});var rht=s(qG);C$o=r(rht,"ReformerForMaskedLM"),rht.forEach(t),w$o=r(Xxe," (Reformer model)"),Xxe.forEach(t),A$o=i(H),P1=n(H,"LI",{});var zxe=s(P1);Lme=n(zxe,"STRONG",{});var tht=s(Lme);y$o=r(tht,"rembert"),tht.forEach(t),L$o=r(zxe," \u2014 "),jG=n(zxe,"A",{href:!0});var aht=s(jG);x$o=r(aht,"RemBertForMaskedLM"),aht.forEach(t),$$o=r(zxe," (RemBERT model)"),zxe.forEach(t),k$o=i(H),B1=n(H,"LI",{});var Wxe=s(B1);xme=n(Wxe,"STRONG",{});var nht=s(xme);S$o=r(nht,"roberta"),nht.forEach(t),R$o=r(Wxe," \u2014 "),DG=n(Wxe,"A",{href:!0});var sht=s(DG);P$o=r(sht,"RobertaForMaskedLM"),sht.forEach(t),B$o=r(Wxe," (RoBERTa model)"),Wxe.forEach(t),I$o=i(H),I1=n(H,"LI",{});var Qxe=s(I1);$me=n(Qxe,"STRONG",{});var lht=s($me);N$o=r(lht,"roformer"),lht.forEach(t),q$o=r(Qxe," \u2014 "),GG=n(Qxe,"A",{href:!0});var iht=s(GG);j$o=r(iht,"RoFormerForMaskedLM"),iht.forEach(t),D$o=r(Qxe," (RoFormer model)"),Qxe.forEach(t),G$o=i(H),N1=n(H,"LI",{});var Hxe=s(N1);kme=n(Hxe,"STRONG",{});var dht=s(kme);O$o=r(dht,"squeezebert"),dht.forEach(t),V$o=r(Hxe," \u2014 "),OG=n(Hxe,"A",{href:!0});var cht=s(OG);X$o=r(cht,"SqueezeBertForMaskedLM"),cht.forEach(t),z$o=r(Hxe," (SqueezeBERT model)"),Hxe.forEach(t),W$o=i(H),q1=n(H,"LI",{});var Uxe=s(q1);Sme=n(Uxe,"STRONG",{});var fht=s(Sme);Q$o=r(fht,"tapas"),fht.forEach(t),H$o=r(Uxe," \u2014 "),VG=n(Uxe,"A",{href:!0});var mht=s(VG);U$o=r(mht,"TapasForMaskedLM"),mht.forEach(t),J$o=r(Uxe," (TAPAS model)"),Uxe.forEach(t),Y$o=i(H),j1=n(H,"LI",{});var Jxe=s(j1);Rme=n(Jxe,"STRONG",{});var ght=s(Rme);K$o=r(ght,"wav2vec2"),ght.forEach(t),Z$o=r(Jxe," \u2014 "),Pme=n(Jxe,"CODE",{});var hht=s(Pme);eko=r(hht,"Wav2Vec2ForMaskedLM"),hht.forEach(t),oko=r(Jxe," (Wav2Vec2 model)"),Jxe.forEach(t),rko=i(H),D1=n(H,"LI",{});var Yxe=s(D1);Bme=n(Yxe,"STRONG",{});var pht=s(Bme);tko=r(pht,"xlm"),pht.forEach(t),ako=r(Yxe," \u2014 "),XG=n(Yxe,"A",{href:!0});var uht=s(XG);nko=r(uht,"XLMWithLMHeadModel"),uht.forEach(t),sko=r(Yxe," (XLM model)"),Yxe.forEach(t),lko=i(H),G1=n(H,"LI",{});var Kxe=s(G1);Ime=n(Kxe,"STRONG",{});var _ht=s(Ime);iko=r(_ht,"xlm-roberta"),_ht.forEach(t),dko=r(Kxe," \u2014 "),zG=n(Kxe,"A",{href:!0});var bht=s(zG);cko=r(bht,"XLMRobertaForMaskedLM"),bht.forEach(t),fko=r(Kxe," (XLM-RoBERTa model)"),Kxe.forEach(t),mko=i(H),O1=n(H,"LI",{});var Zxe=s(O1);Nme=n(Zxe,"STRONG",{});var vht=s(Nme);gko=r(vht,"xlm-roberta-xl"),vht.forEach(t),hko=r(Zxe," \u2014 "),WG=n(Zxe,"A",{href:!0});var Fht=s(WG);pko=r(Fht,"XLMRobertaXLForMaskedLM"),Fht.forEach(t),uko=r(Zxe," (XLM-RoBERTa-XL model)"),Zxe.forEach(t),_ko=i(H),V1=n(H,"LI",{});var e$e=s(V1);qme=n(e$e,"STRONG",{});var Tht=s(qme);bko=r(Tht,"yoso"),Tht.forEach(t),vko=r(e$e," \u2014 "),QG=n(e$e,"A",{href:!0});var Mht=s(QG);Fko=r(Mht,"YosoForMaskedLM"),Mht.forEach(t),Tko=r(e$e," (YOSO model)"),e$e.forEach(t),H.forEach(t),Mko=i(ia),X1=n(ia,"P",{});var o$e=s(X1);Eko=r(o$e,"The model is set in evaluation mode by default using "),jme=n(o$e,"CODE",{});var Eht=s(jme);Cko=r(Eht,"model.eval()"),Eht.forEach(t),wko=r(o$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(o$e,"CODE",{});var Cht=s(Dme);Ako=r(Cht,"model.train()"),Cht.forEach(t),o$e.forEach(t),yko=i(ia),T(z1.$$.fragment,ia),ia.forEach(t),Ys.forEach(t),XDe=i(f),Wi=n(f,"H2",{class:!0});var JOe=s(Wi);W1=n(JOe,"A",{id:!0,class:!0,href:!0});var wht=s(W1);Gme=n(wht,"SPAN",{});var Aht=s(Gme);T(aL.$$.fragment,Aht),Aht.forEach(t),wht.forEach(t),Lko=i(JOe),Ome=n(JOe,"SPAN",{});var yht=s(Ome);xko=r(yht,"AutoModelForSeq2SeqLM"),yht.forEach(t),JOe.forEach(t),zDe=i(f),Ro=n(f,"DIV",{class:!0});var Ks=s(Ro);T(nL.$$.fragment,Ks),$ko=i(Ks),Qi=n(Ks,"P",{});var Vee=s(Qi);kko=r(Vee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HG=n(Vee,"A",{href:!0});var Lht=s(HG);Sko=r(Lht,"from_pretrained()"),Lht.forEach(t),Rko=r(Vee," class method or the "),UG=n(Vee,"A",{href:!0});var xht=s(UG);Pko=r(xht,"from_config()"),xht.forEach(t),Bko=r(Vee,` class
method.`),Vee.forEach(t),Iko=i(Ks),sL=n(Ks,"P",{});var YOe=s(sL);Nko=r(YOe,"This class cannot be instantiated directly using "),Vme=n(YOe,"CODE",{});var $ht=s(Vme);qko=r($ht,"__init__()"),$ht.forEach(t),jko=r(YOe," (throws an error)."),YOe.forEach(t),Dko=i(Ks),ct=n(Ks,"DIV",{class:!0});var EA=s(ct);T(lL.$$.fragment,EA),Gko=i(EA),Xme=n(EA,"P",{});var kht=s(Xme);Oko=r(kht,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),kht.forEach(t),Vko=i(EA),Hi=n(EA,"P",{});var Xee=s(Hi);Xko=r(Xee,`Note:
Loading a model from its configuration file does `),zme=n(Xee,"STRONG",{});var Sht=s(zme);zko=r(Sht,"not"),Sht.forEach(t),Wko=r(Xee,` load the model weights. It only affects the
model\u2019s configuration. Use `),JG=n(Xee,"A",{href:!0});var Rht=s(JG);Qko=r(Rht,"from_pretrained()"),Rht.forEach(t),Hko=r(Xee," to load the model weights."),Xee.forEach(t),Uko=i(EA),T(Q1.$$.fragment,EA),EA.forEach(t),Jko=i(Ks),eo=n(Ks,"DIV",{class:!0});var da=s(eo);T(iL.$$.fragment,da),Yko=i(da),Wme=n(da,"P",{});var Pht=s(Wme);Kko=r(Pht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Pht.forEach(t),Zko=i(da),Na=n(da,"P",{});var CA=s(Na);eSo=r(CA,"The model class to instantiate is selected based on the "),Qme=n(CA,"CODE",{});var Bht=s(Qme);oSo=r(Bht,"model_type"),Bht.forEach(t),rSo=r(CA,` property of the config object (either
passed as an argument or loaded from `),Hme=n(CA,"CODE",{});var Iht=s(Hme);tSo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),aSo=r(CA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ume=n(CA,"CODE",{});var Nht=s(Ume);nSo=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),sSo=r(CA,":"),CA.forEach(t),lSo=i(da),ue=n(da,"UL",{});var Fe=s(ue);H1=n(Fe,"LI",{});var r$e=s(H1);Jme=n(r$e,"STRONG",{});var qht=s(Jme);iSo=r(qht,"bart"),qht.forEach(t),dSo=r(r$e," \u2014 "),YG=n(r$e,"A",{href:!0});var jht=s(YG);cSo=r(jht,"BartForConditionalGeneration"),jht.forEach(t),fSo=r(r$e," (BART model)"),r$e.forEach(t),mSo=i(Fe),U1=n(Fe,"LI",{});var t$e=s(U1);Yme=n(t$e,"STRONG",{});var Dht=s(Yme);gSo=r(Dht,"bigbird_pegasus"),Dht.forEach(t),hSo=r(t$e," \u2014 "),KG=n(t$e,"A",{href:!0});var Ght=s(KG);pSo=r(Ght,"BigBirdPegasusForConditionalGeneration"),Ght.forEach(t),uSo=r(t$e," (BigBird-Pegasus model)"),t$e.forEach(t),_So=i(Fe),J1=n(Fe,"LI",{});var a$e=s(J1);Kme=n(a$e,"STRONG",{});var Oht=s(Kme);bSo=r(Oht,"blenderbot"),Oht.forEach(t),vSo=r(a$e," \u2014 "),ZG=n(a$e,"A",{href:!0});var Vht=s(ZG);FSo=r(Vht,"BlenderbotForConditionalGeneration"),Vht.forEach(t),TSo=r(a$e," (Blenderbot model)"),a$e.forEach(t),MSo=i(Fe),Y1=n(Fe,"LI",{});var n$e=s(Y1);Zme=n(n$e,"STRONG",{});var Xht=s(Zme);ESo=r(Xht,"blenderbot-small"),Xht.forEach(t),CSo=r(n$e," \u2014 "),eO=n(n$e,"A",{href:!0});var zht=s(eO);wSo=r(zht,"BlenderbotSmallForConditionalGeneration"),zht.forEach(t),ASo=r(n$e," (BlenderbotSmall model)"),n$e.forEach(t),ySo=i(Fe),K1=n(Fe,"LI",{});var s$e=s(K1);ege=n(s$e,"STRONG",{});var Wht=s(ege);LSo=r(Wht,"encoder-decoder"),Wht.forEach(t),xSo=r(s$e," \u2014 "),oO=n(s$e,"A",{href:!0});var Qht=s(oO);$So=r(Qht,"EncoderDecoderModel"),Qht.forEach(t),kSo=r(s$e," (Encoder decoder model)"),s$e.forEach(t),SSo=i(Fe),Z1=n(Fe,"LI",{});var l$e=s(Z1);oge=n(l$e,"STRONG",{});var Hht=s(oge);RSo=r(Hht,"fsmt"),Hht.forEach(t),PSo=r(l$e," \u2014 "),rO=n(l$e,"A",{href:!0});var Uht=s(rO);BSo=r(Uht,"FSMTForConditionalGeneration"),Uht.forEach(t),ISo=r(l$e," (FairSeq Machine-Translation model)"),l$e.forEach(t),NSo=i(Fe),e7=n(Fe,"LI",{});var i$e=s(e7);rge=n(i$e,"STRONG",{});var Jht=s(rge);qSo=r(Jht,"led"),Jht.forEach(t),jSo=r(i$e," \u2014 "),tO=n(i$e,"A",{href:!0});var Yht=s(tO);DSo=r(Yht,"LEDForConditionalGeneration"),Yht.forEach(t),GSo=r(i$e," (LED model)"),i$e.forEach(t),OSo=i(Fe),o7=n(Fe,"LI",{});var d$e=s(o7);tge=n(d$e,"STRONG",{});var Kht=s(tge);VSo=r(Kht,"m2m_100"),Kht.forEach(t),XSo=r(d$e," \u2014 "),aO=n(d$e,"A",{href:!0});var Zht=s(aO);zSo=r(Zht,"M2M100ForConditionalGeneration"),Zht.forEach(t),WSo=r(d$e," (M2M100 model)"),d$e.forEach(t),QSo=i(Fe),r7=n(Fe,"LI",{});var c$e=s(r7);age=n(c$e,"STRONG",{});var ept=s(age);HSo=r(ept,"marian"),ept.forEach(t),USo=r(c$e," \u2014 "),nO=n(c$e,"A",{href:!0});var opt=s(nO);JSo=r(opt,"MarianMTModel"),opt.forEach(t),YSo=r(c$e," (Marian model)"),c$e.forEach(t),KSo=i(Fe),t7=n(Fe,"LI",{});var f$e=s(t7);nge=n(f$e,"STRONG",{});var rpt=s(nge);ZSo=r(rpt,"mbart"),rpt.forEach(t),eRo=r(f$e," \u2014 "),sO=n(f$e,"A",{href:!0});var tpt=s(sO);oRo=r(tpt,"MBartForConditionalGeneration"),tpt.forEach(t),rRo=r(f$e," (mBART model)"),f$e.forEach(t),tRo=i(Fe),a7=n(Fe,"LI",{});var m$e=s(a7);sge=n(m$e,"STRONG",{});var apt=s(sge);aRo=r(apt,"mt5"),apt.forEach(t),nRo=r(m$e," \u2014 "),lO=n(m$e,"A",{href:!0});var npt=s(lO);sRo=r(npt,"MT5ForConditionalGeneration"),npt.forEach(t),lRo=r(m$e," (MT5 model)"),m$e.forEach(t),iRo=i(Fe),n7=n(Fe,"LI",{});var g$e=s(n7);lge=n(g$e,"STRONG",{});var spt=s(lge);dRo=r(spt,"pegasus"),spt.forEach(t),cRo=r(g$e," \u2014 "),iO=n(g$e,"A",{href:!0});var lpt=s(iO);fRo=r(lpt,"PegasusForConditionalGeneration"),lpt.forEach(t),mRo=r(g$e," (Pegasus model)"),g$e.forEach(t),gRo=i(Fe),s7=n(Fe,"LI",{});var h$e=s(s7);ige=n(h$e,"STRONG",{});var ipt=s(ige);hRo=r(ipt,"plbart"),ipt.forEach(t),pRo=r(h$e," \u2014 "),dO=n(h$e,"A",{href:!0});var dpt=s(dO);uRo=r(dpt,"PLBartForConditionalGeneration"),dpt.forEach(t),_Ro=r(h$e," (PLBart model)"),h$e.forEach(t),bRo=i(Fe),l7=n(Fe,"LI",{});var p$e=s(l7);dge=n(p$e,"STRONG",{});var cpt=s(dge);vRo=r(cpt,"prophetnet"),cpt.forEach(t),FRo=r(p$e," \u2014 "),cO=n(p$e,"A",{href:!0});var fpt=s(cO);TRo=r(fpt,"ProphetNetForConditionalGeneration"),fpt.forEach(t),MRo=r(p$e," (ProphetNet model)"),p$e.forEach(t),ERo=i(Fe),i7=n(Fe,"LI",{});var u$e=s(i7);cge=n(u$e,"STRONG",{});var mpt=s(cge);CRo=r(mpt,"t5"),mpt.forEach(t),wRo=r(u$e," \u2014 "),fO=n(u$e,"A",{href:!0});var gpt=s(fO);ARo=r(gpt,"T5ForConditionalGeneration"),gpt.forEach(t),yRo=r(u$e," (T5 model)"),u$e.forEach(t),LRo=i(Fe),d7=n(Fe,"LI",{});var _$e=s(d7);fge=n(_$e,"STRONG",{});var hpt=s(fge);xRo=r(hpt,"xlm-prophetnet"),hpt.forEach(t),$Ro=r(_$e," \u2014 "),mO=n(_$e,"A",{href:!0});var ppt=s(mO);kRo=r(ppt,"XLMProphetNetForConditionalGeneration"),ppt.forEach(t),SRo=r(_$e," (XLM-ProphetNet model)"),_$e.forEach(t),Fe.forEach(t),RRo=i(da),c7=n(da,"P",{});var b$e=s(c7);PRo=r(b$e,"The model is set in evaluation mode by default using "),mge=n(b$e,"CODE",{});var upt=s(mge);BRo=r(upt,"model.eval()"),upt.forEach(t),IRo=r(b$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gge=n(b$e,"CODE",{});var _pt=s(gge);NRo=r(_pt,"model.train()"),_pt.forEach(t),b$e.forEach(t),qRo=i(da),T(f7.$$.fragment,da),da.forEach(t),Ks.forEach(t),WDe=i(f),Ui=n(f,"H2",{class:!0});var KOe=s(Ui);m7=n(KOe,"A",{id:!0,class:!0,href:!0});var bpt=s(m7);hge=n(bpt,"SPAN",{});var vpt=s(hge);T(dL.$$.fragment,vpt),vpt.forEach(t),bpt.forEach(t),jRo=i(KOe),pge=n(KOe,"SPAN",{});var Fpt=s(pge);DRo=r(Fpt,"AutoModelForSequenceClassification"),Fpt.forEach(t),KOe.forEach(t),QDe=i(f),Po=n(f,"DIV",{class:!0});var Zs=s(Po);T(cL.$$.fragment,Zs),GRo=i(Zs),Ji=n(Zs,"P",{});var zee=s(Ji);ORo=r(zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),gO=n(zee,"A",{href:!0});var Tpt=s(gO);VRo=r(Tpt,"from_pretrained()"),Tpt.forEach(t),XRo=r(zee," class method or the "),hO=n(zee,"A",{href:!0});var Mpt=s(hO);zRo=r(Mpt,"from_config()"),Mpt.forEach(t),WRo=r(zee,` class
method.`),zee.forEach(t),QRo=i(Zs),fL=n(Zs,"P",{});var ZOe=s(fL);HRo=r(ZOe,"This class cannot be instantiated directly using "),uge=n(ZOe,"CODE",{});var Ept=s(uge);URo=r(Ept,"__init__()"),Ept.forEach(t),JRo=r(ZOe," (throws an error)."),ZOe.forEach(t),YRo=i(Zs),ft=n(Zs,"DIV",{class:!0});var wA=s(ft);T(mL.$$.fragment,wA),KRo=i(wA),_ge=n(wA,"P",{});var Cpt=s(_ge);ZRo=r(Cpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cpt.forEach(t),ePo=i(wA),Yi=n(wA,"P",{});var Wee=s(Yi);oPo=r(Wee,`Note:
Loading a model from its configuration file does `),bge=n(Wee,"STRONG",{});var wpt=s(bge);rPo=r(wpt,"not"),wpt.forEach(t),tPo=r(Wee,` load the model weights. It only affects the
model\u2019s configuration. Use `),pO=n(Wee,"A",{href:!0});var Apt=s(pO);aPo=r(Apt,"from_pretrained()"),Apt.forEach(t),nPo=r(Wee," to load the model weights."),Wee.forEach(t),sPo=i(wA),T(g7.$$.fragment,wA),wA.forEach(t),lPo=i(Zs),oo=n(Zs,"DIV",{class:!0});var ca=s(oo);T(gL.$$.fragment,ca),iPo=i(ca),vge=n(ca,"P",{});var ypt=s(vge);dPo=r(ypt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ypt.forEach(t),cPo=i(ca),qa=n(ca,"P",{});var AA=s(qa);fPo=r(AA,"The model class to instantiate is selected based on the "),Fge=n(AA,"CODE",{});var Lpt=s(Fge);mPo=r(Lpt,"model_type"),Lpt.forEach(t),gPo=r(AA,` property of the config object (either
passed as an argument or loaded from `),Tge=n(AA,"CODE",{});var xpt=s(Tge);hPo=r(xpt,"pretrained_model_name_or_path"),xpt.forEach(t),pPo=r(AA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mge=n(AA,"CODE",{});var $pt=s(Mge);uPo=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),_Po=r(AA,":"),AA.forEach(t),bPo=i(ca),q=n(ca,"UL",{});var D=s(q);h7=n(D,"LI",{});var v$e=s(h7);Ege=n(v$e,"STRONG",{});var kpt=s(Ege);vPo=r(kpt,"albert"),kpt.forEach(t),FPo=r(v$e," \u2014 "),uO=n(v$e,"A",{href:!0});var Spt=s(uO);TPo=r(Spt,"AlbertForSequenceClassification"),Spt.forEach(t),MPo=r(v$e," (ALBERT model)"),v$e.forEach(t),EPo=i(D),p7=n(D,"LI",{});var F$e=s(p7);Cge=n(F$e,"STRONG",{});var Rpt=s(Cge);CPo=r(Rpt,"bart"),Rpt.forEach(t),wPo=r(F$e," \u2014 "),_O=n(F$e,"A",{href:!0});var Ppt=s(_O);APo=r(Ppt,"BartForSequenceClassification"),Ppt.forEach(t),yPo=r(F$e," (BART model)"),F$e.forEach(t),LPo=i(D),u7=n(D,"LI",{});var T$e=s(u7);wge=n(T$e,"STRONG",{});var Bpt=s(wge);xPo=r(Bpt,"bert"),Bpt.forEach(t),$Po=r(T$e," \u2014 "),bO=n(T$e,"A",{href:!0});var Ipt=s(bO);kPo=r(Ipt,"BertForSequenceClassification"),Ipt.forEach(t),SPo=r(T$e," (BERT model)"),T$e.forEach(t),RPo=i(D),_7=n(D,"LI",{});var M$e=s(_7);Age=n(M$e,"STRONG",{});var Npt=s(Age);PPo=r(Npt,"big_bird"),Npt.forEach(t),BPo=r(M$e," \u2014 "),vO=n(M$e,"A",{href:!0});var qpt=s(vO);IPo=r(qpt,"BigBirdForSequenceClassification"),qpt.forEach(t),NPo=r(M$e," (BigBird model)"),M$e.forEach(t),qPo=i(D),b7=n(D,"LI",{});var E$e=s(b7);yge=n(E$e,"STRONG",{});var jpt=s(yge);jPo=r(jpt,"bigbird_pegasus"),jpt.forEach(t),DPo=r(E$e," \u2014 "),FO=n(E$e,"A",{href:!0});var Dpt=s(FO);GPo=r(Dpt,"BigBirdPegasusForSequenceClassification"),Dpt.forEach(t),OPo=r(E$e," (BigBird-Pegasus model)"),E$e.forEach(t),VPo=i(D),v7=n(D,"LI",{});var C$e=s(v7);Lge=n(C$e,"STRONG",{});var Gpt=s(Lge);XPo=r(Gpt,"camembert"),Gpt.forEach(t),zPo=r(C$e," \u2014 "),TO=n(C$e,"A",{href:!0});var Opt=s(TO);WPo=r(Opt,"CamembertForSequenceClassification"),Opt.forEach(t),QPo=r(C$e," (CamemBERT model)"),C$e.forEach(t),HPo=i(D),F7=n(D,"LI",{});var w$e=s(F7);xge=n(w$e,"STRONG",{});var Vpt=s(xge);UPo=r(Vpt,"canine"),Vpt.forEach(t),JPo=r(w$e," \u2014 "),MO=n(w$e,"A",{href:!0});var Xpt=s(MO);YPo=r(Xpt,"CanineForSequenceClassification"),Xpt.forEach(t),KPo=r(w$e," (CANINE model)"),w$e.forEach(t),ZPo=i(D),T7=n(D,"LI",{});var A$e=s(T7);$ge=n(A$e,"STRONG",{});var zpt=s($ge);eBo=r(zpt,"convbert"),zpt.forEach(t),oBo=r(A$e," \u2014 "),EO=n(A$e,"A",{href:!0});var Wpt=s(EO);rBo=r(Wpt,"ConvBertForSequenceClassification"),Wpt.forEach(t),tBo=r(A$e," (ConvBERT model)"),A$e.forEach(t),aBo=i(D),M7=n(D,"LI",{});var y$e=s(M7);kge=n(y$e,"STRONG",{});var Qpt=s(kge);nBo=r(Qpt,"ctrl"),Qpt.forEach(t),sBo=r(y$e," \u2014 "),CO=n(y$e,"A",{href:!0});var Hpt=s(CO);lBo=r(Hpt,"CTRLForSequenceClassification"),Hpt.forEach(t),iBo=r(y$e," (CTRL model)"),y$e.forEach(t),dBo=i(D),E7=n(D,"LI",{});var L$e=s(E7);Sge=n(L$e,"STRONG",{});var Upt=s(Sge);cBo=r(Upt,"data2vec-text"),Upt.forEach(t),fBo=r(L$e," \u2014 "),wO=n(L$e,"A",{href:!0});var Jpt=s(wO);mBo=r(Jpt,"Data2VecTextForSequenceClassification"),Jpt.forEach(t),gBo=r(L$e," (Data2VecText model)"),L$e.forEach(t),hBo=i(D),C7=n(D,"LI",{});var x$e=s(C7);Rge=n(x$e,"STRONG",{});var Ypt=s(Rge);pBo=r(Ypt,"deberta"),Ypt.forEach(t),uBo=r(x$e," \u2014 "),AO=n(x$e,"A",{href:!0});var Kpt=s(AO);_Bo=r(Kpt,"DebertaForSequenceClassification"),Kpt.forEach(t),bBo=r(x$e," (DeBERTa model)"),x$e.forEach(t),vBo=i(D),w7=n(D,"LI",{});var $$e=s(w7);Pge=n($$e,"STRONG",{});var Zpt=s(Pge);FBo=r(Zpt,"deberta-v2"),Zpt.forEach(t),TBo=r($$e," \u2014 "),yO=n($$e,"A",{href:!0});var eut=s(yO);MBo=r(eut,"DebertaV2ForSequenceClassification"),eut.forEach(t),EBo=r($$e," (DeBERTa-v2 model)"),$$e.forEach(t),CBo=i(D),A7=n(D,"LI",{});var k$e=s(A7);Bge=n(k$e,"STRONG",{});var out=s(Bge);wBo=r(out,"distilbert"),out.forEach(t),ABo=r(k$e," \u2014 "),LO=n(k$e,"A",{href:!0});var rut=s(LO);yBo=r(rut,"DistilBertForSequenceClassification"),rut.forEach(t),LBo=r(k$e," (DistilBERT model)"),k$e.forEach(t),xBo=i(D),y7=n(D,"LI",{});var S$e=s(y7);Ige=n(S$e,"STRONG",{});var tut=s(Ige);$Bo=r(tut,"electra"),tut.forEach(t),kBo=r(S$e," \u2014 "),xO=n(S$e,"A",{href:!0});var aut=s(xO);SBo=r(aut,"ElectraForSequenceClassification"),aut.forEach(t),RBo=r(S$e," (ELECTRA model)"),S$e.forEach(t),PBo=i(D),L7=n(D,"LI",{});var R$e=s(L7);Nge=n(R$e,"STRONG",{});var nut=s(Nge);BBo=r(nut,"flaubert"),nut.forEach(t),IBo=r(R$e," \u2014 "),$O=n(R$e,"A",{href:!0});var sut=s($O);NBo=r(sut,"FlaubertForSequenceClassification"),sut.forEach(t),qBo=r(R$e," (FlauBERT model)"),R$e.forEach(t),jBo=i(D),x7=n(D,"LI",{});var P$e=s(x7);qge=n(P$e,"STRONG",{});var lut=s(qge);DBo=r(lut,"fnet"),lut.forEach(t),GBo=r(P$e," \u2014 "),kO=n(P$e,"A",{href:!0});var iut=s(kO);OBo=r(iut,"FNetForSequenceClassification"),iut.forEach(t),VBo=r(P$e," (FNet model)"),P$e.forEach(t),XBo=i(D),$7=n(D,"LI",{});var B$e=s($7);jge=n(B$e,"STRONG",{});var dut=s(jge);zBo=r(dut,"funnel"),dut.forEach(t),WBo=r(B$e," \u2014 "),SO=n(B$e,"A",{href:!0});var cut=s(SO);QBo=r(cut,"FunnelForSequenceClassification"),cut.forEach(t),HBo=r(B$e," (Funnel Transformer model)"),B$e.forEach(t),UBo=i(D),k7=n(D,"LI",{});var I$e=s(k7);Dge=n(I$e,"STRONG",{});var fut=s(Dge);JBo=r(fut,"gpt2"),fut.forEach(t),YBo=r(I$e," \u2014 "),RO=n(I$e,"A",{href:!0});var mut=s(RO);KBo=r(mut,"GPT2ForSequenceClassification"),mut.forEach(t),ZBo=r(I$e," (OpenAI GPT-2 model)"),I$e.forEach(t),eIo=i(D),S7=n(D,"LI",{});var N$e=s(S7);Gge=n(N$e,"STRONG",{});var gut=s(Gge);oIo=r(gut,"gpt_neo"),gut.forEach(t),rIo=r(N$e," \u2014 "),PO=n(N$e,"A",{href:!0});var hut=s(PO);tIo=r(hut,"GPTNeoForSequenceClassification"),hut.forEach(t),aIo=r(N$e," (GPT Neo model)"),N$e.forEach(t),nIo=i(D),R7=n(D,"LI",{});var q$e=s(R7);Oge=n(q$e,"STRONG",{});var put=s(Oge);sIo=r(put,"gptj"),put.forEach(t),lIo=r(q$e," \u2014 "),BO=n(q$e,"A",{href:!0});var uut=s(BO);iIo=r(uut,"GPTJForSequenceClassification"),uut.forEach(t),dIo=r(q$e," (GPT-J model)"),q$e.forEach(t),cIo=i(D),P7=n(D,"LI",{});var j$e=s(P7);Vge=n(j$e,"STRONG",{});var _ut=s(Vge);fIo=r(_ut,"ibert"),_ut.forEach(t),mIo=r(j$e," \u2014 "),IO=n(j$e,"A",{href:!0});var but=s(IO);gIo=r(but,"IBertForSequenceClassification"),but.forEach(t),hIo=r(j$e," (I-BERT model)"),j$e.forEach(t),pIo=i(D),B7=n(D,"LI",{});var D$e=s(B7);Xge=n(D$e,"STRONG",{});var vut=s(Xge);uIo=r(vut,"layoutlm"),vut.forEach(t),_Io=r(D$e," \u2014 "),NO=n(D$e,"A",{href:!0});var Fut=s(NO);bIo=r(Fut,"LayoutLMForSequenceClassification"),Fut.forEach(t),vIo=r(D$e," (LayoutLM model)"),D$e.forEach(t),FIo=i(D),I7=n(D,"LI",{});var G$e=s(I7);zge=n(G$e,"STRONG",{});var Tut=s(zge);TIo=r(Tut,"layoutlmv2"),Tut.forEach(t),MIo=r(G$e," \u2014 "),qO=n(G$e,"A",{href:!0});var Mut=s(qO);EIo=r(Mut,"LayoutLMv2ForSequenceClassification"),Mut.forEach(t),CIo=r(G$e," (LayoutLMv2 model)"),G$e.forEach(t),wIo=i(D),N7=n(D,"LI",{});var O$e=s(N7);Wge=n(O$e,"STRONG",{});var Eut=s(Wge);AIo=r(Eut,"layoutlmv3"),Eut.forEach(t),yIo=r(O$e," \u2014 "),jO=n(O$e,"A",{href:!0});var Cut=s(jO);LIo=r(Cut,"LayoutLMv3ForSequenceClassification"),Cut.forEach(t),xIo=r(O$e," (LayoutLMv3 model)"),O$e.forEach(t),$Io=i(D),q7=n(D,"LI",{});var V$e=s(q7);Qge=n(V$e,"STRONG",{});var wut=s(Qge);kIo=r(wut,"led"),wut.forEach(t),SIo=r(V$e," \u2014 "),DO=n(V$e,"A",{href:!0});var Aut=s(DO);RIo=r(Aut,"LEDForSequenceClassification"),Aut.forEach(t),PIo=r(V$e," (LED model)"),V$e.forEach(t),BIo=i(D),j7=n(D,"LI",{});var X$e=s(j7);Hge=n(X$e,"STRONG",{});var yut=s(Hge);IIo=r(yut,"longformer"),yut.forEach(t),NIo=r(X$e," \u2014 "),GO=n(X$e,"A",{href:!0});var Lut=s(GO);qIo=r(Lut,"LongformerForSequenceClassification"),Lut.forEach(t),jIo=r(X$e," (Longformer model)"),X$e.forEach(t),DIo=i(D),D7=n(D,"LI",{});var z$e=s(D7);Uge=n(z$e,"STRONG",{});var xut=s(Uge);GIo=r(xut,"mbart"),xut.forEach(t),OIo=r(z$e," \u2014 "),OO=n(z$e,"A",{href:!0});var $ut=s(OO);VIo=r($ut,"MBartForSequenceClassification"),$ut.forEach(t),XIo=r(z$e," (mBART model)"),z$e.forEach(t),zIo=i(D),G7=n(D,"LI",{});var W$e=s(G7);Jge=n(W$e,"STRONG",{});var kut=s(Jge);WIo=r(kut,"megatron-bert"),kut.forEach(t),QIo=r(W$e," \u2014 "),VO=n(W$e,"A",{href:!0});var Sut=s(VO);HIo=r(Sut,"MegatronBertForSequenceClassification"),Sut.forEach(t),UIo=r(W$e," (Megatron-BERT model)"),W$e.forEach(t),JIo=i(D),O7=n(D,"LI",{});var Q$e=s(O7);Yge=n(Q$e,"STRONG",{});var Rut=s(Yge);YIo=r(Rut,"mobilebert"),Rut.forEach(t),KIo=r(Q$e," \u2014 "),XO=n(Q$e,"A",{href:!0});var Put=s(XO);ZIo=r(Put,"MobileBertForSequenceClassification"),Put.forEach(t),eNo=r(Q$e," (MobileBERT model)"),Q$e.forEach(t),oNo=i(D),V7=n(D,"LI",{});var H$e=s(V7);Kge=n(H$e,"STRONG",{});var But=s(Kge);rNo=r(But,"mpnet"),But.forEach(t),tNo=r(H$e," \u2014 "),zO=n(H$e,"A",{href:!0});var Iut=s(zO);aNo=r(Iut,"MPNetForSequenceClassification"),Iut.forEach(t),nNo=r(H$e," (MPNet model)"),H$e.forEach(t),sNo=i(D),X7=n(D,"LI",{});var U$e=s(X7);Zge=n(U$e,"STRONG",{});var Nut=s(Zge);lNo=r(Nut,"nystromformer"),Nut.forEach(t),iNo=r(U$e," \u2014 "),WO=n(U$e,"A",{href:!0});var qut=s(WO);dNo=r(qut,"NystromformerForSequenceClassification"),qut.forEach(t),cNo=r(U$e," (Nystr\xF6mformer model)"),U$e.forEach(t),fNo=i(D),z7=n(D,"LI",{});var J$e=s(z7);ehe=n(J$e,"STRONG",{});var jut=s(ehe);mNo=r(jut,"openai-gpt"),jut.forEach(t),gNo=r(J$e," \u2014 "),QO=n(J$e,"A",{href:!0});var Dut=s(QO);hNo=r(Dut,"OpenAIGPTForSequenceClassification"),Dut.forEach(t),pNo=r(J$e," (OpenAI GPT model)"),J$e.forEach(t),uNo=i(D),W7=n(D,"LI",{});var Y$e=s(W7);ohe=n(Y$e,"STRONG",{});var Gut=s(ohe);_No=r(Gut,"perceiver"),Gut.forEach(t),bNo=r(Y$e," \u2014 "),HO=n(Y$e,"A",{href:!0});var Out=s(HO);vNo=r(Out,"PerceiverForSequenceClassification"),Out.forEach(t),FNo=r(Y$e," (Perceiver model)"),Y$e.forEach(t),TNo=i(D),Q7=n(D,"LI",{});var K$e=s(Q7);rhe=n(K$e,"STRONG",{});var Vut=s(rhe);MNo=r(Vut,"plbart"),Vut.forEach(t),ENo=r(K$e," \u2014 "),UO=n(K$e,"A",{href:!0});var Xut=s(UO);CNo=r(Xut,"PLBartForSequenceClassification"),Xut.forEach(t),wNo=r(K$e," (PLBart model)"),K$e.forEach(t),ANo=i(D),H7=n(D,"LI",{});var Z$e=s(H7);the=n(Z$e,"STRONG",{});var zut=s(the);yNo=r(zut,"qdqbert"),zut.forEach(t),LNo=r(Z$e," \u2014 "),JO=n(Z$e,"A",{href:!0});var Wut=s(JO);xNo=r(Wut,"QDQBertForSequenceClassification"),Wut.forEach(t),$No=r(Z$e," (QDQBert model)"),Z$e.forEach(t),kNo=i(D),U7=n(D,"LI",{});var eke=s(U7);ahe=n(eke,"STRONG",{});var Qut=s(ahe);SNo=r(Qut,"reformer"),Qut.forEach(t),RNo=r(eke," \u2014 "),YO=n(eke,"A",{href:!0});var Hut=s(YO);PNo=r(Hut,"ReformerForSequenceClassification"),Hut.forEach(t),BNo=r(eke," (Reformer model)"),eke.forEach(t),INo=i(D),J7=n(D,"LI",{});var oke=s(J7);nhe=n(oke,"STRONG",{});var Uut=s(nhe);NNo=r(Uut,"rembert"),Uut.forEach(t),qNo=r(oke," \u2014 "),KO=n(oke,"A",{href:!0});var Jut=s(KO);jNo=r(Jut,"RemBertForSequenceClassification"),Jut.forEach(t),DNo=r(oke," (RemBERT model)"),oke.forEach(t),GNo=i(D),Y7=n(D,"LI",{});var rke=s(Y7);she=n(rke,"STRONG",{});var Yut=s(she);ONo=r(Yut,"roberta"),Yut.forEach(t),VNo=r(rke," \u2014 "),ZO=n(rke,"A",{href:!0});var Kut=s(ZO);XNo=r(Kut,"RobertaForSequenceClassification"),Kut.forEach(t),zNo=r(rke," (RoBERTa model)"),rke.forEach(t),WNo=i(D),K7=n(D,"LI",{});var tke=s(K7);lhe=n(tke,"STRONG",{});var Zut=s(lhe);QNo=r(Zut,"roformer"),Zut.forEach(t),HNo=r(tke," \u2014 "),eV=n(tke,"A",{href:!0});var e_t=s(eV);UNo=r(e_t,"RoFormerForSequenceClassification"),e_t.forEach(t),JNo=r(tke," (RoFormer model)"),tke.forEach(t),YNo=i(D),Z7=n(D,"LI",{});var ake=s(Z7);ihe=n(ake,"STRONG",{});var o_t=s(ihe);KNo=r(o_t,"squeezebert"),o_t.forEach(t),ZNo=r(ake," \u2014 "),oV=n(ake,"A",{href:!0});var r_t=s(oV);eqo=r(r_t,"SqueezeBertForSequenceClassification"),r_t.forEach(t),oqo=r(ake," (SqueezeBERT model)"),ake.forEach(t),rqo=i(D),eb=n(D,"LI",{});var nke=s(eb);dhe=n(nke,"STRONG",{});var t_t=s(dhe);tqo=r(t_t,"tapas"),t_t.forEach(t),aqo=r(nke," \u2014 "),rV=n(nke,"A",{href:!0});var a_t=s(rV);nqo=r(a_t,"TapasForSequenceClassification"),a_t.forEach(t),sqo=r(nke," (TAPAS model)"),nke.forEach(t),lqo=i(D),ob=n(D,"LI",{});var ske=s(ob);che=n(ske,"STRONG",{});var n_t=s(che);iqo=r(n_t,"transfo-xl"),n_t.forEach(t),dqo=r(ske," \u2014 "),tV=n(ske,"A",{href:!0});var s_t=s(tV);cqo=r(s_t,"TransfoXLForSequenceClassification"),s_t.forEach(t),fqo=r(ske," (Transformer-XL model)"),ske.forEach(t),mqo=i(D),rb=n(D,"LI",{});var lke=s(rb);fhe=n(lke,"STRONG",{});var l_t=s(fhe);gqo=r(l_t,"xlm"),l_t.forEach(t),hqo=r(lke," \u2014 "),aV=n(lke,"A",{href:!0});var i_t=s(aV);pqo=r(i_t,"XLMForSequenceClassification"),i_t.forEach(t),uqo=r(lke," (XLM model)"),lke.forEach(t),_qo=i(D),tb=n(D,"LI",{});var ike=s(tb);mhe=n(ike,"STRONG",{});var d_t=s(mhe);bqo=r(d_t,"xlm-roberta"),d_t.forEach(t),vqo=r(ike," \u2014 "),nV=n(ike,"A",{href:!0});var c_t=s(nV);Fqo=r(c_t,"XLMRobertaForSequenceClassification"),c_t.forEach(t),Tqo=r(ike," (XLM-RoBERTa model)"),ike.forEach(t),Mqo=i(D),ab=n(D,"LI",{});var dke=s(ab);ghe=n(dke,"STRONG",{});var f_t=s(ghe);Eqo=r(f_t,"xlm-roberta-xl"),f_t.forEach(t),Cqo=r(dke," \u2014 "),sV=n(dke,"A",{href:!0});var m_t=s(sV);wqo=r(m_t,"XLMRobertaXLForSequenceClassification"),m_t.forEach(t),Aqo=r(dke," (XLM-RoBERTa-XL model)"),dke.forEach(t),yqo=i(D),nb=n(D,"LI",{});var cke=s(nb);hhe=n(cke,"STRONG",{});var g_t=s(hhe);Lqo=r(g_t,"xlnet"),g_t.forEach(t),xqo=r(cke," \u2014 "),lV=n(cke,"A",{href:!0});var h_t=s(lV);$qo=r(h_t,"XLNetForSequenceClassification"),h_t.forEach(t),kqo=r(cke," (XLNet model)"),cke.forEach(t),Sqo=i(D),sb=n(D,"LI",{});var fke=s(sb);phe=n(fke,"STRONG",{});var p_t=s(phe);Rqo=r(p_t,"yoso"),p_t.forEach(t),Pqo=r(fke," \u2014 "),iV=n(fke,"A",{href:!0});var u_t=s(iV);Bqo=r(u_t,"YosoForSequenceClassification"),u_t.forEach(t),Iqo=r(fke," (YOSO model)"),fke.forEach(t),D.forEach(t),Nqo=i(ca),lb=n(ca,"P",{});var mke=s(lb);qqo=r(mke,"The model is set in evaluation mode by default using "),uhe=n(mke,"CODE",{});var __t=s(uhe);jqo=r(__t,"model.eval()"),__t.forEach(t),Dqo=r(mke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_he=n(mke,"CODE",{});var b_t=s(_he);Gqo=r(b_t,"model.train()"),b_t.forEach(t),mke.forEach(t),Oqo=i(ca),T(ib.$$.fragment,ca),ca.forEach(t),Zs.forEach(t),HDe=i(f),Ki=n(f,"H2",{class:!0});var eVe=s(Ki);db=n(eVe,"A",{id:!0,class:!0,href:!0});var v_t=s(db);bhe=n(v_t,"SPAN",{});var F_t=s(bhe);T(hL.$$.fragment,F_t),F_t.forEach(t),v_t.forEach(t),Vqo=i(eVe),vhe=n(eVe,"SPAN",{});var T_t=s(vhe);Xqo=r(T_t,"AutoModelForMultipleChoice"),T_t.forEach(t),eVe.forEach(t),UDe=i(f),Bo=n(f,"DIV",{class:!0});var el=s(Bo);T(pL.$$.fragment,el),zqo=i(el),Zi=n(el,"P",{});var Qee=s(Zi);Wqo=r(Qee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dV=n(Qee,"A",{href:!0});var M_t=s(dV);Qqo=r(M_t,"from_pretrained()"),M_t.forEach(t),Hqo=r(Qee," class method or the "),cV=n(Qee,"A",{href:!0});var E_t=s(cV);Uqo=r(E_t,"from_config()"),E_t.forEach(t),Jqo=r(Qee,` class
method.`),Qee.forEach(t),Yqo=i(el),uL=n(el,"P",{});var oVe=s(uL);Kqo=r(oVe,"This class cannot be instantiated directly using "),Fhe=n(oVe,"CODE",{});var C_t=s(Fhe);Zqo=r(C_t,"__init__()"),C_t.forEach(t),ejo=r(oVe," (throws an error)."),oVe.forEach(t),ojo=i(el),mt=n(el,"DIV",{class:!0});var yA=s(mt);T(_L.$$.fragment,yA),rjo=i(yA),The=n(yA,"P",{});var w_t=s(The);tjo=r(w_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),w_t.forEach(t),ajo=i(yA),ed=n(yA,"P",{});var Hee=s(ed);njo=r(Hee,`Note:
Loading a model from its configuration file does `),Mhe=n(Hee,"STRONG",{});var A_t=s(Mhe);sjo=r(A_t,"not"),A_t.forEach(t),ljo=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),fV=n(Hee,"A",{href:!0});var y_t=s(fV);ijo=r(y_t,"from_pretrained()"),y_t.forEach(t),djo=r(Hee," to load the model weights."),Hee.forEach(t),cjo=i(yA),T(cb.$$.fragment,yA),yA.forEach(t),fjo=i(el),ro=n(el,"DIV",{class:!0});var fa=s(ro);T(bL.$$.fragment,fa),mjo=i(fa),Ehe=n(fa,"P",{});var L_t=s(Ehe);gjo=r(L_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),L_t.forEach(t),hjo=i(fa),ja=n(fa,"P",{});var LA=s(ja);pjo=r(LA,"The model class to instantiate is selected based on the "),Che=n(LA,"CODE",{});var x_t=s(Che);ujo=r(x_t,"model_type"),x_t.forEach(t),_jo=r(LA,` property of the config object (either
passed as an argument or loaded from `),whe=n(LA,"CODE",{});var $_t=s(whe);bjo=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),vjo=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(LA,"CODE",{});var k_t=s(Ahe);Fjo=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),Tjo=r(LA,":"),LA.forEach(t),Mjo=i(fa),Z=n(fa,"UL",{});var ee=s(Z);fb=n(ee,"LI",{});var gke=s(fb);yhe=n(gke,"STRONG",{});var S_t=s(yhe);Ejo=r(S_t,"albert"),S_t.forEach(t),Cjo=r(gke," \u2014 "),mV=n(gke,"A",{href:!0});var R_t=s(mV);wjo=r(R_t,"AlbertForMultipleChoice"),R_t.forEach(t),Ajo=r(gke," (ALBERT model)"),gke.forEach(t),yjo=i(ee),mb=n(ee,"LI",{});var hke=s(mb);Lhe=n(hke,"STRONG",{});var P_t=s(Lhe);Ljo=r(P_t,"bert"),P_t.forEach(t),xjo=r(hke," \u2014 "),gV=n(hke,"A",{href:!0});var B_t=s(gV);$jo=r(B_t,"BertForMultipleChoice"),B_t.forEach(t),kjo=r(hke," (BERT model)"),hke.forEach(t),Sjo=i(ee),gb=n(ee,"LI",{});var pke=s(gb);xhe=n(pke,"STRONG",{});var I_t=s(xhe);Rjo=r(I_t,"big_bird"),I_t.forEach(t),Pjo=r(pke," \u2014 "),hV=n(pke,"A",{href:!0});var N_t=s(hV);Bjo=r(N_t,"BigBirdForMultipleChoice"),N_t.forEach(t),Ijo=r(pke," (BigBird model)"),pke.forEach(t),Njo=i(ee),hb=n(ee,"LI",{});var uke=s(hb);$he=n(uke,"STRONG",{});var q_t=s($he);qjo=r(q_t,"camembert"),q_t.forEach(t),jjo=r(uke," \u2014 "),pV=n(uke,"A",{href:!0});var j_t=s(pV);Djo=r(j_t,"CamembertForMultipleChoice"),j_t.forEach(t),Gjo=r(uke," (CamemBERT model)"),uke.forEach(t),Ojo=i(ee),pb=n(ee,"LI",{});var _ke=s(pb);khe=n(_ke,"STRONG",{});var D_t=s(khe);Vjo=r(D_t,"canine"),D_t.forEach(t),Xjo=r(_ke," \u2014 "),uV=n(_ke,"A",{href:!0});var G_t=s(uV);zjo=r(G_t,"CanineForMultipleChoice"),G_t.forEach(t),Wjo=r(_ke," (CANINE model)"),_ke.forEach(t),Qjo=i(ee),ub=n(ee,"LI",{});var bke=s(ub);She=n(bke,"STRONG",{});var O_t=s(She);Hjo=r(O_t,"convbert"),O_t.forEach(t),Ujo=r(bke," \u2014 "),_V=n(bke,"A",{href:!0});var V_t=s(_V);Jjo=r(V_t,"ConvBertForMultipleChoice"),V_t.forEach(t),Yjo=r(bke," (ConvBERT model)"),bke.forEach(t),Kjo=i(ee),_b=n(ee,"LI",{});var vke=s(_b);Rhe=n(vke,"STRONG",{});var X_t=s(Rhe);Zjo=r(X_t,"data2vec-text"),X_t.forEach(t),eDo=r(vke," \u2014 "),bV=n(vke,"A",{href:!0});var z_t=s(bV);oDo=r(z_t,"Data2VecTextForMultipleChoice"),z_t.forEach(t),rDo=r(vke," (Data2VecText model)"),vke.forEach(t),tDo=i(ee),bb=n(ee,"LI",{});var Fke=s(bb);Phe=n(Fke,"STRONG",{});var W_t=s(Phe);aDo=r(W_t,"deberta-v2"),W_t.forEach(t),nDo=r(Fke," \u2014 "),vV=n(Fke,"A",{href:!0});var Q_t=s(vV);sDo=r(Q_t,"DebertaV2ForMultipleChoice"),Q_t.forEach(t),lDo=r(Fke," (DeBERTa-v2 model)"),Fke.forEach(t),iDo=i(ee),vb=n(ee,"LI",{});var Tke=s(vb);Bhe=n(Tke,"STRONG",{});var H_t=s(Bhe);dDo=r(H_t,"distilbert"),H_t.forEach(t),cDo=r(Tke," \u2014 "),FV=n(Tke,"A",{href:!0});var U_t=s(FV);fDo=r(U_t,"DistilBertForMultipleChoice"),U_t.forEach(t),mDo=r(Tke," (DistilBERT model)"),Tke.forEach(t),gDo=i(ee),Fb=n(ee,"LI",{});var Mke=s(Fb);Ihe=n(Mke,"STRONG",{});var J_t=s(Ihe);hDo=r(J_t,"electra"),J_t.forEach(t),pDo=r(Mke," \u2014 "),TV=n(Mke,"A",{href:!0});var Y_t=s(TV);uDo=r(Y_t,"ElectraForMultipleChoice"),Y_t.forEach(t),_Do=r(Mke," (ELECTRA model)"),Mke.forEach(t),bDo=i(ee),Tb=n(ee,"LI",{});var Eke=s(Tb);Nhe=n(Eke,"STRONG",{});var K_t=s(Nhe);vDo=r(K_t,"flaubert"),K_t.forEach(t),FDo=r(Eke," \u2014 "),MV=n(Eke,"A",{href:!0});var Z_t=s(MV);TDo=r(Z_t,"FlaubertForMultipleChoice"),Z_t.forEach(t),MDo=r(Eke," (FlauBERT model)"),Eke.forEach(t),EDo=i(ee),Mb=n(ee,"LI",{});var Cke=s(Mb);qhe=n(Cke,"STRONG",{});var e2t=s(qhe);CDo=r(e2t,"fnet"),e2t.forEach(t),wDo=r(Cke," \u2014 "),EV=n(Cke,"A",{href:!0});var o2t=s(EV);ADo=r(o2t,"FNetForMultipleChoice"),o2t.forEach(t),yDo=r(Cke," (FNet model)"),Cke.forEach(t),LDo=i(ee),Eb=n(ee,"LI",{});var wke=s(Eb);jhe=n(wke,"STRONG",{});var r2t=s(jhe);xDo=r(r2t,"funnel"),r2t.forEach(t),$Do=r(wke," \u2014 "),CV=n(wke,"A",{href:!0});var t2t=s(CV);kDo=r(t2t,"FunnelForMultipleChoice"),t2t.forEach(t),SDo=r(wke," (Funnel Transformer model)"),wke.forEach(t),RDo=i(ee),Cb=n(ee,"LI",{});var Ake=s(Cb);Dhe=n(Ake,"STRONG",{});var a2t=s(Dhe);PDo=r(a2t,"ibert"),a2t.forEach(t),BDo=r(Ake," \u2014 "),wV=n(Ake,"A",{href:!0});var n2t=s(wV);IDo=r(n2t,"IBertForMultipleChoice"),n2t.forEach(t),NDo=r(Ake," (I-BERT model)"),Ake.forEach(t),qDo=i(ee),wb=n(ee,"LI",{});var yke=s(wb);Ghe=n(yke,"STRONG",{});var s2t=s(Ghe);jDo=r(s2t,"longformer"),s2t.forEach(t),DDo=r(yke," \u2014 "),AV=n(yke,"A",{href:!0});var l2t=s(AV);GDo=r(l2t,"LongformerForMultipleChoice"),l2t.forEach(t),ODo=r(yke," (Longformer model)"),yke.forEach(t),VDo=i(ee),Ab=n(ee,"LI",{});var Lke=s(Ab);Ohe=n(Lke,"STRONG",{});var i2t=s(Ohe);XDo=r(i2t,"megatron-bert"),i2t.forEach(t),zDo=r(Lke," \u2014 "),yV=n(Lke,"A",{href:!0});var d2t=s(yV);WDo=r(d2t,"MegatronBertForMultipleChoice"),d2t.forEach(t),QDo=r(Lke," (Megatron-BERT model)"),Lke.forEach(t),HDo=i(ee),yb=n(ee,"LI",{});var xke=s(yb);Vhe=n(xke,"STRONG",{});var c2t=s(Vhe);UDo=r(c2t,"mobilebert"),c2t.forEach(t),JDo=r(xke," \u2014 "),LV=n(xke,"A",{href:!0});var f2t=s(LV);YDo=r(f2t,"MobileBertForMultipleChoice"),f2t.forEach(t),KDo=r(xke," (MobileBERT model)"),xke.forEach(t),ZDo=i(ee),Lb=n(ee,"LI",{});var $ke=s(Lb);Xhe=n($ke,"STRONG",{});var m2t=s(Xhe);eGo=r(m2t,"mpnet"),m2t.forEach(t),oGo=r($ke," \u2014 "),xV=n($ke,"A",{href:!0});var g2t=s(xV);rGo=r(g2t,"MPNetForMultipleChoice"),g2t.forEach(t),tGo=r($ke," (MPNet model)"),$ke.forEach(t),aGo=i(ee),xb=n(ee,"LI",{});var kke=s(xb);zhe=n(kke,"STRONG",{});var h2t=s(zhe);nGo=r(h2t,"nystromformer"),h2t.forEach(t),sGo=r(kke," \u2014 "),$V=n(kke,"A",{href:!0});var p2t=s($V);lGo=r(p2t,"NystromformerForMultipleChoice"),p2t.forEach(t),iGo=r(kke," (Nystr\xF6mformer model)"),kke.forEach(t),dGo=i(ee),$b=n(ee,"LI",{});var Ske=s($b);Whe=n(Ske,"STRONG",{});var u2t=s(Whe);cGo=r(u2t,"qdqbert"),u2t.forEach(t),fGo=r(Ske," \u2014 "),kV=n(Ske,"A",{href:!0});var _2t=s(kV);mGo=r(_2t,"QDQBertForMultipleChoice"),_2t.forEach(t),gGo=r(Ske," (QDQBert model)"),Ske.forEach(t),hGo=i(ee),kb=n(ee,"LI",{});var Rke=s(kb);Qhe=n(Rke,"STRONG",{});var b2t=s(Qhe);pGo=r(b2t,"rembert"),b2t.forEach(t),uGo=r(Rke," \u2014 "),SV=n(Rke,"A",{href:!0});var v2t=s(SV);_Go=r(v2t,"RemBertForMultipleChoice"),v2t.forEach(t),bGo=r(Rke," (RemBERT model)"),Rke.forEach(t),vGo=i(ee),Sb=n(ee,"LI",{});var Pke=s(Sb);Hhe=n(Pke,"STRONG",{});var F2t=s(Hhe);FGo=r(F2t,"roberta"),F2t.forEach(t),TGo=r(Pke," \u2014 "),RV=n(Pke,"A",{href:!0});var T2t=s(RV);MGo=r(T2t,"RobertaForMultipleChoice"),T2t.forEach(t),EGo=r(Pke," (RoBERTa model)"),Pke.forEach(t),CGo=i(ee),Rb=n(ee,"LI",{});var Bke=s(Rb);Uhe=n(Bke,"STRONG",{});var M2t=s(Uhe);wGo=r(M2t,"roformer"),M2t.forEach(t),AGo=r(Bke," \u2014 "),PV=n(Bke,"A",{href:!0});var E2t=s(PV);yGo=r(E2t,"RoFormerForMultipleChoice"),E2t.forEach(t),LGo=r(Bke," (RoFormer model)"),Bke.forEach(t),xGo=i(ee),Pb=n(ee,"LI",{});var Ike=s(Pb);Jhe=n(Ike,"STRONG",{});var C2t=s(Jhe);$Go=r(C2t,"squeezebert"),C2t.forEach(t),kGo=r(Ike," \u2014 "),BV=n(Ike,"A",{href:!0});var w2t=s(BV);SGo=r(w2t,"SqueezeBertForMultipleChoice"),w2t.forEach(t),RGo=r(Ike," (SqueezeBERT model)"),Ike.forEach(t),PGo=i(ee),Bb=n(ee,"LI",{});var Nke=s(Bb);Yhe=n(Nke,"STRONG",{});var A2t=s(Yhe);BGo=r(A2t,"xlm"),A2t.forEach(t),IGo=r(Nke," \u2014 "),IV=n(Nke,"A",{href:!0});var y2t=s(IV);NGo=r(y2t,"XLMForMultipleChoice"),y2t.forEach(t),qGo=r(Nke," (XLM model)"),Nke.forEach(t),jGo=i(ee),Ib=n(ee,"LI",{});var qke=s(Ib);Khe=n(qke,"STRONG",{});var L2t=s(Khe);DGo=r(L2t,"xlm-roberta"),L2t.forEach(t),GGo=r(qke," \u2014 "),NV=n(qke,"A",{href:!0});var x2t=s(NV);OGo=r(x2t,"XLMRobertaForMultipleChoice"),x2t.forEach(t),VGo=r(qke," (XLM-RoBERTa model)"),qke.forEach(t),XGo=i(ee),Nb=n(ee,"LI",{});var jke=s(Nb);Zhe=n(jke,"STRONG",{});var $2t=s(Zhe);zGo=r($2t,"xlm-roberta-xl"),$2t.forEach(t),WGo=r(jke," \u2014 "),qV=n(jke,"A",{href:!0});var k2t=s(qV);QGo=r(k2t,"XLMRobertaXLForMultipleChoice"),k2t.forEach(t),HGo=r(jke," (XLM-RoBERTa-XL model)"),jke.forEach(t),UGo=i(ee),qb=n(ee,"LI",{});var Dke=s(qb);epe=n(Dke,"STRONG",{});var S2t=s(epe);JGo=r(S2t,"xlnet"),S2t.forEach(t),YGo=r(Dke," \u2014 "),jV=n(Dke,"A",{href:!0});var R2t=s(jV);KGo=r(R2t,"XLNetForMultipleChoice"),R2t.forEach(t),ZGo=r(Dke," (XLNet model)"),Dke.forEach(t),eOo=i(ee),jb=n(ee,"LI",{});var Gke=s(jb);ope=n(Gke,"STRONG",{});var P2t=s(ope);oOo=r(P2t,"yoso"),P2t.forEach(t),rOo=r(Gke," \u2014 "),DV=n(Gke,"A",{href:!0});var B2t=s(DV);tOo=r(B2t,"YosoForMultipleChoice"),B2t.forEach(t),aOo=r(Gke," (YOSO model)"),Gke.forEach(t),ee.forEach(t),nOo=i(fa),Db=n(fa,"P",{});var Oke=s(Db);sOo=r(Oke,"The model is set in evaluation mode by default using "),rpe=n(Oke,"CODE",{});var I2t=s(rpe);lOo=r(I2t,"model.eval()"),I2t.forEach(t),iOo=r(Oke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(Oke,"CODE",{});var N2t=s(tpe);dOo=r(N2t,"model.train()"),N2t.forEach(t),Oke.forEach(t),cOo=i(fa),T(Gb.$$.fragment,fa),fa.forEach(t),el.forEach(t),JDe=i(f),od=n(f,"H2",{class:!0});var rVe=s(od);Ob=n(rVe,"A",{id:!0,class:!0,href:!0});var q2t=s(Ob);ape=n(q2t,"SPAN",{});var j2t=s(ape);T(vL.$$.fragment,j2t),j2t.forEach(t),q2t.forEach(t),fOo=i(rVe),npe=n(rVe,"SPAN",{});var D2t=s(npe);mOo=r(D2t,"AutoModelForNextSentencePrediction"),D2t.forEach(t),rVe.forEach(t),YDe=i(f),Io=n(f,"DIV",{class:!0});var ol=s(Io);T(FL.$$.fragment,ol),gOo=i(ol),rd=n(ol,"P",{});var Uee=s(rd);hOo=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),GV=n(Uee,"A",{href:!0});var G2t=s(GV);pOo=r(G2t,"from_pretrained()"),G2t.forEach(t),uOo=r(Uee," class method or the "),OV=n(Uee,"A",{href:!0});var O2t=s(OV);_Oo=r(O2t,"from_config()"),O2t.forEach(t),bOo=r(Uee,` class
method.`),Uee.forEach(t),vOo=i(ol),TL=n(ol,"P",{});var tVe=s(TL);FOo=r(tVe,"This class cannot be instantiated directly using "),spe=n(tVe,"CODE",{});var V2t=s(spe);TOo=r(V2t,"__init__()"),V2t.forEach(t),MOo=r(tVe," (throws an error)."),tVe.forEach(t),EOo=i(ol),gt=n(ol,"DIV",{class:!0});var xA=s(gt);T(ML.$$.fragment,xA),COo=i(xA),lpe=n(xA,"P",{});var X2t=s(lpe);wOo=r(X2t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),X2t.forEach(t),AOo=i(xA),td=n(xA,"P",{});var Jee=s(td);yOo=r(Jee,`Note:
Loading a model from its configuration file does `),ipe=n(Jee,"STRONG",{});var z2t=s(ipe);LOo=r(z2t,"not"),z2t.forEach(t),xOo=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(Jee,"A",{href:!0});var W2t=s(VV);$Oo=r(W2t,"from_pretrained()"),W2t.forEach(t),kOo=r(Jee," to load the model weights."),Jee.forEach(t),SOo=i(xA),T(Vb.$$.fragment,xA),xA.forEach(t),ROo=i(ol),to=n(ol,"DIV",{class:!0});var ma=s(to);T(EL.$$.fragment,ma),POo=i(ma),dpe=n(ma,"P",{});var Q2t=s(dpe);BOo=r(Q2t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Q2t.forEach(t),IOo=i(ma),Da=n(ma,"P",{});var $A=s(Da);NOo=r($A,"The model class to instantiate is selected based on the "),cpe=n($A,"CODE",{});var H2t=s(cpe);qOo=r(H2t,"model_type"),H2t.forEach(t),jOo=r($A,` property of the config object (either
passed as an argument or loaded from `),fpe=n($A,"CODE",{});var U2t=s(fpe);DOo=r(U2t,"pretrained_model_name_or_path"),U2t.forEach(t),GOo=r($A,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n($A,"CODE",{});var J2t=s(mpe);OOo=r(J2t,"pretrained_model_name_or_path"),J2t.forEach(t),VOo=r($A,":"),$A.forEach(t),XOo=i(ma),Zr=n(ma,"UL",{});var rl=s(Zr);Xb=n(rl,"LI",{});var Vke=s(Xb);gpe=n(Vke,"STRONG",{});var Y2t=s(gpe);zOo=r(Y2t,"bert"),Y2t.forEach(t),WOo=r(Vke," \u2014 "),XV=n(Vke,"A",{href:!0});var K2t=s(XV);QOo=r(K2t,"BertForNextSentencePrediction"),K2t.forEach(t),HOo=r(Vke," (BERT model)"),Vke.forEach(t),UOo=i(rl),zb=n(rl,"LI",{});var Xke=s(zb);hpe=n(Xke,"STRONG",{});var Z2t=s(hpe);JOo=r(Z2t,"fnet"),Z2t.forEach(t),YOo=r(Xke," \u2014 "),zV=n(Xke,"A",{href:!0});var e1t=s(zV);KOo=r(e1t,"FNetForNextSentencePrediction"),e1t.forEach(t),ZOo=r(Xke," (FNet model)"),Xke.forEach(t),eVo=i(rl),Wb=n(rl,"LI",{});var zke=s(Wb);ppe=n(zke,"STRONG",{});var o1t=s(ppe);oVo=r(o1t,"megatron-bert"),o1t.forEach(t),rVo=r(zke," \u2014 "),WV=n(zke,"A",{href:!0});var r1t=s(WV);tVo=r(r1t,"MegatronBertForNextSentencePrediction"),r1t.forEach(t),aVo=r(zke," (Megatron-BERT model)"),zke.forEach(t),nVo=i(rl),Qb=n(rl,"LI",{});var Wke=s(Qb);upe=n(Wke,"STRONG",{});var t1t=s(upe);sVo=r(t1t,"mobilebert"),t1t.forEach(t),lVo=r(Wke," \u2014 "),QV=n(Wke,"A",{href:!0});var a1t=s(QV);iVo=r(a1t,"MobileBertForNextSentencePrediction"),a1t.forEach(t),dVo=r(Wke," (MobileBERT model)"),Wke.forEach(t),cVo=i(rl),Hb=n(rl,"LI",{});var Qke=s(Hb);_pe=n(Qke,"STRONG",{});var n1t=s(_pe);fVo=r(n1t,"qdqbert"),n1t.forEach(t),mVo=r(Qke," \u2014 "),HV=n(Qke,"A",{href:!0});var s1t=s(HV);gVo=r(s1t,"QDQBertForNextSentencePrediction"),s1t.forEach(t),hVo=r(Qke," (QDQBert model)"),Qke.forEach(t),rl.forEach(t),pVo=i(ma),Ub=n(ma,"P",{});var Hke=s(Ub);uVo=r(Hke,"The model is set in evaluation mode by default using "),bpe=n(Hke,"CODE",{});var l1t=s(bpe);_Vo=r(l1t,"model.eval()"),l1t.forEach(t),bVo=r(Hke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(Hke,"CODE",{});var i1t=s(vpe);vVo=r(i1t,"model.train()"),i1t.forEach(t),Hke.forEach(t),FVo=i(ma),T(Jb.$$.fragment,ma),ma.forEach(t),ol.forEach(t),KDe=i(f),ad=n(f,"H2",{class:!0});var aVe=s(ad);Yb=n(aVe,"A",{id:!0,class:!0,href:!0});var d1t=s(Yb);Fpe=n(d1t,"SPAN",{});var c1t=s(Fpe);T(CL.$$.fragment,c1t),c1t.forEach(t),d1t.forEach(t),TVo=i(aVe),Tpe=n(aVe,"SPAN",{});var f1t=s(Tpe);MVo=r(f1t,"AutoModelForTokenClassification"),f1t.forEach(t),aVe.forEach(t),ZDe=i(f),No=n(f,"DIV",{class:!0});var tl=s(No);T(wL.$$.fragment,tl),EVo=i(tl),nd=n(tl,"P",{});var Yee=s(nd);CVo=r(Yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UV=n(Yee,"A",{href:!0});var m1t=s(UV);wVo=r(m1t,"from_pretrained()"),m1t.forEach(t),AVo=r(Yee," class method or the "),JV=n(Yee,"A",{href:!0});var g1t=s(JV);yVo=r(g1t,"from_config()"),g1t.forEach(t),LVo=r(Yee,` class
method.`),Yee.forEach(t),xVo=i(tl),AL=n(tl,"P",{});var nVe=s(AL);$Vo=r(nVe,"This class cannot be instantiated directly using "),Mpe=n(nVe,"CODE",{});var h1t=s(Mpe);kVo=r(h1t,"__init__()"),h1t.forEach(t),SVo=r(nVe," (throws an error)."),nVe.forEach(t),RVo=i(tl),ht=n(tl,"DIV",{class:!0});var kA=s(ht);T(yL.$$.fragment,kA),PVo=i(kA),Epe=n(kA,"P",{});var p1t=s(Epe);BVo=r(p1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p1t.forEach(t),IVo=i(kA),sd=n(kA,"P",{});var Kee=s(sd);NVo=r(Kee,`Note:
Loading a model from its configuration file does `),Cpe=n(Kee,"STRONG",{});var u1t=s(Cpe);qVo=r(u1t,"not"),u1t.forEach(t),jVo=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),YV=n(Kee,"A",{href:!0});var _1t=s(YV);DVo=r(_1t,"from_pretrained()"),_1t.forEach(t),GVo=r(Kee," to load the model weights."),Kee.forEach(t),OVo=i(kA),T(Kb.$$.fragment,kA),kA.forEach(t),VVo=i(tl),ao=n(tl,"DIV",{class:!0});var ga=s(ao);T(LL.$$.fragment,ga),XVo=i(ga),wpe=n(ga,"P",{});var b1t=s(wpe);zVo=r(b1t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),b1t.forEach(t),WVo=i(ga),Ga=n(ga,"P",{});var SA=s(Ga);QVo=r(SA,"The model class to instantiate is selected based on the "),Ape=n(SA,"CODE",{});var v1t=s(Ape);HVo=r(v1t,"model_type"),v1t.forEach(t),UVo=r(SA,` property of the config object (either
passed as an argument or loaded from `),ype=n(SA,"CODE",{});var F1t=s(ype);JVo=r(F1t,"pretrained_model_name_or_path"),F1t.forEach(t),YVo=r(SA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(SA,"CODE",{});var T1t=s(Lpe);KVo=r(T1t,"pretrained_model_name_or_path"),T1t.forEach(t),ZVo=r(SA,":"),SA.forEach(t),eXo=i(ga),U=n(ga,"UL",{});var J=s(U);Zb=n(J,"LI",{});var Uke=s(Zb);xpe=n(Uke,"STRONG",{});var M1t=s(xpe);oXo=r(M1t,"albert"),M1t.forEach(t),rXo=r(Uke," \u2014 "),KV=n(Uke,"A",{href:!0});var E1t=s(KV);tXo=r(E1t,"AlbertForTokenClassification"),E1t.forEach(t),aXo=r(Uke," (ALBERT model)"),Uke.forEach(t),nXo=i(J),e4=n(J,"LI",{});var Jke=s(e4);$pe=n(Jke,"STRONG",{});var C1t=s($pe);sXo=r(C1t,"bert"),C1t.forEach(t),lXo=r(Jke," \u2014 "),ZV=n(Jke,"A",{href:!0});var w1t=s(ZV);iXo=r(w1t,"BertForTokenClassification"),w1t.forEach(t),dXo=r(Jke," (BERT model)"),Jke.forEach(t),cXo=i(J),o4=n(J,"LI",{});var Yke=s(o4);kpe=n(Yke,"STRONG",{});var A1t=s(kpe);fXo=r(A1t,"big_bird"),A1t.forEach(t),mXo=r(Yke," \u2014 "),eX=n(Yke,"A",{href:!0});var y1t=s(eX);gXo=r(y1t,"BigBirdForTokenClassification"),y1t.forEach(t),hXo=r(Yke," (BigBird model)"),Yke.forEach(t),pXo=i(J),r4=n(J,"LI",{});var Kke=s(r4);Spe=n(Kke,"STRONG",{});var L1t=s(Spe);uXo=r(L1t,"camembert"),L1t.forEach(t),_Xo=r(Kke," \u2014 "),oX=n(Kke,"A",{href:!0});var x1t=s(oX);bXo=r(x1t,"CamembertForTokenClassification"),x1t.forEach(t),vXo=r(Kke," (CamemBERT model)"),Kke.forEach(t),FXo=i(J),t4=n(J,"LI",{});var Zke=s(t4);Rpe=n(Zke,"STRONG",{});var $1t=s(Rpe);TXo=r($1t,"canine"),$1t.forEach(t),MXo=r(Zke," \u2014 "),rX=n(Zke,"A",{href:!0});var k1t=s(rX);EXo=r(k1t,"CanineForTokenClassification"),k1t.forEach(t),CXo=r(Zke," (CANINE model)"),Zke.forEach(t),wXo=i(J),a4=n(J,"LI",{});var eSe=s(a4);Ppe=n(eSe,"STRONG",{});var S1t=s(Ppe);AXo=r(S1t,"convbert"),S1t.forEach(t),yXo=r(eSe," \u2014 "),tX=n(eSe,"A",{href:!0});var R1t=s(tX);LXo=r(R1t,"ConvBertForTokenClassification"),R1t.forEach(t),xXo=r(eSe," (ConvBERT model)"),eSe.forEach(t),$Xo=i(J),n4=n(J,"LI",{});var oSe=s(n4);Bpe=n(oSe,"STRONG",{});var P1t=s(Bpe);kXo=r(P1t,"data2vec-text"),P1t.forEach(t),SXo=r(oSe," \u2014 "),aX=n(oSe,"A",{href:!0});var B1t=s(aX);RXo=r(B1t,"Data2VecTextForTokenClassification"),B1t.forEach(t),PXo=r(oSe," (Data2VecText model)"),oSe.forEach(t),BXo=i(J),s4=n(J,"LI",{});var rSe=s(s4);Ipe=n(rSe,"STRONG",{});var I1t=s(Ipe);IXo=r(I1t,"deberta"),I1t.forEach(t),NXo=r(rSe," \u2014 "),nX=n(rSe,"A",{href:!0});var N1t=s(nX);qXo=r(N1t,"DebertaForTokenClassification"),N1t.forEach(t),jXo=r(rSe," (DeBERTa model)"),rSe.forEach(t),DXo=i(J),l4=n(J,"LI",{});var tSe=s(l4);Npe=n(tSe,"STRONG",{});var q1t=s(Npe);GXo=r(q1t,"deberta-v2"),q1t.forEach(t),OXo=r(tSe," \u2014 "),sX=n(tSe,"A",{href:!0});var j1t=s(sX);VXo=r(j1t,"DebertaV2ForTokenClassification"),j1t.forEach(t),XXo=r(tSe," (DeBERTa-v2 model)"),tSe.forEach(t),zXo=i(J),i4=n(J,"LI",{});var aSe=s(i4);qpe=n(aSe,"STRONG",{});var D1t=s(qpe);WXo=r(D1t,"distilbert"),D1t.forEach(t),QXo=r(aSe," \u2014 "),lX=n(aSe,"A",{href:!0});var G1t=s(lX);HXo=r(G1t,"DistilBertForTokenClassification"),G1t.forEach(t),UXo=r(aSe," (DistilBERT model)"),aSe.forEach(t),JXo=i(J),d4=n(J,"LI",{});var nSe=s(d4);jpe=n(nSe,"STRONG",{});var O1t=s(jpe);YXo=r(O1t,"electra"),O1t.forEach(t),KXo=r(nSe," \u2014 "),iX=n(nSe,"A",{href:!0});var V1t=s(iX);ZXo=r(V1t,"ElectraForTokenClassification"),V1t.forEach(t),ezo=r(nSe," (ELECTRA model)"),nSe.forEach(t),ozo=i(J),c4=n(J,"LI",{});var sSe=s(c4);Dpe=n(sSe,"STRONG",{});var X1t=s(Dpe);rzo=r(X1t,"flaubert"),X1t.forEach(t),tzo=r(sSe," \u2014 "),dX=n(sSe,"A",{href:!0});var z1t=s(dX);azo=r(z1t,"FlaubertForTokenClassification"),z1t.forEach(t),nzo=r(sSe," (FlauBERT model)"),sSe.forEach(t),szo=i(J),f4=n(J,"LI",{});var lSe=s(f4);Gpe=n(lSe,"STRONG",{});var W1t=s(Gpe);lzo=r(W1t,"fnet"),W1t.forEach(t),izo=r(lSe," \u2014 "),cX=n(lSe,"A",{href:!0});var Q1t=s(cX);dzo=r(Q1t,"FNetForTokenClassification"),Q1t.forEach(t),czo=r(lSe," (FNet model)"),lSe.forEach(t),fzo=i(J),m4=n(J,"LI",{});var iSe=s(m4);Ope=n(iSe,"STRONG",{});var H1t=s(Ope);mzo=r(H1t,"funnel"),H1t.forEach(t),gzo=r(iSe," \u2014 "),fX=n(iSe,"A",{href:!0});var U1t=s(fX);hzo=r(U1t,"FunnelForTokenClassification"),U1t.forEach(t),pzo=r(iSe," (Funnel Transformer model)"),iSe.forEach(t),uzo=i(J),g4=n(J,"LI",{});var dSe=s(g4);Vpe=n(dSe,"STRONG",{});var J1t=s(Vpe);_zo=r(J1t,"gpt2"),J1t.forEach(t),bzo=r(dSe," \u2014 "),mX=n(dSe,"A",{href:!0});var Y1t=s(mX);vzo=r(Y1t,"GPT2ForTokenClassification"),Y1t.forEach(t),Fzo=r(dSe," (OpenAI GPT-2 model)"),dSe.forEach(t),Tzo=i(J),h4=n(J,"LI",{});var cSe=s(h4);Xpe=n(cSe,"STRONG",{});var K1t=s(Xpe);Mzo=r(K1t,"ibert"),K1t.forEach(t),Ezo=r(cSe," \u2014 "),gX=n(cSe,"A",{href:!0});var Z1t=s(gX);Czo=r(Z1t,"IBertForTokenClassification"),Z1t.forEach(t),wzo=r(cSe," (I-BERT model)"),cSe.forEach(t),Azo=i(J),p4=n(J,"LI",{});var fSe=s(p4);zpe=n(fSe,"STRONG",{});var e7t=s(zpe);yzo=r(e7t,"layoutlm"),e7t.forEach(t),Lzo=r(fSe," \u2014 "),hX=n(fSe,"A",{href:!0});var o7t=s(hX);xzo=r(o7t,"LayoutLMForTokenClassification"),o7t.forEach(t),$zo=r(fSe," (LayoutLM model)"),fSe.forEach(t),kzo=i(J),u4=n(J,"LI",{});var mSe=s(u4);Wpe=n(mSe,"STRONG",{});var r7t=s(Wpe);Szo=r(r7t,"layoutlmv2"),r7t.forEach(t),Rzo=r(mSe," \u2014 "),pX=n(mSe,"A",{href:!0});var t7t=s(pX);Pzo=r(t7t,"LayoutLMv2ForTokenClassification"),t7t.forEach(t),Bzo=r(mSe," (LayoutLMv2 model)"),mSe.forEach(t),Izo=i(J),_4=n(J,"LI",{});var gSe=s(_4);Qpe=n(gSe,"STRONG",{});var a7t=s(Qpe);Nzo=r(a7t,"layoutlmv3"),a7t.forEach(t),qzo=r(gSe," \u2014 "),uX=n(gSe,"A",{href:!0});var n7t=s(uX);jzo=r(n7t,"LayoutLMv3ForTokenClassification"),n7t.forEach(t),Dzo=r(gSe," (LayoutLMv3 model)"),gSe.forEach(t),Gzo=i(J),b4=n(J,"LI",{});var hSe=s(b4);Hpe=n(hSe,"STRONG",{});var s7t=s(Hpe);Ozo=r(s7t,"longformer"),s7t.forEach(t),Vzo=r(hSe," \u2014 "),_X=n(hSe,"A",{href:!0});var l7t=s(_X);Xzo=r(l7t,"LongformerForTokenClassification"),l7t.forEach(t),zzo=r(hSe," (Longformer model)"),hSe.forEach(t),Wzo=i(J),v4=n(J,"LI",{});var pSe=s(v4);Upe=n(pSe,"STRONG",{});var i7t=s(Upe);Qzo=r(i7t,"megatron-bert"),i7t.forEach(t),Hzo=r(pSe," \u2014 "),bX=n(pSe,"A",{href:!0});var d7t=s(bX);Uzo=r(d7t,"MegatronBertForTokenClassification"),d7t.forEach(t),Jzo=r(pSe," (Megatron-BERT model)"),pSe.forEach(t),Yzo=i(J),F4=n(J,"LI",{});var uSe=s(F4);Jpe=n(uSe,"STRONG",{});var c7t=s(Jpe);Kzo=r(c7t,"mobilebert"),c7t.forEach(t),Zzo=r(uSe," \u2014 "),vX=n(uSe,"A",{href:!0});var f7t=s(vX);eWo=r(f7t,"MobileBertForTokenClassification"),f7t.forEach(t),oWo=r(uSe," (MobileBERT model)"),uSe.forEach(t),rWo=i(J),T4=n(J,"LI",{});var _Se=s(T4);Ype=n(_Se,"STRONG",{});var m7t=s(Ype);tWo=r(m7t,"mpnet"),m7t.forEach(t),aWo=r(_Se," \u2014 "),FX=n(_Se,"A",{href:!0});var g7t=s(FX);nWo=r(g7t,"MPNetForTokenClassification"),g7t.forEach(t),sWo=r(_Se," (MPNet model)"),_Se.forEach(t),lWo=i(J),M4=n(J,"LI",{});var bSe=s(M4);Kpe=n(bSe,"STRONG",{});var h7t=s(Kpe);iWo=r(h7t,"nystromformer"),h7t.forEach(t),dWo=r(bSe," \u2014 "),TX=n(bSe,"A",{href:!0});var p7t=s(TX);cWo=r(p7t,"NystromformerForTokenClassification"),p7t.forEach(t),fWo=r(bSe," (Nystr\xF6mformer model)"),bSe.forEach(t),mWo=i(J),E4=n(J,"LI",{});var vSe=s(E4);Zpe=n(vSe,"STRONG",{});var u7t=s(Zpe);gWo=r(u7t,"qdqbert"),u7t.forEach(t),hWo=r(vSe," \u2014 "),MX=n(vSe,"A",{href:!0});var _7t=s(MX);pWo=r(_7t,"QDQBertForTokenClassification"),_7t.forEach(t),uWo=r(vSe," (QDQBert model)"),vSe.forEach(t),_Wo=i(J),C4=n(J,"LI",{});var FSe=s(C4);eue=n(FSe,"STRONG",{});var b7t=s(eue);bWo=r(b7t,"rembert"),b7t.forEach(t),vWo=r(FSe," \u2014 "),EX=n(FSe,"A",{href:!0});var v7t=s(EX);FWo=r(v7t,"RemBertForTokenClassification"),v7t.forEach(t),TWo=r(FSe," (RemBERT model)"),FSe.forEach(t),MWo=i(J),w4=n(J,"LI",{});var TSe=s(w4);oue=n(TSe,"STRONG",{});var F7t=s(oue);EWo=r(F7t,"roberta"),F7t.forEach(t),CWo=r(TSe," \u2014 "),CX=n(TSe,"A",{href:!0});var T7t=s(CX);wWo=r(T7t,"RobertaForTokenClassification"),T7t.forEach(t),AWo=r(TSe," (RoBERTa model)"),TSe.forEach(t),yWo=i(J),A4=n(J,"LI",{});var MSe=s(A4);rue=n(MSe,"STRONG",{});var M7t=s(rue);LWo=r(M7t,"roformer"),M7t.forEach(t),xWo=r(MSe," \u2014 "),wX=n(MSe,"A",{href:!0});var E7t=s(wX);$Wo=r(E7t,"RoFormerForTokenClassification"),E7t.forEach(t),kWo=r(MSe," (RoFormer model)"),MSe.forEach(t),SWo=i(J),y4=n(J,"LI",{});var ESe=s(y4);tue=n(ESe,"STRONG",{});var C7t=s(tue);RWo=r(C7t,"squeezebert"),C7t.forEach(t),PWo=r(ESe," \u2014 "),AX=n(ESe,"A",{href:!0});var w7t=s(AX);BWo=r(w7t,"SqueezeBertForTokenClassification"),w7t.forEach(t),IWo=r(ESe," (SqueezeBERT model)"),ESe.forEach(t),NWo=i(J),L4=n(J,"LI",{});var CSe=s(L4);aue=n(CSe,"STRONG",{});var A7t=s(aue);qWo=r(A7t,"xlm"),A7t.forEach(t),jWo=r(CSe," \u2014 "),yX=n(CSe,"A",{href:!0});var y7t=s(yX);DWo=r(y7t,"XLMForTokenClassification"),y7t.forEach(t),GWo=r(CSe," (XLM model)"),CSe.forEach(t),OWo=i(J),x4=n(J,"LI",{});var wSe=s(x4);nue=n(wSe,"STRONG",{});var L7t=s(nue);VWo=r(L7t,"xlm-roberta"),L7t.forEach(t),XWo=r(wSe," \u2014 "),LX=n(wSe,"A",{href:!0});var x7t=s(LX);zWo=r(x7t,"XLMRobertaForTokenClassification"),x7t.forEach(t),WWo=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),QWo=i(J),$4=n(J,"LI",{});var ASe=s($4);sue=n(ASe,"STRONG",{});var $7t=s(sue);HWo=r($7t,"xlm-roberta-xl"),$7t.forEach(t),UWo=r(ASe," \u2014 "),xX=n(ASe,"A",{href:!0});var k7t=s(xX);JWo=r(k7t,"XLMRobertaXLForTokenClassification"),k7t.forEach(t),YWo=r(ASe," (XLM-RoBERTa-XL model)"),ASe.forEach(t),KWo=i(J),k4=n(J,"LI",{});var ySe=s(k4);lue=n(ySe,"STRONG",{});var S7t=s(lue);ZWo=r(S7t,"xlnet"),S7t.forEach(t),eQo=r(ySe," \u2014 "),$X=n(ySe,"A",{href:!0});var R7t=s($X);oQo=r(R7t,"XLNetForTokenClassification"),R7t.forEach(t),rQo=r(ySe," (XLNet model)"),ySe.forEach(t),tQo=i(J),S4=n(J,"LI",{});var LSe=s(S4);iue=n(LSe,"STRONG",{});var P7t=s(iue);aQo=r(P7t,"yoso"),P7t.forEach(t),nQo=r(LSe," \u2014 "),kX=n(LSe,"A",{href:!0});var B7t=s(kX);sQo=r(B7t,"YosoForTokenClassification"),B7t.forEach(t),lQo=r(LSe," (YOSO model)"),LSe.forEach(t),J.forEach(t),iQo=i(ga),R4=n(ga,"P",{});var xSe=s(R4);dQo=r(xSe,"The model is set in evaluation mode by default using "),due=n(xSe,"CODE",{});var I7t=s(due);cQo=r(I7t,"model.eval()"),I7t.forEach(t),fQo=r(xSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cue=n(xSe,"CODE",{});var N7t=s(cue);mQo=r(N7t,"model.train()"),N7t.forEach(t),xSe.forEach(t),gQo=i(ga),T(P4.$$.fragment,ga),ga.forEach(t),tl.forEach(t),eGe=i(f),ld=n(f,"H2",{class:!0});var sVe=s(ld);B4=n(sVe,"A",{id:!0,class:!0,href:!0});var q7t=s(B4);fue=n(q7t,"SPAN",{});var j7t=s(fue);T(xL.$$.fragment,j7t),j7t.forEach(t),q7t.forEach(t),hQo=i(sVe),mue=n(sVe,"SPAN",{});var D7t=s(mue);pQo=r(D7t,"AutoModelForQuestionAnswering"),D7t.forEach(t),sVe.forEach(t),oGe=i(f),qo=n(f,"DIV",{class:!0});var al=s(qo);T($L.$$.fragment,al),uQo=i(al),id=n(al,"P",{});var Zee=s(id);_Qo=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),SX=n(Zee,"A",{href:!0});var G7t=s(SX);bQo=r(G7t,"from_pretrained()"),G7t.forEach(t),vQo=r(Zee," class method or the "),RX=n(Zee,"A",{href:!0});var O7t=s(RX);FQo=r(O7t,"from_config()"),O7t.forEach(t),TQo=r(Zee,` class
method.`),Zee.forEach(t),MQo=i(al),kL=n(al,"P",{});var lVe=s(kL);EQo=r(lVe,"This class cannot be instantiated directly using "),gue=n(lVe,"CODE",{});var V7t=s(gue);CQo=r(V7t,"__init__()"),V7t.forEach(t),wQo=r(lVe," (throws an error)."),lVe.forEach(t),AQo=i(al),pt=n(al,"DIV",{class:!0});var RA=s(pt);T(SL.$$.fragment,RA),yQo=i(RA),hue=n(RA,"P",{});var X7t=s(hue);LQo=r(X7t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X7t.forEach(t),xQo=i(RA),dd=n(RA,"P",{});var eoe=s(dd);$Qo=r(eoe,`Note:
Loading a model from its configuration file does `),pue=n(eoe,"STRONG",{});var z7t=s(pue);kQo=r(z7t,"not"),z7t.forEach(t),SQo=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(eoe,"A",{href:!0});var W7t=s(PX);RQo=r(W7t,"from_pretrained()"),W7t.forEach(t),PQo=r(eoe," to load the model weights."),eoe.forEach(t),BQo=i(RA),T(I4.$$.fragment,RA),RA.forEach(t),IQo=i(al),no=n(al,"DIV",{class:!0});var ha=s(no);T(RL.$$.fragment,ha),NQo=i(ha),uue=n(ha,"P",{});var Q7t=s(uue);qQo=r(Q7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Q7t.forEach(t),jQo=i(ha),Oa=n(ha,"P",{});var PA=s(Oa);DQo=r(PA,"The model class to instantiate is selected based on the "),_ue=n(PA,"CODE",{});var H7t=s(_ue);GQo=r(H7t,"model_type"),H7t.forEach(t),OQo=r(PA,` property of the config object (either
passed as an argument or loaded from `),bue=n(PA,"CODE",{});var U7t=s(bue);VQo=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),XQo=r(PA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(PA,"CODE",{});var J7t=s(vue);zQo=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),WQo=r(PA,":"),PA.forEach(t),QQo=i(ha),V=n(ha,"UL",{});var X=s(V);N4=n(X,"LI",{});var $Se=s(N4);Fue=n($Se,"STRONG",{});var Y7t=s(Fue);HQo=r(Y7t,"albert"),Y7t.forEach(t),UQo=r($Se," \u2014 "),BX=n($Se,"A",{href:!0});var K7t=s(BX);JQo=r(K7t,"AlbertForQuestionAnswering"),K7t.forEach(t),YQo=r($Se," (ALBERT model)"),$Se.forEach(t),KQo=i(X),q4=n(X,"LI",{});var kSe=s(q4);Tue=n(kSe,"STRONG",{});var Z7t=s(Tue);ZQo=r(Z7t,"bart"),Z7t.forEach(t),eHo=r(kSe," \u2014 "),IX=n(kSe,"A",{href:!0});var ebt=s(IX);oHo=r(ebt,"BartForQuestionAnswering"),ebt.forEach(t),rHo=r(kSe," (BART model)"),kSe.forEach(t),tHo=i(X),j4=n(X,"LI",{});var SSe=s(j4);Mue=n(SSe,"STRONG",{});var obt=s(Mue);aHo=r(obt,"bert"),obt.forEach(t),nHo=r(SSe," \u2014 "),NX=n(SSe,"A",{href:!0});var rbt=s(NX);sHo=r(rbt,"BertForQuestionAnswering"),rbt.forEach(t),lHo=r(SSe," (BERT model)"),SSe.forEach(t),iHo=i(X),D4=n(X,"LI",{});var RSe=s(D4);Eue=n(RSe,"STRONG",{});var tbt=s(Eue);dHo=r(tbt,"big_bird"),tbt.forEach(t),cHo=r(RSe," \u2014 "),qX=n(RSe,"A",{href:!0});var abt=s(qX);fHo=r(abt,"BigBirdForQuestionAnswering"),abt.forEach(t),mHo=r(RSe," (BigBird model)"),RSe.forEach(t),gHo=i(X),G4=n(X,"LI",{});var PSe=s(G4);Cue=n(PSe,"STRONG",{});var nbt=s(Cue);hHo=r(nbt,"bigbird_pegasus"),nbt.forEach(t),pHo=r(PSe," \u2014 "),jX=n(PSe,"A",{href:!0});var sbt=s(jX);uHo=r(sbt,"BigBirdPegasusForQuestionAnswering"),sbt.forEach(t),_Ho=r(PSe," (BigBird-Pegasus model)"),PSe.forEach(t),bHo=i(X),O4=n(X,"LI",{});var BSe=s(O4);wue=n(BSe,"STRONG",{});var lbt=s(wue);vHo=r(lbt,"camembert"),lbt.forEach(t),FHo=r(BSe," \u2014 "),DX=n(BSe,"A",{href:!0});var ibt=s(DX);THo=r(ibt,"CamembertForQuestionAnswering"),ibt.forEach(t),MHo=r(BSe," (CamemBERT model)"),BSe.forEach(t),EHo=i(X),V4=n(X,"LI",{});var ISe=s(V4);Aue=n(ISe,"STRONG",{});var dbt=s(Aue);CHo=r(dbt,"canine"),dbt.forEach(t),wHo=r(ISe," \u2014 "),GX=n(ISe,"A",{href:!0});var cbt=s(GX);AHo=r(cbt,"CanineForQuestionAnswering"),cbt.forEach(t),yHo=r(ISe," (CANINE model)"),ISe.forEach(t),LHo=i(X),X4=n(X,"LI",{});var NSe=s(X4);yue=n(NSe,"STRONG",{});var fbt=s(yue);xHo=r(fbt,"convbert"),fbt.forEach(t),$Ho=r(NSe," \u2014 "),OX=n(NSe,"A",{href:!0});var mbt=s(OX);kHo=r(mbt,"ConvBertForQuestionAnswering"),mbt.forEach(t),SHo=r(NSe," (ConvBERT model)"),NSe.forEach(t),RHo=i(X),z4=n(X,"LI",{});var qSe=s(z4);Lue=n(qSe,"STRONG",{});var gbt=s(Lue);PHo=r(gbt,"data2vec-text"),gbt.forEach(t),BHo=r(qSe," \u2014 "),VX=n(qSe,"A",{href:!0});var hbt=s(VX);IHo=r(hbt,"Data2VecTextForQuestionAnswering"),hbt.forEach(t),NHo=r(qSe," (Data2VecText model)"),qSe.forEach(t),qHo=i(X),W4=n(X,"LI",{});var jSe=s(W4);xue=n(jSe,"STRONG",{});var pbt=s(xue);jHo=r(pbt,"deberta"),pbt.forEach(t),DHo=r(jSe," \u2014 "),XX=n(jSe,"A",{href:!0});var ubt=s(XX);GHo=r(ubt,"DebertaForQuestionAnswering"),ubt.forEach(t),OHo=r(jSe," (DeBERTa model)"),jSe.forEach(t),VHo=i(X),Q4=n(X,"LI",{});var DSe=s(Q4);$ue=n(DSe,"STRONG",{});var _bt=s($ue);XHo=r(_bt,"deberta-v2"),_bt.forEach(t),zHo=r(DSe," \u2014 "),zX=n(DSe,"A",{href:!0});var bbt=s(zX);WHo=r(bbt,"DebertaV2ForQuestionAnswering"),bbt.forEach(t),QHo=r(DSe," (DeBERTa-v2 model)"),DSe.forEach(t),HHo=i(X),H4=n(X,"LI",{});var GSe=s(H4);kue=n(GSe,"STRONG",{});var vbt=s(kue);UHo=r(vbt,"distilbert"),vbt.forEach(t),JHo=r(GSe," \u2014 "),WX=n(GSe,"A",{href:!0});var Fbt=s(WX);YHo=r(Fbt,"DistilBertForQuestionAnswering"),Fbt.forEach(t),KHo=r(GSe," (DistilBERT model)"),GSe.forEach(t),ZHo=i(X),U4=n(X,"LI",{});var OSe=s(U4);Sue=n(OSe,"STRONG",{});var Tbt=s(Sue);eUo=r(Tbt,"electra"),Tbt.forEach(t),oUo=r(OSe," \u2014 "),QX=n(OSe,"A",{href:!0});var Mbt=s(QX);rUo=r(Mbt,"ElectraForQuestionAnswering"),Mbt.forEach(t),tUo=r(OSe," (ELECTRA model)"),OSe.forEach(t),aUo=i(X),J4=n(X,"LI",{});var VSe=s(J4);Rue=n(VSe,"STRONG",{});var Ebt=s(Rue);nUo=r(Ebt,"flaubert"),Ebt.forEach(t),sUo=r(VSe," \u2014 "),HX=n(VSe,"A",{href:!0});var Cbt=s(HX);lUo=r(Cbt,"FlaubertForQuestionAnsweringSimple"),Cbt.forEach(t),iUo=r(VSe," (FlauBERT model)"),VSe.forEach(t),dUo=i(X),Y4=n(X,"LI",{});var XSe=s(Y4);Pue=n(XSe,"STRONG",{});var wbt=s(Pue);cUo=r(wbt,"fnet"),wbt.forEach(t),fUo=r(XSe," \u2014 "),UX=n(XSe,"A",{href:!0});var Abt=s(UX);mUo=r(Abt,"FNetForQuestionAnswering"),Abt.forEach(t),gUo=r(XSe," (FNet model)"),XSe.forEach(t),hUo=i(X),K4=n(X,"LI",{});var zSe=s(K4);Bue=n(zSe,"STRONG",{});var ybt=s(Bue);pUo=r(ybt,"funnel"),ybt.forEach(t),uUo=r(zSe," \u2014 "),JX=n(zSe,"A",{href:!0});var Lbt=s(JX);_Uo=r(Lbt,"FunnelForQuestionAnswering"),Lbt.forEach(t),bUo=r(zSe," (Funnel Transformer model)"),zSe.forEach(t),vUo=i(X),Z4=n(X,"LI",{});var WSe=s(Z4);Iue=n(WSe,"STRONG",{});var xbt=s(Iue);FUo=r(xbt,"gptj"),xbt.forEach(t),TUo=r(WSe," \u2014 "),YX=n(WSe,"A",{href:!0});var $bt=s(YX);MUo=r($bt,"GPTJForQuestionAnswering"),$bt.forEach(t),EUo=r(WSe," (GPT-J model)"),WSe.forEach(t),CUo=i(X),ev=n(X,"LI",{});var QSe=s(ev);Nue=n(QSe,"STRONG",{});var kbt=s(Nue);wUo=r(kbt,"ibert"),kbt.forEach(t),AUo=r(QSe," \u2014 "),KX=n(QSe,"A",{href:!0});var Sbt=s(KX);yUo=r(Sbt,"IBertForQuestionAnswering"),Sbt.forEach(t),LUo=r(QSe," (I-BERT model)"),QSe.forEach(t),xUo=i(X),ov=n(X,"LI",{});var HSe=s(ov);que=n(HSe,"STRONG",{});var Rbt=s(que);$Uo=r(Rbt,"layoutlmv2"),Rbt.forEach(t),kUo=r(HSe," \u2014 "),ZX=n(HSe,"A",{href:!0});var Pbt=s(ZX);SUo=r(Pbt,"LayoutLMv2ForQuestionAnswering"),Pbt.forEach(t),RUo=r(HSe," (LayoutLMv2 model)"),HSe.forEach(t),PUo=i(X),rv=n(X,"LI",{});var USe=s(rv);jue=n(USe,"STRONG",{});var Bbt=s(jue);BUo=r(Bbt,"layoutlmv3"),Bbt.forEach(t),IUo=r(USe," \u2014 "),ez=n(USe,"A",{href:!0});var Ibt=s(ez);NUo=r(Ibt,"LayoutLMv3ForQuestionAnswering"),Ibt.forEach(t),qUo=r(USe," (LayoutLMv3 model)"),USe.forEach(t),jUo=i(X),tv=n(X,"LI",{});var JSe=s(tv);Due=n(JSe,"STRONG",{});var Nbt=s(Due);DUo=r(Nbt,"led"),Nbt.forEach(t),GUo=r(JSe," \u2014 "),oz=n(JSe,"A",{href:!0});var qbt=s(oz);OUo=r(qbt,"LEDForQuestionAnswering"),qbt.forEach(t),VUo=r(JSe," (LED model)"),JSe.forEach(t),XUo=i(X),av=n(X,"LI",{});var YSe=s(av);Gue=n(YSe,"STRONG",{});var jbt=s(Gue);zUo=r(jbt,"longformer"),jbt.forEach(t),WUo=r(YSe," \u2014 "),rz=n(YSe,"A",{href:!0});var Dbt=s(rz);QUo=r(Dbt,"LongformerForQuestionAnswering"),Dbt.forEach(t),HUo=r(YSe," (Longformer model)"),YSe.forEach(t),UUo=i(X),nv=n(X,"LI",{});var KSe=s(nv);Oue=n(KSe,"STRONG",{});var Gbt=s(Oue);JUo=r(Gbt,"lxmert"),Gbt.forEach(t),YUo=r(KSe," \u2014 "),tz=n(KSe,"A",{href:!0});var Obt=s(tz);KUo=r(Obt,"LxmertForQuestionAnswering"),Obt.forEach(t),ZUo=r(KSe," (LXMERT model)"),KSe.forEach(t),eJo=i(X),sv=n(X,"LI",{});var ZSe=s(sv);Vue=n(ZSe,"STRONG",{});var Vbt=s(Vue);oJo=r(Vbt,"mbart"),Vbt.forEach(t),rJo=r(ZSe," \u2014 "),az=n(ZSe,"A",{href:!0});var Xbt=s(az);tJo=r(Xbt,"MBartForQuestionAnswering"),Xbt.forEach(t),aJo=r(ZSe," (mBART model)"),ZSe.forEach(t),nJo=i(X),lv=n(X,"LI",{});var eRe=s(lv);Xue=n(eRe,"STRONG",{});var zbt=s(Xue);sJo=r(zbt,"megatron-bert"),zbt.forEach(t),lJo=r(eRe," \u2014 "),nz=n(eRe,"A",{href:!0});var Wbt=s(nz);iJo=r(Wbt,"MegatronBertForQuestionAnswering"),Wbt.forEach(t),dJo=r(eRe," (Megatron-BERT model)"),eRe.forEach(t),cJo=i(X),iv=n(X,"LI",{});var oRe=s(iv);zue=n(oRe,"STRONG",{});var Qbt=s(zue);fJo=r(Qbt,"mobilebert"),Qbt.forEach(t),mJo=r(oRe," \u2014 "),sz=n(oRe,"A",{href:!0});var Hbt=s(sz);gJo=r(Hbt,"MobileBertForQuestionAnswering"),Hbt.forEach(t),hJo=r(oRe," (MobileBERT model)"),oRe.forEach(t),pJo=i(X),dv=n(X,"LI",{});var rRe=s(dv);Wue=n(rRe,"STRONG",{});var Ubt=s(Wue);uJo=r(Ubt,"mpnet"),Ubt.forEach(t),_Jo=r(rRe," \u2014 "),lz=n(rRe,"A",{href:!0});var Jbt=s(lz);bJo=r(Jbt,"MPNetForQuestionAnswering"),Jbt.forEach(t),vJo=r(rRe," (MPNet model)"),rRe.forEach(t),FJo=i(X),cv=n(X,"LI",{});var tRe=s(cv);Que=n(tRe,"STRONG",{});var Ybt=s(Que);TJo=r(Ybt,"nystromformer"),Ybt.forEach(t),MJo=r(tRe," \u2014 "),iz=n(tRe,"A",{href:!0});var Kbt=s(iz);EJo=r(Kbt,"NystromformerForQuestionAnswering"),Kbt.forEach(t),CJo=r(tRe," (Nystr\xF6mformer model)"),tRe.forEach(t),wJo=i(X),fv=n(X,"LI",{});var aRe=s(fv);Hue=n(aRe,"STRONG",{});var Zbt=s(Hue);AJo=r(Zbt,"qdqbert"),Zbt.forEach(t),yJo=r(aRe," \u2014 "),dz=n(aRe,"A",{href:!0});var e4t=s(dz);LJo=r(e4t,"QDQBertForQuestionAnswering"),e4t.forEach(t),xJo=r(aRe," (QDQBert model)"),aRe.forEach(t),$Jo=i(X),mv=n(X,"LI",{});var nRe=s(mv);Uue=n(nRe,"STRONG",{});var o4t=s(Uue);kJo=r(o4t,"reformer"),o4t.forEach(t),SJo=r(nRe," \u2014 "),cz=n(nRe,"A",{href:!0});var r4t=s(cz);RJo=r(r4t,"ReformerForQuestionAnswering"),r4t.forEach(t),PJo=r(nRe," (Reformer model)"),nRe.forEach(t),BJo=i(X),gv=n(X,"LI",{});var sRe=s(gv);Jue=n(sRe,"STRONG",{});var t4t=s(Jue);IJo=r(t4t,"rembert"),t4t.forEach(t),NJo=r(sRe," \u2014 "),fz=n(sRe,"A",{href:!0});var a4t=s(fz);qJo=r(a4t,"RemBertForQuestionAnswering"),a4t.forEach(t),jJo=r(sRe," (RemBERT model)"),sRe.forEach(t),DJo=i(X),hv=n(X,"LI",{});var lRe=s(hv);Yue=n(lRe,"STRONG",{});var n4t=s(Yue);GJo=r(n4t,"roberta"),n4t.forEach(t),OJo=r(lRe," \u2014 "),mz=n(lRe,"A",{href:!0});var s4t=s(mz);VJo=r(s4t,"RobertaForQuestionAnswering"),s4t.forEach(t),XJo=r(lRe," (RoBERTa model)"),lRe.forEach(t),zJo=i(X),pv=n(X,"LI",{});var iRe=s(pv);Kue=n(iRe,"STRONG",{});var l4t=s(Kue);WJo=r(l4t,"roformer"),l4t.forEach(t),QJo=r(iRe," \u2014 "),gz=n(iRe,"A",{href:!0});var i4t=s(gz);HJo=r(i4t,"RoFormerForQuestionAnswering"),i4t.forEach(t),UJo=r(iRe," (RoFormer model)"),iRe.forEach(t),JJo=i(X),uv=n(X,"LI",{});var dRe=s(uv);Zue=n(dRe,"STRONG",{});var d4t=s(Zue);YJo=r(d4t,"splinter"),d4t.forEach(t),KJo=r(dRe," \u2014 "),hz=n(dRe,"A",{href:!0});var c4t=s(hz);ZJo=r(c4t,"SplinterForQuestionAnswering"),c4t.forEach(t),eYo=r(dRe," (Splinter model)"),dRe.forEach(t),oYo=i(X),_v=n(X,"LI",{});var cRe=s(_v);e_e=n(cRe,"STRONG",{});var f4t=s(e_e);rYo=r(f4t,"squeezebert"),f4t.forEach(t),tYo=r(cRe," \u2014 "),pz=n(cRe,"A",{href:!0});var m4t=s(pz);aYo=r(m4t,"SqueezeBertForQuestionAnswering"),m4t.forEach(t),nYo=r(cRe," (SqueezeBERT model)"),cRe.forEach(t),sYo=i(X),bv=n(X,"LI",{});var fRe=s(bv);o_e=n(fRe,"STRONG",{});var g4t=s(o_e);lYo=r(g4t,"xlm"),g4t.forEach(t),iYo=r(fRe," \u2014 "),uz=n(fRe,"A",{href:!0});var h4t=s(uz);dYo=r(h4t,"XLMForQuestionAnsweringSimple"),h4t.forEach(t),cYo=r(fRe," (XLM model)"),fRe.forEach(t),fYo=i(X),vv=n(X,"LI",{});var mRe=s(vv);r_e=n(mRe,"STRONG",{});var p4t=s(r_e);mYo=r(p4t,"xlm-roberta"),p4t.forEach(t),gYo=r(mRe," \u2014 "),_z=n(mRe,"A",{href:!0});var u4t=s(_z);hYo=r(u4t,"XLMRobertaForQuestionAnswering"),u4t.forEach(t),pYo=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),uYo=i(X),Fv=n(X,"LI",{});var gRe=s(Fv);t_e=n(gRe,"STRONG",{});var _4t=s(t_e);_Yo=r(_4t,"xlm-roberta-xl"),_4t.forEach(t),bYo=r(gRe," \u2014 "),bz=n(gRe,"A",{href:!0});var b4t=s(bz);vYo=r(b4t,"XLMRobertaXLForQuestionAnswering"),b4t.forEach(t),FYo=r(gRe," (XLM-RoBERTa-XL model)"),gRe.forEach(t),TYo=i(X),Tv=n(X,"LI",{});var hRe=s(Tv);a_e=n(hRe,"STRONG",{});var v4t=s(a_e);MYo=r(v4t,"xlnet"),v4t.forEach(t),EYo=r(hRe," \u2014 "),vz=n(hRe,"A",{href:!0});var F4t=s(vz);CYo=r(F4t,"XLNetForQuestionAnsweringSimple"),F4t.forEach(t),wYo=r(hRe," (XLNet model)"),hRe.forEach(t),AYo=i(X),Mv=n(X,"LI",{});var pRe=s(Mv);n_e=n(pRe,"STRONG",{});var T4t=s(n_e);yYo=r(T4t,"yoso"),T4t.forEach(t),LYo=r(pRe," \u2014 "),Fz=n(pRe,"A",{href:!0});var M4t=s(Fz);xYo=r(M4t,"YosoForQuestionAnswering"),M4t.forEach(t),$Yo=r(pRe," (YOSO model)"),pRe.forEach(t),X.forEach(t),kYo=i(ha),Ev=n(ha,"P",{});var uRe=s(Ev);SYo=r(uRe,"The model is set in evaluation mode by default using "),s_e=n(uRe,"CODE",{});var E4t=s(s_e);RYo=r(E4t,"model.eval()"),E4t.forEach(t),PYo=r(uRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(uRe,"CODE",{});var C4t=s(l_e);BYo=r(C4t,"model.train()"),C4t.forEach(t),uRe.forEach(t),IYo=i(ha),T(Cv.$$.fragment,ha),ha.forEach(t),al.forEach(t),rGe=i(f),cd=n(f,"H2",{class:!0});var iVe=s(cd);wv=n(iVe,"A",{id:!0,class:!0,href:!0});var w4t=s(wv);i_e=n(w4t,"SPAN",{});var A4t=s(i_e);T(PL.$$.fragment,A4t),A4t.forEach(t),w4t.forEach(t),NYo=i(iVe),d_e=n(iVe,"SPAN",{});var y4t=s(d_e);qYo=r(y4t,"AutoModelForTableQuestionAnswering"),y4t.forEach(t),iVe.forEach(t),tGe=i(f),jo=n(f,"DIV",{class:!0});var nl=s(jo);T(BL.$$.fragment,nl),jYo=i(nl),fd=n(nl,"P",{});var ooe=s(fd);DYo=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Tz=n(ooe,"A",{href:!0});var L4t=s(Tz);GYo=r(L4t,"from_pretrained()"),L4t.forEach(t),OYo=r(ooe," class method or the "),Mz=n(ooe,"A",{href:!0});var x4t=s(Mz);VYo=r(x4t,"from_config()"),x4t.forEach(t),XYo=r(ooe,` class
method.`),ooe.forEach(t),zYo=i(nl),IL=n(nl,"P",{});var dVe=s(IL);WYo=r(dVe,"This class cannot be instantiated directly using "),c_e=n(dVe,"CODE",{});var $4t=s(c_e);QYo=r($4t,"__init__()"),$4t.forEach(t),HYo=r(dVe," (throws an error)."),dVe.forEach(t),UYo=i(nl),ut=n(nl,"DIV",{class:!0});var BA=s(ut);T(NL.$$.fragment,BA),JYo=i(BA),f_e=n(BA,"P",{});var k4t=s(f_e);YYo=r(k4t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),k4t.forEach(t),KYo=i(BA),md=n(BA,"P",{});var roe=s(md);ZYo=r(roe,`Note:
Loading a model from its configuration file does `),m_e=n(roe,"STRONG",{});var S4t=s(m_e);eKo=r(S4t,"not"),S4t.forEach(t),oKo=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ez=n(roe,"A",{href:!0});var R4t=s(Ez);rKo=r(R4t,"from_pretrained()"),R4t.forEach(t),tKo=r(roe," to load the model weights."),roe.forEach(t),aKo=i(BA),T(Av.$$.fragment,BA),BA.forEach(t),nKo=i(nl),so=n(nl,"DIV",{class:!0});var pa=s(so);T(qL.$$.fragment,pa),sKo=i(pa),g_e=n(pa,"P",{});var P4t=s(g_e);lKo=r(P4t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),P4t.forEach(t),iKo=i(pa),Va=n(pa,"P",{});var IA=s(Va);dKo=r(IA,"The model class to instantiate is selected based on the "),h_e=n(IA,"CODE",{});var B4t=s(h_e);cKo=r(B4t,"model_type"),B4t.forEach(t),fKo=r(IA,` property of the config object (either
passed as an argument or loaded from `),p_e=n(IA,"CODE",{});var I4t=s(p_e);mKo=r(I4t,"pretrained_model_name_or_path"),I4t.forEach(t),gKo=r(IA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(IA,"CODE",{});var N4t=s(u_e);hKo=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),pKo=r(IA,":"),IA.forEach(t),uKo=i(pa),__e=n(pa,"UL",{});var q4t=s(__e);yv=n(q4t,"LI",{});var _Re=s(yv);b_e=n(_Re,"STRONG",{});var j4t=s(b_e);_Ko=r(j4t,"tapas"),j4t.forEach(t),bKo=r(_Re," \u2014 "),Cz=n(_Re,"A",{href:!0});var D4t=s(Cz);vKo=r(D4t,"TapasForQuestionAnswering"),D4t.forEach(t),FKo=r(_Re," (TAPAS model)"),_Re.forEach(t),q4t.forEach(t),TKo=i(pa),Lv=n(pa,"P",{});var bRe=s(Lv);MKo=r(bRe,"The model is set in evaluation mode by default using "),v_e=n(bRe,"CODE",{});var G4t=s(v_e);EKo=r(G4t,"model.eval()"),G4t.forEach(t),CKo=r(bRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F_e=n(bRe,"CODE",{});var O4t=s(F_e);wKo=r(O4t,"model.train()"),O4t.forEach(t),bRe.forEach(t),AKo=i(pa),T(xv.$$.fragment,pa),pa.forEach(t),nl.forEach(t),aGe=i(f),gd=n(f,"H2",{class:!0});var cVe=s(gd);$v=n(cVe,"A",{id:!0,class:!0,href:!0});var V4t=s($v);T_e=n(V4t,"SPAN",{});var X4t=s(T_e);T(jL.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),yKo=i(cVe),M_e=n(cVe,"SPAN",{});var z4t=s(M_e);LKo=r(z4t,"AutoModelForImageClassification"),z4t.forEach(t),cVe.forEach(t),nGe=i(f),Do=n(f,"DIV",{class:!0});var sl=s(Do);T(DL.$$.fragment,sl),xKo=i(sl),hd=n(sl,"P",{});var toe=s(hd);$Ko=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wz=n(toe,"A",{href:!0});var W4t=s(wz);kKo=r(W4t,"from_pretrained()"),W4t.forEach(t),SKo=r(toe," class method or the "),Az=n(toe,"A",{href:!0});var Q4t=s(Az);RKo=r(Q4t,"from_config()"),Q4t.forEach(t),PKo=r(toe,` class
method.`),toe.forEach(t),BKo=i(sl),GL=n(sl,"P",{});var fVe=s(GL);IKo=r(fVe,"This class cannot be instantiated directly using "),E_e=n(fVe,"CODE",{});var H4t=s(E_e);NKo=r(H4t,"__init__()"),H4t.forEach(t),qKo=r(fVe," (throws an error)."),fVe.forEach(t),jKo=i(sl),_t=n(sl,"DIV",{class:!0});var NA=s(_t);T(OL.$$.fragment,NA),DKo=i(NA),C_e=n(NA,"P",{});var U4t=s(C_e);GKo=r(U4t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),U4t.forEach(t),OKo=i(NA),pd=n(NA,"P",{});var aoe=s(pd);VKo=r(aoe,`Note:
Loading a model from its configuration file does `),w_e=n(aoe,"STRONG",{});var J4t=s(w_e);XKo=r(J4t,"not"),J4t.forEach(t),zKo=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yz=n(aoe,"A",{href:!0});var Y4t=s(yz);WKo=r(Y4t,"from_pretrained()"),Y4t.forEach(t),QKo=r(aoe," to load the model weights."),aoe.forEach(t),HKo=i(NA),T(kv.$$.fragment,NA),NA.forEach(t),UKo=i(sl),lo=n(sl,"DIV",{class:!0});var ua=s(lo);T(VL.$$.fragment,ua),JKo=i(ua),A_e=n(ua,"P",{});var K4t=s(A_e);YKo=r(K4t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),K4t.forEach(t),KKo=i(ua),Xa=n(ua,"P",{});var qA=s(Xa);ZKo=r(qA,"The model class to instantiate is selected based on the "),y_e=n(qA,"CODE",{});var Z4t=s(y_e);eZo=r(Z4t,"model_type"),Z4t.forEach(t),oZo=r(qA,` property of the config object (either
passed as an argument or loaded from `),L_e=n(qA,"CODE",{});var evt=s(L_e);rZo=r(evt,"pretrained_model_name_or_path"),evt.forEach(t),tZo=r(qA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(qA,"CODE",{});var ovt=s(x_e);aZo=r(ovt,"pretrained_model_name_or_path"),ovt.forEach(t),nZo=r(qA,":"),qA.forEach(t),sZo=i(ua),ve=n(ua,"UL",{});var Te=s(ve);Sv=n(Te,"LI",{});var vRe=s(Sv);$_e=n(vRe,"STRONG",{});var rvt=s($_e);lZo=r(rvt,"beit"),rvt.forEach(t),iZo=r(vRe," \u2014 "),Lz=n(vRe,"A",{href:!0});var tvt=s(Lz);dZo=r(tvt,"BeitForImageClassification"),tvt.forEach(t),cZo=r(vRe," (BEiT model)"),vRe.forEach(t),fZo=i(Te),Rv=n(Te,"LI",{});var FRe=s(Rv);k_e=n(FRe,"STRONG",{});var avt=s(k_e);mZo=r(avt,"convnext"),avt.forEach(t),gZo=r(FRe," \u2014 "),xz=n(FRe,"A",{href:!0});var nvt=s(xz);hZo=r(nvt,"ConvNextForImageClassification"),nvt.forEach(t),pZo=r(FRe," (ConvNeXT model)"),FRe.forEach(t),uZo=i(Te),Pv=n(Te,"LI",{});var TRe=s(Pv);S_e=n(TRe,"STRONG",{});var svt=s(S_e);_Zo=r(svt,"cvt"),svt.forEach(t),bZo=r(TRe," \u2014 "),$z=n(TRe,"A",{href:!0});var lvt=s($z);vZo=r(lvt,"CvtForImageClassification"),lvt.forEach(t),FZo=r(TRe," (CvT model)"),TRe.forEach(t),TZo=i(Te),Bv=n(Te,"LI",{});var MRe=s(Bv);R_e=n(MRe,"STRONG",{});var ivt=s(R_e);MZo=r(ivt,"data2vec-vision"),ivt.forEach(t),EZo=r(MRe," \u2014 "),kz=n(MRe,"A",{href:!0});var dvt=s(kz);CZo=r(dvt,"Data2VecVisionForImageClassification"),dvt.forEach(t),wZo=r(MRe," (Data2VecVision model)"),MRe.forEach(t),AZo=i(Te),Gs=n(Te,"LI",{});var Pk=s(Gs);P_e=n(Pk,"STRONG",{});var cvt=s(P_e);yZo=r(cvt,"deit"),cvt.forEach(t),LZo=r(Pk," \u2014 "),Sz=n(Pk,"A",{href:!0});var fvt=s(Sz);xZo=r(fvt,"DeiTForImageClassification"),fvt.forEach(t),$Zo=r(Pk," or "),Rz=n(Pk,"A",{href:!0});var mvt=s(Rz);kZo=r(mvt,"DeiTForImageClassificationWithTeacher"),mvt.forEach(t),SZo=r(Pk," (DeiT model)"),Pk.forEach(t),RZo=i(Te),Iv=n(Te,"LI",{});var ERe=s(Iv);B_e=n(ERe,"STRONG",{});var gvt=s(B_e);PZo=r(gvt,"imagegpt"),gvt.forEach(t),BZo=r(ERe," \u2014 "),Pz=n(ERe,"A",{href:!0});var hvt=s(Pz);IZo=r(hvt,"ImageGPTForImageClassification"),hvt.forEach(t),NZo=r(ERe," (ImageGPT model)"),ERe.forEach(t),qZo=i(Te),Os=n(Te,"LI",{});var Bk=s(Os);I_e=n(Bk,"STRONG",{});var pvt=s(I_e);jZo=r(pvt,"levit"),pvt.forEach(t),DZo=r(Bk," \u2014 "),Bz=n(Bk,"A",{href:!0});var uvt=s(Bz);GZo=r(uvt,"LevitForImageClassification"),uvt.forEach(t),OZo=r(Bk," or "),Iz=n(Bk,"A",{href:!0});var _vt=s(Iz);VZo=r(_vt,"LevitForImageClassificationWithTeacher"),_vt.forEach(t),XZo=r(Bk," (LeViT model)"),Bk.forEach(t),zZo=i(Te),bt=n(Te,"LI",{});var Af=s(bt);N_e=n(Af,"STRONG",{});var bvt=s(N_e);WZo=r(bvt,"perceiver"),bvt.forEach(t),QZo=r(Af," \u2014 "),Nz=n(Af,"A",{href:!0});var vvt=s(Nz);HZo=r(vvt,"PerceiverForImageClassificationLearned"),vvt.forEach(t),UZo=r(Af," or "),qz=n(Af,"A",{href:!0});var Fvt=s(qz);JZo=r(Fvt,"PerceiverForImageClassificationFourier"),Fvt.forEach(t),YZo=r(Af," or "),jz=n(Af,"A",{href:!0});var Tvt=s(jz);KZo=r(Tvt,"PerceiverForImageClassificationConvProcessing"),Tvt.forEach(t),ZZo=r(Af," (Perceiver model)"),Af.forEach(t),eer=i(Te),Nv=n(Te,"LI",{});var CRe=s(Nv);q_e=n(CRe,"STRONG",{});var Mvt=s(q_e);oer=r(Mvt,"poolformer"),Mvt.forEach(t),rer=r(CRe," \u2014 "),Dz=n(CRe,"A",{href:!0});var Evt=s(Dz);ter=r(Evt,"PoolFormerForImageClassification"),Evt.forEach(t),aer=r(CRe," (PoolFormer model)"),CRe.forEach(t),ner=i(Te),qv=n(Te,"LI",{});var wRe=s(qv);j_e=n(wRe,"STRONG",{});var Cvt=s(j_e);ser=r(Cvt,"regnet"),Cvt.forEach(t),ler=r(wRe," \u2014 "),Gz=n(wRe,"A",{href:!0});var wvt=s(Gz);ier=r(wvt,"RegNetForImageClassification"),wvt.forEach(t),der=r(wRe," (RegNet model)"),wRe.forEach(t),cer=i(Te),jv=n(Te,"LI",{});var ARe=s(jv);D_e=n(ARe,"STRONG",{});var Avt=s(D_e);fer=r(Avt,"resnet"),Avt.forEach(t),mer=r(ARe," \u2014 "),Oz=n(ARe,"A",{href:!0});var yvt=s(Oz);ger=r(yvt,"ResNetForImageClassification"),yvt.forEach(t),her=r(ARe," (ResNet model)"),ARe.forEach(t),per=i(Te),Dv=n(Te,"LI",{});var yRe=s(Dv);G_e=n(yRe,"STRONG",{});var Lvt=s(G_e);uer=r(Lvt,"segformer"),Lvt.forEach(t),_er=r(yRe," \u2014 "),Vz=n(yRe,"A",{href:!0});var xvt=s(Vz);ber=r(xvt,"SegformerForImageClassification"),xvt.forEach(t),ver=r(yRe," (SegFormer model)"),yRe.forEach(t),Fer=i(Te),Gv=n(Te,"LI",{});var LRe=s(Gv);O_e=n(LRe,"STRONG",{});var $vt=s(O_e);Ter=r($vt,"swin"),$vt.forEach(t),Mer=r(LRe," \u2014 "),Xz=n(LRe,"A",{href:!0});var kvt=s(Xz);Eer=r(kvt,"SwinForImageClassification"),kvt.forEach(t),Cer=r(LRe," (Swin Transformer model)"),LRe.forEach(t),wer=i(Te),Ov=n(Te,"LI",{});var xRe=s(Ov);V_e=n(xRe,"STRONG",{});var Svt=s(V_e);Aer=r(Svt,"van"),Svt.forEach(t),yer=r(xRe," \u2014 "),zz=n(xRe,"A",{href:!0});var Rvt=s(zz);Ler=r(Rvt,"VanForImageClassification"),Rvt.forEach(t),xer=r(xRe," (VAN model)"),xRe.forEach(t),$er=i(Te),Vv=n(Te,"LI",{});var $Re=s(Vv);X_e=n($Re,"STRONG",{});var Pvt=s(X_e);ker=r(Pvt,"vit"),Pvt.forEach(t),Ser=r($Re," \u2014 "),Wz=n($Re,"A",{href:!0});var Bvt=s(Wz);Rer=r(Bvt,"ViTForImageClassification"),Bvt.forEach(t),Per=r($Re," (ViT model)"),$Re.forEach(t),Te.forEach(t),Ber=i(ua),Xv=n(ua,"P",{});var kRe=s(Xv);Ier=r(kRe,"The model is set in evaluation mode by default using "),z_e=n(kRe,"CODE",{});var Ivt=s(z_e);Ner=r(Ivt,"model.eval()"),Ivt.forEach(t),qer=r(kRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W_e=n(kRe,"CODE",{});var Nvt=s(W_e);jer=r(Nvt,"model.train()"),Nvt.forEach(t),kRe.forEach(t),Der=i(ua),T(zv.$$.fragment,ua),ua.forEach(t),sl.forEach(t),sGe=i(f),ud=n(f,"H2",{class:!0});var mVe=s(ud);Wv=n(mVe,"A",{id:!0,class:!0,href:!0});var qvt=s(Wv);Q_e=n(qvt,"SPAN",{});var jvt=s(Q_e);T(XL.$$.fragment,jvt),jvt.forEach(t),qvt.forEach(t),Ger=i(mVe),H_e=n(mVe,"SPAN",{});var Dvt=s(H_e);Oer=r(Dvt,"AutoModelForVision2Seq"),Dvt.forEach(t),mVe.forEach(t),lGe=i(f),Go=n(f,"DIV",{class:!0});var ll=s(Go);T(zL.$$.fragment,ll),Ver=i(ll),_d=n(ll,"P",{});var noe=s(_d);Xer=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qz=n(noe,"A",{href:!0});var Gvt=s(Qz);zer=r(Gvt,"from_pretrained()"),Gvt.forEach(t),Wer=r(noe," class method or the "),Hz=n(noe,"A",{href:!0});var Ovt=s(Hz);Qer=r(Ovt,"from_config()"),Ovt.forEach(t),Her=r(noe,` class
method.`),noe.forEach(t),Uer=i(ll),WL=n(ll,"P",{});var gVe=s(WL);Jer=r(gVe,"This class cannot be instantiated directly using "),U_e=n(gVe,"CODE",{});var Vvt=s(U_e);Yer=r(Vvt,"__init__()"),Vvt.forEach(t),Ker=r(gVe," (throws an error)."),gVe.forEach(t),Zer=i(ll),vt=n(ll,"DIV",{class:!0});var jA=s(vt);T(QL.$$.fragment,jA),eor=i(jA),J_e=n(jA,"P",{});var Xvt=s(J_e);oor=r(Xvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Xvt.forEach(t),ror=i(jA),bd=n(jA,"P",{});var soe=s(bd);tor=r(soe,`Note:
Loading a model from its configuration file does `),Y_e=n(soe,"STRONG",{});var zvt=s(Y_e);aor=r(zvt,"not"),zvt.forEach(t),nor=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uz=n(soe,"A",{href:!0});var Wvt=s(Uz);sor=r(Wvt,"from_pretrained()"),Wvt.forEach(t),lor=r(soe," to load the model weights."),soe.forEach(t),ior=i(jA),T(Qv.$$.fragment,jA),jA.forEach(t),dor=i(ll),io=n(ll,"DIV",{class:!0});var _a=s(io);T(HL.$$.fragment,_a),cor=i(_a),K_e=n(_a,"P",{});var Qvt=s(K_e);mor=r(Qvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Qvt.forEach(t),gor=i(_a),za=n(_a,"P",{});var DA=s(za);hor=r(DA,"The model class to instantiate is selected based on the "),Z_e=n(DA,"CODE",{});var Hvt=s(Z_e);por=r(Hvt,"model_type"),Hvt.forEach(t),uor=r(DA,` property of the config object (either
passed as an argument or loaded from `),e2e=n(DA,"CODE",{});var Uvt=s(e2e);_or=r(Uvt,"pretrained_model_name_or_path"),Uvt.forEach(t),bor=r(DA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),o2e=n(DA,"CODE",{});var Jvt=s(o2e);vor=r(Jvt,"pretrained_model_name_or_path"),Jvt.forEach(t),For=r(DA,":"),DA.forEach(t),Tor=i(_a),r2e=n(_a,"UL",{});var Yvt=s(r2e);Hv=n(Yvt,"LI",{});var SRe=s(Hv);t2e=n(SRe,"STRONG",{});var Kvt=s(t2e);Mor=r(Kvt,"vision-encoder-decoder"),Kvt.forEach(t),Eor=r(SRe," \u2014 "),Jz=n(SRe,"A",{href:!0});var Zvt=s(Jz);Cor=r(Zvt,"VisionEncoderDecoderModel"),Zvt.forEach(t),wor=r(SRe," (Vision Encoder decoder model)"),SRe.forEach(t),Yvt.forEach(t),Aor=i(_a),Uv=n(_a,"P",{});var RRe=s(Uv);yor=r(RRe,"The model is set in evaluation mode by default using "),a2e=n(RRe,"CODE",{});var eFt=s(a2e);Lor=r(eFt,"model.eval()"),eFt.forEach(t),xor=r(RRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),n2e=n(RRe,"CODE",{});var oFt=s(n2e);$or=r(oFt,"model.train()"),oFt.forEach(t),RRe.forEach(t),kor=i(_a),T(Jv.$$.fragment,_a),_a.forEach(t),ll.forEach(t),iGe=i(f),vd=n(f,"H2",{class:!0});var hVe=s(vd);Yv=n(hVe,"A",{id:!0,class:!0,href:!0});var rFt=s(Yv);s2e=n(rFt,"SPAN",{});var tFt=s(s2e);T(UL.$$.fragment,tFt),tFt.forEach(t),rFt.forEach(t),Sor=i(hVe),l2e=n(hVe,"SPAN",{});var aFt=s(l2e);Ror=r(aFt,"AutoModelForVisualQuestionAnswering"),aFt.forEach(t),hVe.forEach(t),dGe=i(f),Oo=n(f,"DIV",{class:!0});var il=s(Oo);T(JL.$$.fragment,il),Por=i(il),Fd=n(il,"P",{});var loe=s(Fd);Bor=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),Yz=n(loe,"A",{href:!0});var nFt=s(Yz);Ior=r(nFt,"from_pretrained()"),nFt.forEach(t),Nor=r(loe," class method or the "),Kz=n(loe,"A",{href:!0});var sFt=s(Kz);qor=r(sFt,"from_config()"),sFt.forEach(t),jor=r(loe,` class
method.`),loe.forEach(t),Dor=i(il),YL=n(il,"P",{});var pVe=s(YL);Gor=r(pVe,"This class cannot be instantiated directly using "),i2e=n(pVe,"CODE",{});var lFt=s(i2e);Oor=r(lFt,"__init__()"),lFt.forEach(t),Vor=r(pVe," (throws an error)."),pVe.forEach(t),Xor=i(il),Ft=n(il,"DIV",{class:!0});var GA=s(Ft);T(KL.$$.fragment,GA),zor=i(GA),d2e=n(GA,"P",{});var iFt=s(d2e);Wor=r(iFt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),iFt.forEach(t),Qor=i(GA),Td=n(GA,"P",{});var ioe=s(Td);Hor=r(ioe,`Note:
Loading a model from its configuration file does `),c2e=n(ioe,"STRONG",{});var dFt=s(c2e);Uor=r(dFt,"not"),dFt.forEach(t),Jor=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Zz=n(ioe,"A",{href:!0});var cFt=s(Zz);Yor=r(cFt,"from_pretrained()"),cFt.forEach(t),Kor=r(ioe," to load the model weights."),ioe.forEach(t),Zor=i(GA),T(Kv.$$.fragment,GA),GA.forEach(t),err=i(il),co=n(il,"DIV",{class:!0});var ba=s(co);T(ZL.$$.fragment,ba),orr=i(ba),f2e=n(ba,"P",{});var fFt=s(f2e);rrr=r(fFt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),fFt.forEach(t),trr=i(ba),Wa=n(ba,"P",{});var OA=s(Wa);arr=r(OA,"The model class to instantiate is selected based on the "),m2e=n(OA,"CODE",{});var mFt=s(m2e);nrr=r(mFt,"model_type"),mFt.forEach(t),srr=r(OA,` property of the config object (either
passed as an argument or loaded from `),g2e=n(OA,"CODE",{});var gFt=s(g2e);lrr=r(gFt,"pretrained_model_name_or_path"),gFt.forEach(t),irr=r(OA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h2e=n(OA,"CODE",{});var hFt=s(h2e);drr=r(hFt,"pretrained_model_name_or_path"),hFt.forEach(t),crr=r(OA,":"),OA.forEach(t),frr=i(ba),p2e=n(ba,"UL",{});var pFt=s(p2e);Zv=n(pFt,"LI",{});var PRe=s(Zv);u2e=n(PRe,"STRONG",{});var uFt=s(u2e);mrr=r(uFt,"vilt"),uFt.forEach(t),grr=r(PRe," \u2014 "),eW=n(PRe,"A",{href:!0});var _Ft=s(eW);hrr=r(_Ft,"ViltForQuestionAnswering"),_Ft.forEach(t),prr=r(PRe," (ViLT model)"),PRe.forEach(t),pFt.forEach(t),urr=i(ba),eF=n(ba,"P",{});var BRe=s(eF);_rr=r(BRe,"The model is set in evaluation mode by default using "),_2e=n(BRe,"CODE",{});var bFt=s(_2e);brr=r(bFt,"model.eval()"),bFt.forEach(t),vrr=r(BRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),b2e=n(BRe,"CODE",{});var vFt=s(b2e);Frr=r(vFt,"model.train()"),vFt.forEach(t),BRe.forEach(t),Trr=i(ba),T(oF.$$.fragment,ba),ba.forEach(t),il.forEach(t),cGe=i(f),Md=n(f,"H2",{class:!0});var uVe=s(Md);rF=n(uVe,"A",{id:!0,class:!0,href:!0});var FFt=s(rF);v2e=n(FFt,"SPAN",{});var TFt=s(v2e);T(e8.$$.fragment,TFt),TFt.forEach(t),FFt.forEach(t),Mrr=i(uVe),F2e=n(uVe,"SPAN",{});var MFt=s(F2e);Err=r(MFt,"AutoModelForAudioClassification"),MFt.forEach(t),uVe.forEach(t),fGe=i(f),Vo=n(f,"DIV",{class:!0});var dl=s(Vo);T(o8.$$.fragment,dl),Crr=i(dl),Ed=n(dl,"P",{});var doe=s(Ed);wrr=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),oW=n(doe,"A",{href:!0});var EFt=s(oW);Arr=r(EFt,"from_pretrained()"),EFt.forEach(t),yrr=r(doe," class method or the "),rW=n(doe,"A",{href:!0});var CFt=s(rW);Lrr=r(CFt,"from_config()"),CFt.forEach(t),xrr=r(doe,` class
method.`),doe.forEach(t),$rr=i(dl),r8=n(dl,"P",{});var _Ve=s(r8);krr=r(_Ve,"This class cannot be instantiated directly using "),T2e=n(_Ve,"CODE",{});var wFt=s(T2e);Srr=r(wFt,"__init__()"),wFt.forEach(t),Rrr=r(_Ve," (throws an error)."),_Ve.forEach(t),Prr=i(dl),Tt=n(dl,"DIV",{class:!0});var VA=s(Tt);T(t8.$$.fragment,VA),Brr=i(VA),M2e=n(VA,"P",{});var AFt=s(M2e);Irr=r(AFt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),AFt.forEach(t),Nrr=i(VA),Cd=n(VA,"P",{});var coe=s(Cd);qrr=r(coe,`Note:
Loading a model from its configuration file does `),E2e=n(coe,"STRONG",{});var yFt=s(E2e);jrr=r(yFt,"not"),yFt.forEach(t),Drr=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),tW=n(coe,"A",{href:!0});var LFt=s(tW);Grr=r(LFt,"from_pretrained()"),LFt.forEach(t),Orr=r(coe," to load the model weights."),coe.forEach(t),Vrr=i(VA),T(tF.$$.fragment,VA),VA.forEach(t),Xrr=i(dl),fo=n(dl,"DIV",{class:!0});var va=s(fo);T(a8.$$.fragment,va),zrr=i(va),C2e=n(va,"P",{});var xFt=s(C2e);Wrr=r(xFt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xFt.forEach(t),Qrr=i(va),Qa=n(va,"P",{});var XA=s(Qa);Hrr=r(XA,"The model class to instantiate is selected based on the "),w2e=n(XA,"CODE",{});var $Ft=s(w2e);Urr=r($Ft,"model_type"),$Ft.forEach(t),Jrr=r(XA,` property of the config object (either
passed as an argument or loaded from `),A2e=n(XA,"CODE",{});var kFt=s(A2e);Yrr=r(kFt,"pretrained_model_name_or_path"),kFt.forEach(t),Krr=r(XA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),y2e=n(XA,"CODE",{});var SFt=s(y2e);Zrr=r(SFt,"pretrained_model_name_or_path"),SFt.forEach(t),etr=r(XA,":"),XA.forEach(t),otr=i(va),Re=n(va,"UL",{});var Xe=s(Re);aF=n(Xe,"LI",{});var IRe=s(aF);L2e=n(IRe,"STRONG",{});var RFt=s(L2e);rtr=r(RFt,"data2vec-audio"),RFt.forEach(t),ttr=r(IRe," \u2014 "),aW=n(IRe,"A",{href:!0});var PFt=s(aW);atr=r(PFt,"Data2VecAudioForSequenceClassification"),PFt.forEach(t),ntr=r(IRe," (Data2VecAudio model)"),IRe.forEach(t),str=i(Xe),nF=n(Xe,"LI",{});var NRe=s(nF);x2e=n(NRe,"STRONG",{});var BFt=s(x2e);ltr=r(BFt,"hubert"),BFt.forEach(t),itr=r(NRe," \u2014 "),nW=n(NRe,"A",{href:!0});var IFt=s(nW);dtr=r(IFt,"HubertForSequenceClassification"),IFt.forEach(t),ctr=r(NRe," (Hubert model)"),NRe.forEach(t),ftr=i(Xe),sF=n(Xe,"LI",{});var qRe=s(sF);$2e=n(qRe,"STRONG",{});var NFt=s($2e);mtr=r(NFt,"sew"),NFt.forEach(t),gtr=r(qRe," \u2014 "),sW=n(qRe,"A",{href:!0});var qFt=s(sW);htr=r(qFt,"SEWForSequenceClassification"),qFt.forEach(t),ptr=r(qRe," (SEW model)"),qRe.forEach(t),utr=i(Xe),lF=n(Xe,"LI",{});var jRe=s(lF);k2e=n(jRe,"STRONG",{});var jFt=s(k2e);_tr=r(jFt,"sew-d"),jFt.forEach(t),btr=r(jRe," \u2014 "),lW=n(jRe,"A",{href:!0});var DFt=s(lW);vtr=r(DFt,"SEWDForSequenceClassification"),DFt.forEach(t),Ftr=r(jRe," (SEW-D model)"),jRe.forEach(t),Ttr=i(Xe),iF=n(Xe,"LI",{});var DRe=s(iF);S2e=n(DRe,"STRONG",{});var GFt=s(S2e);Mtr=r(GFt,"unispeech"),GFt.forEach(t),Etr=r(DRe," \u2014 "),iW=n(DRe,"A",{href:!0});var OFt=s(iW);Ctr=r(OFt,"UniSpeechForSequenceClassification"),OFt.forEach(t),wtr=r(DRe," (UniSpeech model)"),DRe.forEach(t),Atr=i(Xe),dF=n(Xe,"LI",{});var GRe=s(dF);R2e=n(GRe,"STRONG",{});var VFt=s(R2e);ytr=r(VFt,"unispeech-sat"),VFt.forEach(t),Ltr=r(GRe," \u2014 "),dW=n(GRe,"A",{href:!0});var XFt=s(dW);xtr=r(XFt,"UniSpeechSatForSequenceClassification"),XFt.forEach(t),$tr=r(GRe," (UniSpeechSat model)"),GRe.forEach(t),ktr=i(Xe),cF=n(Xe,"LI",{});var ORe=s(cF);P2e=n(ORe,"STRONG",{});var zFt=s(P2e);Str=r(zFt,"wav2vec2"),zFt.forEach(t),Rtr=r(ORe," \u2014 "),cW=n(ORe,"A",{href:!0});var WFt=s(cW);Ptr=r(WFt,"Wav2Vec2ForSequenceClassification"),WFt.forEach(t),Btr=r(ORe," (Wav2Vec2 model)"),ORe.forEach(t),Itr=i(Xe),fF=n(Xe,"LI",{});var VRe=s(fF);B2e=n(VRe,"STRONG",{});var QFt=s(B2e);Ntr=r(QFt,"wav2vec2-conformer"),QFt.forEach(t),qtr=r(VRe," \u2014 "),fW=n(VRe,"A",{href:!0});var HFt=s(fW);jtr=r(HFt,"Wav2Vec2ConformerForSequenceClassification"),HFt.forEach(t),Dtr=r(VRe," (Wav2Vec2-Conformer model)"),VRe.forEach(t),Gtr=i(Xe),mF=n(Xe,"LI",{});var XRe=s(mF);I2e=n(XRe,"STRONG",{});var UFt=s(I2e);Otr=r(UFt,"wavlm"),UFt.forEach(t),Vtr=r(XRe," \u2014 "),mW=n(XRe,"A",{href:!0});var JFt=s(mW);Xtr=r(JFt,"WavLMForSequenceClassification"),JFt.forEach(t),ztr=r(XRe," (WavLM model)"),XRe.forEach(t),Xe.forEach(t),Wtr=i(va),gF=n(va,"P",{});var zRe=s(gF);Qtr=r(zRe,"The model is set in evaluation mode by default using "),N2e=n(zRe,"CODE",{});var YFt=s(N2e);Htr=r(YFt,"model.eval()"),YFt.forEach(t),Utr=r(zRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(zRe,"CODE",{});var KFt=s(q2e);Jtr=r(KFt,"model.train()"),KFt.forEach(t),zRe.forEach(t),Ytr=i(va),T(hF.$$.fragment,va),va.forEach(t),dl.forEach(t),mGe=i(f),wd=n(f,"H2",{class:!0});var bVe=s(wd);pF=n(bVe,"A",{id:!0,class:!0,href:!0});var ZFt=s(pF);j2e=n(ZFt,"SPAN",{});var eTt=s(j2e);T(n8.$$.fragment,eTt),eTt.forEach(t),ZFt.forEach(t),Ktr=i(bVe),D2e=n(bVe,"SPAN",{});var oTt=s(D2e);Ztr=r(oTt,"AutoModelForAudioFrameClassification"),oTt.forEach(t),bVe.forEach(t),gGe=i(f),Xo=n(f,"DIV",{class:!0});var cl=s(Xo);T(s8.$$.fragment,cl),ear=i(cl),Ad=n(cl,"P",{});var foe=s(Ad);oar=r(foe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),gW=n(foe,"A",{href:!0});var rTt=s(gW);rar=r(rTt,"from_pretrained()"),rTt.forEach(t),tar=r(foe," class method or the "),hW=n(foe,"A",{href:!0});var tTt=s(hW);aar=r(tTt,"from_config()"),tTt.forEach(t),nar=r(foe,` class
method.`),foe.forEach(t),sar=i(cl),l8=n(cl,"P",{});var vVe=s(l8);lar=r(vVe,"This class cannot be instantiated directly using "),G2e=n(vVe,"CODE",{});var aTt=s(G2e);iar=r(aTt,"__init__()"),aTt.forEach(t),dar=r(vVe," (throws an error)."),vVe.forEach(t),car=i(cl),Mt=n(cl,"DIV",{class:!0});var zA=s(Mt);T(i8.$$.fragment,zA),far=i(zA),O2e=n(zA,"P",{});var nTt=s(O2e);mar=r(nTt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nTt.forEach(t),gar=i(zA),yd=n(zA,"P",{});var moe=s(yd);har=r(moe,`Note:
Loading a model from its configuration file does `),V2e=n(moe,"STRONG",{});var sTt=s(V2e);par=r(sTt,"not"),sTt.forEach(t),uar=r(moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(moe,"A",{href:!0});var lTt=s(pW);_ar=r(lTt,"from_pretrained()"),lTt.forEach(t),bar=r(moe," to load the model weights."),moe.forEach(t),Far=i(zA),T(uF.$$.fragment,zA),zA.forEach(t),Tar=i(cl),mo=n(cl,"DIV",{class:!0});var Fa=s(mo);T(d8.$$.fragment,Fa),Mar=i(Fa),X2e=n(Fa,"P",{});var iTt=s(X2e);Ear=r(iTt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),iTt.forEach(t),Car=i(Fa),Ha=n(Fa,"P",{});var WA=s(Ha);war=r(WA,"The model class to instantiate is selected based on the "),z2e=n(WA,"CODE",{});var dTt=s(z2e);Aar=r(dTt,"model_type"),dTt.forEach(t),yar=r(WA,` property of the config object (either
passed as an argument or loaded from `),W2e=n(WA,"CODE",{});var cTt=s(W2e);Lar=r(cTt,"pretrained_model_name_or_path"),cTt.forEach(t),xar=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Q2e=n(WA,"CODE",{});var fTt=s(Q2e);$ar=r(fTt,"pretrained_model_name_or_path"),fTt.forEach(t),kar=r(WA,":"),WA.forEach(t),Sar=i(Fa),et=n(Fa,"UL",{});var fl=s(et);_F=n(fl,"LI",{});var WRe=s(_F);H2e=n(WRe,"STRONG",{});var mTt=s(H2e);Rar=r(mTt,"data2vec-audio"),mTt.forEach(t),Par=r(WRe," \u2014 "),uW=n(WRe,"A",{href:!0});var gTt=s(uW);Bar=r(gTt,"Data2VecAudioForAudioFrameClassification"),gTt.forEach(t),Iar=r(WRe," (Data2VecAudio model)"),WRe.forEach(t),Nar=i(fl),bF=n(fl,"LI",{});var QRe=s(bF);U2e=n(QRe,"STRONG",{});var hTt=s(U2e);qar=r(hTt,"unispeech-sat"),hTt.forEach(t),jar=r(QRe," \u2014 "),_W=n(QRe,"A",{href:!0});var pTt=s(_W);Dar=r(pTt,"UniSpeechSatForAudioFrameClassification"),pTt.forEach(t),Gar=r(QRe," (UniSpeechSat model)"),QRe.forEach(t),Oar=i(fl),vF=n(fl,"LI",{});var HRe=s(vF);J2e=n(HRe,"STRONG",{});var uTt=s(J2e);Var=r(uTt,"wav2vec2"),uTt.forEach(t),Xar=r(HRe," \u2014 "),bW=n(HRe,"A",{href:!0});var _Tt=s(bW);zar=r(_Tt,"Wav2Vec2ForAudioFrameClassification"),_Tt.forEach(t),War=r(HRe," (Wav2Vec2 model)"),HRe.forEach(t),Qar=i(fl),FF=n(fl,"LI",{});var URe=s(FF);Y2e=n(URe,"STRONG",{});var bTt=s(Y2e);Har=r(bTt,"wav2vec2-conformer"),bTt.forEach(t),Uar=r(URe," \u2014 "),vW=n(URe,"A",{href:!0});var vTt=s(vW);Jar=r(vTt,"Wav2Vec2ConformerForAudioFrameClassification"),vTt.forEach(t),Yar=r(URe," (Wav2Vec2-Conformer model)"),URe.forEach(t),Kar=i(fl),TF=n(fl,"LI",{});var JRe=s(TF);K2e=n(JRe,"STRONG",{});var FTt=s(K2e);Zar=r(FTt,"wavlm"),FTt.forEach(t),enr=r(JRe," \u2014 "),FW=n(JRe,"A",{href:!0});var TTt=s(FW);onr=r(TTt,"WavLMForAudioFrameClassification"),TTt.forEach(t),rnr=r(JRe," (WavLM model)"),JRe.forEach(t),fl.forEach(t),tnr=i(Fa),MF=n(Fa,"P",{});var YRe=s(MF);anr=r(YRe,"The model is set in evaluation mode by default using "),Z2e=n(YRe,"CODE",{});var MTt=s(Z2e);nnr=r(MTt,"model.eval()"),MTt.forEach(t),snr=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e1e=n(YRe,"CODE",{});var ETt=s(e1e);lnr=r(ETt,"model.train()"),ETt.forEach(t),YRe.forEach(t),inr=i(Fa),T(EF.$$.fragment,Fa),Fa.forEach(t),cl.forEach(t),hGe=i(f),Ld=n(f,"H2",{class:!0});var FVe=s(Ld);CF=n(FVe,"A",{id:!0,class:!0,href:!0});var CTt=s(CF);o1e=n(CTt,"SPAN",{});var wTt=s(o1e);T(c8.$$.fragment,wTt),wTt.forEach(t),CTt.forEach(t),dnr=i(FVe),r1e=n(FVe,"SPAN",{});var ATt=s(r1e);cnr=r(ATt,"AutoModelForCTC"),ATt.forEach(t),FVe.forEach(t),pGe=i(f),zo=n(f,"DIV",{class:!0});var ml=s(zo);T(f8.$$.fragment,ml),fnr=i(ml),xd=n(ml,"P",{});var goe=s(xd);mnr=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),TW=n(goe,"A",{href:!0});var yTt=s(TW);gnr=r(yTt,"from_pretrained()"),yTt.forEach(t),hnr=r(goe," class method or the "),MW=n(goe,"A",{href:!0});var LTt=s(MW);pnr=r(LTt,"from_config()"),LTt.forEach(t),unr=r(goe,` class
method.`),goe.forEach(t),_nr=i(ml),m8=n(ml,"P",{});var TVe=s(m8);bnr=r(TVe,"This class cannot be instantiated directly using "),t1e=n(TVe,"CODE",{});var xTt=s(t1e);vnr=r(xTt,"__init__()"),xTt.forEach(t),Fnr=r(TVe," (throws an error)."),TVe.forEach(t),Tnr=i(ml),Et=n(ml,"DIV",{class:!0});var QA=s(Et);T(g8.$$.fragment,QA),Mnr=i(QA),a1e=n(QA,"P",{});var $Tt=s(a1e);Enr=r($Tt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),$Tt.forEach(t),Cnr=i(QA),$d=n(QA,"P",{});var hoe=s($d);wnr=r(hoe,`Note:
Loading a model from its configuration file does `),n1e=n(hoe,"STRONG",{});var kTt=s(n1e);Anr=r(kTt,"not"),kTt.forEach(t),ynr=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),EW=n(hoe,"A",{href:!0});var STt=s(EW);Lnr=r(STt,"from_pretrained()"),STt.forEach(t),xnr=r(hoe," to load the model weights."),hoe.forEach(t),$nr=i(QA),T(wF.$$.fragment,QA),QA.forEach(t),knr=i(ml),go=n(ml,"DIV",{class:!0});var Ta=s(go);T(h8.$$.fragment,Ta),Snr=i(Ta),s1e=n(Ta,"P",{});var RTt=s(s1e);Rnr=r(RTt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),RTt.forEach(t),Pnr=i(Ta),Ua=n(Ta,"P",{});var HA=s(Ua);Bnr=r(HA,"The model class to instantiate is selected based on the "),l1e=n(HA,"CODE",{});var PTt=s(l1e);Inr=r(PTt,"model_type"),PTt.forEach(t),Nnr=r(HA,` property of the config object (either
passed as an argument or loaded from `),i1e=n(HA,"CODE",{});var BTt=s(i1e);qnr=r(BTt,"pretrained_model_name_or_path"),BTt.forEach(t),jnr=r(HA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d1e=n(HA,"CODE",{});var ITt=s(d1e);Dnr=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),Gnr=r(HA,":"),HA.forEach(t),Onr=i(Ta),ye=n(Ta,"UL",{});var Be=s(ye);AF=n(Be,"LI",{});var KRe=s(AF);c1e=n(KRe,"STRONG",{});var NTt=s(c1e);Vnr=r(NTt,"data2vec-audio"),NTt.forEach(t),Xnr=r(KRe," \u2014 "),CW=n(KRe,"A",{href:!0});var qTt=s(CW);znr=r(qTt,"Data2VecAudioForCTC"),qTt.forEach(t),Wnr=r(KRe," (Data2VecAudio model)"),KRe.forEach(t),Qnr=i(Be),yF=n(Be,"LI",{});var ZRe=s(yF);f1e=n(ZRe,"STRONG",{});var jTt=s(f1e);Hnr=r(jTt,"hubert"),jTt.forEach(t),Unr=r(ZRe," \u2014 "),wW=n(ZRe,"A",{href:!0});var DTt=s(wW);Jnr=r(DTt,"HubertForCTC"),DTt.forEach(t),Ynr=r(ZRe," (Hubert model)"),ZRe.forEach(t),Knr=i(Be),LF=n(Be,"LI",{});var ePe=s(LF);m1e=n(ePe,"STRONG",{});var GTt=s(m1e);Znr=r(GTt,"mctct"),GTt.forEach(t),esr=r(ePe," \u2014 "),AW=n(ePe,"A",{href:!0});var OTt=s(AW);osr=r(OTt,"MCTCTForCTC"),OTt.forEach(t),rsr=r(ePe," (M-CTC-T model)"),ePe.forEach(t),tsr=i(Be),xF=n(Be,"LI",{});var oPe=s(xF);g1e=n(oPe,"STRONG",{});var VTt=s(g1e);asr=r(VTt,"sew"),VTt.forEach(t),nsr=r(oPe," \u2014 "),yW=n(oPe,"A",{href:!0});var XTt=s(yW);ssr=r(XTt,"SEWForCTC"),XTt.forEach(t),lsr=r(oPe," (SEW model)"),oPe.forEach(t),isr=i(Be),$F=n(Be,"LI",{});var rPe=s($F);h1e=n(rPe,"STRONG",{});var zTt=s(h1e);dsr=r(zTt,"sew-d"),zTt.forEach(t),csr=r(rPe," \u2014 "),LW=n(rPe,"A",{href:!0});var WTt=s(LW);fsr=r(WTt,"SEWDForCTC"),WTt.forEach(t),msr=r(rPe," (SEW-D model)"),rPe.forEach(t),gsr=i(Be),kF=n(Be,"LI",{});var tPe=s(kF);p1e=n(tPe,"STRONG",{});var QTt=s(p1e);hsr=r(QTt,"unispeech"),QTt.forEach(t),psr=r(tPe," \u2014 "),xW=n(tPe,"A",{href:!0});var HTt=s(xW);usr=r(HTt,"UniSpeechForCTC"),HTt.forEach(t),_sr=r(tPe," (UniSpeech model)"),tPe.forEach(t),bsr=i(Be),SF=n(Be,"LI",{});var aPe=s(SF);u1e=n(aPe,"STRONG",{});var UTt=s(u1e);vsr=r(UTt,"unispeech-sat"),UTt.forEach(t),Fsr=r(aPe," \u2014 "),$W=n(aPe,"A",{href:!0});var JTt=s($W);Tsr=r(JTt,"UniSpeechSatForCTC"),JTt.forEach(t),Msr=r(aPe," (UniSpeechSat model)"),aPe.forEach(t),Esr=i(Be),RF=n(Be,"LI",{});var nPe=s(RF);_1e=n(nPe,"STRONG",{});var YTt=s(_1e);Csr=r(YTt,"wav2vec2"),YTt.forEach(t),wsr=r(nPe," \u2014 "),kW=n(nPe,"A",{href:!0});var KTt=s(kW);Asr=r(KTt,"Wav2Vec2ForCTC"),KTt.forEach(t),ysr=r(nPe," (Wav2Vec2 model)"),nPe.forEach(t),Lsr=i(Be),PF=n(Be,"LI",{});var sPe=s(PF);b1e=n(sPe,"STRONG",{});var ZTt=s(b1e);xsr=r(ZTt,"wav2vec2-conformer"),ZTt.forEach(t),$sr=r(sPe," \u2014 "),SW=n(sPe,"A",{href:!0});var eMt=s(SW);ksr=r(eMt,"Wav2Vec2ConformerForCTC"),eMt.forEach(t),Ssr=r(sPe," (Wav2Vec2-Conformer model)"),sPe.forEach(t),Rsr=i(Be),BF=n(Be,"LI",{});var lPe=s(BF);v1e=n(lPe,"STRONG",{});var oMt=s(v1e);Psr=r(oMt,"wavlm"),oMt.forEach(t),Bsr=r(lPe," \u2014 "),RW=n(lPe,"A",{href:!0});var rMt=s(RW);Isr=r(rMt,"WavLMForCTC"),rMt.forEach(t),Nsr=r(lPe," (WavLM model)"),lPe.forEach(t),Be.forEach(t),qsr=i(Ta),IF=n(Ta,"P",{});var iPe=s(IF);jsr=r(iPe,"The model is set in evaluation mode by default using "),F1e=n(iPe,"CODE",{});var tMt=s(F1e);Dsr=r(tMt,"model.eval()"),tMt.forEach(t),Gsr=r(iPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T1e=n(iPe,"CODE",{});var aMt=s(T1e);Osr=r(aMt,"model.train()"),aMt.forEach(t),iPe.forEach(t),Vsr=i(Ta),T(NF.$$.fragment,Ta),Ta.forEach(t),ml.forEach(t),uGe=i(f),kd=n(f,"H2",{class:!0});var MVe=s(kd);qF=n(MVe,"A",{id:!0,class:!0,href:!0});var nMt=s(qF);M1e=n(nMt,"SPAN",{});var sMt=s(M1e);T(p8.$$.fragment,sMt),sMt.forEach(t),nMt.forEach(t),Xsr=i(MVe),E1e=n(MVe,"SPAN",{});var lMt=s(E1e);zsr=r(lMt,"AutoModelForSpeechSeq2Seq"),lMt.forEach(t),MVe.forEach(t),_Ge=i(f),Wo=n(f,"DIV",{class:!0});var gl=s(Wo);T(u8.$$.fragment,gl),Wsr=i(gl),Sd=n(gl,"P",{});var poe=s(Sd);Qsr=r(poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PW=n(poe,"A",{href:!0});var iMt=s(PW);Hsr=r(iMt,"from_pretrained()"),iMt.forEach(t),Usr=r(poe," class method or the "),BW=n(poe,"A",{href:!0});var dMt=s(BW);Jsr=r(dMt,"from_config()"),dMt.forEach(t),Ysr=r(poe,` class
method.`),poe.forEach(t),Ksr=i(gl),_8=n(gl,"P",{});var EVe=s(_8);Zsr=r(EVe,"This class cannot be instantiated directly using "),C1e=n(EVe,"CODE",{});var cMt=s(C1e);elr=r(cMt,"__init__()"),cMt.forEach(t),olr=r(EVe," (throws an error)."),EVe.forEach(t),rlr=i(gl),Ct=n(gl,"DIV",{class:!0});var UA=s(Ct);T(b8.$$.fragment,UA),tlr=i(UA),w1e=n(UA,"P",{});var fMt=s(w1e);alr=r(fMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),fMt.forEach(t),nlr=i(UA),Rd=n(UA,"P",{});var uoe=s(Rd);slr=r(uoe,`Note:
Loading a model from its configuration file does `),A1e=n(uoe,"STRONG",{});var mMt=s(A1e);llr=r(mMt,"not"),mMt.forEach(t),ilr=r(uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),IW=n(uoe,"A",{href:!0});var gMt=s(IW);dlr=r(gMt,"from_pretrained()"),gMt.forEach(t),clr=r(uoe," to load the model weights."),uoe.forEach(t),flr=i(UA),T(jF.$$.fragment,UA),UA.forEach(t),mlr=i(gl),ho=n(gl,"DIV",{class:!0});var Ma=s(ho);T(v8.$$.fragment,Ma),glr=i(Ma),y1e=n(Ma,"P",{});var hMt=s(y1e);hlr=r(hMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),hMt.forEach(t),plr=i(Ma),Ja=n(Ma,"P",{});var JA=s(Ja);ulr=r(JA,"The model class to instantiate is selected based on the "),L1e=n(JA,"CODE",{});var pMt=s(L1e);_lr=r(pMt,"model_type"),pMt.forEach(t),blr=r(JA,` property of the config object (either
passed as an argument or loaded from `),x1e=n(JA,"CODE",{});var uMt=s(x1e);vlr=r(uMt,"pretrained_model_name_or_path"),uMt.forEach(t),Flr=r(JA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$1e=n(JA,"CODE",{});var _Mt=s($1e);Tlr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),Mlr=r(JA,":"),JA.forEach(t),Elr=i(Ma),F8=n(Ma,"UL",{});var CVe=s(F8);DF=n(CVe,"LI",{});var dPe=s(DF);k1e=n(dPe,"STRONG",{});var bMt=s(k1e);Clr=r(bMt,"speech-encoder-decoder"),bMt.forEach(t),wlr=r(dPe," \u2014 "),NW=n(dPe,"A",{href:!0});var vMt=s(NW);Alr=r(vMt,"SpeechEncoderDecoderModel"),vMt.forEach(t),ylr=r(dPe," (Speech Encoder decoder model)"),dPe.forEach(t),Llr=i(CVe),GF=n(CVe,"LI",{});var cPe=s(GF);S1e=n(cPe,"STRONG",{});var FMt=s(S1e);xlr=r(FMt,"speech_to_text"),FMt.forEach(t),$lr=r(cPe," \u2014 "),qW=n(cPe,"A",{href:!0});var TMt=s(qW);klr=r(TMt,"Speech2TextForConditionalGeneration"),TMt.forEach(t),Slr=r(cPe," (Speech2Text model)"),cPe.forEach(t),CVe.forEach(t),Rlr=i(Ma),OF=n(Ma,"P",{});var fPe=s(OF);Plr=r(fPe,"The model is set in evaluation mode by default using "),R1e=n(fPe,"CODE",{});var MMt=s(R1e);Blr=r(MMt,"model.eval()"),MMt.forEach(t),Ilr=r(fPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(fPe,"CODE",{});var EMt=s(P1e);Nlr=r(EMt,"model.train()"),EMt.forEach(t),fPe.forEach(t),qlr=i(Ma),T(VF.$$.fragment,Ma),Ma.forEach(t),gl.forEach(t),bGe=i(f),Pd=n(f,"H2",{class:!0});var wVe=s(Pd);XF=n(wVe,"A",{id:!0,class:!0,href:!0});var CMt=s(XF);B1e=n(CMt,"SPAN",{});var wMt=s(B1e);T(T8.$$.fragment,wMt),wMt.forEach(t),CMt.forEach(t),jlr=i(wVe),I1e=n(wVe,"SPAN",{});var AMt=s(I1e);Dlr=r(AMt,"AutoModelForAudioXVector"),AMt.forEach(t),wVe.forEach(t),vGe=i(f),Qo=n(f,"DIV",{class:!0});var hl=s(Qo);T(M8.$$.fragment,hl),Glr=i(hl),Bd=n(hl,"P",{});var _oe=s(Bd);Olr=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jW=n(_oe,"A",{href:!0});var yMt=s(jW);Vlr=r(yMt,"from_pretrained()"),yMt.forEach(t),Xlr=r(_oe," class method or the "),DW=n(_oe,"A",{href:!0});var LMt=s(DW);zlr=r(LMt,"from_config()"),LMt.forEach(t),Wlr=r(_oe,` class
method.`),_oe.forEach(t),Qlr=i(hl),E8=n(hl,"P",{});var AVe=s(E8);Hlr=r(AVe,"This class cannot be instantiated directly using "),N1e=n(AVe,"CODE",{});var xMt=s(N1e);Ulr=r(xMt,"__init__()"),xMt.forEach(t),Jlr=r(AVe," (throws an error)."),AVe.forEach(t),Ylr=i(hl),wt=n(hl,"DIV",{class:!0});var YA=s(wt);T(C8.$$.fragment,YA),Klr=i(YA),q1e=n(YA,"P",{});var $Mt=s(q1e);Zlr=r($Mt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),$Mt.forEach(t),eir=i(YA),Id=n(YA,"P",{});var boe=s(Id);oir=r(boe,`Note:
Loading a model from its configuration file does `),j1e=n(boe,"STRONG",{});var kMt=s(j1e);rir=r(kMt,"not"),kMt.forEach(t),tir=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(boe,"A",{href:!0});var SMt=s(GW);air=r(SMt,"from_pretrained()"),SMt.forEach(t),nir=r(boe," to load the model weights."),boe.forEach(t),sir=i(YA),T(zF.$$.fragment,YA),YA.forEach(t),lir=i(hl),po=n(hl,"DIV",{class:!0});var Ea=s(po);T(w8.$$.fragment,Ea),iir=i(Ea),D1e=n(Ea,"P",{});var RMt=s(D1e);dir=r(RMt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),RMt.forEach(t),cir=i(Ea),Ya=n(Ea,"P",{});var KA=s(Ya);fir=r(KA,"The model class to instantiate is selected based on the "),G1e=n(KA,"CODE",{});var PMt=s(G1e);mir=r(PMt,"model_type"),PMt.forEach(t),gir=r(KA,` property of the config object (either
passed as an argument or loaded from `),O1e=n(KA,"CODE",{});var BMt=s(O1e);hir=r(BMt,"pretrained_model_name_or_path"),BMt.forEach(t),pir=r(KA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(KA,"CODE",{});var IMt=s(V1e);uir=r(IMt,"pretrained_model_name_or_path"),IMt.forEach(t),_ir=r(KA,":"),KA.forEach(t),bir=i(Ea),ot=n(Ea,"UL",{});var pl=s(ot);WF=n(pl,"LI",{});var mPe=s(WF);X1e=n(mPe,"STRONG",{});var NMt=s(X1e);vir=r(NMt,"data2vec-audio"),NMt.forEach(t),Fir=r(mPe," \u2014 "),OW=n(mPe,"A",{href:!0});var qMt=s(OW);Tir=r(qMt,"Data2VecAudioForXVector"),qMt.forEach(t),Mir=r(mPe," (Data2VecAudio model)"),mPe.forEach(t),Eir=i(pl),QF=n(pl,"LI",{});var gPe=s(QF);z1e=n(gPe,"STRONG",{});var jMt=s(z1e);Cir=r(jMt,"unispeech-sat"),jMt.forEach(t),wir=r(gPe," \u2014 "),VW=n(gPe,"A",{href:!0});var DMt=s(VW);Air=r(DMt,"UniSpeechSatForXVector"),DMt.forEach(t),yir=r(gPe," (UniSpeechSat model)"),gPe.forEach(t),Lir=i(pl),HF=n(pl,"LI",{});var hPe=s(HF);W1e=n(hPe,"STRONG",{});var GMt=s(W1e);xir=r(GMt,"wav2vec2"),GMt.forEach(t),$ir=r(hPe," \u2014 "),XW=n(hPe,"A",{href:!0});var OMt=s(XW);kir=r(OMt,"Wav2Vec2ForXVector"),OMt.forEach(t),Sir=r(hPe," (Wav2Vec2 model)"),hPe.forEach(t),Rir=i(pl),UF=n(pl,"LI",{});var pPe=s(UF);Q1e=n(pPe,"STRONG",{});var VMt=s(Q1e);Pir=r(VMt,"wav2vec2-conformer"),VMt.forEach(t),Bir=r(pPe," \u2014 "),zW=n(pPe,"A",{href:!0});var XMt=s(zW);Iir=r(XMt,"Wav2Vec2ConformerForXVector"),XMt.forEach(t),Nir=r(pPe," (Wav2Vec2-Conformer model)"),pPe.forEach(t),qir=i(pl),JF=n(pl,"LI",{});var uPe=s(JF);H1e=n(uPe,"STRONG",{});var zMt=s(H1e);jir=r(zMt,"wavlm"),zMt.forEach(t),Dir=r(uPe," \u2014 "),WW=n(uPe,"A",{href:!0});var WMt=s(WW);Gir=r(WMt,"WavLMForXVector"),WMt.forEach(t),Oir=r(uPe," (WavLM model)"),uPe.forEach(t),pl.forEach(t),Vir=i(Ea),YF=n(Ea,"P",{});var _Pe=s(YF);Xir=r(_Pe,"The model is set in evaluation mode by default using "),U1e=n(_Pe,"CODE",{});var QMt=s(U1e);zir=r(QMt,"model.eval()"),QMt.forEach(t),Wir=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J1e=n(_Pe,"CODE",{});var HMt=s(J1e);Qir=r(HMt,"model.train()"),HMt.forEach(t),_Pe.forEach(t),Hir=i(Ea),T(KF.$$.fragment,Ea),Ea.forEach(t),hl.forEach(t),FGe=i(f),Nd=n(f,"H2",{class:!0});var yVe=s(Nd);ZF=n(yVe,"A",{id:!0,class:!0,href:!0});var UMt=s(ZF);Y1e=n(UMt,"SPAN",{});var JMt=s(Y1e);T(A8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),Uir=i(yVe),K1e=n(yVe,"SPAN",{});var YMt=s(K1e);Jir=r(YMt,"AutoModelForMaskedImageModeling"),YMt.forEach(t),yVe.forEach(t),TGe=i(f),Ho=n(f,"DIV",{class:!0});var ul=s(Ho);T(y8.$$.fragment,ul),Yir=i(ul),qd=n(ul,"P",{});var voe=s(qd);Kir=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QW=n(voe,"A",{href:!0});var KMt=s(QW);Zir=r(KMt,"from_pretrained()"),KMt.forEach(t),edr=r(voe," class method or the "),HW=n(voe,"A",{href:!0});var ZMt=s(HW);odr=r(ZMt,"from_config()"),ZMt.forEach(t),rdr=r(voe,` class
method.`),voe.forEach(t),tdr=i(ul),L8=n(ul,"P",{});var LVe=s(L8);adr=r(LVe,"This class cannot be instantiated directly using "),Z1e=n(LVe,"CODE",{});var eEt=s(Z1e);ndr=r(eEt,"__init__()"),eEt.forEach(t),sdr=r(LVe," (throws an error)."),LVe.forEach(t),ldr=i(ul),At=n(ul,"DIV",{class:!0});var ZA=s(At);T(x8.$$.fragment,ZA),idr=i(ZA),e7e=n(ZA,"P",{});var oEt=s(e7e);ddr=r(oEt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oEt.forEach(t),cdr=i(ZA),jd=n(ZA,"P",{});var Foe=s(jd);fdr=r(Foe,`Note:
Loading a model from its configuration file does `),o7e=n(Foe,"STRONG",{});var rEt=s(o7e);mdr=r(rEt,"not"),rEt.forEach(t),gdr=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),UW=n(Foe,"A",{href:!0});var tEt=s(UW);hdr=r(tEt,"from_pretrained()"),tEt.forEach(t),pdr=r(Foe," to load the model weights."),Foe.forEach(t),udr=i(ZA),T(eT.$$.fragment,ZA),ZA.forEach(t),_dr=i(ul),uo=n(ul,"DIV",{class:!0});var Ca=s(uo);T($8.$$.fragment,Ca),bdr=i(Ca),r7e=n(Ca,"P",{});var aEt=s(r7e);vdr=r(aEt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),aEt.forEach(t),Fdr=i(Ca),Ka=n(Ca,"P",{});var e6=s(Ka);Tdr=r(e6,"The model class to instantiate is selected based on the "),t7e=n(e6,"CODE",{});var nEt=s(t7e);Mdr=r(nEt,"model_type"),nEt.forEach(t),Edr=r(e6,` property of the config object (either
passed as an argument or loaded from `),a7e=n(e6,"CODE",{});var sEt=s(a7e);Cdr=r(sEt,"pretrained_model_name_or_path"),sEt.forEach(t),wdr=r(e6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n7e=n(e6,"CODE",{});var lEt=s(n7e);Adr=r(lEt,"pretrained_model_name_or_path"),lEt.forEach(t),ydr=r(e6,":"),e6.forEach(t),Ldr=i(Ca),Dd=n(Ca,"UL",{});var Toe=s(Dd);oT=n(Toe,"LI",{});var bPe=s(oT);s7e=n(bPe,"STRONG",{});var iEt=s(s7e);xdr=r(iEt,"deit"),iEt.forEach(t),$dr=r(bPe," \u2014 "),JW=n(bPe,"A",{href:!0});var dEt=s(JW);kdr=r(dEt,"DeiTForMaskedImageModeling"),dEt.forEach(t),Sdr=r(bPe," (DeiT model)"),bPe.forEach(t),Rdr=i(Toe),rT=n(Toe,"LI",{});var vPe=s(rT);l7e=n(vPe,"STRONG",{});var cEt=s(l7e);Pdr=r(cEt,"swin"),cEt.forEach(t),Bdr=r(vPe," \u2014 "),YW=n(vPe,"A",{href:!0});var fEt=s(YW);Idr=r(fEt,"SwinForMaskedImageModeling"),fEt.forEach(t),Ndr=r(vPe," (Swin Transformer model)"),vPe.forEach(t),qdr=i(Toe),tT=n(Toe,"LI",{});var FPe=s(tT);i7e=n(FPe,"STRONG",{});var mEt=s(i7e);jdr=r(mEt,"vit"),mEt.forEach(t),Ddr=r(FPe," \u2014 "),KW=n(FPe,"A",{href:!0});var gEt=s(KW);Gdr=r(gEt,"ViTForMaskedImageModeling"),gEt.forEach(t),Odr=r(FPe," (ViT model)"),FPe.forEach(t),Toe.forEach(t),Vdr=i(Ca),aT=n(Ca,"P",{});var TPe=s(aT);Xdr=r(TPe,"The model is set in evaluation mode by default using "),d7e=n(TPe,"CODE",{});var hEt=s(d7e);zdr=r(hEt,"model.eval()"),hEt.forEach(t),Wdr=r(TPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),c7e=n(TPe,"CODE",{});var pEt=s(c7e);Qdr=r(pEt,"model.train()"),pEt.forEach(t),TPe.forEach(t),Hdr=i(Ca),T(nT.$$.fragment,Ca),Ca.forEach(t),ul.forEach(t),MGe=i(f),Gd=n(f,"H2",{class:!0});var xVe=s(Gd);sT=n(xVe,"A",{id:!0,class:!0,href:!0});var uEt=s(sT);f7e=n(uEt,"SPAN",{});var _Et=s(f7e);T(k8.$$.fragment,_Et),_Et.forEach(t),uEt.forEach(t),Udr=i(xVe),m7e=n(xVe,"SPAN",{});var bEt=s(m7e);Jdr=r(bEt,"AutoModelForObjectDetection"),bEt.forEach(t),xVe.forEach(t),EGe=i(f),Uo=n(f,"DIV",{class:!0});var _l=s(Uo);T(S8.$$.fragment,_l),Ydr=i(_l),Od=n(_l,"P",{});var Moe=s(Od);Kdr=r(Moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZW=n(Moe,"A",{href:!0});var vEt=s(ZW);Zdr=r(vEt,"from_pretrained()"),vEt.forEach(t),ecr=r(Moe," class method or the "),eQ=n(Moe,"A",{href:!0});var FEt=s(eQ);ocr=r(FEt,"from_config()"),FEt.forEach(t),rcr=r(Moe,` class
method.`),Moe.forEach(t),tcr=i(_l),R8=n(_l,"P",{});var $Ve=s(R8);acr=r($Ve,"This class cannot be instantiated directly using "),g7e=n($Ve,"CODE",{});var TEt=s(g7e);ncr=r(TEt,"__init__()"),TEt.forEach(t),scr=r($Ve," (throws an error)."),$Ve.forEach(t),lcr=i(_l),yt=n(_l,"DIV",{class:!0});var o6=s(yt);T(P8.$$.fragment,o6),icr=i(o6),h7e=n(o6,"P",{});var MEt=s(h7e);dcr=r(MEt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),MEt.forEach(t),ccr=i(o6),Vd=n(o6,"P",{});var Eoe=s(Vd);fcr=r(Eoe,`Note:
Loading a model from its configuration file does `),p7e=n(Eoe,"STRONG",{});var EEt=s(p7e);mcr=r(EEt,"not"),EEt.forEach(t),gcr=r(Eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oQ=n(Eoe,"A",{href:!0});var CEt=s(oQ);hcr=r(CEt,"from_pretrained()"),CEt.forEach(t),pcr=r(Eoe," to load the model weights."),Eoe.forEach(t),ucr=i(o6),T(lT.$$.fragment,o6),o6.forEach(t),_cr=i(_l),_o=n(_l,"DIV",{class:!0});var wa=s(_o);T(B8.$$.fragment,wa),bcr=i(wa),u7e=n(wa,"P",{});var wEt=s(u7e);vcr=r(wEt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),wEt.forEach(t),Fcr=i(wa),Za=n(wa,"P",{});var r6=s(Za);Tcr=r(r6,"The model class to instantiate is selected based on the "),_7e=n(r6,"CODE",{});var AEt=s(_7e);Mcr=r(AEt,"model_type"),AEt.forEach(t),Ecr=r(r6,` property of the config object (either
passed as an argument or loaded from `),b7e=n(r6,"CODE",{});var yEt=s(b7e);Ccr=r(yEt,"pretrained_model_name_or_path"),yEt.forEach(t),wcr=r(r6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v7e=n(r6,"CODE",{});var LEt=s(v7e);Acr=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),ycr=r(r6,":"),r6.forEach(t),Lcr=i(wa),I8=n(wa,"UL",{});var kVe=s(I8);iT=n(kVe,"LI",{});var MPe=s(iT);F7e=n(MPe,"STRONG",{});var xEt=s(F7e);xcr=r(xEt,"detr"),xEt.forEach(t),$cr=r(MPe," \u2014 "),rQ=n(MPe,"A",{href:!0});var $Et=s(rQ);kcr=r($Et,"DetrForObjectDetection"),$Et.forEach(t),Scr=r(MPe," (DETR model)"),MPe.forEach(t),Rcr=i(kVe),dT=n(kVe,"LI",{});var EPe=s(dT);T7e=n(EPe,"STRONG",{});var kEt=s(T7e);Pcr=r(kEt,"yolos"),kEt.forEach(t),Bcr=r(EPe," \u2014 "),tQ=n(EPe,"A",{href:!0});var SEt=s(tQ);Icr=r(SEt,"YolosForObjectDetection"),SEt.forEach(t),Ncr=r(EPe," (YOLOS model)"),EPe.forEach(t),kVe.forEach(t),qcr=i(wa),cT=n(wa,"P",{});var CPe=s(cT);jcr=r(CPe,"The model is set in evaluation mode by default using "),M7e=n(CPe,"CODE",{});var REt=s(M7e);Dcr=r(REt,"model.eval()"),REt.forEach(t),Gcr=r(CPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E7e=n(CPe,"CODE",{});var PEt=s(E7e);Ocr=r(PEt,"model.train()"),PEt.forEach(t),CPe.forEach(t),Vcr=i(wa),T(fT.$$.fragment,wa),wa.forEach(t),_l.forEach(t),CGe=i(f),Xd=n(f,"H2",{class:!0});var SVe=s(Xd);mT=n(SVe,"A",{id:!0,class:!0,href:!0});var BEt=s(mT);C7e=n(BEt,"SPAN",{});var IEt=s(C7e);T(N8.$$.fragment,IEt),IEt.forEach(t),BEt.forEach(t),Xcr=i(SVe),w7e=n(SVe,"SPAN",{});var NEt=s(w7e);zcr=r(NEt,"AutoModelForImageSegmentation"),NEt.forEach(t),SVe.forEach(t),wGe=i(f),Jo=n(f,"DIV",{class:!0});var bl=s(Jo);T(q8.$$.fragment,bl),Wcr=i(bl),zd=n(bl,"P",{});var Coe=s(zd);Qcr=r(Coe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aQ=n(Coe,"A",{href:!0});var qEt=s(aQ);Hcr=r(qEt,"from_pretrained()"),qEt.forEach(t),Ucr=r(Coe," class method or the "),nQ=n(Coe,"A",{href:!0});var jEt=s(nQ);Jcr=r(jEt,"from_config()"),jEt.forEach(t),Ycr=r(Coe,` class
method.`),Coe.forEach(t),Kcr=i(bl),j8=n(bl,"P",{});var RVe=s(j8);Zcr=r(RVe,"This class cannot be instantiated directly using "),A7e=n(RVe,"CODE",{});var DEt=s(A7e);efr=r(DEt,"__init__()"),DEt.forEach(t),ofr=r(RVe," (throws an error)."),RVe.forEach(t),rfr=i(bl),Lt=n(bl,"DIV",{class:!0});var t6=s(Lt);T(D8.$$.fragment,t6),tfr=i(t6),y7e=n(t6,"P",{});var GEt=s(y7e);afr=r(GEt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),GEt.forEach(t),nfr=i(t6),Wd=n(t6,"P",{});var woe=s(Wd);sfr=r(woe,`Note:
Loading a model from its configuration file does `),L7e=n(woe,"STRONG",{});var OEt=s(L7e);lfr=r(OEt,"not"),OEt.forEach(t),ifr=r(woe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(woe,"A",{href:!0});var VEt=s(sQ);dfr=r(VEt,"from_pretrained()"),VEt.forEach(t),cfr=r(woe," to load the model weights."),woe.forEach(t),ffr=i(t6),T(gT.$$.fragment,t6),t6.forEach(t),mfr=i(bl),bo=n(bl,"DIV",{class:!0});var Aa=s(bo);T(G8.$$.fragment,Aa),gfr=i(Aa),x7e=n(Aa,"P",{});var XEt=s(x7e);hfr=r(XEt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),XEt.forEach(t),pfr=i(Aa),en=n(Aa,"P",{});var a6=s(en);ufr=r(a6,"The model class to instantiate is selected based on the "),$7e=n(a6,"CODE",{});var zEt=s($7e);_fr=r(zEt,"model_type"),zEt.forEach(t),bfr=r(a6,` property of the config object (either
passed as an argument or loaded from `),k7e=n(a6,"CODE",{});var WEt=s(k7e);vfr=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),Ffr=r(a6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S7e=n(a6,"CODE",{});var QEt=s(S7e);Tfr=r(QEt,"pretrained_model_name_or_path"),QEt.forEach(t),Mfr=r(a6,":"),a6.forEach(t),Efr=i(Aa),R7e=n(Aa,"UL",{});var HEt=s(R7e);hT=n(HEt,"LI",{});var wPe=s(hT);P7e=n(wPe,"STRONG",{});var UEt=s(P7e);Cfr=r(UEt,"detr"),UEt.forEach(t),wfr=r(wPe," \u2014 "),lQ=n(wPe,"A",{href:!0});var JEt=s(lQ);Afr=r(JEt,"DetrForSegmentation"),JEt.forEach(t),yfr=r(wPe," (DETR model)"),wPe.forEach(t),HEt.forEach(t),Lfr=i(Aa),pT=n(Aa,"P",{});var APe=s(pT);xfr=r(APe,"The model is set in evaluation mode by default using "),B7e=n(APe,"CODE",{});var YEt=s(B7e);$fr=r(YEt,"model.eval()"),YEt.forEach(t),kfr=r(APe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I7e=n(APe,"CODE",{});var KEt=s(I7e);Sfr=r(KEt,"model.train()"),KEt.forEach(t),APe.forEach(t),Rfr=i(Aa),T(uT.$$.fragment,Aa),Aa.forEach(t),bl.forEach(t),AGe=i(f),Qd=n(f,"H2",{class:!0});var PVe=s(Qd);_T=n(PVe,"A",{id:!0,class:!0,href:!0});var ZEt=s(_T);N7e=n(ZEt,"SPAN",{});var eCt=s(N7e);T(O8.$$.fragment,eCt),eCt.forEach(t),ZEt.forEach(t),Pfr=i(PVe),q7e=n(PVe,"SPAN",{});var oCt=s(q7e);Bfr=r(oCt,"AutoModelForSemanticSegmentation"),oCt.forEach(t),PVe.forEach(t),yGe=i(f),Yo=n(f,"DIV",{class:!0});var vl=s(Yo);T(V8.$$.fragment,vl),Ifr=i(vl),Hd=n(vl,"P",{});var Aoe=s(Hd);Nfr=r(Aoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iQ=n(Aoe,"A",{href:!0});var rCt=s(iQ);qfr=r(rCt,"from_pretrained()"),rCt.forEach(t),jfr=r(Aoe," class method or the "),dQ=n(Aoe,"A",{href:!0});var tCt=s(dQ);Dfr=r(tCt,"from_config()"),tCt.forEach(t),Gfr=r(Aoe,` class
method.`),Aoe.forEach(t),Ofr=i(vl),X8=n(vl,"P",{});var BVe=s(X8);Vfr=r(BVe,"This class cannot be instantiated directly using "),j7e=n(BVe,"CODE",{});var aCt=s(j7e);Xfr=r(aCt,"__init__()"),aCt.forEach(t),zfr=r(BVe," (throws an error)."),BVe.forEach(t),Wfr=i(vl),xt=n(vl,"DIV",{class:!0});var n6=s(xt);T(z8.$$.fragment,n6),Qfr=i(n6),D7e=n(n6,"P",{});var nCt=s(D7e);Hfr=r(nCt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),nCt.forEach(t),Ufr=i(n6),Ud=n(n6,"P",{});var yoe=s(Ud);Jfr=r(yoe,`Note:
Loading a model from its configuration file does `),G7e=n(yoe,"STRONG",{});var sCt=s(G7e);Yfr=r(sCt,"not"),sCt.forEach(t),Kfr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cQ=n(yoe,"A",{href:!0});var lCt=s(cQ);Zfr=r(lCt,"from_pretrained()"),lCt.forEach(t),emr=r(yoe," to load the model weights."),yoe.forEach(t),omr=i(n6),T(bT.$$.fragment,n6),n6.forEach(t),rmr=i(vl),vo=n(vl,"DIV",{class:!0});var ya=s(vo);T(W8.$$.fragment,ya),tmr=i(ya),O7e=n(ya,"P",{});var iCt=s(O7e);amr=r(iCt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),iCt.forEach(t),nmr=i(ya),on=n(ya,"P",{});var s6=s(on);smr=r(s6,"The model class to instantiate is selected based on the "),V7e=n(s6,"CODE",{});var dCt=s(V7e);lmr=r(dCt,"model_type"),dCt.forEach(t),imr=r(s6,` property of the config object (either
passed as an argument or loaded from `),X7e=n(s6,"CODE",{});var cCt=s(X7e);dmr=r(cCt,"pretrained_model_name_or_path"),cCt.forEach(t),cmr=r(s6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(s6,"CODE",{});var fCt=s(z7e);fmr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),mmr=r(s6,":"),s6.forEach(t),gmr=i(ya),rn=n(ya,"UL",{});var l6=s(rn);vT=n(l6,"LI",{});var yPe=s(vT);W7e=n(yPe,"STRONG",{});var mCt=s(W7e);hmr=r(mCt,"beit"),mCt.forEach(t),pmr=r(yPe," \u2014 "),fQ=n(yPe,"A",{href:!0});var gCt=s(fQ);umr=r(gCt,"BeitForSemanticSegmentation"),gCt.forEach(t),_mr=r(yPe," (BEiT model)"),yPe.forEach(t),bmr=i(l6),FT=n(l6,"LI",{});var LPe=s(FT);Q7e=n(LPe,"STRONG",{});var hCt=s(Q7e);vmr=r(hCt,"data2vec-vision"),hCt.forEach(t),Fmr=r(LPe," \u2014 "),mQ=n(LPe,"A",{href:!0});var pCt=s(mQ);Tmr=r(pCt,"Data2VecVisionForSemanticSegmentation"),pCt.forEach(t),Mmr=r(LPe," (Data2VecVision model)"),LPe.forEach(t),Emr=i(l6),TT=n(l6,"LI",{});var xPe=s(TT);H7e=n(xPe,"STRONG",{});var uCt=s(H7e);Cmr=r(uCt,"dpt"),uCt.forEach(t),wmr=r(xPe," \u2014 "),gQ=n(xPe,"A",{href:!0});var _Ct=s(gQ);Amr=r(_Ct,"DPTForSemanticSegmentation"),_Ct.forEach(t),ymr=r(xPe," (DPT model)"),xPe.forEach(t),Lmr=i(l6),MT=n(l6,"LI",{});var $Pe=s(MT);U7e=n($Pe,"STRONG",{});var bCt=s(U7e);xmr=r(bCt,"segformer"),bCt.forEach(t),$mr=r($Pe," \u2014 "),hQ=n($Pe,"A",{href:!0});var vCt=s(hQ);kmr=r(vCt,"SegformerForSemanticSegmentation"),vCt.forEach(t),Smr=r($Pe," (SegFormer model)"),$Pe.forEach(t),l6.forEach(t),Rmr=i(ya),ET=n(ya,"P",{});var kPe=s(ET);Pmr=r(kPe,"The model is set in evaluation mode by default using "),J7e=n(kPe,"CODE",{});var FCt=s(J7e);Bmr=r(FCt,"model.eval()"),FCt.forEach(t),Imr=r(kPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y7e=n(kPe,"CODE",{});var TCt=s(Y7e);Nmr=r(TCt,"model.train()"),TCt.forEach(t),kPe.forEach(t),qmr=i(ya),T(CT.$$.fragment,ya),ya.forEach(t),vl.forEach(t),LGe=i(f),Jd=n(f,"H2",{class:!0});var IVe=s(Jd);wT=n(IVe,"A",{id:!0,class:!0,href:!0});var MCt=s(wT);K7e=n(MCt,"SPAN",{});var ECt=s(K7e);T(Q8.$$.fragment,ECt),ECt.forEach(t),MCt.forEach(t),jmr=i(IVe),Z7e=n(IVe,"SPAN",{});var CCt=s(Z7e);Dmr=r(CCt,"AutoModelForInstanceSegmentation"),CCt.forEach(t),IVe.forEach(t),xGe=i(f),Ko=n(f,"DIV",{class:!0});var Fl=s(Ko);T(H8.$$.fragment,Fl),Gmr=i(Fl),Yd=n(Fl,"P",{});var Loe=s(Yd);Omr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pQ=n(Loe,"A",{href:!0});var wCt=s(pQ);Vmr=r(wCt,"from_pretrained()"),wCt.forEach(t),Xmr=r(Loe," class method or the "),uQ=n(Loe,"A",{href:!0});var ACt=s(uQ);zmr=r(ACt,"from_config()"),ACt.forEach(t),Wmr=r(Loe,` class
method.`),Loe.forEach(t),Qmr=i(Fl),U8=n(Fl,"P",{});var NVe=s(U8);Hmr=r(NVe,"This class cannot be instantiated directly using "),ebe=n(NVe,"CODE",{});var yCt=s(ebe);Umr=r(yCt,"__init__()"),yCt.forEach(t),Jmr=r(NVe," (throws an error)."),NVe.forEach(t),Ymr=i(Fl),$t=n(Fl,"DIV",{class:!0});var i6=s($t);T(J8.$$.fragment,i6),Kmr=i(i6),obe=n(i6,"P",{});var LCt=s(obe);Zmr=r(LCt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),LCt.forEach(t),egr=i(i6),Kd=n(i6,"P",{});var xoe=s(Kd);ogr=r(xoe,`Note:
Loading a model from its configuration file does `),rbe=n(xoe,"STRONG",{});var xCt=s(rbe);rgr=r(xCt,"not"),xCt.forEach(t),tgr=r(xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(xoe,"A",{href:!0});var $Ct=s(_Q);agr=r($Ct,"from_pretrained()"),$Ct.forEach(t),ngr=r(xoe," to load the model weights."),xoe.forEach(t),sgr=i(i6),T(AT.$$.fragment,i6),i6.forEach(t),lgr=i(Fl),Fo=n(Fl,"DIV",{class:!0});var La=s(Fo);T(Y8.$$.fragment,La),igr=i(La),tbe=n(La,"P",{});var kCt=s(tbe);dgr=r(kCt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),kCt.forEach(t),cgr=i(La),tn=n(La,"P",{});var d6=s(tn);fgr=r(d6,"The model class to instantiate is selected based on the "),abe=n(d6,"CODE",{});var SCt=s(abe);mgr=r(SCt,"model_type"),SCt.forEach(t),ggr=r(d6,` property of the config object (either
passed as an argument or loaded from `),nbe=n(d6,"CODE",{});var RCt=s(nbe);hgr=r(RCt,"pretrained_model_name_or_path"),RCt.forEach(t),pgr=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(d6,"CODE",{});var PCt=s(sbe);ugr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),_gr=r(d6,":"),d6.forEach(t),bgr=i(La),lbe=n(La,"UL",{});var BCt=s(lbe);yT=n(BCt,"LI",{});var SPe=s(yT);ibe=n(SPe,"STRONG",{});var ICt=s(ibe);vgr=r(ICt,"maskformer"),ICt.forEach(t),Fgr=r(SPe," \u2014 "),bQ=n(SPe,"A",{href:!0});var NCt=s(bQ);Tgr=r(NCt,"MaskFormerForInstanceSegmentation"),NCt.forEach(t),Mgr=r(SPe," (MaskFormer model)"),SPe.forEach(t),BCt.forEach(t),Egr=i(La),LT=n(La,"P",{});var RPe=s(LT);Cgr=r(RPe,"The model is set in evaluation mode by default using "),dbe=n(RPe,"CODE",{});var qCt=s(dbe);wgr=r(qCt,"model.eval()"),qCt.forEach(t),Agr=r(RPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cbe=n(RPe,"CODE",{});var jCt=s(cbe);ygr=r(jCt,"model.train()"),jCt.forEach(t),RPe.forEach(t),Lgr=i(La),T(xT.$$.fragment,La),La.forEach(t),Fl.forEach(t),$Ge=i(f),Zd=n(f,"H2",{class:!0});var qVe=s(Zd);$T=n(qVe,"A",{id:!0,class:!0,href:!0});var DCt=s($T);fbe=n(DCt,"SPAN",{});var GCt=s(fbe);T(K8.$$.fragment,GCt),GCt.forEach(t),DCt.forEach(t),xgr=i(qVe),mbe=n(qVe,"SPAN",{});var OCt=s(mbe);$gr=r(OCt,"TFAutoModel"),OCt.forEach(t),qVe.forEach(t),kGe=i(f),Zo=n(f,"DIV",{class:!0});var Tl=s(Zo);T(Z8.$$.fragment,Tl),kgr=i(Tl),ec=n(Tl,"P",{});var $oe=s(ec);Sgr=r($oe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vQ=n($oe,"A",{href:!0});var VCt=s(vQ);Rgr=r(VCt,"from_pretrained()"),VCt.forEach(t),Pgr=r($oe," class method or the "),FQ=n($oe,"A",{href:!0});var XCt=s(FQ);Bgr=r(XCt,"from_config()"),XCt.forEach(t),Igr=r($oe,` class
method.`),$oe.forEach(t),Ngr=i(Tl),e9=n(Tl,"P",{});var jVe=s(e9);qgr=r(jVe,"This class cannot be instantiated directly using "),gbe=n(jVe,"CODE",{});var zCt=s(gbe);jgr=r(zCt,"__init__()"),zCt.forEach(t),Dgr=r(jVe," (throws an error)."),jVe.forEach(t),Ggr=i(Tl),kt=n(Tl,"DIV",{class:!0});var c6=s(kt);T(o9.$$.fragment,c6),Ogr=i(c6),hbe=n(c6,"P",{});var WCt=s(hbe);Vgr=r(WCt,"Instantiates one of the base model classes of the library from a configuration."),WCt.forEach(t),Xgr=i(c6),oc=n(c6,"P",{});var koe=s(oc);zgr=r(koe,`Note:
Loading a model from its configuration file does `),pbe=n(koe,"STRONG",{});var QCt=s(pbe);Wgr=r(QCt,"not"),QCt.forEach(t),Qgr=r(koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(koe,"A",{href:!0});var HCt=s(TQ);Hgr=r(HCt,"from_pretrained()"),HCt.forEach(t),Ugr=r(koe," to load the model weights."),koe.forEach(t),Jgr=i(c6),T(kT.$$.fragment,c6),c6.forEach(t),Ygr=i(Tl),yr=n(Tl,"DIV",{class:!0});var Ml=s(yr);T(r9.$$.fragment,Ml),Kgr=i(Ml),ube=n(Ml,"P",{});var UCt=s(ube);Zgr=r(UCt,"Instantiate one of the base model classes of the library from a pretrained model."),UCt.forEach(t),ehr=i(Ml),an=n(Ml,"P",{});var f6=s(an);ohr=r(f6,"The model class to instantiate is selected based on the "),_be=n(f6,"CODE",{});var JCt=s(_be);rhr=r(JCt,"model_type"),JCt.forEach(t),thr=r(f6,` property of the config object (either
passed as an argument or loaded from `),bbe=n(f6,"CODE",{});var YCt=s(bbe);ahr=r(YCt,"pretrained_model_name_or_path"),YCt.forEach(t),nhr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vbe=n(f6,"CODE",{});var KCt=s(vbe);shr=r(KCt,"pretrained_model_name_or_path"),KCt.forEach(t),lhr=r(f6,":"),f6.forEach(t),ihr=i(Ml),N=n(Ml,"UL",{});var j=s(N);ST=n(j,"LI",{});var PPe=s(ST);Fbe=n(PPe,"STRONG",{});var ZCt=s(Fbe);dhr=r(ZCt,"albert"),ZCt.forEach(t),chr=r(PPe," \u2014 "),MQ=n(PPe,"A",{href:!0});var e5t=s(MQ);fhr=r(e5t,"TFAlbertModel"),e5t.forEach(t),mhr=r(PPe," (ALBERT model)"),PPe.forEach(t),ghr=i(j),RT=n(j,"LI",{});var BPe=s(RT);Tbe=n(BPe,"STRONG",{});var o5t=s(Tbe);hhr=r(o5t,"bart"),o5t.forEach(t),phr=r(BPe," \u2014 "),EQ=n(BPe,"A",{href:!0});var r5t=s(EQ);uhr=r(r5t,"TFBartModel"),r5t.forEach(t),_hr=r(BPe," (BART model)"),BPe.forEach(t),bhr=i(j),PT=n(j,"LI",{});var IPe=s(PT);Mbe=n(IPe,"STRONG",{});var t5t=s(Mbe);vhr=r(t5t,"bert"),t5t.forEach(t),Fhr=r(IPe," \u2014 "),CQ=n(IPe,"A",{href:!0});var a5t=s(CQ);Thr=r(a5t,"TFBertModel"),a5t.forEach(t),Mhr=r(IPe," (BERT model)"),IPe.forEach(t),Ehr=i(j),BT=n(j,"LI",{});var NPe=s(BT);Ebe=n(NPe,"STRONG",{});var n5t=s(Ebe);Chr=r(n5t,"blenderbot"),n5t.forEach(t),whr=r(NPe," \u2014 "),wQ=n(NPe,"A",{href:!0});var s5t=s(wQ);Ahr=r(s5t,"TFBlenderbotModel"),s5t.forEach(t),yhr=r(NPe," (Blenderbot model)"),NPe.forEach(t),Lhr=i(j),IT=n(j,"LI",{});var qPe=s(IT);Cbe=n(qPe,"STRONG",{});var l5t=s(Cbe);xhr=r(l5t,"blenderbot-small"),l5t.forEach(t),$hr=r(qPe," \u2014 "),AQ=n(qPe,"A",{href:!0});var i5t=s(AQ);khr=r(i5t,"TFBlenderbotSmallModel"),i5t.forEach(t),Shr=r(qPe," (BlenderbotSmall model)"),qPe.forEach(t),Rhr=i(j),NT=n(j,"LI",{});var jPe=s(NT);wbe=n(jPe,"STRONG",{});var d5t=s(wbe);Phr=r(d5t,"camembert"),d5t.forEach(t),Bhr=r(jPe," \u2014 "),yQ=n(jPe,"A",{href:!0});var c5t=s(yQ);Ihr=r(c5t,"TFCamembertModel"),c5t.forEach(t),Nhr=r(jPe," (CamemBERT model)"),jPe.forEach(t),qhr=i(j),qT=n(j,"LI",{});var DPe=s(qT);Abe=n(DPe,"STRONG",{});var f5t=s(Abe);jhr=r(f5t,"clip"),f5t.forEach(t),Dhr=r(DPe," \u2014 "),LQ=n(DPe,"A",{href:!0});var m5t=s(LQ);Ghr=r(m5t,"TFCLIPModel"),m5t.forEach(t),Ohr=r(DPe," (CLIP model)"),DPe.forEach(t),Vhr=i(j),jT=n(j,"LI",{});var GPe=s(jT);ybe=n(GPe,"STRONG",{});var g5t=s(ybe);Xhr=r(g5t,"convbert"),g5t.forEach(t),zhr=r(GPe," \u2014 "),xQ=n(GPe,"A",{href:!0});var h5t=s(xQ);Whr=r(h5t,"TFConvBertModel"),h5t.forEach(t),Qhr=r(GPe," (ConvBERT model)"),GPe.forEach(t),Hhr=i(j),DT=n(j,"LI",{});var OPe=s(DT);Lbe=n(OPe,"STRONG",{});var p5t=s(Lbe);Uhr=r(p5t,"convnext"),p5t.forEach(t),Jhr=r(OPe," \u2014 "),$Q=n(OPe,"A",{href:!0});var u5t=s($Q);Yhr=r(u5t,"TFConvNextModel"),u5t.forEach(t),Khr=r(OPe," (ConvNeXT model)"),OPe.forEach(t),Zhr=i(j),GT=n(j,"LI",{});var VPe=s(GT);xbe=n(VPe,"STRONG",{});var _5t=s(xbe);epr=r(_5t,"ctrl"),_5t.forEach(t),opr=r(VPe," \u2014 "),kQ=n(VPe,"A",{href:!0});var b5t=s(kQ);rpr=r(b5t,"TFCTRLModel"),b5t.forEach(t),tpr=r(VPe," (CTRL model)"),VPe.forEach(t),apr=i(j),OT=n(j,"LI",{});var XPe=s(OT);$be=n(XPe,"STRONG",{});var v5t=s($be);npr=r(v5t,"data2vec-vision"),v5t.forEach(t),spr=r(XPe," \u2014 "),SQ=n(XPe,"A",{href:!0});var F5t=s(SQ);lpr=r(F5t,"TFData2VecVisionModel"),F5t.forEach(t),ipr=r(XPe," (Data2VecVision model)"),XPe.forEach(t),dpr=i(j),VT=n(j,"LI",{});var zPe=s(VT);kbe=n(zPe,"STRONG",{});var T5t=s(kbe);cpr=r(T5t,"deberta"),T5t.forEach(t),fpr=r(zPe," \u2014 "),RQ=n(zPe,"A",{href:!0});var M5t=s(RQ);mpr=r(M5t,"TFDebertaModel"),M5t.forEach(t),gpr=r(zPe," (DeBERTa model)"),zPe.forEach(t),hpr=i(j),XT=n(j,"LI",{});var WPe=s(XT);Sbe=n(WPe,"STRONG",{});var E5t=s(Sbe);ppr=r(E5t,"deberta-v2"),E5t.forEach(t),upr=r(WPe," \u2014 "),PQ=n(WPe,"A",{href:!0});var C5t=s(PQ);_pr=r(C5t,"TFDebertaV2Model"),C5t.forEach(t),bpr=r(WPe," (DeBERTa-v2 model)"),WPe.forEach(t),vpr=i(j),zT=n(j,"LI",{});var QPe=s(zT);Rbe=n(QPe,"STRONG",{});var w5t=s(Rbe);Fpr=r(w5t,"distilbert"),w5t.forEach(t),Tpr=r(QPe," \u2014 "),BQ=n(QPe,"A",{href:!0});var A5t=s(BQ);Mpr=r(A5t,"TFDistilBertModel"),A5t.forEach(t),Epr=r(QPe," (DistilBERT model)"),QPe.forEach(t),Cpr=i(j),WT=n(j,"LI",{});var HPe=s(WT);Pbe=n(HPe,"STRONG",{});var y5t=s(Pbe);wpr=r(y5t,"dpr"),y5t.forEach(t),Apr=r(HPe," \u2014 "),IQ=n(HPe,"A",{href:!0});var L5t=s(IQ);ypr=r(L5t,"TFDPRQuestionEncoder"),L5t.forEach(t),Lpr=r(HPe," (DPR model)"),HPe.forEach(t),xpr=i(j),QT=n(j,"LI",{});var UPe=s(QT);Bbe=n(UPe,"STRONG",{});var x5t=s(Bbe);$pr=r(x5t,"electra"),x5t.forEach(t),kpr=r(UPe," \u2014 "),NQ=n(UPe,"A",{href:!0});var $5t=s(NQ);Spr=r($5t,"TFElectraModel"),$5t.forEach(t),Rpr=r(UPe," (ELECTRA model)"),UPe.forEach(t),Ppr=i(j),HT=n(j,"LI",{});var JPe=s(HT);Ibe=n(JPe,"STRONG",{});var k5t=s(Ibe);Bpr=r(k5t,"flaubert"),k5t.forEach(t),Ipr=r(JPe," \u2014 "),qQ=n(JPe,"A",{href:!0});var S5t=s(qQ);Npr=r(S5t,"TFFlaubertModel"),S5t.forEach(t),qpr=r(JPe," (FlauBERT model)"),JPe.forEach(t),jpr=i(j),Vs=n(j,"LI",{});var Ik=s(Vs);Nbe=n(Ik,"STRONG",{});var R5t=s(Nbe);Dpr=r(R5t,"funnel"),R5t.forEach(t),Gpr=r(Ik," \u2014 "),jQ=n(Ik,"A",{href:!0});var P5t=s(jQ);Opr=r(P5t,"TFFunnelModel"),P5t.forEach(t),Vpr=r(Ik," or "),DQ=n(Ik,"A",{href:!0});var B5t=s(DQ);Xpr=r(B5t,"TFFunnelBaseModel"),B5t.forEach(t),zpr=r(Ik," (Funnel Transformer model)"),Ik.forEach(t),Wpr=i(j),UT=n(j,"LI",{});var YPe=s(UT);qbe=n(YPe,"STRONG",{});var I5t=s(qbe);Qpr=r(I5t,"gpt2"),I5t.forEach(t),Hpr=r(YPe," \u2014 "),GQ=n(YPe,"A",{href:!0});var N5t=s(GQ);Upr=r(N5t,"TFGPT2Model"),N5t.forEach(t),Jpr=r(YPe," (OpenAI GPT-2 model)"),YPe.forEach(t),Ypr=i(j),JT=n(j,"LI",{});var KPe=s(JT);jbe=n(KPe,"STRONG",{});var q5t=s(jbe);Kpr=r(q5t,"gptj"),q5t.forEach(t),Zpr=r(KPe," \u2014 "),OQ=n(KPe,"A",{href:!0});var j5t=s(OQ);eur=r(j5t,"TFGPTJModel"),j5t.forEach(t),our=r(KPe," (GPT-J model)"),KPe.forEach(t),rur=i(j),YT=n(j,"LI",{});var ZPe=s(YT);Dbe=n(ZPe,"STRONG",{});var D5t=s(Dbe);tur=r(D5t,"hubert"),D5t.forEach(t),aur=r(ZPe," \u2014 "),VQ=n(ZPe,"A",{href:!0});var G5t=s(VQ);nur=r(G5t,"TFHubertModel"),G5t.forEach(t),sur=r(ZPe," (Hubert model)"),ZPe.forEach(t),lur=i(j),KT=n(j,"LI",{});var eBe=s(KT);Gbe=n(eBe,"STRONG",{});var O5t=s(Gbe);iur=r(O5t,"layoutlm"),O5t.forEach(t),dur=r(eBe," \u2014 "),XQ=n(eBe,"A",{href:!0});var V5t=s(XQ);cur=r(V5t,"TFLayoutLMModel"),V5t.forEach(t),fur=r(eBe," (LayoutLM model)"),eBe.forEach(t),mur=i(j),ZT=n(j,"LI",{});var oBe=s(ZT);Obe=n(oBe,"STRONG",{});var X5t=s(Obe);gur=r(X5t,"led"),X5t.forEach(t),hur=r(oBe," \u2014 "),zQ=n(oBe,"A",{href:!0});var z5t=s(zQ);pur=r(z5t,"TFLEDModel"),z5t.forEach(t),uur=r(oBe," (LED model)"),oBe.forEach(t),_ur=i(j),eM=n(j,"LI",{});var rBe=s(eM);Vbe=n(rBe,"STRONG",{});var W5t=s(Vbe);bur=r(W5t,"longformer"),W5t.forEach(t),vur=r(rBe," \u2014 "),WQ=n(rBe,"A",{href:!0});var Q5t=s(WQ);Fur=r(Q5t,"TFLongformerModel"),Q5t.forEach(t),Tur=r(rBe," (Longformer model)"),rBe.forEach(t),Mur=i(j),oM=n(j,"LI",{});var tBe=s(oM);Xbe=n(tBe,"STRONG",{});var H5t=s(Xbe);Eur=r(H5t,"lxmert"),H5t.forEach(t),Cur=r(tBe," \u2014 "),QQ=n(tBe,"A",{href:!0});var U5t=s(QQ);wur=r(U5t,"TFLxmertModel"),U5t.forEach(t),Aur=r(tBe," (LXMERT model)"),tBe.forEach(t),yur=i(j),rM=n(j,"LI",{});var aBe=s(rM);zbe=n(aBe,"STRONG",{});var J5t=s(zbe);Lur=r(J5t,"marian"),J5t.forEach(t),xur=r(aBe," \u2014 "),HQ=n(aBe,"A",{href:!0});var Y5t=s(HQ);$ur=r(Y5t,"TFMarianModel"),Y5t.forEach(t),kur=r(aBe," (Marian model)"),aBe.forEach(t),Sur=i(j),tM=n(j,"LI",{});var nBe=s(tM);Wbe=n(nBe,"STRONG",{});var K5t=s(Wbe);Rur=r(K5t,"mbart"),K5t.forEach(t),Pur=r(nBe," \u2014 "),UQ=n(nBe,"A",{href:!0});var Z5t=s(UQ);Bur=r(Z5t,"TFMBartModel"),Z5t.forEach(t),Iur=r(nBe," (mBART model)"),nBe.forEach(t),Nur=i(j),aM=n(j,"LI",{});var sBe=s(aM);Qbe=n(sBe,"STRONG",{});var e3t=s(Qbe);qur=r(e3t,"mobilebert"),e3t.forEach(t),jur=r(sBe," \u2014 "),JQ=n(sBe,"A",{href:!0});var o3t=s(JQ);Dur=r(o3t,"TFMobileBertModel"),o3t.forEach(t),Gur=r(sBe," (MobileBERT model)"),sBe.forEach(t),Our=i(j),nM=n(j,"LI",{});var lBe=s(nM);Hbe=n(lBe,"STRONG",{});var r3t=s(Hbe);Vur=r(r3t,"mpnet"),r3t.forEach(t),Xur=r(lBe," \u2014 "),YQ=n(lBe,"A",{href:!0});var t3t=s(YQ);zur=r(t3t,"TFMPNetModel"),t3t.forEach(t),Wur=r(lBe," (MPNet model)"),lBe.forEach(t),Qur=i(j),sM=n(j,"LI",{});var iBe=s(sM);Ube=n(iBe,"STRONG",{});var a3t=s(Ube);Hur=r(a3t,"mt5"),a3t.forEach(t),Uur=r(iBe," \u2014 "),KQ=n(iBe,"A",{href:!0});var n3t=s(KQ);Jur=r(n3t,"TFMT5Model"),n3t.forEach(t),Yur=r(iBe," (MT5 model)"),iBe.forEach(t),Kur=i(j),lM=n(j,"LI",{});var dBe=s(lM);Jbe=n(dBe,"STRONG",{});var s3t=s(Jbe);Zur=r(s3t,"openai-gpt"),s3t.forEach(t),e_r=r(dBe," \u2014 "),ZQ=n(dBe,"A",{href:!0});var l3t=s(ZQ);o_r=r(l3t,"TFOpenAIGPTModel"),l3t.forEach(t),r_r=r(dBe," (OpenAI GPT model)"),dBe.forEach(t),t_r=i(j),iM=n(j,"LI",{});var cBe=s(iM);Ybe=n(cBe,"STRONG",{});var i3t=s(Ybe);a_r=r(i3t,"opt"),i3t.forEach(t),n_r=r(cBe," \u2014 "),eH=n(cBe,"A",{href:!0});var d3t=s(eH);s_r=r(d3t,"TFOPTModel"),d3t.forEach(t),l_r=r(cBe," (OPT model)"),cBe.forEach(t),i_r=i(j),dM=n(j,"LI",{});var fBe=s(dM);Kbe=n(fBe,"STRONG",{});var c3t=s(Kbe);d_r=r(c3t,"pegasus"),c3t.forEach(t),c_r=r(fBe," \u2014 "),oH=n(fBe,"A",{href:!0});var f3t=s(oH);f_r=r(f3t,"TFPegasusModel"),f3t.forEach(t),m_r=r(fBe," (Pegasus model)"),fBe.forEach(t),g_r=i(j),cM=n(j,"LI",{});var mBe=s(cM);Zbe=n(mBe,"STRONG",{});var m3t=s(Zbe);h_r=r(m3t,"rembert"),m3t.forEach(t),p_r=r(mBe," \u2014 "),rH=n(mBe,"A",{href:!0});var g3t=s(rH);u_r=r(g3t,"TFRemBertModel"),g3t.forEach(t),__r=r(mBe," (RemBERT model)"),mBe.forEach(t),b_r=i(j),fM=n(j,"LI",{});var gBe=s(fM);e4e=n(gBe,"STRONG",{});var h3t=s(e4e);v_r=r(h3t,"resnet"),h3t.forEach(t),F_r=r(gBe," \u2014 "),tH=n(gBe,"A",{href:!0});var p3t=s(tH);T_r=r(p3t,"TFResNetModel"),p3t.forEach(t),M_r=r(gBe," (ResNet model)"),gBe.forEach(t),E_r=i(j),mM=n(j,"LI",{});var hBe=s(mM);o4e=n(hBe,"STRONG",{});var u3t=s(o4e);C_r=r(u3t,"roberta"),u3t.forEach(t),w_r=r(hBe," \u2014 "),aH=n(hBe,"A",{href:!0});var _3t=s(aH);A_r=r(_3t,"TFRobertaModel"),_3t.forEach(t),y_r=r(hBe," (RoBERTa model)"),hBe.forEach(t),L_r=i(j),gM=n(j,"LI",{});var pBe=s(gM);r4e=n(pBe,"STRONG",{});var b3t=s(r4e);x_r=r(b3t,"roformer"),b3t.forEach(t),$_r=r(pBe," \u2014 "),nH=n(pBe,"A",{href:!0});var v3t=s(nH);k_r=r(v3t,"TFRoFormerModel"),v3t.forEach(t),S_r=r(pBe," (RoFormer model)"),pBe.forEach(t),R_r=i(j),hM=n(j,"LI",{});var uBe=s(hM);t4e=n(uBe,"STRONG",{});var F3t=s(t4e);P_r=r(F3t,"speech_to_text"),F3t.forEach(t),B_r=r(uBe," \u2014 "),sH=n(uBe,"A",{href:!0});var T3t=s(sH);I_r=r(T3t,"TFSpeech2TextModel"),T3t.forEach(t),N_r=r(uBe," (Speech2Text model)"),uBe.forEach(t),q_r=i(j),pM=n(j,"LI",{});var _Be=s(pM);a4e=n(_Be,"STRONG",{});var M3t=s(a4e);j_r=r(M3t,"swin"),M3t.forEach(t),D_r=r(_Be," \u2014 "),lH=n(_Be,"A",{href:!0});var E3t=s(lH);G_r=r(E3t,"TFSwinModel"),E3t.forEach(t),O_r=r(_Be," (Swin Transformer model)"),_Be.forEach(t),V_r=i(j),uM=n(j,"LI",{});var bBe=s(uM);n4e=n(bBe,"STRONG",{});var C3t=s(n4e);X_r=r(C3t,"t5"),C3t.forEach(t),z_r=r(bBe," \u2014 "),iH=n(bBe,"A",{href:!0});var w3t=s(iH);W_r=r(w3t,"TFT5Model"),w3t.forEach(t),Q_r=r(bBe," (T5 model)"),bBe.forEach(t),H_r=i(j),_M=n(j,"LI",{});var vBe=s(_M);s4e=n(vBe,"STRONG",{});var A3t=s(s4e);U_r=r(A3t,"tapas"),A3t.forEach(t),J_r=r(vBe," \u2014 "),dH=n(vBe,"A",{href:!0});var y3t=s(dH);Y_r=r(y3t,"TFTapasModel"),y3t.forEach(t),K_r=r(vBe," (TAPAS model)"),vBe.forEach(t),Z_r=i(j),bM=n(j,"LI",{});var FBe=s(bM);l4e=n(FBe,"STRONG",{});var L3t=s(l4e);e2r=r(L3t,"transfo-xl"),L3t.forEach(t),o2r=r(FBe," \u2014 "),cH=n(FBe,"A",{href:!0});var x3t=s(cH);r2r=r(x3t,"TFTransfoXLModel"),x3t.forEach(t),t2r=r(FBe," (Transformer-XL model)"),FBe.forEach(t),a2r=i(j),vM=n(j,"LI",{});var TBe=s(vM);i4e=n(TBe,"STRONG",{});var $3t=s(i4e);n2r=r($3t,"vit"),$3t.forEach(t),s2r=r(TBe," \u2014 "),fH=n(TBe,"A",{href:!0});var k3t=s(fH);l2r=r(k3t,"TFViTModel"),k3t.forEach(t),i2r=r(TBe," (ViT model)"),TBe.forEach(t),d2r=i(j),FM=n(j,"LI",{});var MBe=s(FM);d4e=n(MBe,"STRONG",{});var S3t=s(d4e);c2r=r(S3t,"vit_mae"),S3t.forEach(t),f2r=r(MBe," \u2014 "),mH=n(MBe,"A",{href:!0});var R3t=s(mH);m2r=r(R3t,"TFViTMAEModel"),R3t.forEach(t),g2r=r(MBe," (ViTMAE model)"),MBe.forEach(t),h2r=i(j),TM=n(j,"LI",{});var EBe=s(TM);c4e=n(EBe,"STRONG",{});var P3t=s(c4e);p2r=r(P3t,"wav2vec2"),P3t.forEach(t),u2r=r(EBe," \u2014 "),gH=n(EBe,"A",{href:!0});var B3t=s(gH);_2r=r(B3t,"TFWav2Vec2Model"),B3t.forEach(t),b2r=r(EBe," (Wav2Vec2 model)"),EBe.forEach(t),v2r=i(j),MM=n(j,"LI",{});var CBe=s(MM);f4e=n(CBe,"STRONG",{});var I3t=s(f4e);F2r=r(I3t,"xlm"),I3t.forEach(t),T2r=r(CBe," \u2014 "),hH=n(CBe,"A",{href:!0});var N3t=s(hH);M2r=r(N3t,"TFXLMModel"),N3t.forEach(t),E2r=r(CBe," (XLM model)"),CBe.forEach(t),C2r=i(j),EM=n(j,"LI",{});var wBe=s(EM);m4e=n(wBe,"STRONG",{});var q3t=s(m4e);w2r=r(q3t,"xlm-roberta"),q3t.forEach(t),A2r=r(wBe," \u2014 "),pH=n(wBe,"A",{href:!0});var j3t=s(pH);y2r=r(j3t,"TFXLMRobertaModel"),j3t.forEach(t),L2r=r(wBe," (XLM-RoBERTa model)"),wBe.forEach(t),x2r=i(j),CM=n(j,"LI",{});var ABe=s(CM);g4e=n(ABe,"STRONG",{});var D3t=s(g4e);$2r=r(D3t,"xlnet"),D3t.forEach(t),k2r=r(ABe," \u2014 "),uH=n(ABe,"A",{href:!0});var G3t=s(uH);S2r=r(G3t,"TFXLNetModel"),G3t.forEach(t),R2r=r(ABe," (XLNet model)"),ABe.forEach(t),j.forEach(t),P2r=i(Ml),T(wM.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),SGe=i(f),rc=n(f,"H2",{class:!0});var DVe=s(rc);AM=n(DVe,"A",{id:!0,class:!0,href:!0});var O3t=s(AM);h4e=n(O3t,"SPAN",{});var V3t=s(h4e);T(t9.$$.fragment,V3t),V3t.forEach(t),O3t.forEach(t),B2r=i(DVe),p4e=n(DVe,"SPAN",{});var X3t=s(p4e);I2r=r(X3t,"TFAutoModelForPreTraining"),X3t.forEach(t),DVe.forEach(t),RGe=i(f),er=n(f,"DIV",{class:!0});var El=s(er);T(a9.$$.fragment,El),N2r=i(El),tc=n(El,"P",{});var Soe=s(tc);q2r=r(Soe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),_H=n(Soe,"A",{href:!0});var z3t=s(_H);j2r=r(z3t,"from_pretrained()"),z3t.forEach(t),D2r=r(Soe," class method or the "),bH=n(Soe,"A",{href:!0});var W3t=s(bH);G2r=r(W3t,"from_config()"),W3t.forEach(t),O2r=r(Soe,` class
method.`),Soe.forEach(t),V2r=i(El),n9=n(El,"P",{});var GVe=s(n9);X2r=r(GVe,"This class cannot be instantiated directly using "),u4e=n(GVe,"CODE",{});var Q3t=s(u4e);z2r=r(Q3t,"__init__()"),Q3t.forEach(t),W2r=r(GVe," (throws an error)."),GVe.forEach(t),Q2r=i(El),St=n(El,"DIV",{class:!0});var m6=s(St);T(s9.$$.fragment,m6),H2r=i(m6),_4e=n(m6,"P",{});var H3t=s(_4e);U2r=r(H3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),H3t.forEach(t),J2r=i(m6),ac=n(m6,"P",{});var Roe=s(ac);Y2r=r(Roe,`Note:
Loading a model from its configuration file does `),b4e=n(Roe,"STRONG",{});var U3t=s(b4e);K2r=r(U3t,"not"),U3t.forEach(t),Z2r=r(Roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(Roe,"A",{href:!0});var J3t=s(vH);e1r=r(J3t,"from_pretrained()"),J3t.forEach(t),o1r=r(Roe," to load the model weights."),Roe.forEach(t),r1r=i(m6),T(yM.$$.fragment,m6),m6.forEach(t),t1r=i(El),Lr=n(El,"DIV",{class:!0});var Cl=s(Lr);T(l9.$$.fragment,Cl),a1r=i(Cl),v4e=n(Cl,"P",{});var Y3t=s(v4e);n1r=r(Y3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Y3t.forEach(t),s1r=i(Cl),nn=n(Cl,"P",{});var g6=s(nn);l1r=r(g6,"The model class to instantiate is selected based on the "),F4e=n(g6,"CODE",{});var K3t=s(F4e);i1r=r(K3t,"model_type"),K3t.forEach(t),d1r=r(g6,` property of the config object (either
passed as an argument or loaded from `),T4e=n(g6,"CODE",{});var Z3t=s(T4e);c1r=r(Z3t,"pretrained_model_name_or_path"),Z3t.forEach(t),f1r=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=n(g6,"CODE",{});var e0t=s(M4e);m1r=r(e0t,"pretrained_model_name_or_path"),e0t.forEach(t),g1r=r(g6,":"),g6.forEach(t),h1r=i(Cl),se=n(Cl,"UL",{});var le=s(se);LM=n(le,"LI",{});var yBe=s(LM);E4e=n(yBe,"STRONG",{});var o0t=s(E4e);p1r=r(o0t,"albert"),o0t.forEach(t),u1r=r(yBe," \u2014 "),FH=n(yBe,"A",{href:!0});var r0t=s(FH);_1r=r(r0t,"TFAlbertForPreTraining"),r0t.forEach(t),b1r=r(yBe," (ALBERT model)"),yBe.forEach(t),v1r=i(le),xM=n(le,"LI",{});var LBe=s(xM);C4e=n(LBe,"STRONG",{});var t0t=s(C4e);F1r=r(t0t,"bart"),t0t.forEach(t),T1r=r(LBe," \u2014 "),TH=n(LBe,"A",{href:!0});var a0t=s(TH);M1r=r(a0t,"TFBartForConditionalGeneration"),a0t.forEach(t),E1r=r(LBe," (BART model)"),LBe.forEach(t),C1r=i(le),$M=n(le,"LI",{});var xBe=s($M);w4e=n(xBe,"STRONG",{});var n0t=s(w4e);w1r=r(n0t,"bert"),n0t.forEach(t),A1r=r(xBe," \u2014 "),MH=n(xBe,"A",{href:!0});var s0t=s(MH);y1r=r(s0t,"TFBertForPreTraining"),s0t.forEach(t),L1r=r(xBe," (BERT model)"),xBe.forEach(t),x1r=i(le),kM=n(le,"LI",{});var $Be=s(kM);A4e=n($Be,"STRONG",{});var l0t=s(A4e);$1r=r(l0t,"camembert"),l0t.forEach(t),k1r=r($Be," \u2014 "),EH=n($Be,"A",{href:!0});var i0t=s(EH);S1r=r(i0t,"TFCamembertForMaskedLM"),i0t.forEach(t),R1r=r($Be," (CamemBERT model)"),$Be.forEach(t),P1r=i(le),SM=n(le,"LI",{});var kBe=s(SM);y4e=n(kBe,"STRONG",{});var d0t=s(y4e);B1r=r(d0t,"ctrl"),d0t.forEach(t),I1r=r(kBe," \u2014 "),CH=n(kBe,"A",{href:!0});var c0t=s(CH);N1r=r(c0t,"TFCTRLLMHeadModel"),c0t.forEach(t),q1r=r(kBe," (CTRL model)"),kBe.forEach(t),j1r=i(le),RM=n(le,"LI",{});var SBe=s(RM);L4e=n(SBe,"STRONG",{});var f0t=s(L4e);D1r=r(f0t,"distilbert"),f0t.forEach(t),G1r=r(SBe," \u2014 "),wH=n(SBe,"A",{href:!0});var m0t=s(wH);O1r=r(m0t,"TFDistilBertForMaskedLM"),m0t.forEach(t),V1r=r(SBe," (DistilBERT model)"),SBe.forEach(t),X1r=i(le),PM=n(le,"LI",{});var RBe=s(PM);x4e=n(RBe,"STRONG",{});var g0t=s(x4e);z1r=r(g0t,"electra"),g0t.forEach(t),W1r=r(RBe," \u2014 "),AH=n(RBe,"A",{href:!0});var h0t=s(AH);Q1r=r(h0t,"TFElectraForPreTraining"),h0t.forEach(t),H1r=r(RBe," (ELECTRA model)"),RBe.forEach(t),U1r=i(le),BM=n(le,"LI",{});var PBe=s(BM);$4e=n(PBe,"STRONG",{});var p0t=s($4e);J1r=r(p0t,"flaubert"),p0t.forEach(t),Y1r=r(PBe," \u2014 "),yH=n(PBe,"A",{href:!0});var u0t=s(yH);K1r=r(u0t,"TFFlaubertWithLMHeadModel"),u0t.forEach(t),Z1r=r(PBe," (FlauBERT model)"),PBe.forEach(t),e7r=i(le),IM=n(le,"LI",{});var BBe=s(IM);k4e=n(BBe,"STRONG",{});var _0t=s(k4e);o7r=r(_0t,"funnel"),_0t.forEach(t),r7r=r(BBe," \u2014 "),LH=n(BBe,"A",{href:!0});var b0t=s(LH);t7r=r(b0t,"TFFunnelForPreTraining"),b0t.forEach(t),a7r=r(BBe," (Funnel Transformer model)"),BBe.forEach(t),n7r=i(le),NM=n(le,"LI",{});var IBe=s(NM);S4e=n(IBe,"STRONG",{});var v0t=s(S4e);s7r=r(v0t,"gpt2"),v0t.forEach(t),l7r=r(IBe," \u2014 "),xH=n(IBe,"A",{href:!0});var F0t=s(xH);i7r=r(F0t,"TFGPT2LMHeadModel"),F0t.forEach(t),d7r=r(IBe," (OpenAI GPT-2 model)"),IBe.forEach(t),c7r=i(le),qM=n(le,"LI",{});var NBe=s(qM);R4e=n(NBe,"STRONG",{});var T0t=s(R4e);f7r=r(T0t,"layoutlm"),T0t.forEach(t),m7r=r(NBe," \u2014 "),$H=n(NBe,"A",{href:!0});var M0t=s($H);g7r=r(M0t,"TFLayoutLMForMaskedLM"),M0t.forEach(t),h7r=r(NBe," (LayoutLM model)"),NBe.forEach(t),p7r=i(le),jM=n(le,"LI",{});var qBe=s(jM);P4e=n(qBe,"STRONG",{});var E0t=s(P4e);u7r=r(E0t,"lxmert"),E0t.forEach(t),_7r=r(qBe," \u2014 "),kH=n(qBe,"A",{href:!0});var C0t=s(kH);b7r=r(C0t,"TFLxmertForPreTraining"),C0t.forEach(t),v7r=r(qBe," (LXMERT model)"),qBe.forEach(t),F7r=i(le),DM=n(le,"LI",{});var jBe=s(DM);B4e=n(jBe,"STRONG",{});var w0t=s(B4e);T7r=r(w0t,"mobilebert"),w0t.forEach(t),M7r=r(jBe," \u2014 "),SH=n(jBe,"A",{href:!0});var A0t=s(SH);E7r=r(A0t,"TFMobileBertForPreTraining"),A0t.forEach(t),C7r=r(jBe," (MobileBERT model)"),jBe.forEach(t),w7r=i(le),GM=n(le,"LI",{});var DBe=s(GM);I4e=n(DBe,"STRONG",{});var y0t=s(I4e);A7r=r(y0t,"mpnet"),y0t.forEach(t),y7r=r(DBe," \u2014 "),RH=n(DBe,"A",{href:!0});var L0t=s(RH);L7r=r(L0t,"TFMPNetForMaskedLM"),L0t.forEach(t),x7r=r(DBe," (MPNet model)"),DBe.forEach(t),$7r=i(le),OM=n(le,"LI",{});var GBe=s(OM);N4e=n(GBe,"STRONG",{});var x0t=s(N4e);k7r=r(x0t,"openai-gpt"),x0t.forEach(t),S7r=r(GBe," \u2014 "),PH=n(GBe,"A",{href:!0});var $0t=s(PH);R7r=r($0t,"TFOpenAIGPTLMHeadModel"),$0t.forEach(t),P7r=r(GBe," (OpenAI GPT model)"),GBe.forEach(t),B7r=i(le),VM=n(le,"LI",{});var OBe=s(VM);q4e=n(OBe,"STRONG",{});var k0t=s(q4e);I7r=r(k0t,"roberta"),k0t.forEach(t),N7r=r(OBe," \u2014 "),BH=n(OBe,"A",{href:!0});var S0t=s(BH);q7r=r(S0t,"TFRobertaForMaskedLM"),S0t.forEach(t),j7r=r(OBe," (RoBERTa model)"),OBe.forEach(t),D7r=i(le),XM=n(le,"LI",{});var VBe=s(XM);j4e=n(VBe,"STRONG",{});var R0t=s(j4e);G7r=r(R0t,"t5"),R0t.forEach(t),O7r=r(VBe," \u2014 "),IH=n(VBe,"A",{href:!0});var P0t=s(IH);V7r=r(P0t,"TFT5ForConditionalGeneration"),P0t.forEach(t),X7r=r(VBe," (T5 model)"),VBe.forEach(t),z7r=i(le),zM=n(le,"LI",{});var XBe=s(zM);D4e=n(XBe,"STRONG",{});var B0t=s(D4e);W7r=r(B0t,"tapas"),B0t.forEach(t),Q7r=r(XBe," \u2014 "),NH=n(XBe,"A",{href:!0});var I0t=s(NH);H7r=r(I0t,"TFTapasForMaskedLM"),I0t.forEach(t),U7r=r(XBe," (TAPAS model)"),XBe.forEach(t),J7r=i(le),WM=n(le,"LI",{});var zBe=s(WM);G4e=n(zBe,"STRONG",{});var N0t=s(G4e);Y7r=r(N0t,"transfo-xl"),N0t.forEach(t),K7r=r(zBe," \u2014 "),qH=n(zBe,"A",{href:!0});var q0t=s(qH);Z7r=r(q0t,"TFTransfoXLLMHeadModel"),q0t.forEach(t),ebr=r(zBe," (Transformer-XL model)"),zBe.forEach(t),obr=i(le),QM=n(le,"LI",{});var WBe=s(QM);O4e=n(WBe,"STRONG",{});var j0t=s(O4e);rbr=r(j0t,"vit_mae"),j0t.forEach(t),tbr=r(WBe," \u2014 "),jH=n(WBe,"A",{href:!0});var D0t=s(jH);abr=r(D0t,"TFViTMAEForPreTraining"),D0t.forEach(t),nbr=r(WBe," (ViTMAE model)"),WBe.forEach(t),sbr=i(le),HM=n(le,"LI",{});var QBe=s(HM);V4e=n(QBe,"STRONG",{});var G0t=s(V4e);lbr=r(G0t,"xlm"),G0t.forEach(t),ibr=r(QBe," \u2014 "),DH=n(QBe,"A",{href:!0});var O0t=s(DH);dbr=r(O0t,"TFXLMWithLMHeadModel"),O0t.forEach(t),cbr=r(QBe," (XLM model)"),QBe.forEach(t),fbr=i(le),UM=n(le,"LI",{});var HBe=s(UM);X4e=n(HBe,"STRONG",{});var V0t=s(X4e);mbr=r(V0t,"xlm-roberta"),V0t.forEach(t),gbr=r(HBe," \u2014 "),GH=n(HBe,"A",{href:!0});var X0t=s(GH);hbr=r(X0t,"TFXLMRobertaForMaskedLM"),X0t.forEach(t),pbr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),ubr=i(le),JM=n(le,"LI",{});var UBe=s(JM);z4e=n(UBe,"STRONG",{});var z0t=s(z4e);_br=r(z0t,"xlnet"),z0t.forEach(t),bbr=r(UBe," \u2014 "),OH=n(UBe,"A",{href:!0});var W0t=s(OH);vbr=r(W0t,"TFXLNetLMHeadModel"),W0t.forEach(t),Fbr=r(UBe," (XLNet model)"),UBe.forEach(t),le.forEach(t),Tbr=i(Cl),T(YM.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),PGe=i(f),nc=n(f,"H2",{class:!0});var OVe=s(nc);KM=n(OVe,"A",{id:!0,class:!0,href:!0});var Q0t=s(KM);W4e=n(Q0t,"SPAN",{});var H0t=s(W4e);T(i9.$$.fragment,H0t),H0t.forEach(t),Q0t.forEach(t),Mbr=i(OVe),Q4e=n(OVe,"SPAN",{});var U0t=s(Q4e);Ebr=r(U0t,"TFAutoModelForCausalLM"),U0t.forEach(t),OVe.forEach(t),BGe=i(f),or=n(f,"DIV",{class:!0});var wl=s(or);T(d9.$$.fragment,wl),Cbr=i(wl),sc=n(wl,"P",{});var Poe=s(sc);wbr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),VH=n(Poe,"A",{href:!0});var J0t=s(VH);Abr=r(J0t,"from_pretrained()"),J0t.forEach(t),ybr=r(Poe," class method or the "),XH=n(Poe,"A",{href:!0});var Y0t=s(XH);Lbr=r(Y0t,"from_config()"),Y0t.forEach(t),xbr=r(Poe,` class
method.`),Poe.forEach(t),$br=i(wl),c9=n(wl,"P",{});var VVe=s(c9);kbr=r(VVe,"This class cannot be instantiated directly using "),H4e=n(VVe,"CODE",{});var K0t=s(H4e);Sbr=r(K0t,"__init__()"),K0t.forEach(t),Rbr=r(VVe," (throws an error)."),VVe.forEach(t),Pbr=i(wl),Rt=n(wl,"DIV",{class:!0});var h6=s(Rt);T(f9.$$.fragment,h6),Bbr=i(h6),U4e=n(h6,"P",{});var Z0t=s(U4e);Ibr=r(Z0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z0t.forEach(t),Nbr=i(h6),lc=n(h6,"P",{});var Boe=s(lc);qbr=r(Boe,`Note:
Loading a model from its configuration file does `),J4e=n(Boe,"STRONG",{});var ewt=s(J4e);jbr=r(ewt,"not"),ewt.forEach(t),Dbr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zH=n(Boe,"A",{href:!0});var owt=s(zH);Gbr=r(owt,"from_pretrained()"),owt.forEach(t),Obr=r(Boe," to load the model weights."),Boe.forEach(t),Vbr=i(h6),T(ZM.$$.fragment,h6),h6.forEach(t),Xbr=i(wl),xr=n(wl,"DIV",{class:!0});var Al=s(xr);T(m9.$$.fragment,Al),zbr=i(Al),Y4e=n(Al,"P",{});var rwt=s(Y4e);Wbr=r(rwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rwt.forEach(t),Qbr=i(Al),sn=n(Al,"P",{});var p6=s(sn);Hbr=r(p6,"The model class to instantiate is selected based on the "),K4e=n(p6,"CODE",{});var twt=s(K4e);Ubr=r(twt,"model_type"),twt.forEach(t),Jbr=r(p6,` property of the config object (either
passed as an argument or loaded from `),Z4e=n(p6,"CODE",{});var awt=s(Z4e);Ybr=r(awt,"pretrained_model_name_or_path"),awt.forEach(t),Kbr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(p6,"CODE",{});var nwt=s(eve);Zbr=r(nwt,"pretrained_model_name_or_path"),nwt.forEach(t),e4r=r(p6,":"),p6.forEach(t),o4r=i(Al),Me=n(Al,"UL",{});var Ce=s(Me);eE=n(Ce,"LI",{});var JBe=s(eE);ove=n(JBe,"STRONG",{});var swt=s(ove);r4r=r(swt,"bert"),swt.forEach(t),t4r=r(JBe," \u2014 "),WH=n(JBe,"A",{href:!0});var lwt=s(WH);a4r=r(lwt,"TFBertLMHeadModel"),lwt.forEach(t),n4r=r(JBe," (BERT model)"),JBe.forEach(t),s4r=i(Ce),oE=n(Ce,"LI",{});var YBe=s(oE);rve=n(YBe,"STRONG",{});var iwt=s(rve);l4r=r(iwt,"camembert"),iwt.forEach(t),i4r=r(YBe," \u2014 "),QH=n(YBe,"A",{href:!0});var dwt=s(QH);d4r=r(dwt,"TFCamembertForCausalLM"),dwt.forEach(t),c4r=r(YBe," (CamemBERT model)"),YBe.forEach(t),f4r=i(Ce),rE=n(Ce,"LI",{});var KBe=s(rE);tve=n(KBe,"STRONG",{});var cwt=s(tve);m4r=r(cwt,"ctrl"),cwt.forEach(t),g4r=r(KBe," \u2014 "),HH=n(KBe,"A",{href:!0});var fwt=s(HH);h4r=r(fwt,"TFCTRLLMHeadModel"),fwt.forEach(t),p4r=r(KBe," (CTRL model)"),KBe.forEach(t),u4r=i(Ce),tE=n(Ce,"LI",{});var ZBe=s(tE);ave=n(ZBe,"STRONG",{});var mwt=s(ave);_4r=r(mwt,"gpt2"),mwt.forEach(t),b4r=r(ZBe," \u2014 "),UH=n(ZBe,"A",{href:!0});var gwt=s(UH);v4r=r(gwt,"TFGPT2LMHeadModel"),gwt.forEach(t),F4r=r(ZBe," (OpenAI GPT-2 model)"),ZBe.forEach(t),T4r=i(Ce),aE=n(Ce,"LI",{});var eIe=s(aE);nve=n(eIe,"STRONG",{});var hwt=s(nve);M4r=r(hwt,"gptj"),hwt.forEach(t),E4r=r(eIe," \u2014 "),JH=n(eIe,"A",{href:!0});var pwt=s(JH);C4r=r(pwt,"TFGPTJForCausalLM"),pwt.forEach(t),w4r=r(eIe," (GPT-J model)"),eIe.forEach(t),A4r=i(Ce),nE=n(Ce,"LI",{});var oIe=s(nE);sve=n(oIe,"STRONG",{});var uwt=s(sve);y4r=r(uwt,"openai-gpt"),uwt.forEach(t),L4r=r(oIe," \u2014 "),YH=n(oIe,"A",{href:!0});var _wt=s(YH);x4r=r(_wt,"TFOpenAIGPTLMHeadModel"),_wt.forEach(t),$4r=r(oIe," (OpenAI GPT model)"),oIe.forEach(t),k4r=i(Ce),sE=n(Ce,"LI",{});var rIe=s(sE);lve=n(rIe,"STRONG",{});var bwt=s(lve);S4r=r(bwt,"opt"),bwt.forEach(t),R4r=r(rIe," \u2014 "),KH=n(rIe,"A",{href:!0});var vwt=s(KH);P4r=r(vwt,"TFOPTForCausalLM"),vwt.forEach(t),B4r=r(rIe," (OPT model)"),rIe.forEach(t),I4r=i(Ce),lE=n(Ce,"LI",{});var tIe=s(lE);ive=n(tIe,"STRONG",{});var Fwt=s(ive);N4r=r(Fwt,"rembert"),Fwt.forEach(t),q4r=r(tIe," \u2014 "),ZH=n(tIe,"A",{href:!0});var Twt=s(ZH);j4r=r(Twt,"TFRemBertForCausalLM"),Twt.forEach(t),D4r=r(tIe," (RemBERT model)"),tIe.forEach(t),G4r=i(Ce),iE=n(Ce,"LI",{});var aIe=s(iE);dve=n(aIe,"STRONG",{});var Mwt=s(dve);O4r=r(Mwt,"roberta"),Mwt.forEach(t),V4r=r(aIe," \u2014 "),eU=n(aIe,"A",{href:!0});var Ewt=s(eU);X4r=r(Ewt,"TFRobertaForCausalLM"),Ewt.forEach(t),z4r=r(aIe," (RoBERTa model)"),aIe.forEach(t),W4r=i(Ce),dE=n(Ce,"LI",{});var nIe=s(dE);cve=n(nIe,"STRONG",{});var Cwt=s(cve);Q4r=r(Cwt,"roformer"),Cwt.forEach(t),H4r=r(nIe," \u2014 "),oU=n(nIe,"A",{href:!0});var wwt=s(oU);U4r=r(wwt,"TFRoFormerForCausalLM"),wwt.forEach(t),J4r=r(nIe," (RoFormer model)"),nIe.forEach(t),Y4r=i(Ce),cE=n(Ce,"LI",{});var sIe=s(cE);fve=n(sIe,"STRONG",{});var Awt=s(fve);K4r=r(Awt,"transfo-xl"),Awt.forEach(t),Z4r=r(sIe," \u2014 "),rU=n(sIe,"A",{href:!0});var ywt=s(rU);evr=r(ywt,"TFTransfoXLLMHeadModel"),ywt.forEach(t),ovr=r(sIe," (Transformer-XL model)"),sIe.forEach(t),rvr=i(Ce),fE=n(Ce,"LI",{});var lIe=s(fE);mve=n(lIe,"STRONG",{});var Lwt=s(mve);tvr=r(Lwt,"xlm"),Lwt.forEach(t),avr=r(lIe," \u2014 "),tU=n(lIe,"A",{href:!0});var xwt=s(tU);nvr=r(xwt,"TFXLMWithLMHeadModel"),xwt.forEach(t),svr=r(lIe," (XLM model)"),lIe.forEach(t),lvr=i(Ce),mE=n(Ce,"LI",{});var iIe=s(mE);gve=n(iIe,"STRONG",{});var $wt=s(gve);ivr=r($wt,"xlnet"),$wt.forEach(t),dvr=r(iIe," \u2014 "),aU=n(iIe,"A",{href:!0});var kwt=s(aU);cvr=r(kwt,"TFXLNetLMHeadModel"),kwt.forEach(t),fvr=r(iIe," (XLNet model)"),iIe.forEach(t),Ce.forEach(t),mvr=i(Al),T(gE.$$.fragment,Al),Al.forEach(t),wl.forEach(t),IGe=i(f),ic=n(f,"H2",{class:!0});var XVe=s(ic);hE=n(XVe,"A",{id:!0,class:!0,href:!0});var Swt=s(hE);hve=n(Swt,"SPAN",{});var Rwt=s(hve);T(g9.$$.fragment,Rwt),Rwt.forEach(t),Swt.forEach(t),gvr=i(XVe),pve=n(XVe,"SPAN",{});var Pwt=s(pve);hvr=r(Pwt,"TFAutoModelForImageClassification"),Pwt.forEach(t),XVe.forEach(t),NGe=i(f),rr=n(f,"DIV",{class:!0});var yl=s(rr);T(h9.$$.fragment,yl),pvr=i(yl),dc=n(yl,"P",{});var Ioe=s(dc);uvr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),nU=n(Ioe,"A",{href:!0});var Bwt=s(nU);_vr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),bvr=r(Ioe," class method or the "),sU=n(Ioe,"A",{href:!0});var Iwt=s(sU);vvr=r(Iwt,"from_config()"),Iwt.forEach(t),Fvr=r(Ioe,` class
method.`),Ioe.forEach(t),Tvr=i(yl),p9=n(yl,"P",{});var zVe=s(p9);Mvr=r(zVe,"This class cannot be instantiated directly using "),uve=n(zVe,"CODE",{});var Nwt=s(uve);Evr=r(Nwt,"__init__()"),Nwt.forEach(t),Cvr=r(zVe," (throws an error)."),zVe.forEach(t),wvr=i(yl),Pt=n(yl,"DIV",{class:!0});var u6=s(Pt);T(u9.$$.fragment,u6),Avr=i(u6),_ve=n(u6,"P",{});var qwt=s(_ve);yvr=r(qwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qwt.forEach(t),Lvr=i(u6),cc=n(u6,"P",{});var Noe=s(cc);xvr=r(Noe,`Note:
Loading a model from its configuration file does `),bve=n(Noe,"STRONG",{});var jwt=s(bve);$vr=r(jwt,"not"),jwt.forEach(t),kvr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),lU=n(Noe,"A",{href:!0});var Dwt=s(lU);Svr=r(Dwt,"from_pretrained()"),Dwt.forEach(t),Rvr=r(Noe," to load the model weights."),Noe.forEach(t),Pvr=i(u6),T(pE.$$.fragment,u6),u6.forEach(t),Bvr=i(yl),$r=n(yl,"DIV",{class:!0});var Ll=s($r);T(_9.$$.fragment,Ll),Ivr=i(Ll),vve=n(Ll,"P",{});var Gwt=s(vve);Nvr=r(Gwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Gwt.forEach(t),qvr=i(Ll),ln=n(Ll,"P",{});var _6=s(ln);jvr=r(_6,"The model class to instantiate is selected based on the "),Fve=n(_6,"CODE",{});var Owt=s(Fve);Dvr=r(Owt,"model_type"),Owt.forEach(t),Gvr=r(_6,` property of the config object (either
passed as an argument or loaded from `),Tve=n(_6,"CODE",{});var Vwt=s(Tve);Ovr=r(Vwt,"pretrained_model_name_or_path"),Vwt.forEach(t),Vvr=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(_6,"CODE",{});var Xwt=s(Mve);Xvr=r(Xwt,"pretrained_model_name_or_path"),Xwt.forEach(t),zvr=r(_6,":"),_6.forEach(t),Wvr=i(Ll),rt=n(Ll,"UL",{});var xl=s(rt);uE=n(xl,"LI",{});var dIe=s(uE);Eve=n(dIe,"STRONG",{});var zwt=s(Eve);Qvr=r(zwt,"convnext"),zwt.forEach(t),Hvr=r(dIe," \u2014 "),iU=n(dIe,"A",{href:!0});var Wwt=s(iU);Uvr=r(Wwt,"TFConvNextForImageClassification"),Wwt.forEach(t),Jvr=r(dIe," (ConvNeXT model)"),dIe.forEach(t),Yvr=i(xl),_E=n(xl,"LI",{});var cIe=s(_E);Cve=n(cIe,"STRONG",{});var Qwt=s(Cve);Kvr=r(Qwt,"data2vec-vision"),Qwt.forEach(t),Zvr=r(cIe," \u2014 "),dU=n(cIe,"A",{href:!0});var Hwt=s(dU);eFr=r(Hwt,"TFData2VecVisionForImageClassification"),Hwt.forEach(t),oFr=r(cIe," (Data2VecVision model)"),cIe.forEach(t),rFr=i(xl),bE=n(xl,"LI",{});var fIe=s(bE);wve=n(fIe,"STRONG",{});var Uwt=s(wve);tFr=r(Uwt,"resnet"),Uwt.forEach(t),aFr=r(fIe," \u2014 "),cU=n(fIe,"A",{href:!0});var Jwt=s(cU);nFr=r(Jwt,"TFResNetForImageClassification"),Jwt.forEach(t),sFr=r(fIe," (ResNet model)"),fIe.forEach(t),lFr=i(xl),vE=n(xl,"LI",{});var mIe=s(vE);Ave=n(mIe,"STRONG",{});var Ywt=s(Ave);iFr=r(Ywt,"swin"),Ywt.forEach(t),dFr=r(mIe," \u2014 "),fU=n(mIe,"A",{href:!0});var Kwt=s(fU);cFr=r(Kwt,"TFSwinForImageClassification"),Kwt.forEach(t),fFr=r(mIe," (Swin Transformer model)"),mIe.forEach(t),mFr=i(xl),FE=n(xl,"LI",{});var gIe=s(FE);yve=n(gIe,"STRONG",{});var Zwt=s(yve);gFr=r(Zwt,"vit"),Zwt.forEach(t),hFr=r(gIe," \u2014 "),mU=n(gIe,"A",{href:!0});var eAt=s(mU);pFr=r(eAt,"TFViTForImageClassification"),eAt.forEach(t),uFr=r(gIe," (ViT model)"),gIe.forEach(t),xl.forEach(t),_Fr=i(Ll),T(TE.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),qGe=i(f),fc=n(f,"H2",{class:!0});var WVe=s(fc);ME=n(WVe,"A",{id:!0,class:!0,href:!0});var oAt=s(ME);Lve=n(oAt,"SPAN",{});var rAt=s(Lve);T(b9.$$.fragment,rAt),rAt.forEach(t),oAt.forEach(t),bFr=i(WVe),xve=n(WVe,"SPAN",{});var tAt=s(xve);vFr=r(tAt,"TFAutoModelForMaskedLM"),tAt.forEach(t),WVe.forEach(t),jGe=i(f),tr=n(f,"DIV",{class:!0});var $l=s(tr);T(v9.$$.fragment,$l),FFr=i($l),mc=n($l,"P",{});var qoe=s(mc);TFr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gU=n(qoe,"A",{href:!0});var aAt=s(gU);MFr=r(aAt,"from_pretrained()"),aAt.forEach(t),EFr=r(qoe," class method or the "),hU=n(qoe,"A",{href:!0});var nAt=s(hU);CFr=r(nAt,"from_config()"),nAt.forEach(t),wFr=r(qoe,` class
method.`),qoe.forEach(t),AFr=i($l),F9=n($l,"P",{});var QVe=s(F9);yFr=r(QVe,"This class cannot be instantiated directly using "),$ve=n(QVe,"CODE",{});var sAt=s($ve);LFr=r(sAt,"__init__()"),sAt.forEach(t),xFr=r(QVe," (throws an error)."),QVe.forEach(t),$Fr=i($l),Bt=n($l,"DIV",{class:!0});var b6=s(Bt);T(T9.$$.fragment,b6),kFr=i(b6),kve=n(b6,"P",{});var lAt=s(kve);SFr=r(lAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),lAt.forEach(t),RFr=i(b6),gc=n(b6,"P",{});var joe=s(gc);PFr=r(joe,`Note:
Loading a model from its configuration file does `),Sve=n(joe,"STRONG",{});var iAt=s(Sve);BFr=r(iAt,"not"),iAt.forEach(t),IFr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),pU=n(joe,"A",{href:!0});var dAt=s(pU);NFr=r(dAt,"from_pretrained()"),dAt.forEach(t),qFr=r(joe," to load the model weights."),joe.forEach(t),jFr=i(b6),T(EE.$$.fragment,b6),b6.forEach(t),DFr=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(M9.$$.fragment,kl),GFr=i(kl),Rve=n(kl,"P",{});var cAt=s(Rve);OFr=r(cAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),cAt.forEach(t),VFr=i(kl),dn=n(kl,"P",{});var v6=s(dn);XFr=r(v6,"The model class to instantiate is selected based on the "),Pve=n(v6,"CODE",{});var fAt=s(Pve);zFr=r(fAt,"model_type"),fAt.forEach(t),WFr=r(v6,` property of the config object (either
passed as an argument or loaded from `),Bve=n(v6,"CODE",{});var mAt=s(Bve);QFr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),HFr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n(v6,"CODE",{});var gAt=s(Ive);UFr=r(gAt,"pretrained_model_name_or_path"),gAt.forEach(t),JFr=r(v6,":"),v6.forEach(t),YFr=i(kl),ie=n(kl,"UL",{});var fe=s(ie);CE=n(fe,"LI",{});var hIe=s(CE);Nve=n(hIe,"STRONG",{});var hAt=s(Nve);KFr=r(hAt,"albert"),hAt.forEach(t),ZFr=r(hIe," \u2014 "),uU=n(hIe,"A",{href:!0});var pAt=s(uU);eTr=r(pAt,"TFAlbertForMaskedLM"),pAt.forEach(t),oTr=r(hIe," (ALBERT model)"),hIe.forEach(t),rTr=i(fe),wE=n(fe,"LI",{});var pIe=s(wE);qve=n(pIe,"STRONG",{});var uAt=s(qve);tTr=r(uAt,"bert"),uAt.forEach(t),aTr=r(pIe," \u2014 "),_U=n(pIe,"A",{href:!0});var _At=s(_U);nTr=r(_At,"TFBertForMaskedLM"),_At.forEach(t),sTr=r(pIe," (BERT model)"),pIe.forEach(t),lTr=i(fe),AE=n(fe,"LI",{});var uIe=s(AE);jve=n(uIe,"STRONG",{});var bAt=s(jve);iTr=r(bAt,"camembert"),bAt.forEach(t),dTr=r(uIe," \u2014 "),bU=n(uIe,"A",{href:!0});var vAt=s(bU);cTr=r(vAt,"TFCamembertForMaskedLM"),vAt.forEach(t),fTr=r(uIe," (CamemBERT model)"),uIe.forEach(t),mTr=i(fe),yE=n(fe,"LI",{});var _Ie=s(yE);Dve=n(_Ie,"STRONG",{});var FAt=s(Dve);gTr=r(FAt,"convbert"),FAt.forEach(t),hTr=r(_Ie," \u2014 "),vU=n(_Ie,"A",{href:!0});var TAt=s(vU);pTr=r(TAt,"TFConvBertForMaskedLM"),TAt.forEach(t),uTr=r(_Ie," (ConvBERT model)"),_Ie.forEach(t),_Tr=i(fe),LE=n(fe,"LI",{});var bIe=s(LE);Gve=n(bIe,"STRONG",{});var MAt=s(Gve);bTr=r(MAt,"deberta"),MAt.forEach(t),vTr=r(bIe," \u2014 "),FU=n(bIe,"A",{href:!0});var EAt=s(FU);FTr=r(EAt,"TFDebertaForMaskedLM"),EAt.forEach(t),TTr=r(bIe," (DeBERTa model)"),bIe.forEach(t),MTr=i(fe),xE=n(fe,"LI",{});var vIe=s(xE);Ove=n(vIe,"STRONG",{});var CAt=s(Ove);ETr=r(CAt,"deberta-v2"),CAt.forEach(t),CTr=r(vIe," \u2014 "),TU=n(vIe,"A",{href:!0});var wAt=s(TU);wTr=r(wAt,"TFDebertaV2ForMaskedLM"),wAt.forEach(t),ATr=r(vIe," (DeBERTa-v2 model)"),vIe.forEach(t),yTr=i(fe),$E=n(fe,"LI",{});var FIe=s($E);Vve=n(FIe,"STRONG",{});var AAt=s(Vve);LTr=r(AAt,"distilbert"),AAt.forEach(t),xTr=r(FIe," \u2014 "),MU=n(FIe,"A",{href:!0});var yAt=s(MU);$Tr=r(yAt,"TFDistilBertForMaskedLM"),yAt.forEach(t),kTr=r(FIe," (DistilBERT model)"),FIe.forEach(t),STr=i(fe),kE=n(fe,"LI",{});var TIe=s(kE);Xve=n(TIe,"STRONG",{});var LAt=s(Xve);RTr=r(LAt,"electra"),LAt.forEach(t),PTr=r(TIe," \u2014 "),EU=n(TIe,"A",{href:!0});var xAt=s(EU);BTr=r(xAt,"TFElectraForMaskedLM"),xAt.forEach(t),ITr=r(TIe," (ELECTRA model)"),TIe.forEach(t),NTr=i(fe),SE=n(fe,"LI",{});var MIe=s(SE);zve=n(MIe,"STRONG",{});var $At=s(zve);qTr=r($At,"flaubert"),$At.forEach(t),jTr=r(MIe," \u2014 "),CU=n(MIe,"A",{href:!0});var kAt=s(CU);DTr=r(kAt,"TFFlaubertWithLMHeadModel"),kAt.forEach(t),GTr=r(MIe," (FlauBERT model)"),MIe.forEach(t),OTr=i(fe),RE=n(fe,"LI",{});var EIe=s(RE);Wve=n(EIe,"STRONG",{});var SAt=s(Wve);VTr=r(SAt,"funnel"),SAt.forEach(t),XTr=r(EIe," \u2014 "),wU=n(EIe,"A",{href:!0});var RAt=s(wU);zTr=r(RAt,"TFFunnelForMaskedLM"),RAt.forEach(t),WTr=r(EIe," (Funnel Transformer model)"),EIe.forEach(t),QTr=i(fe),PE=n(fe,"LI",{});var CIe=s(PE);Qve=n(CIe,"STRONG",{});var PAt=s(Qve);HTr=r(PAt,"layoutlm"),PAt.forEach(t),UTr=r(CIe," \u2014 "),AU=n(CIe,"A",{href:!0});var BAt=s(AU);JTr=r(BAt,"TFLayoutLMForMaskedLM"),BAt.forEach(t),YTr=r(CIe," (LayoutLM model)"),CIe.forEach(t),KTr=i(fe),BE=n(fe,"LI",{});var wIe=s(BE);Hve=n(wIe,"STRONG",{});var IAt=s(Hve);ZTr=r(IAt,"longformer"),IAt.forEach(t),eMr=r(wIe," \u2014 "),yU=n(wIe,"A",{href:!0});var NAt=s(yU);oMr=r(NAt,"TFLongformerForMaskedLM"),NAt.forEach(t),rMr=r(wIe," (Longformer model)"),wIe.forEach(t),tMr=i(fe),IE=n(fe,"LI",{});var AIe=s(IE);Uve=n(AIe,"STRONG",{});var qAt=s(Uve);aMr=r(qAt,"mobilebert"),qAt.forEach(t),nMr=r(AIe," \u2014 "),LU=n(AIe,"A",{href:!0});var jAt=s(LU);sMr=r(jAt,"TFMobileBertForMaskedLM"),jAt.forEach(t),lMr=r(AIe," (MobileBERT model)"),AIe.forEach(t),iMr=i(fe),NE=n(fe,"LI",{});var yIe=s(NE);Jve=n(yIe,"STRONG",{});var DAt=s(Jve);dMr=r(DAt,"mpnet"),DAt.forEach(t),cMr=r(yIe," \u2014 "),xU=n(yIe,"A",{href:!0});var GAt=s(xU);fMr=r(GAt,"TFMPNetForMaskedLM"),GAt.forEach(t),mMr=r(yIe," (MPNet model)"),yIe.forEach(t),gMr=i(fe),qE=n(fe,"LI",{});var LIe=s(qE);Yve=n(LIe,"STRONG",{});var OAt=s(Yve);hMr=r(OAt,"rembert"),OAt.forEach(t),pMr=r(LIe," \u2014 "),$U=n(LIe,"A",{href:!0});var VAt=s($U);uMr=r(VAt,"TFRemBertForMaskedLM"),VAt.forEach(t),_Mr=r(LIe," (RemBERT model)"),LIe.forEach(t),bMr=i(fe),jE=n(fe,"LI",{});var xIe=s(jE);Kve=n(xIe,"STRONG",{});var XAt=s(Kve);vMr=r(XAt,"roberta"),XAt.forEach(t),FMr=r(xIe," \u2014 "),kU=n(xIe,"A",{href:!0});var zAt=s(kU);TMr=r(zAt,"TFRobertaForMaskedLM"),zAt.forEach(t),MMr=r(xIe," (RoBERTa model)"),xIe.forEach(t),EMr=i(fe),DE=n(fe,"LI",{});var $Ie=s(DE);Zve=n($Ie,"STRONG",{});var WAt=s(Zve);CMr=r(WAt,"roformer"),WAt.forEach(t),wMr=r($Ie," \u2014 "),SU=n($Ie,"A",{href:!0});var QAt=s(SU);AMr=r(QAt,"TFRoFormerForMaskedLM"),QAt.forEach(t),yMr=r($Ie," (RoFormer model)"),$Ie.forEach(t),LMr=i(fe),GE=n(fe,"LI",{});var kIe=s(GE);eFe=n(kIe,"STRONG",{});var HAt=s(eFe);xMr=r(HAt,"tapas"),HAt.forEach(t),$Mr=r(kIe," \u2014 "),RU=n(kIe,"A",{href:!0});var UAt=s(RU);kMr=r(UAt,"TFTapasForMaskedLM"),UAt.forEach(t),SMr=r(kIe," (TAPAS model)"),kIe.forEach(t),RMr=i(fe),OE=n(fe,"LI",{});var SIe=s(OE);oFe=n(SIe,"STRONG",{});var JAt=s(oFe);PMr=r(JAt,"xlm"),JAt.forEach(t),BMr=r(SIe," \u2014 "),PU=n(SIe,"A",{href:!0});var YAt=s(PU);IMr=r(YAt,"TFXLMWithLMHeadModel"),YAt.forEach(t),NMr=r(SIe," (XLM model)"),SIe.forEach(t),qMr=i(fe),VE=n(fe,"LI",{});var RIe=s(VE);rFe=n(RIe,"STRONG",{});var KAt=s(rFe);jMr=r(KAt,"xlm-roberta"),KAt.forEach(t),DMr=r(RIe," \u2014 "),BU=n(RIe,"A",{href:!0});var ZAt=s(BU);GMr=r(ZAt,"TFXLMRobertaForMaskedLM"),ZAt.forEach(t),OMr=r(RIe," (XLM-RoBERTa model)"),RIe.forEach(t),fe.forEach(t),VMr=i(kl),T(XE.$$.fragment,kl),kl.forEach(t),$l.forEach(t),DGe=i(f),hc=n(f,"H2",{class:!0});var HVe=s(hc);zE=n(HVe,"A",{id:!0,class:!0,href:!0});var e6t=s(zE);tFe=n(e6t,"SPAN",{});var o6t=s(tFe);T(E9.$$.fragment,o6t),o6t.forEach(t),e6t.forEach(t),XMr=i(HVe),aFe=n(HVe,"SPAN",{});var r6t=s(aFe);zMr=r(r6t,"TFAutoModelForSeq2SeqLM"),r6t.forEach(t),HVe.forEach(t),GGe=i(f),ar=n(f,"DIV",{class:!0});var Sl=s(ar);T(C9.$$.fragment,Sl),WMr=i(Sl),pc=n(Sl,"P",{});var Doe=s(pc);QMr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IU=n(Doe,"A",{href:!0});var t6t=s(IU);HMr=r(t6t,"from_pretrained()"),t6t.forEach(t),UMr=r(Doe," class method or the "),NU=n(Doe,"A",{href:!0});var a6t=s(NU);JMr=r(a6t,"from_config()"),a6t.forEach(t),YMr=r(Doe,` class
method.`),Doe.forEach(t),KMr=i(Sl),w9=n(Sl,"P",{});var UVe=s(w9);ZMr=r(UVe,"This class cannot be instantiated directly using "),nFe=n(UVe,"CODE",{});var n6t=s(nFe);eEr=r(n6t,"__init__()"),n6t.forEach(t),oEr=r(UVe," (throws an error)."),UVe.forEach(t),rEr=i(Sl),It=n(Sl,"DIV",{class:!0});var F6=s(It);T(A9.$$.fragment,F6),tEr=i(F6),sFe=n(F6,"P",{});var s6t=s(sFe);aEr=r(s6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),s6t.forEach(t),nEr=i(F6),uc=n(F6,"P",{});var Goe=s(uc);sEr=r(Goe,`Note:
Loading a model from its configuration file does `),lFe=n(Goe,"STRONG",{});var l6t=s(lFe);lEr=r(l6t,"not"),l6t.forEach(t),iEr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qU=n(Goe,"A",{href:!0});var i6t=s(qU);dEr=r(i6t,"from_pretrained()"),i6t.forEach(t),cEr=r(Goe," to load the model weights."),Goe.forEach(t),fEr=i(F6),T(WE.$$.fragment,F6),F6.forEach(t),mEr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(y9.$$.fragment,Rl),gEr=i(Rl),iFe=n(Rl,"P",{});var d6t=s(iFe);hEr=r(d6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),d6t.forEach(t),pEr=i(Rl),cn=n(Rl,"P",{});var T6=s(cn);uEr=r(T6,"The model class to instantiate is selected based on the "),dFe=n(T6,"CODE",{});var c6t=s(dFe);_Er=r(c6t,"model_type"),c6t.forEach(t),bEr=r(T6,` property of the config object (either
passed as an argument or loaded from `),cFe=n(T6,"CODE",{});var f6t=s(cFe);vEr=r(f6t,"pretrained_model_name_or_path"),f6t.forEach(t),FEr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(T6,"CODE",{});var m6t=s(fFe);TEr=r(m6t,"pretrained_model_name_or_path"),m6t.forEach(t),MEr=r(T6,":"),T6.forEach(t),EEr=i(Rl),Le=n(Rl,"UL",{});var Ie=s(Le);QE=n(Ie,"LI",{});var PIe=s(QE);mFe=n(PIe,"STRONG",{});var g6t=s(mFe);CEr=r(g6t,"bart"),g6t.forEach(t),wEr=r(PIe," \u2014 "),jU=n(PIe,"A",{href:!0});var h6t=s(jU);AEr=r(h6t,"TFBartForConditionalGeneration"),h6t.forEach(t),yEr=r(PIe," (BART model)"),PIe.forEach(t),LEr=i(Ie),HE=n(Ie,"LI",{});var BIe=s(HE);gFe=n(BIe,"STRONG",{});var p6t=s(gFe);xEr=r(p6t,"blenderbot"),p6t.forEach(t),$Er=r(BIe," \u2014 "),DU=n(BIe,"A",{href:!0});var u6t=s(DU);kEr=r(u6t,"TFBlenderbotForConditionalGeneration"),u6t.forEach(t),SEr=r(BIe," (Blenderbot model)"),BIe.forEach(t),REr=i(Ie),UE=n(Ie,"LI",{});var IIe=s(UE);hFe=n(IIe,"STRONG",{});var _6t=s(hFe);PEr=r(_6t,"blenderbot-small"),_6t.forEach(t),BEr=r(IIe," \u2014 "),GU=n(IIe,"A",{href:!0});var b6t=s(GU);IEr=r(b6t,"TFBlenderbotSmallForConditionalGeneration"),b6t.forEach(t),NEr=r(IIe," (BlenderbotSmall model)"),IIe.forEach(t),qEr=i(Ie),JE=n(Ie,"LI",{});var NIe=s(JE);pFe=n(NIe,"STRONG",{});var v6t=s(pFe);jEr=r(v6t,"encoder-decoder"),v6t.forEach(t),DEr=r(NIe," \u2014 "),OU=n(NIe,"A",{href:!0});var F6t=s(OU);GEr=r(F6t,"TFEncoderDecoderModel"),F6t.forEach(t),OEr=r(NIe," (Encoder decoder model)"),NIe.forEach(t),VEr=i(Ie),YE=n(Ie,"LI",{});var qIe=s(YE);uFe=n(qIe,"STRONG",{});var T6t=s(uFe);XEr=r(T6t,"led"),T6t.forEach(t),zEr=r(qIe," \u2014 "),VU=n(qIe,"A",{href:!0});var M6t=s(VU);WEr=r(M6t,"TFLEDForConditionalGeneration"),M6t.forEach(t),QEr=r(qIe," (LED model)"),qIe.forEach(t),HEr=i(Ie),KE=n(Ie,"LI",{});var jIe=s(KE);_Fe=n(jIe,"STRONG",{});var E6t=s(_Fe);UEr=r(E6t,"marian"),E6t.forEach(t),JEr=r(jIe," \u2014 "),XU=n(jIe,"A",{href:!0});var C6t=s(XU);YEr=r(C6t,"TFMarianMTModel"),C6t.forEach(t),KEr=r(jIe," (Marian model)"),jIe.forEach(t),ZEr=i(Ie),ZE=n(Ie,"LI",{});var DIe=s(ZE);bFe=n(DIe,"STRONG",{});var w6t=s(bFe);eCr=r(w6t,"mbart"),w6t.forEach(t),oCr=r(DIe," \u2014 "),zU=n(DIe,"A",{href:!0});var A6t=s(zU);rCr=r(A6t,"TFMBartForConditionalGeneration"),A6t.forEach(t),tCr=r(DIe," (mBART model)"),DIe.forEach(t),aCr=i(Ie),eC=n(Ie,"LI",{});var GIe=s(eC);vFe=n(GIe,"STRONG",{});var y6t=s(vFe);nCr=r(y6t,"mt5"),y6t.forEach(t),sCr=r(GIe," \u2014 "),WU=n(GIe,"A",{href:!0});var L6t=s(WU);lCr=r(L6t,"TFMT5ForConditionalGeneration"),L6t.forEach(t),iCr=r(GIe," (MT5 model)"),GIe.forEach(t),dCr=i(Ie),oC=n(Ie,"LI",{});var OIe=s(oC);FFe=n(OIe,"STRONG",{});var x6t=s(FFe);cCr=r(x6t,"pegasus"),x6t.forEach(t),fCr=r(OIe," \u2014 "),QU=n(OIe,"A",{href:!0});var $6t=s(QU);mCr=r($6t,"TFPegasusForConditionalGeneration"),$6t.forEach(t),gCr=r(OIe," (Pegasus model)"),OIe.forEach(t),hCr=i(Ie),rC=n(Ie,"LI",{});var VIe=s(rC);TFe=n(VIe,"STRONG",{});var k6t=s(TFe);pCr=r(k6t,"t5"),k6t.forEach(t),uCr=r(VIe," \u2014 "),HU=n(VIe,"A",{href:!0});var S6t=s(HU);_Cr=r(S6t,"TFT5ForConditionalGeneration"),S6t.forEach(t),bCr=r(VIe," (T5 model)"),VIe.forEach(t),Ie.forEach(t),vCr=i(Rl),T(tC.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),OGe=i(f),_c=n(f,"H2",{class:!0});var JVe=s(_c);aC=n(JVe,"A",{id:!0,class:!0,href:!0});var R6t=s(aC);MFe=n(R6t,"SPAN",{});var P6t=s(MFe);T(L9.$$.fragment,P6t),P6t.forEach(t),R6t.forEach(t),FCr=i(JVe),EFe=n(JVe,"SPAN",{});var B6t=s(EFe);TCr=r(B6t,"TFAutoModelForSequenceClassification"),B6t.forEach(t),JVe.forEach(t),VGe=i(f),nr=n(f,"DIV",{class:!0});var Pl=s(nr);T(x9.$$.fragment,Pl),MCr=i(Pl),bc=n(Pl,"P",{});var Ooe=s(bc);ECr=r(Ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UU=n(Ooe,"A",{href:!0});var I6t=s(UU);CCr=r(I6t,"from_pretrained()"),I6t.forEach(t),wCr=r(Ooe," class method or the "),JU=n(Ooe,"A",{href:!0});var N6t=s(JU);ACr=r(N6t,"from_config()"),N6t.forEach(t),yCr=r(Ooe,` class
method.`),Ooe.forEach(t),LCr=i(Pl),$9=n(Pl,"P",{});var YVe=s($9);xCr=r(YVe,"This class cannot be instantiated directly using "),CFe=n(YVe,"CODE",{});var q6t=s(CFe);$Cr=r(q6t,"__init__()"),q6t.forEach(t),kCr=r(YVe," (throws an error)."),YVe.forEach(t),SCr=i(Pl),Nt=n(Pl,"DIV",{class:!0});var M6=s(Nt);T(k9.$$.fragment,M6),RCr=i(M6),wFe=n(M6,"P",{});var j6t=s(wFe);PCr=r(j6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),j6t.forEach(t),BCr=i(M6),vc=n(M6,"P",{});var Voe=s(vc);ICr=r(Voe,`Note:
Loading a model from its configuration file does `),AFe=n(Voe,"STRONG",{});var D6t=s(AFe);NCr=r(D6t,"not"),D6t.forEach(t),qCr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(Voe,"A",{href:!0});var G6t=s(YU);jCr=r(G6t,"from_pretrained()"),G6t.forEach(t),DCr=r(Voe," to load the model weights."),Voe.forEach(t),GCr=i(M6),T(nC.$$.fragment,M6),M6.forEach(t),OCr=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(S9.$$.fragment,Bl),VCr=i(Bl),yFe=n(Bl,"P",{});var O6t=s(yFe);XCr=r(O6t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),O6t.forEach(t),zCr=i(Bl),fn=n(Bl,"P",{});var E6=s(fn);WCr=r(E6,"The model class to instantiate is selected based on the "),LFe=n(E6,"CODE",{});var V6t=s(LFe);QCr=r(V6t,"model_type"),V6t.forEach(t),HCr=r(E6,` property of the config object (either
passed as an argument or loaded from `),xFe=n(E6,"CODE",{});var X6t=s(xFe);UCr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),JCr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Fe=n(E6,"CODE",{});var z6t=s($Fe);YCr=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),KCr=r(E6,":"),E6.forEach(t),ZCr=i(Bl),re=n(Bl,"UL",{});var ae=s(re);sC=n(ae,"LI",{});var XIe=s(sC);kFe=n(XIe,"STRONG",{});var W6t=s(kFe);e5r=r(W6t,"albert"),W6t.forEach(t),o5r=r(XIe," \u2014 "),KU=n(XIe,"A",{href:!0});var Q6t=s(KU);r5r=r(Q6t,"TFAlbertForSequenceClassification"),Q6t.forEach(t),t5r=r(XIe," (ALBERT model)"),XIe.forEach(t),a5r=i(ae),lC=n(ae,"LI",{});var zIe=s(lC);SFe=n(zIe,"STRONG",{});var H6t=s(SFe);n5r=r(H6t,"bert"),H6t.forEach(t),s5r=r(zIe," \u2014 "),ZU=n(zIe,"A",{href:!0});var U6t=s(ZU);l5r=r(U6t,"TFBertForSequenceClassification"),U6t.forEach(t),i5r=r(zIe," (BERT model)"),zIe.forEach(t),d5r=i(ae),iC=n(ae,"LI",{});var WIe=s(iC);RFe=n(WIe,"STRONG",{});var J6t=s(RFe);c5r=r(J6t,"camembert"),J6t.forEach(t),f5r=r(WIe," \u2014 "),eJ=n(WIe,"A",{href:!0});var Y6t=s(eJ);m5r=r(Y6t,"TFCamembertForSequenceClassification"),Y6t.forEach(t),g5r=r(WIe," (CamemBERT model)"),WIe.forEach(t),h5r=i(ae),dC=n(ae,"LI",{});var QIe=s(dC);PFe=n(QIe,"STRONG",{});var K6t=s(PFe);p5r=r(K6t,"convbert"),K6t.forEach(t),u5r=r(QIe," \u2014 "),oJ=n(QIe,"A",{href:!0});var Z6t=s(oJ);_5r=r(Z6t,"TFConvBertForSequenceClassification"),Z6t.forEach(t),b5r=r(QIe," (ConvBERT model)"),QIe.forEach(t),v5r=i(ae),cC=n(ae,"LI",{});var HIe=s(cC);BFe=n(HIe,"STRONG",{});var eyt=s(BFe);F5r=r(eyt,"ctrl"),eyt.forEach(t),T5r=r(HIe," \u2014 "),rJ=n(HIe,"A",{href:!0});var oyt=s(rJ);M5r=r(oyt,"TFCTRLForSequenceClassification"),oyt.forEach(t),E5r=r(HIe," (CTRL model)"),HIe.forEach(t),C5r=i(ae),fC=n(ae,"LI",{});var UIe=s(fC);IFe=n(UIe,"STRONG",{});var ryt=s(IFe);w5r=r(ryt,"deberta"),ryt.forEach(t),A5r=r(UIe," \u2014 "),tJ=n(UIe,"A",{href:!0});var tyt=s(tJ);y5r=r(tyt,"TFDebertaForSequenceClassification"),tyt.forEach(t),L5r=r(UIe," (DeBERTa model)"),UIe.forEach(t),x5r=i(ae),mC=n(ae,"LI",{});var JIe=s(mC);NFe=n(JIe,"STRONG",{});var ayt=s(NFe);$5r=r(ayt,"deberta-v2"),ayt.forEach(t),k5r=r(JIe," \u2014 "),aJ=n(JIe,"A",{href:!0});var nyt=s(aJ);S5r=r(nyt,"TFDebertaV2ForSequenceClassification"),nyt.forEach(t),R5r=r(JIe," (DeBERTa-v2 model)"),JIe.forEach(t),P5r=i(ae),gC=n(ae,"LI",{});var YIe=s(gC);qFe=n(YIe,"STRONG",{});var syt=s(qFe);B5r=r(syt,"distilbert"),syt.forEach(t),I5r=r(YIe," \u2014 "),nJ=n(YIe,"A",{href:!0});var lyt=s(nJ);N5r=r(lyt,"TFDistilBertForSequenceClassification"),lyt.forEach(t),q5r=r(YIe," (DistilBERT model)"),YIe.forEach(t),j5r=i(ae),hC=n(ae,"LI",{});var KIe=s(hC);jFe=n(KIe,"STRONG",{});var iyt=s(jFe);D5r=r(iyt,"electra"),iyt.forEach(t),G5r=r(KIe," \u2014 "),sJ=n(KIe,"A",{href:!0});var dyt=s(sJ);O5r=r(dyt,"TFElectraForSequenceClassification"),dyt.forEach(t),V5r=r(KIe," (ELECTRA model)"),KIe.forEach(t),X5r=i(ae),pC=n(ae,"LI",{});var ZIe=s(pC);DFe=n(ZIe,"STRONG",{});var cyt=s(DFe);z5r=r(cyt,"flaubert"),cyt.forEach(t),W5r=r(ZIe," \u2014 "),lJ=n(ZIe,"A",{href:!0});var fyt=s(lJ);Q5r=r(fyt,"TFFlaubertForSequenceClassification"),fyt.forEach(t),H5r=r(ZIe," (FlauBERT model)"),ZIe.forEach(t),U5r=i(ae),uC=n(ae,"LI",{});var eNe=s(uC);GFe=n(eNe,"STRONG",{});var myt=s(GFe);J5r=r(myt,"funnel"),myt.forEach(t),Y5r=r(eNe," \u2014 "),iJ=n(eNe,"A",{href:!0});var gyt=s(iJ);K5r=r(gyt,"TFFunnelForSequenceClassification"),gyt.forEach(t),Z5r=r(eNe," (Funnel Transformer model)"),eNe.forEach(t),e3r=i(ae),_C=n(ae,"LI",{});var oNe=s(_C);OFe=n(oNe,"STRONG",{});var hyt=s(OFe);o3r=r(hyt,"gpt2"),hyt.forEach(t),r3r=r(oNe," \u2014 "),dJ=n(oNe,"A",{href:!0});var pyt=s(dJ);t3r=r(pyt,"TFGPT2ForSequenceClassification"),pyt.forEach(t),a3r=r(oNe," (OpenAI GPT-2 model)"),oNe.forEach(t),n3r=i(ae),bC=n(ae,"LI",{});var rNe=s(bC);VFe=n(rNe,"STRONG",{});var uyt=s(VFe);s3r=r(uyt,"gptj"),uyt.forEach(t),l3r=r(rNe," \u2014 "),cJ=n(rNe,"A",{href:!0});var _yt=s(cJ);i3r=r(_yt,"TFGPTJForSequenceClassification"),_yt.forEach(t),d3r=r(rNe," (GPT-J model)"),rNe.forEach(t),c3r=i(ae),vC=n(ae,"LI",{});var tNe=s(vC);XFe=n(tNe,"STRONG",{});var byt=s(XFe);f3r=r(byt,"layoutlm"),byt.forEach(t),m3r=r(tNe," \u2014 "),fJ=n(tNe,"A",{href:!0});var vyt=s(fJ);g3r=r(vyt,"TFLayoutLMForSequenceClassification"),vyt.forEach(t),h3r=r(tNe," (LayoutLM model)"),tNe.forEach(t),p3r=i(ae),FC=n(ae,"LI",{});var aNe=s(FC);zFe=n(aNe,"STRONG",{});var Fyt=s(zFe);u3r=r(Fyt,"longformer"),Fyt.forEach(t),_3r=r(aNe," \u2014 "),mJ=n(aNe,"A",{href:!0});var Tyt=s(mJ);b3r=r(Tyt,"TFLongformerForSequenceClassification"),Tyt.forEach(t),v3r=r(aNe," (Longformer model)"),aNe.forEach(t),F3r=i(ae),TC=n(ae,"LI",{});var nNe=s(TC);WFe=n(nNe,"STRONG",{});var Myt=s(WFe);T3r=r(Myt,"mobilebert"),Myt.forEach(t),M3r=r(nNe," \u2014 "),gJ=n(nNe,"A",{href:!0});var Eyt=s(gJ);E3r=r(Eyt,"TFMobileBertForSequenceClassification"),Eyt.forEach(t),C3r=r(nNe," (MobileBERT model)"),nNe.forEach(t),w3r=i(ae),MC=n(ae,"LI",{});var sNe=s(MC);QFe=n(sNe,"STRONG",{});var Cyt=s(QFe);A3r=r(Cyt,"mpnet"),Cyt.forEach(t),y3r=r(sNe," \u2014 "),hJ=n(sNe,"A",{href:!0});var wyt=s(hJ);L3r=r(wyt,"TFMPNetForSequenceClassification"),wyt.forEach(t),x3r=r(sNe," (MPNet model)"),sNe.forEach(t),$3r=i(ae),EC=n(ae,"LI",{});var lNe=s(EC);HFe=n(lNe,"STRONG",{});var Ayt=s(HFe);k3r=r(Ayt,"openai-gpt"),Ayt.forEach(t),S3r=r(lNe," \u2014 "),pJ=n(lNe,"A",{href:!0});var yyt=s(pJ);R3r=r(yyt,"TFOpenAIGPTForSequenceClassification"),yyt.forEach(t),P3r=r(lNe," (OpenAI GPT model)"),lNe.forEach(t),B3r=i(ae),CC=n(ae,"LI",{});var iNe=s(CC);UFe=n(iNe,"STRONG",{});var Lyt=s(UFe);I3r=r(Lyt,"rembert"),Lyt.forEach(t),N3r=r(iNe," \u2014 "),uJ=n(iNe,"A",{href:!0});var xyt=s(uJ);q3r=r(xyt,"TFRemBertForSequenceClassification"),xyt.forEach(t),j3r=r(iNe," (RemBERT model)"),iNe.forEach(t),D3r=i(ae),wC=n(ae,"LI",{});var dNe=s(wC);JFe=n(dNe,"STRONG",{});var $yt=s(JFe);G3r=r($yt,"roberta"),$yt.forEach(t),O3r=r(dNe," \u2014 "),_J=n(dNe,"A",{href:!0});var kyt=s(_J);V3r=r(kyt,"TFRobertaForSequenceClassification"),kyt.forEach(t),X3r=r(dNe," (RoBERTa model)"),dNe.forEach(t),z3r=i(ae),AC=n(ae,"LI",{});var cNe=s(AC);YFe=n(cNe,"STRONG",{});var Syt=s(YFe);W3r=r(Syt,"roformer"),Syt.forEach(t),Q3r=r(cNe," \u2014 "),bJ=n(cNe,"A",{href:!0});var Ryt=s(bJ);H3r=r(Ryt,"TFRoFormerForSequenceClassification"),Ryt.forEach(t),U3r=r(cNe," (RoFormer model)"),cNe.forEach(t),J3r=i(ae),yC=n(ae,"LI",{});var fNe=s(yC);KFe=n(fNe,"STRONG",{});var Pyt=s(KFe);Y3r=r(Pyt,"tapas"),Pyt.forEach(t),K3r=r(fNe," \u2014 "),vJ=n(fNe,"A",{href:!0});var Byt=s(vJ);Z3r=r(Byt,"TFTapasForSequenceClassification"),Byt.forEach(t),e0r=r(fNe," (TAPAS model)"),fNe.forEach(t),o0r=i(ae),LC=n(ae,"LI",{});var mNe=s(LC);ZFe=n(mNe,"STRONG",{});var Iyt=s(ZFe);r0r=r(Iyt,"transfo-xl"),Iyt.forEach(t),t0r=r(mNe," \u2014 "),FJ=n(mNe,"A",{href:!0});var Nyt=s(FJ);a0r=r(Nyt,"TFTransfoXLForSequenceClassification"),Nyt.forEach(t),n0r=r(mNe," (Transformer-XL model)"),mNe.forEach(t),s0r=i(ae),xC=n(ae,"LI",{});var gNe=s(xC);eTe=n(gNe,"STRONG",{});var qyt=s(eTe);l0r=r(qyt,"xlm"),qyt.forEach(t),i0r=r(gNe," \u2014 "),TJ=n(gNe,"A",{href:!0});var jyt=s(TJ);d0r=r(jyt,"TFXLMForSequenceClassification"),jyt.forEach(t),c0r=r(gNe," (XLM model)"),gNe.forEach(t),f0r=i(ae),$C=n(ae,"LI",{});var hNe=s($C);oTe=n(hNe,"STRONG",{});var Dyt=s(oTe);m0r=r(Dyt,"xlm-roberta"),Dyt.forEach(t),g0r=r(hNe," \u2014 "),MJ=n(hNe,"A",{href:!0});var Gyt=s(MJ);h0r=r(Gyt,"TFXLMRobertaForSequenceClassification"),Gyt.forEach(t),p0r=r(hNe," (XLM-RoBERTa model)"),hNe.forEach(t),u0r=i(ae),kC=n(ae,"LI",{});var pNe=s(kC);rTe=n(pNe,"STRONG",{});var Oyt=s(rTe);_0r=r(Oyt,"xlnet"),Oyt.forEach(t),b0r=r(pNe," \u2014 "),EJ=n(pNe,"A",{href:!0});var Vyt=s(EJ);v0r=r(Vyt,"TFXLNetForSequenceClassification"),Vyt.forEach(t),F0r=r(pNe," (XLNet model)"),pNe.forEach(t),ae.forEach(t),T0r=i(Bl),T(SC.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),XGe=i(f),Fc=n(f,"H2",{class:!0});var KVe=s(Fc);RC=n(KVe,"A",{id:!0,class:!0,href:!0});var Xyt=s(RC);tTe=n(Xyt,"SPAN",{});var zyt=s(tTe);T(R9.$$.fragment,zyt),zyt.forEach(t),Xyt.forEach(t),M0r=i(KVe),aTe=n(KVe,"SPAN",{});var Wyt=s(aTe);E0r=r(Wyt,"TFAutoModelForMultipleChoice"),Wyt.forEach(t),KVe.forEach(t),zGe=i(f),sr=n(f,"DIV",{class:!0});var Il=s(sr);T(P9.$$.fragment,Il),C0r=i(Il),Tc=n(Il,"P",{});var Xoe=s(Tc);w0r=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),CJ=n(Xoe,"A",{href:!0});var Qyt=s(CJ);A0r=r(Qyt,"from_pretrained()"),Qyt.forEach(t),y0r=r(Xoe," class method or the "),wJ=n(Xoe,"A",{href:!0});var Hyt=s(wJ);L0r=r(Hyt,"from_config()"),Hyt.forEach(t),x0r=r(Xoe,` class
method.`),Xoe.forEach(t),$0r=i(Il),B9=n(Il,"P",{});var ZVe=s(B9);k0r=r(ZVe,"This class cannot be instantiated directly using "),nTe=n(ZVe,"CODE",{});var Uyt=s(nTe);S0r=r(Uyt,"__init__()"),Uyt.forEach(t),R0r=r(ZVe," (throws an error)."),ZVe.forEach(t),P0r=i(Il),qt=n(Il,"DIV",{class:!0});var C6=s(qt);T(I9.$$.fragment,C6),B0r=i(C6),sTe=n(C6,"P",{});var Jyt=s(sTe);I0r=r(Jyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Jyt.forEach(t),N0r=i(C6),Mc=n(C6,"P",{});var zoe=s(Mc);q0r=r(zoe,`Note:
Loading a model from its configuration file does `),lTe=n(zoe,"STRONG",{});var Yyt=s(lTe);j0r=r(Yyt,"not"),Yyt.forEach(t),D0r=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AJ=n(zoe,"A",{href:!0});var Kyt=s(AJ);G0r=r(Kyt,"from_pretrained()"),Kyt.forEach(t),O0r=r(zoe," to load the model weights."),zoe.forEach(t),V0r=i(C6),T(PC.$$.fragment,C6),C6.forEach(t),X0r=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(N9.$$.fragment,Nl),z0r=i(Nl),iTe=n(Nl,"P",{});var Zyt=s(iTe);W0r=r(Zyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Zyt.forEach(t),Q0r=i(Nl),mn=n(Nl,"P",{});var w6=s(mn);H0r=r(w6,"The model class to instantiate is selected based on the "),dTe=n(w6,"CODE",{});var eLt=s(dTe);U0r=r(eLt,"model_type"),eLt.forEach(t),J0r=r(w6,` property of the config object (either
passed as an argument or loaded from `),cTe=n(w6,"CODE",{});var oLt=s(cTe);Y0r=r(oLt,"pretrained_model_name_or_path"),oLt.forEach(t),K0r=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fTe=n(w6,"CODE",{});var rLt=s(fTe);Z0r=r(rLt,"pretrained_model_name_or_path"),rLt.forEach(t),ewr=r(w6,":"),w6.forEach(t),owr=i(Nl),pe=n(Nl,"UL",{});var be=s(pe);BC=n(be,"LI",{});var uNe=s(BC);mTe=n(uNe,"STRONG",{});var tLt=s(mTe);rwr=r(tLt,"albert"),tLt.forEach(t),twr=r(uNe," \u2014 "),yJ=n(uNe,"A",{href:!0});var aLt=s(yJ);awr=r(aLt,"TFAlbertForMultipleChoice"),aLt.forEach(t),nwr=r(uNe," (ALBERT model)"),uNe.forEach(t),swr=i(be),IC=n(be,"LI",{});var _Ne=s(IC);gTe=n(_Ne,"STRONG",{});var nLt=s(gTe);lwr=r(nLt,"bert"),nLt.forEach(t),iwr=r(_Ne," \u2014 "),LJ=n(_Ne,"A",{href:!0});var sLt=s(LJ);dwr=r(sLt,"TFBertForMultipleChoice"),sLt.forEach(t),cwr=r(_Ne," (BERT model)"),_Ne.forEach(t),fwr=i(be),NC=n(be,"LI",{});var bNe=s(NC);hTe=n(bNe,"STRONG",{});var lLt=s(hTe);mwr=r(lLt,"camembert"),lLt.forEach(t),gwr=r(bNe," \u2014 "),xJ=n(bNe,"A",{href:!0});var iLt=s(xJ);hwr=r(iLt,"TFCamembertForMultipleChoice"),iLt.forEach(t),pwr=r(bNe," (CamemBERT model)"),bNe.forEach(t),uwr=i(be),qC=n(be,"LI",{});var vNe=s(qC);pTe=n(vNe,"STRONG",{});var dLt=s(pTe);_wr=r(dLt,"convbert"),dLt.forEach(t),bwr=r(vNe," \u2014 "),$J=n(vNe,"A",{href:!0});var cLt=s($J);vwr=r(cLt,"TFConvBertForMultipleChoice"),cLt.forEach(t),Fwr=r(vNe," (ConvBERT model)"),vNe.forEach(t),Twr=i(be),jC=n(be,"LI",{});var FNe=s(jC);uTe=n(FNe,"STRONG",{});var fLt=s(uTe);Mwr=r(fLt,"distilbert"),fLt.forEach(t),Ewr=r(FNe," \u2014 "),kJ=n(FNe,"A",{href:!0});var mLt=s(kJ);Cwr=r(mLt,"TFDistilBertForMultipleChoice"),mLt.forEach(t),wwr=r(FNe," (DistilBERT model)"),FNe.forEach(t),Awr=i(be),DC=n(be,"LI",{});var TNe=s(DC);_Te=n(TNe,"STRONG",{});var gLt=s(_Te);ywr=r(gLt,"electra"),gLt.forEach(t),Lwr=r(TNe," \u2014 "),SJ=n(TNe,"A",{href:!0});var hLt=s(SJ);xwr=r(hLt,"TFElectraForMultipleChoice"),hLt.forEach(t),$wr=r(TNe," (ELECTRA model)"),TNe.forEach(t),kwr=i(be),GC=n(be,"LI",{});var MNe=s(GC);bTe=n(MNe,"STRONG",{});var pLt=s(bTe);Swr=r(pLt,"flaubert"),pLt.forEach(t),Rwr=r(MNe," \u2014 "),RJ=n(MNe,"A",{href:!0});var uLt=s(RJ);Pwr=r(uLt,"TFFlaubertForMultipleChoice"),uLt.forEach(t),Bwr=r(MNe," (FlauBERT model)"),MNe.forEach(t),Iwr=i(be),OC=n(be,"LI",{});var ENe=s(OC);vTe=n(ENe,"STRONG",{});var _Lt=s(vTe);Nwr=r(_Lt,"funnel"),_Lt.forEach(t),qwr=r(ENe," \u2014 "),PJ=n(ENe,"A",{href:!0});var bLt=s(PJ);jwr=r(bLt,"TFFunnelForMultipleChoice"),bLt.forEach(t),Dwr=r(ENe," (Funnel Transformer model)"),ENe.forEach(t),Gwr=i(be),VC=n(be,"LI",{});var CNe=s(VC);FTe=n(CNe,"STRONG",{});var vLt=s(FTe);Owr=r(vLt,"longformer"),vLt.forEach(t),Vwr=r(CNe," \u2014 "),BJ=n(CNe,"A",{href:!0});var FLt=s(BJ);Xwr=r(FLt,"TFLongformerForMultipleChoice"),FLt.forEach(t),zwr=r(CNe," (Longformer model)"),CNe.forEach(t),Wwr=i(be),XC=n(be,"LI",{});var wNe=s(XC);TTe=n(wNe,"STRONG",{});var TLt=s(TTe);Qwr=r(TLt,"mobilebert"),TLt.forEach(t),Hwr=r(wNe," \u2014 "),IJ=n(wNe,"A",{href:!0});var MLt=s(IJ);Uwr=r(MLt,"TFMobileBertForMultipleChoice"),MLt.forEach(t),Jwr=r(wNe," (MobileBERT model)"),wNe.forEach(t),Ywr=i(be),zC=n(be,"LI",{});var ANe=s(zC);MTe=n(ANe,"STRONG",{});var ELt=s(MTe);Kwr=r(ELt,"mpnet"),ELt.forEach(t),Zwr=r(ANe," \u2014 "),NJ=n(ANe,"A",{href:!0});var CLt=s(NJ);eAr=r(CLt,"TFMPNetForMultipleChoice"),CLt.forEach(t),oAr=r(ANe," (MPNet model)"),ANe.forEach(t),rAr=i(be),WC=n(be,"LI",{});var yNe=s(WC);ETe=n(yNe,"STRONG",{});var wLt=s(ETe);tAr=r(wLt,"rembert"),wLt.forEach(t),aAr=r(yNe," \u2014 "),qJ=n(yNe,"A",{href:!0});var ALt=s(qJ);nAr=r(ALt,"TFRemBertForMultipleChoice"),ALt.forEach(t),sAr=r(yNe," (RemBERT model)"),yNe.forEach(t),lAr=i(be),QC=n(be,"LI",{});var LNe=s(QC);CTe=n(LNe,"STRONG",{});var yLt=s(CTe);iAr=r(yLt,"roberta"),yLt.forEach(t),dAr=r(LNe," \u2014 "),jJ=n(LNe,"A",{href:!0});var LLt=s(jJ);cAr=r(LLt,"TFRobertaForMultipleChoice"),LLt.forEach(t),fAr=r(LNe," (RoBERTa model)"),LNe.forEach(t),mAr=i(be),HC=n(be,"LI",{});var xNe=s(HC);wTe=n(xNe,"STRONG",{});var xLt=s(wTe);gAr=r(xLt,"roformer"),xLt.forEach(t),hAr=r(xNe," \u2014 "),DJ=n(xNe,"A",{href:!0});var $Lt=s(DJ);pAr=r($Lt,"TFRoFormerForMultipleChoice"),$Lt.forEach(t),uAr=r(xNe," (RoFormer model)"),xNe.forEach(t),_Ar=i(be),UC=n(be,"LI",{});var $Ne=s(UC);ATe=n($Ne,"STRONG",{});var kLt=s(ATe);bAr=r(kLt,"xlm"),kLt.forEach(t),vAr=r($Ne," \u2014 "),GJ=n($Ne,"A",{href:!0});var SLt=s(GJ);FAr=r(SLt,"TFXLMForMultipleChoice"),SLt.forEach(t),TAr=r($Ne," (XLM model)"),$Ne.forEach(t),MAr=i(be),JC=n(be,"LI",{});var kNe=s(JC);yTe=n(kNe,"STRONG",{});var RLt=s(yTe);EAr=r(RLt,"xlm-roberta"),RLt.forEach(t),CAr=r(kNe," \u2014 "),OJ=n(kNe,"A",{href:!0});var PLt=s(OJ);wAr=r(PLt,"TFXLMRobertaForMultipleChoice"),PLt.forEach(t),AAr=r(kNe," (XLM-RoBERTa model)"),kNe.forEach(t),yAr=i(be),YC=n(be,"LI",{});var SNe=s(YC);LTe=n(SNe,"STRONG",{});var BLt=s(LTe);LAr=r(BLt,"xlnet"),BLt.forEach(t),xAr=r(SNe," \u2014 "),VJ=n(SNe,"A",{href:!0});var ILt=s(VJ);$Ar=r(ILt,"TFXLNetForMultipleChoice"),ILt.forEach(t),kAr=r(SNe," (XLNet model)"),SNe.forEach(t),be.forEach(t),SAr=i(Nl),T(KC.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),WGe=i(f),Ec=n(f,"H2",{class:!0});var eXe=s(Ec);ZC=n(eXe,"A",{id:!0,class:!0,href:!0});var NLt=s(ZC);xTe=n(NLt,"SPAN",{});var qLt=s(xTe);T(q9.$$.fragment,qLt),qLt.forEach(t),NLt.forEach(t),RAr=i(eXe),$Te=n(eXe,"SPAN",{});var jLt=s($Te);PAr=r(jLt,"TFAutoModelForNextSentencePrediction"),jLt.forEach(t),eXe.forEach(t),QGe=i(f),lr=n(f,"DIV",{class:!0});var ql=s(lr);T(j9.$$.fragment,ql),BAr=i(ql),Cc=n(ql,"P",{});var Woe=s(Cc);IAr=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),XJ=n(Woe,"A",{href:!0});var DLt=s(XJ);NAr=r(DLt,"from_pretrained()"),DLt.forEach(t),qAr=r(Woe," class method or the "),zJ=n(Woe,"A",{href:!0});var GLt=s(zJ);jAr=r(GLt,"from_config()"),GLt.forEach(t),DAr=r(Woe,` class
method.`),Woe.forEach(t),GAr=i(ql),D9=n(ql,"P",{});var oXe=s(D9);OAr=r(oXe,"This class cannot be instantiated directly using "),kTe=n(oXe,"CODE",{});var OLt=s(kTe);VAr=r(OLt,"__init__()"),OLt.forEach(t),XAr=r(oXe," (throws an error)."),oXe.forEach(t),zAr=i(ql),jt=n(ql,"DIV",{class:!0});var A6=s(jt);T(G9.$$.fragment,A6),WAr=i(A6),STe=n(A6,"P",{});var VLt=s(STe);QAr=r(VLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),VLt.forEach(t),HAr=i(A6),wc=n(A6,"P",{});var Qoe=s(wc);UAr=r(Qoe,`Note:
Loading a model from its configuration file does `),RTe=n(Qoe,"STRONG",{});var XLt=s(RTe);JAr=r(XLt,"not"),XLt.forEach(t),YAr=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Qoe,"A",{href:!0});var zLt=s(WJ);KAr=r(zLt,"from_pretrained()"),zLt.forEach(t),ZAr=r(Qoe," to load the model weights."),Qoe.forEach(t),e6r=i(A6),T(e5.$$.fragment,A6),A6.forEach(t),o6r=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(O9.$$.fragment,jl),r6r=i(jl),PTe=n(jl,"P",{});var WLt=s(PTe);t6r=r(WLt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WLt.forEach(t),a6r=i(jl),gn=n(jl,"P",{});var y6=s(gn);n6r=r(y6,"The model class to instantiate is selected based on the "),BTe=n(y6,"CODE",{});var QLt=s(BTe);s6r=r(QLt,"model_type"),QLt.forEach(t),l6r=r(y6,` property of the config object (either
passed as an argument or loaded from `),ITe=n(y6,"CODE",{});var HLt=s(ITe);i6r=r(HLt,"pretrained_model_name_or_path"),HLt.forEach(t),d6r=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(y6,"CODE",{});var ULt=s(NTe);c6r=r(ULt,"pretrained_model_name_or_path"),ULt.forEach(t),f6r=r(y6,":"),y6.forEach(t),m6r=i(jl),V9=n(jl,"UL",{});var rXe=s(V9);o5=n(rXe,"LI",{});var RNe=s(o5);qTe=n(RNe,"STRONG",{});var JLt=s(qTe);g6r=r(JLt,"bert"),JLt.forEach(t),h6r=r(RNe," \u2014 "),QJ=n(RNe,"A",{href:!0});var YLt=s(QJ);p6r=r(YLt,"TFBertForNextSentencePrediction"),YLt.forEach(t),u6r=r(RNe," (BERT model)"),RNe.forEach(t),_6r=i(rXe),r5=n(rXe,"LI",{});var PNe=s(r5);jTe=n(PNe,"STRONG",{});var KLt=s(jTe);b6r=r(KLt,"mobilebert"),KLt.forEach(t),v6r=r(PNe," \u2014 "),HJ=n(PNe,"A",{href:!0});var ZLt=s(HJ);F6r=r(ZLt,"TFMobileBertForNextSentencePrediction"),ZLt.forEach(t),T6r=r(PNe," (MobileBERT model)"),PNe.forEach(t),rXe.forEach(t),M6r=i(jl),T(t5.$$.fragment,jl),jl.forEach(t),ql.forEach(t),HGe=i(f),Ac=n(f,"H2",{class:!0});var tXe=s(Ac);a5=n(tXe,"A",{id:!0,class:!0,href:!0});var e8t=s(a5);DTe=n(e8t,"SPAN",{});var o8t=s(DTe);T(X9.$$.fragment,o8t),o8t.forEach(t),e8t.forEach(t),E6r=i(tXe),GTe=n(tXe,"SPAN",{});var r8t=s(GTe);C6r=r(r8t,"TFAutoModelForTableQuestionAnswering"),r8t.forEach(t),tXe.forEach(t),UGe=i(f),ir=n(f,"DIV",{class:!0});var Dl=s(ir);T(z9.$$.fragment,Dl),w6r=i(Dl),yc=n(Dl,"P",{});var Hoe=s(yc);A6r=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),UJ=n(Hoe,"A",{href:!0});var t8t=s(UJ);y6r=r(t8t,"from_pretrained()"),t8t.forEach(t),L6r=r(Hoe," class method or the "),JJ=n(Hoe,"A",{href:!0});var a8t=s(JJ);x6r=r(a8t,"from_config()"),a8t.forEach(t),$6r=r(Hoe,` class
method.`),Hoe.forEach(t),k6r=i(Dl),W9=n(Dl,"P",{});var aXe=s(W9);S6r=r(aXe,"This class cannot be instantiated directly using "),OTe=n(aXe,"CODE",{});var n8t=s(OTe);R6r=r(n8t,"__init__()"),n8t.forEach(t),P6r=r(aXe," (throws an error)."),aXe.forEach(t),B6r=i(Dl),Dt=n(Dl,"DIV",{class:!0});var L6=s(Dt);T(Q9.$$.fragment,L6),I6r=i(L6),VTe=n(L6,"P",{});var s8t=s(VTe);N6r=r(s8t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),s8t.forEach(t),q6r=i(L6),Lc=n(L6,"P",{});var Uoe=s(Lc);j6r=r(Uoe,`Note:
Loading a model from its configuration file does `),XTe=n(Uoe,"STRONG",{});var l8t=s(XTe);D6r=r(l8t,"not"),l8t.forEach(t),G6r=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),YJ=n(Uoe,"A",{href:!0});var i8t=s(YJ);O6r=r(i8t,"from_pretrained()"),i8t.forEach(t),V6r=r(Uoe," to load the model weights."),Uoe.forEach(t),X6r=i(L6),T(n5.$$.fragment,L6),L6.forEach(t),z6r=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(H9.$$.fragment,Gl),W6r=i(Gl),zTe=n(Gl,"P",{});var d8t=s(zTe);Q6r=r(d8t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),d8t.forEach(t),H6r=i(Gl),hn=n(Gl,"P",{});var x6=s(hn);U6r=r(x6,"The model class to instantiate is selected based on the "),WTe=n(x6,"CODE",{});var c8t=s(WTe);J6r=r(c8t,"model_type"),c8t.forEach(t),Y6r=r(x6,` property of the config object (either
passed as an argument or loaded from `),QTe=n(x6,"CODE",{});var f8t=s(QTe);K6r=r(f8t,"pretrained_model_name_or_path"),f8t.forEach(t),Z6r=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HTe=n(x6,"CODE",{});var m8t=s(HTe);eyr=r(m8t,"pretrained_model_name_or_path"),m8t.forEach(t),oyr=r(x6,":"),x6.forEach(t),ryr=i(Gl),UTe=n(Gl,"UL",{});var g8t=s(UTe);s5=n(g8t,"LI",{});var BNe=s(s5);JTe=n(BNe,"STRONG",{});var h8t=s(JTe);tyr=r(h8t,"tapas"),h8t.forEach(t),ayr=r(BNe," \u2014 "),KJ=n(BNe,"A",{href:!0});var p8t=s(KJ);nyr=r(p8t,"TFTapasForQuestionAnswering"),p8t.forEach(t),syr=r(BNe," (TAPAS model)"),BNe.forEach(t),g8t.forEach(t),lyr=i(Gl),T(l5.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),JGe=i(f),xc=n(f,"H2",{class:!0});var nXe=s(xc);i5=n(nXe,"A",{id:!0,class:!0,href:!0});var u8t=s(i5);YTe=n(u8t,"SPAN",{});var _8t=s(YTe);T(U9.$$.fragment,_8t),_8t.forEach(t),u8t.forEach(t),iyr=i(nXe),KTe=n(nXe,"SPAN",{});var b8t=s(KTe);dyr=r(b8t,"TFAutoModelForTokenClassification"),b8t.forEach(t),nXe.forEach(t),YGe=i(f),dr=n(f,"DIV",{class:!0});var Ol=s(dr);T(J9.$$.fragment,Ol),cyr=i(Ol),$c=n(Ol,"P",{});var Joe=s($c);fyr=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZJ=n(Joe,"A",{href:!0});var v8t=s(ZJ);myr=r(v8t,"from_pretrained()"),v8t.forEach(t),gyr=r(Joe," class method or the "),eY=n(Joe,"A",{href:!0});var F8t=s(eY);hyr=r(F8t,"from_config()"),F8t.forEach(t),pyr=r(Joe,` class
method.`),Joe.forEach(t),uyr=i(Ol),Y9=n(Ol,"P",{});var sXe=s(Y9);_yr=r(sXe,"This class cannot be instantiated directly using "),ZTe=n(sXe,"CODE",{});var T8t=s(ZTe);byr=r(T8t,"__init__()"),T8t.forEach(t),vyr=r(sXe," (throws an error)."),sXe.forEach(t),Fyr=i(Ol),Gt=n(Ol,"DIV",{class:!0});var $6=s(Gt);T(K9.$$.fragment,$6),Tyr=i($6),eMe=n($6,"P",{});var M8t=s(eMe);Myr=r(M8t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),M8t.forEach(t),Eyr=i($6),kc=n($6,"P",{});var Yoe=s(kc);Cyr=r(Yoe,`Note:
Loading a model from its configuration file does `),oMe=n(Yoe,"STRONG",{});var E8t=s(oMe);wyr=r(E8t,"not"),E8t.forEach(t),Ayr=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Yoe,"A",{href:!0});var C8t=s(oY);yyr=r(C8t,"from_pretrained()"),C8t.forEach(t),Lyr=r(Yoe," to load the model weights."),Yoe.forEach(t),xyr=i($6),T(d5.$$.fragment,$6),$6.forEach(t),$yr=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(Z9.$$.fragment,Vl),kyr=i(Vl),rMe=n(Vl,"P",{});var w8t=s(rMe);Syr=r(w8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),w8t.forEach(t),Ryr=i(Vl),pn=n(Vl,"P",{});var k6=s(pn);Pyr=r(k6,"The model class to instantiate is selected based on the "),tMe=n(k6,"CODE",{});var A8t=s(tMe);Byr=r(A8t,"model_type"),A8t.forEach(t),Iyr=r(k6,` property of the config object (either
passed as an argument or loaded from `),aMe=n(k6,"CODE",{});var y8t=s(aMe);Nyr=r(y8t,"pretrained_model_name_or_path"),y8t.forEach(t),qyr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nMe=n(k6,"CODE",{});var L8t=s(nMe);jyr=r(L8t,"pretrained_model_name_or_path"),L8t.forEach(t),Dyr=r(k6,":"),k6.forEach(t),Gyr=i(Vl),de=n(Vl,"UL",{});var me=s(de);c5=n(me,"LI",{});var INe=s(c5);sMe=n(INe,"STRONG",{});var x8t=s(sMe);Oyr=r(x8t,"albert"),x8t.forEach(t),Vyr=r(INe," \u2014 "),rY=n(INe,"A",{href:!0});var $8t=s(rY);Xyr=r($8t,"TFAlbertForTokenClassification"),$8t.forEach(t),zyr=r(INe," (ALBERT model)"),INe.forEach(t),Wyr=i(me),f5=n(me,"LI",{});var NNe=s(f5);lMe=n(NNe,"STRONG",{});var k8t=s(lMe);Qyr=r(k8t,"bert"),k8t.forEach(t),Hyr=r(NNe," \u2014 "),tY=n(NNe,"A",{href:!0});var S8t=s(tY);Uyr=r(S8t,"TFBertForTokenClassification"),S8t.forEach(t),Jyr=r(NNe," (BERT model)"),NNe.forEach(t),Yyr=i(me),m5=n(me,"LI",{});var qNe=s(m5);iMe=n(qNe,"STRONG",{});var R8t=s(iMe);Kyr=r(R8t,"camembert"),R8t.forEach(t),Zyr=r(qNe," \u2014 "),aY=n(qNe,"A",{href:!0});var P8t=s(aY);eLr=r(P8t,"TFCamembertForTokenClassification"),P8t.forEach(t),oLr=r(qNe," (CamemBERT model)"),qNe.forEach(t),rLr=i(me),g5=n(me,"LI",{});var jNe=s(g5);dMe=n(jNe,"STRONG",{});var B8t=s(dMe);tLr=r(B8t,"convbert"),B8t.forEach(t),aLr=r(jNe," \u2014 "),nY=n(jNe,"A",{href:!0});var I8t=s(nY);nLr=r(I8t,"TFConvBertForTokenClassification"),I8t.forEach(t),sLr=r(jNe," (ConvBERT model)"),jNe.forEach(t),lLr=i(me),h5=n(me,"LI",{});var DNe=s(h5);cMe=n(DNe,"STRONG",{});var N8t=s(cMe);iLr=r(N8t,"deberta"),N8t.forEach(t),dLr=r(DNe," \u2014 "),sY=n(DNe,"A",{href:!0});var q8t=s(sY);cLr=r(q8t,"TFDebertaForTokenClassification"),q8t.forEach(t),fLr=r(DNe," (DeBERTa model)"),DNe.forEach(t),mLr=i(me),p5=n(me,"LI",{});var GNe=s(p5);fMe=n(GNe,"STRONG",{});var j8t=s(fMe);gLr=r(j8t,"deberta-v2"),j8t.forEach(t),hLr=r(GNe," \u2014 "),lY=n(GNe,"A",{href:!0});var D8t=s(lY);pLr=r(D8t,"TFDebertaV2ForTokenClassification"),D8t.forEach(t),uLr=r(GNe," (DeBERTa-v2 model)"),GNe.forEach(t),_Lr=i(me),u5=n(me,"LI",{});var ONe=s(u5);mMe=n(ONe,"STRONG",{});var G8t=s(mMe);bLr=r(G8t,"distilbert"),G8t.forEach(t),vLr=r(ONe," \u2014 "),iY=n(ONe,"A",{href:!0});var O8t=s(iY);FLr=r(O8t,"TFDistilBertForTokenClassification"),O8t.forEach(t),TLr=r(ONe," (DistilBERT model)"),ONe.forEach(t),MLr=i(me),_5=n(me,"LI",{});var VNe=s(_5);gMe=n(VNe,"STRONG",{});var V8t=s(gMe);ELr=r(V8t,"electra"),V8t.forEach(t),CLr=r(VNe," \u2014 "),dY=n(VNe,"A",{href:!0});var X8t=s(dY);wLr=r(X8t,"TFElectraForTokenClassification"),X8t.forEach(t),ALr=r(VNe," (ELECTRA model)"),VNe.forEach(t),yLr=i(me),b5=n(me,"LI",{});var XNe=s(b5);hMe=n(XNe,"STRONG",{});var z8t=s(hMe);LLr=r(z8t,"flaubert"),z8t.forEach(t),xLr=r(XNe," \u2014 "),cY=n(XNe,"A",{href:!0});var W8t=s(cY);$Lr=r(W8t,"TFFlaubertForTokenClassification"),W8t.forEach(t),kLr=r(XNe," (FlauBERT model)"),XNe.forEach(t),SLr=i(me),v5=n(me,"LI",{});var zNe=s(v5);pMe=n(zNe,"STRONG",{});var Q8t=s(pMe);RLr=r(Q8t,"funnel"),Q8t.forEach(t),PLr=r(zNe," \u2014 "),fY=n(zNe,"A",{href:!0});var H8t=s(fY);BLr=r(H8t,"TFFunnelForTokenClassification"),H8t.forEach(t),ILr=r(zNe," (Funnel Transformer model)"),zNe.forEach(t),NLr=i(me),F5=n(me,"LI",{});var WNe=s(F5);uMe=n(WNe,"STRONG",{});var U8t=s(uMe);qLr=r(U8t,"layoutlm"),U8t.forEach(t),jLr=r(WNe," \u2014 "),mY=n(WNe,"A",{href:!0});var J8t=s(mY);DLr=r(J8t,"TFLayoutLMForTokenClassification"),J8t.forEach(t),GLr=r(WNe," (LayoutLM model)"),WNe.forEach(t),OLr=i(me),T5=n(me,"LI",{});var QNe=s(T5);_Me=n(QNe,"STRONG",{});var Y8t=s(_Me);VLr=r(Y8t,"longformer"),Y8t.forEach(t),XLr=r(QNe," \u2014 "),gY=n(QNe,"A",{href:!0});var K8t=s(gY);zLr=r(K8t,"TFLongformerForTokenClassification"),K8t.forEach(t),WLr=r(QNe," (Longformer model)"),QNe.forEach(t),QLr=i(me),M5=n(me,"LI",{});var HNe=s(M5);bMe=n(HNe,"STRONG",{});var Z8t=s(bMe);HLr=r(Z8t,"mobilebert"),Z8t.forEach(t),ULr=r(HNe," \u2014 "),hY=n(HNe,"A",{href:!0});var e9t=s(hY);JLr=r(e9t,"TFMobileBertForTokenClassification"),e9t.forEach(t),YLr=r(HNe," (MobileBERT model)"),HNe.forEach(t),KLr=i(me),E5=n(me,"LI",{});var UNe=s(E5);vMe=n(UNe,"STRONG",{});var o9t=s(vMe);ZLr=r(o9t,"mpnet"),o9t.forEach(t),e8r=r(UNe," \u2014 "),pY=n(UNe,"A",{href:!0});var r9t=s(pY);o8r=r(r9t,"TFMPNetForTokenClassification"),r9t.forEach(t),r8r=r(UNe," (MPNet model)"),UNe.forEach(t),t8r=i(me),C5=n(me,"LI",{});var JNe=s(C5);FMe=n(JNe,"STRONG",{});var t9t=s(FMe);a8r=r(t9t,"rembert"),t9t.forEach(t),n8r=r(JNe," \u2014 "),uY=n(JNe,"A",{href:!0});var a9t=s(uY);s8r=r(a9t,"TFRemBertForTokenClassification"),a9t.forEach(t),l8r=r(JNe," (RemBERT model)"),JNe.forEach(t),i8r=i(me),w5=n(me,"LI",{});var YNe=s(w5);TMe=n(YNe,"STRONG",{});var n9t=s(TMe);d8r=r(n9t,"roberta"),n9t.forEach(t),c8r=r(YNe," \u2014 "),_Y=n(YNe,"A",{href:!0});var s9t=s(_Y);f8r=r(s9t,"TFRobertaForTokenClassification"),s9t.forEach(t),m8r=r(YNe," (RoBERTa model)"),YNe.forEach(t),g8r=i(me),A5=n(me,"LI",{});var KNe=s(A5);MMe=n(KNe,"STRONG",{});var l9t=s(MMe);h8r=r(l9t,"roformer"),l9t.forEach(t),p8r=r(KNe," \u2014 "),bY=n(KNe,"A",{href:!0});var i9t=s(bY);u8r=r(i9t,"TFRoFormerForTokenClassification"),i9t.forEach(t),_8r=r(KNe," (RoFormer model)"),KNe.forEach(t),b8r=i(me),y5=n(me,"LI",{});var ZNe=s(y5);EMe=n(ZNe,"STRONG",{});var d9t=s(EMe);v8r=r(d9t,"xlm"),d9t.forEach(t),F8r=r(ZNe," \u2014 "),vY=n(ZNe,"A",{href:!0});var c9t=s(vY);T8r=r(c9t,"TFXLMForTokenClassification"),c9t.forEach(t),M8r=r(ZNe," (XLM model)"),ZNe.forEach(t),E8r=i(me),L5=n(me,"LI",{});var eqe=s(L5);CMe=n(eqe,"STRONG",{});var f9t=s(CMe);C8r=r(f9t,"xlm-roberta"),f9t.forEach(t),w8r=r(eqe," \u2014 "),FY=n(eqe,"A",{href:!0});var m9t=s(FY);A8r=r(m9t,"TFXLMRobertaForTokenClassification"),m9t.forEach(t),y8r=r(eqe," (XLM-RoBERTa model)"),eqe.forEach(t),L8r=i(me),x5=n(me,"LI",{});var oqe=s(x5);wMe=n(oqe,"STRONG",{});var g9t=s(wMe);x8r=r(g9t,"xlnet"),g9t.forEach(t),$8r=r(oqe," \u2014 "),TY=n(oqe,"A",{href:!0});var h9t=s(TY);k8r=r(h9t,"TFXLNetForTokenClassification"),h9t.forEach(t),S8r=r(oqe," (XLNet model)"),oqe.forEach(t),me.forEach(t),R8r=i(Vl),T($5.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),KGe=i(f),Sc=n(f,"H2",{class:!0});var lXe=s(Sc);k5=n(lXe,"A",{id:!0,class:!0,href:!0});var p9t=s(k5);AMe=n(p9t,"SPAN",{});var u9t=s(AMe);T(ex.$$.fragment,u9t),u9t.forEach(t),p9t.forEach(t),P8r=i(lXe),yMe=n(lXe,"SPAN",{});var _9t=s(yMe);B8r=r(_9t,"TFAutoModelForQuestionAnswering"),_9t.forEach(t),lXe.forEach(t),ZGe=i(f),cr=n(f,"DIV",{class:!0});var Xl=s(cr);T(ox.$$.fragment,Xl),I8r=i(Xl),Rc=n(Xl,"P",{});var Koe=s(Rc);N8r=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),MY=n(Koe,"A",{href:!0});var b9t=s(MY);q8r=r(b9t,"from_pretrained()"),b9t.forEach(t),j8r=r(Koe," class method or the "),EY=n(Koe,"A",{href:!0});var v9t=s(EY);D8r=r(v9t,"from_config()"),v9t.forEach(t),G8r=r(Koe,` class
method.`),Koe.forEach(t),O8r=i(Xl),rx=n(Xl,"P",{});var iXe=s(rx);V8r=r(iXe,"This class cannot be instantiated directly using "),LMe=n(iXe,"CODE",{});var F9t=s(LMe);X8r=r(F9t,"__init__()"),F9t.forEach(t),z8r=r(iXe," (throws an error)."),iXe.forEach(t),W8r=i(Xl),Ot=n(Xl,"DIV",{class:!0});var S6=s(Ot);T(tx.$$.fragment,S6),Q8r=i(S6),xMe=n(S6,"P",{});var T9t=s(xMe);H8r=r(T9t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),T9t.forEach(t),U8r=i(S6),Pc=n(S6,"P",{});var Zoe=s(Pc);J8r=r(Zoe,`Note:
Loading a model from its configuration file does `),$Me=n(Zoe,"STRONG",{});var M9t=s($Me);Y8r=r(M9t,"not"),M9t.forEach(t),K8r=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CY=n(Zoe,"A",{href:!0});var E9t=s(CY);Z8r=r(E9t,"from_pretrained()"),E9t.forEach(t),e9r=r(Zoe," to load the model weights."),Zoe.forEach(t),o9r=i(S6),T(S5.$$.fragment,S6),S6.forEach(t),r9r=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(ax.$$.fragment,zl),t9r=i(zl),kMe=n(zl,"P",{});var C9t=s(kMe);a9r=r(C9t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),C9t.forEach(t),n9r=i(zl),un=n(zl,"P",{});var R6=s(un);s9r=r(R6,"The model class to instantiate is selected based on the "),SMe=n(R6,"CODE",{});var w9t=s(SMe);l9r=r(w9t,"model_type"),w9t.forEach(t),i9r=r(R6,` property of the config object (either
passed as an argument or loaded from `),RMe=n(R6,"CODE",{});var A9t=s(RMe);d9r=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),c9r=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(R6,"CODE",{});var y9t=s(PMe);f9r=r(y9t,"pretrained_model_name_or_path"),y9t.forEach(t),m9r=r(R6,":"),R6.forEach(t),g9r=i(zl),ce=n(zl,"UL",{});var ge=s(ce);R5=n(ge,"LI",{});var rqe=s(R5);BMe=n(rqe,"STRONG",{});var L9t=s(BMe);h9r=r(L9t,"albert"),L9t.forEach(t),p9r=r(rqe," \u2014 "),wY=n(rqe,"A",{href:!0});var x9t=s(wY);u9r=r(x9t,"TFAlbertForQuestionAnswering"),x9t.forEach(t),_9r=r(rqe," (ALBERT model)"),rqe.forEach(t),b9r=i(ge),P5=n(ge,"LI",{});var tqe=s(P5);IMe=n(tqe,"STRONG",{});var $9t=s(IMe);v9r=r($9t,"bert"),$9t.forEach(t),F9r=r(tqe," \u2014 "),AY=n(tqe,"A",{href:!0});var k9t=s(AY);T9r=r(k9t,"TFBertForQuestionAnswering"),k9t.forEach(t),M9r=r(tqe," (BERT model)"),tqe.forEach(t),E9r=i(ge),B5=n(ge,"LI",{});var aqe=s(B5);NMe=n(aqe,"STRONG",{});var S9t=s(NMe);C9r=r(S9t,"camembert"),S9t.forEach(t),w9r=r(aqe," \u2014 "),yY=n(aqe,"A",{href:!0});var R9t=s(yY);A9r=r(R9t,"TFCamembertForQuestionAnswering"),R9t.forEach(t),y9r=r(aqe," (CamemBERT model)"),aqe.forEach(t),L9r=i(ge),I5=n(ge,"LI",{});var nqe=s(I5);qMe=n(nqe,"STRONG",{});var P9t=s(qMe);x9r=r(P9t,"convbert"),P9t.forEach(t),$9r=r(nqe," \u2014 "),LY=n(nqe,"A",{href:!0});var B9t=s(LY);k9r=r(B9t,"TFConvBertForQuestionAnswering"),B9t.forEach(t),S9r=r(nqe," (ConvBERT model)"),nqe.forEach(t),R9r=i(ge),N5=n(ge,"LI",{});var sqe=s(N5);jMe=n(sqe,"STRONG",{});var I9t=s(jMe);P9r=r(I9t,"deberta"),I9t.forEach(t),B9r=r(sqe," \u2014 "),xY=n(sqe,"A",{href:!0});var N9t=s(xY);I9r=r(N9t,"TFDebertaForQuestionAnswering"),N9t.forEach(t),N9r=r(sqe," (DeBERTa model)"),sqe.forEach(t),q9r=i(ge),q5=n(ge,"LI",{});var lqe=s(q5);DMe=n(lqe,"STRONG",{});var q9t=s(DMe);j9r=r(q9t,"deberta-v2"),q9t.forEach(t),D9r=r(lqe," \u2014 "),$Y=n(lqe,"A",{href:!0});var j9t=s($Y);G9r=r(j9t,"TFDebertaV2ForQuestionAnswering"),j9t.forEach(t),O9r=r(lqe," (DeBERTa-v2 model)"),lqe.forEach(t),V9r=i(ge),j5=n(ge,"LI",{});var iqe=s(j5);GMe=n(iqe,"STRONG",{});var D9t=s(GMe);X9r=r(D9t,"distilbert"),D9t.forEach(t),z9r=r(iqe," \u2014 "),kY=n(iqe,"A",{href:!0});var G9t=s(kY);W9r=r(G9t,"TFDistilBertForQuestionAnswering"),G9t.forEach(t),Q9r=r(iqe," (DistilBERT model)"),iqe.forEach(t),H9r=i(ge),D5=n(ge,"LI",{});var dqe=s(D5);OMe=n(dqe,"STRONG",{});var O9t=s(OMe);U9r=r(O9t,"electra"),O9t.forEach(t),J9r=r(dqe," \u2014 "),SY=n(dqe,"A",{href:!0});var V9t=s(SY);Y9r=r(V9t,"TFElectraForQuestionAnswering"),V9t.forEach(t),K9r=r(dqe," (ELECTRA model)"),dqe.forEach(t),Z9r=i(ge),G5=n(ge,"LI",{});var cqe=s(G5);VMe=n(cqe,"STRONG",{});var X9t=s(VMe);exr=r(X9t,"flaubert"),X9t.forEach(t),oxr=r(cqe," \u2014 "),RY=n(cqe,"A",{href:!0});var z9t=s(RY);rxr=r(z9t,"TFFlaubertForQuestionAnsweringSimple"),z9t.forEach(t),txr=r(cqe," (FlauBERT model)"),cqe.forEach(t),axr=i(ge),O5=n(ge,"LI",{});var fqe=s(O5);XMe=n(fqe,"STRONG",{});var W9t=s(XMe);nxr=r(W9t,"funnel"),W9t.forEach(t),sxr=r(fqe," \u2014 "),PY=n(fqe,"A",{href:!0});var Q9t=s(PY);lxr=r(Q9t,"TFFunnelForQuestionAnswering"),Q9t.forEach(t),ixr=r(fqe," (Funnel Transformer model)"),fqe.forEach(t),dxr=i(ge),V5=n(ge,"LI",{});var mqe=s(V5);zMe=n(mqe,"STRONG",{});var H9t=s(zMe);cxr=r(H9t,"gptj"),H9t.forEach(t),fxr=r(mqe," \u2014 "),BY=n(mqe,"A",{href:!0});var U9t=s(BY);mxr=r(U9t,"TFGPTJForQuestionAnswering"),U9t.forEach(t),gxr=r(mqe," (GPT-J model)"),mqe.forEach(t),hxr=i(ge),X5=n(ge,"LI",{});var gqe=s(X5);WMe=n(gqe,"STRONG",{});var J9t=s(WMe);pxr=r(J9t,"longformer"),J9t.forEach(t),uxr=r(gqe," \u2014 "),IY=n(gqe,"A",{href:!0});var Y9t=s(IY);_xr=r(Y9t,"TFLongformerForQuestionAnswering"),Y9t.forEach(t),bxr=r(gqe," (Longformer model)"),gqe.forEach(t),vxr=i(ge),z5=n(ge,"LI",{});var hqe=s(z5);QMe=n(hqe,"STRONG",{});var K9t=s(QMe);Fxr=r(K9t,"mobilebert"),K9t.forEach(t),Txr=r(hqe," \u2014 "),NY=n(hqe,"A",{href:!0});var Z9t=s(NY);Mxr=r(Z9t,"TFMobileBertForQuestionAnswering"),Z9t.forEach(t),Exr=r(hqe," (MobileBERT model)"),hqe.forEach(t),Cxr=i(ge),W5=n(ge,"LI",{});var pqe=s(W5);HMe=n(pqe,"STRONG",{});var ext=s(HMe);wxr=r(ext,"mpnet"),ext.forEach(t),Axr=r(pqe," \u2014 "),qY=n(pqe,"A",{href:!0});var oxt=s(qY);yxr=r(oxt,"TFMPNetForQuestionAnswering"),oxt.forEach(t),Lxr=r(pqe," (MPNet model)"),pqe.forEach(t),xxr=i(ge),Q5=n(ge,"LI",{});var uqe=s(Q5);UMe=n(uqe,"STRONG",{});var rxt=s(UMe);$xr=r(rxt,"rembert"),rxt.forEach(t),kxr=r(uqe," \u2014 "),jY=n(uqe,"A",{href:!0});var txt=s(jY);Sxr=r(txt,"TFRemBertForQuestionAnswering"),txt.forEach(t),Rxr=r(uqe," (RemBERT model)"),uqe.forEach(t),Pxr=i(ge),H5=n(ge,"LI",{});var _qe=s(H5);JMe=n(_qe,"STRONG",{});var axt=s(JMe);Bxr=r(axt,"roberta"),axt.forEach(t),Ixr=r(_qe," \u2014 "),DY=n(_qe,"A",{href:!0});var nxt=s(DY);Nxr=r(nxt,"TFRobertaForQuestionAnswering"),nxt.forEach(t),qxr=r(_qe," (RoBERTa model)"),_qe.forEach(t),jxr=i(ge),U5=n(ge,"LI",{});var bqe=s(U5);YMe=n(bqe,"STRONG",{});var sxt=s(YMe);Dxr=r(sxt,"roformer"),sxt.forEach(t),Gxr=r(bqe," \u2014 "),GY=n(bqe,"A",{href:!0});var lxt=s(GY);Oxr=r(lxt,"TFRoFormerForQuestionAnswering"),lxt.forEach(t),Vxr=r(bqe," (RoFormer model)"),bqe.forEach(t),Xxr=i(ge),J5=n(ge,"LI",{});var vqe=s(J5);KMe=n(vqe,"STRONG",{});var ixt=s(KMe);zxr=r(ixt,"xlm"),ixt.forEach(t),Wxr=r(vqe," \u2014 "),OY=n(vqe,"A",{href:!0});var dxt=s(OY);Qxr=r(dxt,"TFXLMForQuestionAnsweringSimple"),dxt.forEach(t),Hxr=r(vqe," (XLM model)"),vqe.forEach(t),Uxr=i(ge),Y5=n(ge,"LI",{});var Fqe=s(Y5);ZMe=n(Fqe,"STRONG",{});var cxt=s(ZMe);Jxr=r(cxt,"xlm-roberta"),cxt.forEach(t),Yxr=r(Fqe," \u2014 "),VY=n(Fqe,"A",{href:!0});var fxt=s(VY);Kxr=r(fxt,"TFXLMRobertaForQuestionAnswering"),fxt.forEach(t),Zxr=r(Fqe," (XLM-RoBERTa model)"),Fqe.forEach(t),e$r=i(ge),K5=n(ge,"LI",{});var Tqe=s(K5);eEe=n(Tqe,"STRONG",{});var mxt=s(eEe);o$r=r(mxt,"xlnet"),mxt.forEach(t),r$r=r(Tqe," \u2014 "),XY=n(Tqe,"A",{href:!0});var gxt=s(XY);t$r=r(gxt,"TFXLNetForQuestionAnsweringSimple"),gxt.forEach(t),a$r=r(Tqe," (XLNet model)"),Tqe.forEach(t),ge.forEach(t),n$r=i(zl),T(Z5.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),eOe=i(f),Bc=n(f,"H2",{class:!0});var dXe=s(Bc);e3=n(dXe,"A",{id:!0,class:!0,href:!0});var hxt=s(e3);oEe=n(hxt,"SPAN",{});var pxt=s(oEe);T(nx.$$.fragment,pxt),pxt.forEach(t),hxt.forEach(t),s$r=i(dXe),rEe=n(dXe,"SPAN",{});var uxt=s(rEe);l$r=r(uxt,"TFAutoModelForVision2Seq"),uxt.forEach(t),dXe.forEach(t),oOe=i(f),fr=n(f,"DIV",{class:!0});var Wl=s(fr);T(sx.$$.fragment,Wl),i$r=i(Wl),Ic=n(Wl,"P",{});var ere=s(Ic);d$r=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),zY=n(ere,"A",{href:!0});var _xt=s(zY);c$r=r(_xt,"from_pretrained()"),_xt.forEach(t),f$r=r(ere," class method or the "),WY=n(ere,"A",{href:!0});var bxt=s(WY);m$r=r(bxt,"from_config()"),bxt.forEach(t),g$r=r(ere,` class
method.`),ere.forEach(t),h$r=i(Wl),lx=n(Wl,"P",{});var cXe=s(lx);p$r=r(cXe,"This class cannot be instantiated directly using "),tEe=n(cXe,"CODE",{});var vxt=s(tEe);u$r=r(vxt,"__init__()"),vxt.forEach(t),_$r=r(cXe," (throws an error)."),cXe.forEach(t),b$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var P6=s(Vt);T(ix.$$.fragment,P6),v$r=i(P6),aEe=n(P6,"P",{});var Fxt=s(aEe);F$r=r(Fxt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fxt.forEach(t),T$r=i(P6),Nc=n(P6,"P",{});var ore=s(Nc);M$r=r(ore,`Note:
Loading a model from its configuration file does `),nEe=n(ore,"STRONG",{});var Txt=s(nEe);E$r=r(Txt,"not"),Txt.forEach(t),C$r=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),QY=n(ore,"A",{href:!0});var Mxt=s(QY);w$r=r(Mxt,"from_pretrained()"),Mxt.forEach(t),A$r=r(ore," to load the model weights."),ore.forEach(t),y$r=i(P6),T(o3.$$.fragment,P6),P6.forEach(t),L$r=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(dx.$$.fragment,Ql),x$r=i(Ql),sEe=n(Ql,"P",{});var Ext=s(sEe);$$r=r(Ext,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Ext.forEach(t),k$r=i(Ql),_n=n(Ql,"P",{});var B6=s(_n);S$r=r(B6,"The model class to instantiate is selected based on the "),lEe=n(B6,"CODE",{});var Cxt=s(lEe);R$r=r(Cxt,"model_type"),Cxt.forEach(t),P$r=r(B6,` property of the config object (either
passed as an argument or loaded from `),iEe=n(B6,"CODE",{});var wxt=s(iEe);B$r=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),I$r=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(B6,"CODE",{});var Axt=s(dEe);N$r=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),q$r=r(B6,":"),B6.forEach(t),j$r=i(Ql),cEe=n(Ql,"UL",{});var yxt=s(cEe);r3=n(yxt,"LI",{});var Mqe=s(r3);fEe=n(Mqe,"STRONG",{});var Lxt=s(fEe);D$r=r(Lxt,"vision-encoder-decoder"),Lxt.forEach(t),G$r=r(Mqe," \u2014 "),HY=n(Mqe,"A",{href:!0});var xxt=s(HY);O$r=r(xxt,"TFVisionEncoderDecoderModel"),xxt.forEach(t),V$r=r(Mqe," (Vision Encoder decoder model)"),Mqe.forEach(t),yxt.forEach(t),X$r=i(Ql),T(t3.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),rOe=i(f),qc=n(f,"H2",{class:!0});var fXe=s(qc);a3=n(fXe,"A",{id:!0,class:!0,href:!0});var $xt=s(a3);mEe=n($xt,"SPAN",{});var kxt=s(mEe);T(cx.$$.fragment,kxt),kxt.forEach(t),$xt.forEach(t),z$r=i(fXe),gEe=n(fXe,"SPAN",{});var Sxt=s(gEe);W$r=r(Sxt,"TFAutoModelForSpeechSeq2Seq"),Sxt.forEach(t),fXe.forEach(t),tOe=i(f),mr=n(f,"DIV",{class:!0});var Hl=s(mr);T(fx.$$.fragment,Hl),Q$r=i(Hl),jc=n(Hl,"P",{});var rre=s(jc);H$r=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),UY=n(rre,"A",{href:!0});var Rxt=s(UY);U$r=r(Rxt,"from_pretrained()"),Rxt.forEach(t),J$r=r(rre," class method or the "),JY=n(rre,"A",{href:!0});var Pxt=s(JY);Y$r=r(Pxt,"from_config()"),Pxt.forEach(t),K$r=r(rre,` class
method.`),rre.forEach(t),Z$r=i(Hl),mx=n(Hl,"P",{});var mXe=s(mx);ekr=r(mXe,"This class cannot be instantiated directly using "),hEe=n(mXe,"CODE",{});var Bxt=s(hEe);okr=r(Bxt,"__init__()"),Bxt.forEach(t),rkr=r(mXe," (throws an error)."),mXe.forEach(t),tkr=i(Hl),Xt=n(Hl,"DIV",{class:!0});var I6=s(Xt);T(gx.$$.fragment,I6),akr=i(I6),pEe=n(I6,"P",{});var Ixt=s(pEe);nkr=r(Ixt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Ixt.forEach(t),skr=i(I6),Dc=n(I6,"P",{});var tre=s(Dc);lkr=r(tre,`Note:
Loading a model from its configuration file does `),uEe=n(tre,"STRONG",{});var Nxt=s(uEe);ikr=r(Nxt,"not"),Nxt.forEach(t),dkr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),YY=n(tre,"A",{href:!0});var qxt=s(YY);ckr=r(qxt,"from_pretrained()"),qxt.forEach(t),fkr=r(tre," to load the model weights."),tre.forEach(t),mkr=i(I6),T(n3.$$.fragment,I6),I6.forEach(t),gkr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(hx.$$.fragment,Ul),hkr=i(Ul),_Ee=n(Ul,"P",{});var jxt=s(_Ee);pkr=r(jxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jxt.forEach(t),ukr=i(Ul),bn=n(Ul,"P",{});var N6=s(bn);_kr=r(N6,"The model class to instantiate is selected based on the "),bEe=n(N6,"CODE",{});var Dxt=s(bEe);bkr=r(Dxt,"model_type"),Dxt.forEach(t),vkr=r(N6,` property of the config object (either
passed as an argument or loaded from `),vEe=n(N6,"CODE",{});var Gxt=s(vEe);Fkr=r(Gxt,"pretrained_model_name_or_path"),Gxt.forEach(t),Tkr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FEe=n(N6,"CODE",{});var Oxt=s(FEe);Mkr=r(Oxt,"pretrained_model_name_or_path"),Oxt.forEach(t),Ekr=r(N6,":"),N6.forEach(t),Ckr=i(Ul),TEe=n(Ul,"UL",{});var Vxt=s(TEe);s3=n(Vxt,"LI",{});var Eqe=s(s3);MEe=n(Eqe,"STRONG",{});var Xxt=s(MEe);wkr=r(Xxt,"speech_to_text"),Xxt.forEach(t),Akr=r(Eqe," \u2014 "),KY=n(Eqe,"A",{href:!0});var zxt=s(KY);ykr=r(zxt,"TFSpeech2TextForConditionalGeneration"),zxt.forEach(t),Lkr=r(Eqe," (Speech2Text model)"),Eqe.forEach(t),Vxt.forEach(t),xkr=i(Ul),T(l3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),aOe=i(f),Gc=n(f,"H2",{class:!0});var gXe=s(Gc);i3=n(gXe,"A",{id:!0,class:!0,href:!0});var Wxt=s(i3);EEe=n(Wxt,"SPAN",{});var Qxt=s(EEe);T(px.$$.fragment,Qxt),Qxt.forEach(t),Wxt.forEach(t),$kr=i(gXe),CEe=n(gXe,"SPAN",{});var Hxt=s(CEe);kkr=r(Hxt,"FlaxAutoModel"),Hxt.forEach(t),gXe.forEach(t),nOe=i(f),gr=n(f,"DIV",{class:!0});var Jl=s(gr);T(ux.$$.fragment,Jl),Skr=i(Jl),Oc=n(Jl,"P",{});var are=s(Oc);Rkr=r(are,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ZY=n(are,"A",{href:!0});var Uxt=s(ZY);Pkr=r(Uxt,"from_pretrained()"),Uxt.forEach(t),Bkr=r(are," class method or the "),eK=n(are,"A",{href:!0});var Jxt=s(eK);Ikr=r(Jxt,"from_config()"),Jxt.forEach(t),Nkr=r(are,` class
method.`),are.forEach(t),qkr=i(Jl),_x=n(Jl,"P",{});var hXe=s(_x);jkr=r(hXe,"This class cannot be instantiated directly using "),wEe=n(hXe,"CODE",{});var Yxt=s(wEe);Dkr=r(Yxt,"__init__()"),Yxt.forEach(t),Gkr=r(hXe," (throws an error)."),hXe.forEach(t),Okr=i(Jl),zt=n(Jl,"DIV",{class:!0});var q6=s(zt);T(bx.$$.fragment,q6),Vkr=i(q6),AEe=n(q6,"P",{});var Kxt=s(AEe);Xkr=r(Kxt,"Instantiates one of the base model classes of the library from a configuration."),Kxt.forEach(t),zkr=i(q6),Vc=n(q6,"P",{});var nre=s(Vc);Wkr=r(nre,`Note:
Loading a model from its configuration file does `),yEe=n(nre,"STRONG",{});var Zxt=s(yEe);Qkr=r(Zxt,"not"),Zxt.forEach(t),Hkr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oK=n(nre,"A",{href:!0});var e$t=s(oK);Ukr=r(e$t,"from_pretrained()"),e$t.forEach(t),Jkr=r(nre," to load the model weights."),nre.forEach(t),Ykr=i(q6),T(d3.$$.fragment,q6),q6.forEach(t),Kkr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(vx.$$.fragment,Yl),Zkr=i(Yl),LEe=n(Yl,"P",{});var o$t=s(LEe);eSr=r(o$t,"Instantiate one of the base model classes of the library from a pretrained model."),o$t.forEach(t),oSr=i(Yl),vn=n(Yl,"P",{});var j6=s(vn);rSr=r(j6,"The model class to instantiate is selected based on the "),xEe=n(j6,"CODE",{});var r$t=s(xEe);tSr=r(r$t,"model_type"),r$t.forEach(t),aSr=r(j6,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(j6,"CODE",{});var t$t=s($Ee);nSr=r(t$t,"pretrained_model_name_or_path"),t$t.forEach(t),sSr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(j6,"CODE",{});var a$t=s(kEe);lSr=r(a$t,"pretrained_model_name_or_path"),a$t.forEach(t),iSr=r(j6,":"),j6.forEach(t),dSr=i(Yl),te=n(Yl,"UL",{});var ne=s(te);c3=n(ne,"LI",{});var Cqe=s(c3);SEe=n(Cqe,"STRONG",{});var n$t=s(SEe);cSr=r(n$t,"albert"),n$t.forEach(t),fSr=r(Cqe," \u2014 "),rK=n(Cqe,"A",{href:!0});var s$t=s(rK);mSr=r(s$t,"FlaxAlbertModel"),s$t.forEach(t),gSr=r(Cqe," (ALBERT model)"),Cqe.forEach(t),hSr=i(ne),f3=n(ne,"LI",{});var wqe=s(f3);REe=n(wqe,"STRONG",{});var l$t=s(REe);pSr=r(l$t,"bart"),l$t.forEach(t),uSr=r(wqe," \u2014 "),tK=n(wqe,"A",{href:!0});var i$t=s(tK);_Sr=r(i$t,"FlaxBartModel"),i$t.forEach(t),bSr=r(wqe," (BART model)"),wqe.forEach(t),vSr=i(ne),m3=n(ne,"LI",{});var Aqe=s(m3);PEe=n(Aqe,"STRONG",{});var d$t=s(PEe);FSr=r(d$t,"beit"),d$t.forEach(t),TSr=r(Aqe," \u2014 "),aK=n(Aqe,"A",{href:!0});var c$t=s(aK);MSr=r(c$t,"FlaxBeitModel"),c$t.forEach(t),ESr=r(Aqe," (BEiT model)"),Aqe.forEach(t),CSr=i(ne),g3=n(ne,"LI",{});var yqe=s(g3);BEe=n(yqe,"STRONG",{});var f$t=s(BEe);wSr=r(f$t,"bert"),f$t.forEach(t),ASr=r(yqe," \u2014 "),nK=n(yqe,"A",{href:!0});var m$t=s(nK);ySr=r(m$t,"FlaxBertModel"),m$t.forEach(t),LSr=r(yqe," (BERT model)"),yqe.forEach(t),xSr=i(ne),h3=n(ne,"LI",{});var Lqe=s(h3);IEe=n(Lqe,"STRONG",{});var g$t=s(IEe);$Sr=r(g$t,"big_bird"),g$t.forEach(t),kSr=r(Lqe," \u2014 "),sK=n(Lqe,"A",{href:!0});var h$t=s(sK);SSr=r(h$t,"FlaxBigBirdModel"),h$t.forEach(t),RSr=r(Lqe," (BigBird model)"),Lqe.forEach(t),PSr=i(ne),p3=n(ne,"LI",{});var xqe=s(p3);NEe=n(xqe,"STRONG",{});var p$t=s(NEe);BSr=r(p$t,"blenderbot"),p$t.forEach(t),ISr=r(xqe," \u2014 "),lK=n(xqe,"A",{href:!0});var u$t=s(lK);NSr=r(u$t,"FlaxBlenderbotModel"),u$t.forEach(t),qSr=r(xqe," (Blenderbot model)"),xqe.forEach(t),jSr=i(ne),u3=n(ne,"LI",{});var $qe=s(u3);qEe=n($qe,"STRONG",{});var _$t=s(qEe);DSr=r(_$t,"blenderbot-small"),_$t.forEach(t),GSr=r($qe," \u2014 "),iK=n($qe,"A",{href:!0});var b$t=s(iK);OSr=r(b$t,"FlaxBlenderbotSmallModel"),b$t.forEach(t),VSr=r($qe," (BlenderbotSmall model)"),$qe.forEach(t),XSr=i(ne),_3=n(ne,"LI",{});var kqe=s(_3);jEe=n(kqe,"STRONG",{});var v$t=s(jEe);zSr=r(v$t,"clip"),v$t.forEach(t),WSr=r(kqe," \u2014 "),dK=n(kqe,"A",{href:!0});var F$t=s(dK);QSr=r(F$t,"FlaxCLIPModel"),F$t.forEach(t),HSr=r(kqe," (CLIP model)"),kqe.forEach(t),USr=i(ne),b3=n(ne,"LI",{});var Sqe=s(b3);DEe=n(Sqe,"STRONG",{});var T$t=s(DEe);JSr=r(T$t,"distilbert"),T$t.forEach(t),YSr=r(Sqe," \u2014 "),cK=n(Sqe,"A",{href:!0});var M$t=s(cK);KSr=r(M$t,"FlaxDistilBertModel"),M$t.forEach(t),ZSr=r(Sqe," (DistilBERT model)"),Sqe.forEach(t),eRr=i(ne),v3=n(ne,"LI",{});var Rqe=s(v3);GEe=n(Rqe,"STRONG",{});var E$t=s(GEe);oRr=r(E$t,"electra"),E$t.forEach(t),rRr=r(Rqe," \u2014 "),fK=n(Rqe,"A",{href:!0});var C$t=s(fK);tRr=r(C$t,"FlaxElectraModel"),C$t.forEach(t),aRr=r(Rqe," (ELECTRA model)"),Rqe.forEach(t),nRr=i(ne),F3=n(ne,"LI",{});var Pqe=s(F3);OEe=n(Pqe,"STRONG",{});var w$t=s(OEe);sRr=r(w$t,"gpt2"),w$t.forEach(t),lRr=r(Pqe," \u2014 "),mK=n(Pqe,"A",{href:!0});var A$t=s(mK);iRr=r(A$t,"FlaxGPT2Model"),A$t.forEach(t),dRr=r(Pqe," (OpenAI GPT-2 model)"),Pqe.forEach(t),cRr=i(ne),T3=n(ne,"LI",{});var Bqe=s(T3);VEe=n(Bqe,"STRONG",{});var y$t=s(VEe);fRr=r(y$t,"gpt_neo"),y$t.forEach(t),mRr=r(Bqe," \u2014 "),gK=n(Bqe,"A",{href:!0});var L$t=s(gK);gRr=r(L$t,"FlaxGPTNeoModel"),L$t.forEach(t),hRr=r(Bqe," (GPT Neo model)"),Bqe.forEach(t),pRr=i(ne),M3=n(ne,"LI",{});var Iqe=s(M3);XEe=n(Iqe,"STRONG",{});var x$t=s(XEe);uRr=r(x$t,"gptj"),x$t.forEach(t),_Rr=r(Iqe," \u2014 "),hK=n(Iqe,"A",{href:!0});var $$t=s(hK);bRr=r($$t,"FlaxGPTJModel"),$$t.forEach(t),vRr=r(Iqe," (GPT-J model)"),Iqe.forEach(t),FRr=i(ne),E3=n(ne,"LI",{});var Nqe=s(E3);zEe=n(Nqe,"STRONG",{});var k$t=s(zEe);TRr=r(k$t,"marian"),k$t.forEach(t),MRr=r(Nqe," \u2014 "),pK=n(Nqe,"A",{href:!0});var S$t=s(pK);ERr=r(S$t,"FlaxMarianModel"),S$t.forEach(t),CRr=r(Nqe," (Marian model)"),Nqe.forEach(t),wRr=i(ne),C3=n(ne,"LI",{});var qqe=s(C3);WEe=n(qqe,"STRONG",{});var R$t=s(WEe);ARr=r(R$t,"mbart"),R$t.forEach(t),yRr=r(qqe," \u2014 "),uK=n(qqe,"A",{href:!0});var P$t=s(uK);LRr=r(P$t,"FlaxMBartModel"),P$t.forEach(t),xRr=r(qqe," (mBART model)"),qqe.forEach(t),$Rr=i(ne),w3=n(ne,"LI",{});var jqe=s(w3);QEe=n(jqe,"STRONG",{});var B$t=s(QEe);kRr=r(B$t,"mt5"),B$t.forEach(t),SRr=r(jqe," \u2014 "),_K=n(jqe,"A",{href:!0});var I$t=s(_K);RRr=r(I$t,"FlaxMT5Model"),I$t.forEach(t),PRr=r(jqe," (MT5 model)"),jqe.forEach(t),BRr=i(ne),A3=n(ne,"LI",{});var Dqe=s(A3);HEe=n(Dqe,"STRONG",{});var N$t=s(HEe);IRr=r(N$t,"opt"),N$t.forEach(t),NRr=r(Dqe," \u2014 "),bK=n(Dqe,"A",{href:!0});var q$t=s(bK);qRr=r(q$t,"FlaxOPTModel"),q$t.forEach(t),jRr=r(Dqe," (OPT model)"),Dqe.forEach(t),DRr=i(ne),y3=n(ne,"LI",{});var Gqe=s(y3);UEe=n(Gqe,"STRONG",{});var j$t=s(UEe);GRr=r(j$t,"pegasus"),j$t.forEach(t),ORr=r(Gqe," \u2014 "),vK=n(Gqe,"A",{href:!0});var D$t=s(vK);VRr=r(D$t,"FlaxPegasusModel"),D$t.forEach(t),XRr=r(Gqe," (Pegasus model)"),Gqe.forEach(t),zRr=i(ne),L3=n(ne,"LI",{});var Oqe=s(L3);JEe=n(Oqe,"STRONG",{});var G$t=s(JEe);WRr=r(G$t,"roberta"),G$t.forEach(t),QRr=r(Oqe," \u2014 "),FK=n(Oqe,"A",{href:!0});var O$t=s(FK);HRr=r(O$t,"FlaxRobertaModel"),O$t.forEach(t),URr=r(Oqe," (RoBERTa model)"),Oqe.forEach(t),JRr=i(ne),x3=n(ne,"LI",{});var Vqe=s(x3);YEe=n(Vqe,"STRONG",{});var V$t=s(YEe);YRr=r(V$t,"roformer"),V$t.forEach(t),KRr=r(Vqe," \u2014 "),TK=n(Vqe,"A",{href:!0});var X$t=s(TK);ZRr=r(X$t,"FlaxRoFormerModel"),X$t.forEach(t),ePr=r(Vqe," (RoFormer model)"),Vqe.forEach(t),oPr=i(ne),$3=n(ne,"LI",{});var Xqe=s($3);KEe=n(Xqe,"STRONG",{});var z$t=s(KEe);rPr=r(z$t,"t5"),z$t.forEach(t),tPr=r(Xqe," \u2014 "),MK=n(Xqe,"A",{href:!0});var W$t=s(MK);aPr=r(W$t,"FlaxT5Model"),W$t.forEach(t),nPr=r(Xqe," (T5 model)"),Xqe.forEach(t),sPr=i(ne),k3=n(ne,"LI",{});var zqe=s(k3);ZEe=n(zqe,"STRONG",{});var Q$t=s(ZEe);lPr=r(Q$t,"vision-text-dual-encoder"),Q$t.forEach(t),iPr=r(zqe," \u2014 "),EK=n(zqe,"A",{href:!0});var H$t=s(EK);dPr=r(H$t,"FlaxVisionTextDualEncoderModel"),H$t.forEach(t),cPr=r(zqe," (VisionTextDualEncoder model)"),zqe.forEach(t),fPr=i(ne),S3=n(ne,"LI",{});var Wqe=s(S3);eCe=n(Wqe,"STRONG",{});var U$t=s(eCe);mPr=r(U$t,"vit"),U$t.forEach(t),gPr=r(Wqe," \u2014 "),CK=n(Wqe,"A",{href:!0});var J$t=s(CK);hPr=r(J$t,"FlaxViTModel"),J$t.forEach(t),pPr=r(Wqe," (ViT model)"),Wqe.forEach(t),uPr=i(ne),R3=n(ne,"LI",{});var Qqe=s(R3);oCe=n(Qqe,"STRONG",{});var Y$t=s(oCe);_Pr=r(Y$t,"wav2vec2"),Y$t.forEach(t),bPr=r(Qqe," \u2014 "),wK=n(Qqe,"A",{href:!0});var K$t=s(wK);vPr=r(K$t,"FlaxWav2Vec2Model"),K$t.forEach(t),FPr=r(Qqe," (Wav2Vec2 model)"),Qqe.forEach(t),TPr=i(ne),P3=n(ne,"LI",{});var Hqe=s(P3);rCe=n(Hqe,"STRONG",{});var Z$t=s(rCe);MPr=r(Z$t,"xglm"),Z$t.forEach(t),EPr=r(Hqe," \u2014 "),AK=n(Hqe,"A",{href:!0});var ekt=s(AK);CPr=r(ekt,"FlaxXGLMModel"),ekt.forEach(t),wPr=r(Hqe," (XGLM model)"),Hqe.forEach(t),APr=i(ne),B3=n(ne,"LI",{});var Uqe=s(B3);tCe=n(Uqe,"STRONG",{});var okt=s(tCe);yPr=r(okt,"xlm-roberta"),okt.forEach(t),LPr=r(Uqe," \u2014 "),yK=n(Uqe,"A",{href:!0});var rkt=s(yK);xPr=r(rkt,"FlaxXLMRobertaModel"),rkt.forEach(t),$Pr=r(Uqe," (XLM-RoBERTa model)"),Uqe.forEach(t),ne.forEach(t),kPr=i(Yl),T(I3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),sOe=i(f),Xc=n(f,"H2",{class:!0});var pXe=s(Xc);N3=n(pXe,"A",{id:!0,class:!0,href:!0});var tkt=s(N3);aCe=n(tkt,"SPAN",{});var akt=s(aCe);T(Fx.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),SPr=i(pXe),nCe=n(pXe,"SPAN",{});var nkt=s(nCe);RPr=r(nkt,"FlaxAutoModelForCausalLM"),nkt.forEach(t),pXe.forEach(t),lOe=i(f),hr=n(f,"DIV",{class:!0});var Kl=s(hr);T(Tx.$$.fragment,Kl),PPr=i(Kl),zc=n(Kl,"P",{});var sre=s(zc);BPr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),LK=n(sre,"A",{href:!0});var skt=s(LK);IPr=r(skt,"from_pretrained()"),skt.forEach(t),NPr=r(sre," class method or the "),xK=n(sre,"A",{href:!0});var lkt=s(xK);qPr=r(lkt,"from_config()"),lkt.forEach(t),jPr=r(sre,` class
method.`),sre.forEach(t),DPr=i(Kl),Mx=n(Kl,"P",{});var uXe=s(Mx);GPr=r(uXe,"This class cannot be instantiated directly using "),sCe=n(uXe,"CODE",{});var ikt=s(sCe);OPr=r(ikt,"__init__()"),ikt.forEach(t),VPr=r(uXe," (throws an error)."),uXe.forEach(t),XPr=i(Kl),Wt=n(Kl,"DIV",{class:!0});var D6=s(Wt);T(Ex.$$.fragment,D6),zPr=i(D6),lCe=n(D6,"P",{});var dkt=s(lCe);WPr=r(dkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dkt.forEach(t),QPr=i(D6),Wc=n(D6,"P",{});var lre=s(Wc);HPr=r(lre,`Note:
Loading a model from its configuration file does `),iCe=n(lre,"STRONG",{});var ckt=s(iCe);UPr=r(ckt,"not"),ckt.forEach(t),JPr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),$K=n(lre,"A",{href:!0});var fkt=s($K);YPr=r(fkt,"from_pretrained()"),fkt.forEach(t),KPr=r(lre," to load the model weights."),lre.forEach(t),ZPr=i(D6),T(q3.$$.fragment,D6),D6.forEach(t),eBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(Cx.$$.fragment,Zl),oBr=i(Zl),dCe=n(Zl,"P",{});var mkt=s(dCe);rBr=r(mkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mkt.forEach(t),tBr=i(Zl),Fn=n(Zl,"P",{});var G6=s(Fn);aBr=r(G6,"The model class to instantiate is selected based on the "),cCe=n(G6,"CODE",{});var gkt=s(cCe);nBr=r(gkt,"model_type"),gkt.forEach(t),sBr=r(G6,` property of the config object (either
passed as an argument or loaded from `),fCe=n(G6,"CODE",{});var hkt=s(fCe);lBr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),iBr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(G6,"CODE",{});var pkt=s(mCe);dBr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),cBr=r(G6,":"),G6.forEach(t),fBr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);j3=n(Ne,"LI",{});var Jqe=s(j3);gCe=n(Jqe,"STRONG",{});var ukt=s(gCe);mBr=r(ukt,"bart"),ukt.forEach(t),gBr=r(Jqe," \u2014 "),kK=n(Jqe,"A",{href:!0});var _kt=s(kK);hBr=r(_kt,"FlaxBartForCausalLM"),_kt.forEach(t),pBr=r(Jqe," (BART model)"),Jqe.forEach(t),uBr=i(Ne),D3=n(Ne,"LI",{});var Yqe=s(D3);hCe=n(Yqe,"STRONG",{});var bkt=s(hCe);_Br=r(bkt,"bert"),bkt.forEach(t),bBr=r(Yqe," \u2014 "),SK=n(Yqe,"A",{href:!0});var vkt=s(SK);vBr=r(vkt,"FlaxBertForCausalLM"),vkt.forEach(t),FBr=r(Yqe," (BERT model)"),Yqe.forEach(t),TBr=i(Ne),G3=n(Ne,"LI",{});var Kqe=s(G3);pCe=n(Kqe,"STRONG",{});var Fkt=s(pCe);MBr=r(Fkt,"big_bird"),Fkt.forEach(t),EBr=r(Kqe," \u2014 "),RK=n(Kqe,"A",{href:!0});var Tkt=s(RK);CBr=r(Tkt,"FlaxBigBirdForCausalLM"),Tkt.forEach(t),wBr=r(Kqe," (BigBird model)"),Kqe.forEach(t),ABr=i(Ne),O3=n(Ne,"LI",{});var Zqe=s(O3);uCe=n(Zqe,"STRONG",{});var Mkt=s(uCe);yBr=r(Mkt,"electra"),Mkt.forEach(t),LBr=r(Zqe," \u2014 "),PK=n(Zqe,"A",{href:!0});var Ekt=s(PK);xBr=r(Ekt,"FlaxElectraForCausalLM"),Ekt.forEach(t),$Br=r(Zqe," (ELECTRA model)"),Zqe.forEach(t),kBr=i(Ne),V3=n(Ne,"LI",{});var eje=s(V3);_Ce=n(eje,"STRONG",{});var Ckt=s(_Ce);SBr=r(Ckt,"gpt2"),Ckt.forEach(t),RBr=r(eje," \u2014 "),BK=n(eje,"A",{href:!0});var wkt=s(BK);PBr=r(wkt,"FlaxGPT2LMHeadModel"),wkt.forEach(t),BBr=r(eje," (OpenAI GPT-2 model)"),eje.forEach(t),IBr=i(Ne),X3=n(Ne,"LI",{});var oje=s(X3);bCe=n(oje,"STRONG",{});var Akt=s(bCe);NBr=r(Akt,"gpt_neo"),Akt.forEach(t),qBr=r(oje," \u2014 "),IK=n(oje,"A",{href:!0});var ykt=s(IK);jBr=r(ykt,"FlaxGPTNeoForCausalLM"),ykt.forEach(t),DBr=r(oje," (GPT Neo model)"),oje.forEach(t),GBr=i(Ne),z3=n(Ne,"LI",{});var rje=s(z3);vCe=n(rje,"STRONG",{});var Lkt=s(vCe);OBr=r(Lkt,"gptj"),Lkt.forEach(t),VBr=r(rje," \u2014 "),NK=n(rje,"A",{href:!0});var xkt=s(NK);XBr=r(xkt,"FlaxGPTJForCausalLM"),xkt.forEach(t),zBr=r(rje," (GPT-J model)"),rje.forEach(t),WBr=i(Ne),W3=n(Ne,"LI",{});var tje=s(W3);FCe=n(tje,"STRONG",{});var $kt=s(FCe);QBr=r($kt,"opt"),$kt.forEach(t),HBr=r(tje," \u2014 "),qK=n(tje,"A",{href:!0});var kkt=s(qK);UBr=r(kkt,"FlaxOPTForCausalLM"),kkt.forEach(t),JBr=r(tje," (OPT model)"),tje.forEach(t),YBr=i(Ne),Q3=n(Ne,"LI",{});var aje=s(Q3);TCe=n(aje,"STRONG",{});var Skt=s(TCe);KBr=r(Skt,"roberta"),Skt.forEach(t),ZBr=r(aje," \u2014 "),jK=n(aje,"A",{href:!0});var Rkt=s(jK);eIr=r(Rkt,"FlaxRobertaForCausalLM"),Rkt.forEach(t),oIr=r(aje," (RoBERTa model)"),aje.forEach(t),rIr=i(Ne),H3=n(Ne,"LI",{});var nje=s(H3);MCe=n(nje,"STRONG",{});var Pkt=s(MCe);tIr=r(Pkt,"xglm"),Pkt.forEach(t),aIr=r(nje," \u2014 "),DK=n(nje,"A",{href:!0});var Bkt=s(DK);nIr=r(Bkt,"FlaxXGLMForCausalLM"),Bkt.forEach(t),sIr=r(nje," (XGLM model)"),nje.forEach(t),Ne.forEach(t),lIr=i(Zl),T(U3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),iOe=i(f),Qc=n(f,"H2",{class:!0});var _Xe=s(Qc);J3=n(_Xe,"A",{id:!0,class:!0,href:!0});var Ikt=s(J3);ECe=n(Ikt,"SPAN",{});var Nkt=s(ECe);T(wx.$$.fragment,Nkt),Nkt.forEach(t),Ikt.forEach(t),iIr=i(_Xe),CCe=n(_Xe,"SPAN",{});var qkt=s(CCe);dIr=r(qkt,"FlaxAutoModelForPreTraining"),qkt.forEach(t),_Xe.forEach(t),dOe=i(f),pr=n(f,"DIV",{class:!0});var ei=s(pr);T(Ax.$$.fragment,ei),cIr=i(ei),Hc=n(ei,"P",{});var ire=s(Hc);fIr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),GK=n(ire,"A",{href:!0});var jkt=s(GK);mIr=r(jkt,"from_pretrained()"),jkt.forEach(t),gIr=r(ire," class method or the "),OK=n(ire,"A",{href:!0});var Dkt=s(OK);hIr=r(Dkt,"from_config()"),Dkt.forEach(t),pIr=r(ire,` class
method.`),ire.forEach(t),uIr=i(ei),yx=n(ei,"P",{});var bXe=s(yx);_Ir=r(bXe,"This class cannot be instantiated directly using "),wCe=n(bXe,"CODE",{});var Gkt=s(wCe);bIr=r(Gkt,"__init__()"),Gkt.forEach(t),vIr=r(bXe," (throws an error)."),bXe.forEach(t),FIr=i(ei),Qt=n(ei,"DIV",{class:!0});var O6=s(Qt);T(Lx.$$.fragment,O6),TIr=i(O6),ACe=n(O6,"P",{});var Okt=s(ACe);MIr=r(Okt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Okt.forEach(t),EIr=i(O6),Uc=n(O6,"P",{});var dre=s(Uc);CIr=r(dre,`Note:
Loading a model from its configuration file does `),yCe=n(dre,"STRONG",{});var Vkt=s(yCe);wIr=r(Vkt,"not"),Vkt.forEach(t),AIr=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),VK=n(dre,"A",{href:!0});var Xkt=s(VK);yIr=r(Xkt,"from_pretrained()"),Xkt.forEach(t),LIr=r(dre," to load the model weights."),dre.forEach(t),xIr=i(O6),T(Y3.$$.fragment,O6),O6.forEach(t),$Ir=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(xx.$$.fragment,oi),kIr=i(oi),LCe=n(oi,"P",{});var zkt=s(LCe);SIr=r(zkt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),zkt.forEach(t),RIr=i(oi),Tn=n(oi,"P",{});var V6=s(Tn);PIr=r(V6,"The model class to instantiate is selected based on the "),xCe=n(V6,"CODE",{});var Wkt=s(xCe);BIr=r(Wkt,"model_type"),Wkt.forEach(t),IIr=r(V6,` property of the config object (either
passed as an argument or loaded from `),$Ce=n(V6,"CODE",{});var Qkt=s($Ce);NIr=r(Qkt,"pretrained_model_name_or_path"),Qkt.forEach(t),qIr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kCe=n(V6,"CODE",{});var Hkt=s(kCe);jIr=r(Hkt,"pretrained_model_name_or_path"),Hkt.forEach(t),DIr=r(V6,":"),V6.forEach(t),GIr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);K3=n(we,"LI",{});var sje=s(K3);SCe=n(sje,"STRONG",{});var Ukt=s(SCe);OIr=r(Ukt,"albert"),Ukt.forEach(t),VIr=r(sje," \u2014 "),XK=n(sje,"A",{href:!0});var Jkt=s(XK);XIr=r(Jkt,"FlaxAlbertForPreTraining"),Jkt.forEach(t),zIr=r(sje," (ALBERT model)"),sje.forEach(t),WIr=i(we),Z3=n(we,"LI",{});var lje=s(Z3);RCe=n(lje,"STRONG",{});var Ykt=s(RCe);QIr=r(Ykt,"bart"),Ykt.forEach(t),HIr=r(lje," \u2014 "),zK=n(lje,"A",{href:!0});var Kkt=s(zK);UIr=r(Kkt,"FlaxBartForConditionalGeneration"),Kkt.forEach(t),JIr=r(lje," (BART model)"),lje.forEach(t),YIr=i(we),e0=n(we,"LI",{});var ije=s(e0);PCe=n(ije,"STRONG",{});var Zkt=s(PCe);KIr=r(Zkt,"bert"),Zkt.forEach(t),ZIr=r(ije," \u2014 "),WK=n(ije,"A",{href:!0});var eSt=s(WK);eNr=r(eSt,"FlaxBertForPreTraining"),eSt.forEach(t),oNr=r(ije," (BERT model)"),ije.forEach(t),rNr=i(we),o0=n(we,"LI",{});var dje=s(o0);BCe=n(dje,"STRONG",{});var oSt=s(BCe);tNr=r(oSt,"big_bird"),oSt.forEach(t),aNr=r(dje," \u2014 "),QK=n(dje,"A",{href:!0});var rSt=s(QK);nNr=r(rSt,"FlaxBigBirdForPreTraining"),rSt.forEach(t),sNr=r(dje," (BigBird model)"),dje.forEach(t),lNr=i(we),r0=n(we,"LI",{});var cje=s(r0);ICe=n(cje,"STRONG",{});var tSt=s(ICe);iNr=r(tSt,"electra"),tSt.forEach(t),dNr=r(cje," \u2014 "),HK=n(cje,"A",{href:!0});var aSt=s(HK);cNr=r(aSt,"FlaxElectraForPreTraining"),aSt.forEach(t),fNr=r(cje," (ELECTRA model)"),cje.forEach(t),mNr=i(we),t0=n(we,"LI",{});var fje=s(t0);NCe=n(fje,"STRONG",{});var nSt=s(NCe);gNr=r(nSt,"mbart"),nSt.forEach(t),hNr=r(fje," \u2014 "),UK=n(fje,"A",{href:!0});var sSt=s(UK);pNr=r(sSt,"FlaxMBartForConditionalGeneration"),sSt.forEach(t),uNr=r(fje," (mBART model)"),fje.forEach(t),_Nr=i(we),a0=n(we,"LI",{});var mje=s(a0);qCe=n(mje,"STRONG",{});var lSt=s(qCe);bNr=r(lSt,"mt5"),lSt.forEach(t),vNr=r(mje," \u2014 "),JK=n(mje,"A",{href:!0});var iSt=s(JK);FNr=r(iSt,"FlaxMT5ForConditionalGeneration"),iSt.forEach(t),TNr=r(mje," (MT5 model)"),mje.forEach(t),MNr=i(we),n0=n(we,"LI",{});var gje=s(n0);jCe=n(gje,"STRONG",{});var dSt=s(jCe);ENr=r(dSt,"roberta"),dSt.forEach(t),CNr=r(gje," \u2014 "),YK=n(gje,"A",{href:!0});var cSt=s(YK);wNr=r(cSt,"FlaxRobertaForMaskedLM"),cSt.forEach(t),ANr=r(gje," (RoBERTa model)"),gje.forEach(t),yNr=i(we),s0=n(we,"LI",{});var hje=s(s0);DCe=n(hje,"STRONG",{});var fSt=s(DCe);LNr=r(fSt,"roformer"),fSt.forEach(t),xNr=r(hje," \u2014 "),KK=n(hje,"A",{href:!0});var mSt=s(KK);$Nr=r(mSt,"FlaxRoFormerForMaskedLM"),mSt.forEach(t),kNr=r(hje," (RoFormer model)"),hje.forEach(t),SNr=i(we),l0=n(we,"LI",{});var pje=s(l0);GCe=n(pje,"STRONG",{});var gSt=s(GCe);RNr=r(gSt,"t5"),gSt.forEach(t),PNr=r(pje," \u2014 "),ZK=n(pje,"A",{href:!0});var hSt=s(ZK);BNr=r(hSt,"FlaxT5ForConditionalGeneration"),hSt.forEach(t),INr=r(pje," (T5 model)"),pje.forEach(t),NNr=i(we),i0=n(we,"LI",{});var uje=s(i0);OCe=n(uje,"STRONG",{});var pSt=s(OCe);qNr=r(pSt,"wav2vec2"),pSt.forEach(t),jNr=r(uje," \u2014 "),eZ=n(uje,"A",{href:!0});var uSt=s(eZ);DNr=r(uSt,"FlaxWav2Vec2ForPreTraining"),uSt.forEach(t),GNr=r(uje," (Wav2Vec2 model)"),uje.forEach(t),ONr=i(we),d0=n(we,"LI",{});var _je=s(d0);VCe=n(_je,"STRONG",{});var _St=s(VCe);VNr=r(_St,"xlm-roberta"),_St.forEach(t),XNr=r(_je," \u2014 "),oZ=n(_je,"A",{href:!0});var bSt=s(oZ);zNr=r(bSt,"FlaxXLMRobertaForMaskedLM"),bSt.forEach(t),WNr=r(_je," (XLM-RoBERTa model)"),_je.forEach(t),we.forEach(t),QNr=i(oi),T(c0.$$.fragment,oi),oi.forEach(t),ei.forEach(t),cOe=i(f),Jc=n(f,"H2",{class:!0});var vXe=s(Jc);f0=n(vXe,"A",{id:!0,class:!0,href:!0});var vSt=s(f0);XCe=n(vSt,"SPAN",{});var FSt=s(XCe);T($x.$$.fragment,FSt),FSt.forEach(t),vSt.forEach(t),HNr=i(vXe),zCe=n(vXe,"SPAN",{});var TSt=s(zCe);UNr=r(TSt,"FlaxAutoModelForMaskedLM"),TSt.forEach(t),vXe.forEach(t),fOe=i(f),ur=n(f,"DIV",{class:!0});var ri=s(ur);T(kx.$$.fragment,ri),JNr=i(ri),Yc=n(ri,"P",{});var cre=s(Yc);YNr=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),rZ=n(cre,"A",{href:!0});var MSt=s(rZ);KNr=r(MSt,"from_pretrained()"),MSt.forEach(t),ZNr=r(cre," class method or the "),tZ=n(cre,"A",{href:!0});var ESt=s(tZ);eqr=r(ESt,"from_config()"),ESt.forEach(t),oqr=r(cre,` class
method.`),cre.forEach(t),rqr=i(ri),Sx=n(ri,"P",{});var FXe=s(Sx);tqr=r(FXe,"This class cannot be instantiated directly using "),WCe=n(FXe,"CODE",{});var CSt=s(WCe);aqr=r(CSt,"__init__()"),CSt.forEach(t),nqr=r(FXe," (throws an error)."),FXe.forEach(t),sqr=i(ri),Ht=n(ri,"DIV",{class:!0});var X6=s(Ht);T(Rx.$$.fragment,X6),lqr=i(X6),QCe=n(X6,"P",{});var wSt=s(QCe);iqr=r(wSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),wSt.forEach(t),dqr=i(X6),Kc=n(X6,"P",{});var fre=s(Kc);cqr=r(fre,`Note:
Loading a model from its configuration file does `),HCe=n(fre,"STRONG",{});var ASt=s(HCe);fqr=r(ASt,"not"),ASt.forEach(t),mqr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(fre,"A",{href:!0});var ySt=s(aZ);gqr=r(ySt,"from_pretrained()"),ySt.forEach(t),hqr=r(fre," to load the model weights."),fre.forEach(t),pqr=i(X6),T(m0.$$.fragment,X6),X6.forEach(t),uqr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(Px.$$.fragment,ti),_qr=i(ti),UCe=n(ti,"P",{});var LSt=s(UCe);bqr=r(LSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LSt.forEach(t),vqr=i(ti),Mn=n(ti,"P",{});var z6=s(Mn);Fqr=r(z6,"The model class to instantiate is selected based on the "),JCe=n(z6,"CODE",{});var xSt=s(JCe);Tqr=r(xSt,"model_type"),xSt.forEach(t),Mqr=r(z6,` property of the config object (either
passed as an argument or loaded from `),YCe=n(z6,"CODE",{});var $St=s(YCe);Eqr=r($St,"pretrained_model_name_or_path"),$St.forEach(t),Cqr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KCe=n(z6,"CODE",{});var kSt=s(KCe);wqr=r(kSt,"pretrained_model_name_or_path"),kSt.forEach(t),Aqr=r(z6,":"),z6.forEach(t),yqr=i(ti),$e=n(ti,"UL",{});var qe=s($e);g0=n(qe,"LI",{});var bje=s(g0);ZCe=n(bje,"STRONG",{});var SSt=s(ZCe);Lqr=r(SSt,"albert"),SSt.forEach(t),xqr=r(bje," \u2014 "),nZ=n(bje,"A",{href:!0});var RSt=s(nZ);$qr=r(RSt,"FlaxAlbertForMaskedLM"),RSt.forEach(t),kqr=r(bje," (ALBERT model)"),bje.forEach(t),Sqr=i(qe),h0=n(qe,"LI",{});var vje=s(h0);e5e=n(vje,"STRONG",{});var PSt=s(e5e);Rqr=r(PSt,"bart"),PSt.forEach(t),Pqr=r(vje," \u2014 "),sZ=n(vje,"A",{href:!0});var BSt=s(sZ);Bqr=r(BSt,"FlaxBartForConditionalGeneration"),BSt.forEach(t),Iqr=r(vje," (BART model)"),vje.forEach(t),Nqr=i(qe),p0=n(qe,"LI",{});var Fje=s(p0);o5e=n(Fje,"STRONG",{});var ISt=s(o5e);qqr=r(ISt,"bert"),ISt.forEach(t),jqr=r(Fje," \u2014 "),lZ=n(Fje,"A",{href:!0});var NSt=s(lZ);Dqr=r(NSt,"FlaxBertForMaskedLM"),NSt.forEach(t),Gqr=r(Fje," (BERT model)"),Fje.forEach(t),Oqr=i(qe),u0=n(qe,"LI",{});var Tje=s(u0);r5e=n(Tje,"STRONG",{});var qSt=s(r5e);Vqr=r(qSt,"big_bird"),qSt.forEach(t),Xqr=r(Tje," \u2014 "),iZ=n(Tje,"A",{href:!0});var jSt=s(iZ);zqr=r(jSt,"FlaxBigBirdForMaskedLM"),jSt.forEach(t),Wqr=r(Tje," (BigBird model)"),Tje.forEach(t),Qqr=i(qe),_0=n(qe,"LI",{});var Mje=s(_0);t5e=n(Mje,"STRONG",{});var DSt=s(t5e);Hqr=r(DSt,"distilbert"),DSt.forEach(t),Uqr=r(Mje," \u2014 "),dZ=n(Mje,"A",{href:!0});var GSt=s(dZ);Jqr=r(GSt,"FlaxDistilBertForMaskedLM"),GSt.forEach(t),Yqr=r(Mje," (DistilBERT model)"),Mje.forEach(t),Kqr=i(qe),b0=n(qe,"LI",{});var Eje=s(b0);a5e=n(Eje,"STRONG",{});var OSt=s(a5e);Zqr=r(OSt,"electra"),OSt.forEach(t),ejr=r(Eje," \u2014 "),cZ=n(Eje,"A",{href:!0});var VSt=s(cZ);ojr=r(VSt,"FlaxElectraForMaskedLM"),VSt.forEach(t),rjr=r(Eje," (ELECTRA model)"),Eje.forEach(t),tjr=i(qe),v0=n(qe,"LI",{});var Cje=s(v0);n5e=n(Cje,"STRONG",{});var XSt=s(n5e);ajr=r(XSt,"mbart"),XSt.forEach(t),njr=r(Cje," \u2014 "),fZ=n(Cje,"A",{href:!0});var zSt=s(fZ);sjr=r(zSt,"FlaxMBartForConditionalGeneration"),zSt.forEach(t),ljr=r(Cje," (mBART model)"),Cje.forEach(t),ijr=i(qe),F0=n(qe,"LI",{});var wje=s(F0);s5e=n(wje,"STRONG",{});var WSt=s(s5e);djr=r(WSt,"roberta"),WSt.forEach(t),cjr=r(wje," \u2014 "),mZ=n(wje,"A",{href:!0});var QSt=s(mZ);fjr=r(QSt,"FlaxRobertaForMaskedLM"),QSt.forEach(t),mjr=r(wje," (RoBERTa model)"),wje.forEach(t),gjr=i(qe),T0=n(qe,"LI",{});var Aje=s(T0);l5e=n(Aje,"STRONG",{});var HSt=s(l5e);hjr=r(HSt,"roformer"),HSt.forEach(t),pjr=r(Aje," \u2014 "),gZ=n(Aje,"A",{href:!0});var USt=s(gZ);ujr=r(USt,"FlaxRoFormerForMaskedLM"),USt.forEach(t),_jr=r(Aje," (RoFormer model)"),Aje.forEach(t),bjr=i(qe),M0=n(qe,"LI",{});var yje=s(M0);i5e=n(yje,"STRONG",{});var JSt=s(i5e);vjr=r(JSt,"xlm-roberta"),JSt.forEach(t),Fjr=r(yje," \u2014 "),hZ=n(yje,"A",{href:!0});var YSt=s(hZ);Tjr=r(YSt,"FlaxXLMRobertaForMaskedLM"),YSt.forEach(t),Mjr=r(yje," (XLM-RoBERTa model)"),yje.forEach(t),qe.forEach(t),Ejr=i(ti),T(E0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),mOe=i(f),Zc=n(f,"H2",{class:!0});var TXe=s(Zc);C0=n(TXe,"A",{id:!0,class:!0,href:!0});var KSt=s(C0);d5e=n(KSt,"SPAN",{});var ZSt=s(d5e);T(Bx.$$.fragment,ZSt),ZSt.forEach(t),KSt.forEach(t),Cjr=i(TXe),c5e=n(TXe,"SPAN",{});var eRt=s(c5e);wjr=r(eRt,"FlaxAutoModelForSeq2SeqLM"),eRt.forEach(t),TXe.forEach(t),gOe=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(Ix.$$.fragment,ai),Ajr=i(ai),ef=n(ai,"P",{});var mre=s(ef);yjr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),pZ=n(mre,"A",{href:!0});var oRt=s(pZ);Ljr=r(oRt,"from_pretrained()"),oRt.forEach(t),xjr=r(mre," class method or the "),uZ=n(mre,"A",{href:!0});var rRt=s(uZ);$jr=r(rRt,"from_config()"),rRt.forEach(t),kjr=r(mre,` class
method.`),mre.forEach(t),Sjr=i(ai),Nx=n(ai,"P",{});var MXe=s(Nx);Rjr=r(MXe,"This class cannot be instantiated directly using "),f5e=n(MXe,"CODE",{});var tRt=s(f5e);Pjr=r(tRt,"__init__()"),tRt.forEach(t),Bjr=r(MXe," (throws an error)."),MXe.forEach(t),Ijr=i(ai),Ut=n(ai,"DIV",{class:!0});var W6=s(Ut);T(qx.$$.fragment,W6),Njr=i(W6),m5e=n(W6,"P",{});var aRt=s(m5e);qjr=r(aRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aRt.forEach(t),jjr=i(W6),of=n(W6,"P",{});var gre=s(of);Djr=r(gre,`Note:
Loading a model from its configuration file does `),g5e=n(gre,"STRONG",{});var nRt=s(g5e);Gjr=r(nRt,"not"),nRt.forEach(t),Ojr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Z=n(gre,"A",{href:!0});var sRt=s(_Z);Vjr=r(sRt,"from_pretrained()"),sRt.forEach(t),Xjr=r(gre," to load the model weights."),gre.forEach(t),zjr=i(W6),T(w0.$$.fragment,W6),W6.forEach(t),Wjr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(jx.$$.fragment,ni),Qjr=i(ni),h5e=n(ni,"P",{});var lRt=s(h5e);Hjr=r(lRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lRt.forEach(t),Ujr=i(ni),En=n(ni,"P",{});var Q6=s(En);Jjr=r(Q6,"The model class to instantiate is selected based on the "),p5e=n(Q6,"CODE",{});var iRt=s(p5e);Yjr=r(iRt,"model_type"),iRt.forEach(t),Kjr=r(Q6,` property of the config object (either
passed as an argument or loaded from `),u5e=n(Q6,"CODE",{});var dRt=s(u5e);Zjr=r(dRt,"pretrained_model_name_or_path"),dRt.forEach(t),eDr=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_5e=n(Q6,"CODE",{});var cRt=s(_5e);oDr=r(cRt,"pretrained_model_name_or_path"),cRt.forEach(t),rDr=r(Q6,":"),Q6.forEach(t),tDr=i(ni),Pe=n(ni,"UL",{});var ze=s(Pe);A0=n(ze,"LI",{});var Lje=s(A0);b5e=n(Lje,"STRONG",{});var fRt=s(b5e);aDr=r(fRt,"bart"),fRt.forEach(t),nDr=r(Lje," \u2014 "),bZ=n(Lje,"A",{href:!0});var mRt=s(bZ);sDr=r(mRt,"FlaxBartForConditionalGeneration"),mRt.forEach(t),lDr=r(Lje," (BART model)"),Lje.forEach(t),iDr=i(ze),y0=n(ze,"LI",{});var xje=s(y0);v5e=n(xje,"STRONG",{});var gRt=s(v5e);dDr=r(gRt,"blenderbot"),gRt.forEach(t),cDr=r(xje," \u2014 "),vZ=n(xje,"A",{href:!0});var hRt=s(vZ);fDr=r(hRt,"FlaxBlenderbotForConditionalGeneration"),hRt.forEach(t),mDr=r(xje," (Blenderbot model)"),xje.forEach(t),gDr=i(ze),L0=n(ze,"LI",{});var $je=s(L0);F5e=n($je,"STRONG",{});var pRt=s(F5e);hDr=r(pRt,"blenderbot-small"),pRt.forEach(t),pDr=r($je," \u2014 "),FZ=n($je,"A",{href:!0});var uRt=s(FZ);uDr=r(uRt,"FlaxBlenderbotSmallForConditionalGeneration"),uRt.forEach(t),_Dr=r($je," (BlenderbotSmall model)"),$je.forEach(t),bDr=i(ze),x0=n(ze,"LI",{});var kje=s(x0);T5e=n(kje,"STRONG",{});var _Rt=s(T5e);vDr=r(_Rt,"encoder-decoder"),_Rt.forEach(t),FDr=r(kje," \u2014 "),TZ=n(kje,"A",{href:!0});var bRt=s(TZ);TDr=r(bRt,"FlaxEncoderDecoderModel"),bRt.forEach(t),MDr=r(kje," (Encoder decoder model)"),kje.forEach(t),EDr=i(ze),$0=n(ze,"LI",{});var Sje=s($0);M5e=n(Sje,"STRONG",{});var vRt=s(M5e);CDr=r(vRt,"marian"),vRt.forEach(t),wDr=r(Sje," \u2014 "),MZ=n(Sje,"A",{href:!0});var FRt=s(MZ);ADr=r(FRt,"FlaxMarianMTModel"),FRt.forEach(t),yDr=r(Sje," (Marian model)"),Sje.forEach(t),LDr=i(ze),k0=n(ze,"LI",{});var Rje=s(k0);E5e=n(Rje,"STRONG",{});var TRt=s(E5e);xDr=r(TRt,"mbart"),TRt.forEach(t),$Dr=r(Rje," \u2014 "),EZ=n(Rje,"A",{href:!0});var MRt=s(EZ);kDr=r(MRt,"FlaxMBartForConditionalGeneration"),MRt.forEach(t),SDr=r(Rje," (mBART model)"),Rje.forEach(t),RDr=i(ze),S0=n(ze,"LI",{});var Pje=s(S0);C5e=n(Pje,"STRONG",{});var ERt=s(C5e);PDr=r(ERt,"mt5"),ERt.forEach(t),BDr=r(Pje," \u2014 "),CZ=n(Pje,"A",{href:!0});var CRt=s(CZ);IDr=r(CRt,"FlaxMT5ForConditionalGeneration"),CRt.forEach(t),NDr=r(Pje," (MT5 model)"),Pje.forEach(t),qDr=i(ze),R0=n(ze,"LI",{});var Bje=s(R0);w5e=n(Bje,"STRONG",{});var wRt=s(w5e);jDr=r(wRt,"pegasus"),wRt.forEach(t),DDr=r(Bje," \u2014 "),wZ=n(Bje,"A",{href:!0});var ARt=s(wZ);GDr=r(ARt,"FlaxPegasusForConditionalGeneration"),ARt.forEach(t),ODr=r(Bje," (Pegasus model)"),Bje.forEach(t),VDr=i(ze),P0=n(ze,"LI",{});var Ije=s(P0);A5e=n(Ije,"STRONG",{});var yRt=s(A5e);XDr=r(yRt,"t5"),yRt.forEach(t),zDr=r(Ije," \u2014 "),AZ=n(Ije,"A",{href:!0});var LRt=s(AZ);WDr=r(LRt,"FlaxT5ForConditionalGeneration"),LRt.forEach(t),QDr=r(Ije," (T5 model)"),Ije.forEach(t),ze.forEach(t),HDr=i(ni),T(B0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),hOe=i(f),rf=n(f,"H2",{class:!0});var EXe=s(rf);I0=n(EXe,"A",{id:!0,class:!0,href:!0});var xRt=s(I0);y5e=n(xRt,"SPAN",{});var $Rt=s(y5e);T(Dx.$$.fragment,$Rt),$Rt.forEach(t),xRt.forEach(t),UDr=i(EXe),L5e=n(EXe,"SPAN",{});var kRt=s(L5e);JDr=r(kRt,"FlaxAutoModelForSequenceClassification"),kRt.forEach(t),EXe.forEach(t),pOe=i(f),br=n(f,"DIV",{class:!0});var si=s(br);T(Gx.$$.fragment,si),YDr=i(si),tf=n(si,"P",{});var hre=s(tf);KDr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),yZ=n(hre,"A",{href:!0});var SRt=s(yZ);ZDr=r(SRt,"from_pretrained()"),SRt.forEach(t),eGr=r(hre," class method or the "),LZ=n(hre,"A",{href:!0});var RRt=s(LZ);oGr=r(RRt,"from_config()"),RRt.forEach(t),rGr=r(hre,` class
method.`),hre.forEach(t),tGr=i(si),Ox=n(si,"P",{});var CXe=s(Ox);aGr=r(CXe,"This class cannot be instantiated directly using "),x5e=n(CXe,"CODE",{});var PRt=s(x5e);nGr=r(PRt,"__init__()"),PRt.forEach(t),sGr=r(CXe," (throws an error)."),CXe.forEach(t),lGr=i(si),Jt=n(si,"DIV",{class:!0});var H6=s(Jt);T(Vx.$$.fragment,H6),iGr=i(H6),$5e=n(H6,"P",{});var BRt=s($5e);dGr=r(BRt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),BRt.forEach(t),cGr=i(H6),af=n(H6,"P",{});var pre=s(af);fGr=r(pre,`Note:
Loading a model from its configuration file does `),k5e=n(pre,"STRONG",{});var IRt=s(k5e);mGr=r(IRt,"not"),IRt.forEach(t),gGr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xZ=n(pre,"A",{href:!0});var NRt=s(xZ);hGr=r(NRt,"from_pretrained()"),NRt.forEach(t),pGr=r(pre," to load the model weights."),pre.forEach(t),uGr=i(H6),T(N0.$$.fragment,H6),H6.forEach(t),_Gr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(Xx.$$.fragment,li),bGr=i(li),S5e=n(li,"P",{});var qRt=s(S5e);vGr=r(qRt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qRt.forEach(t),FGr=i(li),Cn=n(li,"P",{});var U6=s(Cn);TGr=r(U6,"The model class to instantiate is selected based on the "),R5e=n(U6,"CODE",{});var jRt=s(R5e);MGr=r(jRt,"model_type"),jRt.forEach(t),EGr=r(U6,` property of the config object (either
passed as an argument or loaded from `),P5e=n(U6,"CODE",{});var DRt=s(P5e);CGr=r(DRt,"pretrained_model_name_or_path"),DRt.forEach(t),wGr=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(U6,"CODE",{});var GRt=s(B5e);AGr=r(GRt,"pretrained_model_name_or_path"),GRt.forEach(t),yGr=r(U6,":"),U6.forEach(t),LGr=i(li),ke=n(li,"UL",{});var je=s(ke);q0=n(je,"LI",{});var Nje=s(q0);I5e=n(Nje,"STRONG",{});var ORt=s(I5e);xGr=r(ORt,"albert"),ORt.forEach(t),$Gr=r(Nje," \u2014 "),$Z=n(Nje,"A",{href:!0});var VRt=s($Z);kGr=r(VRt,"FlaxAlbertForSequenceClassification"),VRt.forEach(t),SGr=r(Nje," (ALBERT model)"),Nje.forEach(t),RGr=i(je),j0=n(je,"LI",{});var qje=s(j0);N5e=n(qje,"STRONG",{});var XRt=s(N5e);PGr=r(XRt,"bart"),XRt.forEach(t),BGr=r(qje," \u2014 "),kZ=n(qje,"A",{href:!0});var zRt=s(kZ);IGr=r(zRt,"FlaxBartForSequenceClassification"),zRt.forEach(t),NGr=r(qje," (BART model)"),qje.forEach(t),qGr=i(je),D0=n(je,"LI",{});var jje=s(D0);q5e=n(jje,"STRONG",{});var WRt=s(q5e);jGr=r(WRt,"bert"),WRt.forEach(t),DGr=r(jje," \u2014 "),SZ=n(jje,"A",{href:!0});var QRt=s(SZ);GGr=r(QRt,"FlaxBertForSequenceClassification"),QRt.forEach(t),OGr=r(jje," (BERT model)"),jje.forEach(t),VGr=i(je),G0=n(je,"LI",{});var Dje=s(G0);j5e=n(Dje,"STRONG",{});var HRt=s(j5e);XGr=r(HRt,"big_bird"),HRt.forEach(t),zGr=r(Dje," \u2014 "),RZ=n(Dje,"A",{href:!0});var URt=s(RZ);WGr=r(URt,"FlaxBigBirdForSequenceClassification"),URt.forEach(t),QGr=r(Dje," (BigBird model)"),Dje.forEach(t),HGr=i(je),O0=n(je,"LI",{});var Gje=s(O0);D5e=n(Gje,"STRONG",{});var JRt=s(D5e);UGr=r(JRt,"distilbert"),JRt.forEach(t),JGr=r(Gje," \u2014 "),PZ=n(Gje,"A",{href:!0});var YRt=s(PZ);YGr=r(YRt,"FlaxDistilBertForSequenceClassification"),YRt.forEach(t),KGr=r(Gje," (DistilBERT model)"),Gje.forEach(t),ZGr=i(je),V0=n(je,"LI",{});var Oje=s(V0);G5e=n(Oje,"STRONG",{});var KRt=s(G5e);eOr=r(KRt,"electra"),KRt.forEach(t),oOr=r(Oje," \u2014 "),BZ=n(Oje,"A",{href:!0});var ZRt=s(BZ);rOr=r(ZRt,"FlaxElectraForSequenceClassification"),ZRt.forEach(t),tOr=r(Oje," (ELECTRA model)"),Oje.forEach(t),aOr=i(je),X0=n(je,"LI",{});var Vje=s(X0);O5e=n(Vje,"STRONG",{});var ePt=s(O5e);nOr=r(ePt,"mbart"),ePt.forEach(t),sOr=r(Vje," \u2014 "),IZ=n(Vje,"A",{href:!0});var oPt=s(IZ);lOr=r(oPt,"FlaxMBartForSequenceClassification"),oPt.forEach(t),iOr=r(Vje," (mBART model)"),Vje.forEach(t),dOr=i(je),z0=n(je,"LI",{});var Xje=s(z0);V5e=n(Xje,"STRONG",{});var rPt=s(V5e);cOr=r(rPt,"roberta"),rPt.forEach(t),fOr=r(Xje," \u2014 "),NZ=n(Xje,"A",{href:!0});var tPt=s(NZ);mOr=r(tPt,"FlaxRobertaForSequenceClassification"),tPt.forEach(t),gOr=r(Xje," (RoBERTa model)"),Xje.forEach(t),hOr=i(je),W0=n(je,"LI",{});var zje=s(W0);X5e=n(zje,"STRONG",{});var aPt=s(X5e);pOr=r(aPt,"roformer"),aPt.forEach(t),uOr=r(zje," \u2014 "),qZ=n(zje,"A",{href:!0});var nPt=s(qZ);_Or=r(nPt,"FlaxRoFormerForSequenceClassification"),nPt.forEach(t),bOr=r(zje," (RoFormer model)"),zje.forEach(t),vOr=i(je),Q0=n(je,"LI",{});var Wje=s(Q0);z5e=n(Wje,"STRONG",{});var sPt=s(z5e);FOr=r(sPt,"xlm-roberta"),sPt.forEach(t),TOr=r(Wje," \u2014 "),jZ=n(Wje,"A",{href:!0});var lPt=s(jZ);MOr=r(lPt,"FlaxXLMRobertaForSequenceClassification"),lPt.forEach(t),EOr=r(Wje," (XLM-RoBERTa model)"),Wje.forEach(t),je.forEach(t),COr=i(li),T(H0.$$.fragment,li),li.forEach(t),si.forEach(t),uOe=i(f),nf=n(f,"H2",{class:!0});var wXe=s(nf);U0=n(wXe,"A",{id:!0,class:!0,href:!0});var iPt=s(U0);W5e=n(iPt,"SPAN",{});var dPt=s(W5e);T(zx.$$.fragment,dPt),dPt.forEach(t),iPt.forEach(t),wOr=i(wXe),Q5e=n(wXe,"SPAN",{});var cPt=s(Q5e);AOr=r(cPt,"FlaxAutoModelForQuestionAnswering"),cPt.forEach(t),wXe.forEach(t),_Oe=i(f),vr=n(f,"DIV",{class:!0});var ii=s(vr);T(Wx.$$.fragment,ii),yOr=i(ii),sf=n(ii,"P",{});var ure=s(sf);LOr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DZ=n(ure,"A",{href:!0});var fPt=s(DZ);xOr=r(fPt,"from_pretrained()"),fPt.forEach(t),$Or=r(ure," class method or the "),GZ=n(ure,"A",{href:!0});var mPt=s(GZ);kOr=r(mPt,"from_config()"),mPt.forEach(t),SOr=r(ure,` class
method.`),ure.forEach(t),ROr=i(ii),Qx=n(ii,"P",{});var AXe=s(Qx);POr=r(AXe,"This class cannot be instantiated directly using "),H5e=n(AXe,"CODE",{});var gPt=s(H5e);BOr=r(gPt,"__init__()"),gPt.forEach(t),IOr=r(AXe," (throws an error)."),AXe.forEach(t),NOr=i(ii),Yt=n(ii,"DIV",{class:!0});var J6=s(Yt);T(Hx.$$.fragment,J6),qOr=i(J6),U5e=n(J6,"P",{});var hPt=s(U5e);jOr=r(hPt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),hPt.forEach(t),DOr=i(J6),lf=n(J6,"P",{});var _re=s(lf);GOr=r(_re,`Note:
Loading a model from its configuration file does `),J5e=n(_re,"STRONG",{});var pPt=s(J5e);OOr=r(pPt,"not"),pPt.forEach(t),VOr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(_re,"A",{href:!0});var uPt=s(OZ);XOr=r(uPt,"from_pretrained()"),uPt.forEach(t),zOr=r(_re," to load the model weights."),_re.forEach(t),WOr=i(J6),T(J0.$$.fragment,J6),J6.forEach(t),QOr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(Ux.$$.fragment,di),HOr=i(di),Y5e=n(di,"P",{});var _Pt=s(Y5e);UOr=r(_Pt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),_Pt.forEach(t),JOr=i(di),wn=n(di,"P",{});var Y6=s(wn);YOr=r(Y6,"The model class to instantiate is selected based on the "),K5e=n(Y6,"CODE",{});var bPt=s(K5e);KOr=r(bPt,"model_type"),bPt.forEach(t),ZOr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),Z5e=n(Y6,"CODE",{});var vPt=s(Z5e);eVr=r(vPt,"pretrained_model_name_or_path"),vPt.forEach(t),oVr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e3e=n(Y6,"CODE",{});var FPt=s(e3e);rVr=r(FPt,"pretrained_model_name_or_path"),FPt.forEach(t),tVr=r(Y6,":"),Y6.forEach(t),aVr=i(di),Se=n(di,"UL",{});var De=s(Se);Y0=n(De,"LI",{});var Qje=s(Y0);o3e=n(Qje,"STRONG",{});var TPt=s(o3e);nVr=r(TPt,"albert"),TPt.forEach(t),sVr=r(Qje," \u2014 "),VZ=n(Qje,"A",{href:!0});var MPt=s(VZ);lVr=r(MPt,"FlaxAlbertForQuestionAnswering"),MPt.forEach(t),iVr=r(Qje," (ALBERT model)"),Qje.forEach(t),dVr=i(De),K0=n(De,"LI",{});var Hje=s(K0);r3e=n(Hje,"STRONG",{});var EPt=s(r3e);cVr=r(EPt,"bart"),EPt.forEach(t),fVr=r(Hje," \u2014 "),XZ=n(Hje,"A",{href:!0});var CPt=s(XZ);mVr=r(CPt,"FlaxBartForQuestionAnswering"),CPt.forEach(t),gVr=r(Hje," (BART model)"),Hje.forEach(t),hVr=i(De),Z0=n(De,"LI",{});var Uje=s(Z0);t3e=n(Uje,"STRONG",{});var wPt=s(t3e);pVr=r(wPt,"bert"),wPt.forEach(t),uVr=r(Uje," \u2014 "),zZ=n(Uje,"A",{href:!0});var APt=s(zZ);_Vr=r(APt,"FlaxBertForQuestionAnswering"),APt.forEach(t),bVr=r(Uje," (BERT model)"),Uje.forEach(t),vVr=i(De),ew=n(De,"LI",{});var Jje=s(ew);a3e=n(Jje,"STRONG",{});var yPt=s(a3e);FVr=r(yPt,"big_bird"),yPt.forEach(t),TVr=r(Jje," \u2014 "),WZ=n(Jje,"A",{href:!0});var LPt=s(WZ);MVr=r(LPt,"FlaxBigBirdForQuestionAnswering"),LPt.forEach(t),EVr=r(Jje," (BigBird model)"),Jje.forEach(t),CVr=i(De),ow=n(De,"LI",{});var Yje=s(ow);n3e=n(Yje,"STRONG",{});var xPt=s(n3e);wVr=r(xPt,"distilbert"),xPt.forEach(t),AVr=r(Yje," \u2014 "),QZ=n(Yje,"A",{href:!0});var $Pt=s(QZ);yVr=r($Pt,"FlaxDistilBertForQuestionAnswering"),$Pt.forEach(t),LVr=r(Yje," (DistilBERT model)"),Yje.forEach(t),xVr=i(De),rw=n(De,"LI",{});var Kje=s(rw);s3e=n(Kje,"STRONG",{});var kPt=s(s3e);$Vr=r(kPt,"electra"),kPt.forEach(t),kVr=r(Kje," \u2014 "),HZ=n(Kje,"A",{href:!0});var SPt=s(HZ);SVr=r(SPt,"FlaxElectraForQuestionAnswering"),SPt.forEach(t),RVr=r(Kje," (ELECTRA model)"),Kje.forEach(t),PVr=i(De),tw=n(De,"LI",{});var Zje=s(tw);l3e=n(Zje,"STRONG",{});var RPt=s(l3e);BVr=r(RPt,"mbart"),RPt.forEach(t),IVr=r(Zje," \u2014 "),UZ=n(Zje,"A",{href:!0});var PPt=s(UZ);NVr=r(PPt,"FlaxMBartForQuestionAnswering"),PPt.forEach(t),qVr=r(Zje," (mBART model)"),Zje.forEach(t),jVr=i(De),aw=n(De,"LI",{});var eDe=s(aw);i3e=n(eDe,"STRONG",{});var BPt=s(i3e);DVr=r(BPt,"roberta"),BPt.forEach(t),GVr=r(eDe," \u2014 "),JZ=n(eDe,"A",{href:!0});var IPt=s(JZ);OVr=r(IPt,"FlaxRobertaForQuestionAnswering"),IPt.forEach(t),VVr=r(eDe," (RoBERTa model)"),eDe.forEach(t),XVr=i(De),nw=n(De,"LI",{});var oDe=s(nw);d3e=n(oDe,"STRONG",{});var NPt=s(d3e);zVr=r(NPt,"roformer"),NPt.forEach(t),WVr=r(oDe," \u2014 "),YZ=n(oDe,"A",{href:!0});var qPt=s(YZ);QVr=r(qPt,"FlaxRoFormerForQuestionAnswering"),qPt.forEach(t),HVr=r(oDe," (RoFormer model)"),oDe.forEach(t),UVr=i(De),sw=n(De,"LI",{});var rDe=s(sw);c3e=n(rDe,"STRONG",{});var jPt=s(c3e);JVr=r(jPt,"xlm-roberta"),jPt.forEach(t),YVr=r(rDe," \u2014 "),KZ=n(rDe,"A",{href:!0});var DPt=s(KZ);KVr=r(DPt,"FlaxXLMRobertaForQuestionAnswering"),DPt.forEach(t),ZVr=r(rDe," (XLM-RoBERTa model)"),rDe.forEach(t),De.forEach(t),eXr=i(di),T(lw.$$.fragment,di),di.forEach(t),ii.forEach(t),bOe=i(f),df=n(f,"H2",{class:!0});var yXe=s(df);iw=n(yXe,"A",{id:!0,class:!0,href:!0});var GPt=s(iw);f3e=n(GPt,"SPAN",{});var OPt=s(f3e);T(Jx.$$.fragment,OPt),OPt.forEach(t),GPt.forEach(t),oXr=i(yXe),m3e=n(yXe,"SPAN",{});var VPt=s(m3e);rXr=r(VPt,"FlaxAutoModelForTokenClassification"),VPt.forEach(t),yXe.forEach(t),vOe=i(f),Fr=n(f,"DIV",{class:!0});var ci=s(Fr);T(Yx.$$.fragment,ci),tXr=i(ci),cf=n(ci,"P",{});var bre=s(cf);aXr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),ZZ=n(bre,"A",{href:!0});var XPt=s(ZZ);nXr=r(XPt,"from_pretrained()"),XPt.forEach(t),sXr=r(bre," class method or the "),eee=n(bre,"A",{href:!0});var zPt=s(eee);lXr=r(zPt,"from_config()"),zPt.forEach(t),iXr=r(bre,` class
method.`),bre.forEach(t),dXr=i(ci),Kx=n(ci,"P",{});var LXe=s(Kx);cXr=r(LXe,"This class cannot be instantiated directly using "),g3e=n(LXe,"CODE",{});var WPt=s(g3e);fXr=r(WPt,"__init__()"),WPt.forEach(t),mXr=r(LXe," (throws an error)."),LXe.forEach(t),gXr=i(ci),Kt=n(ci,"DIV",{class:!0});var K6=s(Kt);T(Zx.$$.fragment,K6),hXr=i(K6),h3e=n(K6,"P",{});var QPt=s(h3e);pXr=r(QPt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QPt.forEach(t),uXr=i(K6),ff=n(K6,"P",{});var vre=s(ff);_Xr=r(vre,`Note:
Loading a model from its configuration file does `),p3e=n(vre,"STRONG",{});var HPt=s(p3e);bXr=r(HPt,"not"),HPt.forEach(t),vXr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oee=n(vre,"A",{href:!0});var UPt=s(oee);FXr=r(UPt,"from_pretrained()"),UPt.forEach(t),TXr=r(vre," to load the model weights."),vre.forEach(t),MXr=i(K6),T(dw.$$.fragment,K6),K6.forEach(t),EXr=i(ci),Hr=n(ci,"DIV",{class:!0});var fi=s(Hr);T(e$.$$.fragment,fi),CXr=i(fi),u3e=n(fi,"P",{});var JPt=s(u3e);wXr=r(JPt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),JPt.forEach(t),AXr=i(fi),An=n(fi,"P",{});var Z6=s(An);yXr=r(Z6,"The model class to instantiate is selected based on the "),_3e=n(Z6,"CODE",{});var YPt=s(_3e);LXr=r(YPt,"model_type"),YPt.forEach(t),xXr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),b3e=n(Z6,"CODE",{});var KPt=s(b3e);$Xr=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),kXr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=n(Z6,"CODE",{});var ZPt=s(v3e);SXr=r(ZPt,"pretrained_model_name_or_path"),ZPt.forEach(t),RXr=r(Z6,":"),Z6.forEach(t),PXr=i(fi),Oe=n(fi,"UL",{});var To=s(Oe);cw=n(To,"LI",{});var tDe=s(cw);F3e=n(tDe,"STRONG",{});var eBt=s(F3e);BXr=r(eBt,"albert"),eBt.forEach(t),IXr=r(tDe," \u2014 "),ree=n(tDe,"A",{href:!0});var oBt=s(ree);NXr=r(oBt,"FlaxAlbertForTokenClassification"),oBt.forEach(t),qXr=r(tDe," (ALBERT model)"),tDe.forEach(t),jXr=i(To),fw=n(To,"LI",{});var aDe=s(fw);T3e=n(aDe,"STRONG",{});var rBt=s(T3e);DXr=r(rBt,"bert"),rBt.forEach(t),GXr=r(aDe," \u2014 "),tee=n(aDe,"A",{href:!0});var tBt=s(tee);OXr=r(tBt,"FlaxBertForTokenClassification"),tBt.forEach(t),VXr=r(aDe," (BERT model)"),aDe.forEach(t),XXr=i(To),mw=n(To,"LI",{});var nDe=s(mw);M3e=n(nDe,"STRONG",{});var aBt=s(M3e);zXr=r(aBt,"big_bird"),aBt.forEach(t),WXr=r(nDe," \u2014 "),aee=n(nDe,"A",{href:!0});var nBt=s(aee);QXr=r(nBt,"FlaxBigBirdForTokenClassification"),nBt.forEach(t),HXr=r(nDe," (BigBird model)"),nDe.forEach(t),UXr=i(To),gw=n(To,"LI",{});var sDe=s(gw);E3e=n(sDe,"STRONG",{});var sBt=s(E3e);JXr=r(sBt,"distilbert"),sBt.forEach(t),YXr=r(sDe," \u2014 "),nee=n(sDe,"A",{href:!0});var lBt=s(nee);KXr=r(lBt,"FlaxDistilBertForTokenClassification"),lBt.forEach(t),ZXr=r(sDe," (DistilBERT model)"),sDe.forEach(t),ezr=i(To),hw=n(To,"LI",{});var lDe=s(hw);C3e=n(lDe,"STRONG",{});var iBt=s(C3e);ozr=r(iBt,"electra"),iBt.forEach(t),rzr=r(lDe," \u2014 "),see=n(lDe,"A",{href:!0});var dBt=s(see);tzr=r(dBt,"FlaxElectraForTokenClassification"),dBt.forEach(t),azr=r(lDe," (ELECTRA model)"),lDe.forEach(t),nzr=i(To),pw=n(To,"LI",{});var iDe=s(pw);w3e=n(iDe,"STRONG",{});var cBt=s(w3e);szr=r(cBt,"roberta"),cBt.forEach(t),lzr=r(iDe," \u2014 "),lee=n(iDe,"A",{href:!0});var fBt=s(lee);izr=r(fBt,"FlaxRobertaForTokenClassification"),fBt.forEach(t),dzr=r(iDe," (RoBERTa model)"),iDe.forEach(t),czr=i(To),uw=n(To,"LI",{});var dDe=s(uw);A3e=n(dDe,"STRONG",{});var mBt=s(A3e);fzr=r(mBt,"roformer"),mBt.forEach(t),mzr=r(dDe," \u2014 "),iee=n(dDe,"A",{href:!0});var gBt=s(iee);gzr=r(gBt,"FlaxRoFormerForTokenClassification"),gBt.forEach(t),hzr=r(dDe," (RoFormer model)"),dDe.forEach(t),pzr=i(To),_w=n(To,"LI",{});var cDe=s(_w);y3e=n(cDe,"STRONG",{});var hBt=s(y3e);uzr=r(hBt,"xlm-roberta"),hBt.forEach(t),_zr=r(cDe," \u2014 "),dee=n(cDe,"A",{href:!0});var pBt=s(dee);bzr=r(pBt,"FlaxXLMRobertaForTokenClassification"),pBt.forEach(t),vzr=r(cDe," (XLM-RoBERTa model)"),cDe.forEach(t),To.forEach(t),Fzr=i(fi),T(bw.$$.fragment,fi),fi.forEach(t),ci.forEach(t),FOe=i(f),mf=n(f,"H2",{class:!0});var xXe=s(mf);vw=n(xXe,"A",{id:!0,class:!0,href:!0});var uBt=s(vw);L3e=n(uBt,"SPAN",{});var _Bt=s(L3e);T(o$.$$.fragment,_Bt),_Bt.forEach(t),uBt.forEach(t),Tzr=i(xXe),x3e=n(xXe,"SPAN",{});var bBt=s(x3e);Mzr=r(bBt,"FlaxAutoModelForMultipleChoice"),bBt.forEach(t),xXe.forEach(t),TOe=i(f),Tr=n(f,"DIV",{class:!0});var mi=s(Tr);T(r$.$$.fragment,mi),Ezr=i(mi),gf=n(mi,"P",{});var Fre=s(gf);Czr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),cee=n(Fre,"A",{href:!0});var vBt=s(cee);wzr=r(vBt,"from_pretrained()"),vBt.forEach(t),Azr=r(Fre," class method or the "),fee=n(Fre,"A",{href:!0});var FBt=s(fee);yzr=r(FBt,"from_config()"),FBt.forEach(t),Lzr=r(Fre,` class
method.`),Fre.forEach(t),xzr=i(mi),t$=n(mi,"P",{});var $Xe=s(t$);$zr=r($Xe,"This class cannot be instantiated directly using "),$3e=n($Xe,"CODE",{});var TBt=s($3e);kzr=r(TBt,"__init__()"),TBt.forEach(t),Szr=r($Xe," (throws an error)."),$Xe.forEach(t),Rzr=i(mi),Zt=n(mi,"DIV",{class:!0});var ey=s(Zt);T(a$.$$.fragment,ey),Pzr=i(ey),k3e=n(ey,"P",{});var MBt=s(k3e);Bzr=r(MBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),MBt.forEach(t),Izr=i(ey),hf=n(ey,"P",{});var Tre=s(hf);Nzr=r(Tre,`Note:
Loading a model from its configuration file does `),S3e=n(Tre,"STRONG",{});var EBt=s(S3e);qzr=r(EBt,"not"),EBt.forEach(t),jzr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mee=n(Tre,"A",{href:!0});var CBt=s(mee);Dzr=r(CBt,"from_pretrained()"),CBt.forEach(t),Gzr=r(Tre," to load the model weights."),Tre.forEach(t),Ozr=i(ey),T(Fw.$$.fragment,ey),ey.forEach(t),Vzr=i(mi),Ur=n(mi,"DIV",{class:!0});var gi=s(Ur);T(n$.$$.fragment,gi),Xzr=i(gi),R3e=n(gi,"P",{});var wBt=s(R3e);zzr=r(wBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wBt.forEach(t),Wzr=i(gi),yn=n(gi,"P",{});var oy=s(yn);Qzr=r(oy,"The model class to instantiate is selected based on the "),P3e=n(oy,"CODE",{});var ABt=s(P3e);Hzr=r(ABt,"model_type"),ABt.forEach(t),Uzr=r(oy,` property of the config object (either
passed as an argument or loaded from `),B3e=n(oy,"CODE",{});var yBt=s(B3e);Jzr=r(yBt,"pretrained_model_name_or_path"),yBt.forEach(t),Yzr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I3e=n(oy,"CODE",{});var LBt=s(I3e);Kzr=r(LBt,"pretrained_model_name_or_path"),LBt.forEach(t),Zzr=r(oy,":"),oy.forEach(t),eWr=i(gi),Ve=n(gi,"UL",{});var Mo=s(Ve);Tw=n(Mo,"LI",{});var fDe=s(Tw);N3e=n(fDe,"STRONG",{});var xBt=s(N3e);oWr=r(xBt,"albert"),xBt.forEach(t),rWr=r(fDe," \u2014 "),gee=n(fDe,"A",{href:!0});var $Bt=s(gee);tWr=r($Bt,"FlaxAlbertForMultipleChoice"),$Bt.forEach(t),aWr=r(fDe," (ALBERT model)"),fDe.forEach(t),nWr=i(Mo),Mw=n(Mo,"LI",{});var mDe=s(Mw);q3e=n(mDe,"STRONG",{});var kBt=s(q3e);sWr=r(kBt,"bert"),kBt.forEach(t),lWr=r(mDe," \u2014 "),hee=n(mDe,"A",{href:!0});var SBt=s(hee);iWr=r(SBt,"FlaxBertForMultipleChoice"),SBt.forEach(t),dWr=r(mDe," (BERT model)"),mDe.forEach(t),cWr=i(Mo),Ew=n(Mo,"LI",{});var gDe=s(Ew);j3e=n(gDe,"STRONG",{});var RBt=s(j3e);fWr=r(RBt,"big_bird"),RBt.forEach(t),mWr=r(gDe," \u2014 "),pee=n(gDe,"A",{href:!0});var PBt=s(pee);gWr=r(PBt,"FlaxBigBirdForMultipleChoice"),PBt.forEach(t),hWr=r(gDe," (BigBird model)"),gDe.forEach(t),pWr=i(Mo),Cw=n(Mo,"LI",{});var hDe=s(Cw);D3e=n(hDe,"STRONG",{});var BBt=s(D3e);uWr=r(BBt,"distilbert"),BBt.forEach(t),_Wr=r(hDe," \u2014 "),uee=n(hDe,"A",{href:!0});var IBt=s(uee);bWr=r(IBt,"FlaxDistilBertForMultipleChoice"),IBt.forEach(t),vWr=r(hDe," (DistilBERT model)"),hDe.forEach(t),FWr=i(Mo),ww=n(Mo,"LI",{});var pDe=s(ww);G3e=n(pDe,"STRONG",{});var NBt=s(G3e);TWr=r(NBt,"electra"),NBt.forEach(t),MWr=r(pDe," \u2014 "),_ee=n(pDe,"A",{href:!0});var qBt=s(_ee);EWr=r(qBt,"FlaxElectraForMultipleChoice"),qBt.forEach(t),CWr=r(pDe," (ELECTRA model)"),pDe.forEach(t),wWr=i(Mo),Aw=n(Mo,"LI",{});var uDe=s(Aw);O3e=n(uDe,"STRONG",{});var jBt=s(O3e);AWr=r(jBt,"roberta"),jBt.forEach(t),yWr=r(uDe," \u2014 "),bee=n(uDe,"A",{href:!0});var DBt=s(bee);LWr=r(DBt,"FlaxRobertaForMultipleChoice"),DBt.forEach(t),xWr=r(uDe," (RoBERTa model)"),uDe.forEach(t),$Wr=i(Mo),yw=n(Mo,"LI",{});var _De=s(yw);V3e=n(_De,"STRONG",{});var GBt=s(V3e);kWr=r(GBt,"roformer"),GBt.forEach(t),SWr=r(_De," \u2014 "),vee=n(_De,"A",{href:!0});var OBt=s(vee);RWr=r(OBt,"FlaxRoFormerForMultipleChoice"),OBt.forEach(t),PWr=r(_De," (RoFormer model)"),_De.forEach(t),BWr=i(Mo),Lw=n(Mo,"LI",{});var bDe=s(Lw);X3e=n(bDe,"STRONG",{});var VBt=s(X3e);IWr=r(VBt,"xlm-roberta"),VBt.forEach(t),NWr=r(bDe," \u2014 "),Fee=n(bDe,"A",{href:!0});var XBt=s(Fee);qWr=r(XBt,"FlaxXLMRobertaForMultipleChoice"),XBt.forEach(t),jWr=r(bDe," (XLM-RoBERTa model)"),bDe.forEach(t),Mo.forEach(t),DWr=i(gi),T(xw.$$.fragment,gi),gi.forEach(t),mi.forEach(t),MOe=i(f),pf=n(f,"H2",{class:!0});var kXe=s(pf);$w=n(kXe,"A",{id:!0,class:!0,href:!0});var zBt=s($w);z3e=n(zBt,"SPAN",{});var WBt=s(z3e);T(s$.$$.fragment,WBt),WBt.forEach(t),zBt.forEach(t),GWr=i(kXe),W3e=n(kXe,"SPAN",{});var QBt=s(W3e);OWr=r(QBt,"FlaxAutoModelForNextSentencePrediction"),QBt.forEach(t),kXe.forEach(t),EOe=i(f),Mr=n(f,"DIV",{class:!0});var hi=s(Mr);T(l$.$$.fragment,hi),VWr=i(hi),uf=n(hi,"P",{});var Mre=s(uf);XWr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Tee=n(Mre,"A",{href:!0});var HBt=s(Tee);zWr=r(HBt,"from_pretrained()"),HBt.forEach(t),WWr=r(Mre," class method or the "),Mee=n(Mre,"A",{href:!0});var UBt=s(Mee);QWr=r(UBt,"from_config()"),UBt.forEach(t),HWr=r(Mre,` class
method.`),Mre.forEach(t),UWr=i(hi),i$=n(hi,"P",{});var SXe=s(i$);JWr=r(SXe,"This class cannot be instantiated directly using "),Q3e=n(SXe,"CODE",{});var JBt=s(Q3e);YWr=r(JBt,"__init__()"),JBt.forEach(t),KWr=r(SXe," (throws an error)."),SXe.forEach(t),ZWr=i(hi),ea=n(hi,"DIV",{class:!0});var ry=s(ea);T(d$.$$.fragment,ry),eQr=i(ry),H3e=n(ry,"P",{});var YBt=s(H3e);oQr=r(YBt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YBt.forEach(t),rQr=i(ry),_f=n(ry,"P",{});var Ere=s(_f);tQr=r(Ere,`Note:
Loading a model from its configuration file does `),U3e=n(Ere,"STRONG",{});var KBt=s(U3e);aQr=r(KBt,"not"),KBt.forEach(t),nQr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),Eee=n(Ere,"A",{href:!0});var ZBt=s(Eee);sQr=r(ZBt,"from_pretrained()"),ZBt.forEach(t),lQr=r(Ere," to load the model weights."),Ere.forEach(t),iQr=i(ry),T(kw.$$.fragment,ry),ry.forEach(t),dQr=i(hi),Jr=n(hi,"DIV",{class:!0});var pi=s(Jr);T(c$.$$.fragment,pi),cQr=i(pi),J3e=n(pi,"P",{});var eIt=s(J3e);fQr=r(eIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),eIt.forEach(t),mQr=i(pi),Ln=n(pi,"P",{});var ty=s(Ln);gQr=r(ty,"The model class to instantiate is selected based on the "),Y3e=n(ty,"CODE",{});var oIt=s(Y3e);hQr=r(oIt,"model_type"),oIt.forEach(t),pQr=r(ty,` property of the config object (either
passed as an argument or loaded from `),K3e=n(ty,"CODE",{});var rIt=s(K3e);uQr=r(rIt,"pretrained_model_name_or_path"),rIt.forEach(t),_Qr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z3e=n(ty,"CODE",{});var tIt=s(Z3e);bQr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),vQr=r(ty,":"),ty.forEach(t),FQr=i(pi),e0e=n(pi,"UL",{});var aIt=s(e0e);Sw=n(aIt,"LI",{});var vDe=s(Sw);o0e=n(vDe,"STRONG",{});var nIt=s(o0e);TQr=r(nIt,"bert"),nIt.forEach(t),MQr=r(vDe," \u2014 "),Cee=n(vDe,"A",{href:!0});var sIt=s(Cee);EQr=r(sIt,"FlaxBertForNextSentencePrediction"),sIt.forEach(t),CQr=r(vDe," (BERT model)"),vDe.forEach(t),aIt.forEach(t),wQr=i(pi),T(Rw.$$.fragment,pi),pi.forEach(t),hi.forEach(t),COe=i(f),bf=n(f,"H2",{class:!0});var RXe=s(bf);Pw=n(RXe,"A",{id:!0,class:!0,href:!0});var lIt=s(Pw);r0e=n(lIt,"SPAN",{});var iIt=s(r0e);T(f$.$$.fragment,iIt),iIt.forEach(t),lIt.forEach(t),AQr=i(RXe),t0e=n(RXe,"SPAN",{});var dIt=s(t0e);yQr=r(dIt,"FlaxAutoModelForImageClassification"),dIt.forEach(t),RXe.forEach(t),wOe=i(f),Er=n(f,"DIV",{class:!0});var ui=s(Er);T(m$.$$.fragment,ui),LQr=i(ui),vf=n(ui,"P",{});var Cre=s(vf);xQr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),wee=n(Cre,"A",{href:!0});var cIt=s(wee);$Qr=r(cIt,"from_pretrained()"),cIt.forEach(t),kQr=r(Cre," class method or the "),Aee=n(Cre,"A",{href:!0});var fIt=s(Aee);SQr=r(fIt,"from_config()"),fIt.forEach(t),RQr=r(Cre,` class
method.`),Cre.forEach(t),PQr=i(ui),g$=n(ui,"P",{});var PXe=s(g$);BQr=r(PXe,"This class cannot be instantiated directly using "),a0e=n(PXe,"CODE",{});var mIt=s(a0e);IQr=r(mIt,"__init__()"),mIt.forEach(t),NQr=r(PXe," (throws an error)."),PXe.forEach(t),qQr=i(ui),oa=n(ui,"DIV",{class:!0});var ay=s(oa);T(h$.$$.fragment,ay),jQr=i(ay),n0e=n(ay,"P",{});var gIt=s(n0e);DQr=r(gIt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gIt.forEach(t),GQr=i(ay),Ff=n(ay,"P",{});var wre=s(Ff);OQr=r(wre,`Note:
Loading a model from its configuration file does `),s0e=n(wre,"STRONG",{});var hIt=s(s0e);VQr=r(hIt,"not"),hIt.forEach(t),XQr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yee=n(wre,"A",{href:!0});var pIt=s(yee);zQr=r(pIt,"from_pretrained()"),pIt.forEach(t),WQr=r(wre," to load the model weights."),wre.forEach(t),QQr=i(ay),T(Bw.$$.fragment,ay),ay.forEach(t),HQr=i(ui),Yr=n(ui,"DIV",{class:!0});var _i=s(Yr);T(p$.$$.fragment,_i),UQr=i(_i),l0e=n(_i,"P",{});var uIt=s(l0e);JQr=r(uIt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uIt.forEach(t),YQr=i(_i),xn=n(_i,"P",{});var ny=s(xn);KQr=r(ny,"The model class to instantiate is selected based on the "),i0e=n(ny,"CODE",{});var _It=s(i0e);ZQr=r(_It,"model_type"),_It.forEach(t),eHr=r(ny,` property of the config object (either
passed as an argument or loaded from `),d0e=n(ny,"CODE",{});var bIt=s(d0e);oHr=r(bIt,"pretrained_model_name_or_path"),bIt.forEach(t),rHr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c0e=n(ny,"CODE",{});var vIt=s(c0e);tHr=r(vIt,"pretrained_model_name_or_path"),vIt.forEach(t),aHr=r(ny,":"),ny.forEach(t),nHr=i(_i),u$=n(_i,"UL",{});var BXe=s(u$);Iw=n(BXe,"LI",{});var FDe=s(Iw);f0e=n(FDe,"STRONG",{});var FIt=s(f0e);sHr=r(FIt,"beit"),FIt.forEach(t),lHr=r(FDe," \u2014 "),Lee=n(FDe,"A",{href:!0});var TIt=s(Lee);iHr=r(TIt,"FlaxBeitForImageClassification"),TIt.forEach(t),dHr=r(FDe," (BEiT model)"),FDe.forEach(t),cHr=i(BXe),Nw=n(BXe,"LI",{});var TDe=s(Nw);m0e=n(TDe,"STRONG",{});var MIt=s(m0e);fHr=r(MIt,"vit"),MIt.forEach(t),mHr=r(TDe," \u2014 "),xee=n(TDe,"A",{href:!0});var EIt=s(xee);gHr=r(EIt,"FlaxViTForImageClassification"),EIt.forEach(t),hHr=r(TDe," (ViT model)"),TDe.forEach(t),BXe.forEach(t),pHr=i(_i),T(qw.$$.fragment,_i),_i.forEach(t),ui.forEach(t),AOe=i(f),Tf=n(f,"H2",{class:!0});var IXe=s(Tf);jw=n(IXe,"A",{id:!0,class:!0,href:!0});var CIt=s(jw);g0e=n(CIt,"SPAN",{});var wIt=s(g0e);T(_$.$$.fragment,wIt),wIt.forEach(t),CIt.forEach(t),uHr=i(IXe),h0e=n(IXe,"SPAN",{});var AIt=s(h0e);_Hr=r(AIt,"FlaxAutoModelForVision2Seq"),AIt.forEach(t),IXe.forEach(t),yOe=i(f),Cr=n(f,"DIV",{class:!0});var bi=s(Cr);T(b$.$$.fragment,bi),bHr=i(bi),Mf=n(bi,"P",{});var Are=s(Mf);vHr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),$ee=n(Are,"A",{href:!0});var yIt=s($ee);FHr=r(yIt,"from_pretrained()"),yIt.forEach(t),THr=r(Are," class method or the "),kee=n(Are,"A",{href:!0});var LIt=s(kee);MHr=r(LIt,"from_config()"),LIt.forEach(t),EHr=r(Are,` class
method.`),Are.forEach(t),CHr=i(bi),v$=n(bi,"P",{});var NXe=s(v$);wHr=r(NXe,"This class cannot be instantiated directly using "),p0e=n(NXe,"CODE",{});var xIt=s(p0e);AHr=r(xIt,"__init__()"),xIt.forEach(t),yHr=r(NXe," (throws an error)."),NXe.forEach(t),LHr=i(bi),ra=n(bi,"DIV",{class:!0});var sy=s(ra);T(F$.$$.fragment,sy),xHr=i(sy),u0e=n(sy,"P",{});var $It=s(u0e);$Hr=r($It,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),$It.forEach(t),kHr=i(sy),Ef=n(sy,"P",{});var yre=s(Ef);SHr=r(yre,`Note:
Loading a model from its configuration file does `),_0e=n(yre,"STRONG",{});var kIt=s(_0e);RHr=r(kIt,"not"),kIt.forEach(t),PHr=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),See=n(yre,"A",{href:!0});var SIt=s(See);BHr=r(SIt,"from_pretrained()"),SIt.forEach(t),IHr=r(yre," to load the model weights."),yre.forEach(t),NHr=i(sy),T(Dw.$$.fragment,sy),sy.forEach(t),qHr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(T$.$$.fragment,vi),jHr=i(vi),b0e=n(vi,"P",{});var RIt=s(b0e);DHr=r(RIt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),RIt.forEach(t),GHr=i(vi),$n=n(vi,"P",{});var ly=s($n);OHr=r(ly,"The model class to instantiate is selected based on the "),v0e=n(ly,"CODE",{});var PIt=s(v0e);VHr=r(PIt,"model_type"),PIt.forEach(t),XHr=r(ly,` property of the config object (either
passed as an argument or loaded from `),F0e=n(ly,"CODE",{});var BIt=s(F0e);zHr=r(BIt,"pretrained_model_name_or_path"),BIt.forEach(t),WHr=r(ly,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(ly,"CODE",{});var IIt=s(T0e);QHr=r(IIt,"pretrained_model_name_or_path"),IIt.forEach(t),HHr=r(ly,":"),ly.forEach(t),UHr=i(vi),M0e=n(vi,"UL",{});var NIt=s(M0e);Gw=n(NIt,"LI",{});var MDe=s(Gw);E0e=n(MDe,"STRONG",{});var qIt=s(E0e);JHr=r(qIt,"vision-encoder-decoder"),qIt.forEach(t),YHr=r(MDe," \u2014 "),Ree=n(MDe,"A",{href:!0});var jIt=s(Ree);KHr=r(jIt,"FlaxVisionEncoderDecoderModel"),jIt.forEach(t),ZHr=r(MDe," (Vision Encoder decoder model)"),MDe.forEach(t),NIt.forEach(t),eUr=i(vi),T(Ow.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(zqt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Sn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(kf,"id","extending-the-auto-classes"),c(kf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kf,"href","#extending-the-auto-classes"),c(yi,"class","relative group"),c(Rf,"id","transformers.AutoConfig"),c(Rf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rf,"href","#transformers.AutoConfig"),c(Li,"class","relative group"),c(Vk,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Xk,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertConfig"),c(zk,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartConfig"),c(Wk,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitConfig"),c(Qk,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertConfig"),c(Hk,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Uk,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdConfig"),c(Jk,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Yk,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(Kk,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Zk,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomConfig"),c(eS,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertConfig"),c(oS,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineConfig"),c(rS,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPConfig"),c(tS,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertConfig"),c(aS,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextConfig"),c(nS,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLConfig"),c(sS,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtConfig"),c(lS,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(iS,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(dS,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(cS,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaConfig"),c(fS,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(mS,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(gS,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTConfig"),c(hS,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrConfig"),c(pS,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertConfig"),c(uS,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRConfig"),c(_S,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTConfig"),c(bS,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraConfig"),c(vS,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(FS,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertConfig"),c(TS,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaConfig"),c(MS,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetConfig"),c(ES,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTConfig"),c(CS,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelConfig"),c(wS,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNConfig"),c(AS,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Config"),c(yS,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(LS,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(xS,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJConfig"),c($S,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertConfig"),c(kS,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertConfig"),c(SS,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(RS,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(PS,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(BS,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(IS,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDConfig"),c(NS,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitConfig"),c(qS,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerConfig"),c(jS,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeConfig"),c(DS,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertConfig"),c(GS,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Config"),c(OS,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianConfig"),c(VS,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(XS,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartConfig"),c(zS,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTConfig"),c(WS,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(QS,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(HS,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetConfig"),c(US,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Config"),c(JS,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(YS,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(KS,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTConfig"),c(ZS,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusConfig"),c(eR,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverConfig"),c(oR,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartConfig"),c(rR,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(tR,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(aR,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(nR,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagConfig"),c(sR,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmConfig"),c(lR,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerConfig"),c(iR,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetConfig"),c(dR,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertConfig"),c(cR,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetConfig"),c(fR,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertConfig"),c(mR,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaConfig"),c(gR,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerConfig"),c(hR,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerConfig"),c(pR,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWConfig"),c(uR,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDConfig"),c(_R,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(bR,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(vR,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(FR,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterConfig"),c(TR,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(MR,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinConfig"),c(ER,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Config"),c(CR,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasConfig"),c(wR,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(AR,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yR,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRConfig"),c(LR,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(xR,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c($R,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanConfig"),c(kR,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltConfig"),c(SR,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(RR,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(PR,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(BR,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTConfig"),c(IR,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(NR,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(qR,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(jR,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMConfig"),c(DR,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMConfig"),c(GR,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMConfig"),c(OR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(VR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(XR,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(zR,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetConfig"),c(WR,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosConfig"),c(QR,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"id","transformers.AutoTokenizer"),c(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dg,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(HR,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(UR,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(JR,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(YR,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizer"),c(KR,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartTokenizerFast"),c(ZR,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizer"),c(eP,"href","/docs/transformers/pr_17427/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(oP,"href","/docs/transformers/pr_17427/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(rP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(tP,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(aP,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(nP,"href","/docs/transformers/pr_17427/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(sP,"href","/docs/transformers/pr_17427/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(lP,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(iP,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(dP,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(cP,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(fP,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(mP,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(gP,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(hP,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(pP,"href","/docs/transformers/pr_17427/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(uP,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizer"),c(_P,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(bP,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineTokenizer"),c(vP,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizer"),c(FP,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(TP,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(MP,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(EP,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizer"),c(CP,"href","/docs/transformers/pr_17427/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(wP,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(AP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(yP,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(LP,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizer"),c(xP,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c($P,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(kP,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(SP,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(RP,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(PP,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(BP,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(IP,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizer"),c(NP,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(qP,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(jP,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizer"),c(DP,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(GP,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(OP,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizer"),c(VP,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(XP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(zP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(WP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(QP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(HP,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(UP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JP,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YP,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizer"),c(KP,"href","/docs/transformers/pr_17427/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(ZP,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(eB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oB,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(tB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(aB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(nB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(sB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(lB,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(iB,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(dB,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(cB,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizer"),c(fB,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDTokenizerFast"),c(mB,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizer"),c(gB,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(hB,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeTokenizer"),c(pB,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(uB,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(_B,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(bB,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianTokenizer"),c(vB,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizer"),c(FB,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(TB,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(MB,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(EB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(CB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/pr_17427/en/model_doc/mluke#transformers.MLukeTokenizer"),c(AB,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(yB,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(LB,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(xB,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c($B,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(kB,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(SB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(RB,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(PB,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(BB,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(IB,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(NB,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(qB,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(jB,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(DB,"href","/docs/transformers/pr_17427/en/model_doc/phobert#transformers.PhobertTokenizer"),c(GB,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartTokenizer"),c(OB,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(VB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(XB,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(zB,"href","/docs/transformers/pr_17427/en/model_doc/rag#transformers.RagTokenizer"),c(WB,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizer"),c(QB,"href","/docs/transformers/pr_17427/en/model_doc/realm#transformers.RealmTokenizerFast"),c(HB,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizer"),c(UB,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(JB,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizer"),c(YB,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(KB,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(ZB,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(eI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(oI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(rI,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(tI,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(aI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(nI,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(sI,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizer"),c(lI,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(iI,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(dI,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(cI,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Tokenizer"),c(fI,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5TokenizerFast"),c(mI,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasTokenizer"),c(gI,"href","/docs/transformers/pr_17427/en/model_doc/tapex#transformers.TapexTokenizer"),c(hI,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(pI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(uI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(_I,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizer"),c(bI,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertTokenizerFast"),c(vI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(FI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(TI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(MI,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizer"),c(EI,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(CI,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMTokenizer"),c(wI,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(AI,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(yI,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(LI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xI,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($I,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(kI,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(SI,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizer"),c(RI,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoFeatureExtractor"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(PI,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(BI,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(II,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(NI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(qI,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(jI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(DI,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(GI,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(OI,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(VI,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(XI,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(zI,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(WI,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(QI,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(HI,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(UI,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(JI,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(YI,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(KI,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(ZI,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(eN,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(oN,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rN,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tN,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aN,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nN,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sN,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(lN,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(iN,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(dN,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(cN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(fN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(mN,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ap,"id","transformers.AutoProcessor"),c(ap,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ap,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(gN,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(hN,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPProcessor"),c(pN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(uN,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(_N,"href","/docs/transformers/pr_17427/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(bN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FN,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(TN,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(MN,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRProcessor"),c(EN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wN,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltProcessor"),c(AN,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(yN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(LN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xN,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wp,"id","transformers.AutoModel"),c(wp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wp,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c($N,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kN,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SN,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RN,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertModel"),c(PN,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartModel"),c(BN,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitModel"),c(IN,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertModel"),c(NN,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(qN,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdModel"),c(jN,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(DN,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(GN,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ON,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomModel"),c(VN,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertModel"),c(XN,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineModel"),c(zN,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.CLIPModel"),c(WN,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertModel"),c(QN,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextModel"),c(HN,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLModel"),c(UN,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtModel"),c(JN,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(YN,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(KN,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(ZN,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaModel"),c(eq,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(oq,"href","/docs/transformers/pr_17427/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(rq,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTModel"),c(tq,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrModel"),c(aq,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertModel"),c(nq,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(sq,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTModel"),c(lq,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraModel"),c(iq,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertModel"),c(dq,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaModel"),c(cq,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetModel"),c(fq,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTModel"),c(mq,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelModel"),c(gq,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelBaseModel"),c(hq,"href","/docs/transformers/pr_17427/en/model_doc/glpn#transformers.GLPNModel"),c(pq,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2Model"),c(uq,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(_q,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(bq,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJModel"),c(vq,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertModel"),c(Fq,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertModel"),c(Tq,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(Mq,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Eq,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Cq,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(wq,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDModel"),c(Aq,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitModel"),c(yq,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerModel"),c(Lq,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeModel"),c(xq,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertModel"),c($q,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100Model"),c(kq,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianModel"),c(Sq,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Rq,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartModel"),c(Pq,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTModel"),c(Bq,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Iq,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Nq,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetModel"),c(qq,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5Model"),c(jq,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Dq,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Gq,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTModel"),c(Oq,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusModel"),c(Vq,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverModel"),c(Xq,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartModel"),c(zq,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Wq,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Qq,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Hq,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModel"),c(Uq,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetModel"),c(Jq,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertModel"),c(Yq,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetModel"),c(Kq,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(Zq,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaModel"),c(ej,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerModel"),c(oj,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerModel"),c(rj,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWModel"),c(tj,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDModel"),c(aj,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(nj,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterModel"),c(sj,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(lj,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinModel"),c(ij,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5Model"),c(dj,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasModel"),c(cj,"href","/docs/transformers/pr_17427/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(fj,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(mj,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechModel"),c(gj,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(hj,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanModel"),c(pj,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltModel"),c(uj,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(_j,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertModel"),c(bj,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTModel"),c(vj,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Fj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Tj,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Mj,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMModel"),c(Ej,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMModel"),c(Cj,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMModel"),c(wj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Aj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(yj,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Lj,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetModel"),c(xj,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosModel"),c($j,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w_,"id","transformers.AutoModelForPreTraining"),c(w_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(kj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rj,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pj,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Bj,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Ij,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForPreTraining"),c(Nj,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(qj,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM"),c(jj,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Dj,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Gj,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Oj,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Vj,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Xj,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(zj,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForPreTraining"),c(Wj,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(Qj,"href","/docs/transformers/pr_17427/en/model_doc/flava#transformers.FlavaForPreTraining"),c(Hj,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Uj,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Jj,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Yj,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Kj,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Zj,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(eD,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(oD,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(rD,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(tD,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(aD,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nD,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(sD,"href","/docs/transformers/pr_17427/en/model_doc/retribert#transformers.RetriBertModel"),c(lD,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(iD,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(dD,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(cD,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(fD,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(mD,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gD,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(hD,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(pD,"href","/docs/transformers/pr_17427/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(uD,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(_D,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(bD,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(vD,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(FD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(TD,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(MD,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForCausalLM"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(ED,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wD,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AD,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForCausalLM"),c(yD,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertLMHeadModel"),c(LD,"href","/docs/transformers/pr_17427/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(xD,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c($D,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(kD,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(SD,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(RD,"href","/docs/transformers/pr_17427/en/model_doc/bloom#transformers.BloomForCausalLM"),c(PD,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(BD,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(ID,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(ND,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForCausalLM"),c(qD,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(jD,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(DD,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(GD,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(OD,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianForCausalLM"),c(VD,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForCausalLM"),c(XD,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(zD,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(WD,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.OPTForCausalLM"),c(QD,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(HD,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(UD,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(JD,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(YD,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(KD,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(ZD,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(eG,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(oG,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(rG,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(tG,"href","/docs/transformers/pr_17427/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(aG,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(nG,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(sG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(lG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(iG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(dG,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s1,"id","transformers.AutoModelForMaskedLM"),c(s1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s1,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(cG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gG,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(hG,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(pG,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMaskedLM"),c(uG,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(_G,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(bG,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(vG,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(FG,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(TG,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(MG,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(EG,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(CG,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(wG,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(AG,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(yG,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(LG,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(xG,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c($G,"href","/docs/transformers/pr_17427/en/model_doc/luke#transformers.LukeForMaskedLM"),c(kG,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(SG,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(RG,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(PG,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(BG,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(IG,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(NG,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(qG,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(jG,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(DG,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(GG,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(OG,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(VG,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(XG,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(zG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(WG,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(QG,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(W1,"id","transformers.AutoModelForSeq2SeqLM"),c(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(W1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(HG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JG,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YG,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(KG,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(ZG,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(eO,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(oO,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(rO,"href","/docs/transformers/pr_17427/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(tO,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(aO,"href","/docs/transformers/pr_17427/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(nO,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.MarianMTModel"),c(sO,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(lO,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(iO,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(dO,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(cO,"href","/docs/transformers/pr_17427/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(fO,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(mO,"href","/docs/transformers/pr_17427/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m7,"id","transformers.AutoModelForSequenceClassification"),c(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m7,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(gO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pO,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uO,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(_O,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForSequenceClassification"),c(bO,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForSequenceClassification"),c(vO,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(FO,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(TO,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(MO,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(EO,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(CO,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(wO,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(AO,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(yO,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LO,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(xO,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c($O,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(kO,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(SO,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(RO,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(PO,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(BO,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(IO,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(NO,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(qO,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(jO,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(DO,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForSequenceClassification"),c(GO,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(OO,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(VO,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(XO,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(zO,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(WO,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(QO,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(HO,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(UO,"href","/docs/transformers/pr_17427/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(JO,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(YO,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(KO,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ZO,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(eV,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oV,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rV,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tV,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(aV,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lV,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iV,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(db,"id","transformers.AutoModelForMultipleChoice"),c(db,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(db,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(dV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mV,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gV,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hV,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(pV,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(uV,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(_V,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bV,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vV,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(FV,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(TV,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(MV,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(EV,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(CV,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wV,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(AV,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(yV,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(LV,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xV,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($V,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(kV,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(SV,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(RV,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(PV,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(BV,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(IV,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(NV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(qV,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(jV,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(DV,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ob,"id","transformers.AutoModelForNextSentencePrediction"),c(Ob,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ob,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(GV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(zV,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(WV,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(QV,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(HV,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yb,"id","transformers.AutoModelForTokenClassification"),c(Yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yb,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(UV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YV,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KV,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(ZV,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForTokenClassification"),c(eX,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(oX,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(rX,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForTokenClassification"),c(tX,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(aX,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(nX,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(sX,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(lX,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(iX,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(dX,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(cX,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(fX,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(mX,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(gX,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(hX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(pX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(uX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(_X,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(bX,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(vX,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(FX,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(TX,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(MX,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(EX,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(CX,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(wX,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(AX,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(yX,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(LX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(xX,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c($X,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(kX,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B4,"id","transformers.AutoModelForQuestionAnswering"),c(B4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B4,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(SX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BX,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(IX,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(NX,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(qX,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(jX,"href","/docs/transformers/pr_17427/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(DX,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(GX,"href","/docs/transformers/pr_17427/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(OX,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(VX,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(XX,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(zX,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(WX,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(QX,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(HX,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(UX,"href","/docs/transformers/pr_17427/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(JX,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(YX,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(KX,"href","/docs/transformers/pr_17427/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(ZX,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(ez,"href","/docs/transformers/pr_17427/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(oz,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(rz,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(tz,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(az,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(nz,"href","/docs/transformers/pr_17427/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(sz,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(lz,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(iz,"href","/docs/transformers/pr_17427/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(dz,"href","/docs/transformers/pr_17427/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(cz,"href","/docs/transformers/pr_17427/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(fz,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(mz,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(gz,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(hz,"href","/docs/transformers/pr_17427/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(pz,"href","/docs/transformers/pr_17427/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(uz,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(_z,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(bz,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(vz,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(Fz,"href","/docs/transformers/pr_17427/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wv,"id","transformers.AutoModelForTableQuestionAnswering"),c(wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Tz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Ez,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cz,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($v,"id","transformers.AutoModelForImageClassification"),c($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($v,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(wz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Az,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lz,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForImageClassification"),c(xz,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c($z,"href","/docs/transformers/pr_17427/en/model_doc/cvt#transformers.CvtForImageClassification"),c(kz,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Sz,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Rz,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(Pz,"href","/docs/transformers/pr_17427/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Bz,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassification"),c(Iz,"href","/docs/transformers/pr_17427/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Nz,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(qz,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(jz,"href","/docs/transformers/pr_17427/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Dz,"href","/docs/transformers/pr_17427/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(Gz,"href","/docs/transformers/pr_17427/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(Oz,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(Vz,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(Xz,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForImageClassification"),c(zz,"href","/docs/transformers/pr_17427/en/model_doc/van#transformers.VanForImageClassification"),c(Wz,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wv,"id","transformers.AutoModelForVision2Seq"),c(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wv,"href","#transformers.AutoModelForVision2Seq"),c(ud,"class","relative group"),c(Qz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Hz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Uz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jz,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yv,"id","transformers.AutoModelForVisualQuestionAnswering"),c(Yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Yv,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(Yz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Zz,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eW,"href","/docs/transformers/pr_17427/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rF,"id","transformers.AutoModelForAudioClassification"),c(rF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rF,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(oW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(nW,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(sW,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(lW,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(iW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(dW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(cW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(mW,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pF,"id","transformers.AutoModelForAudioFrameClassification"),c(pF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pF,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(gW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(_W,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(bW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(vW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(FW,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForCTC"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForCTC"),c(Ld,"class","relative group"),c(TW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(wW,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.HubertForCTC"),c(AW,"href","/docs/transformers/pr_17427/en/model_doc/mctct#transformers.MCTCTForCTC"),c(yW,"href","/docs/transformers/pr_17427/en/model_doc/sew#transformers.SEWForCTC"),c(LW,"href","/docs/transformers/pr_17427/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($W,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RW,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(qF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(PW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NW,"href","/docs/transformers/pr_17427/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(qW,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XF,"id","transformers.AutoModelForAudioXVector"),c(XF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XF,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VW,"href","/docs/transformers/pr_17427/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zW,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(WW,"href","/docs/transformers/pr_17427/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZF,"id","transformers.AutoModelForMaskedImageModeling"),c(ZF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZF,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(QW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JW,"href","/docs/transformers/pr_17427/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YW,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KW,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sT,"id","transformers.AutoModelForObjectDetection"),c(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sT,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(ZW,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rQ,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tQ,"href","/docs/transformers/pr_17427/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mT,"id","transformers.AutoModelForImageSegmentation"),c(mT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mT,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_17427/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_T,"id","transformers.AutoModelForSemanticSegmentation"),c(_T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_T,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(iQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(mQ,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gQ,"href","/docs/transformers/pr_17427/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hQ,"href","/docs/transformers/pr_17427/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wT,"id","transformers.AutoModelForInstanceSegmentation"),c(wT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wT,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(pQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/pr_17427/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($T,"id","transformers.TFAutoModel"),c($T,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($T,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertModel"),c(EQ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartModel"),c(CQ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertModel"),c(wQ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(AQ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yQ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertModel"),c(LQ,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.TFCLIPModel"),c(xQ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertModel"),c($Q,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextModel"),c(kQ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLModel"),c(SQ,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(RQ,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaModel"),c(PQ,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(BQ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(IQ,"href","/docs/transformers/pr_17427/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(NQ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraModel"),c(qQ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jQ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelModel"),c(DQ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(GQ,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2Model"),c(OQ,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJModel"),c(VQ,"href","/docs/transformers/pr_17427/en/model_doc/hubert#transformers.TFHubertModel"),c(XQ,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zQ,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDModel"),c(WQ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerModel"),c(QQ,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertModel"),c(HQ,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianModel"),c(UQ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartModel"),c(JQ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(YQ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetModel"),c(KQ,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5Model"),c(ZQ,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eH,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTModel"),c(oH,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusModel"),c(rH,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertModel"),c(tH,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetModel"),c(aH,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaModel"),c(nH,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerModel"),c(sH,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(lH,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinModel"),c(iH,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5Model"),c(dH,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasModel"),c(cH,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(fH,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTModel"),c(mH,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(gH,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(hH,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMModel"),c(pH,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(uH,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.TFAutoModelForPreTraining"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(_H,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(TH,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(MH,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForPreTraining"),c(EH,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(CH,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(wH,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AH,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(yH,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(LH,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(xH,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c($H,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(kH,"href","/docs/transformers/pr_17427/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(SH,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(RH,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(PH,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(BH,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(IH,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(NH,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(qH,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(jH,"href","/docs/transformers/pr_17427/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(DH,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(GH,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(OH,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KM,"id","transformers.TFAutoModelForCausalLM"),c(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(KM,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(VH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zH,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WH,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(QH,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HH,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(UH,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(JH,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(YH,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(KH,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(ZH,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(eU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(oU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(rU,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(tU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aU,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.TFAutoModelForImageClassification"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(nU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iU,"href","/docs/transformers/pr_17427/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(dU,"href","/docs/transformers/pr_17427/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(cU,"href","/docs/transformers/pr_17427/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(fU,"href","/docs/transformers/pr_17427/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(mU,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForMaskedLM"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForMaskedLM"),c(fc,"class","relative group"),c(gU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uU,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(_U,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(bU,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(vU,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(FU,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(TU,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(MU,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(EU,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(CU,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(wU,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(AU,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(yU,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(LU,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(xU,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c($U,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(kU,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(SU,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(RU,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(PU,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(BU,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(IU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jU,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(DU,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(GU,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(OU,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(VU,"href","/docs/transformers/pr_17427/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(XU,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.TFMarianMTModel"),c(zU,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(WU,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(QU,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(HU,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.TFAutoModelForSequenceClassification"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(UU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(ZU,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(eJ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(oJ,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(rJ,"href","/docs/transformers/pr_17427/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(tJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(aJ,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(nJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(sJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(lJ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(iJ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(dJ,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(cJ,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(fJ,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(mJ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(gJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(hJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(pJ,"href","/docs/transformers/pr_17427/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(uJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(_J,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(bJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(vJ,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(FJ,"href","/docs/transformers/pr_17427/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(TJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(MJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(EJ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.TFAutoModelForMultipleChoice"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(CJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yJ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(LJ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c($J,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(kJ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(SJ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(RJ,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(PJ,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(BJ,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(IJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(NJ,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(qJ,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(jJ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(DJ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(GJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(OJ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(VJ,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(XJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QJ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(HJ,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(UJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KJ,"href","/docs/transformers/pr_17427/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForTokenClassification"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(ZJ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(tY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(aY,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(nY,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(sY,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(lY,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(iY,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(dY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(cY,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(fY,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(mY,"href","/docs/transformers/pr_17427/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(gY,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(hY,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(pY,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(uY,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(_Y,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(bY,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(vY,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(FY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(TY,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.TFAutoModelForQuestionAnswering"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(MY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wY,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(AY,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(yY,"href","/docs/transformers/pr_17427/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(LY,"href","/docs/transformers/pr_17427/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(xY,"href","/docs/transformers/pr_17427/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c($Y,"href","/docs/transformers/pr_17427/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(kY,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(SY,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(RY,"href","/docs/transformers/pr_17427/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(PY,"href","/docs/transformers/pr_17427/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(BY,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(IY,"href","/docs/transformers/pr_17427/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(NY,"href","/docs/transformers/pr_17427/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(qY,"href","/docs/transformers/pr_17427/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(jY,"href","/docs/transformers/pr_17427/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(DY,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(GY,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(OY,"href","/docs/transformers/pr_17427/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(VY,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(XY,"href","/docs/transformers/pr_17427/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.TFAutoModelForVision2Seq"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(zY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HY,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(UY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KY,"href","/docs/transformers/pr_17427/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.FlaxAutoModel"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(ZY,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertModel"),c(tK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartModel"),c(aK,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitModel"),c(nK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertModel"),c(sK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(lK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(iK,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(dK,"href","/docs/transformers/pr_17427/en/model_doc/clip#transformers.FlaxCLIPModel"),c(cK,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(fK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraModel"),c(mK,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(gK,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(hK,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(pK,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianModel"),c(uK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartModel"),c(_K,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5Model"),c(bK,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTModel"),c(vK,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(FK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(TK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(MK,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5Model"),c(EK,"href","/docs/transformers/pr_17427/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(CK,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTModel"),c(wK,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(AK,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(yK,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N3,"id","transformers.FlaxAutoModelForCausalLM"),c(N3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N3,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(LK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($K,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(SK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(RK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(PK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(BK,"href","/docs/transformers/pr_17427/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(IK,"href","/docs/transformers/pr_17427/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(NK,"href","/docs/transformers/pr_17427/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(qK,"href","/docs/transformers/pr_17427/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(jK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(DK,"href","/docs/transformers/pr_17427/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModelForPreTraining"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(GK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VK,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XK,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(zK,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(WK,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(QK,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(HK,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(UK,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(JK,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(YK,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(KK,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ZK,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(eZ,"href","/docs/transformers/pr_17427/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(oZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f0,"id","transformers.FlaxAutoModelForMaskedLM"),c(f0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(rZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(sZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(iZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(dZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(cZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(fZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(mZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(gZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(hZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(pZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Z,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vZ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(FZ,"href","/docs/transformers/pr_17427/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(TZ,"href","/docs/transformers/pr_17427/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(MZ,"href","/docs/transformers/pr_17427/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(EZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CZ,"href","/docs/transformers/pr_17427/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(wZ,"href","/docs/transformers/pr_17427/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(AZ,"href","/docs/transformers/pr_17427/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(I0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rf,"class","relative group"),c(yZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Z,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(kZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(SZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(RZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(PZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(BZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(IZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(NZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(qZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(jZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(U0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nf,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(XZ,"href","/docs/transformers/pr_17427/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(zZ,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(WZ,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(QZ,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(HZ,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(UZ,"href","/docs/transformers/pr_17427/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(JZ,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(YZ,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(KZ,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iw,"id","transformers.FlaxAutoModelForTokenClassification"),c(iw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iw,"href","#transformers.FlaxAutoModelForTokenClassification"),c(df,"class","relative group"),c(ZZ,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ree,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(tee,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(aee,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(nee,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(see,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(lee,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(iee,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(dee,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mf,"class","relative group"),c(cee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gee,"href","/docs/transformers/pr_17427/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(hee,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(pee,"href","/docs/transformers/pr_17427/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(uee,"href","/docs/transformers/pr_17427/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(_ee,"href","/docs/transformers/pr_17427/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(bee,"href","/docs/transformers/pr_17427/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(vee,"href","/docs/transformers/pr_17427/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Fee,"href","/docs/transformers/pr_17427/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(pf,"class","relative group"),c(Tee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Eee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cee,"href","/docs/transformers/pr_17427/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForImageClassification"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForImageClassification"),c(bf,"class","relative group"),c(wee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lee,"href","/docs/transformers/pr_17427/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(xee,"href","/docs/transformers/pr_17427/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jw,"id","transformers.FlaxAutoModelForVision2Seq"),c(jw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jw,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Tf,"class","relative group"),c($ee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kee,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(See,"href","/docs/transformers/pr_17427/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ree,"href","/docs/transformers/pr_17427/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Eo),e(Eo,Fi),b(f,yf,_),b(f,nt,_),e(nt,Ti),e(nt,Mi),e(Mi,iy),e(nt,Lf),b(f,Ge,_),b(f,We,_),e(We,Ei),e(We,Sn),e(Sn,dy),e(We,Rn),e(We,Pn),e(Pn,cy),e(We,Ci),e(We,Bn),e(Bn,fy),e(We,wi),b(f,xf,_),M(xa,f,_),b(f,Qe,_),b(f,Ae,_),e(Ae,Nk),e(Ae,Ai),e(Ai,qk),e(Ae,jk),b(f,Co,_),b(f,$a,_),e($a,Dk),e($a,$f),e($f,Gk),e($a,qXe),b(f,EDe,_),b(f,yi,_),e(yi,kf),e(kf,Lre),M(my,Lre,null),e(yi,jXe),e(yi,xre),e(xre,DXe),b(f,CDe,_),b(f,In,_),e(In,GXe),e(In,$re),e($re,OXe),e(In,VXe),e(In,kre),e(kre,XXe),e(In,zXe),b(f,wDe,_),M(gy,f,_),b(f,ADe,_),b(f,Ok,_),e(Ok,WXe),b(f,yDe,_),M(Sf,f,_),b(f,LDe,_),b(f,Li,_),e(Li,Rf),e(Rf,Sre),M(hy,Sre,null),e(Li,QXe),e(Li,Rre),e(Rre,HXe),b(f,xDe,_),b(f,wo,_),M(py,wo,null),e(wo,UXe),e(wo,uy),e(uy,JXe),e(uy,Vk),e(Vk,YXe),e(uy,KXe),e(wo,ZXe),e(wo,_y),e(_y,eze),e(_y,Pre),e(Pre,oze),e(_y,rze),e(wo,tze),e(wo,wr),M(by,wr,null),e(wr,aze),e(wr,Bre),e(Bre,nze),e(wr,sze),e(wr,xi),e(xi,lze),e(xi,Ire),e(Ire,ize),e(xi,dze),e(xi,Nre),e(Nre,cze),e(xi,fze),e(wr,mze),e(wr,A),e(A,Pf),e(Pf,qre),e(qre,gze),e(Pf,hze),e(Pf,Xk),e(Xk,pze),e(Pf,uze),e(A,_ze),e(A,Bf),e(Bf,jre),e(jre,bze),e(Bf,vze),e(Bf,zk),e(zk,Fze),e(Bf,Tze),e(A,Mze),e(A,If),e(If,Dre),e(Dre,Eze),e(If,Cze),e(If,Wk),e(Wk,wze),e(If,Aze),e(A,yze),e(A,Nf),e(Nf,Gre),e(Gre,Lze),e(Nf,xze),e(Nf,Qk),e(Qk,$ze),e(Nf,kze),e(A,Sze),e(A,qf),e(qf,Ore),e(Ore,Rze),e(qf,Pze),e(qf,Hk),e(Hk,Bze),e(qf,Ize),e(A,Nze),e(A,jf),e(jf,Vre),e(Vre,qze),e(jf,jze),e(jf,Uk),e(Uk,Dze),e(jf,Gze),e(A,Oze),e(A,Df),e(Df,Xre),e(Xre,Vze),e(Df,Xze),e(Df,Jk),e(Jk,zze),e(Df,Wze),e(A,Qze),e(A,Gf),e(Gf,zre),e(zre,Hze),e(Gf,Uze),e(Gf,Yk),e(Yk,Jze),e(Gf,Yze),e(A,Kze),e(A,Of),e(Of,Wre),e(Wre,Zze),e(Of,eWe),e(Of,Kk),e(Kk,oWe),e(Of,rWe),e(A,tWe),e(A,Vf),e(Vf,Qre),e(Qre,aWe),e(Vf,nWe),e(Vf,Zk),e(Zk,sWe),e(Vf,lWe),e(A,iWe),e(A,Xf),e(Xf,Hre),e(Hre,dWe),e(Xf,cWe),e(Xf,eS),e(eS,fWe),e(Xf,mWe),e(A,gWe),e(A,zf),e(zf,Ure),e(Ure,hWe),e(zf,pWe),e(zf,oS),e(oS,uWe),e(zf,_We),e(A,bWe),e(A,Wf),e(Wf,Jre),e(Jre,vWe),e(Wf,FWe),e(Wf,rS),e(rS,TWe),e(Wf,MWe),e(A,EWe),e(A,Qf),e(Qf,Yre),e(Yre,CWe),e(Qf,wWe),e(Qf,tS),e(tS,AWe),e(Qf,yWe),e(A,LWe),e(A,Hf),e(Hf,Kre),e(Kre,xWe),e(Hf,$We),e(Hf,aS),e(aS,kWe),e(Hf,SWe),e(A,RWe),e(A,Uf),e(Uf,Zre),e(Zre,PWe),e(Uf,BWe),e(Uf,nS),e(nS,IWe),e(Uf,NWe),e(A,qWe),e(A,Jf),e(Jf,ete),e(ete,jWe),e(Jf,DWe),e(Jf,sS),e(sS,GWe),e(Jf,OWe),e(A,VWe),e(A,Yf),e(Yf,ote),e(ote,XWe),e(Yf,zWe),e(Yf,lS),e(lS,WWe),e(Yf,QWe),e(A,HWe),e(A,Kf),e(Kf,rte),e(rte,UWe),e(Kf,JWe),e(Kf,iS),e(iS,YWe),e(Kf,KWe),e(A,ZWe),e(A,Zf),e(Zf,tte),e(tte,eQe),e(Zf,oQe),e(Zf,dS),e(dS,rQe),e(Zf,tQe),e(A,aQe),e(A,em),e(em,ate),e(ate,nQe),e(em,sQe),e(em,cS),e(cS,lQe),e(em,iQe),e(A,dQe),e(A,om),e(om,nte),e(nte,cQe),e(om,fQe),e(om,fS),e(fS,mQe),e(om,gQe),e(A,hQe),e(A,rm),e(rm,ste),e(ste,pQe),e(rm,uQe),e(rm,mS),e(mS,_Qe),e(rm,bQe),e(A,vQe),e(A,tm),e(tm,lte),e(lte,FQe),e(tm,TQe),e(tm,gS),e(gS,MQe),e(tm,EQe),e(A,CQe),e(A,am),e(am,ite),e(ite,wQe),e(am,AQe),e(am,hS),e(hS,yQe),e(am,LQe),e(A,xQe),e(A,nm),e(nm,dte),e(dte,$Qe),e(nm,kQe),e(nm,pS),e(pS,SQe),e(nm,RQe),e(A,PQe),e(A,sm),e(sm,cte),e(cte,BQe),e(sm,IQe),e(sm,uS),e(uS,NQe),e(sm,qQe),e(A,jQe),e(A,lm),e(lm,fte),e(fte,DQe),e(lm,GQe),e(lm,_S),e(_S,OQe),e(lm,VQe),e(A,XQe),e(A,im),e(im,mte),e(mte,zQe),e(im,WQe),e(im,bS),e(bS,QQe),e(im,HQe),e(A,UQe),e(A,dm),e(dm,gte),e(gte,JQe),e(dm,YQe),e(dm,vS),e(vS,KQe),e(dm,ZQe),e(A,eHe),e(A,cm),e(cm,hte),e(hte,oHe),e(cm,rHe),e(cm,FS),e(FS,tHe),e(cm,aHe),e(A,nHe),e(A,fm),e(fm,pte),e(pte,sHe),e(fm,lHe),e(fm,TS),e(TS,iHe),e(fm,dHe),e(A,cHe),e(A,mm),e(mm,ute),e(ute,fHe),e(mm,mHe),e(mm,MS),e(MS,gHe),e(mm,hHe),e(A,pHe),e(A,gm),e(gm,_te),e(_te,uHe),e(gm,_He),e(gm,ES),e(ES,bHe),e(gm,vHe),e(A,FHe),e(A,hm),e(hm,bte),e(bte,THe),e(hm,MHe),e(hm,CS),e(CS,EHe),e(hm,CHe),e(A,wHe),e(A,pm),e(pm,vte),e(vte,AHe),e(pm,yHe),e(pm,wS),e(wS,LHe),e(pm,xHe),e(A,$He),e(A,um),e(um,Fte),e(Fte,kHe),e(um,SHe),e(um,AS),e(AS,RHe),e(um,PHe),e(A,BHe),e(A,_m),e(_m,Tte),e(Tte,IHe),e(_m,NHe),e(_m,yS),e(yS,qHe),e(_m,jHe),e(A,DHe),e(A,bm),e(bm,Mte),e(Mte,GHe),e(bm,OHe),e(bm,LS),e(LS,VHe),e(bm,XHe),e(A,zHe),e(A,vm),e(vm,Ete),e(Ete,WHe),e(vm,QHe),e(vm,xS),e(xS,HHe),e(vm,UHe),e(A,JHe),e(A,Fm),e(Fm,Cte),e(Cte,YHe),e(Fm,KHe),e(Fm,$S),e($S,ZHe),e(Fm,eUe),e(A,oUe),e(A,Tm),e(Tm,wte),e(wte,rUe),e(Tm,tUe),e(Tm,kS),e(kS,aUe),e(Tm,nUe),e(A,sUe),e(A,Mm),e(Mm,Ate),e(Ate,lUe),e(Mm,iUe),e(Mm,SS),e(SS,dUe),e(Mm,cUe),e(A,fUe),e(A,Em),e(Em,yte),e(yte,mUe),e(Em,gUe),e(Em,RS),e(RS,hUe),e(Em,pUe),e(A,uUe),e(A,Cm),e(Cm,Lte),e(Lte,_Ue),e(Cm,bUe),e(Cm,PS),e(PS,vUe),e(Cm,FUe),e(A,TUe),e(A,wm),e(wm,xte),e(xte,MUe),e(wm,EUe),e(wm,BS),e(BS,CUe),e(wm,wUe),e(A,AUe),e(A,Am),e(Am,$te),e($te,yUe),e(Am,LUe),e(Am,IS),e(IS,xUe),e(Am,$Ue),e(A,kUe),e(A,ym),e(ym,kte),e(kte,SUe),e(ym,RUe),e(ym,NS),e(NS,PUe),e(ym,BUe),e(A,IUe),e(A,Lm),e(Lm,Ste),e(Ste,NUe),e(Lm,qUe),e(Lm,qS),e(qS,jUe),e(Lm,DUe),e(A,GUe),e(A,xm),e(xm,Rte),e(Rte,OUe),e(xm,VUe),e(xm,jS),e(jS,XUe),e(xm,zUe),e(A,WUe),e(A,$m),e($m,Pte),e(Pte,QUe),e($m,HUe),e($m,DS),e(DS,UUe),e($m,JUe),e(A,YUe),e(A,km),e(km,Bte),e(Bte,KUe),e(km,ZUe),e(km,GS),e(GS,eJe),e(km,oJe),e(A,rJe),e(A,Sm),e(Sm,Ite),e(Ite,tJe),e(Sm,aJe),e(Sm,OS),e(OS,nJe),e(Sm,sJe),e(A,lJe),e(A,Rm),e(Rm,Nte),e(Nte,iJe),e(Rm,dJe),e(Rm,VS),e(VS,cJe),e(Rm,fJe),e(A,mJe),e(A,Pm),e(Pm,qte),e(qte,gJe),e(Pm,hJe),e(Pm,XS),e(XS,pJe),e(Pm,uJe),e(A,_Je),e(A,Bm),e(Bm,jte),e(jte,bJe),e(Bm,vJe),e(Bm,zS),e(zS,FJe),e(Bm,TJe),e(A,MJe),e(A,Im),e(Im,Dte),e(Dte,EJe),e(Im,CJe),e(Im,WS),e(WS,wJe),e(Im,AJe),e(A,yJe),e(A,Nm),e(Nm,Gte),e(Gte,LJe),e(Nm,xJe),e(Nm,QS),e(QS,$Je),e(Nm,kJe),e(A,SJe),e(A,qm),e(qm,Ote),e(Ote,RJe),e(qm,PJe),e(qm,HS),e(HS,BJe),e(qm,IJe),e(A,NJe),e(A,jm),e(jm,Vte),e(Vte,qJe),e(jm,jJe),e(jm,US),e(US,DJe),e(jm,GJe),e(A,OJe),e(A,Dm),e(Dm,Xte),e(Xte,VJe),e(Dm,XJe),e(Dm,JS),e(JS,zJe),e(Dm,WJe),e(A,QJe),e(A,Gm),e(Gm,zte),e(zte,HJe),e(Gm,UJe),e(Gm,YS),e(YS,JJe),e(Gm,YJe),e(A,KJe),e(A,Om),e(Om,Wte),e(Wte,ZJe),e(Om,eYe),e(Om,KS),e(KS,oYe),e(Om,rYe),e(A,tYe),e(A,Vm),e(Vm,Qte),e(Qte,aYe),e(Vm,nYe),e(Vm,ZS),e(ZS,sYe),e(Vm,lYe),e(A,iYe),e(A,Xm),e(Xm,Hte),e(Hte,dYe),e(Xm,cYe),e(Xm,eR),e(eR,fYe),e(Xm,mYe),e(A,gYe),e(A,zm),e(zm,Ute),e(Ute,hYe),e(zm,pYe),e(zm,oR),e(oR,uYe),e(zm,_Ye),e(A,bYe),e(A,Wm),e(Wm,Jte),e(Jte,vYe),e(Wm,FYe),e(Wm,rR),e(rR,TYe),e(Wm,MYe),e(A,EYe),e(A,Qm),e(Qm,Yte),e(Yte,CYe),e(Qm,wYe),e(Qm,tR),e(tR,AYe),e(Qm,yYe),e(A,LYe),e(A,Hm),e(Hm,Kte),e(Kte,xYe),e(Hm,$Ye),e(Hm,aR),e(aR,kYe),e(Hm,SYe),e(A,RYe),e(A,Um),e(Um,Zte),e(Zte,PYe),e(Um,BYe),e(Um,nR),e(nR,IYe),e(Um,NYe),e(A,qYe),e(A,Jm),e(Jm,eae),e(eae,jYe),e(Jm,DYe),e(Jm,sR),e(sR,GYe),e(Jm,OYe),e(A,VYe),e(A,Ym),e(Ym,oae),e(oae,XYe),e(Ym,zYe),e(Ym,lR),e(lR,WYe),e(Ym,QYe),e(A,HYe),e(A,Km),e(Km,rae),e(rae,UYe),e(Km,JYe),e(Km,iR),e(iR,YYe),e(Km,KYe),e(A,ZYe),e(A,Zm),e(Zm,tae),e(tae,eKe),e(Zm,oKe),e(Zm,dR),e(dR,rKe),e(Zm,tKe),e(A,aKe),e(A,eg),e(eg,aae),e(aae,nKe),e(eg,sKe),e(eg,cR),e(cR,lKe),e(eg,iKe),e(A,dKe),e(A,og),e(og,nae),e(nae,cKe),e(og,fKe),e(og,fR),e(fR,mKe),e(og,gKe),e(A,hKe),e(A,rg),e(rg,sae),e(sae,pKe),e(rg,uKe),e(rg,mR),e(mR,_Ke),e(rg,bKe),e(A,vKe),e(A,tg),e(tg,lae),e(lae,FKe),e(tg,TKe),e(tg,gR),e(gR,MKe),e(tg,EKe),e(A,CKe),e(A,ag),e(ag,iae),e(iae,wKe),e(ag,AKe),e(ag,hR),e(hR,yKe),e(ag,LKe),e(A,xKe),e(A,ng),e(ng,dae),e(dae,$Ke),e(ng,kKe),e(ng,pR),e(pR,SKe),e(ng,RKe),e(A,PKe),e(A,sg),e(sg,cae),e(cae,BKe),e(sg,IKe),e(sg,uR),e(uR,NKe),e(sg,qKe),e(A,jKe),e(A,lg),e(lg,fae),e(fae,DKe),e(lg,GKe),e(lg,_R),e(_R,OKe),e(lg,VKe),e(A,XKe),e(A,ig),e(ig,mae),e(mae,zKe),e(ig,WKe),e(ig,bR),e(bR,QKe),e(ig,HKe),e(A,UKe),e(A,dg),e(dg,gae),e(gae,JKe),e(dg,YKe),e(dg,vR),e(vR,KKe),e(dg,ZKe),e(A,eZe),e(A,cg),e(cg,hae),e(hae,oZe),e(cg,rZe),e(cg,FR),e(FR,tZe),e(cg,aZe),e(A,nZe),e(A,fg),e(fg,pae),e(pae,sZe),e(fg,lZe),e(fg,TR),e(TR,iZe),e(fg,dZe),e(A,cZe),e(A,mg),e(mg,uae),e(uae,fZe),e(mg,mZe),e(mg,MR),e(MR,gZe),e(mg,hZe),e(A,pZe),e(A,gg),e(gg,_ae),e(_ae,uZe),e(gg,_Ze),e(gg,ER),e(ER,bZe),e(gg,vZe),e(A,FZe),e(A,hg),e(hg,bae),e(bae,TZe),e(hg,MZe),e(hg,CR),e(CR,EZe),e(hg,CZe),e(A,wZe),e(A,pg),e(pg,vae),e(vae,AZe),e(pg,yZe),e(pg,wR),e(wR,LZe),e(pg,xZe),e(A,$Ze),e(A,ug),e(ug,Fae),e(Fae,kZe),e(ug,SZe),e(ug,AR),e(AR,RZe),e(ug,PZe),e(A,BZe),e(A,_g),e(_g,Tae),e(Tae,IZe),e(_g,NZe),e(_g,yR),e(yR,qZe),e(_g,jZe),e(A,DZe),e(A,bg),e(bg,Mae),e(Mae,GZe),e(bg,OZe),e(bg,LR),e(LR,VZe),e(bg,XZe),e(A,zZe),e(A,vg),e(vg,Eae),e(Eae,WZe),e(vg,QZe),e(vg,xR),e(xR,HZe),e(vg,UZe),e(A,JZe),e(A,Fg),e(Fg,Cae),e(Cae,YZe),e(Fg,KZe),e(Fg,$R),e($R,ZZe),e(Fg,eeo),e(A,oeo),e(A,Tg),e(Tg,wae),e(wae,reo),e(Tg,teo),e(Tg,kR),e(kR,aeo),e(Tg,neo),e(A,seo),e(A,Mg),e(Mg,Aae),e(Aae,leo),e(Mg,ieo),e(Mg,SR),e(SR,deo),e(Mg,ceo),e(A,feo),e(A,Eg),e(Eg,yae),e(yae,meo),e(Eg,geo),e(Eg,RR),e(RR,heo),e(Eg,peo),e(A,ueo),e(A,Cg),e(Cg,Lae),e(Lae,_eo),e(Cg,beo),e(Cg,PR),e(PR,veo),e(Cg,Feo),e(A,Teo),e(A,wg),e(wg,xae),e(xae,Meo),e(wg,Eeo),e(wg,BR),e(BR,Ceo),e(wg,weo),e(A,Aeo),e(A,Ag),e(Ag,$ae),e($ae,yeo),e(Ag,Leo),e(Ag,IR),e(IR,xeo),e(Ag,$eo),e(A,keo),e(A,yg),e(yg,kae),e(kae,Seo),e(yg,Reo),e(yg,NR),e(NR,Peo),e(yg,Beo),e(A,Ieo),e(A,Lg),e(Lg,Sae),e(Sae,Neo),e(Lg,qeo),e(Lg,qR),e(qR,jeo),e(Lg,Deo),e(A,Geo),e(A,xg),e(xg,Rae),e(Rae,Oeo),e(xg,Veo),e(xg,jR),e(jR,Xeo),e(xg,zeo),e(A,Weo),e(A,$g),e($g,Pae),e(Pae,Qeo),e($g,Heo),e($g,DR),e(DR,Ueo),e($g,Jeo),e(A,Yeo),e(A,kg),e(kg,Bae),e(Bae,Keo),e(kg,Zeo),e(kg,GR),e(GR,eoo),e(kg,ooo),e(A,roo),e(A,Sg),e(Sg,Iae),e(Iae,too),e(Sg,aoo),e(Sg,OR),e(OR,noo),e(Sg,soo),e(A,loo),e(A,Rg),e(Rg,Nae),e(Nae,ioo),e(Rg,doo),e(Rg,VR),e(VR,coo),e(Rg,foo),e(A,moo),e(A,Pg),e(Pg,qae),e(qae,goo),e(Pg,hoo),e(Pg,XR),e(XR,poo),e(Pg,uoo),e(A,_oo),e(A,Bg),e(Bg,jae),e(jae,boo),e(Bg,voo),e(Bg,zR),e(zR,Foo),e(Bg,Too),e(A,Moo),e(A,Ig),e(Ig,Dae),e(Dae,Eoo),e(Ig,Coo),e(Ig,WR),e(WR,woo),e(Ig,Aoo),e(A,yoo),e(A,Ng),e(Ng,Gae),e(Gae,Loo),e(Ng,xoo),e(Ng,QR),e(QR,$oo),e(Ng,koo),e(wr,Soo),M(qg,wr,null),e(wo,Roo),e(wo,jg),M(vy,jg,null),e(jg,Poo),e(jg,Oae),e(Oae,Boo),b(f,$De,_),b(f,$i,_),e($i,Dg),e(Dg,Vae),M(Fy,Vae,null),e($i,Ioo),e($i,Xae),e(Xae,Noo),b(f,kDe,_),b(f,Ao,_),M(Ty,Ao,null),e(Ao,qoo),e(Ao,My),e(My,joo),e(My,HR),e(HR,Doo),e(My,Goo),e(Ao,Ooo),e(Ao,Ey),e(Ey,Voo),e(Ey,zae),e(zae,Xoo),e(Ey,zoo),e(Ao,Woo),e(Ao,Ar),M(Cy,Ar,null),e(Ar,Qoo),e(Ar,Wae),e(Wae,Hoo),e(Ar,Uoo),e(Ar,ka),e(ka,Joo),e(ka,Qae),e(Qae,Yoo),e(ka,Koo),e(ka,Hae),e(Hae,Zoo),e(ka,ero),e(ka,Uae),e(Uae,oro),e(ka,rro),e(Ar,tro),e(Ar,k),e(k,Nn),e(Nn,Jae),e(Jae,aro),e(Nn,nro),e(Nn,UR),e(UR,sro),e(Nn,lro),e(Nn,JR),e(JR,iro),e(Nn,dro),e(k,cro),e(k,qn),e(qn,Yae),e(Yae,fro),e(qn,mro),e(qn,YR),e(YR,gro),e(qn,hro),e(qn,KR),e(KR,pro),e(qn,uro),e(k,_ro),e(k,jn),e(jn,Kae),e(Kae,bro),e(jn,vro),e(jn,ZR),e(ZR,Fro),e(jn,Tro),e(jn,eP),e(eP,Mro),e(jn,Ero),e(k,Cro),e(k,Gg),e(Gg,Zae),e(Zae,wro),e(Gg,Aro),e(Gg,oP),e(oP,yro),e(Gg,Lro),e(k,xro),e(k,Dn),e(Dn,ene),e(ene,$ro),e(Dn,kro),e(Dn,rP),e(rP,Sro),e(Dn,Rro),e(Dn,tP),e(tP,Pro),e(Dn,Bro),e(k,Iro),e(k,Og),e(Og,one),e(one,Nro),e(Og,qro),e(Og,aP),e(aP,jro),e(Og,Dro),e(k,Gro),e(k,Vg),e(Vg,rne),e(rne,Oro),e(Vg,Vro),e(Vg,nP),e(nP,Xro),e(Vg,zro),e(k,Wro),e(k,Xg),e(Xg,tne),e(tne,Qro),e(Xg,Hro),e(Xg,sP),e(sP,Uro),e(Xg,Jro),e(k,Yro),e(k,Gn),e(Gn,ane),e(ane,Kro),e(Gn,Zro),e(Gn,lP),e(lP,eto),e(Gn,oto),e(Gn,iP),e(iP,rto),e(Gn,tto),e(k,ato),e(k,On),e(On,nne),e(nne,nto),e(On,sto),e(On,dP),e(dP,lto),e(On,ito),e(On,cP),e(cP,dto),e(On,cto),e(k,fto),e(k,Vn),e(Vn,sne),e(sne,mto),e(Vn,gto),e(Vn,fP),e(fP,hto),e(Vn,pto),e(Vn,mP),e(mP,uto),e(Vn,_to),e(k,bto),e(k,zg),e(zg,lne),e(lne,vto),e(zg,Fto),e(zg,gP),e(gP,Tto),e(zg,Mto),e(k,Eto),e(k,Wg),e(Wg,ine),e(ine,Cto),e(Wg,wto),e(Wg,hP),e(hP,Ato),e(Wg,yto),e(k,Lto),e(k,Qg),e(Qg,dne),e(dne,xto),e(Qg,$to),e(Qg,pP),e(pP,kto),e(Qg,Sto),e(k,Rto),e(k,Xn),e(Xn,cne),e(cne,Pto),e(Xn,Bto),e(Xn,uP),e(uP,Ito),e(Xn,Nto),e(Xn,_P),e(_P,qto),e(Xn,jto),e(k,Dto),e(k,Hg),e(Hg,fne),e(fne,Gto),e(Hg,Oto),e(Hg,bP),e(bP,Vto),e(Hg,Xto),e(k,zto),e(k,zn),e(zn,mne),e(mne,Wto),e(zn,Qto),e(zn,vP),e(vP,Hto),e(zn,Uto),e(zn,FP),e(FP,Jto),e(zn,Yto),e(k,Kto),e(k,Wn),e(Wn,gne),e(gne,Zto),e(Wn,eao),e(Wn,TP),e(TP,oao),e(Wn,rao),e(Wn,MP),e(MP,tao),e(Wn,aao),e(k,nao),e(k,Qn),e(Qn,hne),e(hne,sao),e(Qn,lao),e(Qn,EP),e(EP,iao),e(Qn,dao),e(Qn,CP),e(CP,cao),e(Qn,fao),e(k,mao),e(k,Ug),e(Ug,pne),e(pne,gao),e(Ug,hao),e(Ug,wP),e(wP,pao),e(Ug,uao),e(k,_ao),e(k,Hn),e(Hn,une),e(une,bao),e(Hn,vao),e(Hn,AP),e(AP,Fao),e(Hn,Tao),e(Hn,yP),e(yP,Mao),e(Hn,Eao),e(k,Cao),e(k,Un),e(Un,_ne),e(_ne,wao),e(Un,Aao),e(Un,LP),e(LP,yao),e(Un,Lao),e(Un,xP),e(xP,xao),e(Un,$ao),e(k,kao),e(k,Jn),e(Jn,bne),e(bne,Sao),e(Jn,Rao),e(Jn,$P),e($P,Pao),e(Jn,Bao),e(Jn,kP),e(kP,Iao),e(Jn,Nao),e(k,qao),e(k,Yn),e(Yn,vne),e(vne,jao),e(Yn,Dao),e(Yn,SP),e(SP,Gao),e(Yn,Oao),e(Yn,RP),e(RP,Vao),e(Yn,Xao),e(k,zao),e(k,Kn),e(Kn,Fne),e(Fne,Wao),e(Kn,Qao),e(Kn,PP),e(PP,Hao),e(Kn,Uao),e(Kn,BP),e(BP,Jao),e(Kn,Yao),e(k,Kao),e(k,Zn),e(Zn,Tne),e(Tne,Zao),e(Zn,eno),e(Zn,IP),e(IP,ono),e(Zn,rno),e(Zn,NP),e(NP,tno),e(Zn,ano),e(k,nno),e(k,Jg),e(Jg,Mne),e(Mne,sno),e(Jg,lno),e(Jg,qP),e(qP,ino),e(Jg,dno),e(k,cno),e(k,es),e(es,Ene),e(Ene,fno),e(es,mno),e(es,jP),e(jP,gno),e(es,hno),e(es,DP),e(DP,pno),e(es,uno),e(k,_no),e(k,Yg),e(Yg,Cne),e(Cne,bno),e(Yg,vno),e(Yg,GP),e(GP,Fno),e(Yg,Tno),e(k,Mno),e(k,os),e(os,wne),e(wne,Eno),e(os,Cno),e(os,OP),e(OP,wno),e(os,Ano),e(os,VP),e(VP,yno),e(os,Lno),e(k,xno),e(k,rs),e(rs,Ane),e(Ane,$no),e(rs,kno),e(rs,XP),e(XP,Sno),e(rs,Rno),e(rs,zP),e(zP,Pno),e(rs,Bno),e(k,Ino),e(k,ts),e(ts,yne),e(yne,Nno),e(ts,qno),e(ts,WP),e(WP,jno),e(ts,Dno),e(ts,QP),e(QP,Gno),e(ts,Ono),e(k,Vno),e(k,Kg),e(Kg,Lne),e(Lne,Xno),e(Kg,zno),e(Kg,HP),e(HP,Wno),e(Kg,Qno),e(k,Hno),e(k,as),e(as,xne),e(xne,Uno),e(as,Jno),e(as,UP),e(UP,Yno),e(as,Kno),e(as,JP),e(JP,Zno),e(as,eso),e(k,oso),e(k,ns),e(ns,$ne),e($ne,rso),e(ns,tso),e(ns,YP),e(YP,aso),e(ns,nso),e(ns,KP),e(KP,sso),e(ns,lso),e(k,iso),e(k,Zg),e(Zg,kne),e(kne,dso),e(Zg,cso),e(Zg,ZP),e(ZP,fso),e(Zg,mso),e(k,gso),e(k,ss),e(ss,Sne),e(Sne,hso),e(ss,pso),e(ss,eB),e(eB,uso),e(ss,_so),e(ss,oB),e(oB,bso),e(ss,vso),e(k,Fso),e(k,ls),e(ls,Rne),e(Rne,Tso),e(ls,Mso),e(ls,rB),e(rB,Eso),e(ls,Cso),e(ls,tB),e(tB,wso),e(ls,Aso),e(k,yso),e(k,is),e(is,Pne),e(Pne,Lso),e(is,xso),e(is,aB),e(aB,$so),e(is,kso),e(is,nB),e(nB,Sso),e(is,Rso),e(k,Pso),e(k,ds),e(ds,Bne),e(Bne,Bso),e(ds,Iso),e(ds,sB),e(sB,Nso),e(ds,qso),e(ds,lB),e(lB,jso),e(ds,Dso),e(k,Gso),e(k,cs),e(cs,Ine),e(Ine,Oso),e(cs,Vso),e(cs,iB),e(iB,Xso),e(cs,zso),e(cs,dB),e(dB,Wso),e(cs,Qso),e(k,Hso),e(k,fs),e(fs,Nne),e(Nne,Uso),e(fs,Jso),e(fs,cB),e(cB,Yso),e(fs,Kso),e(fs,fB),e(fB,Zso),e(fs,elo),e(k,olo),e(k,ms),e(ms,qne),e(qne,rlo),e(ms,tlo),e(ms,mB),e(mB,alo),e(ms,nlo),e(ms,gB),e(gB,slo),e(ms,llo),e(k,ilo),e(k,eh),e(eh,jne),e(jne,dlo),e(eh,clo),e(eh,hB),e(hB,flo),e(eh,mlo),e(k,glo),e(k,gs),e(gs,Dne),e(Dne,hlo),e(gs,plo),e(gs,pB),e(pB,ulo),e(gs,_lo),e(gs,uB),e(uB,blo),e(gs,vlo),e(k,Flo),e(k,oh),e(oh,Gne),e(Gne,Tlo),e(oh,Mlo),e(oh,_B),e(_B,Elo),e(oh,Clo),e(k,wlo),e(k,rh),e(rh,One),e(One,Alo),e(rh,ylo),e(rh,bB),e(bB,Llo),e(rh,xlo),e(k,$lo),e(k,hs),e(hs,Vne),e(Vne,klo),e(hs,Slo),e(hs,vB),e(vB,Rlo),e(hs,Plo),e(hs,FB),e(FB,Blo),e(hs,Ilo),e(k,Nlo),e(k,ps),e(ps,Xne),e(Xne,qlo),e(ps,jlo),e(ps,TB),e(TB,Dlo),e(ps,Glo),e(ps,MB),e(MB,Olo),e(ps,Vlo),e(k,Xlo),e(k,us),e(us,zne),e(zne,zlo),e(us,Wlo),e(us,EB),e(EB,Qlo),e(us,Hlo),e(us,CB),e(CB,Ulo),e(us,Jlo),e(k,Ylo),e(k,th),e(th,Wne),e(Wne,Klo),e(th,Zlo),e(th,wB),e(wB,eio),e(th,oio),e(k,rio),e(k,_s),e(_s,Qne),e(Qne,tio),e(_s,aio),e(_s,AB),e(AB,nio),e(_s,sio),e(_s,yB),e(yB,lio),e(_s,iio),e(k,dio),e(k,bs),e(bs,Hne),e(Hne,cio),e(bs,fio),e(bs,LB),e(LB,mio),e(bs,gio),e(bs,xB),e(xB,hio),e(bs,pio),e(k,uio),e(k,vs),e(vs,Une),e(Une,_io),e(vs,bio),e(vs,$B),e($B,vio),e(vs,Fio),e(vs,kB),e(kB,Tio),e(vs,Mio),e(k,Eio),e(k,Fs),e(Fs,Jne),e(Jne,Cio),e(Fs,wio),e(Fs,SB),e(SB,Aio),e(Fs,yio),e(Fs,RB),e(RB,Lio),e(Fs,xio),e(k,$io),e(k,Ts),e(Ts,Yne),e(Yne,kio),e(Ts,Sio),e(Ts,PB),e(PB,Rio),e(Ts,Pio),e(Ts,BB),e(BB,Bio),e(Ts,Iio),e(k,Nio),e(k,ah),e(ah,Kne),e(Kne,qio),e(ah,jio),e(ah,IB),e(IB,Dio),e(ah,Gio),e(k,Oio),e(k,Ms),e(Ms,Zne),e(Zne,Vio),e(Ms,Xio),e(Ms,NB),e(NB,zio),e(Ms,Wio),e(Ms,qB),e(qB,Qio),e(Ms,Hio),e(k,Uio),e(k,nh),e(nh,ese),e(ese,Jio),e(nh,Yio),e(nh,jB),e(jB,Kio),e(nh,Zio),e(k,edo),e(k,sh),e(sh,ose),e(ose,odo),e(sh,rdo),e(sh,DB),e(DB,tdo),e(sh,ado),e(k,ndo),e(k,lh),e(lh,rse),e(rse,sdo),e(lh,ldo),e(lh,GB),e(GB,ido),e(lh,ddo),e(k,cdo),e(k,ih),e(ih,tse),e(tse,fdo),e(ih,mdo),e(ih,OB),e(OB,gdo),e(ih,hdo),e(k,pdo),e(k,Es),e(Es,ase),e(ase,udo),e(Es,_do),e(Es,VB),e(VB,bdo),e(Es,vdo),e(Es,XB),e(XB,Fdo),e(Es,Tdo),e(k,Mdo),e(k,dh),e(dh,nse),e(nse,Edo),e(dh,Cdo),e(dh,zB),e(zB,wdo),e(dh,Ado),e(k,ydo),e(k,Cs),e(Cs,sse),e(sse,Ldo),e(Cs,xdo),e(Cs,WB),e(WB,$do),e(Cs,kdo),e(Cs,QB),e(QB,Sdo),e(Cs,Rdo),e(k,Pdo),e(k,ws),e(ws,lse),e(lse,Bdo),e(ws,Ido),e(ws,HB),e(HB,Ndo),e(ws,qdo),e(ws,UB),e(UB,jdo),e(ws,Ddo),e(k,Gdo),e(k,As),e(As,ise),e(ise,Odo),e(As,Vdo),e(As,JB),e(JB,Xdo),e(As,zdo),e(As,YB),e(YB,Wdo),e(As,Qdo),e(k,Hdo),e(k,ys),e(ys,dse),e(dse,Udo),e(ys,Jdo),e(ys,KB),e(KB,Ydo),e(ys,Kdo),e(ys,ZB),e(ZB,Zdo),e(ys,eco),e(k,oco),e(k,Ls),e(Ls,cse),e(cse,rco),e(Ls,tco),e(Ls,eI),e(eI,aco),e(Ls,nco),e(Ls,oI),e(oI,sco),e(Ls,lco),e(k,ico),e(k,xs),e(xs,fse),e(fse,dco),e(xs,cco),e(xs,rI),e(rI,fco),e(xs,mco),e(xs,tI),e(tI,gco),e(xs,hco),e(k,pco),e(k,ch),e(ch,mse),e(mse,uco),e(ch,_co),e(ch,aI),e(aI,bco),e(ch,vco),e(k,Fco),e(k,fh),e(fh,gse),e(gse,Tco),e(fh,Mco),e(fh,nI),e(nI,Eco),e(fh,Cco),e(k,wco),e(k,$s),e($s,hse),e(hse,Aco),e($s,yco),e($s,sI),e(sI,Lco),e($s,xco),e($s,lI),e(lI,$co),e($s,kco),e(k,Sco),e(k,ks),e(ks,pse),e(pse,Rco),e(ks,Pco),e(ks,iI),e(iI,Bco),e(ks,Ico),e(ks,dI),e(dI,Nco),e(ks,qco),e(k,jco),e(k,Ss),e(Ss,use),e(use,Dco),e(Ss,Gco),e(Ss,cI),e(cI,Oco),e(Ss,Vco),e(Ss,fI),e(fI,Xco),e(Ss,zco),e(k,Wco),e(k,mh),e(mh,_se),e(_se,Qco),e(mh,Hco),e(mh,mI),e(mI,Uco),e(mh,Jco),e(k,Yco),e(k,gh),e(gh,bse),e(bse,Kco),e(gh,Zco),e(gh,gI),e(gI,efo),e(gh,ofo),e(k,rfo),e(k,hh),e(hh,vse),e(vse,tfo),e(hh,afo),e(hh,hI),e(hI,nfo),e(hh,sfo),e(k,lfo),e(k,Rs),e(Rs,Fse),e(Fse,ifo),e(Rs,dfo),e(Rs,pI),e(pI,cfo),e(Rs,ffo),e(Rs,uI),e(uI,mfo),e(Rs,gfo),e(k,hfo),e(k,Ps),e(Ps,Tse),e(Tse,pfo),e(Ps,ufo),e(Ps,_I),e(_I,_fo),e(Ps,bfo),e(Ps,bI),e(bI,vfo),e(Ps,Ffo),e(k,Tfo),e(k,ph),e(ph,Mse),e(Mse,Mfo),e(ph,Efo),e(ph,vI),e(vI,Cfo),e(ph,wfo),e(k,Afo),e(k,uh),e(uh,Ese),e(Ese,yfo),e(uh,Lfo),e(uh,FI),e(FI,xfo),e(uh,$fo),e(k,kfo),e(k,_h),e(_h,Cse),e(Cse,Sfo),e(_h,Rfo),e(_h,TI),e(TI,Pfo),e(_h,Bfo),e(k,Ifo),e(k,Bs),e(Bs,wse),e(wse,Nfo),e(Bs,qfo),e(Bs,MI),e(MI,jfo),e(Bs,Dfo),e(Bs,EI),e(EI,Gfo),e(Bs,Ofo),e(k,Vfo),e(k,bh),e(bh,Ase),e(Ase,Xfo),e(bh,zfo),e(bh,CI),e(CI,Wfo),e(bh,Qfo),e(k,Hfo),e(k,vh),e(vh,yse),e(yse,Ufo),e(vh,Jfo),e(vh,wI),e(wI,Yfo),e(vh,Kfo),e(k,Zfo),e(k,Is),e(Is,Lse),e(Lse,emo),e(Is,omo),e(Is,AI),e(AI,rmo),e(Is,tmo),e(Is,yI),e(yI,amo),e(Is,nmo),e(k,smo),e(k,Ns),e(Ns,xse),e(xse,lmo),e(Ns,imo),e(Ns,LI),e(LI,dmo),e(Ns,cmo),e(Ns,xI),e(xI,fmo),e(Ns,mmo),e(k,gmo),e(k,qs),e(qs,$se),e($se,hmo),e(qs,pmo),e(qs,$I),e($I,umo),e(qs,_mo),e(qs,kI),e(kI,bmo),e(qs,vmo),e(k,Fmo),e(k,js),e(js,kse),e(kse,Tmo),e(js,Mmo),e(js,SI),e(SI,Emo),e(js,Cmo),e(js,RI),e(RI,wmo),e(js,Amo),e(Ar,ymo),M(Fh,Ar,null),e(Ao,Lmo),e(Ao,Th),M(wy,Th,null),e(Th,xmo),e(Th,Sse),e(Sse,$mo),b(f,SDe,_),b(f,ki,_),e(ki,Mh),e(Mh,Rse),M(Ay,Rse,null),e(ki,kmo),e(ki,Pse),e(Pse,Smo),b(f,RDe,_),b(f,yo,_),M(yy,yo,null),e(yo,Rmo),e(yo,Ly),e(Ly,Pmo),e(Ly,PI),e(PI,Bmo),e(Ly,Imo),e(yo,Nmo),e(yo,xy),e(xy,qmo),e(xy,Bse),e(Bse,jmo),e(xy,Dmo),e(yo,Gmo),e(yo,He),M($y,He,null),e(He,Omo),e(He,Ise),e(Ise,Vmo),e(He,Xmo),e(He,Sa),e(Sa,zmo),e(Sa,Nse),e(Nse,Wmo),e(Sa,Qmo),e(Sa,qse),e(qse,Hmo),e(Sa,Umo),e(Sa,jse),e(jse,Jmo),e(Sa,Ymo),e(He,Kmo),e(He,Y),e(Y,Eh),e(Eh,Dse),e(Dse,Zmo),e(Eh,ego),e(Eh,BI),e(BI,ogo),e(Eh,rgo),e(Y,tgo),e(Y,Ch),e(Ch,Gse),e(Gse,ago),e(Ch,ngo),e(Ch,II),e(II,sgo),e(Ch,lgo),e(Y,igo),e(Y,wh),e(wh,Ose),e(Ose,dgo),e(wh,cgo),e(wh,NI),e(NI,fgo),e(wh,mgo),e(Y,ggo),e(Y,Ah),e(Ah,Vse),e(Vse,hgo),e(Ah,pgo),e(Ah,qI),e(qI,ugo),e(Ah,_go),e(Y,bgo),e(Y,yh),e(yh,Xse),e(Xse,vgo),e(yh,Fgo),e(yh,jI),e(jI,Tgo),e(yh,Mgo),e(Y,Ego),e(Y,Lh),e(Lh,zse),e(zse,Cgo),e(Lh,wgo),e(Lh,DI),e(DI,Ago),e(Lh,ygo),e(Y,Lgo),e(Y,xh),e(xh,Wse),e(Wse,xgo),e(xh,$go),e(xh,GI),e(GI,kgo),e(xh,Sgo),e(Y,Rgo),e(Y,$h),e($h,Qse),e(Qse,Pgo),e($h,Bgo),e($h,OI),e(OI,Igo),e($h,Ngo),e(Y,qgo),e(Y,kh),e(kh,Hse),e(Hse,jgo),e(kh,Dgo),e(kh,VI),e(VI,Ggo),e(kh,Ogo),e(Y,Vgo),e(Y,Sh),e(Sh,Use),e(Use,Xgo),e(Sh,zgo),e(Sh,XI),e(XI,Wgo),e(Sh,Qgo),e(Y,Hgo),e(Y,Rh),e(Rh,Jse),e(Jse,Ugo),e(Rh,Jgo),e(Rh,zI),e(zI,Ygo),e(Rh,Kgo),e(Y,Zgo),e(Y,Ph),e(Ph,Yse),e(Yse,eho),e(Ph,oho),e(Ph,WI),e(WI,rho),e(Ph,tho),e(Y,aho),e(Y,Bh),e(Bh,Kse),e(Kse,nho),e(Bh,sho),e(Bh,QI),e(QI,lho),e(Bh,iho),e(Y,dho),e(Y,Ih),e(Ih,Zse),e(Zse,cho),e(Ih,fho),e(Ih,HI),e(HI,mho),e(Ih,gho),e(Y,hho),e(Y,Nh),e(Nh,ele),e(ele,pho),e(Nh,uho),e(Nh,UI),e(UI,_ho),e(Nh,bho),e(Y,vho),e(Y,qh),e(qh,ole),e(ole,Fho),e(qh,Tho),e(qh,JI),e(JI,Mho),e(qh,Eho),e(Y,Cho),e(Y,jh),e(jh,rle),e(rle,who),e(jh,Aho),e(jh,YI),e(YI,yho),e(jh,Lho),e(Y,xho),e(Y,Dh),e(Dh,tle),e(tle,$ho),e(Dh,kho),e(Dh,KI),e(KI,Sho),e(Dh,Rho),e(Y,Pho),e(Y,Gh),e(Gh,ale),e(ale,Bho),e(Gh,Iho),e(Gh,ZI),e(ZI,Nho),e(Gh,qho),e(Y,jho),e(Y,Oh),e(Oh,nle),e(nle,Dho),e(Oh,Gho),e(Oh,eN),e(eN,Oho),e(Oh,Vho),e(Y,Xho),e(Y,Vh),e(Vh,sle),e(sle,zho),e(Vh,Who),e(Vh,oN),e(oN,Qho),e(Vh,Hho),e(Y,Uho),e(Y,Xh),e(Xh,lle),e(lle,Jho),e(Xh,Yho),e(Xh,rN),e(rN,Kho),e(Xh,Zho),e(Y,epo),e(Y,zh),e(zh,ile),e(ile,opo),e(zh,rpo),e(zh,tN),e(tN,tpo),e(zh,apo),e(Y,npo),e(Y,Wh),e(Wh,dle),e(dle,spo),e(Wh,lpo),e(Wh,aN),e(aN,ipo),e(Wh,dpo),e(Y,cpo),e(Y,Qh),e(Qh,cle),e(cle,fpo),e(Qh,mpo),e(Qh,nN),e(nN,gpo),e(Qh,hpo),e(Y,ppo),e(Y,Hh),e(Hh,fle),e(fle,upo),e(Hh,_po),e(Hh,sN),e(sN,bpo),e(Hh,vpo),e(Y,Fpo),e(Y,Uh),e(Uh,mle),e(mle,Tpo),e(Uh,Mpo),e(Uh,lN),e(lN,Epo),e(Uh,Cpo),e(Y,wpo),e(Y,Jh),e(Jh,gle),e(gle,Apo),e(Jh,ypo),e(Jh,iN),e(iN,Lpo),e(Jh,xpo),e(Y,$po),e(Y,Yh),e(Yh,hle),e(hle,kpo),e(Yh,Spo),e(Yh,dN),e(dN,Rpo),e(Yh,Ppo),e(Y,Bpo),e(Y,Kh),e(Kh,ple),e(ple,Ipo),e(Kh,Npo),e(Kh,cN),e(cN,qpo),e(Kh,jpo),e(Y,Dpo),e(Y,Zh),e(Zh,ule),e(ule,Gpo),e(Zh,Opo),e(Zh,fN),e(fN,Vpo),e(Zh,Xpo),e(Y,zpo),e(Y,ep),e(ep,_le),e(_le,Wpo),e(ep,Qpo),e(ep,mN),e(mN,Hpo),e(ep,Upo),e(He,Jpo),M(op,He,null),e(He,Ypo),M(rp,He,null),e(yo,Kpo),e(yo,tp),M(ky,tp,null),e(tp,Zpo),e(tp,ble),e(ble,euo),b(f,PDe,_),b(f,Si,_),e(Si,ap),e(ap,vle),M(Sy,vle,null),e(Si,ouo),e(Si,Fle),e(Fle,ruo),b(f,BDe,_),b(f,Lo,_),M(Ry,Lo,null),e(Lo,tuo),e(Lo,Py),e(Py,auo),e(Py,gN),e(gN,nuo),e(Py,suo),e(Lo,luo),e(Lo,By),e(By,iuo),e(By,Tle),e(Tle,duo),e(By,cuo),e(Lo,fuo),e(Lo,Ue),M(Iy,Ue,null),e(Ue,muo),e(Ue,Mle),e(Mle,guo),e(Ue,huo),e(Ue,Ri),e(Ri,puo),e(Ri,Ele),e(Ele,uuo),e(Ri,_uo),e(Ri,Cle),e(Cle,buo),e(Ri,vuo),e(Ue,Fuo),e(Ue,he),e(he,np),e(np,wle),e(wle,Tuo),e(np,Muo),e(np,hN),e(hN,Euo),e(np,Cuo),e(he,wuo),e(he,sp),e(sp,Ale),e(Ale,Auo),e(sp,yuo),e(sp,yle),e(yle,Luo),e(sp,xuo),e(he,$uo),e(he,lp),e(lp,Lle),e(Lle,kuo),e(lp,Suo),e(lp,pN),e(pN,Ruo),e(lp,Puo),e(he,Buo),e(he,ip),e(ip,xle),e(xle,Iuo),e(ip,Nuo),e(ip,uN),e(uN,quo),e(ip,juo),e(he,Duo),e(he,dp),e(dp,$le),e($le,Guo),e(dp,Ouo),e(dp,_N),e(_N,Vuo),e(dp,Xuo),e(he,zuo),e(he,cp),e(cp,kle),e(kle,Wuo),e(cp,Quo),e(cp,bN),e(bN,Huo),e(cp,Uuo),e(he,Juo),e(he,fp),e(fp,Sle),e(Sle,Yuo),e(fp,Kuo),e(fp,vN),e(vN,Zuo),e(fp,e_o),e(he,o_o),e(he,mp),e(mp,Rle),e(Rle,r_o),e(mp,t_o),e(mp,FN),e(FN,a_o),e(mp,n_o),e(he,s_o),e(he,gp),e(gp,Ple),e(Ple,l_o),e(gp,i_o),e(gp,TN),e(TN,d_o),e(gp,c_o),e(he,f_o),e(he,hp),e(hp,Ble),e(Ble,m_o),e(hp,g_o),e(hp,MN),e(MN,h_o),e(hp,p_o),e(he,u_o),e(he,pp),e(pp,Ile),e(Ile,__o),e(pp,b_o),e(pp,EN),e(EN,v_o),e(pp,F_o),e(he,T_o),e(he,up),e(up,Nle),e(Nle,M_o),e(up,E_o),e(up,CN),e(CN,C_o),e(up,w_o),e(he,A_o),e(he,_p),e(_p,qle),e(qle,y_o),e(_p,L_o),e(_p,wN),e(wN,x_o),e(_p,$_o),e(he,k_o),e(he,bp),e(bp,jle),e(jle,S_o),e(bp,R_o),e(bp,AN),e(AN,P_o),e(bp,B_o),e(he,I_o),e(he,vp),e(vp,Dle),e(Dle,N_o),e(vp,q_o),e(vp,yN),e(yN,j_o),e(vp,D_o),e(he,G_o),e(he,Fp),e(Fp,Gle),e(Gle,O_o),e(Fp,V_o),e(Fp,LN),e(LN,X_o),e(Fp,z_o),e(he,W_o),e(he,Tp),e(Tp,Ole),e(Ole,Q_o),e(Tp,H_o),e(Tp,xN),e(xN,U_o),e(Tp,J_o),e(Ue,Y_o),M(Mp,Ue,null),e(Ue,K_o),M(Ep,Ue,null),e(Lo,Z_o),e(Lo,Cp),M(Ny,Cp,null),e(Cp,e2o),e(Cp,Vle),e(Vle,o2o),b(f,IDe,_),b(f,Pi,_),e(Pi,wp),e(wp,Xle),M(qy,Xle,null),e(Pi,r2o),e(Pi,zle),e(zle,t2o),b(f,NDe,_),b(f,xo,_),M(jy,xo,null),e(xo,a2o),e(xo,Bi),e(Bi,n2o),e(Bi,$N),e($N,s2o),e(Bi,l2o),e(Bi,kN),e(kN,i2o),e(Bi,d2o),e(xo,c2o),e(xo,Dy),e(Dy,f2o),e(Dy,Wle),e(Wle,m2o),e(Dy,g2o),e(xo,h2o),e(xo,st),M(Gy,st,null),e(st,p2o),e(st,Qle),e(Qle,u2o),e(st,_2o),e(st,Ii),e(Ii,b2o),e(Ii,Hle),e(Hle,v2o),e(Ii,F2o),e(Ii,SN),e(SN,T2o),e(Ii,M2o),e(st,E2o),M(Ap,st,null),e(xo,C2o),e(xo,Je),M(Oy,Je,null),e(Je,w2o),e(Je,Ule),e(Ule,A2o),e(Je,y2o),e(Je,Ra),e(Ra,L2o),e(Ra,Jle),e(Jle,x2o),e(Ra,$2o),e(Ra,Yle),e(Yle,k2o),e(Ra,S2o),e(Ra,Kle),e(Kle,R2o),e(Ra,P2o),e(Je,B2o),e(Je,x),e(x,yp),e(yp,Zle),e(Zle,I2o),e(yp,N2o),e(yp,RN),e(RN,q2o),e(yp,j2o),e(x,D2o),e(x,Lp),e(Lp,eie),e(eie,G2o),e(Lp,O2o),e(Lp,PN),e(PN,V2o),e(Lp,X2o),e(x,z2o),e(x,xp),e(xp,oie),e(oie,W2o),e(xp,Q2o),e(xp,BN),e(BN,H2o),e(xp,U2o),e(x,J2o),e(x,$p),e($p,rie),e(rie,Y2o),e($p,K2o),e($p,IN),e(IN,Z2o),e($p,e1o),e(x,o1o),e(x,kp),e(kp,tie),e(tie,r1o),e(kp,t1o),e(kp,NN),e(NN,a1o),e(kp,n1o),e(x,s1o),e(x,Sp),e(Sp,aie),e(aie,l1o),e(Sp,i1o),e(Sp,qN),e(qN,d1o),e(Sp,c1o),e(x,f1o),e(x,Rp),e(Rp,nie),e(nie,m1o),e(Rp,g1o),e(Rp,jN),e(jN,h1o),e(Rp,p1o),e(x,u1o),e(x,Pp),e(Pp,sie),e(sie,_1o),e(Pp,b1o),e(Pp,DN),e(DN,v1o),e(Pp,F1o),e(x,T1o),e(x,Bp),e(Bp,lie),e(lie,M1o),e(Bp,E1o),e(Bp,GN),e(GN,C1o),e(Bp,w1o),e(x,A1o),e(x,Ip),e(Ip,iie),e(iie,y1o),e(Ip,L1o),e(Ip,ON),e(ON,x1o),e(Ip,$1o),e(x,k1o),e(x,Np),e(Np,die),e(die,S1o),e(Np,R1o),e(Np,VN),e(VN,P1o),e(Np,B1o),e(x,I1o),e(x,qp),e(qp,cie),e(cie,N1o),e(qp,q1o),e(qp,XN),e(XN,j1o),e(qp,D1o),e(x,G1o),e(x,jp),e(jp,fie),e(fie,O1o),e(jp,V1o),e(jp,zN),e(zN,X1o),e(jp,z1o),e(x,W1o),e(x,Dp),e(Dp,mie),e(mie,Q1o),e(Dp,H1o),e(Dp,WN),e(WN,U1o),e(Dp,J1o),e(x,Y1o),e(x,Gp),e(Gp,gie),e(gie,K1o),e(Gp,Z1o),e(Gp,QN),e(QN,e7o),e(Gp,o7o),e(x,r7o),e(x,Op),e(Op,hie),e(hie,t7o),e(Op,a7o),e(Op,HN),e(HN,n7o),e(Op,s7o),e(x,l7o),e(x,Vp),e(Vp,pie),e(pie,i7o),e(Vp,d7o),e(Vp,UN),e(UN,c7o),e(Vp,f7o),e(x,m7o),e(x,Xp),e(Xp,uie),e(uie,g7o),e(Xp,h7o),e(Xp,JN),e(JN,p7o),e(Xp,u7o),e(x,_7o),e(x,zp),e(zp,_ie),e(_ie,b7o),e(zp,v7o),e(zp,YN),e(YN,F7o),e(zp,T7o),e(x,M7o),e(x,Wp),e(Wp,bie),e(bie,E7o),e(Wp,C7o),e(Wp,KN),e(KN,w7o),e(Wp,A7o),e(x,y7o),e(x,Qp),e(Qp,vie),e(vie,L7o),e(Qp,x7o),e(Qp,ZN),e(ZN,$7o),e(Qp,k7o),e(x,S7o),e(x,Hp),e(Hp,Fie),e(Fie,R7o),e(Hp,P7o),e(Hp,eq),e(eq,B7o),e(Hp,I7o),e(x,N7o),e(x,Up),e(Up,Tie),e(Tie,q7o),e(Up,j7o),e(Up,oq),e(oq,D7o),e(Up,G7o),e(x,O7o),e(x,Jp),e(Jp,Mie),e(Mie,V7o),e(Jp,X7o),e(Jp,rq),e(rq,z7o),e(Jp,W7o),e(x,Q7o),e(x,Yp),e(Yp,Eie),e(Eie,H7o),e(Yp,U7o),e(Yp,tq),e(tq,J7o),e(Yp,Y7o),e(x,K7o),e(x,Kp),e(Kp,Cie),e(Cie,Z7o),e(Kp,ebo),e(Kp,aq),e(aq,obo),e(Kp,rbo),e(x,tbo),e(x,Zp),e(Zp,wie),e(wie,abo),e(Zp,nbo),e(Zp,nq),e(nq,sbo),e(Zp,lbo),e(x,ibo),e(x,eu),e(eu,Aie),e(Aie,dbo),e(eu,cbo),e(eu,sq),e(sq,fbo),e(eu,mbo),e(x,gbo),e(x,ou),e(ou,yie),e(yie,hbo),e(ou,pbo),e(ou,lq),e(lq,ubo),e(ou,_bo),e(x,bbo),e(x,ru),e(ru,Lie),e(Lie,vbo),e(ru,Fbo),e(ru,iq),e(iq,Tbo),e(ru,Mbo),e(x,Ebo),e(x,tu),e(tu,xie),e(xie,Cbo),e(tu,wbo),e(tu,dq),e(dq,Abo),e(tu,ybo),e(x,Lbo),e(x,au),e(au,$ie),e($ie,xbo),e(au,$bo),e(au,cq),e(cq,kbo),e(au,Sbo),e(x,Rbo),e(x,nu),e(nu,kie),e(kie,Pbo),e(nu,Bbo),e(nu,fq),e(fq,Ibo),e(nu,Nbo),e(x,qbo),e(x,Ds),e(Ds,Sie),e(Sie,jbo),e(Ds,Dbo),e(Ds,mq),e(mq,Gbo),e(Ds,Obo),e(Ds,gq),e(gq,Vbo),e(Ds,Xbo),e(x,zbo),e(x,su),e(su,Rie),e(Rie,Wbo),e(su,Qbo),e(su,hq),e(hq,Hbo),e(su,Ubo),e(x,Jbo),e(x,lu),e(lu,Pie),e(Pie,Ybo),e(lu,Kbo),e(lu,pq),e(pq,Zbo),e(lu,e4o),e(x,o4o),e(x,iu),e(iu,Bie),e(Bie,r4o),e(iu,t4o),e(iu,uq),e(uq,a4o),e(iu,n4o),e(x,s4o),e(x,du),e(du,Iie),e(Iie,l4o),e(du,i4o),e(du,_q),e(_q,d4o),e(du,c4o),e(x,f4o),e(x,cu),e(cu,Nie),e(Nie,m4o),e(cu,g4o),e(cu,bq),e(bq,h4o),e(cu,p4o),e(x,u4o),e(x,fu),e(fu,qie),e(qie,_4o),e(fu,b4o),e(fu,vq),e(vq,v4o),e(fu,F4o),e(x,T4o),e(x,mu),e(mu,jie),e(jie,M4o),e(mu,E4o),e(mu,Fq),e(Fq,C4o),e(mu,w4o),e(x,A4o),e(x,gu),e(gu,Die),e(Die,y4o),e(gu,L4o),e(gu,Tq),e(Tq,x4o),e(gu,$4o),e(x,k4o),e(x,hu),e(hu,Gie),e(Gie,S4o),e(hu,R4o),e(hu,Mq),e(Mq,P4o),e(hu,B4o),e(x,I4o),e(x,pu),e(pu,Oie),e(Oie,N4o),e(pu,q4o),e(pu,Eq),e(Eq,j4o),e(pu,D4o),e(x,G4o),e(x,uu),e(uu,Vie),e(Vie,O4o),e(uu,V4o),e(uu,Cq),e(Cq,X4o),e(uu,z4o),e(x,W4o),e(x,_u),e(_u,Xie),e(Xie,Q4o),e(_u,H4o),e(_u,wq),e(wq,U4o),e(_u,J4o),e(x,Y4o),e(x,bu),e(bu,zie),e(zie,K4o),e(bu,Z4o),e(bu,Aq),e(Aq,evo),e(bu,ovo),e(x,rvo),e(x,vu),e(vu,Wie),e(Wie,tvo),e(vu,avo),e(vu,yq),e(yq,nvo),e(vu,svo),e(x,lvo),e(x,Fu),e(Fu,Qie),e(Qie,ivo),e(Fu,dvo),e(Fu,Lq),e(Lq,cvo),e(Fu,fvo),e(x,mvo),e(x,Tu),e(Tu,Hie),e(Hie,gvo),e(Tu,hvo),e(Tu,xq),e(xq,pvo),e(Tu,uvo),e(x,_vo),e(x,Mu),e(Mu,Uie),e(Uie,bvo),e(Mu,vvo),e(Mu,$q),e($q,Fvo),e(Mu,Tvo),e(x,Mvo),e(x,Eu),e(Eu,Jie),e(Jie,Evo),e(Eu,Cvo),e(Eu,kq),e(kq,wvo),e(Eu,Avo),e(x,yvo),e(x,Cu),e(Cu,Yie),e(Yie,Lvo),e(Cu,xvo),e(Cu,Sq),e(Sq,$vo),e(Cu,kvo),e(x,Svo),e(x,wu),e(wu,Kie),e(Kie,Rvo),e(wu,Pvo),e(wu,Rq),e(Rq,Bvo),e(wu,Ivo),e(x,Nvo),e(x,Au),e(Au,Zie),e(Zie,qvo),e(Au,jvo),e(Au,Pq),e(Pq,Dvo),e(Au,Gvo),e(x,Ovo),e(x,yu),e(yu,ede),e(ede,Vvo),e(yu,Xvo),e(yu,Bq),e(Bq,zvo),e(yu,Wvo),e(x,Qvo),e(x,Lu),e(Lu,ode),e(ode,Hvo),e(Lu,Uvo),e(Lu,Iq),e(Iq,Jvo),e(Lu,Yvo),e(x,Kvo),e(x,xu),e(xu,rde),e(rde,Zvo),e(xu,eFo),e(xu,Nq),e(Nq,oFo),e(xu,rFo),e(x,tFo),e(x,$u),e($u,tde),e(tde,aFo),e($u,nFo),e($u,qq),e(qq,sFo),e($u,lFo),e(x,iFo),e(x,ku),e(ku,ade),e(ade,dFo),e(ku,cFo),e(ku,jq),e(jq,fFo),e(ku,mFo),e(x,gFo),e(x,Su),e(Su,nde),e(nde,hFo),e(Su,pFo),e(Su,Dq),e(Dq,uFo),e(Su,_Fo),e(x,bFo),e(x,Ru),e(Ru,sde),e(sde,vFo),e(Ru,FFo),e(Ru,Gq),e(Gq,TFo),e(Ru,MFo),e(x,EFo),e(x,Pu),e(Pu,lde),e(lde,CFo),e(Pu,wFo),e(Pu,Oq),e(Oq,AFo),e(Pu,yFo),e(x,LFo),e(x,Bu),e(Bu,ide),e(ide,xFo),e(Bu,$Fo),e(Bu,Vq),e(Vq,kFo),e(Bu,SFo),e(x,RFo),e(x,Iu),e(Iu,dde),e(dde,PFo),e(Iu,BFo),e(Iu,Xq),e(Xq,IFo),e(Iu,NFo),e(x,qFo),e(x,Nu),e(Nu,cde),e(cde,jFo),e(Nu,DFo),e(Nu,zq),e(zq,GFo),e(Nu,OFo),e(x,VFo),e(x,qu),e(qu,fde),e(fde,XFo),e(qu,zFo),e(qu,Wq),e(Wq,WFo),e(qu,QFo),e(x,HFo),e(x,ju),e(ju,mde),e(mde,UFo),e(ju,JFo),e(ju,Qq),e(Qq,YFo),e(ju,KFo),e(x,ZFo),e(x,Du),e(Du,gde),e(gde,eTo),e(Du,oTo),e(Du,Hq),e(Hq,rTo),e(Du,tTo),e(x,aTo),e(x,Gu),e(Gu,hde),e(hde,nTo),e(Gu,sTo),e(Gu,Uq),e(Uq,lTo),e(Gu,iTo),e(x,dTo),e(x,Ou),e(Ou,pde),e(pde,cTo),e(Ou,fTo),e(Ou,Jq),e(Jq,mTo),e(Ou,gTo),e(x,hTo),e(x,Vu),e(Vu,ude),e(ude,pTo),e(Vu,uTo),e(Vu,Yq),e(Yq,_To),e(Vu,bTo),e(x,vTo),e(x,Xu),e(Xu,_de),e(_de,FTo),e(Xu,TTo),e(Xu,Kq),e(Kq,MTo),e(Xu,ETo),e(x,CTo),e(x,zu),e(zu,bde),e(bde,wTo),e(zu,ATo),e(zu,Zq),e(Zq,yTo),e(zu,LTo),e(x,xTo),e(x,Wu),e(Wu,vde),e(vde,$To),e(Wu,kTo),e(Wu,ej),e(ej,STo),e(Wu,RTo),e(x,PTo),e(x,Qu),e(Qu,Fde),e(Fde,BTo),e(Qu,ITo),e(Qu,oj),e(oj,NTo),e(Qu,qTo),e(x,jTo),e(x,Hu),e(Hu,Tde),e(Tde,DTo),e(Hu,GTo),e(Hu,rj),e(rj,OTo),e(Hu,VTo),e(x,XTo),e(x,Uu),e(Uu,Mde),e(Mde,zTo),e(Uu,WTo),e(Uu,tj),e(tj,QTo),e(Uu,HTo),e(x,UTo),e(x,Ju),e(Ju,Ede),e(Ede,JTo),e(Ju,YTo),e(Ju,aj),e(aj,KTo),e(Ju,ZTo),e(x,eMo),e(x,Yu),e(Yu,Cde),e(Cde,oMo),e(Yu,rMo),e(Yu,nj),e(nj,tMo),e(Yu,aMo),e(x,nMo),e(x,Ku),e(Ku,wde),e(wde,sMo),e(Ku,lMo),e(Ku,sj),e(sj,iMo),e(Ku,dMo),e(x,cMo),e(x,Zu),e(Zu,Ade),e(Ade,fMo),e(Zu,mMo),e(Zu,lj),e(lj,gMo),e(Zu,hMo),e(x,pMo),e(x,e_),e(e_,yde),e(yde,uMo),e(e_,_Mo),e(e_,ij),e(ij,bMo),e(e_,vMo),e(x,FMo),e(x,o_),e(o_,Lde),e(Lde,TMo),e(o_,MMo),e(o_,dj),e(dj,EMo),e(o_,CMo),e(x,wMo),e(x,r_),e(r_,xde),e(xde,AMo),e(r_,yMo),e(r_,cj),e(cj,LMo),e(r_,xMo),e(x,$Mo),e(x,t_),e(t_,$de),e($de,kMo),e(t_,SMo),e(t_,fj),e(fj,RMo),e(t_,PMo),e(x,BMo),e(x,a_),e(a_,kde),e(kde,IMo),e(a_,NMo),e(a_,mj),e(mj,qMo),e(a_,jMo),e(x,DMo),e(x,n_),e(n_,Sde),e(Sde,GMo),e(n_,OMo),e(n_,gj),e(gj,VMo),e(n_,XMo),e(x,zMo),e(x,s_),e(s_,Rde),e(Rde,WMo),e(s_,QMo),e(s_,hj),e(hj,HMo),e(s_,UMo),e(x,JMo),e(x,l_),e(l_,Pde),e(Pde,YMo),e(l_,KMo),e(l_,pj),e(pj,ZMo),e(l_,eEo),e(x,oEo),e(x,i_),e(i_,Bde),e(Bde,rEo),e(i_,tEo),e(i_,uj),e(uj,aEo),e(i_,nEo),e(x,sEo),e(x,d_),e(d_,Ide),e(Ide,lEo),e(d_,iEo),e(d_,_j),e(_j,dEo),e(d_,cEo),e(x,fEo),e(x,c_),e(c_,Nde),e(Nde,mEo),e(c_,gEo),e(c_,bj),e(bj,hEo),e(c_,pEo),e(x,uEo),e(x,f_),e(f_,qde),e(qde,_Eo),e(f_,bEo),e(f_,vj),e(vj,vEo),e(f_,FEo),e(x,TEo),e(x,m_),e(m_,jde),e(jde,MEo),e(m_,EEo),e(m_,Fj),e(Fj,CEo),e(m_,wEo),e(x,AEo),e(x,g_),e(g_,Dde),e(Dde,yEo),e(g_,LEo),e(g_,Tj),e(Tj,xEo),e(g_,$Eo),e(x,kEo),e(x,h_),e(h_,Gde),e(Gde,SEo),e(h_,REo),e(h_,Mj),e(Mj,PEo),e(h_,BEo),e(x,IEo),e(x,p_),e(p_,Ode),e(Ode,NEo),e(p_,qEo),e(p_,Ej),e(Ej,jEo),e(p_,DEo),e(x,GEo),e(x,u_),e(u_,Vde),e(Vde,OEo),e(u_,VEo),e(u_,Cj),e(Cj,XEo),e(u_,zEo),e(x,WEo),e(x,__),e(__,Xde),e(Xde,QEo),e(__,HEo),e(__,wj),e(wj,UEo),e(__,JEo),e(x,YEo),e(x,b_),e(b_,zde),e(zde,KEo),e(b_,ZEo),e(b_,Aj),e(Aj,eCo),e(b_,oCo),e(x,rCo),e(x,v_),e(v_,Wde),e(Wde,tCo),e(v_,aCo),e(v_,yj),e(yj,nCo),e(v_,sCo),e(x,lCo),e(x,F_),e(F_,Qde),e(Qde,iCo),e(F_,dCo),e(F_,Lj),e(Lj,cCo),e(F_,fCo),e(x,mCo),e(x,T_),e(T_,Hde),e(Hde,gCo),e(T_,hCo),e(T_,xj),e(xj,pCo),e(T_,uCo),e(x,_Co),e(x,M_),e(M_,Ude),e(Ude,bCo),e(M_,vCo),e(M_,$j),e($j,FCo),e(M_,TCo),e(Je,MCo),e(Je,E_),e(E_,ECo),e(E_,Jde),e(Jde,CCo),e(E_,wCo),e(E_,Yde),e(Yde,ACo),e(Je,yCo),M(C_,Je,null),b(f,qDe,_),b(f,Ni,_),e(Ni,w_),e(w_,Kde),M(Vy,Kde,null),e(Ni,LCo),e(Ni,Zde),e(Zde,xCo),b(f,jDe,_),b(f,$o,_),M(Xy,$o,null),e($o,$Co),e($o,qi),e(qi,kCo),e(qi,kj),e(kj,SCo),e(qi,RCo),e(qi,Sj),e(Sj,PCo),e(qi,BCo),e($o,ICo),e($o,zy),e(zy,NCo),e(zy,ece),e(ece,qCo),e(zy,jCo),e($o,DCo),e($o,lt),M(Wy,lt,null),e(lt,GCo),e(lt,oce),e(oce,OCo),e(lt,VCo),e(lt,ji),e(ji,XCo),e(ji,rce),e(rce,zCo),e(ji,WCo),e(ji,Rj),e(Rj,QCo),e(ji,HCo),e(lt,UCo),M(A_,lt,null),e($o,JCo),e($o,Ye),M(Qy,Ye,null),e(Ye,YCo),e(Ye,tce),e(tce,KCo),e(Ye,ZCo),e(Ye,Pa),e(Pa,e5o),e(Pa,ace),e(ace,o5o),e(Pa,r5o),e(Pa,nce),e(nce,t5o),e(Pa,a5o),e(Pa,sce),e(sce,n5o),e(Pa,s5o),e(Ye,l5o),e(Ye,G),e(G,y_),e(y_,lce),e(lce,i5o),e(y_,d5o),e(y_,Pj),e(Pj,c5o),e(y_,f5o),e(G,m5o),e(G,L_),e(L_,ice),e(ice,g5o),e(L_,h5o),e(L_,Bj),e(Bj,p5o),e(L_,u5o),e(G,_5o),e(G,x_),e(x_,dce),e(dce,b5o),e(x_,v5o),e(x_,Ij),e(Ij,F5o),e(x_,T5o),e(G,M5o),e(G,$_),e($_,cce),e(cce,E5o),e($_,C5o),e($_,Nj),e(Nj,w5o),e($_,A5o),e(G,y5o),e(G,k_),e(k_,fce),e(fce,L5o),e(k_,x5o),e(k_,qj),e(qj,$5o),e(k_,k5o),e(G,S5o),e(G,S_),e(S_,mce),e(mce,R5o),e(S_,P5o),e(S_,jj),e(jj,B5o),e(S_,I5o),e(G,N5o),e(G,R_),e(R_,gce),e(gce,q5o),e(R_,j5o),e(R_,Dj),e(Dj,D5o),e(R_,G5o),e(G,O5o),e(G,P_),e(P_,hce),e(hce,V5o),e(P_,X5o),e(P_,Gj),e(Gj,z5o),e(P_,W5o),e(G,Q5o),e(G,B_),e(B_,pce),e(pce,H5o),e(B_,U5o),e(B_,Oj),e(Oj,J5o),e(B_,Y5o),e(G,K5o),e(G,I_),e(I_,uce),e(uce,Z5o),e(I_,e3o),e(I_,Vj),e(Vj,o3o),e(I_,r3o),e(G,t3o),e(G,N_),e(N_,_ce),e(_ce,a3o),e(N_,n3o),e(N_,Xj),e(Xj,s3o),e(N_,l3o),e(G,i3o),e(G,q_),e(q_,bce),e(bce,d3o),e(q_,c3o),e(q_,zj),e(zj,f3o),e(q_,m3o),e(G,g3o),e(G,j_),e(j_,vce),e(vce,h3o),e(j_,p3o),e(j_,Wj),e(Wj,u3o),e(j_,_3o),e(G,b3o),e(G,D_),e(D_,Fce),e(Fce,v3o),e(D_,F3o),e(D_,Qj),e(Qj,T3o),e(D_,M3o),e(G,E3o),e(G,G_),e(G_,Tce),e(Tce,C3o),e(G_,w3o),e(G_,Hj),e(Hj,A3o),e(G_,y3o),e(G,L3o),e(G,O_),e(O_,Mce),e(Mce,x3o),e(O_,$3o),e(O_,Uj),e(Uj,k3o),e(O_,S3o),e(G,R3o),e(G,V_),e(V_,Ece),e(Ece,P3o),e(V_,B3o),e(V_,Jj),e(Jj,I3o),e(V_,N3o),e(G,q3o),e(G,X_),e(X_,Cce),e(Cce,j3o),e(X_,D3o),e(X_,Yj),e(Yj,G3o),e(X_,O3o),e(G,V3o),e(G,z_),e(z_,wce),e(wce,X3o),e(z_,z3o),e(z_,Kj),e(Kj,W3o),e(z_,Q3o),e(G,H3o),e(G,W_),e(W_,Ace),e(Ace,U3o),e(W_,J3o),e(W_,Zj),e(Zj,Y3o),e(W_,K3o),e(G,Z3o),e(G,Q_),e(Q_,yce),e(yce,e0o),e(Q_,o0o),e(Q_,eD),e(eD,r0o),e(Q_,t0o),e(G,a0o),e(G,H_),e(H_,Lce),e(Lce,n0o),e(H_,s0o),e(H_,oD),e(oD,l0o),e(H_,i0o),e(G,d0o),e(G,U_),e(U_,xce),e(xce,c0o),e(U_,f0o),e(U_,rD),e(rD,m0o),e(U_,g0o),e(G,h0o),e(G,J_),e(J_,$ce),e($ce,p0o),e(J_,u0o),e(J_,tD),e(tD,_0o),e(J_,b0o),e(G,v0o),e(G,Y_),e(Y_,kce),e(kce,F0o),e(Y_,T0o),e(Y_,aD),e(aD,M0o),e(Y_,E0o),e(G,C0o),e(G,K_),e(K_,Sce),e(Sce,w0o),e(K_,A0o),e(K_,nD),e(nD,y0o),e(K_,L0o),e(G,x0o),e(G,Z_),e(Z_,Rce),e(Rce,$0o),e(Z_,k0o),e(Z_,sD),e(sD,S0o),e(Z_,R0o),e(G,P0o),e(G,e2),e(e2,Pce),e(Pce,B0o),e(e2,I0o),e(e2,lD),e(lD,N0o),e(e2,q0o),e(G,j0o),e(G,o2),e(o2,Bce),e(Bce,D0o),e(o2,G0o),e(o2,iD),e(iD,O0o),e(o2,V0o),e(G,X0o),e(G,r2),e(r2,Ice),e(Ice,z0o),e(r2,W0o),e(r2,dD),e(dD,Q0o),e(r2,H0o),e(G,U0o),e(G,t2),e(t2,Nce),e(Nce,J0o),e(t2,Y0o),e(t2,cD),e(cD,K0o),e(t2,Z0o),e(G,ewo),e(G,a2),e(a2,qce),e(qce,owo),e(a2,rwo),e(a2,fD),e(fD,two),e(a2,awo),e(G,nwo),e(G,n2),e(n2,jce),e(jce,swo),e(n2,lwo),e(n2,mD),e(mD,iwo),e(n2,dwo),e(G,cwo),e(G,s2),e(s2,Dce),e(Dce,fwo),e(s2,mwo),e(s2,gD),e(gD,gwo),e(s2,hwo),e(G,pwo),e(G,l2),e(l2,Gce),e(Gce,uwo),e(l2,_wo),e(l2,hD),e(hD,bwo),e(l2,vwo),e(G,Fwo),e(G,i2),e(i2,Oce),e(Oce,Two),e(i2,Mwo),e(i2,pD),e(pD,Ewo),e(i2,Cwo),e(G,wwo),e(G,d2),e(d2,Vce),e(Vce,Awo),e(d2,ywo),e(d2,uD),e(uD,Lwo),e(d2,xwo),e(G,$wo),e(G,c2),e(c2,Xce),e(Xce,kwo),e(c2,Swo),e(c2,_D),e(_D,Rwo),e(c2,Pwo),e(G,Bwo),e(G,f2),e(f2,zce),e(zce,Iwo),e(f2,Nwo),e(f2,bD),e(bD,qwo),e(f2,jwo),e(G,Dwo),e(G,m2),e(m2,Wce),e(Wce,Gwo),e(m2,Owo),e(m2,vD),e(vD,Vwo),e(m2,Xwo),e(G,zwo),e(G,g2),e(g2,Qce),e(Qce,Wwo),e(g2,Qwo),e(g2,FD),e(FD,Hwo),e(g2,Uwo),e(G,Jwo),e(G,h2),e(h2,Hce),e(Hce,Ywo),e(h2,Kwo),e(h2,TD),e(TD,Zwo),e(h2,eAo),e(G,oAo),e(G,p2),e(p2,Uce),e(Uce,rAo),e(p2,tAo),e(p2,MD),e(MD,aAo),e(p2,nAo),e(Ye,sAo),e(Ye,u2),e(u2,lAo),e(u2,Jce),e(Jce,iAo),e(u2,dAo),e(u2,Yce),e(Yce,cAo),e(Ye,fAo),M(_2,Ye,null),b(f,DDe,_),b(f,Di,_),e(Di,b2),e(b2,Kce),M(Hy,Kce,null),e(Di,mAo),e(Di,Zce),e(Zce,gAo),b(f,GDe,_),b(f,ko,_),M(Uy,ko,null),e(ko,hAo),e(ko,Gi),e(Gi,pAo),e(Gi,ED),e(ED,uAo),e(Gi,_Ao),e(Gi,CD),e(CD,bAo),e(Gi,vAo),e(ko,FAo),e(ko,Jy),e(Jy,TAo),e(Jy,efe),e(efe,MAo),e(Jy,EAo),e(ko,CAo),e(ko,it),M(Yy,it,null),e(it,wAo),e(it,ofe),e(ofe,AAo),e(it,yAo),e(it,Oi),e(Oi,LAo),e(Oi,rfe),e(rfe,xAo),e(Oi,$Ao),e(Oi,wD),e(wD,kAo),e(Oi,SAo),e(it,RAo),M(v2,it,null),e(ko,PAo),e(ko,Ke),M(Ky,Ke,null),e(Ke,BAo),e(Ke,tfe),e(tfe,IAo),e(Ke,NAo),e(Ke,Ba),e(Ba,qAo),e(Ba,afe),e(afe,jAo),e(Ba,DAo),e(Ba,nfe),e(nfe,GAo),e(Ba,OAo),e(Ba,sfe),e(sfe,VAo),e(Ba,XAo),e(Ke,zAo),e(Ke,z),e(z,F2),e(F2,lfe),e(lfe,WAo),e(F2,QAo),e(F2,AD),e(AD,HAo),e(F2,UAo),e(z,JAo),e(z,T2),e(T2,ife),e(ife,YAo),e(T2,KAo),e(T2,yD),e(yD,ZAo),e(T2,e6o),e(z,o6o),e(z,M2),e(M2,dfe),e(dfe,r6o),e(M2,t6o),e(M2,LD),e(LD,a6o),e(M2,n6o),e(z,s6o),e(z,E2),e(E2,cfe),e(cfe,l6o),e(E2,i6o),e(E2,xD),e(xD,d6o),e(E2,c6o),e(z,f6o),e(z,C2),e(C2,ffe),e(ffe,m6o),e(C2,g6o),e(C2,$D),e($D,h6o),e(C2,p6o),e(z,u6o),e(z,w2),e(w2,mfe),e(mfe,_6o),e(w2,b6o),e(w2,kD),e(kD,v6o),e(w2,F6o),e(z,T6o),e(z,A2),e(A2,gfe),e(gfe,M6o),e(A2,E6o),e(A2,SD),e(SD,C6o),e(A2,w6o),e(z,A6o),e(z,y2),e(y2,hfe),e(hfe,y6o),e(y2,L6o),e(y2,RD),e(RD,x6o),e(y2,$6o),e(z,k6o),e(z,L2),e(L2,pfe),e(pfe,S6o),e(L2,R6o),e(L2,PD),e(PD,P6o),e(L2,B6o),e(z,I6o),e(z,x2),e(x2,ufe),e(ufe,N6o),e(x2,q6o),e(x2,BD),e(BD,j6o),e(x2,D6o),e(z,G6o),e(z,$2),e($2,_fe),e(_fe,O6o),e($2,V6o),e($2,ID),e(ID,X6o),e($2,z6o),e(z,W6o),e(z,k2),e(k2,bfe),e(bfe,Q6o),e(k2,H6o),e(k2,ND),e(ND,U6o),e(k2,J6o),e(z,Y6o),e(z,S2),e(S2,vfe),e(vfe,K6o),e(S2,Z6o),e(S2,qD),e(qD,eyo),e(S2,oyo),e(z,ryo),e(z,R2),e(R2,Ffe),e(Ffe,tyo),e(R2,ayo),e(R2,jD),e(jD,nyo),e(R2,syo),e(z,lyo),e(z,P2),e(P2,Tfe),e(Tfe,iyo),e(P2,dyo),e(P2,DD),e(DD,cyo),e(P2,fyo),e(z,myo),e(z,B2),e(B2,Mfe),e(Mfe,gyo),e(B2,hyo),e(B2,GD),e(GD,pyo),e(B2,uyo),e(z,_yo),e(z,I2),e(I2,Efe),e(Efe,byo),e(I2,vyo),e(I2,OD),e(OD,Fyo),e(I2,Tyo),e(z,Myo),e(z,N2),e(N2,Cfe),e(Cfe,Eyo),e(N2,Cyo),e(N2,VD),e(VD,wyo),e(N2,Ayo),e(z,yyo),e(z,q2),e(q2,wfe),e(wfe,Lyo),e(q2,xyo),e(q2,XD),e(XD,$yo),e(q2,kyo),e(z,Syo),e(z,j2),e(j2,Afe),e(Afe,Ryo),e(j2,Pyo),e(j2,zD),e(zD,Byo),e(j2,Iyo),e(z,Nyo),e(z,D2),e(D2,yfe),e(yfe,qyo),e(D2,jyo),e(D2,WD),e(WD,Dyo),e(D2,Gyo),e(z,Oyo),e(z,G2),e(G2,Lfe),e(Lfe,Vyo),e(G2,Xyo),e(G2,QD),e(QD,zyo),e(G2,Wyo),e(z,Qyo),e(z,O2),e(O2,xfe),e(xfe,Hyo),e(O2,Uyo),e(O2,HD),e(HD,Jyo),e(O2,Yyo),e(z,Kyo),e(z,V2),e(V2,$fe),e($fe,Zyo),e(V2,eLo),e(V2,UD),e(UD,oLo),e(V2,rLo),e(z,tLo),e(z,X2),e(X2,kfe),e(kfe,aLo),e(X2,nLo),e(X2,JD),e(JD,sLo),e(X2,lLo),e(z,iLo),e(z,z2),e(z2,Sfe),e(Sfe,dLo),e(z2,cLo),e(z2,YD),e(YD,fLo),e(z2,mLo),e(z,gLo),e(z,W2),e(W2,Rfe),e(Rfe,hLo),e(W2,pLo),e(W2,KD),e(KD,uLo),e(W2,_Lo),e(z,bLo),e(z,Q2),e(Q2,Pfe),e(Pfe,vLo),e(Q2,FLo),e(Q2,ZD),e(ZD,TLo),e(Q2,MLo),e(z,ELo),e(z,H2),e(H2,Bfe),e(Bfe,CLo),e(H2,wLo),e(H2,eG),e(eG,ALo),e(H2,yLo),e(z,LLo),e(z,U2),e(U2,Ife),e(Ife,xLo),e(U2,$Lo),e(U2,oG),e(oG,kLo),e(U2,SLo),e(z,RLo),e(z,J2),e(J2,Nfe),e(Nfe,PLo),e(J2,BLo),e(J2,rG),e(rG,ILo),e(J2,NLo),e(z,qLo),e(z,Y2),e(Y2,qfe),e(qfe,jLo),e(Y2,DLo),e(Y2,tG),e(tG,GLo),e(Y2,OLo),e(z,VLo),e(z,K2),e(K2,jfe),e(jfe,XLo),e(K2,zLo),e(K2,aG),e(aG,WLo),e(K2,QLo),e(z,HLo),e(z,Z2),e(Z2,Dfe),e(Dfe,ULo),e(Z2,JLo),e(Z2,nG),e(nG,YLo),e(Z2,KLo),e(z,ZLo),e(z,e1),e(e1,Gfe),e(Gfe,e8o),e(e1,o8o),e(e1,sG),e(sG,r8o),e(e1,t8o),e(z,a8o),e(z,o1),e(o1,Ofe),e(Ofe,n8o),e(o1,s8o),e(o1,lG),e(lG,l8o),e(o1,i8o),e(z,d8o),e(z,r1),e(r1,Vfe),e(Vfe,c8o),e(r1,f8o),e(r1,iG),e(iG,m8o),e(r1,g8o),e(z,h8o),e(z,t1),e(t1,Xfe),e(Xfe,p8o),e(t1,u8o),e(t1,dG),e(dG,_8o),e(t1,b8o),e(Ke,v8o),e(Ke,a1),e(a1,F8o),e(a1,zfe),e(zfe,T8o),e(a1,M8o),e(a1,Wfe),e(Wfe,E8o),e(Ke,C8o),M(n1,Ke,null),b(f,ODe,_),b(f,Vi,_),e(Vi,s1),e(s1,Qfe),M(Zy,Qfe,null),e(Vi,w8o),e(Vi,Hfe),e(Hfe,A8o),b(f,VDe,_),b(f,So,_),M(eL,So,null),e(So,y8o),e(So,Xi),e(Xi,L8o),e(Xi,cG),e(cG,x8o),e(Xi,$8o),e(Xi,fG),e(fG,k8o),e(Xi,S8o),e(So,R8o),e(So,oL),e(oL,P8o),e(oL,Ufe),e(Ufe,B8o),e(oL,I8o),e(So,N8o),e(So,dt),M(rL,dt,null),e(dt,q8o),e(dt,Jfe),e(Jfe,j8o),e(dt,D8o),e(dt,zi),e(zi,G8o),e(zi,Yfe),e(Yfe,O8o),e(zi,V8o),e(zi,mG),e(mG,X8o),e(zi,z8o),e(dt,W8o),M(l1,dt,null),e(So,Q8o),e(So,Ze),M(tL,Ze,null),e(Ze,H8o),e(Ze,Kfe),e(Kfe,U8o),e(Ze,J8o),e(Ze,Ia),e(Ia,Y8o),e(Ia,Zfe),e(Zfe,K8o),e(Ia,Z8o),e(Ia,eme),e(eme,e9o),e(Ia,o9o),e(Ia,ome),e(ome,r9o),e(Ia,t9o),e(Ze,a9o),e(Ze,Q),e(Q,i1),e(i1,rme),e(rme,n9o),e(i1,s9o),e(i1,gG),e(gG,l9o),e(i1,i9o),e(Q,d9o),e(Q,d1),e(d1,tme),e(tme,c9o),e(d1,f9o),e(d1,hG),e(hG,m9o),e(d1,g9o),e(Q,h9o),e(Q,c1),e(c1,ame),e(ame,p9o),e(c1,u9o),e(c1,pG),e(pG,_9o),e(c1,b9o),e(Q,v9o),e(Q,f1),e(f1,nme),e(nme,F9o),e(f1,T9o),e(f1,uG),e(uG,M9o),e(f1,E9o),e(Q,C9o),e(Q,m1),e(m1,sme),e(sme,w9o),e(m1,A9o),e(m1,_G),e(_G,y9o),e(m1,L9o),e(Q,x9o),e(Q,g1),e(g1,lme),e(lme,$9o),e(g1,k9o),e(g1,bG),e(bG,S9o),e(g1,R9o),e(Q,P9o),e(Q,h1),e(h1,ime),e(ime,B9o),e(h1,I9o),e(h1,vG),e(vG,N9o),e(h1,q9o),e(Q,j9o),e(Q,p1),e(p1,dme),e(dme,D9o),e(p1,G9o),e(p1,FG),e(FG,O9o),e(p1,V9o),e(Q,X9o),e(Q,u1),e(u1,cme),e(cme,z9o),e(u1,W9o),e(u1,TG),e(TG,Q9o),e(u1,H9o),e(Q,U9o),e(Q,_1),e(_1,fme),e(fme,J9o),e(_1,Y9o),e(_1,MG),e(MG,K9o),e(_1,Z9o),e(Q,exo),e(Q,b1),e(b1,mme),e(mme,oxo),e(b1,rxo),e(b1,EG),e(EG,txo),e(b1,axo),e(Q,nxo),e(Q,v1),e(v1,gme),e(gme,sxo),e(v1,lxo),e(v1,CG),e(CG,ixo),e(v1,dxo),e(Q,cxo),e(Q,F1),e(F1,hme),e(hme,fxo),e(F1,mxo),e(F1,wG),e(wG,gxo),e(F1,hxo),e(Q,pxo),e(Q,T1),e(T1,pme),e(pme,uxo),e(T1,_xo),e(T1,AG),e(AG,bxo),e(T1,vxo),e(Q,Fxo),e(Q,M1),e(M1,ume),e(ume,Txo),e(M1,Mxo),e(M1,yG),e(yG,Exo),e(M1,Cxo),e(Q,wxo),e(Q,E1),e(E1,_me),e(_me,Axo),e(E1,yxo),e(E1,LG),e(LG,Lxo),e(E1,xxo),e(Q,$xo),e(Q,C1),e(C1,bme),e(bme,kxo),e(C1,Sxo),e(C1,xG),e(xG,Rxo),e(C1,Pxo),e(Q,Bxo),e(Q,w1),e(w1,vme),e(vme,Ixo),e(w1,Nxo),e(w1,$G),e($G,qxo),e(w1,jxo),e(Q,Dxo),e(Q,A1),e(A1,Fme),e(Fme,Gxo),e(A1,Oxo),e(A1,kG),e(kG,Vxo),e(A1,Xxo),e(Q,zxo),e(Q,y1),e(y1,Tme),e(Tme,Wxo),e(y1,Qxo),e(y1,SG),e(SG,Hxo),e(y1,Uxo),e(Q,Jxo),e(Q,L1),e(L1,Mme),e(Mme,Yxo),e(L1,Kxo),e(L1,RG),e(RG,Zxo),e(L1,e$o),e(Q,o$o),e(Q,x1),e(x1,Eme),e(Eme,r$o),e(x1,t$o),e(x1,PG),e(PG,a$o),e(x1,n$o),e(Q,s$o),e(Q,$1),e($1,Cme),e(Cme,l$o),e($1,i$o),e($1,BG),e(BG,d$o),e($1,c$o),e(Q,f$o),e(Q,k1),e(k1,wme),e(wme,m$o),e(k1,g$o),e(k1,IG),e(IG,h$o),e(k1,p$o),e(Q,u$o),e(Q,S1),e(S1,Ame),e(Ame,_$o),e(S1,b$o),e(S1,NG),e(NG,v$o),e(S1,F$o),e(Q,T$o),e(Q,R1),e(R1,yme),e(yme,M$o),e(R1,E$o),e(R1,qG),e(qG,C$o),e(R1,w$o),e(Q,A$o),e(Q,P1),e(P1,Lme),e(Lme,y$o),e(P1,L$o),e(P1,jG),e(jG,x$o),e(P1,$$o),e(Q,k$o),e(Q,B1),e(B1,xme),e(xme,S$o),e(B1,R$o),e(B1,DG),e(DG,P$o),e(B1,B$o),e(Q,I$o),e(Q,I1),e(I1,$me),e($me,N$o),e(I1,q$o),e(I1,GG),e(GG,j$o),e(I1,D$o),e(Q,G$o),e(Q,N1),e(N1,kme),e(kme,O$o),e(N1,V$o),e(N1,OG),e(OG,X$o),e(N1,z$o),e(Q,W$o),e(Q,q1),e(q1,Sme),e(Sme,Q$o),e(q1,H$o),e(q1,VG),e(VG,U$o),e(q1,J$o),e(Q,Y$o),e(Q,j1),e(j1,Rme),e(Rme,K$o),e(j1,Z$o),e(j1,Pme),e(Pme,eko),e(j1,oko),e(Q,rko),e(Q,D1),e(D1,Bme),e(Bme,tko),e(D1,ako),e(D1,XG),e(XG,nko),e(D1,sko),e(Q,lko),e(Q,G1),e(G1,Ime),e(Ime,iko),e(G1,dko),e(G1,zG),e(zG,cko),e(G1,fko),e(Q,mko),e(Q,O1),e(O1,Nme),e(Nme,gko),e(O1,hko),e(O1,WG),e(WG,pko),e(O1,uko),e(Q,_ko),e(Q,V1),e(V1,qme),e(qme,bko),e(V1,vko),e(V1,QG),e(QG,Fko),e(V1,Tko),e(Ze,Mko),e(Ze,X1),e(X1,Eko),e(X1,jme),e(jme,Cko),e(X1,wko),e(X1,Dme),e(Dme,Ako),e(Ze,yko),M(z1,Ze,null),b(f,XDe,_),b(f,Wi,_),e(Wi,W1),e(W1,Gme),M(aL,Gme,null),e(Wi,Lko),e(Wi,Ome),e(Ome,xko),b(f,zDe,_),b(f,Ro,_),M(nL,Ro,null),e(Ro,$ko),e(Ro,Qi),e(Qi,kko),e(Qi,HG),e(HG,Sko),e(Qi,Rko),e(Qi,UG),e(UG,Pko),e(Qi,Bko),e(Ro,Iko),e(Ro,sL),e(sL,Nko),e(sL,Vme),e(Vme,qko),e(sL,jko),e(Ro,Dko),e(Ro,ct),M(lL,ct,null),e(ct,Gko),e(ct,Xme),e(Xme,Oko),e(ct,Vko),e(ct,Hi),e(Hi,Xko),e(Hi,zme),e(zme,zko),e(Hi,Wko),e(Hi,JG),e(JG,Qko),e(Hi,Hko),e(ct,Uko),M(Q1,ct,null),e(Ro,Jko),e(Ro,eo),M(iL,eo,null),e(eo,Yko),e(eo,Wme),e(Wme,Kko),e(eo,Zko),e(eo,Na),e(Na,eSo),e(Na,Qme),e(Qme,oSo),e(Na,rSo),e(Na,Hme),e(Hme,tSo),e(Na,aSo),e(Na,Ume),e(Ume,nSo),e(Na,sSo),e(eo,lSo),e(eo,ue),e(ue,H1),e(H1,Jme),e(Jme,iSo),e(H1,dSo),e(H1,YG),e(YG,cSo),e(H1,fSo),e(ue,mSo),e(ue,U1),e(U1,Yme),e(Yme,gSo),e(U1,hSo),e(U1,KG),e(KG,pSo),e(U1,uSo),e(ue,_So),e(ue,J1),e(J1,Kme),e(Kme,bSo),e(J1,vSo),e(J1,ZG),e(ZG,FSo),e(J1,TSo),e(ue,MSo),e(ue,Y1),e(Y1,Zme),e(Zme,ESo),e(Y1,CSo),e(Y1,eO),e(eO,wSo),e(Y1,ASo),e(ue,ySo),e(ue,K1),e(K1,ege),e(ege,LSo),e(K1,xSo),e(K1,oO),e(oO,$So),e(K1,kSo),e(ue,SSo),e(ue,Z1),e(Z1,oge),e(oge,RSo),e(Z1,PSo),e(Z1,rO),e(rO,BSo),e(Z1,ISo),e(ue,NSo),e(ue,e7),e(e7,rge),e(rge,qSo),e(e7,jSo),e(e7,tO),e(tO,DSo),e(e7,GSo),e(ue,OSo),e(ue,o7),e(o7,tge),e(tge,VSo),e(o7,XSo),e(o7,aO),e(aO,zSo),e(o7,WSo),e(ue,QSo),e(ue,r7),e(r7,age),e(age,HSo),e(r7,USo),e(r7,nO),e(nO,JSo),e(r7,YSo),e(ue,KSo),e(ue,t7),e(t7,nge),e(nge,ZSo),e(t7,eRo),e(t7,sO),e(sO,oRo),e(t7,rRo),e(ue,tRo),e(ue,a7),e(a7,sge),e(sge,aRo),e(a7,nRo),e(a7,lO),e(lO,sRo),e(a7,lRo),e(ue,iRo),e(ue,n7),e(n7,lge),e(lge,dRo),e(n7,cRo),e(n7,iO),e(iO,fRo),e(n7,mRo),e(ue,gRo),e(ue,s7),e(s7,ige),e(ige,hRo),e(s7,pRo),e(s7,dO),e(dO,uRo),e(s7,_Ro),e(ue,bRo),e(ue,l7),e(l7,dge),e(dge,vRo),e(l7,FRo),e(l7,cO),e(cO,TRo),e(l7,MRo),e(ue,ERo),e(ue,i7),e(i7,cge),e(cge,CRo),e(i7,wRo),e(i7,fO),e(fO,ARo),e(i7,yRo),e(ue,LRo),e(ue,d7),e(d7,fge),e(fge,xRo),e(d7,$Ro),e(d7,mO),e(mO,kRo),e(d7,SRo),e(eo,RRo),e(eo,c7),e(c7,PRo),e(c7,mge),e(mge,BRo),e(c7,IRo),e(c7,gge),e(gge,NRo),e(eo,qRo),M(f7,eo,null),b(f,WDe,_),b(f,Ui,_),e(Ui,m7),e(m7,hge),M(dL,hge,null),e(Ui,jRo),e(Ui,pge),e(pge,DRo),b(f,QDe,_),b(f,Po,_),M(cL,Po,null),e(Po,GRo),e(Po,Ji),e(Ji,ORo),e(Ji,gO),e(gO,VRo),e(Ji,XRo),e(Ji,hO),e(hO,zRo),e(Ji,WRo),e(Po,QRo),e(Po,fL),e(fL,HRo),e(fL,uge),e(uge,URo),e(fL,JRo),e(Po,YRo),e(Po,ft),M(mL,ft,null),e(ft,KRo),e(ft,_ge),e(_ge,ZRo),e(ft,ePo),e(ft,Yi),e(Yi,oPo),e(Yi,bge),e(bge,rPo),e(Yi,tPo),e(Yi,pO),e(pO,aPo),e(Yi,nPo),e(ft,sPo),M(g7,ft,null),e(Po,lPo),e(Po,oo),M(gL,oo,null),e(oo,iPo),e(oo,vge),e(vge,dPo),e(oo,cPo),e(oo,qa),e(qa,fPo),e(qa,Fge),e(Fge,mPo),e(qa,gPo),e(qa,Tge),e(Tge,hPo),e(qa,pPo),e(qa,Mge),e(Mge,uPo),e(qa,_Po),e(oo,bPo),e(oo,q),e(q,h7),e(h7,Ege),e(Ege,vPo),e(h7,FPo),e(h7,uO),e(uO,TPo),e(h7,MPo),e(q,EPo),e(q,p7),e(p7,Cge),e(Cge,CPo),e(p7,wPo),e(p7,_O),e(_O,APo),e(p7,yPo),e(q,LPo),e(q,u7),e(u7,wge),e(wge,xPo),e(u7,$Po),e(u7,bO),e(bO,kPo),e(u7,SPo),e(q,RPo),e(q,_7),e(_7,Age),e(Age,PPo),e(_7,BPo),e(_7,vO),e(vO,IPo),e(_7,NPo),e(q,qPo),e(q,b7),e(b7,yge),e(yge,jPo),e(b7,DPo),e(b7,FO),e(FO,GPo),e(b7,OPo),e(q,VPo),e(q,v7),e(v7,Lge),e(Lge,XPo),e(v7,zPo),e(v7,TO),e(TO,WPo),e(v7,QPo),e(q,HPo),e(q,F7),e(F7,xge),e(xge,UPo),e(F7,JPo),e(F7,MO),e(MO,YPo),e(F7,KPo),e(q,ZPo),e(q,T7),e(T7,$ge),e($ge,eBo),e(T7,oBo),e(T7,EO),e(EO,rBo),e(T7,tBo),e(q,aBo),e(q,M7),e(M7,kge),e(kge,nBo),e(M7,sBo),e(M7,CO),e(CO,lBo),e(M7,iBo),e(q,dBo),e(q,E7),e(E7,Sge),e(Sge,cBo),e(E7,fBo),e(E7,wO),e(wO,mBo),e(E7,gBo),e(q,hBo),e(q,C7),e(C7,Rge),e(Rge,pBo),e(C7,uBo),e(C7,AO),e(AO,_Bo),e(C7,bBo),e(q,vBo),e(q,w7),e(w7,Pge),e(Pge,FBo),e(w7,TBo),e(w7,yO),e(yO,MBo),e(w7,EBo),e(q,CBo),e(q,A7),e(A7,Bge),e(Bge,wBo),e(A7,ABo),e(A7,LO),e(LO,yBo),e(A7,LBo),e(q,xBo),e(q,y7),e(y7,Ige),e(Ige,$Bo),e(y7,kBo),e(y7,xO),e(xO,SBo),e(y7,RBo),e(q,PBo),e(q,L7),e(L7,Nge),e(Nge,BBo),e(L7,IBo),e(L7,$O),e($O,NBo),e(L7,qBo),e(q,jBo),e(q,x7),e(x7,qge),e(qge,DBo),e(x7,GBo),e(x7,kO),e(kO,OBo),e(x7,VBo),e(q,XBo),e(q,$7),e($7,jge),e(jge,zBo),e($7,WBo),e($7,SO),e(SO,QBo),e($7,HBo),e(q,UBo),e(q,k7),e(k7,Dge),e(Dge,JBo),e(k7,YBo),e(k7,RO),e(RO,KBo),e(k7,ZBo),e(q,eIo),e(q,S7),e(S7,Gge),e(Gge,oIo),e(S7,rIo),e(S7,PO),e(PO,tIo),e(S7,aIo),e(q,nIo),e(q,R7),e(R7,Oge),e(Oge,sIo),e(R7,lIo),e(R7,BO),e(BO,iIo),e(R7,dIo),e(q,cIo),e(q,P7),e(P7,Vge),e(Vge,fIo),e(P7,mIo),e(P7,IO),e(IO,gIo),e(P7,hIo),e(q,pIo),e(q,B7),e(B7,Xge),e(Xge,uIo),e(B7,_Io),e(B7,NO),e(NO,bIo),e(B7,vIo),e(q,FIo),e(q,I7),e(I7,zge),e(zge,TIo),e(I7,MIo),e(I7,qO),e(qO,EIo),e(I7,CIo),e(q,wIo),e(q,N7),e(N7,Wge),e(Wge,AIo),e(N7,yIo),e(N7,jO),e(jO,LIo),e(N7,xIo),e(q,$Io),e(q,q7),e(q7,Qge),e(Qge,kIo),e(q7,SIo),e(q7,DO),e(DO,RIo),e(q7,PIo),e(q,BIo),e(q,j7),e(j7,Hge),e(Hge,IIo),e(j7,NIo),e(j7,GO),e(GO,qIo),e(j7,jIo),e(q,DIo),e(q,D7),e(D7,Uge),e(Uge,GIo),e(D7,OIo),e(D7,OO),e(OO,VIo),e(D7,XIo),e(q,zIo),e(q,G7),e(G7,Jge),e(Jge,WIo),e(G7,QIo),e(G7,VO),e(VO,HIo),e(G7,UIo),e(q,JIo),e(q,O7),e(O7,Yge),e(Yge,YIo),e(O7,KIo),e(O7,XO),e(XO,ZIo),e(O7,eNo),e(q,oNo),e(q,V7),e(V7,Kge),e(Kge,rNo),e(V7,tNo),e(V7,zO),e(zO,aNo),e(V7,nNo),e(q,sNo),e(q,X7),e(X7,Zge),e(Zge,lNo),e(X7,iNo),e(X7,WO),e(WO,dNo),e(X7,cNo),e(q,fNo),e(q,z7),e(z7,ehe),e(ehe,mNo),e(z7,gNo),e(z7,QO),e(QO,hNo),e(z7,pNo),e(q,uNo),e(q,W7),e(W7,ohe),e(ohe,_No),e(W7,bNo),e(W7,HO),e(HO,vNo),e(W7,FNo),e(q,TNo),e(q,Q7),e(Q7,rhe),e(rhe,MNo),e(Q7,ENo),e(Q7,UO),e(UO,CNo),e(Q7,wNo),e(q,ANo),e(q,H7),e(H7,the),e(the,yNo),e(H7,LNo),e(H7,JO),e(JO,xNo),e(H7,$No),e(q,kNo),e(q,U7),e(U7,ahe),e(ahe,SNo),e(U7,RNo),e(U7,YO),e(YO,PNo),e(U7,BNo),e(q,INo),e(q,J7),e(J7,nhe),e(nhe,NNo),e(J7,qNo),e(J7,KO),e(KO,jNo),e(J7,DNo),e(q,GNo),e(q,Y7),e(Y7,she),e(she,ONo),e(Y7,VNo),e(Y7,ZO),e(ZO,XNo),e(Y7,zNo),e(q,WNo),e(q,K7),e(K7,lhe),e(lhe,QNo),e(K7,HNo),e(K7,eV),e(eV,UNo),e(K7,JNo),e(q,YNo),e(q,Z7),e(Z7,ihe),e(ihe,KNo),e(Z7,ZNo),e(Z7,oV),e(oV,eqo),e(Z7,oqo),e(q,rqo),e(q,eb),e(eb,dhe),e(dhe,tqo),e(eb,aqo),e(eb,rV),e(rV,nqo),e(eb,sqo),e(q,lqo),e(q,ob),e(ob,che),e(che,iqo),e(ob,dqo),e(ob,tV),e(tV,cqo),e(ob,fqo),e(q,mqo),e(q,rb),e(rb,fhe),e(fhe,gqo),e(rb,hqo),e(rb,aV),e(aV,pqo),e(rb,uqo),e(q,_qo),e(q,tb),e(tb,mhe),e(mhe,bqo),e(tb,vqo),e(tb,nV),e(nV,Fqo),e(tb,Tqo),e(q,Mqo),e(q,ab),e(ab,ghe),e(ghe,Eqo),e(ab,Cqo),e(ab,sV),e(sV,wqo),e(ab,Aqo),e(q,yqo),e(q,nb),e(nb,hhe),e(hhe,Lqo),e(nb,xqo),e(nb,lV),e(lV,$qo),e(nb,kqo),e(q,Sqo),e(q,sb),e(sb,phe),e(phe,Rqo),e(sb,Pqo),e(sb,iV),e(iV,Bqo),e(sb,Iqo),e(oo,Nqo),e(oo,lb),e(lb,qqo),e(lb,uhe),e(uhe,jqo),e(lb,Dqo),e(lb,_he),e(_he,Gqo),e(oo,Oqo),M(ib,oo,null),b(f,HDe,_),b(f,Ki,_),e(Ki,db),e(db,bhe),M(hL,bhe,null),e(Ki,Vqo),e(Ki,vhe),e(vhe,Xqo),b(f,UDe,_),b(f,Bo,_),M(pL,Bo,null),e(Bo,zqo),e(Bo,Zi),e(Zi,Wqo),e(Zi,dV),e(dV,Qqo),e(Zi,Hqo),e(Zi,cV),e(cV,Uqo),e(Zi,Jqo),e(Bo,Yqo),e(Bo,uL),e(uL,Kqo),e(uL,Fhe),e(Fhe,Zqo),e(uL,ejo),e(Bo,ojo),e(Bo,mt),M(_L,mt,null),e(mt,rjo),e(mt,The),e(The,tjo),e(mt,ajo),e(mt,ed),e(ed,njo),e(ed,Mhe),e(Mhe,sjo),e(ed,ljo),e(ed,fV),e(fV,ijo),e(ed,djo),e(mt,cjo),M(cb,mt,null),e(Bo,fjo),e(Bo,ro),M(bL,ro,null),e(ro,mjo),e(ro,Ehe),e(Ehe,gjo),e(ro,hjo),e(ro,ja),e(ja,pjo),e(ja,Che),e(Che,ujo),e(ja,_jo),e(ja,whe),e(whe,bjo),e(ja,vjo),e(ja,Ahe),e(Ahe,Fjo),e(ja,Tjo),e(ro,Mjo),e(ro,Z),e(Z,fb),e(fb,yhe),e(yhe,Ejo),e(fb,Cjo),e(fb,mV),e(mV,wjo),e(fb,Ajo),e(Z,yjo),e(Z,mb),e(mb,Lhe),e(Lhe,Ljo),e(mb,xjo),e(mb,gV),e(gV,$jo),e(mb,kjo),e(Z,Sjo),e(Z,gb),e(gb,xhe),e(xhe,Rjo),e(gb,Pjo),e(gb,hV),e(hV,Bjo),e(gb,Ijo),e(Z,Njo),e(Z,hb),e(hb,$he),e($he,qjo),e(hb,jjo),e(hb,pV),e(pV,Djo),e(hb,Gjo),e(Z,Ojo),e(Z,pb),e(pb,khe),e(khe,Vjo),e(pb,Xjo),e(pb,uV),e(uV,zjo),e(pb,Wjo),e(Z,Qjo),e(Z,ub),e(ub,She),e(She,Hjo),e(ub,Ujo),e(ub,_V),e(_V,Jjo),e(ub,Yjo),e(Z,Kjo),e(Z,_b),e(_b,Rhe),e(Rhe,Zjo),e(_b,eDo),e(_b,bV),e(bV,oDo),e(_b,rDo),e(Z,tDo),e(Z,bb),e(bb,Phe),e(Phe,aDo),e(bb,nDo),e(bb,vV),e(vV,sDo),e(bb,lDo),e(Z,iDo),e(Z,vb),e(vb,Bhe),e(Bhe,dDo),e(vb,cDo),e(vb,FV),e(FV,fDo),e(vb,mDo),e(Z,gDo),e(Z,Fb),e(Fb,Ihe),e(Ihe,hDo),e(Fb,pDo),e(Fb,TV),e(TV,uDo),e(Fb,_Do),e(Z,bDo),e(Z,Tb),e(Tb,Nhe),e(Nhe,vDo),e(Tb,FDo),e(Tb,MV),e(MV,TDo),e(Tb,MDo),e(Z,EDo),e(Z,Mb),e(Mb,qhe),e(qhe,CDo),e(Mb,wDo),e(Mb,EV),e(EV,ADo),e(Mb,yDo),e(Z,LDo),e(Z,Eb),e(Eb,jhe),e(jhe,xDo),e(Eb,$Do),e(Eb,CV),e(CV,kDo),e(Eb,SDo),e(Z,RDo),e(Z,Cb),e(Cb,Dhe),e(Dhe,PDo),e(Cb,BDo),e(Cb,wV),e(wV,IDo),e(Cb,NDo),e(Z,qDo),e(Z,wb),e(wb,Ghe),e(Ghe,jDo),e(wb,DDo),e(wb,AV),e(AV,GDo),e(wb,ODo),e(Z,VDo),e(Z,Ab),e(Ab,Ohe),e(Ohe,XDo),e(Ab,zDo),e(Ab,yV),e(yV,WDo),e(Ab,QDo),e(Z,HDo),e(Z,yb),e(yb,Vhe),e(Vhe,UDo),e(yb,JDo),e(yb,LV),e(LV,YDo),e(yb,KDo),e(Z,ZDo),e(Z,Lb),e(Lb,Xhe),e(Xhe,eGo),e(Lb,oGo),e(Lb,xV),e(xV,rGo),e(Lb,tGo),e(Z,aGo),e(Z,xb),e(xb,zhe),e(zhe,nGo),e(xb,sGo),e(xb,$V),e($V,lGo),e(xb,iGo),e(Z,dGo),e(Z,$b),e($b,Whe),e(Whe,cGo),e($b,fGo),e($b,kV),e(kV,mGo),e($b,gGo),e(Z,hGo),e(Z,kb),e(kb,Qhe),e(Qhe,pGo),e(kb,uGo),e(kb,SV),e(SV,_Go),e(kb,bGo),e(Z,vGo),e(Z,Sb),e(Sb,Hhe),e(Hhe,FGo),e(Sb,TGo),e(Sb,RV),e(RV,MGo),e(Sb,EGo),e(Z,CGo),e(Z,Rb),e(Rb,Uhe),e(Uhe,wGo),e(Rb,AGo),e(Rb,PV),e(PV,yGo),e(Rb,LGo),e(Z,xGo),e(Z,Pb),e(Pb,Jhe),e(Jhe,$Go),e(Pb,kGo),e(Pb,BV),e(BV,SGo),e(Pb,RGo),e(Z,PGo),e(Z,Bb),e(Bb,Yhe),e(Yhe,BGo),e(Bb,IGo),e(Bb,IV),e(IV,NGo),e(Bb,qGo),e(Z,jGo),e(Z,Ib),e(Ib,Khe),e(Khe,DGo),e(Ib,GGo),e(Ib,NV),e(NV,OGo),e(Ib,VGo),e(Z,XGo),e(Z,Nb),e(Nb,Zhe),e(Zhe,zGo),e(Nb,WGo),e(Nb,qV),e(qV,QGo),e(Nb,HGo),e(Z,UGo),e(Z,qb),e(qb,epe),e(epe,JGo),e(qb,YGo),e(qb,jV),e(jV,KGo),e(qb,ZGo),e(Z,eOo),e(Z,jb),e(jb,ope),e(ope,oOo),e(jb,rOo),e(jb,DV),e(DV,tOo),e(jb,aOo),e(ro,nOo),e(ro,Db),e(Db,sOo),e(Db,rpe),e(rpe,lOo),e(Db,iOo),e(Db,tpe),e(tpe,dOo),e(ro,cOo),M(Gb,ro,null),b(f,JDe,_),b(f,od,_),e(od,Ob),e(Ob,ape),M(vL,ape,null),e(od,fOo),e(od,npe),e(npe,mOo),b(f,YDe,_),b(f,Io,_),M(FL,Io,null),e(Io,gOo),e(Io,rd),e(rd,hOo),e(rd,GV),e(GV,pOo),e(rd,uOo),e(rd,OV),e(OV,_Oo),e(rd,bOo),e(Io,vOo),e(Io,TL),e(TL,FOo),e(TL,spe),e(spe,TOo),e(TL,MOo),e(Io,EOo),e(Io,gt),M(ML,gt,null),e(gt,COo),e(gt,lpe),e(lpe,wOo),e(gt,AOo),e(gt,td),e(td,yOo),e(td,ipe),e(ipe,LOo),e(td,xOo),e(td,VV),e(VV,$Oo),e(td,kOo),e(gt,SOo),M(Vb,gt,null),e(Io,ROo),e(Io,to),M(EL,to,null),e(to,POo),e(to,dpe),e(dpe,BOo),e(to,IOo),e(to,Da),e(Da,NOo),e(Da,cpe),e(cpe,qOo),e(Da,jOo),e(Da,fpe),e(fpe,DOo),e(Da,GOo),e(Da,mpe),e(mpe,OOo),e(Da,VOo),e(to,XOo),e(to,Zr),e(Zr,Xb),e(Xb,gpe),e(gpe,zOo),e(Xb,WOo),e(Xb,XV),e(XV,QOo),e(Xb,HOo),e(Zr,UOo),e(Zr,zb),e(zb,hpe),e(hpe,JOo),e(zb,YOo),e(zb,zV),e(zV,KOo),e(zb,ZOo),e(Zr,eVo),e(Zr,Wb),e(Wb,ppe),e(ppe,oVo),e(Wb,rVo),e(Wb,WV),e(WV,tVo),e(Wb,aVo),e(Zr,nVo),e(Zr,Qb),e(Qb,upe),e(upe,sVo),e(Qb,lVo),e(Qb,QV),e(QV,iVo),e(Qb,dVo),e(Zr,cVo),e(Zr,Hb),e(Hb,_pe),e(_pe,fVo),e(Hb,mVo),e(Hb,HV),e(HV,gVo),e(Hb,hVo),e(to,pVo),e(to,Ub),e(Ub,uVo),e(Ub,bpe),e(bpe,_Vo),e(Ub,bVo),e(Ub,vpe),e(vpe,vVo),e(to,FVo),M(Jb,to,null),b(f,KDe,_),b(f,ad,_),e(ad,Yb),e(Yb,Fpe),M(CL,Fpe,null),e(ad,TVo),e(ad,Tpe),e(Tpe,MVo),b(f,ZDe,_),b(f,No,_),M(wL,No,null),e(No,EVo),e(No,nd),e(nd,CVo),e(nd,UV),e(UV,wVo),e(nd,AVo),e(nd,JV),e(JV,yVo),e(nd,LVo),e(No,xVo),e(No,AL),e(AL,$Vo),e(AL,Mpe),e(Mpe,kVo),e(AL,SVo),e(No,RVo),e(No,ht),M(yL,ht,null),e(ht,PVo),e(ht,Epe),e(Epe,BVo),e(ht,IVo),e(ht,sd),e(sd,NVo),e(sd,Cpe),e(Cpe,qVo),e(sd,jVo),e(sd,YV),e(YV,DVo),e(sd,GVo),e(ht,OVo),M(Kb,ht,null),e(No,VVo),e(No,ao),M(LL,ao,null),e(ao,XVo),e(ao,wpe),e(wpe,zVo),e(ao,WVo),e(ao,Ga),e(Ga,QVo),e(Ga,Ape),e(Ape,HVo),e(Ga,UVo),e(Ga,ype),e(ype,JVo),e(Ga,YVo),e(Ga,Lpe),e(Lpe,KVo),e(Ga,ZVo),e(ao,eXo),e(ao,U),e(U,Zb),e(Zb,xpe),e(xpe,oXo),e(Zb,rXo),e(Zb,KV),e(KV,tXo),e(Zb,aXo),e(U,nXo),e(U,e4),e(e4,$pe),e($pe,sXo),e(e4,lXo),e(e4,ZV),e(ZV,iXo),e(e4,dXo),e(U,cXo),e(U,o4),e(o4,kpe),e(kpe,fXo),e(o4,mXo),e(o4,eX),e(eX,gXo),e(o4,hXo),e(U,pXo),e(U,r4),e(r4,Spe),e(Spe,uXo),e(r4,_Xo),e(r4,oX),e(oX,bXo),e(r4,vXo),e(U,FXo),e(U,t4),e(t4,Rpe),e(Rpe,TXo),e(t4,MXo),e(t4,rX),e(rX,EXo),e(t4,CXo),e(U,wXo),e(U,a4),e(a4,Ppe),e(Ppe,AXo),e(a4,yXo),e(a4,tX),e(tX,LXo),e(a4,xXo),e(U,$Xo),e(U,n4),e(n4,Bpe),e(Bpe,kXo),e(n4,SXo),e(n4,aX),e(aX,RXo),e(n4,PXo),e(U,BXo),e(U,s4),e(s4,Ipe),e(Ipe,IXo),e(s4,NXo),e(s4,nX),e(nX,qXo),e(s4,jXo),e(U,DXo),e(U,l4),e(l4,Npe),e(Npe,GXo),e(l4,OXo),e(l4,sX),e(sX,VXo),e(l4,XXo),e(U,zXo),e(U,i4),e(i4,qpe),e(qpe,WXo),e(i4,QXo),e(i4,lX),e(lX,HXo),e(i4,UXo),e(U,JXo),e(U,d4),e(d4,jpe),e(jpe,YXo),e(d4,KXo),e(d4,iX),e(iX,ZXo),e(d4,ezo),e(U,ozo),e(U,c4),e(c4,Dpe),e(Dpe,rzo),e(c4,tzo),e(c4,dX),e(dX,azo),e(c4,nzo),e(U,szo),e(U,f4),e(f4,Gpe),e(Gpe,lzo),e(f4,izo),e(f4,cX),e(cX,dzo),e(f4,czo),e(U,fzo),e(U,m4),e(m4,Ope),e(Ope,mzo),e(m4,gzo),e(m4,fX),e(fX,hzo),e(m4,pzo),e(U,uzo),e(U,g4),e(g4,Vpe),e(Vpe,_zo),e(g4,bzo),e(g4,mX),e(mX,vzo),e(g4,Fzo),e(U,Tzo),e(U,h4),e(h4,Xpe),e(Xpe,Mzo),e(h4,Ezo),e(h4,gX),e(gX,Czo),e(h4,wzo),e(U,Azo),e(U,p4),e(p4,zpe),e(zpe,yzo),e(p4,Lzo),e(p4,hX),e(hX,xzo),e(p4,$zo),e(U,kzo),e(U,u4),e(u4,Wpe),e(Wpe,Szo),e(u4,Rzo),e(u4,pX),e(pX,Pzo),e(u4,Bzo),e(U,Izo),e(U,_4),e(_4,Qpe),e(Qpe,Nzo),e(_4,qzo),e(_4,uX),e(uX,jzo),e(_4,Dzo),e(U,Gzo),e(U,b4),e(b4,Hpe),e(Hpe,Ozo),e(b4,Vzo),e(b4,_X),e(_X,Xzo),e(b4,zzo),e(U,Wzo),e(U,v4),e(v4,Upe),e(Upe,Qzo),e(v4,Hzo),e(v4,bX),e(bX,Uzo),e(v4,Jzo),e(U,Yzo),e(U,F4),e(F4,Jpe),e(Jpe,Kzo),e(F4,Zzo),e(F4,vX),e(vX,eWo),e(F4,oWo),e(U,rWo),e(U,T4),e(T4,Ype),e(Ype,tWo),e(T4,aWo),e(T4,FX),e(FX,nWo),e(T4,sWo),e(U,lWo),e(U,M4),e(M4,Kpe),e(Kpe,iWo),e(M4,dWo),e(M4,TX),e(TX,cWo),e(M4,fWo),e(U,mWo),e(U,E4),e(E4,Zpe),e(Zpe,gWo),e(E4,hWo),e(E4,MX),e(MX,pWo),e(E4,uWo),e(U,_Wo),e(U,C4),e(C4,eue),e(eue,bWo),e(C4,vWo),e(C4,EX),e(EX,FWo),e(C4,TWo),e(U,MWo),e(U,w4),e(w4,oue),e(oue,EWo),e(w4,CWo),e(w4,CX),e(CX,wWo),e(w4,AWo),e(U,yWo),e(U,A4),e(A4,rue),e(rue,LWo),e(A4,xWo),e(A4,wX),e(wX,$Wo),e(A4,kWo),e(U,SWo),e(U,y4),e(y4,tue),e(tue,RWo),e(y4,PWo),e(y4,AX),e(AX,BWo),e(y4,IWo),e(U,NWo),e(U,L4),e(L4,aue),e(aue,qWo),e(L4,jWo),e(L4,yX),e(yX,DWo),e(L4,GWo),e(U,OWo),e(U,x4),e(x4,nue),e(nue,VWo),e(x4,XWo),e(x4,LX),e(LX,zWo),e(x4,WWo),e(U,QWo),e(U,$4),e($4,sue),e(sue,HWo),e($4,UWo),e($4,xX),e(xX,JWo),e($4,YWo),e(U,KWo),e(U,k4),e(k4,lue),e(lue,ZWo),e(k4,eQo),e(k4,$X),e($X,oQo),e(k4,rQo),e(U,tQo),e(U,S4),e(S4,iue),e(iue,aQo),e(S4,nQo),e(S4,kX),e(kX,sQo),e(S4,lQo),e(ao,iQo),e(ao,R4),e(R4,dQo),e(R4,due),e(due,cQo),e(R4,fQo),e(R4,cue),e(cue,mQo),e(ao,gQo),M(P4,ao,null),b(f,eGe,_),b(f,ld,_),e(ld,B4),e(B4,fue),M(xL,fue,null),e(ld,hQo),e(ld,mue),e(mue,pQo),b(f,oGe,_),b(f,qo,_),M($L,qo,null),e(qo,uQo),e(qo,id),e(id,_Qo),e(id,SX),e(SX,bQo),e(id,vQo),e(id,RX),e(RX,FQo),e(id,TQo),e(qo,MQo),e(qo,kL),e(kL,EQo),e(kL,gue),e(gue,CQo),e(kL,wQo),e(qo,AQo),e(qo,pt),M(SL,pt,null),e(pt,yQo),e(pt,hue),e(hue,LQo),e(pt,xQo),e(pt,dd),e(dd,$Qo),e(dd,pue),e(pue,kQo),e(dd,SQo),e(dd,PX),e(PX,RQo),e(dd,PQo),e(pt,BQo),M(I4,pt,null),e(qo,IQo),e(qo,no),M(RL,no,null),e(no,NQo),e(no,uue),e(uue,qQo),e(no,jQo),e(no,Oa),e(Oa,DQo),e(Oa,_ue),e(_ue,GQo),e(Oa,OQo),e(Oa,bue),e(bue,VQo),e(Oa,XQo),e(Oa,vue),e(vue,zQo),e(Oa,WQo),e(no,QQo),e(no,V),e(V,N4),e(N4,Fue),e(Fue,HQo),e(N4,UQo),e(N4,BX),e(BX,JQo),e(N4,YQo),e(V,KQo),e(V,q4),e(q4,Tue),e(Tue,ZQo),e(q4,eHo),e(q4,IX),e(IX,oHo),e(q4,rHo),e(V,tHo),e(V,j4),e(j4,Mue),e(Mue,aHo),e(j4,nHo),e(j4,NX),e(NX,sHo),e(j4,lHo),e(V,iHo),e(V,D4),e(D4,Eue),e(Eue,dHo),e(D4,cHo),e(D4,qX),e(qX,fHo),e(D4,mHo),e(V,gHo),e(V,G4),e(G4,Cue),e(Cue,hHo),e(G4,pHo),e(G4,jX),e(jX,uHo),e(G4,_Ho),e(V,bHo),e(V,O4),e(O4,wue),e(wue,vHo),e(O4,FHo),e(O4,DX),e(DX,THo),e(O4,MHo),e(V,EHo),e(V,V4),e(V4,Aue),e(Aue,CHo),e(V4,wHo),e(V4,GX),e(GX,AHo),e(V4,yHo),e(V,LHo),e(V,X4),e(X4,yue),e(yue,xHo),e(X4,$Ho),e(X4,OX),e(OX,kHo),e(X4,SHo),e(V,RHo),e(V,z4),e(z4,Lue),e(Lue,PHo),e(z4,BHo),e(z4,VX),e(VX,IHo),e(z4,NHo),e(V,qHo),e(V,W4),e(W4,xue),e(xue,jHo),e(W4,DHo),e(W4,XX),e(XX,GHo),e(W4,OHo),e(V,VHo),e(V,Q4),e(Q4,$ue),e($ue,XHo),e(Q4,zHo),e(Q4,zX),e(zX,WHo),e(Q4,QHo),e(V,HHo),e(V,H4),e(H4,kue),e(kue,UHo),e(H4,JHo),e(H4,WX),e(WX,YHo),e(H4,KHo),e(V,ZHo),e(V,U4),e(U4,Sue),e(Sue,eUo),e(U4,oUo),e(U4,QX),e(QX,rUo),e(U4,tUo),e(V,aUo),e(V,J4),e(J4,Rue),e(Rue,nUo),e(J4,sUo),e(J4,HX),e(HX,lUo),e(J4,iUo),e(V,dUo),e(V,Y4),e(Y4,Pue),e(Pue,cUo),e(Y4,fUo),e(Y4,UX),e(UX,mUo),e(Y4,gUo),e(V,hUo),e(V,K4),e(K4,Bue),e(Bue,pUo),e(K4,uUo),e(K4,JX),e(JX,_Uo),e(K4,bUo),e(V,vUo),e(V,Z4),e(Z4,Iue),e(Iue,FUo),e(Z4,TUo),e(Z4,YX),e(YX,MUo),e(Z4,EUo),e(V,CUo),e(V,ev),e(ev,Nue),e(Nue,wUo),e(ev,AUo),e(ev,KX),e(KX,yUo),e(ev,LUo),e(V,xUo),e(V,ov),e(ov,que),e(que,$Uo),e(ov,kUo),e(ov,ZX),e(ZX,SUo),e(ov,RUo),e(V,PUo),e(V,rv),e(rv,jue),e(jue,BUo),e(rv,IUo),e(rv,ez),e(ez,NUo),e(rv,qUo),e(V,jUo),e(V,tv),e(tv,Due),e(Due,DUo),e(tv,GUo),e(tv,oz),e(oz,OUo),e(tv,VUo),e(V,XUo),e(V,av),e(av,Gue),e(Gue,zUo),e(av,WUo),e(av,rz),e(rz,QUo),e(av,HUo),e(V,UUo),e(V,nv),e(nv,Oue),e(Oue,JUo),e(nv,YUo),e(nv,tz),e(tz,KUo),e(nv,ZUo),e(V,eJo),e(V,sv),e(sv,Vue),e(Vue,oJo),e(sv,rJo),e(sv,az),e(az,tJo),e(sv,aJo),e(V,nJo),e(V,lv),e(lv,Xue),e(Xue,sJo),e(lv,lJo),e(lv,nz),e(nz,iJo),e(lv,dJo),e(V,cJo),e(V,iv),e(iv,zue),e(zue,fJo),e(iv,mJo),e(iv,sz),e(sz,gJo),e(iv,hJo),e(V,pJo),e(V,dv),e(dv,Wue),e(Wue,uJo),e(dv,_Jo),e(dv,lz),e(lz,bJo),e(dv,vJo),e(V,FJo),e(V,cv),e(cv,Que),e(Que,TJo),e(cv,MJo),e(cv,iz),e(iz,EJo),e(cv,CJo),e(V,wJo),e(V,fv),e(fv,Hue),e(Hue,AJo),e(fv,yJo),e(fv,dz),e(dz,LJo),e(fv,xJo),e(V,$Jo),e(V,mv),e(mv,Uue),e(Uue,kJo),e(mv,SJo),e(mv,cz),e(cz,RJo),e(mv,PJo),e(V,BJo),e(V,gv),e(gv,Jue),e(Jue,IJo),e(gv,NJo),e(gv,fz),e(fz,qJo),e(gv,jJo),e(V,DJo),e(V,hv),e(hv,Yue),e(Yue,GJo),e(hv,OJo),e(hv,mz),e(mz,VJo),e(hv,XJo),e(V,zJo),e(V,pv),e(pv,Kue),e(Kue,WJo),e(pv,QJo),e(pv,gz),e(gz,HJo),e(pv,UJo),e(V,JJo),e(V,uv),e(uv,Zue),e(Zue,YJo),e(uv,KJo),e(uv,hz),e(hz,ZJo),e(uv,eYo),e(V,oYo),e(V,_v),e(_v,e_e),e(e_e,rYo),e(_v,tYo),e(_v,pz),e(pz,aYo),e(_v,nYo),e(V,sYo),e(V,bv),e(bv,o_e),e(o_e,lYo),e(bv,iYo),e(bv,uz),e(uz,dYo),e(bv,cYo),e(V,fYo),e(V,vv),e(vv,r_e),e(r_e,mYo),e(vv,gYo),e(vv,_z),e(_z,hYo),e(vv,pYo),e(V,uYo),e(V,Fv),e(Fv,t_e),e(t_e,_Yo),e(Fv,bYo),e(Fv,bz),e(bz,vYo),e(Fv,FYo),e(V,TYo),e(V,Tv),e(Tv,a_e),e(a_e,MYo),e(Tv,EYo),e(Tv,vz),e(vz,CYo),e(Tv,wYo),e(V,AYo),e(V,Mv),e(Mv,n_e),e(n_e,yYo),e(Mv,LYo),e(Mv,Fz),e(Fz,xYo),e(Mv,$Yo),e(no,kYo),e(no,Ev),e(Ev,SYo),e(Ev,s_e),e(s_e,RYo),e(Ev,PYo),e(Ev,l_e),e(l_e,BYo),e(no,IYo),M(Cv,no,null),b(f,rGe,_),b(f,cd,_),e(cd,wv),e(wv,i_e),M(PL,i_e,null),e(cd,NYo),e(cd,d_e),e(d_e,qYo),b(f,tGe,_),b(f,jo,_),M(BL,jo,null),e(jo,jYo),e(jo,fd),e(fd,DYo),e(fd,Tz),e(Tz,GYo),e(fd,OYo),e(fd,Mz),e(Mz,VYo),e(fd,XYo),e(jo,zYo),e(jo,IL),e(IL,WYo),e(IL,c_e),e(c_e,QYo),e(IL,HYo),e(jo,UYo),e(jo,ut),M(NL,ut,null),e(ut,JYo),e(ut,f_e),e(f_e,YYo),e(ut,KYo),e(ut,md),e(md,ZYo),e(md,m_e),e(m_e,eKo),e(md,oKo),e(md,Ez),e(Ez,rKo),e(md,tKo),e(ut,aKo),M(Av,ut,null),e(jo,nKo),e(jo,so),M(qL,so,null),e(so,sKo),e(so,g_e),e(g_e,lKo),e(so,iKo),e(so,Va),e(Va,dKo),e(Va,h_e),e(h_e,cKo),e(Va,fKo),e(Va,p_e),e(p_e,mKo),e(Va,gKo),e(Va,u_e),e(u_e,hKo),e(Va,pKo),e(so,uKo),e(so,__e),e(__e,yv),e(yv,b_e),e(b_e,_Ko),e(yv,bKo),e(yv,Cz),e(Cz,vKo),e(yv,FKo),e(so,TKo),e(so,Lv),e(Lv,MKo),e(Lv,v_e),e(v_e,EKo),e(Lv,CKo),e(Lv,F_e),e(F_e,wKo),e(so,AKo),M(xv,so,null),b(f,aGe,_),b(f,gd,_),e(gd,$v),e($v,T_e),M(jL,T_e,null),e(gd,yKo),e(gd,M_e),e(M_e,LKo),b(f,nGe,_),b(f,Do,_),M(DL,Do,null),e(Do,xKo),e(Do,hd),e(hd,$Ko),e(hd,wz),e(wz,kKo),e(hd,SKo),e(hd,Az),e(Az,RKo),e(hd,PKo),e(Do,BKo),e(Do,GL),e(GL,IKo),e(GL,E_e),e(E_e,NKo),e(GL,qKo),e(Do,jKo),e(Do,_t),M(OL,_t,null),e(_t,DKo),e(_t,C_e),e(C_e,GKo),e(_t,OKo),e(_t,pd),e(pd,VKo),e(pd,w_e),e(w_e,XKo),e(pd,zKo),e(pd,yz),e(yz,WKo),e(pd,QKo),e(_t,HKo),M(kv,_t,null),e(Do,UKo),e(Do,lo),M(VL,lo,null),e(lo,JKo),e(lo,A_e),e(A_e,YKo),e(lo,KKo),e(lo,Xa),e(Xa,ZKo),e(Xa,y_e),e(y_e,eZo),e(Xa,oZo),e(Xa,L_e),e(L_e,rZo),e(Xa,tZo),e(Xa,x_e),e(x_e,aZo),e(Xa,nZo),e(lo,sZo),e(lo,ve),e(ve,Sv),e(Sv,$_e),e($_e,lZo),e(Sv,iZo),e(Sv,Lz),e(Lz,dZo),e(Sv,cZo),e(ve,fZo),e(ve,Rv),e(Rv,k_e),e(k_e,mZo),e(Rv,gZo),e(Rv,xz),e(xz,hZo),e(Rv,pZo),e(ve,uZo),e(ve,Pv),e(Pv,S_e),e(S_e,_Zo),e(Pv,bZo),e(Pv,$z),e($z,vZo),e(Pv,FZo),e(ve,TZo),e(ve,Bv),e(Bv,R_e),e(R_e,MZo),e(Bv,EZo),e(Bv,kz),e(kz,CZo),e(Bv,wZo),e(ve,AZo),e(ve,Gs),e(Gs,P_e),e(P_e,yZo),e(Gs,LZo),e(Gs,Sz),e(Sz,xZo),e(Gs,$Zo),e(Gs,Rz),e(Rz,kZo),e(Gs,SZo),e(ve,RZo),e(ve,Iv),e(Iv,B_e),e(B_e,PZo),e(Iv,BZo),e(Iv,Pz),e(Pz,IZo),e(Iv,NZo),e(ve,qZo),e(ve,Os),e(Os,I_e),e(I_e,jZo),e(Os,DZo),e(Os,Bz),e(Bz,GZo),e(Os,OZo),e(Os,Iz),e(Iz,VZo),e(Os,XZo),e(ve,zZo),e(ve,bt),e(bt,N_e),e(N_e,WZo),e(bt,QZo),e(bt,Nz),e(Nz,HZo),e(bt,UZo),e(bt,qz),e(qz,JZo),e(bt,YZo),e(bt,jz),e(jz,KZo),e(bt,ZZo),e(ve,eer),e(ve,Nv),e(Nv,q_e),e(q_e,oer),e(Nv,rer),e(Nv,Dz),e(Dz,ter),e(Nv,aer),e(ve,ner),e(ve,qv),e(qv,j_e),e(j_e,ser),e(qv,ler),e(qv,Gz),e(Gz,ier),e(qv,der),e(ve,cer),e(ve,jv),e(jv,D_e),e(D_e,fer),e(jv,mer),e(jv,Oz),e(Oz,ger),e(jv,her),e(ve,per),e(ve,Dv),e(Dv,G_e),e(G_e,uer),e(Dv,_er),e(Dv,Vz),e(Vz,ber),e(Dv,ver),e(ve,Fer),e(ve,Gv),e(Gv,O_e),e(O_e,Ter),e(Gv,Mer),e(Gv,Xz),e(Xz,Eer),e(Gv,Cer),e(ve,wer),e(ve,Ov),e(Ov,V_e),e(V_e,Aer),e(Ov,yer),e(Ov,zz),e(zz,Ler),e(Ov,xer),e(ve,$er),e(ve,Vv),e(Vv,X_e),e(X_e,ker),e(Vv,Ser),e(Vv,Wz),e(Wz,Rer),e(Vv,Per),e(lo,Ber),e(lo,Xv),e(Xv,Ier),e(Xv,z_e),e(z_e,Ner),e(Xv,qer),e(Xv,W_e),e(W_e,jer),e(lo,Der),M(zv,lo,null),b(f,sGe,_),b(f,ud,_),e(ud,Wv),e(Wv,Q_e),M(XL,Q_e,null),e(ud,Ger),e(ud,H_e),e(H_e,Oer),b(f,lGe,_),b(f,Go,_),M(zL,Go,null),e(Go,Ver),e(Go,_d),e(_d,Xer),e(_d,Qz),e(Qz,zer),e(_d,Wer),e(_d,Hz),e(Hz,Qer),e(_d,Her),e(Go,Uer),e(Go,WL),e(WL,Jer),e(WL,U_e),e(U_e,Yer),e(WL,Ker),e(Go,Zer),e(Go,vt),M(QL,vt,null),e(vt,eor),e(vt,J_e),e(J_e,oor),e(vt,ror),e(vt,bd),e(bd,tor),e(bd,Y_e),e(Y_e,aor),e(bd,nor),e(bd,Uz),e(Uz,sor),e(bd,lor),e(vt,ior),M(Qv,vt,null),e(Go,dor),e(Go,io),M(HL,io,null),e(io,cor),e(io,K_e),e(K_e,mor),e(io,gor),e(io,za),e(za,hor),e(za,Z_e),e(Z_e,por),e(za,uor),e(za,e2e),e(e2e,_or),e(za,bor),e(za,o2e),e(o2e,vor),e(za,For),e(io,Tor),e(io,r2e),e(r2e,Hv),e(Hv,t2e),e(t2e,Mor),e(Hv,Eor),e(Hv,Jz),e(Jz,Cor),e(Hv,wor),e(io,Aor),e(io,Uv),e(Uv,yor),e(Uv,a2e),e(a2e,Lor),e(Uv,xor),e(Uv,n2e),e(n2e,$or),e(io,kor),M(Jv,io,null),b(f,iGe,_),b(f,vd,_),e(vd,Yv),e(Yv,s2e),M(UL,s2e,null),e(vd,Sor),e(vd,l2e),e(l2e,Ror),b(f,dGe,_),b(f,Oo,_),M(JL,Oo,null),e(Oo,Por),e(Oo,Fd),e(Fd,Bor),e(Fd,Yz),e(Yz,Ior),e(Fd,Nor),e(Fd,Kz),e(Kz,qor),e(Fd,jor),e(Oo,Dor),e(Oo,YL),e(YL,Gor),e(YL,i2e),e(i2e,Oor),e(YL,Vor),e(Oo,Xor),e(Oo,Ft),M(KL,Ft,null),e(Ft,zor),e(Ft,d2e),e(d2e,Wor),e(Ft,Qor),e(Ft,Td),e(Td,Hor),e(Td,c2e),e(c2e,Uor),e(Td,Jor),e(Td,Zz),e(Zz,Yor),e(Td,Kor),e(Ft,Zor),M(Kv,Ft,null),e(Oo,err),e(Oo,co),M(ZL,co,null),e(co,orr),e(co,f2e),e(f2e,rrr),e(co,trr),e(co,Wa),e(Wa,arr),e(Wa,m2e),e(m2e,nrr),e(Wa,srr),e(Wa,g2e),e(g2e,lrr),e(Wa,irr),e(Wa,h2e),e(h2e,drr),e(Wa,crr),e(co,frr),e(co,p2e),e(p2e,Zv),e(Zv,u2e),e(u2e,mrr),e(Zv,grr),e(Zv,eW),e(eW,hrr),e(Zv,prr),e(co,urr),e(co,eF),e(eF,_rr),e(eF,_2e),e(_2e,brr),e(eF,vrr),e(eF,b2e),e(b2e,Frr),e(co,Trr),M(oF,co,null),b(f,cGe,_),b(f,Md,_),e(Md,rF),e(rF,v2e),M(e8,v2e,null),e(Md,Mrr),e(Md,F2e),e(F2e,Err),b(f,fGe,_),b(f,Vo,_),M(o8,Vo,null),e(Vo,Crr),e(Vo,Ed),e(Ed,wrr),e(Ed,oW),e(oW,Arr),e(Ed,yrr),e(Ed,rW),e(rW,Lrr),e(Ed,xrr),e(Vo,$rr),e(Vo,r8),e(r8,krr),e(r8,T2e),e(T2e,Srr),e(r8,Rrr),e(Vo,Prr),e(Vo,Tt),M(t8,Tt,null),e(Tt,Brr),e(Tt,M2e),e(M2e,Irr),e(Tt,Nrr),e(Tt,Cd),e(Cd,qrr),e(Cd,E2e),e(E2e,jrr),e(Cd,Drr),e(Cd,tW),e(tW,Grr),e(Cd,Orr),e(Tt,Vrr),M(tF,Tt,null),e(Vo,Xrr),e(Vo,fo),M(a8,fo,null),e(fo,zrr),e(fo,C2e),e(C2e,Wrr),e(fo,Qrr),e(fo,Qa),e(Qa,Hrr),e(Qa,w2e),e(w2e,Urr),e(Qa,Jrr),e(Qa,A2e),e(A2e,Yrr),e(Qa,Krr),e(Qa,y2e),e(y2e,Zrr),e(Qa,etr),e(fo,otr),e(fo,Re),e(Re,aF),e(aF,L2e),e(L2e,rtr),e(aF,ttr),e(aF,aW),e(aW,atr),e(aF,ntr),e(Re,str),e(Re,nF),e(nF,x2e),e(x2e,ltr),e(nF,itr),e(nF,nW),e(nW,dtr),e(nF,ctr),e(Re,ftr),e(Re,sF),e(sF,$2e),e($2e,mtr),e(sF,gtr),e(sF,sW),e(sW,htr),e(sF,ptr),e(Re,utr),e(Re,lF),e(lF,k2e),e(k2e,_tr),e(lF,btr),e(lF,lW),e(lW,vtr),e(lF,Ftr),e(Re,Ttr),e(Re,iF),e(iF,S2e),e(S2e,Mtr),e(iF,Etr),e(iF,iW),e(iW,Ctr),e(iF,wtr),e(Re,Atr),e(Re,dF),e(dF,R2e),e(R2e,ytr),e(dF,Ltr),e(dF,dW),e(dW,xtr),e(dF,$tr),e(Re,ktr),e(Re,cF),e(cF,P2e),e(P2e,Str),e(cF,Rtr),e(cF,cW),e(cW,Ptr),e(cF,Btr),e(Re,Itr),e(Re,fF),e(fF,B2e),e(B2e,Ntr),e(fF,qtr),e(fF,fW),e(fW,jtr),e(fF,Dtr),e(Re,Gtr),e(Re,mF),e(mF,I2e),e(I2e,Otr),e(mF,Vtr),e(mF,mW),e(mW,Xtr),e(mF,ztr),e(fo,Wtr),e(fo,gF),e(gF,Qtr),e(gF,N2e),e(N2e,Htr),e(gF,Utr),e(gF,q2e),e(q2e,Jtr),e(fo,Ytr),M(hF,fo,null),b(f,mGe,_),b(f,wd,_),e(wd,pF),e(pF,j2e),M(n8,j2e,null),e(wd,Ktr),e(wd,D2e),e(D2e,Ztr),b(f,gGe,_),b(f,Xo,_),M(s8,Xo,null),e(Xo,ear),e(Xo,Ad),e(Ad,oar),e(Ad,gW),e(gW,rar),e(Ad,tar),e(Ad,hW),e(hW,aar),e(Ad,nar),e(Xo,sar),e(Xo,l8),e(l8,lar),e(l8,G2e),e(G2e,iar),e(l8,dar),e(Xo,car),e(Xo,Mt),M(i8,Mt,null),e(Mt,far),e(Mt,O2e),e(O2e,mar),e(Mt,gar),e(Mt,yd),e(yd,har),e(yd,V2e),e(V2e,par),e(yd,uar),e(yd,pW),e(pW,_ar),e(yd,bar),e(Mt,Far),M(uF,Mt,null),e(Xo,Tar),e(Xo,mo),M(d8,mo,null),e(mo,Mar),e(mo,X2e),e(X2e,Ear),e(mo,Car),e(mo,Ha),e(Ha,war),e(Ha,z2e),e(z2e,Aar),e(Ha,yar),e(Ha,W2e),e(W2e,Lar),e(Ha,xar),e(Ha,Q2e),e(Q2e,$ar),e(Ha,kar),e(mo,Sar),e(mo,et),e(et,_F),e(_F,H2e),e(H2e,Rar),e(_F,Par),e(_F,uW),e(uW,Bar),e(_F,Iar),e(et,Nar),e(et,bF),e(bF,U2e),e(U2e,qar),e(bF,jar),e(bF,_W),e(_W,Dar),e(bF,Gar),e(et,Oar),e(et,vF),e(vF,J2e),e(J2e,Var),e(vF,Xar),e(vF,bW),e(bW,zar),e(vF,War),e(et,Qar),e(et,FF),e(FF,Y2e),e(Y2e,Har),e(FF,Uar),e(FF,vW),e(vW,Jar),e(FF,Yar),e(et,Kar),e(et,TF),e(TF,K2e),e(K2e,Zar),e(TF,enr),e(TF,FW),e(FW,onr),e(TF,rnr),e(mo,tnr),e(mo,MF),e(MF,anr),e(MF,Z2e),e(Z2e,nnr),e(MF,snr),e(MF,e1e),e(e1e,lnr),e(mo,inr),M(EF,mo,null),b(f,hGe,_),b(f,Ld,_),e(Ld,CF),e(CF,o1e),M(c8,o1e,null),e(Ld,dnr),e(Ld,r1e),e(r1e,cnr),b(f,pGe,_),b(f,zo,_),M(f8,zo,null),e(zo,fnr),e(zo,xd),e(xd,mnr),e(xd,TW),e(TW,gnr),e(xd,hnr),e(xd,MW),e(MW,pnr),e(xd,unr),e(zo,_nr),e(zo,m8),e(m8,bnr),e(m8,t1e),e(t1e,vnr),e(m8,Fnr),e(zo,Tnr),e(zo,Et),M(g8,Et,null),e(Et,Mnr),e(Et,a1e),e(a1e,Enr),e(Et,Cnr),e(Et,$d),e($d,wnr),e($d,n1e),e(n1e,Anr),e($d,ynr),e($d,EW),e(EW,Lnr),e($d,xnr),e(Et,$nr),M(wF,Et,null),e(zo,knr),e(zo,go),M(h8,go,null),e(go,Snr),e(go,s1e),e(s1e,Rnr),e(go,Pnr),e(go,Ua),e(Ua,Bnr),e(Ua,l1e),e(l1e,Inr),e(Ua,Nnr),e(Ua,i1e),e(i1e,qnr),e(Ua,jnr),e(Ua,d1e),e(d1e,Dnr),e(Ua,Gnr),e(go,Onr),e(go,ye),e(ye,AF),e(AF,c1e),e(c1e,Vnr),e(AF,Xnr),e(AF,CW),e(CW,znr),e(AF,Wnr),e(ye,Qnr),e(ye,yF),e(yF,f1e),e(f1e,Hnr),e(yF,Unr),e(yF,wW),e(wW,Jnr),e(yF,Ynr),e(ye,Knr),e(ye,LF),e(LF,m1e),e(m1e,Znr),e(LF,esr),e(LF,AW),e(AW,osr),e(LF,rsr),e(ye,tsr),e(ye,xF),e(xF,g1e),e(g1e,asr),e(xF,nsr),e(xF,yW),e(yW,ssr),e(xF,lsr),e(ye,isr),e(ye,$F),e($F,h1e),e(h1e,dsr),e($F,csr),e($F,LW),e(LW,fsr),e($F,msr),e(ye,gsr),e(ye,kF),e(kF,p1e),e(p1e,hsr),e(kF,psr),e(kF,xW),e(xW,usr),e(kF,_sr),e(ye,bsr),e(ye,SF),e(SF,u1e),e(u1e,vsr),e(SF,Fsr),e(SF,$W),e($W,Tsr),e(SF,Msr),e(ye,Esr),e(ye,RF),e(RF,_1e),e(_1e,Csr),e(RF,wsr),e(RF,kW),e(kW,Asr),e(RF,ysr),e(ye,Lsr),e(ye,PF),e(PF,b1e),e(b1e,xsr),e(PF,$sr),e(PF,SW),e(SW,ksr),e(PF,Ssr),e(ye,Rsr),e(ye,BF),e(BF,v1e),e(v1e,Psr),e(BF,Bsr),e(BF,RW),e(RW,Isr),e(BF,Nsr),e(go,qsr),e(go,IF),e(IF,jsr),e(IF,F1e),e(F1e,Dsr),e(IF,Gsr),e(IF,T1e),e(T1e,Osr),e(go,Vsr),M(NF,go,null),b(f,uGe,_),b(f,kd,_),e(kd,qF),e(qF,M1e),M(p8,M1e,null),e(kd,Xsr),e(kd,E1e),e(E1e,zsr),b(f,_Ge,_),b(f,Wo,_),M(u8,Wo,null),e(Wo,Wsr),e(Wo,Sd),e(Sd,Qsr),e(Sd,PW),e(PW,Hsr),e(Sd,Usr),e(Sd,BW),e(BW,Jsr),e(Sd,Ysr),e(Wo,Ksr),e(Wo,_8),e(_8,Zsr),e(_8,C1e),e(C1e,elr),e(_8,olr),e(Wo,rlr),e(Wo,Ct),M(b8,Ct,null),e(Ct,tlr),e(Ct,w1e),e(w1e,alr),e(Ct,nlr),e(Ct,Rd),e(Rd,slr),e(Rd,A1e),e(A1e,llr),e(Rd,ilr),e(Rd,IW),e(IW,dlr),e(Rd,clr),e(Ct,flr),M(jF,Ct,null),e(Wo,mlr),e(Wo,ho),M(v8,ho,null),e(ho,glr),e(ho,y1e),e(y1e,hlr),e(ho,plr),e(ho,Ja),e(Ja,ulr),e(Ja,L1e),e(L1e,_lr),e(Ja,blr),e(Ja,x1e),e(x1e,vlr),e(Ja,Flr),e(Ja,$1e),e($1e,Tlr),e(Ja,Mlr),e(ho,Elr),e(ho,F8),e(F8,DF),e(DF,k1e),e(k1e,Clr),e(DF,wlr),e(DF,NW),e(NW,Alr),e(DF,ylr),e(F8,Llr),e(F8,GF),e(GF,S1e),e(S1e,xlr),e(GF,$lr),e(GF,qW),e(qW,klr),e(GF,Slr),e(ho,Rlr),e(ho,OF),e(OF,Plr),e(OF,R1e),e(R1e,Blr),e(OF,Ilr),e(OF,P1e),e(P1e,Nlr),e(ho,qlr),M(VF,ho,null),b(f,bGe,_),b(f,Pd,_),e(Pd,XF),e(XF,B1e),M(T8,B1e,null),e(Pd,jlr),e(Pd,I1e),e(I1e,Dlr),b(f,vGe,_),b(f,Qo,_),M(M8,Qo,null),e(Qo,Glr),e(Qo,Bd),e(Bd,Olr),e(Bd,jW),e(jW,Vlr),e(Bd,Xlr),e(Bd,DW),e(DW,zlr),e(Bd,Wlr),e(Qo,Qlr),e(Qo,E8),e(E8,Hlr),e(E8,N1e),e(N1e,Ulr),e(E8,Jlr),e(Qo,Ylr),e(Qo,wt),M(C8,wt,null),e(wt,Klr),e(wt,q1e),e(q1e,Zlr),e(wt,eir),e(wt,Id),e(Id,oir),e(Id,j1e),e(j1e,rir),e(Id,tir),e(Id,GW),e(GW,air),e(Id,nir),e(wt,sir),M(zF,wt,null),e(Qo,lir),e(Qo,po),M(w8,po,null),e(po,iir),e(po,D1e),e(D1e,dir),e(po,cir),e(po,Ya),e(Ya,fir),e(Ya,G1e),e(G1e,mir),e(Ya,gir),e(Ya,O1e),e(O1e,hir),e(Ya,pir),e(Ya,V1e),e(V1e,uir),e(Ya,_ir),e(po,bir),e(po,ot),e(ot,WF),e(WF,X1e),e(X1e,vir),e(WF,Fir),e(WF,OW),e(OW,Tir),e(WF,Mir),e(ot,Eir),e(ot,QF),e(QF,z1e),e(z1e,Cir),e(QF,wir),e(QF,VW),e(VW,Air),e(QF,yir),e(ot,Lir),e(ot,HF),e(HF,W1e),e(W1e,xir),e(HF,$ir),e(HF,XW),e(XW,kir),e(HF,Sir),e(ot,Rir),e(ot,UF),e(UF,Q1e),e(Q1e,Pir),e(UF,Bir),e(UF,zW),e(zW,Iir),e(UF,Nir),e(ot,qir),e(ot,JF),e(JF,H1e),e(H1e,jir),e(JF,Dir),e(JF,WW),e(WW,Gir),e(JF,Oir),e(po,Vir),e(po,YF),e(YF,Xir),e(YF,U1e),e(U1e,zir),e(YF,Wir),e(YF,J1e),e(J1e,Qir),e(po,Hir),M(KF,po,null),b(f,FGe,_),b(f,Nd,_),e(Nd,ZF),e(ZF,Y1e),M(A8,Y1e,null),e(Nd,Uir),e(Nd,K1e),e(K1e,Jir),b(f,TGe,_),b(f,Ho,_),M(y8,Ho,null),e(Ho,Yir),e(Ho,qd),e(qd,Kir),e(qd,QW),e(QW,Zir),e(qd,edr),e(qd,HW),e(HW,odr),e(qd,rdr),e(Ho,tdr),e(Ho,L8),e(L8,adr),e(L8,Z1e),e(Z1e,ndr),e(L8,sdr),e(Ho,ldr),e(Ho,At),M(x8,At,null),e(At,idr),e(At,e7e),e(e7e,ddr),e(At,cdr),e(At,jd),e(jd,fdr),e(jd,o7e),e(o7e,mdr),e(jd,gdr),e(jd,UW),e(UW,hdr),e(jd,pdr),e(At,udr),M(eT,At,null),e(Ho,_dr),e(Ho,uo),M($8,uo,null),e(uo,bdr),e(uo,r7e),e(r7e,vdr),e(uo,Fdr),e(uo,Ka),e(Ka,Tdr),e(Ka,t7e),e(t7e,Mdr),e(Ka,Edr),e(Ka,a7e),e(a7e,Cdr),e(Ka,wdr),e(Ka,n7e),e(n7e,Adr),e(Ka,ydr),e(uo,Ldr),e(uo,Dd),e(Dd,oT),e(oT,s7e),e(s7e,xdr),e(oT,$dr),e(oT,JW),e(JW,kdr),e(oT,Sdr),e(Dd,Rdr),e(Dd,rT),e(rT,l7e),e(l7e,Pdr),e(rT,Bdr),e(rT,YW),e(YW,Idr),e(rT,Ndr),e(Dd,qdr),e(Dd,tT),e(tT,i7e),e(i7e,jdr),e(tT,Ddr),e(tT,KW),e(KW,Gdr),e(tT,Odr),e(uo,Vdr),e(uo,aT),e(aT,Xdr),e(aT,d7e),e(d7e,zdr),e(aT,Wdr),e(aT,c7e),e(c7e,Qdr),e(uo,Hdr),M(nT,uo,null),b(f,MGe,_),b(f,Gd,_),e(Gd,sT),e(sT,f7e),M(k8,f7e,null),e(Gd,Udr),e(Gd,m7e),e(m7e,Jdr),b(f,EGe,_),b(f,Uo,_),M(S8,Uo,null),e(Uo,Ydr),e(Uo,Od),e(Od,Kdr),e(Od,ZW),e(ZW,Zdr),e(Od,ecr),e(Od,eQ),e(eQ,ocr),e(Od,rcr),e(Uo,tcr),e(Uo,R8),e(R8,acr),e(R8,g7e),e(g7e,ncr),e(R8,scr),e(Uo,lcr),e(Uo,yt),M(P8,yt,null),e(yt,icr),e(yt,h7e),e(h7e,dcr),e(yt,ccr),e(yt,Vd),e(Vd,fcr),e(Vd,p7e),e(p7e,mcr),e(Vd,gcr),e(Vd,oQ),e(oQ,hcr),e(Vd,pcr),e(yt,ucr),M(lT,yt,null),e(Uo,_cr),e(Uo,_o),M(B8,_o,null),e(_o,bcr),e(_o,u7e),e(u7e,vcr),e(_o,Fcr),e(_o,Za),e(Za,Tcr),e(Za,_7e),e(_7e,Mcr),e(Za,Ecr),e(Za,b7e),e(b7e,Ccr),e(Za,wcr),e(Za,v7e),e(v7e,Acr),e(Za,ycr),e(_o,Lcr),e(_o,I8),e(I8,iT),e(iT,F7e),e(F7e,xcr),e(iT,$cr),e(iT,rQ),e(rQ,kcr),e(iT,Scr),e(I8,Rcr),e(I8,dT),e(dT,T7e),e(T7e,Pcr),e(dT,Bcr),e(dT,tQ),e(tQ,Icr),e(dT,Ncr),e(_o,qcr),e(_o,cT),e(cT,jcr),e(cT,M7e),e(M7e,Dcr),e(cT,Gcr),e(cT,E7e),e(E7e,Ocr),e(_o,Vcr),M(fT,_o,null),b(f,CGe,_),b(f,Xd,_),e(Xd,mT),e(mT,C7e),M(N8,C7e,null),e(Xd,Xcr),e(Xd,w7e),e(w7e,zcr),b(f,wGe,_),b(f,Jo,_),M(q8,Jo,null),e(Jo,Wcr),e(Jo,zd),e(zd,Qcr),e(zd,aQ),e(aQ,Hcr),e(zd,Ucr),e(zd,nQ),e(nQ,Jcr),e(zd,Ycr),e(Jo,Kcr),e(Jo,j8),e(j8,Zcr),e(j8,A7e),e(A7e,efr),e(j8,ofr),e(Jo,rfr),e(Jo,Lt),M(D8,Lt,null),e(Lt,tfr),e(Lt,y7e),e(y7e,afr),e(Lt,nfr),e(Lt,Wd),e(Wd,sfr),e(Wd,L7e),e(L7e,lfr),e(Wd,ifr),e(Wd,sQ),e(sQ,dfr),e(Wd,cfr),e(Lt,ffr),M(gT,Lt,null),e(Jo,mfr),e(Jo,bo),M(G8,bo,null),e(bo,gfr),e(bo,x7e),e(x7e,hfr),e(bo,pfr),e(bo,en),e(en,ufr),e(en,$7e),e($7e,_fr),e(en,bfr),e(en,k7e),e(k7e,vfr),e(en,Ffr),e(en,S7e),e(S7e,Tfr),e(en,Mfr),e(bo,Efr),e(bo,R7e),e(R7e,hT),e(hT,P7e),e(P7e,Cfr),e(hT,wfr),e(hT,lQ),e(lQ,Afr),e(hT,yfr),e(bo,Lfr),e(bo,pT),e(pT,xfr),e(pT,B7e),e(B7e,$fr),e(pT,kfr),e(pT,I7e),e(I7e,Sfr),e(bo,Rfr),M(uT,bo,null),b(f,AGe,_),b(f,Qd,_),e(Qd,_T),e(_T,N7e),M(O8,N7e,null),e(Qd,Pfr),e(Qd,q7e),e(q7e,Bfr),b(f,yGe,_),b(f,Yo,_),M(V8,Yo,null),e(Yo,Ifr),e(Yo,Hd),e(Hd,Nfr),e(Hd,iQ),e(iQ,qfr),e(Hd,jfr),e(Hd,dQ),e(dQ,Dfr),e(Hd,Gfr),e(Yo,Ofr),e(Yo,X8),e(X8,Vfr),e(X8,j7e),e(j7e,Xfr),e(X8,zfr),e(Yo,Wfr),e(Yo,xt),M(z8,xt,null),e(xt,Qfr),e(xt,D7e),e(D7e,Hfr),e(xt,Ufr),e(xt,Ud),e(Ud,Jfr),e(Ud,G7e),e(G7e,Yfr),e(Ud,Kfr),e(Ud,cQ),e(cQ,Zfr),e(Ud,emr),e(xt,omr),M(bT,xt,null),e(Yo,rmr),e(Yo,vo),M(W8,vo,null),e(vo,tmr),e(vo,O7e),e(O7e,amr),e(vo,nmr),e(vo,on),e(on,smr),e(on,V7e),e(V7e,lmr),e(on,imr),e(on,X7e),e(X7e,dmr),e(on,cmr),e(on,z7e),e(z7e,fmr),e(on,mmr),e(vo,gmr),e(vo,rn),e(rn,vT),e(vT,W7e),e(W7e,hmr),e(vT,pmr),e(vT,fQ),e(fQ,umr),e(vT,_mr),e(rn,bmr),e(rn,FT),e(FT,Q7e),e(Q7e,vmr),e(FT,Fmr),e(FT,mQ),e(mQ,Tmr),e(FT,Mmr),e(rn,Emr),e(rn,TT),e(TT,H7e),e(H7e,Cmr),e(TT,wmr),e(TT,gQ),e(gQ,Amr),e(TT,ymr),e(rn,Lmr),e(rn,MT),e(MT,U7e),e(U7e,xmr),e(MT,$mr),e(MT,hQ),e(hQ,kmr),e(MT,Smr),e(vo,Rmr),e(vo,ET),e(ET,Pmr),e(ET,J7e),e(J7e,Bmr),e(ET,Imr),e(ET,Y7e),e(Y7e,Nmr),e(vo,qmr),M(CT,vo,null),b(f,LGe,_),b(f,Jd,_),e(Jd,wT),e(wT,K7e),M(Q8,K7e,null),e(Jd,jmr),e(Jd,Z7e),e(Z7e,Dmr),b(f,xGe,_),b(f,Ko,_),M(H8,Ko,null),e(Ko,Gmr),e(Ko,Yd),e(Yd,Omr),e(Yd,pQ),e(pQ,Vmr),e(Yd,Xmr),e(Yd,uQ),e(uQ,zmr),e(Yd,Wmr),e(Ko,Qmr),e(Ko,U8),e(U8,Hmr),e(U8,ebe),e(ebe,Umr),e(U8,Jmr),e(Ko,Ymr),e(Ko,$t),M(J8,$t,null),e($t,Kmr),e($t,obe),e(obe,Zmr),e($t,egr),e($t,Kd),e(Kd,ogr),e(Kd,rbe),e(rbe,rgr),e(Kd,tgr),e(Kd,_Q),e(_Q,agr),e(Kd,ngr),e($t,sgr),M(AT,$t,null),e(Ko,lgr),e(Ko,Fo),M(Y8,Fo,null),e(Fo,igr),e(Fo,tbe),e(tbe,dgr),e(Fo,cgr),e(Fo,tn),e(tn,fgr),e(tn,abe),e(abe,mgr),e(tn,ggr),e(tn,nbe),e(nbe,hgr),e(tn,pgr),e(tn,sbe),e(sbe,ugr),e(tn,_gr),e(Fo,bgr),e(Fo,lbe),e(lbe,yT),e(yT,ibe),e(ibe,vgr),e(yT,Fgr),e(yT,bQ),e(bQ,Tgr),e(yT,Mgr),e(Fo,Egr),e(Fo,LT),e(LT,Cgr),e(LT,dbe),e(dbe,wgr),e(LT,Agr),e(LT,cbe),e(cbe,ygr),e(Fo,Lgr),M(xT,Fo,null),b(f,$Ge,_),b(f,Zd,_),e(Zd,$T),e($T,fbe),M(K8,fbe,null),e(Zd,xgr),e(Zd,mbe),e(mbe,$gr),b(f,kGe,_),b(f,Zo,_),M(Z8,Zo,null),e(Zo,kgr),e(Zo,ec),e(ec,Sgr),e(ec,vQ),e(vQ,Rgr),e(ec,Pgr),e(ec,FQ),e(FQ,Bgr),e(ec,Igr),e(Zo,Ngr),e(Zo,e9),e(e9,qgr),e(e9,gbe),e(gbe,jgr),e(e9,Dgr),e(Zo,Ggr),e(Zo,kt),M(o9,kt,null),e(kt,Ogr),e(kt,hbe),e(hbe,Vgr),e(kt,Xgr),e(kt,oc),e(oc,zgr),e(oc,pbe),e(pbe,Wgr),e(oc,Qgr),e(oc,TQ),e(TQ,Hgr),e(oc,Ugr),e(kt,Jgr),M(kT,kt,null),e(Zo,Ygr),e(Zo,yr),M(r9,yr,null),e(yr,Kgr),e(yr,ube),e(ube,Zgr),e(yr,ehr),e(yr,an),e(an,ohr),e(an,_be),e(_be,rhr),e(an,thr),e(an,bbe),e(bbe,ahr),e(an,nhr),e(an,vbe),e(vbe,shr),e(an,lhr),e(yr,ihr),e(yr,N),e(N,ST),e(ST,Fbe),e(Fbe,dhr),e(ST,chr),e(ST,MQ),e(MQ,fhr),e(ST,mhr),e(N,ghr),e(N,RT),e(RT,Tbe),e(Tbe,hhr),e(RT,phr),e(RT,EQ),e(EQ,uhr),e(RT,_hr),e(N,bhr),e(N,PT),e(PT,Mbe),e(Mbe,vhr),e(PT,Fhr),e(PT,CQ),e(CQ,Thr),e(PT,Mhr),e(N,Ehr),e(N,BT),e(BT,Ebe),e(Ebe,Chr),e(BT,whr),e(BT,wQ),e(wQ,Ahr),e(BT,yhr),e(N,Lhr),e(N,IT),e(IT,Cbe),e(Cbe,xhr),e(IT,$hr),e(IT,AQ),e(AQ,khr),e(IT,Shr),e(N,Rhr),e(N,NT),e(NT,wbe),e(wbe,Phr),e(NT,Bhr),e(NT,yQ),e(yQ,Ihr),e(NT,Nhr),e(N,qhr),e(N,qT),e(qT,Abe),e(Abe,jhr),e(qT,Dhr),e(qT,LQ),e(LQ,Ghr),e(qT,Ohr),e(N,Vhr),e(N,jT),e(jT,ybe),e(ybe,Xhr),e(jT,zhr),e(jT,xQ),e(xQ,Whr),e(jT,Qhr),e(N,Hhr),e(N,DT),e(DT,Lbe),e(Lbe,Uhr),e(DT,Jhr),e(DT,$Q),e($Q,Yhr),e(DT,Khr),e(N,Zhr),e(N,GT),e(GT,xbe),e(xbe,epr),e(GT,opr),e(GT,kQ),e(kQ,rpr),e(GT,tpr),e(N,apr),e(N,OT),e(OT,$be),e($be,npr),e(OT,spr),e(OT,SQ),e(SQ,lpr),e(OT,ipr),e(N,dpr),e(N,VT),e(VT,kbe),e(kbe,cpr),e(VT,fpr),e(VT,RQ),e(RQ,mpr),e(VT,gpr),e(N,hpr),e(N,XT),e(XT,Sbe),e(Sbe,ppr),e(XT,upr),e(XT,PQ),e(PQ,_pr),e(XT,bpr),e(N,vpr),e(N,zT),e(zT,Rbe),e(Rbe,Fpr),e(zT,Tpr),e(zT,BQ),e(BQ,Mpr),e(zT,Epr),e(N,Cpr),e(N,WT),e(WT,Pbe),e(Pbe,wpr),e(WT,Apr),e(WT,IQ),e(IQ,ypr),e(WT,Lpr),e(N,xpr),e(N,QT),e(QT,Bbe),e(Bbe,$pr),e(QT,kpr),e(QT,NQ),e(NQ,Spr),e(QT,Rpr),e(N,Ppr),e(N,HT),e(HT,Ibe),e(Ibe,Bpr),e(HT,Ipr),e(HT,qQ),e(qQ,Npr),e(HT,qpr),e(N,jpr),e(N,Vs),e(Vs,Nbe),e(Nbe,Dpr),e(Vs,Gpr),e(Vs,jQ),e(jQ,Opr),e(Vs,Vpr),e(Vs,DQ),e(DQ,Xpr),e(Vs,zpr),e(N,Wpr),e(N,UT),e(UT,qbe),e(qbe,Qpr),e(UT,Hpr),e(UT,GQ),e(GQ,Upr),e(UT,Jpr),e(N,Ypr),e(N,JT),e(JT,jbe),e(jbe,Kpr),e(JT,Zpr),e(JT,OQ),e(OQ,eur),e(JT,our),e(N,rur),e(N,YT),e(YT,Dbe),e(Dbe,tur),e(YT,aur),e(YT,VQ),e(VQ,nur),e(YT,sur),e(N,lur),e(N,KT),e(KT,Gbe),e(Gbe,iur),e(KT,dur),e(KT,XQ),e(XQ,cur),e(KT,fur),e(N,mur),e(N,ZT),e(ZT,Obe),e(Obe,gur),e(ZT,hur),e(ZT,zQ),e(zQ,pur),e(ZT,uur),e(N,_ur),e(N,eM),e(eM,Vbe),e(Vbe,bur),e(eM,vur),e(eM,WQ),e(WQ,Fur),e(eM,Tur),e(N,Mur),e(N,oM),e(oM,Xbe),e(Xbe,Eur),e(oM,Cur),e(oM,QQ),e(QQ,wur),e(oM,Aur),e(N,yur),e(N,rM),e(rM,zbe),e(zbe,Lur),e(rM,xur),e(rM,HQ),e(HQ,$ur),e(rM,kur),e(N,Sur),e(N,tM),e(tM,Wbe),e(Wbe,Rur),e(tM,Pur),e(tM,UQ),e(UQ,Bur),e(tM,Iur),e(N,Nur),e(N,aM),e(aM,Qbe),e(Qbe,qur),e(aM,jur),e(aM,JQ),e(JQ,Dur),e(aM,Gur),e(N,Our),e(N,nM),e(nM,Hbe),e(Hbe,Vur),e(nM,Xur),e(nM,YQ),e(YQ,zur),e(nM,Wur),e(N,Qur),e(N,sM),e(sM,Ube),e(Ube,Hur),e(sM,Uur),e(sM,KQ),e(KQ,Jur),e(sM,Yur),e(N,Kur),e(N,lM),e(lM,Jbe),e(Jbe,Zur),e(lM,e_r),e(lM,ZQ),e(ZQ,o_r),e(lM,r_r),e(N,t_r),e(N,iM),e(iM,Ybe),e(Ybe,a_r),e(iM,n_r),e(iM,eH),e(eH,s_r),e(iM,l_r),e(N,i_r),e(N,dM),e(dM,Kbe),e(Kbe,d_r),e(dM,c_r),e(dM,oH),e(oH,f_r),e(dM,m_r),e(N,g_r),e(N,cM),e(cM,Zbe),e(Zbe,h_r),e(cM,p_r),e(cM,rH),e(rH,u_r),e(cM,__r),e(N,b_r),e(N,fM),e(fM,e4e),e(e4e,v_r),e(fM,F_r),e(fM,tH),e(tH,T_r),e(fM,M_r),e(N,E_r),e(N,mM),e(mM,o4e),e(o4e,C_r),e(mM,w_r),e(mM,aH),e(aH,A_r),e(mM,y_r),e(N,L_r),e(N,gM),e(gM,r4e),e(r4e,x_r),e(gM,$_r),e(gM,nH),e(nH,k_r),e(gM,S_r),e(N,R_r),e(N,hM),e(hM,t4e),e(t4e,P_r),e(hM,B_r),e(hM,sH),e(sH,I_r),e(hM,N_r),e(N,q_r),e(N,pM),e(pM,a4e),e(a4e,j_r),e(pM,D_r),e(pM,lH),e(lH,G_r),e(pM,O_r),e(N,V_r),e(N,uM),e(uM,n4e),e(n4e,X_r),e(uM,z_r),e(uM,iH),e(iH,W_r),e(uM,Q_r),e(N,H_r),e(N,_M),e(_M,s4e),e(s4e,U_r),e(_M,J_r),e(_M,dH),e(dH,Y_r),e(_M,K_r),e(N,Z_r),e(N,bM),e(bM,l4e),e(l4e,e2r),e(bM,o2r),e(bM,cH),e(cH,r2r),e(bM,t2r),e(N,a2r),e(N,vM),e(vM,i4e),e(i4e,n2r),e(vM,s2r),e(vM,fH),e(fH,l2r),e(vM,i2r),e(N,d2r),e(N,FM),e(FM,d4e),e(d4e,c2r),e(FM,f2r),e(FM,mH),e(mH,m2r),e(FM,g2r),e(N,h2r),e(N,TM),e(TM,c4e),e(c4e,p2r),e(TM,u2r),e(TM,gH),e(gH,_2r),e(TM,b2r),e(N,v2r),e(N,MM),e(MM,f4e),e(f4e,F2r),e(MM,T2r),e(MM,hH),e(hH,M2r),e(MM,E2r),e(N,C2r),e(N,EM),e(EM,m4e),e(m4e,w2r),e(EM,A2r),e(EM,pH),e(pH,y2r),e(EM,L2r),e(N,x2r),e(N,CM),e(CM,g4e),e(g4e,$2r),e(CM,k2r),e(CM,uH),e(uH,S2r),e(CM,R2r),e(yr,P2r),M(wM,yr,null),b(f,SGe,_),b(f,rc,_),e(rc,AM),e(AM,h4e),M(t9,h4e,null),e(rc,B2r),e(rc,p4e),e(p4e,I2r),b(f,RGe,_),b(f,er,_),M(a9,er,null),e(er,N2r),e(er,tc),e(tc,q2r),e(tc,_H),e(_H,j2r),e(tc,D2r),e(tc,bH),e(bH,G2r),e(tc,O2r),e(er,V2r),e(er,n9),e(n9,X2r),e(n9,u4e),e(u4e,z2r),e(n9,W2r),e(er,Q2r),e(er,St),M(s9,St,null),e(St,H2r),e(St,_4e),e(_4e,U2r),e(St,J2r),e(St,ac),e(ac,Y2r),e(ac,b4e),e(b4e,K2r),e(ac,Z2r),e(ac,vH),e(vH,e1r),e(ac,o1r),e(St,r1r),M(yM,St,null),e(er,t1r),e(er,Lr),M(l9,Lr,null),e(Lr,a1r),e(Lr,v4e),e(v4e,n1r),e(Lr,s1r),e(Lr,nn),e(nn,l1r),e(nn,F4e),e(F4e,i1r),e(nn,d1r),e(nn,T4e),e(T4e,c1r),e(nn,f1r),e(nn,M4e),e(M4e,m1r),e(nn,g1r),e(Lr,h1r),e(Lr,se),e(se,LM),e(LM,E4e),e(E4e,p1r),e(LM,u1r),e(LM,FH),e(FH,_1r),e(LM,b1r),e(se,v1r),e(se,xM),e(xM,C4e),e(C4e,F1r),e(xM,T1r),e(xM,TH),e(TH,M1r),e(xM,E1r),e(se,C1r),e(se,$M),e($M,w4e),e(w4e,w1r),e($M,A1r),e($M,MH),e(MH,y1r),e($M,L1r),e(se,x1r),e(se,kM),e(kM,A4e),e(A4e,$1r),e(kM,k1r),e(kM,EH),e(EH,S1r),e(kM,R1r),e(se,P1r),e(se,SM),e(SM,y4e),e(y4e,B1r),e(SM,I1r),e(SM,CH),e(CH,N1r),e(SM,q1r),e(se,j1r),e(se,RM),e(RM,L4e),e(L4e,D1r),e(RM,G1r),e(RM,wH),e(wH,O1r),e(RM,V1r),e(se,X1r),e(se,PM),e(PM,x4e),e(x4e,z1r),e(PM,W1r),e(PM,AH),e(AH,Q1r),e(PM,H1r),e(se,U1r),e(se,BM),e(BM,$4e),e($4e,J1r),e(BM,Y1r),e(BM,yH),e(yH,K1r),e(BM,Z1r),e(se,e7r),e(se,IM),e(IM,k4e),e(k4e,o7r),e(IM,r7r),e(IM,LH),e(LH,t7r),e(IM,a7r),e(se,n7r),e(se,NM),e(NM,S4e),e(S4e,s7r),e(NM,l7r),e(NM,xH),e(xH,i7r),e(NM,d7r),e(se,c7r),e(se,qM),e(qM,R4e),e(R4e,f7r),e(qM,m7r),e(qM,$H),e($H,g7r),e(qM,h7r),e(se,p7r),e(se,jM),e(jM,P4e),e(P4e,u7r),e(jM,_7r),e(jM,kH),e(kH,b7r),e(jM,v7r),e(se,F7r),e(se,DM),e(DM,B4e),e(B4e,T7r),e(DM,M7r),e(DM,SH),e(SH,E7r),e(DM,C7r),e(se,w7r),e(se,GM),e(GM,I4e),e(I4e,A7r),e(GM,y7r),e(GM,RH),e(RH,L7r),e(GM,x7r),e(se,$7r),e(se,OM),e(OM,N4e),e(N4e,k7r),e(OM,S7r),e(OM,PH),e(PH,R7r),e(OM,P7r),e(se,B7r),e(se,VM),e(VM,q4e),e(q4e,I7r),e(VM,N7r),e(VM,BH),e(BH,q7r),e(VM,j7r),e(se,D7r),e(se,XM),e(XM,j4e),e(j4e,G7r),e(XM,O7r),e(XM,IH),e(IH,V7r),e(XM,X7r),e(se,z7r),e(se,zM),e(zM,D4e),e(D4e,W7r),e(zM,Q7r),e(zM,NH),e(NH,H7r),e(zM,U7r),e(se,J7r),e(se,WM),e(WM,G4e),e(G4e,Y7r),e(WM,K7r),e(WM,qH),e(qH,Z7r),e(WM,ebr),e(se,obr),e(se,QM),e(QM,O4e),e(O4e,rbr),e(QM,tbr),e(QM,jH),e(jH,abr),e(QM,nbr),e(se,sbr),e(se,HM),e(HM,V4e),e(V4e,lbr),e(HM,ibr),e(HM,DH),e(DH,dbr),e(HM,cbr),e(se,fbr),e(se,UM),e(UM,X4e),e(X4e,mbr),e(UM,gbr),e(UM,GH),e(GH,hbr),e(UM,pbr),e(se,ubr),e(se,JM),e(JM,z4e),e(z4e,_br),e(JM,bbr),e(JM,OH),e(OH,vbr),e(JM,Fbr),e(Lr,Tbr),M(YM,Lr,null),b(f,PGe,_),b(f,nc,_),e(nc,KM),e(KM,W4e),M(i9,W4e,null),e(nc,Mbr),e(nc,Q4e),e(Q4e,Ebr),b(f,BGe,_),b(f,or,_),M(d9,or,null),e(or,Cbr),e(or,sc),e(sc,wbr),e(sc,VH),e(VH,Abr),e(sc,ybr),e(sc,XH),e(XH,Lbr),e(sc,xbr),e(or,$br),e(or,c9),e(c9,kbr),e(c9,H4e),e(H4e,Sbr),e(c9,Rbr),e(or,Pbr),e(or,Rt),M(f9,Rt,null),e(Rt,Bbr),e(Rt,U4e),e(U4e,Ibr),e(Rt,Nbr),e(Rt,lc),e(lc,qbr),e(lc,J4e),e(J4e,jbr),e(lc,Dbr),e(lc,zH),e(zH,Gbr),e(lc,Obr),e(Rt,Vbr),M(ZM,Rt,null),e(or,Xbr),e(or,xr),M(m9,xr,null),e(xr,zbr),e(xr,Y4e),e(Y4e,Wbr),e(xr,Qbr),e(xr,sn),e(sn,Hbr),e(sn,K4e),e(K4e,Ubr),e(sn,Jbr),e(sn,Z4e),e(Z4e,Ybr),e(sn,Kbr),e(sn,eve),e(eve,Zbr),e(sn,e4r),e(xr,o4r),e(xr,Me),e(Me,eE),e(eE,ove),e(ove,r4r),e(eE,t4r),e(eE,WH),e(WH,a4r),e(eE,n4r),e(Me,s4r),e(Me,oE),e(oE,rve),e(rve,l4r),e(oE,i4r),e(oE,QH),e(QH,d4r),e(oE,c4r),e(Me,f4r),e(Me,rE),e(rE,tve),e(tve,m4r),e(rE,g4r),e(rE,HH),e(HH,h4r),e(rE,p4r),e(Me,u4r),e(Me,tE),e(tE,ave),e(ave,_4r),e(tE,b4r),e(tE,UH),e(UH,v4r),e(tE,F4r),e(Me,T4r),e(Me,aE),e(aE,nve),e(nve,M4r),e(aE,E4r),e(aE,JH),e(JH,C4r),e(aE,w4r),e(Me,A4r),e(Me,nE),e(nE,sve),e(sve,y4r),e(nE,L4r),e(nE,YH),e(YH,x4r),e(nE,$4r),e(Me,k4r),e(Me,sE),e(sE,lve),e(lve,S4r),e(sE,R4r),e(sE,KH),e(KH,P4r),e(sE,B4r),e(Me,I4r),e(Me,lE),e(lE,ive),e(ive,N4r),e(lE,q4r),e(lE,ZH),e(ZH,j4r),e(lE,D4r),e(Me,G4r),e(Me,iE),e(iE,dve),e(dve,O4r),e(iE,V4r),e(iE,eU),e(eU,X4r),e(iE,z4r),e(Me,W4r),e(Me,dE),e(dE,cve),e(cve,Q4r),e(dE,H4r),e(dE,oU),e(oU,U4r),e(dE,J4r),e(Me,Y4r),e(Me,cE),e(cE,fve),e(fve,K4r),e(cE,Z4r),e(cE,rU),e(rU,evr),e(cE,ovr),e(Me,rvr),e(Me,fE),e(fE,mve),e(mve,tvr),e(fE,avr),e(fE,tU),e(tU,nvr),e(fE,svr),e(Me,lvr),e(Me,mE),e(mE,gve),e(gve,ivr),e(mE,dvr),e(mE,aU),e(aU,cvr),e(mE,fvr),e(xr,mvr),M(gE,xr,null),b(f,IGe,_),b(f,ic,_),e(ic,hE),e(hE,hve),M(g9,hve,null),e(ic,gvr),e(ic,pve),e(pve,hvr),b(f,NGe,_),b(f,rr,_),M(h9,rr,null),e(rr,pvr),e(rr,dc),e(dc,uvr),e(dc,nU),e(nU,_vr),e(dc,bvr),e(dc,sU),e(sU,vvr),e(dc,Fvr),e(rr,Tvr),e(rr,p9),e(p9,Mvr),e(p9,uve),e(uve,Evr),e(p9,Cvr),e(rr,wvr),e(rr,Pt),M(u9,Pt,null),e(Pt,Avr),e(Pt,_ve),e(_ve,yvr),e(Pt,Lvr),e(Pt,cc),e(cc,xvr),e(cc,bve),e(bve,$vr),e(cc,kvr),e(cc,lU),e(lU,Svr),e(cc,Rvr),e(Pt,Pvr),M(pE,Pt,null),e(rr,Bvr),e(rr,$r),M(_9,$r,null),e($r,Ivr),e($r,vve),e(vve,Nvr),e($r,qvr),e($r,ln),e(ln,jvr),e(ln,Fve),e(Fve,Dvr),e(ln,Gvr),e(ln,Tve),e(Tve,Ovr),e(ln,Vvr),e(ln,Mve),e(Mve,Xvr),e(ln,zvr),e($r,Wvr),e($r,rt),e(rt,uE),e(uE,Eve),e(Eve,Qvr),e(uE,Hvr),e(uE,iU),e(iU,Uvr),e(uE,Jvr),e(rt,Yvr),e(rt,_E),e(_E,Cve),e(Cve,Kvr),e(_E,Zvr),e(_E,dU),e(dU,eFr),e(_E,oFr),e(rt,rFr),e(rt,bE),e(bE,wve),e(wve,tFr),e(bE,aFr),e(bE,cU),e(cU,nFr),e(bE,sFr),e(rt,lFr),e(rt,vE),e(vE,Ave),e(Ave,iFr),e(vE,dFr),e(vE,fU),e(fU,cFr),e(vE,fFr),e(rt,mFr),e(rt,FE),e(FE,yve),e(yve,gFr),e(FE,hFr),e(FE,mU),e(mU,pFr),e(FE,uFr),e($r,_Fr),M(TE,$r,null),b(f,qGe,_),b(f,fc,_),e(fc,ME),e(ME,Lve),M(b9,Lve,null),e(fc,bFr),e(fc,xve),e(xve,vFr),b(f,jGe,_),b(f,tr,_),M(v9,tr,null),e(tr,FFr),e(tr,mc),e(mc,TFr),e(mc,gU),e(gU,MFr),e(mc,EFr),e(mc,hU),e(hU,CFr),e(mc,wFr),e(tr,AFr),e(tr,F9),e(F9,yFr),e(F9,$ve),e($ve,LFr),e(F9,xFr),e(tr,$Fr),e(tr,Bt),M(T9,Bt,null),e(Bt,kFr),e(Bt,kve),e(kve,SFr),e(Bt,RFr),e(Bt,gc),e(gc,PFr),e(gc,Sve),e(Sve,BFr),e(gc,IFr),e(gc,pU),e(pU,NFr),e(gc,qFr),e(Bt,jFr),M(EE,Bt,null),e(tr,DFr),e(tr,kr),M(M9,kr,null),e(kr,GFr),e(kr,Rve),e(Rve,OFr),e(kr,VFr),e(kr,dn),e(dn,XFr),e(dn,Pve),e(Pve,zFr),e(dn,WFr),e(dn,Bve),e(Bve,QFr),e(dn,HFr),e(dn,Ive),e(Ive,UFr),e(dn,JFr),e(kr,YFr),e(kr,ie),e(ie,CE),e(CE,Nve),e(Nve,KFr),e(CE,ZFr),e(CE,uU),e(uU,eTr),e(CE,oTr),e(ie,rTr),e(ie,wE),e(wE,qve),e(qve,tTr),e(wE,aTr),e(wE,_U),e(_U,nTr),e(wE,sTr),e(ie,lTr),e(ie,AE),e(AE,jve),e(jve,iTr),e(AE,dTr),e(AE,bU),e(bU,cTr),e(AE,fTr),e(ie,mTr),e(ie,yE),e(yE,Dve),e(Dve,gTr),e(yE,hTr),e(yE,vU),e(vU,pTr),e(yE,uTr),e(ie,_Tr),e(ie,LE),e(LE,Gve),e(Gve,bTr),e(LE,vTr),e(LE,FU),e(FU,FTr),e(LE,TTr),e(ie,MTr),e(ie,xE),e(xE,Ove),e(Ove,ETr),e(xE,CTr),e(xE,TU),e(TU,wTr),e(xE,ATr),e(ie,yTr),e(ie,$E),e($E,Vve),e(Vve,LTr),e($E,xTr),e($E,MU),e(MU,$Tr),e($E,kTr),e(ie,STr),e(ie,kE),e(kE,Xve),e(Xve,RTr),e(kE,PTr),e(kE,EU),e(EU,BTr),e(kE,ITr),e(ie,NTr),e(ie,SE),e(SE,zve),e(zve,qTr),e(SE,jTr),e(SE,CU),e(CU,DTr),e(SE,GTr),e(ie,OTr),e(ie,RE),e(RE,Wve),e(Wve,VTr),e(RE,XTr),e(RE,wU),e(wU,zTr),e(RE,WTr),e(ie,QTr),e(ie,PE),e(PE,Qve),e(Qve,HTr),e(PE,UTr),e(PE,AU),e(AU,JTr),e(PE,YTr),e(ie,KTr),e(ie,BE),e(BE,Hve),e(Hve,ZTr),e(BE,eMr),e(BE,yU),e(yU,oMr),e(BE,rMr),e(ie,tMr),e(ie,IE),e(IE,Uve),e(Uve,aMr),e(IE,nMr),e(IE,LU),e(LU,sMr),e(IE,lMr),e(ie,iMr),e(ie,NE),e(NE,Jve),e(Jve,dMr),e(NE,cMr),e(NE,xU),e(xU,fMr),e(NE,mMr),e(ie,gMr),e(ie,qE),e(qE,Yve),e(Yve,hMr),e(qE,pMr),e(qE,$U),e($U,uMr),e(qE,_Mr),e(ie,bMr),e(ie,jE),e(jE,Kve),e(Kve,vMr),e(jE,FMr),e(jE,kU),e(kU,TMr),e(jE,MMr),e(ie,EMr),e(ie,DE),e(DE,Zve),e(Zve,CMr),e(DE,wMr),e(DE,SU),e(SU,AMr),e(DE,yMr),e(ie,LMr),e(ie,GE),e(GE,eFe),e(eFe,xMr),e(GE,$Mr),e(GE,RU),e(RU,kMr),e(GE,SMr),e(ie,RMr),e(ie,OE),e(OE,oFe),e(oFe,PMr),e(OE,BMr),e(OE,PU),e(PU,IMr),e(OE,NMr),e(ie,qMr),e(ie,VE),e(VE,rFe),e(rFe,jMr),e(VE,DMr),e(VE,BU),e(BU,GMr),e(VE,OMr),e(kr,VMr),M(XE,kr,null),b(f,DGe,_),b(f,hc,_),e(hc,zE),e(zE,tFe),M(E9,tFe,null),e(hc,XMr),e(hc,aFe),e(aFe,zMr),b(f,GGe,_),b(f,ar,_),M(C9,ar,null),e(ar,WMr),e(ar,pc),e(pc,QMr),e(pc,IU),e(IU,HMr),e(pc,UMr),e(pc,NU),e(NU,JMr),e(pc,YMr),e(ar,KMr),e(ar,w9),e(w9,ZMr),e(w9,nFe),e(nFe,eEr),e(w9,oEr),e(ar,rEr),e(ar,It),M(A9,It,null),e(It,tEr),e(It,sFe),e(sFe,aEr),e(It,nEr),e(It,uc),e(uc,sEr),e(uc,lFe),e(lFe,lEr),e(uc,iEr),e(uc,qU),e(qU,dEr),e(uc,cEr),e(It,fEr),M(WE,It,null),e(ar,mEr),e(ar,Sr),M(y9,Sr,null),e(Sr,gEr),e(Sr,iFe),e(iFe,hEr),e(Sr,pEr),e(Sr,cn),e(cn,uEr),e(cn,dFe),e(dFe,_Er),e(cn,bEr),e(cn,cFe),e(cFe,vEr),e(cn,FEr),e(cn,fFe),e(fFe,TEr),e(cn,MEr),e(Sr,EEr),e(Sr,Le),e(Le,QE),e(QE,mFe),e(mFe,CEr),e(QE,wEr),e(QE,jU),e(jU,AEr),e(QE,yEr),e(Le,LEr),e(Le,HE),e(HE,gFe),e(gFe,xEr),e(HE,$Er),e(HE,DU),e(DU,kEr),e(HE,SEr),e(Le,REr),e(Le,UE),e(UE,hFe),e(hFe,PEr),e(UE,BEr),e(UE,GU),e(GU,IEr),e(UE,NEr),e(Le,qEr),e(Le,JE),e(JE,pFe),e(pFe,jEr),e(JE,DEr),e(JE,OU),e(OU,GEr),e(JE,OEr),e(Le,VEr),e(Le,YE),e(YE,uFe),e(uFe,XEr),e(YE,zEr),e(YE,VU),e(VU,WEr),e(YE,QEr),e(Le,HEr),e(Le,KE),e(KE,_Fe),e(_Fe,UEr),e(KE,JEr),e(KE,XU),e(XU,YEr),e(KE,KEr),e(Le,ZEr),e(Le,ZE),e(ZE,bFe),e(bFe,eCr),e(ZE,oCr),e(ZE,zU),e(zU,rCr),e(ZE,tCr),e(Le,aCr),e(Le,eC),e(eC,vFe),e(vFe,nCr),e(eC,sCr),e(eC,WU),e(WU,lCr),e(eC,iCr),e(Le,dCr),e(Le,oC),e(oC,FFe),e(FFe,cCr),e(oC,fCr),e(oC,QU),e(QU,mCr),e(oC,gCr),e(Le,hCr),e(Le,rC),e(rC,TFe),e(TFe,pCr),e(rC,uCr),e(rC,HU),e(HU,_Cr),e(rC,bCr),e(Sr,vCr),M(tC,Sr,null),b(f,OGe,_),b(f,_c,_),e(_c,aC),e(aC,MFe),M(L9,MFe,null),e(_c,FCr),e(_c,EFe),e(EFe,TCr),b(f,VGe,_),b(f,nr,_),M(x9,nr,null),e(nr,MCr),e(nr,bc),e(bc,ECr),e(bc,UU),e(UU,CCr),e(bc,wCr),e(bc,JU),e(JU,ACr),e(bc,yCr),e(nr,LCr),e(nr,$9),e($9,xCr),e($9,CFe),e(CFe,$Cr),e($9,kCr),e(nr,SCr),e(nr,Nt),M(k9,Nt,null),e(Nt,RCr),e(Nt,wFe),e(wFe,PCr),e(Nt,BCr),e(Nt,vc),e(vc,ICr),e(vc,AFe),e(AFe,NCr),e(vc,qCr),e(vc,YU),e(YU,jCr),e(vc,DCr),e(Nt,GCr),M(nC,Nt,null),e(nr,OCr),e(nr,Rr),M(S9,Rr,null),e(Rr,VCr),e(Rr,yFe),e(yFe,XCr),e(Rr,zCr),e(Rr,fn),e(fn,WCr),e(fn,LFe),e(LFe,QCr),e(fn,HCr),e(fn,xFe),e(xFe,UCr),e(fn,JCr),e(fn,$Fe),e($Fe,YCr),e(fn,KCr),e(Rr,ZCr),e(Rr,re),e(re,sC),e(sC,kFe),e(kFe,e5r),e(sC,o5r),e(sC,KU),e(KU,r5r),e(sC,t5r),e(re,a5r),e(re,lC),e(lC,SFe),e(SFe,n5r),e(lC,s5r),e(lC,ZU),e(ZU,l5r),e(lC,i5r),e(re,d5r),e(re,iC),e(iC,RFe),e(RFe,c5r),e(iC,f5r),e(iC,eJ),e(eJ,m5r),e(iC,g5r),e(re,h5r),e(re,dC),e(dC,PFe),e(PFe,p5r),e(dC,u5r),e(dC,oJ),e(oJ,_5r),e(dC,b5r),e(re,v5r),e(re,cC),e(cC,BFe),e(BFe,F5r),e(cC,T5r),e(cC,rJ),e(rJ,M5r),e(cC,E5r),e(re,C5r),e(re,fC),e(fC,IFe),e(IFe,w5r),e(fC,A5r),e(fC,tJ),e(tJ,y5r),e(fC,L5r),e(re,x5r),e(re,mC),e(mC,NFe),e(NFe,$5r),e(mC,k5r),e(mC,aJ),e(aJ,S5r),e(mC,R5r),e(re,P5r),e(re,gC),e(gC,qFe),e(qFe,B5r),e(gC,I5r),e(gC,nJ),e(nJ,N5r),e(gC,q5r),e(re,j5r),e(re,hC),e(hC,jFe),e(jFe,D5r),e(hC,G5r),e(hC,sJ),e(sJ,O5r),e(hC,V5r),e(re,X5r),e(re,pC),e(pC,DFe),e(DFe,z5r),e(pC,W5r),e(pC,lJ),e(lJ,Q5r),e(pC,H5r),e(re,U5r),e(re,uC),e(uC,GFe),e(GFe,J5r),e(uC,Y5r),e(uC,iJ),e(iJ,K5r),e(uC,Z5r),e(re,e3r),e(re,_C),e(_C,OFe),e(OFe,o3r),e(_C,r3r),e(_C,dJ),e(dJ,t3r),e(_C,a3r),e(re,n3r),e(re,bC),e(bC,VFe),e(VFe,s3r),e(bC,l3r),e(bC,cJ),e(cJ,i3r),e(bC,d3r),e(re,c3r),e(re,vC),e(vC,XFe),e(XFe,f3r),e(vC,m3r),e(vC,fJ),e(fJ,g3r),e(vC,h3r),e(re,p3r),e(re,FC),e(FC,zFe),e(zFe,u3r),e(FC,_3r),e(FC,mJ),e(mJ,b3r),e(FC,v3r),e(re,F3r),e(re,TC),e(TC,WFe),e(WFe,T3r),e(TC,M3r),e(TC,gJ),e(gJ,E3r),e(TC,C3r),e(re,w3r),e(re,MC),e(MC,QFe),e(QFe,A3r),e(MC,y3r),e(MC,hJ),e(hJ,L3r),e(MC,x3r),e(re,$3r),e(re,EC),e(EC,HFe),e(HFe,k3r),e(EC,S3r),e(EC,pJ),e(pJ,R3r),e(EC,P3r),e(re,B3r),e(re,CC),e(CC,UFe),e(UFe,I3r),e(CC,N3r),e(CC,uJ),e(uJ,q3r),e(CC,j3r),e(re,D3r),e(re,wC),e(wC,JFe),e(JFe,G3r),e(wC,O3r),e(wC,_J),e(_J,V3r),e(wC,X3r),e(re,z3r),e(re,AC),e(AC,YFe),e(YFe,W3r),e(AC,Q3r),e(AC,bJ),e(bJ,H3r),e(AC,U3r),e(re,J3r),e(re,yC),e(yC,KFe),e(KFe,Y3r),e(yC,K3r),e(yC,vJ),e(vJ,Z3r),e(yC,e0r),e(re,o0r),e(re,LC),e(LC,ZFe),e(ZFe,r0r),e(LC,t0r),e(LC,FJ),e(FJ,a0r),e(LC,n0r),e(re,s0r),e(re,xC),e(xC,eTe),e(eTe,l0r),e(xC,i0r),e(xC,TJ),e(TJ,d0r),e(xC,c0r),e(re,f0r),e(re,$C),e($C,oTe),e(oTe,m0r),e($C,g0r),e($C,MJ),e(MJ,h0r),e($C,p0r),e(re,u0r),e(re,kC),e(kC,rTe),e(rTe,_0r),e(kC,b0r),e(kC,EJ),e(EJ,v0r),e(kC,F0r),e(Rr,T0r),M(SC,Rr,null),b(f,XGe,_),b(f,Fc,_),e(Fc,RC),e(RC,tTe),M(R9,tTe,null),e(Fc,M0r),e(Fc,aTe),e(aTe,E0r),b(f,zGe,_),b(f,sr,_),M(P9,sr,null),e(sr,C0r),e(sr,Tc),e(Tc,w0r),e(Tc,CJ),e(CJ,A0r),e(Tc,y0r),e(Tc,wJ),e(wJ,L0r),e(Tc,x0r),e(sr,$0r),e(sr,B9),e(B9,k0r),e(B9,nTe),e(nTe,S0r),e(B9,R0r),e(sr,P0r),e(sr,qt),M(I9,qt,null),e(qt,B0r),e(qt,sTe),e(sTe,I0r),e(qt,N0r),e(qt,Mc),e(Mc,q0r),e(Mc,lTe),e(lTe,j0r),e(Mc,D0r),e(Mc,AJ),e(AJ,G0r),e(Mc,O0r),e(qt,V0r),M(PC,qt,null),e(sr,X0r),e(sr,Pr),M(N9,Pr,null),e(Pr,z0r),e(Pr,iTe),e(iTe,W0r),e(Pr,Q0r),e(Pr,mn),e(mn,H0r),e(mn,dTe),e(dTe,U0r),e(mn,J0r),e(mn,cTe),e(cTe,Y0r),e(mn,K0r),e(mn,fTe),e(fTe,Z0r),e(mn,ewr),e(Pr,owr),e(Pr,pe),e(pe,BC),e(BC,mTe),e(mTe,rwr),e(BC,twr),e(BC,yJ),e(yJ,awr),e(BC,nwr),e(pe,swr),e(pe,IC),e(IC,gTe),e(gTe,lwr),e(IC,iwr),e(IC,LJ),e(LJ,dwr),e(IC,cwr),e(pe,fwr),e(pe,NC),e(NC,hTe),e(hTe,mwr),e(NC,gwr),e(NC,xJ),e(xJ,hwr),e(NC,pwr),e(pe,uwr),e(pe,qC),e(qC,pTe),e(pTe,_wr),e(qC,bwr),e(qC,$J),e($J,vwr),e(qC,Fwr),e(pe,Twr),e(pe,jC),e(jC,uTe),e(uTe,Mwr),e(jC,Ewr),e(jC,kJ),e(kJ,Cwr),e(jC,wwr),e(pe,Awr),e(pe,DC),e(DC,_Te),e(_Te,ywr),e(DC,Lwr),e(DC,SJ),e(SJ,xwr),e(DC,$wr),e(pe,kwr),e(pe,GC),e(GC,bTe),e(bTe,Swr),e(GC,Rwr),e(GC,RJ),e(RJ,Pwr),e(GC,Bwr),e(pe,Iwr),e(pe,OC),e(OC,vTe),e(vTe,Nwr),e(OC,qwr),e(OC,PJ),e(PJ,jwr),e(OC,Dwr),e(pe,Gwr),e(pe,VC),e(VC,FTe),e(FTe,Owr),e(VC,Vwr),e(VC,BJ),e(BJ,Xwr),e(VC,zwr),e(pe,Wwr),e(pe,XC),e(XC,TTe),e(TTe,Qwr),e(XC,Hwr),e(XC,IJ),e(IJ,Uwr),e(XC,Jwr),e(pe,Ywr),e(pe,zC),e(zC,MTe),e(MTe,Kwr),e(zC,Zwr),e(zC,NJ),e(NJ,eAr),e(zC,oAr),e(pe,rAr),e(pe,WC),e(WC,ETe),e(ETe,tAr),e(WC,aAr),e(WC,qJ),e(qJ,nAr),e(WC,sAr),e(pe,lAr),e(pe,QC),e(QC,CTe),e(CTe,iAr),e(QC,dAr),e(QC,jJ),e(jJ,cAr),e(QC,fAr),e(pe,mAr),e(pe,HC),e(HC,wTe),e(wTe,gAr),e(HC,hAr),e(HC,DJ),e(DJ,pAr),e(HC,uAr),e(pe,_Ar),e(pe,UC),e(UC,ATe),e(ATe,bAr),e(UC,vAr),e(UC,GJ),e(GJ,FAr),e(UC,TAr),e(pe,MAr),e(pe,JC),e(JC,yTe),e(yTe,EAr),e(JC,CAr),e(JC,OJ),e(OJ,wAr),e(JC,AAr),e(pe,yAr),e(pe,YC),e(YC,LTe),e(LTe,LAr),e(YC,xAr),e(YC,VJ),e(VJ,$Ar),e(YC,kAr),e(Pr,SAr),M(KC,Pr,null),b(f,WGe,_),b(f,Ec,_),e(Ec,ZC),e(ZC,xTe),M(q9,xTe,null),e(Ec,RAr),e(Ec,$Te),e($Te,PAr),b(f,QGe,_),b(f,lr,_),M(j9,lr,null),e(lr,BAr),e(lr,Cc),e(Cc,IAr),e(Cc,XJ),e(XJ,NAr),e(Cc,qAr),e(Cc,zJ),e(zJ,jAr),e(Cc,DAr),e(lr,GAr),e(lr,D9),e(D9,OAr),e(D9,kTe),e(kTe,VAr),e(D9,XAr),e(lr,zAr),e(lr,jt),M(G9,jt,null),e(jt,WAr),e(jt,STe),e(STe,QAr),e(jt,HAr),e(jt,wc),e(wc,UAr),e(wc,RTe),e(RTe,JAr),e(wc,YAr),e(wc,WJ),e(WJ,KAr),e(wc,ZAr),e(jt,e6r),M(e5,jt,null),e(lr,o6r),e(lr,Br),M(O9,Br,null),e(Br,r6r),e(Br,PTe),e(PTe,t6r),e(Br,a6r),e(Br,gn),e(gn,n6r),e(gn,BTe),e(BTe,s6r),e(gn,l6r),e(gn,ITe),e(ITe,i6r),e(gn,d6r),e(gn,NTe),e(NTe,c6r),e(gn,f6r),e(Br,m6r),e(Br,V9),e(V9,o5),e(o5,qTe),e(qTe,g6r),e(o5,h6r),e(o5,QJ),e(QJ,p6r),e(o5,u6r),e(V9,_6r),e(V9,r5),e(r5,jTe),e(jTe,b6r),e(r5,v6r),e(r5,HJ),e(HJ,F6r),e(r5,T6r),e(Br,M6r),M(t5,Br,null),b(f,HGe,_),b(f,Ac,_),e(Ac,a5),e(a5,DTe),M(X9,DTe,null),e(Ac,E6r),e(Ac,GTe),e(GTe,C6r),b(f,UGe,_),b(f,ir,_),M(z9,ir,null),e(ir,w6r),e(ir,yc),e(yc,A6r),e(yc,UJ),e(UJ,y6r),e(yc,L6r),e(yc,JJ),e(JJ,x6r),e(yc,$6r),e(ir,k6r),e(ir,W9),e(W9,S6r),e(W9,OTe),e(OTe,R6r),e(W9,P6r),e(ir,B6r),e(ir,Dt),M(Q9,Dt,null),e(Dt,I6r),e(Dt,VTe),e(VTe,N6r),e(Dt,q6r),e(Dt,Lc),e(Lc,j6r),e(Lc,XTe),e(XTe,D6r),e(Lc,G6r),e(Lc,YJ),e(YJ,O6r),e(Lc,V6r),e(Dt,X6r),M(n5,Dt,null),e(ir,z6r),e(ir,Ir),M(H9,Ir,null),e(Ir,W6r),e(Ir,zTe),e(zTe,Q6r),e(Ir,H6r),e(Ir,hn),e(hn,U6r),e(hn,WTe),e(WTe,J6r),e(hn,Y6r),e(hn,QTe),e(QTe,K6r),e(hn,Z6r),e(hn,HTe),e(HTe,eyr),e(hn,oyr),e(Ir,ryr),e(Ir,UTe),e(UTe,s5),e(s5,JTe),e(JTe,tyr),e(s5,ayr),e(s5,KJ),e(KJ,nyr),e(s5,syr),e(Ir,lyr),M(l5,Ir,null),b(f,JGe,_),b(f,xc,_),e(xc,i5),e(i5,YTe),M(U9,YTe,null),e(xc,iyr),e(xc,KTe),e(KTe,dyr),b(f,YGe,_),b(f,dr,_),M(J9,dr,null),e(dr,cyr),e(dr,$c),e($c,fyr),e($c,ZJ),e(ZJ,myr),e($c,gyr),e($c,eY),e(eY,hyr),e($c,pyr),e(dr,uyr),e(dr,Y9),e(Y9,_yr),e(Y9,ZTe),e(ZTe,byr),e(Y9,vyr),e(dr,Fyr),e(dr,Gt),M(K9,Gt,null),e(Gt,Tyr),e(Gt,eMe),e(eMe,Myr),e(Gt,Eyr),e(Gt,kc),e(kc,Cyr),e(kc,oMe),e(oMe,wyr),e(kc,Ayr),e(kc,oY),e(oY,yyr),e(kc,Lyr),e(Gt,xyr),M(d5,Gt,null),e(dr,$yr),e(dr,Nr),M(Z9,Nr,null),e(Nr,kyr),e(Nr,rMe),e(rMe,Syr),e(Nr,Ryr),e(Nr,pn),e(pn,Pyr),e(pn,tMe),e(tMe,Byr),e(pn,Iyr),e(pn,aMe),e(aMe,Nyr),e(pn,qyr),e(pn,nMe),e(nMe,jyr),e(pn,Dyr),e(Nr,Gyr),e(Nr,de),e(de,c5),e(c5,sMe),e(sMe,Oyr),e(c5,Vyr),e(c5,rY),e(rY,Xyr),e(c5,zyr),e(de,Wyr),e(de,f5),e(f5,lMe),e(lMe,Qyr),e(f5,Hyr),e(f5,tY),e(tY,Uyr),e(f5,Jyr),e(de,Yyr),e(de,m5),e(m5,iMe),e(iMe,Kyr),e(m5,Zyr),e(m5,aY),e(aY,eLr),e(m5,oLr),e(de,rLr),e(de,g5),e(g5,dMe),e(dMe,tLr),e(g5,aLr),e(g5,nY),e(nY,nLr),e(g5,sLr),e(de,lLr),e(de,h5),e(h5,cMe),e(cMe,iLr),e(h5,dLr),e(h5,sY),e(sY,cLr),e(h5,fLr),e(de,mLr),e(de,p5),e(p5,fMe),e(fMe,gLr),e(p5,hLr),e(p5,lY),e(lY,pLr),e(p5,uLr),e(de,_Lr),e(de,u5),e(u5,mMe),e(mMe,bLr),e(u5,vLr),e(u5,iY),e(iY,FLr),e(u5,TLr),e(de,MLr),e(de,_5),e(_5,gMe),e(gMe,ELr),e(_5,CLr),e(_5,dY),e(dY,wLr),e(_5,ALr),e(de,yLr),e(de,b5),e(b5,hMe),e(hMe,LLr),e(b5,xLr),e(b5,cY),e(cY,$Lr),e(b5,kLr),e(de,SLr),e(de,v5),e(v5,pMe),e(pMe,RLr),e(v5,PLr),e(v5,fY),e(fY,BLr),e(v5,ILr),e(de,NLr),e(de,F5),e(F5,uMe),e(uMe,qLr),e(F5,jLr),e(F5,mY),e(mY,DLr),e(F5,GLr),e(de,OLr),e(de,T5),e(T5,_Me),e(_Me,VLr),e(T5,XLr),e(T5,gY),e(gY,zLr),e(T5,WLr),e(de,QLr),e(de,M5),e(M5,bMe),e(bMe,HLr),e(M5,ULr),e(M5,hY),e(hY,JLr),e(M5,YLr),e(de,KLr),e(de,E5),e(E5,vMe),e(vMe,ZLr),e(E5,e8r),e(E5,pY),e(pY,o8r),e(E5,r8r),e(de,t8r),e(de,C5),e(C5,FMe),e(FMe,a8r),e(C5,n8r),e(C5,uY),e(uY,s8r),e(C5,l8r),e(de,i8r),e(de,w5),e(w5,TMe),e(TMe,d8r),e(w5,c8r),e(w5,_Y),e(_Y,f8r),e(w5,m8r),e(de,g8r),e(de,A5),e(A5,MMe),e(MMe,h8r),e(A5,p8r),e(A5,bY),e(bY,u8r),e(A5,_8r),e(de,b8r),e(de,y5),e(y5,EMe),e(EMe,v8r),e(y5,F8r),e(y5,vY),e(vY,T8r),e(y5,M8r),e(de,E8r),e(de,L5),e(L5,CMe),e(CMe,C8r),e(L5,w8r),e(L5,FY),e(FY,A8r),e(L5,y8r),e(de,L8r),e(de,x5),e(x5,wMe),e(wMe,x8r),e(x5,$8r),e(x5,TY),e(TY,k8r),e(x5,S8r),e(Nr,R8r),M($5,Nr,null),b(f,KGe,_),b(f,Sc,_),e(Sc,k5),e(k5,AMe),M(ex,AMe,null),e(Sc,P8r),e(Sc,yMe),e(yMe,B8r),b(f,ZGe,_),b(f,cr,_),M(ox,cr,null),e(cr,I8r),e(cr,Rc),e(Rc,N8r),e(Rc,MY),e(MY,q8r),e(Rc,j8r),e(Rc,EY),e(EY,D8r),e(Rc,G8r),e(cr,O8r),e(cr,rx),e(rx,V8r),e(rx,LMe),e(LMe,X8r),e(rx,z8r),e(cr,W8r),e(cr,Ot),M(tx,Ot,null),e(Ot,Q8r),e(Ot,xMe),e(xMe,H8r),e(Ot,U8r),e(Ot,Pc),e(Pc,J8r),e(Pc,$Me),e($Me,Y8r),e(Pc,K8r),e(Pc,CY),e(CY,Z8r),e(Pc,e9r),e(Ot,o9r),M(S5,Ot,null),e(cr,r9r),e(cr,qr),M(ax,qr,null),e(qr,t9r),e(qr,kMe),e(kMe,a9r),e(qr,n9r),e(qr,un),e(un,s9r),e(un,SMe),e(SMe,l9r),e(un,i9r),e(un,RMe),e(RMe,d9r),e(un,c9r),e(un,PMe),e(PMe,f9r),e(un,m9r),e(qr,g9r),e(qr,ce),e(ce,R5),e(R5,BMe),e(BMe,h9r),e(R5,p9r),e(R5,wY),e(wY,u9r),e(R5,_9r),e(ce,b9r),e(ce,P5),e(P5,IMe),e(IMe,v9r),e(P5,F9r),e(P5,AY),e(AY,T9r),e(P5,M9r),e(ce,E9r),e(ce,B5),e(B5,NMe),e(NMe,C9r),e(B5,w9r),e(B5,yY),e(yY,A9r),e(B5,y9r),e(ce,L9r),e(ce,I5),e(I5,qMe),e(qMe,x9r),e(I5,$9r),e(I5,LY),e(LY,k9r),e(I5,S9r),e(ce,R9r),e(ce,N5),e(N5,jMe),e(jMe,P9r),e(N5,B9r),e(N5,xY),e(xY,I9r),e(N5,N9r),e(ce,q9r),e(ce,q5),e(q5,DMe),e(DMe,j9r),e(q5,D9r),e(q5,$Y),e($Y,G9r),e(q5,O9r),e(ce,V9r),e(ce,j5),e(j5,GMe),e(GMe,X9r),e(j5,z9r),e(j5,kY),e(kY,W9r),e(j5,Q9r),e(ce,H9r),e(ce,D5),e(D5,OMe),e(OMe,U9r),e(D5,J9r),e(D5,SY),e(SY,Y9r),e(D5,K9r),e(ce,Z9r),e(ce,G5),e(G5,VMe),e(VMe,exr),e(G5,oxr),e(G5,RY),e(RY,rxr),e(G5,txr),e(ce,axr),e(ce,O5),e(O5,XMe),e(XMe,nxr),e(O5,sxr),e(O5,PY),e(PY,lxr),e(O5,ixr),e(ce,dxr),e(ce,V5),e(V5,zMe),e(zMe,cxr),e(V5,fxr),e(V5,BY),e(BY,mxr),e(V5,gxr),e(ce,hxr),e(ce,X5),e(X5,WMe),e(WMe,pxr),e(X5,uxr),e(X5,IY),e(IY,_xr),e(X5,bxr),e(ce,vxr),e(ce,z5),e(z5,QMe),e(QMe,Fxr),e(z5,Txr),e(z5,NY),e(NY,Mxr),e(z5,Exr),e(ce,Cxr),e(ce,W5),e(W5,HMe),e(HMe,wxr),e(W5,Axr),e(W5,qY),e(qY,yxr),e(W5,Lxr),e(ce,xxr),e(ce,Q5),e(Q5,UMe),e(UMe,$xr),e(Q5,kxr),e(Q5,jY),e(jY,Sxr),e(Q5,Rxr),e(ce,Pxr),e(ce,H5),e(H5,JMe),e(JMe,Bxr),e(H5,Ixr),e(H5,DY),e(DY,Nxr),e(H5,qxr),e(ce,jxr),e(ce,U5),e(U5,YMe),e(YMe,Dxr),e(U5,Gxr),e(U5,GY),e(GY,Oxr),e(U5,Vxr),e(ce,Xxr),e(ce,J5),e(J5,KMe),e(KMe,zxr),e(J5,Wxr),e(J5,OY),e(OY,Qxr),e(J5,Hxr),e(ce,Uxr),e(ce,Y5),e(Y5,ZMe),e(ZMe,Jxr),e(Y5,Yxr),e(Y5,VY),e(VY,Kxr),e(Y5,Zxr),e(ce,e$r),e(ce,K5),e(K5,eEe),e(eEe,o$r),e(K5,r$r),e(K5,XY),e(XY,t$r),e(K5,a$r),e(qr,n$r),M(Z5,qr,null),b(f,eOe,_),b(f,Bc,_),e(Bc,e3),e(e3,oEe),M(nx,oEe,null),e(Bc,s$r),e(Bc,rEe),e(rEe,l$r),b(f,oOe,_),b(f,fr,_),M(sx,fr,null),e(fr,i$r),e(fr,Ic),e(Ic,d$r),e(Ic,zY),e(zY,c$r),e(Ic,f$r),e(Ic,WY),e(WY,m$r),e(Ic,g$r),e(fr,h$r),e(fr,lx),e(lx,p$r),e(lx,tEe),e(tEe,u$r),e(lx,_$r),e(fr,b$r),e(fr,Vt),M(ix,Vt,null),e(Vt,v$r),e(Vt,aEe),e(aEe,F$r),e(Vt,T$r),e(Vt,Nc),e(Nc,M$r),e(Nc,nEe),e(nEe,E$r),e(Nc,C$r),e(Nc,QY),e(QY,w$r),e(Nc,A$r),e(Vt,y$r),M(o3,Vt,null),e(fr,L$r),e(fr,jr),M(dx,jr,null),e(jr,x$r),e(jr,sEe),e(sEe,$$r),e(jr,k$r),e(jr,_n),e(_n,S$r),e(_n,lEe),e(lEe,R$r),e(_n,P$r),e(_n,iEe),e(iEe,B$r),e(_n,I$r),e(_n,dEe),e(dEe,N$r),e(_n,q$r),e(jr,j$r),e(jr,cEe),e(cEe,r3),e(r3,fEe),e(fEe,D$r),e(r3,G$r),e(r3,HY),e(HY,O$r),e(r3,V$r),e(jr,X$r),M(t3,jr,null),b(f,rOe,_),b(f,qc,_),e(qc,a3),e(a3,mEe),M(cx,mEe,null),e(qc,z$r),e(qc,gEe),e(gEe,W$r),b(f,tOe,_),b(f,mr,_),M(fx,mr,null),e(mr,Q$r),e(mr,jc),e(jc,H$r),e(jc,UY),e(UY,U$r),e(jc,J$r),e(jc,JY),e(JY,Y$r),e(jc,K$r),e(mr,Z$r),e(mr,mx),e(mx,ekr),e(mx,hEe),e(hEe,okr),e(mx,rkr),e(mr,tkr),e(mr,Xt),M(gx,Xt,null),e(Xt,akr),e(Xt,pEe),e(pEe,nkr),e(Xt,skr),e(Xt,Dc),e(Dc,lkr),e(Dc,uEe),e(uEe,ikr),e(Dc,dkr),e(Dc,YY),e(YY,ckr),e(Dc,fkr),e(Xt,mkr),M(n3,Xt,null),e(mr,gkr),e(mr,Dr),M(hx,Dr,null),e(Dr,hkr),e(Dr,_Ee),e(_Ee,pkr),e(Dr,ukr),e(Dr,bn),e(bn,_kr),e(bn,bEe),e(bEe,bkr),e(bn,vkr),e(bn,vEe),e(vEe,Fkr),e(bn,Tkr),e(bn,FEe),e(FEe,Mkr),e(bn,Ekr),e(Dr,Ckr),e(Dr,TEe),e(TEe,s3),e(s3,MEe),e(MEe,wkr),e(s3,Akr),e(s3,KY),e(KY,ykr),e(s3,Lkr),e(Dr,xkr),M(l3,Dr,null),b(f,aOe,_),b(f,Gc,_),e(Gc,i3),e(i3,EEe),M(px,EEe,null),e(Gc,$kr),e(Gc,CEe),e(CEe,kkr),b(f,nOe,_),b(f,gr,_),M(ux,gr,null),e(gr,Skr),e(gr,Oc),e(Oc,Rkr),e(Oc,ZY),e(ZY,Pkr),e(Oc,Bkr),e(Oc,eK),e(eK,Ikr),e(Oc,Nkr),e(gr,qkr),e(gr,_x),e(_x,jkr),e(_x,wEe),e(wEe,Dkr),e(_x,Gkr),e(gr,Okr),e(gr,zt),M(bx,zt,null),e(zt,Vkr),e(zt,AEe),e(AEe,Xkr),e(zt,zkr),e(zt,Vc),e(Vc,Wkr),e(Vc,yEe),e(yEe,Qkr),e(Vc,Hkr),e(Vc,oK),e(oK,Ukr),e(Vc,Jkr),e(zt,Ykr),M(d3,zt,null),e(gr,Kkr),e(gr,Gr),M(vx,Gr,null),e(Gr,Zkr),e(Gr,LEe),e(LEe,eSr),e(Gr,oSr),e(Gr,vn),e(vn,rSr),e(vn,xEe),e(xEe,tSr),e(vn,aSr),e(vn,$Ee),e($Ee,nSr),e(vn,sSr),e(vn,kEe),e(kEe,lSr),e(vn,iSr),e(Gr,dSr),e(Gr,te),e(te,c3),e(c3,SEe),e(SEe,cSr),e(c3,fSr),e(c3,rK),e(rK,mSr),e(c3,gSr),e(te,hSr),e(te,f3),e(f3,REe),e(REe,pSr),e(f3,uSr),e(f3,tK),e(tK,_Sr),e(f3,bSr),e(te,vSr),e(te,m3),e(m3,PEe),e(PEe,FSr),e(m3,TSr),e(m3,aK),e(aK,MSr),e(m3,ESr),e(te,CSr),e(te,g3),e(g3,BEe),e(BEe,wSr),e(g3,ASr),e(g3,nK),e(nK,ySr),e(g3,LSr),e(te,xSr),e(te,h3),e(h3,IEe),e(IEe,$Sr),e(h3,kSr),e(h3,sK),e(sK,SSr),e(h3,RSr),e(te,PSr),e(te,p3),e(p3,NEe),e(NEe,BSr),e(p3,ISr),e(p3,lK),e(lK,NSr),e(p3,qSr),e(te,jSr),e(te,u3),e(u3,qEe),e(qEe,DSr),e(u3,GSr),e(u3,iK),e(iK,OSr),e(u3,VSr),e(te,XSr),e(te,_3),e(_3,jEe),e(jEe,zSr),e(_3,WSr),e(_3,dK),e(dK,QSr),e(_3,HSr),e(te,USr),e(te,b3),e(b3,DEe),e(DEe,JSr),e(b3,YSr),e(b3,cK),e(cK,KSr),e(b3,ZSr),e(te,eRr),e(te,v3),e(v3,GEe),e(GEe,oRr),e(v3,rRr),e(v3,fK),e(fK,tRr),e(v3,aRr),e(te,nRr),e(te,F3),e(F3,OEe),e(OEe,sRr),e(F3,lRr),e(F3,mK),e(mK,iRr),e(F3,dRr),e(te,cRr),e(te,T3),e(T3,VEe),e(VEe,fRr),e(T3,mRr),e(T3,gK),e(gK,gRr),e(T3,hRr),e(te,pRr),e(te,M3),e(M3,XEe),e(XEe,uRr),e(M3,_Rr),e(M3,hK),e(hK,bRr),e(M3,vRr),e(te,FRr),e(te,E3),e(E3,zEe),e(zEe,TRr),e(E3,MRr),e(E3,pK),e(pK,ERr),e(E3,CRr),e(te,wRr),e(te,C3),e(C3,WEe),e(WEe,ARr),e(C3,yRr),e(C3,uK),e(uK,LRr),e(C3,xRr),e(te,$Rr),e(te,w3),e(w3,QEe),e(QEe,kRr),e(w3,SRr),e(w3,_K),e(_K,RRr),e(w3,PRr),e(te,BRr),e(te,A3),e(A3,HEe),e(HEe,IRr),e(A3,NRr),e(A3,bK),e(bK,qRr),e(A3,jRr),e(te,DRr),e(te,y3),e(y3,UEe),e(UEe,GRr),e(y3,ORr),e(y3,vK),e(vK,VRr),e(y3,XRr),e(te,zRr),e(te,L3),e(L3,JEe),e(JEe,WRr),e(L3,QRr),e(L3,FK),e(FK,HRr),e(L3,URr),e(te,JRr),e(te,x3),e(x3,YEe),e(YEe,YRr),e(x3,KRr),e(x3,TK),e(TK,ZRr),e(x3,ePr),e(te,oPr),e(te,$3),e($3,KEe),e(KEe,rPr),e($3,tPr),e($3,MK),e(MK,aPr),e($3,nPr),e(te,sPr),e(te,k3),e(k3,ZEe),e(ZEe,lPr),e(k3,iPr),e(k3,EK),e(EK,dPr),e(k3,cPr),e(te,fPr),e(te,S3),e(S3,eCe),e(eCe,mPr),e(S3,gPr),e(S3,CK),e(CK,hPr),e(S3,pPr),e(te,uPr),e(te,R3),e(R3,oCe),e(oCe,_Pr),e(R3,bPr),e(R3,wK),e(wK,vPr),e(R3,FPr),e(te,TPr),e(te,P3),e(P3,rCe),e(rCe,MPr),e(P3,EPr),e(P3,AK),e(AK,CPr),e(P3,wPr),e(te,APr),e(te,B3),e(B3,tCe),e(tCe,yPr),e(B3,LPr),e(B3,yK),e(yK,xPr),e(B3,$Pr),e(Gr,kPr),M(I3,Gr,null),b(f,sOe,_),b(f,Xc,_),e(Xc,N3),e(N3,aCe),M(Fx,aCe,null),e(Xc,SPr),e(Xc,nCe),e(nCe,RPr),b(f,lOe,_),b(f,hr,_),M(Tx,hr,null),e(hr,PPr),e(hr,zc),e(zc,BPr),e(zc,LK),e(LK,IPr),e(zc,NPr),e(zc,xK),e(xK,qPr),e(zc,jPr),e(hr,DPr),e(hr,Mx),e(Mx,GPr),e(Mx,sCe),e(sCe,OPr),e(Mx,VPr),e(hr,XPr),e(hr,Wt),M(Ex,Wt,null),e(Wt,zPr),e(Wt,lCe),e(lCe,WPr),e(Wt,QPr),e(Wt,Wc),e(Wc,HPr),e(Wc,iCe),e(iCe,UPr),e(Wc,JPr),e(Wc,$K),e($K,YPr),e(Wc,KPr),e(Wt,ZPr),M(q3,Wt,null),e(hr,eBr),e(hr,Or),M(Cx,Or,null),e(Or,oBr),e(Or,dCe),e(dCe,rBr),e(Or,tBr),e(Or,Fn),e(Fn,aBr),e(Fn,cCe),e(cCe,nBr),e(Fn,sBr),e(Fn,fCe),e(fCe,lBr),e(Fn,iBr),e(Fn,mCe),e(mCe,dBr),e(Fn,cBr),e(Or,fBr),e(Or,xe),e(xe,j3),e(j3,gCe),e(gCe,mBr),e(j3,gBr),e(j3,kK),e(kK,hBr),e(j3,pBr),e(xe,uBr),e(xe,D3),e(D3,hCe),e(hCe,_Br),e(D3,bBr),e(D3,SK),e(SK,vBr),e(D3,FBr),e(xe,TBr),e(xe,G3),e(G3,pCe),e(pCe,MBr),e(G3,EBr),e(G3,RK),e(RK,CBr),e(G3,wBr),e(xe,ABr),e(xe,O3),e(O3,uCe),e(uCe,yBr),e(O3,LBr),e(O3,PK),e(PK,xBr),e(O3,$Br),e(xe,kBr),e(xe,V3),e(V3,_Ce),e(_Ce,SBr),e(V3,RBr),e(V3,BK),e(BK,PBr),e(V3,BBr),e(xe,IBr),e(xe,X3),e(X3,bCe),e(bCe,NBr),e(X3,qBr),e(X3,IK),e(IK,jBr),e(X3,DBr),e(xe,GBr),e(xe,z3),e(z3,vCe),e(vCe,OBr),e(z3,VBr),e(z3,NK),e(NK,XBr),e(z3,zBr),e(xe,WBr),e(xe,W3),e(W3,FCe),e(FCe,QBr),e(W3,HBr),e(W3,qK),e(qK,UBr),e(W3,JBr),e(xe,YBr),e(xe,Q3),e(Q3,TCe),e(TCe,KBr),e(Q3,ZBr),e(Q3,jK),e(jK,eIr),e(Q3,oIr),e(xe,rIr),e(xe,H3),e(H3,MCe),e(MCe,tIr),e(H3,aIr),e(H3,DK),e(DK,nIr),e(H3,sIr),e(Or,lIr),M(U3,Or,null),b(f,iOe,_),b(f,Qc,_),e(Qc,J3),e(J3,ECe),M(wx,ECe,null),e(Qc,iIr),e(Qc,CCe),e(CCe,dIr),b(f,dOe,_),b(f,pr,_),M(Ax,pr,null),e(pr,cIr),e(pr,Hc),e(Hc,fIr),e(Hc,GK),e(GK,mIr),e(Hc,gIr),e(Hc,OK),e(OK,hIr),e(Hc,pIr),e(pr,uIr),e(pr,yx),e(yx,_Ir),e(yx,wCe),e(wCe,bIr),e(yx,vIr),e(pr,FIr),e(pr,Qt),M(Lx,Qt,null),e(Qt,TIr),e(Qt,ACe),e(ACe,MIr),e(Qt,EIr),e(Qt,Uc),e(Uc,CIr),e(Uc,yCe),e(yCe,wIr),e(Uc,AIr),e(Uc,VK),e(VK,yIr),e(Uc,LIr),e(Qt,xIr),M(Y3,Qt,null),e(pr,$Ir),e(pr,Vr),M(xx,Vr,null),e(Vr,kIr),e(Vr,LCe),e(LCe,SIr),e(Vr,RIr),e(Vr,Tn),e(Tn,PIr),e(Tn,xCe),e(xCe,BIr),e(Tn,IIr),e(Tn,$Ce),e($Ce,NIr),e(Tn,qIr),e(Tn,kCe),e(kCe,jIr),e(Tn,DIr),e(Vr,GIr),e(Vr,Ee),e(Ee,K3),e(K3,SCe),e(SCe,OIr),e(K3,VIr),e(K3,XK),e(XK,XIr),e(K3,zIr),e(Ee,WIr),e(Ee,Z3),e(Z3,RCe),e(RCe,QIr),e(Z3,HIr),e(Z3,zK),e(zK,UIr),e(Z3,JIr),e(Ee,YIr),e(Ee,e0),e(e0,PCe),e(PCe,KIr),e(e0,ZIr),e(e0,WK),e(WK,eNr),e(e0,oNr),e(Ee,rNr),e(Ee,o0),e(o0,BCe),e(BCe,tNr),e(o0,aNr),e(o0,QK),e(QK,nNr),e(o0,sNr),e(Ee,lNr),e(Ee,r0),e(r0,ICe),e(ICe,iNr),e(r0,dNr),e(r0,HK),e(HK,cNr),e(r0,fNr),e(Ee,mNr),e(Ee,t0),e(t0,NCe),e(NCe,gNr),e(t0,hNr),e(t0,UK),e(UK,pNr),e(t0,uNr),e(Ee,_Nr),e(Ee,a0),e(a0,qCe),e(qCe,bNr),e(a0,vNr),e(a0,JK),e(JK,FNr),e(a0,TNr),e(Ee,MNr),e(Ee,n0),e(n0,jCe),e(jCe,ENr),e(n0,CNr),e(n0,YK),e(YK,wNr),e(n0,ANr),e(Ee,yNr),e(Ee,s0),e(s0,DCe),e(DCe,LNr),e(s0,xNr),e(s0,KK),e(KK,$Nr),e(s0,kNr),e(Ee,SNr),e(Ee,l0),e(l0,GCe),e(GCe,RNr),e(l0,PNr),e(l0,ZK),e(ZK,BNr),e(l0,INr),e(Ee,NNr),e(Ee,i0),e(i0,OCe),e(OCe,qNr),e(i0,jNr),e(i0,eZ),e(eZ,DNr),e(i0,GNr),e(Ee,ONr),e(Ee,d0),e(d0,VCe),e(VCe,VNr),e(d0,XNr),e(d0,oZ),e(oZ,zNr),e(d0,WNr),e(Vr,QNr),M(c0,Vr,null),b(f,cOe,_),b(f,Jc,_),e(Jc,f0),e(f0,XCe),M($x,XCe,null),e(Jc,HNr),e(Jc,zCe),e(zCe,UNr),b(f,fOe,_),b(f,ur,_),M(kx,ur,null),e(ur,JNr),e(ur,Yc),e(Yc,YNr),e(Yc,rZ),e(rZ,KNr),e(Yc,ZNr),e(Yc,tZ),e(tZ,eqr),e(Yc,oqr),e(ur,rqr),e(ur,Sx),e(Sx,tqr),e(Sx,WCe),e(WCe,aqr),e(Sx,nqr),e(ur,sqr),e(ur,Ht),M(Rx,Ht,null),e(Ht,lqr),e(Ht,QCe),e(QCe,iqr),e(Ht,dqr),e(Ht,Kc),e(Kc,cqr),e(Kc,HCe),e(HCe,fqr),e(Kc,mqr),e(Kc,aZ),e(aZ,gqr),e(Kc,hqr),e(Ht,pqr),M(m0,Ht,null),e(ur,uqr),e(ur,Xr),M(Px,Xr,null),e(Xr,_qr),e(Xr,UCe),e(UCe,bqr),e(Xr,vqr),e(Xr,Mn),e(Mn,Fqr),e(Mn,JCe),e(JCe,Tqr),e(Mn,Mqr),e(Mn,YCe),e(YCe,Eqr),e(Mn,Cqr),e(Mn,KCe),e(KCe,wqr),e(Mn,Aqr),e(Xr,yqr),e(Xr,$e),e($e,g0),e(g0,ZCe),e(ZCe,Lqr),e(g0,xqr),e(g0,nZ),e(nZ,$qr),e(g0,kqr),e($e,Sqr),e($e,h0),e(h0,e5e),e(e5e,Rqr),e(h0,Pqr),e(h0,sZ),e(sZ,Bqr),e(h0,Iqr),e($e,Nqr),e($e,p0),e(p0,o5e),e(o5e,qqr),e(p0,jqr),e(p0,lZ),e(lZ,Dqr),e(p0,Gqr),e($e,Oqr),e($e,u0),e(u0,r5e),e(r5e,Vqr),e(u0,Xqr),e(u0,iZ),e(iZ,zqr),e(u0,Wqr),e($e,Qqr),e($e,_0),e(_0,t5e),e(t5e,Hqr),e(_0,Uqr),e(_0,dZ),e(dZ,Jqr),e(_0,Yqr),e($e,Kqr),e($e,b0),e(b0,a5e),e(a5e,Zqr),e(b0,ejr),e(b0,cZ),e(cZ,ojr),e(b0,rjr),e($e,tjr),e($e,v0),e(v0,n5e),e(n5e,ajr),e(v0,njr),e(v0,fZ),e(fZ,sjr),e(v0,ljr),e($e,ijr),e($e,F0),e(F0,s5e),e(s5e,djr),e(F0,cjr),e(F0,mZ),e(mZ,fjr),e(F0,mjr),e($e,gjr),e($e,T0),e(T0,l5e),e(l5e,hjr),e(T0,pjr),e(T0,gZ),e(gZ,ujr),e(T0,_jr),e($e,bjr),e($e,M0),e(M0,i5e),e(i5e,vjr),e(M0,Fjr),e(M0,hZ),e(hZ,Tjr),e(M0,Mjr),e(Xr,Ejr),M(E0,Xr,null),b(f,mOe,_),b(f,Zc,_),e(Zc,C0),e(C0,d5e),M(Bx,d5e,null),e(Zc,Cjr),e(Zc,c5e),e(c5e,wjr),b(f,gOe,_),b(f,_r,_),M(Ix,_r,null),e(_r,Ajr),e(_r,ef),e(ef,yjr),e(ef,pZ),e(pZ,Ljr),e(ef,xjr),e(ef,uZ),e(uZ,$jr),e(ef,kjr),e(_r,Sjr),e(_r,Nx),e(Nx,Rjr),e(Nx,f5e),e(f5e,Pjr),e(Nx,Bjr),e(_r,Ijr),e(_r,Ut),M(qx,Ut,null),e(Ut,Njr),e(Ut,m5e),e(m5e,qjr),e(Ut,jjr),e(Ut,of),e(of,Djr),e(of,g5e),e(g5e,Gjr),e(of,Ojr),e(of,_Z),e(_Z,Vjr),e(of,Xjr),e(Ut,zjr),M(w0,Ut,null),e(_r,Wjr),e(_r,zr),M(jx,zr,null),e(zr,Qjr),e(zr,h5e),e(h5e,Hjr),e(zr,Ujr),e(zr,En),e(En,Jjr),e(En,p5e),e(p5e,Yjr),e(En,Kjr),e(En,u5e),e(u5e,Zjr),e(En,eDr),e(En,_5e),e(_5e,oDr),e(En,rDr),e(zr,tDr),e(zr,Pe),e(Pe,A0),e(A0,b5e),e(b5e,aDr),e(A0,nDr),e(A0,bZ),e(bZ,sDr),e(A0,lDr),e(Pe,iDr),e(Pe,y0),e(y0,v5e),e(v5e,dDr),e(y0,cDr),e(y0,vZ),e(vZ,fDr),e(y0,mDr),e(Pe,gDr),e(Pe,L0),e(L0,F5e),e(F5e,hDr),e(L0,pDr),e(L0,FZ),e(FZ,uDr),e(L0,_Dr),e(Pe,bDr),e(Pe,x0),e(x0,T5e),e(T5e,vDr),e(x0,FDr),e(x0,TZ),e(TZ,TDr),e(x0,MDr),e(Pe,EDr),e(Pe,$0),e($0,M5e),e(M5e,CDr),e($0,wDr),e($0,MZ),e(MZ,ADr),e($0,yDr),e(Pe,LDr),e(Pe,k0),e(k0,E5e),e(E5e,xDr),e(k0,$Dr),e(k0,EZ),e(EZ,kDr),e(k0,SDr),e(Pe,RDr),e(Pe,S0),e(S0,C5e),e(C5e,PDr),e(S0,BDr),e(S0,CZ),e(CZ,IDr),e(S0,NDr),e(Pe,qDr),e(Pe,R0),e(R0,w5e),e(w5e,jDr),e(R0,DDr),e(R0,wZ),e(wZ,GDr),e(R0,ODr),e(Pe,VDr),e(Pe,P0),e(P0,A5e),e(A5e,XDr),e(P0,zDr),e(P0,AZ),e(AZ,WDr),e(P0,QDr),e(zr,HDr),M(B0,zr,null),b(f,hOe,_),b(f,rf,_),e(rf,I0),e(I0,y5e),M(Dx,y5e,null),e(rf,UDr),e(rf,L5e),e(L5e,JDr),b(f,pOe,_),b(f,br,_),M(Gx,br,null),e(br,YDr),e(br,tf),e(tf,KDr),e(tf,yZ),e(yZ,ZDr),e(tf,eGr),e(tf,LZ),e(LZ,oGr),e(tf,rGr),e(br,tGr),e(br,Ox),e(Ox,aGr),e(Ox,x5e),e(x5e,nGr),e(Ox,sGr),e(br,lGr),e(br,Jt),M(Vx,Jt,null),e(Jt,iGr),e(Jt,$5e),e($5e,dGr),e(Jt,cGr),e(Jt,af),e(af,fGr),e(af,k5e),e(k5e,mGr),e(af,gGr),e(af,xZ),e(xZ,hGr),e(af,pGr),e(Jt,uGr),M(N0,Jt,null),e(br,_Gr),e(br,Wr),M(Xx,Wr,null),e(Wr,bGr),e(Wr,S5e),e(S5e,vGr),e(Wr,FGr),e(Wr,Cn),e(Cn,TGr),e(Cn,R5e),e(R5e,MGr),e(Cn,EGr),e(Cn,P5e),e(P5e,CGr),e(Cn,wGr),e(Cn,B5e),e(B5e,AGr),e(Cn,yGr),e(Wr,LGr),e(Wr,ke),e(ke,q0),e(q0,I5e),e(I5e,xGr),e(q0,$Gr),e(q0,$Z),e($Z,kGr),e(q0,SGr),e(ke,RGr),e(ke,j0),e(j0,N5e),e(N5e,PGr),e(j0,BGr),e(j0,kZ),e(kZ,IGr),e(j0,NGr),e(ke,qGr),e(ke,D0),e(D0,q5e),e(q5e,jGr),e(D0,DGr),e(D0,SZ),e(SZ,GGr),e(D0,OGr),e(ke,VGr),e(ke,G0),e(G0,j5e),e(j5e,XGr),e(G0,zGr),e(G0,RZ),e(RZ,WGr),e(G0,QGr),e(ke,HGr),e(ke,O0),e(O0,D5e),e(D5e,UGr),e(O0,JGr),e(O0,PZ),e(PZ,YGr),e(O0,KGr),e(ke,ZGr),e(ke,V0),e(V0,G5e),e(G5e,eOr),e(V0,oOr),e(V0,BZ),e(BZ,rOr),e(V0,tOr),e(ke,aOr),e(ke,X0),e(X0,O5e),e(O5e,nOr),e(X0,sOr),e(X0,IZ),e(IZ,lOr),e(X0,iOr),e(ke,dOr),e(ke,z0),e(z0,V5e),e(V5e,cOr),e(z0,fOr),e(z0,NZ),e(NZ,mOr),e(z0,gOr),e(ke,hOr),e(ke,W0),e(W0,X5e),e(X5e,pOr),e(W0,uOr),e(W0,qZ),e(qZ,_Or),e(W0,bOr),e(ke,vOr),e(ke,Q0),e(Q0,z5e),e(z5e,FOr),e(Q0,TOr),e(Q0,jZ),e(jZ,MOr),e(Q0,EOr),e(Wr,COr),M(H0,Wr,null),b(f,uOe,_),b(f,nf,_),e(nf,U0),e(U0,W5e),M(zx,W5e,null),e(nf,wOr),e(nf,Q5e),e(Q5e,AOr),b(f,_Oe,_),b(f,vr,_),M(Wx,vr,null),e(vr,yOr),e(vr,sf),e(sf,LOr),e(sf,DZ),e(DZ,xOr),e(sf,$Or),e(sf,GZ),e(GZ,kOr),e(sf,SOr),e(vr,ROr),e(vr,Qx),e(Qx,POr),e(Qx,H5e),e(H5e,BOr),e(Qx,IOr),e(vr,NOr),e(vr,Yt),M(Hx,Yt,null),e(Yt,qOr),e(Yt,U5e),e(U5e,jOr),e(Yt,DOr),e(Yt,lf),e(lf,GOr),e(lf,J5e),e(J5e,OOr),e(lf,VOr),e(lf,OZ),e(OZ,XOr),e(lf,zOr),e(Yt,WOr),M(J0,Yt,null),e(vr,QOr),e(vr,Qr),M(Ux,Qr,null),e(Qr,HOr),e(Qr,Y5e),e(Y5e,UOr),e(Qr,JOr),e(Qr,wn),e(wn,YOr),e(wn,K5e),e(K5e,KOr),e(wn,ZOr),e(wn,Z5e),e(Z5e,eVr),e(wn,oVr),e(wn,e3e),e(e3e,rVr),e(wn,tVr),e(Qr,aVr),e(Qr,Se),e(Se,Y0),e(Y0,o3e),e(o3e,nVr),e(Y0,sVr),e(Y0,VZ),e(VZ,lVr),e(Y0,iVr),e(Se,dVr),e(Se,K0),e(K0,r3e),e(r3e,cVr),e(K0,fVr),e(K0,XZ),e(XZ,mVr),e(K0,gVr),e(Se,hVr),e(Se,Z0),e(Z0,t3e),e(t3e,pVr),e(Z0,uVr),e(Z0,zZ),e(zZ,_Vr),e(Z0,bVr),e(Se,vVr),e(Se,ew),e(ew,a3e),e(a3e,FVr),e(ew,TVr),e(ew,WZ),e(WZ,MVr),e(ew,EVr),e(Se,CVr),e(Se,ow),e(ow,n3e),e(n3e,wVr),e(ow,AVr),e(ow,QZ),e(QZ,yVr),e(ow,LVr),e(Se,xVr),e(Se,rw),e(rw,s3e),e(s3e,$Vr),e(rw,kVr),e(rw,HZ),e(HZ,SVr),e(rw,RVr),e(Se,PVr),e(Se,tw),e(tw,l3e),e(l3e,BVr),e(tw,IVr),e(tw,UZ),e(UZ,NVr),e(tw,qVr),e(Se,jVr),e(Se,aw),e(aw,i3e),e(i3e,DVr),e(aw,GVr),e(aw,JZ),e(JZ,OVr),e(aw,VVr),e(Se,XVr),e(Se,nw),e(nw,d3e),e(d3e,zVr),e(nw,WVr),e(nw,YZ),e(YZ,QVr),e(nw,HVr),e(Se,UVr),e(Se,sw),e(sw,c3e),e(c3e,JVr),e(sw,YVr),e(sw,KZ),e(KZ,KVr),e(sw,ZVr),e(Qr,eXr),M(lw,Qr,null),b(f,bOe,_),b(f,df,_),e(df,iw),e(iw,f3e),M(Jx,f3e,null),e(df,oXr),e(df,m3e),e(m3e,rXr),b(f,vOe,_),b(f,Fr,_),M(Yx,Fr,null),e(Fr,tXr),e(Fr,cf),e(cf,aXr),e(cf,ZZ),e(ZZ,nXr),e(cf,sXr),e(cf,eee),e(eee,lXr),e(cf,iXr),e(Fr,dXr),e(Fr,Kx),e(Kx,cXr),e(Kx,g3e),e(g3e,fXr),e(Kx,mXr),e(Fr,gXr),e(Fr,Kt),M(Zx,Kt,null),e(Kt,hXr),e(Kt,h3e),e(h3e,pXr),e(Kt,uXr),e(Kt,ff),e(ff,_Xr),e(ff,p3e),e(p3e,bXr),e(ff,vXr),e(ff,oee),e(oee,FXr),e(ff,TXr),e(Kt,MXr),M(dw,Kt,null),e(Fr,EXr),e(Fr,Hr),M(e$,Hr,null),e(Hr,CXr),e(Hr,u3e),e(u3e,wXr),e(Hr,AXr),e(Hr,An),e(An,yXr),e(An,_3e),e(_3e,LXr),e(An,xXr),e(An,b3e),e(b3e,$Xr),e(An,kXr),e(An,v3e),e(v3e,SXr),e(An,RXr),e(Hr,PXr),e(Hr,Oe),e(Oe,cw),e(cw,F3e),e(F3e,BXr),e(cw,IXr),e(cw,ree),e(ree,NXr),e(cw,qXr),e(Oe,jXr),e(Oe,fw),e(fw,T3e),e(T3e,DXr),e(fw,GXr),e(fw,tee),e(tee,OXr),e(fw,VXr),e(Oe,XXr),e(Oe,mw),e(mw,M3e),e(M3e,zXr),e(mw,WXr),e(mw,aee),e(aee,QXr),e(mw,HXr),e(Oe,UXr),e(Oe,gw),e(gw,E3e),e(E3e,JXr),e(gw,YXr),e(gw,nee),e(nee,KXr),e(gw,ZXr),e(Oe,ezr),e(Oe,hw),e(hw,C3e),e(C3e,ozr),e(hw,rzr),e(hw,see),e(see,tzr),e(hw,azr),e(Oe,nzr),e(Oe,pw),e(pw,w3e),e(w3e,szr),e(pw,lzr),e(pw,lee),e(lee,izr),e(pw,dzr),e(Oe,czr),e(Oe,uw),e(uw,A3e),e(A3e,fzr),e(uw,mzr),e(uw,iee),e(iee,gzr),e(uw,hzr),e(Oe,pzr),e(Oe,_w),e(_w,y3e),e(y3e,uzr),e(_w,_zr),e(_w,dee),e(dee,bzr),e(_w,vzr),e(Hr,Fzr),M(bw,Hr,null),b(f,FOe,_),b(f,mf,_),e(mf,vw),e(vw,L3e),M(o$,L3e,null),e(mf,Tzr),e(mf,x3e),e(x3e,Mzr),b(f,TOe,_),b(f,Tr,_),M(r$,Tr,null),e(Tr,Ezr),e(Tr,gf),e(gf,Czr),e(gf,cee),e(cee,wzr),e(gf,Azr),e(gf,fee),e(fee,yzr),e(gf,Lzr),e(Tr,xzr),e(Tr,t$),e(t$,$zr),e(t$,$3e),e($3e,kzr),e(t$,Szr),e(Tr,Rzr),e(Tr,Zt),M(a$,Zt,null),e(Zt,Pzr),e(Zt,k3e),e(k3e,Bzr),e(Zt,Izr),e(Zt,hf),e(hf,Nzr),e(hf,S3e),e(S3e,qzr),e(hf,jzr),e(hf,mee),e(mee,Dzr),e(hf,Gzr),e(Zt,Ozr),M(Fw,Zt,null),e(Tr,Vzr),e(Tr,Ur),M(n$,Ur,null),e(Ur,Xzr),e(Ur,R3e),e(R3e,zzr),e(Ur,Wzr),e(Ur,yn),e(yn,Qzr),e(yn,P3e),e(P3e,Hzr),e(yn,Uzr),e(yn,B3e),e(B3e,Jzr),e(yn,Yzr),e(yn,I3e),e(I3e,Kzr),e(yn,Zzr),e(Ur,eWr),e(Ur,Ve),e(Ve,Tw),e(Tw,N3e),e(N3e,oWr),e(Tw,rWr),e(Tw,gee),e(gee,tWr),e(Tw,aWr),e(Ve,nWr),e(Ve,Mw),e(Mw,q3e),e(q3e,sWr),e(Mw,lWr),e(Mw,hee),e(hee,iWr),e(Mw,dWr),e(Ve,cWr),e(Ve,Ew),e(Ew,j3e),e(j3e,fWr),e(Ew,mWr),e(Ew,pee),e(pee,gWr),e(Ew,hWr),e(Ve,pWr),e(Ve,Cw),e(Cw,D3e),e(D3e,uWr),e(Cw,_Wr),e(Cw,uee),e(uee,bWr),e(Cw,vWr),e(Ve,FWr),e(Ve,ww),e(ww,G3e),e(G3e,TWr),e(ww,MWr),e(ww,_ee),e(_ee,EWr),e(ww,CWr),e(Ve,wWr),e(Ve,Aw),e(Aw,O3e),e(O3e,AWr),e(Aw,yWr),e(Aw,bee),e(bee,LWr),e(Aw,xWr),e(Ve,$Wr),e(Ve,yw),e(yw,V3e),e(V3e,kWr),e(yw,SWr),e(yw,vee),e(vee,RWr),e(yw,PWr),e(Ve,BWr),e(Ve,Lw),e(Lw,X3e),e(X3e,IWr),e(Lw,NWr),e(Lw,Fee),e(Fee,qWr),e(Lw,jWr),e(Ur,DWr),M(xw,Ur,null),b(f,MOe,_),b(f,pf,_),e(pf,$w),e($w,z3e),M(s$,z3e,null),e(pf,GWr),e(pf,W3e),e(W3e,OWr),b(f,EOe,_),b(f,Mr,_),M(l$,Mr,null),e(Mr,VWr),e(Mr,uf),e(uf,XWr),e(uf,Tee),e(Tee,zWr),e(uf,WWr),e(uf,Mee),e(Mee,QWr),e(uf,HWr),e(Mr,UWr),e(Mr,i$),e(i$,JWr),e(i$,Q3e),e(Q3e,YWr),e(i$,KWr),e(Mr,ZWr),e(Mr,ea),M(d$,ea,null),e(ea,eQr),e(ea,H3e),e(H3e,oQr),e(ea,rQr),e(ea,_f),e(_f,tQr),e(_f,U3e),e(U3e,aQr),e(_f,nQr),e(_f,Eee),e(Eee,sQr),e(_f,lQr),e(ea,iQr),M(kw,ea,null),e(Mr,dQr),e(Mr,Jr),M(c$,Jr,null),e(Jr,cQr),e(Jr,J3e),e(J3e,fQr),e(Jr,mQr),e(Jr,Ln),e(Ln,gQr),e(Ln,Y3e),e(Y3e,hQr),e(Ln,pQr),e(Ln,K3e),e(K3e,uQr),e(Ln,_Qr),e(Ln,Z3e),e(Z3e,bQr),e(Ln,vQr),e(Jr,FQr),e(Jr,e0e),e(e0e,Sw),e(Sw,o0e),e(o0e,TQr),e(Sw,MQr),e(Sw,Cee),e(Cee,EQr),e(Sw,CQr),e(Jr,wQr),M(Rw,Jr,null),b(f,COe,_),b(f,bf,_),e(bf,Pw),e(Pw,r0e),M(f$,r0e,null),e(bf,AQr),e(bf,t0e),e(t0e,yQr),b(f,wOe,_),b(f,Er,_),M(m$,Er,null),e(Er,LQr),e(Er,vf),e(vf,xQr),e(vf,wee),e(wee,$Qr),e(vf,kQr),e(vf,Aee),e(Aee,SQr),e(vf,RQr),e(Er,PQr),e(Er,g$),e(g$,BQr),e(g$,a0e),e(a0e,IQr),e(g$,NQr),e(Er,qQr),e(Er,oa),M(h$,oa,null),e(oa,jQr),e(oa,n0e),e(n0e,DQr),e(oa,GQr),e(oa,Ff),e(Ff,OQr),e(Ff,s0e),e(s0e,VQr),e(Ff,XQr),e(Ff,yee),e(yee,zQr),e(Ff,WQr),e(oa,QQr),M(Bw,oa,null),e(Er,HQr),e(Er,Yr),M(p$,Yr,null),e(Yr,UQr),e(Yr,l0e),e(l0e,JQr),e(Yr,YQr),e(Yr,xn),e(xn,KQr),e(xn,i0e),e(i0e,ZQr),e(xn,eHr),e(xn,d0e),e(d0e,oHr),e(xn,rHr),e(xn,c0e),e(c0e,tHr),e(xn,aHr),e(Yr,nHr),e(Yr,u$),e(u$,Iw),e(Iw,f0e),e(f0e,sHr),e(Iw,lHr),e(Iw,Lee),e(Lee,iHr),e(Iw,dHr),e(u$,cHr),e(u$,Nw),e(Nw,m0e),e(m0e,fHr),e(Nw,mHr),e(Nw,xee),e(xee,gHr),e(Nw,hHr),e(Yr,pHr),M(qw,Yr,null),b(f,AOe,_),b(f,Tf,_),e(Tf,jw),e(jw,g0e),M(_$,g0e,null),e(Tf,uHr),e(Tf,h0e),e(h0e,_Hr),b(f,yOe,_),b(f,Cr,_),M(b$,Cr,null),e(Cr,bHr),e(Cr,Mf),e(Mf,vHr),e(Mf,$ee),e($ee,FHr),e(Mf,THr),e(Mf,kee),e(kee,MHr),e(Mf,EHr),e(Cr,CHr),e(Cr,v$),e(v$,wHr),e(v$,p0e),e(p0e,AHr),e(v$,yHr),e(Cr,LHr),e(Cr,ra),M(F$,ra,null),e(ra,xHr),e(ra,u0e),e(u0e,$Hr),e(ra,kHr),e(ra,Ef),e(Ef,SHr),e(Ef,_0e),e(_0e,RHr),e(Ef,PHr),e(Ef,See),e(See,BHr),e(Ef,IHr),e(ra,NHr),M(Dw,ra,null),e(Cr,qHr),e(Cr,Kr),M(T$,Kr,null),e(Kr,jHr),e(Kr,b0e),e(b0e,DHr),e(Kr,GHr),e(Kr,$n),e($n,OHr),e($n,v0e),e(v0e,VHr),e($n,XHr),e($n,F0e),e(F0e,zHr),e($n,WHr),e($n,T0e),e(T0e,QHr),e($n,HHr),e(Kr,UHr),e(Kr,M0e),e(M0e,Gw),e(Gw,E0e),e(E0e,JHr),e(Gw,YHr),e(Gw,Ree),e(Ree,KHr),e(Gw,ZHr),e(Kr,eUr),M(Ow,Kr,null),LOe=!0},p(f,[_]){const M$={};_&2&&(M$.$$scope={dirty:_,ctx:f}),Sf.$set(M$);const C0e={};_&2&&(C0e.$$scope={dirty:_,ctx:f}),qg.$set(C0e);const w0e={};_&2&&(w0e.$$scope={dirty:_,ctx:f}),Fh.$set(w0e);const A0e={};_&2&&(A0e.$$scope={dirty:_,ctx:f}),op.$set(A0e);const E$={};_&2&&(E$.$$scope={dirty:_,ctx:f}),rp.$set(E$);const y0e={};_&2&&(y0e.$$scope={dirty:_,ctx:f}),Mp.$set(y0e);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:f}),Ep.$set(kn);const L0e={};_&2&&(L0e.$$scope={dirty:_,ctx:f}),Ap.$set(L0e);const x0e={};_&2&&(x0e.$$scope={dirty:_,ctx:f}),C_.$set(x0e);const $0e={};_&2&&($0e.$$scope={dirty:_,ctx:f}),A_.$set($0e);const C$={};_&2&&(C$.$$scope={dirty:_,ctx:f}),_2.$set(C$);const k0e={};_&2&&(k0e.$$scope={dirty:_,ctx:f}),v2.$set(k0e);const w$={};_&2&&(w$.$$scope={dirty:_,ctx:f}),n1.$set(w$);const S0e={};_&2&&(S0e.$$scope={dirty:_,ctx:f}),l1.$set(S0e);const A$={};_&2&&(A$.$$scope={dirty:_,ctx:f}),z1.$set(A$);const R0e={};_&2&&(R0e.$$scope={dirty:_,ctx:f}),Q1.$set(R0e);const P0e={};_&2&&(P0e.$$scope={dirty:_,ctx:f}),f7.$set(P0e);const B0e={};_&2&&(B0e.$$scope={dirty:_,ctx:f}),g7.$set(B0e);const Cf={};_&2&&(Cf.$$scope={dirty:_,ctx:f}),ib.$set(Cf);const I0e={};_&2&&(I0e.$$scope={dirty:_,ctx:f}),cb.$set(I0e);const N0e={};_&2&&(N0e.$$scope={dirty:_,ctx:f}),Gb.$set(N0e);const q0e={};_&2&&(q0e.$$scope={dirty:_,ctx:f}),Vb.$set(q0e);const y$={};_&2&&(y$.$$scope={dirty:_,ctx:f}),Jb.$set(y$);const j0e={};_&2&&(j0e.$$scope={dirty:_,ctx:f}),Kb.$set(j0e);const D0e={};_&2&&(D0e.$$scope={dirty:_,ctx:f}),P4.$set(D0e);const G0e={};_&2&&(G0e.$$scope={dirty:_,ctx:f}),I4.$set(G0e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:f}),Cv.$set(tt);const L$={};_&2&&(L$.$$scope={dirty:_,ctx:f}),Av.$set(L$);const O0e={};_&2&&(O0e.$$scope={dirty:_,ctx:f}),xv.$set(O0e);const x$={};_&2&&(x$.$$scope={dirty:_,ctx:f}),kv.$set(x$);const V0e={};_&2&&(V0e.$$scope={dirty:_,ctx:f}),zv.$set(V0e);const at={};_&2&&(at.$$scope={dirty:_,ctx:f}),Qv.$set(at);const X0e={};_&2&&(X0e.$$scope={dirty:_,ctx:f}),Jv.$set(X0e);const wf={};_&2&&(wf.$$scope={dirty:_,ctx:f}),Kv.$set(wf);const z0e={};_&2&&(z0e.$$scope={dirty:_,ctx:f}),oF.$set(z0e);const W0e={};_&2&&(W0e.$$scope={dirty:_,ctx:f}),tF.$set(W0e);const y={};_&2&&(y.$$scope={dirty:_,ctx:f}),hF.$set(y);const Vw={};_&2&&(Vw.$$scope={dirty:_,ctx:f}),uF.$set(Vw);const Q0e={};_&2&&(Q0e.$$scope={dirty:_,ctx:f}),EF.$set(Q0e);const H0e={};_&2&&(H0e.$$scope={dirty:_,ctx:f}),wF.$set(H0e);const Xw={};_&2&&(Xw.$$scope={dirty:_,ctx:f}),NF.$set(Xw);const U0e={};_&2&&(U0e.$$scope={dirty:_,ctx:f}),jF.$set(U0e);const J0e={};_&2&&(J0e.$$scope={dirty:_,ctx:f}),VF.$set(J0e);const zw={};_&2&&(zw.$$scope={dirty:_,ctx:f}),zF.$set(zw);const Y0e={};_&2&&(Y0e.$$scope={dirty:_,ctx:f}),KF.$set(Y0e);const K0e={};_&2&&(K0e.$$scope={dirty:_,ctx:f}),eT.$set(K0e);const Ww={};_&2&&(Ww.$$scope={dirty:_,ctx:f}),nT.$set(Ww);const Z0e={};_&2&&(Z0e.$$scope={dirty:_,ctx:f}),lT.$set(Z0e);const ewe={};_&2&&(ewe.$$scope={dirty:_,ctx:f}),fT.$set(ewe);const Qw={};_&2&&(Qw.$$scope={dirty:_,ctx:f}),gT.$set(Qw);const owe={};_&2&&(owe.$$scope={dirty:_,ctx:f}),uT.$set(owe);const rwe={};_&2&&(rwe.$$scope={dirty:_,ctx:f}),bT.$set(rwe);const Hw={};_&2&&(Hw.$$scope={dirty:_,ctx:f}),CT.$set(Hw);const twe={};_&2&&(twe.$$scope={dirty:_,ctx:f}),AT.$set(twe);const awe={};_&2&&(awe.$$scope={dirty:_,ctx:f}),xT.$set(awe);const Uw={};_&2&&(Uw.$$scope={dirty:_,ctx:f}),kT.$set(Uw);const nwe={};_&2&&(nwe.$$scope={dirty:_,ctx:f}),wM.$set(nwe);const swe={};_&2&&(swe.$$scope={dirty:_,ctx:f}),yM.$set(swe);const Jw={};_&2&&(Jw.$$scope={dirty:_,ctx:f}),YM.$set(Jw);const lwe={};_&2&&(lwe.$$scope={dirty:_,ctx:f}),ZM.$set(lwe);const iwe={};_&2&&(iwe.$$scope={dirty:_,ctx:f}),gE.$set(iwe);const Yw={};_&2&&(Yw.$$scope={dirty:_,ctx:f}),pE.$set(Yw);const dwe={};_&2&&(dwe.$$scope={dirty:_,ctx:f}),TE.$set(dwe);const cwe={};_&2&&(cwe.$$scope={dirty:_,ctx:f}),EE.$set(cwe);const Kw={};_&2&&(Kw.$$scope={dirty:_,ctx:f}),XE.$set(Kw);const fwe={};_&2&&(fwe.$$scope={dirty:_,ctx:f}),WE.$set(fwe);const mwe={};_&2&&(mwe.$$scope={dirty:_,ctx:f}),tC.$set(mwe);const Zw={};_&2&&(Zw.$$scope={dirty:_,ctx:f}),nC.$set(Zw);const gwe={};_&2&&(gwe.$$scope={dirty:_,ctx:f}),SC.$set(gwe);const hwe={};_&2&&(hwe.$$scope={dirty:_,ctx:f}),PC.$set(hwe);const eA={};_&2&&(eA.$$scope={dirty:_,ctx:f}),KC.$set(eA);const pwe={};_&2&&(pwe.$$scope={dirty:_,ctx:f}),e5.$set(pwe);const uwe={};_&2&&(uwe.$$scope={dirty:_,ctx:f}),t5.$set(uwe);const oA={};_&2&&(oA.$$scope={dirty:_,ctx:f}),n5.$set(oA);const _we={};_&2&&(_we.$$scope={dirty:_,ctx:f}),l5.$set(_we);const bwe={};_&2&&(bwe.$$scope={dirty:_,ctx:f}),d5.$set(bwe);const rA={};_&2&&(rA.$$scope={dirty:_,ctx:f}),$5.$set(rA);const vwe={};_&2&&(vwe.$$scope={dirty:_,ctx:f}),S5.$set(vwe);const Fwe={};_&2&&(Fwe.$$scope={dirty:_,ctx:f}),Z5.$set(Fwe);const tA={};_&2&&(tA.$$scope={dirty:_,ctx:f}),o3.$set(tA);const Twe={};_&2&&(Twe.$$scope={dirty:_,ctx:f}),t3.$set(Twe);const Mwe={};_&2&&(Mwe.$$scope={dirty:_,ctx:f}),n3.$set(Mwe);const aA={};_&2&&(aA.$$scope={dirty:_,ctx:f}),l3.$set(aA);const Ewe={};_&2&&(Ewe.$$scope={dirty:_,ctx:f}),d3.$set(Ewe);const Cwe={};_&2&&(Cwe.$$scope={dirty:_,ctx:f}),I3.$set(Cwe);const nA={};_&2&&(nA.$$scope={dirty:_,ctx:f}),q3.$set(nA);const wwe={};_&2&&(wwe.$$scope={dirty:_,ctx:f}),U3.$set(wwe);const Awe={};_&2&&(Awe.$$scope={dirty:_,ctx:f}),Y3.$set(Awe);const sA={};_&2&&(sA.$$scope={dirty:_,ctx:f}),c0.$set(sA);const ywe={};_&2&&(ywe.$$scope={dirty:_,ctx:f}),m0.$set(ywe);const Lwe={};_&2&&(Lwe.$$scope={dirty:_,ctx:f}),E0.$set(Lwe);const lA={};_&2&&(lA.$$scope={dirty:_,ctx:f}),w0.$set(lA);const xwe={};_&2&&(xwe.$$scope={dirty:_,ctx:f}),B0.$set(xwe);const $we={};_&2&&($we.$$scope={dirty:_,ctx:f}),N0.$set($we);const iA={};_&2&&(iA.$$scope={dirty:_,ctx:f}),H0.$set(iA);const kwe={};_&2&&(kwe.$$scope={dirty:_,ctx:f}),J0.$set(kwe);const Swe={};_&2&&(Swe.$$scope={dirty:_,ctx:f}),lw.$set(Swe);const dA={};_&2&&(dA.$$scope={dirty:_,ctx:f}),dw.$set(dA);const Rwe={};_&2&&(Rwe.$$scope={dirty:_,ctx:f}),bw.$set(Rwe);const Pwe={};_&2&&(Pwe.$$scope={dirty:_,ctx:f}),Fw.$set(Pwe);const cA={};_&2&&(cA.$$scope={dirty:_,ctx:f}),xw.$set(cA);const Bwe={};_&2&&(Bwe.$$scope={dirty:_,ctx:f}),kw.$set(Bwe);const Iwe={};_&2&&(Iwe.$$scope={dirty:_,ctx:f}),Rw.$set(Iwe);const fA={};_&2&&(fA.$$scope={dirty:_,ctx:f}),Bw.$set(fA);const Nwe={};_&2&&(Nwe.$$scope={dirty:_,ctx:f}),qw.$set(Nwe);const qwe={};_&2&&(qwe.$$scope={dirty:_,ctx:f}),Dw.$set(qwe);const mA={};_&2&&(mA.$$scope={dirty:_,ctx:f}),Ow.$set(mA)},i(f){LOe||(E(d.$$.fragment,f),E(xa.$$.fragment,f),E(my.$$.fragment,f),E(gy.$$.fragment,f),E(Sf.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(by.$$.fragment,f),E(qg.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(Ty.$$.fragment,f),E(Cy.$$.fragment,f),E(Fh.$$.fragment,f),E(wy.$$.fragment,f),E(Ay.$$.fragment,f),E(yy.$$.fragment,f),E($y.$$.fragment,f),E(op.$$.fragment,f),E(rp.$$.fragment,f),E(ky.$$.fragment,f),E(Sy.$$.fragment,f),E(Ry.$$.fragment,f),E(Iy.$$.fragment,f),E(Mp.$$.fragment,f),E(Ep.$$.fragment,f),E(Ny.$$.fragment,f),E(qy.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(Ap.$$.fragment,f),E(Oy.$$.fragment,f),E(C_.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Wy.$$.fragment,f),E(A_.$$.fragment,f),E(Qy.$$.fragment,f),E(_2.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(v2.$$.fragment,f),E(Ky.$$.fragment,f),E(n1.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(l1.$$.fragment,f),E(tL.$$.fragment,f),E(z1.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(Q1.$$.fragment,f),E(iL.$$.fragment,f),E(f7.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(g7.$$.fragment,f),E(gL.$$.fragment,f),E(ib.$$.fragment,f),E(hL.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(cb.$$.fragment,f),E(bL.$$.fragment,f),E(Gb.$$.fragment,f),E(vL.$$.fragment,f),E(FL.$$.fragment,f),E(ML.$$.fragment,f),E(Vb.$$.fragment,f),E(EL.$$.fragment,f),E(Jb.$$.fragment,f),E(CL.$$.fragment,f),E(wL.$$.fragment,f),E(yL.$$.fragment,f),E(Kb.$$.fragment,f),E(LL.$$.fragment,f),E(P4.$$.fragment,f),E(xL.$$.fragment,f),E($L.$$.fragment,f),E(SL.$$.fragment,f),E(I4.$$.fragment,f),E(RL.$$.fragment,f),E(Cv.$$.fragment,f),E(PL.$$.fragment,f),E(BL.$$.fragment,f),E(NL.$$.fragment,f),E(Av.$$.fragment,f),E(qL.$$.fragment,f),E(xv.$$.fragment,f),E(jL.$$.fragment,f),E(DL.$$.fragment,f),E(OL.$$.fragment,f),E(kv.$$.fragment,f),E(VL.$$.fragment,f),E(zv.$$.fragment,f),E(XL.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(Qv.$$.fragment,f),E(HL.$$.fragment,f),E(Jv.$$.fragment,f),E(UL.$$.fragment,f),E(JL.$$.fragment,f),E(KL.$$.fragment,f),E(Kv.$$.fragment,f),E(ZL.$$.fragment,f),E(oF.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(tF.$$.fragment,f),E(a8.$$.fragment,f),E(hF.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(uF.$$.fragment,f),E(d8.$$.fragment,f),E(EF.$$.fragment,f),E(c8.$$.fragment,f),E(f8.$$.fragment,f),E(g8.$$.fragment,f),E(wF.$$.fragment,f),E(h8.$$.fragment,f),E(NF.$$.fragment,f),E(p8.$$.fragment,f),E(u8.$$.fragment,f),E(b8.$$.fragment,f),E(jF.$$.fragment,f),E(v8.$$.fragment,f),E(VF.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(zF.$$.fragment,f),E(w8.$$.fragment,f),E(KF.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(eT.$$.fragment,f),E($8.$$.fragment,f),E(nT.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(P8.$$.fragment,f),E(lT.$$.fragment,f),E(B8.$$.fragment,f),E(fT.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(gT.$$.fragment,f),E(G8.$$.fragment,f),E(uT.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(bT.$$.fragment,f),E(W8.$$.fragment,f),E(CT.$$.fragment,f),E(Q8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(AT.$$.fragment,f),E(Y8.$$.fragment,f),E(xT.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(o9.$$.fragment,f),E(kT.$$.fragment,f),E(r9.$$.fragment,f),E(wM.$$.fragment,f),E(t9.$$.fragment,f),E(a9.$$.fragment,f),E(s9.$$.fragment,f),E(yM.$$.fragment,f),E(l9.$$.fragment,f),E(YM.$$.fragment,f),E(i9.$$.fragment,f),E(d9.$$.fragment,f),E(f9.$$.fragment,f),E(ZM.$$.fragment,f),E(m9.$$.fragment,f),E(gE.$$.fragment,f),E(g9.$$.fragment,f),E(h9.$$.fragment,f),E(u9.$$.fragment,f),E(pE.$$.fragment,f),E(_9.$$.fragment,f),E(TE.$$.fragment,f),E(b9.$$.fragment,f),E(v9.$$.fragment,f),E(T9.$$.fragment,f),E(EE.$$.fragment,f),E(M9.$$.fragment,f),E(XE.$$.fragment,f),E(E9.$$.fragment,f),E(C9.$$.fragment,f),E(A9.$$.fragment,f),E(WE.$$.fragment,f),E(y9.$$.fragment,f),E(tC.$$.fragment,f),E(L9.$$.fragment,f),E(x9.$$.fragment,f),E(k9.$$.fragment,f),E(nC.$$.fragment,f),E(S9.$$.fragment,f),E(SC.$$.fragment,f),E(R9.$$.fragment,f),E(P9.$$.fragment,f),E(I9.$$.fragment,f),E(PC.$$.fragment,f),E(N9.$$.fragment,f),E(KC.$$.fragment,f),E(q9.$$.fragment,f),E(j9.$$.fragment,f),E(G9.$$.fragment,f),E(e5.$$.fragment,f),E(O9.$$.fragment,f),E(t5.$$.fragment,f),E(X9.$$.fragment,f),E(z9.$$.fragment,f),E(Q9.$$.fragment,f),E(n5.$$.fragment,f),E(H9.$$.fragment,f),E(l5.$$.fragment,f),E(U9.$$.fragment,f),E(J9.$$.fragment,f),E(K9.$$.fragment,f),E(d5.$$.fragment,f),E(Z9.$$.fragment,f),E($5.$$.fragment,f),E(ex.$$.fragment,f),E(ox.$$.fragment,f),E(tx.$$.fragment,f),E(S5.$$.fragment,f),E(ax.$$.fragment,f),E(Z5.$$.fragment,f),E(nx.$$.fragment,f),E(sx.$$.fragment,f),E(ix.$$.fragment,f),E(o3.$$.fragment,f),E(dx.$$.fragment,f),E(t3.$$.fragment,f),E(cx.$$.fragment,f),E(fx.$$.fragment,f),E(gx.$$.fragment,f),E(n3.$$.fragment,f),E(hx.$$.fragment,f),E(l3.$$.fragment,f),E(px.$$.fragment,f),E(ux.$$.fragment,f),E(bx.$$.fragment,f),E(d3.$$.fragment,f),E(vx.$$.fragment,f),E(I3.$$.fragment,f),E(Fx.$$.fragment,f),E(Tx.$$.fragment,f),E(Ex.$$.fragment,f),E(q3.$$.fragment,f),E(Cx.$$.fragment,f),E(U3.$$.fragment,f),E(wx.$$.fragment,f),E(Ax.$$.fragment,f),E(Lx.$$.fragment,f),E(Y3.$$.fragment,f),E(xx.$$.fragment,f),E(c0.$$.fragment,f),E($x.$$.fragment,f),E(kx.$$.fragment,f),E(Rx.$$.fragment,f),E(m0.$$.fragment,f),E(Px.$$.fragment,f),E(E0.$$.fragment,f),E(Bx.$$.fragment,f),E(Ix.$$.fragment,f),E(qx.$$.fragment,f),E(w0.$$.fragment,f),E(jx.$$.fragment,f),E(B0.$$.fragment,f),E(Dx.$$.fragment,f),E(Gx.$$.fragment,f),E(Vx.$$.fragment,f),E(N0.$$.fragment,f),E(Xx.$$.fragment,f),E(H0.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(Hx.$$.fragment,f),E(J0.$$.fragment,f),E(Ux.$$.fragment,f),E(lw.$$.fragment,f),E(Jx.$$.fragment,f),E(Yx.$$.fragment,f),E(Zx.$$.fragment,f),E(dw.$$.fragment,f),E(e$.$$.fragment,f),E(bw.$$.fragment,f),E(o$.$$.fragment,f),E(r$.$$.fragment,f),E(a$.$$.fragment,f),E(Fw.$$.fragment,f),E(n$.$$.fragment,f),E(xw.$$.fragment,f),E(s$.$$.fragment,f),E(l$.$$.fragment,f),E(d$.$$.fragment,f),E(kw.$$.fragment,f),E(c$.$$.fragment,f),E(Rw.$$.fragment,f),E(f$.$$.fragment,f),E(m$.$$.fragment,f),E(h$.$$.fragment,f),E(Bw.$$.fragment,f),E(p$.$$.fragment,f),E(qw.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(F$.$$.fragment,f),E(Dw.$$.fragment,f),E(T$.$$.fragment,f),E(Ow.$$.fragment,f),LOe=!0)},o(f){C(d.$$.fragment,f),C(xa.$$.fragment,f),C(my.$$.fragment,f),C(gy.$$.fragment,f),C(Sf.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(by.$$.fragment,f),C(qg.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(Ty.$$.fragment,f),C(Cy.$$.fragment,f),C(Fh.$$.fragment,f),C(wy.$$.fragment,f),C(Ay.$$.fragment,f),C(yy.$$.fragment,f),C($y.$$.fragment,f),C(op.$$.fragment,f),C(rp.$$.fragment,f),C(ky.$$.fragment,f),C(Sy.$$.fragment,f),C(Ry.$$.fragment,f),C(Iy.$$.fragment,f),C(Mp.$$.fragment,f),C(Ep.$$.fragment,f),C(Ny.$$.fragment,f),C(qy.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(Ap.$$.fragment,f),C(Oy.$$.fragment,f),C(C_.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Wy.$$.fragment,f),C(A_.$$.fragment,f),C(Qy.$$.fragment,f),C(_2.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(v2.$$.fragment,f),C(Ky.$$.fragment,f),C(n1.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(l1.$$.fragment,f),C(tL.$$.fragment,f),C(z1.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(Q1.$$.fragment,f),C(iL.$$.fragment,f),C(f7.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(g7.$$.fragment,f),C(gL.$$.fragment,f),C(ib.$$.fragment,f),C(hL.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(cb.$$.fragment,f),C(bL.$$.fragment,f),C(Gb.$$.fragment,f),C(vL.$$.fragment,f),C(FL.$$.fragment,f),C(ML.$$.fragment,f),C(Vb.$$.fragment,f),C(EL.$$.fragment,f),C(Jb.$$.fragment,f),C(CL.$$.fragment,f),C(wL.$$.fragment,f),C(yL.$$.fragment,f),C(Kb.$$.fragment,f),C(LL.$$.fragment,f),C(P4.$$.fragment,f),C(xL.$$.fragment,f),C($L.$$.fragment,f),C(SL.$$.fragment,f),C(I4.$$.fragment,f),C(RL.$$.fragment,f),C(Cv.$$.fragment,f),C(PL.$$.fragment,f),C(BL.$$.fragment,f),C(NL.$$.fragment,f),C(Av.$$.fragment,f),C(qL.$$.fragment,f),C(xv.$$.fragment,f),C(jL.$$.fragment,f),C(DL.$$.fragment,f),C(OL.$$.fragment,f),C(kv.$$.fragment,f),C(VL.$$.fragment,f),C(zv.$$.fragment,f),C(XL.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(Qv.$$.fragment,f),C(HL.$$.fragment,f),C(Jv.$$.fragment,f),C(UL.$$.fragment,f),C(JL.$$.fragment,f),C(KL.$$.fragment,f),C(Kv.$$.fragment,f),C(ZL.$$.fragment,f),C(oF.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(tF.$$.fragment,f),C(a8.$$.fragment,f),C(hF.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(uF.$$.fragment,f),C(d8.$$.fragment,f),C(EF.$$.fragment,f),C(c8.$$.fragment,f),C(f8.$$.fragment,f),C(g8.$$.fragment,f),C(wF.$$.fragment,f),C(h8.$$.fragment,f),C(NF.$$.fragment,f),C(p8.$$.fragment,f),C(u8.$$.fragment,f),C(b8.$$.fragment,f),C(jF.$$.fragment,f),C(v8.$$.fragment,f),C(VF.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(zF.$$.fragment,f),C(w8.$$.fragment,f),C(KF.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(eT.$$.fragment,f),C($8.$$.fragment,f),C(nT.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(P8.$$.fragment,f),C(lT.$$.fragment,f),C(B8.$$.fragment,f),C(fT.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(gT.$$.fragment,f),C(G8.$$.fragment,f),C(uT.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(bT.$$.fragment,f),C(W8.$$.fragment,f),C(CT.$$.fragment,f),C(Q8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(AT.$$.fragment,f),C(Y8.$$.fragment,f),C(xT.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(o9.$$.fragment,f),C(kT.$$.fragment,f),C(r9.$$.fragment,f),C(wM.$$.fragment,f),C(t9.$$.fragment,f),C(a9.$$.fragment,f),C(s9.$$.fragment,f),C(yM.$$.fragment,f),C(l9.$$.fragment,f),C(YM.$$.fragment,f),C(i9.$$.fragment,f),C(d9.$$.fragment,f),C(f9.$$.fragment,f),C(ZM.$$.fragment,f),C(m9.$$.fragment,f),C(gE.$$.fragment,f),C(g9.$$.fragment,f),C(h9.$$.fragment,f),C(u9.$$.fragment,f),C(pE.$$.fragment,f),C(_9.$$.fragment,f),C(TE.$$.fragment,f),C(b9.$$.fragment,f),C(v9.$$.fragment,f),C(T9.$$.fragment,f),C(EE.$$.fragment,f),C(M9.$$.fragment,f),C(XE.$$.fragment,f),C(E9.$$.fragment,f),C(C9.$$.fragment,f),C(A9.$$.fragment,f),C(WE.$$.fragment,f),C(y9.$$.fragment,f),C(tC.$$.fragment,f),C(L9.$$.fragment,f),C(x9.$$.fragment,f),C(k9.$$.fragment,f),C(nC.$$.fragment,f),C(S9.$$.fragment,f),C(SC.$$.fragment,f),C(R9.$$.fragment,f),C(P9.$$.fragment,f),C(I9.$$.fragment,f),C(PC.$$.fragment,f),C(N9.$$.fragment,f),C(KC.$$.fragment,f),C(q9.$$.fragment,f),C(j9.$$.fragment,f),C(G9.$$.fragment,f),C(e5.$$.fragment,f),C(O9.$$.fragment,f),C(t5.$$.fragment,f),C(X9.$$.fragment,f),C(z9.$$.fragment,f),C(Q9.$$.fragment,f),C(n5.$$.fragment,f),C(H9.$$.fragment,f),C(l5.$$.fragment,f),C(U9.$$.fragment,f),C(J9.$$.fragment,f),C(K9.$$.fragment,f),C(d5.$$.fragment,f),C(Z9.$$.fragment,f),C($5.$$.fragment,f),C(ex.$$.fragment,f),C(ox.$$.fragment,f),C(tx.$$.fragment,f),C(S5.$$.fragment,f),C(ax.$$.fragment,f),C(Z5.$$.fragment,f),C(nx.$$.fragment,f),C(sx.$$.fragment,f),C(ix.$$.fragment,f),C(o3.$$.fragment,f),C(dx.$$.fragment,f),C(t3.$$.fragment,f),C(cx.$$.fragment,f),C(fx.$$.fragment,f),C(gx.$$.fragment,f),C(n3.$$.fragment,f),C(hx.$$.fragment,f),C(l3.$$.fragment,f),C(px.$$.fragment,f),C(ux.$$.fragment,f),C(bx.$$.fragment,f),C(d3.$$.fragment,f),C(vx.$$.fragment,f),C(I3.$$.fragment,f),C(Fx.$$.fragment,f),C(Tx.$$.fragment,f),C(Ex.$$.fragment,f),C(q3.$$.fragment,f),C(Cx.$$.fragment,f),C(U3.$$.fragment,f),C(wx.$$.fragment,f),C(Ax.$$.fragment,f),C(Lx.$$.fragment,f),C(Y3.$$.fragment,f),C(xx.$$.fragment,f),C(c0.$$.fragment,f),C($x.$$.fragment,f),C(kx.$$.fragment,f),C(Rx.$$.fragment,f),C(m0.$$.fragment,f),C(Px.$$.fragment,f),C(E0.$$.fragment,f),C(Bx.$$.fragment,f),C(Ix.$$.fragment,f),C(qx.$$.fragment,f),C(w0.$$.fragment,f),C(jx.$$.fragment,f),C(B0.$$.fragment,f),C(Dx.$$.fragment,f),C(Gx.$$.fragment,f),C(Vx.$$.fragment,f),C(N0.$$.fragment,f),C(Xx.$$.fragment,f),C(H0.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(Hx.$$.fragment,f),C(J0.$$.fragment,f),C(Ux.$$.fragment,f),C(lw.$$.fragment,f),C(Jx.$$.fragment,f),C(Yx.$$.fragment,f),C(Zx.$$.fragment,f),C(dw.$$.fragment,f),C(e$.$$.fragment,f),C(bw.$$.fragment,f),C(o$.$$.fragment,f),C(r$.$$.fragment,f),C(a$.$$.fragment,f),C(Fw.$$.fragment,f),C(n$.$$.fragment,f),C(xw.$$.fragment,f),C(s$.$$.fragment,f),C(l$.$$.fragment,f),C(d$.$$.fragment,f),C(kw.$$.fragment,f),C(c$.$$.fragment,f),C(Rw.$$.fragment,f),C(f$.$$.fragment,f),C(m$.$$.fragment,f),C(h$.$$.fragment,f),C(Bw.$$.fragment,f),C(p$.$$.fragment,f),C(qw.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(F$.$$.fragment,f),C(Dw.$$.fragment,f),C(T$.$$.fragment,f),C(Ow.$$.fragment,f),LOe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(yf),f&&t(nt),f&&t(Ge),f&&t(We),f&&t(xf),w(xa,f),f&&t(Qe),f&&t(Ae),f&&t(Co),f&&t($a),f&&t(EDe),f&&t(yi),w(my),f&&t(CDe),f&&t(In),f&&t(wDe),w(gy,f),f&&t(ADe),f&&t(Ok),f&&t(yDe),w(Sf,f),f&&t(LDe),f&&t(Li),w(hy),f&&t(xDe),f&&t(wo),w(py),w(by),w(qg),w(vy),f&&t($De),f&&t($i),w(Fy),f&&t(kDe),f&&t(Ao),w(Ty),w(Cy),w(Fh),w(wy),f&&t(SDe),f&&t(ki),w(Ay),f&&t(RDe),f&&t(yo),w(yy),w($y),w(op),w(rp),w(ky),f&&t(PDe),f&&t(Si),w(Sy),f&&t(BDe),f&&t(Lo),w(Ry),w(Iy),w(Mp),w(Ep),w(Ny),f&&t(IDe),f&&t(Pi),w(qy),f&&t(NDe),f&&t(xo),w(jy),w(Gy),w(Ap),w(Oy),w(C_),f&&t(qDe),f&&t(Ni),w(Vy),f&&t(jDe),f&&t($o),w(Xy),w(Wy),w(A_),w(Qy),w(_2),f&&t(DDe),f&&t(Di),w(Hy),f&&t(GDe),f&&t(ko),w(Uy),w(Yy),w(v2),w(Ky),w(n1),f&&t(ODe),f&&t(Vi),w(Zy),f&&t(VDe),f&&t(So),w(eL),w(rL),w(l1),w(tL),w(z1),f&&t(XDe),f&&t(Wi),w(aL),f&&t(zDe),f&&t(Ro),w(nL),w(lL),w(Q1),w(iL),w(f7),f&&t(WDe),f&&t(Ui),w(dL),f&&t(QDe),f&&t(Po),w(cL),w(mL),w(g7),w(gL),w(ib),f&&t(HDe),f&&t(Ki),w(hL),f&&t(UDe),f&&t(Bo),w(pL),w(_L),w(cb),w(bL),w(Gb),f&&t(JDe),f&&t(od),w(vL),f&&t(YDe),f&&t(Io),w(FL),w(ML),w(Vb),w(EL),w(Jb),f&&t(KDe),f&&t(ad),w(CL),f&&t(ZDe),f&&t(No),w(wL),w(yL),w(Kb),w(LL),w(P4),f&&t(eGe),f&&t(ld),w(xL),f&&t(oGe),f&&t(qo),w($L),w(SL),w(I4),w(RL),w(Cv),f&&t(rGe),f&&t(cd),w(PL),f&&t(tGe),f&&t(jo),w(BL),w(NL),w(Av),w(qL),w(xv),f&&t(aGe),f&&t(gd),w(jL),f&&t(nGe),f&&t(Do),w(DL),w(OL),w(kv),w(VL),w(zv),f&&t(sGe),f&&t(ud),w(XL),f&&t(lGe),f&&t(Go),w(zL),w(QL),w(Qv),w(HL),w(Jv),f&&t(iGe),f&&t(vd),w(UL),f&&t(dGe),f&&t(Oo),w(JL),w(KL),w(Kv),w(ZL),w(oF),f&&t(cGe),f&&t(Md),w(e8),f&&t(fGe),f&&t(Vo),w(o8),w(t8),w(tF),w(a8),w(hF),f&&t(mGe),f&&t(wd),w(n8),f&&t(gGe),f&&t(Xo),w(s8),w(i8),w(uF),w(d8),w(EF),f&&t(hGe),f&&t(Ld),w(c8),f&&t(pGe),f&&t(zo),w(f8),w(g8),w(wF),w(h8),w(NF),f&&t(uGe),f&&t(kd),w(p8),f&&t(_Ge),f&&t(Wo),w(u8),w(b8),w(jF),w(v8),w(VF),f&&t(bGe),f&&t(Pd),w(T8),f&&t(vGe),f&&t(Qo),w(M8),w(C8),w(zF),w(w8),w(KF),f&&t(FGe),f&&t(Nd),w(A8),f&&t(TGe),f&&t(Ho),w(y8),w(x8),w(eT),w($8),w(nT),f&&t(MGe),f&&t(Gd),w(k8),f&&t(EGe),f&&t(Uo),w(S8),w(P8),w(lT),w(B8),w(fT),f&&t(CGe),f&&t(Xd),w(N8),f&&t(wGe),f&&t(Jo),w(q8),w(D8),w(gT),w(G8),w(uT),f&&t(AGe),f&&t(Qd),w(O8),f&&t(yGe),f&&t(Yo),w(V8),w(z8),w(bT),w(W8),w(CT),f&&t(LGe),f&&t(Jd),w(Q8),f&&t(xGe),f&&t(Ko),w(H8),w(J8),w(AT),w(Y8),w(xT),f&&t($Ge),f&&t(Zd),w(K8),f&&t(kGe),f&&t(Zo),w(Z8),w(o9),w(kT),w(r9),w(wM),f&&t(SGe),f&&t(rc),w(t9),f&&t(RGe),f&&t(er),w(a9),w(s9),w(yM),w(l9),w(YM),f&&t(PGe),f&&t(nc),w(i9),f&&t(BGe),f&&t(or),w(d9),w(f9),w(ZM),w(m9),w(gE),f&&t(IGe),f&&t(ic),w(g9),f&&t(NGe),f&&t(rr),w(h9),w(u9),w(pE),w(_9),w(TE),f&&t(qGe),f&&t(fc),w(b9),f&&t(jGe),f&&t(tr),w(v9),w(T9),w(EE),w(M9),w(XE),f&&t(DGe),f&&t(hc),w(E9),f&&t(GGe),f&&t(ar),w(C9),w(A9),w(WE),w(y9),w(tC),f&&t(OGe),f&&t(_c),w(L9),f&&t(VGe),f&&t(nr),w(x9),w(k9),w(nC),w(S9),w(SC),f&&t(XGe),f&&t(Fc),w(R9),f&&t(zGe),f&&t(sr),w(P9),w(I9),w(PC),w(N9),w(KC),f&&t(WGe),f&&t(Ec),w(q9),f&&t(QGe),f&&t(lr),w(j9),w(G9),w(e5),w(O9),w(t5),f&&t(HGe),f&&t(Ac),w(X9),f&&t(UGe),f&&t(ir),w(z9),w(Q9),w(n5),w(H9),w(l5),f&&t(JGe),f&&t(xc),w(U9),f&&t(YGe),f&&t(dr),w(J9),w(K9),w(d5),w(Z9),w($5),f&&t(KGe),f&&t(Sc),w(ex),f&&t(ZGe),f&&t(cr),w(ox),w(tx),w(S5),w(ax),w(Z5),f&&t(eOe),f&&t(Bc),w(nx),f&&t(oOe),f&&t(fr),w(sx),w(ix),w(o3),w(dx),w(t3),f&&t(rOe),f&&t(qc),w(cx),f&&t(tOe),f&&t(mr),w(fx),w(gx),w(n3),w(hx),w(l3),f&&t(aOe),f&&t(Gc),w(px),f&&t(nOe),f&&t(gr),w(ux),w(bx),w(d3),w(vx),w(I3),f&&t(sOe),f&&t(Xc),w(Fx),f&&t(lOe),f&&t(hr),w(Tx),w(Ex),w(q3),w(Cx),w(U3),f&&t(iOe),f&&t(Qc),w(wx),f&&t(dOe),f&&t(pr),w(Ax),w(Lx),w(Y3),w(xx),w(c0),f&&t(cOe),f&&t(Jc),w($x),f&&t(fOe),f&&t(ur),w(kx),w(Rx),w(m0),w(Px),w(E0),f&&t(mOe),f&&t(Zc),w(Bx),f&&t(gOe),f&&t(_r),w(Ix),w(qx),w(w0),w(jx),w(B0),f&&t(hOe),f&&t(rf),w(Dx),f&&t(pOe),f&&t(br),w(Gx),w(Vx),w(N0),w(Xx),w(H0),f&&t(uOe),f&&t(nf),w(zx),f&&t(_Oe),f&&t(vr),w(Wx),w(Hx),w(J0),w(Ux),w(lw),f&&t(bOe),f&&t(df),w(Jx),f&&t(vOe),f&&t(Fr),w(Yx),w(Zx),w(dw),w(e$),w(bw),f&&t(FOe),f&&t(mf),w(o$),f&&t(TOe),f&&t(Tr),w(r$),w(a$),w(Fw),w(n$),w(xw),f&&t(MOe),f&&t(pf),w(s$),f&&t(EOe),f&&t(Mr),w(l$),w(d$),w(kw),w(c$),w(Rw),f&&t(COe),f&&t(bf),w(f$),f&&t(wOe),f&&t(Er),w(m$),w(h$),w(Bw),w(p$),w(qw),f&&t(AOe),f&&t(Tf),w(_$),f&&t(yOe),f&&t(Cr),w(b$),w(F$),w(Dw),w(T$),w(Ow)}}}const zqt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Wqt(L){return XIt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Zqt extends DIt{constructor(g){super();GIt(this,g,Wqt,Xqt,OIt,{})}}export{Zqt as default,zqt as metadata};
