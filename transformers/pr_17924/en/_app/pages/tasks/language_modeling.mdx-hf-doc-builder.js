import{S as hn,i as un,s as cn,e as i,k as c,w as F,t as l,M as dn,c as p,d as s,m as d,a as f,x as D,h as n,b as _,G as t,g as m,y as z,q as C,o as L,B as P,v as gn,L as mn}from"../../chunks/vendor-hf-doc-builder.js";import{T as Mt}from"../../chunks/Tip-hf-doc-builder.js";import{Y as Zs}from"../../chunks/Youtube-hf-doc-builder.js";import{I as bt}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{C as re}from"../../chunks/CodeBlock-hf-doc-builder.js";import{F as ml,M as Ft}from"../../chunks/Markdown-hf-doc-builder.js";function _n(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y,g;return{c(){a=i("p"),w=l("You can fine-tune other architectures for language modeling such as "),o=i("a"),$=l("GPT-Neo"),v=l(", "),k=i("a"),b=l("GPT-J"),T=l(", and "),j=i("a"),E=l("BERT"),A=l(", following the same steps presented in this guide!"),B=c(),S=i("p"),q=l("See the text generation "),M=i("a"),U=l("task page"),R=l(" and fill mask "),G=i("a"),Y=l("task page"),g=l(" for more information about their associated models, datasets, and metrics."),this.h()},l(x){a=p(x,"P",{});var O=f(a);w=n(O,"You can fine-tune other architectures for language modeling such as "),o=p(O,"A",{href:!0,rel:!0});var W=f(o);$=n(W,"GPT-Neo"),W.forEach(s),v=n(O,", "),k=p(O,"A",{href:!0,rel:!0});var N=f(k);b=n(N,"GPT-J"),N.forEach(s),T=n(O,", and "),j=p(O,"A",{href:!0,rel:!0});var ne=f(j);E=n(ne,"BERT"),ne.forEach(s),A=n(O,", following the same steps presented in this guide!"),O.forEach(s),B=d(x),S=p(x,"P",{});var te=f(S);q=n(te,"See the text generation "),M=p(te,"A",{href:!0,rel:!0});var Q=f(M);U=n(Q,"task page"),Q.forEach(s),R=n(te," and fill mask "),G=p(te,"A",{href:!0,rel:!0});var se=f(G);Y=n(se,"task page"),se.forEach(s),g=n(te," for more information about their associated models, datasets, and metrics."),te.forEach(s),this.h()},h(){_(o,"href","https://huggingface.co/EleutherAI/gpt-neo-125M"),_(o,"rel","nofollow"),_(k,"href","https://huggingface.co/EleutherAI/gpt-j-6B"),_(k,"rel","nofollow"),_(j,"href","https://huggingface.co/bert-base-uncased"),_(j,"rel","nofollow"),_(M,"href","https://huggingface.co/tasks/text-generation"),_(M,"rel","nofollow"),_(G,"href","https://huggingface.co/tasks/fill-mask"),_(G,"rel","nofollow")},m(x,O){m(x,a,O),t(a,w),t(a,o),t(o,$),t(a,v),t(a,k),t(k,b),t(a,T),t(a,j),t(j,E),t(a,A),m(x,B,O),m(x,S,O),t(S,q),t(S,M),t(M,U),t(S,R),t(S,G),t(G,Y),t(S,g)},d(x){x&&s(a),x&&s(B),x&&s(S)}}}function $n(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y;return b=new re({props:{code:`from transformers import DataCollatorForLanguageModeling

tokenizer.pad_token = tokenizer.eos_token
data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForLanguageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.pad_token = tokenizer.eos_token
<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=<span class="hljs-literal">False</span>)`}}),G=new re({props:{code:`from transformers import DataCollatorForLanguageModeling

tokenizer.pad_token = tokenizer.eos_token
data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=0.15)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForLanguageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer.pad_token = tokenizer.eos_token
<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm_probability=<span class="hljs-number">0.15</span>)`}}),{c(){a=i("p"),w=l("You can use the end of sequence token as the padding token, and set "),o=i("code"),$=l("mlm=False"),v=l(". This will use the inputs as labels shifted to the right by one element:"),k=c(),F(b.$$.fragment),T=c(),j=i("p"),E=l("For masked language modeling, use the same "),A=i("a"),B=l("DataCollatorForLanguageModeling"),S=l(" except you should specify "),q=i("code"),M=l("mlm_probability"),U=l(" to randomly mask tokens each time you iterate over the data."),R=c(),F(G.$$.fragment),this.h()},l(g){a=p(g,"P",{});var x=f(a);w=n(x,"You can use the end of sequence token as the padding token, and set "),o=p(x,"CODE",{});var O=f(o);$=n(O,"mlm=False"),O.forEach(s),v=n(x,". This will use the inputs as labels shifted to the right by one element:"),x.forEach(s),k=d(g),D(b.$$.fragment,g),T=d(g),j=p(g,"P",{});var W=f(j);E=n(W,"For masked language modeling, use the same "),A=p(W,"A",{href:!0});var N=f(A);B=n(N,"DataCollatorForLanguageModeling"),N.forEach(s),S=n(W," except you should specify "),q=p(W,"CODE",{});var ne=f(q);M=n(ne,"mlm_probability"),ne.forEach(s),U=n(W," to randomly mask tokens each time you iterate over the data."),W.forEach(s),R=d(g),D(G.$$.fragment,g),this.h()},h(){_(A,"href","/docs/transformers/pr_17924/en/main_classes/data_collator#transformers.DataCollatorForLanguageModeling")},m(g,x){m(g,a,x),t(a,w),t(a,o),t(o,$),t(a,v),m(g,k,x),z(b,g,x),m(g,T,x),m(g,j,x),t(j,E),t(j,A),t(A,B),t(j,S),t(j,q),t(q,M),t(j,U),m(g,R,x),z(G,g,x),Y=!0},p:mn,i(g){Y||(C(b.$$.fragment,g),C(G.$$.fragment,g),Y=!0)},o(g){L(b.$$.fragment,g),L(G.$$.fragment,g),Y=!1},d(g){g&&s(a),g&&s(k),P(b,g),g&&s(T),g&&s(j),g&&s(R),P(G,g)}}}function kn(J){let a,w;return a=new Ft({props:{$$slots:{default:[$n]},$$scope:{ctx:J}}}),{c(){F(a.$$.fragment)},l(o){D(a.$$.fragment,o)},m(o,$){z(a,o,$),w=!0},p(o,$){const v={};$&2&&(v.$$scope={dirty:$,ctx:o}),a.$set(v)},i(o){w||(C(a.$$.fragment,o),w=!0)},o(o){L(a.$$.fragment,o),w=!1},d(o){P(a,o)}}}function wn(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y;return b=new re({props:{code:`from transformers import DataCollatorForLanguageModeling

data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False, return_tensors="tf")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForLanguageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=<span class="hljs-literal">False</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}),G=new re({props:{code:`from transformers import DataCollatorForLanguageModeling

data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=False, return_tensors="tf")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorForLanguageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span>data_collator = DataCollatorForLanguageModeling(tokenizer=tokenizer, mlm=<span class="hljs-literal">False</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`}}),{c(){a=i("p"),w=l("You can use the end of sequence token as the padding token, and set "),o=i("code"),$=l("mlm=False"),v=l(". This will use the inputs as labels shifted to the right by one element:"),k=c(),F(b.$$.fragment),T=c(),j=i("p"),E=l("For masked language modeling, use the same "),A=i("a"),B=l("DataCollatorForLanguageModeling"),S=l(" except you should specify "),q=i("code"),M=l("mlm_probability"),U=l(" to randomly mask tokens each time you iterate over the data."),R=c(),F(G.$$.fragment),this.h()},l(g){a=p(g,"P",{});var x=f(a);w=n(x,"You can use the end of sequence token as the padding token, and set "),o=p(x,"CODE",{});var O=f(o);$=n(O,"mlm=False"),O.forEach(s),v=n(x,". This will use the inputs as labels shifted to the right by one element:"),x.forEach(s),k=d(g),D(b.$$.fragment,g),T=d(g),j=p(g,"P",{});var W=f(j);E=n(W,"For masked language modeling, use the same "),A=p(W,"A",{href:!0});var N=f(A);B=n(N,"DataCollatorForLanguageModeling"),N.forEach(s),S=n(W," except you should specify "),q=p(W,"CODE",{});var ne=f(q);M=n(ne,"mlm_probability"),ne.forEach(s),U=n(W," to randomly mask tokens each time you iterate over the data."),W.forEach(s),R=d(g),D(G.$$.fragment,g),this.h()},h(){_(A,"href","/docs/transformers/pr_17924/en/main_classes/data_collator#transformers.DataCollatorForLanguageModeling")},m(g,x){m(g,a,x),t(a,w),t(a,o),t(o,$),t(a,v),m(g,k,x),z(b,g,x),m(g,T,x),m(g,j,x),t(j,E),t(j,A),t(A,B),t(j,S),t(j,q),t(q,M),t(j,U),m(g,R,x),z(G,g,x),Y=!0},p:mn,i(g){Y||(C(b.$$.fragment,g),C(G.$$.fragment,g),Y=!0)},o(g){L(b.$$.fragment,g),L(G.$$.fragment,g),Y=!1},d(g){g&&s(a),g&&s(k),P(b,g),g&&s(T),g&&s(j),g&&s(R),P(G,g)}}}function jn(J){let a,w;return a=new Ft({props:{$$slots:{default:[wn]},$$scope:{ctx:J}}}),{c(){F(a.$$.fragment)},l(o){D(a.$$.fragment,o)},m(o,$){z(a,o,$),w=!0},p(o,$){const v={};$&2&&(v.$$scope={dirty:$,ctx:o}),a.$set(v)},i(o){w||(C(a.$$.fragment,o),w=!0)},o(o){L(a.$$.fragment,o),w=!1},d(o){P(a,o)}}}function yn(J){let a,w,o,$,v,k,b,T;return{c(){a=i("p"),w=l("If you aren\u2019t familiar with fine-tuning a model with the "),o=i("a"),$=l("Trainer"),v=l(", take a look at the basic tutorial "),k=i("a"),b=l("here"),T=l("!"),this.h()},l(j){a=p(j,"P",{});var E=f(a);w=n(E,"If you aren\u2019t familiar with fine-tuning a model with the "),o=p(E,"A",{href:!0});var A=f(o);$=n(A,"Trainer"),A.forEach(s),v=n(E,", take a look at the basic tutorial "),k=p(E,"A",{href:!0});var B=f(k);b=n(B,"here"),B.forEach(s),T=n(E,"!"),E.forEach(s),this.h()},h(){_(o,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.Trainer"),_(k,"href","../training#finetune-with-trainer")},m(j,E){m(j,a,E),t(a,w),t(a,o),t(o,$),t(a,v),t(a,k),t(k,b),t(a,T)},d(j){j&&s(a)}}}function bn(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y,g,x,O,W,N,ne,te,Q,se,V,le,he,K,X,pe;return b=new re({props:{code:`from transformers import AutoModelForCausalLM, TrainingArguments, Trainer

model = AutoModelForCausalLM.from_pretrained("distilgpt2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForCausalLM, TrainingArguments, Trainer

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)`}}),j=new Mt({props:{$$slots:{default:[yn]},$$scope:{ctx:J}}}),X=new re({props:{code:`training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    weight_decay=0.01,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=lm_dataset["train"],
    eval_dataset=lm_dataset["test"],
    data_collator=data_collator,
)

trainer.train()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>training_args = TrainingArguments(
<span class="hljs-meta">... </span>    output_dir=<span class="hljs-string">&quot;./results&quot;</span>,
<span class="hljs-meta">... </span>    evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
<span class="hljs-meta">... </span>    learning_rate=<span class="hljs-number">2e-5</span>,
<span class="hljs-meta">... </span>    weight_decay=<span class="hljs-number">0.01</span>,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>trainer = Trainer(
<span class="hljs-meta">... </span>    model=model,
<span class="hljs-meta">... </span>    args=training_args,
<span class="hljs-meta">... </span>    train_dataset=lm_dataset[<span class="hljs-string">&quot;train&quot;</span>],
<span class="hljs-meta">... </span>    eval_dataset=lm_dataset[<span class="hljs-string">&quot;test&quot;</span>],
<span class="hljs-meta">... </span>    data_collator=data_collator,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>trainer.train()`}}),{c(){a=i("p"),w=l("Load DistilGPT2 with "),o=i("a"),$=l("AutoModelForCausalLM"),v=l(":"),k=c(),F(b.$$.fragment),T=c(),F(j.$$.fragment),E=c(),A=i("p"),B=l("At this point, only three steps remain:"),S=c(),q=i("ol"),M=i("li"),U=l("Define your training hyperparameters in "),R=i("a"),G=l("TrainingArguments"),Y=l("."),g=c(),x=i("li"),O=l("Pass the training arguments to "),W=i("a"),N=l("Trainer"),ne=l(" along with the model, datasets, and data collator."),te=c(),Q=i("li"),se=l("Call "),V=i("a"),le=l("train()"),he=l(" to fine-tune your model."),K=c(),F(X.$$.fragment),this.h()},l(h){a=p(h,"P",{});var I=f(a);w=n(I,"Load DistilGPT2 with "),o=p(I,"A",{href:!0});var Z=f(o);$=n(Z,"AutoModelForCausalLM"),Z.forEach(s),v=n(I,":"),I.forEach(s),k=d(h),D(b.$$.fragment,h),T=d(h),D(j.$$.fragment,h),E=d(h),A=p(h,"P",{});var me=f(A);B=n(me,"At this point, only three steps remain:"),me.forEach(s),S=d(h),q=p(h,"OL",{});var H=f(q);M=p(H,"LI",{});var ie=f(M);U=n(ie,"Define your training hyperparameters in "),R=p(ie,"A",{href:!0});var ee=f(R);G=n(ee,"TrainingArguments"),ee.forEach(s),Y=n(ie,"."),ie.forEach(s),g=d(H),x=p(H,"LI",{});var ae=f(x);O=n(ae,"Pass the training arguments to "),W=p(ae,"A",{href:!0});var ue=f(W);N=n(ue,"Trainer"),ue.forEach(s),ne=n(ae," along with the model, datasets, and data collator."),ae.forEach(s),te=d(H),Q=p(H,"LI",{});var oe=f(Q);se=n(oe,"Call "),V=p(oe,"A",{href:!0});var ce=f(V);le=n(ce,"train()"),ce.forEach(s),he=n(oe," to fine-tune your model."),oe.forEach(s),H.forEach(s),K=d(h),D(X.$$.fragment,h),this.h()},h(){_(o,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoModelForCausalLM"),_(R,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.TrainingArguments"),_(W,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.Trainer"),_(V,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.Trainer.train")},m(h,I){m(h,a,I),t(a,w),t(a,o),t(o,$),t(a,v),m(h,k,I),z(b,h,I),m(h,T,I),z(j,h,I),m(h,E,I),m(h,A,I),t(A,B),m(h,S,I),m(h,q,I),t(q,M),t(M,U),t(M,R),t(R,G),t(M,Y),t(q,g),t(q,x),t(x,O),t(x,W),t(W,N),t(x,ne),t(q,te),t(q,Q),t(Q,se),t(Q,V),t(V,le),t(Q,he),m(h,K,I),z(X,h,I),pe=!0},p(h,I){const Z={};I&2&&(Z.$$scope={dirty:I,ctx:h}),j.$set(Z)},i(h){pe||(C(b.$$.fragment,h),C(j.$$.fragment,h),C(X.$$.fragment,h),pe=!0)},o(h){L(b.$$.fragment,h),L(j.$$.fragment,h),L(X.$$.fragment,h),pe=!1},d(h){h&&s(a),h&&s(k),P(b,h),h&&s(T),P(j,h),h&&s(E),h&&s(A),h&&s(S),h&&s(q),h&&s(K),P(X,h)}}}function vn(J){let a,w;return a=new Ft({props:{$$slots:{default:[bn]},$$scope:{ctx:J}}}),{c(){F(a.$$.fragment)},l(o){D(a.$$.fragment,o)},m(o,$){z(a,o,$),w=!0},p(o,$){const v={};$&2&&(v.$$scope={dirty:$,ctx:o}),a.$set(v)},i(o){w||(C(a.$$.fragment,o),w=!0)},o(o){L(a.$$.fragment,o),w=!1},d(o){P(a,o)}}}function xn(J){let a,w,o,$,v;return{c(){a=i("p"),w=l("If you aren\u2019t familiar with fine-tuning a model with Keras, take a look at the basic tutorial "),o=i("a"),$=l("here"),v=l("!"),this.h()},l(k){a=p(k,"P",{});var b=f(a);w=n(b,"If you aren\u2019t familiar with fine-tuning a model with Keras, take a look at the basic tutorial "),o=p(b,"A",{href:!0});var T=f(o);$=n(T,"here"),T.forEach(s),v=n(b,"!"),b.forEach(s),this.h()},h(){_(o,"href","training#finetune-with-keras")},m(k,b){m(k,a,b),t(a,w),t(a,o),t(o,$),t(a,v)},d(k){k&&s(a)}}}function En(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y,g,x,O,W,N,ne,te,Q,se,V,le,he,K,X,pe,h,I,Z,me,H,ie,ee,ae,ue,oe,ce,fe,je;return S=new re({props:{code:`tf_train_set = lm_dataset["train"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels"],
    dummy_labels=True,
    shuffle=True,
    batch_size=16,
    collate_fn=data_collator,
)

tf_test_set = lm_dataset["test"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels"],
    dummy_labels=True,
    shuffle=False,
    batch_size=16,
    collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_train_set = lm_dataset[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    dummy_labels=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_test_set = lm_dataset[<span class="hljs-string">&quot;test&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    dummy_labels=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">False</span>,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),M=new Mt({props:{$$slots:{default:[xn]},$$scope:{ctx:J}}}),g=new re({props:{code:`from transformers import create_optimizer, AdamWeightDecay

optimizer = AdamWeightDecay(learning_rate=2e-5, weight_decay_rate=0.01)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer, AdamWeightDecay

<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer = AdamWeightDecay(learning_rate=<span class="hljs-number">2e-5</span>, weight_decay_rate=<span class="hljs-number">0.01</span>)`}}),se=new re({props:{code:`from transformers import TFAutoModelForCausalLM

model = TFAutoModelForCausalLM.from_pretrained("distilgpt2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)`}}),Z=new re({props:{code:`import tensorflow as tf

model.compile(optimizer=optimizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)`}}),fe=new re({props:{code:"model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=3)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=<span class="hljs-number">3</span>)'}}),{c(){a=i("p"),w=l("To fine-tune a model in TensorFlow, start by converting your datasets to the "),o=i("code"),$=l("tf.data.Dataset"),v=l(" format with "),k=i("a"),b=l("to_tf_dataset"),T=l(". Specify inputs and labels in "),j=i("code"),E=l("columns"),A=l(", whether to shuffle the dataset order, batch size, and the data collator:"),B=c(),F(S.$$.fragment),q=c(),F(M.$$.fragment),U=c(),R=i("p"),G=l("Set up an optimizer function, learning rate, and some training hyperparameters:"),Y=c(),F(g.$$.fragment),x=c(),O=i("p"),W=l("Load DistilGPT2 with "),N=i("a"),ne=l("TFAutoModelForCausalLM"),te=l(":"),Q=c(),F(se.$$.fragment),V=c(),le=i("p"),he=l("Configure the model for training with "),K=i("a"),X=i("code"),pe=l("compile"),h=l(":"),I=c(),F(Z.$$.fragment),me=c(),H=i("p"),ie=l("Call "),ee=i("a"),ae=i("code"),ue=l("fit"),oe=l(" to fine-tune the model:"),ce=c(),F(fe.$$.fragment),this.h()},l(r){a=p(r,"P",{});var y=f(a);w=n(y,"To fine-tune a model in TensorFlow, start by converting your datasets to the "),o=p(y,"CODE",{});var _e=f(o);$=n(_e,"tf.data.Dataset"),_e.forEach(s),v=n(y," format with "),k=p(y,"A",{href:!0,rel:!0});var xe=f(k);b=n(xe,"to_tf_dataset"),xe.forEach(s),T=n(y,". Specify inputs and labels in "),j=p(y,"CODE",{});var ye=f(j);E=n(ye,"columns"),ye.forEach(s),A=n(y,", whether to shuffle the dataset order, batch size, and the data collator:"),y.forEach(s),B=d(r),D(S.$$.fragment,r),q=d(r),D(M.$$.fragment,r),U=d(r),R=p(r,"P",{});var Ee=f(R);G=n(Ee,"Set up an optimizer function, learning rate, and some training hyperparameters:"),Ee.forEach(s),Y=d(r),D(g.$$.fragment,r),x=d(r),O=p(r,"P",{});var de=f(O);W=n(de,"Load DistilGPT2 with "),N=p(de,"A",{href:!0});var Ce=f(N);ne=n(Ce,"TFAutoModelForCausalLM"),Ce.forEach(s),te=n(de,":"),de.forEach(s),Q=d(r),D(se.$$.fragment,r),V=d(r),le=p(r,"P",{});var $e=f(le);he=n($e,"Configure the model for training with "),K=p($e,"A",{href:!0,rel:!0});var be=f(K);X=p(be,"CODE",{});var Te=f(X);pe=n(Te,"compile"),Te.forEach(s),be.forEach(s),h=n($e,":"),$e.forEach(s),I=d(r),D(Z.$$.fragment,r),me=d(r),H=p(r,"P",{});var ge=f(H);ie=n(ge,"Call "),ee=p(ge,"A",{href:!0,rel:!0});var Le=f(ee);ae=p(Le,"CODE",{});var Ae=f(ae);ue=n(Ae,"fit"),Ae.forEach(s),Le.forEach(s),oe=n(ge," to fine-tune the model:"),ge.forEach(s),ce=d(r),D(fe.$$.fragment,r),this.h()},h(){_(k,"href","https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.to_tf_dataset"),_(k,"rel","nofollow"),_(N,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.TFAutoModelForCausalLM"),_(K,"href","https://keras.io/api/models/model_training_apis/#compile-method"),_(K,"rel","nofollow"),_(ee,"href","https://keras.io/api/models/model_training_apis/#fit-method"),_(ee,"rel","nofollow")},m(r,y){m(r,a,y),t(a,w),t(a,o),t(o,$),t(a,v),t(a,k),t(k,b),t(a,T),t(a,j),t(j,E),t(a,A),m(r,B,y),z(S,r,y),m(r,q,y),z(M,r,y),m(r,U,y),m(r,R,y),t(R,G),m(r,Y,y),z(g,r,y),m(r,x,y),m(r,O,y),t(O,W),t(O,N),t(N,ne),t(O,te),m(r,Q,y),z(se,r,y),m(r,V,y),m(r,le,y),t(le,he),t(le,K),t(K,X),t(X,pe),t(le,h),m(r,I,y),z(Z,r,y),m(r,me,y),m(r,H,y),t(H,ie),t(H,ee),t(ee,ae),t(ae,ue),t(H,oe),m(r,ce,y),z(fe,r,y),je=!0},p(r,y){const _e={};y&2&&(_e.$$scope={dirty:y,ctx:r}),M.$set(_e)},i(r){je||(C(S.$$.fragment,r),C(M.$$.fragment,r),C(g.$$.fragment,r),C(se.$$.fragment,r),C(Z.$$.fragment,r),C(fe.$$.fragment,r),je=!0)},o(r){L(S.$$.fragment,r),L(M.$$.fragment,r),L(g.$$.fragment,r),L(se.$$.fragment,r),L(Z.$$.fragment,r),L(fe.$$.fragment,r),je=!1},d(r){r&&s(a),r&&s(B),P(S,r),r&&s(q),P(M,r),r&&s(U),r&&s(R),r&&s(Y),P(g,r),r&&s(x),r&&s(O),r&&s(Q),P(se,r),r&&s(V),r&&s(le),r&&s(I),P(Z,r),r&&s(me),r&&s(H),r&&s(ce),P(fe,r)}}}function Tn(J){let a,w;return a=new Ft({props:{$$slots:{default:[En]},$$scope:{ctx:J}}}),{c(){F(a.$$.fragment)},l(o){D(a.$$.fragment,o)},m(o,$){z(a,o,$),w=!0},p(o,$){const v={};$&2&&(v.$$scope={dirty:$,ctx:o}),a.$set(v)},i(o){w||(C(a.$$.fragment,o),w=!0)},o(o){L(a.$$.fragment,o),w=!1},d(o){P(a,o)}}}function An(J){let a,w,o,$,v,k,b,T;return{c(){a=i("p"),w=l("If you aren\u2019t familiar with fine-tuning a model with the "),o=i("a"),$=l("Trainer"),v=l(", take a look at the basic tutorial "),k=i("a"),b=l("here"),T=l("!"),this.h()},l(j){a=p(j,"P",{});var E=f(a);w=n(E,"If you aren\u2019t familiar with fine-tuning a model with the "),o=p(E,"A",{href:!0});var A=f(o);$=n(A,"Trainer"),A.forEach(s),v=n(E,", take a look at the basic tutorial "),k=p(E,"A",{href:!0});var B=f(k);b=n(B,"here"),B.forEach(s),T=n(E,"!"),E.forEach(s),this.h()},h(){_(o,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.Trainer"),_(k,"href","../training#finetune-with-trainer")},m(j,E){m(j,a,E),t(a,w),t(a,o),t(o,$),t(a,v),t(a,k),t(k,b),t(a,T)},d(j){j&&s(a)}}}function qn(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y,g,x,O,W,N,ne,te,Q,se,V,le,he,K,X,pe;return b=new re({props:{code:`from transformers import AutoModelForMaskedLM

model = AutoModelForMaskedLM.from_pretrained("distilroberta-base")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;distilroberta-base&quot;</span>)`}}),j=new Mt({props:{$$slots:{default:[An]},$$scope:{ctx:J}}}),X=new re({props:{code:`training_args = TrainingArguments(
    output_dir="./results",
    evaluation_strategy="epoch",
    learning_rate=2e-5,
    num_train_epochs=3,
    weight_decay=0.01,
)

trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=lm_dataset["train"],
    eval_dataset=lm_dataset["test"],
    data_collator=data_collator,
)

trainer.train()`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>training_args = TrainingArguments(
<span class="hljs-meta">... </span>    output_dir=<span class="hljs-string">&quot;./results&quot;</span>,
<span class="hljs-meta">... </span>    evaluation_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
<span class="hljs-meta">... </span>    learning_rate=<span class="hljs-number">2e-5</span>,
<span class="hljs-meta">... </span>    num_train_epochs=<span class="hljs-number">3</span>,
<span class="hljs-meta">... </span>    weight_decay=<span class="hljs-number">0.01</span>,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>trainer = Trainer(
<span class="hljs-meta">... </span>    model=model,
<span class="hljs-meta">... </span>    args=training_args,
<span class="hljs-meta">... </span>    train_dataset=lm_dataset[<span class="hljs-string">&quot;train&quot;</span>],
<span class="hljs-meta">... </span>    eval_dataset=lm_dataset[<span class="hljs-string">&quot;test&quot;</span>],
<span class="hljs-meta">... </span>    data_collator=data_collator,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>trainer.train()`}}),{c(){a=i("p"),w=l("Load DistilRoBERTa with "),o=i("code"),$=l("AutoModelForMaskedlM"),v=l(":"),k=c(),F(b.$$.fragment),T=c(),F(j.$$.fragment),E=c(),A=i("p"),B=l("At this point, only three steps remain:"),S=c(),q=i("ol"),M=i("li"),U=l("Define your training hyperparameters in "),R=i("a"),G=l("TrainingArguments"),Y=l("."),g=c(),x=i("li"),O=l("Pass the training arguments to "),W=i("a"),N=l("Trainer"),ne=l(" along with the model, datasets, and data collator."),te=c(),Q=i("li"),se=l("Call "),V=i("a"),le=l("train()"),he=l(" to fine-tune your model."),K=c(),F(X.$$.fragment),this.h()},l(h){a=p(h,"P",{});var I=f(a);w=n(I,"Load DistilRoBERTa with "),o=p(I,"CODE",{});var Z=f(o);$=n(Z,"AutoModelForMaskedlM"),Z.forEach(s),v=n(I,":"),I.forEach(s),k=d(h),D(b.$$.fragment,h),T=d(h),D(j.$$.fragment,h),E=d(h),A=p(h,"P",{});var me=f(A);B=n(me,"At this point, only three steps remain:"),me.forEach(s),S=d(h),q=p(h,"OL",{});var H=f(q);M=p(H,"LI",{});var ie=f(M);U=n(ie,"Define your training hyperparameters in "),R=p(ie,"A",{href:!0});var ee=f(R);G=n(ee,"TrainingArguments"),ee.forEach(s),Y=n(ie,"."),ie.forEach(s),g=d(H),x=p(H,"LI",{});var ae=f(x);O=n(ae,"Pass the training arguments to "),W=p(ae,"A",{href:!0});var ue=f(W);N=n(ue,"Trainer"),ue.forEach(s),ne=n(ae," along with the model, datasets, and data collator."),ae.forEach(s),te=d(H),Q=p(H,"LI",{});var oe=f(Q);se=n(oe,"Call "),V=p(oe,"A",{href:!0});var ce=f(V);le=n(ce,"train()"),ce.forEach(s),he=n(oe," to fine-tune your model."),oe.forEach(s),H.forEach(s),K=d(h),D(X.$$.fragment,h),this.h()},h(){_(R,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.TrainingArguments"),_(W,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.Trainer"),_(V,"href","/docs/transformers/pr_17924/en/main_classes/trainer#transformers.Trainer.train")},m(h,I){m(h,a,I),t(a,w),t(a,o),t(o,$),t(a,v),m(h,k,I),z(b,h,I),m(h,T,I),z(j,h,I),m(h,E,I),m(h,A,I),t(A,B),m(h,S,I),m(h,q,I),t(q,M),t(M,U),t(M,R),t(R,G),t(M,Y),t(q,g),t(q,x),t(x,O),t(x,W),t(W,N),t(x,ne),t(q,te),t(q,Q),t(Q,se),t(Q,V),t(V,le),t(Q,he),m(h,K,I),z(X,h,I),pe=!0},p(h,I){const Z={};I&2&&(Z.$$scope={dirty:I,ctx:h}),j.$set(Z)},i(h){pe||(C(b.$$.fragment,h),C(j.$$.fragment,h),C(X.$$.fragment,h),pe=!0)},o(h){L(b.$$.fragment,h),L(j.$$.fragment,h),L(X.$$.fragment,h),pe=!1},d(h){h&&s(a),h&&s(k),P(b,h),h&&s(T),P(j,h),h&&s(E),h&&s(A),h&&s(S),h&&s(q),h&&s(K),P(X,h)}}}function Mn(J){let a,w;return a=new Ft({props:{$$slots:{default:[qn]},$$scope:{ctx:J}}}),{c(){F(a.$$.fragment)},l(o){D(a.$$.fragment,o)},m(o,$){z(a,o,$),w=!0},p(o,$){const v={};$&2&&(v.$$scope={dirty:$,ctx:o}),a.$set(v)},i(o){w||(C(a.$$.fragment,o),w=!0)},o(o){L(a.$$.fragment,o),w=!1},d(o){P(a,o)}}}function Fn(J){let a,w,o,$,v;return{c(){a=i("p"),w=l("If you aren\u2019t familiar with fine-tuning a model with Keras, take a look at the basic tutorial "),o=i("a"),$=l("here"),v=l("!"),this.h()},l(k){a=p(k,"P",{});var b=f(a);w=n(b,"If you aren\u2019t familiar with fine-tuning a model with Keras, take a look at the basic tutorial "),o=p(b,"A",{href:!0});var T=f(o);$=n(T,"here"),T.forEach(s),v=n(b,"!"),b.forEach(s),this.h()},h(){_(o,"href","training#finetune-with-keras")},m(k,b){m(k,a,b),t(a,w),t(a,o),t(o,$),t(a,v)},d(k){k&&s(a)}}}function Dn(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y,g,x,O,W,N,ne,te,Q,se,V,le,he,K,X,pe,h,I,Z,me,H,ie,ee,ae,ue,oe,ce,fe,je;return S=new re({props:{code:`tf_train_set = lm_dataset["train"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels"],
    dummy_labels=True,
    shuffle=True,
    batch_size=16,
    collate_fn=data_collator,
)

tf_test_set = lm_dataset["test"].to_tf_dataset(
    columns=["attention_mask", "input_ids", "labels"],
    dummy_labels=True,
    shuffle=False,
    batch_size=16,
    collate_fn=data_collator,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tf_train_set = lm_dataset[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    dummy_labels=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>tf_test_set = lm_dataset[<span class="hljs-string">&quot;test&quot;</span>].to_tf_dataset(
<span class="hljs-meta">... </span>    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;labels&quot;</span>],
<span class="hljs-meta">... </span>    dummy_labels=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    shuffle=<span class="hljs-literal">False</span>,
<span class="hljs-meta">... </span>    batch_size=<span class="hljs-number">16</span>,
<span class="hljs-meta">... </span>    collate_fn=data_collator,
<span class="hljs-meta">... </span>)`}}),M=new Mt({props:{$$slots:{default:[Fn]},$$scope:{ctx:J}}}),g=new re({props:{code:`from transformers import create_optimizer, AdamWeightDecay

optimizer = AdamWeightDecay(learning_rate=2e-5, weight_decay_rate=0.01)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer, AdamWeightDecay

<span class="hljs-meta">&gt;&gt;&gt; </span>optimizer = AdamWeightDecay(learning_rate=<span class="hljs-number">2e-5</span>, weight_decay_rate=<span class="hljs-number">0.01</span>)`}}),se=new re({props:{code:`from transformers import TFAutoModelForMaskedLM

model = TFAutoModelForCausalLM.from_pretrained("distilroberta-base")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;distilroberta-base&quot;</span>)`}}),Z=new re({props:{code:`import tensorflow as tf

model.compile(optimizer=optimizer)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-meta">&gt;&gt;&gt; </span>model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)`}}),fe=new re({props:{code:"model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=3)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>model.fit(x=tf_train_set, validation_data=tf_test_set, epochs=<span class="hljs-number">3</span>)'}}),{c(){a=i("p"),w=l("To fine-tune a model in TensorFlow, start by converting your datasets to the "),o=i("code"),$=l("tf.data.Dataset"),v=l(" format with "),k=i("a"),b=l("to_tf_dataset"),T=l(". Specify inputs and labels in "),j=i("code"),E=l("columns"),A=l(", whether to shuffle the dataset order, batch size, and the data collator:"),B=c(),F(S.$$.fragment),q=c(),F(M.$$.fragment),U=c(),R=i("p"),G=l("Set up an optimizer function, learning rate, and some training hyperparameters:"),Y=c(),F(g.$$.fragment),x=c(),O=i("p"),W=l("Load DistilRoBERTa with "),N=i("a"),ne=l("TFAutoModelForMaskedLM"),te=l(":"),Q=c(),F(se.$$.fragment),V=c(),le=i("p"),he=l("Configure the model for training with "),K=i("a"),X=i("code"),pe=l("compile"),h=l(":"),I=c(),F(Z.$$.fragment),me=c(),H=i("p"),ie=l("Call "),ee=i("a"),ae=i("code"),ue=l("fit"),oe=l(" to fine-tune the model:"),ce=c(),F(fe.$$.fragment),this.h()},l(r){a=p(r,"P",{});var y=f(a);w=n(y,"To fine-tune a model in TensorFlow, start by converting your datasets to the "),o=p(y,"CODE",{});var _e=f(o);$=n(_e,"tf.data.Dataset"),_e.forEach(s),v=n(y," format with "),k=p(y,"A",{href:!0,rel:!0});var xe=f(k);b=n(xe,"to_tf_dataset"),xe.forEach(s),T=n(y,". Specify inputs and labels in "),j=p(y,"CODE",{});var ye=f(j);E=n(ye,"columns"),ye.forEach(s),A=n(y,", whether to shuffle the dataset order, batch size, and the data collator:"),y.forEach(s),B=d(r),D(S.$$.fragment,r),q=d(r),D(M.$$.fragment,r),U=d(r),R=p(r,"P",{});var Ee=f(R);G=n(Ee,"Set up an optimizer function, learning rate, and some training hyperparameters:"),Ee.forEach(s),Y=d(r),D(g.$$.fragment,r),x=d(r),O=p(r,"P",{});var de=f(O);W=n(de,"Load DistilRoBERTa with "),N=p(de,"A",{href:!0});var Ce=f(N);ne=n(Ce,"TFAutoModelForMaskedLM"),Ce.forEach(s),te=n(de,":"),de.forEach(s),Q=d(r),D(se.$$.fragment,r),V=d(r),le=p(r,"P",{});var $e=f(le);he=n($e,"Configure the model for training with "),K=p($e,"A",{href:!0,rel:!0});var be=f(K);X=p(be,"CODE",{});var Te=f(X);pe=n(Te,"compile"),Te.forEach(s),be.forEach(s),h=n($e,":"),$e.forEach(s),I=d(r),D(Z.$$.fragment,r),me=d(r),H=p(r,"P",{});var ge=f(H);ie=n(ge,"Call "),ee=p(ge,"A",{href:!0,rel:!0});var Le=f(ee);ae=p(Le,"CODE",{});var Ae=f(ae);ue=n(Ae,"fit"),Ae.forEach(s),Le.forEach(s),oe=n(ge," to fine-tune the model:"),ge.forEach(s),ce=d(r),D(fe.$$.fragment,r),this.h()},h(){_(k,"href","https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.to_tf_dataset"),_(k,"rel","nofollow"),_(N,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.TFAutoModelForMaskedLM"),_(K,"href","https://keras.io/api/models/model_training_apis/#compile-method"),_(K,"rel","nofollow"),_(ee,"href","https://keras.io/api/models/model_training_apis/#fit-method"),_(ee,"rel","nofollow")},m(r,y){m(r,a,y),t(a,w),t(a,o),t(o,$),t(a,v),t(a,k),t(k,b),t(a,T),t(a,j),t(j,E),t(a,A),m(r,B,y),z(S,r,y),m(r,q,y),z(M,r,y),m(r,U,y),m(r,R,y),t(R,G),m(r,Y,y),z(g,r,y),m(r,x,y),m(r,O,y),t(O,W),t(O,N),t(N,ne),t(O,te),m(r,Q,y),z(se,r,y),m(r,V,y),m(r,le,y),t(le,he),t(le,K),t(K,X),t(X,pe),t(le,h),m(r,I,y),z(Z,r,y),m(r,me,y),m(r,H,y),t(H,ie),t(H,ee),t(ee,ae),t(ae,ue),t(H,oe),m(r,ce,y),z(fe,r,y),je=!0},p(r,y){const _e={};y&2&&(_e.$$scope={dirty:y,ctx:r}),M.$set(_e)},i(r){je||(C(S.$$.fragment,r),C(M.$$.fragment,r),C(g.$$.fragment,r),C(se.$$.fragment,r),C(Z.$$.fragment,r),C(fe.$$.fragment,r),je=!0)},o(r){L(S.$$.fragment,r),L(M.$$.fragment,r),L(g.$$.fragment,r),L(se.$$.fragment,r),L(Z.$$.fragment,r),L(fe.$$.fragment,r),je=!1},d(r){r&&s(a),r&&s(B),P(S,r),r&&s(q),P(M,r),r&&s(U),r&&s(R),r&&s(Y),P(g,r),r&&s(x),r&&s(O),r&&s(Q),P(se,r),r&&s(V),r&&s(le),r&&s(I),P(Z,r),r&&s(me),r&&s(H),r&&s(ce),P(fe,r)}}}function zn(J){let a,w;return a=new Ft({props:{$$slots:{default:[Dn]},$$scope:{ctx:J}}}),{c(){F(a.$$.fragment)},l(o){D(a.$$.fragment,o)},m(o,$){z(a,o,$),w=!0},p(o,$){const v={};$&2&&(v.$$scope={dirty:$,ctx:o}),a.$set(v)},i(o){w||(C(a.$$.fragment,o),w=!0)},o(o){L(a.$$.fragment,o),w=!1},d(o){P(a,o)}}}function Cn(J){let a,w,o,$,v,k,b,T;return{c(){a=i("p"),w=l(`For a more in-depth example of how to fine-tune a model for causal language modeling, take a look at the corresponding
`),o=i("a"),$=l("PyTorch notebook"),v=l(`
or `),k=i("a"),b=l("TensorFlow notebook"),T=l("."),this.h()},l(j){a=p(j,"P",{});var E=f(a);w=n(E,`For a more in-depth example of how to fine-tune a model for causal language modeling, take a look at the corresponding
`),o=p(E,"A",{href:!0,rel:!0});var A=f(o);$=n(A,"PyTorch notebook"),A.forEach(s),v=n(E,`
or `),k=p(E,"A",{href:!0,rel:!0});var B=f(k);b=n(B,"TensorFlow notebook"),B.forEach(s),T=n(E,"."),E.forEach(s),this.h()},h(){_(o,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling.ipynb"),_(o,"rel","nofollow"),_(k,"href","https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/language_modeling-tf.ipynb"),_(k,"rel","nofollow")},m(j,E){m(j,a,E),t(a,w),t(a,o),t(o,$),t(a,v),t(a,k),t(k,b),t(a,T)},d(j){j&&s(a)}}}function Ln(J){let a,w,o,$,v,k,b,T,j,E,A,B,S,q,M,U,R,G,Y,g,x,O,W,N,ne,te,Q,se,V,le,he,K,X,pe,h,I,Z,me,H,ie,ee,ae,ue,oe,ce,fe,je,r,y,_e,xe,ye,Ee,de,Ce,$e,be,Te,ge,Le,Ae,st,ps,ve,ea,Dt,ta,sa,zt,aa,la,Ct,na,ra,fs,Pe,Ne,Lt,at,oa,Pt,ia,ms,lt,hs,Ge,pa,It,fa,ma,us,nt,cs,rt,ds,vt,ha,gs,ot,_s,qe,ua,St,ca,da,it,Ot,ga,_a,$s,pt,ks,Me,$a,Rt,ka,wa,Nt,ja,ya,ws,xt,ba,js,ft,ys,ke,va,mt,xa,Ea,Gt,Ta,Aa,Bt,qa,Ma,Wt,Fa,Da,bs,ht,vs,Et,za,xs,Be,Ht,Ca,La,ut,Pa,Yt,Ia,Sa,Es,ct,Ts,We,Oa,Ut,Ra,Na,As,dt,qs,we,Ga,Tt,Ba,Wa,Jt,Ha,Ya,Kt,Ua,Ja,Qt,Ka,Qa,Ms,He,Fs,Ie,Ye,Vt,gt,Va,Xt,Xa,Ds,Ue,Za,_t,el,tl,zs,Se,Je,Zt,$t,sl,es,al,Cs,Ke,Ls,Oe,Qe,ts,kt,ll,ss,nl,Ps,Ve,rl,wt,ol,il,Is,Re,Xe,as,jt,pl,ls,fl,Ss,Ze,Os,et,Rs;return k=new bt({}),q=new Zs({props:{id:"Vpjb1lu0MDk"}}),Y=new Zs({props:{id:"mqElG5QJWUg"}}),H=new Mt({props:{$$slots:{default:[_n]},$$scope:{ctx:J}}}),oe=new bt({}),ye=new re({props:{code:`from datasets import load_dataset

eli5 = load_dataset("eli5", split="train_asks[:5000]")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = load_dataset(<span class="hljs-string">&quot;eli5&quot;</span>, split=<span class="hljs-string">&quot;train_asks[:5000]&quot;</span>)`}}),be=new re({props:{code:"eli5 = eli5.train_test_split(test_size=0.2)",highlighted:'eli5 = eli5.train_test_split(test_size=<span class="hljs-number">0.2</span>)'}}),st=new re({props:{code:'eli5["train"][0]',highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>eli5[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;answers&#x27;</span>: {<span class="hljs-string">&#x27;a_id&#x27;</span>: [<span class="hljs-string">&#x27;c3d1aib&#x27;</span>, <span class="hljs-string">&#x27;c3d4lya&#x27;</span>],
  <span class="hljs-string">&#x27;score&#x27;</span>: [<span class="hljs-number">6</span>, <span class="hljs-number">3</span>],
  <span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&quot;The velocity needed to remain in orbit is equal to the square root of Newton&#x27;s constant times the mass of earth divided by the distance from the center of the earth. I don&#x27;t know the altitude of that specific mission, but they&#x27;re usually around 300 km. That means he&#x27;s going 7-8 km/s.\\n\\nIn space there are no other forces acting on either the shuttle or the guy, so they stay in the same position relative to each other. If he were to become unable to return to the ship, he would presumably run out of oxygen, or slowly fall into the atmosphere and burn up.&quot;</span>,
   <span class="hljs-string">&quot;Hope you don&#x27;t mind me asking another question, but why aren&#x27;t there any stars visible in this photo?&quot;</span>]},
 <span class="hljs-string">&#x27;answers_urls&#x27;</span>: {<span class="hljs-string">&#x27;url&#x27;</span>: []},
 <span class="hljs-string">&#x27;document&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,
 <span class="hljs-string">&#x27;q_id&#x27;</span>: <span class="hljs-string">&#x27;nyxfp&#x27;</span>,
 <span class="hljs-string">&#x27;selftext&#x27;</span>: <span class="hljs-string">&#x27;_URL_0_\\n\\nThis was on the front page earlier and I have a few questions about it. Is it possible to calculate how fast the astronaut would be orbiting the earth? Also how does he stay close to the shuttle so that he can return safely, i.e is he orbiting at the same speed and can therefore stay next to it? And finally if his propulsion system failed, would he eventually re-enter the atmosphere and presumably die?&#x27;</span>,
 <span class="hljs-string">&#x27;selftext_urls&#x27;</span>: {<span class="hljs-string">&#x27;url&#x27;</span>: [<span class="hljs-string">&#x27;http://apod.nasa.gov/apod/image/1201/freeflyer_nasa_3000.jpg&#x27;</span>]},
 <span class="hljs-string">&#x27;subreddit&#x27;</span>: <span class="hljs-string">&#x27;askscience&#x27;</span>,
 <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Few questions about this space walk photograph.&#x27;</span>,
 <span class="hljs-string">&#x27;title_urls&#x27;</span>: {<span class="hljs-string">&#x27;url&#x27;</span>: []}}`}}),at=new bt({}),lt=new Zs({props:{id:"ma1TrR7gE7I"}}),nt=new re({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("distilgpt2")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilgpt2&quot;</span>)`}}),rt=new Zs({props:{id:"8PmhEIXhBvI"}}),ot=new re({props:{code:`from transformers import AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained("distilroberta-base")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;distilroberta-base&quot;</span>)`}}),pt=new re({props:{code:`eli5 = eli5.flatten()
eli5["train"][0]`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>eli5 = eli5.flatten()
<span class="hljs-meta">&gt;&gt;&gt; </span>eli5[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]
{<span class="hljs-string">&#x27;answers.a_id&#x27;</span>: [<span class="hljs-string">&#x27;c3d1aib&#x27;</span>, <span class="hljs-string">&#x27;c3d4lya&#x27;</span>],
 <span class="hljs-string">&#x27;answers.score&#x27;</span>: [<span class="hljs-number">6</span>, <span class="hljs-number">3</span>],
 <span class="hljs-string">&#x27;answers.text&#x27;</span>: [<span class="hljs-string">&quot;The velocity needed to remain in orbit is equal to the square root of Newton&#x27;s constant times the mass of earth divided by the distance from the center of the earth. I don&#x27;t know the altitude of that specific mission, but they&#x27;re usually around 300 km. That means he&#x27;s going 7-8 km/s.\\n\\nIn space there are no other forces acting on either the shuttle or the guy, so they stay in the same position relative to each other. If he were to become unable to return to the ship, he would presumably run out of oxygen, or slowly fall into the atmosphere and burn up.&quot;</span>,
  <span class="hljs-string">&quot;Hope you don&#x27;t mind me asking another question, but why aren&#x27;t there any stars visible in this photo?&quot;</span>],
 <span class="hljs-string">&#x27;answers_urls.url&#x27;</span>: [],
 <span class="hljs-string">&#x27;document&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>,
 <span class="hljs-string">&#x27;q_id&#x27;</span>: <span class="hljs-string">&#x27;nyxfp&#x27;</span>,
 <span class="hljs-string">&#x27;selftext&#x27;</span>: <span class="hljs-string">&#x27;_URL_0_\\n\\nThis was on the front page earlier and I have a few questions about it. Is it possible to calculate how fast the astronaut would be orbiting the earth? Also how does he stay close to the shuttle so that he can return safely, i.e is he orbiting at the same speed and can therefore stay next to it? And finally if his propulsion system failed, would he eventually re-enter the atmosphere and presumably die?&#x27;</span>,
 <span class="hljs-string">&#x27;selftext_urls.url&#x27;</span>: [<span class="hljs-string">&#x27;http://apod.nasa.gov/apod/image/1201/freeflyer_nasa_3000.jpg&#x27;</span>],
 <span class="hljs-string">&#x27;subreddit&#x27;</span>: <span class="hljs-string">&#x27;askscience&#x27;</span>,
 <span class="hljs-string">&#x27;title&#x27;</span>: <span class="hljs-string">&#x27;Few questions about this space walk photograph.&#x27;</span>,
 <span class="hljs-string">&#x27;title_urls.url&#x27;</span>: []}`}}),ft=new re({props:{code:`def preprocess_function(examples):
    return tokenizer([" ".join(x) for x in examples["answers.text"]], truncation=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_function</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> tokenizer([<span class="hljs-string">&quot; &quot;</span>.join(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;answers.text&quot;</span>]], truncation=<span class="hljs-literal">True</span>)`}}),ht=new re({props:{code:`tokenized_eli5 = eli5.map(
    preprocess_function,
    batched=True,
    num_proc=4,
    remove_columns=eli5["train"].column_names,
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>tokenized_eli5 = eli5.<span class="hljs-built_in">map</span>(
<span class="hljs-meta">... </span>    preprocess_function,
<span class="hljs-meta">... </span>    batched=<span class="hljs-literal">True</span>,
<span class="hljs-meta">... </span>    num_proc=<span class="hljs-number">4</span>,
<span class="hljs-meta">... </span>    remove_columns=eli5[<span class="hljs-string">&quot;train&quot;</span>].column_names,
<span class="hljs-meta">... </span>)`}}),ct=new re({props:{code:`block_size = 128


def group_texts(examples):
    concatenated_examples = {k: sum(examples[k], []) for k in examples.keys()}
    total_length = len(concatenated_examples[list(examples.keys())[0]])
    total_length = (total_length // block_size) * block_size
    result = {
        k: [t[i : i + block_size] for i in range(0, total_length, block_size)]
        for k, t in concatenated_examples.items()
    }
    result["labels"] = result["input_ids"].copy()
    return result`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span>block_size = <span class="hljs-number">128</span>


<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">group_texts</span>(<span class="hljs-params">examples</span>):
<span class="hljs-meta">... </span>    concatenated_examples = {k: <span class="hljs-built_in">sum</span>(examples[k], []) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> examples.keys()}
<span class="hljs-meta">... </span>    total_length = <span class="hljs-built_in">len</span>(concatenated_examples[<span class="hljs-built_in">list</span>(examples.keys())[<span class="hljs-number">0</span>]])
<span class="hljs-meta">... </span>    total_length = (total_length // block_size) * block_size
<span class="hljs-meta">... </span>    result = {
<span class="hljs-meta">... </span>        k: [t[i : i + block_size] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, total_length, block_size)]
<span class="hljs-meta">... </span>        <span class="hljs-keyword">for</span> k, t <span class="hljs-keyword">in</span> concatenated_examples.items()
<span class="hljs-meta">... </span>    }
<span class="hljs-meta">... </span>    result[<span class="hljs-string">&quot;labels&quot;</span>] = result[<span class="hljs-string">&quot;input_ids&quot;</span>].copy()
<span class="hljs-meta">... </span>    <span class="hljs-keyword">return</span> result`}}),dt=new re({props:{code:"lm_dataset = tokenized_eli5.map(group_texts, batched=True, num_proc=4)",highlighted:'<span class="hljs-meta">&gt;&gt;&gt; </span>lm_dataset = tokenized_eli5.<span class="hljs-built_in">map</span>(group_texts, batched=<span class="hljs-literal">True</span>, num_proc=<span class="hljs-number">4</span>)'}}),He=new ml({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[jn],pytorch:[kn]},$$scope:{ctx:J}}}),gt=new bt({}),$t=new bt({}),Ke=new ml({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[Tn],pytorch:[vn]},$$scope:{ctx:J}}}),kt=new bt({}),jt=new bt({}),Ze=new ml({props:{pytorch:!0,tensorflow:!0,jax:!1,$$slots:{tensorflow:[zn],pytorch:[Mn]},$$scope:{ctx:J}}}),et=new Mt({props:{$$slots:{default:[Cn]},$$scope:{ctx:J}}}),{c(){a=i("meta"),w=c(),o=i("h1"),$=i("a"),v=i("span"),F(k.$$.fragment),b=c(),T=i("span"),j=l("Language modeling"),E=c(),A=i("p"),B=l("Language modeling predicts words in a sentence. There are two forms of language modeling."),S=c(),F(q.$$.fragment),M=c(),U=i("p"),R=l("Causal language modeling predicts the next token in a sequence of tokens, and the model can only attend to tokens on the left."),G=c(),F(Y.$$.fragment),g=c(),x=i("p"),O=l("Masked language modeling predicts a masked token in a sequence, and the model can attend to tokens bidirectionally."),W=c(),N=i("p"),ne=l("This guide will show you how to fine-tune "),te=i("a"),Q=l("DistilGPT2"),se=l(" for causal language modeling and "),V=i("a"),le=l("DistilRoBERTa"),he=l(" for masked language modeling on the "),K=i("a"),X=l("r/askscience"),pe=l(" subset of the "),h=i("a"),I=l("ELI5"),Z=l(" dataset."),me=c(),F(H.$$.fragment),ie=c(),ee=i("h2"),ae=i("a"),ue=i("span"),F(oe.$$.fragment),ce=c(),fe=i("span"),je=l("Load ELI5 dataset"),r=c(),y=i("p"),_e=l("Load only the first 5000 rows of the ELI5 dataset from the \u{1F917} Datasets library since it is pretty large:"),xe=c(),F(ye.$$.fragment),Ee=c(),de=i("p"),Ce=l("Split this dataset into a train and test set:"),$e=c(),F(be.$$.fragment),Te=c(),ge=i("p"),Le=l("Then take a look at an example:"),Ae=c(),F(st.$$.fragment),ps=c(),ve=i("p"),ea=l("Notice "),Dt=i("code"),ta=l("text"),sa=l(" is a subfield nested inside the "),zt=i("code"),aa=l("answers"),la=l(" dictionary. When you preprocess the dataset, you will need to extract the "),Ct=i("code"),na=l("text"),ra=l(" subfield into a separate column."),fs=c(),Pe=i("h2"),Ne=i("a"),Lt=i("span"),F(at.$$.fragment),oa=c(),Pt=i("span"),ia=l("Preprocess"),ms=c(),F(lt.$$.fragment),hs=c(),Ge=i("p"),pa=l("For causal language modeling, load the DistilGPT2 tokenizer to process the "),It=i("code"),fa=l("text"),ma=l(" subfield:"),us=c(),F(nt.$$.fragment),cs=c(),F(rt.$$.fragment),ds=c(),vt=i("p"),ha=l("For masked language modeling, load the DistilRoBERTa tokenizer instead:"),gs=c(),F(ot.$$.fragment),_s=c(),qe=i("p"),ua=l("Extract the "),St=i("code"),ca=l("text"),da=l(" subfield from its nested structure with the "),it=i("a"),Ot=i("code"),ga=l("flatten"),_a=l(" method:"),$s=c(),F(pt.$$.fragment),ks=c(),Me=i("p"),$a=l("Each subfield is now a separate column as indicated by the "),Rt=i("code"),ka=l("answers"),wa=l(" prefix. Notice that "),Nt=i("code"),ja=l("answers.text"),ya=l(" is a list. Instead of tokenizing each sentence separately, convert the list to a string to jointly tokenize them."),ws=c(),xt=i("p"),ba=l("Here is how you can create a preprocessing function to convert the list to a string and truncate sequences to be no longer than DistilGPT2\u2019s maximum input length:"),js=c(),F(ft.$$.fragment),ys=c(),ke=i("p"),va=l("Use \u{1F917} Datasets "),mt=i("a"),xa=l("map"),Ea=l(" function to apply the preprocessing function over the entire dataset. You can speed up the "),Gt=i("code"),Ta=l("map"),Aa=l(" function by setting "),Bt=i("code"),qa=l("batched=True"),Ma=l(" to process multiple elements of the dataset at once and increasing the number of processes with "),Wt=i("code"),Fa=l("num_proc"),Da=l(". Remove the columns you don\u2019t need:"),bs=c(),F(ht.$$.fragment),vs=c(),Et=i("p"),za=l("Now you need a second preprocessing function to capture text truncated from any lengthy examples to prevent loss of information. This preprocessing function should:"),xs=c(),Be=i("ul"),Ht=i("li"),Ca=l("Concatenate all the text."),La=c(),ut=i("li"),Pa=l("Split the concatenated text into smaller chunks defined by "),Yt=i("code"),Ia=l("block_size"),Sa=l("."),Es=c(),F(ct.$$.fragment),Ts=c(),We=i("p"),Oa=l("Apply the "),Ut=i("code"),Ra=l("group_texts"),Na=l(" function over the entire dataset:"),As=c(),F(dt.$$.fragment),qs=c(),we=i("p"),Ga=l("For causal language modeling, use "),Tt=i("a"),Ba=l("DataCollatorForLanguageModeling"),Wa=l(" to create a batch of examples. It will also "),Jt=i("em"),Ha=l("dynamically pad"),Ya=l(" your text to the length of the longest element in its batch, so they are a uniform length. While it is possible to pad your text in the "),Kt=i("code"),Ua=l("tokenizer"),Ja=l(" function by setting "),Qt=i("code"),Ka=l("padding=True"),Qa=l(", dynamic padding is more efficient."),Ms=c(),F(He.$$.fragment),Fs=c(),Ie=i("h2"),Ye=i("a"),Vt=i("span"),F(gt.$$.fragment),Va=c(),Xt=i("span"),Xa=l("Causal language modeling"),Ds=c(),Ue=i("p"),Za=l("Causal language modeling is frequently used for text generation. This section shows you how to fine-tune "),_t=i("a"),el=l("DistilGPT2"),tl=l(" to generate new text."),zs=c(),Se=i("h3"),Je=i("a"),Zt=i("span"),F($t.$$.fragment),sl=c(),es=i("span"),al=l("Train"),Cs=c(),F(Ke.$$.fragment),Ls=c(),Oe=i("h2"),Qe=i("a"),ts=i("span"),F(kt.$$.fragment),ll=c(),ss=i("span"),nl=l("Masked language modeling"),Ps=c(),Ve=i("p"),rl=l("Masked language modeling is also known as a fill-mask task because it predicts a masked token in a sequence. Models for masked language modeling require a good contextual understanding of an entire sequence instead of only the left context. This section shows you how to fine-tune "),wt=i("a"),ol=l("DistilRoBERTa"),il=l(" to predict a masked word."),Is=c(),Re=i("h3"),Xe=i("a"),as=i("span"),F(jt.$$.fragment),pl=c(),ls=i("span"),fl=l("Train"),Ss=c(),F(Ze.$$.fragment),Os=c(),F(et.$$.fragment),this.h()},l(e){const u=dn('[data-svelte="svelte-1phssyn"]',document.head);a=p(u,"META",{name:!0,content:!0}),u.forEach(s),w=d(e),o=p(e,"H1",{class:!0});var yt=f(o);$=p(yt,"A",{id:!0,class:!0,href:!0});var ns=f($);v=p(ns,"SPAN",{});var rs=f(v);D(k.$$.fragment,rs),rs.forEach(s),ns.forEach(s),b=d(yt),T=p(yt,"SPAN",{});var os=f(T);j=n(os,"Language modeling"),os.forEach(s),yt.forEach(s),E=d(e),A=p(e,"P",{});var is=f(A);B=n(is,"Language modeling predicts words in a sentence. There are two forms of language modeling."),is.forEach(s),S=d(e),D(q.$$.fragment,e),M=d(e),U=p(e,"P",{});var hl=f(U);R=n(hl,"Causal language modeling predicts the next token in a sequence of tokens, and the model can only attend to tokens on the left."),hl.forEach(s),G=d(e),D(Y.$$.fragment,e),g=d(e),x=p(e,"P",{});var ul=f(x);O=n(ul,"Masked language modeling predicts a masked token in a sequence, and the model can attend to tokens bidirectionally."),ul.forEach(s),W=d(e),N=p(e,"P",{});var Fe=f(N);ne=n(Fe,"This guide will show you how to fine-tune "),te=p(Fe,"A",{href:!0,rel:!0});var cl=f(te);Q=n(cl,"DistilGPT2"),cl.forEach(s),se=n(Fe," for causal language modeling and "),V=p(Fe,"A",{href:!0,rel:!0});var dl=f(V);le=n(dl,"DistilRoBERTa"),dl.forEach(s),he=n(Fe," for masked language modeling on the "),K=p(Fe,"A",{href:!0,rel:!0});var gl=f(K);X=n(gl,"r/askscience"),gl.forEach(s),pe=n(Fe," subset of the "),h=p(Fe,"A",{href:!0,rel:!0});var _l=f(h);I=n(_l,"ELI5"),_l.forEach(s),Z=n(Fe," dataset."),Fe.forEach(s),me=d(e),D(H.$$.fragment,e),ie=d(e),ee=p(e,"H2",{class:!0});var Ns=f(ee);ae=p(Ns,"A",{id:!0,class:!0,href:!0});var $l=f(ae);ue=p($l,"SPAN",{});var kl=f(ue);D(oe.$$.fragment,kl),kl.forEach(s),$l.forEach(s),ce=d(Ns),fe=p(Ns,"SPAN",{});var wl=f(fe);je=n(wl,"Load ELI5 dataset"),wl.forEach(s),Ns.forEach(s),r=d(e),y=p(e,"P",{});var jl=f(y);_e=n(jl,"Load only the first 5000 rows of the ELI5 dataset from the \u{1F917} Datasets library since it is pretty large:"),jl.forEach(s),xe=d(e),D(ye.$$.fragment,e),Ee=d(e),de=p(e,"P",{});var yl=f(de);Ce=n(yl,"Split this dataset into a train and test set:"),yl.forEach(s),$e=d(e),D(be.$$.fragment,e),Te=d(e),ge=p(e,"P",{});var bl=f(ge);Le=n(bl,"Then take a look at an example:"),bl.forEach(s),Ae=d(e),D(st.$$.fragment,e),ps=d(e),ve=p(e,"P",{});var tt=f(ve);ea=n(tt,"Notice "),Dt=p(tt,"CODE",{});var vl=f(Dt);ta=n(vl,"text"),vl.forEach(s),sa=n(tt," is a subfield nested inside the "),zt=p(tt,"CODE",{});var xl=f(zt);aa=n(xl,"answers"),xl.forEach(s),la=n(tt," dictionary. When you preprocess the dataset, you will need to extract the "),Ct=p(tt,"CODE",{});var El=f(Ct);na=n(El,"text"),El.forEach(s),ra=n(tt," subfield into a separate column."),tt.forEach(s),fs=d(e),Pe=p(e,"H2",{class:!0});var Gs=f(Pe);Ne=p(Gs,"A",{id:!0,class:!0,href:!0});var Tl=f(Ne);Lt=p(Tl,"SPAN",{});var Al=f(Lt);D(at.$$.fragment,Al),Al.forEach(s),Tl.forEach(s),oa=d(Gs),Pt=p(Gs,"SPAN",{});var ql=f(Pt);ia=n(ql,"Preprocess"),ql.forEach(s),Gs.forEach(s),ms=d(e),D(lt.$$.fragment,e),hs=d(e),Ge=p(e,"P",{});var Bs=f(Ge);pa=n(Bs,"For causal language modeling, load the DistilGPT2 tokenizer to process the "),It=p(Bs,"CODE",{});var Ml=f(It);fa=n(Ml,"text"),Ml.forEach(s),ma=n(Bs," subfield:"),Bs.forEach(s),us=d(e),D(nt.$$.fragment,e),cs=d(e),D(rt.$$.fragment,e),ds=d(e),vt=p(e,"P",{});var Fl=f(vt);ha=n(Fl,"For masked language modeling, load the DistilRoBERTa tokenizer instead:"),Fl.forEach(s),gs=d(e),D(ot.$$.fragment,e),_s=d(e),qe=p(e,"P",{});var At=f(qe);ua=n(At,"Extract the "),St=p(At,"CODE",{});var Dl=f(St);ca=n(Dl,"text"),Dl.forEach(s),da=n(At," subfield from its nested structure with the "),it=p(At,"A",{href:!0,rel:!0});var zl=f(it);Ot=p(zl,"CODE",{});var Cl=f(Ot);ga=n(Cl,"flatten"),Cl.forEach(s),zl.forEach(s),_a=n(At," method:"),At.forEach(s),$s=d(e),D(pt.$$.fragment,e),ks=d(e),Me=p(e,"P",{});var qt=f(Me);$a=n(qt,"Each subfield is now a separate column as indicated by the "),Rt=p(qt,"CODE",{});var Ll=f(Rt);ka=n(Ll,"answers"),Ll.forEach(s),wa=n(qt," prefix. Notice that "),Nt=p(qt,"CODE",{});var Pl=f(Nt);ja=n(Pl,"answers.text"),Pl.forEach(s),ya=n(qt," is a list. Instead of tokenizing each sentence separately, convert the list to a string to jointly tokenize them."),qt.forEach(s),ws=d(e),xt=p(e,"P",{});var Il=f(xt);ba=n(Il,"Here is how you can create a preprocessing function to convert the list to a string and truncate sequences to be no longer than DistilGPT2\u2019s maximum input length:"),Il.forEach(s),js=d(e),D(ft.$$.fragment,e),ys=d(e),ke=p(e,"P",{});var De=f(ke);va=n(De,"Use \u{1F917} Datasets "),mt=p(De,"A",{href:!0,rel:!0});var Sl=f(mt);xa=n(Sl,"map"),Sl.forEach(s),Ea=n(De," function to apply the preprocessing function over the entire dataset. You can speed up the "),Gt=p(De,"CODE",{});var Ol=f(Gt);Ta=n(Ol,"map"),Ol.forEach(s),Aa=n(De," function by setting "),Bt=p(De,"CODE",{});var Rl=f(Bt);qa=n(Rl,"batched=True"),Rl.forEach(s),Ma=n(De," to process multiple elements of the dataset at once and increasing the number of processes with "),Wt=p(De,"CODE",{});var Nl=f(Wt);Fa=n(Nl,"num_proc"),Nl.forEach(s),Da=n(De,". Remove the columns you don\u2019t need:"),De.forEach(s),bs=d(e),D(ht.$$.fragment,e),vs=d(e),Et=p(e,"P",{});var Gl=f(Et);za=n(Gl,"Now you need a second preprocessing function to capture text truncated from any lengthy examples to prevent loss of information. This preprocessing function should:"),Gl.forEach(s),xs=d(e),Be=p(e,"UL",{});var Ws=f(Be);Ht=p(Ws,"LI",{});var Bl=f(Ht);Ca=n(Bl,"Concatenate all the text."),Bl.forEach(s),La=d(Ws),ut=p(Ws,"LI",{});var Hs=f(ut);Pa=n(Hs,"Split the concatenated text into smaller chunks defined by "),Yt=p(Hs,"CODE",{});var Wl=f(Yt);Ia=n(Wl,"block_size"),Wl.forEach(s),Sa=n(Hs,"."),Hs.forEach(s),Ws.forEach(s),Es=d(e),D(ct.$$.fragment,e),Ts=d(e),We=p(e,"P",{});var Ys=f(We);Oa=n(Ys,"Apply the "),Ut=p(Ys,"CODE",{});var Hl=f(Ut);Ra=n(Hl,"group_texts"),Hl.forEach(s),Na=n(Ys," function over the entire dataset:"),Ys.forEach(s),As=d(e),D(dt.$$.fragment,e),qs=d(e),we=p(e,"P",{});var ze=f(we);Ga=n(ze,"For causal language modeling, use "),Tt=p(ze,"A",{href:!0});var Yl=f(Tt);Ba=n(Yl,"DataCollatorForLanguageModeling"),Yl.forEach(s),Wa=n(ze," to create a batch of examples. It will also "),Jt=p(ze,"EM",{});var Ul=f(Jt);Ha=n(Ul,"dynamically pad"),Ul.forEach(s),Ya=n(ze," your text to the length of the longest element in its batch, so they are a uniform length. While it is possible to pad your text in the "),Kt=p(ze,"CODE",{});var Jl=f(Kt);Ua=n(Jl,"tokenizer"),Jl.forEach(s),Ja=n(ze," function by setting "),Qt=p(ze,"CODE",{});var Kl=f(Qt);Ka=n(Kl,"padding=True"),Kl.forEach(s),Qa=n(ze,", dynamic padding is more efficient."),ze.forEach(s),Ms=d(e),D(He.$$.fragment,e),Fs=d(e),Ie=p(e,"H2",{class:!0});var Us=f(Ie);Ye=p(Us,"A",{id:!0,class:!0,href:!0});var Ql=f(Ye);Vt=p(Ql,"SPAN",{});var Vl=f(Vt);D(gt.$$.fragment,Vl),Vl.forEach(s),Ql.forEach(s),Va=d(Us),Xt=p(Us,"SPAN",{});var Xl=f(Xt);Xa=n(Xl,"Causal language modeling"),Xl.forEach(s),Us.forEach(s),Ds=d(e),Ue=p(e,"P",{});var Js=f(Ue);Za=n(Js,"Causal language modeling is frequently used for text generation. This section shows you how to fine-tune "),_t=p(Js,"A",{href:!0,rel:!0});var Zl=f(_t);el=n(Zl,"DistilGPT2"),Zl.forEach(s),tl=n(Js," to generate new text."),Js.forEach(s),zs=d(e),Se=p(e,"H3",{class:!0});var Ks=f(Se);Je=p(Ks,"A",{id:!0,class:!0,href:!0});var en=f(Je);Zt=p(en,"SPAN",{});var tn=f(Zt);D($t.$$.fragment,tn),tn.forEach(s),en.forEach(s),sl=d(Ks),es=p(Ks,"SPAN",{});var sn=f(es);al=n(sn,"Train"),sn.forEach(s),Ks.forEach(s),Cs=d(e),D(Ke.$$.fragment,e),Ls=d(e),Oe=p(e,"H2",{class:!0});var Qs=f(Oe);Qe=p(Qs,"A",{id:!0,class:!0,href:!0});var an=f(Qe);ts=p(an,"SPAN",{});var ln=f(ts);D(kt.$$.fragment,ln),ln.forEach(s),an.forEach(s),ll=d(Qs),ss=p(Qs,"SPAN",{});var nn=f(ss);nl=n(nn,"Masked language modeling"),nn.forEach(s),Qs.forEach(s),Ps=d(e),Ve=p(e,"P",{});var Vs=f(Ve);rl=n(Vs,"Masked language modeling is also known as a fill-mask task because it predicts a masked token in a sequence. Models for masked language modeling require a good contextual understanding of an entire sequence instead of only the left context. This section shows you how to fine-tune "),wt=p(Vs,"A",{href:!0,rel:!0});var rn=f(wt);ol=n(rn,"DistilRoBERTa"),rn.forEach(s),il=n(Vs," to predict a masked word."),Vs.forEach(s),Is=d(e),Re=p(e,"H3",{class:!0});var Xs=f(Re);Xe=p(Xs,"A",{id:!0,class:!0,href:!0});var on=f(Xe);as=p(on,"SPAN",{});var pn=f(as);D(jt.$$.fragment,pn),pn.forEach(s),on.forEach(s),pl=d(Xs),ls=p(Xs,"SPAN",{});var fn=f(ls);fl=n(fn,"Train"),fn.forEach(s),Xs.forEach(s),Ss=d(e),D(Ze.$$.fragment,e),Os=d(e),D(et.$$.fragment,e),this.h()},h(){_(a,"name","hf:doc:metadata"),_(a,"content",JSON.stringify(Pn)),_($,"id","language-modeling"),_($,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_($,"href","#language-modeling"),_(o,"class","relative group"),_(te,"href","https://huggingface.co/distilgpt2"),_(te,"rel","nofollow"),_(V,"href","https://huggingface.co/distilroberta-base"),_(V,"rel","nofollow"),_(K,"href","https://www.reddit.com/r/askscience/"),_(K,"rel","nofollow"),_(h,"href","https://huggingface.co/datasets/eli5"),_(h,"rel","nofollow"),_(ae,"id","load-eli5-dataset"),_(ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(ae,"href","#load-eli5-dataset"),_(ee,"class","relative group"),_(Ne,"id","preprocess"),_(Ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(Ne,"href","#preprocess"),_(Pe,"class","relative group"),_(it,"href","https://huggingface.co/docs/datasets/process.html#flatten"),_(it,"rel","nofollow"),_(mt,"href","https://huggingface.co/docs/datasets/main/en/package_reference/main_classes#datasets.Dataset.map"),_(mt,"rel","nofollow"),_(Tt,"href","/docs/transformers/pr_17924/en/main_classes/data_collator#transformers.DataCollatorForLanguageModeling"),_(Ye,"id","causal-language-modeling"),_(Ye,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(Ye,"href","#causal-language-modeling"),_(Ie,"class","relative group"),_(_t,"href","https://huggingface.co/distilgpt2"),_(_t,"rel","nofollow"),_(Je,"id","train"),_(Je,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(Je,"href","#train"),_(Se,"class","relative group"),_(Qe,"id","masked-language-modeling"),_(Qe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(Qe,"href","#masked-language-modeling"),_(Oe,"class","relative group"),_(wt,"href","https://huggingface.co/distilroberta-base"),_(wt,"rel","nofollow"),_(Xe,"id","train"),_(Xe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),_(Xe,"href","#train"),_(Re,"class","relative group")},m(e,u){t(document.head,a),m(e,w,u),m(e,o,u),t(o,$),t($,v),z(k,v,null),t(o,b),t(o,T),t(T,j),m(e,E,u),m(e,A,u),t(A,B),m(e,S,u),z(q,e,u),m(e,M,u),m(e,U,u),t(U,R),m(e,G,u),z(Y,e,u),m(e,g,u),m(e,x,u),t(x,O),m(e,W,u),m(e,N,u),t(N,ne),t(N,te),t(te,Q),t(N,se),t(N,V),t(V,le),t(N,he),t(N,K),t(K,X),t(N,pe),t(N,h),t(h,I),t(N,Z),m(e,me,u),z(H,e,u),m(e,ie,u),m(e,ee,u),t(ee,ae),t(ae,ue),z(oe,ue,null),t(ee,ce),t(ee,fe),t(fe,je),m(e,r,u),m(e,y,u),t(y,_e),m(e,xe,u),z(ye,e,u),m(e,Ee,u),m(e,de,u),t(de,Ce),m(e,$e,u),z(be,e,u),m(e,Te,u),m(e,ge,u),t(ge,Le),m(e,Ae,u),z(st,e,u),m(e,ps,u),m(e,ve,u),t(ve,ea),t(ve,Dt),t(Dt,ta),t(ve,sa),t(ve,zt),t(zt,aa),t(ve,la),t(ve,Ct),t(Ct,na),t(ve,ra),m(e,fs,u),m(e,Pe,u),t(Pe,Ne),t(Ne,Lt),z(at,Lt,null),t(Pe,oa),t(Pe,Pt),t(Pt,ia),m(e,ms,u),z(lt,e,u),m(e,hs,u),m(e,Ge,u),t(Ge,pa),t(Ge,It),t(It,fa),t(Ge,ma),m(e,us,u),z(nt,e,u),m(e,cs,u),z(rt,e,u),m(e,ds,u),m(e,vt,u),t(vt,ha),m(e,gs,u),z(ot,e,u),m(e,_s,u),m(e,qe,u),t(qe,ua),t(qe,St),t(St,ca),t(qe,da),t(qe,it),t(it,Ot),t(Ot,ga),t(qe,_a),m(e,$s,u),z(pt,e,u),m(e,ks,u),m(e,Me,u),t(Me,$a),t(Me,Rt),t(Rt,ka),t(Me,wa),t(Me,Nt),t(Nt,ja),t(Me,ya),m(e,ws,u),m(e,xt,u),t(xt,ba),m(e,js,u),z(ft,e,u),m(e,ys,u),m(e,ke,u),t(ke,va),t(ke,mt),t(mt,xa),t(ke,Ea),t(ke,Gt),t(Gt,Ta),t(ke,Aa),t(ke,Bt),t(Bt,qa),t(ke,Ma),t(ke,Wt),t(Wt,Fa),t(ke,Da),m(e,bs,u),z(ht,e,u),m(e,vs,u),m(e,Et,u),t(Et,za),m(e,xs,u),m(e,Be,u),t(Be,Ht),t(Ht,Ca),t(Be,La),t(Be,ut),t(ut,Pa),t(ut,Yt),t(Yt,Ia),t(ut,Sa),m(e,Es,u),z(ct,e,u),m(e,Ts,u),m(e,We,u),t(We,Oa),t(We,Ut),t(Ut,Ra),t(We,Na),m(e,As,u),z(dt,e,u),m(e,qs,u),m(e,we,u),t(we,Ga),t(we,Tt),t(Tt,Ba),t(we,Wa),t(we,Jt),t(Jt,Ha),t(we,Ya),t(we,Kt),t(Kt,Ua),t(we,Ja),t(we,Qt),t(Qt,Ka),t(we,Qa),m(e,Ms,u),z(He,e,u),m(e,Fs,u),m(e,Ie,u),t(Ie,Ye),t(Ye,Vt),z(gt,Vt,null),t(Ie,Va),t(Ie,Xt),t(Xt,Xa),m(e,Ds,u),m(e,Ue,u),t(Ue,Za),t(Ue,_t),t(_t,el),t(Ue,tl),m(e,zs,u),m(e,Se,u),t(Se,Je),t(Je,Zt),z($t,Zt,null),t(Se,sl),t(Se,es),t(es,al),m(e,Cs,u),z(Ke,e,u),m(e,Ls,u),m(e,Oe,u),t(Oe,Qe),t(Qe,ts),z(kt,ts,null),t(Oe,ll),t(Oe,ss),t(ss,nl),m(e,Ps,u),m(e,Ve,u),t(Ve,rl),t(Ve,wt),t(wt,ol),t(Ve,il),m(e,Is,u),m(e,Re,u),t(Re,Xe),t(Xe,as),z(jt,as,null),t(Re,pl),t(Re,ls),t(ls,fl),m(e,Ss,u),z(Ze,e,u),m(e,Os,u),z(et,e,u),Rs=!0},p(e,[u]){const yt={};u&2&&(yt.$$scope={dirty:u,ctx:e}),H.$set(yt);const ns={};u&2&&(ns.$$scope={dirty:u,ctx:e}),He.$set(ns);const rs={};u&2&&(rs.$$scope={dirty:u,ctx:e}),Ke.$set(rs);const os={};u&2&&(os.$$scope={dirty:u,ctx:e}),Ze.$set(os);const is={};u&2&&(is.$$scope={dirty:u,ctx:e}),et.$set(is)},i(e){Rs||(C(k.$$.fragment,e),C(q.$$.fragment,e),C(Y.$$.fragment,e),C(H.$$.fragment,e),C(oe.$$.fragment,e),C(ye.$$.fragment,e),C(be.$$.fragment,e),C(st.$$.fragment,e),C(at.$$.fragment,e),C(lt.$$.fragment,e),C(nt.$$.fragment,e),C(rt.$$.fragment,e),C(ot.$$.fragment,e),C(pt.$$.fragment,e),C(ft.$$.fragment,e),C(ht.$$.fragment,e),C(ct.$$.fragment,e),C(dt.$$.fragment,e),C(He.$$.fragment,e),C(gt.$$.fragment,e),C($t.$$.fragment,e),C(Ke.$$.fragment,e),C(kt.$$.fragment,e),C(jt.$$.fragment,e),C(Ze.$$.fragment,e),C(et.$$.fragment,e),Rs=!0)},o(e){L(k.$$.fragment,e),L(q.$$.fragment,e),L(Y.$$.fragment,e),L(H.$$.fragment,e),L(oe.$$.fragment,e),L(ye.$$.fragment,e),L(be.$$.fragment,e),L(st.$$.fragment,e),L(at.$$.fragment,e),L(lt.$$.fragment,e),L(nt.$$.fragment,e),L(rt.$$.fragment,e),L(ot.$$.fragment,e),L(pt.$$.fragment,e),L(ft.$$.fragment,e),L(ht.$$.fragment,e),L(ct.$$.fragment,e),L(dt.$$.fragment,e),L(He.$$.fragment,e),L(gt.$$.fragment,e),L($t.$$.fragment,e),L(Ke.$$.fragment,e),L(kt.$$.fragment,e),L(jt.$$.fragment,e),L(Ze.$$.fragment,e),L(et.$$.fragment,e),Rs=!1},d(e){s(a),e&&s(w),e&&s(o),P(k),e&&s(E),e&&s(A),e&&s(S),P(q,e),e&&s(M),e&&s(U),e&&s(G),P(Y,e),e&&s(g),e&&s(x),e&&s(W),e&&s(N),e&&s(me),P(H,e),e&&s(ie),e&&s(ee),P(oe),e&&s(r),e&&s(y),e&&s(xe),P(ye,e),e&&s(Ee),e&&s(de),e&&s($e),P(be,e),e&&s(Te),e&&s(ge),e&&s(Ae),P(st,e),e&&s(ps),e&&s(ve),e&&s(fs),e&&s(Pe),P(at),e&&s(ms),P(lt,e),e&&s(hs),e&&s(Ge),e&&s(us),P(nt,e),e&&s(cs),P(rt,e),e&&s(ds),e&&s(vt),e&&s(gs),P(ot,e),e&&s(_s),e&&s(qe),e&&s($s),P(pt,e),e&&s(ks),e&&s(Me),e&&s(ws),e&&s(xt),e&&s(js),P(ft,e),e&&s(ys),e&&s(ke),e&&s(bs),P(ht,e),e&&s(vs),e&&s(Et),e&&s(xs),e&&s(Be),e&&s(Es),P(ct,e),e&&s(Ts),e&&s(We),e&&s(As),P(dt,e),e&&s(qs),e&&s(we),e&&s(Ms),P(He,e),e&&s(Fs),e&&s(Ie),P(gt),e&&s(Ds),e&&s(Ue),e&&s(zs),e&&s(Se),P($t),e&&s(Cs),P(Ke,e),e&&s(Ls),e&&s(Oe),P(kt),e&&s(Ps),e&&s(Ve),e&&s(Is),e&&s(Re),P(jt),e&&s(Ss),P(Ze,e),e&&s(Os),P(et,e)}}}const Pn={local:"language-modeling",sections:[{local:"load-eli5-dataset",title:"Load ELI5 dataset"},{local:"preprocess",title:"Preprocess"},{local:"causal-language-modeling",sections:[{local:"train",title:"Train"}],title:"Causal language modeling"},{local:"masked-language-modeling",sections:[{local:"train",title:"Train"}],title:"Masked language modeling"}],title:"Language modeling"};function In(J){return gn(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Wn extends hn{constructor(a){super();un(this,a,In,Ln,cn,{})}}export{Wn as default,Pn as metadata};
