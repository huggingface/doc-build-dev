import{S as aQt,i as nQt,s as sQt,e as a,k as l,w as F,t as o,M as lQt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as iQt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as Brt}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function dQt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,K6,Pf,Oe,Qe,xi,Pn,Z6,Bn,In,eL,$i,Nn,oL,ki,Bf,Sa;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),_=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ai=a("code"),Rf=o("model_type"),st=o(" attribute is set to the same key you use when registering the config (here "),Li=a("code"),yi=o('"new-model"'),K6=o(")."),Pf=l(),Oe=a("p"),Qe=o("Likewise, if your "),xi=a("code"),Pn=o("NewModel"),Z6=o(" is a subclass of "),Bn=a("a"),In=o("PreTrainedModel"),eL=o(`, make sure its
`),$i=a("code"),Nn=o("config_class"),oL=o(` attribute is set to the same class you use when registering the model (here
`),ki=a("code"),Bf=o("NewModelConfig"),Sa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var SS=s(p);m=r(SS,"NewModelConfig"),SS.forEach(t),_=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Si=s(d);h=r(Si,"PretrainedConfig"),Si.forEach(t),Eo=r(Ae,`, make sure its
`),Ai=n(Ae,"CODE",{});var RS=s(Ai);Rf=r(RS,"model_type"),RS.forEach(t),st=r(Ae," attribute is set to the same key you use when registering the config (here "),Li=n(Ae,"CODE",{});var PS=s(Li);yi=r(PS,'"new-model"'),PS.forEach(t),K6=r(Ae,")."),Ae.forEach(t),Pf=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),xi=n(Co,"CODE",{});var Ra=s(xi);Pn=r(Ra,"NewModel"),Ra.forEach(t),Z6=r(Co," is a subclass of "),Bn=n(Co,"A",{href:!0});var BS=s(Bn);In=r(BS,"PreTrainedModel"),BS.forEach(t),eL=r(Co,`, make sure its
`),$i=n(Co,"CODE",{});var If=s($i);Nn=r(If,"config_class"),If.forEach(t),oL=r(Co,` attribute is set to the same class you use when registering the model (here
`),ki=n(Co,"CODE",{});var IS=s(ki);Bf=r(IS,"NewModelConfig"),IS.forEach(t),Sa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Bn,"href","/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,p),e(p,m),e(g,_),e(g,d),e(d,h),e(g,Eo),e(g,Ai),e(Ai,Rf),e(g,st),e(g,Li),e(Li,yi),e(g,K6),b(We,Pf,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,xi),e(xi,Pn),e(Oe,Z6),e(Oe,Bn),e(Bn,In),e(Oe,eL),e(Oe,$i),e($i,Nn),e(Oe,oL),e(Oe,ki),e(ki,Bf),e(Oe,Sa)},d(We){We&&t(g),We&&t(Pf),We&&t(Oe)}}}function cQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function gQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hQt($){let g,v,p,m,_;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),_=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Eo=s(p);m=r(Eo,"use_auth_token=True"),Eo.forEach(t),_=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,_)},d(d){d&&t(g)}}}function pQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Qt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZQt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Wt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZWt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lHt($){let g,v,p,m,_;return m=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),_=!0},p:I,i(d){_||(E(m.$$.fragment,d),_=!0)},o(d){C(m.$$.fragment,d),_=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iHt($){let g,v,p,m,_,d,h,Eo,Ai,Rf,st,Li,yi,K6,Pf,Oe,Qe,xi,Pn,Z6,Bn,In,eL,$i,Nn,oL,ki,Bf,Sa,We,Ae,SS,Si,RS,PS,Co,Ra,BS,If,IS,tHe,OVe,Ri,Nf,bae,rL,aHe,vae,nHe,VVe,qn,sHe,Fae,lHe,iHe,Tae,dHe,cHe,XVe,tL,zVe,NS,fHe,QVe,qf,WVe,Pi,jf,Mae,aL,mHe,Eae,gHe,HVe,wo,nL,hHe,sL,pHe,qS,_He,uHe,bHe,lL,vHe,Cae,FHe,THe,MHe,Lr,iL,EHe,wae,CHe,wHe,Bi,AHe,Aae,LHe,yHe,Lae,xHe,$He,kHe,A,Df,yae,SHe,RHe,jS,PHe,BHe,IHe,Gf,xae,NHe,qHe,DS,jHe,DHe,GHe,Of,$ae,OHe,VHe,GS,XHe,zHe,QHe,Vf,kae,WHe,HHe,OS,UHe,JHe,YHe,Xf,Sae,KHe,ZHe,VS,eUe,oUe,rUe,zf,Rae,tUe,aUe,XS,nUe,sUe,lUe,Qf,Pae,iUe,dUe,zS,cUe,fUe,mUe,Wf,Bae,gUe,hUe,QS,pUe,_Ue,uUe,Hf,Iae,bUe,vUe,WS,FUe,TUe,MUe,Uf,Nae,EUe,CUe,HS,wUe,AUe,LUe,Jf,qae,yUe,xUe,US,$Ue,kUe,SUe,Yf,jae,RUe,PUe,JS,BUe,IUe,NUe,Kf,Dae,qUe,jUe,YS,DUe,GUe,OUe,Zf,Gae,VUe,XUe,KS,zUe,QUe,WUe,em,Oae,HUe,UUe,ZS,JUe,YUe,KUe,om,Vae,ZUe,eJe,eR,oJe,rJe,tJe,rm,Xae,aJe,nJe,oR,sJe,lJe,iJe,tm,zae,dJe,cJe,rR,fJe,mJe,gJe,am,Qae,hJe,pJe,tR,_Je,uJe,bJe,nm,Wae,vJe,FJe,aR,TJe,MJe,EJe,sm,Hae,CJe,wJe,nR,AJe,LJe,yJe,lm,Uae,xJe,$Je,sR,kJe,SJe,RJe,im,Jae,PJe,BJe,lR,IJe,NJe,qJe,dm,Yae,jJe,DJe,iR,GJe,OJe,VJe,cm,Kae,XJe,zJe,dR,QJe,WJe,HJe,fm,Zae,UJe,JJe,cR,YJe,KJe,ZJe,mm,ene,eYe,oYe,fR,rYe,tYe,aYe,gm,one,nYe,sYe,mR,lYe,iYe,dYe,hm,rne,cYe,fYe,gR,mYe,gYe,hYe,pm,tne,pYe,_Ye,hR,uYe,bYe,vYe,_m,ane,FYe,TYe,pR,MYe,EYe,CYe,um,nne,wYe,AYe,_R,LYe,yYe,xYe,bm,sne,$Ye,kYe,uR,SYe,RYe,PYe,vm,lne,BYe,IYe,bR,NYe,qYe,jYe,Fm,ine,DYe,GYe,vR,OYe,VYe,XYe,Tm,dne,zYe,QYe,FR,WYe,HYe,UYe,Mm,cne,JYe,YYe,TR,KYe,ZYe,eKe,Em,fne,oKe,rKe,MR,tKe,aKe,nKe,Cm,mne,sKe,lKe,ER,iKe,dKe,cKe,wm,gne,fKe,mKe,CR,gKe,hKe,pKe,Am,hne,_Ke,uKe,wR,bKe,vKe,FKe,Lm,pne,TKe,MKe,AR,EKe,CKe,wKe,ym,_ne,AKe,LKe,LR,yKe,xKe,$Ke,xm,une,kKe,SKe,yR,RKe,PKe,BKe,$m,bne,IKe,NKe,xR,qKe,jKe,DKe,km,vne,GKe,OKe,$R,VKe,XKe,zKe,Sm,Fne,QKe,WKe,kR,HKe,UKe,JKe,Rm,Tne,YKe,KKe,SR,ZKe,eZe,oZe,Pm,Mne,rZe,tZe,RR,aZe,nZe,sZe,Bm,Ene,lZe,iZe,PR,dZe,cZe,fZe,Im,Cne,mZe,gZe,BR,hZe,pZe,_Ze,Nm,wne,uZe,bZe,IR,vZe,FZe,TZe,qm,Ane,MZe,EZe,NR,CZe,wZe,AZe,jm,Lne,LZe,yZe,qR,xZe,$Ze,kZe,Dm,yne,SZe,RZe,jR,PZe,BZe,IZe,Gm,xne,NZe,qZe,DR,jZe,DZe,GZe,Om,$ne,OZe,VZe,GR,XZe,zZe,QZe,Vm,kne,WZe,HZe,OR,UZe,JZe,YZe,Xm,Sne,KZe,ZZe,VR,eeo,oeo,reo,zm,Rne,teo,aeo,XR,neo,seo,leo,Qm,Pne,ieo,deo,zR,ceo,feo,meo,Wm,Bne,geo,heo,QR,peo,_eo,ueo,Hm,Ine,beo,veo,WR,Feo,Teo,Meo,Um,Nne,Eeo,Ceo,HR,weo,Aeo,Leo,Jm,qne,yeo,xeo,UR,$eo,keo,Seo,Ym,jne,Reo,Peo,JR,Beo,Ieo,Neo,Km,Dne,qeo,jeo,YR,Deo,Geo,Oeo,Zm,Gne,Veo,Xeo,KR,zeo,Qeo,Weo,eg,One,Heo,Ueo,ZR,Jeo,Yeo,Keo,og,Vne,Zeo,eoo,eP,ooo,roo,too,rg,Xne,aoo,noo,oP,soo,loo,ioo,tg,zne,doo,coo,rP,foo,moo,goo,ag,Qne,hoo,poo,tP,_oo,uoo,boo,ng,Wne,voo,Foo,aP,Too,Moo,Eoo,sg,Hne,Coo,woo,nP,Aoo,Loo,yoo,lg,Une,xoo,$oo,sP,koo,Soo,Roo,ig,Jne,Poo,Boo,lP,Ioo,Noo,qoo,dg,Yne,joo,Doo,iP,Goo,Ooo,Voo,cg,Kne,Xoo,zoo,dP,Qoo,Woo,Hoo,fg,Zne,Uoo,Joo,cP,Yoo,Koo,Zoo,mg,ese,ero,oro,fP,rro,tro,aro,gg,ose,nro,sro,mP,lro,iro,dro,hg,rse,cro,fro,gP,mro,gro,hro,pg,tse,pro,_ro,hP,uro,bro,vro,_g,ase,Fro,Tro,pP,Mro,Ero,Cro,ug,nse,wro,Aro,_P,Lro,yro,xro,bg,sse,$ro,kro,uP,Sro,Rro,Pro,vg,lse,Bro,Iro,bP,Nro,qro,jro,Fg,ise,Dro,Gro,vP,Oro,Vro,Xro,Tg,dse,zro,Qro,FP,Wro,Hro,Uro,Mg,cse,Jro,Yro,TP,Kro,Zro,eto,Eg,fse,oto,rto,MP,tto,ato,nto,Cg,mse,sto,lto,EP,ito,dto,cto,wg,gse,fto,mto,CP,gto,hto,pto,Ag,hse,_to,uto,wP,bto,vto,Fto,Lg,pse,Tto,Mto,AP,Eto,Cto,wto,yg,_se,Ato,Lto,LP,yto,xto,$to,xg,use,kto,Sto,yP,Rto,Pto,Bto,$g,bse,Ito,Nto,xP,qto,jto,Dto,kg,vse,Gto,Oto,$P,Vto,Xto,zto,Sg,Fse,Qto,Wto,kP,Hto,Uto,Jto,Rg,Tse,Yto,Kto,SP,Zto,eao,oao,Pg,Mse,rao,tao,RP,aao,nao,sao,Bg,Ese,lao,iao,PP,dao,cao,fao,Ig,Cse,mao,gao,BP,hao,pao,_ao,Ng,wse,uao,bao,IP,vao,Fao,Tao,qg,Ase,Mao,Eao,NP,Cao,wao,Aao,jg,Lse,Lao,yao,qP,xao,$ao,kao,Dg,yse,Sao,Rao,jP,Pao,Bao,Iao,Gg,xse,Nao,qao,DP,jao,Dao,Gao,Og,$se,Oao,Vao,GP,Xao,zao,Qao,Vg,kse,Wao,Hao,OP,Uao,Jao,Yao,Xg,Sse,Kao,Zao,VP,eno,ono,rno,zg,Rse,tno,ano,XP,nno,sno,lno,Qg,Pse,ino,dno,zP,cno,fno,mno,Wg,Bse,gno,hno,QP,pno,_no,uno,Hg,Ise,bno,vno,WP,Fno,Tno,Mno,Ug,Nse,Eno,Cno,HP,wno,Ano,Lno,Jg,yno,Yg,dL,xno,qse,$no,UVe,Ii,Kg,jse,cL,kno,Dse,Sno,JVe,Ao,fL,Rno,mL,Pno,UP,Bno,Ino,Nno,gL,qno,Gse,jno,Dno,Gno,yr,hL,Ono,Ose,Vno,Xno,Pa,zno,Vse,Qno,Wno,Xse,Hno,Uno,zse,Jno,Yno,Kno,k,jn,Qse,Zno,eso,JP,oso,rso,YP,tso,aso,nso,Dn,Wse,sso,lso,KP,iso,dso,ZP,cso,fso,mso,Gn,Hse,gso,hso,eB,pso,_so,oB,uso,bso,vso,Zg,Use,Fso,Tso,rB,Mso,Eso,Cso,On,Jse,wso,Aso,tB,Lso,yso,aB,xso,$so,kso,eh,Yse,Sso,Rso,nB,Pso,Bso,Iso,oh,Kse,Nso,qso,sB,jso,Dso,Gso,rh,Zse,Oso,Vso,lB,Xso,zso,Qso,Vn,ele,Wso,Hso,iB,Uso,Jso,dB,Yso,Kso,Zso,Xn,ole,elo,olo,cB,rlo,tlo,fB,alo,nlo,slo,zn,rle,llo,ilo,mB,dlo,clo,gB,flo,mlo,glo,th,tle,hlo,plo,hB,_lo,ulo,blo,ah,ale,vlo,Flo,pB,Tlo,Mlo,Elo,nh,nle,Clo,wlo,_B,Alo,Llo,ylo,Qn,sle,xlo,$lo,uB,klo,Slo,bB,Rlo,Plo,Blo,sh,lle,Ilo,Nlo,vB,qlo,jlo,Dlo,Wn,ile,Glo,Olo,FB,Vlo,Xlo,TB,zlo,Qlo,Wlo,Hn,dle,Hlo,Ulo,MB,Jlo,Ylo,EB,Klo,Zlo,eio,Un,cle,oio,rio,CB,tio,aio,wB,nio,sio,lio,Jn,fle,iio,dio,AB,cio,fio,LB,mio,gio,hio,lh,mle,pio,_io,yB,uio,bio,vio,Yn,gle,Fio,Tio,xB,Mio,Eio,$B,Cio,wio,Aio,Kn,hle,Lio,yio,kB,xio,$io,SB,kio,Sio,Rio,Zn,ple,Pio,Bio,RB,Iio,Nio,PB,qio,jio,Dio,es,_le,Gio,Oio,BB,Vio,Xio,IB,zio,Qio,Wio,os,ule,Hio,Uio,NB,Jio,Yio,qB,Kio,Zio,edo,rs,ble,odo,rdo,jB,tdo,ado,DB,ndo,sdo,ldo,ih,vle,ido,ddo,GB,cdo,fdo,mdo,ts,Fle,gdo,hdo,OB,pdo,_do,VB,udo,bdo,vdo,dh,Tle,Fdo,Tdo,XB,Mdo,Edo,Cdo,as,Mle,wdo,Ado,zB,Ldo,ydo,QB,xdo,$do,kdo,ns,Ele,Sdo,Rdo,WB,Pdo,Bdo,HB,Ido,Ndo,qdo,ss,Cle,jdo,Ddo,UB,Gdo,Odo,JB,Vdo,Xdo,zdo,ch,wle,Qdo,Wdo,YB,Hdo,Udo,Jdo,ls,Ale,Ydo,Kdo,KB,Zdo,eco,ZB,oco,rco,tco,is,Lle,aco,nco,eI,sco,lco,oI,ico,dco,cco,ds,yle,fco,mco,rI,gco,hco,tI,pco,_co,uco,fh,xle,bco,vco,aI,Fco,Tco,Mco,cs,$le,Eco,Cco,nI,wco,Aco,sI,Lco,yco,xco,fs,kle,$co,kco,lI,Sco,Rco,iI,Pco,Bco,Ico,ms,Sle,Nco,qco,dI,jco,Dco,cI,Gco,Oco,Vco,gs,Rle,Xco,zco,fI,Qco,Wco,mI,Hco,Uco,Jco,hs,Ple,Yco,Kco,gI,Zco,efo,hI,ofo,rfo,tfo,ps,Ble,afo,nfo,pI,sfo,lfo,_I,ifo,dfo,cfo,_s,Ile,ffo,mfo,uI,gfo,hfo,bI,pfo,_fo,ufo,us,Nle,bfo,vfo,vI,Ffo,Tfo,FI,Mfo,Efo,Cfo,mh,qle,wfo,Afo,TI,Lfo,yfo,xfo,bs,jle,$fo,kfo,MI,Sfo,Rfo,EI,Pfo,Bfo,Ifo,gh,Dle,Nfo,qfo,CI,jfo,Dfo,Gfo,hh,Gle,Ofo,Vfo,wI,Xfo,zfo,Qfo,vs,Ole,Wfo,Hfo,AI,Ufo,Jfo,LI,Yfo,Kfo,Zfo,Fs,Vle,emo,omo,yI,rmo,tmo,xI,amo,nmo,smo,Ts,Xle,lmo,imo,$I,dmo,cmo,kI,fmo,mmo,gmo,ph,zle,hmo,pmo,SI,_mo,umo,bmo,Ms,Qle,vmo,Fmo,RI,Tmo,Mmo,PI,Emo,Cmo,wmo,Es,Wle,Amo,Lmo,BI,ymo,xmo,II,$mo,kmo,Smo,Cs,Hle,Rmo,Pmo,NI,Bmo,Imo,qI,Nmo,qmo,jmo,ws,Ule,Dmo,Gmo,jI,Omo,Vmo,DI,Xmo,zmo,Qmo,As,Jle,Wmo,Hmo,GI,Umo,Jmo,OI,Ymo,Kmo,Zmo,Ls,Yle,ego,ogo,VI,rgo,tgo,XI,ago,ngo,sgo,ys,Kle,lgo,igo,zI,dgo,cgo,QI,fgo,mgo,ggo,_h,Zle,hgo,pgo,WI,_go,ugo,bgo,xs,eie,vgo,Fgo,HI,Tgo,Mgo,UI,Ego,Cgo,wgo,uh,oie,Ago,Lgo,JI,ygo,xgo,$go,bh,rie,kgo,Sgo,YI,Rgo,Pgo,Bgo,vh,tie,Igo,Ngo,KI,qgo,jgo,Dgo,Fh,aie,Ggo,Ogo,ZI,Vgo,Xgo,zgo,$s,nie,Qgo,Wgo,eN,Hgo,Ugo,oN,Jgo,Ygo,Kgo,Th,sie,Zgo,eho,rN,oho,rho,tho,ks,lie,aho,nho,tN,sho,lho,aN,iho,dho,cho,Ss,iie,fho,mho,nN,gho,hho,sN,pho,_ho,uho,Rs,die,bho,vho,lN,Fho,Tho,iN,Mho,Eho,Cho,Ps,cie,who,Aho,dN,Lho,yho,cN,xho,$ho,kho,Bs,fie,Sho,Rho,fN,Pho,Bho,mN,Iho,Nho,qho,Is,mie,jho,Dho,gN,Gho,Oho,hN,Vho,Xho,zho,Mh,gie,Qho,Who,pN,Hho,Uho,Jho,Eh,hie,Yho,Kho,_N,Zho,epo,opo,Ns,pie,rpo,tpo,uN,apo,npo,bN,spo,lpo,ipo,qs,_ie,dpo,cpo,vN,fpo,mpo,FN,gpo,hpo,ppo,js,uie,_po,upo,TN,bpo,vpo,MN,Fpo,Tpo,Mpo,Ch,bie,Epo,Cpo,EN,wpo,Apo,Lpo,wh,vie,ypo,xpo,CN,$po,kpo,Spo,Ah,Fie,Rpo,Ppo,wN,Bpo,Ipo,Npo,Ds,Tie,qpo,jpo,AN,Dpo,Gpo,LN,Opo,Vpo,Xpo,Gs,Mie,zpo,Qpo,yN,Wpo,Hpo,xN,Upo,Jpo,Ypo,Lh,Eie,Kpo,Zpo,$N,e_o,o_o,r_o,yh,Cie,t_o,a_o,kN,n_o,s_o,l_o,xh,wie,i_o,d_o,SN,c_o,f_o,m_o,Os,Aie,g_o,h_o,RN,p_o,__o,PN,u_o,b_o,v_o,$h,Lie,F_o,T_o,BN,M_o,E_o,C_o,kh,yie,w_o,A_o,IN,L_o,y_o,x_o,Vs,xie,$_o,k_o,NN,S_o,R_o,qN,P_o,B_o,I_o,Xs,$ie,N_o,q_o,jN,j_o,D_o,DN,G_o,O_o,V_o,zs,kie,X_o,z_o,GN,Q_o,W_o,ON,H_o,U_o,J_o,Qs,Sie,Y_o,K_o,VN,Z_o,euo,XN,ouo,ruo,tuo,Sh,auo,Rh,pL,nuo,Rie,suo,YVe,Ni,Ph,Pie,_L,luo,Bie,iuo,KVe,Lo,uL,duo,bL,cuo,zN,fuo,muo,guo,vL,huo,Iie,puo,_uo,uuo,He,FL,buo,Nie,vuo,Fuo,Ba,Tuo,qie,Muo,Euo,jie,Cuo,wuo,Die,Auo,Luo,yuo,Y,Bh,Gie,xuo,$uo,QN,kuo,Suo,Ruo,Ih,Oie,Puo,Buo,WN,Iuo,Nuo,quo,Nh,Vie,juo,Duo,HN,Guo,Ouo,Vuo,qh,Xie,Xuo,zuo,UN,Quo,Wuo,Huo,jh,zie,Uuo,Juo,JN,Yuo,Kuo,Zuo,Dh,Qie,e2o,o2o,YN,r2o,t2o,a2o,Gh,Wie,n2o,s2o,KN,l2o,i2o,d2o,Oh,Hie,c2o,f2o,ZN,m2o,g2o,h2o,Vh,Uie,p2o,_2o,eq,u2o,b2o,v2o,Xh,Jie,F2o,T2o,oq,M2o,E2o,C2o,zh,Yie,w2o,A2o,rq,L2o,y2o,x2o,Qh,Kie,$2o,k2o,tq,S2o,R2o,P2o,Wh,Zie,B2o,I2o,aq,N2o,q2o,j2o,Hh,ede,D2o,G2o,nq,O2o,V2o,X2o,Uh,ode,z2o,Q2o,sq,W2o,H2o,U2o,Jh,rde,J2o,Y2o,lq,K2o,Z2o,e1o,Yh,tde,o1o,r1o,iq,t1o,a1o,n1o,Kh,ade,s1o,l1o,dq,i1o,d1o,c1o,Zh,nde,f1o,m1o,cq,g1o,h1o,p1o,ep,sde,_1o,u1o,fq,b1o,v1o,F1o,op,lde,T1o,M1o,mq,E1o,C1o,w1o,rp,ide,A1o,L1o,gq,y1o,x1o,$1o,tp,dde,k1o,S1o,hq,R1o,P1o,B1o,ap,cde,I1o,N1o,pq,q1o,j1o,D1o,np,fde,G1o,O1o,_q,V1o,X1o,z1o,sp,mde,Q1o,W1o,uq,H1o,U1o,J1o,lp,gde,Y1o,K1o,bq,Z1o,e4o,o4o,ip,hde,r4o,t4o,vq,a4o,n4o,s4o,dp,pde,l4o,i4o,Fq,d4o,c4o,f4o,cp,_de,m4o,g4o,Tq,h4o,p4o,_4o,fp,ude,u4o,b4o,Mq,v4o,F4o,T4o,mp,bde,M4o,E4o,Eq,C4o,w4o,A4o,gp,vde,L4o,y4o,Cq,x4o,$4o,k4o,hp,Fde,S4o,R4o,wq,P4o,B4o,I4o,pp,N4o,_p,q4o,up,TL,j4o,Tde,D4o,ZVe,qi,bp,Mde,ML,G4o,Ede,O4o,eXe,yo,EL,V4o,CL,X4o,Aq,z4o,Q4o,W4o,wL,H4o,Cde,U4o,J4o,Y4o,Ue,AL,K4o,wde,Z4o,ebo,ji,obo,Ade,rbo,tbo,Lde,abo,nbo,sbo,he,vp,yde,lbo,ibo,Lq,dbo,cbo,fbo,Fp,xde,mbo,gbo,$de,hbo,pbo,_bo,Tp,kde,ubo,bbo,yq,vbo,Fbo,Tbo,Mp,Sde,Mbo,Ebo,xq,Cbo,wbo,Abo,Ep,Rde,Lbo,ybo,$q,xbo,$bo,kbo,Cp,Pde,Sbo,Rbo,kq,Pbo,Bbo,Ibo,wp,Bde,Nbo,qbo,Sq,jbo,Dbo,Gbo,Ap,Ide,Obo,Vbo,Rq,Xbo,zbo,Qbo,Lp,Nde,Wbo,Hbo,Pq,Ubo,Jbo,Ybo,yp,qde,Kbo,Zbo,Bq,evo,ovo,rvo,xp,jde,tvo,avo,Iq,nvo,svo,lvo,$p,Dde,ivo,dvo,Nq,cvo,fvo,mvo,kp,Gde,gvo,hvo,qq,pvo,_vo,uvo,Sp,Ode,bvo,vvo,jq,Fvo,Tvo,Mvo,Rp,Vde,Evo,Cvo,Dq,wvo,Avo,Lvo,Pp,Xde,yvo,xvo,Gq,$vo,kvo,Svo,Bp,zde,Rvo,Pvo,Oq,Bvo,Ivo,Nvo,Ip,Qde,qvo,jvo,Vq,Dvo,Gvo,Ovo,Np,Vvo,qp,Xvo,jp,LL,zvo,Wde,Qvo,oXe,Di,Dp,Hde,yL,Wvo,Ude,Hvo,rXe,xo,xL,Uvo,Gi,Jvo,Xq,Yvo,Kvo,zq,Zvo,eFo,oFo,$L,rFo,Jde,tFo,aFo,nFo,lt,kL,sFo,Yde,lFo,iFo,Oi,dFo,Kde,cFo,fFo,Qq,mFo,gFo,hFo,Gp,pFo,Je,SL,_Fo,Zde,uFo,bFo,Ia,vFo,ece,FFo,TFo,oce,MFo,EFo,rce,CFo,wFo,AFo,y,Op,tce,LFo,yFo,Wq,xFo,$Fo,kFo,Vp,ace,SFo,RFo,Hq,PFo,BFo,IFo,Xp,nce,NFo,qFo,Uq,jFo,DFo,GFo,zp,sce,OFo,VFo,Jq,XFo,zFo,QFo,Qp,lce,WFo,HFo,Yq,UFo,JFo,YFo,Wp,ice,KFo,ZFo,Kq,eTo,oTo,rTo,Hp,dce,tTo,aTo,Zq,nTo,sTo,lTo,Up,cce,iTo,dTo,ej,cTo,fTo,mTo,Jp,fce,gTo,hTo,oj,pTo,_To,uTo,Yp,mce,bTo,vTo,rj,FTo,TTo,MTo,Kp,gce,ETo,CTo,tj,wTo,ATo,LTo,Zp,hce,yTo,xTo,aj,$To,kTo,STo,e_,pce,RTo,PTo,nj,BTo,ITo,NTo,o_,_ce,qTo,jTo,sj,DTo,GTo,OTo,r_,uce,VTo,XTo,lj,zTo,QTo,WTo,t_,bce,HTo,UTo,ij,JTo,YTo,KTo,a_,vce,ZTo,e7o,dj,o7o,r7o,t7o,n_,Fce,a7o,n7o,cj,s7o,l7o,i7o,s_,Tce,d7o,c7o,fj,f7o,m7o,g7o,l_,Mce,h7o,p7o,mj,_7o,u7o,b7o,i_,Ece,v7o,F7o,gj,T7o,M7o,E7o,d_,Cce,C7o,w7o,hj,A7o,L7o,y7o,c_,wce,x7o,$7o,pj,k7o,S7o,R7o,f_,Ace,P7o,B7o,_j,I7o,N7o,q7o,m_,Lce,j7o,D7o,uj,G7o,O7o,V7o,g_,yce,X7o,z7o,bj,Q7o,W7o,H7o,h_,xce,U7o,J7o,vj,Y7o,K7o,Z7o,p_,$ce,e9o,o9o,Fj,r9o,t9o,a9o,__,kce,n9o,s9o,Tj,l9o,i9o,d9o,u_,Sce,c9o,f9o,Mj,m9o,g9o,h9o,b_,Rce,p9o,_9o,Ej,u9o,b9o,v9o,v_,Pce,F9o,T9o,Cj,M9o,E9o,C9o,F_,Bce,w9o,A9o,wj,L9o,y9o,x9o,T_,Ice,$9o,k9o,Aj,S9o,R9o,P9o,Ws,Nce,B9o,I9o,Lj,N9o,q9o,yj,j9o,D9o,G9o,M_,qce,O9o,V9o,xj,X9o,z9o,Q9o,E_,jce,W9o,H9o,$j,U9o,J9o,Y9o,C_,Dce,K9o,Z9o,kj,eMo,oMo,rMo,w_,Gce,tMo,aMo,Sj,nMo,sMo,lMo,A_,Oce,iMo,dMo,Rj,cMo,fMo,mMo,L_,Vce,gMo,hMo,Pj,pMo,_Mo,uMo,y_,Xce,bMo,vMo,Bj,FMo,TMo,MMo,x_,zce,EMo,CMo,Ij,wMo,AMo,LMo,$_,Qce,yMo,xMo,Nj,$Mo,kMo,SMo,k_,Wce,RMo,PMo,qj,BMo,IMo,NMo,S_,Hce,qMo,jMo,jj,DMo,GMo,OMo,R_,Uce,VMo,XMo,Dj,zMo,QMo,WMo,P_,Jce,HMo,UMo,Gj,JMo,YMo,KMo,B_,Yce,ZMo,eEo,Oj,oEo,rEo,tEo,I_,Kce,aEo,nEo,Vj,sEo,lEo,iEo,N_,Zce,dEo,cEo,Xj,fEo,mEo,gEo,q_,efe,hEo,pEo,zj,_Eo,uEo,bEo,j_,ofe,vEo,FEo,Qj,TEo,MEo,EEo,D_,rfe,CEo,wEo,Wj,AEo,LEo,yEo,G_,tfe,xEo,$Eo,Hj,kEo,SEo,REo,O_,afe,PEo,BEo,Uj,IEo,NEo,qEo,V_,nfe,jEo,DEo,Jj,GEo,OEo,VEo,X_,sfe,XEo,zEo,Yj,QEo,WEo,HEo,z_,lfe,UEo,JEo,Kj,YEo,KEo,ZEo,Q_,ife,eCo,oCo,Zj,rCo,tCo,aCo,W_,dfe,nCo,sCo,eD,lCo,iCo,dCo,H_,cfe,cCo,fCo,oD,mCo,gCo,hCo,U_,ffe,pCo,_Co,rD,uCo,bCo,vCo,J_,mfe,FCo,TCo,tD,MCo,ECo,CCo,Y_,gfe,wCo,ACo,aD,LCo,yCo,xCo,K_,hfe,$Co,kCo,nD,SCo,RCo,PCo,Z_,pfe,BCo,ICo,sD,NCo,qCo,jCo,eu,_fe,DCo,GCo,lD,OCo,VCo,XCo,ou,ufe,zCo,QCo,iD,WCo,HCo,UCo,ru,bfe,JCo,YCo,dD,KCo,ZCo,e3o,tu,vfe,o3o,r3o,cD,t3o,a3o,n3o,au,Ffe,s3o,l3o,fD,i3o,d3o,c3o,nu,Tfe,f3o,m3o,mD,g3o,h3o,p3o,su,Mfe,_3o,u3o,gD,b3o,v3o,F3o,lu,Efe,T3o,M3o,hD,E3o,C3o,w3o,iu,Cfe,A3o,L3o,pD,y3o,x3o,$3o,du,wfe,k3o,S3o,_D,R3o,P3o,B3o,cu,Afe,I3o,N3o,uD,q3o,j3o,D3o,fu,Lfe,G3o,O3o,bD,V3o,X3o,z3o,mu,yfe,Q3o,W3o,vD,H3o,U3o,J3o,gu,xfe,Y3o,K3o,FD,Z3o,e5o,o5o,hu,$fe,r5o,t5o,TD,a5o,n5o,s5o,pu,kfe,l5o,i5o,MD,d5o,c5o,f5o,_u,Sfe,m5o,g5o,ED,h5o,p5o,_5o,uu,Rfe,u5o,b5o,CD,v5o,F5o,T5o,bu,Pfe,M5o,E5o,wD,C5o,w5o,A5o,vu,Bfe,L5o,y5o,AD,x5o,$5o,k5o,Fu,Ife,S5o,R5o,LD,P5o,B5o,I5o,Tu,Nfe,N5o,q5o,yD,j5o,D5o,G5o,Mu,qfe,O5o,V5o,xD,X5o,z5o,Q5o,Eu,jfe,W5o,H5o,$D,U5o,J5o,Y5o,Cu,Dfe,K5o,Z5o,kD,e0o,o0o,r0o,wu,Gfe,t0o,a0o,SD,n0o,s0o,l0o,Au,Ofe,i0o,d0o,RD,c0o,f0o,m0o,Lu,Vfe,g0o,h0o,PD,p0o,_0o,u0o,yu,Xfe,b0o,v0o,BD,F0o,T0o,M0o,xu,zfe,E0o,C0o,ID,w0o,A0o,L0o,$u,Qfe,y0o,x0o,ND,$0o,k0o,S0o,ku,Wfe,R0o,P0o,qD,B0o,I0o,N0o,Su,Hfe,q0o,j0o,jD,D0o,G0o,O0o,Ru,Ufe,V0o,X0o,DD,z0o,Q0o,W0o,Pu,Jfe,H0o,U0o,GD,J0o,Y0o,K0o,Bu,Yfe,Z0o,ewo,OD,owo,rwo,two,Iu,Kfe,awo,nwo,VD,swo,lwo,iwo,Nu,Zfe,dwo,cwo,XD,fwo,mwo,gwo,qu,eme,hwo,pwo,zD,_wo,uwo,bwo,ju,ome,vwo,Fwo,QD,Two,Mwo,Ewo,Du,rme,Cwo,wwo,WD,Awo,Lwo,ywo,Gu,tme,xwo,$wo,HD,kwo,Swo,Rwo,Ou,ame,Pwo,Bwo,UD,Iwo,Nwo,qwo,Vu,nme,jwo,Dwo,JD,Gwo,Owo,Vwo,Xu,Xwo,sme,zwo,Qwo,lme,Wwo,Hwo,zu,tXe,Vi,Qu,ime,RL,Uwo,dme,Jwo,aXe,$o,PL,Ywo,Xi,Kwo,YD,Zwo,eAo,KD,oAo,rAo,tAo,BL,aAo,cme,nAo,sAo,lAo,it,IL,iAo,fme,dAo,cAo,zi,fAo,mme,mAo,gAo,ZD,hAo,pAo,_Ao,Wu,uAo,Ye,NL,bAo,gme,vAo,FAo,Na,TAo,hme,MAo,EAo,pme,CAo,wAo,_me,AAo,LAo,yAo,G,Hu,ume,xAo,$Ao,eG,kAo,SAo,RAo,Uu,bme,PAo,BAo,oG,IAo,NAo,qAo,Ju,vme,jAo,DAo,rG,GAo,OAo,VAo,Yu,Fme,XAo,zAo,tG,QAo,WAo,HAo,Ku,Tme,UAo,JAo,aG,YAo,KAo,ZAo,Zu,Mme,e6o,o6o,nG,r6o,t6o,a6o,e2,Eme,n6o,s6o,sG,l6o,i6o,d6o,o2,Cme,c6o,f6o,lG,m6o,g6o,h6o,r2,wme,p6o,_6o,iG,u6o,b6o,v6o,t2,Ame,F6o,T6o,dG,M6o,E6o,C6o,a2,Lme,w6o,A6o,cG,L6o,y6o,x6o,n2,yme,$6o,k6o,fG,S6o,R6o,P6o,s2,xme,B6o,I6o,mG,N6o,q6o,j6o,l2,$me,D6o,G6o,gG,O6o,V6o,X6o,i2,kme,z6o,Q6o,hG,W6o,H6o,U6o,d2,Sme,J6o,Y6o,pG,K6o,Z6o,eLo,c2,Rme,oLo,rLo,_G,tLo,aLo,nLo,f2,Pme,sLo,lLo,uG,iLo,dLo,cLo,m2,Bme,fLo,mLo,bG,gLo,hLo,pLo,g2,Ime,_Lo,uLo,vG,bLo,vLo,FLo,h2,Nme,TLo,MLo,FG,ELo,CLo,wLo,p2,qme,ALo,LLo,TG,yLo,xLo,$Lo,_2,jme,kLo,SLo,MG,RLo,PLo,BLo,u2,Dme,ILo,NLo,EG,qLo,jLo,DLo,b2,Gme,GLo,OLo,CG,VLo,XLo,zLo,v2,Ome,QLo,WLo,wG,HLo,ULo,JLo,F2,Vme,YLo,KLo,AG,ZLo,eyo,oyo,T2,Xme,ryo,tyo,LG,ayo,nyo,syo,M2,zme,lyo,iyo,yG,dyo,cyo,fyo,E2,Qme,myo,gyo,xG,hyo,pyo,_yo,C2,Wme,uyo,byo,$G,vyo,Fyo,Tyo,w2,Hme,Myo,Eyo,kG,Cyo,wyo,Ayo,A2,Ume,Lyo,yyo,SG,xyo,$yo,kyo,L2,Jme,Syo,Ryo,RG,Pyo,Byo,Iyo,y2,Yme,Nyo,qyo,PG,jyo,Dyo,Gyo,x2,Kme,Oyo,Vyo,BG,Xyo,zyo,Qyo,$2,Zme,Wyo,Hyo,IG,Uyo,Jyo,Yyo,k2,ege,Kyo,Zyo,NG,e8o,o8o,r8o,S2,oge,t8o,a8o,qG,n8o,s8o,l8o,R2,rge,i8o,d8o,jG,c8o,f8o,m8o,P2,tge,g8o,h8o,DG,p8o,_8o,u8o,B2,age,b8o,v8o,GG,F8o,T8o,M8o,I2,nge,E8o,C8o,OG,w8o,A8o,L8o,N2,sge,y8o,x8o,VG,$8o,k8o,S8o,q2,lge,R8o,P8o,XG,B8o,I8o,N8o,j2,q8o,ige,j8o,D8o,dge,G8o,O8o,D2,nXe,Qi,G2,cge,qL,V8o,fge,X8o,sXe,ko,jL,z8o,Wi,Q8o,zG,W8o,H8o,QG,U8o,J8o,Y8o,DL,K8o,mge,Z8o,exo,oxo,dt,GL,rxo,gge,txo,axo,Hi,nxo,hge,sxo,lxo,WG,ixo,dxo,cxo,O2,fxo,Ke,OL,mxo,pge,gxo,hxo,qa,pxo,_ge,_xo,uxo,uge,bxo,vxo,bge,Fxo,Txo,Mxo,z,V2,vge,Exo,Cxo,HG,wxo,Axo,Lxo,X2,Fge,yxo,xxo,UG,$xo,kxo,Sxo,z2,Tge,Rxo,Pxo,JG,Bxo,Ixo,Nxo,Q2,Mge,qxo,jxo,YG,Dxo,Gxo,Oxo,W2,Ege,Vxo,Xxo,KG,zxo,Qxo,Wxo,H2,Cge,Hxo,Uxo,ZG,Jxo,Yxo,Kxo,U2,wge,Zxo,e$o,eO,o$o,r$o,t$o,J2,Age,a$o,n$o,oO,s$o,l$o,i$o,Y2,Lge,d$o,c$o,rO,f$o,m$o,g$o,K2,yge,h$o,p$o,tO,_$o,u$o,b$o,Z2,xge,v$o,F$o,aO,T$o,M$o,E$o,e1,$ge,C$o,w$o,nO,A$o,L$o,y$o,o1,kge,x$o,$$o,sO,k$o,S$o,R$o,r1,Sge,P$o,B$o,lO,I$o,N$o,q$o,t1,Rge,j$o,D$o,iO,G$o,O$o,V$o,a1,Pge,X$o,z$o,dO,Q$o,W$o,H$o,n1,Bge,U$o,J$o,cO,Y$o,K$o,Z$o,s1,Ige,eko,oko,fO,rko,tko,ako,l1,Nge,nko,sko,mO,lko,iko,dko,i1,qge,cko,fko,gO,mko,gko,hko,d1,jge,pko,_ko,hO,uko,bko,vko,c1,Dge,Fko,Tko,pO,Mko,Eko,Cko,f1,Gge,wko,Ako,_O,Lko,yko,xko,m1,Oge,$ko,kko,uO,Sko,Rko,Pko,g1,Vge,Bko,Iko,bO,Nko,qko,jko,h1,Xge,Dko,Gko,vO,Oko,Vko,Xko,p1,zge,zko,Qko,FO,Wko,Hko,Uko,_1,Qge,Jko,Yko,TO,Kko,Zko,eSo,u1,Wge,oSo,rSo,MO,tSo,aSo,nSo,b1,Hge,sSo,lSo,EO,iSo,dSo,cSo,v1,Uge,fSo,mSo,CO,gSo,hSo,pSo,F1,Jge,_So,uSo,wO,bSo,vSo,FSo,T1,Yge,TSo,MSo,AO,ESo,CSo,wSo,M1,Kge,ASo,LSo,LO,ySo,xSo,$So,E1,Zge,kSo,SSo,yO,RSo,PSo,BSo,C1,ehe,ISo,NSo,xO,qSo,jSo,DSo,w1,ohe,GSo,OSo,$O,VSo,XSo,zSo,A1,rhe,QSo,WSo,kO,HSo,USo,JSo,L1,the,YSo,KSo,SO,ZSo,eRo,oRo,y1,ahe,rRo,tRo,RO,aRo,nRo,sRo,x1,lRo,nhe,iRo,dRo,she,cRo,fRo,$1,lXe,Ui,k1,lhe,VL,mRo,ihe,gRo,iXe,So,XL,hRo,Ji,pRo,PO,_Ro,uRo,BO,bRo,vRo,FRo,zL,TRo,dhe,MRo,ERo,CRo,ct,QL,wRo,che,ARo,LRo,Yi,yRo,fhe,xRo,$Ro,IO,kRo,SRo,RRo,S1,PRo,Ze,WL,BRo,mhe,IRo,NRo,ja,qRo,ghe,jRo,DRo,hhe,GRo,ORo,phe,VRo,XRo,zRo,W,R1,_he,QRo,WRo,NO,HRo,URo,JRo,P1,uhe,YRo,KRo,qO,ZRo,ePo,oPo,B1,bhe,rPo,tPo,jO,aPo,nPo,sPo,I1,vhe,lPo,iPo,DO,dPo,cPo,fPo,N1,Fhe,mPo,gPo,GO,hPo,pPo,_Po,q1,The,uPo,bPo,OO,vPo,FPo,TPo,j1,Mhe,MPo,EPo,VO,CPo,wPo,APo,D1,Ehe,LPo,yPo,XO,xPo,$Po,kPo,G1,Che,SPo,RPo,zO,PPo,BPo,IPo,O1,whe,NPo,qPo,QO,jPo,DPo,GPo,V1,Ahe,OPo,VPo,WO,XPo,zPo,QPo,X1,Lhe,WPo,HPo,HO,UPo,JPo,YPo,z1,yhe,KPo,ZPo,UO,eBo,oBo,rBo,Q1,xhe,tBo,aBo,JO,nBo,sBo,lBo,W1,$he,iBo,dBo,YO,cBo,fBo,mBo,H1,khe,gBo,hBo,KO,pBo,_Bo,uBo,U1,She,bBo,vBo,ZO,FBo,TBo,MBo,J1,Rhe,EBo,CBo,eV,wBo,ABo,LBo,Y1,Phe,yBo,xBo,oV,$Bo,kBo,SBo,K1,Bhe,RBo,PBo,rV,BBo,IBo,NBo,Z1,Ihe,qBo,jBo,tV,DBo,GBo,OBo,e4,Nhe,VBo,XBo,aV,zBo,QBo,WBo,o4,qhe,HBo,UBo,nV,JBo,YBo,KBo,r4,jhe,ZBo,eIo,sV,oIo,rIo,tIo,t4,Dhe,aIo,nIo,lV,sIo,lIo,iIo,a4,Ghe,dIo,cIo,iV,fIo,mIo,gIo,n4,Ohe,hIo,pIo,dV,_Io,uIo,bIo,s4,Vhe,vIo,FIo,cV,TIo,MIo,EIo,l4,Xhe,CIo,wIo,fV,AIo,LIo,yIo,i4,zhe,xIo,$Io,mV,kIo,SIo,RIo,d4,Qhe,PIo,BIo,gV,IIo,NIo,qIo,c4,Whe,jIo,DIo,hV,GIo,OIo,VIo,f4,Hhe,XIo,zIo,pV,QIo,WIo,HIo,m4,Uhe,UIo,JIo,Jhe,YIo,KIo,ZIo,g4,Yhe,eNo,oNo,_V,rNo,tNo,aNo,h4,Khe,nNo,sNo,uV,lNo,iNo,dNo,p4,Zhe,cNo,fNo,bV,mNo,gNo,hNo,_4,epe,pNo,_No,vV,uNo,bNo,vNo,u4,FNo,ope,TNo,MNo,rpe,ENo,CNo,b4,dXe,Ki,v4,tpe,HL,wNo,ape,ANo,cXe,Ro,UL,LNo,Zi,yNo,FV,xNo,$No,TV,kNo,SNo,RNo,JL,PNo,npe,BNo,INo,NNo,ft,YL,qNo,spe,jNo,DNo,ed,GNo,lpe,ONo,VNo,MV,XNo,zNo,QNo,F4,WNo,eo,KL,HNo,ipe,UNo,JNo,Da,YNo,dpe,KNo,ZNo,cpe,eqo,oqo,fpe,rqo,tqo,aqo,pe,T4,mpe,nqo,sqo,EV,lqo,iqo,dqo,M4,gpe,cqo,fqo,CV,mqo,gqo,hqo,E4,hpe,pqo,_qo,wV,uqo,bqo,vqo,C4,ppe,Fqo,Tqo,AV,Mqo,Eqo,Cqo,w4,_pe,wqo,Aqo,LV,Lqo,yqo,xqo,A4,upe,$qo,kqo,yV,Sqo,Rqo,Pqo,L4,bpe,Bqo,Iqo,xV,Nqo,qqo,jqo,y4,vpe,Dqo,Gqo,$V,Oqo,Vqo,Xqo,x4,Fpe,zqo,Qqo,kV,Wqo,Hqo,Uqo,$4,Tpe,Jqo,Yqo,SV,Kqo,Zqo,ejo,k4,Mpe,ojo,rjo,RV,tjo,ajo,njo,S4,Epe,sjo,ljo,PV,ijo,djo,cjo,R4,Cpe,fjo,mjo,BV,gjo,hjo,pjo,P4,wpe,_jo,ujo,IV,bjo,vjo,Fjo,B4,Ape,Tjo,Mjo,NV,Ejo,Cjo,wjo,I4,Lpe,Ajo,Ljo,qV,yjo,xjo,$jo,N4,ype,kjo,Sjo,jV,Rjo,Pjo,Bjo,q4,xpe,Ijo,Njo,DV,qjo,jjo,Djo,j4,Gjo,$pe,Ojo,Vjo,kpe,Xjo,zjo,D4,fXe,od,G4,Spe,ZL,Qjo,Rpe,Wjo,mXe,Po,ey,Hjo,rd,Ujo,GV,Jjo,Yjo,OV,Kjo,Zjo,eDo,oy,oDo,Ppe,rDo,tDo,aDo,mt,ry,nDo,Bpe,sDo,lDo,td,iDo,Ipe,dDo,cDo,VV,fDo,mDo,gDo,O4,hDo,oo,ty,pDo,Npe,_Do,uDo,Ga,bDo,qpe,vDo,FDo,jpe,TDo,MDo,Dpe,EDo,CDo,wDo,N,V4,Gpe,ADo,LDo,XV,yDo,xDo,$Do,X4,Ope,kDo,SDo,zV,RDo,PDo,BDo,z4,Vpe,IDo,NDo,QV,qDo,jDo,DDo,Q4,Xpe,GDo,ODo,WV,VDo,XDo,zDo,W4,zpe,QDo,WDo,HV,HDo,UDo,JDo,H4,Qpe,YDo,KDo,UV,ZDo,eGo,oGo,U4,Wpe,rGo,tGo,JV,aGo,nGo,sGo,J4,Hpe,lGo,iGo,YV,dGo,cGo,fGo,Y4,Upe,mGo,gGo,KV,hGo,pGo,_Go,K4,Jpe,uGo,bGo,ZV,vGo,FGo,TGo,Z4,Ype,MGo,EGo,eX,CGo,wGo,AGo,eb,Kpe,LGo,yGo,oX,xGo,$Go,kGo,ob,Zpe,SGo,RGo,rX,PGo,BGo,IGo,rb,e_e,NGo,qGo,tX,jGo,DGo,GGo,tb,o_e,OGo,VGo,aX,XGo,zGo,QGo,ab,r_e,WGo,HGo,nX,UGo,JGo,YGo,nb,t_e,KGo,ZGo,sX,eOo,oOo,rOo,sb,a_e,tOo,aOo,lX,nOo,sOo,lOo,lb,n_e,iOo,dOo,iX,cOo,fOo,mOo,ib,s_e,gOo,hOo,dX,pOo,_Oo,uOo,db,l_e,bOo,vOo,cX,FOo,TOo,MOo,cb,i_e,EOo,COo,fX,wOo,AOo,LOo,fb,d_e,yOo,xOo,mX,$Oo,kOo,SOo,mb,c_e,ROo,POo,gX,BOo,IOo,NOo,gb,f_e,qOo,jOo,hX,DOo,GOo,OOo,hb,m_e,VOo,XOo,pX,zOo,QOo,WOo,pb,g_e,HOo,UOo,_X,JOo,YOo,KOo,_b,h_e,ZOo,eVo,uX,oVo,rVo,tVo,ub,p_e,aVo,nVo,bX,sVo,lVo,iVo,bb,__e,dVo,cVo,vX,fVo,mVo,gVo,vb,u_e,hVo,pVo,FX,_Vo,uVo,bVo,Fb,b_e,vVo,FVo,TX,TVo,MVo,EVo,Tb,v_e,CVo,wVo,MX,AVo,LVo,yVo,Mb,F_e,xVo,$Vo,EX,kVo,SVo,RVo,Eb,T_e,PVo,BVo,CX,IVo,NVo,qVo,Cb,M_e,jVo,DVo,wX,GVo,OVo,VVo,wb,E_e,XVo,zVo,AX,QVo,WVo,HVo,Ab,C_e,UVo,JVo,LX,YVo,KVo,ZVo,Lb,w_e,eXo,oXo,yX,rXo,tXo,aXo,yb,A_e,nXo,sXo,xX,lXo,iXo,dXo,xb,L_e,cXo,fXo,$X,mXo,gXo,hXo,$b,y_e,pXo,_Xo,kX,uXo,bXo,vXo,kb,x_e,FXo,TXo,SX,MXo,EXo,CXo,Sb,$_e,wXo,AXo,RX,LXo,yXo,xXo,Rb,k_e,$Xo,kXo,PX,SXo,RXo,PXo,Pb,S_e,BXo,IXo,BX,NXo,qXo,jXo,Bb,R_e,DXo,GXo,IX,OXo,VXo,XXo,Ib,P_e,zXo,QXo,NX,WXo,HXo,UXo,Nb,B_e,JXo,YXo,qX,KXo,ZXo,ezo,qb,I_e,ozo,rzo,jX,tzo,azo,nzo,jb,szo,N_e,lzo,izo,q_e,dzo,czo,Db,gXe,ad,Gb,j_e,ay,fzo,D_e,mzo,hXe,Bo,ny,gzo,nd,hzo,DX,pzo,_zo,GX,uzo,bzo,vzo,sy,Fzo,G_e,Tzo,Mzo,Ezo,gt,ly,Czo,O_e,wzo,Azo,sd,Lzo,V_e,yzo,xzo,OX,$zo,kzo,Szo,Ob,Rzo,ro,iy,Pzo,X_e,Bzo,Izo,Oa,Nzo,z_e,qzo,jzo,Q_e,Dzo,Gzo,W_e,Ozo,Vzo,Xzo,Z,Vb,H_e,zzo,Qzo,VX,Wzo,Hzo,Uzo,Xb,U_e,Jzo,Yzo,XX,Kzo,Zzo,eQo,zb,J_e,oQo,rQo,zX,tQo,aQo,nQo,Qb,Y_e,sQo,lQo,QX,iQo,dQo,cQo,Wb,K_e,fQo,mQo,WX,gQo,hQo,pQo,Hb,Z_e,_Qo,uQo,HX,bQo,vQo,FQo,Ub,eue,TQo,MQo,UX,EQo,CQo,wQo,Jb,oue,AQo,LQo,JX,yQo,xQo,$Qo,Yb,rue,kQo,SQo,YX,RQo,PQo,BQo,Kb,tue,IQo,NQo,KX,qQo,jQo,DQo,Zb,aue,GQo,OQo,ZX,VQo,XQo,zQo,ev,nue,QQo,WQo,ez,HQo,UQo,JQo,ov,sue,YQo,KQo,oz,ZQo,eWo,oWo,rv,lue,rWo,tWo,rz,aWo,nWo,sWo,tv,iue,lWo,iWo,tz,dWo,cWo,fWo,av,due,mWo,gWo,az,hWo,pWo,_Wo,nv,cue,uWo,bWo,nz,vWo,FWo,TWo,sv,fue,MWo,EWo,sz,CWo,wWo,AWo,lv,mue,LWo,yWo,lz,xWo,$Wo,kWo,iv,gue,SWo,RWo,iz,PWo,BWo,IWo,dv,hue,NWo,qWo,dz,jWo,DWo,GWo,cv,pue,OWo,VWo,cz,XWo,zWo,QWo,fv,_ue,WWo,HWo,fz,UWo,JWo,YWo,mv,uue,KWo,ZWo,mz,eHo,oHo,rHo,gv,bue,tHo,aHo,gz,nHo,sHo,lHo,hv,vue,iHo,dHo,hz,cHo,fHo,mHo,pv,Fue,gHo,hHo,pz,pHo,_Ho,uHo,_v,Tue,bHo,vHo,_z,FHo,THo,MHo,uv,Mue,EHo,CHo,uz,wHo,AHo,LHo,bv,Eue,yHo,xHo,bz,$Ho,kHo,SHo,vv,RHo,Cue,PHo,BHo,wue,IHo,NHo,Fv,pXe,ld,Tv,Aue,dy,qHo,Lue,jHo,_Xe,Io,cy,DHo,id,GHo,vz,OHo,VHo,Fz,XHo,zHo,QHo,fy,WHo,yue,HHo,UHo,JHo,ht,my,YHo,xue,KHo,ZHo,dd,eUo,$ue,oUo,rUo,Tz,tUo,aUo,nUo,Mv,sUo,to,gy,lUo,kue,iUo,dUo,Va,cUo,Sue,fUo,mUo,Rue,gUo,hUo,Pue,pUo,_Uo,uUo,No,Ev,Bue,bUo,vUo,Mz,FUo,TUo,MUo,Cv,Iue,EUo,CUo,Ez,wUo,AUo,LUo,wv,Nue,yUo,xUo,Cz,$Uo,kUo,SUo,Av,que,RUo,PUo,wz,BUo,IUo,NUo,Lv,jue,qUo,jUo,Az,DUo,GUo,OUo,yv,Due,VUo,XUo,Lz,zUo,QUo,WUo,xv,HUo,Gue,UUo,JUo,Oue,YUo,KUo,$v,uXe,cd,kv,Vue,hy,ZUo,Xue,eJo,bXe,qo,py,oJo,fd,rJo,yz,tJo,aJo,xz,nJo,sJo,lJo,_y,iJo,zue,dJo,cJo,fJo,pt,uy,mJo,Que,gJo,hJo,md,pJo,Wue,_Jo,uJo,$z,bJo,vJo,FJo,Sv,TJo,ao,by,MJo,Hue,EJo,CJo,Xa,wJo,Uue,AJo,LJo,Jue,yJo,xJo,Yue,$Jo,kJo,SJo,U,Rv,Kue,RJo,PJo,kz,BJo,IJo,NJo,Pv,Zue,qJo,jJo,Sz,DJo,GJo,OJo,Bv,e2e,VJo,XJo,Rz,zJo,QJo,WJo,Iv,o2e,HJo,UJo,Pz,JJo,YJo,KJo,Nv,r2e,ZJo,eYo,Bz,oYo,rYo,tYo,qv,t2e,aYo,nYo,Iz,sYo,lYo,iYo,jv,a2e,dYo,cYo,Nz,fYo,mYo,gYo,Dv,n2e,hYo,pYo,qz,_Yo,uYo,bYo,Gv,s2e,vYo,FYo,jz,TYo,MYo,EYo,Ov,l2e,CYo,wYo,Dz,AYo,LYo,yYo,Vv,i2e,xYo,$Yo,Gz,kYo,SYo,RYo,Xv,d2e,PYo,BYo,Oz,IYo,NYo,qYo,zv,c2e,jYo,DYo,Vz,GYo,OYo,VYo,Qv,f2e,XYo,zYo,Xz,QYo,WYo,HYo,Wv,m2e,UYo,JYo,zz,YYo,KYo,ZYo,Hv,g2e,eKo,oKo,Qz,rKo,tKo,aKo,Uv,h2e,nKo,sKo,Wz,lKo,iKo,dKo,Jv,p2e,cKo,fKo,Hz,mKo,gKo,hKo,Yv,_2e,pKo,_Ko,Uz,uKo,bKo,vKo,Kv,u2e,FKo,TKo,Jz,MKo,EKo,CKo,Zv,b2e,wKo,AKo,Yz,LKo,yKo,xKo,eF,v2e,$Ko,kKo,Kz,SKo,RKo,PKo,oF,F2e,BKo,IKo,Zz,NKo,qKo,jKo,rF,T2e,DKo,GKo,eQ,OKo,VKo,XKo,tF,M2e,zKo,QKo,oQ,WKo,HKo,UKo,aF,E2e,JKo,YKo,rQ,KKo,ZKo,eZo,nF,C2e,oZo,rZo,tQ,tZo,aZo,nZo,sF,w2e,sZo,lZo,aQ,iZo,dZo,cZo,lF,A2e,fZo,mZo,nQ,gZo,hZo,pZo,iF,L2e,_Zo,uZo,sQ,bZo,vZo,FZo,dF,y2e,TZo,MZo,lQ,EZo,CZo,wZo,cF,x2e,AZo,LZo,iQ,yZo,xZo,$Zo,fF,$2e,kZo,SZo,dQ,RZo,PZo,BZo,mF,k2e,IZo,NZo,cQ,qZo,jZo,DZo,gF,S2e,GZo,OZo,fQ,VZo,XZo,zZo,hF,R2e,QZo,WZo,mQ,HZo,UZo,JZo,pF,YZo,P2e,KZo,ZZo,B2e,eer,oer,_F,vXe,gd,uF,I2e,vy,rer,N2e,ter,FXe,jo,Fy,aer,hd,ner,gQ,ser,ler,hQ,ier,der,cer,Ty,fer,q2e,mer,ger,her,_t,My,per,j2e,_er,uer,pd,ber,D2e,ver,Fer,pQ,Ter,Mer,Eer,bF,Cer,no,Ey,wer,G2e,Aer,Ler,za,yer,O2e,xer,$er,V2e,ker,Ser,X2e,Rer,Per,Ber,V,vF,z2e,Ier,Ner,_Q,qer,jer,Der,FF,Q2e,Ger,Oer,uQ,Ver,Xer,zer,TF,W2e,Qer,Wer,bQ,Her,Uer,Jer,MF,H2e,Yer,Ker,vQ,Zer,eor,oor,EF,U2e,ror,tor,FQ,aor,nor,sor,CF,J2e,lor,ior,TQ,dor,cor,mor,wF,Y2e,gor,hor,MQ,por,_or,uor,AF,K2e,bor,vor,EQ,For,Tor,Mor,LF,Z2e,Eor,Cor,CQ,wor,Aor,Lor,yF,e1e,yor,xor,wQ,$or,kor,Sor,xF,o1e,Ror,Por,AQ,Bor,Ior,Nor,$F,r1e,qor,jor,LQ,Dor,Gor,Oor,kF,t1e,Vor,Xor,yQ,zor,Qor,Wor,SF,a1e,Hor,Uor,xQ,Jor,Yor,Kor,RF,n1e,Zor,err,$Q,orr,rrr,trr,PF,s1e,arr,nrr,kQ,srr,lrr,irr,BF,l1e,drr,crr,SQ,frr,mrr,grr,IF,i1e,hrr,prr,RQ,_rr,urr,brr,NF,d1e,vrr,Frr,PQ,Trr,Mrr,Err,qF,c1e,Crr,wrr,BQ,Arr,Lrr,yrr,jF,f1e,xrr,$rr,IQ,krr,Srr,Rrr,DF,m1e,Prr,Brr,NQ,Irr,Nrr,qrr,GF,g1e,jrr,Drr,qQ,Grr,Orr,Vrr,OF,h1e,Xrr,zrr,jQ,Qrr,Wrr,Hrr,VF,p1e,Urr,Jrr,DQ,Yrr,Krr,Zrr,XF,_1e,etr,otr,GQ,rtr,ttr,atr,zF,u1e,ntr,str,OQ,ltr,itr,dtr,QF,b1e,ctr,ftr,VQ,mtr,gtr,htr,WF,v1e,ptr,_tr,XQ,utr,btr,vtr,HF,F1e,Ftr,Ttr,zQ,Mtr,Etr,Ctr,UF,T1e,wtr,Atr,QQ,Ltr,ytr,xtr,JF,M1e,$tr,ktr,WQ,Str,Rtr,Ptr,YF,E1e,Btr,Itr,HQ,Ntr,qtr,jtr,KF,C1e,Dtr,Gtr,UQ,Otr,Vtr,Xtr,ZF,w1e,ztr,Qtr,JQ,Wtr,Htr,Utr,eT,A1e,Jtr,Ytr,YQ,Ktr,Ztr,ear,oT,L1e,oar,rar,KQ,tar,aar,nar,rT,y1e,sar,lar,ZQ,iar,dar,car,tT,x1e,far,mar,eW,gar,har,par,aT,$1e,_ar,uar,oW,bar,Far,Tar,nT,k1e,Mar,Ear,rW,Car,war,Aar,sT,S1e,Lar,yar,tW,xar,$ar,kar,lT,Sar,R1e,Rar,Par,P1e,Bar,Iar,iT,TXe,_d,dT,B1e,Cy,Nar,I1e,qar,MXe,Do,wy,jar,ud,Dar,aW,Gar,Oar,nW,Var,Xar,zar,Ay,Qar,N1e,War,Har,Uar,ut,Ly,Jar,q1e,Yar,Kar,bd,Zar,j1e,enr,onr,sW,rnr,tnr,anr,cT,nnr,so,yy,snr,D1e,lnr,inr,Qa,dnr,G1e,cnr,fnr,O1e,mnr,gnr,V1e,hnr,pnr,_nr,X1e,fT,z1e,unr,bnr,lW,vnr,Fnr,Tnr,mT,Mnr,Q1e,Enr,Cnr,W1e,wnr,Anr,gT,EXe,vd,hT,H1e,xy,Lnr,U1e,ynr,CXe,Go,$y,xnr,Fd,$nr,iW,knr,Snr,dW,Rnr,Pnr,Bnr,ky,Inr,J1e,Nnr,qnr,jnr,bt,Sy,Dnr,Y1e,Gnr,Onr,Td,Vnr,K1e,Xnr,znr,cW,Qnr,Wnr,Hnr,pT,Unr,lo,Ry,Jnr,Z1e,Ynr,Knr,Wa,Znr,e4e,esr,osr,o4e,rsr,tsr,r4e,asr,nsr,ssr,ve,_T,t4e,lsr,isr,fW,dsr,csr,fsr,uT,a4e,msr,gsr,mW,hsr,psr,_sr,bT,n4e,usr,bsr,gW,vsr,Fsr,Tsr,vT,s4e,Msr,Esr,hW,Csr,wsr,Asr,Hs,l4e,Lsr,ysr,pW,xsr,$sr,_W,ksr,Ssr,Rsr,FT,i4e,Psr,Bsr,uW,Isr,Nsr,qsr,Us,d4e,jsr,Dsr,bW,Gsr,Osr,vW,Vsr,Xsr,zsr,TT,c4e,Qsr,Wsr,FW,Hsr,Usr,Jsr,vt,f4e,Ysr,Ksr,TW,Zsr,elr,MW,olr,rlr,EW,tlr,alr,nlr,MT,m4e,slr,llr,CW,ilr,dlr,clr,ET,g4e,flr,mlr,wW,glr,hlr,plr,CT,h4e,_lr,ulr,AW,blr,vlr,Flr,wT,p4e,Tlr,Mlr,LW,Elr,Clr,wlr,AT,_4e,Alr,Llr,yW,ylr,xlr,$lr,LT,u4e,klr,Slr,xW,Rlr,Plr,Blr,yT,b4e,Ilr,Nlr,$W,qlr,jlr,Dlr,xT,Glr,v4e,Olr,Vlr,F4e,Xlr,zlr,$T,wXe,Md,kT,T4e,Py,Qlr,M4e,Wlr,AXe,Oo,By,Hlr,Ed,Ulr,kW,Jlr,Ylr,SW,Klr,Zlr,eir,Iy,oir,E4e,rir,tir,air,Ft,Ny,nir,C4e,sir,lir,Cd,iir,w4e,dir,cir,RW,fir,mir,gir,ST,hir,io,qy,pir,A4e,_ir,uir,Ha,bir,L4e,vir,Fir,y4e,Tir,Mir,x4e,Eir,Cir,wir,$4e,RT,k4e,Air,Lir,PW,yir,xir,$ir,PT,kir,S4e,Sir,Rir,R4e,Pir,Bir,BT,LXe,wd,IT,P4e,jy,Iir,B4e,Nir,yXe,Vo,Dy,qir,Ad,jir,BW,Dir,Gir,IW,Oir,Vir,Xir,Gy,zir,I4e,Qir,Wir,Hir,Tt,Oy,Uir,N4e,Jir,Yir,Ld,Kir,q4e,Zir,edr,NW,odr,rdr,tdr,NT,adr,co,Vy,ndr,j4e,sdr,ldr,Ua,idr,D4e,ddr,cdr,G4e,fdr,mdr,O4e,gdr,hdr,pdr,V4e,qT,X4e,_dr,udr,qW,bdr,vdr,Fdr,jT,Tdr,z4e,Mdr,Edr,Q4e,Cdr,wdr,DT,xXe,yd,GT,W4e,Xy,Adr,H4e,Ldr,$Xe,Xo,zy,ydr,xd,xdr,jW,$dr,kdr,DW,Sdr,Rdr,Pdr,Qy,Bdr,U4e,Idr,Ndr,qdr,Mt,Wy,jdr,J4e,Ddr,Gdr,$d,Odr,Y4e,Vdr,Xdr,GW,zdr,Qdr,Wdr,OT,Hdr,fo,Hy,Udr,K4e,Jdr,Ydr,Ja,Kdr,Z4e,Zdr,ecr,ebe,ocr,rcr,obe,tcr,acr,ncr,Pe,VT,rbe,scr,lcr,OW,icr,dcr,ccr,XT,tbe,fcr,mcr,VW,gcr,hcr,pcr,zT,abe,_cr,ucr,XW,bcr,vcr,Fcr,QT,nbe,Tcr,Mcr,zW,Ecr,Ccr,wcr,WT,sbe,Acr,Lcr,QW,ycr,xcr,$cr,HT,lbe,kcr,Scr,WW,Rcr,Pcr,Bcr,UT,ibe,Icr,Ncr,HW,qcr,jcr,Dcr,JT,dbe,Gcr,Ocr,UW,Vcr,Xcr,zcr,YT,cbe,Qcr,Wcr,JW,Hcr,Ucr,Jcr,KT,Ycr,fbe,Kcr,Zcr,mbe,efr,ofr,ZT,kXe,kd,e7,gbe,Uy,rfr,hbe,tfr,SXe,zo,Jy,afr,Sd,nfr,YW,sfr,lfr,KW,ifr,dfr,cfr,Yy,ffr,pbe,mfr,gfr,hfr,Et,Ky,pfr,_be,_fr,ufr,Rd,bfr,ube,vfr,Ffr,ZW,Tfr,Mfr,Efr,o7,Cfr,mo,Zy,wfr,bbe,Afr,Lfr,Ya,yfr,vbe,xfr,$fr,Fbe,kfr,Sfr,Tbe,Rfr,Pfr,Bfr,ot,r7,Mbe,Ifr,Nfr,eH,qfr,jfr,Dfr,t7,Ebe,Gfr,Ofr,oH,Vfr,Xfr,zfr,a7,Cbe,Qfr,Wfr,rH,Hfr,Ufr,Jfr,n7,wbe,Yfr,Kfr,tH,Zfr,emr,omr,s7,Abe,rmr,tmr,aH,amr,nmr,smr,l7,lmr,Lbe,imr,dmr,ybe,cmr,fmr,i7,RXe,Pd,d7,xbe,e8,mmr,$be,gmr,PXe,Qo,o8,hmr,Bd,pmr,nH,_mr,umr,sH,bmr,vmr,Fmr,r8,Tmr,kbe,Mmr,Emr,Cmr,Ct,t8,wmr,Sbe,Amr,Lmr,Id,ymr,Rbe,xmr,$mr,lH,kmr,Smr,Rmr,c7,Pmr,go,a8,Bmr,Pbe,Imr,Nmr,Ka,qmr,Bbe,jmr,Dmr,Ibe,Gmr,Omr,Nbe,Vmr,Xmr,zmr,Le,f7,qbe,Qmr,Wmr,iH,Hmr,Umr,Jmr,m7,jbe,Ymr,Kmr,dH,Zmr,egr,ogr,g7,Dbe,rgr,tgr,cH,agr,ngr,sgr,h7,Gbe,lgr,igr,fH,dgr,cgr,fgr,p7,Obe,mgr,ggr,mH,hgr,pgr,_gr,_7,Vbe,ugr,bgr,gH,vgr,Fgr,Tgr,u7,Xbe,Mgr,Egr,hH,Cgr,wgr,Agr,b7,zbe,Lgr,ygr,pH,xgr,$gr,kgr,v7,Qbe,Sgr,Rgr,_H,Pgr,Bgr,Igr,F7,Wbe,Ngr,qgr,uH,jgr,Dgr,Ggr,T7,Ogr,Hbe,Vgr,Xgr,Ube,zgr,Qgr,M7,BXe,Nd,E7,Jbe,n8,Wgr,Ybe,Hgr,IXe,Wo,s8,Ugr,qd,Jgr,bH,Ygr,Kgr,vH,Zgr,ehr,ohr,l8,rhr,Kbe,thr,ahr,nhr,wt,i8,shr,Zbe,lhr,ihr,jd,dhr,eve,chr,fhr,FH,mhr,ghr,hhr,C7,phr,ho,d8,_hr,ove,uhr,bhr,Za,vhr,rve,Fhr,Thr,tve,Mhr,Ehr,ave,Chr,whr,Ahr,c8,w7,nve,Lhr,yhr,TH,xhr,$hr,khr,A7,sve,Shr,Rhr,MH,Phr,Bhr,Ihr,L7,Nhr,lve,qhr,jhr,ive,Dhr,Ghr,y7,NXe,Dd,x7,dve,f8,Ohr,cve,Vhr,qXe,Ho,m8,Xhr,Gd,zhr,EH,Qhr,Whr,CH,Hhr,Uhr,Jhr,g8,Yhr,fve,Khr,Zhr,epr,At,h8,opr,mve,rpr,tpr,Od,apr,gve,npr,spr,wH,lpr,ipr,dpr,$7,cpr,po,p8,fpr,hve,mpr,gpr,en,hpr,pve,ppr,_pr,_ve,upr,bpr,uve,vpr,Fpr,Tpr,rt,k7,bve,Mpr,Epr,AH,Cpr,wpr,Apr,S7,vve,Lpr,ypr,LH,xpr,$pr,kpr,R7,Fve,Spr,Rpr,yH,Ppr,Bpr,Ipr,P7,Tve,Npr,qpr,xH,jpr,Dpr,Gpr,B7,Mve,Opr,Vpr,$H,Xpr,zpr,Qpr,I7,Wpr,Eve,Hpr,Upr,Cve,Jpr,Ypr,N7,jXe,Vd,q7,wve,_8,Kpr,Ave,Zpr,DXe,Uo,u8,e_r,Xd,o_r,kH,r_r,t_r,SH,a_r,n_r,s_r,b8,l_r,Lve,i_r,d_r,c_r,Lt,v8,f_r,yve,m_r,g_r,zd,h_r,xve,p_r,__r,RH,u_r,b_r,v_r,j7,F_r,_o,F8,T_r,$ve,M_r,E_r,on,C_r,kve,w_r,A_r,Sve,L_r,y_r,Rve,x_r,$_r,k_r,Qd,D7,Pve,S_r,R_r,PH,P_r,B_r,I_r,G7,Bve,N_r,q_r,BH,j_r,D_r,G_r,O7,Ive,O_r,V_r,IH,X_r,z_r,Q_r,V7,W_r,Nve,H_r,U_r,qve,J_r,Y_r,X7,GXe,Wd,z7,jve,T8,K_r,Dve,Z_r,OXe,Jo,M8,eur,Hd,our,NH,rur,tur,qH,aur,nur,sur,E8,lur,Gve,iur,dur,cur,yt,C8,fur,Ove,mur,gur,Ud,hur,Vve,pur,_ur,jH,uur,bur,vur,Q7,Fur,uo,w8,Tur,Xve,Mur,Eur,rn,Cur,zve,wur,Aur,Qve,Lur,yur,Wve,xur,$ur,kur,A8,W7,Hve,Sur,Rur,DH,Pur,Bur,Iur,H7,Uve,Nur,qur,GH,jur,Dur,Gur,U7,Our,Jve,Vur,Xur,Yve,zur,Qur,J7,VXe,Jd,Y7,Kve,L8,Wur,Zve,Hur,XXe,Yo,y8,Uur,Yd,Jur,OH,Yur,Kur,VH,Zur,e2r,o2r,x8,r2r,eFe,t2r,a2r,n2r,xt,$8,s2r,oFe,l2r,i2r,Kd,d2r,rFe,c2r,f2r,XH,m2r,g2r,h2r,K7,p2r,bo,k8,_2r,tFe,u2r,b2r,tn,v2r,aFe,F2r,T2r,nFe,M2r,E2r,sFe,C2r,w2r,A2r,lFe,Z7,iFe,L2r,y2r,zH,x2r,$2r,k2r,e9,S2r,dFe,R2r,P2r,cFe,B2r,I2r,o9,zXe,Zd,r9,fFe,S8,N2r,mFe,q2r,QXe,Ko,R8,j2r,ec,D2r,QH,G2r,O2r,WH,V2r,X2r,z2r,P8,Q2r,gFe,W2r,H2r,U2r,$t,B8,J2r,hFe,Y2r,K2r,oc,Z2r,pFe,e1r,o1r,HH,r1r,t1r,a1r,t9,n1r,vo,I8,s1r,_Fe,l1r,i1r,an,d1r,uFe,c1r,f1r,bFe,m1r,g1r,vFe,h1r,p1r,_1r,tt,a9,FFe,u1r,b1r,UH,v1r,F1r,T1r,n9,TFe,M1r,E1r,JH,C1r,w1r,A1r,s9,MFe,L1r,y1r,YH,x1r,$1r,k1r,l9,EFe,S1r,R1r,KH,P1r,B1r,I1r,i9,CFe,N1r,q1r,ZH,j1r,D1r,G1r,d9,O1r,wFe,V1r,X1r,AFe,z1r,Q1r,c9,WXe,rc,f9,LFe,N8,W1r,yFe,H1r,HXe,Zo,q8,U1r,tc,J1r,eU,Y1r,K1r,oU,Z1r,e4r,o4r,j8,r4r,xFe,t4r,a4r,n4r,kt,D8,s4r,$Fe,l4r,i4r,ac,d4r,kFe,c4r,f4r,rU,m4r,g4r,h4r,m9,p4r,Fo,G8,_4r,SFe,u4r,b4r,nn,v4r,RFe,F4r,T4r,PFe,M4r,E4r,BFe,C4r,w4r,A4r,IFe,g9,NFe,L4r,y4r,tU,x4r,$4r,k4r,h9,S4r,qFe,R4r,P4r,jFe,B4r,I4r,p9,UXe,nc,_9,DFe,O8,N4r,GFe,q4r,JXe,er,V8,j4r,sc,D4r,aU,G4r,O4r,nU,V4r,X4r,z4r,X8,Q4r,OFe,W4r,H4r,U4r,St,z8,J4r,VFe,Y4r,K4r,lc,Z4r,XFe,ebr,obr,sU,rbr,tbr,abr,u9,nbr,xr,Q8,sbr,zFe,lbr,ibr,sn,dbr,QFe,cbr,fbr,WFe,mbr,gbr,HFe,hbr,pbr,_br,q,b9,UFe,ubr,bbr,lU,vbr,Fbr,Tbr,v9,JFe,Mbr,Ebr,iU,Cbr,wbr,Abr,F9,YFe,Lbr,ybr,dU,xbr,$br,kbr,T9,KFe,Sbr,Rbr,cU,Pbr,Bbr,Ibr,M9,ZFe,Nbr,qbr,fU,jbr,Dbr,Gbr,E9,eTe,Obr,Vbr,mU,Xbr,zbr,Qbr,C9,oTe,Wbr,Hbr,gU,Ubr,Jbr,Ybr,w9,rTe,Kbr,Zbr,hU,evr,ovr,rvr,A9,tTe,tvr,avr,pU,nvr,svr,lvr,L9,aTe,ivr,dvr,_U,cvr,fvr,mvr,y9,nTe,gvr,hvr,uU,pvr,_vr,uvr,x9,sTe,bvr,vvr,bU,Fvr,Tvr,Mvr,$9,lTe,Evr,Cvr,vU,wvr,Avr,Lvr,k9,iTe,yvr,xvr,FU,$vr,kvr,Svr,S9,dTe,Rvr,Pvr,TU,Bvr,Ivr,Nvr,R9,cTe,qvr,jvr,MU,Dvr,Gvr,Ovr,P9,fTe,Vvr,Xvr,EU,zvr,Qvr,Wvr,Js,mTe,Hvr,Uvr,CU,Jvr,Yvr,wU,Kvr,Zvr,eFr,B9,gTe,oFr,rFr,AU,tFr,aFr,nFr,I9,hTe,sFr,lFr,LU,iFr,dFr,cFr,N9,pTe,fFr,mFr,yU,gFr,hFr,pFr,q9,_Te,_Fr,uFr,xU,bFr,vFr,FFr,j9,uTe,TFr,MFr,$U,EFr,CFr,wFr,D9,bTe,AFr,LFr,kU,yFr,xFr,$Fr,G9,vTe,kFr,SFr,SU,RFr,PFr,BFr,O9,FTe,IFr,NFr,RU,qFr,jFr,DFr,V9,TTe,GFr,OFr,PU,VFr,XFr,zFr,X9,MTe,QFr,WFr,BU,HFr,UFr,JFr,z9,ETe,YFr,KFr,IU,ZFr,eTr,oTr,Q9,CTe,rTr,tTr,NU,aTr,nTr,sTr,W9,wTe,lTr,iTr,qU,dTr,cTr,fTr,H9,ATe,mTr,gTr,jU,hTr,pTr,_Tr,U9,LTe,uTr,bTr,DU,vTr,FTr,TTr,J9,yTe,MTr,ETr,GU,CTr,wTr,ATr,Y9,xTe,LTr,yTr,OU,xTr,$Tr,kTr,K9,$Te,STr,RTr,VU,PTr,BTr,ITr,Z9,kTe,NTr,qTr,XU,jTr,DTr,GTr,eM,STe,OTr,VTr,zU,XTr,zTr,QTr,oM,RTe,WTr,HTr,QU,UTr,JTr,YTr,rM,PTe,KTr,ZTr,WU,e7r,o7r,r7r,tM,BTe,t7r,a7r,HU,n7r,s7r,l7r,aM,ITe,i7r,d7r,UU,c7r,f7r,m7r,nM,NTe,g7r,h7r,JU,p7r,_7r,u7r,sM,qTe,b7r,v7r,YU,F7r,T7r,M7r,lM,jTe,E7r,C7r,KU,w7r,A7r,L7r,iM,DTe,y7r,x7r,ZU,$7r,k7r,S7r,dM,GTe,R7r,P7r,eJ,B7r,I7r,N7r,cM,OTe,q7r,j7r,oJ,D7r,G7r,O7r,fM,VTe,V7r,X7r,rJ,z7r,Q7r,W7r,mM,YXe,ic,gM,XTe,W8,H7r,zTe,U7r,KXe,or,H8,J7r,dc,Y7r,tJ,K7r,Z7r,aJ,e9r,o9r,r9r,U8,t9r,QTe,a9r,n9r,s9r,Rt,J8,l9r,WTe,i9r,d9r,cc,c9r,HTe,f9r,m9r,nJ,g9r,h9r,p9r,hM,_9r,$r,Y8,u9r,UTe,b9r,v9r,ln,F9r,JTe,T9r,M9r,YTe,E9r,C9r,KTe,w9r,A9r,L9r,se,pM,ZTe,y9r,x9r,sJ,$9r,k9r,S9r,_M,e7e,R9r,P9r,lJ,B9r,I9r,N9r,uM,o7e,q9r,j9r,iJ,D9r,G9r,O9r,bM,r7e,V9r,X9r,dJ,z9r,Q9r,W9r,vM,t7e,H9r,U9r,cJ,J9r,Y9r,K9r,FM,a7e,Z9r,eMr,fJ,oMr,rMr,tMr,TM,n7e,aMr,nMr,mJ,sMr,lMr,iMr,MM,s7e,dMr,cMr,gJ,fMr,mMr,gMr,EM,l7e,hMr,pMr,hJ,_Mr,uMr,bMr,CM,i7e,vMr,FMr,pJ,TMr,MMr,EMr,wM,d7e,CMr,wMr,_J,AMr,LMr,yMr,AM,c7e,xMr,$Mr,uJ,kMr,SMr,RMr,LM,f7e,PMr,BMr,bJ,IMr,NMr,qMr,yM,m7e,jMr,DMr,vJ,GMr,OMr,VMr,xM,g7e,XMr,zMr,FJ,QMr,WMr,HMr,$M,h7e,UMr,JMr,TJ,YMr,KMr,ZMr,kM,p7e,eEr,oEr,MJ,rEr,tEr,aEr,SM,_7e,nEr,sEr,EJ,lEr,iEr,dEr,RM,u7e,cEr,fEr,CJ,mEr,gEr,hEr,PM,b7e,pEr,_Er,wJ,uEr,bEr,vEr,BM,v7e,FEr,TEr,AJ,MEr,EEr,CEr,IM,F7e,wEr,AEr,LJ,LEr,yEr,xEr,NM,T7e,$Er,kEr,yJ,SEr,REr,PEr,qM,ZXe,fc,jM,M7e,K8,BEr,E7e,IEr,eze,rr,Z8,NEr,mc,qEr,xJ,jEr,DEr,$J,GEr,OEr,VEr,ex,XEr,C7e,zEr,QEr,WEr,Pt,ox,HEr,w7e,UEr,JEr,gc,YEr,A7e,KEr,ZEr,kJ,eCr,oCr,rCr,DM,tCr,kr,rx,aCr,L7e,nCr,sCr,dn,lCr,y7e,iCr,dCr,x7e,cCr,fCr,$7e,mCr,gCr,hCr,Me,GM,k7e,pCr,_Cr,SJ,uCr,bCr,vCr,OM,S7e,FCr,TCr,RJ,MCr,ECr,CCr,VM,R7e,wCr,ACr,PJ,LCr,yCr,xCr,XM,P7e,$Cr,kCr,BJ,SCr,RCr,PCr,zM,B7e,BCr,ICr,IJ,NCr,qCr,jCr,QM,I7e,DCr,GCr,NJ,OCr,VCr,XCr,WM,N7e,zCr,QCr,qJ,WCr,HCr,UCr,HM,q7e,JCr,YCr,jJ,KCr,ZCr,e3r,UM,j7e,o3r,r3r,DJ,t3r,a3r,n3r,JM,D7e,s3r,l3r,GJ,i3r,d3r,c3r,YM,G7e,f3r,m3r,OJ,g3r,h3r,p3r,KM,O7e,_3r,u3r,VJ,b3r,v3r,F3r,ZM,V7e,T3r,M3r,XJ,E3r,C3r,w3r,eE,oze,hc,oE,X7e,tx,A3r,z7e,L3r,rze,tr,ax,y3r,pc,x3r,zJ,$3r,k3r,QJ,S3r,R3r,P3r,nx,B3r,Q7e,I3r,N3r,q3r,Bt,sx,j3r,W7e,D3r,G3r,_c,O3r,H7e,V3r,X3r,WJ,z3r,Q3r,W3r,rE,H3r,Sr,lx,U3r,U7e,J3r,Y3r,cn,K3r,J7e,Z3r,e5r,Y7e,o5r,r5r,K7e,t5r,a5r,n5r,ar,tE,Z7e,s5r,l5r,HJ,i5r,d5r,c5r,aE,e9e,f5r,m5r,UJ,g5r,h5r,p5r,nE,o9e,_5r,u5r,JJ,b5r,v5r,F5r,sE,r9e,T5r,M5r,YJ,E5r,C5r,w5r,lE,t9e,A5r,L5r,KJ,y5r,x5r,$5r,iE,a9e,k5r,S5r,ZJ,R5r,P5r,B5r,dE,tze,uc,cE,n9e,ix,I5r,s9e,N5r,aze,nr,dx,q5r,bc,j5r,eY,D5r,G5r,oY,O5r,V5r,X5r,cx,z5r,l9e,Q5r,W5r,H5r,It,fx,U5r,i9e,J5r,Y5r,vc,K5r,d9e,Z5r,e0r,rY,o0r,r0r,t0r,fE,a0r,Rr,mx,n0r,c9e,s0r,l0r,fn,i0r,f9e,d0r,c0r,m9e,f0r,m0r,g9e,g0r,h0r,p0r,ie,mE,h9e,_0r,u0r,tY,b0r,v0r,F0r,gE,p9e,T0r,M0r,aY,E0r,C0r,w0r,hE,_9e,A0r,L0r,nY,y0r,x0r,$0r,pE,u9e,k0r,S0r,sY,R0r,P0r,B0r,_E,b9e,I0r,N0r,lY,q0r,j0r,D0r,uE,v9e,G0r,O0r,iY,V0r,X0r,z0r,bE,F9e,Q0r,W0r,dY,H0r,U0r,J0r,vE,T9e,Y0r,K0r,cY,Z0r,ewr,owr,FE,M9e,rwr,twr,fY,awr,nwr,swr,TE,E9e,lwr,iwr,mY,dwr,cwr,fwr,ME,C9e,mwr,gwr,gY,hwr,pwr,_wr,EE,w9e,uwr,bwr,hY,vwr,Fwr,Twr,CE,A9e,Mwr,Ewr,pY,Cwr,wwr,Awr,wE,L9e,Lwr,ywr,_Y,xwr,$wr,kwr,AE,y9e,Swr,Rwr,uY,Pwr,Bwr,Iwr,LE,x9e,Nwr,qwr,bY,jwr,Dwr,Gwr,yE,$9e,Owr,Vwr,vY,Xwr,zwr,Qwr,xE,k9e,Wwr,Hwr,FY,Uwr,Jwr,Ywr,$E,S9e,Kwr,Zwr,TY,eAr,oAr,rAr,kE,R9e,tAr,aAr,MY,nAr,sAr,lAr,SE,nze,Fc,RE,P9e,gx,iAr,B9e,dAr,sze,sr,hx,cAr,Tc,fAr,EY,mAr,gAr,CY,hAr,pAr,_Ar,px,uAr,I9e,bAr,vAr,FAr,Nt,_x,TAr,N9e,MAr,EAr,Mc,CAr,q9e,wAr,AAr,wY,LAr,yAr,xAr,PE,$Ar,Pr,ux,kAr,j9e,SAr,RAr,mn,PAr,D9e,BAr,IAr,G9e,NAr,qAr,O9e,jAr,DAr,GAr,ye,BE,V9e,OAr,VAr,AY,XAr,zAr,QAr,IE,X9e,WAr,HAr,LY,UAr,JAr,YAr,NE,z9e,KAr,ZAr,yY,e6r,o6r,r6r,qE,Q9e,t6r,a6r,xY,n6r,s6r,l6r,jE,W9e,i6r,d6r,$Y,c6r,f6r,m6r,DE,H9e,g6r,h6r,kY,p6r,_6r,u6r,GE,U9e,b6r,v6r,SY,F6r,T6r,M6r,OE,J9e,E6r,C6r,RY,w6r,A6r,L6r,VE,Y9e,y6r,x6r,PY,$6r,k6r,S6r,XE,K9e,R6r,P6r,BY,B6r,I6r,N6r,zE,lze,Ec,QE,Z9e,bx,q6r,eMe,j6r,ize,lr,vx,D6r,Cc,G6r,IY,O6r,V6r,NY,X6r,z6r,Q6r,Fx,W6r,oMe,H6r,U6r,J6r,qt,Tx,Y6r,rMe,K6r,Z6r,wc,eLr,tMe,oLr,rLr,qY,tLr,aLr,nLr,WE,sLr,Br,Mx,lLr,aMe,iLr,dLr,gn,cLr,nMe,fLr,mLr,sMe,gLr,hLr,lMe,pLr,_Lr,uLr,te,HE,iMe,bLr,vLr,jY,FLr,TLr,MLr,UE,dMe,ELr,CLr,DY,wLr,ALr,LLr,JE,cMe,yLr,xLr,GY,$Lr,kLr,SLr,YE,fMe,RLr,PLr,OY,BLr,ILr,NLr,KE,mMe,qLr,jLr,VY,DLr,GLr,OLr,ZE,gMe,VLr,XLr,XY,zLr,QLr,WLr,eC,hMe,HLr,ULr,zY,JLr,YLr,KLr,oC,pMe,ZLr,eyr,QY,oyr,ryr,tyr,rC,_Me,ayr,nyr,WY,syr,lyr,iyr,tC,uMe,dyr,cyr,HY,fyr,myr,gyr,aC,bMe,hyr,pyr,UY,_yr,uyr,byr,nC,vMe,vyr,Fyr,JY,Tyr,Myr,Eyr,sC,FMe,Cyr,wyr,YY,Ayr,Lyr,yyr,lC,TMe,xyr,$yr,KY,kyr,Syr,Ryr,iC,MMe,Pyr,Byr,ZY,Iyr,Nyr,qyr,dC,EMe,jyr,Dyr,eK,Gyr,Oyr,Vyr,cC,CMe,Xyr,zyr,oK,Qyr,Wyr,Hyr,fC,wMe,Uyr,Jyr,rK,Yyr,Kyr,Zyr,mC,AMe,e8r,o8r,tK,r8r,t8r,a8r,gC,LMe,n8r,s8r,aK,l8r,i8r,d8r,hC,yMe,c8r,f8r,nK,m8r,g8r,h8r,pC,xMe,p8r,_8r,sK,u8r,b8r,v8r,_C,$Me,F8r,T8r,lK,M8r,E8r,C8r,uC,kMe,w8r,A8r,iK,L8r,y8r,x8r,bC,SMe,$8r,k8r,dK,S8r,R8r,P8r,vC,RMe,B8r,I8r,cK,N8r,q8r,j8r,FC,dze,Ac,TC,PMe,Ex,D8r,BMe,G8r,cze,ir,Cx,O8r,Lc,V8r,fK,X8r,z8r,mK,Q8r,W8r,H8r,wx,U8r,IMe,J8r,Y8r,K8r,jt,Ax,Z8r,NMe,exr,oxr,yc,rxr,qMe,txr,axr,gK,nxr,sxr,lxr,MC,ixr,Ir,Lx,dxr,jMe,cxr,fxr,hn,mxr,DMe,gxr,hxr,GMe,pxr,_xr,OMe,uxr,bxr,vxr,_e,EC,VMe,Fxr,Txr,hK,Mxr,Exr,Cxr,CC,XMe,wxr,Axr,pK,Lxr,yxr,xxr,wC,zMe,$xr,kxr,_K,Sxr,Rxr,Pxr,AC,QMe,Bxr,Ixr,uK,Nxr,qxr,jxr,LC,WMe,Dxr,Gxr,bK,Oxr,Vxr,Xxr,yC,HMe,zxr,Qxr,vK,Wxr,Hxr,Uxr,xC,UMe,Jxr,Yxr,FK,Kxr,Zxr,e$r,$C,JMe,o$r,r$r,TK,t$r,a$r,n$r,kC,YMe,s$r,l$r,MK,i$r,d$r,c$r,SC,KMe,f$r,m$r,EK,g$r,h$r,p$r,RC,ZMe,_$r,u$r,CK,b$r,v$r,F$r,PC,eEe,T$r,M$r,wK,E$r,C$r,w$r,BC,oEe,A$r,L$r,AK,y$r,x$r,$$r,IC,rEe,k$r,S$r,LK,R$r,P$r,B$r,NC,tEe,I$r,N$r,yK,q$r,j$r,D$r,qC,aEe,G$r,O$r,xK,V$r,X$r,z$r,jC,nEe,Q$r,W$r,$K,H$r,U$r,J$r,DC,fze,xc,GC,sEe,yx,Y$r,lEe,K$r,mze,dr,xx,Z$r,$c,ekr,kK,okr,rkr,SK,tkr,akr,nkr,$x,skr,iEe,lkr,ikr,dkr,Dt,kx,ckr,dEe,fkr,mkr,kc,gkr,cEe,hkr,pkr,RK,_kr,ukr,bkr,OC,vkr,Nr,Sx,Fkr,fEe,Tkr,Mkr,pn,Ekr,mEe,Ckr,wkr,gEe,Akr,Lkr,hEe,ykr,xkr,$kr,Rx,VC,pEe,kkr,Skr,PK,Rkr,Pkr,Bkr,XC,_Ee,Ikr,Nkr,BK,qkr,jkr,Dkr,zC,gze,Sc,QC,uEe,Px,Gkr,bEe,Okr,hze,cr,Bx,Vkr,Rc,Xkr,IK,zkr,Qkr,NK,Wkr,Hkr,Ukr,Ix,Jkr,vEe,Ykr,Kkr,Zkr,Gt,Nx,eSr,FEe,oSr,rSr,Pc,tSr,TEe,aSr,nSr,qK,sSr,lSr,iSr,WC,dSr,qr,qx,cSr,MEe,fSr,mSr,_n,gSr,EEe,hSr,pSr,CEe,_Sr,uSr,wEe,bSr,vSr,FSr,AEe,HC,LEe,TSr,MSr,jK,ESr,CSr,wSr,UC,pze,Bc,JC,yEe,jx,ASr,xEe,LSr,_ze,fr,Dx,ySr,Ic,xSr,DK,$Sr,kSr,GK,SSr,RSr,PSr,Gx,BSr,$Ee,ISr,NSr,qSr,Ot,Ox,jSr,kEe,DSr,GSr,Nc,OSr,SEe,VSr,XSr,OK,zSr,QSr,WSr,YC,HSr,jr,Vx,USr,REe,JSr,YSr,un,KSr,PEe,ZSr,eRr,BEe,oRr,rRr,IEe,tRr,aRr,nRr,de,KC,NEe,sRr,lRr,VK,iRr,dRr,cRr,ZC,qEe,fRr,mRr,XK,gRr,hRr,pRr,e3,jEe,_Rr,uRr,zK,bRr,vRr,FRr,o3,DEe,TRr,MRr,QK,ERr,CRr,wRr,r3,GEe,ARr,LRr,WK,yRr,xRr,$Rr,t3,OEe,kRr,SRr,HK,RRr,PRr,BRr,a3,VEe,IRr,NRr,UK,qRr,jRr,DRr,n3,XEe,GRr,ORr,JK,VRr,XRr,zRr,s3,zEe,QRr,WRr,YK,HRr,URr,JRr,l3,QEe,YRr,KRr,KK,ZRr,ePr,oPr,i3,WEe,rPr,tPr,ZK,aPr,nPr,sPr,d3,HEe,lPr,iPr,eZ,dPr,cPr,fPr,c3,UEe,mPr,gPr,oZ,hPr,pPr,_Pr,f3,JEe,uPr,bPr,rZ,vPr,FPr,TPr,m3,YEe,MPr,EPr,tZ,CPr,wPr,APr,g3,KEe,LPr,yPr,aZ,xPr,$Pr,kPr,h3,ZEe,SPr,RPr,nZ,PPr,BPr,IPr,p3,eCe,NPr,qPr,sZ,jPr,DPr,GPr,_3,oCe,OPr,VPr,lZ,XPr,zPr,QPr,u3,rCe,WPr,HPr,iZ,UPr,JPr,YPr,b3,uze,qc,v3,tCe,Xx,KPr,aCe,ZPr,bze,mr,zx,eBr,jc,oBr,dZ,rBr,tBr,cZ,aBr,nBr,sBr,Qx,lBr,nCe,iBr,dBr,cBr,Vt,Wx,fBr,sCe,mBr,gBr,Dc,hBr,lCe,pBr,_Br,fZ,uBr,bBr,vBr,F3,FBr,Dr,Hx,TBr,iCe,MBr,EBr,bn,CBr,dCe,wBr,ABr,cCe,LBr,yBr,fCe,xBr,$Br,kBr,ce,T3,mCe,SBr,RBr,mZ,PBr,BBr,IBr,M3,gCe,NBr,qBr,gZ,jBr,DBr,GBr,E3,hCe,OBr,VBr,hZ,XBr,zBr,QBr,C3,pCe,WBr,HBr,pZ,UBr,JBr,YBr,w3,_Ce,KBr,ZBr,_Z,eIr,oIr,rIr,A3,uCe,tIr,aIr,uZ,nIr,sIr,lIr,L3,bCe,iIr,dIr,bZ,cIr,fIr,mIr,y3,vCe,gIr,hIr,vZ,pIr,_Ir,uIr,x3,FCe,bIr,vIr,FZ,FIr,TIr,MIr,$3,TCe,EIr,CIr,TZ,wIr,AIr,LIr,k3,MCe,yIr,xIr,MZ,$Ir,kIr,SIr,S3,ECe,RIr,PIr,EZ,BIr,IIr,NIr,R3,CCe,qIr,jIr,CZ,DIr,GIr,OIr,P3,wCe,VIr,XIr,wZ,zIr,QIr,WIr,B3,ACe,HIr,UIr,AZ,JIr,YIr,KIr,I3,LCe,ZIr,eNr,LZ,oNr,rNr,tNr,N3,yCe,aNr,nNr,yZ,sNr,lNr,iNr,q3,xCe,dNr,cNr,xZ,fNr,mNr,gNr,j3,$Ce,hNr,pNr,$Z,_Nr,uNr,bNr,D3,kCe,vNr,FNr,kZ,TNr,MNr,ENr,G3,vze,Gc,O3,SCe,Ux,CNr,RCe,wNr,Fze,gr,Jx,ANr,Oc,LNr,SZ,yNr,xNr,RZ,$Nr,kNr,SNr,Yx,RNr,PCe,PNr,BNr,INr,Xt,Kx,NNr,BCe,qNr,jNr,Vc,DNr,ICe,GNr,ONr,PZ,VNr,XNr,zNr,V3,QNr,Gr,Zx,WNr,NCe,HNr,UNr,vn,JNr,qCe,YNr,KNr,jCe,ZNr,eqr,DCe,oqr,rqr,tqr,GCe,X3,OCe,aqr,nqr,BZ,sqr,lqr,iqr,z3,Tze,Xc,Q3,VCe,e$,dqr,XCe,cqr,Mze,hr,o$,fqr,zc,mqr,IZ,gqr,hqr,NZ,pqr,_qr,uqr,r$,bqr,zCe,vqr,Fqr,Tqr,zt,t$,Mqr,QCe,Eqr,Cqr,Qc,wqr,WCe,Aqr,Lqr,qZ,yqr,xqr,$qr,W3,kqr,Or,a$,Sqr,HCe,Rqr,Pqr,Fn,Bqr,UCe,Iqr,Nqr,JCe,qqr,jqr,YCe,Dqr,Gqr,Oqr,KCe,H3,ZCe,Vqr,Xqr,jZ,zqr,Qqr,Wqr,U3,Eze,Wc,J3,e3e,n$,Hqr,o3e,Uqr,Cze,pr,s$,Jqr,Hc,Yqr,DZ,Kqr,Zqr,GZ,ejr,ojr,rjr,l$,tjr,r3e,ajr,njr,sjr,Qt,i$,ljr,t3e,ijr,djr,Uc,cjr,a3e,fjr,mjr,OZ,gjr,hjr,pjr,Y3,_jr,Vr,d$,ujr,n3e,bjr,vjr,Tn,Fjr,s3e,Tjr,Mjr,l3e,Ejr,Cjr,i3e,wjr,Ajr,Ljr,oe,K3,d3e,yjr,xjr,VZ,$jr,kjr,Sjr,Z3,c3e,Rjr,Pjr,XZ,Bjr,Ijr,Njr,e5,f3e,qjr,jjr,zZ,Djr,Gjr,Ojr,o5,m3e,Vjr,Xjr,QZ,zjr,Qjr,Wjr,r5,g3e,Hjr,Ujr,WZ,Jjr,Yjr,Kjr,t5,h3e,Zjr,eDr,HZ,oDr,rDr,tDr,a5,p3e,aDr,nDr,UZ,sDr,lDr,iDr,n5,_3e,dDr,cDr,JZ,fDr,mDr,gDr,s5,u3e,hDr,pDr,YZ,_Dr,uDr,bDr,l5,b3e,vDr,FDr,KZ,TDr,MDr,EDr,i5,v3e,CDr,wDr,ZZ,ADr,LDr,yDr,d5,F3e,xDr,$Dr,eee,kDr,SDr,RDr,c5,T3e,PDr,BDr,oee,IDr,NDr,qDr,f5,M3e,jDr,DDr,ree,GDr,ODr,VDr,m5,E3e,XDr,zDr,tee,QDr,WDr,HDr,g5,C3e,UDr,JDr,aee,YDr,KDr,ZDr,h5,w3e,eGr,oGr,nee,rGr,tGr,aGr,p5,A3e,nGr,sGr,see,lGr,iGr,dGr,_5,L3e,cGr,fGr,lee,mGr,gGr,hGr,u5,y3e,pGr,_Gr,iee,uGr,bGr,vGr,b5,x3e,FGr,TGr,dee,MGr,EGr,CGr,v5,$3e,wGr,AGr,cee,LGr,yGr,xGr,F5,k3e,$Gr,kGr,fee,SGr,RGr,PGr,T5,S3e,BGr,IGr,mee,NGr,qGr,jGr,M5,R3e,DGr,GGr,gee,OGr,VGr,XGr,E5,P3e,zGr,QGr,hee,WGr,HGr,UGr,C5,B3e,JGr,YGr,pee,KGr,ZGr,eOr,w5,wze,Jc,A5,I3e,c$,oOr,N3e,rOr,Aze,_r,f$,tOr,Yc,aOr,_ee,nOr,sOr,uee,lOr,iOr,dOr,m$,cOr,q3e,fOr,mOr,gOr,Wt,g$,hOr,j3e,pOr,_Or,Kc,uOr,D3e,bOr,vOr,bee,FOr,TOr,MOr,L5,EOr,Xr,h$,COr,G3e,wOr,AOr,Mn,LOr,O3e,yOr,xOr,V3e,$Or,kOr,X3e,SOr,ROr,POr,xe,y5,z3e,BOr,IOr,vee,NOr,qOr,jOr,x5,Q3e,DOr,GOr,Fee,OOr,VOr,XOr,$5,W3e,zOr,QOr,Tee,WOr,HOr,UOr,k5,H3e,JOr,YOr,Mee,KOr,ZOr,eVr,S5,U3e,oVr,rVr,Eee,tVr,aVr,nVr,R5,J3e,sVr,lVr,Cee,iVr,dVr,cVr,P5,Y3e,fVr,mVr,wee,gVr,hVr,pVr,B5,K3e,_Vr,uVr,Aee,bVr,vVr,FVr,I5,Z3e,TVr,MVr,Lee,EVr,CVr,wVr,N5,e5e,AVr,LVr,yee,yVr,xVr,$Vr,q5,Lze,Zc,j5,o5e,p$,kVr,r5e,SVr,yze,ur,_$,RVr,ef,PVr,xee,BVr,IVr,$ee,NVr,qVr,jVr,u$,DVr,t5e,GVr,OVr,VVr,Ht,b$,XVr,a5e,zVr,QVr,of,WVr,n5e,HVr,UVr,kee,JVr,YVr,KVr,D5,ZVr,zr,v$,eXr,s5e,oXr,rXr,En,tXr,l5e,aXr,nXr,i5e,sXr,lXr,d5e,iXr,dXr,cXr,Ee,G5,c5e,fXr,mXr,See,gXr,hXr,pXr,O5,f5e,_Xr,uXr,Ree,bXr,vXr,FXr,V5,m5e,TXr,MXr,Pee,EXr,CXr,wXr,X5,g5e,AXr,LXr,Bee,yXr,xXr,$Xr,z5,h5e,kXr,SXr,Iee,RXr,PXr,BXr,Q5,p5e,IXr,NXr,Nee,qXr,jXr,DXr,W5,_5e,GXr,OXr,qee,VXr,XXr,zXr,H5,u5e,QXr,WXr,jee,HXr,UXr,JXr,U5,b5e,YXr,KXr,Dee,ZXr,ezr,ozr,J5,v5e,rzr,tzr,Gee,azr,nzr,szr,Y5,F5e,lzr,izr,Oee,dzr,czr,fzr,K5,T5e,mzr,gzr,Vee,hzr,pzr,_zr,Z5,M5e,uzr,bzr,Xee,vzr,Fzr,Tzr,e0,xze,rf,o0,E5e,F$,Mzr,C5e,Ezr,$ze,br,T$,Czr,tf,wzr,zee,Azr,Lzr,Qee,yzr,xzr,$zr,M$,kzr,w5e,Szr,Rzr,Pzr,Ut,E$,Bzr,A5e,Izr,Nzr,af,qzr,L5e,jzr,Dzr,Wee,Gzr,Ozr,Vzr,r0,Xzr,Qr,C$,zzr,y5e,Qzr,Wzr,Cn,Hzr,x5e,Uzr,Jzr,$5e,Yzr,Kzr,k5e,Zzr,eQr,oQr,$e,t0,S5e,rQr,tQr,Hee,aQr,nQr,sQr,a0,R5e,lQr,iQr,Uee,dQr,cQr,fQr,n0,P5e,mQr,gQr,Jee,hQr,pQr,_Qr,s0,B5e,uQr,bQr,Yee,vQr,FQr,TQr,l0,I5e,MQr,EQr,Kee,CQr,wQr,AQr,i0,N5e,LQr,yQr,Zee,xQr,$Qr,kQr,d0,q5e,SQr,RQr,eoe,PQr,BQr,IQr,c0,j5e,NQr,qQr,ooe,jQr,DQr,GQr,f0,D5e,OQr,VQr,roe,XQr,zQr,QQr,m0,G5e,WQr,HQr,toe,UQr,JQr,YQr,g0,kze,nf,h0,O5e,w$,KQr,V5e,ZQr,Sze,vr,A$,eWr,sf,oWr,aoe,rWr,tWr,noe,aWr,nWr,sWr,L$,lWr,X5e,iWr,dWr,cWr,Jt,y$,fWr,z5e,mWr,gWr,lf,hWr,Q5e,pWr,_Wr,soe,uWr,bWr,vWr,p0,FWr,Wr,x$,TWr,W5e,MWr,EWr,wn,CWr,H5e,wWr,AWr,U5e,LWr,yWr,J5e,xWr,$Wr,kWr,ke,_0,Y5e,SWr,RWr,loe,PWr,BWr,IWr,u0,K5e,NWr,qWr,ioe,jWr,DWr,GWr,b0,Z5e,OWr,VWr,doe,XWr,zWr,QWr,v0,e0e,WWr,HWr,coe,UWr,JWr,YWr,F0,o0e,KWr,ZWr,foe,eHr,oHr,rHr,T0,r0e,tHr,aHr,moe,nHr,sHr,lHr,M0,t0e,iHr,dHr,goe,cHr,fHr,mHr,E0,a0e,gHr,hHr,hoe,pHr,_Hr,uHr,C0,n0e,bHr,vHr,poe,FHr,THr,MHr,w0,s0e,EHr,CHr,_oe,wHr,AHr,LHr,A0,Rze,df,L0,l0e,$$,yHr,i0e,xHr,Pze,Fr,k$,$Hr,cf,kHr,uoe,SHr,RHr,boe,PHr,BHr,IHr,S$,NHr,d0e,qHr,jHr,DHr,Yt,R$,GHr,c0e,OHr,VHr,ff,XHr,f0e,zHr,QHr,voe,WHr,HHr,UHr,y0,JHr,Hr,P$,YHr,m0e,KHr,ZHr,An,eUr,g0e,oUr,rUr,h0e,tUr,aUr,p0e,nUr,sUr,lUr,Se,x0,_0e,iUr,dUr,Foe,cUr,fUr,mUr,$0,u0e,gUr,hUr,Toe,pUr,_Ur,uUr,k0,b0e,bUr,vUr,Moe,FUr,TUr,MUr,S0,v0e,EUr,CUr,Eoe,wUr,AUr,LUr,R0,F0e,yUr,xUr,Coe,$Ur,kUr,SUr,P0,T0e,RUr,PUr,woe,BUr,IUr,NUr,B0,M0e,qUr,jUr,Aoe,DUr,GUr,OUr,I0,E0e,VUr,XUr,Loe,zUr,QUr,WUr,N0,C0e,HUr,UUr,yoe,JUr,YUr,KUr,q0,w0e,ZUr,eJr,xoe,oJr,rJr,tJr,j0,Bze,mf,D0,A0e,B$,aJr,L0e,nJr,Ize,Tr,I$,sJr,gf,lJr,$oe,iJr,dJr,koe,cJr,fJr,mJr,N$,gJr,y0e,hJr,pJr,_Jr,Kt,q$,uJr,x0e,bJr,vJr,hf,FJr,$0e,TJr,MJr,Soe,EJr,CJr,wJr,G0,AJr,Ur,j$,LJr,k0e,yJr,xJr,Ln,$Jr,S0e,kJr,SJr,R0e,RJr,PJr,P0e,BJr,IJr,NJr,Re,O0,B0e,qJr,jJr,Roe,DJr,GJr,OJr,V0,I0e,VJr,XJr,Poe,zJr,QJr,WJr,X0,N0e,HJr,UJr,Boe,JJr,YJr,KJr,z0,q0e,ZJr,eYr,Ioe,oYr,rYr,tYr,Q0,j0e,aYr,nYr,Noe,sYr,lYr,iYr,W0,D0e,dYr,cYr,qoe,fYr,mYr,gYr,H0,G0e,hYr,pYr,joe,_Yr,uYr,bYr,U0,O0e,vYr,FYr,Doe,TYr,MYr,EYr,J0,V0e,CYr,wYr,Goe,AYr,LYr,yYr,Y0,X0e,xYr,$Yr,Ooe,kYr,SYr,RYr,K0,Nze,pf,Z0,z0e,D$,PYr,Q0e,BYr,qze,Mr,G$,IYr,_f,NYr,Voe,qYr,jYr,Xoe,DYr,GYr,OYr,O$,VYr,W0e,XYr,zYr,QYr,Zt,V$,WYr,H0e,HYr,UYr,uf,JYr,U0e,YYr,KYr,zoe,ZYr,eKr,oKr,ew,rKr,Jr,X$,tKr,J0e,aKr,nKr,yn,sKr,Y0e,lKr,iKr,K0e,dKr,cKr,Z0e,fKr,mKr,gKr,Ve,ow,ewe,hKr,pKr,Qoe,_Kr,uKr,bKr,rw,owe,vKr,FKr,Woe,TKr,MKr,EKr,tw,rwe,CKr,wKr,Hoe,AKr,LKr,yKr,aw,twe,xKr,$Kr,Uoe,kKr,SKr,RKr,nw,awe,PKr,BKr,Joe,IKr,NKr,qKr,sw,nwe,jKr,DKr,Yoe,GKr,OKr,VKr,lw,swe,XKr,zKr,Koe,QKr,WKr,HKr,iw,lwe,UKr,JKr,Zoe,YKr,KKr,ZKr,dw,jze,bf,cw,iwe,z$,eZr,dwe,oZr,Dze,Er,Q$,rZr,vf,tZr,ere,aZr,nZr,ore,sZr,lZr,iZr,W$,dZr,cwe,cZr,fZr,mZr,ea,H$,gZr,fwe,hZr,pZr,Ff,_Zr,mwe,uZr,bZr,rre,vZr,FZr,TZr,fw,MZr,Yr,U$,EZr,gwe,CZr,wZr,xn,AZr,hwe,LZr,yZr,pwe,xZr,$Zr,_we,kZr,SZr,RZr,Xe,mw,uwe,PZr,BZr,tre,IZr,NZr,qZr,gw,bwe,jZr,DZr,are,GZr,OZr,VZr,hw,vwe,XZr,zZr,nre,QZr,WZr,HZr,pw,Fwe,UZr,JZr,sre,YZr,KZr,ZZr,_w,Twe,eet,oet,lre,ret,tet,aet,uw,Mwe,net,set,ire,iet,det,cet,bw,Ewe,fet,met,dre,get,het,pet,vw,Cwe,_et,uet,cre,bet,vet,Fet,Fw,Gze,Tf,Tw,wwe,J$,Tet,Awe,Met,Oze,Cr,Y$,Eet,Mf,Cet,fre,wet,Aet,mre,Let,yet,xet,K$,$et,Lwe,ket,Set,Ret,oa,Z$,Pet,ywe,Bet,Iet,Ef,Net,xwe,qet,jet,gre,Det,Get,Oet,Mw,Vet,Kr,ek,Xet,$we,zet,Qet,$n,Wet,kwe,Het,Uet,Swe,Jet,Yet,Rwe,Ket,Zet,eot,Pwe,Ew,Bwe,oot,rot,hre,tot,aot,not,Cw,Vze,Cf,ww,Iwe,ok,sot,Nwe,lot,Xze,wr,rk,iot,wf,dot,pre,cot,fot,_re,mot,got,hot,tk,pot,qwe,_ot,uot,bot,ra,ak,vot,jwe,Fot,Tot,Af,Mot,Dwe,Eot,Cot,ure,wot,Aot,Lot,Aw,yot,Zr,nk,xot,Gwe,$ot,kot,kn,Sot,Owe,Rot,Pot,Vwe,Bot,Iot,Xwe,Not,qot,jot,sk,Lw,zwe,Dot,Got,bre,Oot,Vot,Xot,yw,Qwe,zot,Qot,vre,Wot,Hot,Uot,xw,zze,Lf,$w,Wwe,lk,Jot,Hwe,Yot,Qze,Ar,ik,Kot,yf,Zot,Fre,ert,ort,Tre,rrt,trt,art,dk,nrt,Uwe,srt,lrt,irt,ta,ck,drt,Jwe,crt,frt,xf,mrt,Ywe,grt,hrt,Mre,prt,_rt,urt,kw,brt,et,fk,vrt,Kwe,Frt,Trt,Sn,Mrt,Zwe,Ert,Crt,eAe,wrt,Art,oAe,Lrt,yrt,xrt,rAe,Sw,tAe,$rt,krt,Ere,Srt,Rrt,Prt,Rw,Wze;return d=new re({}),Sa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),rL=new re({}),tL=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),qf=new Brt({props:{warning:!0,$$slots:{default:[dQt]},$$scope:{ctx:$}}}),aL=new re({}),nL=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/configuration_auto.py#L610"}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/configuration_auto.py#L633"}}),Jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[cQt]},$$scope:{ctx:$}}}),dL=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/configuration_auto.py#L756"}}),cL=new re({}),fL=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/tokenization_auto.py#L403"}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_17924/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/tokenization_auto.py#L417"}}),Sh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[fQt]},$$scope:{ctx:$}}}),pL=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/tokenization_auto.py#L616"}}),_L=new re({}),uL=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/feature_extraction_auto.py#L195"}}),FL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_17924/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/feature_extraction_auto.py#L209"}}),pp=new Brt({props:{$$slots:{default:[mQt]},$$scope:{ctx:$}}}),_p=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[gQt]},$$scope:{ctx:$}}}),TL=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/feature_extraction_auto.py#L336"}}),ML=new re({}),EL=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/processing_auto.py#L89"}}),AL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/processing_auto.py#L103"}}),Np=new Brt({props:{$$slots:{default:[hQt]},$$scope:{ctx:$}}}),qp=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[pQt]},$$scope:{ctx:$}}}),LL=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/processing_auto.py#L256"}}),yL=new re({}),xL=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L782"}}),kL=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Gp=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[_Qt]},$$scope:{ctx:$}}}),SL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),zu=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[uQt]},$$scope:{ctx:$}}}),RL=new re({}),PL=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L789"}}),IL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Wu=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[bQt]},$$scope:{ctx:$}}}),NL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),D2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[vQt]},$$scope:{ctx:$}}}),qL=new re({}),jL=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L804"}}),GL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),O2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[FQt]},$$scope:{ctx:$}}}),OL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),$1=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[TQt]},$$scope:{ctx:$}}}),VL=new re({}),XL=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L811"}}),QL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),S1=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[MQt]},$$scope:{ctx:$}}}),WL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[EQt]},$$scope:{ctx:$}}}),HL=new re({}),UL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L818"}}),YL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[CQt]},$$scope:{ctx:$}}}),KL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),D4=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[wQt]},$$scope:{ctx:$}}}),ZL=new re({}),ey=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L827"}}),ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),O4=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[AQt]},$$scope:{ctx:$}}}),ty=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),Db=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[LQt]},$$scope:{ctx:$}}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L872"}}),ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Ob=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[yQt]},$$scope:{ctx:$}}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),Fv=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[xQt]},$$scope:{ctx:$}}}),dy=new re({}),cy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L879"}}),my=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Mv=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[$Qt]},$$scope:{ctx:$}}}),gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),$v=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[kQt]},$$scope:{ctx:$}}}),hy=new re({}),py=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L865"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Sv=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[SQt]},$$scope:{ctx:$}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[RQt]},$$scope:{ctx:$}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L836"}}),My=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),bF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[PQt]},$$scope:{ctx:$}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BQt]},$$scope:{ctx:$}}}),Cy=new re({}),wy=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L843"}}),Ly=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[IQt]},$$scope:{ctx:$}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),gT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[NQt]},$$scope:{ctx:$}}}),xy=new re({}),$y=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L888"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),pT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[qQt]},$$scope:{ctx:$}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),$T=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[jQt]},$$scope:{ctx:$}}}),Py=new re({}),By=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L927"}}),Ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),ST=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[DQt]},$$scope:{ctx:$}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),BT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[GQt]},$$scope:{ctx:$}}}),jy=new re({}),Dy=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L854"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),NT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[OQt]},$$scope:{ctx:$}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),DT=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[VQt]},$$scope:{ctx:$}}}),Xy=new re({}),zy=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L934"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),OT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[XQt]},$$scope:{ctx:$}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[zQt]},$$scope:{ctx:$}}}),Uy=new re({}),Jy=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L957"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),o7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[QQt]},$$scope:{ctx:$}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),i7=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[WQt]},$$scope:{ctx:$}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L941"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),c7=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[HQt]},$$scope:{ctx:$}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[UQt]},$$scope:{ctx:$}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L948"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),C7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JQt]},$$scope:{ctx:$}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),y7=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YQt]},$$scope:{ctx:$}}}),f8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L966"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),$7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[KQt]},$$scope:{ctx:$}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),N7=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[ZQt]},$$scope:{ctx:$}}}),_8=new re({}),u8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L973"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),j7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[eWt]},$$scope:{ctx:$}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[oWt]},$$scope:{ctx:$}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L920"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Q7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[rWt]},$$scope:{ctx:$}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),J7=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[tWt]},$$scope:{ctx:$}}}),L8=new re({}),y8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L895"}}),$8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),K7=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[aWt]},$$scope:{ctx:$}}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),o9=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[nWt]},$$scope:{ctx:$}}}),S8=new re({}),R8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L902"}}),B8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),t9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[sWt]},$$scope:{ctx:$}}}),I8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),c9=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[lWt]},$$scope:{ctx:$}}}),N8=new re({}),q8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_auto.py#L911"}}),D8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),m9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[iWt]},$$scope:{ctx:$}}}),G8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),p9=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[dWt]},$$scope:{ctx:$}}}),O8=new re({}),V8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),z8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),u9=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[cWt]},$$scope:{ctx:$}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),mM=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[fWt]},$$scope:{ctx:$}}}),W8=new re({}),H8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),J8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),hM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[mWt]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[gWt]},$$scope:{ctx:$}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[hWt]},$$scope:{ctx:$}}}),rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[pWt]},$$scope:{ctx:$}}}),tx=new re({}),ax=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[_Wt]},$$scope:{ctx:$}}}),lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),dE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[uWt]},$$scope:{ctx:$}}}),ix=new re({}),dx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),fE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[bWt]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),SE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[vWt]},$$scope:{ctx:$}}}),gx=new re({}),hx=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),PE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[FWt]},$$scope:{ctx:$}}}),ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),zE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[TWt]},$$scope:{ctx:$}}}),bx=new re({}),vx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L489"}}),Tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[MWt]},$$scope:{ctx:$}}}),Mx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[EWt]},$$scope:{ctx:$}}}),Ex=new re({}),Cx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L525"}}),Ax=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[CWt]},$$scope:{ctx:$}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),DC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[wWt]},$$scope:{ctx:$}}}),yx=new re({}),xx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L532"}}),kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),OC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[AWt]},$$scope:{ctx:$}}}),Sx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[LWt]},$$scope:{ctx:$}}}),Px=new re({}),Bx=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L505"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),WC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[yWt]},$$scope:{ctx:$}}}),qx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),UC=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[xWt]},$$scope:{ctx:$}}}),jx=new re({}),Dx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),Ox=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),YC=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[$Wt]},$$scope:{ctx:$}}}),Vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),b3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[kWt]},$$scope:{ctx:$}}}),Xx=new re({}),zx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L498"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),F3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[SWt]},$$scope:{ctx:$}}}),Hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),G3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[RWt]},$$scope:{ctx:$}}}),Ux=new re({}),Jx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L466"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),V3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[PWt]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),z3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[BWt]},$$scope:{ctx:$}}}),e$=new re({}),o$=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_tf_auto.py#L541"}}),t$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),W3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[IWt]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),U3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[NWt]},$$scope:{ctx:$}}}),n$=new re({}),s$=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),i$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[qWt]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[jWt]},$$scope:{ctx:$}}}),c$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),g$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[DWt]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),q5=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[GWt]},$$scope:{ctx:$}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),b$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[OWt]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[VWt]},$$scope:{ctx:$}}}),F$=new re({}),T$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),E$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[XWt]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),g0=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[zWt]},$$scope:{ctx:$}}}),w$=new re({}),A$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),y$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[QWt]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[WWt]},$$scope:{ctx:$}}}),$$=new re({}),k$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),R$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),y0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[HWt]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[UWt]},$$scope:{ctx:$}}}),B$=new re({}),I$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),G0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[JWt]},$$scope:{ctx:$}}}),j$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),K0=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[YWt]},$$scope:{ctx:$}}}),D$=new re({}),G$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),V$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),ew=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[KWt]},$$scope:{ctx:$}}}),X$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),dw=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[ZWt]},$$scope:{ctx:$}}}),z$=new re({}),Q$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),H$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),fw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[eHt]},$$scope:{ctx:$}}}),U$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[oHt]},$$scope:{ctx:$}}}),J$=new re({}),Y$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),Z$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[rHt]},$$scope:{ctx:$}}}),ek=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[tHt]},$$scope:{ctx:$}}}),ok=new re({}),rk=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ak=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[aHt]},$$scope:{ctx:$}}}),nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[nHt]},$$scope:{ctx:$}}}),lk=new re({}),ik=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),ck=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L389"}}),kw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[sHt]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_17924/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_17924/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_17924/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[lHt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),_=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ai=o("Auto Classes"),Rf=l(),st=a("p"),Li=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=a("code"),K6=o("from_pretrained()"),Pf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),xi=o("Instantiating one of "),Pn=a("a"),Z6=o("AutoConfig"),Bn=o(", "),In=a("a"),eL=o("AutoModel"),$i=o(`, and
`),Nn=a("a"),oL=o("AutoTokenizer"),ki=o(" will directly create a class of the relevant architecture. For instance"),Bf=l(),F(Sa.$$.fragment),We=l(),Ae=a("p"),SS=o("will create a model that is an instance of "),Si=a("a"),RS=o("BertModel"),PS=o("."),Co=l(),Ra=a("p"),BS=o("There is one class of "),If=a("code"),IS=o("AutoModel"),tHe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),OVe=l(),Ri=a("h2"),Nf=a("a"),bae=a("span"),F(rL.$$.fragment),aHe=l(),vae=a("span"),nHe=o("Extending the Auto Classes"),VVe=l(),qn=a("p"),sHe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=a("code"),lHe=o("NewModel"),iHe=o(", make sure you have a "),Tae=a("code"),dHe=o("NewModelConfig"),cHe=o(` then you can add those to the auto
classes like this:`),XVe=l(),F(tL.$$.fragment),zVe=l(),NS=a("p"),fHe=o("You will then be able to use the auto classes like you would usually do!"),QVe=l(),F(qf.$$.fragment),WVe=l(),Pi=a("h2"),jf=a("a"),Mae=a("span"),F(aL.$$.fragment),mHe=l(),Eae=a("span"),gHe=o("AutoConfig"),HVe=l(),wo=a("div"),F(nL.$$.fragment),hHe=l(),sL=a("p"),pHe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qS=a("a"),_He=o("from_pretrained()"),uHe=o(" class method."),bHe=l(),lL=a("p"),vHe=o("This class cannot be instantiated directly using "),Cae=a("code"),FHe=o("__init__()"),THe=o(" (throws an error)."),MHe=l(),Lr=a("div"),F(iL.$$.fragment),EHe=l(),wae=a("p"),CHe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),wHe=l(),Bi=a("p"),AHe=o("The configuration class to instantiate is selected based on the "),Aae=a("code"),LHe=o("model_type"),yHe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=a("code"),xHe=o("pretrained_model_name_or_path"),$He=o(":"),kHe=l(),A=a("ul"),Df=a("li"),yae=a("strong"),SHe=o("albert"),RHe=o(" \u2014 "),jS=a("a"),PHe=o("AlbertConfig"),BHe=o(" (ALBERT model)"),IHe=l(),Gf=a("li"),xae=a("strong"),NHe=o("bart"),qHe=o(" \u2014 "),DS=a("a"),jHe=o("BartConfig"),DHe=o(" (BART model)"),GHe=l(),Of=a("li"),$ae=a("strong"),OHe=o("beit"),VHe=o(" \u2014 "),GS=a("a"),XHe=o("BeitConfig"),zHe=o(" (BEiT model)"),QHe=l(),Vf=a("li"),kae=a("strong"),WHe=o("bert"),HHe=o(" \u2014 "),OS=a("a"),UHe=o("BertConfig"),JHe=o(" (BERT model)"),YHe=l(),Xf=a("li"),Sae=a("strong"),KHe=o("bert-generation"),ZHe=o(" \u2014 "),VS=a("a"),eUe=o("BertGenerationConfig"),oUe=o(" (Bert Generation model)"),rUe=l(),zf=a("li"),Rae=a("strong"),tUe=o("big_bird"),aUe=o(" \u2014 "),XS=a("a"),nUe=o("BigBirdConfig"),sUe=o(" (BigBird model)"),lUe=l(),Qf=a("li"),Pae=a("strong"),iUe=o("bigbird_pegasus"),dUe=o(" \u2014 "),zS=a("a"),cUe=o("BigBirdPegasusConfig"),fUe=o(" (BigBird-Pegasus model)"),mUe=l(),Wf=a("li"),Bae=a("strong"),gUe=o("blenderbot"),hUe=o(" \u2014 "),QS=a("a"),pUe=o("BlenderbotConfig"),_Ue=o(" (Blenderbot model)"),uUe=l(),Hf=a("li"),Iae=a("strong"),bUe=o("blenderbot-small"),vUe=o(" \u2014 "),WS=a("a"),FUe=o("BlenderbotSmallConfig"),TUe=o(" (BlenderbotSmall model)"),MUe=l(),Uf=a("li"),Nae=a("strong"),EUe=o("bloom"),CUe=o(" \u2014 "),HS=a("a"),wUe=o("BloomConfig"),AUe=o(" (BLOOM model)"),LUe=l(),Jf=a("li"),qae=a("strong"),yUe=o("camembert"),xUe=o(" \u2014 "),US=a("a"),$Ue=o("CamembertConfig"),kUe=o(" (CamemBERT model)"),SUe=l(),Yf=a("li"),jae=a("strong"),RUe=o("canine"),PUe=o(" \u2014 "),JS=a("a"),BUe=o("CanineConfig"),IUe=o(" (CANINE model)"),NUe=l(),Kf=a("li"),Dae=a("strong"),qUe=o("clip"),jUe=o(" \u2014 "),YS=a("a"),DUe=o("CLIPConfig"),GUe=o(" (CLIP model)"),OUe=l(),Zf=a("li"),Gae=a("strong"),VUe=o("codegen"),XUe=o(" \u2014 "),KS=a("a"),zUe=o("CodeGenConfig"),QUe=o(" (CodeGen model)"),WUe=l(),em=a("li"),Oae=a("strong"),HUe=o("convbert"),UUe=o(" \u2014 "),ZS=a("a"),JUe=o("ConvBertConfig"),YUe=o(" (ConvBERT model)"),KUe=l(),om=a("li"),Vae=a("strong"),ZUe=o("convnext"),eJe=o(" \u2014 "),eR=a("a"),oJe=o("ConvNextConfig"),rJe=o(" (ConvNeXT model)"),tJe=l(),rm=a("li"),Xae=a("strong"),aJe=o("ctrl"),nJe=o(" \u2014 "),oR=a("a"),sJe=o("CTRLConfig"),lJe=o(" (CTRL model)"),iJe=l(),tm=a("li"),zae=a("strong"),dJe=o("cvt"),cJe=o(" \u2014 "),rR=a("a"),fJe=o("CvtConfig"),mJe=o(" (CvT model)"),gJe=l(),am=a("li"),Qae=a("strong"),hJe=o("data2vec-audio"),pJe=o(" \u2014 "),tR=a("a"),_Je=o("Data2VecAudioConfig"),uJe=o(" (Data2VecAudio model)"),bJe=l(),nm=a("li"),Wae=a("strong"),vJe=o("data2vec-text"),FJe=o(" \u2014 "),aR=a("a"),TJe=o("Data2VecTextConfig"),MJe=o(" (Data2VecText model)"),EJe=l(),sm=a("li"),Hae=a("strong"),CJe=o("data2vec-vision"),wJe=o(" \u2014 "),nR=a("a"),AJe=o("Data2VecVisionConfig"),LJe=o(" (Data2VecVision model)"),yJe=l(),lm=a("li"),Uae=a("strong"),xJe=o("deberta"),$Je=o(" \u2014 "),sR=a("a"),kJe=o("DebertaConfig"),SJe=o(" (DeBERTa model)"),RJe=l(),im=a("li"),Jae=a("strong"),PJe=o("deberta-v2"),BJe=o(" \u2014 "),lR=a("a"),IJe=o("DebertaV2Config"),NJe=o(" (DeBERTa-v2 model)"),qJe=l(),dm=a("li"),Yae=a("strong"),jJe=o("decision_transformer"),DJe=o(" \u2014 "),iR=a("a"),GJe=o("DecisionTransformerConfig"),OJe=o(" (Decision Transformer model)"),VJe=l(),cm=a("li"),Kae=a("strong"),XJe=o("deit"),zJe=o(" \u2014 "),dR=a("a"),QJe=o("DeiTConfig"),WJe=o(" (DeiT model)"),HJe=l(),fm=a("li"),Zae=a("strong"),UJe=o("detr"),JJe=o(" \u2014 "),cR=a("a"),YJe=o("DetrConfig"),KJe=o(" (DETR model)"),ZJe=l(),mm=a("li"),ene=a("strong"),eYe=o("distilbert"),oYe=o(" \u2014 "),fR=a("a"),rYe=o("DistilBertConfig"),tYe=o(" (DistilBERT model)"),aYe=l(),gm=a("li"),one=a("strong"),nYe=o("dpr"),sYe=o(" \u2014 "),mR=a("a"),lYe=o("DPRConfig"),iYe=o(" (DPR model)"),dYe=l(),hm=a("li"),rne=a("strong"),cYe=o("dpt"),fYe=o(" \u2014 "),gR=a("a"),mYe=o("DPTConfig"),gYe=o(" (DPT model)"),hYe=l(),pm=a("li"),tne=a("strong"),pYe=o("electra"),_Ye=o(" \u2014 "),hR=a("a"),uYe=o("ElectraConfig"),bYe=o(" (ELECTRA model)"),vYe=l(),_m=a("li"),ane=a("strong"),FYe=o("encoder-decoder"),TYe=o(" \u2014 "),pR=a("a"),MYe=o("EncoderDecoderConfig"),EYe=o(" (Encoder decoder model)"),CYe=l(),um=a("li"),nne=a("strong"),wYe=o("flaubert"),AYe=o(" \u2014 "),_R=a("a"),LYe=o("FlaubertConfig"),yYe=o(" (FlauBERT model)"),xYe=l(),bm=a("li"),sne=a("strong"),$Ye=o("flava"),kYe=o(" \u2014 "),uR=a("a"),SYe=o("FlavaConfig"),RYe=o(" (FLAVA model)"),PYe=l(),vm=a("li"),lne=a("strong"),BYe=o("fnet"),IYe=o(" \u2014 "),bR=a("a"),NYe=o("FNetConfig"),qYe=o(" (FNet model)"),jYe=l(),Fm=a("li"),ine=a("strong"),DYe=o("fsmt"),GYe=o(" \u2014 "),vR=a("a"),OYe=o("FSMTConfig"),VYe=o(" (FairSeq Machine-Translation model)"),XYe=l(),Tm=a("li"),dne=a("strong"),zYe=o("funnel"),QYe=o(" \u2014 "),FR=a("a"),WYe=o("FunnelConfig"),HYe=o(" (Funnel Transformer model)"),UYe=l(),Mm=a("li"),cne=a("strong"),JYe=o("glpn"),YYe=o(" \u2014 "),TR=a("a"),KYe=o("GLPNConfig"),ZYe=o(" (GLPN model)"),eKe=l(),Em=a("li"),fne=a("strong"),oKe=o("gpt2"),rKe=o(" \u2014 "),MR=a("a"),tKe=o("GPT2Config"),aKe=o(" (OpenAI GPT-2 model)"),nKe=l(),Cm=a("li"),mne=a("strong"),sKe=o("gpt_neo"),lKe=o(" \u2014 "),ER=a("a"),iKe=o("GPTNeoConfig"),dKe=o(" (GPT Neo model)"),cKe=l(),wm=a("li"),gne=a("strong"),fKe=o("gpt_neox"),mKe=o(" \u2014 "),CR=a("a"),gKe=o("GPTNeoXConfig"),hKe=o(" (GPT NeoX model)"),pKe=l(),Am=a("li"),hne=a("strong"),_Ke=o("gptj"),uKe=o(" \u2014 "),wR=a("a"),bKe=o("GPTJConfig"),vKe=o(" (GPT-J model)"),FKe=l(),Lm=a("li"),pne=a("strong"),TKe=o("groupvit"),MKe=o(" \u2014 "),AR=a("a"),EKe=o("GroupViTConfig"),CKe=o(" (GroupViT model)"),wKe=l(),ym=a("li"),_ne=a("strong"),AKe=o("hubert"),LKe=o(" \u2014 "),LR=a("a"),yKe=o("HubertConfig"),xKe=o(" (Hubert model)"),$Ke=l(),xm=a("li"),une=a("strong"),kKe=o("ibert"),SKe=o(" \u2014 "),yR=a("a"),RKe=o("IBertConfig"),PKe=o(" (I-BERT model)"),BKe=l(),$m=a("li"),bne=a("strong"),IKe=o("imagegpt"),NKe=o(" \u2014 "),xR=a("a"),qKe=o("ImageGPTConfig"),jKe=o(" (ImageGPT model)"),DKe=l(),km=a("li"),vne=a("strong"),GKe=o("layoutlm"),OKe=o(" \u2014 "),$R=a("a"),VKe=o("LayoutLMConfig"),XKe=o(" (LayoutLM model)"),zKe=l(),Sm=a("li"),Fne=a("strong"),QKe=o("layoutlmv2"),WKe=o(" \u2014 "),kR=a("a"),HKe=o("LayoutLMv2Config"),UKe=o(" (LayoutLMv2 model)"),JKe=l(),Rm=a("li"),Tne=a("strong"),YKe=o("layoutlmv3"),KKe=o(" \u2014 "),SR=a("a"),ZKe=o("LayoutLMv3Config"),eZe=o(" (LayoutLMv3 model)"),oZe=l(),Pm=a("li"),Mne=a("strong"),rZe=o("led"),tZe=o(" \u2014 "),RR=a("a"),aZe=o("LEDConfig"),nZe=o(" (LED model)"),sZe=l(),Bm=a("li"),Ene=a("strong"),lZe=o("levit"),iZe=o(" \u2014 "),PR=a("a"),dZe=o("LevitConfig"),cZe=o(" (LeViT model)"),fZe=l(),Im=a("li"),Cne=a("strong"),mZe=o("longformer"),gZe=o(" \u2014 "),BR=a("a"),hZe=o("LongformerConfig"),pZe=o(" (Longformer model)"),_Ze=l(),Nm=a("li"),wne=a("strong"),uZe=o("longt5"),bZe=o(" \u2014 "),IR=a("a"),vZe=o("LongT5Config"),FZe=o(" (LongT5 model)"),TZe=l(),qm=a("li"),Ane=a("strong"),MZe=o("luke"),EZe=o(" \u2014 "),NR=a("a"),CZe=o("LukeConfig"),wZe=o(" (LUKE model)"),AZe=l(),jm=a("li"),Lne=a("strong"),LZe=o("lxmert"),yZe=o(" \u2014 "),qR=a("a"),xZe=o("LxmertConfig"),$Ze=o(" (LXMERT model)"),kZe=l(),Dm=a("li"),yne=a("strong"),SZe=o("m2m_100"),RZe=o(" \u2014 "),jR=a("a"),PZe=o("M2M100Config"),BZe=o(" (M2M100 model)"),IZe=l(),Gm=a("li"),xne=a("strong"),NZe=o("marian"),qZe=o(" \u2014 "),DR=a("a"),jZe=o("MarianConfig"),DZe=o(" (Marian model)"),GZe=l(),Om=a("li"),$ne=a("strong"),OZe=o("maskformer"),VZe=o(" \u2014 "),GR=a("a"),XZe=o("MaskFormerConfig"),zZe=o(" (MaskFormer model)"),QZe=l(),Vm=a("li"),kne=a("strong"),WZe=o("mbart"),HZe=o(" \u2014 "),OR=a("a"),UZe=o("MBartConfig"),JZe=o(" (mBART model)"),YZe=l(),Xm=a("li"),Sne=a("strong"),KZe=o("mctct"),ZZe=o(" \u2014 "),VR=a("a"),eeo=o("MCTCTConfig"),oeo=o(" (M-CTC-T model)"),reo=l(),zm=a("li"),Rne=a("strong"),teo=o("megatron-bert"),aeo=o(" \u2014 "),XR=a("a"),neo=o("MegatronBertConfig"),seo=o(" (Megatron-BERT model)"),leo=l(),Qm=a("li"),Pne=a("strong"),ieo=o("mobilebert"),deo=o(" \u2014 "),zR=a("a"),ceo=o("MobileBertConfig"),feo=o(" (MobileBERT model)"),meo=l(),Wm=a("li"),Bne=a("strong"),geo=o("mobilevit"),heo=o(" \u2014 "),QR=a("a"),peo=o("MobileViTConfig"),_eo=o(" (MobileViT model)"),ueo=l(),Hm=a("li"),Ine=a("strong"),beo=o("mpnet"),veo=o(" \u2014 "),WR=a("a"),Feo=o("MPNetConfig"),Teo=o(" (MPNet model)"),Meo=l(),Um=a("li"),Nne=a("strong"),Eeo=o("mt5"),Ceo=o(" \u2014 "),HR=a("a"),weo=o("MT5Config"),Aeo=o(" (MT5 model)"),Leo=l(),Jm=a("li"),qne=a("strong"),yeo=o("mvp"),xeo=o(" \u2014 "),UR=a("a"),$eo=o("MvpConfig"),keo=o(" (MVP model)"),Seo=l(),Ym=a("li"),jne=a("strong"),Reo=o("nezha"),Peo=o(" \u2014 "),JR=a("a"),Beo=o("NezhaConfig"),Ieo=o(" (Nezha model)"),Neo=l(),Km=a("li"),Dne=a("strong"),qeo=o("nystromformer"),jeo=o(" \u2014 "),YR=a("a"),Deo=o("NystromformerConfig"),Geo=o(" (Nystr\xF6mformer model)"),Oeo=l(),Zm=a("li"),Gne=a("strong"),Veo=o("openai-gpt"),Xeo=o(" \u2014 "),KR=a("a"),zeo=o("OpenAIGPTConfig"),Qeo=o(" (OpenAI GPT model)"),Weo=l(),eg=a("li"),One=a("strong"),Heo=o("opt"),Ueo=o(" \u2014 "),ZR=a("a"),Jeo=o("OPTConfig"),Yeo=o(" (OPT model)"),Keo=l(),og=a("li"),Vne=a("strong"),Zeo=o("pegasus"),eoo=o(" \u2014 "),eP=a("a"),ooo=o("PegasusConfig"),roo=o(" (Pegasus model)"),too=l(),rg=a("li"),Xne=a("strong"),aoo=o("perceiver"),noo=o(" \u2014 "),oP=a("a"),soo=o("PerceiverConfig"),loo=o(" (Perceiver model)"),ioo=l(),tg=a("li"),zne=a("strong"),doo=o("plbart"),coo=o(" \u2014 "),rP=a("a"),foo=o("PLBartConfig"),moo=o(" (PLBart model)"),goo=l(),ag=a("li"),Qne=a("strong"),hoo=o("poolformer"),poo=o(" \u2014 "),tP=a("a"),_oo=o("PoolFormerConfig"),uoo=o(" (PoolFormer model)"),boo=l(),ng=a("li"),Wne=a("strong"),voo=o("prophetnet"),Foo=o(" \u2014 "),aP=a("a"),Too=o("ProphetNetConfig"),Moo=o(" (ProphetNet model)"),Eoo=l(),sg=a("li"),Hne=a("strong"),Coo=o("qdqbert"),woo=o(" \u2014 "),nP=a("a"),Aoo=o("QDQBertConfig"),Loo=o(" (QDQBert model)"),yoo=l(),lg=a("li"),Une=a("strong"),xoo=o("rag"),$oo=o(" \u2014 "),sP=a("a"),koo=o("RagConfig"),Soo=o(" (RAG model)"),Roo=l(),ig=a("li"),Jne=a("strong"),Poo=o("realm"),Boo=o(" \u2014 "),lP=a("a"),Ioo=o("RealmConfig"),Noo=o(" (REALM model)"),qoo=l(),dg=a("li"),Yne=a("strong"),joo=o("reformer"),Doo=o(" \u2014 "),iP=a("a"),Goo=o("ReformerConfig"),Ooo=o(" (Reformer model)"),Voo=l(),cg=a("li"),Kne=a("strong"),Xoo=o("regnet"),zoo=o(" \u2014 "),dP=a("a"),Qoo=o("RegNetConfig"),Woo=o(" (RegNet model)"),Hoo=l(),fg=a("li"),Zne=a("strong"),Uoo=o("rembert"),Joo=o(" \u2014 "),cP=a("a"),Yoo=o("RemBertConfig"),Koo=o(" (RemBERT model)"),Zoo=l(),mg=a("li"),ese=a("strong"),ero=o("resnet"),oro=o(" \u2014 "),fP=a("a"),rro=o("ResNetConfig"),tro=o(" (ResNet model)"),aro=l(),gg=a("li"),ose=a("strong"),nro=o("retribert"),sro=o(" \u2014 "),mP=a("a"),lro=o("RetriBertConfig"),iro=o(" (RetriBERT model)"),dro=l(),hg=a("li"),rse=a("strong"),cro=o("roberta"),fro=o(" \u2014 "),gP=a("a"),mro=o("RobertaConfig"),gro=o(" (RoBERTa model)"),hro=l(),pg=a("li"),tse=a("strong"),pro=o("roformer"),_ro=o(" \u2014 "),hP=a("a"),uro=o("RoFormerConfig"),bro=o(" (RoFormer model)"),vro=l(),_g=a("li"),ase=a("strong"),Fro=o("segformer"),Tro=o(" \u2014 "),pP=a("a"),Mro=o("SegformerConfig"),Ero=o(" (SegFormer model)"),Cro=l(),ug=a("li"),nse=a("strong"),wro=o("sew"),Aro=o(" \u2014 "),_P=a("a"),Lro=o("SEWConfig"),yro=o(" (SEW model)"),xro=l(),bg=a("li"),sse=a("strong"),$ro=o("sew-d"),kro=o(" \u2014 "),uP=a("a"),Sro=o("SEWDConfig"),Rro=o(" (SEW-D model)"),Pro=l(),vg=a("li"),lse=a("strong"),Bro=o("speech-encoder-decoder"),Iro=o(" \u2014 "),bP=a("a"),Nro=o("SpeechEncoderDecoderConfig"),qro=o(" (Speech Encoder decoder model)"),jro=l(),Fg=a("li"),ise=a("strong"),Dro=o("speech_to_text"),Gro=o(" \u2014 "),vP=a("a"),Oro=o("Speech2TextConfig"),Vro=o(" (Speech2Text model)"),Xro=l(),Tg=a("li"),dse=a("strong"),zro=o("speech_to_text_2"),Qro=o(" \u2014 "),FP=a("a"),Wro=o("Speech2Text2Config"),Hro=o(" (Speech2Text2 model)"),Uro=l(),Mg=a("li"),cse=a("strong"),Jro=o("splinter"),Yro=o(" \u2014 "),TP=a("a"),Kro=o("SplinterConfig"),Zro=o(" (Splinter model)"),eto=l(),Eg=a("li"),fse=a("strong"),oto=o("squeezebert"),rto=o(" \u2014 "),MP=a("a"),tto=o("SqueezeBertConfig"),ato=o(" (SqueezeBERT model)"),nto=l(),Cg=a("li"),mse=a("strong"),sto=o("swin"),lto=o(" \u2014 "),EP=a("a"),ito=o("SwinConfig"),dto=o(" (Swin Transformer model)"),cto=l(),wg=a("li"),gse=a("strong"),fto=o("t5"),mto=o(" \u2014 "),CP=a("a"),gto=o("T5Config"),hto=o(" (T5 model)"),pto=l(),Ag=a("li"),hse=a("strong"),_to=o("tapas"),uto=o(" \u2014 "),wP=a("a"),bto=o("TapasConfig"),vto=o(" (TAPAS model)"),Fto=l(),Lg=a("li"),pse=a("strong"),Tto=o("trajectory_transformer"),Mto=o(" \u2014 "),AP=a("a"),Eto=o("TrajectoryTransformerConfig"),Cto=o(" (Trajectory Transformer model)"),wto=l(),yg=a("li"),_se=a("strong"),Ato=o("transfo-xl"),Lto=o(" \u2014 "),LP=a("a"),yto=o("TransfoXLConfig"),xto=o(" (Transformer-XL model)"),$to=l(),xg=a("li"),use=a("strong"),kto=o("trocr"),Sto=o(" \u2014 "),yP=a("a"),Rto=o("TrOCRConfig"),Pto=o(" (TrOCR model)"),Bto=l(),$g=a("li"),bse=a("strong"),Ito=o("unispeech"),Nto=o(" \u2014 "),xP=a("a"),qto=o("UniSpeechConfig"),jto=o(" (UniSpeech model)"),Dto=l(),kg=a("li"),vse=a("strong"),Gto=o("unispeech-sat"),Oto=o(" \u2014 "),$P=a("a"),Vto=o("UniSpeechSatConfig"),Xto=o(" (UniSpeechSat model)"),zto=l(),Sg=a("li"),Fse=a("strong"),Qto=o("van"),Wto=o(" \u2014 "),kP=a("a"),Hto=o("VanConfig"),Uto=o(" (VAN model)"),Jto=l(),Rg=a("li"),Tse=a("strong"),Yto=o("vilt"),Kto=o(" \u2014 "),SP=a("a"),Zto=o("ViltConfig"),eao=o(" (ViLT model)"),oao=l(),Pg=a("li"),Mse=a("strong"),rao=o("vision-encoder-decoder"),tao=o(" \u2014 "),RP=a("a"),aao=o("VisionEncoderDecoderConfig"),nao=o(" (Vision Encoder decoder model)"),sao=l(),Bg=a("li"),Ese=a("strong"),lao=o("vision-text-dual-encoder"),iao=o(" \u2014 "),PP=a("a"),dao=o("VisionTextDualEncoderConfig"),cao=o(" (VisionTextDualEncoder model)"),fao=l(),Ig=a("li"),Cse=a("strong"),mao=o("visual_bert"),gao=o(" \u2014 "),BP=a("a"),hao=o("VisualBertConfig"),pao=o(" (VisualBERT model)"),_ao=l(),Ng=a("li"),wse=a("strong"),uao=o("vit"),bao=o(" \u2014 "),IP=a("a"),vao=o("ViTConfig"),Fao=o(" (ViT model)"),Tao=l(),qg=a("li"),Ase=a("strong"),Mao=o("vit_mae"),Eao=o(" \u2014 "),NP=a("a"),Cao=o("ViTMAEConfig"),wao=o(" (ViTMAE model)"),Aao=l(),jg=a("li"),Lse=a("strong"),Lao=o("wav2vec2"),yao=o(" \u2014 "),qP=a("a"),xao=o("Wav2Vec2Config"),$ao=o(" (Wav2Vec2 model)"),kao=l(),Dg=a("li"),yse=a("strong"),Sao=o("wav2vec2-conformer"),Rao=o(" \u2014 "),jP=a("a"),Pao=o("Wav2Vec2ConformerConfig"),Bao=o(" (Wav2Vec2-Conformer model)"),Iao=l(),Gg=a("li"),xse=a("strong"),Nao=o("wavlm"),qao=o(" \u2014 "),DP=a("a"),jao=o("WavLMConfig"),Dao=o(" (WavLM model)"),Gao=l(),Og=a("li"),$se=a("strong"),Oao=o("xglm"),Vao=o(" \u2014 "),GP=a("a"),Xao=o("XGLMConfig"),zao=o(" (XGLM model)"),Qao=l(),Vg=a("li"),kse=a("strong"),Wao=o("xlm"),Hao=o(" \u2014 "),OP=a("a"),Uao=o("XLMConfig"),Jao=o(" (XLM model)"),Yao=l(),Xg=a("li"),Sse=a("strong"),Kao=o("xlm-prophetnet"),Zao=o(" \u2014 "),VP=a("a"),eno=o("XLMProphetNetConfig"),ono=o(" (XLM-ProphetNet model)"),rno=l(),zg=a("li"),Rse=a("strong"),tno=o("xlm-roberta"),ano=o(" \u2014 "),XP=a("a"),nno=o("XLMRobertaConfig"),sno=o(" (XLM-RoBERTa model)"),lno=l(),Qg=a("li"),Pse=a("strong"),ino=o("xlm-roberta-xl"),dno=o(" \u2014 "),zP=a("a"),cno=o("XLMRobertaXLConfig"),fno=o(" (XLM-RoBERTa-XL model)"),mno=l(),Wg=a("li"),Bse=a("strong"),gno=o("xlnet"),hno=o(" \u2014 "),QP=a("a"),pno=o("XLNetConfig"),_no=o(" (XLNet model)"),uno=l(),Hg=a("li"),Ise=a("strong"),bno=o("yolos"),vno=o(" \u2014 "),WP=a("a"),Fno=o("YolosConfig"),Tno=o(" (YOLOS model)"),Mno=l(),Ug=a("li"),Nse=a("strong"),Eno=o("yoso"),Cno=o(" \u2014 "),HP=a("a"),wno=o("YosoConfig"),Ano=o(" (YOSO model)"),Lno=l(),F(Jg.$$.fragment),yno=l(),Yg=a("div"),F(dL.$$.fragment),xno=l(),qse=a("p"),$no=o("Register a new configuration for this class."),UVe=l(),Ii=a("h2"),Kg=a("a"),jse=a("span"),F(cL.$$.fragment),kno=l(),Dse=a("span"),Sno=o("AutoTokenizer"),JVe=l(),Ao=a("div"),F(fL.$$.fragment),Rno=l(),mL=a("p"),Pno=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UP=a("a"),Bno=o("AutoTokenizer.from_pretrained()"),Ino=o(" class method."),Nno=l(),gL=a("p"),qno=o("This class cannot be instantiated directly using "),Gse=a("code"),jno=o("__init__()"),Dno=o(" (throws an error)."),Gno=l(),yr=a("div"),F(hL.$$.fragment),Ono=l(),Ose=a("p"),Vno=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Xno=l(),Pa=a("p"),zno=o("The tokenizer class to instantiate is selected based on the "),Vse=a("code"),Qno=o("model_type"),Wno=o(` property of the config object (either
passed as an argument or loaded from `),Xse=a("code"),Hno=o("pretrained_model_name_or_path"),Uno=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=a("code"),Jno=o("pretrained_model_name_or_path"),Yno=o(":"),Kno=l(),k=a("ul"),jn=a("li"),Qse=a("strong"),Zno=o("albert"),eso=o(" \u2014 "),JP=a("a"),oso=o("AlbertTokenizer"),rso=o(" or "),YP=a("a"),tso=o("AlbertTokenizerFast"),aso=o(" (ALBERT model)"),nso=l(),Dn=a("li"),Wse=a("strong"),sso=o("bart"),lso=o(" \u2014 "),KP=a("a"),iso=o("BartTokenizer"),dso=o(" or "),ZP=a("a"),cso=o("BartTokenizerFast"),fso=o(" (BART model)"),mso=l(),Gn=a("li"),Hse=a("strong"),gso=o("barthez"),hso=o(" \u2014 "),eB=a("a"),pso=o("BarthezTokenizer"),_so=o(" or "),oB=a("a"),uso=o("BarthezTokenizerFast"),bso=o(" (BARThez model)"),vso=l(),Zg=a("li"),Use=a("strong"),Fso=o("bartpho"),Tso=o(" \u2014 "),rB=a("a"),Mso=o("BartphoTokenizer"),Eso=o(" (BARTpho model)"),Cso=l(),On=a("li"),Jse=a("strong"),wso=o("bert"),Aso=o(" \u2014 "),tB=a("a"),Lso=o("BertTokenizer"),yso=o(" or "),aB=a("a"),xso=o("BertTokenizerFast"),$so=o(" (BERT model)"),kso=l(),eh=a("li"),Yse=a("strong"),Sso=o("bert-generation"),Rso=o(" \u2014 "),nB=a("a"),Pso=o("BertGenerationTokenizer"),Bso=o(" (Bert Generation model)"),Iso=l(),oh=a("li"),Kse=a("strong"),Nso=o("bert-japanese"),qso=o(" \u2014 "),sB=a("a"),jso=o("BertJapaneseTokenizer"),Dso=o(" (BertJapanese model)"),Gso=l(),rh=a("li"),Zse=a("strong"),Oso=o("bertweet"),Vso=o(" \u2014 "),lB=a("a"),Xso=o("BertweetTokenizer"),zso=o(" (BERTweet model)"),Qso=l(),Vn=a("li"),ele=a("strong"),Wso=o("big_bird"),Hso=o(" \u2014 "),iB=a("a"),Uso=o("BigBirdTokenizer"),Jso=o(" or "),dB=a("a"),Yso=o("BigBirdTokenizerFast"),Kso=o(" (BigBird model)"),Zso=l(),Xn=a("li"),ole=a("strong"),elo=o("bigbird_pegasus"),olo=o(" \u2014 "),cB=a("a"),rlo=o("PegasusTokenizer"),tlo=o(" or "),fB=a("a"),alo=o("PegasusTokenizerFast"),nlo=o(" (BigBird-Pegasus model)"),slo=l(),zn=a("li"),rle=a("strong"),llo=o("blenderbot"),ilo=o(" \u2014 "),mB=a("a"),dlo=o("BlenderbotTokenizer"),clo=o(" or "),gB=a("a"),flo=o("BlenderbotTokenizerFast"),mlo=o(" (Blenderbot model)"),glo=l(),th=a("li"),tle=a("strong"),hlo=o("blenderbot-small"),plo=o(" \u2014 "),hB=a("a"),_lo=o("BlenderbotSmallTokenizer"),ulo=o(" (BlenderbotSmall model)"),blo=l(),ah=a("li"),ale=a("strong"),vlo=o("bloom"),Flo=o(" \u2014 "),pB=a("a"),Tlo=o("BloomTokenizerFast"),Mlo=o(" (BLOOM model)"),Elo=l(),nh=a("li"),nle=a("strong"),Clo=o("byt5"),wlo=o(" \u2014 "),_B=a("a"),Alo=o("ByT5Tokenizer"),Llo=o(" (ByT5 model)"),ylo=l(),Qn=a("li"),sle=a("strong"),xlo=o("camembert"),$lo=o(" \u2014 "),uB=a("a"),klo=o("CamembertTokenizer"),Slo=o(" or "),bB=a("a"),Rlo=o("CamembertTokenizerFast"),Plo=o(" (CamemBERT model)"),Blo=l(),sh=a("li"),lle=a("strong"),Ilo=o("canine"),Nlo=o(" \u2014 "),vB=a("a"),qlo=o("CanineTokenizer"),jlo=o(" (CANINE model)"),Dlo=l(),Wn=a("li"),ile=a("strong"),Glo=o("clip"),Olo=o(" \u2014 "),FB=a("a"),Vlo=o("CLIPTokenizer"),Xlo=o(" or "),TB=a("a"),zlo=o("CLIPTokenizerFast"),Qlo=o(" (CLIP model)"),Wlo=l(),Hn=a("li"),dle=a("strong"),Hlo=o("codegen"),Ulo=o(" \u2014 "),MB=a("a"),Jlo=o("CodeGenTokenizer"),Ylo=o(" or "),EB=a("a"),Klo=o("CodeGenTokenizerFast"),Zlo=o(" (CodeGen model)"),eio=l(),Un=a("li"),cle=a("strong"),oio=o("convbert"),rio=o(" \u2014 "),CB=a("a"),tio=o("ConvBertTokenizer"),aio=o(" or "),wB=a("a"),nio=o("ConvBertTokenizerFast"),sio=o(" (ConvBERT model)"),lio=l(),Jn=a("li"),fle=a("strong"),iio=o("cpm"),dio=o(" \u2014 "),AB=a("a"),cio=o("CpmTokenizer"),fio=o(" or "),LB=a("a"),mio=o("CpmTokenizerFast"),gio=o(" (CPM model)"),hio=l(),lh=a("li"),mle=a("strong"),pio=o("ctrl"),_io=o(" \u2014 "),yB=a("a"),uio=o("CTRLTokenizer"),bio=o(" (CTRL model)"),vio=l(),Yn=a("li"),gle=a("strong"),Fio=o("data2vec-text"),Tio=o(" \u2014 "),xB=a("a"),Mio=o("RobertaTokenizer"),Eio=o(" or "),$B=a("a"),Cio=o("RobertaTokenizerFast"),wio=o(" (Data2VecText model)"),Aio=l(),Kn=a("li"),hle=a("strong"),Lio=o("deberta"),yio=o(" \u2014 "),kB=a("a"),xio=o("DebertaTokenizer"),$io=o(" or "),SB=a("a"),kio=o("DebertaTokenizerFast"),Sio=o(" (DeBERTa model)"),Rio=l(),Zn=a("li"),ple=a("strong"),Pio=o("deberta-v2"),Bio=o(" \u2014 "),RB=a("a"),Iio=o("DebertaV2Tokenizer"),Nio=o(" or "),PB=a("a"),qio=o("DebertaV2TokenizerFast"),jio=o(" (DeBERTa-v2 model)"),Dio=l(),es=a("li"),_le=a("strong"),Gio=o("distilbert"),Oio=o(" \u2014 "),BB=a("a"),Vio=o("DistilBertTokenizer"),Xio=o(" or "),IB=a("a"),zio=o("DistilBertTokenizerFast"),Qio=o(" (DistilBERT model)"),Wio=l(),os=a("li"),ule=a("strong"),Hio=o("dpr"),Uio=o(" \u2014 "),NB=a("a"),Jio=o("DPRQuestionEncoderTokenizer"),Yio=o(" or "),qB=a("a"),Kio=o("DPRQuestionEncoderTokenizerFast"),Zio=o(" (DPR model)"),edo=l(),rs=a("li"),ble=a("strong"),odo=o("electra"),rdo=o(" \u2014 "),jB=a("a"),tdo=o("ElectraTokenizer"),ado=o(" or "),DB=a("a"),ndo=o("ElectraTokenizerFast"),sdo=o(" (ELECTRA model)"),ldo=l(),ih=a("li"),vle=a("strong"),ido=o("flaubert"),ddo=o(" \u2014 "),GB=a("a"),cdo=o("FlaubertTokenizer"),fdo=o(" (FlauBERT model)"),mdo=l(),ts=a("li"),Fle=a("strong"),gdo=o("fnet"),hdo=o(" \u2014 "),OB=a("a"),pdo=o("FNetTokenizer"),_do=o(" or "),VB=a("a"),udo=o("FNetTokenizerFast"),bdo=o(" (FNet model)"),vdo=l(),dh=a("li"),Tle=a("strong"),Fdo=o("fsmt"),Tdo=o(" \u2014 "),XB=a("a"),Mdo=o("FSMTTokenizer"),Edo=o(" (FairSeq Machine-Translation model)"),Cdo=l(),as=a("li"),Mle=a("strong"),wdo=o("funnel"),Ado=o(" \u2014 "),zB=a("a"),Ldo=o("FunnelTokenizer"),ydo=o(" or "),QB=a("a"),xdo=o("FunnelTokenizerFast"),$do=o(" (Funnel Transformer model)"),kdo=l(),ns=a("li"),Ele=a("strong"),Sdo=o("gpt2"),Rdo=o(" \u2014 "),WB=a("a"),Pdo=o("GPT2Tokenizer"),Bdo=o(" or "),HB=a("a"),Ido=o("GPT2TokenizerFast"),Ndo=o(" (OpenAI GPT-2 model)"),qdo=l(),ss=a("li"),Cle=a("strong"),jdo=o("gpt_neo"),Ddo=o(" \u2014 "),UB=a("a"),Gdo=o("GPT2Tokenizer"),Odo=o(" or "),JB=a("a"),Vdo=o("GPT2TokenizerFast"),Xdo=o(" (GPT Neo model)"),zdo=l(),ch=a("li"),wle=a("strong"),Qdo=o("gpt_neox"),Wdo=o(" \u2014 "),YB=a("a"),Hdo=o("GPTNeoXTokenizerFast"),Udo=o(" (GPT NeoX model)"),Jdo=l(),ls=a("li"),Ale=a("strong"),Ydo=o("gptj"),Kdo=o(" \u2014 "),KB=a("a"),Zdo=o("GPT2Tokenizer"),eco=o(" or "),ZB=a("a"),oco=o("GPT2TokenizerFast"),rco=o(" (GPT-J model)"),tco=l(),is=a("li"),Lle=a("strong"),aco=o("groupvit"),nco=o(" \u2014 "),eI=a("a"),sco=o("CLIPTokenizer"),lco=o(" or "),oI=a("a"),ico=o("CLIPTokenizerFast"),dco=o(" (GroupViT model)"),cco=l(),ds=a("li"),yle=a("strong"),fco=o("herbert"),mco=o(" \u2014 "),rI=a("a"),gco=o("HerbertTokenizer"),hco=o(" or "),tI=a("a"),pco=o("HerbertTokenizerFast"),_co=o(" (HerBERT model)"),uco=l(),fh=a("li"),xle=a("strong"),bco=o("hubert"),vco=o(" \u2014 "),aI=a("a"),Fco=o("Wav2Vec2CTCTokenizer"),Tco=o(" (Hubert model)"),Mco=l(),cs=a("li"),$le=a("strong"),Eco=o("ibert"),Cco=o(" \u2014 "),nI=a("a"),wco=o("RobertaTokenizer"),Aco=o(" or "),sI=a("a"),Lco=o("RobertaTokenizerFast"),yco=o(" (I-BERT model)"),xco=l(),fs=a("li"),kle=a("strong"),$co=o("layoutlm"),kco=o(" \u2014 "),lI=a("a"),Sco=o("LayoutLMTokenizer"),Rco=o(" or "),iI=a("a"),Pco=o("LayoutLMTokenizerFast"),Bco=o(" (LayoutLM model)"),Ico=l(),ms=a("li"),Sle=a("strong"),Nco=o("layoutlmv2"),qco=o(" \u2014 "),dI=a("a"),jco=o("LayoutLMv2Tokenizer"),Dco=o(" or "),cI=a("a"),Gco=o("LayoutLMv2TokenizerFast"),Oco=o(" (LayoutLMv2 model)"),Vco=l(),gs=a("li"),Rle=a("strong"),Xco=o("layoutlmv3"),zco=o(" \u2014 "),fI=a("a"),Qco=o("LayoutLMv3Tokenizer"),Wco=o(" or "),mI=a("a"),Hco=o("LayoutLMv3TokenizerFast"),Uco=o(" (LayoutLMv3 model)"),Jco=l(),hs=a("li"),Ple=a("strong"),Yco=o("layoutxlm"),Kco=o(" \u2014 "),gI=a("a"),Zco=o("LayoutXLMTokenizer"),efo=o(" or "),hI=a("a"),ofo=o("LayoutXLMTokenizerFast"),rfo=o(" (LayoutXLM model)"),tfo=l(),ps=a("li"),Ble=a("strong"),afo=o("led"),nfo=o(" \u2014 "),pI=a("a"),sfo=o("LEDTokenizer"),lfo=o(" or "),_I=a("a"),ifo=o("LEDTokenizerFast"),dfo=o(" (LED model)"),cfo=l(),_s=a("li"),Ile=a("strong"),ffo=o("longformer"),mfo=o(" \u2014 "),uI=a("a"),gfo=o("LongformerTokenizer"),hfo=o(" or "),bI=a("a"),pfo=o("LongformerTokenizerFast"),_fo=o(" (Longformer model)"),ufo=l(),us=a("li"),Nle=a("strong"),bfo=o("longt5"),vfo=o(" \u2014 "),vI=a("a"),Ffo=o("T5Tokenizer"),Tfo=o(" or "),FI=a("a"),Mfo=o("T5TokenizerFast"),Efo=o(" (LongT5 model)"),Cfo=l(),mh=a("li"),qle=a("strong"),wfo=o("luke"),Afo=o(" \u2014 "),TI=a("a"),Lfo=o("LukeTokenizer"),yfo=o(" (LUKE model)"),xfo=l(),bs=a("li"),jle=a("strong"),$fo=o("lxmert"),kfo=o(" \u2014 "),MI=a("a"),Sfo=o("LxmertTokenizer"),Rfo=o(" or "),EI=a("a"),Pfo=o("LxmertTokenizerFast"),Bfo=o(" (LXMERT model)"),Ifo=l(),gh=a("li"),Dle=a("strong"),Nfo=o("m2m_100"),qfo=o(" \u2014 "),CI=a("a"),jfo=o("M2M100Tokenizer"),Dfo=o(" (M2M100 model)"),Gfo=l(),hh=a("li"),Gle=a("strong"),Ofo=o("marian"),Vfo=o(" \u2014 "),wI=a("a"),Xfo=o("MarianTokenizer"),zfo=o(" (Marian model)"),Qfo=l(),vs=a("li"),Ole=a("strong"),Wfo=o("mbart"),Hfo=o(" \u2014 "),AI=a("a"),Ufo=o("MBartTokenizer"),Jfo=o(" or "),LI=a("a"),Yfo=o("MBartTokenizerFast"),Kfo=o(" (mBART model)"),Zfo=l(),Fs=a("li"),Vle=a("strong"),emo=o("mbart50"),omo=o(" \u2014 "),yI=a("a"),rmo=o("MBart50Tokenizer"),tmo=o(" or "),xI=a("a"),amo=o("MBart50TokenizerFast"),nmo=o(" (mBART-50 model)"),smo=l(),Ts=a("li"),Xle=a("strong"),lmo=o("megatron-bert"),imo=o(" \u2014 "),$I=a("a"),dmo=o("BertTokenizer"),cmo=o(" or "),kI=a("a"),fmo=o("BertTokenizerFast"),mmo=o(" (Megatron-BERT model)"),gmo=l(),ph=a("li"),zle=a("strong"),hmo=o("mluke"),pmo=o(" \u2014 "),SI=a("a"),_mo=o("MLukeTokenizer"),umo=o(" (mLUKE model)"),bmo=l(),Ms=a("li"),Qle=a("strong"),vmo=o("mobilebert"),Fmo=o(" \u2014 "),RI=a("a"),Tmo=o("MobileBertTokenizer"),Mmo=o(" or "),PI=a("a"),Emo=o("MobileBertTokenizerFast"),Cmo=o(" (MobileBERT model)"),wmo=l(),Es=a("li"),Wle=a("strong"),Amo=o("mpnet"),Lmo=o(" \u2014 "),BI=a("a"),ymo=o("MPNetTokenizer"),xmo=o(" or "),II=a("a"),$mo=o("MPNetTokenizerFast"),kmo=o(" (MPNet model)"),Smo=l(),Cs=a("li"),Hle=a("strong"),Rmo=o("mt5"),Pmo=o(" \u2014 "),NI=a("a"),Bmo=o("MT5Tokenizer"),Imo=o(" or "),qI=a("a"),Nmo=o("MT5TokenizerFast"),qmo=o(" (MT5 model)"),jmo=l(),ws=a("li"),Ule=a("strong"),Dmo=o("mvp"),Gmo=o(" \u2014 "),jI=a("a"),Omo=o("MvpTokenizer"),Vmo=o(" or "),DI=a("a"),Xmo=o("MvpTokenizerFast"),zmo=o(" (MVP model)"),Qmo=l(),As=a("li"),Jle=a("strong"),Wmo=o("nezha"),Hmo=o(" \u2014 "),GI=a("a"),Umo=o("BertTokenizer"),Jmo=o(" or "),OI=a("a"),Ymo=o("BertTokenizerFast"),Kmo=o(" (Nezha model)"),Zmo=l(),Ls=a("li"),Yle=a("strong"),ego=o("nystromformer"),ogo=o(" \u2014 "),VI=a("a"),rgo=o("AlbertTokenizer"),tgo=o(" or "),XI=a("a"),ago=o("AlbertTokenizerFast"),ngo=o(" (Nystr\xF6mformer model)"),sgo=l(),ys=a("li"),Kle=a("strong"),lgo=o("openai-gpt"),igo=o(" \u2014 "),zI=a("a"),dgo=o("OpenAIGPTTokenizer"),cgo=o(" or "),QI=a("a"),fgo=o("OpenAIGPTTokenizerFast"),mgo=o(" (OpenAI GPT model)"),ggo=l(),_h=a("li"),Zle=a("strong"),hgo=o("opt"),pgo=o(" \u2014 "),WI=a("a"),_go=o("GPT2Tokenizer"),ugo=o(" (OPT model)"),bgo=l(),xs=a("li"),eie=a("strong"),vgo=o("pegasus"),Fgo=o(" \u2014 "),HI=a("a"),Tgo=o("PegasusTokenizer"),Mgo=o(" or "),UI=a("a"),Ego=o("PegasusTokenizerFast"),Cgo=o(" (Pegasus model)"),wgo=l(),uh=a("li"),oie=a("strong"),Ago=o("perceiver"),Lgo=o(" \u2014 "),JI=a("a"),ygo=o("PerceiverTokenizer"),xgo=o(" (Perceiver model)"),$go=l(),bh=a("li"),rie=a("strong"),kgo=o("phobert"),Sgo=o(" \u2014 "),YI=a("a"),Rgo=o("PhobertTokenizer"),Pgo=o(" (PhoBERT model)"),Bgo=l(),vh=a("li"),tie=a("strong"),Igo=o("plbart"),Ngo=o(" \u2014 "),KI=a("a"),qgo=o("PLBartTokenizer"),jgo=o(" (PLBart model)"),Dgo=l(),Fh=a("li"),aie=a("strong"),Ggo=o("prophetnet"),Ogo=o(" \u2014 "),ZI=a("a"),Vgo=o("ProphetNetTokenizer"),Xgo=o(" (ProphetNet model)"),zgo=l(),$s=a("li"),nie=a("strong"),Qgo=o("qdqbert"),Wgo=o(" \u2014 "),eN=a("a"),Hgo=o("BertTokenizer"),Ugo=o(" or "),oN=a("a"),Jgo=o("BertTokenizerFast"),Ygo=o(" (QDQBert model)"),Kgo=l(),Th=a("li"),sie=a("strong"),Zgo=o("rag"),eho=o(" \u2014 "),rN=a("a"),oho=o("RagTokenizer"),rho=o(" (RAG model)"),tho=l(),ks=a("li"),lie=a("strong"),aho=o("realm"),nho=o(" \u2014 "),tN=a("a"),sho=o("RealmTokenizer"),lho=o(" or "),aN=a("a"),iho=o("RealmTokenizerFast"),dho=o(" (REALM model)"),cho=l(),Ss=a("li"),iie=a("strong"),fho=o("reformer"),mho=o(" \u2014 "),nN=a("a"),gho=o("ReformerTokenizer"),hho=o(" or "),sN=a("a"),pho=o("ReformerTokenizerFast"),_ho=o(" (Reformer model)"),uho=l(),Rs=a("li"),die=a("strong"),bho=o("rembert"),vho=o(" \u2014 "),lN=a("a"),Fho=o("RemBertTokenizer"),Tho=o(" or "),iN=a("a"),Mho=o("RemBertTokenizerFast"),Eho=o(" (RemBERT model)"),Cho=l(),Ps=a("li"),cie=a("strong"),who=o("retribert"),Aho=o(" \u2014 "),dN=a("a"),Lho=o("RetriBertTokenizer"),yho=o(" or "),cN=a("a"),xho=o("RetriBertTokenizerFast"),$ho=o(" (RetriBERT model)"),kho=l(),Bs=a("li"),fie=a("strong"),Sho=o("roberta"),Rho=o(" \u2014 "),fN=a("a"),Pho=o("RobertaTokenizer"),Bho=o(" or "),mN=a("a"),Iho=o("RobertaTokenizerFast"),Nho=o(" (RoBERTa model)"),qho=l(),Is=a("li"),mie=a("strong"),jho=o("roformer"),Dho=o(" \u2014 "),gN=a("a"),Gho=o("RoFormerTokenizer"),Oho=o(" or "),hN=a("a"),Vho=o("RoFormerTokenizerFast"),Xho=o(" (RoFormer model)"),zho=l(),Mh=a("li"),gie=a("strong"),Qho=o("speech_to_text"),Who=o(" \u2014 "),pN=a("a"),Hho=o("Speech2TextTokenizer"),Uho=o(" (Speech2Text model)"),Jho=l(),Eh=a("li"),hie=a("strong"),Yho=o("speech_to_text_2"),Kho=o(" \u2014 "),_N=a("a"),Zho=o("Speech2Text2Tokenizer"),epo=o(" (Speech2Text2 model)"),opo=l(),Ns=a("li"),pie=a("strong"),rpo=o("splinter"),tpo=o(" \u2014 "),uN=a("a"),apo=o("SplinterTokenizer"),npo=o(" or "),bN=a("a"),spo=o("SplinterTokenizerFast"),lpo=o(" (Splinter model)"),ipo=l(),qs=a("li"),_ie=a("strong"),dpo=o("squeezebert"),cpo=o(" \u2014 "),vN=a("a"),fpo=o("SqueezeBertTokenizer"),mpo=o(" or "),FN=a("a"),gpo=o("SqueezeBertTokenizerFast"),hpo=o(" (SqueezeBERT model)"),ppo=l(),js=a("li"),uie=a("strong"),_po=o("t5"),upo=o(" \u2014 "),TN=a("a"),bpo=o("T5Tokenizer"),vpo=o(" or "),MN=a("a"),Fpo=o("T5TokenizerFast"),Tpo=o(" (T5 model)"),Mpo=l(),Ch=a("li"),bie=a("strong"),Epo=o("tapas"),Cpo=o(" \u2014 "),EN=a("a"),wpo=o("TapasTokenizer"),Apo=o(" (TAPAS model)"),Lpo=l(),wh=a("li"),vie=a("strong"),ypo=o("tapex"),xpo=o(" \u2014 "),CN=a("a"),$po=o("TapexTokenizer"),kpo=o(" (TAPEX model)"),Spo=l(),Ah=a("li"),Fie=a("strong"),Rpo=o("transfo-xl"),Ppo=o(" \u2014 "),wN=a("a"),Bpo=o("TransfoXLTokenizer"),Ipo=o(" (Transformer-XL model)"),Npo=l(),Ds=a("li"),Tie=a("strong"),qpo=o("vilt"),jpo=o(" \u2014 "),AN=a("a"),Dpo=o("BertTokenizer"),Gpo=o(" or "),LN=a("a"),Opo=o("BertTokenizerFast"),Vpo=o(" (ViLT model)"),Xpo=l(),Gs=a("li"),Mie=a("strong"),zpo=o("visual_bert"),Qpo=o(" \u2014 "),yN=a("a"),Wpo=o("BertTokenizer"),Hpo=o(" or "),xN=a("a"),Upo=o("BertTokenizerFast"),Jpo=o(" (VisualBERT model)"),Ypo=l(),Lh=a("li"),Eie=a("strong"),Kpo=o("wav2vec2"),Zpo=o(" \u2014 "),$N=a("a"),e_o=o("Wav2Vec2CTCTokenizer"),o_o=o(" (Wav2Vec2 model)"),r_o=l(),yh=a("li"),Cie=a("strong"),t_o=o("wav2vec2-conformer"),a_o=o(" \u2014 "),kN=a("a"),n_o=o("Wav2Vec2CTCTokenizer"),s_o=o(" (Wav2Vec2-Conformer model)"),l_o=l(),xh=a("li"),wie=a("strong"),i_o=o("wav2vec2_phoneme"),d_o=o(" \u2014 "),SN=a("a"),c_o=o("Wav2Vec2PhonemeCTCTokenizer"),f_o=o(" (Wav2Vec2Phoneme model)"),m_o=l(),Os=a("li"),Aie=a("strong"),g_o=o("xglm"),h_o=o(" \u2014 "),RN=a("a"),p_o=o("XGLMTokenizer"),__o=o(" or "),PN=a("a"),u_o=o("XGLMTokenizerFast"),b_o=o(" (XGLM model)"),v_o=l(),$h=a("li"),Lie=a("strong"),F_o=o("xlm"),T_o=o(" \u2014 "),BN=a("a"),M_o=o("XLMTokenizer"),E_o=o(" (XLM model)"),C_o=l(),kh=a("li"),yie=a("strong"),w_o=o("xlm-prophetnet"),A_o=o(" \u2014 "),IN=a("a"),L_o=o("XLMProphetNetTokenizer"),y_o=o(" (XLM-ProphetNet model)"),x_o=l(),Vs=a("li"),xie=a("strong"),$_o=o("xlm-roberta"),k_o=o(" \u2014 "),NN=a("a"),S_o=o("XLMRobertaTokenizer"),R_o=o(" or "),qN=a("a"),P_o=o("XLMRobertaTokenizerFast"),B_o=o(" (XLM-RoBERTa model)"),I_o=l(),Xs=a("li"),$ie=a("strong"),N_o=o("xlm-roberta-xl"),q_o=o(" \u2014 "),jN=a("a"),j_o=o("RobertaTokenizer"),D_o=o(" or "),DN=a("a"),G_o=o("RobertaTokenizerFast"),O_o=o(" (XLM-RoBERTa-XL model)"),V_o=l(),zs=a("li"),kie=a("strong"),X_o=o("xlnet"),z_o=o(" \u2014 "),GN=a("a"),Q_o=o("XLNetTokenizer"),W_o=o(" or "),ON=a("a"),H_o=o("XLNetTokenizerFast"),U_o=o(" (XLNet model)"),J_o=l(),Qs=a("li"),Sie=a("strong"),Y_o=o("yoso"),K_o=o(" \u2014 "),VN=a("a"),Z_o=o("AlbertTokenizer"),euo=o(" or "),XN=a("a"),ouo=o("AlbertTokenizerFast"),ruo=o(" (YOSO model)"),tuo=l(),F(Sh.$$.fragment),auo=l(),Rh=a("div"),F(pL.$$.fragment),nuo=l(),Rie=a("p"),suo=o("Register a new tokenizer in this mapping."),YVe=l(),Ni=a("h2"),Ph=a("a"),Pie=a("span"),F(_L.$$.fragment),luo=l(),Bie=a("span"),iuo=o("AutoFeatureExtractor"),KVe=l(),Lo=a("div"),F(uL.$$.fragment),duo=l(),bL=a("p"),cuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zN=a("a"),fuo=o("AutoFeatureExtractor.from_pretrained()"),muo=o(" class method."),guo=l(),vL=a("p"),huo=o("This class cannot be instantiated directly using "),Iie=a("code"),puo=o("__init__()"),_uo=o(" (throws an error)."),uuo=l(),He=a("div"),F(FL.$$.fragment),buo=l(),Nie=a("p"),vuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Fuo=l(),Ba=a("p"),Tuo=o("The feature extractor class to instantiate is selected based on the "),qie=a("code"),Muo=o("model_type"),Euo=o(` property of the config object
(either passed as an argument or loaded from `),jie=a("code"),Cuo=o("pretrained_model_name_or_path"),wuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Die=a("code"),Auo=o("pretrained_model_name_or_path"),Luo=o(":"),yuo=l(),Y=a("ul"),Bh=a("li"),Gie=a("strong"),xuo=o("beit"),$uo=o(" \u2014 "),QN=a("a"),kuo=o("BeitFeatureExtractor"),Suo=o(" (BEiT model)"),Ruo=l(),Ih=a("li"),Oie=a("strong"),Puo=o("clip"),Buo=o(" \u2014 "),WN=a("a"),Iuo=o("CLIPFeatureExtractor"),Nuo=o(" (CLIP model)"),quo=l(),Nh=a("li"),Vie=a("strong"),juo=o("convnext"),Duo=o(" \u2014 "),HN=a("a"),Guo=o("ConvNextFeatureExtractor"),Ouo=o(" (ConvNeXT model)"),Vuo=l(),qh=a("li"),Xie=a("strong"),Xuo=o("cvt"),zuo=o(" \u2014 "),UN=a("a"),Quo=o("ConvNextFeatureExtractor"),Wuo=o(" (CvT model)"),Huo=l(),jh=a("li"),zie=a("strong"),Uuo=o("data2vec-audio"),Juo=o(" \u2014 "),JN=a("a"),Yuo=o("Wav2Vec2FeatureExtractor"),Kuo=o(" (Data2VecAudio model)"),Zuo=l(),Dh=a("li"),Qie=a("strong"),e2o=o("data2vec-vision"),o2o=o(" \u2014 "),YN=a("a"),r2o=o("BeitFeatureExtractor"),t2o=o(" (Data2VecVision model)"),a2o=l(),Gh=a("li"),Wie=a("strong"),n2o=o("deit"),s2o=o(" \u2014 "),KN=a("a"),l2o=o("DeiTFeatureExtractor"),i2o=o(" (DeiT model)"),d2o=l(),Oh=a("li"),Hie=a("strong"),c2o=o("detr"),f2o=o(" \u2014 "),ZN=a("a"),m2o=o("DetrFeatureExtractor"),g2o=o(" (DETR model)"),h2o=l(),Vh=a("li"),Uie=a("strong"),p2o=o("dpt"),_2o=o(" \u2014 "),eq=a("a"),u2o=o("DPTFeatureExtractor"),b2o=o(" (DPT model)"),v2o=l(),Xh=a("li"),Jie=a("strong"),F2o=o("flava"),T2o=o(" \u2014 "),oq=a("a"),M2o=o("FlavaFeatureExtractor"),E2o=o(" (FLAVA model)"),C2o=l(),zh=a("li"),Yie=a("strong"),w2o=o("glpn"),A2o=o(" \u2014 "),rq=a("a"),L2o=o("GLPNFeatureExtractor"),y2o=o(" (GLPN model)"),x2o=l(),Qh=a("li"),Kie=a("strong"),$2o=o("groupvit"),k2o=o(" \u2014 "),tq=a("a"),S2o=o("CLIPFeatureExtractor"),R2o=o(" (GroupViT model)"),P2o=l(),Wh=a("li"),Zie=a("strong"),B2o=o("hubert"),I2o=o(" \u2014 "),aq=a("a"),N2o=o("Wav2Vec2FeatureExtractor"),q2o=o(" (Hubert model)"),j2o=l(),Hh=a("li"),ede=a("strong"),D2o=o("imagegpt"),G2o=o(" \u2014 "),nq=a("a"),O2o=o("ImageGPTFeatureExtractor"),V2o=o(" (ImageGPT model)"),X2o=l(),Uh=a("li"),ode=a("strong"),z2o=o("layoutlmv2"),Q2o=o(" \u2014 "),sq=a("a"),W2o=o("LayoutLMv2FeatureExtractor"),H2o=o(" (LayoutLMv2 model)"),U2o=l(),Jh=a("li"),rde=a("strong"),J2o=o("layoutlmv3"),Y2o=o(" \u2014 "),lq=a("a"),K2o=o("LayoutLMv3FeatureExtractor"),Z2o=o(" (LayoutLMv3 model)"),e1o=l(),Yh=a("li"),tde=a("strong"),o1o=o("levit"),r1o=o(" \u2014 "),iq=a("a"),t1o=o("LevitFeatureExtractor"),a1o=o(" (LeViT model)"),n1o=l(),Kh=a("li"),ade=a("strong"),s1o=o("maskformer"),l1o=o(" \u2014 "),dq=a("a"),i1o=o("MaskFormerFeatureExtractor"),d1o=o(" (MaskFormer model)"),c1o=l(),Zh=a("li"),nde=a("strong"),f1o=o("mctct"),m1o=o(" \u2014 "),cq=a("a"),g1o=o("MCTCTFeatureExtractor"),h1o=o(" (M-CTC-T model)"),p1o=l(),ep=a("li"),sde=a("strong"),_1o=o("mobilevit"),u1o=o(" \u2014 "),fq=a("a"),b1o=o("MobileViTFeatureExtractor"),v1o=o(" (MobileViT model)"),F1o=l(),op=a("li"),lde=a("strong"),T1o=o("perceiver"),M1o=o(" \u2014 "),mq=a("a"),E1o=o("PerceiverFeatureExtractor"),C1o=o(" (Perceiver model)"),w1o=l(),rp=a("li"),ide=a("strong"),A1o=o("poolformer"),L1o=o(" \u2014 "),gq=a("a"),y1o=o("PoolFormerFeatureExtractor"),x1o=o(" (PoolFormer model)"),$1o=l(),tp=a("li"),dde=a("strong"),k1o=o("regnet"),S1o=o(" \u2014 "),hq=a("a"),R1o=o("ConvNextFeatureExtractor"),P1o=o(" (RegNet model)"),B1o=l(),ap=a("li"),cde=a("strong"),I1o=o("resnet"),N1o=o(" \u2014 "),pq=a("a"),q1o=o("ConvNextFeatureExtractor"),j1o=o(" (ResNet model)"),D1o=l(),np=a("li"),fde=a("strong"),G1o=o("segformer"),O1o=o(" \u2014 "),_q=a("a"),V1o=o("SegformerFeatureExtractor"),X1o=o(" (SegFormer model)"),z1o=l(),sp=a("li"),mde=a("strong"),Q1o=o("speech_to_text"),W1o=o(" \u2014 "),uq=a("a"),H1o=o("Speech2TextFeatureExtractor"),U1o=o(" (Speech2Text model)"),J1o=l(),lp=a("li"),gde=a("strong"),Y1o=o("swin"),K1o=o(" \u2014 "),bq=a("a"),Z1o=o("ViTFeatureExtractor"),e4o=o(" (Swin Transformer model)"),o4o=l(),ip=a("li"),hde=a("strong"),r4o=o("van"),t4o=o(" \u2014 "),vq=a("a"),a4o=o("ConvNextFeatureExtractor"),n4o=o(" (VAN model)"),s4o=l(),dp=a("li"),pde=a("strong"),l4o=o("vilt"),i4o=o(" \u2014 "),Fq=a("a"),d4o=o("ViltFeatureExtractor"),c4o=o(" (ViLT model)"),f4o=l(),cp=a("li"),_de=a("strong"),m4o=o("vit"),g4o=o(" \u2014 "),Tq=a("a"),h4o=o("ViTFeatureExtractor"),p4o=o(" (ViT model)"),_4o=l(),fp=a("li"),ude=a("strong"),u4o=o("vit_mae"),b4o=o(" \u2014 "),Mq=a("a"),v4o=o("ViTFeatureExtractor"),F4o=o(" (ViTMAE model)"),T4o=l(),mp=a("li"),bde=a("strong"),M4o=o("wav2vec2"),E4o=o(" \u2014 "),Eq=a("a"),C4o=o("Wav2Vec2FeatureExtractor"),w4o=o(" (Wav2Vec2 model)"),A4o=l(),gp=a("li"),vde=a("strong"),L4o=o("wav2vec2-conformer"),y4o=o(" \u2014 "),Cq=a("a"),x4o=o("Wav2Vec2FeatureExtractor"),$4o=o(" (Wav2Vec2-Conformer model)"),k4o=l(),hp=a("li"),Fde=a("strong"),S4o=o("yolos"),R4o=o(" \u2014 "),wq=a("a"),P4o=o("YolosFeatureExtractor"),B4o=o(" (YOLOS model)"),I4o=l(),F(pp.$$.fragment),N4o=l(),F(_p.$$.fragment),q4o=l(),up=a("div"),F(TL.$$.fragment),j4o=l(),Tde=a("p"),D4o=o("Register a new feature extractor for this class."),ZVe=l(),qi=a("h2"),bp=a("a"),Mde=a("span"),F(ML.$$.fragment),G4o=l(),Ede=a("span"),O4o=o("AutoProcessor"),eXe=l(),yo=a("div"),F(EL.$$.fragment),V4o=l(),CL=a("p"),X4o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Aq=a("a"),z4o=o("AutoProcessor.from_pretrained()"),Q4o=o(" class method."),W4o=l(),wL=a("p"),H4o=o("This class cannot be instantiated directly using "),Cde=a("code"),U4o=o("__init__()"),J4o=o(" (throws an error)."),Y4o=l(),Ue=a("div"),F(AL.$$.fragment),K4o=l(),wde=a("p"),Z4o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),ebo=l(),ji=a("p"),obo=o("The processor class to instantiate is selected based on the "),Ade=a("code"),rbo=o("model_type"),tbo=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),abo=o("pretrained_model_name_or_path"),nbo=o(" if possible):"),sbo=l(),he=a("ul"),vp=a("li"),yde=a("strong"),lbo=o("clip"),ibo=o(" \u2014 "),Lq=a("a"),dbo=o("CLIPProcessor"),cbo=o(" (CLIP model)"),fbo=l(),Fp=a("li"),xde=a("strong"),mbo=o("flava"),gbo=o(" \u2014 "),$de=a("code"),hbo=o("FLAVAProcessor"),pbo=o(" (FLAVA model)"),_bo=l(),Tp=a("li"),kde=a("strong"),ubo=o("groupvit"),bbo=o(" \u2014 "),yq=a("a"),vbo=o("CLIPProcessor"),Fbo=o(" (GroupViT model)"),Tbo=l(),Mp=a("li"),Sde=a("strong"),Mbo=o("layoutlmv2"),Ebo=o(" \u2014 "),xq=a("a"),Cbo=o("LayoutLMv2Processor"),wbo=o(" (LayoutLMv2 model)"),Abo=l(),Ep=a("li"),Rde=a("strong"),Lbo=o("layoutlmv3"),ybo=o(" \u2014 "),$q=a("a"),xbo=o("LayoutLMv3Processor"),$bo=o(" (LayoutLMv3 model)"),kbo=l(),Cp=a("li"),Pde=a("strong"),Sbo=o("layoutxlm"),Rbo=o(" \u2014 "),kq=a("a"),Pbo=o("LayoutXLMProcessor"),Bbo=o(" (LayoutXLM model)"),Ibo=l(),wp=a("li"),Bde=a("strong"),Nbo=o("sew"),qbo=o(" \u2014 "),Sq=a("a"),jbo=o("Wav2Vec2Processor"),Dbo=o(" (SEW model)"),Gbo=l(),Ap=a("li"),Ide=a("strong"),Obo=o("sew-d"),Vbo=o(" \u2014 "),Rq=a("a"),Xbo=o("Wav2Vec2Processor"),zbo=o(" (SEW-D model)"),Qbo=l(),Lp=a("li"),Nde=a("strong"),Wbo=o("speech_to_text"),Hbo=o(" \u2014 "),Pq=a("a"),Ubo=o("Speech2TextProcessor"),Jbo=o(" (Speech2Text model)"),Ybo=l(),yp=a("li"),qde=a("strong"),Kbo=o("speech_to_text_2"),Zbo=o(" \u2014 "),Bq=a("a"),evo=o("Speech2Text2Processor"),ovo=o(" (Speech2Text2 model)"),rvo=l(),xp=a("li"),jde=a("strong"),tvo=o("trocr"),avo=o(" \u2014 "),Iq=a("a"),nvo=o("TrOCRProcessor"),svo=o(" (TrOCR model)"),lvo=l(),$p=a("li"),Dde=a("strong"),ivo=o("unispeech"),dvo=o(" \u2014 "),Nq=a("a"),cvo=o("Wav2Vec2Processor"),fvo=o(" (UniSpeech model)"),mvo=l(),kp=a("li"),Gde=a("strong"),gvo=o("unispeech-sat"),hvo=o(" \u2014 "),qq=a("a"),pvo=o("Wav2Vec2Processor"),_vo=o(" (UniSpeechSat model)"),uvo=l(),Sp=a("li"),Ode=a("strong"),bvo=o("vilt"),vvo=o(" \u2014 "),jq=a("a"),Fvo=o("ViltProcessor"),Tvo=o(" (ViLT model)"),Mvo=l(),Rp=a("li"),Vde=a("strong"),Evo=o("vision-text-dual-encoder"),Cvo=o(" \u2014 "),Dq=a("a"),wvo=o("VisionTextDualEncoderProcessor"),Avo=o(" (VisionTextDualEncoder model)"),Lvo=l(),Pp=a("li"),Xde=a("strong"),yvo=o("wav2vec2"),xvo=o(" \u2014 "),Gq=a("a"),$vo=o("Wav2Vec2Processor"),kvo=o(" (Wav2Vec2 model)"),Svo=l(),Bp=a("li"),zde=a("strong"),Rvo=o("wav2vec2-conformer"),Pvo=o(" \u2014 "),Oq=a("a"),Bvo=o("Wav2Vec2Processor"),Ivo=o(" (Wav2Vec2-Conformer model)"),Nvo=l(),Ip=a("li"),Qde=a("strong"),qvo=o("wavlm"),jvo=o(" \u2014 "),Vq=a("a"),Dvo=o("Wav2Vec2Processor"),Gvo=o(" (WavLM model)"),Ovo=l(),F(Np.$$.fragment),Vvo=l(),F(qp.$$.fragment),Xvo=l(),jp=a("div"),F(LL.$$.fragment),zvo=l(),Wde=a("p"),Qvo=o("Register a new processor for this class."),oXe=l(),Di=a("h2"),Dp=a("a"),Hde=a("span"),F(yL.$$.fragment),Wvo=l(),Ude=a("span"),Hvo=o("AutoModel"),rXe=l(),xo=a("div"),F(xL.$$.fragment),Uvo=l(),Gi=a("p"),Jvo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xq=a("a"),Yvo=o("from_pretrained()"),Kvo=o(" class method or the "),zq=a("a"),Zvo=o("from_config()"),eFo=o(` class
method.`),oFo=l(),$L=a("p"),rFo=o("This class cannot be instantiated directly using "),Jde=a("code"),tFo=o("__init__()"),aFo=o(" (throws an error)."),nFo=l(),lt=a("div"),F(kL.$$.fragment),sFo=l(),Yde=a("p"),lFo=o("Instantiates one of the base model classes of the library from a configuration."),iFo=l(),Oi=a("p"),dFo=o(`Note:
Loading a model from its configuration file does `),Kde=a("strong"),cFo=o("not"),fFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=a("a"),mFo=o("from_pretrained()"),gFo=o(" to load the model weights."),hFo=l(),F(Gp.$$.fragment),pFo=l(),Je=a("div"),F(SL.$$.fragment),_Fo=l(),Zde=a("p"),uFo=o("Instantiate one of the base model classes of the library from a pretrained model."),bFo=l(),Ia=a("p"),vFo=o("The model class to instantiate is selected based on the "),ece=a("code"),FFo=o("model_type"),TFo=o(` property of the config object (either
passed as an argument or loaded from `),oce=a("code"),MFo=o("pretrained_model_name_or_path"),EFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=a("code"),CFo=o("pretrained_model_name_or_path"),wFo=o(":"),AFo=l(),y=a("ul"),Op=a("li"),tce=a("strong"),LFo=o("albert"),yFo=o(" \u2014 "),Wq=a("a"),xFo=o("AlbertModel"),$Fo=o(" (ALBERT model)"),kFo=l(),Vp=a("li"),ace=a("strong"),SFo=o("bart"),RFo=o(" \u2014 "),Hq=a("a"),PFo=o("BartModel"),BFo=o(" (BART model)"),IFo=l(),Xp=a("li"),nce=a("strong"),NFo=o("beit"),qFo=o(" \u2014 "),Uq=a("a"),jFo=o("BeitModel"),DFo=o(" (BEiT model)"),GFo=l(),zp=a("li"),sce=a("strong"),OFo=o("bert"),VFo=o(" \u2014 "),Jq=a("a"),XFo=o("BertModel"),zFo=o(" (BERT model)"),QFo=l(),Qp=a("li"),lce=a("strong"),WFo=o("bert-generation"),HFo=o(" \u2014 "),Yq=a("a"),UFo=o("BertGenerationEncoder"),JFo=o(" (Bert Generation model)"),YFo=l(),Wp=a("li"),ice=a("strong"),KFo=o("big_bird"),ZFo=o(" \u2014 "),Kq=a("a"),eTo=o("BigBirdModel"),oTo=o(" (BigBird model)"),rTo=l(),Hp=a("li"),dce=a("strong"),tTo=o("bigbird_pegasus"),aTo=o(" \u2014 "),Zq=a("a"),nTo=o("BigBirdPegasusModel"),sTo=o(" (BigBird-Pegasus model)"),lTo=l(),Up=a("li"),cce=a("strong"),iTo=o("blenderbot"),dTo=o(" \u2014 "),ej=a("a"),cTo=o("BlenderbotModel"),fTo=o(" (Blenderbot model)"),mTo=l(),Jp=a("li"),fce=a("strong"),gTo=o("blenderbot-small"),hTo=o(" \u2014 "),oj=a("a"),pTo=o("BlenderbotSmallModel"),_To=o(" (BlenderbotSmall model)"),uTo=l(),Yp=a("li"),mce=a("strong"),bTo=o("bloom"),vTo=o(" \u2014 "),rj=a("a"),FTo=o("BloomModel"),TTo=o(" (BLOOM model)"),MTo=l(),Kp=a("li"),gce=a("strong"),ETo=o("camembert"),CTo=o(" \u2014 "),tj=a("a"),wTo=o("CamembertModel"),ATo=o(" (CamemBERT model)"),LTo=l(),Zp=a("li"),hce=a("strong"),yTo=o("canine"),xTo=o(" \u2014 "),aj=a("a"),$To=o("CanineModel"),kTo=o(" (CANINE model)"),STo=l(),e_=a("li"),pce=a("strong"),RTo=o("clip"),PTo=o(" \u2014 "),nj=a("a"),BTo=o("CLIPModel"),ITo=o(" (CLIP model)"),NTo=l(),o_=a("li"),_ce=a("strong"),qTo=o("codegen"),jTo=o(" \u2014 "),sj=a("a"),DTo=o("CodeGenModel"),GTo=o(" (CodeGen model)"),OTo=l(),r_=a("li"),uce=a("strong"),VTo=o("convbert"),XTo=o(" \u2014 "),lj=a("a"),zTo=o("ConvBertModel"),QTo=o(" (ConvBERT model)"),WTo=l(),t_=a("li"),bce=a("strong"),HTo=o("convnext"),UTo=o(" \u2014 "),ij=a("a"),JTo=o("ConvNextModel"),YTo=o(" (ConvNeXT model)"),KTo=l(),a_=a("li"),vce=a("strong"),ZTo=o("ctrl"),e7o=o(" \u2014 "),dj=a("a"),o7o=o("CTRLModel"),r7o=o(" (CTRL model)"),t7o=l(),n_=a("li"),Fce=a("strong"),a7o=o("cvt"),n7o=o(" \u2014 "),cj=a("a"),s7o=o("CvtModel"),l7o=o(" (CvT model)"),i7o=l(),s_=a("li"),Tce=a("strong"),d7o=o("data2vec-audio"),c7o=o(" \u2014 "),fj=a("a"),f7o=o("Data2VecAudioModel"),m7o=o(" (Data2VecAudio model)"),g7o=l(),l_=a("li"),Mce=a("strong"),h7o=o("data2vec-text"),p7o=o(" \u2014 "),mj=a("a"),_7o=o("Data2VecTextModel"),u7o=o(" (Data2VecText model)"),b7o=l(),i_=a("li"),Ece=a("strong"),v7o=o("data2vec-vision"),F7o=o(" \u2014 "),gj=a("a"),T7o=o("Data2VecVisionModel"),M7o=o(" (Data2VecVision model)"),E7o=l(),d_=a("li"),Cce=a("strong"),C7o=o("deberta"),w7o=o(" \u2014 "),hj=a("a"),A7o=o("DebertaModel"),L7o=o(" (DeBERTa model)"),y7o=l(),c_=a("li"),wce=a("strong"),x7o=o("deberta-v2"),$7o=o(" \u2014 "),pj=a("a"),k7o=o("DebertaV2Model"),S7o=o(" (DeBERTa-v2 model)"),R7o=l(),f_=a("li"),Ace=a("strong"),P7o=o("decision_transformer"),B7o=o(" \u2014 "),_j=a("a"),I7o=o("DecisionTransformerModel"),N7o=o(" (Decision Transformer model)"),q7o=l(),m_=a("li"),Lce=a("strong"),j7o=o("deit"),D7o=o(" \u2014 "),uj=a("a"),G7o=o("DeiTModel"),O7o=o(" (DeiT model)"),V7o=l(),g_=a("li"),yce=a("strong"),X7o=o("detr"),z7o=o(" \u2014 "),bj=a("a"),Q7o=o("DetrModel"),W7o=o(" (DETR model)"),H7o=l(),h_=a("li"),xce=a("strong"),U7o=o("distilbert"),J7o=o(" \u2014 "),vj=a("a"),Y7o=o("DistilBertModel"),K7o=o(" (DistilBERT model)"),Z7o=l(),p_=a("li"),$ce=a("strong"),e9o=o("dpr"),o9o=o(" \u2014 "),Fj=a("a"),r9o=o("DPRQuestionEncoder"),t9o=o(" (DPR model)"),a9o=l(),__=a("li"),kce=a("strong"),n9o=o("dpt"),s9o=o(" \u2014 "),Tj=a("a"),l9o=o("DPTModel"),i9o=o(" (DPT model)"),d9o=l(),u_=a("li"),Sce=a("strong"),c9o=o("electra"),f9o=o(" \u2014 "),Mj=a("a"),m9o=o("ElectraModel"),g9o=o(" (ELECTRA model)"),h9o=l(),b_=a("li"),Rce=a("strong"),p9o=o("flaubert"),_9o=o(" \u2014 "),Ej=a("a"),u9o=o("FlaubertModel"),b9o=o(" (FlauBERT model)"),v9o=l(),v_=a("li"),Pce=a("strong"),F9o=o("flava"),T9o=o(" \u2014 "),Cj=a("a"),M9o=o("FlavaModel"),E9o=o(" (FLAVA model)"),C9o=l(),F_=a("li"),Bce=a("strong"),w9o=o("fnet"),A9o=o(" \u2014 "),wj=a("a"),L9o=o("FNetModel"),y9o=o(" (FNet model)"),x9o=l(),T_=a("li"),Ice=a("strong"),$9o=o("fsmt"),k9o=o(" \u2014 "),Aj=a("a"),S9o=o("FSMTModel"),R9o=o(" (FairSeq Machine-Translation model)"),P9o=l(),Ws=a("li"),Nce=a("strong"),B9o=o("funnel"),I9o=o(" \u2014 "),Lj=a("a"),N9o=o("FunnelModel"),q9o=o(" or "),yj=a("a"),j9o=o("FunnelBaseModel"),D9o=o(" (Funnel Transformer model)"),G9o=l(),M_=a("li"),qce=a("strong"),O9o=o("glpn"),V9o=o(" \u2014 "),xj=a("a"),X9o=o("GLPNModel"),z9o=o(" (GLPN model)"),Q9o=l(),E_=a("li"),jce=a("strong"),W9o=o("gpt2"),H9o=o(" \u2014 "),$j=a("a"),U9o=o("GPT2Model"),J9o=o(" (OpenAI GPT-2 model)"),Y9o=l(),C_=a("li"),Dce=a("strong"),K9o=o("gpt_neo"),Z9o=o(" \u2014 "),kj=a("a"),eMo=o("GPTNeoModel"),oMo=o(" (GPT Neo model)"),rMo=l(),w_=a("li"),Gce=a("strong"),tMo=o("gpt_neox"),aMo=o(" \u2014 "),Sj=a("a"),nMo=o("GPTNeoXModel"),sMo=o(" (GPT NeoX model)"),lMo=l(),A_=a("li"),Oce=a("strong"),iMo=o("gptj"),dMo=o(" \u2014 "),Rj=a("a"),cMo=o("GPTJModel"),fMo=o(" (GPT-J model)"),mMo=l(),L_=a("li"),Vce=a("strong"),gMo=o("groupvit"),hMo=o(" \u2014 "),Pj=a("a"),pMo=o("GroupViTModel"),_Mo=o(" (GroupViT model)"),uMo=l(),y_=a("li"),Xce=a("strong"),bMo=o("hubert"),vMo=o(" \u2014 "),Bj=a("a"),FMo=o("HubertModel"),TMo=o(" (Hubert model)"),MMo=l(),x_=a("li"),zce=a("strong"),EMo=o("ibert"),CMo=o(" \u2014 "),Ij=a("a"),wMo=o("IBertModel"),AMo=o(" (I-BERT model)"),LMo=l(),$_=a("li"),Qce=a("strong"),yMo=o("imagegpt"),xMo=o(" \u2014 "),Nj=a("a"),$Mo=o("ImageGPTModel"),kMo=o(" (ImageGPT model)"),SMo=l(),k_=a("li"),Wce=a("strong"),RMo=o("layoutlm"),PMo=o(" \u2014 "),qj=a("a"),BMo=o("LayoutLMModel"),IMo=o(" (LayoutLM model)"),NMo=l(),S_=a("li"),Hce=a("strong"),qMo=o("layoutlmv2"),jMo=o(" \u2014 "),jj=a("a"),DMo=o("LayoutLMv2Model"),GMo=o(" (LayoutLMv2 model)"),OMo=l(),R_=a("li"),Uce=a("strong"),VMo=o("layoutlmv3"),XMo=o(" \u2014 "),Dj=a("a"),zMo=o("LayoutLMv3Model"),QMo=o(" (LayoutLMv3 model)"),WMo=l(),P_=a("li"),Jce=a("strong"),HMo=o("led"),UMo=o(" \u2014 "),Gj=a("a"),JMo=o("LEDModel"),YMo=o(" (LED model)"),KMo=l(),B_=a("li"),Yce=a("strong"),ZMo=o("levit"),eEo=o(" \u2014 "),Oj=a("a"),oEo=o("LevitModel"),rEo=o(" (LeViT model)"),tEo=l(),I_=a("li"),Kce=a("strong"),aEo=o("longformer"),nEo=o(" \u2014 "),Vj=a("a"),sEo=o("LongformerModel"),lEo=o(" (Longformer model)"),iEo=l(),N_=a("li"),Zce=a("strong"),dEo=o("longt5"),cEo=o(" \u2014 "),Xj=a("a"),fEo=o("LongT5Model"),mEo=o(" (LongT5 model)"),gEo=l(),q_=a("li"),efe=a("strong"),hEo=o("luke"),pEo=o(" \u2014 "),zj=a("a"),_Eo=o("LukeModel"),uEo=o(" (LUKE model)"),bEo=l(),j_=a("li"),ofe=a("strong"),vEo=o("lxmert"),FEo=o(" \u2014 "),Qj=a("a"),TEo=o("LxmertModel"),MEo=o(" (LXMERT model)"),EEo=l(),D_=a("li"),rfe=a("strong"),CEo=o("m2m_100"),wEo=o(" \u2014 "),Wj=a("a"),AEo=o("M2M100Model"),LEo=o(" (M2M100 model)"),yEo=l(),G_=a("li"),tfe=a("strong"),xEo=o("marian"),$Eo=o(" \u2014 "),Hj=a("a"),kEo=o("MarianModel"),SEo=o(" (Marian model)"),REo=l(),O_=a("li"),afe=a("strong"),PEo=o("maskformer"),BEo=o(" \u2014 "),Uj=a("a"),IEo=o("MaskFormerModel"),NEo=o(" (MaskFormer model)"),qEo=l(),V_=a("li"),nfe=a("strong"),jEo=o("mbart"),DEo=o(" \u2014 "),Jj=a("a"),GEo=o("MBartModel"),OEo=o(" (mBART model)"),VEo=l(),X_=a("li"),sfe=a("strong"),XEo=o("mctct"),zEo=o(" \u2014 "),Yj=a("a"),QEo=o("MCTCTModel"),WEo=o(" (M-CTC-T model)"),HEo=l(),z_=a("li"),lfe=a("strong"),UEo=o("megatron-bert"),JEo=o(" \u2014 "),Kj=a("a"),YEo=o("MegatronBertModel"),KEo=o(" (Megatron-BERT model)"),ZEo=l(),Q_=a("li"),ife=a("strong"),eCo=o("mobilebert"),oCo=o(" \u2014 "),Zj=a("a"),rCo=o("MobileBertModel"),tCo=o(" (MobileBERT model)"),aCo=l(),W_=a("li"),dfe=a("strong"),nCo=o("mobilevit"),sCo=o(" \u2014 "),eD=a("a"),lCo=o("MobileViTModel"),iCo=o(" (MobileViT model)"),dCo=l(),H_=a("li"),cfe=a("strong"),cCo=o("mpnet"),fCo=o(" \u2014 "),oD=a("a"),mCo=o("MPNetModel"),gCo=o(" (MPNet model)"),hCo=l(),U_=a("li"),ffe=a("strong"),pCo=o("mt5"),_Co=o(" \u2014 "),rD=a("a"),uCo=o("MT5Model"),bCo=o(" (MT5 model)"),vCo=l(),J_=a("li"),mfe=a("strong"),FCo=o("mvp"),TCo=o(" \u2014 "),tD=a("a"),MCo=o("MvpModel"),ECo=o(" (MVP model)"),CCo=l(),Y_=a("li"),gfe=a("strong"),wCo=o("nezha"),ACo=o(" \u2014 "),aD=a("a"),LCo=o("NezhaModel"),yCo=o(" (Nezha model)"),xCo=l(),K_=a("li"),hfe=a("strong"),$Co=o("nystromformer"),kCo=o(" \u2014 "),nD=a("a"),SCo=o("NystromformerModel"),RCo=o(" (Nystr\xF6mformer model)"),PCo=l(),Z_=a("li"),pfe=a("strong"),BCo=o("openai-gpt"),ICo=o(" \u2014 "),sD=a("a"),NCo=o("OpenAIGPTModel"),qCo=o(" (OpenAI GPT model)"),jCo=l(),eu=a("li"),_fe=a("strong"),DCo=o("opt"),GCo=o(" \u2014 "),lD=a("a"),OCo=o("OPTModel"),VCo=o(" (OPT model)"),XCo=l(),ou=a("li"),ufe=a("strong"),zCo=o("pegasus"),QCo=o(" \u2014 "),iD=a("a"),WCo=o("PegasusModel"),HCo=o(" (Pegasus model)"),UCo=l(),ru=a("li"),bfe=a("strong"),JCo=o("perceiver"),YCo=o(" \u2014 "),dD=a("a"),KCo=o("PerceiverModel"),ZCo=o(" (Perceiver model)"),e3o=l(),tu=a("li"),vfe=a("strong"),o3o=o("plbart"),r3o=o(" \u2014 "),cD=a("a"),t3o=o("PLBartModel"),a3o=o(" (PLBart model)"),n3o=l(),au=a("li"),Ffe=a("strong"),s3o=o("poolformer"),l3o=o(" \u2014 "),fD=a("a"),i3o=o("PoolFormerModel"),d3o=o(" (PoolFormer model)"),c3o=l(),nu=a("li"),Tfe=a("strong"),f3o=o("prophetnet"),m3o=o(" \u2014 "),mD=a("a"),g3o=o("ProphetNetModel"),h3o=o(" (ProphetNet model)"),p3o=l(),su=a("li"),Mfe=a("strong"),_3o=o("qdqbert"),u3o=o(" \u2014 "),gD=a("a"),b3o=o("QDQBertModel"),v3o=o(" (QDQBert model)"),F3o=l(),lu=a("li"),Efe=a("strong"),T3o=o("reformer"),M3o=o(" \u2014 "),hD=a("a"),E3o=o("ReformerModel"),C3o=o(" (Reformer model)"),w3o=l(),iu=a("li"),Cfe=a("strong"),A3o=o("regnet"),L3o=o(" \u2014 "),pD=a("a"),y3o=o("RegNetModel"),x3o=o(" (RegNet model)"),$3o=l(),du=a("li"),wfe=a("strong"),k3o=o("rembert"),S3o=o(" \u2014 "),_D=a("a"),R3o=o("RemBertModel"),P3o=o(" (RemBERT model)"),B3o=l(),cu=a("li"),Afe=a("strong"),I3o=o("resnet"),N3o=o(" \u2014 "),uD=a("a"),q3o=o("ResNetModel"),j3o=o(" (ResNet model)"),D3o=l(),fu=a("li"),Lfe=a("strong"),G3o=o("retribert"),O3o=o(" \u2014 "),bD=a("a"),V3o=o("RetriBertModel"),X3o=o(" (RetriBERT model)"),z3o=l(),mu=a("li"),yfe=a("strong"),Q3o=o("roberta"),W3o=o(" \u2014 "),vD=a("a"),H3o=o("RobertaModel"),U3o=o(" (RoBERTa model)"),J3o=l(),gu=a("li"),xfe=a("strong"),Y3o=o("roformer"),K3o=o(" \u2014 "),FD=a("a"),Z3o=o("RoFormerModel"),e5o=o(" (RoFormer model)"),o5o=l(),hu=a("li"),$fe=a("strong"),r5o=o("segformer"),t5o=o(" \u2014 "),TD=a("a"),a5o=o("SegformerModel"),n5o=o(" (SegFormer model)"),s5o=l(),pu=a("li"),kfe=a("strong"),l5o=o("sew"),i5o=o(" \u2014 "),MD=a("a"),d5o=o("SEWModel"),c5o=o(" (SEW model)"),f5o=l(),_u=a("li"),Sfe=a("strong"),m5o=o("sew-d"),g5o=o(" \u2014 "),ED=a("a"),h5o=o("SEWDModel"),p5o=o(" (SEW-D model)"),_5o=l(),uu=a("li"),Rfe=a("strong"),u5o=o("speech_to_text"),b5o=o(" \u2014 "),CD=a("a"),v5o=o("Speech2TextModel"),F5o=o(" (Speech2Text model)"),T5o=l(),bu=a("li"),Pfe=a("strong"),M5o=o("splinter"),E5o=o(" \u2014 "),wD=a("a"),C5o=o("SplinterModel"),w5o=o(" (Splinter model)"),A5o=l(),vu=a("li"),Bfe=a("strong"),L5o=o("squeezebert"),y5o=o(" \u2014 "),AD=a("a"),x5o=o("SqueezeBertModel"),$5o=o(" (SqueezeBERT model)"),k5o=l(),Fu=a("li"),Ife=a("strong"),S5o=o("swin"),R5o=o(" \u2014 "),LD=a("a"),P5o=o("SwinModel"),B5o=o(" (Swin Transformer model)"),I5o=l(),Tu=a("li"),Nfe=a("strong"),N5o=o("t5"),q5o=o(" \u2014 "),yD=a("a"),j5o=o("T5Model"),D5o=o(" (T5 model)"),G5o=l(),Mu=a("li"),qfe=a("strong"),O5o=o("tapas"),V5o=o(" \u2014 "),xD=a("a"),X5o=o("TapasModel"),z5o=o(" (TAPAS model)"),Q5o=l(),Eu=a("li"),jfe=a("strong"),W5o=o("trajectory_transformer"),H5o=o(" \u2014 "),$D=a("a"),U5o=o("TrajectoryTransformerModel"),J5o=o(" (Trajectory Transformer model)"),Y5o=l(),Cu=a("li"),Dfe=a("strong"),K5o=o("transfo-xl"),Z5o=o(" \u2014 "),kD=a("a"),e0o=o("TransfoXLModel"),o0o=o(" (Transformer-XL model)"),r0o=l(),wu=a("li"),Gfe=a("strong"),t0o=o("unispeech"),a0o=o(" \u2014 "),SD=a("a"),n0o=o("UniSpeechModel"),s0o=o(" (UniSpeech model)"),l0o=l(),Au=a("li"),Ofe=a("strong"),i0o=o("unispeech-sat"),d0o=o(" \u2014 "),RD=a("a"),c0o=o("UniSpeechSatModel"),f0o=o(" (UniSpeechSat model)"),m0o=l(),Lu=a("li"),Vfe=a("strong"),g0o=o("van"),h0o=o(" \u2014 "),PD=a("a"),p0o=o("VanModel"),_0o=o(" (VAN model)"),u0o=l(),yu=a("li"),Xfe=a("strong"),b0o=o("vilt"),v0o=o(" \u2014 "),BD=a("a"),F0o=o("ViltModel"),T0o=o(" (ViLT model)"),M0o=l(),xu=a("li"),zfe=a("strong"),E0o=o("vision-text-dual-encoder"),C0o=o(" \u2014 "),ID=a("a"),w0o=o("VisionTextDualEncoderModel"),A0o=o(" (VisionTextDualEncoder model)"),L0o=l(),$u=a("li"),Qfe=a("strong"),y0o=o("visual_bert"),x0o=o(" \u2014 "),ND=a("a"),$0o=o("VisualBertModel"),k0o=o(" (VisualBERT model)"),S0o=l(),ku=a("li"),Wfe=a("strong"),R0o=o("vit"),P0o=o(" \u2014 "),qD=a("a"),B0o=o("ViTModel"),I0o=o(" (ViT model)"),N0o=l(),Su=a("li"),Hfe=a("strong"),q0o=o("vit_mae"),j0o=o(" \u2014 "),jD=a("a"),D0o=o("ViTMAEModel"),G0o=o(" (ViTMAE model)"),O0o=l(),Ru=a("li"),Ufe=a("strong"),V0o=o("wav2vec2"),X0o=o(" \u2014 "),DD=a("a"),z0o=o("Wav2Vec2Model"),Q0o=o(" (Wav2Vec2 model)"),W0o=l(),Pu=a("li"),Jfe=a("strong"),H0o=o("wav2vec2-conformer"),U0o=o(" \u2014 "),GD=a("a"),J0o=o("Wav2Vec2ConformerModel"),Y0o=o(" (Wav2Vec2-Conformer model)"),K0o=l(),Bu=a("li"),Yfe=a("strong"),Z0o=o("wavlm"),ewo=o(" \u2014 "),OD=a("a"),owo=o("WavLMModel"),rwo=o(" (WavLM model)"),two=l(),Iu=a("li"),Kfe=a("strong"),awo=o("xglm"),nwo=o(" \u2014 "),VD=a("a"),swo=o("XGLMModel"),lwo=o(" (XGLM model)"),iwo=l(),Nu=a("li"),Zfe=a("strong"),dwo=o("xlm"),cwo=o(" \u2014 "),XD=a("a"),fwo=o("XLMModel"),mwo=o(" (XLM model)"),gwo=l(),qu=a("li"),eme=a("strong"),hwo=o("xlm-prophetnet"),pwo=o(" \u2014 "),zD=a("a"),_wo=o("XLMProphetNetModel"),uwo=o(" (XLM-ProphetNet model)"),bwo=l(),ju=a("li"),ome=a("strong"),vwo=o("xlm-roberta"),Fwo=o(" \u2014 "),QD=a("a"),Two=o("XLMRobertaModel"),Mwo=o(" (XLM-RoBERTa model)"),Ewo=l(),Du=a("li"),rme=a("strong"),Cwo=o("xlm-roberta-xl"),wwo=o(" \u2014 "),WD=a("a"),Awo=o("XLMRobertaXLModel"),Lwo=o(" (XLM-RoBERTa-XL model)"),ywo=l(),Gu=a("li"),tme=a("strong"),xwo=o("xlnet"),$wo=o(" \u2014 "),HD=a("a"),kwo=o("XLNetModel"),Swo=o(" (XLNet model)"),Rwo=l(),Ou=a("li"),ame=a("strong"),Pwo=o("yolos"),Bwo=o(" \u2014 "),UD=a("a"),Iwo=o("YolosModel"),Nwo=o(" (YOLOS model)"),qwo=l(),Vu=a("li"),nme=a("strong"),jwo=o("yoso"),Dwo=o(" \u2014 "),JD=a("a"),Gwo=o("YosoModel"),Owo=o(" (YOSO model)"),Vwo=l(),Xu=a("p"),Xwo=o("The model is set in evaluation mode by default using "),sme=a("code"),zwo=o("model.eval()"),Qwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=a("code"),Wwo=o("model.train()"),Hwo=l(),F(zu.$$.fragment),tXe=l(),Vi=a("h2"),Qu=a("a"),ime=a("span"),F(RL.$$.fragment),Uwo=l(),dme=a("span"),Jwo=o("AutoModelForPreTraining"),aXe=l(),$o=a("div"),F(PL.$$.fragment),Ywo=l(),Xi=a("p"),Kwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YD=a("a"),Zwo=o("from_pretrained()"),eAo=o(" class method or the "),KD=a("a"),oAo=o("from_config()"),rAo=o(` class
method.`),tAo=l(),BL=a("p"),aAo=o("This class cannot be instantiated directly using "),cme=a("code"),nAo=o("__init__()"),sAo=o(" (throws an error)."),lAo=l(),it=a("div"),F(IL.$$.fragment),iAo=l(),fme=a("p"),dAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cAo=l(),zi=a("p"),fAo=o(`Note:
Loading a model from its configuration file does `),mme=a("strong"),mAo=o("not"),gAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=a("a"),hAo=o("from_pretrained()"),pAo=o(" to load the model weights."),_Ao=l(),F(Wu.$$.fragment),uAo=l(),Ye=a("div"),F(NL.$$.fragment),bAo=l(),gme=a("p"),vAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FAo=l(),Na=a("p"),TAo=o("The model class to instantiate is selected based on the "),hme=a("code"),MAo=o("model_type"),EAo=o(` property of the config object (either
passed as an argument or loaded from `),pme=a("code"),CAo=o("pretrained_model_name_or_path"),wAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=a("code"),AAo=o("pretrained_model_name_or_path"),LAo=o(":"),yAo=l(),G=a("ul"),Hu=a("li"),ume=a("strong"),xAo=o("albert"),$Ao=o(" \u2014 "),eG=a("a"),kAo=o("AlbertForPreTraining"),SAo=o(" (ALBERT model)"),RAo=l(),Uu=a("li"),bme=a("strong"),PAo=o("bart"),BAo=o(" \u2014 "),oG=a("a"),IAo=o("BartForConditionalGeneration"),NAo=o(" (BART model)"),qAo=l(),Ju=a("li"),vme=a("strong"),jAo=o("bert"),DAo=o(" \u2014 "),rG=a("a"),GAo=o("BertForPreTraining"),OAo=o(" (BERT model)"),VAo=l(),Yu=a("li"),Fme=a("strong"),XAo=o("big_bird"),zAo=o(" \u2014 "),tG=a("a"),QAo=o("BigBirdForPreTraining"),WAo=o(" (BigBird model)"),HAo=l(),Ku=a("li"),Tme=a("strong"),UAo=o("bloom"),JAo=o(" \u2014 "),aG=a("a"),YAo=o("BloomForCausalLM"),KAo=o(" (BLOOM model)"),ZAo=l(),Zu=a("li"),Mme=a("strong"),e6o=o("camembert"),o6o=o(" \u2014 "),nG=a("a"),r6o=o("CamembertForMaskedLM"),t6o=o(" (CamemBERT model)"),a6o=l(),e2=a("li"),Eme=a("strong"),n6o=o("ctrl"),s6o=o(" \u2014 "),sG=a("a"),l6o=o("CTRLLMHeadModel"),i6o=o(" (CTRL model)"),d6o=l(),o2=a("li"),Cme=a("strong"),c6o=o("data2vec-text"),f6o=o(" \u2014 "),lG=a("a"),m6o=o("Data2VecTextForMaskedLM"),g6o=o(" (Data2VecText model)"),h6o=l(),r2=a("li"),wme=a("strong"),p6o=o("deberta"),_6o=o(" \u2014 "),iG=a("a"),u6o=o("DebertaForMaskedLM"),b6o=o(" (DeBERTa model)"),v6o=l(),t2=a("li"),Ame=a("strong"),F6o=o("deberta-v2"),T6o=o(" \u2014 "),dG=a("a"),M6o=o("DebertaV2ForMaskedLM"),E6o=o(" (DeBERTa-v2 model)"),C6o=l(),a2=a("li"),Lme=a("strong"),w6o=o("distilbert"),A6o=o(" \u2014 "),cG=a("a"),L6o=o("DistilBertForMaskedLM"),y6o=o(" (DistilBERT model)"),x6o=l(),n2=a("li"),yme=a("strong"),$6o=o("electra"),k6o=o(" \u2014 "),fG=a("a"),S6o=o("ElectraForPreTraining"),R6o=o(" (ELECTRA model)"),P6o=l(),s2=a("li"),xme=a("strong"),B6o=o("flaubert"),I6o=o(" \u2014 "),mG=a("a"),N6o=o("FlaubertWithLMHeadModel"),q6o=o(" (FlauBERT model)"),j6o=l(),l2=a("li"),$me=a("strong"),D6o=o("flava"),G6o=o(" \u2014 "),gG=a("a"),O6o=o("FlavaForPreTraining"),V6o=o(" (FLAVA model)"),X6o=l(),i2=a("li"),kme=a("strong"),z6o=o("fnet"),Q6o=o(" \u2014 "),hG=a("a"),W6o=o("FNetForPreTraining"),H6o=o(" (FNet model)"),U6o=l(),d2=a("li"),Sme=a("strong"),J6o=o("fsmt"),Y6o=o(" \u2014 "),pG=a("a"),K6o=o("FSMTForConditionalGeneration"),Z6o=o(" (FairSeq Machine-Translation model)"),eLo=l(),c2=a("li"),Rme=a("strong"),oLo=o("funnel"),rLo=o(" \u2014 "),_G=a("a"),tLo=o("FunnelForPreTraining"),aLo=o(" (Funnel Transformer model)"),nLo=l(),f2=a("li"),Pme=a("strong"),sLo=o("gpt2"),lLo=o(" \u2014 "),uG=a("a"),iLo=o("GPT2LMHeadModel"),dLo=o(" (OpenAI GPT-2 model)"),cLo=l(),m2=a("li"),Bme=a("strong"),fLo=o("ibert"),mLo=o(" \u2014 "),bG=a("a"),gLo=o("IBertForMaskedLM"),hLo=o(" (I-BERT model)"),pLo=l(),g2=a("li"),Ime=a("strong"),_Lo=o("layoutlm"),uLo=o(" \u2014 "),vG=a("a"),bLo=o("LayoutLMForMaskedLM"),vLo=o(" (LayoutLM model)"),FLo=l(),h2=a("li"),Nme=a("strong"),TLo=o("longformer"),MLo=o(" \u2014 "),FG=a("a"),ELo=o("LongformerForMaskedLM"),CLo=o(" (Longformer model)"),wLo=l(),p2=a("li"),qme=a("strong"),ALo=o("lxmert"),LLo=o(" \u2014 "),TG=a("a"),yLo=o("LxmertForPreTraining"),xLo=o(" (LXMERT model)"),$Lo=l(),_2=a("li"),jme=a("strong"),kLo=o("megatron-bert"),SLo=o(" \u2014 "),MG=a("a"),RLo=o("MegatronBertForPreTraining"),PLo=o(" (Megatron-BERT model)"),BLo=l(),u2=a("li"),Dme=a("strong"),ILo=o("mobilebert"),NLo=o(" \u2014 "),EG=a("a"),qLo=o("MobileBertForPreTraining"),jLo=o(" (MobileBERT model)"),DLo=l(),b2=a("li"),Gme=a("strong"),GLo=o("mpnet"),OLo=o(" \u2014 "),CG=a("a"),VLo=o("MPNetForMaskedLM"),XLo=o(" (MPNet model)"),zLo=l(),v2=a("li"),Ome=a("strong"),QLo=o("mvp"),WLo=o(" \u2014 "),wG=a("a"),HLo=o("MvpForConditionalGeneration"),ULo=o(" (MVP model)"),JLo=l(),F2=a("li"),Vme=a("strong"),YLo=o("nezha"),KLo=o(" \u2014 "),AG=a("a"),ZLo=o("NezhaForPreTraining"),eyo=o(" (Nezha model)"),oyo=l(),T2=a("li"),Xme=a("strong"),ryo=o("openai-gpt"),tyo=o(" \u2014 "),LG=a("a"),ayo=o("OpenAIGPTLMHeadModel"),nyo=o(" (OpenAI GPT model)"),syo=l(),M2=a("li"),zme=a("strong"),lyo=o("retribert"),iyo=o(" \u2014 "),yG=a("a"),dyo=o("RetriBertModel"),cyo=o(" (RetriBERT model)"),fyo=l(),E2=a("li"),Qme=a("strong"),myo=o("roberta"),gyo=o(" \u2014 "),xG=a("a"),hyo=o("RobertaForMaskedLM"),pyo=o(" (RoBERTa model)"),_yo=l(),C2=a("li"),Wme=a("strong"),uyo=o("splinter"),byo=o(" \u2014 "),$G=a("a"),vyo=o("SplinterForPreTraining"),Fyo=o(" (Splinter model)"),Tyo=l(),w2=a("li"),Hme=a("strong"),Myo=o("squeezebert"),Eyo=o(" \u2014 "),kG=a("a"),Cyo=o("SqueezeBertForMaskedLM"),wyo=o(" (SqueezeBERT model)"),Ayo=l(),A2=a("li"),Ume=a("strong"),Lyo=o("t5"),yyo=o(" \u2014 "),SG=a("a"),xyo=o("T5ForConditionalGeneration"),$yo=o(" (T5 model)"),kyo=l(),L2=a("li"),Jme=a("strong"),Syo=o("tapas"),Ryo=o(" \u2014 "),RG=a("a"),Pyo=o("TapasForMaskedLM"),Byo=o(" (TAPAS model)"),Iyo=l(),y2=a("li"),Yme=a("strong"),Nyo=o("transfo-xl"),qyo=o(" \u2014 "),PG=a("a"),jyo=o("TransfoXLLMHeadModel"),Dyo=o(" (Transformer-XL model)"),Gyo=l(),x2=a("li"),Kme=a("strong"),Oyo=o("unispeech"),Vyo=o(" \u2014 "),BG=a("a"),Xyo=o("UniSpeechForPreTraining"),zyo=o(" (UniSpeech model)"),Qyo=l(),$2=a("li"),Zme=a("strong"),Wyo=o("unispeech-sat"),Hyo=o(" \u2014 "),IG=a("a"),Uyo=o("UniSpeechSatForPreTraining"),Jyo=o(" (UniSpeechSat model)"),Yyo=l(),k2=a("li"),ege=a("strong"),Kyo=o("visual_bert"),Zyo=o(" \u2014 "),NG=a("a"),e8o=o("VisualBertForPreTraining"),o8o=o(" (VisualBERT model)"),r8o=l(),S2=a("li"),oge=a("strong"),t8o=o("vit_mae"),a8o=o(" \u2014 "),qG=a("a"),n8o=o("ViTMAEForPreTraining"),s8o=o(" (ViTMAE model)"),l8o=l(),R2=a("li"),rge=a("strong"),i8o=o("wav2vec2"),d8o=o(" \u2014 "),jG=a("a"),c8o=o("Wav2Vec2ForPreTraining"),f8o=o(" (Wav2Vec2 model)"),m8o=l(),P2=a("li"),tge=a("strong"),g8o=o("wav2vec2-conformer"),h8o=o(" \u2014 "),DG=a("a"),p8o=o("Wav2Vec2ConformerForPreTraining"),_8o=o(" (Wav2Vec2-Conformer model)"),u8o=l(),B2=a("li"),age=a("strong"),b8o=o("xlm"),v8o=o(" \u2014 "),GG=a("a"),F8o=o("XLMWithLMHeadModel"),T8o=o(" (XLM model)"),M8o=l(),I2=a("li"),nge=a("strong"),E8o=o("xlm-roberta"),C8o=o(" \u2014 "),OG=a("a"),w8o=o("XLMRobertaForMaskedLM"),A8o=o(" (XLM-RoBERTa model)"),L8o=l(),N2=a("li"),sge=a("strong"),y8o=o("xlm-roberta-xl"),x8o=o(" \u2014 "),VG=a("a"),$8o=o("XLMRobertaXLForMaskedLM"),k8o=o(" (XLM-RoBERTa-XL model)"),S8o=l(),q2=a("li"),lge=a("strong"),R8o=o("xlnet"),P8o=o(" \u2014 "),XG=a("a"),B8o=o("XLNetLMHeadModel"),I8o=o(" (XLNet model)"),N8o=l(),j2=a("p"),q8o=o("The model is set in evaluation mode by default using "),ige=a("code"),j8o=o("model.eval()"),D8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=a("code"),G8o=o("model.train()"),O8o=l(),F(D2.$$.fragment),nXe=l(),Qi=a("h2"),G2=a("a"),cge=a("span"),F(qL.$$.fragment),V8o=l(),fge=a("span"),X8o=o("AutoModelForCausalLM"),sXe=l(),ko=a("div"),F(jL.$$.fragment),z8o=l(),Wi=a("p"),Q8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zG=a("a"),W8o=o("from_pretrained()"),H8o=o(" class method or the "),QG=a("a"),U8o=o("from_config()"),J8o=o(` class
method.`),Y8o=l(),DL=a("p"),K8o=o("This class cannot be instantiated directly using "),mge=a("code"),Z8o=o("__init__()"),exo=o(" (throws an error)."),oxo=l(),dt=a("div"),F(GL.$$.fragment),rxo=l(),gge=a("p"),txo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),axo=l(),Hi=a("p"),nxo=o(`Note:
Loading a model from its configuration file does `),hge=a("strong"),sxo=o("not"),lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=a("a"),ixo=o("from_pretrained()"),dxo=o(" to load the model weights."),cxo=l(),F(O2.$$.fragment),fxo=l(),Ke=a("div"),F(OL.$$.fragment),mxo=l(),pge=a("p"),gxo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hxo=l(),qa=a("p"),pxo=o("The model class to instantiate is selected based on the "),_ge=a("code"),_xo=o("model_type"),uxo=o(` property of the config object (either
passed as an argument or loaded from `),uge=a("code"),bxo=o("pretrained_model_name_or_path"),vxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=a("code"),Fxo=o("pretrained_model_name_or_path"),Txo=o(":"),Mxo=l(),z=a("ul"),V2=a("li"),vge=a("strong"),Exo=o("bart"),Cxo=o(" \u2014 "),HG=a("a"),wxo=o("BartForCausalLM"),Axo=o(" (BART model)"),Lxo=l(),X2=a("li"),Fge=a("strong"),yxo=o("bert"),xxo=o(" \u2014 "),UG=a("a"),$xo=o("BertLMHeadModel"),kxo=o(" (BERT model)"),Sxo=l(),z2=a("li"),Tge=a("strong"),Rxo=o("bert-generation"),Pxo=o(" \u2014 "),JG=a("a"),Bxo=o("BertGenerationDecoder"),Ixo=o(" (Bert Generation model)"),Nxo=l(),Q2=a("li"),Mge=a("strong"),qxo=o("big_bird"),jxo=o(" \u2014 "),YG=a("a"),Dxo=o("BigBirdForCausalLM"),Gxo=o(" (BigBird model)"),Oxo=l(),W2=a("li"),Ege=a("strong"),Vxo=o("bigbird_pegasus"),Xxo=o(" \u2014 "),KG=a("a"),zxo=o("BigBirdPegasusForCausalLM"),Qxo=o(" (BigBird-Pegasus model)"),Wxo=l(),H2=a("li"),Cge=a("strong"),Hxo=o("blenderbot"),Uxo=o(" \u2014 "),ZG=a("a"),Jxo=o("BlenderbotForCausalLM"),Yxo=o(" (Blenderbot model)"),Kxo=l(),U2=a("li"),wge=a("strong"),Zxo=o("blenderbot-small"),e$o=o(" \u2014 "),eO=a("a"),o$o=o("BlenderbotSmallForCausalLM"),r$o=o(" (BlenderbotSmall model)"),t$o=l(),J2=a("li"),Age=a("strong"),a$o=o("bloom"),n$o=o(" \u2014 "),oO=a("a"),s$o=o("BloomForCausalLM"),l$o=o(" (BLOOM model)"),i$o=l(),Y2=a("li"),Lge=a("strong"),d$o=o("camembert"),c$o=o(" \u2014 "),rO=a("a"),f$o=o("CamembertForCausalLM"),m$o=o(" (CamemBERT model)"),g$o=l(),K2=a("li"),yge=a("strong"),h$o=o("codegen"),p$o=o(" \u2014 "),tO=a("a"),_$o=o("CodeGenForCausalLM"),u$o=o(" (CodeGen model)"),b$o=l(),Z2=a("li"),xge=a("strong"),v$o=o("ctrl"),F$o=o(" \u2014 "),aO=a("a"),T$o=o("CTRLLMHeadModel"),M$o=o(" (CTRL model)"),E$o=l(),e1=a("li"),$ge=a("strong"),C$o=o("data2vec-text"),w$o=o(" \u2014 "),nO=a("a"),A$o=o("Data2VecTextForCausalLM"),L$o=o(" (Data2VecText model)"),y$o=l(),o1=a("li"),kge=a("strong"),x$o=o("electra"),$$o=o(" \u2014 "),sO=a("a"),k$o=o("ElectraForCausalLM"),S$o=o(" (ELECTRA model)"),R$o=l(),r1=a("li"),Sge=a("strong"),P$o=o("gpt2"),B$o=o(" \u2014 "),lO=a("a"),I$o=o("GPT2LMHeadModel"),N$o=o(" (OpenAI GPT-2 model)"),q$o=l(),t1=a("li"),Rge=a("strong"),j$o=o("gpt_neo"),D$o=o(" \u2014 "),iO=a("a"),G$o=o("GPTNeoForCausalLM"),O$o=o(" (GPT Neo model)"),V$o=l(),a1=a("li"),Pge=a("strong"),X$o=o("gpt_neox"),z$o=o(" \u2014 "),dO=a("a"),Q$o=o("GPTNeoXForCausalLM"),W$o=o(" (GPT NeoX model)"),H$o=l(),n1=a("li"),Bge=a("strong"),U$o=o("gptj"),J$o=o(" \u2014 "),cO=a("a"),Y$o=o("GPTJForCausalLM"),K$o=o(" (GPT-J model)"),Z$o=l(),s1=a("li"),Ige=a("strong"),eko=o("marian"),oko=o(" \u2014 "),fO=a("a"),rko=o("MarianForCausalLM"),tko=o(" (Marian model)"),ako=l(),l1=a("li"),Nge=a("strong"),nko=o("mbart"),sko=o(" \u2014 "),mO=a("a"),lko=o("MBartForCausalLM"),iko=o(" (mBART model)"),dko=l(),i1=a("li"),qge=a("strong"),cko=o("megatron-bert"),fko=o(" \u2014 "),gO=a("a"),mko=o("MegatronBertForCausalLM"),gko=o(" (Megatron-BERT model)"),hko=l(),d1=a("li"),jge=a("strong"),pko=o("mvp"),_ko=o(" \u2014 "),hO=a("a"),uko=o("MvpForCausalLM"),bko=o(" (MVP model)"),vko=l(),c1=a("li"),Dge=a("strong"),Fko=o("openai-gpt"),Tko=o(" \u2014 "),pO=a("a"),Mko=o("OpenAIGPTLMHeadModel"),Eko=o(" (OpenAI GPT model)"),Cko=l(),f1=a("li"),Gge=a("strong"),wko=o("opt"),Ako=o(" \u2014 "),_O=a("a"),Lko=o("OPTForCausalLM"),yko=o(" (OPT model)"),xko=l(),m1=a("li"),Oge=a("strong"),$ko=o("pegasus"),kko=o(" \u2014 "),uO=a("a"),Sko=o("PegasusForCausalLM"),Rko=o(" (Pegasus model)"),Pko=l(),g1=a("li"),Vge=a("strong"),Bko=o("plbart"),Iko=o(" \u2014 "),bO=a("a"),Nko=o("PLBartForCausalLM"),qko=o(" (PLBart model)"),jko=l(),h1=a("li"),Xge=a("strong"),Dko=o("prophetnet"),Gko=o(" \u2014 "),vO=a("a"),Oko=o("ProphetNetForCausalLM"),Vko=o(" (ProphetNet model)"),Xko=l(),p1=a("li"),zge=a("strong"),zko=o("qdqbert"),Qko=o(" \u2014 "),FO=a("a"),Wko=o("QDQBertLMHeadModel"),Hko=o(" (QDQBert model)"),Uko=l(),_1=a("li"),Qge=a("strong"),Jko=o("reformer"),Yko=o(" \u2014 "),TO=a("a"),Kko=o("ReformerModelWithLMHead"),Zko=o(" (Reformer model)"),eSo=l(),u1=a("li"),Wge=a("strong"),oSo=o("rembert"),rSo=o(" \u2014 "),MO=a("a"),tSo=o("RemBertForCausalLM"),aSo=o(" (RemBERT model)"),nSo=l(),b1=a("li"),Hge=a("strong"),sSo=o("roberta"),lSo=o(" \u2014 "),EO=a("a"),iSo=o("RobertaForCausalLM"),dSo=o(" (RoBERTa model)"),cSo=l(),v1=a("li"),Uge=a("strong"),fSo=o("roformer"),mSo=o(" \u2014 "),CO=a("a"),gSo=o("RoFormerForCausalLM"),hSo=o(" (RoFormer model)"),pSo=l(),F1=a("li"),Jge=a("strong"),_So=o("speech_to_text_2"),uSo=o(" \u2014 "),wO=a("a"),bSo=o("Speech2Text2ForCausalLM"),vSo=o(" (Speech2Text2 model)"),FSo=l(),T1=a("li"),Yge=a("strong"),TSo=o("transfo-xl"),MSo=o(" \u2014 "),AO=a("a"),ESo=o("TransfoXLLMHeadModel"),CSo=o(" (Transformer-XL model)"),wSo=l(),M1=a("li"),Kge=a("strong"),ASo=o("trocr"),LSo=o(" \u2014 "),LO=a("a"),ySo=o("TrOCRForCausalLM"),xSo=o(" (TrOCR model)"),$So=l(),E1=a("li"),Zge=a("strong"),kSo=o("xglm"),SSo=o(" \u2014 "),yO=a("a"),RSo=o("XGLMForCausalLM"),PSo=o(" (XGLM model)"),BSo=l(),C1=a("li"),ehe=a("strong"),ISo=o("xlm"),NSo=o(" \u2014 "),xO=a("a"),qSo=o("XLMWithLMHeadModel"),jSo=o(" (XLM model)"),DSo=l(),w1=a("li"),ohe=a("strong"),GSo=o("xlm-prophetnet"),OSo=o(" \u2014 "),$O=a("a"),VSo=o("XLMProphetNetForCausalLM"),XSo=o(" (XLM-ProphetNet model)"),zSo=l(),A1=a("li"),rhe=a("strong"),QSo=o("xlm-roberta"),WSo=o(" \u2014 "),kO=a("a"),HSo=o("XLMRobertaForCausalLM"),USo=o(" (XLM-RoBERTa model)"),JSo=l(),L1=a("li"),the=a("strong"),YSo=o("xlm-roberta-xl"),KSo=o(" \u2014 "),SO=a("a"),ZSo=o("XLMRobertaXLForCausalLM"),eRo=o(" (XLM-RoBERTa-XL model)"),oRo=l(),y1=a("li"),ahe=a("strong"),rRo=o("xlnet"),tRo=o(" \u2014 "),RO=a("a"),aRo=o("XLNetLMHeadModel"),nRo=o(" (XLNet model)"),sRo=l(),x1=a("p"),lRo=o("The model is set in evaluation mode by default using "),nhe=a("code"),iRo=o("model.eval()"),dRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=a("code"),cRo=o("model.train()"),fRo=l(),F($1.$$.fragment),lXe=l(),Ui=a("h2"),k1=a("a"),lhe=a("span"),F(VL.$$.fragment),mRo=l(),ihe=a("span"),gRo=o("AutoModelForMaskedLM"),iXe=l(),So=a("div"),F(XL.$$.fragment),hRo=l(),Ji=a("p"),pRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PO=a("a"),_Ro=o("from_pretrained()"),uRo=o(" class method or the "),BO=a("a"),bRo=o("from_config()"),vRo=o(` class
method.`),FRo=l(),zL=a("p"),TRo=o("This class cannot be instantiated directly using "),dhe=a("code"),MRo=o("__init__()"),ERo=o(" (throws an error)."),CRo=l(),ct=a("div"),F(QL.$$.fragment),wRo=l(),che=a("p"),ARo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),LRo=l(),Yi=a("p"),yRo=o(`Note:
Loading a model from its configuration file does `),fhe=a("strong"),xRo=o("not"),$Ro=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),kRo=o("from_pretrained()"),SRo=o(" to load the model weights."),RRo=l(),F(S1.$$.fragment),PRo=l(),Ze=a("div"),F(WL.$$.fragment),BRo=l(),mhe=a("p"),IRo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),NRo=l(),ja=a("p"),qRo=o("The model class to instantiate is selected based on the "),ghe=a("code"),jRo=o("model_type"),DRo=o(` property of the config object (either
passed as an argument or loaded from `),hhe=a("code"),GRo=o("pretrained_model_name_or_path"),ORo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=a("code"),VRo=o("pretrained_model_name_or_path"),XRo=o(":"),zRo=l(),W=a("ul"),R1=a("li"),_he=a("strong"),QRo=o("albert"),WRo=o(" \u2014 "),NO=a("a"),HRo=o("AlbertForMaskedLM"),URo=o(" (ALBERT model)"),JRo=l(),P1=a("li"),uhe=a("strong"),YRo=o("bart"),KRo=o(" \u2014 "),qO=a("a"),ZRo=o("BartForConditionalGeneration"),ePo=o(" (BART model)"),oPo=l(),B1=a("li"),bhe=a("strong"),rPo=o("bert"),tPo=o(" \u2014 "),jO=a("a"),aPo=o("BertForMaskedLM"),nPo=o(" (BERT model)"),sPo=l(),I1=a("li"),vhe=a("strong"),lPo=o("big_bird"),iPo=o(" \u2014 "),DO=a("a"),dPo=o("BigBirdForMaskedLM"),cPo=o(" (BigBird model)"),fPo=l(),N1=a("li"),Fhe=a("strong"),mPo=o("camembert"),gPo=o(" \u2014 "),GO=a("a"),hPo=o("CamembertForMaskedLM"),pPo=o(" (CamemBERT model)"),_Po=l(),q1=a("li"),The=a("strong"),uPo=o("convbert"),bPo=o(" \u2014 "),OO=a("a"),vPo=o("ConvBertForMaskedLM"),FPo=o(" (ConvBERT model)"),TPo=l(),j1=a("li"),Mhe=a("strong"),MPo=o("data2vec-text"),EPo=o(" \u2014 "),VO=a("a"),CPo=o("Data2VecTextForMaskedLM"),wPo=o(" (Data2VecText model)"),APo=l(),D1=a("li"),Ehe=a("strong"),LPo=o("deberta"),yPo=o(" \u2014 "),XO=a("a"),xPo=o("DebertaForMaskedLM"),$Po=o(" (DeBERTa model)"),kPo=l(),G1=a("li"),Che=a("strong"),SPo=o("deberta-v2"),RPo=o(" \u2014 "),zO=a("a"),PPo=o("DebertaV2ForMaskedLM"),BPo=o(" (DeBERTa-v2 model)"),IPo=l(),O1=a("li"),whe=a("strong"),NPo=o("distilbert"),qPo=o(" \u2014 "),QO=a("a"),jPo=o("DistilBertForMaskedLM"),DPo=o(" (DistilBERT model)"),GPo=l(),V1=a("li"),Ahe=a("strong"),OPo=o("electra"),VPo=o(" \u2014 "),WO=a("a"),XPo=o("ElectraForMaskedLM"),zPo=o(" (ELECTRA model)"),QPo=l(),X1=a("li"),Lhe=a("strong"),WPo=o("flaubert"),HPo=o(" \u2014 "),HO=a("a"),UPo=o("FlaubertWithLMHeadModel"),JPo=o(" (FlauBERT model)"),YPo=l(),z1=a("li"),yhe=a("strong"),KPo=o("fnet"),ZPo=o(" \u2014 "),UO=a("a"),eBo=o("FNetForMaskedLM"),oBo=o(" (FNet model)"),rBo=l(),Q1=a("li"),xhe=a("strong"),tBo=o("funnel"),aBo=o(" \u2014 "),JO=a("a"),nBo=o("FunnelForMaskedLM"),sBo=o(" (Funnel Transformer model)"),lBo=l(),W1=a("li"),$he=a("strong"),iBo=o("ibert"),dBo=o(" \u2014 "),YO=a("a"),cBo=o("IBertForMaskedLM"),fBo=o(" (I-BERT model)"),mBo=l(),H1=a("li"),khe=a("strong"),gBo=o("layoutlm"),hBo=o(" \u2014 "),KO=a("a"),pBo=o("LayoutLMForMaskedLM"),_Bo=o(" (LayoutLM model)"),uBo=l(),U1=a("li"),She=a("strong"),bBo=o("longformer"),vBo=o(" \u2014 "),ZO=a("a"),FBo=o("LongformerForMaskedLM"),TBo=o(" (Longformer model)"),MBo=l(),J1=a("li"),Rhe=a("strong"),EBo=o("luke"),CBo=o(" \u2014 "),eV=a("a"),wBo=o("LukeForMaskedLM"),ABo=o(" (LUKE model)"),LBo=l(),Y1=a("li"),Phe=a("strong"),yBo=o("mbart"),xBo=o(" \u2014 "),oV=a("a"),$Bo=o("MBartForConditionalGeneration"),kBo=o(" (mBART model)"),SBo=l(),K1=a("li"),Bhe=a("strong"),RBo=o("megatron-bert"),PBo=o(" \u2014 "),rV=a("a"),BBo=o("MegatronBertForMaskedLM"),IBo=o(" (Megatron-BERT model)"),NBo=l(),Z1=a("li"),Ihe=a("strong"),qBo=o("mobilebert"),jBo=o(" \u2014 "),tV=a("a"),DBo=o("MobileBertForMaskedLM"),GBo=o(" (MobileBERT model)"),OBo=l(),e4=a("li"),Nhe=a("strong"),VBo=o("mpnet"),XBo=o(" \u2014 "),aV=a("a"),zBo=o("MPNetForMaskedLM"),QBo=o(" (MPNet model)"),WBo=l(),o4=a("li"),qhe=a("strong"),HBo=o("mvp"),UBo=o(" \u2014 "),nV=a("a"),JBo=o("MvpForConditionalGeneration"),YBo=o(" (MVP model)"),KBo=l(),r4=a("li"),jhe=a("strong"),ZBo=o("nezha"),eIo=o(" \u2014 "),sV=a("a"),oIo=o("NezhaForMaskedLM"),rIo=o(" (Nezha model)"),tIo=l(),t4=a("li"),Dhe=a("strong"),aIo=o("nystromformer"),nIo=o(" \u2014 "),lV=a("a"),sIo=o("NystromformerForMaskedLM"),lIo=o(" (Nystr\xF6mformer model)"),iIo=l(),a4=a("li"),Ghe=a("strong"),dIo=o("perceiver"),cIo=o(" \u2014 "),iV=a("a"),fIo=o("PerceiverForMaskedLM"),mIo=o(" (Perceiver model)"),gIo=l(),n4=a("li"),Ohe=a("strong"),hIo=o("qdqbert"),pIo=o(" \u2014 "),dV=a("a"),_Io=o("QDQBertForMaskedLM"),uIo=o(" (QDQBert model)"),bIo=l(),s4=a("li"),Vhe=a("strong"),vIo=o("reformer"),FIo=o(" \u2014 "),cV=a("a"),TIo=o("ReformerForMaskedLM"),MIo=o(" (Reformer model)"),EIo=l(),l4=a("li"),Xhe=a("strong"),CIo=o("rembert"),wIo=o(" \u2014 "),fV=a("a"),AIo=o("RemBertForMaskedLM"),LIo=o(" (RemBERT model)"),yIo=l(),i4=a("li"),zhe=a("strong"),xIo=o("roberta"),$Io=o(" \u2014 "),mV=a("a"),kIo=o("RobertaForMaskedLM"),SIo=o(" (RoBERTa model)"),RIo=l(),d4=a("li"),Qhe=a("strong"),PIo=o("roformer"),BIo=o(" \u2014 "),gV=a("a"),IIo=o("RoFormerForMaskedLM"),NIo=o(" (RoFormer model)"),qIo=l(),c4=a("li"),Whe=a("strong"),jIo=o("squeezebert"),DIo=o(" \u2014 "),hV=a("a"),GIo=o("SqueezeBertForMaskedLM"),OIo=o(" (SqueezeBERT model)"),VIo=l(),f4=a("li"),Hhe=a("strong"),XIo=o("tapas"),zIo=o(" \u2014 "),pV=a("a"),QIo=o("TapasForMaskedLM"),WIo=o(" (TAPAS model)"),HIo=l(),m4=a("li"),Uhe=a("strong"),UIo=o("wav2vec2"),JIo=o(" \u2014 "),Jhe=a("code"),YIo=o("Wav2Vec2ForMaskedLM"),KIo=o(" (Wav2Vec2 model)"),ZIo=l(),g4=a("li"),Yhe=a("strong"),eNo=o("xlm"),oNo=o(" \u2014 "),_V=a("a"),rNo=o("XLMWithLMHeadModel"),tNo=o(" (XLM model)"),aNo=l(),h4=a("li"),Khe=a("strong"),nNo=o("xlm-roberta"),sNo=o(" \u2014 "),uV=a("a"),lNo=o("XLMRobertaForMaskedLM"),iNo=o(" (XLM-RoBERTa model)"),dNo=l(),p4=a("li"),Zhe=a("strong"),cNo=o("xlm-roberta-xl"),fNo=o(" \u2014 "),bV=a("a"),mNo=o("XLMRobertaXLForMaskedLM"),gNo=o(" (XLM-RoBERTa-XL model)"),hNo=l(),_4=a("li"),epe=a("strong"),pNo=o("yoso"),_No=o(" \u2014 "),vV=a("a"),uNo=o("YosoForMaskedLM"),bNo=o(" (YOSO model)"),vNo=l(),u4=a("p"),FNo=o("The model is set in evaluation mode by default using "),ope=a("code"),TNo=o("model.eval()"),MNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),ENo=o("model.train()"),CNo=l(),F(b4.$$.fragment),dXe=l(),Ki=a("h2"),v4=a("a"),tpe=a("span"),F(HL.$$.fragment),wNo=l(),ape=a("span"),ANo=o("AutoModelForSeq2SeqLM"),cXe=l(),Ro=a("div"),F(UL.$$.fragment),LNo=l(),Zi=a("p"),yNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FV=a("a"),xNo=o("from_pretrained()"),$No=o(" class method or the "),TV=a("a"),kNo=o("from_config()"),SNo=o(` class
method.`),RNo=l(),JL=a("p"),PNo=o("This class cannot be instantiated directly using "),npe=a("code"),BNo=o("__init__()"),INo=o(" (throws an error)."),NNo=l(),ft=a("div"),F(YL.$$.fragment),qNo=l(),spe=a("p"),jNo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),DNo=l(),ed=a("p"),GNo=o(`Note:
Loading a model from its configuration file does `),lpe=a("strong"),ONo=o("not"),VNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),XNo=o("from_pretrained()"),zNo=o(" to load the model weights."),QNo=l(),F(F4.$$.fragment),WNo=l(),eo=a("div"),F(KL.$$.fragment),HNo=l(),ipe=a("p"),UNo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JNo=l(),Da=a("p"),YNo=o("The model class to instantiate is selected based on the "),dpe=a("code"),KNo=o("model_type"),ZNo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),eqo=o("pretrained_model_name_or_path"),oqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),rqo=o("pretrained_model_name_or_path"),tqo=o(":"),aqo=l(),pe=a("ul"),T4=a("li"),mpe=a("strong"),nqo=o("bart"),sqo=o(" \u2014 "),EV=a("a"),lqo=o("BartForConditionalGeneration"),iqo=o(" (BART model)"),dqo=l(),M4=a("li"),gpe=a("strong"),cqo=o("bigbird_pegasus"),fqo=o(" \u2014 "),CV=a("a"),mqo=o("BigBirdPegasusForConditionalGeneration"),gqo=o(" (BigBird-Pegasus model)"),hqo=l(),E4=a("li"),hpe=a("strong"),pqo=o("blenderbot"),_qo=o(" \u2014 "),wV=a("a"),uqo=o("BlenderbotForConditionalGeneration"),bqo=o(" (Blenderbot model)"),vqo=l(),C4=a("li"),ppe=a("strong"),Fqo=o("blenderbot-small"),Tqo=o(" \u2014 "),AV=a("a"),Mqo=o("BlenderbotSmallForConditionalGeneration"),Eqo=o(" (BlenderbotSmall model)"),Cqo=l(),w4=a("li"),_pe=a("strong"),wqo=o("encoder-decoder"),Aqo=o(" \u2014 "),LV=a("a"),Lqo=o("EncoderDecoderModel"),yqo=o(" (Encoder decoder model)"),xqo=l(),A4=a("li"),upe=a("strong"),$qo=o("fsmt"),kqo=o(" \u2014 "),yV=a("a"),Sqo=o("FSMTForConditionalGeneration"),Rqo=o(" (FairSeq Machine-Translation model)"),Pqo=l(),L4=a("li"),bpe=a("strong"),Bqo=o("led"),Iqo=o(" \u2014 "),xV=a("a"),Nqo=o("LEDForConditionalGeneration"),qqo=o(" (LED model)"),jqo=l(),y4=a("li"),vpe=a("strong"),Dqo=o("longt5"),Gqo=o(" \u2014 "),$V=a("a"),Oqo=o("LongT5ForConditionalGeneration"),Vqo=o(" (LongT5 model)"),Xqo=l(),x4=a("li"),Fpe=a("strong"),zqo=o("m2m_100"),Qqo=o(" \u2014 "),kV=a("a"),Wqo=o("M2M100ForConditionalGeneration"),Hqo=o(" (M2M100 model)"),Uqo=l(),$4=a("li"),Tpe=a("strong"),Jqo=o("marian"),Yqo=o(" \u2014 "),SV=a("a"),Kqo=o("MarianMTModel"),Zqo=o(" (Marian model)"),ejo=l(),k4=a("li"),Mpe=a("strong"),ojo=o("mbart"),rjo=o(" \u2014 "),RV=a("a"),tjo=o("MBartForConditionalGeneration"),ajo=o(" (mBART model)"),njo=l(),S4=a("li"),Epe=a("strong"),sjo=o("mt5"),ljo=o(" \u2014 "),PV=a("a"),ijo=o("MT5ForConditionalGeneration"),djo=o(" (MT5 model)"),cjo=l(),R4=a("li"),Cpe=a("strong"),fjo=o("mvp"),mjo=o(" \u2014 "),BV=a("a"),gjo=o("MvpForConditionalGeneration"),hjo=o(" (MVP model)"),pjo=l(),P4=a("li"),wpe=a("strong"),_jo=o("pegasus"),ujo=o(" \u2014 "),IV=a("a"),bjo=o("PegasusForConditionalGeneration"),vjo=o(" (Pegasus model)"),Fjo=l(),B4=a("li"),Ape=a("strong"),Tjo=o("plbart"),Mjo=o(" \u2014 "),NV=a("a"),Ejo=o("PLBartForConditionalGeneration"),Cjo=o(" (PLBart model)"),wjo=l(),I4=a("li"),Lpe=a("strong"),Ajo=o("prophetnet"),Ljo=o(" \u2014 "),qV=a("a"),yjo=o("ProphetNetForConditionalGeneration"),xjo=o(" (ProphetNet model)"),$jo=l(),N4=a("li"),ype=a("strong"),kjo=o("t5"),Sjo=o(" \u2014 "),jV=a("a"),Rjo=o("T5ForConditionalGeneration"),Pjo=o(" (T5 model)"),Bjo=l(),q4=a("li"),xpe=a("strong"),Ijo=o("xlm-prophetnet"),Njo=o(" \u2014 "),DV=a("a"),qjo=o("XLMProphetNetForConditionalGeneration"),jjo=o(" (XLM-ProphetNet model)"),Djo=l(),j4=a("p"),Gjo=o("The model is set in evaluation mode by default using "),$pe=a("code"),Ojo=o("model.eval()"),Vjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=a("code"),Xjo=o("model.train()"),zjo=l(),F(D4.$$.fragment),fXe=l(),od=a("h2"),G4=a("a"),Spe=a("span"),F(ZL.$$.fragment),Qjo=l(),Rpe=a("span"),Wjo=o("AutoModelForSequenceClassification"),mXe=l(),Po=a("div"),F(ey.$$.fragment),Hjo=l(),rd=a("p"),Ujo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GV=a("a"),Jjo=o("from_pretrained()"),Yjo=o(" class method or the "),OV=a("a"),Kjo=o("from_config()"),Zjo=o(` class
method.`),eDo=l(),oy=a("p"),oDo=o("This class cannot be instantiated directly using "),Ppe=a("code"),rDo=o("__init__()"),tDo=o(" (throws an error)."),aDo=l(),mt=a("div"),F(ry.$$.fragment),nDo=l(),Bpe=a("p"),sDo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),lDo=l(),td=a("p"),iDo=o(`Note:
Loading a model from its configuration file does `),Ipe=a("strong"),dDo=o("not"),cDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),fDo=o("from_pretrained()"),mDo=o(" to load the model weights."),gDo=l(),F(O4.$$.fragment),hDo=l(),oo=a("div"),F(ty.$$.fragment),pDo=l(),Npe=a("p"),_Do=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uDo=l(),Ga=a("p"),bDo=o("The model class to instantiate is selected based on the "),qpe=a("code"),vDo=o("model_type"),FDo=o(` property of the config object (either
passed as an argument or loaded from `),jpe=a("code"),TDo=o("pretrained_model_name_or_path"),MDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=a("code"),EDo=o("pretrained_model_name_or_path"),CDo=o(":"),wDo=l(),N=a("ul"),V4=a("li"),Gpe=a("strong"),ADo=o("albert"),LDo=o(" \u2014 "),XV=a("a"),yDo=o("AlbertForSequenceClassification"),xDo=o(" (ALBERT model)"),$Do=l(),X4=a("li"),Ope=a("strong"),kDo=o("bart"),SDo=o(" \u2014 "),zV=a("a"),RDo=o("BartForSequenceClassification"),PDo=o(" (BART model)"),BDo=l(),z4=a("li"),Vpe=a("strong"),IDo=o("bert"),NDo=o(" \u2014 "),QV=a("a"),qDo=o("BertForSequenceClassification"),jDo=o(" (BERT model)"),DDo=l(),Q4=a("li"),Xpe=a("strong"),GDo=o("big_bird"),ODo=o(" \u2014 "),WV=a("a"),VDo=o("BigBirdForSequenceClassification"),XDo=o(" (BigBird model)"),zDo=l(),W4=a("li"),zpe=a("strong"),QDo=o("bigbird_pegasus"),WDo=o(" \u2014 "),HV=a("a"),HDo=o("BigBirdPegasusForSequenceClassification"),UDo=o(" (BigBird-Pegasus model)"),JDo=l(),H4=a("li"),Qpe=a("strong"),YDo=o("bloom"),KDo=o(" \u2014 "),UV=a("a"),ZDo=o("BloomForSequenceClassification"),eGo=o(" (BLOOM model)"),oGo=l(),U4=a("li"),Wpe=a("strong"),rGo=o("camembert"),tGo=o(" \u2014 "),JV=a("a"),aGo=o("CamembertForSequenceClassification"),nGo=o(" (CamemBERT model)"),sGo=l(),J4=a("li"),Hpe=a("strong"),lGo=o("canine"),iGo=o(" \u2014 "),YV=a("a"),dGo=o("CanineForSequenceClassification"),cGo=o(" (CANINE model)"),fGo=l(),Y4=a("li"),Upe=a("strong"),mGo=o("convbert"),gGo=o(" \u2014 "),KV=a("a"),hGo=o("ConvBertForSequenceClassification"),pGo=o(" (ConvBERT model)"),_Go=l(),K4=a("li"),Jpe=a("strong"),uGo=o("ctrl"),bGo=o(" \u2014 "),ZV=a("a"),vGo=o("CTRLForSequenceClassification"),FGo=o(" (CTRL model)"),TGo=l(),Z4=a("li"),Ype=a("strong"),MGo=o("data2vec-text"),EGo=o(" \u2014 "),eX=a("a"),CGo=o("Data2VecTextForSequenceClassification"),wGo=o(" (Data2VecText model)"),AGo=l(),eb=a("li"),Kpe=a("strong"),LGo=o("deberta"),yGo=o(" \u2014 "),oX=a("a"),xGo=o("DebertaForSequenceClassification"),$Go=o(" (DeBERTa model)"),kGo=l(),ob=a("li"),Zpe=a("strong"),SGo=o("deberta-v2"),RGo=o(" \u2014 "),rX=a("a"),PGo=o("DebertaV2ForSequenceClassification"),BGo=o(" (DeBERTa-v2 model)"),IGo=l(),rb=a("li"),e_e=a("strong"),NGo=o("distilbert"),qGo=o(" \u2014 "),tX=a("a"),jGo=o("DistilBertForSequenceClassification"),DGo=o(" (DistilBERT model)"),GGo=l(),tb=a("li"),o_e=a("strong"),OGo=o("electra"),VGo=o(" \u2014 "),aX=a("a"),XGo=o("ElectraForSequenceClassification"),zGo=o(" (ELECTRA model)"),QGo=l(),ab=a("li"),r_e=a("strong"),WGo=o("flaubert"),HGo=o(" \u2014 "),nX=a("a"),UGo=o("FlaubertForSequenceClassification"),JGo=o(" (FlauBERT model)"),YGo=l(),nb=a("li"),t_e=a("strong"),KGo=o("fnet"),ZGo=o(" \u2014 "),sX=a("a"),eOo=o("FNetForSequenceClassification"),oOo=o(" (FNet model)"),rOo=l(),sb=a("li"),a_e=a("strong"),tOo=o("funnel"),aOo=o(" \u2014 "),lX=a("a"),nOo=o("FunnelForSequenceClassification"),sOo=o(" (Funnel Transformer model)"),lOo=l(),lb=a("li"),n_e=a("strong"),iOo=o("gpt2"),dOo=o(" \u2014 "),iX=a("a"),cOo=o("GPT2ForSequenceClassification"),fOo=o(" (OpenAI GPT-2 model)"),mOo=l(),ib=a("li"),s_e=a("strong"),gOo=o("gpt_neo"),hOo=o(" \u2014 "),dX=a("a"),pOo=o("GPTNeoForSequenceClassification"),_Oo=o(" (GPT Neo model)"),uOo=l(),db=a("li"),l_e=a("strong"),bOo=o("gptj"),vOo=o(" \u2014 "),cX=a("a"),FOo=o("GPTJForSequenceClassification"),TOo=o(" (GPT-J model)"),MOo=l(),cb=a("li"),i_e=a("strong"),EOo=o("ibert"),COo=o(" \u2014 "),fX=a("a"),wOo=o("IBertForSequenceClassification"),AOo=o(" (I-BERT model)"),LOo=l(),fb=a("li"),d_e=a("strong"),yOo=o("layoutlm"),xOo=o(" \u2014 "),mX=a("a"),$Oo=o("LayoutLMForSequenceClassification"),kOo=o(" (LayoutLM model)"),SOo=l(),mb=a("li"),c_e=a("strong"),ROo=o("layoutlmv2"),POo=o(" \u2014 "),gX=a("a"),BOo=o("LayoutLMv2ForSequenceClassification"),IOo=o(" (LayoutLMv2 model)"),NOo=l(),gb=a("li"),f_e=a("strong"),qOo=o("layoutlmv3"),jOo=o(" \u2014 "),hX=a("a"),DOo=o("LayoutLMv3ForSequenceClassification"),GOo=o(" (LayoutLMv3 model)"),OOo=l(),hb=a("li"),m_e=a("strong"),VOo=o("led"),XOo=o(" \u2014 "),pX=a("a"),zOo=o("LEDForSequenceClassification"),QOo=o(" (LED model)"),WOo=l(),pb=a("li"),g_e=a("strong"),HOo=o("longformer"),UOo=o(" \u2014 "),_X=a("a"),JOo=o("LongformerForSequenceClassification"),YOo=o(" (Longformer model)"),KOo=l(),_b=a("li"),h_e=a("strong"),ZOo=o("mbart"),eVo=o(" \u2014 "),uX=a("a"),oVo=o("MBartForSequenceClassification"),rVo=o(" (mBART model)"),tVo=l(),ub=a("li"),p_e=a("strong"),aVo=o("megatron-bert"),nVo=o(" \u2014 "),bX=a("a"),sVo=o("MegatronBertForSequenceClassification"),lVo=o(" (Megatron-BERT model)"),iVo=l(),bb=a("li"),__e=a("strong"),dVo=o("mobilebert"),cVo=o(" \u2014 "),vX=a("a"),fVo=o("MobileBertForSequenceClassification"),mVo=o(" (MobileBERT model)"),gVo=l(),vb=a("li"),u_e=a("strong"),hVo=o("mpnet"),pVo=o(" \u2014 "),FX=a("a"),_Vo=o("MPNetForSequenceClassification"),uVo=o(" (MPNet model)"),bVo=l(),Fb=a("li"),b_e=a("strong"),vVo=o("mvp"),FVo=o(" \u2014 "),TX=a("a"),TVo=o("MvpForSequenceClassification"),MVo=o(" (MVP model)"),EVo=l(),Tb=a("li"),v_e=a("strong"),CVo=o("nezha"),wVo=o(" \u2014 "),MX=a("a"),AVo=o("NezhaForSequenceClassification"),LVo=o(" (Nezha model)"),yVo=l(),Mb=a("li"),F_e=a("strong"),xVo=o("nystromformer"),$Vo=o(" \u2014 "),EX=a("a"),kVo=o("NystromformerForSequenceClassification"),SVo=o(" (Nystr\xF6mformer model)"),RVo=l(),Eb=a("li"),T_e=a("strong"),PVo=o("openai-gpt"),BVo=o(" \u2014 "),CX=a("a"),IVo=o("OpenAIGPTForSequenceClassification"),NVo=o(" (OpenAI GPT model)"),qVo=l(),Cb=a("li"),M_e=a("strong"),jVo=o("perceiver"),DVo=o(" \u2014 "),wX=a("a"),GVo=o("PerceiverForSequenceClassification"),OVo=o(" (Perceiver model)"),VVo=l(),wb=a("li"),E_e=a("strong"),XVo=o("plbart"),zVo=o(" \u2014 "),AX=a("a"),QVo=o("PLBartForSequenceClassification"),WVo=o(" (PLBart model)"),HVo=l(),Ab=a("li"),C_e=a("strong"),UVo=o("qdqbert"),JVo=o(" \u2014 "),LX=a("a"),YVo=o("QDQBertForSequenceClassification"),KVo=o(" (QDQBert model)"),ZVo=l(),Lb=a("li"),w_e=a("strong"),eXo=o("reformer"),oXo=o(" \u2014 "),yX=a("a"),rXo=o("ReformerForSequenceClassification"),tXo=o(" (Reformer model)"),aXo=l(),yb=a("li"),A_e=a("strong"),nXo=o("rembert"),sXo=o(" \u2014 "),xX=a("a"),lXo=o("RemBertForSequenceClassification"),iXo=o(" (RemBERT model)"),dXo=l(),xb=a("li"),L_e=a("strong"),cXo=o("roberta"),fXo=o(" \u2014 "),$X=a("a"),mXo=o("RobertaForSequenceClassification"),gXo=o(" (RoBERTa model)"),hXo=l(),$b=a("li"),y_e=a("strong"),pXo=o("roformer"),_Xo=o(" \u2014 "),kX=a("a"),uXo=o("RoFormerForSequenceClassification"),bXo=o(" (RoFormer model)"),vXo=l(),kb=a("li"),x_e=a("strong"),FXo=o("squeezebert"),TXo=o(" \u2014 "),SX=a("a"),MXo=o("SqueezeBertForSequenceClassification"),EXo=o(" (SqueezeBERT model)"),CXo=l(),Sb=a("li"),$_e=a("strong"),wXo=o("tapas"),AXo=o(" \u2014 "),RX=a("a"),LXo=o("TapasForSequenceClassification"),yXo=o(" (TAPAS model)"),xXo=l(),Rb=a("li"),k_e=a("strong"),$Xo=o("transfo-xl"),kXo=o(" \u2014 "),PX=a("a"),SXo=o("TransfoXLForSequenceClassification"),RXo=o(" (Transformer-XL model)"),PXo=l(),Pb=a("li"),S_e=a("strong"),BXo=o("xlm"),IXo=o(" \u2014 "),BX=a("a"),NXo=o("XLMForSequenceClassification"),qXo=o(" (XLM model)"),jXo=l(),Bb=a("li"),R_e=a("strong"),DXo=o("xlm-roberta"),GXo=o(" \u2014 "),IX=a("a"),OXo=o("XLMRobertaForSequenceClassification"),VXo=o(" (XLM-RoBERTa model)"),XXo=l(),Ib=a("li"),P_e=a("strong"),zXo=o("xlm-roberta-xl"),QXo=o(" \u2014 "),NX=a("a"),WXo=o("XLMRobertaXLForSequenceClassification"),HXo=o(" (XLM-RoBERTa-XL model)"),UXo=l(),Nb=a("li"),B_e=a("strong"),JXo=o("xlnet"),YXo=o(" \u2014 "),qX=a("a"),KXo=o("XLNetForSequenceClassification"),ZXo=o(" (XLNet model)"),ezo=l(),qb=a("li"),I_e=a("strong"),ozo=o("yoso"),rzo=o(" \u2014 "),jX=a("a"),tzo=o("YosoForSequenceClassification"),azo=o(" (YOSO model)"),nzo=l(),jb=a("p"),szo=o("The model is set in evaluation mode by default using "),N_e=a("code"),lzo=o("model.eval()"),izo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=a("code"),dzo=o("model.train()"),czo=l(),F(Db.$$.fragment),gXe=l(),ad=a("h2"),Gb=a("a"),j_e=a("span"),F(ay.$$.fragment),fzo=l(),D_e=a("span"),mzo=o("AutoModelForMultipleChoice"),hXe=l(),Bo=a("div"),F(ny.$$.fragment),gzo=l(),nd=a("p"),hzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DX=a("a"),pzo=o("from_pretrained()"),_zo=o(" class method or the "),GX=a("a"),uzo=o("from_config()"),bzo=o(` class
method.`),vzo=l(),sy=a("p"),Fzo=o("This class cannot be instantiated directly using "),G_e=a("code"),Tzo=o("__init__()"),Mzo=o(" (throws an error)."),Ezo=l(),gt=a("div"),F(ly.$$.fragment),Czo=l(),O_e=a("p"),wzo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Azo=l(),sd=a("p"),Lzo=o(`Note:
Loading a model from its configuration file does `),V_e=a("strong"),yzo=o("not"),xzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=a("a"),$zo=o("from_pretrained()"),kzo=o(" to load the model weights."),Szo=l(),F(Ob.$$.fragment),Rzo=l(),ro=a("div"),F(iy.$$.fragment),Pzo=l(),X_e=a("p"),Bzo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Izo=l(),Oa=a("p"),Nzo=o("The model class to instantiate is selected based on the "),z_e=a("code"),qzo=o("model_type"),jzo=o(` property of the config object (either
passed as an argument or loaded from `),Q_e=a("code"),Dzo=o("pretrained_model_name_or_path"),Gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=a("code"),Ozo=o("pretrained_model_name_or_path"),Vzo=o(":"),Xzo=l(),Z=a("ul"),Vb=a("li"),H_e=a("strong"),zzo=o("albert"),Qzo=o(" \u2014 "),VX=a("a"),Wzo=o("AlbertForMultipleChoice"),Hzo=o(" (ALBERT model)"),Uzo=l(),Xb=a("li"),U_e=a("strong"),Jzo=o("bert"),Yzo=o(" \u2014 "),XX=a("a"),Kzo=o("BertForMultipleChoice"),Zzo=o(" (BERT model)"),eQo=l(),zb=a("li"),J_e=a("strong"),oQo=o("big_bird"),rQo=o(" \u2014 "),zX=a("a"),tQo=o("BigBirdForMultipleChoice"),aQo=o(" (BigBird model)"),nQo=l(),Qb=a("li"),Y_e=a("strong"),sQo=o("camembert"),lQo=o(" \u2014 "),QX=a("a"),iQo=o("CamembertForMultipleChoice"),dQo=o(" (CamemBERT model)"),cQo=l(),Wb=a("li"),K_e=a("strong"),fQo=o("canine"),mQo=o(" \u2014 "),WX=a("a"),gQo=o("CanineForMultipleChoice"),hQo=o(" (CANINE model)"),pQo=l(),Hb=a("li"),Z_e=a("strong"),_Qo=o("convbert"),uQo=o(" \u2014 "),HX=a("a"),bQo=o("ConvBertForMultipleChoice"),vQo=o(" (ConvBERT model)"),FQo=l(),Ub=a("li"),eue=a("strong"),TQo=o("data2vec-text"),MQo=o(" \u2014 "),UX=a("a"),EQo=o("Data2VecTextForMultipleChoice"),CQo=o(" (Data2VecText model)"),wQo=l(),Jb=a("li"),oue=a("strong"),AQo=o("deberta-v2"),LQo=o(" \u2014 "),JX=a("a"),yQo=o("DebertaV2ForMultipleChoice"),xQo=o(" (DeBERTa-v2 model)"),$Qo=l(),Yb=a("li"),rue=a("strong"),kQo=o("distilbert"),SQo=o(" \u2014 "),YX=a("a"),RQo=o("DistilBertForMultipleChoice"),PQo=o(" (DistilBERT model)"),BQo=l(),Kb=a("li"),tue=a("strong"),IQo=o("electra"),NQo=o(" \u2014 "),KX=a("a"),qQo=o("ElectraForMultipleChoice"),jQo=o(" (ELECTRA model)"),DQo=l(),Zb=a("li"),aue=a("strong"),GQo=o("flaubert"),OQo=o(" \u2014 "),ZX=a("a"),VQo=o("FlaubertForMultipleChoice"),XQo=o(" (FlauBERT model)"),zQo=l(),ev=a("li"),nue=a("strong"),QQo=o("fnet"),WQo=o(" \u2014 "),ez=a("a"),HQo=o("FNetForMultipleChoice"),UQo=o(" (FNet model)"),JQo=l(),ov=a("li"),sue=a("strong"),YQo=o("funnel"),KQo=o(" \u2014 "),oz=a("a"),ZQo=o("FunnelForMultipleChoice"),eWo=o(" (Funnel Transformer model)"),oWo=l(),rv=a("li"),lue=a("strong"),rWo=o("ibert"),tWo=o(" \u2014 "),rz=a("a"),aWo=o("IBertForMultipleChoice"),nWo=o(" (I-BERT model)"),sWo=l(),tv=a("li"),iue=a("strong"),lWo=o("longformer"),iWo=o(" \u2014 "),tz=a("a"),dWo=o("LongformerForMultipleChoice"),cWo=o(" (Longformer model)"),fWo=l(),av=a("li"),due=a("strong"),mWo=o("megatron-bert"),gWo=o(" \u2014 "),az=a("a"),hWo=o("MegatronBertForMultipleChoice"),pWo=o(" (Megatron-BERT model)"),_Wo=l(),nv=a("li"),cue=a("strong"),uWo=o("mobilebert"),bWo=o(" \u2014 "),nz=a("a"),vWo=o("MobileBertForMultipleChoice"),FWo=o(" (MobileBERT model)"),TWo=l(),sv=a("li"),fue=a("strong"),MWo=o("mpnet"),EWo=o(" \u2014 "),sz=a("a"),CWo=o("MPNetForMultipleChoice"),wWo=o(" (MPNet model)"),AWo=l(),lv=a("li"),mue=a("strong"),LWo=o("nezha"),yWo=o(" \u2014 "),lz=a("a"),xWo=o("NezhaForMultipleChoice"),$Wo=o(" (Nezha model)"),kWo=l(),iv=a("li"),gue=a("strong"),SWo=o("nystromformer"),RWo=o(" \u2014 "),iz=a("a"),PWo=o("NystromformerForMultipleChoice"),BWo=o(" (Nystr\xF6mformer model)"),IWo=l(),dv=a("li"),hue=a("strong"),NWo=o("qdqbert"),qWo=o(" \u2014 "),dz=a("a"),jWo=o("QDQBertForMultipleChoice"),DWo=o(" (QDQBert model)"),GWo=l(),cv=a("li"),pue=a("strong"),OWo=o("rembert"),VWo=o(" \u2014 "),cz=a("a"),XWo=o("RemBertForMultipleChoice"),zWo=o(" (RemBERT model)"),QWo=l(),fv=a("li"),_ue=a("strong"),WWo=o("roberta"),HWo=o(" \u2014 "),fz=a("a"),UWo=o("RobertaForMultipleChoice"),JWo=o(" (RoBERTa model)"),YWo=l(),mv=a("li"),uue=a("strong"),KWo=o("roformer"),ZWo=o(" \u2014 "),mz=a("a"),eHo=o("RoFormerForMultipleChoice"),oHo=o(" (RoFormer model)"),rHo=l(),gv=a("li"),bue=a("strong"),tHo=o("squeezebert"),aHo=o(" \u2014 "),gz=a("a"),nHo=o("SqueezeBertForMultipleChoice"),sHo=o(" (SqueezeBERT model)"),lHo=l(),hv=a("li"),vue=a("strong"),iHo=o("xlm"),dHo=o(" \u2014 "),hz=a("a"),cHo=o("XLMForMultipleChoice"),fHo=o(" (XLM model)"),mHo=l(),pv=a("li"),Fue=a("strong"),gHo=o("xlm-roberta"),hHo=o(" \u2014 "),pz=a("a"),pHo=o("XLMRobertaForMultipleChoice"),_Ho=o(" (XLM-RoBERTa model)"),uHo=l(),_v=a("li"),Tue=a("strong"),bHo=o("xlm-roberta-xl"),vHo=o(" \u2014 "),_z=a("a"),FHo=o("XLMRobertaXLForMultipleChoice"),THo=o(" (XLM-RoBERTa-XL model)"),MHo=l(),uv=a("li"),Mue=a("strong"),EHo=o("xlnet"),CHo=o(" \u2014 "),uz=a("a"),wHo=o("XLNetForMultipleChoice"),AHo=o(" (XLNet model)"),LHo=l(),bv=a("li"),Eue=a("strong"),yHo=o("yoso"),xHo=o(" \u2014 "),bz=a("a"),$Ho=o("YosoForMultipleChoice"),kHo=o(" (YOSO model)"),SHo=l(),vv=a("p"),RHo=o("The model is set in evaluation mode by default using "),Cue=a("code"),PHo=o("model.eval()"),BHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=a("code"),IHo=o("model.train()"),NHo=l(),F(Fv.$$.fragment),pXe=l(),ld=a("h2"),Tv=a("a"),Aue=a("span"),F(dy.$$.fragment),qHo=l(),Lue=a("span"),jHo=o("AutoModelForNextSentencePrediction"),_Xe=l(),Io=a("div"),F(cy.$$.fragment),DHo=l(),id=a("p"),GHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vz=a("a"),OHo=o("from_pretrained()"),VHo=o(" class method or the "),Fz=a("a"),XHo=o("from_config()"),zHo=o(` class
method.`),QHo=l(),fy=a("p"),WHo=o("This class cannot be instantiated directly using "),yue=a("code"),HHo=o("__init__()"),UHo=o(" (throws an error)."),JHo=l(),ht=a("div"),F(my.$$.fragment),YHo=l(),xue=a("p"),KHo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ZHo=l(),dd=a("p"),eUo=o(`Note:
Loading a model from its configuration file does `),$ue=a("strong"),oUo=o("not"),rUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),tUo=o("from_pretrained()"),aUo=o(" to load the model weights."),nUo=l(),F(Mv.$$.fragment),sUo=l(),to=a("div"),F(gy.$$.fragment),lUo=l(),kue=a("p"),iUo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dUo=l(),Va=a("p"),cUo=o("The model class to instantiate is selected based on the "),Sue=a("code"),fUo=o("model_type"),mUo=o(` property of the config object (either
passed as an argument or loaded from `),Rue=a("code"),gUo=o("pretrained_model_name_or_path"),hUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=a("code"),pUo=o("pretrained_model_name_or_path"),_Uo=o(":"),uUo=l(),No=a("ul"),Ev=a("li"),Bue=a("strong"),bUo=o("bert"),vUo=o(" \u2014 "),Mz=a("a"),FUo=o("BertForNextSentencePrediction"),TUo=o(" (BERT model)"),MUo=l(),Cv=a("li"),Iue=a("strong"),EUo=o("fnet"),CUo=o(" \u2014 "),Ez=a("a"),wUo=o("FNetForNextSentencePrediction"),AUo=o(" (FNet model)"),LUo=l(),wv=a("li"),Nue=a("strong"),yUo=o("megatron-bert"),xUo=o(" \u2014 "),Cz=a("a"),$Uo=o("MegatronBertForNextSentencePrediction"),kUo=o(" (Megatron-BERT model)"),SUo=l(),Av=a("li"),que=a("strong"),RUo=o("mobilebert"),PUo=o(" \u2014 "),wz=a("a"),BUo=o("MobileBertForNextSentencePrediction"),IUo=o(" (MobileBERT model)"),NUo=l(),Lv=a("li"),jue=a("strong"),qUo=o("nezha"),jUo=o(" \u2014 "),Az=a("a"),DUo=o("NezhaForNextSentencePrediction"),GUo=o(" (Nezha model)"),OUo=l(),yv=a("li"),Due=a("strong"),VUo=o("qdqbert"),XUo=o(" \u2014 "),Lz=a("a"),zUo=o("QDQBertForNextSentencePrediction"),QUo=o(" (QDQBert model)"),WUo=l(),xv=a("p"),HUo=o("The model is set in evaluation mode by default using "),Gue=a("code"),UUo=o("model.eval()"),JUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=a("code"),YUo=o("model.train()"),KUo=l(),F($v.$$.fragment),uXe=l(),cd=a("h2"),kv=a("a"),Vue=a("span"),F(hy.$$.fragment),ZUo=l(),Xue=a("span"),eJo=o("AutoModelForTokenClassification"),bXe=l(),qo=a("div"),F(py.$$.fragment),oJo=l(),fd=a("p"),rJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yz=a("a"),tJo=o("from_pretrained()"),aJo=o(" class method or the "),xz=a("a"),nJo=o("from_config()"),sJo=o(` class
method.`),lJo=l(),_y=a("p"),iJo=o("This class cannot be instantiated directly using "),zue=a("code"),dJo=o("__init__()"),cJo=o(" (throws an error)."),fJo=l(),pt=a("div"),F(uy.$$.fragment),mJo=l(),Que=a("p"),gJo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),hJo=l(),md=a("p"),pJo=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),_Jo=o("not"),uJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=a("a"),bJo=o("from_pretrained()"),vJo=o(" to load the model weights."),FJo=l(),F(Sv.$$.fragment),TJo=l(),ao=a("div"),F(by.$$.fragment),MJo=l(),Hue=a("p"),EJo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),CJo=l(),Xa=a("p"),wJo=o("The model class to instantiate is selected based on the "),Uue=a("code"),AJo=o("model_type"),LJo=o(` property of the config object (either
passed as an argument or loaded from `),Jue=a("code"),yJo=o("pretrained_model_name_or_path"),xJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=a("code"),$Jo=o("pretrained_model_name_or_path"),kJo=o(":"),SJo=l(),U=a("ul"),Rv=a("li"),Kue=a("strong"),RJo=o("albert"),PJo=o(" \u2014 "),kz=a("a"),BJo=o("AlbertForTokenClassification"),IJo=o(" (ALBERT model)"),NJo=l(),Pv=a("li"),Zue=a("strong"),qJo=o("bert"),jJo=o(" \u2014 "),Sz=a("a"),DJo=o("BertForTokenClassification"),GJo=o(" (BERT model)"),OJo=l(),Bv=a("li"),e2e=a("strong"),VJo=o("big_bird"),XJo=o(" \u2014 "),Rz=a("a"),zJo=o("BigBirdForTokenClassification"),QJo=o(" (BigBird model)"),WJo=l(),Iv=a("li"),o2e=a("strong"),HJo=o("bloom"),UJo=o(" \u2014 "),Pz=a("a"),JJo=o("BloomForTokenClassification"),YJo=o(" (BLOOM model)"),KJo=l(),Nv=a("li"),r2e=a("strong"),ZJo=o("camembert"),eYo=o(" \u2014 "),Bz=a("a"),oYo=o("CamembertForTokenClassification"),rYo=o(" (CamemBERT model)"),tYo=l(),qv=a("li"),t2e=a("strong"),aYo=o("canine"),nYo=o(" \u2014 "),Iz=a("a"),sYo=o("CanineForTokenClassification"),lYo=o(" (CANINE model)"),iYo=l(),jv=a("li"),a2e=a("strong"),dYo=o("convbert"),cYo=o(" \u2014 "),Nz=a("a"),fYo=o("ConvBertForTokenClassification"),mYo=o(" (ConvBERT model)"),gYo=l(),Dv=a("li"),n2e=a("strong"),hYo=o("data2vec-text"),pYo=o(" \u2014 "),qz=a("a"),_Yo=o("Data2VecTextForTokenClassification"),uYo=o(" (Data2VecText model)"),bYo=l(),Gv=a("li"),s2e=a("strong"),vYo=o("deberta"),FYo=o(" \u2014 "),jz=a("a"),TYo=o("DebertaForTokenClassification"),MYo=o(" (DeBERTa model)"),EYo=l(),Ov=a("li"),l2e=a("strong"),CYo=o("deberta-v2"),wYo=o(" \u2014 "),Dz=a("a"),AYo=o("DebertaV2ForTokenClassification"),LYo=o(" (DeBERTa-v2 model)"),yYo=l(),Vv=a("li"),i2e=a("strong"),xYo=o("distilbert"),$Yo=o(" \u2014 "),Gz=a("a"),kYo=o("DistilBertForTokenClassification"),SYo=o(" (DistilBERT model)"),RYo=l(),Xv=a("li"),d2e=a("strong"),PYo=o("electra"),BYo=o(" \u2014 "),Oz=a("a"),IYo=o("ElectraForTokenClassification"),NYo=o(" (ELECTRA model)"),qYo=l(),zv=a("li"),c2e=a("strong"),jYo=o("flaubert"),DYo=o(" \u2014 "),Vz=a("a"),GYo=o("FlaubertForTokenClassification"),OYo=o(" (FlauBERT model)"),VYo=l(),Qv=a("li"),f2e=a("strong"),XYo=o("fnet"),zYo=o(" \u2014 "),Xz=a("a"),QYo=o("FNetForTokenClassification"),WYo=o(" (FNet model)"),HYo=l(),Wv=a("li"),m2e=a("strong"),UYo=o("funnel"),JYo=o(" \u2014 "),zz=a("a"),YYo=o("FunnelForTokenClassification"),KYo=o(" (Funnel Transformer model)"),ZYo=l(),Hv=a("li"),g2e=a("strong"),eKo=o("gpt2"),oKo=o(" \u2014 "),Qz=a("a"),rKo=o("GPT2ForTokenClassification"),tKo=o(" (OpenAI GPT-2 model)"),aKo=l(),Uv=a("li"),h2e=a("strong"),nKo=o("ibert"),sKo=o(" \u2014 "),Wz=a("a"),lKo=o("IBertForTokenClassification"),iKo=o(" (I-BERT model)"),dKo=l(),Jv=a("li"),p2e=a("strong"),cKo=o("layoutlm"),fKo=o(" \u2014 "),Hz=a("a"),mKo=o("LayoutLMForTokenClassification"),gKo=o(" (LayoutLM model)"),hKo=l(),Yv=a("li"),_2e=a("strong"),pKo=o("layoutlmv2"),_Ko=o(" \u2014 "),Uz=a("a"),uKo=o("LayoutLMv2ForTokenClassification"),bKo=o(" (LayoutLMv2 model)"),vKo=l(),Kv=a("li"),u2e=a("strong"),FKo=o("layoutlmv3"),TKo=o(" \u2014 "),Jz=a("a"),MKo=o("LayoutLMv3ForTokenClassification"),EKo=o(" (LayoutLMv3 model)"),CKo=l(),Zv=a("li"),b2e=a("strong"),wKo=o("longformer"),AKo=o(" \u2014 "),Yz=a("a"),LKo=o("LongformerForTokenClassification"),yKo=o(" (Longformer model)"),xKo=l(),eF=a("li"),v2e=a("strong"),$Ko=o("megatron-bert"),kKo=o(" \u2014 "),Kz=a("a"),SKo=o("MegatronBertForTokenClassification"),RKo=o(" (Megatron-BERT model)"),PKo=l(),oF=a("li"),F2e=a("strong"),BKo=o("mobilebert"),IKo=o(" \u2014 "),Zz=a("a"),NKo=o("MobileBertForTokenClassification"),qKo=o(" (MobileBERT model)"),jKo=l(),rF=a("li"),T2e=a("strong"),DKo=o("mpnet"),GKo=o(" \u2014 "),eQ=a("a"),OKo=o("MPNetForTokenClassification"),VKo=o(" (MPNet model)"),XKo=l(),tF=a("li"),M2e=a("strong"),zKo=o("nezha"),QKo=o(" \u2014 "),oQ=a("a"),WKo=o("NezhaForTokenClassification"),HKo=o(" (Nezha model)"),UKo=l(),aF=a("li"),E2e=a("strong"),JKo=o("nystromformer"),YKo=o(" \u2014 "),rQ=a("a"),KKo=o("NystromformerForTokenClassification"),ZKo=o(" (Nystr\xF6mformer model)"),eZo=l(),nF=a("li"),C2e=a("strong"),oZo=o("qdqbert"),rZo=o(" \u2014 "),tQ=a("a"),tZo=o("QDQBertForTokenClassification"),aZo=o(" (QDQBert model)"),nZo=l(),sF=a("li"),w2e=a("strong"),sZo=o("rembert"),lZo=o(" \u2014 "),aQ=a("a"),iZo=o("RemBertForTokenClassification"),dZo=o(" (RemBERT model)"),cZo=l(),lF=a("li"),A2e=a("strong"),fZo=o("roberta"),mZo=o(" \u2014 "),nQ=a("a"),gZo=o("RobertaForTokenClassification"),hZo=o(" (RoBERTa model)"),pZo=l(),iF=a("li"),L2e=a("strong"),_Zo=o("roformer"),uZo=o(" \u2014 "),sQ=a("a"),bZo=o("RoFormerForTokenClassification"),vZo=o(" (RoFormer model)"),FZo=l(),dF=a("li"),y2e=a("strong"),TZo=o("squeezebert"),MZo=o(" \u2014 "),lQ=a("a"),EZo=o("SqueezeBertForTokenClassification"),CZo=o(" (SqueezeBERT model)"),wZo=l(),cF=a("li"),x2e=a("strong"),AZo=o("xlm"),LZo=o(" \u2014 "),iQ=a("a"),yZo=o("XLMForTokenClassification"),xZo=o(" (XLM model)"),$Zo=l(),fF=a("li"),$2e=a("strong"),kZo=o("xlm-roberta"),SZo=o(" \u2014 "),dQ=a("a"),RZo=o("XLMRobertaForTokenClassification"),PZo=o(" (XLM-RoBERTa model)"),BZo=l(),mF=a("li"),k2e=a("strong"),IZo=o("xlm-roberta-xl"),NZo=o(" \u2014 "),cQ=a("a"),qZo=o("XLMRobertaXLForTokenClassification"),jZo=o(" (XLM-RoBERTa-XL model)"),DZo=l(),gF=a("li"),S2e=a("strong"),GZo=o("xlnet"),OZo=o(" \u2014 "),fQ=a("a"),VZo=o("XLNetForTokenClassification"),XZo=o(" (XLNet model)"),zZo=l(),hF=a("li"),R2e=a("strong"),QZo=o("yoso"),WZo=o(" \u2014 "),mQ=a("a"),HZo=o("YosoForTokenClassification"),UZo=o(" (YOSO model)"),JZo=l(),pF=a("p"),YZo=o("The model is set in evaluation mode by default using "),P2e=a("code"),KZo=o("model.eval()"),ZZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=a("code"),eer=o("model.train()"),oer=l(),F(_F.$$.fragment),vXe=l(),gd=a("h2"),uF=a("a"),I2e=a("span"),F(vy.$$.fragment),rer=l(),N2e=a("span"),ter=o("AutoModelForQuestionAnswering"),FXe=l(),jo=a("div"),F(Fy.$$.fragment),aer=l(),hd=a("p"),ner=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=a("a"),ser=o("from_pretrained()"),ler=o(" class method or the "),hQ=a("a"),ier=o("from_config()"),der=o(` class
method.`),cer=l(),Ty=a("p"),fer=o("This class cannot be instantiated directly using "),q2e=a("code"),mer=o("__init__()"),ger=o(" (throws an error)."),her=l(),_t=a("div"),F(My.$$.fragment),per=l(),j2e=a("p"),_er=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),uer=l(),pd=a("p"),ber=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),ver=o("not"),Fer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=a("a"),Ter=o("from_pretrained()"),Mer=o(" to load the model weights."),Eer=l(),F(bF.$$.fragment),Cer=l(),no=a("div"),F(Ey.$$.fragment),wer=l(),G2e=a("p"),Aer=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ler=l(),za=a("p"),yer=o("The model class to instantiate is selected based on the "),O2e=a("code"),xer=o("model_type"),$er=o(` property of the config object (either
passed as an argument or loaded from `),V2e=a("code"),ker=o("pretrained_model_name_or_path"),Ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=a("code"),Rer=o("pretrained_model_name_or_path"),Per=o(":"),Ber=l(),V=a("ul"),vF=a("li"),z2e=a("strong"),Ier=o("albert"),Ner=o(" \u2014 "),_Q=a("a"),qer=o("AlbertForQuestionAnswering"),jer=o(" (ALBERT model)"),Der=l(),FF=a("li"),Q2e=a("strong"),Ger=o("bart"),Oer=o(" \u2014 "),uQ=a("a"),Ver=o("BartForQuestionAnswering"),Xer=o(" (BART model)"),zer=l(),TF=a("li"),W2e=a("strong"),Qer=o("bert"),Wer=o(" \u2014 "),bQ=a("a"),Her=o("BertForQuestionAnswering"),Uer=o(" (BERT model)"),Jer=l(),MF=a("li"),H2e=a("strong"),Yer=o("big_bird"),Ker=o(" \u2014 "),vQ=a("a"),Zer=o("BigBirdForQuestionAnswering"),eor=o(" (BigBird model)"),oor=l(),EF=a("li"),U2e=a("strong"),ror=o("bigbird_pegasus"),tor=o(" \u2014 "),FQ=a("a"),aor=o("BigBirdPegasusForQuestionAnswering"),nor=o(" (BigBird-Pegasus model)"),sor=l(),CF=a("li"),J2e=a("strong"),lor=o("camembert"),ior=o(" \u2014 "),TQ=a("a"),dor=o("CamembertForQuestionAnswering"),cor=o(" (CamemBERT model)"),mor=l(),wF=a("li"),Y2e=a("strong"),gor=o("canine"),hor=o(" \u2014 "),MQ=a("a"),por=o("CanineForQuestionAnswering"),_or=o(" (CANINE model)"),uor=l(),AF=a("li"),K2e=a("strong"),bor=o("convbert"),vor=o(" \u2014 "),EQ=a("a"),For=o("ConvBertForQuestionAnswering"),Tor=o(" (ConvBERT model)"),Mor=l(),LF=a("li"),Z2e=a("strong"),Eor=o("data2vec-text"),Cor=o(" \u2014 "),CQ=a("a"),wor=o("Data2VecTextForQuestionAnswering"),Aor=o(" (Data2VecText model)"),Lor=l(),yF=a("li"),e1e=a("strong"),yor=o("deberta"),xor=o(" \u2014 "),wQ=a("a"),$or=o("DebertaForQuestionAnswering"),kor=o(" (DeBERTa model)"),Sor=l(),xF=a("li"),o1e=a("strong"),Ror=o("deberta-v2"),Por=o(" \u2014 "),AQ=a("a"),Bor=o("DebertaV2ForQuestionAnswering"),Ior=o(" (DeBERTa-v2 model)"),Nor=l(),$F=a("li"),r1e=a("strong"),qor=o("distilbert"),jor=o(" \u2014 "),LQ=a("a"),Dor=o("DistilBertForQuestionAnswering"),Gor=o(" (DistilBERT model)"),Oor=l(),kF=a("li"),t1e=a("strong"),Vor=o("electra"),Xor=o(" \u2014 "),yQ=a("a"),zor=o("ElectraForQuestionAnswering"),Qor=o(" (ELECTRA model)"),Wor=l(),SF=a("li"),a1e=a("strong"),Hor=o("flaubert"),Uor=o(" \u2014 "),xQ=a("a"),Jor=o("FlaubertForQuestionAnsweringSimple"),Yor=o(" (FlauBERT model)"),Kor=l(),RF=a("li"),n1e=a("strong"),Zor=o("fnet"),err=o(" \u2014 "),$Q=a("a"),orr=o("FNetForQuestionAnswering"),rrr=o(" (FNet model)"),trr=l(),PF=a("li"),s1e=a("strong"),arr=o("funnel"),nrr=o(" \u2014 "),kQ=a("a"),srr=o("FunnelForQuestionAnswering"),lrr=o(" (Funnel Transformer model)"),irr=l(),BF=a("li"),l1e=a("strong"),drr=o("gptj"),crr=o(" \u2014 "),SQ=a("a"),frr=o("GPTJForQuestionAnswering"),mrr=o(" (GPT-J model)"),grr=l(),IF=a("li"),i1e=a("strong"),hrr=o("ibert"),prr=o(" \u2014 "),RQ=a("a"),_rr=o("IBertForQuestionAnswering"),urr=o(" (I-BERT model)"),brr=l(),NF=a("li"),d1e=a("strong"),vrr=o("layoutlmv2"),Frr=o(" \u2014 "),PQ=a("a"),Trr=o("LayoutLMv2ForQuestionAnswering"),Mrr=o(" (LayoutLMv2 model)"),Err=l(),qF=a("li"),c1e=a("strong"),Crr=o("layoutlmv3"),wrr=o(" \u2014 "),BQ=a("a"),Arr=o("LayoutLMv3ForQuestionAnswering"),Lrr=o(" (LayoutLMv3 model)"),yrr=l(),jF=a("li"),f1e=a("strong"),xrr=o("led"),$rr=o(" \u2014 "),IQ=a("a"),krr=o("LEDForQuestionAnswering"),Srr=o(" (LED model)"),Rrr=l(),DF=a("li"),m1e=a("strong"),Prr=o("longformer"),Brr=o(" \u2014 "),NQ=a("a"),Irr=o("LongformerForQuestionAnswering"),Nrr=o(" (Longformer model)"),qrr=l(),GF=a("li"),g1e=a("strong"),jrr=o("lxmert"),Drr=o(" \u2014 "),qQ=a("a"),Grr=o("LxmertForQuestionAnswering"),Orr=o(" (LXMERT model)"),Vrr=l(),OF=a("li"),h1e=a("strong"),Xrr=o("mbart"),zrr=o(" \u2014 "),jQ=a("a"),Qrr=o("MBartForQuestionAnswering"),Wrr=o(" (mBART model)"),Hrr=l(),VF=a("li"),p1e=a("strong"),Urr=o("megatron-bert"),Jrr=o(" \u2014 "),DQ=a("a"),Yrr=o("MegatronBertForQuestionAnswering"),Krr=o(" (Megatron-BERT model)"),Zrr=l(),XF=a("li"),_1e=a("strong"),etr=o("mobilebert"),otr=o(" \u2014 "),GQ=a("a"),rtr=o("MobileBertForQuestionAnswering"),ttr=o(" (MobileBERT model)"),atr=l(),zF=a("li"),u1e=a("strong"),ntr=o("mpnet"),str=o(" \u2014 "),OQ=a("a"),ltr=o("MPNetForQuestionAnswering"),itr=o(" (MPNet model)"),dtr=l(),QF=a("li"),b1e=a("strong"),ctr=o("mvp"),ftr=o(" \u2014 "),VQ=a("a"),mtr=o("MvpForQuestionAnswering"),gtr=o(" (MVP model)"),htr=l(),WF=a("li"),v1e=a("strong"),ptr=o("nezha"),_tr=o(" \u2014 "),XQ=a("a"),utr=o("NezhaForQuestionAnswering"),btr=o(" (Nezha model)"),vtr=l(),HF=a("li"),F1e=a("strong"),Ftr=o("nystromformer"),Ttr=o(" \u2014 "),zQ=a("a"),Mtr=o("NystromformerForQuestionAnswering"),Etr=o(" (Nystr\xF6mformer model)"),Ctr=l(),UF=a("li"),T1e=a("strong"),wtr=o("qdqbert"),Atr=o(" \u2014 "),QQ=a("a"),Ltr=o("QDQBertForQuestionAnswering"),ytr=o(" (QDQBert model)"),xtr=l(),JF=a("li"),M1e=a("strong"),$tr=o("reformer"),ktr=o(" \u2014 "),WQ=a("a"),Str=o("ReformerForQuestionAnswering"),Rtr=o(" (Reformer model)"),Ptr=l(),YF=a("li"),E1e=a("strong"),Btr=o("rembert"),Itr=o(" \u2014 "),HQ=a("a"),Ntr=o("RemBertForQuestionAnswering"),qtr=o(" (RemBERT model)"),jtr=l(),KF=a("li"),C1e=a("strong"),Dtr=o("roberta"),Gtr=o(" \u2014 "),UQ=a("a"),Otr=o("RobertaForQuestionAnswering"),Vtr=o(" (RoBERTa model)"),Xtr=l(),ZF=a("li"),w1e=a("strong"),ztr=o("roformer"),Qtr=o(" \u2014 "),JQ=a("a"),Wtr=o("RoFormerForQuestionAnswering"),Htr=o(" (RoFormer model)"),Utr=l(),eT=a("li"),A1e=a("strong"),Jtr=o("splinter"),Ytr=o(" \u2014 "),YQ=a("a"),Ktr=o("SplinterForQuestionAnswering"),Ztr=o(" (Splinter model)"),ear=l(),oT=a("li"),L1e=a("strong"),oar=o("squeezebert"),rar=o(" \u2014 "),KQ=a("a"),tar=o("SqueezeBertForQuestionAnswering"),aar=o(" (SqueezeBERT model)"),nar=l(),rT=a("li"),y1e=a("strong"),sar=o("xlm"),lar=o(" \u2014 "),ZQ=a("a"),iar=o("XLMForQuestionAnsweringSimple"),dar=o(" (XLM model)"),car=l(),tT=a("li"),x1e=a("strong"),far=o("xlm-roberta"),mar=o(" \u2014 "),eW=a("a"),gar=o("XLMRobertaForQuestionAnswering"),har=o(" (XLM-RoBERTa model)"),par=l(),aT=a("li"),$1e=a("strong"),_ar=o("xlm-roberta-xl"),uar=o(" \u2014 "),oW=a("a"),bar=o("XLMRobertaXLForQuestionAnswering"),Far=o(" (XLM-RoBERTa-XL model)"),Tar=l(),nT=a("li"),k1e=a("strong"),Mar=o("xlnet"),Ear=o(" \u2014 "),rW=a("a"),Car=o("XLNetForQuestionAnsweringSimple"),war=o(" (XLNet model)"),Aar=l(),sT=a("li"),S1e=a("strong"),Lar=o("yoso"),yar=o(" \u2014 "),tW=a("a"),xar=o("YosoForQuestionAnswering"),$ar=o(" (YOSO model)"),kar=l(),lT=a("p"),Sar=o("The model is set in evaluation mode by default using "),R1e=a("code"),Rar=o("model.eval()"),Par=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),Bar=o("model.train()"),Iar=l(),F(iT.$$.fragment),TXe=l(),_d=a("h2"),dT=a("a"),B1e=a("span"),F(Cy.$$.fragment),Nar=l(),I1e=a("span"),qar=o("AutoModelForTableQuestionAnswering"),MXe=l(),Do=a("div"),F(wy.$$.fragment),jar=l(),ud=a("p"),Dar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aW=a("a"),Gar=o("from_pretrained()"),Oar=o(" class method or the "),nW=a("a"),Var=o("from_config()"),Xar=o(` class
method.`),zar=l(),Ay=a("p"),Qar=o("This class cannot be instantiated directly using "),N1e=a("code"),War=o("__init__()"),Har=o(" (throws an error)."),Uar=l(),ut=a("div"),F(Ly.$$.fragment),Jar=l(),q1e=a("p"),Yar=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Kar=l(),bd=a("p"),Zar=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),enr=o("not"),onr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),rnr=o("from_pretrained()"),tnr=o(" to load the model weights."),anr=l(),F(cT.$$.fragment),nnr=l(),so=a("div"),F(yy.$$.fragment),snr=l(),D1e=a("p"),lnr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),inr=l(),Qa=a("p"),dnr=o("The model class to instantiate is selected based on the "),G1e=a("code"),cnr=o("model_type"),fnr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),mnr=o("pretrained_model_name_or_path"),gnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),hnr=o("pretrained_model_name_or_path"),pnr=o(":"),_nr=l(),X1e=a("ul"),fT=a("li"),z1e=a("strong"),unr=o("tapas"),bnr=o(" \u2014 "),lW=a("a"),vnr=o("TapasForQuestionAnswering"),Fnr=o(" (TAPAS model)"),Tnr=l(),mT=a("p"),Mnr=o("The model is set in evaluation mode by default using "),Q1e=a("code"),Enr=o("model.eval()"),Cnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=a("code"),wnr=o("model.train()"),Anr=l(),F(gT.$$.fragment),EXe=l(),vd=a("h2"),hT=a("a"),H1e=a("span"),F(xy.$$.fragment),Lnr=l(),U1e=a("span"),ynr=o("AutoModelForImageClassification"),CXe=l(),Go=a("div"),F($y.$$.fragment),xnr=l(),Fd=a("p"),$nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iW=a("a"),knr=o("from_pretrained()"),Snr=o(" class method or the "),dW=a("a"),Rnr=o("from_config()"),Pnr=o(` class
method.`),Bnr=l(),ky=a("p"),Inr=o("This class cannot be instantiated directly using "),J1e=a("code"),Nnr=o("__init__()"),qnr=o(" (throws an error)."),jnr=l(),bt=a("div"),F(Sy.$$.fragment),Dnr=l(),Y1e=a("p"),Gnr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Onr=l(),Td=a("p"),Vnr=o(`Note:
Loading a model from its configuration file does `),K1e=a("strong"),Xnr=o("not"),znr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Qnr=o("from_pretrained()"),Wnr=o(" to load the model weights."),Hnr=l(),F(pT.$$.fragment),Unr=l(),lo=a("div"),F(Ry.$$.fragment),Jnr=l(),Z1e=a("p"),Ynr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Knr=l(),Wa=a("p"),Znr=o("The model class to instantiate is selected based on the "),e4e=a("code"),esr=o("model_type"),osr=o(` property of the config object (either
passed as an argument or loaded from `),o4e=a("code"),rsr=o("pretrained_model_name_or_path"),tsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=a("code"),asr=o("pretrained_model_name_or_path"),nsr=o(":"),ssr=l(),ve=a("ul"),_T=a("li"),t4e=a("strong"),lsr=o("beit"),isr=o(" \u2014 "),fW=a("a"),dsr=o("BeitForImageClassification"),csr=o(" (BEiT model)"),fsr=l(),uT=a("li"),a4e=a("strong"),msr=o("convnext"),gsr=o(" \u2014 "),mW=a("a"),hsr=o("ConvNextForImageClassification"),psr=o(" (ConvNeXT model)"),_sr=l(),bT=a("li"),n4e=a("strong"),usr=o("cvt"),bsr=o(" \u2014 "),gW=a("a"),vsr=o("CvtForImageClassification"),Fsr=o(" (CvT model)"),Tsr=l(),vT=a("li"),s4e=a("strong"),Msr=o("data2vec-vision"),Esr=o(" \u2014 "),hW=a("a"),Csr=o("Data2VecVisionForImageClassification"),wsr=o(" (Data2VecVision model)"),Asr=l(),Hs=a("li"),l4e=a("strong"),Lsr=o("deit"),ysr=o(" \u2014 "),pW=a("a"),xsr=o("DeiTForImageClassification"),$sr=o(" or "),_W=a("a"),ksr=o("DeiTForImageClassificationWithTeacher"),Ssr=o(" (DeiT model)"),Rsr=l(),FT=a("li"),i4e=a("strong"),Psr=o("imagegpt"),Bsr=o(" \u2014 "),uW=a("a"),Isr=o("ImageGPTForImageClassification"),Nsr=o(" (ImageGPT model)"),qsr=l(),Us=a("li"),d4e=a("strong"),jsr=o("levit"),Dsr=o(" \u2014 "),bW=a("a"),Gsr=o("LevitForImageClassification"),Osr=o(" or "),vW=a("a"),Vsr=o("LevitForImageClassificationWithTeacher"),Xsr=o(" (LeViT model)"),zsr=l(),TT=a("li"),c4e=a("strong"),Qsr=o("mobilevit"),Wsr=o(" \u2014 "),FW=a("a"),Hsr=o("MobileViTForImageClassification"),Usr=o(" (MobileViT model)"),Jsr=l(),vt=a("li"),f4e=a("strong"),Ysr=o("perceiver"),Ksr=o(" \u2014 "),TW=a("a"),Zsr=o("PerceiverForImageClassificationLearned"),elr=o(" or "),MW=a("a"),olr=o("PerceiverForImageClassificationFourier"),rlr=o(" or "),EW=a("a"),tlr=o("PerceiverForImageClassificationConvProcessing"),alr=o(" (Perceiver model)"),nlr=l(),MT=a("li"),m4e=a("strong"),slr=o("poolformer"),llr=o(" \u2014 "),CW=a("a"),ilr=o("PoolFormerForImageClassification"),dlr=o(" (PoolFormer model)"),clr=l(),ET=a("li"),g4e=a("strong"),flr=o("regnet"),mlr=o(" \u2014 "),wW=a("a"),glr=o("RegNetForImageClassification"),hlr=o(" (RegNet model)"),plr=l(),CT=a("li"),h4e=a("strong"),_lr=o("resnet"),ulr=o(" \u2014 "),AW=a("a"),blr=o("ResNetForImageClassification"),vlr=o(" (ResNet model)"),Flr=l(),wT=a("li"),p4e=a("strong"),Tlr=o("segformer"),Mlr=o(" \u2014 "),LW=a("a"),Elr=o("SegformerForImageClassification"),Clr=o(" (SegFormer model)"),wlr=l(),AT=a("li"),_4e=a("strong"),Alr=o("swin"),Llr=o(" \u2014 "),yW=a("a"),ylr=o("SwinForImageClassification"),xlr=o(" (Swin Transformer model)"),$lr=l(),LT=a("li"),u4e=a("strong"),klr=o("van"),Slr=o(" \u2014 "),xW=a("a"),Rlr=o("VanForImageClassification"),Plr=o(" (VAN model)"),Blr=l(),yT=a("li"),b4e=a("strong"),Ilr=o("vit"),Nlr=o(" \u2014 "),$W=a("a"),qlr=o("ViTForImageClassification"),jlr=o(" (ViT model)"),Dlr=l(),xT=a("p"),Glr=o("The model is set in evaluation mode by default using "),v4e=a("code"),Olr=o("model.eval()"),Vlr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F4e=a("code"),Xlr=o("model.train()"),zlr=l(),F($T.$$.fragment),wXe=l(),Md=a("h2"),kT=a("a"),T4e=a("span"),F(Py.$$.fragment),Qlr=l(),M4e=a("span"),Wlr=o("AutoModelForVision2Seq"),AXe=l(),Oo=a("div"),F(By.$$.fragment),Hlr=l(),Ed=a("p"),Ulr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" class method or the "),SW=a("a"),Klr=o("from_config()"),Zlr=o(` class
method.`),eir=l(),Iy=a("p"),oir=o("This class cannot be instantiated directly using "),E4e=a("code"),rir=o("__init__()"),tir=o(" (throws an error)."),air=l(),Ft=a("div"),F(Ny.$$.fragment),nir=l(),C4e=a("p"),sir=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lir=l(),Cd=a("p"),iir=o(`Note:
Loading a model from its configuration file does `),w4e=a("strong"),dir=o("not"),cir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),fir=o("from_pretrained()"),mir=o(" to load the model weights."),gir=l(),F(ST.$$.fragment),hir=l(),io=a("div"),F(qy.$$.fragment),pir=l(),A4e=a("p"),_ir=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uir=l(),Ha=a("p"),bir=o("The model class to instantiate is selected based on the "),L4e=a("code"),vir=o("model_type"),Fir=o(` property of the config object (either
passed as an argument or loaded from `),y4e=a("code"),Tir=o("pretrained_model_name_or_path"),Mir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=a("code"),Eir=o("pretrained_model_name_or_path"),Cir=o(":"),wir=l(),$4e=a("ul"),RT=a("li"),k4e=a("strong"),Air=o("vision-encoder-decoder"),Lir=o(" \u2014 "),PW=a("a"),yir=o("VisionEncoderDecoderModel"),xir=o(" (Vision Encoder decoder model)"),$ir=l(),PT=a("p"),kir=o("The model is set in evaluation mode by default using "),S4e=a("code"),Sir=o("model.eval()"),Rir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R4e=a("code"),Pir=o("model.train()"),Bir=l(),F(BT.$$.fragment),LXe=l(),wd=a("h2"),IT=a("a"),P4e=a("span"),F(jy.$$.fragment),Iir=l(),B4e=a("span"),Nir=o("AutoModelForVisualQuestionAnswering"),yXe=l(),Vo=a("div"),F(Dy.$$.fragment),qir=l(),Ad=a("p"),jir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),BW=a("a"),Dir=o("from_pretrained()"),Gir=o(" class method or the "),IW=a("a"),Oir=o("from_config()"),Vir=o(` class
method.`),Xir=l(),Gy=a("p"),zir=o("This class cannot be instantiated directly using "),I4e=a("code"),Qir=o("__init__()"),Wir=o(" (throws an error)."),Hir=l(),Tt=a("div"),F(Oy.$$.fragment),Uir=l(),N4e=a("p"),Jir=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Yir=l(),Ld=a("p"),Kir=o(`Note:
Loading a model from its configuration file does `),q4e=a("strong"),Zir=o("not"),edr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),odr=o("from_pretrained()"),rdr=o(" to load the model weights."),tdr=l(),F(NT.$$.fragment),adr=l(),co=a("div"),F(Vy.$$.fragment),ndr=l(),j4e=a("p"),sdr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),ldr=l(),Ua=a("p"),idr=o("The model class to instantiate is selected based on the "),D4e=a("code"),ddr=o("model_type"),cdr=o(` property of the config object (either
passed as an argument or loaded from `),G4e=a("code"),fdr=o("pretrained_model_name_or_path"),mdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=a("code"),gdr=o("pretrained_model_name_or_path"),hdr=o(":"),pdr=l(),V4e=a("ul"),qT=a("li"),X4e=a("strong"),_dr=o("vilt"),udr=o(" \u2014 "),qW=a("a"),bdr=o("ViltForQuestionAnswering"),vdr=o(" (ViLT model)"),Fdr=l(),jT=a("p"),Tdr=o("The model is set in evaluation mode by default using "),z4e=a("code"),Mdr=o("model.eval()"),Edr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q4e=a("code"),Cdr=o("model.train()"),wdr=l(),F(DT.$$.fragment),xXe=l(),yd=a("h2"),GT=a("a"),W4e=a("span"),F(Xy.$$.fragment),Adr=l(),H4e=a("span"),Ldr=o("AutoModelForAudioClassification"),$Xe=l(),Xo=a("div"),F(zy.$$.fragment),ydr=l(),xd=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jW=a("a"),$dr=o("from_pretrained()"),kdr=o(" class method or the "),DW=a("a"),Sdr=o("from_config()"),Rdr=o(` class
method.`),Pdr=l(),Qy=a("p"),Bdr=o("This class cannot be instantiated directly using "),U4e=a("code"),Idr=o("__init__()"),Ndr=o(" (throws an error)."),qdr=l(),Mt=a("div"),F(Wy.$$.fragment),jdr=l(),J4e=a("p"),Ddr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Gdr=l(),$d=a("p"),Odr=o(`Note:
Loading a model from its configuration file does `),Y4e=a("strong"),Vdr=o("not"),Xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),zdr=o("from_pretrained()"),Qdr=o(" to load the model weights."),Wdr=l(),F(OT.$$.fragment),Hdr=l(),fo=a("div"),F(Hy.$$.fragment),Udr=l(),K4e=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Ydr=l(),Ja=a("p"),Kdr=o("The model class to instantiate is selected based on the "),Z4e=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),ebe=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),Pe=a("ul"),VT=a("li"),rbe=a("strong"),scr=o("data2vec-audio"),lcr=o(" \u2014 "),OW=a("a"),icr=o("Data2VecAudioForSequenceClassification"),dcr=o(" (Data2VecAudio model)"),ccr=l(),XT=a("li"),tbe=a("strong"),fcr=o("hubert"),mcr=o(" \u2014 "),VW=a("a"),gcr=o("HubertForSequenceClassification"),hcr=o(" (Hubert model)"),pcr=l(),zT=a("li"),abe=a("strong"),_cr=o("sew"),ucr=o(" \u2014 "),XW=a("a"),bcr=o("SEWForSequenceClassification"),vcr=o(" (SEW model)"),Fcr=l(),QT=a("li"),nbe=a("strong"),Tcr=o("sew-d"),Mcr=o(" \u2014 "),zW=a("a"),Ecr=o("SEWDForSequenceClassification"),Ccr=o(" (SEW-D model)"),wcr=l(),WT=a("li"),sbe=a("strong"),Acr=o("unispeech"),Lcr=o(" \u2014 "),QW=a("a"),ycr=o("UniSpeechForSequenceClassification"),xcr=o(" (UniSpeech model)"),$cr=l(),HT=a("li"),lbe=a("strong"),kcr=o("unispeech-sat"),Scr=o(" \u2014 "),WW=a("a"),Rcr=o("UniSpeechSatForSequenceClassification"),Pcr=o(" (UniSpeechSat model)"),Bcr=l(),UT=a("li"),ibe=a("strong"),Icr=o("wav2vec2"),Ncr=o(" \u2014 "),HW=a("a"),qcr=o("Wav2Vec2ForSequenceClassification"),jcr=o(" (Wav2Vec2 model)"),Dcr=l(),JT=a("li"),dbe=a("strong"),Gcr=o("wav2vec2-conformer"),Ocr=o(" \u2014 "),UW=a("a"),Vcr=o("Wav2Vec2ConformerForSequenceClassification"),Xcr=o(" (Wav2Vec2-Conformer model)"),zcr=l(),YT=a("li"),cbe=a("strong"),Qcr=o("wavlm"),Wcr=o(" \u2014 "),JW=a("a"),Hcr=o("WavLMForSequenceClassification"),Ucr=o(" (WavLM model)"),Jcr=l(),KT=a("p"),Ycr=o("The model is set in evaluation mode by default using "),fbe=a("code"),Kcr=o("model.eval()"),Zcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=a("code"),efr=o("model.train()"),ofr=l(),F(ZT.$$.fragment),kXe=l(),kd=a("h2"),e7=a("a"),gbe=a("span"),F(Uy.$$.fragment),rfr=l(),hbe=a("span"),tfr=o("AutoModelForAudioFrameClassification"),SXe=l(),zo=a("div"),F(Jy.$$.fragment),afr=l(),Sd=a("p"),nfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YW=a("a"),sfr=o("from_pretrained()"),lfr=o(" class method or the "),KW=a("a"),ifr=o("from_config()"),dfr=o(` class
method.`),cfr=l(),Yy=a("p"),ffr=o("This class cannot be instantiated directly using "),pbe=a("code"),mfr=o("__init__()"),gfr=o(" (throws an error)."),hfr=l(),Et=a("div"),F(Ky.$$.fragment),pfr=l(),_be=a("p"),_fr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ufr=l(),Rd=a("p"),bfr=o(`Note:
Loading a model from its configuration file does `),ube=a("strong"),vfr=o("not"),Ffr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=a("a"),Tfr=o("from_pretrained()"),Mfr=o(" to load the model weights."),Efr=l(),F(o7.$$.fragment),Cfr=l(),mo=a("div"),F(Zy.$$.fragment),wfr=l(),bbe=a("p"),Afr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Lfr=l(),Ya=a("p"),yfr=o("The model class to instantiate is selected based on the "),vbe=a("code"),xfr=o("model_type"),$fr=o(` property of the config object (either
passed as an argument or loaded from `),Fbe=a("code"),kfr=o("pretrained_model_name_or_path"),Sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=a("code"),Rfr=o("pretrained_model_name_or_path"),Pfr=o(":"),Bfr=l(),ot=a("ul"),r7=a("li"),Mbe=a("strong"),Ifr=o("data2vec-audio"),Nfr=o(" \u2014 "),eH=a("a"),qfr=o("Data2VecAudioForAudioFrameClassification"),jfr=o(" (Data2VecAudio model)"),Dfr=l(),t7=a("li"),Ebe=a("strong"),Gfr=o("unispeech-sat"),Ofr=o(" \u2014 "),oH=a("a"),Vfr=o("UniSpeechSatForAudioFrameClassification"),Xfr=o(" (UniSpeechSat model)"),zfr=l(),a7=a("li"),Cbe=a("strong"),Qfr=o("wav2vec2"),Wfr=o(" \u2014 "),rH=a("a"),Hfr=o("Wav2Vec2ForAudioFrameClassification"),Ufr=o(" (Wav2Vec2 model)"),Jfr=l(),n7=a("li"),wbe=a("strong"),Yfr=o("wav2vec2-conformer"),Kfr=o(" \u2014 "),tH=a("a"),Zfr=o("Wav2Vec2ConformerForAudioFrameClassification"),emr=o(" (Wav2Vec2-Conformer model)"),omr=l(),s7=a("li"),Abe=a("strong"),rmr=o("wavlm"),tmr=o(" \u2014 "),aH=a("a"),amr=o("WavLMForAudioFrameClassification"),nmr=o(" (WavLM model)"),smr=l(),l7=a("p"),lmr=o("The model is set in evaluation mode by default using "),Lbe=a("code"),imr=o("model.eval()"),dmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=a("code"),cmr=o("model.train()"),fmr=l(),F(i7.$$.fragment),RXe=l(),Pd=a("h2"),d7=a("a"),xbe=a("span"),F(e8.$$.fragment),mmr=l(),$be=a("span"),gmr=o("AutoModelForCTC"),PXe=l(),Qo=a("div"),F(o8.$$.fragment),hmr=l(),Bd=a("p"),pmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nH=a("a"),_mr=o("from_pretrained()"),umr=o(" class method or the "),sH=a("a"),bmr=o("from_config()"),vmr=o(` class
method.`),Fmr=l(),r8=a("p"),Tmr=o("This class cannot be instantiated directly using "),kbe=a("code"),Mmr=o("__init__()"),Emr=o(" (throws an error)."),Cmr=l(),Ct=a("div"),F(t8.$$.fragment),wmr=l(),Sbe=a("p"),Amr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lmr=l(),Id=a("p"),ymr=o(`Note:
Loading a model from its configuration file does `),Rbe=a("strong"),xmr=o("not"),$mr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=a("a"),kmr=o("from_pretrained()"),Smr=o(" to load the model weights."),Rmr=l(),F(c7.$$.fragment),Pmr=l(),go=a("div"),F(a8.$$.fragment),Bmr=l(),Pbe=a("p"),Imr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Nmr=l(),Ka=a("p"),qmr=o("The model class to instantiate is selected based on the "),Bbe=a("code"),jmr=o("model_type"),Dmr=o(` property of the config object (either
passed as an argument or loaded from `),Ibe=a("code"),Gmr=o("pretrained_model_name_or_path"),Omr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=a("code"),Vmr=o("pretrained_model_name_or_path"),Xmr=o(":"),zmr=l(),Le=a("ul"),f7=a("li"),qbe=a("strong"),Qmr=o("data2vec-audio"),Wmr=o(" \u2014 "),iH=a("a"),Hmr=o("Data2VecAudioForCTC"),Umr=o(" (Data2VecAudio model)"),Jmr=l(),m7=a("li"),jbe=a("strong"),Ymr=o("hubert"),Kmr=o(" \u2014 "),dH=a("a"),Zmr=o("HubertForCTC"),egr=o(" (Hubert model)"),ogr=l(),g7=a("li"),Dbe=a("strong"),rgr=o("mctct"),tgr=o(" \u2014 "),cH=a("a"),agr=o("MCTCTForCTC"),ngr=o(" (M-CTC-T model)"),sgr=l(),h7=a("li"),Gbe=a("strong"),lgr=o("sew"),igr=o(" \u2014 "),fH=a("a"),dgr=o("SEWForCTC"),cgr=o(" (SEW model)"),fgr=l(),p7=a("li"),Obe=a("strong"),mgr=o("sew-d"),ggr=o(" \u2014 "),mH=a("a"),hgr=o("SEWDForCTC"),pgr=o(" (SEW-D model)"),_gr=l(),_7=a("li"),Vbe=a("strong"),ugr=o("unispeech"),bgr=o(" \u2014 "),gH=a("a"),vgr=o("UniSpeechForCTC"),Fgr=o(" (UniSpeech model)"),Tgr=l(),u7=a("li"),Xbe=a("strong"),Mgr=o("unispeech-sat"),Egr=o(" \u2014 "),hH=a("a"),Cgr=o("UniSpeechSatForCTC"),wgr=o(" (UniSpeechSat model)"),Agr=l(),b7=a("li"),zbe=a("strong"),Lgr=o("wav2vec2"),ygr=o(" \u2014 "),pH=a("a"),xgr=o("Wav2Vec2ForCTC"),$gr=o(" (Wav2Vec2 model)"),kgr=l(),v7=a("li"),Qbe=a("strong"),Sgr=o("wav2vec2-conformer"),Rgr=o(" \u2014 "),_H=a("a"),Pgr=o("Wav2Vec2ConformerForCTC"),Bgr=o(" (Wav2Vec2-Conformer model)"),Igr=l(),F7=a("li"),Wbe=a("strong"),Ngr=o("wavlm"),qgr=o(" \u2014 "),uH=a("a"),jgr=o("WavLMForCTC"),Dgr=o(" (WavLM model)"),Ggr=l(),T7=a("p"),Ogr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),Vgr=o("model.eval()"),Xgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),zgr=o("model.train()"),Qgr=l(),F(M7.$$.fragment),BXe=l(),Nd=a("h2"),E7=a("a"),Jbe=a("span"),F(n8.$$.fragment),Wgr=l(),Ybe=a("span"),Hgr=o("AutoModelForSpeechSeq2Seq"),IXe=l(),Wo=a("div"),F(s8.$$.fragment),Ugr=l(),qd=a("p"),Jgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=a("a"),Ygr=o("from_pretrained()"),Kgr=o(" class method or the "),vH=a("a"),Zgr=o("from_config()"),ehr=o(` class
method.`),ohr=l(),l8=a("p"),rhr=o("This class cannot be instantiated directly using "),Kbe=a("code"),thr=o("__init__()"),ahr=o(" (throws an error)."),nhr=l(),wt=a("div"),F(i8.$$.fragment),shr=l(),Zbe=a("p"),lhr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ihr=l(),jd=a("p"),dhr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),chr=o("not"),fhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=a("a"),mhr=o("from_pretrained()"),ghr=o(" to load the model weights."),hhr=l(),F(C7.$$.fragment),phr=l(),ho=a("div"),F(d8.$$.fragment),_hr=l(),ove=a("p"),uhr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bhr=l(),Za=a("p"),vhr=o("The model class to instantiate is selected based on the "),rve=a("code"),Fhr=o("model_type"),Thr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),Mhr=o("pretrained_model_name_or_path"),Ehr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),Chr=o("pretrained_model_name_or_path"),whr=o(":"),Ahr=l(),c8=a("ul"),w7=a("li"),nve=a("strong"),Lhr=o("speech-encoder-decoder"),yhr=o(" \u2014 "),TH=a("a"),xhr=o("SpeechEncoderDecoderModel"),$hr=o(" (Speech Encoder decoder model)"),khr=l(),A7=a("li"),sve=a("strong"),Shr=o("speech_to_text"),Rhr=o(" \u2014 "),MH=a("a"),Phr=o("Speech2TextForConditionalGeneration"),Bhr=o(" (Speech2Text model)"),Ihr=l(),L7=a("p"),Nhr=o("The model is set in evaluation mode by default using "),lve=a("code"),qhr=o("model.eval()"),jhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=a("code"),Dhr=o("model.train()"),Ghr=l(),F(y7.$$.fragment),NXe=l(),Dd=a("h2"),x7=a("a"),dve=a("span"),F(f8.$$.fragment),Ohr=l(),cve=a("span"),Vhr=o("AutoModelForAudioXVector"),qXe=l(),Ho=a("div"),F(m8.$$.fragment),Xhr=l(),Gd=a("p"),zhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EH=a("a"),Qhr=o("from_pretrained()"),Whr=o(" class method or the "),CH=a("a"),Hhr=o("from_config()"),Uhr=o(` class
method.`),Jhr=l(),g8=a("p"),Yhr=o("This class cannot be instantiated directly using "),fve=a("code"),Khr=o("__init__()"),Zhr=o(" (throws an error)."),epr=l(),At=a("div"),F(h8.$$.fragment),opr=l(),mve=a("p"),rpr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),tpr=l(),Od=a("p"),apr=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),npr=o("not"),spr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),lpr=o("from_pretrained()"),ipr=o(" to load the model weights."),dpr=l(),F($7.$$.fragment),cpr=l(),po=a("div"),F(p8.$$.fragment),fpr=l(),hve=a("p"),mpr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),gpr=l(),en=a("p"),hpr=o("The model class to instantiate is selected based on the "),pve=a("code"),ppr=o("model_type"),_pr=o(` property of the config object (either
passed as an argument or loaded from `),_ve=a("code"),upr=o("pretrained_model_name_or_path"),bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=a("code"),vpr=o("pretrained_model_name_or_path"),Fpr=o(":"),Tpr=l(),rt=a("ul"),k7=a("li"),bve=a("strong"),Mpr=o("data2vec-audio"),Epr=o(" \u2014 "),AH=a("a"),Cpr=o("Data2VecAudioForXVector"),wpr=o(" (Data2VecAudio model)"),Apr=l(),S7=a("li"),vve=a("strong"),Lpr=o("unispeech-sat"),ypr=o(" \u2014 "),LH=a("a"),xpr=o("UniSpeechSatForXVector"),$pr=o(" (UniSpeechSat model)"),kpr=l(),R7=a("li"),Fve=a("strong"),Spr=o("wav2vec2"),Rpr=o(" \u2014 "),yH=a("a"),Ppr=o("Wav2Vec2ForXVector"),Bpr=o(" (Wav2Vec2 model)"),Ipr=l(),P7=a("li"),Tve=a("strong"),Npr=o("wav2vec2-conformer"),qpr=o(" \u2014 "),xH=a("a"),jpr=o("Wav2Vec2ConformerForXVector"),Dpr=o(" (Wav2Vec2-Conformer model)"),Gpr=l(),B7=a("li"),Mve=a("strong"),Opr=o("wavlm"),Vpr=o(" \u2014 "),$H=a("a"),Xpr=o("WavLMForXVector"),zpr=o(" (WavLM model)"),Qpr=l(),I7=a("p"),Wpr=o("The model is set in evaluation mode by default using "),Eve=a("code"),Hpr=o("model.eval()"),Upr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=a("code"),Jpr=o("model.train()"),Ypr=l(),F(N7.$$.fragment),jXe=l(),Vd=a("h2"),q7=a("a"),wve=a("span"),F(_8.$$.fragment),Kpr=l(),Ave=a("span"),Zpr=o("AutoModelForMaskedImageModeling"),DXe=l(),Uo=a("div"),F(u8.$$.fragment),e_r=l(),Xd=a("p"),o_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kH=a("a"),r_r=o("from_pretrained()"),t_r=o(" class method or the "),SH=a("a"),a_r=o("from_config()"),n_r=o(` class
method.`),s_r=l(),b8=a("p"),l_r=o("This class cannot be instantiated directly using "),Lve=a("code"),i_r=o("__init__()"),d_r=o(" (throws an error)."),c_r=l(),Lt=a("div"),F(v8.$$.fragment),f_r=l(),yve=a("p"),m_r=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),g_r=l(),zd=a("p"),h_r=o(`Note:
Loading a model from its configuration file does `),xve=a("strong"),p_r=o("not"),__r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=a("a"),u_r=o("from_pretrained()"),b_r=o(" to load the model weights."),v_r=l(),F(j7.$$.fragment),F_r=l(),_o=a("div"),F(F8.$$.fragment),T_r=l(),$ve=a("p"),M_r=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),E_r=l(),on=a("p"),C_r=o("The model class to instantiate is selected based on the "),kve=a("code"),w_r=o("model_type"),A_r=o(` property of the config object (either
passed as an argument or loaded from `),Sve=a("code"),L_r=o("pretrained_model_name_or_path"),y_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=a("code"),x_r=o("pretrained_model_name_or_path"),$_r=o(":"),k_r=l(),Qd=a("ul"),D7=a("li"),Pve=a("strong"),S_r=o("deit"),R_r=o(" \u2014 "),PH=a("a"),P_r=o("DeiTForMaskedImageModeling"),B_r=o(" (DeiT model)"),I_r=l(),G7=a("li"),Bve=a("strong"),N_r=o("swin"),q_r=o(" \u2014 "),BH=a("a"),j_r=o("SwinForMaskedImageModeling"),D_r=o(" (Swin Transformer model)"),G_r=l(),O7=a("li"),Ive=a("strong"),O_r=o("vit"),V_r=o(" \u2014 "),IH=a("a"),X_r=o("ViTForMaskedImageModeling"),z_r=o(" (ViT model)"),Q_r=l(),V7=a("p"),W_r=o("The model is set in evaluation mode by default using "),Nve=a("code"),H_r=o("model.eval()"),U_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=a("code"),J_r=o("model.train()"),Y_r=l(),F(X7.$$.fragment),GXe=l(),Wd=a("h2"),z7=a("a"),jve=a("span"),F(T8.$$.fragment),K_r=l(),Dve=a("span"),Z_r=o("AutoModelForObjectDetection"),OXe=l(),Jo=a("div"),F(M8.$$.fragment),eur=l(),Hd=a("p"),our=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NH=a("a"),rur=o("from_pretrained()"),tur=o(" class method or the "),qH=a("a"),aur=o("from_config()"),nur=o(` class
method.`),sur=l(),E8=a("p"),lur=o("This class cannot be instantiated directly using "),Gve=a("code"),iur=o("__init__()"),dur=o(" (throws an error)."),cur=l(),yt=a("div"),F(C8.$$.fragment),fur=l(),Ove=a("p"),mur=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),gur=l(),Ud=a("p"),hur=o(`Note:
Loading a model from its configuration file does `),Vve=a("strong"),pur=o("not"),_ur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),uur=o("from_pretrained()"),bur=o(" to load the model weights."),vur=l(),F(Q7.$$.fragment),Fur=l(),uo=a("div"),F(w8.$$.fragment),Tur=l(),Xve=a("p"),Mur=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Eur=l(),rn=a("p"),Cur=o("The model class to instantiate is selected based on the "),zve=a("code"),wur=o("model_type"),Aur=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),Lur=o("pretrained_model_name_or_path"),yur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=a("code"),xur=o("pretrained_model_name_or_path"),$ur=o(":"),kur=l(),A8=a("ul"),W7=a("li"),Hve=a("strong"),Sur=o("detr"),Rur=o(" \u2014 "),DH=a("a"),Pur=o("DetrForObjectDetection"),Bur=o(" (DETR model)"),Iur=l(),H7=a("li"),Uve=a("strong"),Nur=o("yolos"),qur=o(" \u2014 "),GH=a("a"),jur=o("YolosForObjectDetection"),Dur=o(" (YOLOS model)"),Gur=l(),U7=a("p"),Our=o("The model is set in evaluation mode by default using "),Jve=a("code"),Vur=o("model.eval()"),Xur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yve=a("code"),zur=o("model.train()"),Qur=l(),F(J7.$$.fragment),VXe=l(),Jd=a("h2"),Y7=a("a"),Kve=a("span"),F(L8.$$.fragment),Wur=l(),Zve=a("span"),Hur=o("AutoModelForImageSegmentation"),XXe=l(),Yo=a("div"),F(y8.$$.fragment),Uur=l(),Yd=a("p"),Jur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OH=a("a"),Yur=o("from_pretrained()"),Kur=o(" class method or the "),VH=a("a"),Zur=o("from_config()"),e2r=o(` class
method.`),o2r=l(),x8=a("p"),r2r=o("This class cannot be instantiated directly using "),eFe=a("code"),t2r=o("__init__()"),a2r=o(" (throws an error)."),n2r=l(),xt=a("div"),F($8.$$.fragment),s2r=l(),oFe=a("p"),l2r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),i2r=l(),Kd=a("p"),d2r=o(`Note:
Loading a model from its configuration file does `),rFe=a("strong"),c2r=o("not"),f2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),m2r=o("from_pretrained()"),g2r=o(" to load the model weights."),h2r=l(),F(K7.$$.fragment),p2r=l(),bo=a("div"),F(k8.$$.fragment),_2r=l(),tFe=a("p"),u2r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),b2r=l(),tn=a("p"),v2r=o("The model class to instantiate is selected based on the "),aFe=a("code"),F2r=o("model_type"),T2r=o(` property of the config object (either
passed as an argument or loaded from `),nFe=a("code"),M2r=o("pretrained_model_name_or_path"),E2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=a("code"),C2r=o("pretrained_model_name_or_path"),w2r=o(":"),A2r=l(),lFe=a("ul"),Z7=a("li"),iFe=a("strong"),L2r=o("detr"),y2r=o(" \u2014 "),zH=a("a"),x2r=o("DetrForSegmentation"),$2r=o(" (DETR model)"),k2r=l(),e9=a("p"),S2r=o("The model is set in evaluation mode by default using "),dFe=a("code"),R2r=o("model.eval()"),P2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cFe=a("code"),B2r=o("model.train()"),I2r=l(),F(o9.$$.fragment),zXe=l(),Zd=a("h2"),r9=a("a"),fFe=a("span"),F(S8.$$.fragment),N2r=l(),mFe=a("span"),q2r=o("AutoModelForSemanticSegmentation"),QXe=l(),Ko=a("div"),F(R8.$$.fragment),j2r=l(),ec=a("p"),D2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QH=a("a"),G2r=o("from_pretrained()"),O2r=o(" class method or the "),WH=a("a"),V2r=o("from_config()"),X2r=o(` class
method.`),z2r=l(),P8=a("p"),Q2r=o("This class cannot be instantiated directly using "),gFe=a("code"),W2r=o("__init__()"),H2r=o(" (throws an error)."),U2r=l(),$t=a("div"),F(B8.$$.fragment),J2r=l(),hFe=a("p"),Y2r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),K2r=l(),oc=a("p"),Z2r=o(`Note:
Loading a model from its configuration file does `),pFe=a("strong"),e1r=o("not"),o1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=a("a"),r1r=o("from_pretrained()"),t1r=o(" to load the model weights."),a1r=l(),F(t9.$$.fragment),n1r=l(),vo=a("div"),F(I8.$$.fragment),s1r=l(),_Fe=a("p"),l1r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),i1r=l(),an=a("p"),d1r=o("The model class to instantiate is selected based on the "),uFe=a("code"),c1r=o("model_type"),f1r=o(` property of the config object (either
passed as an argument or loaded from `),bFe=a("code"),m1r=o("pretrained_model_name_or_path"),g1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=a("code"),h1r=o("pretrained_model_name_or_path"),p1r=o(":"),_1r=l(),tt=a("ul"),a9=a("li"),FFe=a("strong"),u1r=o("beit"),b1r=o(" \u2014 "),UH=a("a"),v1r=o("BeitForSemanticSegmentation"),F1r=o(" (BEiT model)"),T1r=l(),n9=a("li"),TFe=a("strong"),M1r=o("data2vec-vision"),E1r=o(" \u2014 "),JH=a("a"),C1r=o("Data2VecVisionForSemanticSegmentation"),w1r=o(" (Data2VecVision model)"),A1r=l(),s9=a("li"),MFe=a("strong"),L1r=o("dpt"),y1r=o(" \u2014 "),YH=a("a"),x1r=o("DPTForSemanticSegmentation"),$1r=o(" (DPT model)"),k1r=l(),l9=a("li"),EFe=a("strong"),S1r=o("mobilevit"),R1r=o(" \u2014 "),KH=a("a"),P1r=o("MobileViTForSemanticSegmentation"),B1r=o(" (MobileViT model)"),I1r=l(),i9=a("li"),CFe=a("strong"),N1r=o("segformer"),q1r=o(" \u2014 "),ZH=a("a"),j1r=o("SegformerForSemanticSegmentation"),D1r=o(" (SegFormer model)"),G1r=l(),d9=a("p"),O1r=o("The model is set in evaluation mode by default using "),wFe=a("code"),V1r=o("model.eval()"),X1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=a("code"),z1r=o("model.train()"),Q1r=l(),F(c9.$$.fragment),WXe=l(),rc=a("h2"),f9=a("a"),LFe=a("span"),F(N8.$$.fragment),W1r=l(),yFe=a("span"),H1r=o("AutoModelForInstanceSegmentation"),HXe=l(),Zo=a("div"),F(q8.$$.fragment),U1r=l(),tc=a("p"),J1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eU=a("a"),Y1r=o("from_pretrained()"),K1r=o(" class method or the "),oU=a("a"),Z1r=o("from_config()"),e4r=o(` class
method.`),o4r=l(),j8=a("p"),r4r=o("This class cannot be instantiated directly using "),xFe=a("code"),t4r=o("__init__()"),a4r=o(" (throws an error)."),n4r=l(),kt=a("div"),F(D8.$$.fragment),s4r=l(),$Fe=a("p"),l4r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),i4r=l(),ac=a("p"),d4r=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),c4r=o("not"),f4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=a("a"),m4r=o("from_pretrained()"),g4r=o(" to load the model weights."),h4r=l(),F(m9.$$.fragment),p4r=l(),Fo=a("div"),F(G8.$$.fragment),_4r=l(),SFe=a("p"),u4r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),b4r=l(),nn=a("p"),v4r=o("The model class to instantiate is selected based on the "),RFe=a("code"),F4r=o("model_type"),T4r=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),C4r=o("pretrained_model_name_or_path"),w4r=o(":"),A4r=l(),IFe=a("ul"),g9=a("li"),NFe=a("strong"),L4r=o("maskformer"),y4r=o(" \u2014 "),tU=a("a"),x4r=o("MaskFormerForInstanceSegmentation"),$4r=o(" (MaskFormer model)"),k4r=l(),h9=a("p"),S4r=o("The model is set in evaluation mode by default using "),qFe=a("code"),R4r=o("model.eval()"),P4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jFe=a("code"),B4r=o("model.train()"),I4r=l(),F(p9.$$.fragment),UXe=l(),nc=a("h2"),_9=a("a"),DFe=a("span"),F(O8.$$.fragment),N4r=l(),GFe=a("span"),q4r=o("TFAutoModel"),JXe=l(),er=a("div"),F(V8.$$.fragment),j4r=l(),sc=a("p"),D4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aU=a("a"),G4r=o("from_pretrained()"),O4r=o(" class method or the "),nU=a("a"),V4r=o("from_config()"),X4r=o(` class
method.`),z4r=l(),X8=a("p"),Q4r=o("This class cannot be instantiated directly using "),OFe=a("code"),W4r=o("__init__()"),H4r=o(" (throws an error)."),U4r=l(),St=a("div"),F(z8.$$.fragment),J4r=l(),VFe=a("p"),Y4r=o("Instantiates one of the base model classes of the library from a configuration."),K4r=l(),lc=a("p"),Z4r=o(`Note:
Loading a model from its configuration file does `),XFe=a("strong"),ebr=o("not"),obr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),rbr=o("from_pretrained()"),tbr=o(" to load the model weights."),abr=l(),F(u9.$$.fragment),nbr=l(),xr=a("div"),F(Q8.$$.fragment),sbr=l(),zFe=a("p"),lbr=o("Instantiate one of the base model classes of the library from a pretrained model."),ibr=l(),sn=a("p"),dbr=o("The model class to instantiate is selected based on the "),QFe=a("code"),cbr=o("model_type"),fbr=o(` property of the config object (either
passed as an argument or loaded from `),WFe=a("code"),mbr=o("pretrained_model_name_or_path"),gbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=a("code"),hbr=o("pretrained_model_name_or_path"),pbr=o(":"),_br=l(),q=a("ul"),b9=a("li"),UFe=a("strong"),ubr=o("albert"),bbr=o(" \u2014 "),lU=a("a"),vbr=o("TFAlbertModel"),Fbr=o(" (ALBERT model)"),Tbr=l(),v9=a("li"),JFe=a("strong"),Mbr=o("bart"),Ebr=o(" \u2014 "),iU=a("a"),Cbr=o("TFBartModel"),wbr=o(" (BART model)"),Abr=l(),F9=a("li"),YFe=a("strong"),Lbr=o("bert"),ybr=o(" \u2014 "),dU=a("a"),xbr=o("TFBertModel"),$br=o(" (BERT model)"),kbr=l(),T9=a("li"),KFe=a("strong"),Sbr=o("blenderbot"),Rbr=o(" \u2014 "),cU=a("a"),Pbr=o("TFBlenderbotModel"),Bbr=o(" (Blenderbot model)"),Ibr=l(),M9=a("li"),ZFe=a("strong"),Nbr=o("blenderbot-small"),qbr=o(" \u2014 "),fU=a("a"),jbr=o("TFBlenderbotSmallModel"),Dbr=o(" (BlenderbotSmall model)"),Gbr=l(),E9=a("li"),eTe=a("strong"),Obr=o("camembert"),Vbr=o(" \u2014 "),mU=a("a"),Xbr=o("TFCamembertModel"),zbr=o(" (CamemBERT model)"),Qbr=l(),C9=a("li"),oTe=a("strong"),Wbr=o("clip"),Hbr=o(" \u2014 "),gU=a("a"),Ubr=o("TFCLIPModel"),Jbr=o(" (CLIP model)"),Ybr=l(),w9=a("li"),rTe=a("strong"),Kbr=o("convbert"),Zbr=o(" \u2014 "),hU=a("a"),evr=o("TFConvBertModel"),ovr=o(" (ConvBERT model)"),rvr=l(),A9=a("li"),tTe=a("strong"),tvr=o("convnext"),avr=o(" \u2014 "),pU=a("a"),nvr=o("TFConvNextModel"),svr=o(" (ConvNeXT model)"),lvr=l(),L9=a("li"),aTe=a("strong"),ivr=o("ctrl"),dvr=o(" \u2014 "),_U=a("a"),cvr=o("TFCTRLModel"),fvr=o(" (CTRL model)"),mvr=l(),y9=a("li"),nTe=a("strong"),gvr=o("data2vec-vision"),hvr=o(" \u2014 "),uU=a("a"),pvr=o("TFData2VecVisionModel"),_vr=o(" (Data2VecVision model)"),uvr=l(),x9=a("li"),sTe=a("strong"),bvr=o("deberta"),vvr=o(" \u2014 "),bU=a("a"),Fvr=o("TFDebertaModel"),Tvr=o(" (DeBERTa model)"),Mvr=l(),$9=a("li"),lTe=a("strong"),Evr=o("deberta-v2"),Cvr=o(" \u2014 "),vU=a("a"),wvr=o("TFDebertaV2Model"),Avr=o(" (DeBERTa-v2 model)"),Lvr=l(),k9=a("li"),iTe=a("strong"),yvr=o("distilbert"),xvr=o(" \u2014 "),FU=a("a"),$vr=o("TFDistilBertModel"),kvr=o(" (DistilBERT model)"),Svr=l(),S9=a("li"),dTe=a("strong"),Rvr=o("dpr"),Pvr=o(" \u2014 "),TU=a("a"),Bvr=o("TFDPRQuestionEncoder"),Ivr=o(" (DPR model)"),Nvr=l(),R9=a("li"),cTe=a("strong"),qvr=o("electra"),jvr=o(" \u2014 "),MU=a("a"),Dvr=o("TFElectraModel"),Gvr=o(" (ELECTRA model)"),Ovr=l(),P9=a("li"),fTe=a("strong"),Vvr=o("flaubert"),Xvr=o(" \u2014 "),EU=a("a"),zvr=o("TFFlaubertModel"),Qvr=o(" (FlauBERT model)"),Wvr=l(),Js=a("li"),mTe=a("strong"),Hvr=o("funnel"),Uvr=o(" \u2014 "),CU=a("a"),Jvr=o("TFFunnelModel"),Yvr=o(" or "),wU=a("a"),Kvr=o("TFFunnelBaseModel"),Zvr=o(" (Funnel Transformer model)"),eFr=l(),B9=a("li"),gTe=a("strong"),oFr=o("gpt2"),rFr=o(" \u2014 "),AU=a("a"),tFr=o("TFGPT2Model"),aFr=o(" (OpenAI GPT-2 model)"),nFr=l(),I9=a("li"),hTe=a("strong"),sFr=o("gptj"),lFr=o(" \u2014 "),LU=a("a"),iFr=o("TFGPTJModel"),dFr=o(" (GPT-J model)"),cFr=l(),N9=a("li"),pTe=a("strong"),fFr=o("hubert"),mFr=o(" \u2014 "),yU=a("a"),gFr=o("TFHubertModel"),hFr=o(" (Hubert model)"),pFr=l(),q9=a("li"),_Te=a("strong"),_Fr=o("layoutlm"),uFr=o(" \u2014 "),xU=a("a"),bFr=o("TFLayoutLMModel"),vFr=o(" (LayoutLM model)"),FFr=l(),j9=a("li"),uTe=a("strong"),TFr=o("led"),MFr=o(" \u2014 "),$U=a("a"),EFr=o("TFLEDModel"),CFr=o(" (LED model)"),wFr=l(),D9=a("li"),bTe=a("strong"),AFr=o("longformer"),LFr=o(" \u2014 "),kU=a("a"),yFr=o("TFLongformerModel"),xFr=o(" (Longformer model)"),$Fr=l(),G9=a("li"),vTe=a("strong"),kFr=o("lxmert"),SFr=o(" \u2014 "),SU=a("a"),RFr=o("TFLxmertModel"),PFr=o(" (LXMERT model)"),BFr=l(),O9=a("li"),FTe=a("strong"),IFr=o("marian"),NFr=o(" \u2014 "),RU=a("a"),qFr=o("TFMarianModel"),jFr=o(" (Marian model)"),DFr=l(),V9=a("li"),TTe=a("strong"),GFr=o("mbart"),OFr=o(" \u2014 "),PU=a("a"),VFr=o("TFMBartModel"),XFr=o(" (mBART model)"),zFr=l(),X9=a("li"),MTe=a("strong"),QFr=o("mobilebert"),WFr=o(" \u2014 "),BU=a("a"),HFr=o("TFMobileBertModel"),UFr=o(" (MobileBERT model)"),JFr=l(),z9=a("li"),ETe=a("strong"),YFr=o("mpnet"),KFr=o(" \u2014 "),IU=a("a"),ZFr=o("TFMPNetModel"),eTr=o(" (MPNet model)"),oTr=l(),Q9=a("li"),CTe=a("strong"),rTr=o("mt5"),tTr=o(" \u2014 "),NU=a("a"),aTr=o("TFMT5Model"),nTr=o(" (MT5 model)"),sTr=l(),W9=a("li"),wTe=a("strong"),lTr=o("openai-gpt"),iTr=o(" \u2014 "),qU=a("a"),dTr=o("TFOpenAIGPTModel"),cTr=o(" (OpenAI GPT model)"),fTr=l(),H9=a("li"),ATe=a("strong"),mTr=o("opt"),gTr=o(" \u2014 "),jU=a("a"),hTr=o("TFOPTModel"),pTr=o(" (OPT model)"),_Tr=l(),U9=a("li"),LTe=a("strong"),uTr=o("pegasus"),bTr=o(" \u2014 "),DU=a("a"),vTr=o("TFPegasusModel"),FTr=o(" (Pegasus model)"),TTr=l(),J9=a("li"),yTe=a("strong"),MTr=o("regnet"),ETr=o(" \u2014 "),GU=a("a"),CTr=o("TFRegNetModel"),wTr=o(" (RegNet model)"),ATr=l(),Y9=a("li"),xTe=a("strong"),LTr=o("rembert"),yTr=o(" \u2014 "),OU=a("a"),xTr=o("TFRemBertModel"),$Tr=o(" (RemBERT model)"),kTr=l(),K9=a("li"),$Te=a("strong"),STr=o("resnet"),RTr=o(" \u2014 "),VU=a("a"),PTr=o("TFResNetModel"),BTr=o(" (ResNet model)"),ITr=l(),Z9=a("li"),kTe=a("strong"),NTr=o("roberta"),qTr=o(" \u2014 "),XU=a("a"),jTr=o("TFRobertaModel"),DTr=o(" (RoBERTa model)"),GTr=l(),eM=a("li"),STe=a("strong"),OTr=o("roformer"),VTr=o(" \u2014 "),zU=a("a"),XTr=o("TFRoFormerModel"),zTr=o(" (RoFormer model)"),QTr=l(),oM=a("li"),RTe=a("strong"),WTr=o("speech_to_text"),HTr=o(" \u2014 "),QU=a("a"),UTr=o("TFSpeech2TextModel"),JTr=o(" (Speech2Text model)"),YTr=l(),rM=a("li"),PTe=a("strong"),KTr=o("swin"),ZTr=o(" \u2014 "),WU=a("a"),e7r=o("TFSwinModel"),o7r=o(" (Swin Transformer model)"),r7r=l(),tM=a("li"),BTe=a("strong"),t7r=o("t5"),a7r=o(" \u2014 "),HU=a("a"),n7r=o("TFT5Model"),s7r=o(" (T5 model)"),l7r=l(),aM=a("li"),ITe=a("strong"),i7r=o("tapas"),d7r=o(" \u2014 "),UU=a("a"),c7r=o("TFTapasModel"),f7r=o(" (TAPAS model)"),m7r=l(),nM=a("li"),NTe=a("strong"),g7r=o("transfo-xl"),h7r=o(" \u2014 "),JU=a("a"),p7r=o("TFTransfoXLModel"),_7r=o(" (Transformer-XL model)"),u7r=l(),sM=a("li"),qTe=a("strong"),b7r=o("vit"),v7r=o(" \u2014 "),YU=a("a"),F7r=o("TFViTModel"),T7r=o(" (ViT model)"),M7r=l(),lM=a("li"),jTe=a("strong"),E7r=o("vit_mae"),C7r=o(" \u2014 "),KU=a("a"),w7r=o("TFViTMAEModel"),A7r=o(" (ViTMAE model)"),L7r=l(),iM=a("li"),DTe=a("strong"),y7r=o("wav2vec2"),x7r=o(" \u2014 "),ZU=a("a"),$7r=o("TFWav2Vec2Model"),k7r=o(" (Wav2Vec2 model)"),S7r=l(),dM=a("li"),GTe=a("strong"),R7r=o("xlm"),P7r=o(" \u2014 "),eJ=a("a"),B7r=o("TFXLMModel"),I7r=o(" (XLM model)"),N7r=l(),cM=a("li"),OTe=a("strong"),q7r=o("xlm-roberta"),j7r=o(" \u2014 "),oJ=a("a"),D7r=o("TFXLMRobertaModel"),G7r=o(" (XLM-RoBERTa model)"),O7r=l(),fM=a("li"),VTe=a("strong"),V7r=o("xlnet"),X7r=o(" \u2014 "),rJ=a("a"),z7r=o("TFXLNetModel"),Q7r=o(" (XLNet model)"),W7r=l(),F(mM.$$.fragment),YXe=l(),ic=a("h2"),gM=a("a"),XTe=a("span"),F(W8.$$.fragment),H7r=l(),zTe=a("span"),U7r=o("TFAutoModelForPreTraining"),KXe=l(),or=a("div"),F(H8.$$.fragment),J7r=l(),dc=a("p"),Y7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=a("a"),K7r=o("from_pretrained()"),Z7r=o(" class method or the "),aJ=a("a"),e9r=o("from_config()"),o9r=o(` class
method.`),r9r=l(),U8=a("p"),t9r=o("This class cannot be instantiated directly using "),QTe=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),Rt=a("div"),F(J8.$$.fragment),l9r=l(),WTe=a("p"),i9r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),d9r=l(),cc=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),f9r=o("not"),m9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=a("a"),g9r=o("from_pretrained()"),h9r=o(" to load the model weights."),p9r=l(),F(hM.$$.fragment),_9r=l(),$r=a("div"),F(Y8.$$.fragment),u9r=l(),UTe=a("p"),b9r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),v9r=l(),ln=a("p"),F9r=o("The model class to instantiate is selected based on the "),JTe=a("code"),T9r=o("model_type"),M9r=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),E9r=o("pretrained_model_name_or_path"),C9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(":"),L9r=l(),se=a("ul"),pM=a("li"),ZTe=a("strong"),y9r=o("albert"),x9r=o(" \u2014 "),sJ=a("a"),$9r=o("TFAlbertForPreTraining"),k9r=o(" (ALBERT model)"),S9r=l(),_M=a("li"),e7e=a("strong"),R9r=o("bart"),P9r=o(" \u2014 "),lJ=a("a"),B9r=o("TFBartForConditionalGeneration"),I9r=o(" (BART model)"),N9r=l(),uM=a("li"),o7e=a("strong"),q9r=o("bert"),j9r=o(" \u2014 "),iJ=a("a"),D9r=o("TFBertForPreTraining"),G9r=o(" (BERT model)"),O9r=l(),bM=a("li"),r7e=a("strong"),V9r=o("camembert"),X9r=o(" \u2014 "),dJ=a("a"),z9r=o("TFCamembertForMaskedLM"),Q9r=o(" (CamemBERT model)"),W9r=l(),vM=a("li"),t7e=a("strong"),H9r=o("ctrl"),U9r=o(" \u2014 "),cJ=a("a"),J9r=o("TFCTRLLMHeadModel"),Y9r=o(" (CTRL model)"),K9r=l(),FM=a("li"),a7e=a("strong"),Z9r=o("distilbert"),eMr=o(" \u2014 "),fJ=a("a"),oMr=o("TFDistilBertForMaskedLM"),rMr=o(" (DistilBERT model)"),tMr=l(),TM=a("li"),n7e=a("strong"),aMr=o("electra"),nMr=o(" \u2014 "),mJ=a("a"),sMr=o("TFElectraForPreTraining"),lMr=o(" (ELECTRA model)"),iMr=l(),MM=a("li"),s7e=a("strong"),dMr=o("flaubert"),cMr=o(" \u2014 "),gJ=a("a"),fMr=o("TFFlaubertWithLMHeadModel"),mMr=o(" (FlauBERT model)"),gMr=l(),EM=a("li"),l7e=a("strong"),hMr=o("funnel"),pMr=o(" \u2014 "),hJ=a("a"),_Mr=o("TFFunnelForPreTraining"),uMr=o(" (Funnel Transformer model)"),bMr=l(),CM=a("li"),i7e=a("strong"),vMr=o("gpt2"),FMr=o(" \u2014 "),pJ=a("a"),TMr=o("TFGPT2LMHeadModel"),MMr=o(" (OpenAI GPT-2 model)"),EMr=l(),wM=a("li"),d7e=a("strong"),CMr=o("layoutlm"),wMr=o(" \u2014 "),_J=a("a"),AMr=o("TFLayoutLMForMaskedLM"),LMr=o(" (LayoutLM model)"),yMr=l(),AM=a("li"),c7e=a("strong"),xMr=o("lxmert"),$Mr=o(" \u2014 "),uJ=a("a"),kMr=o("TFLxmertForPreTraining"),SMr=o(" (LXMERT model)"),RMr=l(),LM=a("li"),f7e=a("strong"),PMr=o("mobilebert"),BMr=o(" \u2014 "),bJ=a("a"),IMr=o("TFMobileBertForPreTraining"),NMr=o(" (MobileBERT model)"),qMr=l(),yM=a("li"),m7e=a("strong"),jMr=o("mpnet"),DMr=o(" \u2014 "),vJ=a("a"),GMr=o("TFMPNetForMaskedLM"),OMr=o(" (MPNet model)"),VMr=l(),xM=a("li"),g7e=a("strong"),XMr=o("openai-gpt"),zMr=o(" \u2014 "),FJ=a("a"),QMr=o("TFOpenAIGPTLMHeadModel"),WMr=o(" (OpenAI GPT model)"),HMr=l(),$M=a("li"),h7e=a("strong"),UMr=o("roberta"),JMr=o(" \u2014 "),TJ=a("a"),YMr=o("TFRobertaForMaskedLM"),KMr=o(" (RoBERTa model)"),ZMr=l(),kM=a("li"),p7e=a("strong"),eEr=o("t5"),oEr=o(" \u2014 "),MJ=a("a"),rEr=o("TFT5ForConditionalGeneration"),tEr=o(" (T5 model)"),aEr=l(),SM=a("li"),_7e=a("strong"),nEr=o("tapas"),sEr=o(" \u2014 "),EJ=a("a"),lEr=o("TFTapasForMaskedLM"),iEr=o(" (TAPAS model)"),dEr=l(),RM=a("li"),u7e=a("strong"),cEr=o("transfo-xl"),fEr=o(" \u2014 "),CJ=a("a"),mEr=o("TFTransfoXLLMHeadModel"),gEr=o(" (Transformer-XL model)"),hEr=l(),PM=a("li"),b7e=a("strong"),pEr=o("vit_mae"),_Er=o(" \u2014 "),wJ=a("a"),uEr=o("TFViTMAEForPreTraining"),bEr=o(" (ViTMAE model)"),vEr=l(),BM=a("li"),v7e=a("strong"),FEr=o("xlm"),TEr=o(" \u2014 "),AJ=a("a"),MEr=o("TFXLMWithLMHeadModel"),EEr=o(" (XLM model)"),CEr=l(),IM=a("li"),F7e=a("strong"),wEr=o("xlm-roberta"),AEr=o(" \u2014 "),LJ=a("a"),LEr=o("TFXLMRobertaForMaskedLM"),yEr=o(" (XLM-RoBERTa model)"),xEr=l(),NM=a("li"),T7e=a("strong"),$Er=o("xlnet"),kEr=o(" \u2014 "),yJ=a("a"),SEr=o("TFXLNetLMHeadModel"),REr=o(" (XLNet model)"),PEr=l(),F(qM.$$.fragment),ZXe=l(),fc=a("h2"),jM=a("a"),M7e=a("span"),F(K8.$$.fragment),BEr=l(),E7e=a("span"),IEr=o("TFAutoModelForCausalLM"),eze=l(),rr=a("div"),F(Z8.$$.fragment),NEr=l(),mc=a("p"),qEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=a("a"),jEr=o("from_pretrained()"),DEr=o(" class method or the "),$J=a("a"),GEr=o("from_config()"),OEr=o(` class
method.`),VEr=l(),ex=a("p"),XEr=o("This class cannot be instantiated directly using "),C7e=a("code"),zEr=o("__init__()"),QEr=o(" (throws an error)."),WEr=l(),Pt=a("div"),F(ox.$$.fragment),HEr=l(),w7e=a("p"),UEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JEr=l(),gc=a("p"),YEr=o(`Note:
Loading a model from its configuration file does `),A7e=a("strong"),KEr=o("not"),ZEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=a("a"),eCr=o("from_pretrained()"),oCr=o(" to load the model weights."),rCr=l(),F(DM.$$.fragment),tCr=l(),kr=a("div"),F(rx.$$.fragment),aCr=l(),L7e=a("p"),nCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),sCr=l(),dn=a("p"),lCr=o("The model class to instantiate is selected based on the "),y7e=a("code"),iCr=o("model_type"),dCr=o(` property of the config object (either
passed as an argument or loaded from `),x7e=a("code"),cCr=o("pretrained_model_name_or_path"),fCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=a("code"),mCr=o("pretrained_model_name_or_path"),gCr=o(":"),hCr=l(),Me=a("ul"),GM=a("li"),k7e=a("strong"),pCr=o("bert"),_Cr=o(" \u2014 "),SJ=a("a"),uCr=o("TFBertLMHeadModel"),bCr=o(" (BERT model)"),vCr=l(),OM=a("li"),S7e=a("strong"),FCr=o("camembert"),TCr=o(" \u2014 "),RJ=a("a"),MCr=o("TFCamembertForCausalLM"),ECr=o(" (CamemBERT model)"),CCr=l(),VM=a("li"),R7e=a("strong"),wCr=o("ctrl"),ACr=o(" \u2014 "),PJ=a("a"),LCr=o("TFCTRLLMHeadModel"),yCr=o(" (CTRL model)"),xCr=l(),XM=a("li"),P7e=a("strong"),$Cr=o("gpt2"),kCr=o(" \u2014 "),BJ=a("a"),SCr=o("TFGPT2LMHeadModel"),RCr=o(" (OpenAI GPT-2 model)"),PCr=l(),zM=a("li"),B7e=a("strong"),BCr=o("gptj"),ICr=o(" \u2014 "),IJ=a("a"),NCr=o("TFGPTJForCausalLM"),qCr=o(" (GPT-J model)"),jCr=l(),QM=a("li"),I7e=a("strong"),DCr=o("openai-gpt"),GCr=o(" \u2014 "),NJ=a("a"),OCr=o("TFOpenAIGPTLMHeadModel"),VCr=o(" (OpenAI GPT model)"),XCr=l(),WM=a("li"),N7e=a("strong"),zCr=o("opt"),QCr=o(" \u2014 "),qJ=a("a"),WCr=o("TFOPTForCausalLM"),HCr=o(" (OPT model)"),UCr=l(),HM=a("li"),q7e=a("strong"),JCr=o("rembert"),YCr=o(" \u2014 "),jJ=a("a"),KCr=o("TFRemBertForCausalLM"),ZCr=o(" (RemBERT model)"),e3r=l(),UM=a("li"),j7e=a("strong"),o3r=o("roberta"),r3r=o(" \u2014 "),DJ=a("a"),t3r=o("TFRobertaForCausalLM"),a3r=o(" (RoBERTa model)"),n3r=l(),JM=a("li"),D7e=a("strong"),s3r=o("roformer"),l3r=o(" \u2014 "),GJ=a("a"),i3r=o("TFRoFormerForCausalLM"),d3r=o(" (RoFormer model)"),c3r=l(),YM=a("li"),G7e=a("strong"),f3r=o("transfo-xl"),m3r=o(" \u2014 "),OJ=a("a"),g3r=o("TFTransfoXLLMHeadModel"),h3r=o(" (Transformer-XL model)"),p3r=l(),KM=a("li"),O7e=a("strong"),_3r=o("xlm"),u3r=o(" \u2014 "),VJ=a("a"),b3r=o("TFXLMWithLMHeadModel"),v3r=o(" (XLM model)"),F3r=l(),ZM=a("li"),V7e=a("strong"),T3r=o("xlnet"),M3r=o(" \u2014 "),XJ=a("a"),E3r=o("TFXLNetLMHeadModel"),C3r=o(" (XLNet model)"),w3r=l(),F(eE.$$.fragment),oze=l(),hc=a("h2"),oE=a("a"),X7e=a("span"),F(tx.$$.fragment),A3r=l(),z7e=a("span"),L3r=o("TFAutoModelForImageClassification"),rze=l(),tr=a("div"),F(ax.$$.fragment),y3r=l(),pc=a("p"),x3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=a("a"),$3r=o("from_pretrained()"),k3r=o(" class method or the "),QJ=a("a"),S3r=o("from_config()"),R3r=o(` class
method.`),P3r=l(),nx=a("p"),B3r=o("This class cannot be instantiated directly using "),Q7e=a("code"),I3r=o("__init__()"),N3r=o(" (throws an error)."),q3r=l(),Bt=a("div"),F(sx.$$.fragment),j3r=l(),W7e=a("p"),D3r=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),G3r=l(),_c=a("p"),O3r=o(`Note:
Loading a model from its configuration file does `),H7e=a("strong"),V3r=o("not"),X3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=a("a"),z3r=o("from_pretrained()"),Q3r=o(" to load the model weights."),W3r=l(),F(rE.$$.fragment),H3r=l(),Sr=a("div"),F(lx.$$.fragment),U3r=l(),U7e=a("p"),J3r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Y3r=l(),cn=a("p"),K3r=o("The model class to instantiate is selected based on the "),J7e=a("code"),Z3r=o("model_type"),e5r=o(` property of the config object (either
passed as an argument or loaded from `),Y7e=a("code"),o5r=o("pretrained_model_name_or_path"),r5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=a("code"),t5r=o("pretrained_model_name_or_path"),a5r=o(":"),n5r=l(),ar=a("ul"),tE=a("li"),Z7e=a("strong"),s5r=o("convnext"),l5r=o(" \u2014 "),HJ=a("a"),i5r=o("TFConvNextForImageClassification"),d5r=o(" (ConvNeXT model)"),c5r=l(),aE=a("li"),e9e=a("strong"),f5r=o("data2vec-vision"),m5r=o(" \u2014 "),UJ=a("a"),g5r=o("TFData2VecVisionForImageClassification"),h5r=o(" (Data2VecVision model)"),p5r=l(),nE=a("li"),o9e=a("strong"),_5r=o("regnet"),u5r=o(" \u2014 "),JJ=a("a"),b5r=o("TFRegNetForImageClassification"),v5r=o(" (RegNet model)"),F5r=l(),sE=a("li"),r9e=a("strong"),T5r=o("resnet"),M5r=o(" \u2014 "),YJ=a("a"),E5r=o("TFResNetForImageClassification"),C5r=o(" (ResNet model)"),w5r=l(),lE=a("li"),t9e=a("strong"),A5r=o("swin"),L5r=o(" \u2014 "),KJ=a("a"),y5r=o("TFSwinForImageClassification"),x5r=o(" (Swin Transformer model)"),$5r=l(),iE=a("li"),a9e=a("strong"),k5r=o("vit"),S5r=o(" \u2014 "),ZJ=a("a"),R5r=o("TFViTForImageClassification"),P5r=o(" (ViT model)"),B5r=l(),F(dE.$$.fragment),tze=l(),uc=a("h2"),cE=a("a"),n9e=a("span"),F(ix.$$.fragment),I5r=l(),s9e=a("span"),N5r=o("TFAutoModelForMaskedLM"),aze=l(),nr=a("div"),F(dx.$$.fragment),q5r=l(),bc=a("p"),j5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=a("a"),D5r=o("from_pretrained()"),G5r=o(" class method or the "),oY=a("a"),O5r=o("from_config()"),V5r=o(` class
method.`),X5r=l(),cx=a("p"),z5r=o("This class cannot be instantiated directly using "),l9e=a("code"),Q5r=o("__init__()"),W5r=o(" (throws an error)."),H5r=l(),It=a("div"),F(fx.$$.fragment),U5r=l(),i9e=a("p"),J5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Y5r=l(),vc=a("p"),K5r=o(`Note:
Loading a model from its configuration file does `),d9e=a("strong"),Z5r=o("not"),e0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=a("a"),o0r=o("from_pretrained()"),r0r=o(" to load the model weights."),t0r=l(),F(fE.$$.fragment),a0r=l(),Rr=a("div"),F(mx.$$.fragment),n0r=l(),c9e=a("p"),s0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),l0r=l(),fn=a("p"),i0r=o("The model class to instantiate is selected based on the "),f9e=a("code"),d0r=o("model_type"),c0r=o(` property of the config object (either
passed as an argument or loaded from `),m9e=a("code"),f0r=o("pretrained_model_name_or_path"),m0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=a("code"),g0r=o("pretrained_model_name_or_path"),h0r=o(":"),p0r=l(),ie=a("ul"),mE=a("li"),h9e=a("strong"),_0r=o("albert"),u0r=o(" \u2014 "),tY=a("a"),b0r=o("TFAlbertForMaskedLM"),v0r=o(" (ALBERT model)"),F0r=l(),gE=a("li"),p9e=a("strong"),T0r=o("bert"),M0r=o(" \u2014 "),aY=a("a"),E0r=o("TFBertForMaskedLM"),C0r=o(" (BERT model)"),w0r=l(),hE=a("li"),_9e=a("strong"),A0r=o("camembert"),L0r=o(" \u2014 "),nY=a("a"),y0r=o("TFCamembertForMaskedLM"),x0r=o(" (CamemBERT model)"),$0r=l(),pE=a("li"),u9e=a("strong"),k0r=o("convbert"),S0r=o(" \u2014 "),sY=a("a"),R0r=o("TFConvBertForMaskedLM"),P0r=o(" (ConvBERT model)"),B0r=l(),_E=a("li"),b9e=a("strong"),I0r=o("deberta"),N0r=o(" \u2014 "),lY=a("a"),q0r=o("TFDebertaForMaskedLM"),j0r=o(" (DeBERTa model)"),D0r=l(),uE=a("li"),v9e=a("strong"),G0r=o("deberta-v2"),O0r=o(" \u2014 "),iY=a("a"),V0r=o("TFDebertaV2ForMaskedLM"),X0r=o(" (DeBERTa-v2 model)"),z0r=l(),bE=a("li"),F9e=a("strong"),Q0r=o("distilbert"),W0r=o(" \u2014 "),dY=a("a"),H0r=o("TFDistilBertForMaskedLM"),U0r=o(" (DistilBERT model)"),J0r=l(),vE=a("li"),T9e=a("strong"),Y0r=o("electra"),K0r=o(" \u2014 "),cY=a("a"),Z0r=o("TFElectraForMaskedLM"),ewr=o(" (ELECTRA model)"),owr=l(),FE=a("li"),M9e=a("strong"),rwr=o("flaubert"),twr=o(" \u2014 "),fY=a("a"),awr=o("TFFlaubertWithLMHeadModel"),nwr=o(" (FlauBERT model)"),swr=l(),TE=a("li"),E9e=a("strong"),lwr=o("funnel"),iwr=o(" \u2014 "),mY=a("a"),dwr=o("TFFunnelForMaskedLM"),cwr=o(" (Funnel Transformer model)"),fwr=l(),ME=a("li"),C9e=a("strong"),mwr=o("layoutlm"),gwr=o(" \u2014 "),gY=a("a"),hwr=o("TFLayoutLMForMaskedLM"),pwr=o(" (LayoutLM model)"),_wr=l(),EE=a("li"),w9e=a("strong"),uwr=o("longformer"),bwr=o(" \u2014 "),hY=a("a"),vwr=o("TFLongformerForMaskedLM"),Fwr=o(" (Longformer model)"),Twr=l(),CE=a("li"),A9e=a("strong"),Mwr=o("mobilebert"),Ewr=o(" \u2014 "),pY=a("a"),Cwr=o("TFMobileBertForMaskedLM"),wwr=o(" (MobileBERT model)"),Awr=l(),wE=a("li"),L9e=a("strong"),Lwr=o("mpnet"),ywr=o(" \u2014 "),_Y=a("a"),xwr=o("TFMPNetForMaskedLM"),$wr=o(" (MPNet model)"),kwr=l(),AE=a("li"),y9e=a("strong"),Swr=o("rembert"),Rwr=o(" \u2014 "),uY=a("a"),Pwr=o("TFRemBertForMaskedLM"),Bwr=o(" (RemBERT model)"),Iwr=l(),LE=a("li"),x9e=a("strong"),Nwr=o("roberta"),qwr=o(" \u2014 "),bY=a("a"),jwr=o("TFRobertaForMaskedLM"),Dwr=o(" (RoBERTa model)"),Gwr=l(),yE=a("li"),$9e=a("strong"),Owr=o("roformer"),Vwr=o(" \u2014 "),vY=a("a"),Xwr=o("TFRoFormerForMaskedLM"),zwr=o(" (RoFormer model)"),Qwr=l(),xE=a("li"),k9e=a("strong"),Wwr=o("tapas"),Hwr=o(" \u2014 "),FY=a("a"),Uwr=o("TFTapasForMaskedLM"),Jwr=o(" (TAPAS model)"),Ywr=l(),$E=a("li"),S9e=a("strong"),Kwr=o("xlm"),Zwr=o(" \u2014 "),TY=a("a"),eAr=o("TFXLMWithLMHeadModel"),oAr=o(" (XLM model)"),rAr=l(),kE=a("li"),R9e=a("strong"),tAr=o("xlm-roberta"),aAr=o(" \u2014 "),MY=a("a"),nAr=o("TFXLMRobertaForMaskedLM"),sAr=o(" (XLM-RoBERTa model)"),lAr=l(),F(SE.$$.fragment),nze=l(),Fc=a("h2"),RE=a("a"),P9e=a("span"),F(gx.$$.fragment),iAr=l(),B9e=a("span"),dAr=o("TFAutoModelForSeq2SeqLM"),sze=l(),sr=a("div"),F(hx.$$.fragment),cAr=l(),Tc=a("p"),fAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=a("a"),mAr=o("from_pretrained()"),gAr=o(" class method or the "),CY=a("a"),hAr=o("from_config()"),pAr=o(` class
method.`),_Ar=l(),px=a("p"),uAr=o("This class cannot be instantiated directly using "),I9e=a("code"),bAr=o("__init__()"),vAr=o(" (throws an error)."),FAr=l(),Nt=a("div"),F(_x.$$.fragment),TAr=l(),N9e=a("p"),MAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),EAr=l(),Mc=a("p"),CAr=o(`Note:
Loading a model from its configuration file does `),q9e=a("strong"),wAr=o("not"),AAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=a("a"),LAr=o("from_pretrained()"),yAr=o(" to load the model weights."),xAr=l(),F(PE.$$.fragment),$Ar=l(),Pr=a("div"),F(ux.$$.fragment),kAr=l(),j9e=a("p"),SAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),RAr=l(),mn=a("p"),PAr=o("The model class to instantiate is selected based on the "),D9e=a("code"),BAr=o("model_type"),IAr=o(` property of the config object (either
passed as an argument or loaded from `),G9e=a("code"),NAr=o("pretrained_model_name_or_path"),qAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O9e=a("code"),jAr=o("pretrained_model_name_or_path"),DAr=o(":"),GAr=l(),ye=a("ul"),BE=a("li"),V9e=a("strong"),OAr=o("bart"),VAr=o(" \u2014 "),AY=a("a"),XAr=o("TFBartForConditionalGeneration"),zAr=o(" (BART model)"),QAr=l(),IE=a("li"),X9e=a("strong"),WAr=o("blenderbot"),HAr=o(" \u2014 "),LY=a("a"),UAr=o("TFBlenderbotForConditionalGeneration"),JAr=o(" (Blenderbot model)"),YAr=l(),NE=a("li"),z9e=a("strong"),KAr=o("blenderbot-small"),ZAr=o(" \u2014 "),yY=a("a"),e6r=o("TFBlenderbotSmallForConditionalGeneration"),o6r=o(" (BlenderbotSmall model)"),r6r=l(),qE=a("li"),Q9e=a("strong"),t6r=o("encoder-decoder"),a6r=o(" \u2014 "),xY=a("a"),n6r=o("TFEncoderDecoderModel"),s6r=o(" (Encoder decoder model)"),l6r=l(),jE=a("li"),W9e=a("strong"),i6r=o("led"),d6r=o(" \u2014 "),$Y=a("a"),c6r=o("TFLEDForConditionalGeneration"),f6r=o(" (LED model)"),m6r=l(),DE=a("li"),H9e=a("strong"),g6r=o("marian"),h6r=o(" \u2014 "),kY=a("a"),p6r=o("TFMarianMTModel"),_6r=o(" (Marian model)"),u6r=l(),GE=a("li"),U9e=a("strong"),b6r=o("mbart"),v6r=o(" \u2014 "),SY=a("a"),F6r=o("TFMBartForConditionalGeneration"),T6r=o(" (mBART model)"),M6r=l(),OE=a("li"),J9e=a("strong"),E6r=o("mt5"),C6r=o(" \u2014 "),RY=a("a"),w6r=o("TFMT5ForConditionalGeneration"),A6r=o(" (MT5 model)"),L6r=l(),VE=a("li"),Y9e=a("strong"),y6r=o("pegasus"),x6r=o(" \u2014 "),PY=a("a"),$6r=o("TFPegasusForConditionalGeneration"),k6r=o(" (Pegasus model)"),S6r=l(),XE=a("li"),K9e=a("strong"),R6r=o("t5"),P6r=o(" \u2014 "),BY=a("a"),B6r=o("TFT5ForConditionalGeneration"),I6r=o(" (T5 model)"),N6r=l(),F(zE.$$.fragment),lze=l(),Ec=a("h2"),QE=a("a"),Z9e=a("span"),F(bx.$$.fragment),q6r=l(),eMe=a("span"),j6r=o("TFAutoModelForSequenceClassification"),ize=l(),lr=a("div"),F(vx.$$.fragment),D6r=l(),Cc=a("p"),G6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IY=a("a"),O6r=o("from_pretrained()"),V6r=o(" class method or the "),NY=a("a"),X6r=o("from_config()"),z6r=o(` class
method.`),Q6r=l(),Fx=a("p"),W6r=o("This class cannot be instantiated directly using "),oMe=a("code"),H6r=o("__init__()"),U6r=o(" (throws an error)."),J6r=l(),qt=a("div"),F(Tx.$$.fragment),Y6r=l(),rMe=a("p"),K6r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Z6r=l(),wc=a("p"),eLr=o(`Note:
Loading a model from its configuration file does `),tMe=a("strong"),oLr=o("not"),rLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),tLr=o("from_pretrained()"),aLr=o(" to load the model weights."),nLr=l(),F(WE.$$.fragment),sLr=l(),Br=a("div"),F(Mx.$$.fragment),lLr=l(),aMe=a("p"),iLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),dLr=l(),gn=a("p"),cLr=o("The model class to instantiate is selected based on the "),nMe=a("code"),fLr=o("model_type"),mLr=o(` property of the config object (either
passed as an argument or loaded from `),sMe=a("code"),gLr=o("pretrained_model_name_or_path"),hLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=a("code"),pLr=o("pretrained_model_name_or_path"),_Lr=o(":"),uLr=l(),te=a("ul"),HE=a("li"),iMe=a("strong"),bLr=o("albert"),vLr=o(" \u2014 "),jY=a("a"),FLr=o("TFAlbertForSequenceClassification"),TLr=o(" (ALBERT model)"),MLr=l(),UE=a("li"),dMe=a("strong"),ELr=o("bert"),CLr=o(" \u2014 "),DY=a("a"),wLr=o("TFBertForSequenceClassification"),ALr=o(" (BERT model)"),LLr=l(),JE=a("li"),cMe=a("strong"),yLr=o("camembert"),xLr=o(" \u2014 "),GY=a("a"),$Lr=o("TFCamembertForSequenceClassification"),kLr=o(" (CamemBERT model)"),SLr=l(),YE=a("li"),fMe=a("strong"),RLr=o("convbert"),PLr=o(" \u2014 "),OY=a("a"),BLr=o("TFConvBertForSequenceClassification"),ILr=o(" (ConvBERT model)"),NLr=l(),KE=a("li"),mMe=a("strong"),qLr=o("ctrl"),jLr=o(" \u2014 "),VY=a("a"),DLr=o("TFCTRLForSequenceClassification"),GLr=o(" (CTRL model)"),OLr=l(),ZE=a("li"),gMe=a("strong"),VLr=o("deberta"),XLr=o(" \u2014 "),XY=a("a"),zLr=o("TFDebertaForSequenceClassification"),QLr=o(" (DeBERTa model)"),WLr=l(),eC=a("li"),hMe=a("strong"),HLr=o("deberta-v2"),ULr=o(" \u2014 "),zY=a("a"),JLr=o("TFDebertaV2ForSequenceClassification"),YLr=o(" (DeBERTa-v2 model)"),KLr=l(),oC=a("li"),pMe=a("strong"),ZLr=o("distilbert"),eyr=o(" \u2014 "),QY=a("a"),oyr=o("TFDistilBertForSequenceClassification"),ryr=o(" (DistilBERT model)"),tyr=l(),rC=a("li"),_Me=a("strong"),ayr=o("electra"),nyr=o(" \u2014 "),WY=a("a"),syr=o("TFElectraForSequenceClassification"),lyr=o(" (ELECTRA model)"),iyr=l(),tC=a("li"),uMe=a("strong"),dyr=o("flaubert"),cyr=o(" \u2014 "),HY=a("a"),fyr=o("TFFlaubertForSequenceClassification"),myr=o(" (FlauBERT model)"),gyr=l(),aC=a("li"),bMe=a("strong"),hyr=o("funnel"),pyr=o(" \u2014 "),UY=a("a"),_yr=o("TFFunnelForSequenceClassification"),uyr=o(" (Funnel Transformer model)"),byr=l(),nC=a("li"),vMe=a("strong"),vyr=o("gpt2"),Fyr=o(" \u2014 "),JY=a("a"),Tyr=o("TFGPT2ForSequenceClassification"),Myr=o(" (OpenAI GPT-2 model)"),Eyr=l(),sC=a("li"),FMe=a("strong"),Cyr=o("gptj"),wyr=o(" \u2014 "),YY=a("a"),Ayr=o("TFGPTJForSequenceClassification"),Lyr=o(" (GPT-J model)"),yyr=l(),lC=a("li"),TMe=a("strong"),xyr=o("layoutlm"),$yr=o(" \u2014 "),KY=a("a"),kyr=o("TFLayoutLMForSequenceClassification"),Syr=o(" (LayoutLM model)"),Ryr=l(),iC=a("li"),MMe=a("strong"),Pyr=o("longformer"),Byr=o(" \u2014 "),ZY=a("a"),Iyr=o("TFLongformerForSequenceClassification"),Nyr=o(" (Longformer model)"),qyr=l(),dC=a("li"),EMe=a("strong"),jyr=o("mobilebert"),Dyr=o(" \u2014 "),eK=a("a"),Gyr=o("TFMobileBertForSequenceClassification"),Oyr=o(" (MobileBERT model)"),Vyr=l(),cC=a("li"),CMe=a("strong"),Xyr=o("mpnet"),zyr=o(" \u2014 "),oK=a("a"),Qyr=o("TFMPNetForSequenceClassification"),Wyr=o(" (MPNet model)"),Hyr=l(),fC=a("li"),wMe=a("strong"),Uyr=o("openai-gpt"),Jyr=o(" \u2014 "),rK=a("a"),Yyr=o("TFOpenAIGPTForSequenceClassification"),Kyr=o(" (OpenAI GPT model)"),Zyr=l(),mC=a("li"),AMe=a("strong"),e8r=o("rembert"),o8r=o(" \u2014 "),tK=a("a"),r8r=o("TFRemBertForSequenceClassification"),t8r=o(" (RemBERT model)"),a8r=l(),gC=a("li"),LMe=a("strong"),n8r=o("roberta"),s8r=o(" \u2014 "),aK=a("a"),l8r=o("TFRobertaForSequenceClassification"),i8r=o(" (RoBERTa model)"),d8r=l(),hC=a("li"),yMe=a("strong"),c8r=o("roformer"),f8r=o(" \u2014 "),nK=a("a"),m8r=o("TFRoFormerForSequenceClassification"),g8r=o(" (RoFormer model)"),h8r=l(),pC=a("li"),xMe=a("strong"),p8r=o("tapas"),_8r=o(" \u2014 "),sK=a("a"),u8r=o("TFTapasForSequenceClassification"),b8r=o(" (TAPAS model)"),v8r=l(),_C=a("li"),$Me=a("strong"),F8r=o("transfo-xl"),T8r=o(" \u2014 "),lK=a("a"),M8r=o("TFTransfoXLForSequenceClassification"),E8r=o(" (Transformer-XL model)"),C8r=l(),uC=a("li"),kMe=a("strong"),w8r=o("xlm"),A8r=o(" \u2014 "),iK=a("a"),L8r=o("TFXLMForSequenceClassification"),y8r=o(" (XLM model)"),x8r=l(),bC=a("li"),SMe=a("strong"),$8r=o("xlm-roberta"),k8r=o(" \u2014 "),dK=a("a"),S8r=o("TFXLMRobertaForSequenceClassification"),R8r=o(" (XLM-RoBERTa model)"),P8r=l(),vC=a("li"),RMe=a("strong"),B8r=o("xlnet"),I8r=o(" \u2014 "),cK=a("a"),N8r=o("TFXLNetForSequenceClassification"),q8r=o(" (XLNet model)"),j8r=l(),F(FC.$$.fragment),dze=l(),Ac=a("h2"),TC=a("a"),PMe=a("span"),F(Ex.$$.fragment),D8r=l(),BMe=a("span"),G8r=o("TFAutoModelForMultipleChoice"),cze=l(),ir=a("div"),F(Cx.$$.fragment),O8r=l(),Lc=a("p"),V8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fK=a("a"),X8r=o("from_pretrained()"),z8r=o(" class method or the "),mK=a("a"),Q8r=o("from_config()"),W8r=o(` class
method.`),H8r=l(),wx=a("p"),U8r=o("This class cannot be instantiated directly using "),IMe=a("code"),J8r=o("__init__()"),Y8r=o(" (throws an error)."),K8r=l(),jt=a("div"),F(Ax.$$.fragment),Z8r=l(),NMe=a("p"),exr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oxr=l(),yc=a("p"),rxr=o(`Note:
Loading a model from its configuration file does `),qMe=a("strong"),txr=o("not"),axr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=a("a"),nxr=o("from_pretrained()"),sxr=o(" to load the model weights."),lxr=l(),F(MC.$$.fragment),ixr=l(),Ir=a("div"),F(Lx.$$.fragment),dxr=l(),jMe=a("p"),cxr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fxr=l(),hn=a("p"),mxr=o("The model class to instantiate is selected based on the "),DMe=a("code"),gxr=o("model_type"),hxr=o(` property of the config object (either
passed as an argument or loaded from `),GMe=a("code"),pxr=o("pretrained_model_name_or_path"),_xr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=a("code"),uxr=o("pretrained_model_name_or_path"),bxr=o(":"),vxr=l(),_e=a("ul"),EC=a("li"),VMe=a("strong"),Fxr=o("albert"),Txr=o(" \u2014 "),hK=a("a"),Mxr=o("TFAlbertForMultipleChoice"),Exr=o(" (ALBERT model)"),Cxr=l(),CC=a("li"),XMe=a("strong"),wxr=o("bert"),Axr=o(" \u2014 "),pK=a("a"),Lxr=o("TFBertForMultipleChoice"),yxr=o(" (BERT model)"),xxr=l(),wC=a("li"),zMe=a("strong"),$xr=o("camembert"),kxr=o(" \u2014 "),_K=a("a"),Sxr=o("TFCamembertForMultipleChoice"),Rxr=o(" (CamemBERT model)"),Pxr=l(),AC=a("li"),QMe=a("strong"),Bxr=o("convbert"),Ixr=o(" \u2014 "),uK=a("a"),Nxr=o("TFConvBertForMultipleChoice"),qxr=o(" (ConvBERT model)"),jxr=l(),LC=a("li"),WMe=a("strong"),Dxr=o("distilbert"),Gxr=o(" \u2014 "),bK=a("a"),Oxr=o("TFDistilBertForMultipleChoice"),Vxr=o(" (DistilBERT model)"),Xxr=l(),yC=a("li"),HMe=a("strong"),zxr=o("electra"),Qxr=o(" \u2014 "),vK=a("a"),Wxr=o("TFElectraForMultipleChoice"),Hxr=o(" (ELECTRA model)"),Uxr=l(),xC=a("li"),UMe=a("strong"),Jxr=o("flaubert"),Yxr=o(" \u2014 "),FK=a("a"),Kxr=o("TFFlaubertForMultipleChoice"),Zxr=o(" (FlauBERT model)"),e$r=l(),$C=a("li"),JMe=a("strong"),o$r=o("funnel"),r$r=o(" \u2014 "),TK=a("a"),t$r=o("TFFunnelForMultipleChoice"),a$r=o(" (Funnel Transformer model)"),n$r=l(),kC=a("li"),YMe=a("strong"),s$r=o("longformer"),l$r=o(" \u2014 "),MK=a("a"),i$r=o("TFLongformerForMultipleChoice"),d$r=o(" (Longformer model)"),c$r=l(),SC=a("li"),KMe=a("strong"),f$r=o("mobilebert"),m$r=o(" \u2014 "),EK=a("a"),g$r=o("TFMobileBertForMultipleChoice"),h$r=o(" (MobileBERT model)"),p$r=l(),RC=a("li"),ZMe=a("strong"),_$r=o("mpnet"),u$r=o(" \u2014 "),CK=a("a"),b$r=o("TFMPNetForMultipleChoice"),v$r=o(" (MPNet model)"),F$r=l(),PC=a("li"),eEe=a("strong"),T$r=o("rembert"),M$r=o(" \u2014 "),wK=a("a"),E$r=o("TFRemBertForMultipleChoice"),C$r=o(" (RemBERT model)"),w$r=l(),BC=a("li"),oEe=a("strong"),A$r=o("roberta"),L$r=o(" \u2014 "),AK=a("a"),y$r=o("TFRobertaForMultipleChoice"),x$r=o(" (RoBERTa model)"),$$r=l(),IC=a("li"),rEe=a("strong"),k$r=o("roformer"),S$r=o(" \u2014 "),LK=a("a"),R$r=o("TFRoFormerForMultipleChoice"),P$r=o(" (RoFormer model)"),B$r=l(),NC=a("li"),tEe=a("strong"),I$r=o("xlm"),N$r=o(" \u2014 "),yK=a("a"),q$r=o("TFXLMForMultipleChoice"),j$r=o(" (XLM model)"),D$r=l(),qC=a("li"),aEe=a("strong"),G$r=o("xlm-roberta"),O$r=o(" \u2014 "),xK=a("a"),V$r=o("TFXLMRobertaForMultipleChoice"),X$r=o(" (XLM-RoBERTa model)"),z$r=l(),jC=a("li"),nEe=a("strong"),Q$r=o("xlnet"),W$r=o(" \u2014 "),$K=a("a"),H$r=o("TFXLNetForMultipleChoice"),U$r=o(" (XLNet model)"),J$r=l(),F(DC.$$.fragment),fze=l(),xc=a("h2"),GC=a("a"),sEe=a("span"),F(yx.$$.fragment),Y$r=l(),lEe=a("span"),K$r=o("TFAutoModelForNextSentencePrediction"),mze=l(),dr=a("div"),F(xx.$$.fragment),Z$r=l(),$c=a("p"),ekr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=a("a"),okr=o("from_pretrained()"),rkr=o(" class method or the "),SK=a("a"),tkr=o("from_config()"),akr=o(` class
method.`),nkr=l(),$x=a("p"),skr=o("This class cannot be instantiated directly using "),iEe=a("code"),lkr=o("__init__()"),ikr=o(" (throws an error)."),dkr=l(),Dt=a("div"),F(kx.$$.fragment),ckr=l(),dEe=a("p"),fkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mkr=l(),kc=a("p"),gkr=o(`Note:
Loading a model from its configuration file does `),cEe=a("strong"),hkr=o("not"),pkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=a("a"),_kr=o("from_pretrained()"),ukr=o(" to load the model weights."),bkr=l(),F(OC.$$.fragment),vkr=l(),Nr=a("div"),F(Sx.$$.fragment),Fkr=l(),fEe=a("p"),Tkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mkr=l(),pn=a("p"),Ekr=o("The model class to instantiate is selected based on the "),mEe=a("code"),Ckr=o("model_type"),wkr=o(` property of the config object (either
passed as an argument or loaded from `),gEe=a("code"),Akr=o("pretrained_model_name_or_path"),Lkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=a("code"),ykr=o("pretrained_model_name_or_path"),xkr=o(":"),$kr=l(),Rx=a("ul"),VC=a("li"),pEe=a("strong"),kkr=o("bert"),Skr=o(" \u2014 "),PK=a("a"),Rkr=o("TFBertForNextSentencePrediction"),Pkr=o(" (BERT model)"),Bkr=l(),XC=a("li"),_Ee=a("strong"),Ikr=o("mobilebert"),Nkr=o(" \u2014 "),BK=a("a"),qkr=o("TFMobileBertForNextSentencePrediction"),jkr=o(" (MobileBERT model)"),Dkr=l(),F(zC.$$.fragment),gze=l(),Sc=a("h2"),QC=a("a"),uEe=a("span"),F(Px.$$.fragment),Gkr=l(),bEe=a("span"),Okr=o("TFAutoModelForTableQuestionAnswering"),hze=l(),cr=a("div"),F(Bx.$$.fragment),Vkr=l(),Rc=a("p"),Xkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IK=a("a"),zkr=o("from_pretrained()"),Qkr=o(" class method or the "),NK=a("a"),Wkr=o("from_config()"),Hkr=o(` class
method.`),Ukr=l(),Ix=a("p"),Jkr=o("This class cannot be instantiated directly using "),vEe=a("code"),Ykr=o("__init__()"),Kkr=o(" (throws an error)."),Zkr=l(),Gt=a("div"),F(Nx.$$.fragment),eSr=l(),FEe=a("p"),oSr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rSr=l(),Pc=a("p"),tSr=o(`Note:
Loading a model from its configuration file does `),TEe=a("strong"),aSr=o("not"),nSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=a("a"),sSr=o("from_pretrained()"),lSr=o(" to load the model weights."),iSr=l(),F(WC.$$.fragment),dSr=l(),qr=a("div"),F(qx.$$.fragment),cSr=l(),MEe=a("p"),fSr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),mSr=l(),_n=a("p"),gSr=o("The model class to instantiate is selected based on the "),EEe=a("code"),hSr=o("model_type"),pSr=o(` property of the config object (either
passed as an argument or loaded from `),CEe=a("code"),_Sr=o("pretrained_model_name_or_path"),uSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),AEe=a("ul"),HC=a("li"),LEe=a("strong"),TSr=o("tapas"),MSr=o(" \u2014 "),jK=a("a"),ESr=o("TFTapasForQuestionAnswering"),CSr=o(" (TAPAS model)"),wSr=l(),F(UC.$$.fragment),pze=l(),Bc=a("h2"),JC=a("a"),yEe=a("span"),F(jx.$$.fragment),ASr=l(),xEe=a("span"),LSr=o("TFAutoModelForTokenClassification"),_ze=l(),fr=a("div"),F(Dx.$$.fragment),ySr=l(),Ic=a("p"),xSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=a("a"),$Sr=o("from_pretrained()"),kSr=o(" class method or the "),GK=a("a"),SSr=o("from_config()"),RSr=o(` class
method.`),PSr=l(),Gx=a("p"),BSr=o("This class cannot be instantiated directly using "),$Ee=a("code"),ISr=o("__init__()"),NSr=o(" (throws an error)."),qSr=l(),Ot=a("div"),F(Ox.$$.fragment),jSr=l(),kEe=a("p"),DSr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),GSr=l(),Nc=a("p"),OSr=o(`Note:
Loading a model from its configuration file does `),SEe=a("strong"),VSr=o("not"),XSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=a("a"),zSr=o("from_pretrained()"),QSr=o(" to load the model weights."),WSr=l(),F(YC.$$.fragment),HSr=l(),jr=a("div"),F(Vx.$$.fragment),USr=l(),REe=a("p"),JSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YSr=l(),un=a("p"),KSr=o("The model class to instantiate is selected based on the "),PEe=a("code"),ZSr=o("model_type"),eRr=o(` property of the config object (either
passed as an argument or loaded from `),BEe=a("code"),oRr=o("pretrained_model_name_or_path"),rRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=a("code"),tRr=o("pretrained_model_name_or_path"),aRr=o(":"),nRr=l(),de=a("ul"),KC=a("li"),NEe=a("strong"),sRr=o("albert"),lRr=o(" \u2014 "),VK=a("a"),iRr=o("TFAlbertForTokenClassification"),dRr=o(" (ALBERT model)"),cRr=l(),ZC=a("li"),qEe=a("strong"),fRr=o("bert"),mRr=o(" \u2014 "),XK=a("a"),gRr=o("TFBertForTokenClassification"),hRr=o(" (BERT model)"),pRr=l(),e3=a("li"),jEe=a("strong"),_Rr=o("camembert"),uRr=o(" \u2014 "),zK=a("a"),bRr=o("TFCamembertForTokenClassification"),vRr=o(" (CamemBERT model)"),FRr=l(),o3=a("li"),DEe=a("strong"),TRr=o("convbert"),MRr=o(" \u2014 "),QK=a("a"),ERr=o("TFConvBertForTokenClassification"),CRr=o(" (ConvBERT model)"),wRr=l(),r3=a("li"),GEe=a("strong"),ARr=o("deberta"),LRr=o(" \u2014 "),WK=a("a"),yRr=o("TFDebertaForTokenClassification"),xRr=o(" (DeBERTa model)"),$Rr=l(),t3=a("li"),OEe=a("strong"),kRr=o("deberta-v2"),SRr=o(" \u2014 "),HK=a("a"),RRr=o("TFDebertaV2ForTokenClassification"),PRr=o(" (DeBERTa-v2 model)"),BRr=l(),a3=a("li"),VEe=a("strong"),IRr=o("distilbert"),NRr=o(" \u2014 "),UK=a("a"),qRr=o("TFDistilBertForTokenClassification"),jRr=o(" (DistilBERT model)"),DRr=l(),n3=a("li"),XEe=a("strong"),GRr=o("electra"),ORr=o(" \u2014 "),JK=a("a"),VRr=o("TFElectraForTokenClassification"),XRr=o(" (ELECTRA model)"),zRr=l(),s3=a("li"),zEe=a("strong"),QRr=o("flaubert"),WRr=o(" \u2014 "),YK=a("a"),HRr=o("TFFlaubertForTokenClassification"),URr=o(" (FlauBERT model)"),JRr=l(),l3=a("li"),QEe=a("strong"),YRr=o("funnel"),KRr=o(" \u2014 "),KK=a("a"),ZRr=o("TFFunnelForTokenClassification"),ePr=o(" (Funnel Transformer model)"),oPr=l(),i3=a("li"),WEe=a("strong"),rPr=o("layoutlm"),tPr=o(" \u2014 "),ZK=a("a"),aPr=o("TFLayoutLMForTokenClassification"),nPr=o(" (LayoutLM model)"),sPr=l(),d3=a("li"),HEe=a("strong"),lPr=o("longformer"),iPr=o(" \u2014 "),eZ=a("a"),dPr=o("TFLongformerForTokenClassification"),cPr=o(" (Longformer model)"),fPr=l(),c3=a("li"),UEe=a("strong"),mPr=o("mobilebert"),gPr=o(" \u2014 "),oZ=a("a"),hPr=o("TFMobileBertForTokenClassification"),pPr=o(" (MobileBERT model)"),_Pr=l(),f3=a("li"),JEe=a("strong"),uPr=o("mpnet"),bPr=o(" \u2014 "),rZ=a("a"),vPr=o("TFMPNetForTokenClassification"),FPr=o(" (MPNet model)"),TPr=l(),m3=a("li"),YEe=a("strong"),MPr=o("rembert"),EPr=o(" \u2014 "),tZ=a("a"),CPr=o("TFRemBertForTokenClassification"),wPr=o(" (RemBERT model)"),APr=l(),g3=a("li"),KEe=a("strong"),LPr=o("roberta"),yPr=o(" \u2014 "),aZ=a("a"),xPr=o("TFRobertaForTokenClassification"),$Pr=o(" (RoBERTa model)"),kPr=l(),h3=a("li"),ZEe=a("strong"),SPr=o("roformer"),RPr=o(" \u2014 "),nZ=a("a"),PPr=o("TFRoFormerForTokenClassification"),BPr=o(" (RoFormer model)"),IPr=l(),p3=a("li"),eCe=a("strong"),NPr=o("xlm"),qPr=o(" \u2014 "),sZ=a("a"),jPr=o("TFXLMForTokenClassification"),DPr=o(" (XLM model)"),GPr=l(),_3=a("li"),oCe=a("strong"),OPr=o("xlm-roberta"),VPr=o(" \u2014 "),lZ=a("a"),XPr=o("TFXLMRobertaForTokenClassification"),zPr=o(" (XLM-RoBERTa model)"),QPr=l(),u3=a("li"),rCe=a("strong"),WPr=o("xlnet"),HPr=o(" \u2014 "),iZ=a("a"),UPr=o("TFXLNetForTokenClassification"),JPr=o(" (XLNet model)"),YPr=l(),F(b3.$$.fragment),uze=l(),qc=a("h2"),v3=a("a"),tCe=a("span"),F(Xx.$$.fragment),KPr=l(),aCe=a("span"),ZPr=o("TFAutoModelForQuestionAnswering"),bze=l(),mr=a("div"),F(zx.$$.fragment),eBr=l(),jc=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),cZ=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),Qx=a("p"),lBr=o("This class cannot be instantiated directly using "),nCe=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),Vt=a("div"),F(Wx.$$.fragment),fBr=l(),sCe=a("p"),mBr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),gBr=l(),Dc=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),pBr=o("not"),_Br=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=a("a"),uBr=o("from_pretrained()"),bBr=o(" to load the model weights."),vBr=l(),F(F3.$$.fragment),FBr=l(),Dr=a("div"),F(Hx.$$.fragment),TBr=l(),iCe=a("p"),MBr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),EBr=l(),bn=a("p"),CBr=o("The model class to instantiate is selected based on the "),dCe=a("code"),wBr=o("model_type"),ABr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),LBr=o("pretrained_model_name_or_path"),yBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),xBr=o("pretrained_model_name_or_path"),$Br=o(":"),kBr=l(),ce=a("ul"),T3=a("li"),mCe=a("strong"),SBr=o("albert"),RBr=o(" \u2014 "),mZ=a("a"),PBr=o("TFAlbertForQuestionAnswering"),BBr=o(" (ALBERT model)"),IBr=l(),M3=a("li"),gCe=a("strong"),NBr=o("bert"),qBr=o(" \u2014 "),gZ=a("a"),jBr=o("TFBertForQuestionAnswering"),DBr=o(" (BERT model)"),GBr=l(),E3=a("li"),hCe=a("strong"),OBr=o("camembert"),VBr=o(" \u2014 "),hZ=a("a"),XBr=o("TFCamembertForQuestionAnswering"),zBr=o(" (CamemBERT model)"),QBr=l(),C3=a("li"),pCe=a("strong"),WBr=o("convbert"),HBr=o(" \u2014 "),pZ=a("a"),UBr=o("TFConvBertForQuestionAnswering"),JBr=o(" (ConvBERT model)"),YBr=l(),w3=a("li"),_Ce=a("strong"),KBr=o("deberta"),ZBr=o(" \u2014 "),_Z=a("a"),eIr=o("TFDebertaForQuestionAnswering"),oIr=o(" (DeBERTa model)"),rIr=l(),A3=a("li"),uCe=a("strong"),tIr=o("deberta-v2"),aIr=o(" \u2014 "),uZ=a("a"),nIr=o("TFDebertaV2ForQuestionAnswering"),sIr=o(" (DeBERTa-v2 model)"),lIr=l(),L3=a("li"),bCe=a("strong"),iIr=o("distilbert"),dIr=o(" \u2014 "),bZ=a("a"),cIr=o("TFDistilBertForQuestionAnswering"),fIr=o(" (DistilBERT model)"),mIr=l(),y3=a("li"),vCe=a("strong"),gIr=o("electra"),hIr=o(" \u2014 "),vZ=a("a"),pIr=o("TFElectraForQuestionAnswering"),_Ir=o(" (ELECTRA model)"),uIr=l(),x3=a("li"),FCe=a("strong"),bIr=o("flaubert"),vIr=o(" \u2014 "),FZ=a("a"),FIr=o("TFFlaubertForQuestionAnsweringSimple"),TIr=o(" (FlauBERT model)"),MIr=l(),$3=a("li"),TCe=a("strong"),EIr=o("funnel"),CIr=o(" \u2014 "),TZ=a("a"),wIr=o("TFFunnelForQuestionAnswering"),AIr=o(" (Funnel Transformer model)"),LIr=l(),k3=a("li"),MCe=a("strong"),yIr=o("gptj"),xIr=o(" \u2014 "),MZ=a("a"),$Ir=o("TFGPTJForQuestionAnswering"),kIr=o(" (GPT-J model)"),SIr=l(),S3=a("li"),ECe=a("strong"),RIr=o("longformer"),PIr=o(" \u2014 "),EZ=a("a"),BIr=o("TFLongformerForQuestionAnswering"),IIr=o(" (Longformer model)"),NIr=l(),R3=a("li"),CCe=a("strong"),qIr=o("mobilebert"),jIr=o(" \u2014 "),CZ=a("a"),DIr=o("TFMobileBertForQuestionAnswering"),GIr=o(" (MobileBERT model)"),OIr=l(),P3=a("li"),wCe=a("strong"),VIr=o("mpnet"),XIr=o(" \u2014 "),wZ=a("a"),zIr=o("TFMPNetForQuestionAnswering"),QIr=o(" (MPNet model)"),WIr=l(),B3=a("li"),ACe=a("strong"),HIr=o("rembert"),UIr=o(" \u2014 "),AZ=a("a"),JIr=o("TFRemBertForQuestionAnswering"),YIr=o(" (RemBERT model)"),KIr=l(),I3=a("li"),LCe=a("strong"),ZIr=o("roberta"),eNr=o(" \u2014 "),LZ=a("a"),oNr=o("TFRobertaForQuestionAnswering"),rNr=o(" (RoBERTa model)"),tNr=l(),N3=a("li"),yCe=a("strong"),aNr=o("roformer"),nNr=o(" \u2014 "),yZ=a("a"),sNr=o("TFRoFormerForQuestionAnswering"),lNr=o(" (RoFormer model)"),iNr=l(),q3=a("li"),xCe=a("strong"),dNr=o("xlm"),cNr=o(" \u2014 "),xZ=a("a"),fNr=o("TFXLMForQuestionAnsweringSimple"),mNr=o(" (XLM model)"),gNr=l(),j3=a("li"),$Ce=a("strong"),hNr=o("xlm-roberta"),pNr=o(" \u2014 "),$Z=a("a"),_Nr=o("TFXLMRobertaForQuestionAnswering"),uNr=o(" (XLM-RoBERTa model)"),bNr=l(),D3=a("li"),kCe=a("strong"),vNr=o("xlnet"),FNr=o(" \u2014 "),kZ=a("a"),TNr=o("TFXLNetForQuestionAnsweringSimple"),MNr=o(" (XLNet model)"),ENr=l(),F(G3.$$.fragment),vze=l(),Gc=a("h2"),O3=a("a"),SCe=a("span"),F(Ux.$$.fragment),CNr=l(),RCe=a("span"),wNr=o("TFAutoModelForVision2Seq"),Fze=l(),gr=a("div"),F(Jx.$$.fragment),ANr=l(),Oc=a("p"),LNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=a("a"),yNr=o("from_pretrained()"),xNr=o(" class method or the "),RZ=a("a"),$Nr=o("from_config()"),kNr=o(` class
method.`),SNr=l(),Yx=a("p"),RNr=o("This class cannot be instantiated directly using "),PCe=a("code"),PNr=o("__init__()"),BNr=o(" (throws an error)."),INr=l(),Xt=a("div"),F(Kx.$$.fragment),NNr=l(),BCe=a("p"),qNr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jNr=l(),Vc=a("p"),DNr=o(`Note:
Loading a model from its configuration file does `),ICe=a("strong"),GNr=o("not"),ONr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),VNr=o("from_pretrained()"),XNr=o(" to load the model weights."),zNr=l(),F(V3.$$.fragment),QNr=l(),Gr=a("div"),F(Zx.$$.fragment),WNr=l(),NCe=a("p"),HNr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UNr=l(),vn=a("p"),JNr=o("The model class to instantiate is selected based on the "),qCe=a("code"),YNr=o("model_type"),KNr=o(` property of the config object (either
passed as an argument or loaded from `),jCe=a("code"),ZNr=o("pretrained_model_name_or_path"),eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(":"),tqr=l(),GCe=a("ul"),X3=a("li"),OCe=a("strong"),aqr=o("vision-encoder-decoder"),nqr=o(" \u2014 "),BZ=a("a"),sqr=o("TFVisionEncoderDecoderModel"),lqr=o(" (Vision Encoder decoder model)"),iqr=l(),F(z3.$$.fragment),Tze=l(),Xc=a("h2"),Q3=a("a"),VCe=a("span"),F(e$.$$.fragment),dqr=l(),XCe=a("span"),cqr=o("TFAutoModelForSpeechSeq2Seq"),Mze=l(),hr=a("div"),F(o$.$$.fragment),fqr=l(),zc=a("p"),mqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IZ=a("a"),gqr=o("from_pretrained()"),hqr=o(" class method or the "),NZ=a("a"),pqr=o("from_config()"),_qr=o(` class
method.`),uqr=l(),r$=a("p"),bqr=o("This class cannot be instantiated directly using "),zCe=a("code"),vqr=o("__init__()"),Fqr=o(" (throws an error)."),Tqr=l(),zt=a("div"),F(t$.$$.fragment),Mqr=l(),QCe=a("p"),Eqr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Cqr=l(),Qc=a("p"),wqr=o(`Note:
Loading a model from its configuration file does `),WCe=a("strong"),Aqr=o("not"),Lqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=a("a"),yqr=o("from_pretrained()"),xqr=o(" to load the model weights."),$qr=l(),F(W3.$$.fragment),kqr=l(),Or=a("div"),F(a$.$$.fragment),Sqr=l(),HCe=a("p"),Rqr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Pqr=l(),Fn=a("p"),Bqr=o("The model class to instantiate is selected based on the "),UCe=a("code"),Iqr=o("model_type"),Nqr=o(` property of the config object (either
passed as an argument or loaded from `),JCe=a("code"),qqr=o("pretrained_model_name_or_path"),jqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=a("code"),Dqr=o("pretrained_model_name_or_path"),Gqr=o(":"),Oqr=l(),KCe=a("ul"),H3=a("li"),ZCe=a("strong"),Vqr=o("speech_to_text"),Xqr=o(" \u2014 "),jZ=a("a"),zqr=o("TFSpeech2TextForConditionalGeneration"),Qqr=o(" (Speech2Text model)"),Wqr=l(),F(U3.$$.fragment),Eze=l(),Wc=a("h2"),J3=a("a"),e3e=a("span"),F(n$.$$.fragment),Hqr=l(),o3e=a("span"),Uqr=o("FlaxAutoModel"),Cze=l(),pr=a("div"),F(s$.$$.fragment),Jqr=l(),Hc=a("p"),Yqr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=a("a"),Kqr=o("from_pretrained()"),Zqr=o(" class method or the "),GZ=a("a"),ejr=o("from_config()"),ojr=o(` class
method.`),rjr=l(),l$=a("p"),tjr=o("This class cannot be instantiated directly using "),r3e=a("code"),ajr=o("__init__()"),njr=o(" (throws an error)."),sjr=l(),Qt=a("div"),F(i$.$$.fragment),ljr=l(),t3e=a("p"),ijr=o("Instantiates one of the base model classes of the library from a configuration."),djr=l(),Uc=a("p"),cjr=o(`Note:
Loading a model from its configuration file does `),a3e=a("strong"),fjr=o("not"),mjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=a("a"),gjr=o("from_pretrained()"),hjr=o(" to load the model weights."),pjr=l(),F(Y3.$$.fragment),_jr=l(),Vr=a("div"),F(d$.$$.fragment),ujr=l(),n3e=a("p"),bjr=o("Instantiate one of the base model classes of the library from a pretrained model."),vjr=l(),Tn=a("p"),Fjr=o("The model class to instantiate is selected based on the "),s3e=a("code"),Tjr=o("model_type"),Mjr=o(` property of the config object (either
passed as an argument or loaded from `),l3e=a("code"),Ejr=o("pretrained_model_name_or_path"),Cjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=a("code"),wjr=o("pretrained_model_name_or_path"),Ajr=o(":"),Ljr=l(),oe=a("ul"),K3=a("li"),d3e=a("strong"),yjr=o("albert"),xjr=o(" \u2014 "),VZ=a("a"),$jr=o("FlaxAlbertModel"),kjr=o(" (ALBERT model)"),Sjr=l(),Z3=a("li"),c3e=a("strong"),Rjr=o("bart"),Pjr=o(" \u2014 "),XZ=a("a"),Bjr=o("FlaxBartModel"),Ijr=o(" (BART model)"),Njr=l(),e5=a("li"),f3e=a("strong"),qjr=o("beit"),jjr=o(" \u2014 "),zZ=a("a"),Djr=o("FlaxBeitModel"),Gjr=o(" (BEiT model)"),Ojr=l(),o5=a("li"),m3e=a("strong"),Vjr=o("bert"),Xjr=o(" \u2014 "),QZ=a("a"),zjr=o("FlaxBertModel"),Qjr=o(" (BERT model)"),Wjr=l(),r5=a("li"),g3e=a("strong"),Hjr=o("big_bird"),Ujr=o(" \u2014 "),WZ=a("a"),Jjr=o("FlaxBigBirdModel"),Yjr=o(" (BigBird model)"),Kjr=l(),t5=a("li"),h3e=a("strong"),Zjr=o("blenderbot"),eDr=o(" \u2014 "),HZ=a("a"),oDr=o("FlaxBlenderbotModel"),rDr=o(" (Blenderbot model)"),tDr=l(),a5=a("li"),p3e=a("strong"),aDr=o("blenderbot-small"),nDr=o(" \u2014 "),UZ=a("a"),sDr=o("FlaxBlenderbotSmallModel"),lDr=o(" (BlenderbotSmall model)"),iDr=l(),n5=a("li"),_3e=a("strong"),dDr=o("clip"),cDr=o(" \u2014 "),JZ=a("a"),fDr=o("FlaxCLIPModel"),mDr=o(" (CLIP model)"),gDr=l(),s5=a("li"),u3e=a("strong"),hDr=o("distilbert"),pDr=o(" \u2014 "),YZ=a("a"),_Dr=o("FlaxDistilBertModel"),uDr=o(" (DistilBERT model)"),bDr=l(),l5=a("li"),b3e=a("strong"),vDr=o("electra"),FDr=o(" \u2014 "),KZ=a("a"),TDr=o("FlaxElectraModel"),MDr=o(" (ELECTRA model)"),EDr=l(),i5=a("li"),v3e=a("strong"),CDr=o("gpt2"),wDr=o(" \u2014 "),ZZ=a("a"),ADr=o("FlaxGPT2Model"),LDr=o(" (OpenAI GPT-2 model)"),yDr=l(),d5=a("li"),F3e=a("strong"),xDr=o("gpt_neo"),$Dr=o(" \u2014 "),eee=a("a"),kDr=o("FlaxGPTNeoModel"),SDr=o(" (GPT Neo model)"),RDr=l(),c5=a("li"),T3e=a("strong"),PDr=o("gptj"),BDr=o(" \u2014 "),oee=a("a"),IDr=o("FlaxGPTJModel"),NDr=o(" (GPT-J model)"),qDr=l(),f5=a("li"),M3e=a("strong"),jDr=o("longt5"),DDr=o(" \u2014 "),ree=a("a"),GDr=o("FlaxLongT5Model"),ODr=o(" (LongT5 model)"),VDr=l(),m5=a("li"),E3e=a("strong"),XDr=o("marian"),zDr=o(" \u2014 "),tee=a("a"),QDr=o("FlaxMarianModel"),WDr=o(" (Marian model)"),HDr=l(),g5=a("li"),C3e=a("strong"),UDr=o("mbart"),JDr=o(" \u2014 "),aee=a("a"),YDr=o("FlaxMBartModel"),KDr=o(" (mBART model)"),ZDr=l(),h5=a("li"),w3e=a("strong"),eGr=o("mt5"),oGr=o(" \u2014 "),nee=a("a"),rGr=o("FlaxMT5Model"),tGr=o(" (MT5 model)"),aGr=l(),p5=a("li"),A3e=a("strong"),nGr=o("opt"),sGr=o(" \u2014 "),see=a("a"),lGr=o("FlaxOPTModel"),iGr=o(" (OPT model)"),dGr=l(),_5=a("li"),L3e=a("strong"),cGr=o("pegasus"),fGr=o(" \u2014 "),lee=a("a"),mGr=o("FlaxPegasusModel"),gGr=o(" (Pegasus model)"),hGr=l(),u5=a("li"),y3e=a("strong"),pGr=o("roberta"),_Gr=o(" \u2014 "),iee=a("a"),uGr=o("FlaxRobertaModel"),bGr=o(" (RoBERTa model)"),vGr=l(),b5=a("li"),x3e=a("strong"),FGr=o("roformer"),TGr=o(" \u2014 "),dee=a("a"),MGr=o("FlaxRoFormerModel"),EGr=o(" (RoFormer model)"),CGr=l(),v5=a("li"),$3e=a("strong"),wGr=o("t5"),AGr=o(" \u2014 "),cee=a("a"),LGr=o("FlaxT5Model"),yGr=o(" (T5 model)"),xGr=l(),F5=a("li"),k3e=a("strong"),$Gr=o("vision-text-dual-encoder"),kGr=o(" \u2014 "),fee=a("a"),SGr=o("FlaxVisionTextDualEncoderModel"),RGr=o(" (VisionTextDualEncoder model)"),PGr=l(),T5=a("li"),S3e=a("strong"),BGr=o("vit"),IGr=o(" \u2014 "),mee=a("a"),NGr=o("FlaxViTModel"),qGr=o(" (ViT model)"),jGr=l(),M5=a("li"),R3e=a("strong"),DGr=o("wav2vec2"),GGr=o(" \u2014 "),gee=a("a"),OGr=o("FlaxWav2Vec2Model"),VGr=o(" (Wav2Vec2 model)"),XGr=l(),E5=a("li"),P3e=a("strong"),zGr=o("xglm"),QGr=o(" \u2014 "),hee=a("a"),WGr=o("FlaxXGLMModel"),HGr=o(" (XGLM model)"),UGr=l(),C5=a("li"),B3e=a("strong"),JGr=o("xlm-roberta"),YGr=o(" \u2014 "),pee=a("a"),KGr=o("FlaxXLMRobertaModel"),ZGr=o(" (XLM-RoBERTa model)"),eOr=l(),F(w5.$$.fragment),wze=l(),Jc=a("h2"),A5=a("a"),I3e=a("span"),F(c$.$$.fragment),oOr=l(),N3e=a("span"),rOr=o("FlaxAutoModelForCausalLM"),Aze=l(),_r=a("div"),F(f$.$$.fragment),tOr=l(),Yc=a("p"),aOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ee=a("a"),nOr=o("from_pretrained()"),sOr=o(" class method or the "),uee=a("a"),lOr=o("from_config()"),iOr=o(` class
method.`),dOr=l(),m$=a("p"),cOr=o("This class cannot be instantiated directly using "),q3e=a("code"),fOr=o("__init__()"),mOr=o(" (throws an error)."),gOr=l(),Wt=a("div"),F(g$.$$.fragment),hOr=l(),j3e=a("p"),pOr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),_Or=l(),Kc=a("p"),uOr=o(`Note:
Loading a model from its configuration file does `),D3e=a("strong"),bOr=o("not"),vOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=a("a"),FOr=o("from_pretrained()"),TOr=o(" to load the model weights."),MOr=l(),F(L5.$$.fragment),EOr=l(),Xr=a("div"),F(h$.$$.fragment),COr=l(),G3e=a("p"),wOr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),AOr=l(),Mn=a("p"),LOr=o("The model class to instantiate is selected based on the "),O3e=a("code"),yOr=o("model_type"),xOr=o(` property of the config object (either
passed as an argument or loaded from `),V3e=a("code"),$Or=o("pretrained_model_name_or_path"),kOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),SOr=o("pretrained_model_name_or_path"),ROr=o(":"),POr=l(),xe=a("ul"),y5=a("li"),z3e=a("strong"),BOr=o("bart"),IOr=o(" \u2014 "),vee=a("a"),NOr=o("FlaxBartForCausalLM"),qOr=o(" (BART model)"),jOr=l(),x5=a("li"),Q3e=a("strong"),DOr=o("bert"),GOr=o(" \u2014 "),Fee=a("a"),OOr=o("FlaxBertForCausalLM"),VOr=o(" (BERT model)"),XOr=l(),$5=a("li"),W3e=a("strong"),zOr=o("big_bird"),QOr=o(" \u2014 "),Tee=a("a"),WOr=o("FlaxBigBirdForCausalLM"),HOr=o(" (BigBird model)"),UOr=l(),k5=a("li"),H3e=a("strong"),JOr=o("electra"),YOr=o(" \u2014 "),Mee=a("a"),KOr=o("FlaxElectraForCausalLM"),ZOr=o(" (ELECTRA model)"),eVr=l(),S5=a("li"),U3e=a("strong"),oVr=o("gpt2"),rVr=o(" \u2014 "),Eee=a("a"),tVr=o("FlaxGPT2LMHeadModel"),aVr=o(" (OpenAI GPT-2 model)"),nVr=l(),R5=a("li"),J3e=a("strong"),sVr=o("gpt_neo"),lVr=o(" \u2014 "),Cee=a("a"),iVr=o("FlaxGPTNeoForCausalLM"),dVr=o(" (GPT Neo model)"),cVr=l(),P5=a("li"),Y3e=a("strong"),fVr=o("gptj"),mVr=o(" \u2014 "),wee=a("a"),gVr=o("FlaxGPTJForCausalLM"),hVr=o(" (GPT-J model)"),pVr=l(),B5=a("li"),K3e=a("strong"),_Vr=o("opt"),uVr=o(" \u2014 "),Aee=a("a"),bVr=o("FlaxOPTForCausalLM"),vVr=o(" (OPT model)"),FVr=l(),I5=a("li"),Z3e=a("strong"),TVr=o("roberta"),MVr=o(" \u2014 "),Lee=a("a"),EVr=o("FlaxRobertaForCausalLM"),CVr=o(" (RoBERTa model)"),wVr=l(),N5=a("li"),e5e=a("strong"),AVr=o("xglm"),LVr=o(" \u2014 "),yee=a("a"),yVr=o("FlaxXGLMForCausalLM"),xVr=o(" (XGLM model)"),$Vr=l(),F(q5.$$.fragment),Lze=l(),Zc=a("h2"),j5=a("a"),o5e=a("span"),F(p$.$$.fragment),kVr=l(),r5e=a("span"),SVr=o("FlaxAutoModelForPreTraining"),yze=l(),ur=a("div"),F(_$.$$.fragment),RVr=l(),ef=a("p"),PVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=a("a"),BVr=o("from_pretrained()"),IVr=o(" class method or the "),$ee=a("a"),NVr=o("from_config()"),qVr=o(` class
method.`),jVr=l(),u$=a("p"),DVr=o("This class cannot be instantiated directly using "),t5e=a("code"),GVr=o("__init__()"),OVr=o(" (throws an error)."),VVr=l(),Ht=a("div"),F(b$.$$.fragment),XVr=l(),a5e=a("p"),zVr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QVr=l(),of=a("p"),WVr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),HVr=o("not"),UVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=a("a"),JVr=o("from_pretrained()"),YVr=o(" to load the model weights."),KVr=l(),F(D5.$$.fragment),ZVr=l(),zr=a("div"),F(v$.$$.fragment),eXr=l(),s5e=a("p"),oXr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),rXr=l(),En=a("p"),tXr=o("The model class to instantiate is selected based on the "),l5e=a("code"),aXr=o("model_type"),nXr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),sXr=o("pretrained_model_name_or_path"),lXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),iXr=o("pretrained_model_name_or_path"),dXr=o(":"),cXr=l(),Ee=a("ul"),G5=a("li"),c5e=a("strong"),fXr=o("albert"),mXr=o(" \u2014 "),See=a("a"),gXr=o("FlaxAlbertForPreTraining"),hXr=o(" (ALBERT model)"),pXr=l(),O5=a("li"),f5e=a("strong"),_Xr=o("bart"),uXr=o(" \u2014 "),Ree=a("a"),bXr=o("FlaxBartForConditionalGeneration"),vXr=o(" (BART model)"),FXr=l(),V5=a("li"),m5e=a("strong"),TXr=o("bert"),MXr=o(" \u2014 "),Pee=a("a"),EXr=o("FlaxBertForPreTraining"),CXr=o(" (BERT model)"),wXr=l(),X5=a("li"),g5e=a("strong"),AXr=o("big_bird"),LXr=o(" \u2014 "),Bee=a("a"),yXr=o("FlaxBigBirdForPreTraining"),xXr=o(" (BigBird model)"),$Xr=l(),z5=a("li"),h5e=a("strong"),kXr=o("electra"),SXr=o(" \u2014 "),Iee=a("a"),RXr=o("FlaxElectraForPreTraining"),PXr=o(" (ELECTRA model)"),BXr=l(),Q5=a("li"),p5e=a("strong"),IXr=o("longt5"),NXr=o(" \u2014 "),Nee=a("a"),qXr=o("FlaxLongT5ForConditionalGeneration"),jXr=o(" (LongT5 model)"),DXr=l(),W5=a("li"),_5e=a("strong"),GXr=o("mbart"),OXr=o(" \u2014 "),qee=a("a"),VXr=o("FlaxMBartForConditionalGeneration"),XXr=o(" (mBART model)"),zXr=l(),H5=a("li"),u5e=a("strong"),QXr=o("mt5"),WXr=o(" \u2014 "),jee=a("a"),HXr=o("FlaxMT5ForConditionalGeneration"),UXr=o(" (MT5 model)"),JXr=l(),U5=a("li"),b5e=a("strong"),YXr=o("roberta"),KXr=o(" \u2014 "),Dee=a("a"),ZXr=o("FlaxRobertaForMaskedLM"),ezr=o(" (RoBERTa model)"),ozr=l(),J5=a("li"),v5e=a("strong"),rzr=o("roformer"),tzr=o(" \u2014 "),Gee=a("a"),azr=o("FlaxRoFormerForMaskedLM"),nzr=o(" (RoFormer model)"),szr=l(),Y5=a("li"),F5e=a("strong"),lzr=o("t5"),izr=o(" \u2014 "),Oee=a("a"),dzr=o("FlaxT5ForConditionalGeneration"),czr=o(" (T5 model)"),fzr=l(),K5=a("li"),T5e=a("strong"),mzr=o("wav2vec2"),gzr=o(" \u2014 "),Vee=a("a"),hzr=o("FlaxWav2Vec2ForPreTraining"),pzr=o(" (Wav2Vec2 model)"),_zr=l(),Z5=a("li"),M5e=a("strong"),uzr=o("xlm-roberta"),bzr=o(" \u2014 "),Xee=a("a"),vzr=o("FlaxXLMRobertaForMaskedLM"),Fzr=o(" (XLM-RoBERTa model)"),Tzr=l(),F(e0.$$.fragment),xze=l(),rf=a("h2"),o0=a("a"),E5e=a("span"),F(F$.$$.fragment),Mzr=l(),C5e=a("span"),Ezr=o("FlaxAutoModelForMaskedLM"),$ze=l(),br=a("div"),F(T$.$$.fragment),Czr=l(),tf=a("p"),wzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=a("a"),Azr=o("from_pretrained()"),Lzr=o(" class method or the "),Qee=a("a"),yzr=o("from_config()"),xzr=o(` class
method.`),$zr=l(),M$=a("p"),kzr=o("This class cannot be instantiated directly using "),w5e=a("code"),Szr=o("__init__()"),Rzr=o(" (throws an error)."),Pzr=l(),Ut=a("div"),F(E$.$$.fragment),Bzr=l(),A5e=a("p"),Izr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Nzr=l(),af=a("p"),qzr=o(`Note:
Loading a model from its configuration file does `),L5e=a("strong"),jzr=o("not"),Dzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=a("a"),Gzr=o("from_pretrained()"),Ozr=o(" to load the model weights."),Vzr=l(),F(r0.$$.fragment),Xzr=l(),Qr=a("div"),F(C$.$$.fragment),zzr=l(),y5e=a("p"),Qzr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Wzr=l(),Cn=a("p"),Hzr=o("The model class to instantiate is selected based on the "),x5e=a("code"),Uzr=o("model_type"),Jzr=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),Yzr=o("pretrained_model_name_or_path"),Kzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=a("code"),Zzr=o("pretrained_model_name_or_path"),eQr=o(":"),oQr=l(),$e=a("ul"),t0=a("li"),S5e=a("strong"),rQr=o("albert"),tQr=o(" \u2014 "),Hee=a("a"),aQr=o("FlaxAlbertForMaskedLM"),nQr=o(" (ALBERT model)"),sQr=l(),a0=a("li"),R5e=a("strong"),lQr=o("bart"),iQr=o(" \u2014 "),Uee=a("a"),dQr=o("FlaxBartForConditionalGeneration"),cQr=o(" (BART model)"),fQr=l(),n0=a("li"),P5e=a("strong"),mQr=o("bert"),gQr=o(" \u2014 "),Jee=a("a"),hQr=o("FlaxBertForMaskedLM"),pQr=o(" (BERT model)"),_Qr=l(),s0=a("li"),B5e=a("strong"),uQr=o("big_bird"),bQr=o(" \u2014 "),Yee=a("a"),vQr=o("FlaxBigBirdForMaskedLM"),FQr=o(" (BigBird model)"),TQr=l(),l0=a("li"),I5e=a("strong"),MQr=o("distilbert"),EQr=o(" \u2014 "),Kee=a("a"),CQr=o("FlaxDistilBertForMaskedLM"),wQr=o(" (DistilBERT model)"),AQr=l(),i0=a("li"),N5e=a("strong"),LQr=o("electra"),yQr=o(" \u2014 "),Zee=a("a"),xQr=o("FlaxElectraForMaskedLM"),$Qr=o(" (ELECTRA model)"),kQr=l(),d0=a("li"),q5e=a("strong"),SQr=o("mbart"),RQr=o(" \u2014 "),eoe=a("a"),PQr=o("FlaxMBartForConditionalGeneration"),BQr=o(" (mBART model)"),IQr=l(),c0=a("li"),j5e=a("strong"),NQr=o("roberta"),qQr=o(" \u2014 "),ooe=a("a"),jQr=o("FlaxRobertaForMaskedLM"),DQr=o(" (RoBERTa model)"),GQr=l(),f0=a("li"),D5e=a("strong"),OQr=o("roformer"),VQr=o(" \u2014 "),roe=a("a"),XQr=o("FlaxRoFormerForMaskedLM"),zQr=o(" (RoFormer model)"),QQr=l(),m0=a("li"),G5e=a("strong"),WQr=o("xlm-roberta"),HQr=o(" \u2014 "),toe=a("a"),UQr=o("FlaxXLMRobertaForMaskedLM"),JQr=o(" (XLM-RoBERTa model)"),YQr=l(),F(g0.$$.fragment),kze=l(),nf=a("h2"),h0=a("a"),O5e=a("span"),F(w$.$$.fragment),KQr=l(),V5e=a("span"),ZQr=o("FlaxAutoModelForSeq2SeqLM"),Sze=l(),vr=a("div"),F(A$.$$.fragment),eWr=l(),sf=a("p"),oWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=a("a"),rWr=o("from_pretrained()"),tWr=o(" class method or the "),noe=a("a"),aWr=o("from_config()"),nWr=o(` class
method.`),sWr=l(),L$=a("p"),lWr=o("This class cannot be instantiated directly using "),X5e=a("code"),iWr=o("__init__()"),dWr=o(" (throws an error)."),cWr=l(),Jt=a("div"),F(y$.$$.fragment),fWr=l(),z5e=a("p"),mWr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gWr=l(),lf=a("p"),hWr=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),pWr=o("not"),_Wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=a("a"),uWr=o("from_pretrained()"),bWr=o(" to load the model weights."),vWr=l(),F(p0.$$.fragment),FWr=l(),Wr=a("div"),F(x$.$$.fragment),TWr=l(),W5e=a("p"),MWr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EWr=l(),wn=a("p"),CWr=o("The model class to instantiate is selected based on the "),H5e=a("code"),wWr=o("model_type"),AWr=o(` property of the config object (either
passed as an argument or loaded from `),U5e=a("code"),LWr=o("pretrained_model_name_or_path"),yWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=a("code"),xWr=o("pretrained_model_name_or_path"),$Wr=o(":"),kWr=l(),ke=a("ul"),_0=a("li"),Y5e=a("strong"),SWr=o("bart"),RWr=o(" \u2014 "),loe=a("a"),PWr=o("FlaxBartForConditionalGeneration"),BWr=o(" (BART model)"),IWr=l(),u0=a("li"),K5e=a("strong"),NWr=o("blenderbot"),qWr=o(" \u2014 "),ioe=a("a"),jWr=o("FlaxBlenderbotForConditionalGeneration"),DWr=o(" (Blenderbot model)"),GWr=l(),b0=a("li"),Z5e=a("strong"),OWr=o("blenderbot-small"),VWr=o(" \u2014 "),doe=a("a"),XWr=o("FlaxBlenderbotSmallForConditionalGeneration"),zWr=o(" (BlenderbotSmall model)"),QWr=l(),v0=a("li"),e0e=a("strong"),WWr=o("encoder-decoder"),HWr=o(" \u2014 "),coe=a("a"),UWr=o("FlaxEncoderDecoderModel"),JWr=o(" (Encoder decoder model)"),YWr=l(),F0=a("li"),o0e=a("strong"),KWr=o("longt5"),ZWr=o(" \u2014 "),foe=a("a"),eHr=o("FlaxLongT5ForConditionalGeneration"),oHr=o(" (LongT5 model)"),rHr=l(),T0=a("li"),r0e=a("strong"),tHr=o("marian"),aHr=o(" \u2014 "),moe=a("a"),nHr=o("FlaxMarianMTModel"),sHr=o(" (Marian model)"),lHr=l(),M0=a("li"),t0e=a("strong"),iHr=o("mbart"),dHr=o(" \u2014 "),goe=a("a"),cHr=o("FlaxMBartForConditionalGeneration"),fHr=o(" (mBART model)"),mHr=l(),E0=a("li"),a0e=a("strong"),gHr=o("mt5"),hHr=o(" \u2014 "),hoe=a("a"),pHr=o("FlaxMT5ForConditionalGeneration"),_Hr=o(" (MT5 model)"),uHr=l(),C0=a("li"),n0e=a("strong"),bHr=o("pegasus"),vHr=o(" \u2014 "),poe=a("a"),FHr=o("FlaxPegasusForConditionalGeneration"),THr=o(" (Pegasus model)"),MHr=l(),w0=a("li"),s0e=a("strong"),EHr=o("t5"),CHr=o(" \u2014 "),_oe=a("a"),wHr=o("FlaxT5ForConditionalGeneration"),AHr=o(" (T5 model)"),LHr=l(),F(A0.$$.fragment),Rze=l(),df=a("h2"),L0=a("a"),l0e=a("span"),F($$.$$.fragment),yHr=l(),i0e=a("span"),xHr=o("FlaxAutoModelForSequenceClassification"),Pze=l(),Fr=a("div"),F(k$.$$.fragment),$Hr=l(),cf=a("p"),kHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=a("a"),SHr=o("from_pretrained()"),RHr=o(" class method or the "),boe=a("a"),PHr=o("from_config()"),BHr=o(` class
method.`),IHr=l(),S$=a("p"),NHr=o("This class cannot be instantiated directly using "),d0e=a("code"),qHr=o("__init__()"),jHr=o(" (throws an error)."),DHr=l(),Yt=a("div"),F(R$.$$.fragment),GHr=l(),c0e=a("p"),OHr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VHr=l(),ff=a("p"),XHr=o(`Note:
Loading a model from its configuration file does `),f0e=a("strong"),zHr=o("not"),QHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=a("a"),WHr=o("from_pretrained()"),HHr=o(" to load the model weights."),UHr=l(),F(y0.$$.fragment),JHr=l(),Hr=a("div"),F(P$.$$.fragment),YHr=l(),m0e=a("p"),KHr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZHr=l(),An=a("p"),eUr=o("The model class to instantiate is selected based on the "),g0e=a("code"),oUr=o("model_type"),rUr=o(` property of the config object (either
passed as an argument or loaded from `),h0e=a("code"),tUr=o("pretrained_model_name_or_path"),aUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=a("code"),nUr=o("pretrained_model_name_or_path"),sUr=o(":"),lUr=l(),Se=a("ul"),x0=a("li"),_0e=a("strong"),iUr=o("albert"),dUr=o(" \u2014 "),Foe=a("a"),cUr=o("FlaxAlbertForSequenceClassification"),fUr=o(" (ALBERT model)"),mUr=l(),$0=a("li"),u0e=a("strong"),gUr=o("bart"),hUr=o(" \u2014 "),Toe=a("a"),pUr=o("FlaxBartForSequenceClassification"),_Ur=o(" (BART model)"),uUr=l(),k0=a("li"),b0e=a("strong"),bUr=o("bert"),vUr=o(" \u2014 "),Moe=a("a"),FUr=o("FlaxBertForSequenceClassification"),TUr=o(" (BERT model)"),MUr=l(),S0=a("li"),v0e=a("strong"),EUr=o("big_bird"),CUr=o(" \u2014 "),Eoe=a("a"),wUr=o("FlaxBigBirdForSequenceClassification"),AUr=o(" (BigBird model)"),LUr=l(),R0=a("li"),F0e=a("strong"),yUr=o("distilbert"),xUr=o(" \u2014 "),Coe=a("a"),$Ur=o("FlaxDistilBertForSequenceClassification"),kUr=o(" (DistilBERT model)"),SUr=l(),P0=a("li"),T0e=a("strong"),RUr=o("electra"),PUr=o(" \u2014 "),woe=a("a"),BUr=o("FlaxElectraForSequenceClassification"),IUr=o(" (ELECTRA model)"),NUr=l(),B0=a("li"),M0e=a("strong"),qUr=o("mbart"),jUr=o(" \u2014 "),Aoe=a("a"),DUr=o("FlaxMBartForSequenceClassification"),GUr=o(" (mBART model)"),OUr=l(),I0=a("li"),E0e=a("strong"),VUr=o("roberta"),XUr=o(" \u2014 "),Loe=a("a"),zUr=o("FlaxRobertaForSequenceClassification"),QUr=o(" (RoBERTa model)"),WUr=l(),N0=a("li"),C0e=a("strong"),HUr=o("roformer"),UUr=o(" \u2014 "),yoe=a("a"),JUr=o("FlaxRoFormerForSequenceClassification"),YUr=o(" (RoFormer model)"),KUr=l(),q0=a("li"),w0e=a("strong"),ZUr=o("xlm-roberta"),eJr=o(" \u2014 "),xoe=a("a"),oJr=o("FlaxXLMRobertaForSequenceClassification"),rJr=o(" (XLM-RoBERTa model)"),tJr=l(),F(j0.$$.fragment),Bze=l(),mf=a("h2"),D0=a("a"),A0e=a("span"),F(B$.$$.fragment),aJr=l(),L0e=a("span"),nJr=o("FlaxAutoModelForQuestionAnswering"),Ize=l(),Tr=a("div"),F(I$.$$.fragment),sJr=l(),gf=a("p"),lJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=a("a"),iJr=o("from_pretrained()"),dJr=o(" class method or the "),koe=a("a"),cJr=o("from_config()"),fJr=o(` class
method.`),mJr=l(),N$=a("p"),gJr=o("This class cannot be instantiated directly using "),y0e=a("code"),hJr=o("__init__()"),pJr=o(" (throws an error)."),_Jr=l(),Kt=a("div"),F(q$.$$.fragment),uJr=l(),x0e=a("p"),bJr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vJr=l(),hf=a("p"),FJr=o(`Note:
Loading a model from its configuration file does `),$0e=a("strong"),TJr=o("not"),MJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=a("a"),EJr=o("from_pretrained()"),CJr=o(" to load the model weights."),wJr=l(),F(G0.$$.fragment),AJr=l(),Ur=a("div"),F(j$.$$.fragment),LJr=l(),k0e=a("p"),yJr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),xJr=l(),Ln=a("p"),$Jr=o("The model class to instantiate is selected based on the "),S0e=a("code"),kJr=o("model_type"),SJr=o(` property of the config object (either
passed as an argument or loaded from `),R0e=a("code"),RJr=o("pretrained_model_name_or_path"),PJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=a("code"),BJr=o("pretrained_model_name_or_path"),IJr=o(":"),NJr=l(),Re=a("ul"),O0=a("li"),B0e=a("strong"),qJr=o("albert"),jJr=o(" \u2014 "),Roe=a("a"),DJr=o("FlaxAlbertForQuestionAnswering"),GJr=o(" (ALBERT model)"),OJr=l(),V0=a("li"),I0e=a("strong"),VJr=o("bart"),XJr=o(" \u2014 "),Poe=a("a"),zJr=o("FlaxBartForQuestionAnswering"),QJr=o(" (BART model)"),WJr=l(),X0=a("li"),N0e=a("strong"),HJr=o("bert"),UJr=o(" \u2014 "),Boe=a("a"),JJr=o("FlaxBertForQuestionAnswering"),YJr=o(" (BERT model)"),KJr=l(),z0=a("li"),q0e=a("strong"),ZJr=o("big_bird"),eYr=o(" \u2014 "),Ioe=a("a"),oYr=o("FlaxBigBirdForQuestionAnswering"),rYr=o(" (BigBird model)"),tYr=l(),Q0=a("li"),j0e=a("strong"),aYr=o("distilbert"),nYr=o(" \u2014 "),Noe=a("a"),sYr=o("FlaxDistilBertForQuestionAnswering"),lYr=o(" (DistilBERT model)"),iYr=l(),W0=a("li"),D0e=a("strong"),dYr=o("electra"),cYr=o(" \u2014 "),qoe=a("a"),fYr=o("FlaxElectraForQuestionAnswering"),mYr=o(" (ELECTRA model)"),gYr=l(),H0=a("li"),G0e=a("strong"),hYr=o("mbart"),pYr=o(" \u2014 "),joe=a("a"),_Yr=o("FlaxMBartForQuestionAnswering"),uYr=o(" (mBART model)"),bYr=l(),U0=a("li"),O0e=a("strong"),vYr=o("roberta"),FYr=o(" \u2014 "),Doe=a("a"),TYr=o("FlaxRobertaForQuestionAnswering"),MYr=o(" (RoBERTa model)"),EYr=l(),J0=a("li"),V0e=a("strong"),CYr=o("roformer"),wYr=o(" \u2014 "),Goe=a("a"),AYr=o("FlaxRoFormerForQuestionAnswering"),LYr=o(" (RoFormer model)"),yYr=l(),Y0=a("li"),X0e=a("strong"),xYr=o("xlm-roberta"),$Yr=o(" \u2014 "),Ooe=a("a"),kYr=o("FlaxXLMRobertaForQuestionAnswering"),SYr=o(" (XLM-RoBERTa model)"),RYr=l(),F(K0.$$.fragment),Nze=l(),pf=a("h2"),Z0=a("a"),z0e=a("span"),F(D$.$$.fragment),PYr=l(),Q0e=a("span"),BYr=o("FlaxAutoModelForTokenClassification"),qze=l(),Mr=a("div"),F(G$.$$.fragment),IYr=l(),_f=a("p"),NYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=a("a"),qYr=o("from_pretrained()"),jYr=o(" class method or the "),Xoe=a("a"),DYr=o("from_config()"),GYr=o(` class
method.`),OYr=l(),O$=a("p"),VYr=o("This class cannot be instantiated directly using "),W0e=a("code"),XYr=o("__init__()"),zYr=o(" (throws an error)."),QYr=l(),Zt=a("div"),F(V$.$$.fragment),WYr=l(),H0e=a("p"),HYr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UYr=l(),uf=a("p"),JYr=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),YYr=o("not"),KYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=a("a"),ZYr=o("from_pretrained()"),eKr=o(" to load the model weights."),oKr=l(),F(ew.$$.fragment),rKr=l(),Jr=a("div"),F(X$.$$.fragment),tKr=l(),J0e=a("p"),aKr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nKr=l(),yn=a("p"),sKr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),lKr=o("model_type"),iKr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),dKr=o("pretrained_model_name_or_path"),cKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),fKr=o("pretrained_model_name_or_path"),mKr=o(":"),gKr=l(),Ve=a("ul"),ow=a("li"),ewe=a("strong"),hKr=o("albert"),pKr=o(" \u2014 "),Qoe=a("a"),_Kr=o("FlaxAlbertForTokenClassification"),uKr=o(" (ALBERT model)"),bKr=l(),rw=a("li"),owe=a("strong"),vKr=o("bert"),FKr=o(" \u2014 "),Woe=a("a"),TKr=o("FlaxBertForTokenClassification"),MKr=o(" (BERT model)"),EKr=l(),tw=a("li"),rwe=a("strong"),CKr=o("big_bird"),wKr=o(" \u2014 "),Hoe=a("a"),AKr=o("FlaxBigBirdForTokenClassification"),LKr=o(" (BigBird model)"),yKr=l(),aw=a("li"),twe=a("strong"),xKr=o("distilbert"),$Kr=o(" \u2014 "),Uoe=a("a"),kKr=o("FlaxDistilBertForTokenClassification"),SKr=o(" (DistilBERT model)"),RKr=l(),nw=a("li"),awe=a("strong"),PKr=o("electra"),BKr=o(" \u2014 "),Joe=a("a"),IKr=o("FlaxElectraForTokenClassification"),NKr=o(" (ELECTRA model)"),qKr=l(),sw=a("li"),nwe=a("strong"),jKr=o("roberta"),DKr=o(" \u2014 "),Yoe=a("a"),GKr=o("FlaxRobertaForTokenClassification"),OKr=o(" (RoBERTa model)"),VKr=l(),lw=a("li"),swe=a("strong"),XKr=o("roformer"),zKr=o(" \u2014 "),Koe=a("a"),QKr=o("FlaxRoFormerForTokenClassification"),WKr=o(" (RoFormer model)"),HKr=l(),iw=a("li"),lwe=a("strong"),UKr=o("xlm-roberta"),JKr=o(" \u2014 "),Zoe=a("a"),YKr=o("FlaxXLMRobertaForTokenClassification"),KKr=o(" (XLM-RoBERTa model)"),ZKr=l(),F(dw.$$.fragment),jze=l(),bf=a("h2"),cw=a("a"),iwe=a("span"),F(z$.$$.fragment),eZr=l(),dwe=a("span"),oZr=o("FlaxAutoModelForMultipleChoice"),Dze=l(),Er=a("div"),F(Q$.$$.fragment),rZr=l(),vf=a("p"),tZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=a("a"),aZr=o("from_pretrained()"),nZr=o(" class method or the "),ore=a("a"),sZr=o("from_config()"),lZr=o(` class
method.`),iZr=l(),W$=a("p"),dZr=o("This class cannot be instantiated directly using "),cwe=a("code"),cZr=o("__init__()"),fZr=o(" (throws an error)."),mZr=l(),ea=a("div"),F(H$.$$.fragment),gZr=l(),fwe=a("p"),hZr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pZr=l(),Ff=a("p"),_Zr=o(`Note:
Loading a model from its configuration file does `),mwe=a("strong"),uZr=o("not"),bZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=a("a"),vZr=o("from_pretrained()"),FZr=o(" to load the model weights."),TZr=l(),F(fw.$$.fragment),MZr=l(),Yr=a("div"),F(U$.$$.fragment),EZr=l(),gwe=a("p"),CZr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wZr=l(),xn=a("p"),AZr=o("The model class to instantiate is selected based on the "),hwe=a("code"),LZr=o("model_type"),yZr=o(` property of the config object (either
passed as an argument or loaded from `),pwe=a("code"),xZr=o("pretrained_model_name_or_path"),$Zr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=a("code"),kZr=o("pretrained_model_name_or_path"),SZr=o(":"),RZr=l(),Xe=a("ul"),mw=a("li"),uwe=a("strong"),PZr=o("albert"),BZr=o(" \u2014 "),tre=a("a"),IZr=o("FlaxAlbertForMultipleChoice"),NZr=o(" (ALBERT model)"),qZr=l(),gw=a("li"),bwe=a("strong"),jZr=o("bert"),DZr=o(" \u2014 "),are=a("a"),GZr=o("FlaxBertForMultipleChoice"),OZr=o(" (BERT model)"),VZr=l(),hw=a("li"),vwe=a("strong"),XZr=o("big_bird"),zZr=o(" \u2014 "),nre=a("a"),QZr=o("FlaxBigBirdForMultipleChoice"),WZr=o(" (BigBird model)"),HZr=l(),pw=a("li"),Fwe=a("strong"),UZr=o("distilbert"),JZr=o(" \u2014 "),sre=a("a"),YZr=o("FlaxDistilBertForMultipleChoice"),KZr=o(" (DistilBERT model)"),ZZr=l(),_w=a("li"),Twe=a("strong"),eet=o("electra"),oet=o(" \u2014 "),lre=a("a"),ret=o("FlaxElectraForMultipleChoice"),tet=o(" (ELECTRA model)"),aet=l(),uw=a("li"),Mwe=a("strong"),net=o("roberta"),set=o(" \u2014 "),ire=a("a"),iet=o("FlaxRobertaForMultipleChoice"),det=o(" (RoBERTa model)"),cet=l(),bw=a("li"),Ewe=a("strong"),fet=o("roformer"),met=o(" \u2014 "),dre=a("a"),get=o("FlaxRoFormerForMultipleChoice"),het=o(" (RoFormer model)"),pet=l(),vw=a("li"),Cwe=a("strong"),_et=o("xlm-roberta"),uet=o(" \u2014 "),cre=a("a"),bet=o("FlaxXLMRobertaForMultipleChoice"),vet=o(" (XLM-RoBERTa model)"),Fet=l(),F(Fw.$$.fragment),Gze=l(),Tf=a("h2"),Tw=a("a"),wwe=a("span"),F(J$.$$.fragment),Tet=l(),Awe=a("span"),Met=o("FlaxAutoModelForNextSentencePrediction"),Oze=l(),Cr=a("div"),F(Y$.$$.fragment),Eet=l(),Mf=a("p"),Cet=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fre=a("a"),wet=o("from_pretrained()"),Aet=o(" class method or the "),mre=a("a"),Let=o("from_config()"),yet=o(` class
method.`),xet=l(),K$=a("p"),$et=o("This class cannot be instantiated directly using "),Lwe=a("code"),ket=o("__init__()"),Set=o(" (throws an error)."),Ret=l(),oa=a("div"),F(Z$.$$.fragment),Pet=l(),ywe=a("p"),Bet=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Iet=l(),Ef=a("p"),Net=o(`Note:
Loading a model from its configuration file does `),xwe=a("strong"),qet=o("not"),jet=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=a("a"),Det=o("from_pretrained()"),Get=o(" to load the model weights."),Oet=l(),F(Mw.$$.fragment),Vet=l(),Kr=a("div"),F(ek.$$.fragment),Xet=l(),$we=a("p"),zet=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Qet=l(),$n=a("p"),Wet=o("The model class to instantiate is selected based on the "),kwe=a("code"),Het=o("model_type"),Uet=o(` property of the config object (either
passed as an argument or loaded from `),Swe=a("code"),Jet=o("pretrained_model_name_or_path"),Yet=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=a("code"),Ket=o("pretrained_model_name_or_path"),Zet=o(":"),eot=l(),Pwe=a("ul"),Ew=a("li"),Bwe=a("strong"),oot=o("bert"),rot=o(" \u2014 "),hre=a("a"),tot=o("FlaxBertForNextSentencePrediction"),aot=o(" (BERT model)"),not=l(),F(Cw.$$.fragment),Vze=l(),Cf=a("h2"),ww=a("a"),Iwe=a("span"),F(ok.$$.fragment),sot=l(),Nwe=a("span"),lot=o("FlaxAutoModelForImageClassification"),Xze=l(),wr=a("div"),F(rk.$$.fragment),iot=l(),wf=a("p"),dot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pre=a("a"),cot=o("from_pretrained()"),fot=o(" class method or the "),_re=a("a"),mot=o("from_config()"),got=o(` class
method.`),hot=l(),tk=a("p"),pot=o("This class cannot be instantiated directly using "),qwe=a("code"),_ot=o("__init__()"),uot=o(" (throws an error)."),bot=l(),ra=a("div"),F(ak.$$.fragment),vot=l(),jwe=a("p"),Fot=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Tot=l(),Af=a("p"),Mot=o(`Note:
Loading a model from its configuration file does `),Dwe=a("strong"),Eot=o("not"),Cot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),wot=o("from_pretrained()"),Aot=o(" to load the model weights."),Lot=l(),F(Aw.$$.fragment),yot=l(),Zr=a("div"),F(nk.$$.fragment),xot=l(),Gwe=a("p"),$ot=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),kot=l(),kn=a("p"),Sot=o("The model class to instantiate is selected based on the "),Owe=a("code"),Rot=o("model_type"),Pot=o(` property of the config object (either
passed as an argument or loaded from `),Vwe=a("code"),Bot=o("pretrained_model_name_or_path"),Iot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=a("code"),Not=o("pretrained_model_name_or_path"),qot=o(":"),jot=l(),sk=a("ul"),Lw=a("li"),zwe=a("strong"),Dot=o("beit"),Got=o(" \u2014 "),bre=a("a"),Oot=o("FlaxBeitForImageClassification"),Vot=o(" (BEiT model)"),Xot=l(),yw=a("li"),Qwe=a("strong"),zot=o("vit"),Qot=o(" \u2014 "),vre=a("a"),Wot=o("FlaxViTForImageClassification"),Hot=o(" (ViT model)"),Uot=l(),F(xw.$$.fragment),zze=l(),Lf=a("h2"),$w=a("a"),Wwe=a("span"),F(lk.$$.fragment),Jot=l(),Hwe=a("span"),Yot=o("FlaxAutoModelForVision2Seq"),Qze=l(),Ar=a("div"),F(ik.$$.fragment),Kot=l(),yf=a("p"),Zot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=a("a"),ert=o("from_pretrained()"),ort=o(" class method or the "),Tre=a("a"),rrt=o("from_config()"),trt=o(` class
method.`),art=l(),dk=a("p"),nrt=o("This class cannot be instantiated directly using "),Uwe=a("code"),srt=o("__init__()"),lrt=o(" (throws an error)."),irt=l(),ta=a("div"),F(ck.$$.fragment),drt=l(),Jwe=a("p"),crt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),frt=l(),xf=a("p"),mrt=o(`Note:
Loading a model from its configuration file does `),Ywe=a("strong"),grt=o("not"),hrt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=a("a"),prt=o("from_pretrained()"),_rt=o(" to load the model weights."),urt=l(),F(kw.$$.fragment),brt=l(),et=a("div"),F(fk.$$.fragment),vrt=l(),Kwe=a("p"),Frt=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Trt=l(),Sn=a("p"),Mrt=o("The model class to instantiate is selected based on the "),Zwe=a("code"),Ert=o("model_type"),Crt=o(` property of the config object (either
passed as an argument or loaded from `),eAe=a("code"),wrt=o("pretrained_model_name_or_path"),Art=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=a("code"),Lrt=o("pretrained_model_name_or_path"),yrt=o(":"),xrt=l(),rAe=a("ul"),Sw=a("li"),tAe=a("strong"),$rt=o("vision-encoder-decoder"),krt=o(" \u2014 "),Ere=a("a"),Srt=o("FlaxVisionEncoderDecoderModel"),Rrt=o(" (Vision Encoder decoder model)"),Prt=l(),F(Rw.$$.fragment),this.h()},l(f){const u=lQt('[data-svelte="svelte-1phssyn"]',document.head);g=n(u,"META",{name:!0,content:!0}),u.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var mk=s(p);m=n(mk,"A",{id:!0,class:!0,href:!0});var aAe=s(m);_=n(aAe,"SPAN",{});var nAe=s(_);T(d.$$.fragment,nAe),nAe.forEach(t),aAe.forEach(t),h=i(mk),Eo=n(mk,"SPAN",{});var sAe=s(Eo);Ai=r(sAe,"Auto Classes"),sAe.forEach(t),mk.forEach(t),Rf=i(f),st=n(f,"P",{});var gk=s(st);Li=r(gk,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),yi=n(gk,"CODE",{});var lAe=s(yi);K6=r(lAe,"from_pretrained()"),lAe.forEach(t),Pf=r(gk,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),gk.forEach(t),Oe=i(f),Qe=n(f,"P",{});var Rn=s(Qe);xi=r(Rn,"Instantiating one of "),Pn=n(Rn,"A",{href:!0});var iAe=s(Pn);Z6=r(iAe,"AutoConfig"),iAe.forEach(t),Bn=r(Rn,", "),In=n(Rn,"A",{href:!0});var dAe=s(In);eL=r(dAe,"AutoModel"),dAe.forEach(t),$i=r(Rn,`, and
`),Nn=n(Rn,"A",{href:!0});var cAe=s(Nn);oL=r(cAe,"AutoTokenizer"),cAe.forEach(t),ki=r(Rn," will directly create a class of the relevant architecture. For instance"),Rn.forEach(t),Bf=i(f),T(Sa.$$.fragment,f),We=i(f),Ae=n(f,"P",{});var hk=s(Ae);SS=r(hk,"will create a model that is an instance of "),Si=n(hk,"A",{href:!0});var fAe=s(Si);RS=r(fAe,"BertModel"),fAe.forEach(t),PS=r(hk,"."),hk.forEach(t),Co=i(f),Ra=n(f,"P",{});var pk=s(Ra);BS=r(pk,"There is one class of "),If=n(pk,"CODE",{});var mAe=s(If);IS=r(mAe,"AutoModel"),mAe.forEach(t),tHe=r(pk," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),pk.forEach(t),OVe=i(f),Ri=n(f,"H2",{class:!0});var _k=s(Ri);Nf=n(_k,"A",{id:!0,class:!0,href:!0});var gAe=s(Nf);bae=n(gAe,"SPAN",{});var hAe=s(bae);T(rL.$$.fragment,hAe),hAe.forEach(t),gAe.forEach(t),aHe=i(_k),vae=n(_k,"SPAN",{});var pAe=s(vae);nHe=r(pAe,"Extending the Auto Classes"),pAe.forEach(t),_k.forEach(t),VVe=i(f),qn=n(f,"P",{});var $f=s(qn);sHe=r($f,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Fae=n($f,"CODE",{});var _Ae=s(Fae);lHe=r(_Ae,"NewModel"),_Ae.forEach(t),iHe=r($f,", make sure you have a "),Tae=n($f,"CODE",{});var uAe=s(Tae);dHe=r(uAe,"NewModelConfig"),uAe.forEach(t),cHe=r($f,` then you can add those to the auto
classes like this:`),$f.forEach(t),XVe=i(f),T(tL.$$.fragment,f),zVe=i(f),NS=n(f,"P",{});var bAe=s(NS);fHe=r(bAe,"You will then be able to use the auto classes like you would usually do!"),bAe.forEach(t),QVe=i(f),T(qf.$$.fragment,f),WVe=i(f),Pi=n(f,"H2",{class:!0});var uk=s(Pi);jf=n(uk,"A",{id:!0,class:!0,href:!0});var vAe=s(jf);Mae=n(vAe,"SPAN",{});var FAe=s(Mae);T(aL.$$.fragment,FAe),FAe.forEach(t),vAe.forEach(t),mHe=i(uk),Eae=n(uk,"SPAN",{});var TAe=s(Eae);gHe=r(TAe,"AutoConfig"),TAe.forEach(t),uk.forEach(t),HVe=i(f),wo=n(f,"DIV",{class:!0});var at=s(wo);T(nL.$$.fragment,at),hHe=i(at),sL=n(at,"P",{});var bk=s(sL);pHe=r(bk,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),qS=n(bk,"A",{href:!0});var MAe=s(qS);_He=r(MAe,"from_pretrained()"),MAe.forEach(t),uHe=r(bk," class method."),bk.forEach(t),bHe=i(at),lL=n(at,"P",{});var vk=s(lL);vHe=r(vk,"This class cannot be instantiated directly using "),Cae=n(vk,"CODE",{});var EAe=s(Cae);FHe=r(EAe,"__init__()"),EAe.forEach(t),THe=r(vk," (throws an error)."),vk.forEach(t),MHe=i(at),Lr=n(at,"DIV",{class:!0});var nt=s(Lr);T(iL.$$.fragment,nt),EHe=i(nt),wae=n(nt,"P",{});var CAe=s(wae);CHe=r(CAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CAe.forEach(t),wHe=i(nt),Bi=n(nt,"P",{});var kf=s(Bi);AHe=r(kf,"The configuration class to instantiate is selected based on the "),Aae=n(kf,"CODE",{});var wAe=s(Aae);LHe=r(wAe,"model_type"),wAe.forEach(t),yHe=r(kf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Lae=n(kf,"CODE",{});var AAe=s(Lae);xHe=r(AAe,"pretrained_model_name_or_path"),AAe.forEach(t),$He=r(kf,":"),kf.forEach(t),kHe=i(nt),A=n(nt,"UL",{});var L=s(A);Df=n(L,"LI",{});var Pw=s(Df);yae=n(Pw,"STRONG",{});var LAe=s(yae);SHe=r(LAe,"albert"),LAe.forEach(t),RHe=r(Pw," \u2014 "),jS=n(Pw,"A",{href:!0});var yAe=s(jS);PHe=r(yAe,"AlbertConfig"),yAe.forEach(t),BHe=r(Pw," (ALBERT model)"),Pw.forEach(t),IHe=i(L),Gf=n(L,"LI",{});var Bw=s(Gf);xae=n(Bw,"STRONG",{});var xAe=s(xae);NHe=r(xAe,"bart"),xAe.forEach(t),qHe=r(Bw," \u2014 "),DS=n(Bw,"A",{href:!0});var $Ae=s(DS);jHe=r($Ae,"BartConfig"),$Ae.forEach(t),DHe=r(Bw," (BART model)"),Bw.forEach(t),GHe=i(L),Of=n(L,"LI",{});var Iw=s(Of);$ae=n(Iw,"STRONG",{});var kAe=s($ae);OHe=r(kAe,"beit"),kAe.forEach(t),VHe=r(Iw," \u2014 "),GS=n(Iw,"A",{href:!0});var SAe=s(GS);XHe=r(SAe,"BeitConfig"),SAe.forEach(t),zHe=r(Iw," (BEiT model)"),Iw.forEach(t),QHe=i(L),Vf=n(L,"LI",{});var Nw=s(Vf);kae=n(Nw,"STRONG",{});var RAe=s(kae);WHe=r(RAe,"bert"),RAe.forEach(t),HHe=r(Nw," \u2014 "),OS=n(Nw,"A",{href:!0});var PAe=s(OS);UHe=r(PAe,"BertConfig"),PAe.forEach(t),JHe=r(Nw," (BERT model)"),Nw.forEach(t),YHe=i(L),Xf=n(L,"LI",{});var qw=s(Xf);Sae=n(qw,"STRONG",{});var BAe=s(Sae);KHe=r(BAe,"bert-generation"),BAe.forEach(t),ZHe=r(qw," \u2014 "),VS=n(qw,"A",{href:!0});var IAe=s(VS);eUe=r(IAe,"BertGenerationConfig"),IAe.forEach(t),oUe=r(qw," (Bert Generation model)"),qw.forEach(t),rUe=i(L),zf=n(L,"LI",{});var jw=s(zf);Rae=n(jw,"STRONG",{});var NAe=s(Rae);tUe=r(NAe,"big_bird"),NAe.forEach(t),aUe=r(jw," \u2014 "),XS=n(jw,"A",{href:!0});var qAe=s(XS);nUe=r(qAe,"BigBirdConfig"),qAe.forEach(t),sUe=r(jw," (BigBird model)"),jw.forEach(t),lUe=i(L),Qf=n(L,"LI",{});var Dw=s(Qf);Pae=n(Dw,"STRONG",{});var jAe=s(Pae);iUe=r(jAe,"bigbird_pegasus"),jAe.forEach(t),dUe=r(Dw," \u2014 "),zS=n(Dw,"A",{href:!0});var DAe=s(zS);cUe=r(DAe,"BigBirdPegasusConfig"),DAe.forEach(t),fUe=r(Dw," (BigBird-Pegasus model)"),Dw.forEach(t),mUe=i(L),Wf=n(L,"LI",{});var Gw=s(Wf);Bae=n(Gw,"STRONG",{});var GAe=s(Bae);gUe=r(GAe,"blenderbot"),GAe.forEach(t),hUe=r(Gw," \u2014 "),QS=n(Gw,"A",{href:!0});var OAe=s(QS);pUe=r(OAe,"BlenderbotConfig"),OAe.forEach(t),_Ue=r(Gw," (Blenderbot model)"),Gw.forEach(t),uUe=i(L),Hf=n(L,"LI",{});var Ow=s(Hf);Iae=n(Ow,"STRONG",{});var VAe=s(Iae);bUe=r(VAe,"blenderbot-small"),VAe.forEach(t),vUe=r(Ow," \u2014 "),WS=n(Ow,"A",{href:!0});var XAe=s(WS);FUe=r(XAe,"BlenderbotSmallConfig"),XAe.forEach(t),TUe=r(Ow," (BlenderbotSmall model)"),Ow.forEach(t),MUe=i(L),Uf=n(L,"LI",{});var Vw=s(Uf);Nae=n(Vw,"STRONG",{});var zAe=s(Nae);EUe=r(zAe,"bloom"),zAe.forEach(t),CUe=r(Vw," \u2014 "),HS=n(Vw,"A",{href:!0});var QAe=s(HS);wUe=r(QAe,"BloomConfig"),QAe.forEach(t),AUe=r(Vw," (BLOOM model)"),Vw.forEach(t),LUe=i(L),Jf=n(L,"LI",{});var Xw=s(Jf);qae=n(Xw,"STRONG",{});var WAe=s(qae);yUe=r(WAe,"camembert"),WAe.forEach(t),xUe=r(Xw," \u2014 "),US=n(Xw,"A",{href:!0});var HAe=s(US);$Ue=r(HAe,"CamembertConfig"),HAe.forEach(t),kUe=r(Xw," (CamemBERT model)"),Xw.forEach(t),SUe=i(L),Yf=n(L,"LI",{});var zw=s(Yf);jae=n(zw,"STRONG",{});var UAe=s(jae);RUe=r(UAe,"canine"),UAe.forEach(t),PUe=r(zw," \u2014 "),JS=n(zw,"A",{href:!0});var JAe=s(JS);BUe=r(JAe,"CanineConfig"),JAe.forEach(t),IUe=r(zw," (CANINE model)"),zw.forEach(t),NUe=i(L),Kf=n(L,"LI",{});var Qw=s(Kf);Dae=n(Qw,"STRONG",{});var YAe=s(Dae);qUe=r(YAe,"clip"),YAe.forEach(t),jUe=r(Qw," \u2014 "),YS=n(Qw,"A",{href:!0});var KAe=s(YS);DUe=r(KAe,"CLIPConfig"),KAe.forEach(t),GUe=r(Qw," (CLIP model)"),Qw.forEach(t),OUe=i(L),Zf=n(L,"LI",{});var Ww=s(Zf);Gae=n(Ww,"STRONG",{});var ZAe=s(Gae);VUe=r(ZAe,"codegen"),ZAe.forEach(t),XUe=r(Ww," \u2014 "),KS=n(Ww,"A",{href:!0});var e6e=s(KS);zUe=r(e6e,"CodeGenConfig"),e6e.forEach(t),QUe=r(Ww," (CodeGen model)"),Ww.forEach(t),WUe=i(L),em=n(L,"LI",{});var Hw=s(em);Oae=n(Hw,"STRONG",{});var o6e=s(Oae);HUe=r(o6e,"convbert"),o6e.forEach(t),UUe=r(Hw," \u2014 "),ZS=n(Hw,"A",{href:!0});var r6e=s(ZS);JUe=r(r6e,"ConvBertConfig"),r6e.forEach(t),YUe=r(Hw," (ConvBERT model)"),Hw.forEach(t),KUe=i(L),om=n(L,"LI",{});var Uw=s(om);Vae=n(Uw,"STRONG",{});var t6e=s(Vae);ZUe=r(t6e,"convnext"),t6e.forEach(t),eJe=r(Uw," \u2014 "),eR=n(Uw,"A",{href:!0});var a6e=s(eR);oJe=r(a6e,"ConvNextConfig"),a6e.forEach(t),rJe=r(Uw," (ConvNeXT model)"),Uw.forEach(t),tJe=i(L),rm=n(L,"LI",{});var Jw=s(rm);Xae=n(Jw,"STRONG",{});var n6e=s(Xae);aJe=r(n6e,"ctrl"),n6e.forEach(t),nJe=r(Jw," \u2014 "),oR=n(Jw,"A",{href:!0});var s6e=s(oR);sJe=r(s6e,"CTRLConfig"),s6e.forEach(t),lJe=r(Jw," (CTRL model)"),Jw.forEach(t),iJe=i(L),tm=n(L,"LI",{});var Yw=s(tm);zae=n(Yw,"STRONG",{});var l6e=s(zae);dJe=r(l6e,"cvt"),l6e.forEach(t),cJe=r(Yw," \u2014 "),rR=n(Yw,"A",{href:!0});var i6e=s(rR);fJe=r(i6e,"CvtConfig"),i6e.forEach(t),mJe=r(Yw," (CvT model)"),Yw.forEach(t),gJe=i(L),am=n(L,"LI",{});var Kw=s(am);Qae=n(Kw,"STRONG",{});var d6e=s(Qae);hJe=r(d6e,"data2vec-audio"),d6e.forEach(t),pJe=r(Kw," \u2014 "),tR=n(Kw,"A",{href:!0});var c6e=s(tR);_Je=r(c6e,"Data2VecAudioConfig"),c6e.forEach(t),uJe=r(Kw," (Data2VecAudio model)"),Kw.forEach(t),bJe=i(L),nm=n(L,"LI",{});var Zw=s(nm);Wae=n(Zw,"STRONG",{});var f6e=s(Wae);vJe=r(f6e,"data2vec-text"),f6e.forEach(t),FJe=r(Zw," \u2014 "),aR=n(Zw,"A",{href:!0});var m6e=s(aR);TJe=r(m6e,"Data2VecTextConfig"),m6e.forEach(t),MJe=r(Zw," (Data2VecText model)"),Zw.forEach(t),EJe=i(L),sm=n(L,"LI",{});var eA=s(sm);Hae=n(eA,"STRONG",{});var g6e=s(Hae);CJe=r(g6e,"data2vec-vision"),g6e.forEach(t),wJe=r(eA," \u2014 "),nR=n(eA,"A",{href:!0});var h6e=s(nR);AJe=r(h6e,"Data2VecVisionConfig"),h6e.forEach(t),LJe=r(eA," (Data2VecVision model)"),eA.forEach(t),yJe=i(L),lm=n(L,"LI",{});var oA=s(lm);Uae=n(oA,"STRONG",{});var p6e=s(Uae);xJe=r(p6e,"deberta"),p6e.forEach(t),$Je=r(oA," \u2014 "),sR=n(oA,"A",{href:!0});var _6e=s(sR);kJe=r(_6e,"DebertaConfig"),_6e.forEach(t),SJe=r(oA," (DeBERTa model)"),oA.forEach(t),RJe=i(L),im=n(L,"LI",{});var rA=s(im);Jae=n(rA,"STRONG",{});var u6e=s(Jae);PJe=r(u6e,"deberta-v2"),u6e.forEach(t),BJe=r(rA," \u2014 "),lR=n(rA,"A",{href:!0});var b6e=s(lR);IJe=r(b6e,"DebertaV2Config"),b6e.forEach(t),NJe=r(rA," (DeBERTa-v2 model)"),rA.forEach(t),qJe=i(L),dm=n(L,"LI",{});var tA=s(dm);Yae=n(tA,"STRONG",{});var Irt=s(Yae);jJe=r(Irt,"decision_transformer"),Irt.forEach(t),DJe=r(tA," \u2014 "),iR=n(tA,"A",{href:!0});var Nrt=s(iR);GJe=r(Nrt,"DecisionTransformerConfig"),Nrt.forEach(t),OJe=r(tA," (Decision Transformer model)"),tA.forEach(t),VJe=i(L),cm=n(L,"LI",{});var v6e=s(cm);Kae=n(v6e,"STRONG",{});var qrt=s(Kae);XJe=r(qrt,"deit"),qrt.forEach(t),zJe=r(v6e," \u2014 "),dR=n(v6e,"A",{href:!0});var jrt=s(dR);QJe=r(jrt,"DeiTConfig"),jrt.forEach(t),WJe=r(v6e," (DeiT model)"),v6e.forEach(t),HJe=i(L),fm=n(L,"LI",{});var F6e=s(fm);Zae=n(F6e,"STRONG",{});var Drt=s(Zae);UJe=r(Drt,"detr"),Drt.forEach(t),JJe=r(F6e," \u2014 "),cR=n(F6e,"A",{href:!0});var Grt=s(cR);YJe=r(Grt,"DetrConfig"),Grt.forEach(t),KJe=r(F6e," (DETR model)"),F6e.forEach(t),ZJe=i(L),mm=n(L,"LI",{});var T6e=s(mm);ene=n(T6e,"STRONG",{});var Ort=s(ene);eYe=r(Ort,"distilbert"),Ort.forEach(t),oYe=r(T6e," \u2014 "),fR=n(T6e,"A",{href:!0});var Vrt=s(fR);rYe=r(Vrt,"DistilBertConfig"),Vrt.forEach(t),tYe=r(T6e," (DistilBERT model)"),T6e.forEach(t),aYe=i(L),gm=n(L,"LI",{});var M6e=s(gm);one=n(M6e,"STRONG",{});var Xrt=s(one);nYe=r(Xrt,"dpr"),Xrt.forEach(t),sYe=r(M6e," \u2014 "),mR=n(M6e,"A",{href:!0});var zrt=s(mR);lYe=r(zrt,"DPRConfig"),zrt.forEach(t),iYe=r(M6e," (DPR model)"),M6e.forEach(t),dYe=i(L),hm=n(L,"LI",{});var E6e=s(hm);rne=n(E6e,"STRONG",{});var Qrt=s(rne);cYe=r(Qrt,"dpt"),Qrt.forEach(t),fYe=r(E6e," \u2014 "),gR=n(E6e,"A",{href:!0});var Wrt=s(gR);mYe=r(Wrt,"DPTConfig"),Wrt.forEach(t),gYe=r(E6e," (DPT model)"),E6e.forEach(t),hYe=i(L),pm=n(L,"LI",{});var C6e=s(pm);tne=n(C6e,"STRONG",{});var Hrt=s(tne);pYe=r(Hrt,"electra"),Hrt.forEach(t),_Ye=r(C6e," \u2014 "),hR=n(C6e,"A",{href:!0});var Urt=s(hR);uYe=r(Urt,"ElectraConfig"),Urt.forEach(t),bYe=r(C6e," (ELECTRA model)"),C6e.forEach(t),vYe=i(L),_m=n(L,"LI",{});var w6e=s(_m);ane=n(w6e,"STRONG",{});var Jrt=s(ane);FYe=r(Jrt,"encoder-decoder"),Jrt.forEach(t),TYe=r(w6e," \u2014 "),pR=n(w6e,"A",{href:!0});var Yrt=s(pR);MYe=r(Yrt,"EncoderDecoderConfig"),Yrt.forEach(t),EYe=r(w6e," (Encoder decoder model)"),w6e.forEach(t),CYe=i(L),um=n(L,"LI",{});var A6e=s(um);nne=n(A6e,"STRONG",{});var Krt=s(nne);wYe=r(Krt,"flaubert"),Krt.forEach(t),AYe=r(A6e," \u2014 "),_R=n(A6e,"A",{href:!0});var Zrt=s(_R);LYe=r(Zrt,"FlaubertConfig"),Zrt.forEach(t),yYe=r(A6e," (FlauBERT model)"),A6e.forEach(t),xYe=i(L),bm=n(L,"LI",{});var L6e=s(bm);sne=n(L6e,"STRONG",{});var ett=s(sne);$Ye=r(ett,"flava"),ett.forEach(t),kYe=r(L6e," \u2014 "),uR=n(L6e,"A",{href:!0});var ott=s(uR);SYe=r(ott,"FlavaConfig"),ott.forEach(t),RYe=r(L6e," (FLAVA model)"),L6e.forEach(t),PYe=i(L),vm=n(L,"LI",{});var y6e=s(vm);lne=n(y6e,"STRONG",{});var rtt=s(lne);BYe=r(rtt,"fnet"),rtt.forEach(t),IYe=r(y6e," \u2014 "),bR=n(y6e,"A",{href:!0});var ttt=s(bR);NYe=r(ttt,"FNetConfig"),ttt.forEach(t),qYe=r(y6e," (FNet model)"),y6e.forEach(t),jYe=i(L),Fm=n(L,"LI",{});var x6e=s(Fm);ine=n(x6e,"STRONG",{});var att=s(ine);DYe=r(att,"fsmt"),att.forEach(t),GYe=r(x6e," \u2014 "),vR=n(x6e,"A",{href:!0});var ntt=s(vR);OYe=r(ntt,"FSMTConfig"),ntt.forEach(t),VYe=r(x6e," (FairSeq Machine-Translation model)"),x6e.forEach(t),XYe=i(L),Tm=n(L,"LI",{});var $6e=s(Tm);dne=n($6e,"STRONG",{});var stt=s(dne);zYe=r(stt,"funnel"),stt.forEach(t),QYe=r($6e," \u2014 "),FR=n($6e,"A",{href:!0});var ltt=s(FR);WYe=r(ltt,"FunnelConfig"),ltt.forEach(t),HYe=r($6e," (Funnel Transformer model)"),$6e.forEach(t),UYe=i(L),Mm=n(L,"LI",{});var k6e=s(Mm);cne=n(k6e,"STRONG",{});var itt=s(cne);JYe=r(itt,"glpn"),itt.forEach(t),YYe=r(k6e," \u2014 "),TR=n(k6e,"A",{href:!0});var dtt=s(TR);KYe=r(dtt,"GLPNConfig"),dtt.forEach(t),ZYe=r(k6e," (GLPN model)"),k6e.forEach(t),eKe=i(L),Em=n(L,"LI",{});var S6e=s(Em);fne=n(S6e,"STRONG",{});var ctt=s(fne);oKe=r(ctt,"gpt2"),ctt.forEach(t),rKe=r(S6e," \u2014 "),MR=n(S6e,"A",{href:!0});var ftt=s(MR);tKe=r(ftt,"GPT2Config"),ftt.forEach(t),aKe=r(S6e," (OpenAI GPT-2 model)"),S6e.forEach(t),nKe=i(L),Cm=n(L,"LI",{});var R6e=s(Cm);mne=n(R6e,"STRONG",{});var mtt=s(mne);sKe=r(mtt,"gpt_neo"),mtt.forEach(t),lKe=r(R6e," \u2014 "),ER=n(R6e,"A",{href:!0});var gtt=s(ER);iKe=r(gtt,"GPTNeoConfig"),gtt.forEach(t),dKe=r(R6e," (GPT Neo model)"),R6e.forEach(t),cKe=i(L),wm=n(L,"LI",{});var P6e=s(wm);gne=n(P6e,"STRONG",{});var htt=s(gne);fKe=r(htt,"gpt_neox"),htt.forEach(t),mKe=r(P6e," \u2014 "),CR=n(P6e,"A",{href:!0});var ptt=s(CR);gKe=r(ptt,"GPTNeoXConfig"),ptt.forEach(t),hKe=r(P6e," (GPT NeoX model)"),P6e.forEach(t),pKe=i(L),Am=n(L,"LI",{});var B6e=s(Am);hne=n(B6e,"STRONG",{});var _tt=s(hne);_Ke=r(_tt,"gptj"),_tt.forEach(t),uKe=r(B6e," \u2014 "),wR=n(B6e,"A",{href:!0});var utt=s(wR);bKe=r(utt,"GPTJConfig"),utt.forEach(t),vKe=r(B6e," (GPT-J model)"),B6e.forEach(t),FKe=i(L),Lm=n(L,"LI",{});var I6e=s(Lm);pne=n(I6e,"STRONG",{});var btt=s(pne);TKe=r(btt,"groupvit"),btt.forEach(t),MKe=r(I6e," \u2014 "),AR=n(I6e,"A",{href:!0});var vtt=s(AR);EKe=r(vtt,"GroupViTConfig"),vtt.forEach(t),CKe=r(I6e," (GroupViT model)"),I6e.forEach(t),wKe=i(L),ym=n(L,"LI",{});var N6e=s(ym);_ne=n(N6e,"STRONG",{});var Ftt=s(_ne);AKe=r(Ftt,"hubert"),Ftt.forEach(t),LKe=r(N6e," \u2014 "),LR=n(N6e,"A",{href:!0});var Ttt=s(LR);yKe=r(Ttt,"HubertConfig"),Ttt.forEach(t),xKe=r(N6e," (Hubert model)"),N6e.forEach(t),$Ke=i(L),xm=n(L,"LI",{});var q6e=s(xm);une=n(q6e,"STRONG",{});var Mtt=s(une);kKe=r(Mtt,"ibert"),Mtt.forEach(t),SKe=r(q6e," \u2014 "),yR=n(q6e,"A",{href:!0});var Ett=s(yR);RKe=r(Ett,"IBertConfig"),Ett.forEach(t),PKe=r(q6e," (I-BERT model)"),q6e.forEach(t),BKe=i(L),$m=n(L,"LI",{});var j6e=s($m);bne=n(j6e,"STRONG",{});var Ctt=s(bne);IKe=r(Ctt,"imagegpt"),Ctt.forEach(t),NKe=r(j6e," \u2014 "),xR=n(j6e,"A",{href:!0});var wtt=s(xR);qKe=r(wtt,"ImageGPTConfig"),wtt.forEach(t),jKe=r(j6e," (ImageGPT model)"),j6e.forEach(t),DKe=i(L),km=n(L,"LI",{});var D6e=s(km);vne=n(D6e,"STRONG",{});var Att=s(vne);GKe=r(Att,"layoutlm"),Att.forEach(t),OKe=r(D6e," \u2014 "),$R=n(D6e,"A",{href:!0});var Ltt=s($R);VKe=r(Ltt,"LayoutLMConfig"),Ltt.forEach(t),XKe=r(D6e," (LayoutLM model)"),D6e.forEach(t),zKe=i(L),Sm=n(L,"LI",{});var G6e=s(Sm);Fne=n(G6e,"STRONG",{});var ytt=s(Fne);QKe=r(ytt,"layoutlmv2"),ytt.forEach(t),WKe=r(G6e," \u2014 "),kR=n(G6e,"A",{href:!0});var xtt=s(kR);HKe=r(xtt,"LayoutLMv2Config"),xtt.forEach(t),UKe=r(G6e," (LayoutLMv2 model)"),G6e.forEach(t),JKe=i(L),Rm=n(L,"LI",{});var O6e=s(Rm);Tne=n(O6e,"STRONG",{});var $tt=s(Tne);YKe=r($tt,"layoutlmv3"),$tt.forEach(t),KKe=r(O6e," \u2014 "),SR=n(O6e,"A",{href:!0});var ktt=s(SR);ZKe=r(ktt,"LayoutLMv3Config"),ktt.forEach(t),eZe=r(O6e," (LayoutLMv3 model)"),O6e.forEach(t),oZe=i(L),Pm=n(L,"LI",{});var V6e=s(Pm);Mne=n(V6e,"STRONG",{});var Stt=s(Mne);rZe=r(Stt,"led"),Stt.forEach(t),tZe=r(V6e," \u2014 "),RR=n(V6e,"A",{href:!0});var Rtt=s(RR);aZe=r(Rtt,"LEDConfig"),Rtt.forEach(t),nZe=r(V6e," (LED model)"),V6e.forEach(t),sZe=i(L),Bm=n(L,"LI",{});var X6e=s(Bm);Ene=n(X6e,"STRONG",{});var Ptt=s(Ene);lZe=r(Ptt,"levit"),Ptt.forEach(t),iZe=r(X6e," \u2014 "),PR=n(X6e,"A",{href:!0});var Btt=s(PR);dZe=r(Btt,"LevitConfig"),Btt.forEach(t),cZe=r(X6e," (LeViT model)"),X6e.forEach(t),fZe=i(L),Im=n(L,"LI",{});var z6e=s(Im);Cne=n(z6e,"STRONG",{});var Itt=s(Cne);mZe=r(Itt,"longformer"),Itt.forEach(t),gZe=r(z6e," \u2014 "),BR=n(z6e,"A",{href:!0});var Ntt=s(BR);hZe=r(Ntt,"LongformerConfig"),Ntt.forEach(t),pZe=r(z6e," (Longformer model)"),z6e.forEach(t),_Ze=i(L),Nm=n(L,"LI",{});var Q6e=s(Nm);wne=n(Q6e,"STRONG",{});var qtt=s(wne);uZe=r(qtt,"longt5"),qtt.forEach(t),bZe=r(Q6e," \u2014 "),IR=n(Q6e,"A",{href:!0});var jtt=s(IR);vZe=r(jtt,"LongT5Config"),jtt.forEach(t),FZe=r(Q6e," (LongT5 model)"),Q6e.forEach(t),TZe=i(L),qm=n(L,"LI",{});var W6e=s(qm);Ane=n(W6e,"STRONG",{});var Dtt=s(Ane);MZe=r(Dtt,"luke"),Dtt.forEach(t),EZe=r(W6e," \u2014 "),NR=n(W6e,"A",{href:!0});var Gtt=s(NR);CZe=r(Gtt,"LukeConfig"),Gtt.forEach(t),wZe=r(W6e," (LUKE model)"),W6e.forEach(t),AZe=i(L),jm=n(L,"LI",{});var H6e=s(jm);Lne=n(H6e,"STRONG",{});var Ott=s(Lne);LZe=r(Ott,"lxmert"),Ott.forEach(t),yZe=r(H6e," \u2014 "),qR=n(H6e,"A",{href:!0});var Vtt=s(qR);xZe=r(Vtt,"LxmertConfig"),Vtt.forEach(t),$Ze=r(H6e," (LXMERT model)"),H6e.forEach(t),kZe=i(L),Dm=n(L,"LI",{});var U6e=s(Dm);yne=n(U6e,"STRONG",{});var Xtt=s(yne);SZe=r(Xtt,"m2m_100"),Xtt.forEach(t),RZe=r(U6e," \u2014 "),jR=n(U6e,"A",{href:!0});var ztt=s(jR);PZe=r(ztt,"M2M100Config"),ztt.forEach(t),BZe=r(U6e," (M2M100 model)"),U6e.forEach(t),IZe=i(L),Gm=n(L,"LI",{});var J6e=s(Gm);xne=n(J6e,"STRONG",{});var Qtt=s(xne);NZe=r(Qtt,"marian"),Qtt.forEach(t),qZe=r(J6e," \u2014 "),DR=n(J6e,"A",{href:!0});var Wtt=s(DR);jZe=r(Wtt,"MarianConfig"),Wtt.forEach(t),DZe=r(J6e," (Marian model)"),J6e.forEach(t),GZe=i(L),Om=n(L,"LI",{});var Y6e=s(Om);$ne=n(Y6e,"STRONG",{});var Htt=s($ne);OZe=r(Htt,"maskformer"),Htt.forEach(t),VZe=r(Y6e," \u2014 "),GR=n(Y6e,"A",{href:!0});var Utt=s(GR);XZe=r(Utt,"MaskFormerConfig"),Utt.forEach(t),zZe=r(Y6e," (MaskFormer model)"),Y6e.forEach(t),QZe=i(L),Vm=n(L,"LI",{});var K6e=s(Vm);kne=n(K6e,"STRONG",{});var Jtt=s(kne);WZe=r(Jtt,"mbart"),Jtt.forEach(t),HZe=r(K6e," \u2014 "),OR=n(K6e,"A",{href:!0});var Ytt=s(OR);UZe=r(Ytt,"MBartConfig"),Ytt.forEach(t),JZe=r(K6e," (mBART model)"),K6e.forEach(t),YZe=i(L),Xm=n(L,"LI",{});var Z6e=s(Xm);Sne=n(Z6e,"STRONG",{});var Ktt=s(Sne);KZe=r(Ktt,"mctct"),Ktt.forEach(t),ZZe=r(Z6e," \u2014 "),VR=n(Z6e,"A",{href:!0});var Ztt=s(VR);eeo=r(Ztt,"MCTCTConfig"),Ztt.forEach(t),oeo=r(Z6e," (M-CTC-T model)"),Z6e.forEach(t),reo=i(L),zm=n(L,"LI",{});var eLe=s(zm);Rne=n(eLe,"STRONG",{});var eat=s(Rne);teo=r(eat,"megatron-bert"),eat.forEach(t),aeo=r(eLe," \u2014 "),XR=n(eLe,"A",{href:!0});var oat=s(XR);neo=r(oat,"MegatronBertConfig"),oat.forEach(t),seo=r(eLe," (Megatron-BERT model)"),eLe.forEach(t),leo=i(L),Qm=n(L,"LI",{});var oLe=s(Qm);Pne=n(oLe,"STRONG",{});var rat=s(Pne);ieo=r(rat,"mobilebert"),rat.forEach(t),deo=r(oLe," \u2014 "),zR=n(oLe,"A",{href:!0});var tat=s(zR);ceo=r(tat,"MobileBertConfig"),tat.forEach(t),feo=r(oLe," (MobileBERT model)"),oLe.forEach(t),meo=i(L),Wm=n(L,"LI",{});var rLe=s(Wm);Bne=n(rLe,"STRONG",{});var aat=s(Bne);geo=r(aat,"mobilevit"),aat.forEach(t),heo=r(rLe," \u2014 "),QR=n(rLe,"A",{href:!0});var nat=s(QR);peo=r(nat,"MobileViTConfig"),nat.forEach(t),_eo=r(rLe," (MobileViT model)"),rLe.forEach(t),ueo=i(L),Hm=n(L,"LI",{});var tLe=s(Hm);Ine=n(tLe,"STRONG",{});var sat=s(Ine);beo=r(sat,"mpnet"),sat.forEach(t),veo=r(tLe," \u2014 "),WR=n(tLe,"A",{href:!0});var lat=s(WR);Feo=r(lat,"MPNetConfig"),lat.forEach(t),Teo=r(tLe," (MPNet model)"),tLe.forEach(t),Meo=i(L),Um=n(L,"LI",{});var aLe=s(Um);Nne=n(aLe,"STRONG",{});var iat=s(Nne);Eeo=r(iat,"mt5"),iat.forEach(t),Ceo=r(aLe," \u2014 "),HR=n(aLe,"A",{href:!0});var dat=s(HR);weo=r(dat,"MT5Config"),dat.forEach(t),Aeo=r(aLe," (MT5 model)"),aLe.forEach(t),Leo=i(L),Jm=n(L,"LI",{});var nLe=s(Jm);qne=n(nLe,"STRONG",{});var cat=s(qne);yeo=r(cat,"mvp"),cat.forEach(t),xeo=r(nLe," \u2014 "),UR=n(nLe,"A",{href:!0});var fat=s(UR);$eo=r(fat,"MvpConfig"),fat.forEach(t),keo=r(nLe," (MVP model)"),nLe.forEach(t),Seo=i(L),Ym=n(L,"LI",{});var sLe=s(Ym);jne=n(sLe,"STRONG",{});var mat=s(jne);Reo=r(mat,"nezha"),mat.forEach(t),Peo=r(sLe," \u2014 "),JR=n(sLe,"A",{href:!0});var gat=s(JR);Beo=r(gat,"NezhaConfig"),gat.forEach(t),Ieo=r(sLe," (Nezha model)"),sLe.forEach(t),Neo=i(L),Km=n(L,"LI",{});var lLe=s(Km);Dne=n(lLe,"STRONG",{});var hat=s(Dne);qeo=r(hat,"nystromformer"),hat.forEach(t),jeo=r(lLe," \u2014 "),YR=n(lLe,"A",{href:!0});var pat=s(YR);Deo=r(pat,"NystromformerConfig"),pat.forEach(t),Geo=r(lLe," (Nystr\xF6mformer model)"),lLe.forEach(t),Oeo=i(L),Zm=n(L,"LI",{});var iLe=s(Zm);Gne=n(iLe,"STRONG",{});var _at=s(Gne);Veo=r(_at,"openai-gpt"),_at.forEach(t),Xeo=r(iLe," \u2014 "),KR=n(iLe,"A",{href:!0});var uat=s(KR);zeo=r(uat,"OpenAIGPTConfig"),uat.forEach(t),Qeo=r(iLe," (OpenAI GPT model)"),iLe.forEach(t),Weo=i(L),eg=n(L,"LI",{});var dLe=s(eg);One=n(dLe,"STRONG",{});var bat=s(One);Heo=r(bat,"opt"),bat.forEach(t),Ueo=r(dLe," \u2014 "),ZR=n(dLe,"A",{href:!0});var vat=s(ZR);Jeo=r(vat,"OPTConfig"),vat.forEach(t),Yeo=r(dLe," (OPT model)"),dLe.forEach(t),Keo=i(L),og=n(L,"LI",{});var cLe=s(og);Vne=n(cLe,"STRONG",{});var Fat=s(Vne);Zeo=r(Fat,"pegasus"),Fat.forEach(t),eoo=r(cLe," \u2014 "),eP=n(cLe,"A",{href:!0});var Tat=s(eP);ooo=r(Tat,"PegasusConfig"),Tat.forEach(t),roo=r(cLe," (Pegasus model)"),cLe.forEach(t),too=i(L),rg=n(L,"LI",{});var fLe=s(rg);Xne=n(fLe,"STRONG",{});var Mat=s(Xne);aoo=r(Mat,"perceiver"),Mat.forEach(t),noo=r(fLe," \u2014 "),oP=n(fLe,"A",{href:!0});var Eat=s(oP);soo=r(Eat,"PerceiverConfig"),Eat.forEach(t),loo=r(fLe," (Perceiver model)"),fLe.forEach(t),ioo=i(L),tg=n(L,"LI",{});var mLe=s(tg);zne=n(mLe,"STRONG",{});var Cat=s(zne);doo=r(Cat,"plbart"),Cat.forEach(t),coo=r(mLe," \u2014 "),rP=n(mLe,"A",{href:!0});var wat=s(rP);foo=r(wat,"PLBartConfig"),wat.forEach(t),moo=r(mLe," (PLBart model)"),mLe.forEach(t),goo=i(L),ag=n(L,"LI",{});var gLe=s(ag);Qne=n(gLe,"STRONG",{});var Aat=s(Qne);hoo=r(Aat,"poolformer"),Aat.forEach(t),poo=r(gLe," \u2014 "),tP=n(gLe,"A",{href:!0});var Lat=s(tP);_oo=r(Lat,"PoolFormerConfig"),Lat.forEach(t),uoo=r(gLe," (PoolFormer model)"),gLe.forEach(t),boo=i(L),ng=n(L,"LI",{});var hLe=s(ng);Wne=n(hLe,"STRONG",{});var yat=s(Wne);voo=r(yat,"prophetnet"),yat.forEach(t),Foo=r(hLe," \u2014 "),aP=n(hLe,"A",{href:!0});var xat=s(aP);Too=r(xat,"ProphetNetConfig"),xat.forEach(t),Moo=r(hLe," (ProphetNet model)"),hLe.forEach(t),Eoo=i(L),sg=n(L,"LI",{});var pLe=s(sg);Hne=n(pLe,"STRONG",{});var $at=s(Hne);Coo=r($at,"qdqbert"),$at.forEach(t),woo=r(pLe," \u2014 "),nP=n(pLe,"A",{href:!0});var kat=s(nP);Aoo=r(kat,"QDQBertConfig"),kat.forEach(t),Loo=r(pLe," (QDQBert model)"),pLe.forEach(t),yoo=i(L),lg=n(L,"LI",{});var _Le=s(lg);Une=n(_Le,"STRONG",{});var Sat=s(Une);xoo=r(Sat,"rag"),Sat.forEach(t),$oo=r(_Le," \u2014 "),sP=n(_Le,"A",{href:!0});var Rat=s(sP);koo=r(Rat,"RagConfig"),Rat.forEach(t),Soo=r(_Le," (RAG model)"),_Le.forEach(t),Roo=i(L),ig=n(L,"LI",{});var uLe=s(ig);Jne=n(uLe,"STRONG",{});var Pat=s(Jne);Poo=r(Pat,"realm"),Pat.forEach(t),Boo=r(uLe," \u2014 "),lP=n(uLe,"A",{href:!0});var Bat=s(lP);Ioo=r(Bat,"RealmConfig"),Bat.forEach(t),Noo=r(uLe," (REALM model)"),uLe.forEach(t),qoo=i(L),dg=n(L,"LI",{});var bLe=s(dg);Yne=n(bLe,"STRONG",{});var Iat=s(Yne);joo=r(Iat,"reformer"),Iat.forEach(t),Doo=r(bLe," \u2014 "),iP=n(bLe,"A",{href:!0});var Nat=s(iP);Goo=r(Nat,"ReformerConfig"),Nat.forEach(t),Ooo=r(bLe," (Reformer model)"),bLe.forEach(t),Voo=i(L),cg=n(L,"LI",{});var vLe=s(cg);Kne=n(vLe,"STRONG",{});var qat=s(Kne);Xoo=r(qat,"regnet"),qat.forEach(t),zoo=r(vLe," \u2014 "),dP=n(vLe,"A",{href:!0});var jat=s(dP);Qoo=r(jat,"RegNetConfig"),jat.forEach(t),Woo=r(vLe," (RegNet model)"),vLe.forEach(t),Hoo=i(L),fg=n(L,"LI",{});var FLe=s(fg);Zne=n(FLe,"STRONG",{});var Dat=s(Zne);Uoo=r(Dat,"rembert"),Dat.forEach(t),Joo=r(FLe," \u2014 "),cP=n(FLe,"A",{href:!0});var Gat=s(cP);Yoo=r(Gat,"RemBertConfig"),Gat.forEach(t),Koo=r(FLe," (RemBERT model)"),FLe.forEach(t),Zoo=i(L),mg=n(L,"LI",{});var TLe=s(mg);ese=n(TLe,"STRONG",{});var Oat=s(ese);ero=r(Oat,"resnet"),Oat.forEach(t),oro=r(TLe," \u2014 "),fP=n(TLe,"A",{href:!0});var Vat=s(fP);rro=r(Vat,"ResNetConfig"),Vat.forEach(t),tro=r(TLe," (ResNet model)"),TLe.forEach(t),aro=i(L),gg=n(L,"LI",{});var MLe=s(gg);ose=n(MLe,"STRONG",{});var Xat=s(ose);nro=r(Xat,"retribert"),Xat.forEach(t),sro=r(MLe," \u2014 "),mP=n(MLe,"A",{href:!0});var zat=s(mP);lro=r(zat,"RetriBertConfig"),zat.forEach(t),iro=r(MLe," (RetriBERT model)"),MLe.forEach(t),dro=i(L),hg=n(L,"LI",{});var ELe=s(hg);rse=n(ELe,"STRONG",{});var Qat=s(rse);cro=r(Qat,"roberta"),Qat.forEach(t),fro=r(ELe," \u2014 "),gP=n(ELe,"A",{href:!0});var Wat=s(gP);mro=r(Wat,"RobertaConfig"),Wat.forEach(t),gro=r(ELe," (RoBERTa model)"),ELe.forEach(t),hro=i(L),pg=n(L,"LI",{});var CLe=s(pg);tse=n(CLe,"STRONG",{});var Hat=s(tse);pro=r(Hat,"roformer"),Hat.forEach(t),_ro=r(CLe," \u2014 "),hP=n(CLe,"A",{href:!0});var Uat=s(hP);uro=r(Uat,"RoFormerConfig"),Uat.forEach(t),bro=r(CLe," (RoFormer model)"),CLe.forEach(t),vro=i(L),_g=n(L,"LI",{});var wLe=s(_g);ase=n(wLe,"STRONG",{});var Jat=s(ase);Fro=r(Jat,"segformer"),Jat.forEach(t),Tro=r(wLe," \u2014 "),pP=n(wLe,"A",{href:!0});var Yat=s(pP);Mro=r(Yat,"SegformerConfig"),Yat.forEach(t),Ero=r(wLe," (SegFormer model)"),wLe.forEach(t),Cro=i(L),ug=n(L,"LI",{});var ALe=s(ug);nse=n(ALe,"STRONG",{});var Kat=s(nse);wro=r(Kat,"sew"),Kat.forEach(t),Aro=r(ALe," \u2014 "),_P=n(ALe,"A",{href:!0});var Zat=s(_P);Lro=r(Zat,"SEWConfig"),Zat.forEach(t),yro=r(ALe," (SEW model)"),ALe.forEach(t),xro=i(L),bg=n(L,"LI",{});var LLe=s(bg);sse=n(LLe,"STRONG",{});var ent=s(sse);$ro=r(ent,"sew-d"),ent.forEach(t),kro=r(LLe," \u2014 "),uP=n(LLe,"A",{href:!0});var ont=s(uP);Sro=r(ont,"SEWDConfig"),ont.forEach(t),Rro=r(LLe," (SEW-D model)"),LLe.forEach(t),Pro=i(L),vg=n(L,"LI",{});var yLe=s(vg);lse=n(yLe,"STRONG",{});var rnt=s(lse);Bro=r(rnt,"speech-encoder-decoder"),rnt.forEach(t),Iro=r(yLe," \u2014 "),bP=n(yLe,"A",{href:!0});var tnt=s(bP);Nro=r(tnt,"SpeechEncoderDecoderConfig"),tnt.forEach(t),qro=r(yLe," (Speech Encoder decoder model)"),yLe.forEach(t),jro=i(L),Fg=n(L,"LI",{});var xLe=s(Fg);ise=n(xLe,"STRONG",{});var ant=s(ise);Dro=r(ant,"speech_to_text"),ant.forEach(t),Gro=r(xLe," \u2014 "),vP=n(xLe,"A",{href:!0});var nnt=s(vP);Oro=r(nnt,"Speech2TextConfig"),nnt.forEach(t),Vro=r(xLe," (Speech2Text model)"),xLe.forEach(t),Xro=i(L),Tg=n(L,"LI",{});var $Le=s(Tg);dse=n($Le,"STRONG",{});var snt=s(dse);zro=r(snt,"speech_to_text_2"),snt.forEach(t),Qro=r($Le," \u2014 "),FP=n($Le,"A",{href:!0});var lnt=s(FP);Wro=r(lnt,"Speech2Text2Config"),lnt.forEach(t),Hro=r($Le," (Speech2Text2 model)"),$Le.forEach(t),Uro=i(L),Mg=n(L,"LI",{});var kLe=s(Mg);cse=n(kLe,"STRONG",{});var int=s(cse);Jro=r(int,"splinter"),int.forEach(t),Yro=r(kLe," \u2014 "),TP=n(kLe,"A",{href:!0});var dnt=s(TP);Kro=r(dnt,"SplinterConfig"),dnt.forEach(t),Zro=r(kLe," (Splinter model)"),kLe.forEach(t),eto=i(L),Eg=n(L,"LI",{});var SLe=s(Eg);fse=n(SLe,"STRONG",{});var cnt=s(fse);oto=r(cnt,"squeezebert"),cnt.forEach(t),rto=r(SLe," \u2014 "),MP=n(SLe,"A",{href:!0});var fnt=s(MP);tto=r(fnt,"SqueezeBertConfig"),fnt.forEach(t),ato=r(SLe," (SqueezeBERT model)"),SLe.forEach(t),nto=i(L),Cg=n(L,"LI",{});var RLe=s(Cg);mse=n(RLe,"STRONG",{});var mnt=s(mse);sto=r(mnt,"swin"),mnt.forEach(t),lto=r(RLe," \u2014 "),EP=n(RLe,"A",{href:!0});var gnt=s(EP);ito=r(gnt,"SwinConfig"),gnt.forEach(t),dto=r(RLe," (Swin Transformer model)"),RLe.forEach(t),cto=i(L),wg=n(L,"LI",{});var PLe=s(wg);gse=n(PLe,"STRONG",{});var hnt=s(gse);fto=r(hnt,"t5"),hnt.forEach(t),mto=r(PLe," \u2014 "),CP=n(PLe,"A",{href:!0});var pnt=s(CP);gto=r(pnt,"T5Config"),pnt.forEach(t),hto=r(PLe," (T5 model)"),PLe.forEach(t),pto=i(L),Ag=n(L,"LI",{});var BLe=s(Ag);hse=n(BLe,"STRONG",{});var _nt=s(hse);_to=r(_nt,"tapas"),_nt.forEach(t),uto=r(BLe," \u2014 "),wP=n(BLe,"A",{href:!0});var unt=s(wP);bto=r(unt,"TapasConfig"),unt.forEach(t),vto=r(BLe," (TAPAS model)"),BLe.forEach(t),Fto=i(L),Lg=n(L,"LI",{});var ILe=s(Lg);pse=n(ILe,"STRONG",{});var bnt=s(pse);Tto=r(bnt,"trajectory_transformer"),bnt.forEach(t),Mto=r(ILe," \u2014 "),AP=n(ILe,"A",{href:!0});var vnt=s(AP);Eto=r(vnt,"TrajectoryTransformerConfig"),vnt.forEach(t),Cto=r(ILe," (Trajectory Transformer model)"),ILe.forEach(t),wto=i(L),yg=n(L,"LI",{});var NLe=s(yg);_se=n(NLe,"STRONG",{});var Fnt=s(_se);Ato=r(Fnt,"transfo-xl"),Fnt.forEach(t),Lto=r(NLe," \u2014 "),LP=n(NLe,"A",{href:!0});var Tnt=s(LP);yto=r(Tnt,"TransfoXLConfig"),Tnt.forEach(t),xto=r(NLe," (Transformer-XL model)"),NLe.forEach(t),$to=i(L),xg=n(L,"LI",{});var qLe=s(xg);use=n(qLe,"STRONG",{});var Mnt=s(use);kto=r(Mnt,"trocr"),Mnt.forEach(t),Sto=r(qLe," \u2014 "),yP=n(qLe,"A",{href:!0});var Ent=s(yP);Rto=r(Ent,"TrOCRConfig"),Ent.forEach(t),Pto=r(qLe," (TrOCR model)"),qLe.forEach(t),Bto=i(L),$g=n(L,"LI",{});var jLe=s($g);bse=n(jLe,"STRONG",{});var Cnt=s(bse);Ito=r(Cnt,"unispeech"),Cnt.forEach(t),Nto=r(jLe," \u2014 "),xP=n(jLe,"A",{href:!0});var wnt=s(xP);qto=r(wnt,"UniSpeechConfig"),wnt.forEach(t),jto=r(jLe," (UniSpeech model)"),jLe.forEach(t),Dto=i(L),kg=n(L,"LI",{});var DLe=s(kg);vse=n(DLe,"STRONG",{});var Ant=s(vse);Gto=r(Ant,"unispeech-sat"),Ant.forEach(t),Oto=r(DLe," \u2014 "),$P=n(DLe,"A",{href:!0});var Lnt=s($P);Vto=r(Lnt,"UniSpeechSatConfig"),Lnt.forEach(t),Xto=r(DLe," (UniSpeechSat model)"),DLe.forEach(t),zto=i(L),Sg=n(L,"LI",{});var GLe=s(Sg);Fse=n(GLe,"STRONG",{});var ynt=s(Fse);Qto=r(ynt,"van"),ynt.forEach(t),Wto=r(GLe," \u2014 "),kP=n(GLe,"A",{href:!0});var xnt=s(kP);Hto=r(xnt,"VanConfig"),xnt.forEach(t),Uto=r(GLe," (VAN model)"),GLe.forEach(t),Jto=i(L),Rg=n(L,"LI",{});var OLe=s(Rg);Tse=n(OLe,"STRONG",{});var $nt=s(Tse);Yto=r($nt,"vilt"),$nt.forEach(t),Kto=r(OLe," \u2014 "),SP=n(OLe,"A",{href:!0});var knt=s(SP);Zto=r(knt,"ViltConfig"),knt.forEach(t),eao=r(OLe," (ViLT model)"),OLe.forEach(t),oao=i(L),Pg=n(L,"LI",{});var VLe=s(Pg);Mse=n(VLe,"STRONG",{});var Snt=s(Mse);rao=r(Snt,"vision-encoder-decoder"),Snt.forEach(t),tao=r(VLe," \u2014 "),RP=n(VLe,"A",{href:!0});var Rnt=s(RP);aao=r(Rnt,"VisionEncoderDecoderConfig"),Rnt.forEach(t),nao=r(VLe," (Vision Encoder decoder model)"),VLe.forEach(t),sao=i(L),Bg=n(L,"LI",{});var XLe=s(Bg);Ese=n(XLe,"STRONG",{});var Pnt=s(Ese);lao=r(Pnt,"vision-text-dual-encoder"),Pnt.forEach(t),iao=r(XLe," \u2014 "),PP=n(XLe,"A",{href:!0});var Bnt=s(PP);dao=r(Bnt,"VisionTextDualEncoderConfig"),Bnt.forEach(t),cao=r(XLe," (VisionTextDualEncoder model)"),XLe.forEach(t),fao=i(L),Ig=n(L,"LI",{});var zLe=s(Ig);Cse=n(zLe,"STRONG",{});var Int=s(Cse);mao=r(Int,"visual_bert"),Int.forEach(t),gao=r(zLe," \u2014 "),BP=n(zLe,"A",{href:!0});var Nnt=s(BP);hao=r(Nnt,"VisualBertConfig"),Nnt.forEach(t),pao=r(zLe," (VisualBERT model)"),zLe.forEach(t),_ao=i(L),Ng=n(L,"LI",{});var QLe=s(Ng);wse=n(QLe,"STRONG",{});var qnt=s(wse);uao=r(qnt,"vit"),qnt.forEach(t),bao=r(QLe," \u2014 "),IP=n(QLe,"A",{href:!0});var jnt=s(IP);vao=r(jnt,"ViTConfig"),jnt.forEach(t),Fao=r(QLe," (ViT model)"),QLe.forEach(t),Tao=i(L),qg=n(L,"LI",{});var WLe=s(qg);Ase=n(WLe,"STRONG",{});var Dnt=s(Ase);Mao=r(Dnt,"vit_mae"),Dnt.forEach(t),Eao=r(WLe," \u2014 "),NP=n(WLe,"A",{href:!0});var Gnt=s(NP);Cao=r(Gnt,"ViTMAEConfig"),Gnt.forEach(t),wao=r(WLe," (ViTMAE model)"),WLe.forEach(t),Aao=i(L),jg=n(L,"LI",{});var HLe=s(jg);Lse=n(HLe,"STRONG",{});var Ont=s(Lse);Lao=r(Ont,"wav2vec2"),Ont.forEach(t),yao=r(HLe," \u2014 "),qP=n(HLe,"A",{href:!0});var Vnt=s(qP);xao=r(Vnt,"Wav2Vec2Config"),Vnt.forEach(t),$ao=r(HLe," (Wav2Vec2 model)"),HLe.forEach(t),kao=i(L),Dg=n(L,"LI",{});var ULe=s(Dg);yse=n(ULe,"STRONG",{});var Xnt=s(yse);Sao=r(Xnt,"wav2vec2-conformer"),Xnt.forEach(t),Rao=r(ULe," \u2014 "),jP=n(ULe,"A",{href:!0});var znt=s(jP);Pao=r(znt,"Wav2Vec2ConformerConfig"),znt.forEach(t),Bao=r(ULe," (Wav2Vec2-Conformer model)"),ULe.forEach(t),Iao=i(L),Gg=n(L,"LI",{});var JLe=s(Gg);xse=n(JLe,"STRONG",{});var Qnt=s(xse);Nao=r(Qnt,"wavlm"),Qnt.forEach(t),qao=r(JLe," \u2014 "),DP=n(JLe,"A",{href:!0});var Wnt=s(DP);jao=r(Wnt,"WavLMConfig"),Wnt.forEach(t),Dao=r(JLe," (WavLM model)"),JLe.forEach(t),Gao=i(L),Og=n(L,"LI",{});var YLe=s(Og);$se=n(YLe,"STRONG",{});var Hnt=s($se);Oao=r(Hnt,"xglm"),Hnt.forEach(t),Vao=r(YLe," \u2014 "),GP=n(YLe,"A",{href:!0});var Unt=s(GP);Xao=r(Unt,"XGLMConfig"),Unt.forEach(t),zao=r(YLe," (XGLM model)"),YLe.forEach(t),Qao=i(L),Vg=n(L,"LI",{});var KLe=s(Vg);kse=n(KLe,"STRONG",{});var Jnt=s(kse);Wao=r(Jnt,"xlm"),Jnt.forEach(t),Hao=r(KLe," \u2014 "),OP=n(KLe,"A",{href:!0});var Ynt=s(OP);Uao=r(Ynt,"XLMConfig"),Ynt.forEach(t),Jao=r(KLe," (XLM model)"),KLe.forEach(t),Yao=i(L),Xg=n(L,"LI",{});var ZLe=s(Xg);Sse=n(ZLe,"STRONG",{});var Knt=s(Sse);Kao=r(Knt,"xlm-prophetnet"),Knt.forEach(t),Zao=r(ZLe," \u2014 "),VP=n(ZLe,"A",{href:!0});var Znt=s(VP);eno=r(Znt,"XLMProphetNetConfig"),Znt.forEach(t),ono=r(ZLe," (XLM-ProphetNet model)"),ZLe.forEach(t),rno=i(L),zg=n(L,"LI",{});var eye=s(zg);Rse=n(eye,"STRONG",{});var est=s(Rse);tno=r(est,"xlm-roberta"),est.forEach(t),ano=r(eye," \u2014 "),XP=n(eye,"A",{href:!0});var ost=s(XP);nno=r(ost,"XLMRobertaConfig"),ost.forEach(t),sno=r(eye," (XLM-RoBERTa model)"),eye.forEach(t),lno=i(L),Qg=n(L,"LI",{});var oye=s(Qg);Pse=n(oye,"STRONG",{});var rst=s(Pse);ino=r(rst,"xlm-roberta-xl"),rst.forEach(t),dno=r(oye," \u2014 "),zP=n(oye,"A",{href:!0});var tst=s(zP);cno=r(tst,"XLMRobertaXLConfig"),tst.forEach(t),fno=r(oye," (XLM-RoBERTa-XL model)"),oye.forEach(t),mno=i(L),Wg=n(L,"LI",{});var rye=s(Wg);Bse=n(rye,"STRONG",{});var ast=s(Bse);gno=r(ast,"xlnet"),ast.forEach(t),hno=r(rye," \u2014 "),QP=n(rye,"A",{href:!0});var nst=s(QP);pno=r(nst,"XLNetConfig"),nst.forEach(t),_no=r(rye," (XLNet model)"),rye.forEach(t),uno=i(L),Hg=n(L,"LI",{});var tye=s(Hg);Ise=n(tye,"STRONG",{});var sst=s(Ise);bno=r(sst,"yolos"),sst.forEach(t),vno=r(tye," \u2014 "),WP=n(tye,"A",{href:!0});var lst=s(WP);Fno=r(lst,"YolosConfig"),lst.forEach(t),Tno=r(tye," (YOLOS model)"),tye.forEach(t),Mno=i(L),Ug=n(L,"LI",{});var aye=s(Ug);Nse=n(aye,"STRONG",{});var ist=s(Nse);Eno=r(ist,"yoso"),ist.forEach(t),Cno=r(aye," \u2014 "),HP=n(aye,"A",{href:!0});var dst=s(HP);wno=r(dst,"YosoConfig"),dst.forEach(t),Ano=r(aye," (YOSO model)"),aye.forEach(t),L.forEach(t),Lno=i(nt),T(Jg.$$.fragment,nt),nt.forEach(t),yno=i(at),Yg=n(at,"DIV",{class:!0});var Hze=s(Yg);T(dL.$$.fragment,Hze),xno=i(Hze),qse=n(Hze,"P",{});var cst=s(qse);$no=r(cst,"Register a new configuration for this class."),cst.forEach(t),Hze.forEach(t),at.forEach(t),UVe=i(f),Ii=n(f,"H2",{class:!0});var Uze=s(Ii);Kg=n(Uze,"A",{id:!0,class:!0,href:!0});var fst=s(Kg);jse=n(fst,"SPAN",{});var mst=s(jse);T(cL.$$.fragment,mst),mst.forEach(t),fst.forEach(t),kno=i(Uze),Dse=n(Uze,"SPAN",{});var gst=s(Dse);Sno=r(gst,"AutoTokenizer"),gst.forEach(t),Uze.forEach(t),JVe=i(f),Ao=n(f,"DIV",{class:!0});var Ys=s(Ao);T(fL.$$.fragment,Ys),Rno=i(Ys),mL=n(Ys,"P",{});var Jze=s(mL);Pno=r(Jze,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),UP=n(Jze,"A",{href:!0});var hst=s(UP);Bno=r(hst,"AutoTokenizer.from_pretrained()"),hst.forEach(t),Ino=r(Jze," class method."),Jze.forEach(t),Nno=i(Ys),gL=n(Ys,"P",{});var Yze=s(gL);qno=r(Yze,"This class cannot be instantiated directly using "),Gse=n(Yze,"CODE",{});var pst=s(Gse);jno=r(pst,"__init__()"),pst.forEach(t),Dno=r(Yze," (throws an error)."),Yze.forEach(t),Gno=i(Ys),yr=n(Ys,"DIV",{class:!0});var Ks=s(yr);T(hL.$$.fragment,Ks),Ono=i(Ks),Ose=n(Ks,"P",{});var _st=s(Ose);Vno=r(_st,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),_st.forEach(t),Xno=i(Ks),Pa=n(Ks,"P",{});var aA=s(Pa);zno=r(aA,"The tokenizer class to instantiate is selected based on the "),Vse=n(aA,"CODE",{});var ust=s(Vse);Qno=r(ust,"model_type"),ust.forEach(t),Wno=r(aA,` property of the config object (either
passed as an argument or loaded from `),Xse=n(aA,"CODE",{});var bst=s(Xse);Hno=r(bst,"pretrained_model_name_or_path"),bst.forEach(t),Uno=r(aA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zse=n(aA,"CODE",{});var vst=s(zse);Jno=r(vst,"pretrained_model_name_or_path"),vst.forEach(t),Yno=r(aA,":"),aA.forEach(t),Kno=i(Ks),k=n(Ks,"UL",{});var S=s(k);jn=n(S,"LI",{});var Fk=s(jn);Qse=n(Fk,"STRONG",{});var Fst=s(Qse);Zno=r(Fst,"albert"),Fst.forEach(t),eso=r(Fk," \u2014 "),JP=n(Fk,"A",{href:!0});var Tst=s(JP);oso=r(Tst,"AlbertTokenizer"),Tst.forEach(t),rso=r(Fk," or "),YP=n(Fk,"A",{href:!0});var Mst=s(YP);tso=r(Mst,"AlbertTokenizerFast"),Mst.forEach(t),aso=r(Fk," (ALBERT model)"),Fk.forEach(t),nso=i(S),Dn=n(S,"LI",{});var Tk=s(Dn);Wse=n(Tk,"STRONG",{});var Est=s(Wse);sso=r(Est,"bart"),Est.forEach(t),lso=r(Tk," \u2014 "),KP=n(Tk,"A",{href:!0});var Cst=s(KP);iso=r(Cst,"BartTokenizer"),Cst.forEach(t),dso=r(Tk," or "),ZP=n(Tk,"A",{href:!0});var wst=s(ZP);cso=r(wst,"BartTokenizerFast"),wst.forEach(t),fso=r(Tk," (BART model)"),Tk.forEach(t),mso=i(S),Gn=n(S,"LI",{});var Mk=s(Gn);Hse=n(Mk,"STRONG",{});var Ast=s(Hse);gso=r(Ast,"barthez"),Ast.forEach(t),hso=r(Mk," \u2014 "),eB=n(Mk,"A",{href:!0});var Lst=s(eB);pso=r(Lst,"BarthezTokenizer"),Lst.forEach(t),_so=r(Mk," or "),oB=n(Mk,"A",{href:!0});var yst=s(oB);uso=r(yst,"BarthezTokenizerFast"),yst.forEach(t),bso=r(Mk," (BARThez model)"),Mk.forEach(t),vso=i(S),Zg=n(S,"LI",{});var nye=s(Zg);Use=n(nye,"STRONG",{});var xst=s(Use);Fso=r(xst,"bartpho"),xst.forEach(t),Tso=r(nye," \u2014 "),rB=n(nye,"A",{href:!0});var $st=s(rB);Mso=r($st,"BartphoTokenizer"),$st.forEach(t),Eso=r(nye," (BARTpho model)"),nye.forEach(t),Cso=i(S),On=n(S,"LI",{});var Ek=s(On);Jse=n(Ek,"STRONG",{});var kst=s(Jse);wso=r(kst,"bert"),kst.forEach(t),Aso=r(Ek," \u2014 "),tB=n(Ek,"A",{href:!0});var Sst=s(tB);Lso=r(Sst,"BertTokenizer"),Sst.forEach(t),yso=r(Ek," or "),aB=n(Ek,"A",{href:!0});var Rst=s(aB);xso=r(Rst,"BertTokenizerFast"),Rst.forEach(t),$so=r(Ek," (BERT model)"),Ek.forEach(t),kso=i(S),eh=n(S,"LI",{});var sye=s(eh);Yse=n(sye,"STRONG",{});var Pst=s(Yse);Sso=r(Pst,"bert-generation"),Pst.forEach(t),Rso=r(sye," \u2014 "),nB=n(sye,"A",{href:!0});var Bst=s(nB);Pso=r(Bst,"BertGenerationTokenizer"),Bst.forEach(t),Bso=r(sye," (Bert Generation model)"),sye.forEach(t),Iso=i(S),oh=n(S,"LI",{});var lye=s(oh);Kse=n(lye,"STRONG",{});var Ist=s(Kse);Nso=r(Ist,"bert-japanese"),Ist.forEach(t),qso=r(lye," \u2014 "),sB=n(lye,"A",{href:!0});var Nst=s(sB);jso=r(Nst,"BertJapaneseTokenizer"),Nst.forEach(t),Dso=r(lye," (BertJapanese model)"),lye.forEach(t),Gso=i(S),rh=n(S,"LI",{});var iye=s(rh);Zse=n(iye,"STRONG",{});var qst=s(Zse);Oso=r(qst,"bertweet"),qst.forEach(t),Vso=r(iye," \u2014 "),lB=n(iye,"A",{href:!0});var jst=s(lB);Xso=r(jst,"BertweetTokenizer"),jst.forEach(t),zso=r(iye," (BERTweet model)"),iye.forEach(t),Qso=i(S),Vn=n(S,"LI",{});var Ck=s(Vn);ele=n(Ck,"STRONG",{});var Dst=s(ele);Wso=r(Dst,"big_bird"),Dst.forEach(t),Hso=r(Ck," \u2014 "),iB=n(Ck,"A",{href:!0});var Gst=s(iB);Uso=r(Gst,"BigBirdTokenizer"),Gst.forEach(t),Jso=r(Ck," or "),dB=n(Ck,"A",{href:!0});var Ost=s(dB);Yso=r(Ost,"BigBirdTokenizerFast"),Ost.forEach(t),Kso=r(Ck," (BigBird model)"),Ck.forEach(t),Zso=i(S),Xn=n(S,"LI",{});var wk=s(Xn);ole=n(wk,"STRONG",{});var Vst=s(ole);elo=r(Vst,"bigbird_pegasus"),Vst.forEach(t),olo=r(wk," \u2014 "),cB=n(wk,"A",{href:!0});var Xst=s(cB);rlo=r(Xst,"PegasusTokenizer"),Xst.forEach(t),tlo=r(wk," or "),fB=n(wk,"A",{href:!0});var zst=s(fB);alo=r(zst,"PegasusTokenizerFast"),zst.forEach(t),nlo=r(wk," (BigBird-Pegasus model)"),wk.forEach(t),slo=i(S),zn=n(S,"LI",{});var Ak=s(zn);rle=n(Ak,"STRONG",{});var Qst=s(rle);llo=r(Qst,"blenderbot"),Qst.forEach(t),ilo=r(Ak," \u2014 "),mB=n(Ak,"A",{href:!0});var Wst=s(mB);dlo=r(Wst,"BlenderbotTokenizer"),Wst.forEach(t),clo=r(Ak," or "),gB=n(Ak,"A",{href:!0});var Hst=s(gB);flo=r(Hst,"BlenderbotTokenizerFast"),Hst.forEach(t),mlo=r(Ak," (Blenderbot model)"),Ak.forEach(t),glo=i(S),th=n(S,"LI",{});var dye=s(th);tle=n(dye,"STRONG",{});var Ust=s(tle);hlo=r(Ust,"blenderbot-small"),Ust.forEach(t),plo=r(dye," \u2014 "),hB=n(dye,"A",{href:!0});var Jst=s(hB);_lo=r(Jst,"BlenderbotSmallTokenizer"),Jst.forEach(t),ulo=r(dye," (BlenderbotSmall model)"),dye.forEach(t),blo=i(S),ah=n(S,"LI",{});var cye=s(ah);ale=n(cye,"STRONG",{});var Yst=s(ale);vlo=r(Yst,"bloom"),Yst.forEach(t),Flo=r(cye," \u2014 "),pB=n(cye,"A",{href:!0});var Kst=s(pB);Tlo=r(Kst,"BloomTokenizerFast"),Kst.forEach(t),Mlo=r(cye," (BLOOM model)"),cye.forEach(t),Elo=i(S),nh=n(S,"LI",{});var fye=s(nh);nle=n(fye,"STRONG",{});var Zst=s(nle);Clo=r(Zst,"byt5"),Zst.forEach(t),wlo=r(fye," \u2014 "),_B=n(fye,"A",{href:!0});var elt=s(_B);Alo=r(elt,"ByT5Tokenizer"),elt.forEach(t),Llo=r(fye," (ByT5 model)"),fye.forEach(t),ylo=i(S),Qn=n(S,"LI",{});var Lk=s(Qn);sle=n(Lk,"STRONG",{});var olt=s(sle);xlo=r(olt,"camembert"),olt.forEach(t),$lo=r(Lk," \u2014 "),uB=n(Lk,"A",{href:!0});var rlt=s(uB);klo=r(rlt,"CamembertTokenizer"),rlt.forEach(t),Slo=r(Lk," or "),bB=n(Lk,"A",{href:!0});var tlt=s(bB);Rlo=r(tlt,"CamembertTokenizerFast"),tlt.forEach(t),Plo=r(Lk," (CamemBERT model)"),Lk.forEach(t),Blo=i(S),sh=n(S,"LI",{});var mye=s(sh);lle=n(mye,"STRONG",{});var alt=s(lle);Ilo=r(alt,"canine"),alt.forEach(t),Nlo=r(mye," \u2014 "),vB=n(mye,"A",{href:!0});var nlt=s(vB);qlo=r(nlt,"CanineTokenizer"),nlt.forEach(t),jlo=r(mye," (CANINE model)"),mye.forEach(t),Dlo=i(S),Wn=n(S,"LI",{});var yk=s(Wn);ile=n(yk,"STRONG",{});var slt=s(ile);Glo=r(slt,"clip"),slt.forEach(t),Olo=r(yk," \u2014 "),FB=n(yk,"A",{href:!0});var llt=s(FB);Vlo=r(llt,"CLIPTokenizer"),llt.forEach(t),Xlo=r(yk," or "),TB=n(yk,"A",{href:!0});var ilt=s(TB);zlo=r(ilt,"CLIPTokenizerFast"),ilt.forEach(t),Qlo=r(yk," (CLIP model)"),yk.forEach(t),Wlo=i(S),Hn=n(S,"LI",{});var xk=s(Hn);dle=n(xk,"STRONG",{});var dlt=s(dle);Hlo=r(dlt,"codegen"),dlt.forEach(t),Ulo=r(xk," \u2014 "),MB=n(xk,"A",{href:!0});var clt=s(MB);Jlo=r(clt,"CodeGenTokenizer"),clt.forEach(t),Ylo=r(xk," or "),EB=n(xk,"A",{href:!0});var flt=s(EB);Klo=r(flt,"CodeGenTokenizerFast"),flt.forEach(t),Zlo=r(xk," (CodeGen model)"),xk.forEach(t),eio=i(S),Un=n(S,"LI",{});var $k=s(Un);cle=n($k,"STRONG",{});var mlt=s(cle);oio=r(mlt,"convbert"),mlt.forEach(t),rio=r($k," \u2014 "),CB=n($k,"A",{href:!0});var glt=s(CB);tio=r(glt,"ConvBertTokenizer"),glt.forEach(t),aio=r($k," or "),wB=n($k,"A",{href:!0});var hlt=s(wB);nio=r(hlt,"ConvBertTokenizerFast"),hlt.forEach(t),sio=r($k," (ConvBERT model)"),$k.forEach(t),lio=i(S),Jn=n(S,"LI",{});var kk=s(Jn);fle=n(kk,"STRONG",{});var plt=s(fle);iio=r(plt,"cpm"),plt.forEach(t),dio=r(kk," \u2014 "),AB=n(kk,"A",{href:!0});var _lt=s(AB);cio=r(_lt,"CpmTokenizer"),_lt.forEach(t),fio=r(kk," or "),LB=n(kk,"A",{href:!0});var ult=s(LB);mio=r(ult,"CpmTokenizerFast"),ult.forEach(t),gio=r(kk," (CPM model)"),kk.forEach(t),hio=i(S),lh=n(S,"LI",{});var gye=s(lh);mle=n(gye,"STRONG",{});var blt=s(mle);pio=r(blt,"ctrl"),blt.forEach(t),_io=r(gye," \u2014 "),yB=n(gye,"A",{href:!0});var vlt=s(yB);uio=r(vlt,"CTRLTokenizer"),vlt.forEach(t),bio=r(gye," (CTRL model)"),gye.forEach(t),vio=i(S),Yn=n(S,"LI",{});var Sk=s(Yn);gle=n(Sk,"STRONG",{});var Flt=s(gle);Fio=r(Flt,"data2vec-text"),Flt.forEach(t),Tio=r(Sk," \u2014 "),xB=n(Sk,"A",{href:!0});var Tlt=s(xB);Mio=r(Tlt,"RobertaTokenizer"),Tlt.forEach(t),Eio=r(Sk," or "),$B=n(Sk,"A",{href:!0});var Mlt=s($B);Cio=r(Mlt,"RobertaTokenizerFast"),Mlt.forEach(t),wio=r(Sk," (Data2VecText model)"),Sk.forEach(t),Aio=i(S),Kn=n(S,"LI",{});var Rk=s(Kn);hle=n(Rk,"STRONG",{});var Elt=s(hle);Lio=r(Elt,"deberta"),Elt.forEach(t),yio=r(Rk," \u2014 "),kB=n(Rk,"A",{href:!0});var Clt=s(kB);xio=r(Clt,"DebertaTokenizer"),Clt.forEach(t),$io=r(Rk," or "),SB=n(Rk,"A",{href:!0});var wlt=s(SB);kio=r(wlt,"DebertaTokenizerFast"),wlt.forEach(t),Sio=r(Rk," (DeBERTa model)"),Rk.forEach(t),Rio=i(S),Zn=n(S,"LI",{});var Pk=s(Zn);ple=n(Pk,"STRONG",{});var Alt=s(ple);Pio=r(Alt,"deberta-v2"),Alt.forEach(t),Bio=r(Pk," \u2014 "),RB=n(Pk,"A",{href:!0});var Llt=s(RB);Iio=r(Llt,"DebertaV2Tokenizer"),Llt.forEach(t),Nio=r(Pk," or "),PB=n(Pk,"A",{href:!0});var ylt=s(PB);qio=r(ylt,"DebertaV2TokenizerFast"),ylt.forEach(t),jio=r(Pk," (DeBERTa-v2 model)"),Pk.forEach(t),Dio=i(S),es=n(S,"LI",{});var Bk=s(es);_le=n(Bk,"STRONG",{});var xlt=s(_le);Gio=r(xlt,"distilbert"),xlt.forEach(t),Oio=r(Bk," \u2014 "),BB=n(Bk,"A",{href:!0});var $lt=s(BB);Vio=r($lt,"DistilBertTokenizer"),$lt.forEach(t),Xio=r(Bk," or "),IB=n(Bk,"A",{href:!0});var klt=s(IB);zio=r(klt,"DistilBertTokenizerFast"),klt.forEach(t),Qio=r(Bk," (DistilBERT model)"),Bk.forEach(t),Wio=i(S),os=n(S,"LI",{});var Ik=s(os);ule=n(Ik,"STRONG",{});var Slt=s(ule);Hio=r(Slt,"dpr"),Slt.forEach(t),Uio=r(Ik," \u2014 "),NB=n(Ik,"A",{href:!0});var Rlt=s(NB);Jio=r(Rlt,"DPRQuestionEncoderTokenizer"),Rlt.forEach(t),Yio=r(Ik," or "),qB=n(Ik,"A",{href:!0});var Plt=s(qB);Kio=r(Plt,"DPRQuestionEncoderTokenizerFast"),Plt.forEach(t),Zio=r(Ik," (DPR model)"),Ik.forEach(t),edo=i(S),rs=n(S,"LI",{});var Nk=s(rs);ble=n(Nk,"STRONG",{});var Blt=s(ble);odo=r(Blt,"electra"),Blt.forEach(t),rdo=r(Nk," \u2014 "),jB=n(Nk,"A",{href:!0});var Ilt=s(jB);tdo=r(Ilt,"ElectraTokenizer"),Ilt.forEach(t),ado=r(Nk," or "),DB=n(Nk,"A",{href:!0});var Nlt=s(DB);ndo=r(Nlt,"ElectraTokenizerFast"),Nlt.forEach(t),sdo=r(Nk," (ELECTRA model)"),Nk.forEach(t),ldo=i(S),ih=n(S,"LI",{});var hye=s(ih);vle=n(hye,"STRONG",{});var qlt=s(vle);ido=r(qlt,"flaubert"),qlt.forEach(t),ddo=r(hye," \u2014 "),GB=n(hye,"A",{href:!0});var jlt=s(GB);cdo=r(jlt,"FlaubertTokenizer"),jlt.forEach(t),fdo=r(hye," (FlauBERT model)"),hye.forEach(t),mdo=i(S),ts=n(S,"LI",{});var qk=s(ts);Fle=n(qk,"STRONG",{});var Dlt=s(Fle);gdo=r(Dlt,"fnet"),Dlt.forEach(t),hdo=r(qk," \u2014 "),OB=n(qk,"A",{href:!0});var Glt=s(OB);pdo=r(Glt,"FNetTokenizer"),Glt.forEach(t),_do=r(qk," or "),VB=n(qk,"A",{href:!0});var Olt=s(VB);udo=r(Olt,"FNetTokenizerFast"),Olt.forEach(t),bdo=r(qk," (FNet model)"),qk.forEach(t),vdo=i(S),dh=n(S,"LI",{});var pye=s(dh);Tle=n(pye,"STRONG",{});var Vlt=s(Tle);Fdo=r(Vlt,"fsmt"),Vlt.forEach(t),Tdo=r(pye," \u2014 "),XB=n(pye,"A",{href:!0});var Xlt=s(XB);Mdo=r(Xlt,"FSMTTokenizer"),Xlt.forEach(t),Edo=r(pye," (FairSeq Machine-Translation model)"),pye.forEach(t),Cdo=i(S),as=n(S,"LI",{});var jk=s(as);Mle=n(jk,"STRONG",{});var zlt=s(Mle);wdo=r(zlt,"funnel"),zlt.forEach(t),Ado=r(jk," \u2014 "),zB=n(jk,"A",{href:!0});var Qlt=s(zB);Ldo=r(Qlt,"FunnelTokenizer"),Qlt.forEach(t),ydo=r(jk," or "),QB=n(jk,"A",{href:!0});var Wlt=s(QB);xdo=r(Wlt,"FunnelTokenizerFast"),Wlt.forEach(t),$do=r(jk," (Funnel Transformer model)"),jk.forEach(t),kdo=i(S),ns=n(S,"LI",{});var Dk=s(ns);Ele=n(Dk,"STRONG",{});var Hlt=s(Ele);Sdo=r(Hlt,"gpt2"),Hlt.forEach(t),Rdo=r(Dk," \u2014 "),WB=n(Dk,"A",{href:!0});var Ult=s(WB);Pdo=r(Ult,"GPT2Tokenizer"),Ult.forEach(t),Bdo=r(Dk," or "),HB=n(Dk,"A",{href:!0});var Jlt=s(HB);Ido=r(Jlt,"GPT2TokenizerFast"),Jlt.forEach(t),Ndo=r(Dk," (OpenAI GPT-2 model)"),Dk.forEach(t),qdo=i(S),ss=n(S,"LI",{});var Gk=s(ss);Cle=n(Gk,"STRONG",{});var Ylt=s(Cle);jdo=r(Ylt,"gpt_neo"),Ylt.forEach(t),Ddo=r(Gk," \u2014 "),UB=n(Gk,"A",{href:!0});var Klt=s(UB);Gdo=r(Klt,"GPT2Tokenizer"),Klt.forEach(t),Odo=r(Gk," or "),JB=n(Gk,"A",{href:!0});var Zlt=s(JB);Vdo=r(Zlt,"GPT2TokenizerFast"),Zlt.forEach(t),Xdo=r(Gk," (GPT Neo model)"),Gk.forEach(t),zdo=i(S),ch=n(S,"LI",{});var _ye=s(ch);wle=n(_ye,"STRONG",{});var eit=s(wle);Qdo=r(eit,"gpt_neox"),eit.forEach(t),Wdo=r(_ye," \u2014 "),YB=n(_ye,"A",{href:!0});var oit=s(YB);Hdo=r(oit,"GPTNeoXTokenizerFast"),oit.forEach(t),Udo=r(_ye," (GPT NeoX model)"),_ye.forEach(t),Jdo=i(S),ls=n(S,"LI",{});var Ok=s(ls);Ale=n(Ok,"STRONG",{});var rit=s(Ale);Ydo=r(rit,"gptj"),rit.forEach(t),Kdo=r(Ok," \u2014 "),KB=n(Ok,"A",{href:!0});var tit=s(KB);Zdo=r(tit,"GPT2Tokenizer"),tit.forEach(t),eco=r(Ok," or "),ZB=n(Ok,"A",{href:!0});var ait=s(ZB);oco=r(ait,"GPT2TokenizerFast"),ait.forEach(t),rco=r(Ok," (GPT-J model)"),Ok.forEach(t),tco=i(S),is=n(S,"LI",{});var Vk=s(is);Lle=n(Vk,"STRONG",{});var nit=s(Lle);aco=r(nit,"groupvit"),nit.forEach(t),nco=r(Vk," \u2014 "),eI=n(Vk,"A",{href:!0});var sit=s(eI);sco=r(sit,"CLIPTokenizer"),sit.forEach(t),lco=r(Vk," or "),oI=n(Vk,"A",{href:!0});var lit=s(oI);ico=r(lit,"CLIPTokenizerFast"),lit.forEach(t),dco=r(Vk," (GroupViT model)"),Vk.forEach(t),cco=i(S),ds=n(S,"LI",{});var Xk=s(ds);yle=n(Xk,"STRONG",{});var iit=s(yle);fco=r(iit,"herbert"),iit.forEach(t),mco=r(Xk," \u2014 "),rI=n(Xk,"A",{href:!0});var dit=s(rI);gco=r(dit,"HerbertTokenizer"),dit.forEach(t),hco=r(Xk," or "),tI=n(Xk,"A",{href:!0});var cit=s(tI);pco=r(cit,"HerbertTokenizerFast"),cit.forEach(t),_co=r(Xk," (HerBERT model)"),Xk.forEach(t),uco=i(S),fh=n(S,"LI",{});var uye=s(fh);xle=n(uye,"STRONG",{});var fit=s(xle);bco=r(fit,"hubert"),fit.forEach(t),vco=r(uye," \u2014 "),aI=n(uye,"A",{href:!0});var mit=s(aI);Fco=r(mit,"Wav2Vec2CTCTokenizer"),mit.forEach(t),Tco=r(uye," (Hubert model)"),uye.forEach(t),Mco=i(S),cs=n(S,"LI",{});var zk=s(cs);$le=n(zk,"STRONG",{});var git=s($le);Eco=r(git,"ibert"),git.forEach(t),Cco=r(zk," \u2014 "),nI=n(zk,"A",{href:!0});var hit=s(nI);wco=r(hit,"RobertaTokenizer"),hit.forEach(t),Aco=r(zk," or "),sI=n(zk,"A",{href:!0});var pit=s(sI);Lco=r(pit,"RobertaTokenizerFast"),pit.forEach(t),yco=r(zk," (I-BERT model)"),zk.forEach(t),xco=i(S),fs=n(S,"LI",{});var Qk=s(fs);kle=n(Qk,"STRONG",{});var _it=s(kle);$co=r(_it,"layoutlm"),_it.forEach(t),kco=r(Qk," \u2014 "),lI=n(Qk,"A",{href:!0});var uit=s(lI);Sco=r(uit,"LayoutLMTokenizer"),uit.forEach(t),Rco=r(Qk," or "),iI=n(Qk,"A",{href:!0});var bit=s(iI);Pco=r(bit,"LayoutLMTokenizerFast"),bit.forEach(t),Bco=r(Qk," (LayoutLM model)"),Qk.forEach(t),Ico=i(S),ms=n(S,"LI",{});var Wk=s(ms);Sle=n(Wk,"STRONG",{});var vit=s(Sle);Nco=r(vit,"layoutlmv2"),vit.forEach(t),qco=r(Wk," \u2014 "),dI=n(Wk,"A",{href:!0});var Fit=s(dI);jco=r(Fit,"LayoutLMv2Tokenizer"),Fit.forEach(t),Dco=r(Wk," or "),cI=n(Wk,"A",{href:!0});var Tit=s(cI);Gco=r(Tit,"LayoutLMv2TokenizerFast"),Tit.forEach(t),Oco=r(Wk," (LayoutLMv2 model)"),Wk.forEach(t),Vco=i(S),gs=n(S,"LI",{});var Hk=s(gs);Rle=n(Hk,"STRONG",{});var Mit=s(Rle);Xco=r(Mit,"layoutlmv3"),Mit.forEach(t),zco=r(Hk," \u2014 "),fI=n(Hk,"A",{href:!0});var Eit=s(fI);Qco=r(Eit,"LayoutLMv3Tokenizer"),Eit.forEach(t),Wco=r(Hk," or "),mI=n(Hk,"A",{href:!0});var Cit=s(mI);Hco=r(Cit,"LayoutLMv3TokenizerFast"),Cit.forEach(t),Uco=r(Hk," (LayoutLMv3 model)"),Hk.forEach(t),Jco=i(S),hs=n(S,"LI",{});var Uk=s(hs);Ple=n(Uk,"STRONG",{});var wit=s(Ple);Yco=r(wit,"layoutxlm"),wit.forEach(t),Kco=r(Uk," \u2014 "),gI=n(Uk,"A",{href:!0});var Ait=s(gI);Zco=r(Ait,"LayoutXLMTokenizer"),Ait.forEach(t),efo=r(Uk," or "),hI=n(Uk,"A",{href:!0});var Lit=s(hI);ofo=r(Lit,"LayoutXLMTokenizerFast"),Lit.forEach(t),rfo=r(Uk," (LayoutXLM model)"),Uk.forEach(t),tfo=i(S),ps=n(S,"LI",{});var Jk=s(ps);Ble=n(Jk,"STRONG",{});var yit=s(Ble);afo=r(yit,"led"),yit.forEach(t),nfo=r(Jk," \u2014 "),pI=n(Jk,"A",{href:!0});var xit=s(pI);sfo=r(xit,"LEDTokenizer"),xit.forEach(t),lfo=r(Jk," or "),_I=n(Jk,"A",{href:!0});var $it=s(_I);ifo=r($it,"LEDTokenizerFast"),$it.forEach(t),dfo=r(Jk," (LED model)"),Jk.forEach(t),cfo=i(S),_s=n(S,"LI",{});var Yk=s(_s);Ile=n(Yk,"STRONG",{});var kit=s(Ile);ffo=r(kit,"longformer"),kit.forEach(t),mfo=r(Yk," \u2014 "),uI=n(Yk,"A",{href:!0});var Sit=s(uI);gfo=r(Sit,"LongformerTokenizer"),Sit.forEach(t),hfo=r(Yk," or "),bI=n(Yk,"A",{href:!0});var Rit=s(bI);pfo=r(Rit,"LongformerTokenizerFast"),Rit.forEach(t),_fo=r(Yk," (Longformer model)"),Yk.forEach(t),ufo=i(S),us=n(S,"LI",{});var Kk=s(us);Nle=n(Kk,"STRONG",{});var Pit=s(Nle);bfo=r(Pit,"longt5"),Pit.forEach(t),vfo=r(Kk," \u2014 "),vI=n(Kk,"A",{href:!0});var Bit=s(vI);Ffo=r(Bit,"T5Tokenizer"),Bit.forEach(t),Tfo=r(Kk," or "),FI=n(Kk,"A",{href:!0});var Iit=s(FI);Mfo=r(Iit,"T5TokenizerFast"),Iit.forEach(t),Efo=r(Kk," (LongT5 model)"),Kk.forEach(t),Cfo=i(S),mh=n(S,"LI",{});var bye=s(mh);qle=n(bye,"STRONG",{});var Nit=s(qle);wfo=r(Nit,"luke"),Nit.forEach(t),Afo=r(bye," \u2014 "),TI=n(bye,"A",{href:!0});var qit=s(TI);Lfo=r(qit,"LukeTokenizer"),qit.forEach(t),yfo=r(bye," (LUKE model)"),bye.forEach(t),xfo=i(S),bs=n(S,"LI",{});var Zk=s(bs);jle=n(Zk,"STRONG",{});var jit=s(jle);$fo=r(jit,"lxmert"),jit.forEach(t),kfo=r(Zk," \u2014 "),MI=n(Zk,"A",{href:!0});var Dit=s(MI);Sfo=r(Dit,"LxmertTokenizer"),Dit.forEach(t),Rfo=r(Zk," or "),EI=n(Zk,"A",{href:!0});var Git=s(EI);Pfo=r(Git,"LxmertTokenizerFast"),Git.forEach(t),Bfo=r(Zk," (LXMERT model)"),Zk.forEach(t),Ifo=i(S),gh=n(S,"LI",{});var vye=s(gh);Dle=n(vye,"STRONG",{});var Oit=s(Dle);Nfo=r(Oit,"m2m_100"),Oit.forEach(t),qfo=r(vye," \u2014 "),CI=n(vye,"A",{href:!0});var Vit=s(CI);jfo=r(Vit,"M2M100Tokenizer"),Vit.forEach(t),Dfo=r(vye," (M2M100 model)"),vye.forEach(t),Gfo=i(S),hh=n(S,"LI",{});var Fye=s(hh);Gle=n(Fye,"STRONG",{});var Xit=s(Gle);Ofo=r(Xit,"marian"),Xit.forEach(t),Vfo=r(Fye," \u2014 "),wI=n(Fye,"A",{href:!0});var zit=s(wI);Xfo=r(zit,"MarianTokenizer"),zit.forEach(t),zfo=r(Fye," (Marian model)"),Fye.forEach(t),Qfo=i(S),vs=n(S,"LI",{});var eS=s(vs);Ole=n(eS,"STRONG",{});var Qit=s(Ole);Wfo=r(Qit,"mbart"),Qit.forEach(t),Hfo=r(eS," \u2014 "),AI=n(eS,"A",{href:!0});var Wit=s(AI);Ufo=r(Wit,"MBartTokenizer"),Wit.forEach(t),Jfo=r(eS," or "),LI=n(eS,"A",{href:!0});var Hit=s(LI);Yfo=r(Hit,"MBartTokenizerFast"),Hit.forEach(t),Kfo=r(eS," (mBART model)"),eS.forEach(t),Zfo=i(S),Fs=n(S,"LI",{});var oS=s(Fs);Vle=n(oS,"STRONG",{});var Uit=s(Vle);emo=r(Uit,"mbart50"),Uit.forEach(t),omo=r(oS," \u2014 "),yI=n(oS,"A",{href:!0});var Jit=s(yI);rmo=r(Jit,"MBart50Tokenizer"),Jit.forEach(t),tmo=r(oS," or "),xI=n(oS,"A",{href:!0});var Yit=s(xI);amo=r(Yit,"MBart50TokenizerFast"),Yit.forEach(t),nmo=r(oS," (mBART-50 model)"),oS.forEach(t),smo=i(S),Ts=n(S,"LI",{});var rS=s(Ts);Xle=n(rS,"STRONG",{});var Kit=s(Xle);lmo=r(Kit,"megatron-bert"),Kit.forEach(t),imo=r(rS," \u2014 "),$I=n(rS,"A",{href:!0});var Zit=s($I);dmo=r(Zit,"BertTokenizer"),Zit.forEach(t),cmo=r(rS," or "),kI=n(rS,"A",{href:!0});var edt=s(kI);fmo=r(edt,"BertTokenizerFast"),edt.forEach(t),mmo=r(rS," (Megatron-BERT model)"),rS.forEach(t),gmo=i(S),ph=n(S,"LI",{});var Tye=s(ph);zle=n(Tye,"STRONG",{});var odt=s(zle);hmo=r(odt,"mluke"),odt.forEach(t),pmo=r(Tye," \u2014 "),SI=n(Tye,"A",{href:!0});var rdt=s(SI);_mo=r(rdt,"MLukeTokenizer"),rdt.forEach(t),umo=r(Tye," (mLUKE model)"),Tye.forEach(t),bmo=i(S),Ms=n(S,"LI",{});var tS=s(Ms);Qle=n(tS,"STRONG",{});var tdt=s(Qle);vmo=r(tdt,"mobilebert"),tdt.forEach(t),Fmo=r(tS," \u2014 "),RI=n(tS,"A",{href:!0});var adt=s(RI);Tmo=r(adt,"MobileBertTokenizer"),adt.forEach(t),Mmo=r(tS," or "),PI=n(tS,"A",{href:!0});var ndt=s(PI);Emo=r(ndt,"MobileBertTokenizerFast"),ndt.forEach(t),Cmo=r(tS," (MobileBERT model)"),tS.forEach(t),wmo=i(S),Es=n(S,"LI",{});var aS=s(Es);Wle=n(aS,"STRONG",{});var sdt=s(Wle);Amo=r(sdt,"mpnet"),sdt.forEach(t),Lmo=r(aS," \u2014 "),BI=n(aS,"A",{href:!0});var ldt=s(BI);ymo=r(ldt,"MPNetTokenizer"),ldt.forEach(t),xmo=r(aS," or "),II=n(aS,"A",{href:!0});var idt=s(II);$mo=r(idt,"MPNetTokenizerFast"),idt.forEach(t),kmo=r(aS," (MPNet model)"),aS.forEach(t),Smo=i(S),Cs=n(S,"LI",{});var nS=s(Cs);Hle=n(nS,"STRONG",{});var ddt=s(Hle);Rmo=r(ddt,"mt5"),ddt.forEach(t),Pmo=r(nS," \u2014 "),NI=n(nS,"A",{href:!0});var cdt=s(NI);Bmo=r(cdt,"MT5Tokenizer"),cdt.forEach(t),Imo=r(nS," or "),qI=n(nS,"A",{href:!0});var fdt=s(qI);Nmo=r(fdt,"MT5TokenizerFast"),fdt.forEach(t),qmo=r(nS," (MT5 model)"),nS.forEach(t),jmo=i(S),ws=n(S,"LI",{});var sS=s(ws);Ule=n(sS,"STRONG",{});var mdt=s(Ule);Dmo=r(mdt,"mvp"),mdt.forEach(t),Gmo=r(sS," \u2014 "),jI=n(sS,"A",{href:!0});var gdt=s(jI);Omo=r(gdt,"MvpTokenizer"),gdt.forEach(t),Vmo=r(sS," or "),DI=n(sS,"A",{href:!0});var hdt=s(DI);Xmo=r(hdt,"MvpTokenizerFast"),hdt.forEach(t),zmo=r(sS," (MVP model)"),sS.forEach(t),Qmo=i(S),As=n(S,"LI",{});var lS=s(As);Jle=n(lS,"STRONG",{});var pdt=s(Jle);Wmo=r(pdt,"nezha"),pdt.forEach(t),Hmo=r(lS," \u2014 "),GI=n(lS,"A",{href:!0});var _dt=s(GI);Umo=r(_dt,"BertTokenizer"),_dt.forEach(t),Jmo=r(lS," or "),OI=n(lS,"A",{href:!0});var udt=s(OI);Ymo=r(udt,"BertTokenizerFast"),udt.forEach(t),Kmo=r(lS," (Nezha model)"),lS.forEach(t),Zmo=i(S),Ls=n(S,"LI",{});var iS=s(Ls);Yle=n(iS,"STRONG",{});var bdt=s(Yle);ego=r(bdt,"nystromformer"),bdt.forEach(t),ogo=r(iS," \u2014 "),VI=n(iS,"A",{href:!0});var vdt=s(VI);rgo=r(vdt,"AlbertTokenizer"),vdt.forEach(t),tgo=r(iS," or "),XI=n(iS,"A",{href:!0});var Fdt=s(XI);ago=r(Fdt,"AlbertTokenizerFast"),Fdt.forEach(t),ngo=r(iS," (Nystr\xF6mformer model)"),iS.forEach(t),sgo=i(S),ys=n(S,"LI",{});var dS=s(ys);Kle=n(dS,"STRONG",{});var Tdt=s(Kle);lgo=r(Tdt,"openai-gpt"),Tdt.forEach(t),igo=r(dS," \u2014 "),zI=n(dS,"A",{href:!0});var Mdt=s(zI);dgo=r(Mdt,"OpenAIGPTTokenizer"),Mdt.forEach(t),cgo=r(dS," or "),QI=n(dS,"A",{href:!0});var Edt=s(QI);fgo=r(Edt,"OpenAIGPTTokenizerFast"),Edt.forEach(t),mgo=r(dS," (OpenAI GPT model)"),dS.forEach(t),ggo=i(S),_h=n(S,"LI",{});var Mye=s(_h);Zle=n(Mye,"STRONG",{});var Cdt=s(Zle);hgo=r(Cdt,"opt"),Cdt.forEach(t),pgo=r(Mye," \u2014 "),WI=n(Mye,"A",{href:!0});var wdt=s(WI);_go=r(wdt,"GPT2Tokenizer"),wdt.forEach(t),ugo=r(Mye," (OPT model)"),Mye.forEach(t),bgo=i(S),xs=n(S,"LI",{});var cS=s(xs);eie=n(cS,"STRONG",{});var Adt=s(eie);vgo=r(Adt,"pegasus"),Adt.forEach(t),Fgo=r(cS," \u2014 "),HI=n(cS,"A",{href:!0});var Ldt=s(HI);Tgo=r(Ldt,"PegasusTokenizer"),Ldt.forEach(t),Mgo=r(cS," or "),UI=n(cS,"A",{href:!0});var ydt=s(UI);Ego=r(ydt,"PegasusTokenizerFast"),ydt.forEach(t),Cgo=r(cS," (Pegasus model)"),cS.forEach(t),wgo=i(S),uh=n(S,"LI",{});var Eye=s(uh);oie=n(Eye,"STRONG",{});var xdt=s(oie);Ago=r(xdt,"perceiver"),xdt.forEach(t),Lgo=r(Eye," \u2014 "),JI=n(Eye,"A",{href:!0});var $dt=s(JI);ygo=r($dt,"PerceiverTokenizer"),$dt.forEach(t),xgo=r(Eye," (Perceiver model)"),Eye.forEach(t),$go=i(S),bh=n(S,"LI",{});var Cye=s(bh);rie=n(Cye,"STRONG",{});var kdt=s(rie);kgo=r(kdt,"phobert"),kdt.forEach(t),Sgo=r(Cye," \u2014 "),YI=n(Cye,"A",{href:!0});var Sdt=s(YI);Rgo=r(Sdt,"PhobertTokenizer"),Sdt.forEach(t),Pgo=r(Cye," (PhoBERT model)"),Cye.forEach(t),Bgo=i(S),vh=n(S,"LI",{});var wye=s(vh);tie=n(wye,"STRONG",{});var Rdt=s(tie);Igo=r(Rdt,"plbart"),Rdt.forEach(t),Ngo=r(wye," \u2014 "),KI=n(wye,"A",{href:!0});var Pdt=s(KI);qgo=r(Pdt,"PLBartTokenizer"),Pdt.forEach(t),jgo=r(wye," (PLBart model)"),wye.forEach(t),Dgo=i(S),Fh=n(S,"LI",{});var Aye=s(Fh);aie=n(Aye,"STRONG",{});var Bdt=s(aie);Ggo=r(Bdt,"prophetnet"),Bdt.forEach(t),Ogo=r(Aye," \u2014 "),ZI=n(Aye,"A",{href:!0});var Idt=s(ZI);Vgo=r(Idt,"ProphetNetTokenizer"),Idt.forEach(t),Xgo=r(Aye," (ProphetNet model)"),Aye.forEach(t),zgo=i(S),$s=n(S,"LI",{});var fS=s($s);nie=n(fS,"STRONG",{});var Ndt=s(nie);Qgo=r(Ndt,"qdqbert"),Ndt.forEach(t),Wgo=r(fS," \u2014 "),eN=n(fS,"A",{href:!0});var qdt=s(eN);Hgo=r(qdt,"BertTokenizer"),qdt.forEach(t),Ugo=r(fS," or "),oN=n(fS,"A",{href:!0});var jdt=s(oN);Jgo=r(jdt,"BertTokenizerFast"),jdt.forEach(t),Ygo=r(fS," (QDQBert model)"),fS.forEach(t),Kgo=i(S),Th=n(S,"LI",{});var Lye=s(Th);sie=n(Lye,"STRONG",{});var Ddt=s(sie);Zgo=r(Ddt,"rag"),Ddt.forEach(t),eho=r(Lye," \u2014 "),rN=n(Lye,"A",{href:!0});var Gdt=s(rN);oho=r(Gdt,"RagTokenizer"),Gdt.forEach(t),rho=r(Lye," (RAG model)"),Lye.forEach(t),tho=i(S),ks=n(S,"LI",{});var mS=s(ks);lie=n(mS,"STRONG",{});var Odt=s(lie);aho=r(Odt,"realm"),Odt.forEach(t),nho=r(mS," \u2014 "),tN=n(mS,"A",{href:!0});var Vdt=s(tN);sho=r(Vdt,"RealmTokenizer"),Vdt.forEach(t),lho=r(mS," or "),aN=n(mS,"A",{href:!0});var Xdt=s(aN);iho=r(Xdt,"RealmTokenizerFast"),Xdt.forEach(t),dho=r(mS," (REALM model)"),mS.forEach(t),cho=i(S),Ss=n(S,"LI",{});var gS=s(Ss);iie=n(gS,"STRONG",{});var zdt=s(iie);fho=r(zdt,"reformer"),zdt.forEach(t),mho=r(gS," \u2014 "),nN=n(gS,"A",{href:!0});var Qdt=s(nN);gho=r(Qdt,"ReformerTokenizer"),Qdt.forEach(t),hho=r(gS," or "),sN=n(gS,"A",{href:!0});var Wdt=s(sN);pho=r(Wdt,"ReformerTokenizerFast"),Wdt.forEach(t),_ho=r(gS," (Reformer model)"),gS.forEach(t),uho=i(S),Rs=n(S,"LI",{});var hS=s(Rs);die=n(hS,"STRONG",{});var Hdt=s(die);bho=r(Hdt,"rembert"),Hdt.forEach(t),vho=r(hS," \u2014 "),lN=n(hS,"A",{href:!0});var Udt=s(lN);Fho=r(Udt,"RemBertTokenizer"),Udt.forEach(t),Tho=r(hS," or "),iN=n(hS,"A",{href:!0});var Jdt=s(iN);Mho=r(Jdt,"RemBertTokenizerFast"),Jdt.forEach(t),Eho=r(hS," (RemBERT model)"),hS.forEach(t),Cho=i(S),Ps=n(S,"LI",{});var pS=s(Ps);cie=n(pS,"STRONG",{});var Ydt=s(cie);who=r(Ydt,"retribert"),Ydt.forEach(t),Aho=r(pS," \u2014 "),dN=n(pS,"A",{href:!0});var Kdt=s(dN);Lho=r(Kdt,"RetriBertTokenizer"),Kdt.forEach(t),yho=r(pS," or "),cN=n(pS,"A",{href:!0});var Zdt=s(cN);xho=r(Zdt,"RetriBertTokenizerFast"),Zdt.forEach(t),$ho=r(pS," (RetriBERT model)"),pS.forEach(t),kho=i(S),Bs=n(S,"LI",{});var _S=s(Bs);fie=n(_S,"STRONG",{});var ect=s(fie);Sho=r(ect,"roberta"),ect.forEach(t),Rho=r(_S," \u2014 "),fN=n(_S,"A",{href:!0});var oct=s(fN);Pho=r(oct,"RobertaTokenizer"),oct.forEach(t),Bho=r(_S," or "),mN=n(_S,"A",{href:!0});var rct=s(mN);Iho=r(rct,"RobertaTokenizerFast"),rct.forEach(t),Nho=r(_S," (RoBERTa model)"),_S.forEach(t),qho=i(S),Is=n(S,"LI",{});var uS=s(Is);mie=n(uS,"STRONG",{});var tct=s(mie);jho=r(tct,"roformer"),tct.forEach(t),Dho=r(uS," \u2014 "),gN=n(uS,"A",{href:!0});var act=s(gN);Gho=r(act,"RoFormerTokenizer"),act.forEach(t),Oho=r(uS," or "),hN=n(uS,"A",{href:!0});var nct=s(hN);Vho=r(nct,"RoFormerTokenizerFast"),nct.forEach(t),Xho=r(uS," (RoFormer model)"),uS.forEach(t),zho=i(S),Mh=n(S,"LI",{});var yye=s(Mh);gie=n(yye,"STRONG",{});var sct=s(gie);Qho=r(sct,"speech_to_text"),sct.forEach(t),Who=r(yye," \u2014 "),pN=n(yye,"A",{href:!0});var lct=s(pN);Hho=r(lct,"Speech2TextTokenizer"),lct.forEach(t),Uho=r(yye," (Speech2Text model)"),yye.forEach(t),Jho=i(S),Eh=n(S,"LI",{});var xye=s(Eh);hie=n(xye,"STRONG",{});var ict=s(hie);Yho=r(ict,"speech_to_text_2"),ict.forEach(t),Kho=r(xye," \u2014 "),_N=n(xye,"A",{href:!0});var dct=s(_N);Zho=r(dct,"Speech2Text2Tokenizer"),dct.forEach(t),epo=r(xye," (Speech2Text2 model)"),xye.forEach(t),opo=i(S),Ns=n(S,"LI",{});var bS=s(Ns);pie=n(bS,"STRONG",{});var cct=s(pie);rpo=r(cct,"splinter"),cct.forEach(t),tpo=r(bS," \u2014 "),uN=n(bS,"A",{href:!0});var fct=s(uN);apo=r(fct,"SplinterTokenizer"),fct.forEach(t),npo=r(bS," or "),bN=n(bS,"A",{href:!0});var mct=s(bN);spo=r(mct,"SplinterTokenizerFast"),mct.forEach(t),lpo=r(bS," (Splinter model)"),bS.forEach(t),ipo=i(S),qs=n(S,"LI",{});var vS=s(qs);_ie=n(vS,"STRONG",{});var gct=s(_ie);dpo=r(gct,"squeezebert"),gct.forEach(t),cpo=r(vS," \u2014 "),vN=n(vS,"A",{href:!0});var hct=s(vN);fpo=r(hct,"SqueezeBertTokenizer"),hct.forEach(t),mpo=r(vS," or "),FN=n(vS,"A",{href:!0});var pct=s(FN);gpo=r(pct,"SqueezeBertTokenizerFast"),pct.forEach(t),hpo=r(vS," (SqueezeBERT model)"),vS.forEach(t),ppo=i(S),js=n(S,"LI",{});var FS=s(js);uie=n(FS,"STRONG",{});var _ct=s(uie);_po=r(_ct,"t5"),_ct.forEach(t),upo=r(FS," \u2014 "),TN=n(FS,"A",{href:!0});var uct=s(TN);bpo=r(uct,"T5Tokenizer"),uct.forEach(t),vpo=r(FS," or "),MN=n(FS,"A",{href:!0});var bct=s(MN);Fpo=r(bct,"T5TokenizerFast"),bct.forEach(t),Tpo=r(FS," (T5 model)"),FS.forEach(t),Mpo=i(S),Ch=n(S,"LI",{});var $ye=s(Ch);bie=n($ye,"STRONG",{});var vct=s(bie);Epo=r(vct,"tapas"),vct.forEach(t),Cpo=r($ye," \u2014 "),EN=n($ye,"A",{href:!0});var Fct=s(EN);wpo=r(Fct,"TapasTokenizer"),Fct.forEach(t),Apo=r($ye," (TAPAS model)"),$ye.forEach(t),Lpo=i(S),wh=n(S,"LI",{});var kye=s(wh);vie=n(kye,"STRONG",{});var Tct=s(vie);ypo=r(Tct,"tapex"),Tct.forEach(t),xpo=r(kye," \u2014 "),CN=n(kye,"A",{href:!0});var Mct=s(CN);$po=r(Mct,"TapexTokenizer"),Mct.forEach(t),kpo=r(kye," (TAPEX model)"),kye.forEach(t),Spo=i(S),Ah=n(S,"LI",{});var Sye=s(Ah);Fie=n(Sye,"STRONG",{});var Ect=s(Fie);Rpo=r(Ect,"transfo-xl"),Ect.forEach(t),Ppo=r(Sye," \u2014 "),wN=n(Sye,"A",{href:!0});var Cct=s(wN);Bpo=r(Cct,"TransfoXLTokenizer"),Cct.forEach(t),Ipo=r(Sye," (Transformer-XL model)"),Sye.forEach(t),Npo=i(S),Ds=n(S,"LI",{});var TS=s(Ds);Tie=n(TS,"STRONG",{});var wct=s(Tie);qpo=r(wct,"vilt"),wct.forEach(t),jpo=r(TS," \u2014 "),AN=n(TS,"A",{href:!0});var Act=s(AN);Dpo=r(Act,"BertTokenizer"),Act.forEach(t),Gpo=r(TS," or "),LN=n(TS,"A",{href:!0});var Lct=s(LN);Opo=r(Lct,"BertTokenizerFast"),Lct.forEach(t),Vpo=r(TS," (ViLT model)"),TS.forEach(t),Xpo=i(S),Gs=n(S,"LI",{});var MS=s(Gs);Mie=n(MS,"STRONG",{});var yct=s(Mie);zpo=r(yct,"visual_bert"),yct.forEach(t),Qpo=r(MS," \u2014 "),yN=n(MS,"A",{href:!0});var xct=s(yN);Wpo=r(xct,"BertTokenizer"),xct.forEach(t),Hpo=r(MS," or "),xN=n(MS,"A",{href:!0});var $ct=s(xN);Upo=r($ct,"BertTokenizerFast"),$ct.forEach(t),Jpo=r(MS," (VisualBERT model)"),MS.forEach(t),Ypo=i(S),Lh=n(S,"LI",{});var Rye=s(Lh);Eie=n(Rye,"STRONG",{});var kct=s(Eie);Kpo=r(kct,"wav2vec2"),kct.forEach(t),Zpo=r(Rye," \u2014 "),$N=n(Rye,"A",{href:!0});var Sct=s($N);e_o=r(Sct,"Wav2Vec2CTCTokenizer"),Sct.forEach(t),o_o=r(Rye," (Wav2Vec2 model)"),Rye.forEach(t),r_o=i(S),yh=n(S,"LI",{});var Pye=s(yh);Cie=n(Pye,"STRONG",{});var Rct=s(Cie);t_o=r(Rct,"wav2vec2-conformer"),Rct.forEach(t),a_o=r(Pye," \u2014 "),kN=n(Pye,"A",{href:!0});var Pct=s(kN);n_o=r(Pct,"Wav2Vec2CTCTokenizer"),Pct.forEach(t),s_o=r(Pye," (Wav2Vec2-Conformer model)"),Pye.forEach(t),l_o=i(S),xh=n(S,"LI",{});var Bye=s(xh);wie=n(Bye,"STRONG",{});var Bct=s(wie);i_o=r(Bct,"wav2vec2_phoneme"),Bct.forEach(t),d_o=r(Bye," \u2014 "),SN=n(Bye,"A",{href:!0});var Ict=s(SN);c_o=r(Ict,"Wav2Vec2PhonemeCTCTokenizer"),Ict.forEach(t),f_o=r(Bye," (Wav2Vec2Phoneme model)"),Bye.forEach(t),m_o=i(S),Os=n(S,"LI",{});var ES=s(Os);Aie=n(ES,"STRONG",{});var Nct=s(Aie);g_o=r(Nct,"xglm"),Nct.forEach(t),h_o=r(ES," \u2014 "),RN=n(ES,"A",{href:!0});var qct=s(RN);p_o=r(qct,"XGLMTokenizer"),qct.forEach(t),__o=r(ES," or "),PN=n(ES,"A",{href:!0});var jct=s(PN);u_o=r(jct,"XGLMTokenizerFast"),jct.forEach(t),b_o=r(ES," (XGLM model)"),ES.forEach(t),v_o=i(S),$h=n(S,"LI",{});var Iye=s($h);Lie=n(Iye,"STRONG",{});var Dct=s(Lie);F_o=r(Dct,"xlm"),Dct.forEach(t),T_o=r(Iye," \u2014 "),BN=n(Iye,"A",{href:!0});var Gct=s(BN);M_o=r(Gct,"XLMTokenizer"),Gct.forEach(t),E_o=r(Iye," (XLM model)"),Iye.forEach(t),C_o=i(S),kh=n(S,"LI",{});var Nye=s(kh);yie=n(Nye,"STRONG",{});var Oct=s(yie);w_o=r(Oct,"xlm-prophetnet"),Oct.forEach(t),A_o=r(Nye," \u2014 "),IN=n(Nye,"A",{href:!0});var Vct=s(IN);L_o=r(Vct,"XLMProphetNetTokenizer"),Vct.forEach(t),y_o=r(Nye," (XLM-ProphetNet model)"),Nye.forEach(t),x_o=i(S),Vs=n(S,"LI",{});var CS=s(Vs);xie=n(CS,"STRONG",{});var Xct=s(xie);$_o=r(Xct,"xlm-roberta"),Xct.forEach(t),k_o=r(CS," \u2014 "),NN=n(CS,"A",{href:!0});var zct=s(NN);S_o=r(zct,"XLMRobertaTokenizer"),zct.forEach(t),R_o=r(CS," or "),qN=n(CS,"A",{href:!0});var Qct=s(qN);P_o=r(Qct,"XLMRobertaTokenizerFast"),Qct.forEach(t),B_o=r(CS," (XLM-RoBERTa model)"),CS.forEach(t),I_o=i(S),Xs=n(S,"LI",{});var wS=s(Xs);$ie=n(wS,"STRONG",{});var Wct=s($ie);N_o=r(Wct,"xlm-roberta-xl"),Wct.forEach(t),q_o=r(wS," \u2014 "),jN=n(wS,"A",{href:!0});var Hct=s(jN);j_o=r(Hct,"RobertaTokenizer"),Hct.forEach(t),D_o=r(wS," or "),DN=n(wS,"A",{href:!0});var Uct=s(DN);G_o=r(Uct,"RobertaTokenizerFast"),Uct.forEach(t),O_o=r(wS," (XLM-RoBERTa-XL model)"),wS.forEach(t),V_o=i(S),zs=n(S,"LI",{});var AS=s(zs);kie=n(AS,"STRONG",{});var Jct=s(kie);X_o=r(Jct,"xlnet"),Jct.forEach(t),z_o=r(AS," \u2014 "),GN=n(AS,"A",{href:!0});var Yct=s(GN);Q_o=r(Yct,"XLNetTokenizer"),Yct.forEach(t),W_o=r(AS," or "),ON=n(AS,"A",{href:!0});var Kct=s(ON);H_o=r(Kct,"XLNetTokenizerFast"),Kct.forEach(t),U_o=r(AS," (XLNet model)"),AS.forEach(t),J_o=i(S),Qs=n(S,"LI",{});var LS=s(Qs);Sie=n(LS,"STRONG",{});var Zct=s(Sie);Y_o=r(Zct,"yoso"),Zct.forEach(t),K_o=r(LS," \u2014 "),VN=n(LS,"A",{href:!0});var eft=s(VN);Z_o=r(eft,"AlbertTokenizer"),eft.forEach(t),euo=r(LS," or "),XN=n(LS,"A",{href:!0});var oft=s(XN);ouo=r(oft,"AlbertTokenizerFast"),oft.forEach(t),ruo=r(LS," (YOSO model)"),LS.forEach(t),S.forEach(t),tuo=i(Ks),T(Sh.$$.fragment,Ks),Ks.forEach(t),auo=i(Ys),Rh=n(Ys,"DIV",{class:!0});var Kze=s(Rh);T(pL.$$.fragment,Kze),nuo=i(Kze),Rie=n(Kze,"P",{});var rft=s(Rie);suo=r(rft,"Register a new tokenizer in this mapping."),rft.forEach(t),Kze.forEach(t),Ys.forEach(t),YVe=i(f),Ni=n(f,"H2",{class:!0});var Zze=s(Ni);Ph=n(Zze,"A",{id:!0,class:!0,href:!0});var tft=s(Ph);Pie=n(tft,"SPAN",{});var aft=s(Pie);T(_L.$$.fragment,aft),aft.forEach(t),tft.forEach(t),luo=i(Zze),Bie=n(Zze,"SPAN",{});var nft=s(Bie);iuo=r(nft,"AutoFeatureExtractor"),nft.forEach(t),Zze.forEach(t),KVe=i(f),Lo=n(f,"DIV",{class:!0});var Zs=s(Lo);T(uL.$$.fragment,Zs),duo=i(Zs),bL=n(Zs,"P",{});var eQe=s(bL);cuo=r(eQe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),zN=n(eQe,"A",{href:!0});var sft=s(zN);fuo=r(sft,"AutoFeatureExtractor.from_pretrained()"),sft.forEach(t),muo=r(eQe," class method."),eQe.forEach(t),guo=i(Zs),vL=n(Zs,"P",{});var oQe=s(vL);huo=r(oQe,"This class cannot be instantiated directly using "),Iie=n(oQe,"CODE",{});var lft=s(Iie);puo=r(lft,"__init__()"),lft.forEach(t),_uo=r(oQe," (throws an error)."),oQe.forEach(t),uuo=i(Zs),He=n(Zs,"DIV",{class:!0});var aa=s(He);T(FL.$$.fragment,aa),buo=i(aa),Nie=n(aa,"P",{});var ift=s(Nie);vuo=r(ift,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),ift.forEach(t),Fuo=i(aa),Ba=n(aa,"P",{});var nA=s(Ba);Tuo=r(nA,"The feature extractor class to instantiate is selected based on the "),qie=n(nA,"CODE",{});var dft=s(qie);Muo=r(dft,"model_type"),dft.forEach(t),Euo=r(nA,` property of the config object
(either passed as an argument or loaded from `),jie=n(nA,"CODE",{});var cft=s(jie);Cuo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),wuo=r(nA,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Die=n(nA,"CODE",{});var fft=s(Die);Auo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),Luo=r(nA,":"),nA.forEach(t),yuo=i(aa),Y=n(aa,"UL",{});var K=s(Y);Bh=n(K,"LI",{});var qye=s(Bh);Gie=n(qye,"STRONG",{});var mft=s(Gie);xuo=r(mft,"beit"),mft.forEach(t),$uo=r(qye," \u2014 "),QN=n(qye,"A",{href:!0});var gft=s(QN);kuo=r(gft,"BeitFeatureExtractor"),gft.forEach(t),Suo=r(qye," (BEiT model)"),qye.forEach(t),Ruo=i(K),Ih=n(K,"LI",{});var jye=s(Ih);Oie=n(jye,"STRONG",{});var hft=s(Oie);Puo=r(hft,"clip"),hft.forEach(t),Buo=r(jye," \u2014 "),WN=n(jye,"A",{href:!0});var pft=s(WN);Iuo=r(pft,"CLIPFeatureExtractor"),pft.forEach(t),Nuo=r(jye," (CLIP model)"),jye.forEach(t),quo=i(K),Nh=n(K,"LI",{});var Dye=s(Nh);Vie=n(Dye,"STRONG",{});var _ft=s(Vie);juo=r(_ft,"convnext"),_ft.forEach(t),Duo=r(Dye," \u2014 "),HN=n(Dye,"A",{href:!0});var uft=s(HN);Guo=r(uft,"ConvNextFeatureExtractor"),uft.forEach(t),Ouo=r(Dye," (ConvNeXT model)"),Dye.forEach(t),Vuo=i(K),qh=n(K,"LI",{});var Gye=s(qh);Xie=n(Gye,"STRONG",{});var bft=s(Xie);Xuo=r(bft,"cvt"),bft.forEach(t),zuo=r(Gye," \u2014 "),UN=n(Gye,"A",{href:!0});var vft=s(UN);Quo=r(vft,"ConvNextFeatureExtractor"),vft.forEach(t),Wuo=r(Gye," (CvT model)"),Gye.forEach(t),Huo=i(K),jh=n(K,"LI",{});var Oye=s(jh);zie=n(Oye,"STRONG",{});var Fft=s(zie);Uuo=r(Fft,"data2vec-audio"),Fft.forEach(t),Juo=r(Oye," \u2014 "),JN=n(Oye,"A",{href:!0});var Tft=s(JN);Yuo=r(Tft,"Wav2Vec2FeatureExtractor"),Tft.forEach(t),Kuo=r(Oye," (Data2VecAudio model)"),Oye.forEach(t),Zuo=i(K),Dh=n(K,"LI",{});var Vye=s(Dh);Qie=n(Vye,"STRONG",{});var Mft=s(Qie);e2o=r(Mft,"data2vec-vision"),Mft.forEach(t),o2o=r(Vye," \u2014 "),YN=n(Vye,"A",{href:!0});var Eft=s(YN);r2o=r(Eft,"BeitFeatureExtractor"),Eft.forEach(t),t2o=r(Vye," (Data2VecVision model)"),Vye.forEach(t),a2o=i(K),Gh=n(K,"LI",{});var Xye=s(Gh);Wie=n(Xye,"STRONG",{});var Cft=s(Wie);n2o=r(Cft,"deit"),Cft.forEach(t),s2o=r(Xye," \u2014 "),KN=n(Xye,"A",{href:!0});var wft=s(KN);l2o=r(wft,"DeiTFeatureExtractor"),wft.forEach(t),i2o=r(Xye," (DeiT model)"),Xye.forEach(t),d2o=i(K),Oh=n(K,"LI",{});var zye=s(Oh);Hie=n(zye,"STRONG",{});var Aft=s(Hie);c2o=r(Aft,"detr"),Aft.forEach(t),f2o=r(zye," \u2014 "),ZN=n(zye,"A",{href:!0});var Lft=s(ZN);m2o=r(Lft,"DetrFeatureExtractor"),Lft.forEach(t),g2o=r(zye," (DETR model)"),zye.forEach(t),h2o=i(K),Vh=n(K,"LI",{});var Qye=s(Vh);Uie=n(Qye,"STRONG",{});var yft=s(Uie);p2o=r(yft,"dpt"),yft.forEach(t),_2o=r(Qye," \u2014 "),eq=n(Qye,"A",{href:!0});var xft=s(eq);u2o=r(xft,"DPTFeatureExtractor"),xft.forEach(t),b2o=r(Qye," (DPT model)"),Qye.forEach(t),v2o=i(K),Xh=n(K,"LI",{});var Wye=s(Xh);Jie=n(Wye,"STRONG",{});var $ft=s(Jie);F2o=r($ft,"flava"),$ft.forEach(t),T2o=r(Wye," \u2014 "),oq=n(Wye,"A",{href:!0});var kft=s(oq);M2o=r(kft,"FlavaFeatureExtractor"),kft.forEach(t),E2o=r(Wye," (FLAVA model)"),Wye.forEach(t),C2o=i(K),zh=n(K,"LI",{});var Hye=s(zh);Yie=n(Hye,"STRONG",{});var Sft=s(Yie);w2o=r(Sft,"glpn"),Sft.forEach(t),A2o=r(Hye," \u2014 "),rq=n(Hye,"A",{href:!0});var Rft=s(rq);L2o=r(Rft,"GLPNFeatureExtractor"),Rft.forEach(t),y2o=r(Hye," (GLPN model)"),Hye.forEach(t),x2o=i(K),Qh=n(K,"LI",{});var Uye=s(Qh);Kie=n(Uye,"STRONG",{});var Pft=s(Kie);$2o=r(Pft,"groupvit"),Pft.forEach(t),k2o=r(Uye," \u2014 "),tq=n(Uye,"A",{href:!0});var Bft=s(tq);S2o=r(Bft,"CLIPFeatureExtractor"),Bft.forEach(t),R2o=r(Uye," (GroupViT model)"),Uye.forEach(t),P2o=i(K),Wh=n(K,"LI",{});var Jye=s(Wh);Zie=n(Jye,"STRONG",{});var Ift=s(Zie);B2o=r(Ift,"hubert"),Ift.forEach(t),I2o=r(Jye," \u2014 "),aq=n(Jye,"A",{href:!0});var Nft=s(aq);N2o=r(Nft,"Wav2Vec2FeatureExtractor"),Nft.forEach(t),q2o=r(Jye," (Hubert model)"),Jye.forEach(t),j2o=i(K),Hh=n(K,"LI",{});var Yye=s(Hh);ede=n(Yye,"STRONG",{});var qft=s(ede);D2o=r(qft,"imagegpt"),qft.forEach(t),G2o=r(Yye," \u2014 "),nq=n(Yye,"A",{href:!0});var jft=s(nq);O2o=r(jft,"ImageGPTFeatureExtractor"),jft.forEach(t),V2o=r(Yye," (ImageGPT model)"),Yye.forEach(t),X2o=i(K),Uh=n(K,"LI",{});var Kye=s(Uh);ode=n(Kye,"STRONG",{});var Dft=s(ode);z2o=r(Dft,"layoutlmv2"),Dft.forEach(t),Q2o=r(Kye," \u2014 "),sq=n(Kye,"A",{href:!0});var Gft=s(sq);W2o=r(Gft,"LayoutLMv2FeatureExtractor"),Gft.forEach(t),H2o=r(Kye," (LayoutLMv2 model)"),Kye.forEach(t),U2o=i(K),Jh=n(K,"LI",{});var Zye=s(Jh);rde=n(Zye,"STRONG",{});var Oft=s(rde);J2o=r(Oft,"layoutlmv3"),Oft.forEach(t),Y2o=r(Zye," \u2014 "),lq=n(Zye,"A",{href:!0});var Vft=s(lq);K2o=r(Vft,"LayoutLMv3FeatureExtractor"),Vft.forEach(t),Z2o=r(Zye," (LayoutLMv3 model)"),Zye.forEach(t),e1o=i(K),Yh=n(K,"LI",{});var e8e=s(Yh);tde=n(e8e,"STRONG",{});var Xft=s(tde);o1o=r(Xft,"levit"),Xft.forEach(t),r1o=r(e8e," \u2014 "),iq=n(e8e,"A",{href:!0});var zft=s(iq);t1o=r(zft,"LevitFeatureExtractor"),zft.forEach(t),a1o=r(e8e," (LeViT model)"),e8e.forEach(t),n1o=i(K),Kh=n(K,"LI",{});var o8e=s(Kh);ade=n(o8e,"STRONG",{});var Qft=s(ade);s1o=r(Qft,"maskformer"),Qft.forEach(t),l1o=r(o8e," \u2014 "),dq=n(o8e,"A",{href:!0});var Wft=s(dq);i1o=r(Wft,"MaskFormerFeatureExtractor"),Wft.forEach(t),d1o=r(o8e," (MaskFormer model)"),o8e.forEach(t),c1o=i(K),Zh=n(K,"LI",{});var r8e=s(Zh);nde=n(r8e,"STRONG",{});var Hft=s(nde);f1o=r(Hft,"mctct"),Hft.forEach(t),m1o=r(r8e," \u2014 "),cq=n(r8e,"A",{href:!0});var Uft=s(cq);g1o=r(Uft,"MCTCTFeatureExtractor"),Uft.forEach(t),h1o=r(r8e," (M-CTC-T model)"),r8e.forEach(t),p1o=i(K),ep=n(K,"LI",{});var t8e=s(ep);sde=n(t8e,"STRONG",{});var Jft=s(sde);_1o=r(Jft,"mobilevit"),Jft.forEach(t),u1o=r(t8e," \u2014 "),fq=n(t8e,"A",{href:!0});var Yft=s(fq);b1o=r(Yft,"MobileViTFeatureExtractor"),Yft.forEach(t),v1o=r(t8e," (MobileViT model)"),t8e.forEach(t),F1o=i(K),op=n(K,"LI",{});var a8e=s(op);lde=n(a8e,"STRONG",{});var Kft=s(lde);T1o=r(Kft,"perceiver"),Kft.forEach(t),M1o=r(a8e," \u2014 "),mq=n(a8e,"A",{href:!0});var Zft=s(mq);E1o=r(Zft,"PerceiverFeatureExtractor"),Zft.forEach(t),C1o=r(a8e," (Perceiver model)"),a8e.forEach(t),w1o=i(K),rp=n(K,"LI",{});var n8e=s(rp);ide=n(n8e,"STRONG",{});var emt=s(ide);A1o=r(emt,"poolformer"),emt.forEach(t),L1o=r(n8e," \u2014 "),gq=n(n8e,"A",{href:!0});var omt=s(gq);y1o=r(omt,"PoolFormerFeatureExtractor"),omt.forEach(t),x1o=r(n8e," (PoolFormer model)"),n8e.forEach(t),$1o=i(K),tp=n(K,"LI",{});var s8e=s(tp);dde=n(s8e,"STRONG",{});var rmt=s(dde);k1o=r(rmt,"regnet"),rmt.forEach(t),S1o=r(s8e," \u2014 "),hq=n(s8e,"A",{href:!0});var tmt=s(hq);R1o=r(tmt,"ConvNextFeatureExtractor"),tmt.forEach(t),P1o=r(s8e," (RegNet model)"),s8e.forEach(t),B1o=i(K),ap=n(K,"LI",{});var l8e=s(ap);cde=n(l8e,"STRONG",{});var amt=s(cde);I1o=r(amt,"resnet"),amt.forEach(t),N1o=r(l8e," \u2014 "),pq=n(l8e,"A",{href:!0});var nmt=s(pq);q1o=r(nmt,"ConvNextFeatureExtractor"),nmt.forEach(t),j1o=r(l8e," (ResNet model)"),l8e.forEach(t),D1o=i(K),np=n(K,"LI",{});var i8e=s(np);fde=n(i8e,"STRONG",{});var smt=s(fde);G1o=r(smt,"segformer"),smt.forEach(t),O1o=r(i8e," \u2014 "),_q=n(i8e,"A",{href:!0});var lmt=s(_q);V1o=r(lmt,"SegformerFeatureExtractor"),lmt.forEach(t),X1o=r(i8e," (SegFormer model)"),i8e.forEach(t),z1o=i(K),sp=n(K,"LI",{});var d8e=s(sp);mde=n(d8e,"STRONG",{});var imt=s(mde);Q1o=r(imt,"speech_to_text"),imt.forEach(t),W1o=r(d8e," \u2014 "),uq=n(d8e,"A",{href:!0});var dmt=s(uq);H1o=r(dmt,"Speech2TextFeatureExtractor"),dmt.forEach(t),U1o=r(d8e," (Speech2Text model)"),d8e.forEach(t),J1o=i(K),lp=n(K,"LI",{});var c8e=s(lp);gde=n(c8e,"STRONG",{});var cmt=s(gde);Y1o=r(cmt,"swin"),cmt.forEach(t),K1o=r(c8e," \u2014 "),bq=n(c8e,"A",{href:!0});var fmt=s(bq);Z1o=r(fmt,"ViTFeatureExtractor"),fmt.forEach(t),e4o=r(c8e," (Swin Transformer model)"),c8e.forEach(t),o4o=i(K),ip=n(K,"LI",{});var f8e=s(ip);hde=n(f8e,"STRONG",{});var mmt=s(hde);r4o=r(mmt,"van"),mmt.forEach(t),t4o=r(f8e," \u2014 "),vq=n(f8e,"A",{href:!0});var gmt=s(vq);a4o=r(gmt,"ConvNextFeatureExtractor"),gmt.forEach(t),n4o=r(f8e," (VAN model)"),f8e.forEach(t),s4o=i(K),dp=n(K,"LI",{});var m8e=s(dp);pde=n(m8e,"STRONG",{});var hmt=s(pde);l4o=r(hmt,"vilt"),hmt.forEach(t),i4o=r(m8e," \u2014 "),Fq=n(m8e,"A",{href:!0});var pmt=s(Fq);d4o=r(pmt,"ViltFeatureExtractor"),pmt.forEach(t),c4o=r(m8e," (ViLT model)"),m8e.forEach(t),f4o=i(K),cp=n(K,"LI",{});var g8e=s(cp);_de=n(g8e,"STRONG",{});var _mt=s(_de);m4o=r(_mt,"vit"),_mt.forEach(t),g4o=r(g8e," \u2014 "),Tq=n(g8e,"A",{href:!0});var umt=s(Tq);h4o=r(umt,"ViTFeatureExtractor"),umt.forEach(t),p4o=r(g8e," (ViT model)"),g8e.forEach(t),_4o=i(K),fp=n(K,"LI",{});var h8e=s(fp);ude=n(h8e,"STRONG",{});var bmt=s(ude);u4o=r(bmt,"vit_mae"),bmt.forEach(t),b4o=r(h8e," \u2014 "),Mq=n(h8e,"A",{href:!0});var vmt=s(Mq);v4o=r(vmt,"ViTFeatureExtractor"),vmt.forEach(t),F4o=r(h8e," (ViTMAE model)"),h8e.forEach(t),T4o=i(K),mp=n(K,"LI",{});var p8e=s(mp);bde=n(p8e,"STRONG",{});var Fmt=s(bde);M4o=r(Fmt,"wav2vec2"),Fmt.forEach(t),E4o=r(p8e," \u2014 "),Eq=n(p8e,"A",{href:!0});var Tmt=s(Eq);C4o=r(Tmt,"Wav2Vec2FeatureExtractor"),Tmt.forEach(t),w4o=r(p8e," (Wav2Vec2 model)"),p8e.forEach(t),A4o=i(K),gp=n(K,"LI",{});var _8e=s(gp);vde=n(_8e,"STRONG",{});var Mmt=s(vde);L4o=r(Mmt,"wav2vec2-conformer"),Mmt.forEach(t),y4o=r(_8e," \u2014 "),Cq=n(_8e,"A",{href:!0});var Emt=s(Cq);x4o=r(Emt,"Wav2Vec2FeatureExtractor"),Emt.forEach(t),$4o=r(_8e," (Wav2Vec2-Conformer model)"),_8e.forEach(t),k4o=i(K),hp=n(K,"LI",{});var u8e=s(hp);Fde=n(u8e,"STRONG",{});var Cmt=s(Fde);S4o=r(Cmt,"yolos"),Cmt.forEach(t),R4o=r(u8e," \u2014 "),wq=n(u8e,"A",{href:!0});var wmt=s(wq);P4o=r(wmt,"YolosFeatureExtractor"),wmt.forEach(t),B4o=r(u8e," (YOLOS model)"),u8e.forEach(t),K.forEach(t),I4o=i(aa),T(pp.$$.fragment,aa),N4o=i(aa),T(_p.$$.fragment,aa),aa.forEach(t),q4o=i(Zs),up=n(Zs,"DIV",{class:!0});var rQe=s(up);T(TL.$$.fragment,rQe),j4o=i(rQe),Tde=n(rQe,"P",{});var Amt=s(Tde);D4o=r(Amt,"Register a new feature extractor for this class."),Amt.forEach(t),rQe.forEach(t),Zs.forEach(t),ZVe=i(f),qi=n(f,"H2",{class:!0});var tQe=s(qi);bp=n(tQe,"A",{id:!0,class:!0,href:!0});var Lmt=s(bp);Mde=n(Lmt,"SPAN",{});var ymt=s(Mde);T(ML.$$.fragment,ymt),ymt.forEach(t),Lmt.forEach(t),G4o=i(tQe),Ede=n(tQe,"SPAN",{});var xmt=s(Ede);O4o=r(xmt,"AutoProcessor"),xmt.forEach(t),tQe.forEach(t),eXe=i(f),yo=n(f,"DIV",{class:!0});var el=s(yo);T(EL.$$.fragment,el),V4o=i(el),CL=n(el,"P",{});var aQe=s(CL);X4o=r(aQe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),Aq=n(aQe,"A",{href:!0});var $mt=s(Aq);z4o=r($mt,"AutoProcessor.from_pretrained()"),$mt.forEach(t),Q4o=r(aQe," class method."),aQe.forEach(t),W4o=i(el),wL=n(el,"P",{});var nQe=s(wL);H4o=r(nQe,"This class cannot be instantiated directly using "),Cde=n(nQe,"CODE",{});var kmt=s(Cde);U4o=r(kmt,"__init__()"),kmt.forEach(t),J4o=r(nQe," (throws an error)."),nQe.forEach(t),Y4o=i(el),Ue=n(el,"DIV",{class:!0});var na=s(Ue);T(AL.$$.fragment,na),K4o=i(na),wde=n(na,"P",{});var Smt=s(wde);Z4o=r(Smt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Smt.forEach(t),ebo=i(na),ji=n(na,"P",{});var Cre=s(ji);obo=r(Cre,"The processor class to instantiate is selected based on the "),Ade=n(Cre,"CODE",{});var Rmt=s(Ade);rbo=r(Rmt,"model_type"),Rmt.forEach(t),tbo=r(Cre,` property of the config object (either
passed as an argument or loaded from `),Lde=n(Cre,"CODE",{});var Pmt=s(Lde);abo=r(Pmt,"pretrained_model_name_or_path"),Pmt.forEach(t),nbo=r(Cre," if possible):"),Cre.forEach(t),sbo=i(na),he=n(na,"UL",{});var ue=s(he);vp=n(ue,"LI",{});var b8e=s(vp);yde=n(b8e,"STRONG",{});var Bmt=s(yde);lbo=r(Bmt,"clip"),Bmt.forEach(t),ibo=r(b8e," \u2014 "),Lq=n(b8e,"A",{href:!0});var Imt=s(Lq);dbo=r(Imt,"CLIPProcessor"),Imt.forEach(t),cbo=r(b8e," (CLIP model)"),b8e.forEach(t),fbo=i(ue),Fp=n(ue,"LI",{});var v8e=s(Fp);xde=n(v8e,"STRONG",{});var Nmt=s(xde);mbo=r(Nmt,"flava"),Nmt.forEach(t),gbo=r(v8e," \u2014 "),$de=n(v8e,"CODE",{});var qmt=s($de);hbo=r(qmt,"FLAVAProcessor"),qmt.forEach(t),pbo=r(v8e," (FLAVA model)"),v8e.forEach(t),_bo=i(ue),Tp=n(ue,"LI",{});var F8e=s(Tp);kde=n(F8e,"STRONG",{});var jmt=s(kde);ubo=r(jmt,"groupvit"),jmt.forEach(t),bbo=r(F8e," \u2014 "),yq=n(F8e,"A",{href:!0});var Dmt=s(yq);vbo=r(Dmt,"CLIPProcessor"),Dmt.forEach(t),Fbo=r(F8e," (GroupViT model)"),F8e.forEach(t),Tbo=i(ue),Mp=n(ue,"LI",{});var T8e=s(Mp);Sde=n(T8e,"STRONG",{});var Gmt=s(Sde);Mbo=r(Gmt,"layoutlmv2"),Gmt.forEach(t),Ebo=r(T8e," \u2014 "),xq=n(T8e,"A",{href:!0});var Omt=s(xq);Cbo=r(Omt,"LayoutLMv2Processor"),Omt.forEach(t),wbo=r(T8e," (LayoutLMv2 model)"),T8e.forEach(t),Abo=i(ue),Ep=n(ue,"LI",{});var M8e=s(Ep);Rde=n(M8e,"STRONG",{});var Vmt=s(Rde);Lbo=r(Vmt,"layoutlmv3"),Vmt.forEach(t),ybo=r(M8e," \u2014 "),$q=n(M8e,"A",{href:!0});var Xmt=s($q);xbo=r(Xmt,"LayoutLMv3Processor"),Xmt.forEach(t),$bo=r(M8e," (LayoutLMv3 model)"),M8e.forEach(t),kbo=i(ue),Cp=n(ue,"LI",{});var E8e=s(Cp);Pde=n(E8e,"STRONG",{});var zmt=s(Pde);Sbo=r(zmt,"layoutxlm"),zmt.forEach(t),Rbo=r(E8e," \u2014 "),kq=n(E8e,"A",{href:!0});var Qmt=s(kq);Pbo=r(Qmt,"LayoutXLMProcessor"),Qmt.forEach(t),Bbo=r(E8e," (LayoutXLM model)"),E8e.forEach(t),Ibo=i(ue),wp=n(ue,"LI",{});var C8e=s(wp);Bde=n(C8e,"STRONG",{});var Wmt=s(Bde);Nbo=r(Wmt,"sew"),Wmt.forEach(t),qbo=r(C8e," \u2014 "),Sq=n(C8e,"A",{href:!0});var Hmt=s(Sq);jbo=r(Hmt,"Wav2Vec2Processor"),Hmt.forEach(t),Dbo=r(C8e," (SEW model)"),C8e.forEach(t),Gbo=i(ue),Ap=n(ue,"LI",{});var w8e=s(Ap);Ide=n(w8e,"STRONG",{});var Umt=s(Ide);Obo=r(Umt,"sew-d"),Umt.forEach(t),Vbo=r(w8e," \u2014 "),Rq=n(w8e,"A",{href:!0});var Jmt=s(Rq);Xbo=r(Jmt,"Wav2Vec2Processor"),Jmt.forEach(t),zbo=r(w8e," (SEW-D model)"),w8e.forEach(t),Qbo=i(ue),Lp=n(ue,"LI",{});var A8e=s(Lp);Nde=n(A8e,"STRONG",{});var Ymt=s(Nde);Wbo=r(Ymt,"speech_to_text"),Ymt.forEach(t),Hbo=r(A8e," \u2014 "),Pq=n(A8e,"A",{href:!0});var Kmt=s(Pq);Ubo=r(Kmt,"Speech2TextProcessor"),Kmt.forEach(t),Jbo=r(A8e," (Speech2Text model)"),A8e.forEach(t),Ybo=i(ue),yp=n(ue,"LI",{});var L8e=s(yp);qde=n(L8e,"STRONG",{});var Zmt=s(qde);Kbo=r(Zmt,"speech_to_text_2"),Zmt.forEach(t),Zbo=r(L8e," \u2014 "),Bq=n(L8e,"A",{href:!0});var egt=s(Bq);evo=r(egt,"Speech2Text2Processor"),egt.forEach(t),ovo=r(L8e," (Speech2Text2 model)"),L8e.forEach(t),rvo=i(ue),xp=n(ue,"LI",{});var y8e=s(xp);jde=n(y8e,"STRONG",{});var ogt=s(jde);tvo=r(ogt,"trocr"),ogt.forEach(t),avo=r(y8e," \u2014 "),Iq=n(y8e,"A",{href:!0});var rgt=s(Iq);nvo=r(rgt,"TrOCRProcessor"),rgt.forEach(t),svo=r(y8e," (TrOCR model)"),y8e.forEach(t),lvo=i(ue),$p=n(ue,"LI",{});var x8e=s($p);Dde=n(x8e,"STRONG",{});var tgt=s(Dde);ivo=r(tgt,"unispeech"),tgt.forEach(t),dvo=r(x8e," \u2014 "),Nq=n(x8e,"A",{href:!0});var agt=s(Nq);cvo=r(agt,"Wav2Vec2Processor"),agt.forEach(t),fvo=r(x8e," (UniSpeech model)"),x8e.forEach(t),mvo=i(ue),kp=n(ue,"LI",{});var $8e=s(kp);Gde=n($8e,"STRONG",{});var ngt=s(Gde);gvo=r(ngt,"unispeech-sat"),ngt.forEach(t),hvo=r($8e," \u2014 "),qq=n($8e,"A",{href:!0});var sgt=s(qq);pvo=r(sgt,"Wav2Vec2Processor"),sgt.forEach(t),_vo=r($8e," (UniSpeechSat model)"),$8e.forEach(t),uvo=i(ue),Sp=n(ue,"LI",{});var k8e=s(Sp);Ode=n(k8e,"STRONG",{});var lgt=s(Ode);bvo=r(lgt,"vilt"),lgt.forEach(t),vvo=r(k8e," \u2014 "),jq=n(k8e,"A",{href:!0});var igt=s(jq);Fvo=r(igt,"ViltProcessor"),igt.forEach(t),Tvo=r(k8e," (ViLT model)"),k8e.forEach(t),Mvo=i(ue),Rp=n(ue,"LI",{});var S8e=s(Rp);Vde=n(S8e,"STRONG",{});var dgt=s(Vde);Evo=r(dgt,"vision-text-dual-encoder"),dgt.forEach(t),Cvo=r(S8e," \u2014 "),Dq=n(S8e,"A",{href:!0});var cgt=s(Dq);wvo=r(cgt,"VisionTextDualEncoderProcessor"),cgt.forEach(t),Avo=r(S8e," (VisionTextDualEncoder model)"),S8e.forEach(t),Lvo=i(ue),Pp=n(ue,"LI",{});var R8e=s(Pp);Xde=n(R8e,"STRONG",{});var fgt=s(Xde);yvo=r(fgt,"wav2vec2"),fgt.forEach(t),xvo=r(R8e," \u2014 "),Gq=n(R8e,"A",{href:!0});var mgt=s(Gq);$vo=r(mgt,"Wav2Vec2Processor"),mgt.forEach(t),kvo=r(R8e," (Wav2Vec2 model)"),R8e.forEach(t),Svo=i(ue),Bp=n(ue,"LI",{});var P8e=s(Bp);zde=n(P8e,"STRONG",{});var ggt=s(zde);Rvo=r(ggt,"wav2vec2-conformer"),ggt.forEach(t),Pvo=r(P8e," \u2014 "),Oq=n(P8e,"A",{href:!0});var hgt=s(Oq);Bvo=r(hgt,"Wav2Vec2Processor"),hgt.forEach(t),Ivo=r(P8e," (Wav2Vec2-Conformer model)"),P8e.forEach(t),Nvo=i(ue),Ip=n(ue,"LI",{});var B8e=s(Ip);Qde=n(B8e,"STRONG",{});var pgt=s(Qde);qvo=r(pgt,"wavlm"),pgt.forEach(t),jvo=r(B8e," \u2014 "),Vq=n(B8e,"A",{href:!0});var _gt=s(Vq);Dvo=r(_gt,"Wav2Vec2Processor"),_gt.forEach(t),Gvo=r(B8e," (WavLM model)"),B8e.forEach(t),ue.forEach(t),Ovo=i(na),T(Np.$$.fragment,na),Vvo=i(na),T(qp.$$.fragment,na),na.forEach(t),Xvo=i(el),jp=n(el,"DIV",{class:!0});var sQe=s(jp);T(LL.$$.fragment,sQe),zvo=i(sQe),Wde=n(sQe,"P",{});var ugt=s(Wde);Qvo=r(ugt,"Register a new processor for this class."),ugt.forEach(t),sQe.forEach(t),el.forEach(t),oXe=i(f),Di=n(f,"H2",{class:!0});var lQe=s(Di);Dp=n(lQe,"A",{id:!0,class:!0,href:!0});var bgt=s(Dp);Hde=n(bgt,"SPAN",{});var vgt=s(Hde);T(yL.$$.fragment,vgt),vgt.forEach(t),bgt.forEach(t),Wvo=i(lQe),Ude=n(lQe,"SPAN",{});var Fgt=s(Ude);Hvo=r(Fgt,"AutoModel"),Fgt.forEach(t),lQe.forEach(t),rXe=i(f),xo=n(f,"DIV",{class:!0});var ol=s(xo);T(xL.$$.fragment,ol),Uvo=i(ol),Gi=n(ol,"P",{});var wre=s(Gi);Jvo=r(wre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Xq=n(wre,"A",{href:!0});var Tgt=s(Xq);Yvo=r(Tgt,"from_pretrained()"),Tgt.forEach(t),Kvo=r(wre," class method or the "),zq=n(wre,"A",{href:!0});var Mgt=s(zq);Zvo=r(Mgt,"from_config()"),Mgt.forEach(t),eFo=r(wre,` class
method.`),wre.forEach(t),oFo=i(ol),$L=n(ol,"P",{});var iQe=s($L);rFo=r(iQe,"This class cannot be instantiated directly using "),Jde=n(iQe,"CODE",{});var Egt=s(Jde);tFo=r(Egt,"__init__()"),Egt.forEach(t),aFo=r(iQe," (throws an error)."),iQe.forEach(t),nFo=i(ol),lt=n(ol,"DIV",{class:!0});var sA=s(lt);T(kL.$$.fragment,sA),sFo=i(sA),Yde=n(sA,"P",{});var Cgt=s(Yde);lFo=r(Cgt,"Instantiates one of the base model classes of the library from a configuration."),Cgt.forEach(t),iFo=i(sA),Oi=n(sA,"P",{});var Are=s(Oi);dFo=r(Are,`Note:
Loading a model from its configuration file does `),Kde=n(Are,"STRONG",{});var wgt=s(Kde);cFo=r(wgt,"not"),wgt.forEach(t),fFo=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qq=n(Are,"A",{href:!0});var Agt=s(Qq);mFo=r(Agt,"from_pretrained()"),Agt.forEach(t),gFo=r(Are," to load the model weights."),Are.forEach(t),hFo=i(sA),T(Gp.$$.fragment,sA),sA.forEach(t),pFo=i(ol),Je=n(ol,"DIV",{class:!0});var sa=s(Je);T(SL.$$.fragment,sa),_Fo=i(sa),Zde=n(sa,"P",{});var Lgt=s(Zde);uFo=r(Lgt,"Instantiate one of the base model classes of the library from a pretrained model."),Lgt.forEach(t),bFo=i(sa),Ia=n(sa,"P",{});var lA=s(Ia);vFo=r(lA,"The model class to instantiate is selected based on the "),ece=n(lA,"CODE",{});var ygt=s(ece);FFo=r(ygt,"model_type"),ygt.forEach(t),TFo=r(lA,` property of the config object (either
passed as an argument or loaded from `),oce=n(lA,"CODE",{});var xgt=s(oce);MFo=r(xgt,"pretrained_model_name_or_path"),xgt.forEach(t),EFo=r(lA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rce=n(lA,"CODE",{});var $gt=s(rce);CFo=r($gt,"pretrained_model_name_or_path"),$gt.forEach(t),wFo=r(lA,":"),lA.forEach(t),AFo=i(sa),y=n(sa,"UL",{});var x=s(y);Op=n(x,"LI",{});var I8e=s(Op);tce=n(I8e,"STRONG",{});var kgt=s(tce);LFo=r(kgt,"albert"),kgt.forEach(t),yFo=r(I8e," \u2014 "),Wq=n(I8e,"A",{href:!0});var Sgt=s(Wq);xFo=r(Sgt,"AlbertModel"),Sgt.forEach(t),$Fo=r(I8e," (ALBERT model)"),I8e.forEach(t),kFo=i(x),Vp=n(x,"LI",{});var N8e=s(Vp);ace=n(N8e,"STRONG",{});var Rgt=s(ace);SFo=r(Rgt,"bart"),Rgt.forEach(t),RFo=r(N8e," \u2014 "),Hq=n(N8e,"A",{href:!0});var Pgt=s(Hq);PFo=r(Pgt,"BartModel"),Pgt.forEach(t),BFo=r(N8e," (BART model)"),N8e.forEach(t),IFo=i(x),Xp=n(x,"LI",{});var q8e=s(Xp);nce=n(q8e,"STRONG",{});var Bgt=s(nce);NFo=r(Bgt,"beit"),Bgt.forEach(t),qFo=r(q8e," \u2014 "),Uq=n(q8e,"A",{href:!0});var Igt=s(Uq);jFo=r(Igt,"BeitModel"),Igt.forEach(t),DFo=r(q8e," (BEiT model)"),q8e.forEach(t),GFo=i(x),zp=n(x,"LI",{});var j8e=s(zp);sce=n(j8e,"STRONG",{});var Ngt=s(sce);OFo=r(Ngt,"bert"),Ngt.forEach(t),VFo=r(j8e," \u2014 "),Jq=n(j8e,"A",{href:!0});var qgt=s(Jq);XFo=r(qgt,"BertModel"),qgt.forEach(t),zFo=r(j8e," (BERT model)"),j8e.forEach(t),QFo=i(x),Qp=n(x,"LI",{});var D8e=s(Qp);lce=n(D8e,"STRONG",{});var jgt=s(lce);WFo=r(jgt,"bert-generation"),jgt.forEach(t),HFo=r(D8e," \u2014 "),Yq=n(D8e,"A",{href:!0});var Dgt=s(Yq);UFo=r(Dgt,"BertGenerationEncoder"),Dgt.forEach(t),JFo=r(D8e," (Bert Generation model)"),D8e.forEach(t),YFo=i(x),Wp=n(x,"LI",{});var G8e=s(Wp);ice=n(G8e,"STRONG",{});var Ggt=s(ice);KFo=r(Ggt,"big_bird"),Ggt.forEach(t),ZFo=r(G8e," \u2014 "),Kq=n(G8e,"A",{href:!0});var Ogt=s(Kq);eTo=r(Ogt,"BigBirdModel"),Ogt.forEach(t),oTo=r(G8e," (BigBird model)"),G8e.forEach(t),rTo=i(x),Hp=n(x,"LI",{});var O8e=s(Hp);dce=n(O8e,"STRONG",{});var Vgt=s(dce);tTo=r(Vgt,"bigbird_pegasus"),Vgt.forEach(t),aTo=r(O8e," \u2014 "),Zq=n(O8e,"A",{href:!0});var Xgt=s(Zq);nTo=r(Xgt,"BigBirdPegasusModel"),Xgt.forEach(t),sTo=r(O8e," (BigBird-Pegasus model)"),O8e.forEach(t),lTo=i(x),Up=n(x,"LI",{});var V8e=s(Up);cce=n(V8e,"STRONG",{});var zgt=s(cce);iTo=r(zgt,"blenderbot"),zgt.forEach(t),dTo=r(V8e," \u2014 "),ej=n(V8e,"A",{href:!0});var Qgt=s(ej);cTo=r(Qgt,"BlenderbotModel"),Qgt.forEach(t),fTo=r(V8e," (Blenderbot model)"),V8e.forEach(t),mTo=i(x),Jp=n(x,"LI",{});var X8e=s(Jp);fce=n(X8e,"STRONG",{});var Wgt=s(fce);gTo=r(Wgt,"blenderbot-small"),Wgt.forEach(t),hTo=r(X8e," \u2014 "),oj=n(X8e,"A",{href:!0});var Hgt=s(oj);pTo=r(Hgt,"BlenderbotSmallModel"),Hgt.forEach(t),_To=r(X8e," (BlenderbotSmall model)"),X8e.forEach(t),uTo=i(x),Yp=n(x,"LI",{});var z8e=s(Yp);mce=n(z8e,"STRONG",{});var Ugt=s(mce);bTo=r(Ugt,"bloom"),Ugt.forEach(t),vTo=r(z8e," \u2014 "),rj=n(z8e,"A",{href:!0});var Jgt=s(rj);FTo=r(Jgt,"BloomModel"),Jgt.forEach(t),TTo=r(z8e," (BLOOM model)"),z8e.forEach(t),MTo=i(x),Kp=n(x,"LI",{});var Q8e=s(Kp);gce=n(Q8e,"STRONG",{});var Ygt=s(gce);ETo=r(Ygt,"camembert"),Ygt.forEach(t),CTo=r(Q8e," \u2014 "),tj=n(Q8e,"A",{href:!0});var Kgt=s(tj);wTo=r(Kgt,"CamembertModel"),Kgt.forEach(t),ATo=r(Q8e," (CamemBERT model)"),Q8e.forEach(t),LTo=i(x),Zp=n(x,"LI",{});var W8e=s(Zp);hce=n(W8e,"STRONG",{});var Zgt=s(hce);yTo=r(Zgt,"canine"),Zgt.forEach(t),xTo=r(W8e," \u2014 "),aj=n(W8e,"A",{href:!0});var eht=s(aj);$To=r(eht,"CanineModel"),eht.forEach(t),kTo=r(W8e," (CANINE model)"),W8e.forEach(t),STo=i(x),e_=n(x,"LI",{});var H8e=s(e_);pce=n(H8e,"STRONG",{});var oht=s(pce);RTo=r(oht,"clip"),oht.forEach(t),PTo=r(H8e," \u2014 "),nj=n(H8e,"A",{href:!0});var rht=s(nj);BTo=r(rht,"CLIPModel"),rht.forEach(t),ITo=r(H8e," (CLIP model)"),H8e.forEach(t),NTo=i(x),o_=n(x,"LI",{});var U8e=s(o_);_ce=n(U8e,"STRONG",{});var tht=s(_ce);qTo=r(tht,"codegen"),tht.forEach(t),jTo=r(U8e," \u2014 "),sj=n(U8e,"A",{href:!0});var aht=s(sj);DTo=r(aht,"CodeGenModel"),aht.forEach(t),GTo=r(U8e," (CodeGen model)"),U8e.forEach(t),OTo=i(x),r_=n(x,"LI",{});var J8e=s(r_);uce=n(J8e,"STRONG",{});var nht=s(uce);VTo=r(nht,"convbert"),nht.forEach(t),XTo=r(J8e," \u2014 "),lj=n(J8e,"A",{href:!0});var sht=s(lj);zTo=r(sht,"ConvBertModel"),sht.forEach(t),QTo=r(J8e," (ConvBERT model)"),J8e.forEach(t),WTo=i(x),t_=n(x,"LI",{});var Y8e=s(t_);bce=n(Y8e,"STRONG",{});var lht=s(bce);HTo=r(lht,"convnext"),lht.forEach(t),UTo=r(Y8e," \u2014 "),ij=n(Y8e,"A",{href:!0});var iht=s(ij);JTo=r(iht,"ConvNextModel"),iht.forEach(t),YTo=r(Y8e," (ConvNeXT model)"),Y8e.forEach(t),KTo=i(x),a_=n(x,"LI",{});var K8e=s(a_);vce=n(K8e,"STRONG",{});var dht=s(vce);ZTo=r(dht,"ctrl"),dht.forEach(t),e7o=r(K8e," \u2014 "),dj=n(K8e,"A",{href:!0});var cht=s(dj);o7o=r(cht,"CTRLModel"),cht.forEach(t),r7o=r(K8e," (CTRL model)"),K8e.forEach(t),t7o=i(x),n_=n(x,"LI",{});var Z8e=s(n_);Fce=n(Z8e,"STRONG",{});var fht=s(Fce);a7o=r(fht,"cvt"),fht.forEach(t),n7o=r(Z8e," \u2014 "),cj=n(Z8e,"A",{href:!0});var mht=s(cj);s7o=r(mht,"CvtModel"),mht.forEach(t),l7o=r(Z8e," (CvT model)"),Z8e.forEach(t),i7o=i(x),s_=n(x,"LI",{});var exe=s(s_);Tce=n(exe,"STRONG",{});var ght=s(Tce);d7o=r(ght,"data2vec-audio"),ght.forEach(t),c7o=r(exe," \u2014 "),fj=n(exe,"A",{href:!0});var hht=s(fj);f7o=r(hht,"Data2VecAudioModel"),hht.forEach(t),m7o=r(exe," (Data2VecAudio model)"),exe.forEach(t),g7o=i(x),l_=n(x,"LI",{});var oxe=s(l_);Mce=n(oxe,"STRONG",{});var pht=s(Mce);h7o=r(pht,"data2vec-text"),pht.forEach(t),p7o=r(oxe," \u2014 "),mj=n(oxe,"A",{href:!0});var _ht=s(mj);_7o=r(_ht,"Data2VecTextModel"),_ht.forEach(t),u7o=r(oxe," (Data2VecText model)"),oxe.forEach(t),b7o=i(x),i_=n(x,"LI",{});var rxe=s(i_);Ece=n(rxe,"STRONG",{});var uht=s(Ece);v7o=r(uht,"data2vec-vision"),uht.forEach(t),F7o=r(rxe," \u2014 "),gj=n(rxe,"A",{href:!0});var bht=s(gj);T7o=r(bht,"Data2VecVisionModel"),bht.forEach(t),M7o=r(rxe," (Data2VecVision model)"),rxe.forEach(t),E7o=i(x),d_=n(x,"LI",{});var txe=s(d_);Cce=n(txe,"STRONG",{});var vht=s(Cce);C7o=r(vht,"deberta"),vht.forEach(t),w7o=r(txe," \u2014 "),hj=n(txe,"A",{href:!0});var Fht=s(hj);A7o=r(Fht,"DebertaModel"),Fht.forEach(t),L7o=r(txe," (DeBERTa model)"),txe.forEach(t),y7o=i(x),c_=n(x,"LI",{});var axe=s(c_);wce=n(axe,"STRONG",{});var Tht=s(wce);x7o=r(Tht,"deberta-v2"),Tht.forEach(t),$7o=r(axe," \u2014 "),pj=n(axe,"A",{href:!0});var Mht=s(pj);k7o=r(Mht,"DebertaV2Model"),Mht.forEach(t),S7o=r(axe," (DeBERTa-v2 model)"),axe.forEach(t),R7o=i(x),f_=n(x,"LI",{});var nxe=s(f_);Ace=n(nxe,"STRONG",{});var Eht=s(Ace);P7o=r(Eht,"decision_transformer"),Eht.forEach(t),B7o=r(nxe," \u2014 "),_j=n(nxe,"A",{href:!0});var Cht=s(_j);I7o=r(Cht,"DecisionTransformerModel"),Cht.forEach(t),N7o=r(nxe," (Decision Transformer model)"),nxe.forEach(t),q7o=i(x),m_=n(x,"LI",{});var sxe=s(m_);Lce=n(sxe,"STRONG",{});var wht=s(Lce);j7o=r(wht,"deit"),wht.forEach(t),D7o=r(sxe," \u2014 "),uj=n(sxe,"A",{href:!0});var Aht=s(uj);G7o=r(Aht,"DeiTModel"),Aht.forEach(t),O7o=r(sxe," (DeiT model)"),sxe.forEach(t),V7o=i(x),g_=n(x,"LI",{});var lxe=s(g_);yce=n(lxe,"STRONG",{});var Lht=s(yce);X7o=r(Lht,"detr"),Lht.forEach(t),z7o=r(lxe," \u2014 "),bj=n(lxe,"A",{href:!0});var yht=s(bj);Q7o=r(yht,"DetrModel"),yht.forEach(t),W7o=r(lxe," (DETR model)"),lxe.forEach(t),H7o=i(x),h_=n(x,"LI",{});var ixe=s(h_);xce=n(ixe,"STRONG",{});var xht=s(xce);U7o=r(xht,"distilbert"),xht.forEach(t),J7o=r(ixe," \u2014 "),vj=n(ixe,"A",{href:!0});var $ht=s(vj);Y7o=r($ht,"DistilBertModel"),$ht.forEach(t),K7o=r(ixe," (DistilBERT model)"),ixe.forEach(t),Z7o=i(x),p_=n(x,"LI",{});var dxe=s(p_);$ce=n(dxe,"STRONG",{});var kht=s($ce);e9o=r(kht,"dpr"),kht.forEach(t),o9o=r(dxe," \u2014 "),Fj=n(dxe,"A",{href:!0});var Sht=s(Fj);r9o=r(Sht,"DPRQuestionEncoder"),Sht.forEach(t),t9o=r(dxe," (DPR model)"),dxe.forEach(t),a9o=i(x),__=n(x,"LI",{});var cxe=s(__);kce=n(cxe,"STRONG",{});var Rht=s(kce);n9o=r(Rht,"dpt"),Rht.forEach(t),s9o=r(cxe," \u2014 "),Tj=n(cxe,"A",{href:!0});var Pht=s(Tj);l9o=r(Pht,"DPTModel"),Pht.forEach(t),i9o=r(cxe," (DPT model)"),cxe.forEach(t),d9o=i(x),u_=n(x,"LI",{});var fxe=s(u_);Sce=n(fxe,"STRONG",{});var Bht=s(Sce);c9o=r(Bht,"electra"),Bht.forEach(t),f9o=r(fxe," \u2014 "),Mj=n(fxe,"A",{href:!0});var Iht=s(Mj);m9o=r(Iht,"ElectraModel"),Iht.forEach(t),g9o=r(fxe," (ELECTRA model)"),fxe.forEach(t),h9o=i(x),b_=n(x,"LI",{});var mxe=s(b_);Rce=n(mxe,"STRONG",{});var Nht=s(Rce);p9o=r(Nht,"flaubert"),Nht.forEach(t),_9o=r(mxe," \u2014 "),Ej=n(mxe,"A",{href:!0});var qht=s(Ej);u9o=r(qht,"FlaubertModel"),qht.forEach(t),b9o=r(mxe," (FlauBERT model)"),mxe.forEach(t),v9o=i(x),v_=n(x,"LI",{});var gxe=s(v_);Pce=n(gxe,"STRONG",{});var jht=s(Pce);F9o=r(jht,"flava"),jht.forEach(t),T9o=r(gxe," \u2014 "),Cj=n(gxe,"A",{href:!0});var Dht=s(Cj);M9o=r(Dht,"FlavaModel"),Dht.forEach(t),E9o=r(gxe," (FLAVA model)"),gxe.forEach(t),C9o=i(x),F_=n(x,"LI",{});var hxe=s(F_);Bce=n(hxe,"STRONG",{});var Ght=s(Bce);w9o=r(Ght,"fnet"),Ght.forEach(t),A9o=r(hxe," \u2014 "),wj=n(hxe,"A",{href:!0});var Oht=s(wj);L9o=r(Oht,"FNetModel"),Oht.forEach(t),y9o=r(hxe," (FNet model)"),hxe.forEach(t),x9o=i(x),T_=n(x,"LI",{});var pxe=s(T_);Ice=n(pxe,"STRONG",{});var Vht=s(Ice);$9o=r(Vht,"fsmt"),Vht.forEach(t),k9o=r(pxe," \u2014 "),Aj=n(pxe,"A",{href:!0});var Xht=s(Aj);S9o=r(Xht,"FSMTModel"),Xht.forEach(t),R9o=r(pxe," (FairSeq Machine-Translation model)"),pxe.forEach(t),P9o=i(x),Ws=n(x,"LI",{});var yS=s(Ws);Nce=n(yS,"STRONG",{});var zht=s(Nce);B9o=r(zht,"funnel"),zht.forEach(t),I9o=r(yS," \u2014 "),Lj=n(yS,"A",{href:!0});var Qht=s(Lj);N9o=r(Qht,"FunnelModel"),Qht.forEach(t),q9o=r(yS," or "),yj=n(yS,"A",{href:!0});var Wht=s(yj);j9o=r(Wht,"FunnelBaseModel"),Wht.forEach(t),D9o=r(yS," (Funnel Transformer model)"),yS.forEach(t),G9o=i(x),M_=n(x,"LI",{});var _xe=s(M_);qce=n(_xe,"STRONG",{});var Hht=s(qce);O9o=r(Hht,"glpn"),Hht.forEach(t),V9o=r(_xe," \u2014 "),xj=n(_xe,"A",{href:!0});var Uht=s(xj);X9o=r(Uht,"GLPNModel"),Uht.forEach(t),z9o=r(_xe," (GLPN model)"),_xe.forEach(t),Q9o=i(x),E_=n(x,"LI",{});var uxe=s(E_);jce=n(uxe,"STRONG",{});var Jht=s(jce);W9o=r(Jht,"gpt2"),Jht.forEach(t),H9o=r(uxe," \u2014 "),$j=n(uxe,"A",{href:!0});var Yht=s($j);U9o=r(Yht,"GPT2Model"),Yht.forEach(t),J9o=r(uxe," (OpenAI GPT-2 model)"),uxe.forEach(t),Y9o=i(x),C_=n(x,"LI",{});var bxe=s(C_);Dce=n(bxe,"STRONG",{});var Kht=s(Dce);K9o=r(Kht,"gpt_neo"),Kht.forEach(t),Z9o=r(bxe," \u2014 "),kj=n(bxe,"A",{href:!0});var Zht=s(kj);eMo=r(Zht,"GPTNeoModel"),Zht.forEach(t),oMo=r(bxe," (GPT Neo model)"),bxe.forEach(t),rMo=i(x),w_=n(x,"LI",{});var vxe=s(w_);Gce=n(vxe,"STRONG",{});var ept=s(Gce);tMo=r(ept,"gpt_neox"),ept.forEach(t),aMo=r(vxe," \u2014 "),Sj=n(vxe,"A",{href:!0});var opt=s(Sj);nMo=r(opt,"GPTNeoXModel"),opt.forEach(t),sMo=r(vxe," (GPT NeoX model)"),vxe.forEach(t),lMo=i(x),A_=n(x,"LI",{});var Fxe=s(A_);Oce=n(Fxe,"STRONG",{});var rpt=s(Oce);iMo=r(rpt,"gptj"),rpt.forEach(t),dMo=r(Fxe," \u2014 "),Rj=n(Fxe,"A",{href:!0});var tpt=s(Rj);cMo=r(tpt,"GPTJModel"),tpt.forEach(t),fMo=r(Fxe," (GPT-J model)"),Fxe.forEach(t),mMo=i(x),L_=n(x,"LI",{});var Txe=s(L_);Vce=n(Txe,"STRONG",{});var apt=s(Vce);gMo=r(apt,"groupvit"),apt.forEach(t),hMo=r(Txe," \u2014 "),Pj=n(Txe,"A",{href:!0});var npt=s(Pj);pMo=r(npt,"GroupViTModel"),npt.forEach(t),_Mo=r(Txe," (GroupViT model)"),Txe.forEach(t),uMo=i(x),y_=n(x,"LI",{});var Mxe=s(y_);Xce=n(Mxe,"STRONG",{});var spt=s(Xce);bMo=r(spt,"hubert"),spt.forEach(t),vMo=r(Mxe," \u2014 "),Bj=n(Mxe,"A",{href:!0});var lpt=s(Bj);FMo=r(lpt,"HubertModel"),lpt.forEach(t),TMo=r(Mxe," (Hubert model)"),Mxe.forEach(t),MMo=i(x),x_=n(x,"LI",{});var Exe=s(x_);zce=n(Exe,"STRONG",{});var ipt=s(zce);EMo=r(ipt,"ibert"),ipt.forEach(t),CMo=r(Exe," \u2014 "),Ij=n(Exe,"A",{href:!0});var dpt=s(Ij);wMo=r(dpt,"IBertModel"),dpt.forEach(t),AMo=r(Exe," (I-BERT model)"),Exe.forEach(t),LMo=i(x),$_=n(x,"LI",{});var Cxe=s($_);Qce=n(Cxe,"STRONG",{});var cpt=s(Qce);yMo=r(cpt,"imagegpt"),cpt.forEach(t),xMo=r(Cxe," \u2014 "),Nj=n(Cxe,"A",{href:!0});var fpt=s(Nj);$Mo=r(fpt,"ImageGPTModel"),fpt.forEach(t),kMo=r(Cxe," (ImageGPT model)"),Cxe.forEach(t),SMo=i(x),k_=n(x,"LI",{});var wxe=s(k_);Wce=n(wxe,"STRONG",{});var mpt=s(Wce);RMo=r(mpt,"layoutlm"),mpt.forEach(t),PMo=r(wxe," \u2014 "),qj=n(wxe,"A",{href:!0});var gpt=s(qj);BMo=r(gpt,"LayoutLMModel"),gpt.forEach(t),IMo=r(wxe," (LayoutLM model)"),wxe.forEach(t),NMo=i(x),S_=n(x,"LI",{});var Axe=s(S_);Hce=n(Axe,"STRONG",{});var hpt=s(Hce);qMo=r(hpt,"layoutlmv2"),hpt.forEach(t),jMo=r(Axe," \u2014 "),jj=n(Axe,"A",{href:!0});var ppt=s(jj);DMo=r(ppt,"LayoutLMv2Model"),ppt.forEach(t),GMo=r(Axe," (LayoutLMv2 model)"),Axe.forEach(t),OMo=i(x),R_=n(x,"LI",{});var Lxe=s(R_);Uce=n(Lxe,"STRONG",{});var _pt=s(Uce);VMo=r(_pt,"layoutlmv3"),_pt.forEach(t),XMo=r(Lxe," \u2014 "),Dj=n(Lxe,"A",{href:!0});var upt=s(Dj);zMo=r(upt,"LayoutLMv3Model"),upt.forEach(t),QMo=r(Lxe," (LayoutLMv3 model)"),Lxe.forEach(t),WMo=i(x),P_=n(x,"LI",{});var yxe=s(P_);Jce=n(yxe,"STRONG",{});var bpt=s(Jce);HMo=r(bpt,"led"),bpt.forEach(t),UMo=r(yxe," \u2014 "),Gj=n(yxe,"A",{href:!0});var vpt=s(Gj);JMo=r(vpt,"LEDModel"),vpt.forEach(t),YMo=r(yxe," (LED model)"),yxe.forEach(t),KMo=i(x),B_=n(x,"LI",{});var xxe=s(B_);Yce=n(xxe,"STRONG",{});var Fpt=s(Yce);ZMo=r(Fpt,"levit"),Fpt.forEach(t),eEo=r(xxe," \u2014 "),Oj=n(xxe,"A",{href:!0});var Tpt=s(Oj);oEo=r(Tpt,"LevitModel"),Tpt.forEach(t),rEo=r(xxe," (LeViT model)"),xxe.forEach(t),tEo=i(x),I_=n(x,"LI",{});var $xe=s(I_);Kce=n($xe,"STRONG",{});var Mpt=s(Kce);aEo=r(Mpt,"longformer"),Mpt.forEach(t),nEo=r($xe," \u2014 "),Vj=n($xe,"A",{href:!0});var Ept=s(Vj);sEo=r(Ept,"LongformerModel"),Ept.forEach(t),lEo=r($xe," (Longformer model)"),$xe.forEach(t),iEo=i(x),N_=n(x,"LI",{});var kxe=s(N_);Zce=n(kxe,"STRONG",{});var Cpt=s(Zce);dEo=r(Cpt,"longt5"),Cpt.forEach(t),cEo=r(kxe," \u2014 "),Xj=n(kxe,"A",{href:!0});var wpt=s(Xj);fEo=r(wpt,"LongT5Model"),wpt.forEach(t),mEo=r(kxe," (LongT5 model)"),kxe.forEach(t),gEo=i(x),q_=n(x,"LI",{});var Sxe=s(q_);efe=n(Sxe,"STRONG",{});var Apt=s(efe);hEo=r(Apt,"luke"),Apt.forEach(t),pEo=r(Sxe," \u2014 "),zj=n(Sxe,"A",{href:!0});var Lpt=s(zj);_Eo=r(Lpt,"LukeModel"),Lpt.forEach(t),uEo=r(Sxe," (LUKE model)"),Sxe.forEach(t),bEo=i(x),j_=n(x,"LI",{});var Rxe=s(j_);ofe=n(Rxe,"STRONG",{});var ypt=s(ofe);vEo=r(ypt,"lxmert"),ypt.forEach(t),FEo=r(Rxe," \u2014 "),Qj=n(Rxe,"A",{href:!0});var xpt=s(Qj);TEo=r(xpt,"LxmertModel"),xpt.forEach(t),MEo=r(Rxe," (LXMERT model)"),Rxe.forEach(t),EEo=i(x),D_=n(x,"LI",{});var Pxe=s(D_);rfe=n(Pxe,"STRONG",{});var $pt=s(rfe);CEo=r($pt,"m2m_100"),$pt.forEach(t),wEo=r(Pxe," \u2014 "),Wj=n(Pxe,"A",{href:!0});var kpt=s(Wj);AEo=r(kpt,"M2M100Model"),kpt.forEach(t),LEo=r(Pxe," (M2M100 model)"),Pxe.forEach(t),yEo=i(x),G_=n(x,"LI",{});var Bxe=s(G_);tfe=n(Bxe,"STRONG",{});var Spt=s(tfe);xEo=r(Spt,"marian"),Spt.forEach(t),$Eo=r(Bxe," \u2014 "),Hj=n(Bxe,"A",{href:!0});var Rpt=s(Hj);kEo=r(Rpt,"MarianModel"),Rpt.forEach(t),SEo=r(Bxe," (Marian model)"),Bxe.forEach(t),REo=i(x),O_=n(x,"LI",{});var Ixe=s(O_);afe=n(Ixe,"STRONG",{});var Ppt=s(afe);PEo=r(Ppt,"maskformer"),Ppt.forEach(t),BEo=r(Ixe," \u2014 "),Uj=n(Ixe,"A",{href:!0});var Bpt=s(Uj);IEo=r(Bpt,"MaskFormerModel"),Bpt.forEach(t),NEo=r(Ixe," (MaskFormer model)"),Ixe.forEach(t),qEo=i(x),V_=n(x,"LI",{});var Nxe=s(V_);nfe=n(Nxe,"STRONG",{});var Ipt=s(nfe);jEo=r(Ipt,"mbart"),Ipt.forEach(t),DEo=r(Nxe," \u2014 "),Jj=n(Nxe,"A",{href:!0});var Npt=s(Jj);GEo=r(Npt,"MBartModel"),Npt.forEach(t),OEo=r(Nxe," (mBART model)"),Nxe.forEach(t),VEo=i(x),X_=n(x,"LI",{});var qxe=s(X_);sfe=n(qxe,"STRONG",{});var qpt=s(sfe);XEo=r(qpt,"mctct"),qpt.forEach(t),zEo=r(qxe," \u2014 "),Yj=n(qxe,"A",{href:!0});var jpt=s(Yj);QEo=r(jpt,"MCTCTModel"),jpt.forEach(t),WEo=r(qxe," (M-CTC-T model)"),qxe.forEach(t),HEo=i(x),z_=n(x,"LI",{});var jxe=s(z_);lfe=n(jxe,"STRONG",{});var Dpt=s(lfe);UEo=r(Dpt,"megatron-bert"),Dpt.forEach(t),JEo=r(jxe," \u2014 "),Kj=n(jxe,"A",{href:!0});var Gpt=s(Kj);YEo=r(Gpt,"MegatronBertModel"),Gpt.forEach(t),KEo=r(jxe," (Megatron-BERT model)"),jxe.forEach(t),ZEo=i(x),Q_=n(x,"LI",{});var Dxe=s(Q_);ife=n(Dxe,"STRONG",{});var Opt=s(ife);eCo=r(Opt,"mobilebert"),Opt.forEach(t),oCo=r(Dxe," \u2014 "),Zj=n(Dxe,"A",{href:!0});var Vpt=s(Zj);rCo=r(Vpt,"MobileBertModel"),Vpt.forEach(t),tCo=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),aCo=i(x),W_=n(x,"LI",{});var Gxe=s(W_);dfe=n(Gxe,"STRONG",{});var Xpt=s(dfe);nCo=r(Xpt,"mobilevit"),Xpt.forEach(t),sCo=r(Gxe," \u2014 "),eD=n(Gxe,"A",{href:!0});var zpt=s(eD);lCo=r(zpt,"MobileViTModel"),zpt.forEach(t),iCo=r(Gxe," (MobileViT model)"),Gxe.forEach(t),dCo=i(x),H_=n(x,"LI",{});var Oxe=s(H_);cfe=n(Oxe,"STRONG",{});var Qpt=s(cfe);cCo=r(Qpt,"mpnet"),Qpt.forEach(t),fCo=r(Oxe," \u2014 "),oD=n(Oxe,"A",{href:!0});var Wpt=s(oD);mCo=r(Wpt,"MPNetModel"),Wpt.forEach(t),gCo=r(Oxe," (MPNet model)"),Oxe.forEach(t),hCo=i(x),U_=n(x,"LI",{});var Vxe=s(U_);ffe=n(Vxe,"STRONG",{});var Hpt=s(ffe);pCo=r(Hpt,"mt5"),Hpt.forEach(t),_Co=r(Vxe," \u2014 "),rD=n(Vxe,"A",{href:!0});var Upt=s(rD);uCo=r(Upt,"MT5Model"),Upt.forEach(t),bCo=r(Vxe," (MT5 model)"),Vxe.forEach(t),vCo=i(x),J_=n(x,"LI",{});var Xxe=s(J_);mfe=n(Xxe,"STRONG",{});var Jpt=s(mfe);FCo=r(Jpt,"mvp"),Jpt.forEach(t),TCo=r(Xxe," \u2014 "),tD=n(Xxe,"A",{href:!0});var Ypt=s(tD);MCo=r(Ypt,"MvpModel"),Ypt.forEach(t),ECo=r(Xxe," (MVP model)"),Xxe.forEach(t),CCo=i(x),Y_=n(x,"LI",{});var zxe=s(Y_);gfe=n(zxe,"STRONG",{});var Kpt=s(gfe);wCo=r(Kpt,"nezha"),Kpt.forEach(t),ACo=r(zxe," \u2014 "),aD=n(zxe,"A",{href:!0});var Zpt=s(aD);LCo=r(Zpt,"NezhaModel"),Zpt.forEach(t),yCo=r(zxe," (Nezha model)"),zxe.forEach(t),xCo=i(x),K_=n(x,"LI",{});var Qxe=s(K_);hfe=n(Qxe,"STRONG",{});var e_t=s(hfe);$Co=r(e_t,"nystromformer"),e_t.forEach(t),kCo=r(Qxe," \u2014 "),nD=n(Qxe,"A",{href:!0});var o_t=s(nD);SCo=r(o_t,"NystromformerModel"),o_t.forEach(t),RCo=r(Qxe," (Nystr\xF6mformer model)"),Qxe.forEach(t),PCo=i(x),Z_=n(x,"LI",{});var Wxe=s(Z_);pfe=n(Wxe,"STRONG",{});var r_t=s(pfe);BCo=r(r_t,"openai-gpt"),r_t.forEach(t),ICo=r(Wxe," \u2014 "),sD=n(Wxe,"A",{href:!0});var t_t=s(sD);NCo=r(t_t,"OpenAIGPTModel"),t_t.forEach(t),qCo=r(Wxe," (OpenAI GPT model)"),Wxe.forEach(t),jCo=i(x),eu=n(x,"LI",{});var Hxe=s(eu);_fe=n(Hxe,"STRONG",{});var a_t=s(_fe);DCo=r(a_t,"opt"),a_t.forEach(t),GCo=r(Hxe," \u2014 "),lD=n(Hxe,"A",{href:!0});var n_t=s(lD);OCo=r(n_t,"OPTModel"),n_t.forEach(t),VCo=r(Hxe," (OPT model)"),Hxe.forEach(t),XCo=i(x),ou=n(x,"LI",{});var Uxe=s(ou);ufe=n(Uxe,"STRONG",{});var s_t=s(ufe);zCo=r(s_t,"pegasus"),s_t.forEach(t),QCo=r(Uxe," \u2014 "),iD=n(Uxe,"A",{href:!0});var l_t=s(iD);WCo=r(l_t,"PegasusModel"),l_t.forEach(t),HCo=r(Uxe," (Pegasus model)"),Uxe.forEach(t),UCo=i(x),ru=n(x,"LI",{});var Jxe=s(ru);bfe=n(Jxe,"STRONG",{});var i_t=s(bfe);JCo=r(i_t,"perceiver"),i_t.forEach(t),YCo=r(Jxe," \u2014 "),dD=n(Jxe,"A",{href:!0});var d_t=s(dD);KCo=r(d_t,"PerceiverModel"),d_t.forEach(t),ZCo=r(Jxe," (Perceiver model)"),Jxe.forEach(t),e3o=i(x),tu=n(x,"LI",{});var Yxe=s(tu);vfe=n(Yxe,"STRONG",{});var c_t=s(vfe);o3o=r(c_t,"plbart"),c_t.forEach(t),r3o=r(Yxe," \u2014 "),cD=n(Yxe,"A",{href:!0});var f_t=s(cD);t3o=r(f_t,"PLBartModel"),f_t.forEach(t),a3o=r(Yxe," (PLBart model)"),Yxe.forEach(t),n3o=i(x),au=n(x,"LI",{});var Kxe=s(au);Ffe=n(Kxe,"STRONG",{});var m_t=s(Ffe);s3o=r(m_t,"poolformer"),m_t.forEach(t),l3o=r(Kxe," \u2014 "),fD=n(Kxe,"A",{href:!0});var g_t=s(fD);i3o=r(g_t,"PoolFormerModel"),g_t.forEach(t),d3o=r(Kxe," (PoolFormer model)"),Kxe.forEach(t),c3o=i(x),nu=n(x,"LI",{});var Zxe=s(nu);Tfe=n(Zxe,"STRONG",{});var h_t=s(Tfe);f3o=r(h_t,"prophetnet"),h_t.forEach(t),m3o=r(Zxe," \u2014 "),mD=n(Zxe,"A",{href:!0});var p_t=s(mD);g3o=r(p_t,"ProphetNetModel"),p_t.forEach(t),h3o=r(Zxe," (ProphetNet model)"),Zxe.forEach(t),p3o=i(x),su=n(x,"LI",{});var e$e=s(su);Mfe=n(e$e,"STRONG",{});var __t=s(Mfe);_3o=r(__t,"qdqbert"),__t.forEach(t),u3o=r(e$e," \u2014 "),gD=n(e$e,"A",{href:!0});var u_t=s(gD);b3o=r(u_t,"QDQBertModel"),u_t.forEach(t),v3o=r(e$e," (QDQBert model)"),e$e.forEach(t),F3o=i(x),lu=n(x,"LI",{});var o$e=s(lu);Efe=n(o$e,"STRONG",{});var b_t=s(Efe);T3o=r(b_t,"reformer"),b_t.forEach(t),M3o=r(o$e," \u2014 "),hD=n(o$e,"A",{href:!0});var v_t=s(hD);E3o=r(v_t,"ReformerModel"),v_t.forEach(t),C3o=r(o$e," (Reformer model)"),o$e.forEach(t),w3o=i(x),iu=n(x,"LI",{});var r$e=s(iu);Cfe=n(r$e,"STRONG",{});var F_t=s(Cfe);A3o=r(F_t,"regnet"),F_t.forEach(t),L3o=r(r$e," \u2014 "),pD=n(r$e,"A",{href:!0});var T_t=s(pD);y3o=r(T_t,"RegNetModel"),T_t.forEach(t),x3o=r(r$e," (RegNet model)"),r$e.forEach(t),$3o=i(x),du=n(x,"LI",{});var t$e=s(du);wfe=n(t$e,"STRONG",{});var M_t=s(wfe);k3o=r(M_t,"rembert"),M_t.forEach(t),S3o=r(t$e," \u2014 "),_D=n(t$e,"A",{href:!0});var E_t=s(_D);R3o=r(E_t,"RemBertModel"),E_t.forEach(t),P3o=r(t$e," (RemBERT model)"),t$e.forEach(t),B3o=i(x),cu=n(x,"LI",{});var a$e=s(cu);Afe=n(a$e,"STRONG",{});var C_t=s(Afe);I3o=r(C_t,"resnet"),C_t.forEach(t),N3o=r(a$e," \u2014 "),uD=n(a$e,"A",{href:!0});var w_t=s(uD);q3o=r(w_t,"ResNetModel"),w_t.forEach(t),j3o=r(a$e," (ResNet model)"),a$e.forEach(t),D3o=i(x),fu=n(x,"LI",{});var n$e=s(fu);Lfe=n(n$e,"STRONG",{});var A_t=s(Lfe);G3o=r(A_t,"retribert"),A_t.forEach(t),O3o=r(n$e," \u2014 "),bD=n(n$e,"A",{href:!0});var L_t=s(bD);V3o=r(L_t,"RetriBertModel"),L_t.forEach(t),X3o=r(n$e," (RetriBERT model)"),n$e.forEach(t),z3o=i(x),mu=n(x,"LI",{});var s$e=s(mu);yfe=n(s$e,"STRONG",{});var y_t=s(yfe);Q3o=r(y_t,"roberta"),y_t.forEach(t),W3o=r(s$e," \u2014 "),vD=n(s$e,"A",{href:!0});var x_t=s(vD);H3o=r(x_t,"RobertaModel"),x_t.forEach(t),U3o=r(s$e," (RoBERTa model)"),s$e.forEach(t),J3o=i(x),gu=n(x,"LI",{});var l$e=s(gu);xfe=n(l$e,"STRONG",{});var $_t=s(xfe);Y3o=r($_t,"roformer"),$_t.forEach(t),K3o=r(l$e," \u2014 "),FD=n(l$e,"A",{href:!0});var k_t=s(FD);Z3o=r(k_t,"RoFormerModel"),k_t.forEach(t),e5o=r(l$e," (RoFormer model)"),l$e.forEach(t),o5o=i(x),hu=n(x,"LI",{});var i$e=s(hu);$fe=n(i$e,"STRONG",{});var S_t=s($fe);r5o=r(S_t,"segformer"),S_t.forEach(t),t5o=r(i$e," \u2014 "),TD=n(i$e,"A",{href:!0});var R_t=s(TD);a5o=r(R_t,"SegformerModel"),R_t.forEach(t),n5o=r(i$e," (SegFormer model)"),i$e.forEach(t),s5o=i(x),pu=n(x,"LI",{});var d$e=s(pu);kfe=n(d$e,"STRONG",{});var P_t=s(kfe);l5o=r(P_t,"sew"),P_t.forEach(t),i5o=r(d$e," \u2014 "),MD=n(d$e,"A",{href:!0});var B_t=s(MD);d5o=r(B_t,"SEWModel"),B_t.forEach(t),c5o=r(d$e," (SEW model)"),d$e.forEach(t),f5o=i(x),_u=n(x,"LI",{});var c$e=s(_u);Sfe=n(c$e,"STRONG",{});var I_t=s(Sfe);m5o=r(I_t,"sew-d"),I_t.forEach(t),g5o=r(c$e," \u2014 "),ED=n(c$e,"A",{href:!0});var N_t=s(ED);h5o=r(N_t,"SEWDModel"),N_t.forEach(t),p5o=r(c$e," (SEW-D model)"),c$e.forEach(t),_5o=i(x),uu=n(x,"LI",{});var f$e=s(uu);Rfe=n(f$e,"STRONG",{});var q_t=s(Rfe);u5o=r(q_t,"speech_to_text"),q_t.forEach(t),b5o=r(f$e," \u2014 "),CD=n(f$e,"A",{href:!0});var j_t=s(CD);v5o=r(j_t,"Speech2TextModel"),j_t.forEach(t),F5o=r(f$e," (Speech2Text model)"),f$e.forEach(t),T5o=i(x),bu=n(x,"LI",{});var m$e=s(bu);Pfe=n(m$e,"STRONG",{});var D_t=s(Pfe);M5o=r(D_t,"splinter"),D_t.forEach(t),E5o=r(m$e," \u2014 "),wD=n(m$e,"A",{href:!0});var G_t=s(wD);C5o=r(G_t,"SplinterModel"),G_t.forEach(t),w5o=r(m$e," (Splinter model)"),m$e.forEach(t),A5o=i(x),vu=n(x,"LI",{});var g$e=s(vu);Bfe=n(g$e,"STRONG",{});var O_t=s(Bfe);L5o=r(O_t,"squeezebert"),O_t.forEach(t),y5o=r(g$e," \u2014 "),AD=n(g$e,"A",{href:!0});var V_t=s(AD);x5o=r(V_t,"SqueezeBertModel"),V_t.forEach(t),$5o=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),k5o=i(x),Fu=n(x,"LI",{});var h$e=s(Fu);Ife=n(h$e,"STRONG",{});var X_t=s(Ife);S5o=r(X_t,"swin"),X_t.forEach(t),R5o=r(h$e," \u2014 "),LD=n(h$e,"A",{href:!0});var z_t=s(LD);P5o=r(z_t,"SwinModel"),z_t.forEach(t),B5o=r(h$e," (Swin Transformer model)"),h$e.forEach(t),I5o=i(x),Tu=n(x,"LI",{});var p$e=s(Tu);Nfe=n(p$e,"STRONG",{});var Q_t=s(Nfe);N5o=r(Q_t,"t5"),Q_t.forEach(t),q5o=r(p$e," \u2014 "),yD=n(p$e,"A",{href:!0});var W_t=s(yD);j5o=r(W_t,"T5Model"),W_t.forEach(t),D5o=r(p$e," (T5 model)"),p$e.forEach(t),G5o=i(x),Mu=n(x,"LI",{});var _$e=s(Mu);qfe=n(_$e,"STRONG",{});var H_t=s(qfe);O5o=r(H_t,"tapas"),H_t.forEach(t),V5o=r(_$e," \u2014 "),xD=n(_$e,"A",{href:!0});var U_t=s(xD);X5o=r(U_t,"TapasModel"),U_t.forEach(t),z5o=r(_$e," (TAPAS model)"),_$e.forEach(t),Q5o=i(x),Eu=n(x,"LI",{});var u$e=s(Eu);jfe=n(u$e,"STRONG",{});var J_t=s(jfe);W5o=r(J_t,"trajectory_transformer"),J_t.forEach(t),H5o=r(u$e," \u2014 "),$D=n(u$e,"A",{href:!0});var Y_t=s($D);U5o=r(Y_t,"TrajectoryTransformerModel"),Y_t.forEach(t),J5o=r(u$e," (Trajectory Transformer model)"),u$e.forEach(t),Y5o=i(x),Cu=n(x,"LI",{});var b$e=s(Cu);Dfe=n(b$e,"STRONG",{});var K_t=s(Dfe);K5o=r(K_t,"transfo-xl"),K_t.forEach(t),Z5o=r(b$e," \u2014 "),kD=n(b$e,"A",{href:!0});var Z_t=s(kD);e0o=r(Z_t,"TransfoXLModel"),Z_t.forEach(t),o0o=r(b$e," (Transformer-XL model)"),b$e.forEach(t),r0o=i(x),wu=n(x,"LI",{});var v$e=s(wu);Gfe=n(v$e,"STRONG",{});var eut=s(Gfe);t0o=r(eut,"unispeech"),eut.forEach(t),a0o=r(v$e," \u2014 "),SD=n(v$e,"A",{href:!0});var out=s(SD);n0o=r(out,"UniSpeechModel"),out.forEach(t),s0o=r(v$e," (UniSpeech model)"),v$e.forEach(t),l0o=i(x),Au=n(x,"LI",{});var F$e=s(Au);Ofe=n(F$e,"STRONG",{});var rut=s(Ofe);i0o=r(rut,"unispeech-sat"),rut.forEach(t),d0o=r(F$e," \u2014 "),RD=n(F$e,"A",{href:!0});var tut=s(RD);c0o=r(tut,"UniSpeechSatModel"),tut.forEach(t),f0o=r(F$e," (UniSpeechSat model)"),F$e.forEach(t),m0o=i(x),Lu=n(x,"LI",{});var T$e=s(Lu);Vfe=n(T$e,"STRONG",{});var aut=s(Vfe);g0o=r(aut,"van"),aut.forEach(t),h0o=r(T$e," \u2014 "),PD=n(T$e,"A",{href:!0});var nut=s(PD);p0o=r(nut,"VanModel"),nut.forEach(t),_0o=r(T$e," (VAN model)"),T$e.forEach(t),u0o=i(x),yu=n(x,"LI",{});var M$e=s(yu);Xfe=n(M$e,"STRONG",{});var sut=s(Xfe);b0o=r(sut,"vilt"),sut.forEach(t),v0o=r(M$e," \u2014 "),BD=n(M$e,"A",{href:!0});var lut=s(BD);F0o=r(lut,"ViltModel"),lut.forEach(t),T0o=r(M$e," (ViLT model)"),M$e.forEach(t),M0o=i(x),xu=n(x,"LI",{});var E$e=s(xu);zfe=n(E$e,"STRONG",{});var iut=s(zfe);E0o=r(iut,"vision-text-dual-encoder"),iut.forEach(t),C0o=r(E$e," \u2014 "),ID=n(E$e,"A",{href:!0});var dut=s(ID);w0o=r(dut,"VisionTextDualEncoderModel"),dut.forEach(t),A0o=r(E$e," (VisionTextDualEncoder model)"),E$e.forEach(t),L0o=i(x),$u=n(x,"LI",{});var C$e=s($u);Qfe=n(C$e,"STRONG",{});var cut=s(Qfe);y0o=r(cut,"visual_bert"),cut.forEach(t),x0o=r(C$e," \u2014 "),ND=n(C$e,"A",{href:!0});var fut=s(ND);$0o=r(fut,"VisualBertModel"),fut.forEach(t),k0o=r(C$e," (VisualBERT model)"),C$e.forEach(t),S0o=i(x),ku=n(x,"LI",{});var w$e=s(ku);Wfe=n(w$e,"STRONG",{});var mut=s(Wfe);R0o=r(mut,"vit"),mut.forEach(t),P0o=r(w$e," \u2014 "),qD=n(w$e,"A",{href:!0});var gut=s(qD);B0o=r(gut,"ViTModel"),gut.forEach(t),I0o=r(w$e," (ViT model)"),w$e.forEach(t),N0o=i(x),Su=n(x,"LI",{});var A$e=s(Su);Hfe=n(A$e,"STRONG",{});var hut=s(Hfe);q0o=r(hut,"vit_mae"),hut.forEach(t),j0o=r(A$e," \u2014 "),jD=n(A$e,"A",{href:!0});var put=s(jD);D0o=r(put,"ViTMAEModel"),put.forEach(t),G0o=r(A$e," (ViTMAE model)"),A$e.forEach(t),O0o=i(x),Ru=n(x,"LI",{});var L$e=s(Ru);Ufe=n(L$e,"STRONG",{});var _ut=s(Ufe);V0o=r(_ut,"wav2vec2"),_ut.forEach(t),X0o=r(L$e," \u2014 "),DD=n(L$e,"A",{href:!0});var uut=s(DD);z0o=r(uut,"Wav2Vec2Model"),uut.forEach(t),Q0o=r(L$e," (Wav2Vec2 model)"),L$e.forEach(t),W0o=i(x),Pu=n(x,"LI",{});var y$e=s(Pu);Jfe=n(y$e,"STRONG",{});var but=s(Jfe);H0o=r(but,"wav2vec2-conformer"),but.forEach(t),U0o=r(y$e," \u2014 "),GD=n(y$e,"A",{href:!0});var vut=s(GD);J0o=r(vut,"Wav2Vec2ConformerModel"),vut.forEach(t),Y0o=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),K0o=i(x),Bu=n(x,"LI",{});var x$e=s(Bu);Yfe=n(x$e,"STRONG",{});var Fut=s(Yfe);Z0o=r(Fut,"wavlm"),Fut.forEach(t),ewo=r(x$e," \u2014 "),OD=n(x$e,"A",{href:!0});var Tut=s(OD);owo=r(Tut,"WavLMModel"),Tut.forEach(t),rwo=r(x$e," (WavLM model)"),x$e.forEach(t),two=i(x),Iu=n(x,"LI",{});var $$e=s(Iu);Kfe=n($$e,"STRONG",{});var Mut=s(Kfe);awo=r(Mut,"xglm"),Mut.forEach(t),nwo=r($$e," \u2014 "),VD=n($$e,"A",{href:!0});var Eut=s(VD);swo=r(Eut,"XGLMModel"),Eut.forEach(t),lwo=r($$e," (XGLM model)"),$$e.forEach(t),iwo=i(x),Nu=n(x,"LI",{});var k$e=s(Nu);Zfe=n(k$e,"STRONG",{});var Cut=s(Zfe);dwo=r(Cut,"xlm"),Cut.forEach(t),cwo=r(k$e," \u2014 "),XD=n(k$e,"A",{href:!0});var wut=s(XD);fwo=r(wut,"XLMModel"),wut.forEach(t),mwo=r(k$e," (XLM model)"),k$e.forEach(t),gwo=i(x),qu=n(x,"LI",{});var S$e=s(qu);eme=n(S$e,"STRONG",{});var Aut=s(eme);hwo=r(Aut,"xlm-prophetnet"),Aut.forEach(t),pwo=r(S$e," \u2014 "),zD=n(S$e,"A",{href:!0});var Lut=s(zD);_wo=r(Lut,"XLMProphetNetModel"),Lut.forEach(t),uwo=r(S$e," (XLM-ProphetNet model)"),S$e.forEach(t),bwo=i(x),ju=n(x,"LI",{});var R$e=s(ju);ome=n(R$e,"STRONG",{});var yut=s(ome);vwo=r(yut,"xlm-roberta"),yut.forEach(t),Fwo=r(R$e," \u2014 "),QD=n(R$e,"A",{href:!0});var xut=s(QD);Two=r(xut,"XLMRobertaModel"),xut.forEach(t),Mwo=r(R$e," (XLM-RoBERTa model)"),R$e.forEach(t),Ewo=i(x),Du=n(x,"LI",{});var P$e=s(Du);rme=n(P$e,"STRONG",{});var $ut=s(rme);Cwo=r($ut,"xlm-roberta-xl"),$ut.forEach(t),wwo=r(P$e," \u2014 "),WD=n(P$e,"A",{href:!0});var kut=s(WD);Awo=r(kut,"XLMRobertaXLModel"),kut.forEach(t),Lwo=r(P$e," (XLM-RoBERTa-XL model)"),P$e.forEach(t),ywo=i(x),Gu=n(x,"LI",{});var B$e=s(Gu);tme=n(B$e,"STRONG",{});var Sut=s(tme);xwo=r(Sut,"xlnet"),Sut.forEach(t),$wo=r(B$e," \u2014 "),HD=n(B$e,"A",{href:!0});var Rut=s(HD);kwo=r(Rut,"XLNetModel"),Rut.forEach(t),Swo=r(B$e," (XLNet model)"),B$e.forEach(t),Rwo=i(x),Ou=n(x,"LI",{});var I$e=s(Ou);ame=n(I$e,"STRONG",{});var Put=s(ame);Pwo=r(Put,"yolos"),Put.forEach(t),Bwo=r(I$e," \u2014 "),UD=n(I$e,"A",{href:!0});var But=s(UD);Iwo=r(But,"YolosModel"),But.forEach(t),Nwo=r(I$e," (YOLOS model)"),I$e.forEach(t),qwo=i(x),Vu=n(x,"LI",{});var N$e=s(Vu);nme=n(N$e,"STRONG",{});var Iut=s(nme);jwo=r(Iut,"yoso"),Iut.forEach(t),Dwo=r(N$e," \u2014 "),JD=n(N$e,"A",{href:!0});var Nut=s(JD);Gwo=r(Nut,"YosoModel"),Nut.forEach(t),Owo=r(N$e," (YOSO model)"),N$e.forEach(t),x.forEach(t),Vwo=i(sa),Xu=n(sa,"P",{});var q$e=s(Xu);Xwo=r(q$e,"The model is set in evaluation mode by default using "),sme=n(q$e,"CODE",{});var qut=s(sme);zwo=r(qut,"model.eval()"),qut.forEach(t),Qwo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lme=n(q$e,"CODE",{});var jut=s(lme);Wwo=r(jut,"model.train()"),jut.forEach(t),q$e.forEach(t),Hwo=i(sa),T(zu.$$.fragment,sa),sa.forEach(t),ol.forEach(t),tXe=i(f),Vi=n(f,"H2",{class:!0});var dQe=s(Vi);Qu=n(dQe,"A",{id:!0,class:!0,href:!0});var Dut=s(Qu);ime=n(Dut,"SPAN",{});var Gut=s(ime);T(RL.$$.fragment,Gut),Gut.forEach(t),Dut.forEach(t),Uwo=i(dQe),dme=n(dQe,"SPAN",{});var Out=s(dme);Jwo=r(Out,"AutoModelForPreTraining"),Out.forEach(t),dQe.forEach(t),aXe=i(f),$o=n(f,"DIV",{class:!0});var rl=s($o);T(PL.$$.fragment,rl),Ywo=i(rl),Xi=n(rl,"P",{});var Lre=s(Xi);Kwo=r(Lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YD=n(Lre,"A",{href:!0});var Vut=s(YD);Zwo=r(Vut,"from_pretrained()"),Vut.forEach(t),eAo=r(Lre," class method or the "),KD=n(Lre,"A",{href:!0});var Xut=s(KD);oAo=r(Xut,"from_config()"),Xut.forEach(t),rAo=r(Lre,` class
method.`),Lre.forEach(t),tAo=i(rl),BL=n(rl,"P",{});var cQe=s(BL);aAo=r(cQe,"This class cannot be instantiated directly using "),cme=n(cQe,"CODE",{});var zut=s(cme);nAo=r(zut,"__init__()"),zut.forEach(t),sAo=r(cQe," (throws an error)."),cQe.forEach(t),lAo=i(rl),it=n(rl,"DIV",{class:!0});var iA=s(it);T(IL.$$.fragment,iA),iAo=i(iA),fme=n(iA,"P",{});var Qut=s(fme);dAo=r(Qut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Qut.forEach(t),cAo=i(iA),zi=n(iA,"P",{});var yre=s(zi);fAo=r(yre,`Note:
Loading a model from its configuration file does `),mme=n(yre,"STRONG",{});var Wut=s(mme);mAo=r(Wut,"not"),Wut.forEach(t),gAo=r(yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZD=n(yre,"A",{href:!0});var Hut=s(ZD);hAo=r(Hut,"from_pretrained()"),Hut.forEach(t),pAo=r(yre," to load the model weights."),yre.forEach(t),_Ao=i(iA),T(Wu.$$.fragment,iA),iA.forEach(t),uAo=i(rl),Ye=n(rl,"DIV",{class:!0});var la=s(Ye);T(NL.$$.fragment,la),bAo=i(la),gme=n(la,"P",{});var Uut=s(gme);vAo=r(Uut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Uut.forEach(t),FAo=i(la),Na=n(la,"P",{});var dA=s(Na);TAo=r(dA,"The model class to instantiate is selected based on the "),hme=n(dA,"CODE",{});var Jut=s(hme);MAo=r(Jut,"model_type"),Jut.forEach(t),EAo=r(dA,` property of the config object (either
passed as an argument or loaded from `),pme=n(dA,"CODE",{});var Yut=s(pme);CAo=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),wAo=r(dA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_me=n(dA,"CODE",{});var Kut=s(_me);AAo=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),LAo=r(dA,":"),dA.forEach(t),yAo=i(la),G=n(la,"UL",{});var O=s(G);Hu=n(O,"LI",{});var j$e=s(Hu);ume=n(j$e,"STRONG",{});var Zut=s(ume);xAo=r(Zut,"albert"),Zut.forEach(t),$Ao=r(j$e," \u2014 "),eG=n(j$e,"A",{href:!0});var e2t=s(eG);kAo=r(e2t,"AlbertForPreTraining"),e2t.forEach(t),SAo=r(j$e," (ALBERT model)"),j$e.forEach(t),RAo=i(O),Uu=n(O,"LI",{});var D$e=s(Uu);bme=n(D$e,"STRONG",{});var o2t=s(bme);PAo=r(o2t,"bart"),o2t.forEach(t),BAo=r(D$e," \u2014 "),oG=n(D$e,"A",{href:!0});var r2t=s(oG);IAo=r(r2t,"BartForConditionalGeneration"),r2t.forEach(t),NAo=r(D$e," (BART model)"),D$e.forEach(t),qAo=i(O),Ju=n(O,"LI",{});var G$e=s(Ju);vme=n(G$e,"STRONG",{});var t2t=s(vme);jAo=r(t2t,"bert"),t2t.forEach(t),DAo=r(G$e," \u2014 "),rG=n(G$e,"A",{href:!0});var a2t=s(rG);GAo=r(a2t,"BertForPreTraining"),a2t.forEach(t),OAo=r(G$e," (BERT model)"),G$e.forEach(t),VAo=i(O),Yu=n(O,"LI",{});var O$e=s(Yu);Fme=n(O$e,"STRONG",{});var n2t=s(Fme);XAo=r(n2t,"big_bird"),n2t.forEach(t),zAo=r(O$e," \u2014 "),tG=n(O$e,"A",{href:!0});var s2t=s(tG);QAo=r(s2t,"BigBirdForPreTraining"),s2t.forEach(t),WAo=r(O$e," (BigBird model)"),O$e.forEach(t),HAo=i(O),Ku=n(O,"LI",{});var V$e=s(Ku);Tme=n(V$e,"STRONG",{});var l2t=s(Tme);UAo=r(l2t,"bloom"),l2t.forEach(t),JAo=r(V$e," \u2014 "),aG=n(V$e,"A",{href:!0});var i2t=s(aG);YAo=r(i2t,"BloomForCausalLM"),i2t.forEach(t),KAo=r(V$e," (BLOOM model)"),V$e.forEach(t),ZAo=i(O),Zu=n(O,"LI",{});var X$e=s(Zu);Mme=n(X$e,"STRONG",{});var d2t=s(Mme);e6o=r(d2t,"camembert"),d2t.forEach(t),o6o=r(X$e," \u2014 "),nG=n(X$e,"A",{href:!0});var c2t=s(nG);r6o=r(c2t,"CamembertForMaskedLM"),c2t.forEach(t),t6o=r(X$e," (CamemBERT model)"),X$e.forEach(t),a6o=i(O),e2=n(O,"LI",{});var z$e=s(e2);Eme=n(z$e,"STRONG",{});var f2t=s(Eme);n6o=r(f2t,"ctrl"),f2t.forEach(t),s6o=r(z$e," \u2014 "),sG=n(z$e,"A",{href:!0});var m2t=s(sG);l6o=r(m2t,"CTRLLMHeadModel"),m2t.forEach(t),i6o=r(z$e," (CTRL model)"),z$e.forEach(t),d6o=i(O),o2=n(O,"LI",{});var Q$e=s(o2);Cme=n(Q$e,"STRONG",{});var g2t=s(Cme);c6o=r(g2t,"data2vec-text"),g2t.forEach(t),f6o=r(Q$e," \u2014 "),lG=n(Q$e,"A",{href:!0});var h2t=s(lG);m6o=r(h2t,"Data2VecTextForMaskedLM"),h2t.forEach(t),g6o=r(Q$e," (Data2VecText model)"),Q$e.forEach(t),h6o=i(O),r2=n(O,"LI",{});var W$e=s(r2);wme=n(W$e,"STRONG",{});var p2t=s(wme);p6o=r(p2t,"deberta"),p2t.forEach(t),_6o=r(W$e," \u2014 "),iG=n(W$e,"A",{href:!0});var _2t=s(iG);u6o=r(_2t,"DebertaForMaskedLM"),_2t.forEach(t),b6o=r(W$e," (DeBERTa model)"),W$e.forEach(t),v6o=i(O),t2=n(O,"LI",{});var H$e=s(t2);Ame=n(H$e,"STRONG",{});var u2t=s(Ame);F6o=r(u2t,"deberta-v2"),u2t.forEach(t),T6o=r(H$e," \u2014 "),dG=n(H$e,"A",{href:!0});var b2t=s(dG);M6o=r(b2t,"DebertaV2ForMaskedLM"),b2t.forEach(t),E6o=r(H$e," (DeBERTa-v2 model)"),H$e.forEach(t),C6o=i(O),a2=n(O,"LI",{});var U$e=s(a2);Lme=n(U$e,"STRONG",{});var v2t=s(Lme);w6o=r(v2t,"distilbert"),v2t.forEach(t),A6o=r(U$e," \u2014 "),cG=n(U$e,"A",{href:!0});var F2t=s(cG);L6o=r(F2t,"DistilBertForMaskedLM"),F2t.forEach(t),y6o=r(U$e," (DistilBERT model)"),U$e.forEach(t),x6o=i(O),n2=n(O,"LI",{});var J$e=s(n2);yme=n(J$e,"STRONG",{});var T2t=s(yme);$6o=r(T2t,"electra"),T2t.forEach(t),k6o=r(J$e," \u2014 "),fG=n(J$e,"A",{href:!0});var M2t=s(fG);S6o=r(M2t,"ElectraForPreTraining"),M2t.forEach(t),R6o=r(J$e," (ELECTRA model)"),J$e.forEach(t),P6o=i(O),s2=n(O,"LI",{});var Y$e=s(s2);xme=n(Y$e,"STRONG",{});var E2t=s(xme);B6o=r(E2t,"flaubert"),E2t.forEach(t),I6o=r(Y$e," \u2014 "),mG=n(Y$e,"A",{href:!0});var C2t=s(mG);N6o=r(C2t,"FlaubertWithLMHeadModel"),C2t.forEach(t),q6o=r(Y$e," (FlauBERT model)"),Y$e.forEach(t),j6o=i(O),l2=n(O,"LI",{});var K$e=s(l2);$me=n(K$e,"STRONG",{});var w2t=s($me);D6o=r(w2t,"flava"),w2t.forEach(t),G6o=r(K$e," \u2014 "),gG=n(K$e,"A",{href:!0});var A2t=s(gG);O6o=r(A2t,"FlavaForPreTraining"),A2t.forEach(t),V6o=r(K$e," (FLAVA model)"),K$e.forEach(t),X6o=i(O),i2=n(O,"LI",{});var Z$e=s(i2);kme=n(Z$e,"STRONG",{});var L2t=s(kme);z6o=r(L2t,"fnet"),L2t.forEach(t),Q6o=r(Z$e," \u2014 "),hG=n(Z$e,"A",{href:!0});var y2t=s(hG);W6o=r(y2t,"FNetForPreTraining"),y2t.forEach(t),H6o=r(Z$e," (FNet model)"),Z$e.forEach(t),U6o=i(O),d2=n(O,"LI",{});var eke=s(d2);Sme=n(eke,"STRONG",{});var x2t=s(Sme);J6o=r(x2t,"fsmt"),x2t.forEach(t),Y6o=r(eke," \u2014 "),pG=n(eke,"A",{href:!0});var $2t=s(pG);K6o=r($2t,"FSMTForConditionalGeneration"),$2t.forEach(t),Z6o=r(eke," (FairSeq Machine-Translation model)"),eke.forEach(t),eLo=i(O),c2=n(O,"LI",{});var oke=s(c2);Rme=n(oke,"STRONG",{});var k2t=s(Rme);oLo=r(k2t,"funnel"),k2t.forEach(t),rLo=r(oke," \u2014 "),_G=n(oke,"A",{href:!0});var S2t=s(_G);tLo=r(S2t,"FunnelForPreTraining"),S2t.forEach(t),aLo=r(oke," (Funnel Transformer model)"),oke.forEach(t),nLo=i(O),f2=n(O,"LI",{});var rke=s(f2);Pme=n(rke,"STRONG",{});var R2t=s(Pme);sLo=r(R2t,"gpt2"),R2t.forEach(t),lLo=r(rke," \u2014 "),uG=n(rke,"A",{href:!0});var P2t=s(uG);iLo=r(P2t,"GPT2LMHeadModel"),P2t.forEach(t),dLo=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),cLo=i(O),m2=n(O,"LI",{});var tke=s(m2);Bme=n(tke,"STRONG",{});var B2t=s(Bme);fLo=r(B2t,"ibert"),B2t.forEach(t),mLo=r(tke," \u2014 "),bG=n(tke,"A",{href:!0});var I2t=s(bG);gLo=r(I2t,"IBertForMaskedLM"),I2t.forEach(t),hLo=r(tke," (I-BERT model)"),tke.forEach(t),pLo=i(O),g2=n(O,"LI",{});var ake=s(g2);Ime=n(ake,"STRONG",{});var N2t=s(Ime);_Lo=r(N2t,"layoutlm"),N2t.forEach(t),uLo=r(ake," \u2014 "),vG=n(ake,"A",{href:!0});var q2t=s(vG);bLo=r(q2t,"LayoutLMForMaskedLM"),q2t.forEach(t),vLo=r(ake," (LayoutLM model)"),ake.forEach(t),FLo=i(O),h2=n(O,"LI",{});var nke=s(h2);Nme=n(nke,"STRONG",{});var j2t=s(Nme);TLo=r(j2t,"longformer"),j2t.forEach(t),MLo=r(nke," \u2014 "),FG=n(nke,"A",{href:!0});var D2t=s(FG);ELo=r(D2t,"LongformerForMaskedLM"),D2t.forEach(t),CLo=r(nke," (Longformer model)"),nke.forEach(t),wLo=i(O),p2=n(O,"LI",{});var ske=s(p2);qme=n(ske,"STRONG",{});var G2t=s(qme);ALo=r(G2t,"lxmert"),G2t.forEach(t),LLo=r(ske," \u2014 "),TG=n(ske,"A",{href:!0});var O2t=s(TG);yLo=r(O2t,"LxmertForPreTraining"),O2t.forEach(t),xLo=r(ske," (LXMERT model)"),ske.forEach(t),$Lo=i(O),_2=n(O,"LI",{});var lke=s(_2);jme=n(lke,"STRONG",{});var V2t=s(jme);kLo=r(V2t,"megatron-bert"),V2t.forEach(t),SLo=r(lke," \u2014 "),MG=n(lke,"A",{href:!0});var X2t=s(MG);RLo=r(X2t,"MegatronBertForPreTraining"),X2t.forEach(t),PLo=r(lke," (Megatron-BERT model)"),lke.forEach(t),BLo=i(O),u2=n(O,"LI",{});var ike=s(u2);Dme=n(ike,"STRONG",{});var z2t=s(Dme);ILo=r(z2t,"mobilebert"),z2t.forEach(t),NLo=r(ike," \u2014 "),EG=n(ike,"A",{href:!0});var Q2t=s(EG);qLo=r(Q2t,"MobileBertForPreTraining"),Q2t.forEach(t),jLo=r(ike," (MobileBERT model)"),ike.forEach(t),DLo=i(O),b2=n(O,"LI",{});var dke=s(b2);Gme=n(dke,"STRONG",{});var W2t=s(Gme);GLo=r(W2t,"mpnet"),W2t.forEach(t),OLo=r(dke," \u2014 "),CG=n(dke,"A",{href:!0});var H2t=s(CG);VLo=r(H2t,"MPNetForMaskedLM"),H2t.forEach(t),XLo=r(dke," (MPNet model)"),dke.forEach(t),zLo=i(O),v2=n(O,"LI",{});var cke=s(v2);Ome=n(cke,"STRONG",{});var U2t=s(Ome);QLo=r(U2t,"mvp"),U2t.forEach(t),WLo=r(cke," \u2014 "),wG=n(cke,"A",{href:!0});var J2t=s(wG);HLo=r(J2t,"MvpForConditionalGeneration"),J2t.forEach(t),ULo=r(cke," (MVP model)"),cke.forEach(t),JLo=i(O),F2=n(O,"LI",{});var fke=s(F2);Vme=n(fke,"STRONG",{});var Y2t=s(Vme);YLo=r(Y2t,"nezha"),Y2t.forEach(t),KLo=r(fke," \u2014 "),AG=n(fke,"A",{href:!0});var K2t=s(AG);ZLo=r(K2t,"NezhaForPreTraining"),K2t.forEach(t),eyo=r(fke," (Nezha model)"),fke.forEach(t),oyo=i(O),T2=n(O,"LI",{});var mke=s(T2);Xme=n(mke,"STRONG",{});var Z2t=s(Xme);ryo=r(Z2t,"openai-gpt"),Z2t.forEach(t),tyo=r(mke," \u2014 "),LG=n(mke,"A",{href:!0});var e1t=s(LG);ayo=r(e1t,"OpenAIGPTLMHeadModel"),e1t.forEach(t),nyo=r(mke," (OpenAI GPT model)"),mke.forEach(t),syo=i(O),M2=n(O,"LI",{});var gke=s(M2);zme=n(gke,"STRONG",{});var o1t=s(zme);lyo=r(o1t,"retribert"),o1t.forEach(t),iyo=r(gke," \u2014 "),yG=n(gke,"A",{href:!0});var r1t=s(yG);dyo=r(r1t,"RetriBertModel"),r1t.forEach(t),cyo=r(gke," (RetriBERT model)"),gke.forEach(t),fyo=i(O),E2=n(O,"LI",{});var hke=s(E2);Qme=n(hke,"STRONG",{});var t1t=s(Qme);myo=r(t1t,"roberta"),t1t.forEach(t),gyo=r(hke," \u2014 "),xG=n(hke,"A",{href:!0});var a1t=s(xG);hyo=r(a1t,"RobertaForMaskedLM"),a1t.forEach(t),pyo=r(hke," (RoBERTa model)"),hke.forEach(t),_yo=i(O),C2=n(O,"LI",{});var pke=s(C2);Wme=n(pke,"STRONG",{});var n1t=s(Wme);uyo=r(n1t,"splinter"),n1t.forEach(t),byo=r(pke," \u2014 "),$G=n(pke,"A",{href:!0});var s1t=s($G);vyo=r(s1t,"SplinterForPreTraining"),s1t.forEach(t),Fyo=r(pke," (Splinter model)"),pke.forEach(t),Tyo=i(O),w2=n(O,"LI",{});var _ke=s(w2);Hme=n(_ke,"STRONG",{});var l1t=s(Hme);Myo=r(l1t,"squeezebert"),l1t.forEach(t),Eyo=r(_ke," \u2014 "),kG=n(_ke,"A",{href:!0});var i1t=s(kG);Cyo=r(i1t,"SqueezeBertForMaskedLM"),i1t.forEach(t),wyo=r(_ke," (SqueezeBERT model)"),_ke.forEach(t),Ayo=i(O),A2=n(O,"LI",{});var uke=s(A2);Ume=n(uke,"STRONG",{});var d1t=s(Ume);Lyo=r(d1t,"t5"),d1t.forEach(t),yyo=r(uke," \u2014 "),SG=n(uke,"A",{href:!0});var c1t=s(SG);xyo=r(c1t,"T5ForConditionalGeneration"),c1t.forEach(t),$yo=r(uke," (T5 model)"),uke.forEach(t),kyo=i(O),L2=n(O,"LI",{});var bke=s(L2);Jme=n(bke,"STRONG",{});var f1t=s(Jme);Syo=r(f1t,"tapas"),f1t.forEach(t),Ryo=r(bke," \u2014 "),RG=n(bke,"A",{href:!0});var m1t=s(RG);Pyo=r(m1t,"TapasForMaskedLM"),m1t.forEach(t),Byo=r(bke," (TAPAS model)"),bke.forEach(t),Iyo=i(O),y2=n(O,"LI",{});var vke=s(y2);Yme=n(vke,"STRONG",{});var g1t=s(Yme);Nyo=r(g1t,"transfo-xl"),g1t.forEach(t),qyo=r(vke," \u2014 "),PG=n(vke,"A",{href:!0});var h1t=s(PG);jyo=r(h1t,"TransfoXLLMHeadModel"),h1t.forEach(t),Dyo=r(vke," (Transformer-XL model)"),vke.forEach(t),Gyo=i(O),x2=n(O,"LI",{});var Fke=s(x2);Kme=n(Fke,"STRONG",{});var p1t=s(Kme);Oyo=r(p1t,"unispeech"),p1t.forEach(t),Vyo=r(Fke," \u2014 "),BG=n(Fke,"A",{href:!0});var _1t=s(BG);Xyo=r(_1t,"UniSpeechForPreTraining"),_1t.forEach(t),zyo=r(Fke," (UniSpeech model)"),Fke.forEach(t),Qyo=i(O),$2=n(O,"LI",{});var Tke=s($2);Zme=n(Tke,"STRONG",{});var u1t=s(Zme);Wyo=r(u1t,"unispeech-sat"),u1t.forEach(t),Hyo=r(Tke," \u2014 "),IG=n(Tke,"A",{href:!0});var b1t=s(IG);Uyo=r(b1t,"UniSpeechSatForPreTraining"),b1t.forEach(t),Jyo=r(Tke," (UniSpeechSat model)"),Tke.forEach(t),Yyo=i(O),k2=n(O,"LI",{});var Mke=s(k2);ege=n(Mke,"STRONG",{});var v1t=s(ege);Kyo=r(v1t,"visual_bert"),v1t.forEach(t),Zyo=r(Mke," \u2014 "),NG=n(Mke,"A",{href:!0});var F1t=s(NG);e8o=r(F1t,"VisualBertForPreTraining"),F1t.forEach(t),o8o=r(Mke," (VisualBERT model)"),Mke.forEach(t),r8o=i(O),S2=n(O,"LI",{});var Eke=s(S2);oge=n(Eke,"STRONG",{});var T1t=s(oge);t8o=r(T1t,"vit_mae"),T1t.forEach(t),a8o=r(Eke," \u2014 "),qG=n(Eke,"A",{href:!0});var M1t=s(qG);n8o=r(M1t,"ViTMAEForPreTraining"),M1t.forEach(t),s8o=r(Eke," (ViTMAE model)"),Eke.forEach(t),l8o=i(O),R2=n(O,"LI",{});var Cke=s(R2);rge=n(Cke,"STRONG",{});var E1t=s(rge);i8o=r(E1t,"wav2vec2"),E1t.forEach(t),d8o=r(Cke," \u2014 "),jG=n(Cke,"A",{href:!0});var C1t=s(jG);c8o=r(C1t,"Wav2Vec2ForPreTraining"),C1t.forEach(t),f8o=r(Cke," (Wav2Vec2 model)"),Cke.forEach(t),m8o=i(O),P2=n(O,"LI",{});var wke=s(P2);tge=n(wke,"STRONG",{});var w1t=s(tge);g8o=r(w1t,"wav2vec2-conformer"),w1t.forEach(t),h8o=r(wke," \u2014 "),DG=n(wke,"A",{href:!0});var A1t=s(DG);p8o=r(A1t,"Wav2Vec2ConformerForPreTraining"),A1t.forEach(t),_8o=r(wke," (Wav2Vec2-Conformer model)"),wke.forEach(t),u8o=i(O),B2=n(O,"LI",{});var Ake=s(B2);age=n(Ake,"STRONG",{});var L1t=s(age);b8o=r(L1t,"xlm"),L1t.forEach(t),v8o=r(Ake," \u2014 "),GG=n(Ake,"A",{href:!0});var y1t=s(GG);F8o=r(y1t,"XLMWithLMHeadModel"),y1t.forEach(t),T8o=r(Ake," (XLM model)"),Ake.forEach(t),M8o=i(O),I2=n(O,"LI",{});var Lke=s(I2);nge=n(Lke,"STRONG",{});var x1t=s(nge);E8o=r(x1t,"xlm-roberta"),x1t.forEach(t),C8o=r(Lke," \u2014 "),OG=n(Lke,"A",{href:!0});var $1t=s(OG);w8o=r($1t,"XLMRobertaForMaskedLM"),$1t.forEach(t),A8o=r(Lke," (XLM-RoBERTa model)"),Lke.forEach(t),L8o=i(O),N2=n(O,"LI",{});var yke=s(N2);sge=n(yke,"STRONG",{});var k1t=s(sge);y8o=r(k1t,"xlm-roberta-xl"),k1t.forEach(t),x8o=r(yke," \u2014 "),VG=n(yke,"A",{href:!0});var S1t=s(VG);$8o=r(S1t,"XLMRobertaXLForMaskedLM"),S1t.forEach(t),k8o=r(yke," (XLM-RoBERTa-XL model)"),yke.forEach(t),S8o=i(O),q2=n(O,"LI",{});var xke=s(q2);lge=n(xke,"STRONG",{});var R1t=s(lge);R8o=r(R1t,"xlnet"),R1t.forEach(t),P8o=r(xke," \u2014 "),XG=n(xke,"A",{href:!0});var P1t=s(XG);B8o=r(P1t,"XLNetLMHeadModel"),P1t.forEach(t),I8o=r(xke," (XLNet model)"),xke.forEach(t),O.forEach(t),N8o=i(la),j2=n(la,"P",{});var $ke=s(j2);q8o=r($ke,"The model is set in evaluation mode by default using "),ige=n($ke,"CODE",{});var B1t=s(ige);j8o=r(B1t,"model.eval()"),B1t.forEach(t),D8o=r($ke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dge=n($ke,"CODE",{});var I1t=s(dge);G8o=r(I1t,"model.train()"),I1t.forEach(t),$ke.forEach(t),O8o=i(la),T(D2.$$.fragment,la),la.forEach(t),rl.forEach(t),nXe=i(f),Qi=n(f,"H2",{class:!0});var fQe=s(Qi);G2=n(fQe,"A",{id:!0,class:!0,href:!0});var N1t=s(G2);cge=n(N1t,"SPAN",{});var q1t=s(cge);T(qL.$$.fragment,q1t),q1t.forEach(t),N1t.forEach(t),V8o=i(fQe),fge=n(fQe,"SPAN",{});var j1t=s(fge);X8o=r(j1t,"AutoModelForCausalLM"),j1t.forEach(t),fQe.forEach(t),sXe=i(f),ko=n(f,"DIV",{class:!0});var tl=s(ko);T(jL.$$.fragment,tl),z8o=i(tl),Wi=n(tl,"P",{});var xre=s(Wi);Q8o=r(xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zG=n(xre,"A",{href:!0});var D1t=s(zG);W8o=r(D1t,"from_pretrained()"),D1t.forEach(t),H8o=r(xre," class method or the "),QG=n(xre,"A",{href:!0});var G1t=s(QG);U8o=r(G1t,"from_config()"),G1t.forEach(t),J8o=r(xre,` class
method.`),xre.forEach(t),Y8o=i(tl),DL=n(tl,"P",{});var mQe=s(DL);K8o=r(mQe,"This class cannot be instantiated directly using "),mge=n(mQe,"CODE",{});var O1t=s(mge);Z8o=r(O1t,"__init__()"),O1t.forEach(t),exo=r(mQe," (throws an error)."),mQe.forEach(t),oxo=i(tl),dt=n(tl,"DIV",{class:!0});var cA=s(dt);T(GL.$$.fragment,cA),rxo=i(cA),gge=n(cA,"P",{});var V1t=s(gge);txo=r(V1t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),V1t.forEach(t),axo=i(cA),Hi=n(cA,"P",{});var $re=s(Hi);nxo=r($re,`Note:
Loading a model from its configuration file does `),hge=n($re,"STRONG",{});var X1t=s(hge);sxo=r(X1t,"not"),X1t.forEach(t),lxo=r($re,` load the model weights. It only affects the
model\u2019s configuration. Use `),WG=n($re,"A",{href:!0});var z1t=s(WG);ixo=r(z1t,"from_pretrained()"),z1t.forEach(t),dxo=r($re," to load the model weights."),$re.forEach(t),cxo=i(cA),T(O2.$$.fragment,cA),cA.forEach(t),fxo=i(tl),Ke=n(tl,"DIV",{class:!0});var ia=s(Ke);T(OL.$$.fragment,ia),mxo=i(ia),pge=n(ia,"P",{});var Q1t=s(pge);gxo=r(Q1t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Q1t.forEach(t),hxo=i(ia),qa=n(ia,"P",{});var fA=s(qa);pxo=r(fA,"The model class to instantiate is selected based on the "),_ge=n(fA,"CODE",{});var W1t=s(_ge);_xo=r(W1t,"model_type"),W1t.forEach(t),uxo=r(fA,` property of the config object (either
passed as an argument or loaded from `),uge=n(fA,"CODE",{});var H1t=s(uge);bxo=r(H1t,"pretrained_model_name_or_path"),H1t.forEach(t),vxo=r(fA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bge=n(fA,"CODE",{});var U1t=s(bge);Fxo=r(U1t,"pretrained_model_name_or_path"),U1t.forEach(t),Txo=r(fA,":"),fA.forEach(t),Mxo=i(ia),z=n(ia,"UL",{});var Q=s(z);V2=n(Q,"LI",{});var kke=s(V2);vge=n(kke,"STRONG",{});var J1t=s(vge);Exo=r(J1t,"bart"),J1t.forEach(t),Cxo=r(kke," \u2014 "),HG=n(kke,"A",{href:!0});var Y1t=s(HG);wxo=r(Y1t,"BartForCausalLM"),Y1t.forEach(t),Axo=r(kke," (BART model)"),kke.forEach(t),Lxo=i(Q),X2=n(Q,"LI",{});var Ske=s(X2);Fge=n(Ske,"STRONG",{});var K1t=s(Fge);yxo=r(K1t,"bert"),K1t.forEach(t),xxo=r(Ske," \u2014 "),UG=n(Ske,"A",{href:!0});var Z1t=s(UG);$xo=r(Z1t,"BertLMHeadModel"),Z1t.forEach(t),kxo=r(Ske," (BERT model)"),Ske.forEach(t),Sxo=i(Q),z2=n(Q,"LI",{});var Rke=s(z2);Tge=n(Rke,"STRONG",{});var e4t=s(Tge);Rxo=r(e4t,"bert-generation"),e4t.forEach(t),Pxo=r(Rke," \u2014 "),JG=n(Rke,"A",{href:!0});var o4t=s(JG);Bxo=r(o4t,"BertGenerationDecoder"),o4t.forEach(t),Ixo=r(Rke," (Bert Generation model)"),Rke.forEach(t),Nxo=i(Q),Q2=n(Q,"LI",{});var Pke=s(Q2);Mge=n(Pke,"STRONG",{});var r4t=s(Mge);qxo=r(r4t,"big_bird"),r4t.forEach(t),jxo=r(Pke," \u2014 "),YG=n(Pke,"A",{href:!0});var t4t=s(YG);Dxo=r(t4t,"BigBirdForCausalLM"),t4t.forEach(t),Gxo=r(Pke," (BigBird model)"),Pke.forEach(t),Oxo=i(Q),W2=n(Q,"LI",{});var Bke=s(W2);Ege=n(Bke,"STRONG",{});var a4t=s(Ege);Vxo=r(a4t,"bigbird_pegasus"),a4t.forEach(t),Xxo=r(Bke," \u2014 "),KG=n(Bke,"A",{href:!0});var n4t=s(KG);zxo=r(n4t,"BigBirdPegasusForCausalLM"),n4t.forEach(t),Qxo=r(Bke," (BigBird-Pegasus model)"),Bke.forEach(t),Wxo=i(Q),H2=n(Q,"LI",{});var Ike=s(H2);Cge=n(Ike,"STRONG",{});var s4t=s(Cge);Hxo=r(s4t,"blenderbot"),s4t.forEach(t),Uxo=r(Ike," \u2014 "),ZG=n(Ike,"A",{href:!0});var l4t=s(ZG);Jxo=r(l4t,"BlenderbotForCausalLM"),l4t.forEach(t),Yxo=r(Ike," (Blenderbot model)"),Ike.forEach(t),Kxo=i(Q),U2=n(Q,"LI",{});var Nke=s(U2);wge=n(Nke,"STRONG",{});var i4t=s(wge);Zxo=r(i4t,"blenderbot-small"),i4t.forEach(t),e$o=r(Nke," \u2014 "),eO=n(Nke,"A",{href:!0});var d4t=s(eO);o$o=r(d4t,"BlenderbotSmallForCausalLM"),d4t.forEach(t),r$o=r(Nke," (BlenderbotSmall model)"),Nke.forEach(t),t$o=i(Q),J2=n(Q,"LI",{});var qke=s(J2);Age=n(qke,"STRONG",{});var c4t=s(Age);a$o=r(c4t,"bloom"),c4t.forEach(t),n$o=r(qke," \u2014 "),oO=n(qke,"A",{href:!0});var f4t=s(oO);s$o=r(f4t,"BloomForCausalLM"),f4t.forEach(t),l$o=r(qke," (BLOOM model)"),qke.forEach(t),i$o=i(Q),Y2=n(Q,"LI",{});var jke=s(Y2);Lge=n(jke,"STRONG",{});var m4t=s(Lge);d$o=r(m4t,"camembert"),m4t.forEach(t),c$o=r(jke," \u2014 "),rO=n(jke,"A",{href:!0});var g4t=s(rO);f$o=r(g4t,"CamembertForCausalLM"),g4t.forEach(t),m$o=r(jke," (CamemBERT model)"),jke.forEach(t),g$o=i(Q),K2=n(Q,"LI",{});var Dke=s(K2);yge=n(Dke,"STRONG",{});var h4t=s(yge);h$o=r(h4t,"codegen"),h4t.forEach(t),p$o=r(Dke," \u2014 "),tO=n(Dke,"A",{href:!0});var p4t=s(tO);_$o=r(p4t,"CodeGenForCausalLM"),p4t.forEach(t),u$o=r(Dke," (CodeGen model)"),Dke.forEach(t),b$o=i(Q),Z2=n(Q,"LI",{});var Gke=s(Z2);xge=n(Gke,"STRONG",{});var _4t=s(xge);v$o=r(_4t,"ctrl"),_4t.forEach(t),F$o=r(Gke," \u2014 "),aO=n(Gke,"A",{href:!0});var u4t=s(aO);T$o=r(u4t,"CTRLLMHeadModel"),u4t.forEach(t),M$o=r(Gke," (CTRL model)"),Gke.forEach(t),E$o=i(Q),e1=n(Q,"LI",{});var Oke=s(e1);$ge=n(Oke,"STRONG",{});var b4t=s($ge);C$o=r(b4t,"data2vec-text"),b4t.forEach(t),w$o=r(Oke," \u2014 "),nO=n(Oke,"A",{href:!0});var v4t=s(nO);A$o=r(v4t,"Data2VecTextForCausalLM"),v4t.forEach(t),L$o=r(Oke," (Data2VecText model)"),Oke.forEach(t),y$o=i(Q),o1=n(Q,"LI",{});var Vke=s(o1);kge=n(Vke,"STRONG",{});var F4t=s(kge);x$o=r(F4t,"electra"),F4t.forEach(t),$$o=r(Vke," \u2014 "),sO=n(Vke,"A",{href:!0});var T4t=s(sO);k$o=r(T4t,"ElectraForCausalLM"),T4t.forEach(t),S$o=r(Vke," (ELECTRA model)"),Vke.forEach(t),R$o=i(Q),r1=n(Q,"LI",{});var Xke=s(r1);Sge=n(Xke,"STRONG",{});var M4t=s(Sge);P$o=r(M4t,"gpt2"),M4t.forEach(t),B$o=r(Xke," \u2014 "),lO=n(Xke,"A",{href:!0});var E4t=s(lO);I$o=r(E4t,"GPT2LMHeadModel"),E4t.forEach(t),N$o=r(Xke," (OpenAI GPT-2 model)"),Xke.forEach(t),q$o=i(Q),t1=n(Q,"LI",{});var zke=s(t1);Rge=n(zke,"STRONG",{});var C4t=s(Rge);j$o=r(C4t,"gpt_neo"),C4t.forEach(t),D$o=r(zke," \u2014 "),iO=n(zke,"A",{href:!0});var w4t=s(iO);G$o=r(w4t,"GPTNeoForCausalLM"),w4t.forEach(t),O$o=r(zke," (GPT Neo model)"),zke.forEach(t),V$o=i(Q),a1=n(Q,"LI",{});var Qke=s(a1);Pge=n(Qke,"STRONG",{});var A4t=s(Pge);X$o=r(A4t,"gpt_neox"),A4t.forEach(t),z$o=r(Qke," \u2014 "),dO=n(Qke,"A",{href:!0});var L4t=s(dO);Q$o=r(L4t,"GPTNeoXForCausalLM"),L4t.forEach(t),W$o=r(Qke," (GPT NeoX model)"),Qke.forEach(t),H$o=i(Q),n1=n(Q,"LI",{});var Wke=s(n1);Bge=n(Wke,"STRONG",{});var y4t=s(Bge);U$o=r(y4t,"gptj"),y4t.forEach(t),J$o=r(Wke," \u2014 "),cO=n(Wke,"A",{href:!0});var x4t=s(cO);Y$o=r(x4t,"GPTJForCausalLM"),x4t.forEach(t),K$o=r(Wke," (GPT-J model)"),Wke.forEach(t),Z$o=i(Q),s1=n(Q,"LI",{});var Hke=s(s1);Ige=n(Hke,"STRONG",{});var $4t=s(Ige);eko=r($4t,"marian"),$4t.forEach(t),oko=r(Hke," \u2014 "),fO=n(Hke,"A",{href:!0});var k4t=s(fO);rko=r(k4t,"MarianForCausalLM"),k4t.forEach(t),tko=r(Hke," (Marian model)"),Hke.forEach(t),ako=i(Q),l1=n(Q,"LI",{});var Uke=s(l1);Nge=n(Uke,"STRONG",{});var S4t=s(Nge);nko=r(S4t,"mbart"),S4t.forEach(t),sko=r(Uke," \u2014 "),mO=n(Uke,"A",{href:!0});var R4t=s(mO);lko=r(R4t,"MBartForCausalLM"),R4t.forEach(t),iko=r(Uke," (mBART model)"),Uke.forEach(t),dko=i(Q),i1=n(Q,"LI",{});var Jke=s(i1);qge=n(Jke,"STRONG",{});var P4t=s(qge);cko=r(P4t,"megatron-bert"),P4t.forEach(t),fko=r(Jke," \u2014 "),gO=n(Jke,"A",{href:!0});var B4t=s(gO);mko=r(B4t,"MegatronBertForCausalLM"),B4t.forEach(t),gko=r(Jke," (Megatron-BERT model)"),Jke.forEach(t),hko=i(Q),d1=n(Q,"LI",{});var Yke=s(d1);jge=n(Yke,"STRONG",{});var I4t=s(jge);pko=r(I4t,"mvp"),I4t.forEach(t),_ko=r(Yke," \u2014 "),hO=n(Yke,"A",{href:!0});var N4t=s(hO);uko=r(N4t,"MvpForCausalLM"),N4t.forEach(t),bko=r(Yke," (MVP model)"),Yke.forEach(t),vko=i(Q),c1=n(Q,"LI",{});var Kke=s(c1);Dge=n(Kke,"STRONG",{});var q4t=s(Dge);Fko=r(q4t,"openai-gpt"),q4t.forEach(t),Tko=r(Kke," \u2014 "),pO=n(Kke,"A",{href:!0});var j4t=s(pO);Mko=r(j4t,"OpenAIGPTLMHeadModel"),j4t.forEach(t),Eko=r(Kke," (OpenAI GPT model)"),Kke.forEach(t),Cko=i(Q),f1=n(Q,"LI",{});var Zke=s(f1);Gge=n(Zke,"STRONG",{});var D4t=s(Gge);wko=r(D4t,"opt"),D4t.forEach(t),Ako=r(Zke," \u2014 "),_O=n(Zke,"A",{href:!0});var G4t=s(_O);Lko=r(G4t,"OPTForCausalLM"),G4t.forEach(t),yko=r(Zke," (OPT model)"),Zke.forEach(t),xko=i(Q),m1=n(Q,"LI",{});var eSe=s(m1);Oge=n(eSe,"STRONG",{});var O4t=s(Oge);$ko=r(O4t,"pegasus"),O4t.forEach(t),kko=r(eSe," \u2014 "),uO=n(eSe,"A",{href:!0});var V4t=s(uO);Sko=r(V4t,"PegasusForCausalLM"),V4t.forEach(t),Rko=r(eSe," (Pegasus model)"),eSe.forEach(t),Pko=i(Q),g1=n(Q,"LI",{});var oSe=s(g1);Vge=n(oSe,"STRONG",{});var X4t=s(Vge);Bko=r(X4t,"plbart"),X4t.forEach(t),Iko=r(oSe," \u2014 "),bO=n(oSe,"A",{href:!0});var z4t=s(bO);Nko=r(z4t,"PLBartForCausalLM"),z4t.forEach(t),qko=r(oSe," (PLBart model)"),oSe.forEach(t),jko=i(Q),h1=n(Q,"LI",{});var rSe=s(h1);Xge=n(rSe,"STRONG",{});var Q4t=s(Xge);Dko=r(Q4t,"prophetnet"),Q4t.forEach(t),Gko=r(rSe," \u2014 "),vO=n(rSe,"A",{href:!0});var W4t=s(vO);Oko=r(W4t,"ProphetNetForCausalLM"),W4t.forEach(t),Vko=r(rSe," (ProphetNet model)"),rSe.forEach(t),Xko=i(Q),p1=n(Q,"LI",{});var tSe=s(p1);zge=n(tSe,"STRONG",{});var H4t=s(zge);zko=r(H4t,"qdqbert"),H4t.forEach(t),Qko=r(tSe," \u2014 "),FO=n(tSe,"A",{href:!0});var U4t=s(FO);Wko=r(U4t,"QDQBertLMHeadModel"),U4t.forEach(t),Hko=r(tSe," (QDQBert model)"),tSe.forEach(t),Uko=i(Q),_1=n(Q,"LI",{});var aSe=s(_1);Qge=n(aSe,"STRONG",{});var J4t=s(Qge);Jko=r(J4t,"reformer"),J4t.forEach(t),Yko=r(aSe," \u2014 "),TO=n(aSe,"A",{href:!0});var Y4t=s(TO);Kko=r(Y4t,"ReformerModelWithLMHead"),Y4t.forEach(t),Zko=r(aSe," (Reformer model)"),aSe.forEach(t),eSo=i(Q),u1=n(Q,"LI",{});var nSe=s(u1);Wge=n(nSe,"STRONG",{});var K4t=s(Wge);oSo=r(K4t,"rembert"),K4t.forEach(t),rSo=r(nSe," \u2014 "),MO=n(nSe,"A",{href:!0});var Z4t=s(MO);tSo=r(Z4t,"RemBertForCausalLM"),Z4t.forEach(t),aSo=r(nSe," (RemBERT model)"),nSe.forEach(t),nSo=i(Q),b1=n(Q,"LI",{});var sSe=s(b1);Hge=n(sSe,"STRONG",{});var ebt=s(Hge);sSo=r(ebt,"roberta"),ebt.forEach(t),lSo=r(sSe," \u2014 "),EO=n(sSe,"A",{href:!0});var obt=s(EO);iSo=r(obt,"RobertaForCausalLM"),obt.forEach(t),dSo=r(sSe," (RoBERTa model)"),sSe.forEach(t),cSo=i(Q),v1=n(Q,"LI",{});var lSe=s(v1);Uge=n(lSe,"STRONG",{});var rbt=s(Uge);fSo=r(rbt,"roformer"),rbt.forEach(t),mSo=r(lSe," \u2014 "),CO=n(lSe,"A",{href:!0});var tbt=s(CO);gSo=r(tbt,"RoFormerForCausalLM"),tbt.forEach(t),hSo=r(lSe," (RoFormer model)"),lSe.forEach(t),pSo=i(Q),F1=n(Q,"LI",{});var iSe=s(F1);Jge=n(iSe,"STRONG",{});var abt=s(Jge);_So=r(abt,"speech_to_text_2"),abt.forEach(t),uSo=r(iSe," \u2014 "),wO=n(iSe,"A",{href:!0});var nbt=s(wO);bSo=r(nbt,"Speech2Text2ForCausalLM"),nbt.forEach(t),vSo=r(iSe," (Speech2Text2 model)"),iSe.forEach(t),FSo=i(Q),T1=n(Q,"LI",{});var dSe=s(T1);Yge=n(dSe,"STRONG",{});var sbt=s(Yge);TSo=r(sbt,"transfo-xl"),sbt.forEach(t),MSo=r(dSe," \u2014 "),AO=n(dSe,"A",{href:!0});var lbt=s(AO);ESo=r(lbt,"TransfoXLLMHeadModel"),lbt.forEach(t),CSo=r(dSe," (Transformer-XL model)"),dSe.forEach(t),wSo=i(Q),M1=n(Q,"LI",{});var cSe=s(M1);Kge=n(cSe,"STRONG",{});var ibt=s(Kge);ASo=r(ibt,"trocr"),ibt.forEach(t),LSo=r(cSe," \u2014 "),LO=n(cSe,"A",{href:!0});var dbt=s(LO);ySo=r(dbt,"TrOCRForCausalLM"),dbt.forEach(t),xSo=r(cSe," (TrOCR model)"),cSe.forEach(t),$So=i(Q),E1=n(Q,"LI",{});var fSe=s(E1);Zge=n(fSe,"STRONG",{});var cbt=s(Zge);kSo=r(cbt,"xglm"),cbt.forEach(t),SSo=r(fSe," \u2014 "),yO=n(fSe,"A",{href:!0});var fbt=s(yO);RSo=r(fbt,"XGLMForCausalLM"),fbt.forEach(t),PSo=r(fSe," (XGLM model)"),fSe.forEach(t),BSo=i(Q),C1=n(Q,"LI",{});var mSe=s(C1);ehe=n(mSe,"STRONG",{});var mbt=s(ehe);ISo=r(mbt,"xlm"),mbt.forEach(t),NSo=r(mSe," \u2014 "),xO=n(mSe,"A",{href:!0});var gbt=s(xO);qSo=r(gbt,"XLMWithLMHeadModel"),gbt.forEach(t),jSo=r(mSe," (XLM model)"),mSe.forEach(t),DSo=i(Q),w1=n(Q,"LI",{});var gSe=s(w1);ohe=n(gSe,"STRONG",{});var hbt=s(ohe);GSo=r(hbt,"xlm-prophetnet"),hbt.forEach(t),OSo=r(gSe," \u2014 "),$O=n(gSe,"A",{href:!0});var pbt=s($O);VSo=r(pbt,"XLMProphetNetForCausalLM"),pbt.forEach(t),XSo=r(gSe," (XLM-ProphetNet model)"),gSe.forEach(t),zSo=i(Q),A1=n(Q,"LI",{});var hSe=s(A1);rhe=n(hSe,"STRONG",{});var _bt=s(rhe);QSo=r(_bt,"xlm-roberta"),_bt.forEach(t),WSo=r(hSe," \u2014 "),kO=n(hSe,"A",{href:!0});var ubt=s(kO);HSo=r(ubt,"XLMRobertaForCausalLM"),ubt.forEach(t),USo=r(hSe," (XLM-RoBERTa model)"),hSe.forEach(t),JSo=i(Q),L1=n(Q,"LI",{});var pSe=s(L1);the=n(pSe,"STRONG",{});var bbt=s(the);YSo=r(bbt,"xlm-roberta-xl"),bbt.forEach(t),KSo=r(pSe," \u2014 "),SO=n(pSe,"A",{href:!0});var vbt=s(SO);ZSo=r(vbt,"XLMRobertaXLForCausalLM"),vbt.forEach(t),eRo=r(pSe," (XLM-RoBERTa-XL model)"),pSe.forEach(t),oRo=i(Q),y1=n(Q,"LI",{});var _Se=s(y1);ahe=n(_Se,"STRONG",{});var Fbt=s(ahe);rRo=r(Fbt,"xlnet"),Fbt.forEach(t),tRo=r(_Se," \u2014 "),RO=n(_Se,"A",{href:!0});var Tbt=s(RO);aRo=r(Tbt,"XLNetLMHeadModel"),Tbt.forEach(t),nRo=r(_Se," (XLNet model)"),_Se.forEach(t),Q.forEach(t),sRo=i(ia),x1=n(ia,"P",{});var uSe=s(x1);lRo=r(uSe,"The model is set in evaluation mode by default using "),nhe=n(uSe,"CODE",{});var Mbt=s(nhe);iRo=r(Mbt,"model.eval()"),Mbt.forEach(t),dRo=r(uSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),she=n(uSe,"CODE",{});var Ebt=s(she);cRo=r(Ebt,"model.train()"),Ebt.forEach(t),uSe.forEach(t),fRo=i(ia),T($1.$$.fragment,ia),ia.forEach(t),tl.forEach(t),lXe=i(f),Ui=n(f,"H2",{class:!0});var gQe=s(Ui);k1=n(gQe,"A",{id:!0,class:!0,href:!0});var Cbt=s(k1);lhe=n(Cbt,"SPAN",{});var wbt=s(lhe);T(VL.$$.fragment,wbt),wbt.forEach(t),Cbt.forEach(t),mRo=i(gQe),ihe=n(gQe,"SPAN",{});var Abt=s(ihe);gRo=r(Abt,"AutoModelForMaskedLM"),Abt.forEach(t),gQe.forEach(t),iXe=i(f),So=n(f,"DIV",{class:!0});var al=s(So);T(XL.$$.fragment,al),hRo=i(al),Ji=n(al,"P",{});var kre=s(Ji);pRo=r(kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PO=n(kre,"A",{href:!0});var Lbt=s(PO);_Ro=r(Lbt,"from_pretrained()"),Lbt.forEach(t),uRo=r(kre," class method or the "),BO=n(kre,"A",{href:!0});var ybt=s(BO);bRo=r(ybt,"from_config()"),ybt.forEach(t),vRo=r(kre,` class
method.`),kre.forEach(t),FRo=i(al),zL=n(al,"P",{});var hQe=s(zL);TRo=r(hQe,"This class cannot be instantiated directly using "),dhe=n(hQe,"CODE",{});var xbt=s(dhe);MRo=r(xbt,"__init__()"),xbt.forEach(t),ERo=r(hQe," (throws an error)."),hQe.forEach(t),CRo=i(al),ct=n(al,"DIV",{class:!0});var mA=s(ct);T(QL.$$.fragment,mA),wRo=i(mA),che=n(mA,"P",{});var $bt=s(che);ARo=r($bt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),$bt.forEach(t),LRo=i(mA),Yi=n(mA,"P",{});var Sre=s(Yi);yRo=r(Sre,`Note:
Loading a model from its configuration file does `),fhe=n(Sre,"STRONG",{});var kbt=s(fhe);xRo=r(kbt,"not"),kbt.forEach(t),$Ro=r(Sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(Sre,"A",{href:!0});var Sbt=s(IO);kRo=r(Sbt,"from_pretrained()"),Sbt.forEach(t),SRo=r(Sre," to load the model weights."),Sre.forEach(t),RRo=i(mA),T(S1.$$.fragment,mA),mA.forEach(t),PRo=i(al),Ze=n(al,"DIV",{class:!0});var da=s(Ze);T(WL.$$.fragment,da),BRo=i(da),mhe=n(da,"P",{});var Rbt=s(mhe);IRo=r(Rbt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Rbt.forEach(t),NRo=i(da),ja=n(da,"P",{});var gA=s(ja);qRo=r(gA,"The model class to instantiate is selected based on the "),ghe=n(gA,"CODE",{});var Pbt=s(ghe);jRo=r(Pbt,"model_type"),Pbt.forEach(t),DRo=r(gA,` property of the config object (either
passed as an argument or loaded from `),hhe=n(gA,"CODE",{});var Bbt=s(hhe);GRo=r(Bbt,"pretrained_model_name_or_path"),Bbt.forEach(t),ORo=r(gA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),phe=n(gA,"CODE",{});var Ibt=s(phe);VRo=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),XRo=r(gA,":"),gA.forEach(t),zRo=i(da),W=n(da,"UL",{});var H=s(W);R1=n(H,"LI",{});var bSe=s(R1);_he=n(bSe,"STRONG",{});var Nbt=s(_he);QRo=r(Nbt,"albert"),Nbt.forEach(t),WRo=r(bSe," \u2014 "),NO=n(bSe,"A",{href:!0});var qbt=s(NO);HRo=r(qbt,"AlbertForMaskedLM"),qbt.forEach(t),URo=r(bSe," (ALBERT model)"),bSe.forEach(t),JRo=i(H),P1=n(H,"LI",{});var vSe=s(P1);uhe=n(vSe,"STRONG",{});var jbt=s(uhe);YRo=r(jbt,"bart"),jbt.forEach(t),KRo=r(vSe," \u2014 "),qO=n(vSe,"A",{href:!0});var Dbt=s(qO);ZRo=r(Dbt,"BartForConditionalGeneration"),Dbt.forEach(t),ePo=r(vSe," (BART model)"),vSe.forEach(t),oPo=i(H),B1=n(H,"LI",{});var FSe=s(B1);bhe=n(FSe,"STRONG",{});var Gbt=s(bhe);rPo=r(Gbt,"bert"),Gbt.forEach(t),tPo=r(FSe," \u2014 "),jO=n(FSe,"A",{href:!0});var Obt=s(jO);aPo=r(Obt,"BertForMaskedLM"),Obt.forEach(t),nPo=r(FSe," (BERT model)"),FSe.forEach(t),sPo=i(H),I1=n(H,"LI",{});var TSe=s(I1);vhe=n(TSe,"STRONG",{});var Vbt=s(vhe);lPo=r(Vbt,"big_bird"),Vbt.forEach(t),iPo=r(TSe," \u2014 "),DO=n(TSe,"A",{href:!0});var Xbt=s(DO);dPo=r(Xbt,"BigBirdForMaskedLM"),Xbt.forEach(t),cPo=r(TSe," (BigBird model)"),TSe.forEach(t),fPo=i(H),N1=n(H,"LI",{});var MSe=s(N1);Fhe=n(MSe,"STRONG",{});var zbt=s(Fhe);mPo=r(zbt,"camembert"),zbt.forEach(t),gPo=r(MSe," \u2014 "),GO=n(MSe,"A",{href:!0});var Qbt=s(GO);hPo=r(Qbt,"CamembertForMaskedLM"),Qbt.forEach(t),pPo=r(MSe," (CamemBERT model)"),MSe.forEach(t),_Po=i(H),q1=n(H,"LI",{});var ESe=s(q1);The=n(ESe,"STRONG",{});var Wbt=s(The);uPo=r(Wbt,"convbert"),Wbt.forEach(t),bPo=r(ESe," \u2014 "),OO=n(ESe,"A",{href:!0});var Hbt=s(OO);vPo=r(Hbt,"ConvBertForMaskedLM"),Hbt.forEach(t),FPo=r(ESe," (ConvBERT model)"),ESe.forEach(t),TPo=i(H),j1=n(H,"LI",{});var CSe=s(j1);Mhe=n(CSe,"STRONG",{});var Ubt=s(Mhe);MPo=r(Ubt,"data2vec-text"),Ubt.forEach(t),EPo=r(CSe," \u2014 "),VO=n(CSe,"A",{href:!0});var Jbt=s(VO);CPo=r(Jbt,"Data2VecTextForMaskedLM"),Jbt.forEach(t),wPo=r(CSe," (Data2VecText model)"),CSe.forEach(t),APo=i(H),D1=n(H,"LI",{});var wSe=s(D1);Ehe=n(wSe,"STRONG",{});var Ybt=s(Ehe);LPo=r(Ybt,"deberta"),Ybt.forEach(t),yPo=r(wSe," \u2014 "),XO=n(wSe,"A",{href:!0});var Kbt=s(XO);xPo=r(Kbt,"DebertaForMaskedLM"),Kbt.forEach(t),$Po=r(wSe," (DeBERTa model)"),wSe.forEach(t),kPo=i(H),G1=n(H,"LI",{});var ASe=s(G1);Che=n(ASe,"STRONG",{});var Zbt=s(Che);SPo=r(Zbt,"deberta-v2"),Zbt.forEach(t),RPo=r(ASe," \u2014 "),zO=n(ASe,"A",{href:!0});var evt=s(zO);PPo=r(evt,"DebertaV2ForMaskedLM"),evt.forEach(t),BPo=r(ASe," (DeBERTa-v2 model)"),ASe.forEach(t),IPo=i(H),O1=n(H,"LI",{});var LSe=s(O1);whe=n(LSe,"STRONG",{});var ovt=s(whe);NPo=r(ovt,"distilbert"),ovt.forEach(t),qPo=r(LSe," \u2014 "),QO=n(LSe,"A",{href:!0});var rvt=s(QO);jPo=r(rvt,"DistilBertForMaskedLM"),rvt.forEach(t),DPo=r(LSe," (DistilBERT model)"),LSe.forEach(t),GPo=i(H),V1=n(H,"LI",{});var ySe=s(V1);Ahe=n(ySe,"STRONG",{});var tvt=s(Ahe);OPo=r(tvt,"electra"),tvt.forEach(t),VPo=r(ySe," \u2014 "),WO=n(ySe,"A",{href:!0});var avt=s(WO);XPo=r(avt,"ElectraForMaskedLM"),avt.forEach(t),zPo=r(ySe," (ELECTRA model)"),ySe.forEach(t),QPo=i(H),X1=n(H,"LI",{});var xSe=s(X1);Lhe=n(xSe,"STRONG",{});var nvt=s(Lhe);WPo=r(nvt,"flaubert"),nvt.forEach(t),HPo=r(xSe," \u2014 "),HO=n(xSe,"A",{href:!0});var svt=s(HO);UPo=r(svt,"FlaubertWithLMHeadModel"),svt.forEach(t),JPo=r(xSe," (FlauBERT model)"),xSe.forEach(t),YPo=i(H),z1=n(H,"LI",{});var $Se=s(z1);yhe=n($Se,"STRONG",{});var lvt=s(yhe);KPo=r(lvt,"fnet"),lvt.forEach(t),ZPo=r($Se," \u2014 "),UO=n($Se,"A",{href:!0});var ivt=s(UO);eBo=r(ivt,"FNetForMaskedLM"),ivt.forEach(t),oBo=r($Se," (FNet model)"),$Se.forEach(t),rBo=i(H),Q1=n(H,"LI",{});var kSe=s(Q1);xhe=n(kSe,"STRONG",{});var dvt=s(xhe);tBo=r(dvt,"funnel"),dvt.forEach(t),aBo=r(kSe," \u2014 "),JO=n(kSe,"A",{href:!0});var cvt=s(JO);nBo=r(cvt,"FunnelForMaskedLM"),cvt.forEach(t),sBo=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),lBo=i(H),W1=n(H,"LI",{});var SSe=s(W1);$he=n(SSe,"STRONG",{});var fvt=s($he);iBo=r(fvt,"ibert"),fvt.forEach(t),dBo=r(SSe," \u2014 "),YO=n(SSe,"A",{href:!0});var mvt=s(YO);cBo=r(mvt,"IBertForMaskedLM"),mvt.forEach(t),fBo=r(SSe," (I-BERT model)"),SSe.forEach(t),mBo=i(H),H1=n(H,"LI",{});var RSe=s(H1);khe=n(RSe,"STRONG",{});var gvt=s(khe);gBo=r(gvt,"layoutlm"),gvt.forEach(t),hBo=r(RSe," \u2014 "),KO=n(RSe,"A",{href:!0});var hvt=s(KO);pBo=r(hvt,"LayoutLMForMaskedLM"),hvt.forEach(t),_Bo=r(RSe," (LayoutLM model)"),RSe.forEach(t),uBo=i(H),U1=n(H,"LI",{});var PSe=s(U1);She=n(PSe,"STRONG",{});var pvt=s(She);bBo=r(pvt,"longformer"),pvt.forEach(t),vBo=r(PSe," \u2014 "),ZO=n(PSe,"A",{href:!0});var _vt=s(ZO);FBo=r(_vt,"LongformerForMaskedLM"),_vt.forEach(t),TBo=r(PSe," (Longformer model)"),PSe.forEach(t),MBo=i(H),J1=n(H,"LI",{});var BSe=s(J1);Rhe=n(BSe,"STRONG",{});var uvt=s(Rhe);EBo=r(uvt,"luke"),uvt.forEach(t),CBo=r(BSe," \u2014 "),eV=n(BSe,"A",{href:!0});var bvt=s(eV);wBo=r(bvt,"LukeForMaskedLM"),bvt.forEach(t),ABo=r(BSe," (LUKE model)"),BSe.forEach(t),LBo=i(H),Y1=n(H,"LI",{});var ISe=s(Y1);Phe=n(ISe,"STRONG",{});var vvt=s(Phe);yBo=r(vvt,"mbart"),vvt.forEach(t),xBo=r(ISe," \u2014 "),oV=n(ISe,"A",{href:!0});var Fvt=s(oV);$Bo=r(Fvt,"MBartForConditionalGeneration"),Fvt.forEach(t),kBo=r(ISe," (mBART model)"),ISe.forEach(t),SBo=i(H),K1=n(H,"LI",{});var NSe=s(K1);Bhe=n(NSe,"STRONG",{});var Tvt=s(Bhe);RBo=r(Tvt,"megatron-bert"),Tvt.forEach(t),PBo=r(NSe," \u2014 "),rV=n(NSe,"A",{href:!0});var Mvt=s(rV);BBo=r(Mvt,"MegatronBertForMaskedLM"),Mvt.forEach(t),IBo=r(NSe," (Megatron-BERT model)"),NSe.forEach(t),NBo=i(H),Z1=n(H,"LI",{});var qSe=s(Z1);Ihe=n(qSe,"STRONG",{});var Evt=s(Ihe);qBo=r(Evt,"mobilebert"),Evt.forEach(t),jBo=r(qSe," \u2014 "),tV=n(qSe,"A",{href:!0});var Cvt=s(tV);DBo=r(Cvt,"MobileBertForMaskedLM"),Cvt.forEach(t),GBo=r(qSe," (MobileBERT model)"),qSe.forEach(t),OBo=i(H),e4=n(H,"LI",{});var jSe=s(e4);Nhe=n(jSe,"STRONG",{});var wvt=s(Nhe);VBo=r(wvt,"mpnet"),wvt.forEach(t),XBo=r(jSe," \u2014 "),aV=n(jSe,"A",{href:!0});var Avt=s(aV);zBo=r(Avt,"MPNetForMaskedLM"),Avt.forEach(t),QBo=r(jSe," (MPNet model)"),jSe.forEach(t),WBo=i(H),o4=n(H,"LI",{});var DSe=s(o4);qhe=n(DSe,"STRONG",{});var Lvt=s(qhe);HBo=r(Lvt,"mvp"),Lvt.forEach(t),UBo=r(DSe," \u2014 "),nV=n(DSe,"A",{href:!0});var yvt=s(nV);JBo=r(yvt,"MvpForConditionalGeneration"),yvt.forEach(t),YBo=r(DSe," (MVP model)"),DSe.forEach(t),KBo=i(H),r4=n(H,"LI",{});var GSe=s(r4);jhe=n(GSe,"STRONG",{});var xvt=s(jhe);ZBo=r(xvt,"nezha"),xvt.forEach(t),eIo=r(GSe," \u2014 "),sV=n(GSe,"A",{href:!0});var $vt=s(sV);oIo=r($vt,"NezhaForMaskedLM"),$vt.forEach(t),rIo=r(GSe," (Nezha model)"),GSe.forEach(t),tIo=i(H),t4=n(H,"LI",{});var OSe=s(t4);Dhe=n(OSe,"STRONG",{});var kvt=s(Dhe);aIo=r(kvt,"nystromformer"),kvt.forEach(t),nIo=r(OSe," \u2014 "),lV=n(OSe,"A",{href:!0});var Svt=s(lV);sIo=r(Svt,"NystromformerForMaskedLM"),Svt.forEach(t),lIo=r(OSe," (Nystr\xF6mformer model)"),OSe.forEach(t),iIo=i(H),a4=n(H,"LI",{});var VSe=s(a4);Ghe=n(VSe,"STRONG",{});var Rvt=s(Ghe);dIo=r(Rvt,"perceiver"),Rvt.forEach(t),cIo=r(VSe," \u2014 "),iV=n(VSe,"A",{href:!0});var Pvt=s(iV);fIo=r(Pvt,"PerceiverForMaskedLM"),Pvt.forEach(t),mIo=r(VSe," (Perceiver model)"),VSe.forEach(t),gIo=i(H),n4=n(H,"LI",{});var XSe=s(n4);Ohe=n(XSe,"STRONG",{});var Bvt=s(Ohe);hIo=r(Bvt,"qdqbert"),Bvt.forEach(t),pIo=r(XSe," \u2014 "),dV=n(XSe,"A",{href:!0});var Ivt=s(dV);_Io=r(Ivt,"QDQBertForMaskedLM"),Ivt.forEach(t),uIo=r(XSe," (QDQBert model)"),XSe.forEach(t),bIo=i(H),s4=n(H,"LI",{});var zSe=s(s4);Vhe=n(zSe,"STRONG",{});var Nvt=s(Vhe);vIo=r(Nvt,"reformer"),Nvt.forEach(t),FIo=r(zSe," \u2014 "),cV=n(zSe,"A",{href:!0});var qvt=s(cV);TIo=r(qvt,"ReformerForMaskedLM"),qvt.forEach(t),MIo=r(zSe," (Reformer model)"),zSe.forEach(t),EIo=i(H),l4=n(H,"LI",{});var QSe=s(l4);Xhe=n(QSe,"STRONG",{});var jvt=s(Xhe);CIo=r(jvt,"rembert"),jvt.forEach(t),wIo=r(QSe," \u2014 "),fV=n(QSe,"A",{href:!0});var Dvt=s(fV);AIo=r(Dvt,"RemBertForMaskedLM"),Dvt.forEach(t),LIo=r(QSe," (RemBERT model)"),QSe.forEach(t),yIo=i(H),i4=n(H,"LI",{});var WSe=s(i4);zhe=n(WSe,"STRONG",{});var Gvt=s(zhe);xIo=r(Gvt,"roberta"),Gvt.forEach(t),$Io=r(WSe," \u2014 "),mV=n(WSe,"A",{href:!0});var Ovt=s(mV);kIo=r(Ovt,"RobertaForMaskedLM"),Ovt.forEach(t),SIo=r(WSe," (RoBERTa model)"),WSe.forEach(t),RIo=i(H),d4=n(H,"LI",{});var HSe=s(d4);Qhe=n(HSe,"STRONG",{});var Vvt=s(Qhe);PIo=r(Vvt,"roformer"),Vvt.forEach(t),BIo=r(HSe," \u2014 "),gV=n(HSe,"A",{href:!0});var Xvt=s(gV);IIo=r(Xvt,"RoFormerForMaskedLM"),Xvt.forEach(t),NIo=r(HSe," (RoFormer model)"),HSe.forEach(t),qIo=i(H),c4=n(H,"LI",{});var USe=s(c4);Whe=n(USe,"STRONG",{});var zvt=s(Whe);jIo=r(zvt,"squeezebert"),zvt.forEach(t),DIo=r(USe," \u2014 "),hV=n(USe,"A",{href:!0});var Qvt=s(hV);GIo=r(Qvt,"SqueezeBertForMaskedLM"),Qvt.forEach(t),OIo=r(USe," (SqueezeBERT model)"),USe.forEach(t),VIo=i(H),f4=n(H,"LI",{});var JSe=s(f4);Hhe=n(JSe,"STRONG",{});var Wvt=s(Hhe);XIo=r(Wvt,"tapas"),Wvt.forEach(t),zIo=r(JSe," \u2014 "),pV=n(JSe,"A",{href:!0});var Hvt=s(pV);QIo=r(Hvt,"TapasForMaskedLM"),Hvt.forEach(t),WIo=r(JSe," (TAPAS model)"),JSe.forEach(t),HIo=i(H),m4=n(H,"LI",{});var YSe=s(m4);Uhe=n(YSe,"STRONG",{});var Uvt=s(Uhe);UIo=r(Uvt,"wav2vec2"),Uvt.forEach(t),JIo=r(YSe," \u2014 "),Jhe=n(YSe,"CODE",{});var Jvt=s(Jhe);YIo=r(Jvt,"Wav2Vec2ForMaskedLM"),Jvt.forEach(t),KIo=r(YSe," (Wav2Vec2 model)"),YSe.forEach(t),ZIo=i(H),g4=n(H,"LI",{});var KSe=s(g4);Yhe=n(KSe,"STRONG",{});var Yvt=s(Yhe);eNo=r(Yvt,"xlm"),Yvt.forEach(t),oNo=r(KSe," \u2014 "),_V=n(KSe,"A",{href:!0});var Kvt=s(_V);rNo=r(Kvt,"XLMWithLMHeadModel"),Kvt.forEach(t),tNo=r(KSe," (XLM model)"),KSe.forEach(t),aNo=i(H),h4=n(H,"LI",{});var ZSe=s(h4);Khe=n(ZSe,"STRONG",{});var Zvt=s(Khe);nNo=r(Zvt,"xlm-roberta"),Zvt.forEach(t),sNo=r(ZSe," \u2014 "),uV=n(ZSe,"A",{href:!0});var eFt=s(uV);lNo=r(eFt,"XLMRobertaForMaskedLM"),eFt.forEach(t),iNo=r(ZSe," (XLM-RoBERTa model)"),ZSe.forEach(t),dNo=i(H),p4=n(H,"LI",{});var eRe=s(p4);Zhe=n(eRe,"STRONG",{});var oFt=s(Zhe);cNo=r(oFt,"xlm-roberta-xl"),oFt.forEach(t),fNo=r(eRe," \u2014 "),bV=n(eRe,"A",{href:!0});var rFt=s(bV);mNo=r(rFt,"XLMRobertaXLForMaskedLM"),rFt.forEach(t),gNo=r(eRe," (XLM-RoBERTa-XL model)"),eRe.forEach(t),hNo=i(H),_4=n(H,"LI",{});var oRe=s(_4);epe=n(oRe,"STRONG",{});var tFt=s(epe);pNo=r(tFt,"yoso"),tFt.forEach(t),_No=r(oRe," \u2014 "),vV=n(oRe,"A",{href:!0});var aFt=s(vV);uNo=r(aFt,"YosoForMaskedLM"),aFt.forEach(t),bNo=r(oRe," (YOSO model)"),oRe.forEach(t),H.forEach(t),vNo=i(da),u4=n(da,"P",{});var rRe=s(u4);FNo=r(rRe,"The model is set in evaluation mode by default using "),ope=n(rRe,"CODE",{});var nFt=s(ope);TNo=r(nFt,"model.eval()"),nFt.forEach(t),MNo=r(rRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(rRe,"CODE",{});var sFt=s(rpe);ENo=r(sFt,"model.train()"),sFt.forEach(t),rRe.forEach(t),CNo=i(da),T(b4.$$.fragment,da),da.forEach(t),al.forEach(t),dXe=i(f),Ki=n(f,"H2",{class:!0});var pQe=s(Ki);v4=n(pQe,"A",{id:!0,class:!0,href:!0});var lFt=s(v4);tpe=n(lFt,"SPAN",{});var iFt=s(tpe);T(HL.$$.fragment,iFt),iFt.forEach(t),lFt.forEach(t),wNo=i(pQe),ape=n(pQe,"SPAN",{});var dFt=s(ape);ANo=r(dFt,"AutoModelForSeq2SeqLM"),dFt.forEach(t),pQe.forEach(t),cXe=i(f),Ro=n(f,"DIV",{class:!0});var nl=s(Ro);T(UL.$$.fragment,nl),LNo=i(nl),Zi=n(nl,"P",{});var Rre=s(Zi);yNo=r(Rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),FV=n(Rre,"A",{href:!0});var cFt=s(FV);xNo=r(cFt,"from_pretrained()"),cFt.forEach(t),$No=r(Rre," class method or the "),TV=n(Rre,"A",{href:!0});var fFt=s(TV);kNo=r(fFt,"from_config()"),fFt.forEach(t),SNo=r(Rre,` class
method.`),Rre.forEach(t),RNo=i(nl),JL=n(nl,"P",{});var _Qe=s(JL);PNo=r(_Qe,"This class cannot be instantiated directly using "),npe=n(_Qe,"CODE",{});var mFt=s(npe);BNo=r(mFt,"__init__()"),mFt.forEach(t),INo=r(_Qe," (throws an error)."),_Qe.forEach(t),NNo=i(nl),ft=n(nl,"DIV",{class:!0});var hA=s(ft);T(YL.$$.fragment,hA),qNo=i(hA),spe=n(hA,"P",{});var gFt=s(spe);jNo=r(gFt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),gFt.forEach(t),DNo=i(hA),ed=n(hA,"P",{});var Pre=s(ed);GNo=r(Pre,`Note:
Loading a model from its configuration file does `),lpe=n(Pre,"STRONG",{});var hFt=s(lpe);ONo=r(hFt,"not"),hFt.forEach(t),VNo=r(Pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(Pre,"A",{href:!0});var pFt=s(MV);XNo=r(pFt,"from_pretrained()"),pFt.forEach(t),zNo=r(Pre," to load the model weights."),Pre.forEach(t),QNo=i(hA),T(F4.$$.fragment,hA),hA.forEach(t),WNo=i(nl),eo=n(nl,"DIV",{class:!0});var ca=s(eo);T(KL.$$.fragment,ca),HNo=i(ca),ipe=n(ca,"P",{});var _Ft=s(ipe);UNo=r(_Ft,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),_Ft.forEach(t),JNo=i(ca),Da=n(ca,"P",{});var pA=s(Da);YNo=r(pA,"The model class to instantiate is selected based on the "),dpe=n(pA,"CODE",{});var uFt=s(dpe);KNo=r(uFt,"model_type"),uFt.forEach(t),ZNo=r(pA,` property of the config object (either
passed as an argument or loaded from `),cpe=n(pA,"CODE",{});var bFt=s(cpe);eqo=r(bFt,"pretrained_model_name_or_path"),bFt.forEach(t),oqo=r(pA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(pA,"CODE",{});var vFt=s(fpe);rqo=r(vFt,"pretrained_model_name_or_path"),vFt.forEach(t),tqo=r(pA,":"),pA.forEach(t),aqo=i(ca),pe=n(ca,"UL",{});var be=s(pe);T4=n(be,"LI",{});var tRe=s(T4);mpe=n(tRe,"STRONG",{});var FFt=s(mpe);nqo=r(FFt,"bart"),FFt.forEach(t),sqo=r(tRe," \u2014 "),EV=n(tRe,"A",{href:!0});var TFt=s(EV);lqo=r(TFt,"BartForConditionalGeneration"),TFt.forEach(t),iqo=r(tRe," (BART model)"),tRe.forEach(t),dqo=i(be),M4=n(be,"LI",{});var aRe=s(M4);gpe=n(aRe,"STRONG",{});var MFt=s(gpe);cqo=r(MFt,"bigbird_pegasus"),MFt.forEach(t),fqo=r(aRe," \u2014 "),CV=n(aRe,"A",{href:!0});var EFt=s(CV);mqo=r(EFt,"BigBirdPegasusForConditionalGeneration"),EFt.forEach(t),gqo=r(aRe," (BigBird-Pegasus model)"),aRe.forEach(t),hqo=i(be),E4=n(be,"LI",{});var nRe=s(E4);hpe=n(nRe,"STRONG",{});var CFt=s(hpe);pqo=r(CFt,"blenderbot"),CFt.forEach(t),_qo=r(nRe," \u2014 "),wV=n(nRe,"A",{href:!0});var wFt=s(wV);uqo=r(wFt,"BlenderbotForConditionalGeneration"),wFt.forEach(t),bqo=r(nRe," (Blenderbot model)"),nRe.forEach(t),vqo=i(be),C4=n(be,"LI",{});var sRe=s(C4);ppe=n(sRe,"STRONG",{});var AFt=s(ppe);Fqo=r(AFt,"blenderbot-small"),AFt.forEach(t),Tqo=r(sRe," \u2014 "),AV=n(sRe,"A",{href:!0});var LFt=s(AV);Mqo=r(LFt,"BlenderbotSmallForConditionalGeneration"),LFt.forEach(t),Eqo=r(sRe," (BlenderbotSmall model)"),sRe.forEach(t),Cqo=i(be),w4=n(be,"LI",{});var lRe=s(w4);_pe=n(lRe,"STRONG",{});var yFt=s(_pe);wqo=r(yFt,"encoder-decoder"),yFt.forEach(t),Aqo=r(lRe," \u2014 "),LV=n(lRe,"A",{href:!0});var xFt=s(LV);Lqo=r(xFt,"EncoderDecoderModel"),xFt.forEach(t),yqo=r(lRe," (Encoder decoder model)"),lRe.forEach(t),xqo=i(be),A4=n(be,"LI",{});var iRe=s(A4);upe=n(iRe,"STRONG",{});var $Ft=s(upe);$qo=r($Ft,"fsmt"),$Ft.forEach(t),kqo=r(iRe," \u2014 "),yV=n(iRe,"A",{href:!0});var kFt=s(yV);Sqo=r(kFt,"FSMTForConditionalGeneration"),kFt.forEach(t),Rqo=r(iRe," (FairSeq Machine-Translation model)"),iRe.forEach(t),Pqo=i(be),L4=n(be,"LI",{});var dRe=s(L4);bpe=n(dRe,"STRONG",{});var SFt=s(bpe);Bqo=r(SFt,"led"),SFt.forEach(t),Iqo=r(dRe," \u2014 "),xV=n(dRe,"A",{href:!0});var RFt=s(xV);Nqo=r(RFt,"LEDForConditionalGeneration"),RFt.forEach(t),qqo=r(dRe," (LED model)"),dRe.forEach(t),jqo=i(be),y4=n(be,"LI",{});var cRe=s(y4);vpe=n(cRe,"STRONG",{});var PFt=s(vpe);Dqo=r(PFt,"longt5"),PFt.forEach(t),Gqo=r(cRe," \u2014 "),$V=n(cRe,"A",{href:!0});var BFt=s($V);Oqo=r(BFt,"LongT5ForConditionalGeneration"),BFt.forEach(t),Vqo=r(cRe," (LongT5 model)"),cRe.forEach(t),Xqo=i(be),x4=n(be,"LI",{});var fRe=s(x4);Fpe=n(fRe,"STRONG",{});var IFt=s(Fpe);zqo=r(IFt,"m2m_100"),IFt.forEach(t),Qqo=r(fRe," \u2014 "),kV=n(fRe,"A",{href:!0});var NFt=s(kV);Wqo=r(NFt,"M2M100ForConditionalGeneration"),NFt.forEach(t),Hqo=r(fRe," (M2M100 model)"),fRe.forEach(t),Uqo=i(be),$4=n(be,"LI",{});var mRe=s($4);Tpe=n(mRe,"STRONG",{});var qFt=s(Tpe);Jqo=r(qFt,"marian"),qFt.forEach(t),Yqo=r(mRe," \u2014 "),SV=n(mRe,"A",{href:!0});var jFt=s(SV);Kqo=r(jFt,"MarianMTModel"),jFt.forEach(t),Zqo=r(mRe," (Marian model)"),mRe.forEach(t),ejo=i(be),k4=n(be,"LI",{});var gRe=s(k4);Mpe=n(gRe,"STRONG",{});var DFt=s(Mpe);ojo=r(DFt,"mbart"),DFt.forEach(t),rjo=r(gRe," \u2014 "),RV=n(gRe,"A",{href:!0});var GFt=s(RV);tjo=r(GFt,"MBartForConditionalGeneration"),GFt.forEach(t),ajo=r(gRe," (mBART model)"),gRe.forEach(t),njo=i(be),S4=n(be,"LI",{});var hRe=s(S4);Epe=n(hRe,"STRONG",{});var OFt=s(Epe);sjo=r(OFt,"mt5"),OFt.forEach(t),ljo=r(hRe," \u2014 "),PV=n(hRe,"A",{href:!0});var VFt=s(PV);ijo=r(VFt,"MT5ForConditionalGeneration"),VFt.forEach(t),djo=r(hRe," (MT5 model)"),hRe.forEach(t),cjo=i(be),R4=n(be,"LI",{});var pRe=s(R4);Cpe=n(pRe,"STRONG",{});var XFt=s(Cpe);fjo=r(XFt,"mvp"),XFt.forEach(t),mjo=r(pRe," \u2014 "),BV=n(pRe,"A",{href:!0});var zFt=s(BV);gjo=r(zFt,"MvpForConditionalGeneration"),zFt.forEach(t),hjo=r(pRe," (MVP model)"),pRe.forEach(t),pjo=i(be),P4=n(be,"LI",{});var _Re=s(P4);wpe=n(_Re,"STRONG",{});var QFt=s(wpe);_jo=r(QFt,"pegasus"),QFt.forEach(t),ujo=r(_Re," \u2014 "),IV=n(_Re,"A",{href:!0});var WFt=s(IV);bjo=r(WFt,"PegasusForConditionalGeneration"),WFt.forEach(t),vjo=r(_Re," (Pegasus model)"),_Re.forEach(t),Fjo=i(be),B4=n(be,"LI",{});var uRe=s(B4);Ape=n(uRe,"STRONG",{});var HFt=s(Ape);Tjo=r(HFt,"plbart"),HFt.forEach(t),Mjo=r(uRe," \u2014 "),NV=n(uRe,"A",{href:!0});var UFt=s(NV);Ejo=r(UFt,"PLBartForConditionalGeneration"),UFt.forEach(t),Cjo=r(uRe," (PLBart model)"),uRe.forEach(t),wjo=i(be),I4=n(be,"LI",{});var bRe=s(I4);Lpe=n(bRe,"STRONG",{});var JFt=s(Lpe);Ajo=r(JFt,"prophetnet"),JFt.forEach(t),Ljo=r(bRe," \u2014 "),qV=n(bRe,"A",{href:!0});var YFt=s(qV);yjo=r(YFt,"ProphetNetForConditionalGeneration"),YFt.forEach(t),xjo=r(bRe," (ProphetNet model)"),bRe.forEach(t),$jo=i(be),N4=n(be,"LI",{});var vRe=s(N4);ype=n(vRe,"STRONG",{});var KFt=s(ype);kjo=r(KFt,"t5"),KFt.forEach(t),Sjo=r(vRe," \u2014 "),jV=n(vRe,"A",{href:!0});var ZFt=s(jV);Rjo=r(ZFt,"T5ForConditionalGeneration"),ZFt.forEach(t),Pjo=r(vRe," (T5 model)"),vRe.forEach(t),Bjo=i(be),q4=n(be,"LI",{});var FRe=s(q4);xpe=n(FRe,"STRONG",{});var eTt=s(xpe);Ijo=r(eTt,"xlm-prophetnet"),eTt.forEach(t),Njo=r(FRe," \u2014 "),DV=n(FRe,"A",{href:!0});var oTt=s(DV);qjo=r(oTt,"XLMProphetNetForConditionalGeneration"),oTt.forEach(t),jjo=r(FRe," (XLM-ProphetNet model)"),FRe.forEach(t),be.forEach(t),Djo=i(ca),j4=n(ca,"P",{});var TRe=s(j4);Gjo=r(TRe,"The model is set in evaluation mode by default using "),$pe=n(TRe,"CODE",{});var rTt=s($pe);Ojo=r(rTt,"model.eval()"),rTt.forEach(t),Vjo=r(TRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kpe=n(TRe,"CODE",{});var tTt=s(kpe);Xjo=r(tTt,"model.train()"),tTt.forEach(t),TRe.forEach(t),zjo=i(ca),T(D4.$$.fragment,ca),ca.forEach(t),nl.forEach(t),fXe=i(f),od=n(f,"H2",{class:!0});var uQe=s(od);G4=n(uQe,"A",{id:!0,class:!0,href:!0});var aTt=s(G4);Spe=n(aTt,"SPAN",{});var nTt=s(Spe);T(ZL.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),Qjo=i(uQe),Rpe=n(uQe,"SPAN",{});var sTt=s(Rpe);Wjo=r(sTt,"AutoModelForSequenceClassification"),sTt.forEach(t),uQe.forEach(t),mXe=i(f),Po=n(f,"DIV",{class:!0});var sl=s(Po);T(ey.$$.fragment,sl),Hjo=i(sl),rd=n(sl,"P",{});var Bre=s(rd);Ujo=r(Bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),GV=n(Bre,"A",{href:!0});var lTt=s(GV);Jjo=r(lTt,"from_pretrained()"),lTt.forEach(t),Yjo=r(Bre," class method or the "),OV=n(Bre,"A",{href:!0});var iTt=s(OV);Kjo=r(iTt,"from_config()"),iTt.forEach(t),Zjo=r(Bre,` class
method.`),Bre.forEach(t),eDo=i(sl),oy=n(sl,"P",{});var bQe=s(oy);oDo=r(bQe,"This class cannot be instantiated directly using "),Ppe=n(bQe,"CODE",{});var dTt=s(Ppe);rDo=r(dTt,"__init__()"),dTt.forEach(t),tDo=r(bQe," (throws an error)."),bQe.forEach(t),aDo=i(sl),mt=n(sl,"DIV",{class:!0});var _A=s(mt);T(ry.$$.fragment,_A),nDo=i(_A),Bpe=n(_A,"P",{});var cTt=s(Bpe);sDo=r(cTt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),cTt.forEach(t),lDo=i(_A),td=n(_A,"P",{});var Ire=s(td);iDo=r(Ire,`Note:
Loading a model from its configuration file does `),Ipe=n(Ire,"STRONG",{});var fTt=s(Ipe);dDo=r(fTt,"not"),fTt.forEach(t),cDo=r(Ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(Ire,"A",{href:!0});var mTt=s(VV);fDo=r(mTt,"from_pretrained()"),mTt.forEach(t),mDo=r(Ire," to load the model weights."),Ire.forEach(t),gDo=i(_A),T(O4.$$.fragment,_A),_A.forEach(t),hDo=i(sl),oo=n(sl,"DIV",{class:!0});var fa=s(oo);T(ty.$$.fragment,fa),pDo=i(fa),Npe=n(fa,"P",{});var gTt=s(Npe);_Do=r(gTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),gTt.forEach(t),uDo=i(fa),Ga=n(fa,"P",{});var uA=s(Ga);bDo=r(uA,"The model class to instantiate is selected based on the "),qpe=n(uA,"CODE",{});var hTt=s(qpe);vDo=r(hTt,"model_type"),hTt.forEach(t),FDo=r(uA,` property of the config object (either
passed as an argument or loaded from `),jpe=n(uA,"CODE",{});var pTt=s(jpe);TDo=r(pTt,"pretrained_model_name_or_path"),pTt.forEach(t),MDo=r(uA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dpe=n(uA,"CODE",{});var _Tt=s(Dpe);EDo=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),CDo=r(uA,":"),uA.forEach(t),wDo=i(fa),N=n(fa,"UL",{});var j=s(N);V4=n(j,"LI",{});var MRe=s(V4);Gpe=n(MRe,"STRONG",{});var uTt=s(Gpe);ADo=r(uTt,"albert"),uTt.forEach(t),LDo=r(MRe," \u2014 "),XV=n(MRe,"A",{href:!0});var bTt=s(XV);yDo=r(bTt,"AlbertForSequenceClassification"),bTt.forEach(t),xDo=r(MRe," (ALBERT model)"),MRe.forEach(t),$Do=i(j),X4=n(j,"LI",{});var ERe=s(X4);Ope=n(ERe,"STRONG",{});var vTt=s(Ope);kDo=r(vTt,"bart"),vTt.forEach(t),SDo=r(ERe," \u2014 "),zV=n(ERe,"A",{href:!0});var FTt=s(zV);RDo=r(FTt,"BartForSequenceClassification"),FTt.forEach(t),PDo=r(ERe," (BART model)"),ERe.forEach(t),BDo=i(j),z4=n(j,"LI",{});var CRe=s(z4);Vpe=n(CRe,"STRONG",{});var TTt=s(Vpe);IDo=r(TTt,"bert"),TTt.forEach(t),NDo=r(CRe," \u2014 "),QV=n(CRe,"A",{href:!0});var MTt=s(QV);qDo=r(MTt,"BertForSequenceClassification"),MTt.forEach(t),jDo=r(CRe," (BERT model)"),CRe.forEach(t),DDo=i(j),Q4=n(j,"LI",{});var wRe=s(Q4);Xpe=n(wRe,"STRONG",{});var ETt=s(Xpe);GDo=r(ETt,"big_bird"),ETt.forEach(t),ODo=r(wRe," \u2014 "),WV=n(wRe,"A",{href:!0});var CTt=s(WV);VDo=r(CTt,"BigBirdForSequenceClassification"),CTt.forEach(t),XDo=r(wRe," (BigBird model)"),wRe.forEach(t),zDo=i(j),W4=n(j,"LI",{});var ARe=s(W4);zpe=n(ARe,"STRONG",{});var wTt=s(zpe);QDo=r(wTt,"bigbird_pegasus"),wTt.forEach(t),WDo=r(ARe," \u2014 "),HV=n(ARe,"A",{href:!0});var ATt=s(HV);HDo=r(ATt,"BigBirdPegasusForSequenceClassification"),ATt.forEach(t),UDo=r(ARe," (BigBird-Pegasus model)"),ARe.forEach(t),JDo=i(j),H4=n(j,"LI",{});var LRe=s(H4);Qpe=n(LRe,"STRONG",{});var LTt=s(Qpe);YDo=r(LTt,"bloom"),LTt.forEach(t),KDo=r(LRe," \u2014 "),UV=n(LRe,"A",{href:!0});var yTt=s(UV);ZDo=r(yTt,"BloomForSequenceClassification"),yTt.forEach(t),eGo=r(LRe," (BLOOM model)"),LRe.forEach(t),oGo=i(j),U4=n(j,"LI",{});var yRe=s(U4);Wpe=n(yRe,"STRONG",{});var xTt=s(Wpe);rGo=r(xTt,"camembert"),xTt.forEach(t),tGo=r(yRe," \u2014 "),JV=n(yRe,"A",{href:!0});var $Tt=s(JV);aGo=r($Tt,"CamembertForSequenceClassification"),$Tt.forEach(t),nGo=r(yRe," (CamemBERT model)"),yRe.forEach(t),sGo=i(j),J4=n(j,"LI",{});var xRe=s(J4);Hpe=n(xRe,"STRONG",{});var kTt=s(Hpe);lGo=r(kTt,"canine"),kTt.forEach(t),iGo=r(xRe," \u2014 "),YV=n(xRe,"A",{href:!0});var STt=s(YV);dGo=r(STt,"CanineForSequenceClassification"),STt.forEach(t),cGo=r(xRe," (CANINE model)"),xRe.forEach(t),fGo=i(j),Y4=n(j,"LI",{});var $Re=s(Y4);Upe=n($Re,"STRONG",{});var RTt=s(Upe);mGo=r(RTt,"convbert"),RTt.forEach(t),gGo=r($Re," \u2014 "),KV=n($Re,"A",{href:!0});var PTt=s(KV);hGo=r(PTt,"ConvBertForSequenceClassification"),PTt.forEach(t),pGo=r($Re," (ConvBERT model)"),$Re.forEach(t),_Go=i(j),K4=n(j,"LI",{});var kRe=s(K4);Jpe=n(kRe,"STRONG",{});var BTt=s(Jpe);uGo=r(BTt,"ctrl"),BTt.forEach(t),bGo=r(kRe," \u2014 "),ZV=n(kRe,"A",{href:!0});var ITt=s(ZV);vGo=r(ITt,"CTRLForSequenceClassification"),ITt.forEach(t),FGo=r(kRe," (CTRL model)"),kRe.forEach(t),TGo=i(j),Z4=n(j,"LI",{});var SRe=s(Z4);Ype=n(SRe,"STRONG",{});var NTt=s(Ype);MGo=r(NTt,"data2vec-text"),NTt.forEach(t),EGo=r(SRe," \u2014 "),eX=n(SRe,"A",{href:!0});var qTt=s(eX);CGo=r(qTt,"Data2VecTextForSequenceClassification"),qTt.forEach(t),wGo=r(SRe," (Data2VecText model)"),SRe.forEach(t),AGo=i(j),eb=n(j,"LI",{});var RRe=s(eb);Kpe=n(RRe,"STRONG",{});var jTt=s(Kpe);LGo=r(jTt,"deberta"),jTt.forEach(t),yGo=r(RRe," \u2014 "),oX=n(RRe,"A",{href:!0});var DTt=s(oX);xGo=r(DTt,"DebertaForSequenceClassification"),DTt.forEach(t),$Go=r(RRe," (DeBERTa model)"),RRe.forEach(t),kGo=i(j),ob=n(j,"LI",{});var PRe=s(ob);Zpe=n(PRe,"STRONG",{});var GTt=s(Zpe);SGo=r(GTt,"deberta-v2"),GTt.forEach(t),RGo=r(PRe," \u2014 "),rX=n(PRe,"A",{href:!0});var OTt=s(rX);PGo=r(OTt,"DebertaV2ForSequenceClassification"),OTt.forEach(t),BGo=r(PRe," (DeBERTa-v2 model)"),PRe.forEach(t),IGo=i(j),rb=n(j,"LI",{});var BRe=s(rb);e_e=n(BRe,"STRONG",{});var VTt=s(e_e);NGo=r(VTt,"distilbert"),VTt.forEach(t),qGo=r(BRe," \u2014 "),tX=n(BRe,"A",{href:!0});var XTt=s(tX);jGo=r(XTt,"DistilBertForSequenceClassification"),XTt.forEach(t),DGo=r(BRe," (DistilBERT model)"),BRe.forEach(t),GGo=i(j),tb=n(j,"LI",{});var IRe=s(tb);o_e=n(IRe,"STRONG",{});var zTt=s(o_e);OGo=r(zTt,"electra"),zTt.forEach(t),VGo=r(IRe," \u2014 "),aX=n(IRe,"A",{href:!0});var QTt=s(aX);XGo=r(QTt,"ElectraForSequenceClassification"),QTt.forEach(t),zGo=r(IRe," (ELECTRA model)"),IRe.forEach(t),QGo=i(j),ab=n(j,"LI",{});var NRe=s(ab);r_e=n(NRe,"STRONG",{});var WTt=s(r_e);WGo=r(WTt,"flaubert"),WTt.forEach(t),HGo=r(NRe," \u2014 "),nX=n(NRe,"A",{href:!0});var HTt=s(nX);UGo=r(HTt,"FlaubertForSequenceClassification"),HTt.forEach(t),JGo=r(NRe," (FlauBERT model)"),NRe.forEach(t),YGo=i(j),nb=n(j,"LI",{});var qRe=s(nb);t_e=n(qRe,"STRONG",{});var UTt=s(t_e);KGo=r(UTt,"fnet"),UTt.forEach(t),ZGo=r(qRe," \u2014 "),sX=n(qRe,"A",{href:!0});var JTt=s(sX);eOo=r(JTt,"FNetForSequenceClassification"),JTt.forEach(t),oOo=r(qRe," (FNet model)"),qRe.forEach(t),rOo=i(j),sb=n(j,"LI",{});var jRe=s(sb);a_e=n(jRe,"STRONG",{});var YTt=s(a_e);tOo=r(YTt,"funnel"),YTt.forEach(t),aOo=r(jRe," \u2014 "),lX=n(jRe,"A",{href:!0});var KTt=s(lX);nOo=r(KTt,"FunnelForSequenceClassification"),KTt.forEach(t),sOo=r(jRe," (Funnel Transformer model)"),jRe.forEach(t),lOo=i(j),lb=n(j,"LI",{});var DRe=s(lb);n_e=n(DRe,"STRONG",{});var ZTt=s(n_e);iOo=r(ZTt,"gpt2"),ZTt.forEach(t),dOo=r(DRe," \u2014 "),iX=n(DRe,"A",{href:!0});var e7t=s(iX);cOo=r(e7t,"GPT2ForSequenceClassification"),e7t.forEach(t),fOo=r(DRe," (OpenAI GPT-2 model)"),DRe.forEach(t),mOo=i(j),ib=n(j,"LI",{});var GRe=s(ib);s_e=n(GRe,"STRONG",{});var o7t=s(s_e);gOo=r(o7t,"gpt_neo"),o7t.forEach(t),hOo=r(GRe," \u2014 "),dX=n(GRe,"A",{href:!0});var r7t=s(dX);pOo=r(r7t,"GPTNeoForSequenceClassification"),r7t.forEach(t),_Oo=r(GRe," (GPT Neo model)"),GRe.forEach(t),uOo=i(j),db=n(j,"LI",{});var ORe=s(db);l_e=n(ORe,"STRONG",{});var t7t=s(l_e);bOo=r(t7t,"gptj"),t7t.forEach(t),vOo=r(ORe," \u2014 "),cX=n(ORe,"A",{href:!0});var a7t=s(cX);FOo=r(a7t,"GPTJForSequenceClassification"),a7t.forEach(t),TOo=r(ORe," (GPT-J model)"),ORe.forEach(t),MOo=i(j),cb=n(j,"LI",{});var VRe=s(cb);i_e=n(VRe,"STRONG",{});var n7t=s(i_e);EOo=r(n7t,"ibert"),n7t.forEach(t),COo=r(VRe," \u2014 "),fX=n(VRe,"A",{href:!0});var s7t=s(fX);wOo=r(s7t,"IBertForSequenceClassification"),s7t.forEach(t),AOo=r(VRe," (I-BERT model)"),VRe.forEach(t),LOo=i(j),fb=n(j,"LI",{});var XRe=s(fb);d_e=n(XRe,"STRONG",{});var l7t=s(d_e);yOo=r(l7t,"layoutlm"),l7t.forEach(t),xOo=r(XRe," \u2014 "),mX=n(XRe,"A",{href:!0});var i7t=s(mX);$Oo=r(i7t,"LayoutLMForSequenceClassification"),i7t.forEach(t),kOo=r(XRe," (LayoutLM model)"),XRe.forEach(t),SOo=i(j),mb=n(j,"LI",{});var zRe=s(mb);c_e=n(zRe,"STRONG",{});var d7t=s(c_e);ROo=r(d7t,"layoutlmv2"),d7t.forEach(t),POo=r(zRe," \u2014 "),gX=n(zRe,"A",{href:!0});var c7t=s(gX);BOo=r(c7t,"LayoutLMv2ForSequenceClassification"),c7t.forEach(t),IOo=r(zRe," (LayoutLMv2 model)"),zRe.forEach(t),NOo=i(j),gb=n(j,"LI",{});var QRe=s(gb);f_e=n(QRe,"STRONG",{});var f7t=s(f_e);qOo=r(f7t,"layoutlmv3"),f7t.forEach(t),jOo=r(QRe," \u2014 "),hX=n(QRe,"A",{href:!0});var m7t=s(hX);DOo=r(m7t,"LayoutLMv3ForSequenceClassification"),m7t.forEach(t),GOo=r(QRe," (LayoutLMv3 model)"),QRe.forEach(t),OOo=i(j),hb=n(j,"LI",{});var WRe=s(hb);m_e=n(WRe,"STRONG",{});var g7t=s(m_e);VOo=r(g7t,"led"),g7t.forEach(t),XOo=r(WRe," \u2014 "),pX=n(WRe,"A",{href:!0});var h7t=s(pX);zOo=r(h7t,"LEDForSequenceClassification"),h7t.forEach(t),QOo=r(WRe," (LED model)"),WRe.forEach(t),WOo=i(j),pb=n(j,"LI",{});var HRe=s(pb);g_e=n(HRe,"STRONG",{});var p7t=s(g_e);HOo=r(p7t,"longformer"),p7t.forEach(t),UOo=r(HRe," \u2014 "),_X=n(HRe,"A",{href:!0});var _7t=s(_X);JOo=r(_7t,"LongformerForSequenceClassification"),_7t.forEach(t),YOo=r(HRe," (Longformer model)"),HRe.forEach(t),KOo=i(j),_b=n(j,"LI",{});var URe=s(_b);h_e=n(URe,"STRONG",{});var u7t=s(h_e);ZOo=r(u7t,"mbart"),u7t.forEach(t),eVo=r(URe," \u2014 "),uX=n(URe,"A",{href:!0});var b7t=s(uX);oVo=r(b7t,"MBartForSequenceClassification"),b7t.forEach(t),rVo=r(URe," (mBART model)"),URe.forEach(t),tVo=i(j),ub=n(j,"LI",{});var JRe=s(ub);p_e=n(JRe,"STRONG",{});var v7t=s(p_e);aVo=r(v7t,"megatron-bert"),v7t.forEach(t),nVo=r(JRe," \u2014 "),bX=n(JRe,"A",{href:!0});var F7t=s(bX);sVo=r(F7t,"MegatronBertForSequenceClassification"),F7t.forEach(t),lVo=r(JRe," (Megatron-BERT model)"),JRe.forEach(t),iVo=i(j),bb=n(j,"LI",{});var YRe=s(bb);__e=n(YRe,"STRONG",{});var T7t=s(__e);dVo=r(T7t,"mobilebert"),T7t.forEach(t),cVo=r(YRe," \u2014 "),vX=n(YRe,"A",{href:!0});var M7t=s(vX);fVo=r(M7t,"MobileBertForSequenceClassification"),M7t.forEach(t),mVo=r(YRe," (MobileBERT model)"),YRe.forEach(t),gVo=i(j),vb=n(j,"LI",{});var KRe=s(vb);u_e=n(KRe,"STRONG",{});var E7t=s(u_e);hVo=r(E7t,"mpnet"),E7t.forEach(t),pVo=r(KRe," \u2014 "),FX=n(KRe,"A",{href:!0});var C7t=s(FX);_Vo=r(C7t,"MPNetForSequenceClassification"),C7t.forEach(t),uVo=r(KRe," (MPNet model)"),KRe.forEach(t),bVo=i(j),Fb=n(j,"LI",{});var ZRe=s(Fb);b_e=n(ZRe,"STRONG",{});var w7t=s(b_e);vVo=r(w7t,"mvp"),w7t.forEach(t),FVo=r(ZRe," \u2014 "),TX=n(ZRe,"A",{href:!0});var A7t=s(TX);TVo=r(A7t,"MvpForSequenceClassification"),A7t.forEach(t),MVo=r(ZRe," (MVP model)"),ZRe.forEach(t),EVo=i(j),Tb=n(j,"LI",{});var ePe=s(Tb);v_e=n(ePe,"STRONG",{});var L7t=s(v_e);CVo=r(L7t,"nezha"),L7t.forEach(t),wVo=r(ePe," \u2014 "),MX=n(ePe,"A",{href:!0});var y7t=s(MX);AVo=r(y7t,"NezhaForSequenceClassification"),y7t.forEach(t),LVo=r(ePe," (Nezha model)"),ePe.forEach(t),yVo=i(j),Mb=n(j,"LI",{});var oPe=s(Mb);F_e=n(oPe,"STRONG",{});var x7t=s(F_e);xVo=r(x7t,"nystromformer"),x7t.forEach(t),$Vo=r(oPe," \u2014 "),EX=n(oPe,"A",{href:!0});var $7t=s(EX);kVo=r($7t,"NystromformerForSequenceClassification"),$7t.forEach(t),SVo=r(oPe," (Nystr\xF6mformer model)"),oPe.forEach(t),RVo=i(j),Eb=n(j,"LI",{});var rPe=s(Eb);T_e=n(rPe,"STRONG",{});var k7t=s(T_e);PVo=r(k7t,"openai-gpt"),k7t.forEach(t),BVo=r(rPe," \u2014 "),CX=n(rPe,"A",{href:!0});var S7t=s(CX);IVo=r(S7t,"OpenAIGPTForSequenceClassification"),S7t.forEach(t),NVo=r(rPe," (OpenAI GPT model)"),rPe.forEach(t),qVo=i(j),Cb=n(j,"LI",{});var tPe=s(Cb);M_e=n(tPe,"STRONG",{});var R7t=s(M_e);jVo=r(R7t,"perceiver"),R7t.forEach(t),DVo=r(tPe," \u2014 "),wX=n(tPe,"A",{href:!0});var P7t=s(wX);GVo=r(P7t,"PerceiverForSequenceClassification"),P7t.forEach(t),OVo=r(tPe," (Perceiver model)"),tPe.forEach(t),VVo=i(j),wb=n(j,"LI",{});var aPe=s(wb);E_e=n(aPe,"STRONG",{});var B7t=s(E_e);XVo=r(B7t,"plbart"),B7t.forEach(t),zVo=r(aPe," \u2014 "),AX=n(aPe,"A",{href:!0});var I7t=s(AX);QVo=r(I7t,"PLBartForSequenceClassification"),I7t.forEach(t),WVo=r(aPe," (PLBart model)"),aPe.forEach(t),HVo=i(j),Ab=n(j,"LI",{});var nPe=s(Ab);C_e=n(nPe,"STRONG",{});var N7t=s(C_e);UVo=r(N7t,"qdqbert"),N7t.forEach(t),JVo=r(nPe," \u2014 "),LX=n(nPe,"A",{href:!0});var q7t=s(LX);YVo=r(q7t,"QDQBertForSequenceClassification"),q7t.forEach(t),KVo=r(nPe," (QDQBert model)"),nPe.forEach(t),ZVo=i(j),Lb=n(j,"LI",{});var sPe=s(Lb);w_e=n(sPe,"STRONG",{});var j7t=s(w_e);eXo=r(j7t,"reformer"),j7t.forEach(t),oXo=r(sPe," \u2014 "),yX=n(sPe,"A",{href:!0});var D7t=s(yX);rXo=r(D7t,"ReformerForSequenceClassification"),D7t.forEach(t),tXo=r(sPe," (Reformer model)"),sPe.forEach(t),aXo=i(j),yb=n(j,"LI",{});var lPe=s(yb);A_e=n(lPe,"STRONG",{});var G7t=s(A_e);nXo=r(G7t,"rembert"),G7t.forEach(t),sXo=r(lPe," \u2014 "),xX=n(lPe,"A",{href:!0});var O7t=s(xX);lXo=r(O7t,"RemBertForSequenceClassification"),O7t.forEach(t),iXo=r(lPe," (RemBERT model)"),lPe.forEach(t),dXo=i(j),xb=n(j,"LI",{});var iPe=s(xb);L_e=n(iPe,"STRONG",{});var V7t=s(L_e);cXo=r(V7t,"roberta"),V7t.forEach(t),fXo=r(iPe," \u2014 "),$X=n(iPe,"A",{href:!0});var X7t=s($X);mXo=r(X7t,"RobertaForSequenceClassification"),X7t.forEach(t),gXo=r(iPe," (RoBERTa model)"),iPe.forEach(t),hXo=i(j),$b=n(j,"LI",{});var dPe=s($b);y_e=n(dPe,"STRONG",{});var z7t=s(y_e);pXo=r(z7t,"roformer"),z7t.forEach(t),_Xo=r(dPe," \u2014 "),kX=n(dPe,"A",{href:!0});var Q7t=s(kX);uXo=r(Q7t,"RoFormerForSequenceClassification"),Q7t.forEach(t),bXo=r(dPe," (RoFormer model)"),dPe.forEach(t),vXo=i(j),kb=n(j,"LI",{});var cPe=s(kb);x_e=n(cPe,"STRONG",{});var W7t=s(x_e);FXo=r(W7t,"squeezebert"),W7t.forEach(t),TXo=r(cPe," \u2014 "),SX=n(cPe,"A",{href:!0});var H7t=s(SX);MXo=r(H7t,"SqueezeBertForSequenceClassification"),H7t.forEach(t),EXo=r(cPe," (SqueezeBERT model)"),cPe.forEach(t),CXo=i(j),Sb=n(j,"LI",{});var fPe=s(Sb);$_e=n(fPe,"STRONG",{});var U7t=s($_e);wXo=r(U7t,"tapas"),U7t.forEach(t),AXo=r(fPe," \u2014 "),RX=n(fPe,"A",{href:!0});var J7t=s(RX);LXo=r(J7t,"TapasForSequenceClassification"),J7t.forEach(t),yXo=r(fPe," (TAPAS model)"),fPe.forEach(t),xXo=i(j),Rb=n(j,"LI",{});var mPe=s(Rb);k_e=n(mPe,"STRONG",{});var Y7t=s(k_e);$Xo=r(Y7t,"transfo-xl"),Y7t.forEach(t),kXo=r(mPe," \u2014 "),PX=n(mPe,"A",{href:!0});var K7t=s(PX);SXo=r(K7t,"TransfoXLForSequenceClassification"),K7t.forEach(t),RXo=r(mPe," (Transformer-XL model)"),mPe.forEach(t),PXo=i(j),Pb=n(j,"LI",{});var gPe=s(Pb);S_e=n(gPe,"STRONG",{});var Z7t=s(S_e);BXo=r(Z7t,"xlm"),Z7t.forEach(t),IXo=r(gPe," \u2014 "),BX=n(gPe,"A",{href:!0});var e9t=s(BX);NXo=r(e9t,"XLMForSequenceClassification"),e9t.forEach(t),qXo=r(gPe," (XLM model)"),gPe.forEach(t),jXo=i(j),Bb=n(j,"LI",{});var hPe=s(Bb);R_e=n(hPe,"STRONG",{});var o9t=s(R_e);DXo=r(o9t,"xlm-roberta"),o9t.forEach(t),GXo=r(hPe," \u2014 "),IX=n(hPe,"A",{href:!0});var r9t=s(IX);OXo=r(r9t,"XLMRobertaForSequenceClassification"),r9t.forEach(t),VXo=r(hPe," (XLM-RoBERTa model)"),hPe.forEach(t),XXo=i(j),Ib=n(j,"LI",{});var pPe=s(Ib);P_e=n(pPe,"STRONG",{});var t9t=s(P_e);zXo=r(t9t,"xlm-roberta-xl"),t9t.forEach(t),QXo=r(pPe," \u2014 "),NX=n(pPe,"A",{href:!0});var a9t=s(NX);WXo=r(a9t,"XLMRobertaXLForSequenceClassification"),a9t.forEach(t),HXo=r(pPe," (XLM-RoBERTa-XL model)"),pPe.forEach(t),UXo=i(j),Nb=n(j,"LI",{});var _Pe=s(Nb);B_e=n(_Pe,"STRONG",{});var n9t=s(B_e);JXo=r(n9t,"xlnet"),n9t.forEach(t),YXo=r(_Pe," \u2014 "),qX=n(_Pe,"A",{href:!0});var s9t=s(qX);KXo=r(s9t,"XLNetForSequenceClassification"),s9t.forEach(t),ZXo=r(_Pe," (XLNet model)"),_Pe.forEach(t),ezo=i(j),qb=n(j,"LI",{});var uPe=s(qb);I_e=n(uPe,"STRONG",{});var l9t=s(I_e);ozo=r(l9t,"yoso"),l9t.forEach(t),rzo=r(uPe," \u2014 "),jX=n(uPe,"A",{href:!0});var i9t=s(jX);tzo=r(i9t,"YosoForSequenceClassification"),i9t.forEach(t),azo=r(uPe," (YOSO model)"),uPe.forEach(t),j.forEach(t),nzo=i(fa),jb=n(fa,"P",{});var bPe=s(jb);szo=r(bPe,"The model is set in evaluation mode by default using "),N_e=n(bPe,"CODE",{});var d9t=s(N_e);lzo=r(d9t,"model.eval()"),d9t.forEach(t),izo=r(bPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q_e=n(bPe,"CODE",{});var c9t=s(q_e);dzo=r(c9t,"model.train()"),c9t.forEach(t),bPe.forEach(t),czo=i(fa),T(Db.$$.fragment,fa),fa.forEach(t),sl.forEach(t),gXe=i(f),ad=n(f,"H2",{class:!0});var vQe=s(ad);Gb=n(vQe,"A",{id:!0,class:!0,href:!0});var f9t=s(Gb);j_e=n(f9t,"SPAN",{});var m9t=s(j_e);T(ay.$$.fragment,m9t),m9t.forEach(t),f9t.forEach(t),fzo=i(vQe),D_e=n(vQe,"SPAN",{});var g9t=s(D_e);mzo=r(g9t,"AutoModelForMultipleChoice"),g9t.forEach(t),vQe.forEach(t),hXe=i(f),Bo=n(f,"DIV",{class:!0});var ll=s(Bo);T(ny.$$.fragment,ll),gzo=i(ll),nd=n(ll,"P",{});var Nre=s(nd);hzo=r(Nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),DX=n(Nre,"A",{href:!0});var h9t=s(DX);pzo=r(h9t,"from_pretrained()"),h9t.forEach(t),_zo=r(Nre," class method or the "),GX=n(Nre,"A",{href:!0});var p9t=s(GX);uzo=r(p9t,"from_config()"),p9t.forEach(t),bzo=r(Nre,` class
method.`),Nre.forEach(t),vzo=i(ll),sy=n(ll,"P",{});var FQe=s(sy);Fzo=r(FQe,"This class cannot be instantiated directly using "),G_e=n(FQe,"CODE",{});var _9t=s(G_e);Tzo=r(_9t,"__init__()"),_9t.forEach(t),Mzo=r(FQe," (throws an error)."),FQe.forEach(t),Ezo=i(ll),gt=n(ll,"DIV",{class:!0});var bA=s(gt);T(ly.$$.fragment,bA),Czo=i(bA),O_e=n(bA,"P",{});var u9t=s(O_e);wzo=r(u9t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),u9t.forEach(t),Azo=i(bA),sd=n(bA,"P",{});var qre=s(sd);Lzo=r(qre,`Note:
Loading a model from its configuration file does `),V_e=n(qre,"STRONG",{});var b9t=s(V_e);yzo=r(b9t,"not"),b9t.forEach(t),xzo=r(qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),OX=n(qre,"A",{href:!0});var v9t=s(OX);$zo=r(v9t,"from_pretrained()"),v9t.forEach(t),kzo=r(qre," to load the model weights."),qre.forEach(t),Szo=i(bA),T(Ob.$$.fragment,bA),bA.forEach(t),Rzo=i(ll),ro=n(ll,"DIV",{class:!0});var ma=s(ro);T(iy.$$.fragment,ma),Pzo=i(ma),X_e=n(ma,"P",{});var F9t=s(X_e);Bzo=r(F9t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F9t.forEach(t),Izo=i(ma),Oa=n(ma,"P",{});var vA=s(Oa);Nzo=r(vA,"The model class to instantiate is selected based on the "),z_e=n(vA,"CODE",{});var T9t=s(z_e);qzo=r(T9t,"model_type"),T9t.forEach(t),jzo=r(vA,` property of the config object (either
passed as an argument or loaded from `),Q_e=n(vA,"CODE",{});var M9t=s(Q_e);Dzo=r(M9t,"pretrained_model_name_or_path"),M9t.forEach(t),Gzo=r(vA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W_e=n(vA,"CODE",{});var E9t=s(W_e);Ozo=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),Vzo=r(vA,":"),vA.forEach(t),Xzo=i(ma),Z=n(ma,"UL",{});var ee=s(Z);Vb=n(ee,"LI",{});var vPe=s(Vb);H_e=n(vPe,"STRONG",{});var C9t=s(H_e);zzo=r(C9t,"albert"),C9t.forEach(t),Qzo=r(vPe," \u2014 "),VX=n(vPe,"A",{href:!0});var w9t=s(VX);Wzo=r(w9t,"AlbertForMultipleChoice"),w9t.forEach(t),Hzo=r(vPe," (ALBERT model)"),vPe.forEach(t),Uzo=i(ee),Xb=n(ee,"LI",{});var FPe=s(Xb);U_e=n(FPe,"STRONG",{});var A9t=s(U_e);Jzo=r(A9t,"bert"),A9t.forEach(t),Yzo=r(FPe," \u2014 "),XX=n(FPe,"A",{href:!0});var L9t=s(XX);Kzo=r(L9t,"BertForMultipleChoice"),L9t.forEach(t),Zzo=r(FPe," (BERT model)"),FPe.forEach(t),eQo=i(ee),zb=n(ee,"LI",{});var TPe=s(zb);J_e=n(TPe,"STRONG",{});var y9t=s(J_e);oQo=r(y9t,"big_bird"),y9t.forEach(t),rQo=r(TPe," \u2014 "),zX=n(TPe,"A",{href:!0});var x9t=s(zX);tQo=r(x9t,"BigBirdForMultipleChoice"),x9t.forEach(t),aQo=r(TPe," (BigBird model)"),TPe.forEach(t),nQo=i(ee),Qb=n(ee,"LI",{});var MPe=s(Qb);Y_e=n(MPe,"STRONG",{});var $9t=s(Y_e);sQo=r($9t,"camembert"),$9t.forEach(t),lQo=r(MPe," \u2014 "),QX=n(MPe,"A",{href:!0});var k9t=s(QX);iQo=r(k9t,"CamembertForMultipleChoice"),k9t.forEach(t),dQo=r(MPe," (CamemBERT model)"),MPe.forEach(t),cQo=i(ee),Wb=n(ee,"LI",{});var EPe=s(Wb);K_e=n(EPe,"STRONG",{});var S9t=s(K_e);fQo=r(S9t,"canine"),S9t.forEach(t),mQo=r(EPe," \u2014 "),WX=n(EPe,"A",{href:!0});var R9t=s(WX);gQo=r(R9t,"CanineForMultipleChoice"),R9t.forEach(t),hQo=r(EPe," (CANINE model)"),EPe.forEach(t),pQo=i(ee),Hb=n(ee,"LI",{});var CPe=s(Hb);Z_e=n(CPe,"STRONG",{});var P9t=s(Z_e);_Qo=r(P9t,"convbert"),P9t.forEach(t),uQo=r(CPe," \u2014 "),HX=n(CPe,"A",{href:!0});var B9t=s(HX);bQo=r(B9t,"ConvBertForMultipleChoice"),B9t.forEach(t),vQo=r(CPe," (ConvBERT model)"),CPe.forEach(t),FQo=i(ee),Ub=n(ee,"LI",{});var wPe=s(Ub);eue=n(wPe,"STRONG",{});var I9t=s(eue);TQo=r(I9t,"data2vec-text"),I9t.forEach(t),MQo=r(wPe," \u2014 "),UX=n(wPe,"A",{href:!0});var N9t=s(UX);EQo=r(N9t,"Data2VecTextForMultipleChoice"),N9t.forEach(t),CQo=r(wPe," (Data2VecText model)"),wPe.forEach(t),wQo=i(ee),Jb=n(ee,"LI",{});var APe=s(Jb);oue=n(APe,"STRONG",{});var q9t=s(oue);AQo=r(q9t,"deberta-v2"),q9t.forEach(t),LQo=r(APe," \u2014 "),JX=n(APe,"A",{href:!0});var j9t=s(JX);yQo=r(j9t,"DebertaV2ForMultipleChoice"),j9t.forEach(t),xQo=r(APe," (DeBERTa-v2 model)"),APe.forEach(t),$Qo=i(ee),Yb=n(ee,"LI",{});var LPe=s(Yb);rue=n(LPe,"STRONG",{});var D9t=s(rue);kQo=r(D9t,"distilbert"),D9t.forEach(t),SQo=r(LPe," \u2014 "),YX=n(LPe,"A",{href:!0});var G9t=s(YX);RQo=r(G9t,"DistilBertForMultipleChoice"),G9t.forEach(t),PQo=r(LPe," (DistilBERT model)"),LPe.forEach(t),BQo=i(ee),Kb=n(ee,"LI",{});var yPe=s(Kb);tue=n(yPe,"STRONG",{});var O9t=s(tue);IQo=r(O9t,"electra"),O9t.forEach(t),NQo=r(yPe," \u2014 "),KX=n(yPe,"A",{href:!0});var V9t=s(KX);qQo=r(V9t,"ElectraForMultipleChoice"),V9t.forEach(t),jQo=r(yPe," (ELECTRA model)"),yPe.forEach(t),DQo=i(ee),Zb=n(ee,"LI",{});var xPe=s(Zb);aue=n(xPe,"STRONG",{});var X9t=s(aue);GQo=r(X9t,"flaubert"),X9t.forEach(t),OQo=r(xPe," \u2014 "),ZX=n(xPe,"A",{href:!0});var z9t=s(ZX);VQo=r(z9t,"FlaubertForMultipleChoice"),z9t.forEach(t),XQo=r(xPe," (FlauBERT model)"),xPe.forEach(t),zQo=i(ee),ev=n(ee,"LI",{});var $Pe=s(ev);nue=n($Pe,"STRONG",{});var Q9t=s(nue);QQo=r(Q9t,"fnet"),Q9t.forEach(t),WQo=r($Pe," \u2014 "),ez=n($Pe,"A",{href:!0});var W9t=s(ez);HQo=r(W9t,"FNetForMultipleChoice"),W9t.forEach(t),UQo=r($Pe," (FNet model)"),$Pe.forEach(t),JQo=i(ee),ov=n(ee,"LI",{});var kPe=s(ov);sue=n(kPe,"STRONG",{});var H9t=s(sue);YQo=r(H9t,"funnel"),H9t.forEach(t),KQo=r(kPe," \u2014 "),oz=n(kPe,"A",{href:!0});var U9t=s(oz);ZQo=r(U9t,"FunnelForMultipleChoice"),U9t.forEach(t),eWo=r(kPe," (Funnel Transformer model)"),kPe.forEach(t),oWo=i(ee),rv=n(ee,"LI",{});var SPe=s(rv);lue=n(SPe,"STRONG",{});var J9t=s(lue);rWo=r(J9t,"ibert"),J9t.forEach(t),tWo=r(SPe," \u2014 "),rz=n(SPe,"A",{href:!0});var Y9t=s(rz);aWo=r(Y9t,"IBertForMultipleChoice"),Y9t.forEach(t),nWo=r(SPe," (I-BERT model)"),SPe.forEach(t),sWo=i(ee),tv=n(ee,"LI",{});var RPe=s(tv);iue=n(RPe,"STRONG",{});var K9t=s(iue);lWo=r(K9t,"longformer"),K9t.forEach(t),iWo=r(RPe," \u2014 "),tz=n(RPe,"A",{href:!0});var Z9t=s(tz);dWo=r(Z9t,"LongformerForMultipleChoice"),Z9t.forEach(t),cWo=r(RPe," (Longformer model)"),RPe.forEach(t),fWo=i(ee),av=n(ee,"LI",{});var PPe=s(av);due=n(PPe,"STRONG",{});var eMt=s(due);mWo=r(eMt,"megatron-bert"),eMt.forEach(t),gWo=r(PPe," \u2014 "),az=n(PPe,"A",{href:!0});var oMt=s(az);hWo=r(oMt,"MegatronBertForMultipleChoice"),oMt.forEach(t),pWo=r(PPe," (Megatron-BERT model)"),PPe.forEach(t),_Wo=i(ee),nv=n(ee,"LI",{});var BPe=s(nv);cue=n(BPe,"STRONG",{});var rMt=s(cue);uWo=r(rMt,"mobilebert"),rMt.forEach(t),bWo=r(BPe," \u2014 "),nz=n(BPe,"A",{href:!0});var tMt=s(nz);vWo=r(tMt,"MobileBertForMultipleChoice"),tMt.forEach(t),FWo=r(BPe," (MobileBERT model)"),BPe.forEach(t),TWo=i(ee),sv=n(ee,"LI",{});var IPe=s(sv);fue=n(IPe,"STRONG",{});var aMt=s(fue);MWo=r(aMt,"mpnet"),aMt.forEach(t),EWo=r(IPe," \u2014 "),sz=n(IPe,"A",{href:!0});var nMt=s(sz);CWo=r(nMt,"MPNetForMultipleChoice"),nMt.forEach(t),wWo=r(IPe," (MPNet model)"),IPe.forEach(t),AWo=i(ee),lv=n(ee,"LI",{});var NPe=s(lv);mue=n(NPe,"STRONG",{});var sMt=s(mue);LWo=r(sMt,"nezha"),sMt.forEach(t),yWo=r(NPe," \u2014 "),lz=n(NPe,"A",{href:!0});var lMt=s(lz);xWo=r(lMt,"NezhaForMultipleChoice"),lMt.forEach(t),$Wo=r(NPe," (Nezha model)"),NPe.forEach(t),kWo=i(ee),iv=n(ee,"LI",{});var qPe=s(iv);gue=n(qPe,"STRONG",{});var iMt=s(gue);SWo=r(iMt,"nystromformer"),iMt.forEach(t),RWo=r(qPe," \u2014 "),iz=n(qPe,"A",{href:!0});var dMt=s(iz);PWo=r(dMt,"NystromformerForMultipleChoice"),dMt.forEach(t),BWo=r(qPe," (Nystr\xF6mformer model)"),qPe.forEach(t),IWo=i(ee),dv=n(ee,"LI",{});var jPe=s(dv);hue=n(jPe,"STRONG",{});var cMt=s(hue);NWo=r(cMt,"qdqbert"),cMt.forEach(t),qWo=r(jPe," \u2014 "),dz=n(jPe,"A",{href:!0});var fMt=s(dz);jWo=r(fMt,"QDQBertForMultipleChoice"),fMt.forEach(t),DWo=r(jPe," (QDQBert model)"),jPe.forEach(t),GWo=i(ee),cv=n(ee,"LI",{});var DPe=s(cv);pue=n(DPe,"STRONG",{});var mMt=s(pue);OWo=r(mMt,"rembert"),mMt.forEach(t),VWo=r(DPe," \u2014 "),cz=n(DPe,"A",{href:!0});var gMt=s(cz);XWo=r(gMt,"RemBertForMultipleChoice"),gMt.forEach(t),zWo=r(DPe," (RemBERT model)"),DPe.forEach(t),QWo=i(ee),fv=n(ee,"LI",{});var GPe=s(fv);_ue=n(GPe,"STRONG",{});var hMt=s(_ue);WWo=r(hMt,"roberta"),hMt.forEach(t),HWo=r(GPe," \u2014 "),fz=n(GPe,"A",{href:!0});var pMt=s(fz);UWo=r(pMt,"RobertaForMultipleChoice"),pMt.forEach(t),JWo=r(GPe," (RoBERTa model)"),GPe.forEach(t),YWo=i(ee),mv=n(ee,"LI",{});var OPe=s(mv);uue=n(OPe,"STRONG",{});var _Mt=s(uue);KWo=r(_Mt,"roformer"),_Mt.forEach(t),ZWo=r(OPe," \u2014 "),mz=n(OPe,"A",{href:!0});var uMt=s(mz);eHo=r(uMt,"RoFormerForMultipleChoice"),uMt.forEach(t),oHo=r(OPe," (RoFormer model)"),OPe.forEach(t),rHo=i(ee),gv=n(ee,"LI",{});var VPe=s(gv);bue=n(VPe,"STRONG",{});var bMt=s(bue);tHo=r(bMt,"squeezebert"),bMt.forEach(t),aHo=r(VPe," \u2014 "),gz=n(VPe,"A",{href:!0});var vMt=s(gz);nHo=r(vMt,"SqueezeBertForMultipleChoice"),vMt.forEach(t),sHo=r(VPe," (SqueezeBERT model)"),VPe.forEach(t),lHo=i(ee),hv=n(ee,"LI",{});var XPe=s(hv);vue=n(XPe,"STRONG",{});var FMt=s(vue);iHo=r(FMt,"xlm"),FMt.forEach(t),dHo=r(XPe," \u2014 "),hz=n(XPe,"A",{href:!0});var TMt=s(hz);cHo=r(TMt,"XLMForMultipleChoice"),TMt.forEach(t),fHo=r(XPe," (XLM model)"),XPe.forEach(t),mHo=i(ee),pv=n(ee,"LI",{});var zPe=s(pv);Fue=n(zPe,"STRONG",{});var MMt=s(Fue);gHo=r(MMt,"xlm-roberta"),MMt.forEach(t),hHo=r(zPe," \u2014 "),pz=n(zPe,"A",{href:!0});var EMt=s(pz);pHo=r(EMt,"XLMRobertaForMultipleChoice"),EMt.forEach(t),_Ho=r(zPe," (XLM-RoBERTa model)"),zPe.forEach(t),uHo=i(ee),_v=n(ee,"LI",{});var QPe=s(_v);Tue=n(QPe,"STRONG",{});var CMt=s(Tue);bHo=r(CMt,"xlm-roberta-xl"),CMt.forEach(t),vHo=r(QPe," \u2014 "),_z=n(QPe,"A",{href:!0});var wMt=s(_z);FHo=r(wMt,"XLMRobertaXLForMultipleChoice"),wMt.forEach(t),THo=r(QPe," (XLM-RoBERTa-XL model)"),QPe.forEach(t),MHo=i(ee),uv=n(ee,"LI",{});var WPe=s(uv);Mue=n(WPe,"STRONG",{});var AMt=s(Mue);EHo=r(AMt,"xlnet"),AMt.forEach(t),CHo=r(WPe," \u2014 "),uz=n(WPe,"A",{href:!0});var LMt=s(uz);wHo=r(LMt,"XLNetForMultipleChoice"),LMt.forEach(t),AHo=r(WPe," (XLNet model)"),WPe.forEach(t),LHo=i(ee),bv=n(ee,"LI",{});var HPe=s(bv);Eue=n(HPe,"STRONG",{});var yMt=s(Eue);yHo=r(yMt,"yoso"),yMt.forEach(t),xHo=r(HPe," \u2014 "),bz=n(HPe,"A",{href:!0});var xMt=s(bz);$Ho=r(xMt,"YosoForMultipleChoice"),xMt.forEach(t),kHo=r(HPe," (YOSO model)"),HPe.forEach(t),ee.forEach(t),SHo=i(ma),vv=n(ma,"P",{});var UPe=s(vv);RHo=r(UPe,"The model is set in evaluation mode by default using "),Cue=n(UPe,"CODE",{});var $Mt=s(Cue);PHo=r($Mt,"model.eval()"),$Mt.forEach(t),BHo=r(UPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wue=n(UPe,"CODE",{});var kMt=s(wue);IHo=r(kMt,"model.train()"),kMt.forEach(t),UPe.forEach(t),NHo=i(ma),T(Fv.$$.fragment,ma),ma.forEach(t),ll.forEach(t),pXe=i(f),ld=n(f,"H2",{class:!0});var TQe=s(ld);Tv=n(TQe,"A",{id:!0,class:!0,href:!0});var SMt=s(Tv);Aue=n(SMt,"SPAN",{});var RMt=s(Aue);T(dy.$$.fragment,RMt),RMt.forEach(t),SMt.forEach(t),qHo=i(TQe),Lue=n(TQe,"SPAN",{});var PMt=s(Lue);jHo=r(PMt,"AutoModelForNextSentencePrediction"),PMt.forEach(t),TQe.forEach(t),_Xe=i(f),Io=n(f,"DIV",{class:!0});var il=s(Io);T(cy.$$.fragment,il),DHo=i(il),id=n(il,"P",{});var jre=s(id);GHo=r(jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vz=n(jre,"A",{href:!0});var BMt=s(vz);OHo=r(BMt,"from_pretrained()"),BMt.forEach(t),VHo=r(jre," class method or the "),Fz=n(jre,"A",{href:!0});var IMt=s(Fz);XHo=r(IMt,"from_config()"),IMt.forEach(t),zHo=r(jre,` class
method.`),jre.forEach(t),QHo=i(il),fy=n(il,"P",{});var MQe=s(fy);WHo=r(MQe,"This class cannot be instantiated directly using "),yue=n(MQe,"CODE",{});var NMt=s(yue);HHo=r(NMt,"__init__()"),NMt.forEach(t),UHo=r(MQe," (throws an error)."),MQe.forEach(t),JHo=i(il),ht=n(il,"DIV",{class:!0});var FA=s(ht);T(my.$$.fragment,FA),YHo=i(FA),xue=n(FA,"P",{});var qMt=s(xue);KHo=r(qMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qMt.forEach(t),ZHo=i(FA),dd=n(FA,"P",{});var Dre=s(dd);eUo=r(Dre,`Note:
Loading a model from its configuration file does `),$ue=n(Dre,"STRONG",{});var jMt=s($ue);oUo=r(jMt,"not"),jMt.forEach(t),rUo=r(Dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(Dre,"A",{href:!0});var DMt=s(Tz);tUo=r(DMt,"from_pretrained()"),DMt.forEach(t),aUo=r(Dre," to load the model weights."),Dre.forEach(t),nUo=i(FA),T(Mv.$$.fragment,FA),FA.forEach(t),sUo=i(il),to=n(il,"DIV",{class:!0});var ga=s(to);T(gy.$$.fragment,ga),lUo=i(ga),kue=n(ga,"P",{});var GMt=s(kue);iUo=r(GMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GMt.forEach(t),dUo=i(ga),Va=n(ga,"P",{});var TA=s(Va);cUo=r(TA,"The model class to instantiate is selected based on the "),Sue=n(TA,"CODE",{});var OMt=s(Sue);fUo=r(OMt,"model_type"),OMt.forEach(t),mUo=r(TA,` property of the config object (either
passed as an argument or loaded from `),Rue=n(TA,"CODE",{});var VMt=s(Rue);gUo=r(VMt,"pretrained_model_name_or_path"),VMt.forEach(t),hUo=r(TA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pue=n(TA,"CODE",{});var XMt=s(Pue);pUo=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),_Uo=r(TA,":"),TA.forEach(t),uUo=i(ga),No=n(ga,"UL",{});var ha=s(No);Ev=n(ha,"LI",{});var JPe=s(Ev);Bue=n(JPe,"STRONG",{});var zMt=s(Bue);bUo=r(zMt,"bert"),zMt.forEach(t),vUo=r(JPe," \u2014 "),Mz=n(JPe,"A",{href:!0});var QMt=s(Mz);FUo=r(QMt,"BertForNextSentencePrediction"),QMt.forEach(t),TUo=r(JPe," (BERT model)"),JPe.forEach(t),MUo=i(ha),Cv=n(ha,"LI",{});var YPe=s(Cv);Iue=n(YPe,"STRONG",{});var WMt=s(Iue);EUo=r(WMt,"fnet"),WMt.forEach(t),CUo=r(YPe," \u2014 "),Ez=n(YPe,"A",{href:!0});var HMt=s(Ez);wUo=r(HMt,"FNetForNextSentencePrediction"),HMt.forEach(t),AUo=r(YPe," (FNet model)"),YPe.forEach(t),LUo=i(ha),wv=n(ha,"LI",{});var KPe=s(wv);Nue=n(KPe,"STRONG",{});var UMt=s(Nue);yUo=r(UMt,"megatron-bert"),UMt.forEach(t),xUo=r(KPe," \u2014 "),Cz=n(KPe,"A",{href:!0});var JMt=s(Cz);$Uo=r(JMt,"MegatronBertForNextSentencePrediction"),JMt.forEach(t),kUo=r(KPe," (Megatron-BERT model)"),KPe.forEach(t),SUo=i(ha),Av=n(ha,"LI",{});var ZPe=s(Av);que=n(ZPe,"STRONG",{});var YMt=s(que);RUo=r(YMt,"mobilebert"),YMt.forEach(t),PUo=r(ZPe," \u2014 "),wz=n(ZPe,"A",{href:!0});var KMt=s(wz);BUo=r(KMt,"MobileBertForNextSentencePrediction"),KMt.forEach(t),IUo=r(ZPe," (MobileBERT model)"),ZPe.forEach(t),NUo=i(ha),Lv=n(ha,"LI",{});var eBe=s(Lv);jue=n(eBe,"STRONG",{});var ZMt=s(jue);qUo=r(ZMt,"nezha"),ZMt.forEach(t),jUo=r(eBe," \u2014 "),Az=n(eBe,"A",{href:!0});var eEt=s(Az);DUo=r(eEt,"NezhaForNextSentencePrediction"),eEt.forEach(t),GUo=r(eBe," (Nezha model)"),eBe.forEach(t),OUo=i(ha),yv=n(ha,"LI",{});var oBe=s(yv);Due=n(oBe,"STRONG",{});var oEt=s(Due);VUo=r(oEt,"qdqbert"),oEt.forEach(t),XUo=r(oBe," \u2014 "),Lz=n(oBe,"A",{href:!0});var rEt=s(Lz);zUo=r(rEt,"QDQBertForNextSentencePrediction"),rEt.forEach(t),QUo=r(oBe," (QDQBert model)"),oBe.forEach(t),ha.forEach(t),WUo=i(ga),xv=n(ga,"P",{});var rBe=s(xv);HUo=r(rBe,"The model is set in evaluation mode by default using "),Gue=n(rBe,"CODE",{});var tEt=s(Gue);UUo=r(tEt,"model.eval()"),tEt.forEach(t),JUo=r(rBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oue=n(rBe,"CODE",{});var aEt=s(Oue);YUo=r(aEt,"model.train()"),aEt.forEach(t),rBe.forEach(t),KUo=i(ga),T($v.$$.fragment,ga),ga.forEach(t),il.forEach(t),uXe=i(f),cd=n(f,"H2",{class:!0});var EQe=s(cd);kv=n(EQe,"A",{id:!0,class:!0,href:!0});var nEt=s(kv);Vue=n(nEt,"SPAN",{});var sEt=s(Vue);T(hy.$$.fragment,sEt),sEt.forEach(t),nEt.forEach(t),ZUo=i(EQe),Xue=n(EQe,"SPAN",{});var lEt=s(Xue);eJo=r(lEt,"AutoModelForTokenClassification"),lEt.forEach(t),EQe.forEach(t),bXe=i(f),qo=n(f,"DIV",{class:!0});var dl=s(qo);T(py.$$.fragment,dl),oJo=i(dl),fd=n(dl,"P",{});var Gre=s(fd);rJo=r(Gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yz=n(Gre,"A",{href:!0});var iEt=s(yz);tJo=r(iEt,"from_pretrained()"),iEt.forEach(t),aJo=r(Gre," class method or the "),xz=n(Gre,"A",{href:!0});var dEt=s(xz);nJo=r(dEt,"from_config()"),dEt.forEach(t),sJo=r(Gre,` class
method.`),Gre.forEach(t),lJo=i(dl),_y=n(dl,"P",{});var CQe=s(_y);iJo=r(CQe,"This class cannot be instantiated directly using "),zue=n(CQe,"CODE",{});var cEt=s(zue);dJo=r(cEt,"__init__()"),cEt.forEach(t),cJo=r(CQe," (throws an error)."),CQe.forEach(t),fJo=i(dl),pt=n(dl,"DIV",{class:!0});var MA=s(pt);T(uy.$$.fragment,MA),mJo=i(MA),Que=n(MA,"P",{});var fEt=s(Que);gJo=r(fEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fEt.forEach(t),hJo=i(MA),md=n(MA,"P",{});var Ore=s(md);pJo=r(Ore,`Note:
Loading a model from its configuration file does `),Wue=n(Ore,"STRONG",{});var mEt=s(Wue);_Jo=r(mEt,"not"),mEt.forEach(t),uJo=r(Ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),$z=n(Ore,"A",{href:!0});var gEt=s($z);bJo=r(gEt,"from_pretrained()"),gEt.forEach(t),vJo=r(Ore," to load the model weights."),Ore.forEach(t),FJo=i(MA),T(Sv.$$.fragment,MA),MA.forEach(t),TJo=i(dl),ao=n(dl,"DIV",{class:!0});var pa=s(ao);T(by.$$.fragment,pa),MJo=i(pa),Hue=n(pa,"P",{});var hEt=s(Hue);EJo=r(hEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hEt.forEach(t),CJo=i(pa),Xa=n(pa,"P",{});var EA=s(Xa);wJo=r(EA,"The model class to instantiate is selected based on the "),Uue=n(EA,"CODE",{});var pEt=s(Uue);AJo=r(pEt,"model_type"),pEt.forEach(t),LJo=r(EA,` property of the config object (either
passed as an argument or loaded from `),Jue=n(EA,"CODE",{});var _Et=s(Jue);yJo=r(_Et,"pretrained_model_name_or_path"),_Et.forEach(t),xJo=r(EA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yue=n(EA,"CODE",{});var uEt=s(Yue);$Jo=r(uEt,"pretrained_model_name_or_path"),uEt.forEach(t),kJo=r(EA,":"),EA.forEach(t),SJo=i(pa),U=n(pa,"UL",{});var J=s(U);Rv=n(J,"LI",{});var tBe=s(Rv);Kue=n(tBe,"STRONG",{});var bEt=s(Kue);RJo=r(bEt,"albert"),bEt.forEach(t),PJo=r(tBe," \u2014 "),kz=n(tBe,"A",{href:!0});var vEt=s(kz);BJo=r(vEt,"AlbertForTokenClassification"),vEt.forEach(t),IJo=r(tBe," (ALBERT model)"),tBe.forEach(t),NJo=i(J),Pv=n(J,"LI",{});var aBe=s(Pv);Zue=n(aBe,"STRONG",{});var FEt=s(Zue);qJo=r(FEt,"bert"),FEt.forEach(t),jJo=r(aBe," \u2014 "),Sz=n(aBe,"A",{href:!0});var TEt=s(Sz);DJo=r(TEt,"BertForTokenClassification"),TEt.forEach(t),GJo=r(aBe," (BERT model)"),aBe.forEach(t),OJo=i(J),Bv=n(J,"LI",{});var nBe=s(Bv);e2e=n(nBe,"STRONG",{});var MEt=s(e2e);VJo=r(MEt,"big_bird"),MEt.forEach(t),XJo=r(nBe," \u2014 "),Rz=n(nBe,"A",{href:!0});var EEt=s(Rz);zJo=r(EEt,"BigBirdForTokenClassification"),EEt.forEach(t),QJo=r(nBe," (BigBird model)"),nBe.forEach(t),WJo=i(J),Iv=n(J,"LI",{});var sBe=s(Iv);o2e=n(sBe,"STRONG",{});var CEt=s(o2e);HJo=r(CEt,"bloom"),CEt.forEach(t),UJo=r(sBe," \u2014 "),Pz=n(sBe,"A",{href:!0});var wEt=s(Pz);JJo=r(wEt,"BloomForTokenClassification"),wEt.forEach(t),YJo=r(sBe," (BLOOM model)"),sBe.forEach(t),KJo=i(J),Nv=n(J,"LI",{});var lBe=s(Nv);r2e=n(lBe,"STRONG",{});var AEt=s(r2e);ZJo=r(AEt,"camembert"),AEt.forEach(t),eYo=r(lBe," \u2014 "),Bz=n(lBe,"A",{href:!0});var LEt=s(Bz);oYo=r(LEt,"CamembertForTokenClassification"),LEt.forEach(t),rYo=r(lBe," (CamemBERT model)"),lBe.forEach(t),tYo=i(J),qv=n(J,"LI",{});var iBe=s(qv);t2e=n(iBe,"STRONG",{});var yEt=s(t2e);aYo=r(yEt,"canine"),yEt.forEach(t),nYo=r(iBe," \u2014 "),Iz=n(iBe,"A",{href:!0});var xEt=s(Iz);sYo=r(xEt,"CanineForTokenClassification"),xEt.forEach(t),lYo=r(iBe," (CANINE model)"),iBe.forEach(t),iYo=i(J),jv=n(J,"LI",{});var dBe=s(jv);a2e=n(dBe,"STRONG",{});var $Et=s(a2e);dYo=r($Et,"convbert"),$Et.forEach(t),cYo=r(dBe," \u2014 "),Nz=n(dBe,"A",{href:!0});var kEt=s(Nz);fYo=r(kEt,"ConvBertForTokenClassification"),kEt.forEach(t),mYo=r(dBe," (ConvBERT model)"),dBe.forEach(t),gYo=i(J),Dv=n(J,"LI",{});var cBe=s(Dv);n2e=n(cBe,"STRONG",{});var SEt=s(n2e);hYo=r(SEt,"data2vec-text"),SEt.forEach(t),pYo=r(cBe," \u2014 "),qz=n(cBe,"A",{href:!0});var REt=s(qz);_Yo=r(REt,"Data2VecTextForTokenClassification"),REt.forEach(t),uYo=r(cBe," (Data2VecText model)"),cBe.forEach(t),bYo=i(J),Gv=n(J,"LI",{});var fBe=s(Gv);s2e=n(fBe,"STRONG",{});var PEt=s(s2e);vYo=r(PEt,"deberta"),PEt.forEach(t),FYo=r(fBe," \u2014 "),jz=n(fBe,"A",{href:!0});var BEt=s(jz);TYo=r(BEt,"DebertaForTokenClassification"),BEt.forEach(t),MYo=r(fBe," (DeBERTa model)"),fBe.forEach(t),EYo=i(J),Ov=n(J,"LI",{});var mBe=s(Ov);l2e=n(mBe,"STRONG",{});var IEt=s(l2e);CYo=r(IEt,"deberta-v2"),IEt.forEach(t),wYo=r(mBe," \u2014 "),Dz=n(mBe,"A",{href:!0});var NEt=s(Dz);AYo=r(NEt,"DebertaV2ForTokenClassification"),NEt.forEach(t),LYo=r(mBe," (DeBERTa-v2 model)"),mBe.forEach(t),yYo=i(J),Vv=n(J,"LI",{});var gBe=s(Vv);i2e=n(gBe,"STRONG",{});var qEt=s(i2e);xYo=r(qEt,"distilbert"),qEt.forEach(t),$Yo=r(gBe," \u2014 "),Gz=n(gBe,"A",{href:!0});var jEt=s(Gz);kYo=r(jEt,"DistilBertForTokenClassification"),jEt.forEach(t),SYo=r(gBe," (DistilBERT model)"),gBe.forEach(t),RYo=i(J),Xv=n(J,"LI",{});var hBe=s(Xv);d2e=n(hBe,"STRONG",{});var DEt=s(d2e);PYo=r(DEt,"electra"),DEt.forEach(t),BYo=r(hBe," \u2014 "),Oz=n(hBe,"A",{href:!0});var GEt=s(Oz);IYo=r(GEt,"ElectraForTokenClassification"),GEt.forEach(t),NYo=r(hBe," (ELECTRA model)"),hBe.forEach(t),qYo=i(J),zv=n(J,"LI",{});var pBe=s(zv);c2e=n(pBe,"STRONG",{});var OEt=s(c2e);jYo=r(OEt,"flaubert"),OEt.forEach(t),DYo=r(pBe," \u2014 "),Vz=n(pBe,"A",{href:!0});var VEt=s(Vz);GYo=r(VEt,"FlaubertForTokenClassification"),VEt.forEach(t),OYo=r(pBe," (FlauBERT model)"),pBe.forEach(t),VYo=i(J),Qv=n(J,"LI",{});var _Be=s(Qv);f2e=n(_Be,"STRONG",{});var XEt=s(f2e);XYo=r(XEt,"fnet"),XEt.forEach(t),zYo=r(_Be," \u2014 "),Xz=n(_Be,"A",{href:!0});var zEt=s(Xz);QYo=r(zEt,"FNetForTokenClassification"),zEt.forEach(t),WYo=r(_Be," (FNet model)"),_Be.forEach(t),HYo=i(J),Wv=n(J,"LI",{});var uBe=s(Wv);m2e=n(uBe,"STRONG",{});var QEt=s(m2e);UYo=r(QEt,"funnel"),QEt.forEach(t),JYo=r(uBe," \u2014 "),zz=n(uBe,"A",{href:!0});var WEt=s(zz);YYo=r(WEt,"FunnelForTokenClassification"),WEt.forEach(t),KYo=r(uBe," (Funnel Transformer model)"),uBe.forEach(t),ZYo=i(J),Hv=n(J,"LI",{});var bBe=s(Hv);g2e=n(bBe,"STRONG",{});var HEt=s(g2e);eKo=r(HEt,"gpt2"),HEt.forEach(t),oKo=r(bBe," \u2014 "),Qz=n(bBe,"A",{href:!0});var UEt=s(Qz);rKo=r(UEt,"GPT2ForTokenClassification"),UEt.forEach(t),tKo=r(bBe," (OpenAI GPT-2 model)"),bBe.forEach(t),aKo=i(J),Uv=n(J,"LI",{});var vBe=s(Uv);h2e=n(vBe,"STRONG",{});var JEt=s(h2e);nKo=r(JEt,"ibert"),JEt.forEach(t),sKo=r(vBe," \u2014 "),Wz=n(vBe,"A",{href:!0});var YEt=s(Wz);lKo=r(YEt,"IBertForTokenClassification"),YEt.forEach(t),iKo=r(vBe," (I-BERT model)"),vBe.forEach(t),dKo=i(J),Jv=n(J,"LI",{});var FBe=s(Jv);p2e=n(FBe,"STRONG",{});var KEt=s(p2e);cKo=r(KEt,"layoutlm"),KEt.forEach(t),fKo=r(FBe," \u2014 "),Hz=n(FBe,"A",{href:!0});var ZEt=s(Hz);mKo=r(ZEt,"LayoutLMForTokenClassification"),ZEt.forEach(t),gKo=r(FBe," (LayoutLM model)"),FBe.forEach(t),hKo=i(J),Yv=n(J,"LI",{});var TBe=s(Yv);_2e=n(TBe,"STRONG",{});var eCt=s(_2e);pKo=r(eCt,"layoutlmv2"),eCt.forEach(t),_Ko=r(TBe," \u2014 "),Uz=n(TBe,"A",{href:!0});var oCt=s(Uz);uKo=r(oCt,"LayoutLMv2ForTokenClassification"),oCt.forEach(t),bKo=r(TBe," (LayoutLMv2 model)"),TBe.forEach(t),vKo=i(J),Kv=n(J,"LI",{});var MBe=s(Kv);u2e=n(MBe,"STRONG",{});var rCt=s(u2e);FKo=r(rCt,"layoutlmv3"),rCt.forEach(t),TKo=r(MBe," \u2014 "),Jz=n(MBe,"A",{href:!0});var tCt=s(Jz);MKo=r(tCt,"LayoutLMv3ForTokenClassification"),tCt.forEach(t),EKo=r(MBe," (LayoutLMv3 model)"),MBe.forEach(t),CKo=i(J),Zv=n(J,"LI",{});var EBe=s(Zv);b2e=n(EBe,"STRONG",{});var aCt=s(b2e);wKo=r(aCt,"longformer"),aCt.forEach(t),AKo=r(EBe," \u2014 "),Yz=n(EBe,"A",{href:!0});var nCt=s(Yz);LKo=r(nCt,"LongformerForTokenClassification"),nCt.forEach(t),yKo=r(EBe," (Longformer model)"),EBe.forEach(t),xKo=i(J),eF=n(J,"LI",{});var CBe=s(eF);v2e=n(CBe,"STRONG",{});var sCt=s(v2e);$Ko=r(sCt,"megatron-bert"),sCt.forEach(t),kKo=r(CBe," \u2014 "),Kz=n(CBe,"A",{href:!0});var lCt=s(Kz);SKo=r(lCt,"MegatronBertForTokenClassification"),lCt.forEach(t),RKo=r(CBe," (Megatron-BERT model)"),CBe.forEach(t),PKo=i(J),oF=n(J,"LI",{});var wBe=s(oF);F2e=n(wBe,"STRONG",{});var iCt=s(F2e);BKo=r(iCt,"mobilebert"),iCt.forEach(t),IKo=r(wBe," \u2014 "),Zz=n(wBe,"A",{href:!0});var dCt=s(Zz);NKo=r(dCt,"MobileBertForTokenClassification"),dCt.forEach(t),qKo=r(wBe," (MobileBERT model)"),wBe.forEach(t),jKo=i(J),rF=n(J,"LI",{});var ABe=s(rF);T2e=n(ABe,"STRONG",{});var cCt=s(T2e);DKo=r(cCt,"mpnet"),cCt.forEach(t),GKo=r(ABe," \u2014 "),eQ=n(ABe,"A",{href:!0});var fCt=s(eQ);OKo=r(fCt,"MPNetForTokenClassification"),fCt.forEach(t),VKo=r(ABe," (MPNet model)"),ABe.forEach(t),XKo=i(J),tF=n(J,"LI",{});var LBe=s(tF);M2e=n(LBe,"STRONG",{});var mCt=s(M2e);zKo=r(mCt,"nezha"),mCt.forEach(t),QKo=r(LBe," \u2014 "),oQ=n(LBe,"A",{href:!0});var gCt=s(oQ);WKo=r(gCt,"NezhaForTokenClassification"),gCt.forEach(t),HKo=r(LBe," (Nezha model)"),LBe.forEach(t),UKo=i(J),aF=n(J,"LI",{});var yBe=s(aF);E2e=n(yBe,"STRONG",{});var hCt=s(E2e);JKo=r(hCt,"nystromformer"),hCt.forEach(t),YKo=r(yBe," \u2014 "),rQ=n(yBe,"A",{href:!0});var pCt=s(rQ);KKo=r(pCt,"NystromformerForTokenClassification"),pCt.forEach(t),ZKo=r(yBe," (Nystr\xF6mformer model)"),yBe.forEach(t),eZo=i(J),nF=n(J,"LI",{});var xBe=s(nF);C2e=n(xBe,"STRONG",{});var _Ct=s(C2e);oZo=r(_Ct,"qdqbert"),_Ct.forEach(t),rZo=r(xBe," \u2014 "),tQ=n(xBe,"A",{href:!0});var uCt=s(tQ);tZo=r(uCt,"QDQBertForTokenClassification"),uCt.forEach(t),aZo=r(xBe," (QDQBert model)"),xBe.forEach(t),nZo=i(J),sF=n(J,"LI",{});var $Be=s(sF);w2e=n($Be,"STRONG",{});var bCt=s(w2e);sZo=r(bCt,"rembert"),bCt.forEach(t),lZo=r($Be," \u2014 "),aQ=n($Be,"A",{href:!0});var vCt=s(aQ);iZo=r(vCt,"RemBertForTokenClassification"),vCt.forEach(t),dZo=r($Be," (RemBERT model)"),$Be.forEach(t),cZo=i(J),lF=n(J,"LI",{});var kBe=s(lF);A2e=n(kBe,"STRONG",{});var FCt=s(A2e);fZo=r(FCt,"roberta"),FCt.forEach(t),mZo=r(kBe," \u2014 "),nQ=n(kBe,"A",{href:!0});var TCt=s(nQ);gZo=r(TCt,"RobertaForTokenClassification"),TCt.forEach(t),hZo=r(kBe," (RoBERTa model)"),kBe.forEach(t),pZo=i(J),iF=n(J,"LI",{});var SBe=s(iF);L2e=n(SBe,"STRONG",{});var MCt=s(L2e);_Zo=r(MCt,"roformer"),MCt.forEach(t),uZo=r(SBe," \u2014 "),sQ=n(SBe,"A",{href:!0});var ECt=s(sQ);bZo=r(ECt,"RoFormerForTokenClassification"),ECt.forEach(t),vZo=r(SBe," (RoFormer model)"),SBe.forEach(t),FZo=i(J),dF=n(J,"LI",{});var RBe=s(dF);y2e=n(RBe,"STRONG",{});var CCt=s(y2e);TZo=r(CCt,"squeezebert"),CCt.forEach(t),MZo=r(RBe," \u2014 "),lQ=n(RBe,"A",{href:!0});var wCt=s(lQ);EZo=r(wCt,"SqueezeBertForTokenClassification"),wCt.forEach(t),CZo=r(RBe," (SqueezeBERT model)"),RBe.forEach(t),wZo=i(J),cF=n(J,"LI",{});var PBe=s(cF);x2e=n(PBe,"STRONG",{});var ACt=s(x2e);AZo=r(ACt,"xlm"),ACt.forEach(t),LZo=r(PBe," \u2014 "),iQ=n(PBe,"A",{href:!0});var LCt=s(iQ);yZo=r(LCt,"XLMForTokenClassification"),LCt.forEach(t),xZo=r(PBe," (XLM model)"),PBe.forEach(t),$Zo=i(J),fF=n(J,"LI",{});var BBe=s(fF);$2e=n(BBe,"STRONG",{});var yCt=s($2e);kZo=r(yCt,"xlm-roberta"),yCt.forEach(t),SZo=r(BBe," \u2014 "),dQ=n(BBe,"A",{href:!0});var xCt=s(dQ);RZo=r(xCt,"XLMRobertaForTokenClassification"),xCt.forEach(t),PZo=r(BBe," (XLM-RoBERTa model)"),BBe.forEach(t),BZo=i(J),mF=n(J,"LI",{});var IBe=s(mF);k2e=n(IBe,"STRONG",{});var $Ct=s(k2e);IZo=r($Ct,"xlm-roberta-xl"),$Ct.forEach(t),NZo=r(IBe," \u2014 "),cQ=n(IBe,"A",{href:!0});var kCt=s(cQ);qZo=r(kCt,"XLMRobertaXLForTokenClassification"),kCt.forEach(t),jZo=r(IBe," (XLM-RoBERTa-XL model)"),IBe.forEach(t),DZo=i(J),gF=n(J,"LI",{});var NBe=s(gF);S2e=n(NBe,"STRONG",{});var SCt=s(S2e);GZo=r(SCt,"xlnet"),SCt.forEach(t),OZo=r(NBe," \u2014 "),fQ=n(NBe,"A",{href:!0});var RCt=s(fQ);VZo=r(RCt,"XLNetForTokenClassification"),RCt.forEach(t),XZo=r(NBe," (XLNet model)"),NBe.forEach(t),zZo=i(J),hF=n(J,"LI",{});var qBe=s(hF);R2e=n(qBe,"STRONG",{});var PCt=s(R2e);QZo=r(PCt,"yoso"),PCt.forEach(t),WZo=r(qBe," \u2014 "),mQ=n(qBe,"A",{href:!0});var BCt=s(mQ);HZo=r(BCt,"YosoForTokenClassification"),BCt.forEach(t),UZo=r(qBe," (YOSO model)"),qBe.forEach(t),J.forEach(t),JZo=i(pa),pF=n(pa,"P",{});var jBe=s(pF);YZo=r(jBe,"The model is set in evaluation mode by default using "),P2e=n(jBe,"CODE",{});var ICt=s(P2e);KZo=r(ICt,"model.eval()"),ICt.forEach(t),ZZo=r(jBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),B2e=n(jBe,"CODE",{});var NCt=s(B2e);eer=r(NCt,"model.train()"),NCt.forEach(t),jBe.forEach(t),oer=i(pa),T(_F.$$.fragment,pa),pa.forEach(t),dl.forEach(t),vXe=i(f),gd=n(f,"H2",{class:!0});var wQe=s(gd);uF=n(wQe,"A",{id:!0,class:!0,href:!0});var qCt=s(uF);I2e=n(qCt,"SPAN",{});var jCt=s(I2e);T(vy.$$.fragment,jCt),jCt.forEach(t),qCt.forEach(t),rer=i(wQe),N2e=n(wQe,"SPAN",{});var DCt=s(N2e);ter=r(DCt,"AutoModelForQuestionAnswering"),DCt.forEach(t),wQe.forEach(t),FXe=i(f),jo=n(f,"DIV",{class:!0});var cl=s(jo);T(Fy.$$.fragment,cl),aer=i(cl),hd=n(cl,"P",{});var Vre=s(hd);ner=r(Vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),gQ=n(Vre,"A",{href:!0});var GCt=s(gQ);ser=r(GCt,"from_pretrained()"),GCt.forEach(t),ler=r(Vre," class method or the "),hQ=n(Vre,"A",{href:!0});var OCt=s(hQ);ier=r(OCt,"from_config()"),OCt.forEach(t),der=r(Vre,` class
method.`),Vre.forEach(t),cer=i(cl),Ty=n(cl,"P",{});var AQe=s(Ty);fer=r(AQe,"This class cannot be instantiated directly using "),q2e=n(AQe,"CODE",{});var VCt=s(q2e);mer=r(VCt,"__init__()"),VCt.forEach(t),ger=r(AQe," (throws an error)."),AQe.forEach(t),her=i(cl),_t=n(cl,"DIV",{class:!0});var CA=s(_t);T(My.$$.fragment,CA),per=i(CA),j2e=n(CA,"P",{});var XCt=s(j2e);_er=r(XCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),XCt.forEach(t),uer=i(CA),pd=n(CA,"P",{});var Xre=s(pd);ber=r(Xre,`Note:
Loading a model from its configuration file does `),D2e=n(Xre,"STRONG",{});var zCt=s(D2e);ver=r(zCt,"not"),zCt.forEach(t),Fer=r(Xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),pQ=n(Xre,"A",{href:!0});var QCt=s(pQ);Ter=r(QCt,"from_pretrained()"),QCt.forEach(t),Mer=r(Xre," to load the model weights."),Xre.forEach(t),Eer=i(CA),T(bF.$$.fragment,CA),CA.forEach(t),Cer=i(cl),no=n(cl,"DIV",{class:!0});var _a=s(no);T(Ey.$$.fragment,_a),wer=i(_a),G2e=n(_a,"P",{});var WCt=s(G2e);Aer=r(WCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),WCt.forEach(t),Ler=i(_a),za=n(_a,"P",{});var wA=s(za);yer=r(wA,"The model class to instantiate is selected based on the "),O2e=n(wA,"CODE",{});var HCt=s(O2e);xer=r(HCt,"model_type"),HCt.forEach(t),$er=r(wA,` property of the config object (either
passed as an argument or loaded from `),V2e=n(wA,"CODE",{});var UCt=s(V2e);ker=r(UCt,"pretrained_model_name_or_path"),UCt.forEach(t),Ser=r(wA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X2e=n(wA,"CODE",{});var JCt=s(X2e);Rer=r(JCt,"pretrained_model_name_or_path"),JCt.forEach(t),Per=r(wA,":"),wA.forEach(t),Ber=i(_a),V=n(_a,"UL",{});var X=s(V);vF=n(X,"LI",{});var DBe=s(vF);z2e=n(DBe,"STRONG",{});var YCt=s(z2e);Ier=r(YCt,"albert"),YCt.forEach(t),Ner=r(DBe," \u2014 "),_Q=n(DBe,"A",{href:!0});var KCt=s(_Q);qer=r(KCt,"AlbertForQuestionAnswering"),KCt.forEach(t),jer=r(DBe," (ALBERT model)"),DBe.forEach(t),Der=i(X),FF=n(X,"LI",{});var GBe=s(FF);Q2e=n(GBe,"STRONG",{});var ZCt=s(Q2e);Ger=r(ZCt,"bart"),ZCt.forEach(t),Oer=r(GBe," \u2014 "),uQ=n(GBe,"A",{href:!0});var e3t=s(uQ);Ver=r(e3t,"BartForQuestionAnswering"),e3t.forEach(t),Xer=r(GBe," (BART model)"),GBe.forEach(t),zer=i(X),TF=n(X,"LI",{});var OBe=s(TF);W2e=n(OBe,"STRONG",{});var o3t=s(W2e);Qer=r(o3t,"bert"),o3t.forEach(t),Wer=r(OBe," \u2014 "),bQ=n(OBe,"A",{href:!0});var r3t=s(bQ);Her=r(r3t,"BertForQuestionAnswering"),r3t.forEach(t),Uer=r(OBe," (BERT model)"),OBe.forEach(t),Jer=i(X),MF=n(X,"LI",{});var VBe=s(MF);H2e=n(VBe,"STRONG",{});var t3t=s(H2e);Yer=r(t3t,"big_bird"),t3t.forEach(t),Ker=r(VBe," \u2014 "),vQ=n(VBe,"A",{href:!0});var a3t=s(vQ);Zer=r(a3t,"BigBirdForQuestionAnswering"),a3t.forEach(t),eor=r(VBe," (BigBird model)"),VBe.forEach(t),oor=i(X),EF=n(X,"LI",{});var XBe=s(EF);U2e=n(XBe,"STRONG",{});var n3t=s(U2e);ror=r(n3t,"bigbird_pegasus"),n3t.forEach(t),tor=r(XBe," \u2014 "),FQ=n(XBe,"A",{href:!0});var s3t=s(FQ);aor=r(s3t,"BigBirdPegasusForQuestionAnswering"),s3t.forEach(t),nor=r(XBe," (BigBird-Pegasus model)"),XBe.forEach(t),sor=i(X),CF=n(X,"LI",{});var zBe=s(CF);J2e=n(zBe,"STRONG",{});var l3t=s(J2e);lor=r(l3t,"camembert"),l3t.forEach(t),ior=r(zBe," \u2014 "),TQ=n(zBe,"A",{href:!0});var i3t=s(TQ);dor=r(i3t,"CamembertForQuestionAnswering"),i3t.forEach(t),cor=r(zBe," (CamemBERT model)"),zBe.forEach(t),mor=i(X),wF=n(X,"LI",{});var QBe=s(wF);Y2e=n(QBe,"STRONG",{});var d3t=s(Y2e);gor=r(d3t,"canine"),d3t.forEach(t),hor=r(QBe," \u2014 "),MQ=n(QBe,"A",{href:!0});var c3t=s(MQ);por=r(c3t,"CanineForQuestionAnswering"),c3t.forEach(t),_or=r(QBe," (CANINE model)"),QBe.forEach(t),uor=i(X),AF=n(X,"LI",{});var WBe=s(AF);K2e=n(WBe,"STRONG",{});var f3t=s(K2e);bor=r(f3t,"convbert"),f3t.forEach(t),vor=r(WBe," \u2014 "),EQ=n(WBe,"A",{href:!0});var m3t=s(EQ);For=r(m3t,"ConvBertForQuestionAnswering"),m3t.forEach(t),Tor=r(WBe," (ConvBERT model)"),WBe.forEach(t),Mor=i(X),LF=n(X,"LI",{});var HBe=s(LF);Z2e=n(HBe,"STRONG",{});var g3t=s(Z2e);Eor=r(g3t,"data2vec-text"),g3t.forEach(t),Cor=r(HBe," \u2014 "),CQ=n(HBe,"A",{href:!0});var h3t=s(CQ);wor=r(h3t,"Data2VecTextForQuestionAnswering"),h3t.forEach(t),Aor=r(HBe," (Data2VecText model)"),HBe.forEach(t),Lor=i(X),yF=n(X,"LI",{});var UBe=s(yF);e1e=n(UBe,"STRONG",{});var p3t=s(e1e);yor=r(p3t,"deberta"),p3t.forEach(t),xor=r(UBe," \u2014 "),wQ=n(UBe,"A",{href:!0});var _3t=s(wQ);$or=r(_3t,"DebertaForQuestionAnswering"),_3t.forEach(t),kor=r(UBe," (DeBERTa model)"),UBe.forEach(t),Sor=i(X),xF=n(X,"LI",{});var JBe=s(xF);o1e=n(JBe,"STRONG",{});var u3t=s(o1e);Ror=r(u3t,"deberta-v2"),u3t.forEach(t),Por=r(JBe," \u2014 "),AQ=n(JBe,"A",{href:!0});var b3t=s(AQ);Bor=r(b3t,"DebertaV2ForQuestionAnswering"),b3t.forEach(t),Ior=r(JBe," (DeBERTa-v2 model)"),JBe.forEach(t),Nor=i(X),$F=n(X,"LI",{});var YBe=s($F);r1e=n(YBe,"STRONG",{});var v3t=s(r1e);qor=r(v3t,"distilbert"),v3t.forEach(t),jor=r(YBe," \u2014 "),LQ=n(YBe,"A",{href:!0});var F3t=s(LQ);Dor=r(F3t,"DistilBertForQuestionAnswering"),F3t.forEach(t),Gor=r(YBe," (DistilBERT model)"),YBe.forEach(t),Oor=i(X),kF=n(X,"LI",{});var KBe=s(kF);t1e=n(KBe,"STRONG",{});var T3t=s(t1e);Vor=r(T3t,"electra"),T3t.forEach(t),Xor=r(KBe," \u2014 "),yQ=n(KBe,"A",{href:!0});var M3t=s(yQ);zor=r(M3t,"ElectraForQuestionAnswering"),M3t.forEach(t),Qor=r(KBe," (ELECTRA model)"),KBe.forEach(t),Wor=i(X),SF=n(X,"LI",{});var ZBe=s(SF);a1e=n(ZBe,"STRONG",{});var E3t=s(a1e);Hor=r(E3t,"flaubert"),E3t.forEach(t),Uor=r(ZBe," \u2014 "),xQ=n(ZBe,"A",{href:!0});var C3t=s(xQ);Jor=r(C3t,"FlaubertForQuestionAnsweringSimple"),C3t.forEach(t),Yor=r(ZBe," (FlauBERT model)"),ZBe.forEach(t),Kor=i(X),RF=n(X,"LI",{});var eIe=s(RF);n1e=n(eIe,"STRONG",{});var w3t=s(n1e);Zor=r(w3t,"fnet"),w3t.forEach(t),err=r(eIe," \u2014 "),$Q=n(eIe,"A",{href:!0});var A3t=s($Q);orr=r(A3t,"FNetForQuestionAnswering"),A3t.forEach(t),rrr=r(eIe," (FNet model)"),eIe.forEach(t),trr=i(X),PF=n(X,"LI",{});var oIe=s(PF);s1e=n(oIe,"STRONG",{});var L3t=s(s1e);arr=r(L3t,"funnel"),L3t.forEach(t),nrr=r(oIe," \u2014 "),kQ=n(oIe,"A",{href:!0});var y3t=s(kQ);srr=r(y3t,"FunnelForQuestionAnswering"),y3t.forEach(t),lrr=r(oIe," (Funnel Transformer model)"),oIe.forEach(t),irr=i(X),BF=n(X,"LI",{});var rIe=s(BF);l1e=n(rIe,"STRONG",{});var x3t=s(l1e);drr=r(x3t,"gptj"),x3t.forEach(t),crr=r(rIe," \u2014 "),SQ=n(rIe,"A",{href:!0});var $3t=s(SQ);frr=r($3t,"GPTJForQuestionAnswering"),$3t.forEach(t),mrr=r(rIe," (GPT-J model)"),rIe.forEach(t),grr=i(X),IF=n(X,"LI",{});var tIe=s(IF);i1e=n(tIe,"STRONG",{});var k3t=s(i1e);hrr=r(k3t,"ibert"),k3t.forEach(t),prr=r(tIe," \u2014 "),RQ=n(tIe,"A",{href:!0});var S3t=s(RQ);_rr=r(S3t,"IBertForQuestionAnswering"),S3t.forEach(t),urr=r(tIe," (I-BERT model)"),tIe.forEach(t),brr=i(X),NF=n(X,"LI",{});var aIe=s(NF);d1e=n(aIe,"STRONG",{});var R3t=s(d1e);vrr=r(R3t,"layoutlmv2"),R3t.forEach(t),Frr=r(aIe," \u2014 "),PQ=n(aIe,"A",{href:!0});var P3t=s(PQ);Trr=r(P3t,"LayoutLMv2ForQuestionAnswering"),P3t.forEach(t),Mrr=r(aIe," (LayoutLMv2 model)"),aIe.forEach(t),Err=i(X),qF=n(X,"LI",{});var nIe=s(qF);c1e=n(nIe,"STRONG",{});var B3t=s(c1e);Crr=r(B3t,"layoutlmv3"),B3t.forEach(t),wrr=r(nIe," \u2014 "),BQ=n(nIe,"A",{href:!0});var I3t=s(BQ);Arr=r(I3t,"LayoutLMv3ForQuestionAnswering"),I3t.forEach(t),Lrr=r(nIe," (LayoutLMv3 model)"),nIe.forEach(t),yrr=i(X),jF=n(X,"LI",{});var sIe=s(jF);f1e=n(sIe,"STRONG",{});var N3t=s(f1e);xrr=r(N3t,"led"),N3t.forEach(t),$rr=r(sIe," \u2014 "),IQ=n(sIe,"A",{href:!0});var q3t=s(IQ);krr=r(q3t,"LEDForQuestionAnswering"),q3t.forEach(t),Srr=r(sIe," (LED model)"),sIe.forEach(t),Rrr=i(X),DF=n(X,"LI",{});var lIe=s(DF);m1e=n(lIe,"STRONG",{});var j3t=s(m1e);Prr=r(j3t,"longformer"),j3t.forEach(t),Brr=r(lIe," \u2014 "),NQ=n(lIe,"A",{href:!0});var D3t=s(NQ);Irr=r(D3t,"LongformerForQuestionAnswering"),D3t.forEach(t),Nrr=r(lIe," (Longformer model)"),lIe.forEach(t),qrr=i(X),GF=n(X,"LI",{});var iIe=s(GF);g1e=n(iIe,"STRONG",{});var G3t=s(g1e);jrr=r(G3t,"lxmert"),G3t.forEach(t),Drr=r(iIe," \u2014 "),qQ=n(iIe,"A",{href:!0});var O3t=s(qQ);Grr=r(O3t,"LxmertForQuestionAnswering"),O3t.forEach(t),Orr=r(iIe," (LXMERT model)"),iIe.forEach(t),Vrr=i(X),OF=n(X,"LI",{});var dIe=s(OF);h1e=n(dIe,"STRONG",{});var V3t=s(h1e);Xrr=r(V3t,"mbart"),V3t.forEach(t),zrr=r(dIe," \u2014 "),jQ=n(dIe,"A",{href:!0});var X3t=s(jQ);Qrr=r(X3t,"MBartForQuestionAnswering"),X3t.forEach(t),Wrr=r(dIe," (mBART model)"),dIe.forEach(t),Hrr=i(X),VF=n(X,"LI",{});var cIe=s(VF);p1e=n(cIe,"STRONG",{});var z3t=s(p1e);Urr=r(z3t,"megatron-bert"),z3t.forEach(t),Jrr=r(cIe," \u2014 "),DQ=n(cIe,"A",{href:!0});var Q3t=s(DQ);Yrr=r(Q3t,"MegatronBertForQuestionAnswering"),Q3t.forEach(t),Krr=r(cIe," (Megatron-BERT model)"),cIe.forEach(t),Zrr=i(X),XF=n(X,"LI",{});var fIe=s(XF);_1e=n(fIe,"STRONG",{});var W3t=s(_1e);etr=r(W3t,"mobilebert"),W3t.forEach(t),otr=r(fIe," \u2014 "),GQ=n(fIe,"A",{href:!0});var H3t=s(GQ);rtr=r(H3t,"MobileBertForQuestionAnswering"),H3t.forEach(t),ttr=r(fIe," (MobileBERT model)"),fIe.forEach(t),atr=i(X),zF=n(X,"LI",{});var mIe=s(zF);u1e=n(mIe,"STRONG",{});var U3t=s(u1e);ntr=r(U3t,"mpnet"),U3t.forEach(t),str=r(mIe," \u2014 "),OQ=n(mIe,"A",{href:!0});var J3t=s(OQ);ltr=r(J3t,"MPNetForQuestionAnswering"),J3t.forEach(t),itr=r(mIe," (MPNet model)"),mIe.forEach(t),dtr=i(X),QF=n(X,"LI",{});var gIe=s(QF);b1e=n(gIe,"STRONG",{});var Y3t=s(b1e);ctr=r(Y3t,"mvp"),Y3t.forEach(t),ftr=r(gIe," \u2014 "),VQ=n(gIe,"A",{href:!0});var K3t=s(VQ);mtr=r(K3t,"MvpForQuestionAnswering"),K3t.forEach(t),gtr=r(gIe," (MVP model)"),gIe.forEach(t),htr=i(X),WF=n(X,"LI",{});var hIe=s(WF);v1e=n(hIe,"STRONG",{});var Z3t=s(v1e);ptr=r(Z3t,"nezha"),Z3t.forEach(t),_tr=r(hIe," \u2014 "),XQ=n(hIe,"A",{href:!0});var e5t=s(XQ);utr=r(e5t,"NezhaForQuestionAnswering"),e5t.forEach(t),btr=r(hIe," (Nezha model)"),hIe.forEach(t),vtr=i(X),HF=n(X,"LI",{});var pIe=s(HF);F1e=n(pIe,"STRONG",{});var o5t=s(F1e);Ftr=r(o5t,"nystromformer"),o5t.forEach(t),Ttr=r(pIe," \u2014 "),zQ=n(pIe,"A",{href:!0});var r5t=s(zQ);Mtr=r(r5t,"NystromformerForQuestionAnswering"),r5t.forEach(t),Etr=r(pIe," (Nystr\xF6mformer model)"),pIe.forEach(t),Ctr=i(X),UF=n(X,"LI",{});var _Ie=s(UF);T1e=n(_Ie,"STRONG",{});var t5t=s(T1e);wtr=r(t5t,"qdqbert"),t5t.forEach(t),Atr=r(_Ie," \u2014 "),QQ=n(_Ie,"A",{href:!0});var a5t=s(QQ);Ltr=r(a5t,"QDQBertForQuestionAnswering"),a5t.forEach(t),ytr=r(_Ie," (QDQBert model)"),_Ie.forEach(t),xtr=i(X),JF=n(X,"LI",{});var uIe=s(JF);M1e=n(uIe,"STRONG",{});var n5t=s(M1e);$tr=r(n5t,"reformer"),n5t.forEach(t),ktr=r(uIe," \u2014 "),WQ=n(uIe,"A",{href:!0});var s5t=s(WQ);Str=r(s5t,"ReformerForQuestionAnswering"),s5t.forEach(t),Rtr=r(uIe," (Reformer model)"),uIe.forEach(t),Ptr=i(X),YF=n(X,"LI",{});var bIe=s(YF);E1e=n(bIe,"STRONG",{});var l5t=s(E1e);Btr=r(l5t,"rembert"),l5t.forEach(t),Itr=r(bIe," \u2014 "),HQ=n(bIe,"A",{href:!0});var i5t=s(HQ);Ntr=r(i5t,"RemBertForQuestionAnswering"),i5t.forEach(t),qtr=r(bIe," (RemBERT model)"),bIe.forEach(t),jtr=i(X),KF=n(X,"LI",{});var vIe=s(KF);C1e=n(vIe,"STRONG",{});var d5t=s(C1e);Dtr=r(d5t,"roberta"),d5t.forEach(t),Gtr=r(vIe," \u2014 "),UQ=n(vIe,"A",{href:!0});var c5t=s(UQ);Otr=r(c5t,"RobertaForQuestionAnswering"),c5t.forEach(t),Vtr=r(vIe," (RoBERTa model)"),vIe.forEach(t),Xtr=i(X),ZF=n(X,"LI",{});var FIe=s(ZF);w1e=n(FIe,"STRONG",{});var f5t=s(w1e);ztr=r(f5t,"roformer"),f5t.forEach(t),Qtr=r(FIe," \u2014 "),JQ=n(FIe,"A",{href:!0});var m5t=s(JQ);Wtr=r(m5t,"RoFormerForQuestionAnswering"),m5t.forEach(t),Htr=r(FIe," (RoFormer model)"),FIe.forEach(t),Utr=i(X),eT=n(X,"LI",{});var TIe=s(eT);A1e=n(TIe,"STRONG",{});var g5t=s(A1e);Jtr=r(g5t,"splinter"),g5t.forEach(t),Ytr=r(TIe," \u2014 "),YQ=n(TIe,"A",{href:!0});var h5t=s(YQ);Ktr=r(h5t,"SplinterForQuestionAnswering"),h5t.forEach(t),Ztr=r(TIe," (Splinter model)"),TIe.forEach(t),ear=i(X),oT=n(X,"LI",{});var MIe=s(oT);L1e=n(MIe,"STRONG",{});var p5t=s(L1e);oar=r(p5t,"squeezebert"),p5t.forEach(t),rar=r(MIe," \u2014 "),KQ=n(MIe,"A",{href:!0});var _5t=s(KQ);tar=r(_5t,"SqueezeBertForQuestionAnswering"),_5t.forEach(t),aar=r(MIe," (SqueezeBERT model)"),MIe.forEach(t),nar=i(X),rT=n(X,"LI",{});var EIe=s(rT);y1e=n(EIe,"STRONG",{});var u5t=s(y1e);sar=r(u5t,"xlm"),u5t.forEach(t),lar=r(EIe," \u2014 "),ZQ=n(EIe,"A",{href:!0});var b5t=s(ZQ);iar=r(b5t,"XLMForQuestionAnsweringSimple"),b5t.forEach(t),dar=r(EIe," (XLM model)"),EIe.forEach(t),car=i(X),tT=n(X,"LI",{});var CIe=s(tT);x1e=n(CIe,"STRONG",{});var v5t=s(x1e);far=r(v5t,"xlm-roberta"),v5t.forEach(t),mar=r(CIe," \u2014 "),eW=n(CIe,"A",{href:!0});var F5t=s(eW);gar=r(F5t,"XLMRobertaForQuestionAnswering"),F5t.forEach(t),har=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),par=i(X),aT=n(X,"LI",{});var wIe=s(aT);$1e=n(wIe,"STRONG",{});var T5t=s($1e);_ar=r(T5t,"xlm-roberta-xl"),T5t.forEach(t),uar=r(wIe," \u2014 "),oW=n(wIe,"A",{href:!0});var M5t=s(oW);bar=r(M5t,"XLMRobertaXLForQuestionAnswering"),M5t.forEach(t),Far=r(wIe," (XLM-RoBERTa-XL model)"),wIe.forEach(t),Tar=i(X),nT=n(X,"LI",{});var AIe=s(nT);k1e=n(AIe,"STRONG",{});var E5t=s(k1e);Mar=r(E5t,"xlnet"),E5t.forEach(t),Ear=r(AIe," \u2014 "),rW=n(AIe,"A",{href:!0});var C5t=s(rW);Car=r(C5t,"XLNetForQuestionAnsweringSimple"),C5t.forEach(t),war=r(AIe," (XLNet model)"),AIe.forEach(t),Aar=i(X),sT=n(X,"LI",{});var LIe=s(sT);S1e=n(LIe,"STRONG",{});var w5t=s(S1e);Lar=r(w5t,"yoso"),w5t.forEach(t),yar=r(LIe," \u2014 "),tW=n(LIe,"A",{href:!0});var A5t=s(tW);xar=r(A5t,"YosoForQuestionAnswering"),A5t.forEach(t),$ar=r(LIe," (YOSO model)"),LIe.forEach(t),X.forEach(t),kar=i(_a),lT=n(_a,"P",{});var yIe=s(lT);Sar=r(yIe,"The model is set in evaluation mode by default using "),R1e=n(yIe,"CODE",{});var L5t=s(R1e);Rar=r(L5t,"model.eval()"),L5t.forEach(t),Par=r(yIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(yIe,"CODE",{});var y5t=s(P1e);Bar=r(y5t,"model.train()"),y5t.forEach(t),yIe.forEach(t),Iar=i(_a),T(iT.$$.fragment,_a),_a.forEach(t),cl.forEach(t),TXe=i(f),_d=n(f,"H2",{class:!0});var LQe=s(_d);dT=n(LQe,"A",{id:!0,class:!0,href:!0});var x5t=s(dT);B1e=n(x5t,"SPAN",{});var $5t=s(B1e);T(Cy.$$.fragment,$5t),$5t.forEach(t),x5t.forEach(t),Nar=i(LQe),I1e=n(LQe,"SPAN",{});var k5t=s(I1e);qar=r(k5t,"AutoModelForTableQuestionAnswering"),k5t.forEach(t),LQe.forEach(t),MXe=i(f),Do=n(f,"DIV",{class:!0});var fl=s(Do);T(wy.$$.fragment,fl),jar=i(fl),ud=n(fl,"P",{});var zre=s(ud);Dar=r(zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aW=n(zre,"A",{href:!0});var S5t=s(aW);Gar=r(S5t,"from_pretrained()"),S5t.forEach(t),Oar=r(zre," class method or the "),nW=n(zre,"A",{href:!0});var R5t=s(nW);Var=r(R5t,"from_config()"),R5t.forEach(t),Xar=r(zre,` class
method.`),zre.forEach(t),zar=i(fl),Ay=n(fl,"P",{});var yQe=s(Ay);Qar=r(yQe,"This class cannot be instantiated directly using "),N1e=n(yQe,"CODE",{});var P5t=s(N1e);War=r(P5t,"__init__()"),P5t.forEach(t),Har=r(yQe," (throws an error)."),yQe.forEach(t),Uar=i(fl),ut=n(fl,"DIV",{class:!0});var AA=s(ut);T(Ly.$$.fragment,AA),Jar=i(AA),q1e=n(AA,"P",{});var B5t=s(q1e);Yar=r(B5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),B5t.forEach(t),Kar=i(AA),bd=n(AA,"P",{});var Qre=s(bd);Zar=r(Qre,`Note:
Loading a model from its configuration file does `),j1e=n(Qre,"STRONG",{});var I5t=s(j1e);enr=r(I5t,"not"),I5t.forEach(t),onr=r(Qre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(Qre,"A",{href:!0});var N5t=s(sW);rnr=r(N5t,"from_pretrained()"),N5t.forEach(t),tnr=r(Qre," to load the model weights."),Qre.forEach(t),anr=i(AA),T(cT.$$.fragment,AA),AA.forEach(t),nnr=i(fl),so=n(fl,"DIV",{class:!0});var ua=s(so);T(yy.$$.fragment,ua),snr=i(ua),D1e=n(ua,"P",{});var q5t=s(D1e);lnr=r(q5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),q5t.forEach(t),inr=i(ua),Qa=n(ua,"P",{});var LA=s(Qa);dnr=r(LA,"The model class to instantiate is selected based on the "),G1e=n(LA,"CODE",{});var j5t=s(G1e);cnr=r(j5t,"model_type"),j5t.forEach(t),fnr=r(LA,` property of the config object (either
passed as an argument or loaded from `),O1e=n(LA,"CODE",{});var D5t=s(O1e);mnr=r(D5t,"pretrained_model_name_or_path"),D5t.forEach(t),gnr=r(LA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(LA,"CODE",{});var G5t=s(V1e);hnr=r(G5t,"pretrained_model_name_or_path"),G5t.forEach(t),pnr=r(LA,":"),LA.forEach(t),_nr=i(ua),X1e=n(ua,"UL",{});var O5t=s(X1e);fT=n(O5t,"LI",{});var xIe=s(fT);z1e=n(xIe,"STRONG",{});var V5t=s(z1e);unr=r(V5t,"tapas"),V5t.forEach(t),bnr=r(xIe," \u2014 "),lW=n(xIe,"A",{href:!0});var X5t=s(lW);vnr=r(X5t,"TapasForQuestionAnswering"),X5t.forEach(t),Fnr=r(xIe," (TAPAS model)"),xIe.forEach(t),O5t.forEach(t),Tnr=i(ua),mT=n(ua,"P",{});var $Ie=s(mT);Mnr=r($Ie,"The model is set in evaluation mode by default using "),Q1e=n($Ie,"CODE",{});var z5t=s(Q1e);Enr=r(z5t,"model.eval()"),z5t.forEach(t),Cnr=r($Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),W1e=n($Ie,"CODE",{});var Q5t=s(W1e);wnr=r(Q5t,"model.train()"),Q5t.forEach(t),$Ie.forEach(t),Anr=i(ua),T(gT.$$.fragment,ua),ua.forEach(t),fl.forEach(t),EXe=i(f),vd=n(f,"H2",{class:!0});var xQe=s(vd);hT=n(xQe,"A",{id:!0,class:!0,href:!0});var W5t=s(hT);H1e=n(W5t,"SPAN",{});var H5t=s(H1e);T(xy.$$.fragment,H5t),H5t.forEach(t),W5t.forEach(t),Lnr=i(xQe),U1e=n(xQe,"SPAN",{});var U5t=s(U1e);ynr=r(U5t,"AutoModelForImageClassification"),U5t.forEach(t),xQe.forEach(t),CXe=i(f),Go=n(f,"DIV",{class:!0});var ml=s(Go);T($y.$$.fragment,ml),xnr=i(ml),Fd=n(ml,"P",{});var Wre=s(Fd);$nr=r(Wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iW=n(Wre,"A",{href:!0});var J5t=s(iW);knr=r(J5t,"from_pretrained()"),J5t.forEach(t),Snr=r(Wre," class method or the "),dW=n(Wre,"A",{href:!0});var Y5t=s(dW);Rnr=r(Y5t,"from_config()"),Y5t.forEach(t),Pnr=r(Wre,` class
method.`),Wre.forEach(t),Bnr=i(ml),ky=n(ml,"P",{});var $Qe=s(ky);Inr=r($Qe,"This class cannot be instantiated directly using "),J1e=n($Qe,"CODE",{});var K5t=s(J1e);Nnr=r(K5t,"__init__()"),K5t.forEach(t),qnr=r($Qe," (throws an error)."),$Qe.forEach(t),jnr=i(ml),bt=n(ml,"DIV",{class:!0});var yA=s(bt);T(Sy.$$.fragment,yA),Dnr=i(yA),Y1e=n(yA,"P",{});var Z5t=s(Y1e);Gnr=r(Z5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Z5t.forEach(t),Onr=i(yA),Td=n(yA,"P",{});var Hre=s(Td);Vnr=r(Hre,`Note:
Loading a model from its configuration file does `),K1e=n(Hre,"STRONG",{});var e0t=s(K1e);Xnr=r(e0t,"not"),e0t.forEach(t),znr=r(Hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Hre,"A",{href:!0});var o0t=s(cW);Qnr=r(o0t,"from_pretrained()"),o0t.forEach(t),Wnr=r(Hre," to load the model weights."),Hre.forEach(t),Hnr=i(yA),T(pT.$$.fragment,yA),yA.forEach(t),Unr=i(ml),lo=n(ml,"DIV",{class:!0});var ba=s(lo);T(Ry.$$.fragment,ba),Jnr=i(ba),Z1e=n(ba,"P",{});var r0t=s(Z1e);Ynr=r(r0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),r0t.forEach(t),Knr=i(ba),Wa=n(ba,"P",{});var xA=s(Wa);Znr=r(xA,"The model class to instantiate is selected based on the "),e4e=n(xA,"CODE",{});var t0t=s(e4e);esr=r(t0t,"model_type"),t0t.forEach(t),osr=r(xA,` property of the config object (either
passed as an argument or loaded from `),o4e=n(xA,"CODE",{});var a0t=s(o4e);rsr=r(a0t,"pretrained_model_name_or_path"),a0t.forEach(t),tsr=r(xA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r4e=n(xA,"CODE",{});var n0t=s(r4e);asr=r(n0t,"pretrained_model_name_or_path"),n0t.forEach(t),nsr=r(xA,":"),xA.forEach(t),ssr=i(ba),ve=n(ba,"UL",{});var Te=s(ve);_T=n(Te,"LI",{});var kIe=s(_T);t4e=n(kIe,"STRONG",{});var s0t=s(t4e);lsr=r(s0t,"beit"),s0t.forEach(t),isr=r(kIe," \u2014 "),fW=n(kIe,"A",{href:!0});var l0t=s(fW);dsr=r(l0t,"BeitForImageClassification"),l0t.forEach(t),csr=r(kIe," (BEiT model)"),kIe.forEach(t),fsr=i(Te),uT=n(Te,"LI",{});var SIe=s(uT);a4e=n(SIe,"STRONG",{});var i0t=s(a4e);msr=r(i0t,"convnext"),i0t.forEach(t),gsr=r(SIe," \u2014 "),mW=n(SIe,"A",{href:!0});var d0t=s(mW);hsr=r(d0t,"ConvNextForImageClassification"),d0t.forEach(t),psr=r(SIe," (ConvNeXT model)"),SIe.forEach(t),_sr=i(Te),bT=n(Te,"LI",{});var RIe=s(bT);n4e=n(RIe,"STRONG",{});var c0t=s(n4e);usr=r(c0t,"cvt"),c0t.forEach(t),bsr=r(RIe," \u2014 "),gW=n(RIe,"A",{href:!0});var f0t=s(gW);vsr=r(f0t,"CvtForImageClassification"),f0t.forEach(t),Fsr=r(RIe," (CvT model)"),RIe.forEach(t),Tsr=i(Te),vT=n(Te,"LI",{});var PIe=s(vT);s4e=n(PIe,"STRONG",{});var m0t=s(s4e);Msr=r(m0t,"data2vec-vision"),m0t.forEach(t),Esr=r(PIe," \u2014 "),hW=n(PIe,"A",{href:!0});var g0t=s(hW);Csr=r(g0t,"Data2VecVisionForImageClassification"),g0t.forEach(t),wsr=r(PIe," (Data2VecVision model)"),PIe.forEach(t),Asr=i(Te),Hs=n(Te,"LI",{});var xS=s(Hs);l4e=n(xS,"STRONG",{});var h0t=s(l4e);Lsr=r(h0t,"deit"),h0t.forEach(t),ysr=r(xS," \u2014 "),pW=n(xS,"A",{href:!0});var p0t=s(pW);xsr=r(p0t,"DeiTForImageClassification"),p0t.forEach(t),$sr=r(xS," or "),_W=n(xS,"A",{href:!0});var _0t=s(_W);ksr=r(_0t,"DeiTForImageClassificationWithTeacher"),_0t.forEach(t),Ssr=r(xS," (DeiT model)"),xS.forEach(t),Rsr=i(Te),FT=n(Te,"LI",{});var BIe=s(FT);i4e=n(BIe,"STRONG",{});var u0t=s(i4e);Psr=r(u0t,"imagegpt"),u0t.forEach(t),Bsr=r(BIe," \u2014 "),uW=n(BIe,"A",{href:!0});var b0t=s(uW);Isr=r(b0t,"ImageGPTForImageClassification"),b0t.forEach(t),Nsr=r(BIe," (ImageGPT model)"),BIe.forEach(t),qsr=i(Te),Us=n(Te,"LI",{});var $S=s(Us);d4e=n($S,"STRONG",{});var v0t=s(d4e);jsr=r(v0t,"levit"),v0t.forEach(t),Dsr=r($S," \u2014 "),bW=n($S,"A",{href:!0});var F0t=s(bW);Gsr=r(F0t,"LevitForImageClassification"),F0t.forEach(t),Osr=r($S," or "),vW=n($S,"A",{href:!0});var T0t=s(vW);Vsr=r(T0t,"LevitForImageClassificationWithTeacher"),T0t.forEach(t),Xsr=r($S," (LeViT model)"),$S.forEach(t),zsr=i(Te),TT=n(Te,"LI",{});var IIe=s(TT);c4e=n(IIe,"STRONG",{});var M0t=s(c4e);Qsr=r(M0t,"mobilevit"),M0t.forEach(t),Wsr=r(IIe," \u2014 "),FW=n(IIe,"A",{href:!0});var E0t=s(FW);Hsr=r(E0t,"MobileViTForImageClassification"),E0t.forEach(t),Usr=r(IIe," (MobileViT model)"),IIe.forEach(t),Jsr=i(Te),vt=n(Te,"LI",{});var Sf=s(vt);f4e=n(Sf,"STRONG",{});var C0t=s(f4e);Ysr=r(C0t,"perceiver"),C0t.forEach(t),Ksr=r(Sf," \u2014 "),TW=n(Sf,"A",{href:!0});var w0t=s(TW);Zsr=r(w0t,"PerceiverForImageClassificationLearned"),w0t.forEach(t),elr=r(Sf," or "),MW=n(Sf,"A",{href:!0});var A0t=s(MW);olr=r(A0t,"PerceiverForImageClassificationFourier"),A0t.forEach(t),rlr=r(Sf," or "),EW=n(Sf,"A",{href:!0});var L0t=s(EW);tlr=r(L0t,"PerceiverForImageClassificationConvProcessing"),L0t.forEach(t),alr=r(Sf," (Perceiver model)"),Sf.forEach(t),nlr=i(Te),MT=n(Te,"LI",{});var NIe=s(MT);m4e=n(NIe,"STRONG",{});var y0t=s(m4e);slr=r(y0t,"poolformer"),y0t.forEach(t),llr=r(NIe," \u2014 "),CW=n(NIe,"A",{href:!0});var x0t=s(CW);ilr=r(x0t,"PoolFormerForImageClassification"),x0t.forEach(t),dlr=r(NIe," (PoolFormer model)"),NIe.forEach(t),clr=i(Te),ET=n(Te,"LI",{});var qIe=s(ET);g4e=n(qIe,"STRONG",{});var $0t=s(g4e);flr=r($0t,"regnet"),$0t.forEach(t),mlr=r(qIe," \u2014 "),wW=n(qIe,"A",{href:!0});var k0t=s(wW);glr=r(k0t,"RegNetForImageClassification"),k0t.forEach(t),hlr=r(qIe," (RegNet model)"),qIe.forEach(t),plr=i(Te),CT=n(Te,"LI",{});var jIe=s(CT);h4e=n(jIe,"STRONG",{});var S0t=s(h4e);_lr=r(S0t,"resnet"),S0t.forEach(t),ulr=r(jIe," \u2014 "),AW=n(jIe,"A",{href:!0});var R0t=s(AW);blr=r(R0t,"ResNetForImageClassification"),R0t.forEach(t),vlr=r(jIe," (ResNet model)"),jIe.forEach(t),Flr=i(Te),wT=n(Te,"LI",{});var DIe=s(wT);p4e=n(DIe,"STRONG",{});var P0t=s(p4e);Tlr=r(P0t,"segformer"),P0t.forEach(t),Mlr=r(DIe," \u2014 "),LW=n(DIe,"A",{href:!0});var B0t=s(LW);Elr=r(B0t,"SegformerForImageClassification"),B0t.forEach(t),Clr=r(DIe," (SegFormer model)"),DIe.forEach(t),wlr=i(Te),AT=n(Te,"LI",{});var GIe=s(AT);_4e=n(GIe,"STRONG",{});var I0t=s(_4e);Alr=r(I0t,"swin"),I0t.forEach(t),Llr=r(GIe," \u2014 "),yW=n(GIe,"A",{href:!0});var N0t=s(yW);ylr=r(N0t,"SwinForImageClassification"),N0t.forEach(t),xlr=r(GIe," (Swin Transformer model)"),GIe.forEach(t),$lr=i(Te),LT=n(Te,"LI",{});var OIe=s(LT);u4e=n(OIe,"STRONG",{});var q0t=s(u4e);klr=r(q0t,"van"),q0t.forEach(t),Slr=r(OIe," \u2014 "),xW=n(OIe,"A",{href:!0});var j0t=s(xW);Rlr=r(j0t,"VanForImageClassification"),j0t.forEach(t),Plr=r(OIe," (VAN model)"),OIe.forEach(t),Blr=i(Te),yT=n(Te,"LI",{});var VIe=s(yT);b4e=n(VIe,"STRONG",{});var D0t=s(b4e);Ilr=r(D0t,"vit"),D0t.forEach(t),Nlr=r(VIe," \u2014 "),$W=n(VIe,"A",{href:!0});var G0t=s($W);qlr=r(G0t,"ViTForImageClassification"),G0t.forEach(t),jlr=r(VIe," (ViT model)"),VIe.forEach(t),Te.forEach(t),Dlr=i(ba),xT=n(ba,"P",{});var XIe=s(xT);Glr=r(XIe,"The model is set in evaluation mode by default using "),v4e=n(XIe,"CODE",{});var O0t=s(v4e);Olr=r(O0t,"model.eval()"),O0t.forEach(t),Vlr=r(XIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),F4e=n(XIe,"CODE",{});var V0t=s(F4e);Xlr=r(V0t,"model.train()"),V0t.forEach(t),XIe.forEach(t),zlr=i(ba),T($T.$$.fragment,ba),ba.forEach(t),ml.forEach(t),wXe=i(f),Md=n(f,"H2",{class:!0});var kQe=s(Md);kT=n(kQe,"A",{id:!0,class:!0,href:!0});var X0t=s(kT);T4e=n(X0t,"SPAN",{});var z0t=s(T4e);T(Py.$$.fragment,z0t),z0t.forEach(t),X0t.forEach(t),Qlr=i(kQe),M4e=n(kQe,"SPAN",{});var Q0t=s(M4e);Wlr=r(Q0t,"AutoModelForVision2Seq"),Q0t.forEach(t),kQe.forEach(t),AXe=i(f),Oo=n(f,"DIV",{class:!0});var gl=s(Oo);T(By.$$.fragment,gl),Hlr=i(gl),Ed=n(gl,"P",{});var Ure=s(Ed);Ulr=r(Ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),kW=n(Ure,"A",{href:!0});var W0t=s(kW);Jlr=r(W0t,"from_pretrained()"),W0t.forEach(t),Ylr=r(Ure," class method or the "),SW=n(Ure,"A",{href:!0});var H0t=s(SW);Klr=r(H0t,"from_config()"),H0t.forEach(t),Zlr=r(Ure,` class
method.`),Ure.forEach(t),eir=i(gl),Iy=n(gl,"P",{});var SQe=s(Iy);oir=r(SQe,"This class cannot be instantiated directly using "),E4e=n(SQe,"CODE",{});var U0t=s(E4e);rir=r(U0t,"__init__()"),U0t.forEach(t),tir=r(SQe," (throws an error)."),SQe.forEach(t),air=i(gl),Ft=n(gl,"DIV",{class:!0});var $A=s(Ft);T(Ny.$$.fragment,$A),nir=i($A),C4e=n($A,"P",{});var J0t=s(C4e);sir=r(J0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),J0t.forEach(t),lir=i($A),Cd=n($A,"P",{});var Jre=s(Cd);iir=r(Jre,`Note:
Loading a model from its configuration file does `),w4e=n(Jre,"STRONG",{});var Y0t=s(w4e);dir=r(Y0t,"not"),Y0t.forEach(t),cir=r(Jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(Jre,"A",{href:!0});var K0t=s(RW);fir=r(K0t,"from_pretrained()"),K0t.forEach(t),mir=r(Jre," to load the model weights."),Jre.forEach(t),gir=i($A),T(ST.$$.fragment,$A),$A.forEach(t),hir=i(gl),io=n(gl,"DIV",{class:!0});var va=s(io);T(qy.$$.fragment,va),pir=i(va),A4e=n(va,"P",{});var Z0t=s(A4e);_ir=r(Z0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Z0t.forEach(t),uir=i(va),Ha=n(va,"P",{});var kA=s(Ha);bir=r(kA,"The model class to instantiate is selected based on the "),L4e=n(kA,"CODE",{});var ewt=s(L4e);vir=r(ewt,"model_type"),ewt.forEach(t),Fir=r(kA,` property of the config object (either
passed as an argument or loaded from `),y4e=n(kA,"CODE",{});var owt=s(y4e);Tir=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),Mir=r(kA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x4e=n(kA,"CODE",{});var rwt=s(x4e);Eir=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),Cir=r(kA,":"),kA.forEach(t),wir=i(va),$4e=n(va,"UL",{});var twt=s($4e);RT=n(twt,"LI",{});var zIe=s(RT);k4e=n(zIe,"STRONG",{});var awt=s(k4e);Air=r(awt,"vision-encoder-decoder"),awt.forEach(t),Lir=r(zIe," \u2014 "),PW=n(zIe,"A",{href:!0});var nwt=s(PW);yir=r(nwt,"VisionEncoderDecoderModel"),nwt.forEach(t),xir=r(zIe," (Vision Encoder decoder model)"),zIe.forEach(t),twt.forEach(t),$ir=i(va),PT=n(va,"P",{});var QIe=s(PT);kir=r(QIe,"The model is set in evaluation mode by default using "),S4e=n(QIe,"CODE",{});var swt=s(S4e);Sir=r(swt,"model.eval()"),swt.forEach(t),Rir=r(QIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),R4e=n(QIe,"CODE",{});var lwt=s(R4e);Pir=r(lwt,"model.train()"),lwt.forEach(t),QIe.forEach(t),Bir=i(va),T(BT.$$.fragment,va),va.forEach(t),gl.forEach(t),LXe=i(f),wd=n(f,"H2",{class:!0});var RQe=s(wd);IT=n(RQe,"A",{id:!0,class:!0,href:!0});var iwt=s(IT);P4e=n(iwt,"SPAN",{});var dwt=s(P4e);T(jy.$$.fragment,dwt),dwt.forEach(t),iwt.forEach(t),Iir=i(RQe),B4e=n(RQe,"SPAN",{});var cwt=s(B4e);Nir=r(cwt,"AutoModelForVisualQuestionAnswering"),cwt.forEach(t),RQe.forEach(t),yXe=i(f),Vo=n(f,"DIV",{class:!0});var hl=s(Vo);T(Dy.$$.fragment,hl),qir=i(hl),Ad=n(hl,"P",{});var Yre=s(Ad);jir=r(Yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),BW=n(Yre,"A",{href:!0});var fwt=s(BW);Dir=r(fwt,"from_pretrained()"),fwt.forEach(t),Gir=r(Yre," class method or the "),IW=n(Yre,"A",{href:!0});var mwt=s(IW);Oir=r(mwt,"from_config()"),mwt.forEach(t),Vir=r(Yre,` class
method.`),Yre.forEach(t),Xir=i(hl),Gy=n(hl,"P",{});var PQe=s(Gy);zir=r(PQe,"This class cannot be instantiated directly using "),I4e=n(PQe,"CODE",{});var gwt=s(I4e);Qir=r(gwt,"__init__()"),gwt.forEach(t),Wir=r(PQe," (throws an error)."),PQe.forEach(t),Hir=i(hl),Tt=n(hl,"DIV",{class:!0});var SA=s(Tt);T(Oy.$$.fragment,SA),Uir=i(SA),N4e=n(SA,"P",{});var hwt=s(N4e);Jir=r(hwt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),hwt.forEach(t),Yir=i(SA),Ld=n(SA,"P",{});var Kre=s(Ld);Kir=r(Kre,`Note:
Loading a model from its configuration file does `),q4e=n(Kre,"STRONG",{});var pwt=s(q4e);Zir=r(pwt,"not"),pwt.forEach(t),edr=r(Kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(Kre,"A",{href:!0});var _wt=s(NW);odr=r(_wt,"from_pretrained()"),_wt.forEach(t),rdr=r(Kre," to load the model weights."),Kre.forEach(t),tdr=i(SA),T(NT.$$.fragment,SA),SA.forEach(t),adr=i(hl),co=n(hl,"DIV",{class:!0});var Fa=s(co);T(Vy.$$.fragment,Fa),ndr=i(Fa),j4e=n(Fa,"P",{});var uwt=s(j4e);sdr=r(uwt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),uwt.forEach(t),ldr=i(Fa),Ua=n(Fa,"P",{});var RA=s(Ua);idr=r(RA,"The model class to instantiate is selected based on the "),D4e=n(RA,"CODE",{});var bwt=s(D4e);ddr=r(bwt,"model_type"),bwt.forEach(t),cdr=r(RA,` property of the config object (either
passed as an argument or loaded from `),G4e=n(RA,"CODE",{});var vwt=s(G4e);fdr=r(vwt,"pretrained_model_name_or_path"),vwt.forEach(t),mdr=r(RA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O4e=n(RA,"CODE",{});var Fwt=s(O4e);gdr=r(Fwt,"pretrained_model_name_or_path"),Fwt.forEach(t),hdr=r(RA,":"),RA.forEach(t),pdr=i(Fa),V4e=n(Fa,"UL",{});var Twt=s(V4e);qT=n(Twt,"LI",{});var WIe=s(qT);X4e=n(WIe,"STRONG",{});var Mwt=s(X4e);_dr=r(Mwt,"vilt"),Mwt.forEach(t),udr=r(WIe," \u2014 "),qW=n(WIe,"A",{href:!0});var Ewt=s(qW);bdr=r(Ewt,"ViltForQuestionAnswering"),Ewt.forEach(t),vdr=r(WIe," (ViLT model)"),WIe.forEach(t),Twt.forEach(t),Fdr=i(Fa),jT=n(Fa,"P",{});var HIe=s(jT);Tdr=r(HIe,"The model is set in evaluation mode by default using "),z4e=n(HIe,"CODE",{});var Cwt=s(z4e);Mdr=r(Cwt,"model.eval()"),Cwt.forEach(t),Edr=r(HIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Q4e=n(HIe,"CODE",{});var wwt=s(Q4e);Cdr=r(wwt,"model.train()"),wwt.forEach(t),HIe.forEach(t),wdr=i(Fa),T(DT.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),xXe=i(f),yd=n(f,"H2",{class:!0});var BQe=s(yd);GT=n(BQe,"A",{id:!0,class:!0,href:!0});var Awt=s(GT);W4e=n(Awt,"SPAN",{});var Lwt=s(W4e);T(Xy.$$.fragment,Lwt),Lwt.forEach(t),Awt.forEach(t),Adr=i(BQe),H4e=n(BQe,"SPAN",{});var ywt=s(H4e);Ldr=r(ywt,"AutoModelForAudioClassification"),ywt.forEach(t),BQe.forEach(t),$Xe=i(f),Xo=n(f,"DIV",{class:!0});var pl=s(Xo);T(zy.$$.fragment,pl),ydr=i(pl),xd=n(pl,"P",{});var Zre=s(xd);xdr=r(Zre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),jW=n(Zre,"A",{href:!0});var xwt=s(jW);$dr=r(xwt,"from_pretrained()"),xwt.forEach(t),kdr=r(Zre," class method or the "),DW=n(Zre,"A",{href:!0});var $wt=s(DW);Sdr=r($wt,"from_config()"),$wt.forEach(t),Rdr=r(Zre,` class
method.`),Zre.forEach(t),Pdr=i(pl),Qy=n(pl,"P",{});var IQe=s(Qy);Bdr=r(IQe,"This class cannot be instantiated directly using "),U4e=n(IQe,"CODE",{});var kwt=s(U4e);Idr=r(kwt,"__init__()"),kwt.forEach(t),Ndr=r(IQe," (throws an error)."),IQe.forEach(t),qdr=i(pl),Mt=n(pl,"DIV",{class:!0});var PA=s(Mt);T(Wy.$$.fragment,PA),jdr=i(PA),J4e=n(PA,"P",{});var Swt=s(J4e);Ddr=r(Swt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Swt.forEach(t),Gdr=i(PA),$d=n(PA,"P",{});var ete=s($d);Odr=r(ete,`Note:
Loading a model from its configuration file does `),Y4e=n(ete,"STRONG",{});var Rwt=s(Y4e);Vdr=r(Rwt,"not"),Rwt.forEach(t),Xdr=r(ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(ete,"A",{href:!0});var Pwt=s(GW);zdr=r(Pwt,"from_pretrained()"),Pwt.forEach(t),Qdr=r(ete," to load the model weights."),ete.forEach(t),Wdr=i(PA),T(OT.$$.fragment,PA),PA.forEach(t),Hdr=i(pl),fo=n(pl,"DIV",{class:!0});var Ta=s(fo);T(Hy.$$.fragment,Ta),Udr=i(Ta),K4e=n(Ta,"P",{});var Bwt=s(K4e);Jdr=r(Bwt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Bwt.forEach(t),Ydr=i(Ta),Ja=n(Ta,"P",{});var BA=s(Ja);Kdr=r(BA,"The model class to instantiate is selected based on the "),Z4e=n(BA,"CODE",{});var Iwt=s(Z4e);Zdr=r(Iwt,"model_type"),Iwt.forEach(t),ecr=r(BA,` property of the config object (either
passed as an argument or loaded from `),ebe=n(BA,"CODE",{});var Nwt=s(ebe);ocr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),rcr=r(BA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),obe=n(BA,"CODE",{});var qwt=s(obe);tcr=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),acr=r(BA,":"),BA.forEach(t),ncr=i(Ta),Pe=n(Ta,"UL",{});var ze=s(Pe);VT=n(ze,"LI",{});var UIe=s(VT);rbe=n(UIe,"STRONG",{});var jwt=s(rbe);scr=r(jwt,"data2vec-audio"),jwt.forEach(t),lcr=r(UIe," \u2014 "),OW=n(UIe,"A",{href:!0});var Dwt=s(OW);icr=r(Dwt,"Data2VecAudioForSequenceClassification"),Dwt.forEach(t),dcr=r(UIe," (Data2VecAudio model)"),UIe.forEach(t),ccr=i(ze),XT=n(ze,"LI",{});var JIe=s(XT);tbe=n(JIe,"STRONG",{});var Gwt=s(tbe);fcr=r(Gwt,"hubert"),Gwt.forEach(t),mcr=r(JIe," \u2014 "),VW=n(JIe,"A",{href:!0});var Owt=s(VW);gcr=r(Owt,"HubertForSequenceClassification"),Owt.forEach(t),hcr=r(JIe," (Hubert model)"),JIe.forEach(t),pcr=i(ze),zT=n(ze,"LI",{});var YIe=s(zT);abe=n(YIe,"STRONG",{});var Vwt=s(abe);_cr=r(Vwt,"sew"),Vwt.forEach(t),ucr=r(YIe," \u2014 "),XW=n(YIe,"A",{href:!0});var Xwt=s(XW);bcr=r(Xwt,"SEWForSequenceClassification"),Xwt.forEach(t),vcr=r(YIe," (SEW model)"),YIe.forEach(t),Fcr=i(ze),QT=n(ze,"LI",{});var KIe=s(QT);nbe=n(KIe,"STRONG",{});var zwt=s(nbe);Tcr=r(zwt,"sew-d"),zwt.forEach(t),Mcr=r(KIe," \u2014 "),zW=n(KIe,"A",{href:!0});var Qwt=s(zW);Ecr=r(Qwt,"SEWDForSequenceClassification"),Qwt.forEach(t),Ccr=r(KIe," (SEW-D model)"),KIe.forEach(t),wcr=i(ze),WT=n(ze,"LI",{});var ZIe=s(WT);sbe=n(ZIe,"STRONG",{});var Wwt=s(sbe);Acr=r(Wwt,"unispeech"),Wwt.forEach(t),Lcr=r(ZIe," \u2014 "),QW=n(ZIe,"A",{href:!0});var Hwt=s(QW);ycr=r(Hwt,"UniSpeechForSequenceClassification"),Hwt.forEach(t),xcr=r(ZIe," (UniSpeech model)"),ZIe.forEach(t),$cr=i(ze),HT=n(ze,"LI",{});var eNe=s(HT);lbe=n(eNe,"STRONG",{});var Uwt=s(lbe);kcr=r(Uwt,"unispeech-sat"),Uwt.forEach(t),Scr=r(eNe," \u2014 "),WW=n(eNe,"A",{href:!0});var Jwt=s(WW);Rcr=r(Jwt,"UniSpeechSatForSequenceClassification"),Jwt.forEach(t),Pcr=r(eNe," (UniSpeechSat model)"),eNe.forEach(t),Bcr=i(ze),UT=n(ze,"LI",{});var oNe=s(UT);ibe=n(oNe,"STRONG",{});var Ywt=s(ibe);Icr=r(Ywt,"wav2vec2"),Ywt.forEach(t),Ncr=r(oNe," \u2014 "),HW=n(oNe,"A",{href:!0});var Kwt=s(HW);qcr=r(Kwt,"Wav2Vec2ForSequenceClassification"),Kwt.forEach(t),jcr=r(oNe," (Wav2Vec2 model)"),oNe.forEach(t),Dcr=i(ze),JT=n(ze,"LI",{});var rNe=s(JT);dbe=n(rNe,"STRONG",{});var Zwt=s(dbe);Gcr=r(Zwt,"wav2vec2-conformer"),Zwt.forEach(t),Ocr=r(rNe," \u2014 "),UW=n(rNe,"A",{href:!0});var eAt=s(UW);Vcr=r(eAt,"Wav2Vec2ConformerForSequenceClassification"),eAt.forEach(t),Xcr=r(rNe," (Wav2Vec2-Conformer model)"),rNe.forEach(t),zcr=i(ze),YT=n(ze,"LI",{});var tNe=s(YT);cbe=n(tNe,"STRONG",{});var oAt=s(cbe);Qcr=r(oAt,"wavlm"),oAt.forEach(t),Wcr=r(tNe," \u2014 "),JW=n(tNe,"A",{href:!0});var rAt=s(JW);Hcr=r(rAt,"WavLMForSequenceClassification"),rAt.forEach(t),Ucr=r(tNe," (WavLM model)"),tNe.forEach(t),ze.forEach(t),Jcr=i(Ta),KT=n(Ta,"P",{});var aNe=s(KT);Ycr=r(aNe,"The model is set in evaluation mode by default using "),fbe=n(aNe,"CODE",{});var tAt=s(fbe);Kcr=r(tAt,"model.eval()"),tAt.forEach(t),Zcr=r(aNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),mbe=n(aNe,"CODE",{});var aAt=s(mbe);efr=r(aAt,"model.train()"),aAt.forEach(t),aNe.forEach(t),ofr=i(Ta),T(ZT.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),kXe=i(f),kd=n(f,"H2",{class:!0});var NQe=s(kd);e7=n(NQe,"A",{id:!0,class:!0,href:!0});var nAt=s(e7);gbe=n(nAt,"SPAN",{});var sAt=s(gbe);T(Uy.$$.fragment,sAt),sAt.forEach(t),nAt.forEach(t),rfr=i(NQe),hbe=n(NQe,"SPAN",{});var lAt=s(hbe);tfr=r(lAt,"AutoModelForAudioFrameClassification"),lAt.forEach(t),NQe.forEach(t),SXe=i(f),zo=n(f,"DIV",{class:!0});var _l=s(zo);T(Jy.$$.fragment,_l),afr=i(_l),Sd=n(_l,"P",{});var ote=s(Sd);nfr=r(ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),YW=n(ote,"A",{href:!0});var iAt=s(YW);sfr=r(iAt,"from_pretrained()"),iAt.forEach(t),lfr=r(ote," class method or the "),KW=n(ote,"A",{href:!0});var dAt=s(KW);ifr=r(dAt,"from_config()"),dAt.forEach(t),dfr=r(ote,` class
method.`),ote.forEach(t),cfr=i(_l),Yy=n(_l,"P",{});var qQe=s(Yy);ffr=r(qQe,"This class cannot be instantiated directly using "),pbe=n(qQe,"CODE",{});var cAt=s(pbe);mfr=r(cAt,"__init__()"),cAt.forEach(t),gfr=r(qQe," (throws an error)."),qQe.forEach(t),hfr=i(_l),Et=n(_l,"DIV",{class:!0});var IA=s(Et);T(Ky.$$.fragment,IA),pfr=i(IA),_be=n(IA,"P",{});var fAt=s(_be);_fr=r(fAt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fAt.forEach(t),ufr=i(IA),Rd=n(IA,"P",{});var rte=s(Rd);bfr=r(rte,`Note:
Loading a model from its configuration file does `),ube=n(rte,"STRONG",{});var mAt=s(ube);vfr=r(mAt,"not"),mAt.forEach(t),Ffr=r(rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZW=n(rte,"A",{href:!0});var gAt=s(ZW);Tfr=r(gAt,"from_pretrained()"),gAt.forEach(t),Mfr=r(rte," to load the model weights."),rte.forEach(t),Efr=i(IA),T(o7.$$.fragment,IA),IA.forEach(t),Cfr=i(_l),mo=n(_l,"DIV",{class:!0});var Ma=s(mo);T(Zy.$$.fragment,Ma),wfr=i(Ma),bbe=n(Ma,"P",{});var hAt=s(bbe);Afr=r(hAt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),hAt.forEach(t),Lfr=i(Ma),Ya=n(Ma,"P",{});var NA=s(Ya);yfr=r(NA,"The model class to instantiate is selected based on the "),vbe=n(NA,"CODE",{});var pAt=s(vbe);xfr=r(pAt,"model_type"),pAt.forEach(t),$fr=r(NA,` property of the config object (either
passed as an argument or loaded from `),Fbe=n(NA,"CODE",{});var _At=s(Fbe);kfr=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),Sfr=r(NA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tbe=n(NA,"CODE",{});var uAt=s(Tbe);Rfr=r(uAt,"pretrained_model_name_or_path"),uAt.forEach(t),Pfr=r(NA,":"),NA.forEach(t),Bfr=i(Ma),ot=n(Ma,"UL",{});var ul=s(ot);r7=n(ul,"LI",{});var nNe=s(r7);Mbe=n(nNe,"STRONG",{});var bAt=s(Mbe);Ifr=r(bAt,"data2vec-audio"),bAt.forEach(t),Nfr=r(nNe," \u2014 "),eH=n(nNe,"A",{href:!0});var vAt=s(eH);qfr=r(vAt,"Data2VecAudioForAudioFrameClassification"),vAt.forEach(t),jfr=r(nNe," (Data2VecAudio model)"),nNe.forEach(t),Dfr=i(ul),t7=n(ul,"LI",{});var sNe=s(t7);Ebe=n(sNe,"STRONG",{});var FAt=s(Ebe);Gfr=r(FAt,"unispeech-sat"),FAt.forEach(t),Ofr=r(sNe," \u2014 "),oH=n(sNe,"A",{href:!0});var TAt=s(oH);Vfr=r(TAt,"UniSpeechSatForAudioFrameClassification"),TAt.forEach(t),Xfr=r(sNe," (UniSpeechSat model)"),sNe.forEach(t),zfr=i(ul),a7=n(ul,"LI",{});var lNe=s(a7);Cbe=n(lNe,"STRONG",{});var MAt=s(Cbe);Qfr=r(MAt,"wav2vec2"),MAt.forEach(t),Wfr=r(lNe," \u2014 "),rH=n(lNe,"A",{href:!0});var EAt=s(rH);Hfr=r(EAt,"Wav2Vec2ForAudioFrameClassification"),EAt.forEach(t),Ufr=r(lNe," (Wav2Vec2 model)"),lNe.forEach(t),Jfr=i(ul),n7=n(ul,"LI",{});var iNe=s(n7);wbe=n(iNe,"STRONG",{});var CAt=s(wbe);Yfr=r(CAt,"wav2vec2-conformer"),CAt.forEach(t),Kfr=r(iNe," \u2014 "),tH=n(iNe,"A",{href:!0});var wAt=s(tH);Zfr=r(wAt,"Wav2Vec2ConformerForAudioFrameClassification"),wAt.forEach(t),emr=r(iNe," (Wav2Vec2-Conformer model)"),iNe.forEach(t),omr=i(ul),s7=n(ul,"LI",{});var dNe=s(s7);Abe=n(dNe,"STRONG",{});var AAt=s(Abe);rmr=r(AAt,"wavlm"),AAt.forEach(t),tmr=r(dNe," \u2014 "),aH=n(dNe,"A",{href:!0});var LAt=s(aH);amr=r(LAt,"WavLMForAudioFrameClassification"),LAt.forEach(t),nmr=r(dNe," (WavLM model)"),dNe.forEach(t),ul.forEach(t),smr=i(Ma),l7=n(Ma,"P",{});var cNe=s(l7);lmr=r(cNe,"The model is set in evaluation mode by default using "),Lbe=n(cNe,"CODE",{});var yAt=s(Lbe);imr=r(yAt,"model.eval()"),yAt.forEach(t),dmr=r(cNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ybe=n(cNe,"CODE",{});var xAt=s(ybe);cmr=r(xAt,"model.train()"),xAt.forEach(t),cNe.forEach(t),fmr=i(Ma),T(i7.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),RXe=i(f),Pd=n(f,"H2",{class:!0});var jQe=s(Pd);d7=n(jQe,"A",{id:!0,class:!0,href:!0});var $At=s(d7);xbe=n($At,"SPAN",{});var kAt=s(xbe);T(e8.$$.fragment,kAt),kAt.forEach(t),$At.forEach(t),mmr=i(jQe),$be=n(jQe,"SPAN",{});var SAt=s($be);gmr=r(SAt,"AutoModelForCTC"),SAt.forEach(t),jQe.forEach(t),PXe=i(f),Qo=n(f,"DIV",{class:!0});var bl=s(Qo);T(o8.$$.fragment,bl),hmr=i(bl),Bd=n(bl,"P",{});var tte=s(Bd);pmr=r(tte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),nH=n(tte,"A",{href:!0});var RAt=s(nH);_mr=r(RAt,"from_pretrained()"),RAt.forEach(t),umr=r(tte," class method or the "),sH=n(tte,"A",{href:!0});var PAt=s(sH);bmr=r(PAt,"from_config()"),PAt.forEach(t),vmr=r(tte,` class
method.`),tte.forEach(t),Fmr=i(bl),r8=n(bl,"P",{});var DQe=s(r8);Tmr=r(DQe,"This class cannot be instantiated directly using "),kbe=n(DQe,"CODE",{});var BAt=s(kbe);Mmr=r(BAt,"__init__()"),BAt.forEach(t),Emr=r(DQe," (throws an error)."),DQe.forEach(t),Cmr=i(bl),Ct=n(bl,"DIV",{class:!0});var qA=s(Ct);T(t8.$$.fragment,qA),wmr=i(qA),Sbe=n(qA,"P",{});var IAt=s(Sbe);Amr=r(IAt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),IAt.forEach(t),Lmr=i(qA),Id=n(qA,"P",{});var ate=s(Id);ymr=r(ate,`Note:
Loading a model from its configuration file does `),Rbe=n(ate,"STRONG",{});var NAt=s(Rbe);xmr=r(NAt,"not"),NAt.forEach(t),$mr=r(ate,` load the model weights. It only affects the
model\u2019s configuration. Use `),lH=n(ate,"A",{href:!0});var qAt=s(lH);kmr=r(qAt,"from_pretrained()"),qAt.forEach(t),Smr=r(ate," to load the model weights."),ate.forEach(t),Rmr=i(qA),T(c7.$$.fragment,qA),qA.forEach(t),Pmr=i(bl),go=n(bl,"DIV",{class:!0});var Ea=s(go);T(a8.$$.fragment,Ea),Bmr=i(Ea),Pbe=n(Ea,"P",{});var jAt=s(Pbe);Imr=r(jAt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),jAt.forEach(t),Nmr=i(Ea),Ka=n(Ea,"P",{});var jA=s(Ka);qmr=r(jA,"The model class to instantiate is selected based on the "),Bbe=n(jA,"CODE",{});var DAt=s(Bbe);jmr=r(DAt,"model_type"),DAt.forEach(t),Dmr=r(jA,` property of the config object (either
passed as an argument or loaded from `),Ibe=n(jA,"CODE",{});var GAt=s(Ibe);Gmr=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),Omr=r(jA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nbe=n(jA,"CODE",{});var OAt=s(Nbe);Vmr=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),Xmr=r(jA,":"),jA.forEach(t),zmr=i(Ea),Le=n(Ea,"UL",{});var Be=s(Le);f7=n(Be,"LI",{});var fNe=s(f7);qbe=n(fNe,"STRONG",{});var VAt=s(qbe);Qmr=r(VAt,"data2vec-audio"),VAt.forEach(t),Wmr=r(fNe," \u2014 "),iH=n(fNe,"A",{href:!0});var XAt=s(iH);Hmr=r(XAt,"Data2VecAudioForCTC"),XAt.forEach(t),Umr=r(fNe," (Data2VecAudio model)"),fNe.forEach(t),Jmr=i(Be),m7=n(Be,"LI",{});var mNe=s(m7);jbe=n(mNe,"STRONG",{});var zAt=s(jbe);Ymr=r(zAt,"hubert"),zAt.forEach(t),Kmr=r(mNe," \u2014 "),dH=n(mNe,"A",{href:!0});var QAt=s(dH);Zmr=r(QAt,"HubertForCTC"),QAt.forEach(t),egr=r(mNe," (Hubert model)"),mNe.forEach(t),ogr=i(Be),g7=n(Be,"LI",{});var gNe=s(g7);Dbe=n(gNe,"STRONG",{});var WAt=s(Dbe);rgr=r(WAt,"mctct"),WAt.forEach(t),tgr=r(gNe," \u2014 "),cH=n(gNe,"A",{href:!0});var HAt=s(cH);agr=r(HAt,"MCTCTForCTC"),HAt.forEach(t),ngr=r(gNe," (M-CTC-T model)"),gNe.forEach(t),sgr=i(Be),h7=n(Be,"LI",{});var hNe=s(h7);Gbe=n(hNe,"STRONG",{});var UAt=s(Gbe);lgr=r(UAt,"sew"),UAt.forEach(t),igr=r(hNe," \u2014 "),fH=n(hNe,"A",{href:!0});var JAt=s(fH);dgr=r(JAt,"SEWForCTC"),JAt.forEach(t),cgr=r(hNe," (SEW model)"),hNe.forEach(t),fgr=i(Be),p7=n(Be,"LI",{});var pNe=s(p7);Obe=n(pNe,"STRONG",{});var YAt=s(Obe);mgr=r(YAt,"sew-d"),YAt.forEach(t),ggr=r(pNe," \u2014 "),mH=n(pNe,"A",{href:!0});var KAt=s(mH);hgr=r(KAt,"SEWDForCTC"),KAt.forEach(t),pgr=r(pNe," (SEW-D model)"),pNe.forEach(t),_gr=i(Be),_7=n(Be,"LI",{});var _Ne=s(_7);Vbe=n(_Ne,"STRONG",{});var ZAt=s(Vbe);ugr=r(ZAt,"unispeech"),ZAt.forEach(t),bgr=r(_Ne," \u2014 "),gH=n(_Ne,"A",{href:!0});var e6t=s(gH);vgr=r(e6t,"UniSpeechForCTC"),e6t.forEach(t),Fgr=r(_Ne," (UniSpeech model)"),_Ne.forEach(t),Tgr=i(Be),u7=n(Be,"LI",{});var uNe=s(u7);Xbe=n(uNe,"STRONG",{});var o6t=s(Xbe);Mgr=r(o6t,"unispeech-sat"),o6t.forEach(t),Egr=r(uNe," \u2014 "),hH=n(uNe,"A",{href:!0});var r6t=s(hH);Cgr=r(r6t,"UniSpeechSatForCTC"),r6t.forEach(t),wgr=r(uNe," (UniSpeechSat model)"),uNe.forEach(t),Agr=i(Be),b7=n(Be,"LI",{});var bNe=s(b7);zbe=n(bNe,"STRONG",{});var t6t=s(zbe);Lgr=r(t6t,"wav2vec2"),t6t.forEach(t),ygr=r(bNe," \u2014 "),pH=n(bNe,"A",{href:!0});var a6t=s(pH);xgr=r(a6t,"Wav2Vec2ForCTC"),a6t.forEach(t),$gr=r(bNe," (Wav2Vec2 model)"),bNe.forEach(t),kgr=i(Be),v7=n(Be,"LI",{});var vNe=s(v7);Qbe=n(vNe,"STRONG",{});var n6t=s(Qbe);Sgr=r(n6t,"wav2vec2-conformer"),n6t.forEach(t),Rgr=r(vNe," \u2014 "),_H=n(vNe,"A",{href:!0});var s6t=s(_H);Pgr=r(s6t,"Wav2Vec2ConformerForCTC"),s6t.forEach(t),Bgr=r(vNe," (Wav2Vec2-Conformer model)"),vNe.forEach(t),Igr=i(Be),F7=n(Be,"LI",{});var FNe=s(F7);Wbe=n(FNe,"STRONG",{});var l6t=s(Wbe);Ngr=r(l6t,"wavlm"),l6t.forEach(t),qgr=r(FNe," \u2014 "),uH=n(FNe,"A",{href:!0});var i6t=s(uH);jgr=r(i6t,"WavLMForCTC"),i6t.forEach(t),Dgr=r(FNe," (WavLM model)"),FNe.forEach(t),Be.forEach(t),Ggr=i(Ea),T7=n(Ea,"P",{});var TNe=s(T7);Ogr=r(TNe,"The model is set in evaluation mode by default using "),Hbe=n(TNe,"CODE",{});var d6t=s(Hbe);Vgr=r(d6t,"model.eval()"),d6t.forEach(t),Xgr=r(TNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(TNe,"CODE",{});var c6t=s(Ube);zgr=r(c6t,"model.train()"),c6t.forEach(t),TNe.forEach(t),Qgr=i(Ea),T(M7.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),BXe=i(f),Nd=n(f,"H2",{class:!0});var GQe=s(Nd);E7=n(GQe,"A",{id:!0,class:!0,href:!0});var f6t=s(E7);Jbe=n(f6t,"SPAN",{});var m6t=s(Jbe);T(n8.$$.fragment,m6t),m6t.forEach(t),f6t.forEach(t),Wgr=i(GQe),Ybe=n(GQe,"SPAN",{});var g6t=s(Ybe);Hgr=r(g6t,"AutoModelForSpeechSeq2Seq"),g6t.forEach(t),GQe.forEach(t),IXe=i(f),Wo=n(f,"DIV",{class:!0});var vl=s(Wo);T(s8.$$.fragment,vl),Ugr=i(vl),qd=n(vl,"P",{});var nte=s(qd);Jgr=r(nte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),bH=n(nte,"A",{href:!0});var h6t=s(bH);Ygr=r(h6t,"from_pretrained()"),h6t.forEach(t),Kgr=r(nte," class method or the "),vH=n(nte,"A",{href:!0});var p6t=s(vH);Zgr=r(p6t,"from_config()"),p6t.forEach(t),ehr=r(nte,` class
method.`),nte.forEach(t),ohr=i(vl),l8=n(vl,"P",{});var OQe=s(l8);rhr=r(OQe,"This class cannot be instantiated directly using "),Kbe=n(OQe,"CODE",{});var _6t=s(Kbe);thr=r(_6t,"__init__()"),_6t.forEach(t),ahr=r(OQe," (throws an error)."),OQe.forEach(t),nhr=i(vl),wt=n(vl,"DIV",{class:!0});var DA=s(wt);T(i8.$$.fragment,DA),shr=i(DA),Zbe=n(DA,"P",{});var u6t=s(Zbe);lhr=r(u6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),u6t.forEach(t),ihr=i(DA),jd=n(DA,"P",{});var ste=s(jd);dhr=r(ste,`Note:
Loading a model from its configuration file does `),eve=n(ste,"STRONG",{});var b6t=s(eve);chr=r(b6t,"not"),b6t.forEach(t),fhr=r(ste,` load the model weights. It only affects the
model\u2019s configuration. Use `),FH=n(ste,"A",{href:!0});var v6t=s(FH);mhr=r(v6t,"from_pretrained()"),v6t.forEach(t),ghr=r(ste," to load the model weights."),ste.forEach(t),hhr=i(DA),T(C7.$$.fragment,DA),DA.forEach(t),phr=i(vl),ho=n(vl,"DIV",{class:!0});var Ca=s(ho);T(d8.$$.fragment,Ca),_hr=i(Ca),ove=n(Ca,"P",{});var F6t=s(ove);uhr=r(F6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),F6t.forEach(t),bhr=i(Ca),Za=n(Ca,"P",{});var GA=s(Za);vhr=r(GA,"The model class to instantiate is selected based on the "),rve=n(GA,"CODE",{});var T6t=s(rve);Fhr=r(T6t,"model_type"),T6t.forEach(t),Thr=r(GA,` property of the config object (either
passed as an argument or loaded from `),tve=n(GA,"CODE",{});var M6t=s(tve);Mhr=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),Ehr=r(GA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(GA,"CODE",{});var E6t=s(ave);Chr=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),whr=r(GA,":"),GA.forEach(t),Ahr=i(Ca),c8=n(Ca,"UL",{});var VQe=s(c8);w7=n(VQe,"LI",{});var MNe=s(w7);nve=n(MNe,"STRONG",{});var C6t=s(nve);Lhr=r(C6t,"speech-encoder-decoder"),C6t.forEach(t),yhr=r(MNe," \u2014 "),TH=n(MNe,"A",{href:!0});var w6t=s(TH);xhr=r(w6t,"SpeechEncoderDecoderModel"),w6t.forEach(t),$hr=r(MNe," (Speech Encoder decoder model)"),MNe.forEach(t),khr=i(VQe),A7=n(VQe,"LI",{});var ENe=s(A7);sve=n(ENe,"STRONG",{});var A6t=s(sve);Shr=r(A6t,"speech_to_text"),A6t.forEach(t),Rhr=r(ENe," \u2014 "),MH=n(ENe,"A",{href:!0});var L6t=s(MH);Phr=r(L6t,"Speech2TextForConditionalGeneration"),L6t.forEach(t),Bhr=r(ENe," (Speech2Text model)"),ENe.forEach(t),VQe.forEach(t),Ihr=i(Ca),L7=n(Ca,"P",{});var CNe=s(L7);Nhr=r(CNe,"The model is set in evaluation mode by default using "),lve=n(CNe,"CODE",{});var y6t=s(lve);qhr=r(y6t,"model.eval()"),y6t.forEach(t),jhr=r(CNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ive=n(CNe,"CODE",{});var x6t=s(ive);Dhr=r(x6t,"model.train()"),x6t.forEach(t),CNe.forEach(t),Ghr=i(Ca),T(y7.$$.fragment,Ca),Ca.forEach(t),vl.forEach(t),NXe=i(f),Dd=n(f,"H2",{class:!0});var XQe=s(Dd);x7=n(XQe,"A",{id:!0,class:!0,href:!0});var $6t=s(x7);dve=n($6t,"SPAN",{});var k6t=s(dve);T(f8.$$.fragment,k6t),k6t.forEach(t),$6t.forEach(t),Ohr=i(XQe),cve=n(XQe,"SPAN",{});var S6t=s(cve);Vhr=r(S6t,"AutoModelForAudioXVector"),S6t.forEach(t),XQe.forEach(t),qXe=i(f),Ho=n(f,"DIV",{class:!0});var Fl=s(Ho);T(m8.$$.fragment,Fl),Xhr=i(Fl),Gd=n(Fl,"P",{});var lte=s(Gd);zhr=r(lte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),EH=n(lte,"A",{href:!0});var R6t=s(EH);Qhr=r(R6t,"from_pretrained()"),R6t.forEach(t),Whr=r(lte," class method or the "),CH=n(lte,"A",{href:!0});var P6t=s(CH);Hhr=r(P6t,"from_config()"),P6t.forEach(t),Uhr=r(lte,` class
method.`),lte.forEach(t),Jhr=i(Fl),g8=n(Fl,"P",{});var zQe=s(g8);Yhr=r(zQe,"This class cannot be instantiated directly using "),fve=n(zQe,"CODE",{});var B6t=s(fve);Khr=r(B6t,"__init__()"),B6t.forEach(t),Zhr=r(zQe," (throws an error)."),zQe.forEach(t),epr=i(Fl),At=n(Fl,"DIV",{class:!0});var OA=s(At);T(h8.$$.fragment,OA),opr=i(OA),mve=n(OA,"P",{});var I6t=s(mve);rpr=r(I6t,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),I6t.forEach(t),tpr=i(OA),Od=n(OA,"P",{});var ite=s(Od);apr=r(ite,`Note:
Loading a model from its configuration file does `),gve=n(ite,"STRONG",{});var N6t=s(gve);npr=r(N6t,"not"),N6t.forEach(t),spr=r(ite,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(ite,"A",{href:!0});var q6t=s(wH);lpr=r(q6t,"from_pretrained()"),q6t.forEach(t),ipr=r(ite," to load the model weights."),ite.forEach(t),dpr=i(OA),T($7.$$.fragment,OA),OA.forEach(t),cpr=i(Fl),po=n(Fl,"DIV",{class:!0});var wa=s(po);T(p8.$$.fragment,wa),fpr=i(wa),hve=n(wa,"P",{});var j6t=s(hve);mpr=r(j6t,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),j6t.forEach(t),gpr=i(wa),en=n(wa,"P",{});var VA=s(en);hpr=r(VA,"The model class to instantiate is selected based on the "),pve=n(VA,"CODE",{});var D6t=s(pve);ppr=r(D6t,"model_type"),D6t.forEach(t),_pr=r(VA,` property of the config object (either
passed as an argument or loaded from `),_ve=n(VA,"CODE",{});var G6t=s(_ve);upr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),bpr=r(VA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uve=n(VA,"CODE",{});var O6t=s(uve);vpr=r(O6t,"pretrained_model_name_or_path"),O6t.forEach(t),Fpr=r(VA,":"),VA.forEach(t),Tpr=i(wa),rt=n(wa,"UL",{});var Tl=s(rt);k7=n(Tl,"LI",{});var wNe=s(k7);bve=n(wNe,"STRONG",{});var V6t=s(bve);Mpr=r(V6t,"data2vec-audio"),V6t.forEach(t),Epr=r(wNe," \u2014 "),AH=n(wNe,"A",{href:!0});var X6t=s(AH);Cpr=r(X6t,"Data2VecAudioForXVector"),X6t.forEach(t),wpr=r(wNe," (Data2VecAudio model)"),wNe.forEach(t),Apr=i(Tl),S7=n(Tl,"LI",{});var ANe=s(S7);vve=n(ANe,"STRONG",{});var z6t=s(vve);Lpr=r(z6t,"unispeech-sat"),z6t.forEach(t),ypr=r(ANe," \u2014 "),LH=n(ANe,"A",{href:!0});var Q6t=s(LH);xpr=r(Q6t,"UniSpeechSatForXVector"),Q6t.forEach(t),$pr=r(ANe," (UniSpeechSat model)"),ANe.forEach(t),kpr=i(Tl),R7=n(Tl,"LI",{});var LNe=s(R7);Fve=n(LNe,"STRONG",{});var W6t=s(Fve);Spr=r(W6t,"wav2vec2"),W6t.forEach(t),Rpr=r(LNe," \u2014 "),yH=n(LNe,"A",{href:!0});var H6t=s(yH);Ppr=r(H6t,"Wav2Vec2ForXVector"),H6t.forEach(t),Bpr=r(LNe," (Wav2Vec2 model)"),LNe.forEach(t),Ipr=i(Tl),P7=n(Tl,"LI",{});var yNe=s(P7);Tve=n(yNe,"STRONG",{});var U6t=s(Tve);Npr=r(U6t,"wav2vec2-conformer"),U6t.forEach(t),qpr=r(yNe," \u2014 "),xH=n(yNe,"A",{href:!0});var J6t=s(xH);jpr=r(J6t,"Wav2Vec2ConformerForXVector"),J6t.forEach(t),Dpr=r(yNe," (Wav2Vec2-Conformer model)"),yNe.forEach(t),Gpr=i(Tl),B7=n(Tl,"LI",{});var xNe=s(B7);Mve=n(xNe,"STRONG",{});var Y6t=s(Mve);Opr=r(Y6t,"wavlm"),Y6t.forEach(t),Vpr=r(xNe," \u2014 "),$H=n(xNe,"A",{href:!0});var K6t=s($H);Xpr=r(K6t,"WavLMForXVector"),K6t.forEach(t),zpr=r(xNe," (WavLM model)"),xNe.forEach(t),Tl.forEach(t),Qpr=i(wa),I7=n(wa,"P",{});var $Ne=s(I7);Wpr=r($Ne,"The model is set in evaluation mode by default using "),Eve=n($Ne,"CODE",{});var Z6t=s(Eve);Hpr=r(Z6t,"model.eval()"),Z6t.forEach(t),Upr=r($Ne,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cve=n($Ne,"CODE",{});var eLt=s(Cve);Jpr=r(eLt,"model.train()"),eLt.forEach(t),$Ne.forEach(t),Ypr=i(wa),T(N7.$$.fragment,wa),wa.forEach(t),Fl.forEach(t),jXe=i(f),Vd=n(f,"H2",{class:!0});var QQe=s(Vd);q7=n(QQe,"A",{id:!0,class:!0,href:!0});var oLt=s(q7);wve=n(oLt,"SPAN",{});var rLt=s(wve);T(_8.$$.fragment,rLt),rLt.forEach(t),oLt.forEach(t),Kpr=i(QQe),Ave=n(QQe,"SPAN",{});var tLt=s(Ave);Zpr=r(tLt,"AutoModelForMaskedImageModeling"),tLt.forEach(t),QQe.forEach(t),DXe=i(f),Uo=n(f,"DIV",{class:!0});var Ml=s(Uo);T(u8.$$.fragment,Ml),e_r=i(Ml),Xd=n(Ml,"P",{});var dte=s(Xd);o_r=r(dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),kH=n(dte,"A",{href:!0});var aLt=s(kH);r_r=r(aLt,"from_pretrained()"),aLt.forEach(t),t_r=r(dte," class method or the "),SH=n(dte,"A",{href:!0});var nLt=s(SH);a_r=r(nLt,"from_config()"),nLt.forEach(t),n_r=r(dte,` class
method.`),dte.forEach(t),s_r=i(Ml),b8=n(Ml,"P",{});var WQe=s(b8);l_r=r(WQe,"This class cannot be instantiated directly using "),Lve=n(WQe,"CODE",{});var sLt=s(Lve);i_r=r(sLt,"__init__()"),sLt.forEach(t),d_r=r(WQe," (throws an error)."),WQe.forEach(t),c_r=i(Ml),Lt=n(Ml,"DIV",{class:!0});var XA=s(Lt);T(v8.$$.fragment,XA),f_r=i(XA),yve=n(XA,"P",{});var lLt=s(yve);m_r=r(lLt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),lLt.forEach(t),g_r=i(XA),zd=n(XA,"P",{});var cte=s(zd);h_r=r(cte,`Note:
Loading a model from its configuration file does `),xve=n(cte,"STRONG",{});var iLt=s(xve);p_r=r(iLt,"not"),iLt.forEach(t),__r=r(cte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RH=n(cte,"A",{href:!0});var dLt=s(RH);u_r=r(dLt,"from_pretrained()"),dLt.forEach(t),b_r=r(cte," to load the model weights."),cte.forEach(t),v_r=i(XA),T(j7.$$.fragment,XA),XA.forEach(t),F_r=i(Ml),_o=n(Ml,"DIV",{class:!0});var Aa=s(_o);T(F8.$$.fragment,Aa),T_r=i(Aa),$ve=n(Aa,"P",{});var cLt=s($ve);M_r=r(cLt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),cLt.forEach(t),E_r=i(Aa),on=n(Aa,"P",{});var zA=s(on);C_r=r(zA,"The model class to instantiate is selected based on the "),kve=n(zA,"CODE",{});var fLt=s(kve);w_r=r(fLt,"model_type"),fLt.forEach(t),A_r=r(zA,` property of the config object (either
passed as an argument or loaded from `),Sve=n(zA,"CODE",{});var mLt=s(Sve);L_r=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),y_r=r(zA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rve=n(zA,"CODE",{});var gLt=s(Rve);x_r=r(gLt,"pretrained_model_name_or_path"),gLt.forEach(t),$_r=r(zA,":"),zA.forEach(t),k_r=i(Aa),Qd=n(Aa,"UL",{});var fte=s(Qd);D7=n(fte,"LI",{});var kNe=s(D7);Pve=n(kNe,"STRONG",{});var hLt=s(Pve);S_r=r(hLt,"deit"),hLt.forEach(t),R_r=r(kNe," \u2014 "),PH=n(kNe,"A",{href:!0});var pLt=s(PH);P_r=r(pLt,"DeiTForMaskedImageModeling"),pLt.forEach(t),B_r=r(kNe," (DeiT model)"),kNe.forEach(t),I_r=i(fte),G7=n(fte,"LI",{});var SNe=s(G7);Bve=n(SNe,"STRONG",{});var _Lt=s(Bve);N_r=r(_Lt,"swin"),_Lt.forEach(t),q_r=r(SNe," \u2014 "),BH=n(SNe,"A",{href:!0});var uLt=s(BH);j_r=r(uLt,"SwinForMaskedImageModeling"),uLt.forEach(t),D_r=r(SNe," (Swin Transformer model)"),SNe.forEach(t),G_r=i(fte),O7=n(fte,"LI",{});var RNe=s(O7);Ive=n(RNe,"STRONG",{});var bLt=s(Ive);O_r=r(bLt,"vit"),bLt.forEach(t),V_r=r(RNe," \u2014 "),IH=n(RNe,"A",{href:!0});var vLt=s(IH);X_r=r(vLt,"ViTForMaskedImageModeling"),vLt.forEach(t),z_r=r(RNe," (ViT model)"),RNe.forEach(t),fte.forEach(t),Q_r=i(Aa),V7=n(Aa,"P",{});var PNe=s(V7);W_r=r(PNe,"The model is set in evaluation mode by default using "),Nve=n(PNe,"CODE",{});var FLt=s(Nve);H_r=r(FLt,"model.eval()"),FLt.forEach(t),U_r=r(PNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qve=n(PNe,"CODE",{});var TLt=s(qve);J_r=r(TLt,"model.train()"),TLt.forEach(t),PNe.forEach(t),Y_r=i(Aa),T(X7.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),GXe=i(f),Wd=n(f,"H2",{class:!0});var HQe=s(Wd);z7=n(HQe,"A",{id:!0,class:!0,href:!0});var MLt=s(z7);jve=n(MLt,"SPAN",{});var ELt=s(jve);T(T8.$$.fragment,ELt),ELt.forEach(t),MLt.forEach(t),K_r=i(HQe),Dve=n(HQe,"SPAN",{});var CLt=s(Dve);Z_r=r(CLt,"AutoModelForObjectDetection"),CLt.forEach(t),HQe.forEach(t),OXe=i(f),Jo=n(f,"DIV",{class:!0});var El=s(Jo);T(M8.$$.fragment,El),eur=i(El),Hd=n(El,"P",{});var mte=s(Hd);our=r(mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),NH=n(mte,"A",{href:!0});var wLt=s(NH);rur=r(wLt,"from_pretrained()"),wLt.forEach(t),tur=r(mte," class method or the "),qH=n(mte,"A",{href:!0});var ALt=s(qH);aur=r(ALt,"from_config()"),ALt.forEach(t),nur=r(mte,` class
method.`),mte.forEach(t),sur=i(El),E8=n(El,"P",{});var UQe=s(E8);lur=r(UQe,"This class cannot be instantiated directly using "),Gve=n(UQe,"CODE",{});var LLt=s(Gve);iur=r(LLt,"__init__()"),LLt.forEach(t),dur=r(UQe," (throws an error)."),UQe.forEach(t),cur=i(El),yt=n(El,"DIV",{class:!0});var QA=s(yt);T(C8.$$.fragment,QA),fur=i(QA),Ove=n(QA,"P",{});var yLt=s(Ove);mur=r(yLt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),yLt.forEach(t),gur=i(QA),Ud=n(QA,"P",{});var gte=s(Ud);hur=r(gte,`Note:
Loading a model from its configuration file does `),Vve=n(gte,"STRONG",{});var xLt=s(Vve);pur=r(xLt,"not"),xLt.forEach(t),_ur=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(gte,"A",{href:!0});var $Lt=s(jH);uur=r($Lt,"from_pretrained()"),$Lt.forEach(t),bur=r(gte," to load the model weights."),gte.forEach(t),vur=i(QA),T(Q7.$$.fragment,QA),QA.forEach(t),Fur=i(El),uo=n(El,"DIV",{class:!0});var La=s(uo);T(w8.$$.fragment,La),Tur=i(La),Xve=n(La,"P",{});var kLt=s(Xve);Mur=r(kLt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kLt.forEach(t),Eur=i(La),rn=n(La,"P",{});var WA=s(rn);Cur=r(WA,"The model class to instantiate is selected based on the "),zve=n(WA,"CODE",{});var SLt=s(zve);wur=r(SLt,"model_type"),SLt.forEach(t),Aur=r(WA,` property of the config object (either
passed as an argument or loaded from `),Qve=n(WA,"CODE",{});var RLt=s(Qve);Lur=r(RLt,"pretrained_model_name_or_path"),RLt.forEach(t),yur=r(WA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wve=n(WA,"CODE",{});var PLt=s(Wve);xur=r(PLt,"pretrained_model_name_or_path"),PLt.forEach(t),$ur=r(WA,":"),WA.forEach(t),kur=i(La),A8=n(La,"UL",{});var JQe=s(A8);W7=n(JQe,"LI",{});var BNe=s(W7);Hve=n(BNe,"STRONG",{});var BLt=s(Hve);Sur=r(BLt,"detr"),BLt.forEach(t),Rur=r(BNe," \u2014 "),DH=n(BNe,"A",{href:!0});var ILt=s(DH);Pur=r(ILt,"DetrForObjectDetection"),ILt.forEach(t),Bur=r(BNe," (DETR model)"),BNe.forEach(t),Iur=i(JQe),H7=n(JQe,"LI",{});var INe=s(H7);Uve=n(INe,"STRONG",{});var NLt=s(Uve);Nur=r(NLt,"yolos"),NLt.forEach(t),qur=r(INe," \u2014 "),GH=n(INe,"A",{href:!0});var qLt=s(GH);jur=r(qLt,"YolosForObjectDetection"),qLt.forEach(t),Dur=r(INe," (YOLOS model)"),INe.forEach(t),JQe.forEach(t),Gur=i(La),U7=n(La,"P",{});var NNe=s(U7);Our=r(NNe,"The model is set in evaluation mode by default using "),Jve=n(NNe,"CODE",{});var jLt=s(Jve);Vur=r(jLt,"model.eval()"),jLt.forEach(t),Xur=r(NNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yve=n(NNe,"CODE",{});var DLt=s(Yve);zur=r(DLt,"model.train()"),DLt.forEach(t),NNe.forEach(t),Qur=i(La),T(J7.$$.fragment,La),La.forEach(t),El.forEach(t),VXe=i(f),Jd=n(f,"H2",{class:!0});var YQe=s(Jd);Y7=n(YQe,"A",{id:!0,class:!0,href:!0});var GLt=s(Y7);Kve=n(GLt,"SPAN",{});var OLt=s(Kve);T(L8.$$.fragment,OLt),OLt.forEach(t),GLt.forEach(t),Wur=i(YQe),Zve=n(YQe,"SPAN",{});var VLt=s(Zve);Hur=r(VLt,"AutoModelForImageSegmentation"),VLt.forEach(t),YQe.forEach(t),XXe=i(f),Yo=n(f,"DIV",{class:!0});var Cl=s(Yo);T(y8.$$.fragment,Cl),Uur=i(Cl),Yd=n(Cl,"P",{});var hte=s(Yd);Jur=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),OH=n(hte,"A",{href:!0});var XLt=s(OH);Yur=r(XLt,"from_pretrained()"),XLt.forEach(t),Kur=r(hte," class method or the "),VH=n(hte,"A",{href:!0});var zLt=s(VH);Zur=r(zLt,"from_config()"),zLt.forEach(t),e2r=r(hte,` class
method.`),hte.forEach(t),o2r=i(Cl),x8=n(Cl,"P",{});var KQe=s(x8);r2r=r(KQe,"This class cannot be instantiated directly using "),eFe=n(KQe,"CODE",{});var QLt=s(eFe);t2r=r(QLt,"__init__()"),QLt.forEach(t),a2r=r(KQe," (throws an error)."),KQe.forEach(t),n2r=i(Cl),xt=n(Cl,"DIV",{class:!0});var HA=s(xt);T($8.$$.fragment,HA),s2r=i(HA),oFe=n(HA,"P",{});var WLt=s(oFe);l2r=r(WLt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),WLt.forEach(t),i2r=i(HA),Kd=n(HA,"P",{});var pte=s(Kd);d2r=r(pte,`Note:
Loading a model from its configuration file does `),rFe=n(pte,"STRONG",{});var HLt=s(rFe);c2r=r(HLt,"not"),HLt.forEach(t),f2r=r(pte,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(pte,"A",{href:!0});var ULt=s(XH);m2r=r(ULt,"from_pretrained()"),ULt.forEach(t),g2r=r(pte," to load the model weights."),pte.forEach(t),h2r=i(HA),T(K7.$$.fragment,HA),HA.forEach(t),p2r=i(Cl),bo=n(Cl,"DIV",{class:!0});var ya=s(bo);T(k8.$$.fragment,ya),_2r=i(ya),tFe=n(ya,"P",{});var JLt=s(tFe);u2r=r(JLt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),JLt.forEach(t),b2r=i(ya),tn=n(ya,"P",{});var UA=s(tn);v2r=r(UA,"The model class to instantiate is selected based on the "),aFe=n(UA,"CODE",{});var YLt=s(aFe);F2r=r(YLt,"model_type"),YLt.forEach(t),T2r=r(UA,` property of the config object (either
passed as an argument or loaded from `),nFe=n(UA,"CODE",{});var KLt=s(nFe);M2r=r(KLt,"pretrained_model_name_or_path"),KLt.forEach(t),E2r=r(UA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sFe=n(UA,"CODE",{});var ZLt=s(sFe);C2r=r(ZLt,"pretrained_model_name_or_path"),ZLt.forEach(t),w2r=r(UA,":"),UA.forEach(t),A2r=i(ya),lFe=n(ya,"UL",{});var eyt=s(lFe);Z7=n(eyt,"LI",{});var qNe=s(Z7);iFe=n(qNe,"STRONG",{});var oyt=s(iFe);L2r=r(oyt,"detr"),oyt.forEach(t),y2r=r(qNe," \u2014 "),zH=n(qNe,"A",{href:!0});var ryt=s(zH);x2r=r(ryt,"DetrForSegmentation"),ryt.forEach(t),$2r=r(qNe," (DETR model)"),qNe.forEach(t),eyt.forEach(t),k2r=i(ya),e9=n(ya,"P",{});var jNe=s(e9);S2r=r(jNe,"The model is set in evaluation mode by default using "),dFe=n(jNe,"CODE",{});var tyt=s(dFe);R2r=r(tyt,"model.eval()"),tyt.forEach(t),P2r=r(jNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cFe=n(jNe,"CODE",{});var ayt=s(cFe);B2r=r(ayt,"model.train()"),ayt.forEach(t),jNe.forEach(t),I2r=i(ya),T(o9.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),zXe=i(f),Zd=n(f,"H2",{class:!0});var ZQe=s(Zd);r9=n(ZQe,"A",{id:!0,class:!0,href:!0});var nyt=s(r9);fFe=n(nyt,"SPAN",{});var syt=s(fFe);T(S8.$$.fragment,syt),syt.forEach(t),nyt.forEach(t),N2r=i(ZQe),mFe=n(ZQe,"SPAN",{});var lyt=s(mFe);q2r=r(lyt,"AutoModelForSemanticSegmentation"),lyt.forEach(t),ZQe.forEach(t),QXe=i(f),Ko=n(f,"DIV",{class:!0});var wl=s(Ko);T(R8.$$.fragment,wl),j2r=i(wl),ec=n(wl,"P",{});var _te=s(ec);D2r=r(_te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),QH=n(_te,"A",{href:!0});var iyt=s(QH);G2r=r(iyt,"from_pretrained()"),iyt.forEach(t),O2r=r(_te," class method or the "),WH=n(_te,"A",{href:!0});var dyt=s(WH);V2r=r(dyt,"from_config()"),dyt.forEach(t),X2r=r(_te,` class
method.`),_te.forEach(t),z2r=i(wl),P8=n(wl,"P",{});var eWe=s(P8);Q2r=r(eWe,"This class cannot be instantiated directly using "),gFe=n(eWe,"CODE",{});var cyt=s(gFe);W2r=r(cyt,"__init__()"),cyt.forEach(t),H2r=r(eWe," (throws an error)."),eWe.forEach(t),U2r=i(wl),$t=n(wl,"DIV",{class:!0});var JA=s($t);T(B8.$$.fragment,JA),J2r=i(JA),hFe=n(JA,"P",{});var fyt=s(hFe);Y2r=r(fyt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),fyt.forEach(t),K2r=i(JA),oc=n(JA,"P",{});var ute=s(oc);Z2r=r(ute,`Note:
Loading a model from its configuration file does `),pFe=n(ute,"STRONG",{});var myt=s(pFe);e1r=r(myt,"not"),myt.forEach(t),o1r=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),HH=n(ute,"A",{href:!0});var gyt=s(HH);r1r=r(gyt,"from_pretrained()"),gyt.forEach(t),t1r=r(ute," to load the model weights."),ute.forEach(t),a1r=i(JA),T(t9.$$.fragment,JA),JA.forEach(t),n1r=i(wl),vo=n(wl,"DIV",{class:!0});var xa=s(vo);T(I8.$$.fragment,xa),s1r=i(xa),_Fe=n(xa,"P",{});var hyt=s(_Fe);l1r=r(hyt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),hyt.forEach(t),i1r=i(xa),an=n(xa,"P",{});var YA=s(an);d1r=r(YA,"The model class to instantiate is selected based on the "),uFe=n(YA,"CODE",{});var pyt=s(uFe);c1r=r(pyt,"model_type"),pyt.forEach(t),f1r=r(YA,` property of the config object (either
passed as an argument or loaded from `),bFe=n(YA,"CODE",{});var _yt=s(bFe);m1r=r(_yt,"pretrained_model_name_or_path"),_yt.forEach(t),g1r=r(YA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vFe=n(YA,"CODE",{});var uyt=s(vFe);h1r=r(uyt,"pretrained_model_name_or_path"),uyt.forEach(t),p1r=r(YA,":"),YA.forEach(t),_1r=i(xa),tt=n(xa,"UL",{});var Al=s(tt);a9=n(Al,"LI",{});var DNe=s(a9);FFe=n(DNe,"STRONG",{});var byt=s(FFe);u1r=r(byt,"beit"),byt.forEach(t),b1r=r(DNe," \u2014 "),UH=n(DNe,"A",{href:!0});var vyt=s(UH);v1r=r(vyt,"BeitForSemanticSegmentation"),vyt.forEach(t),F1r=r(DNe," (BEiT model)"),DNe.forEach(t),T1r=i(Al),n9=n(Al,"LI",{});var GNe=s(n9);TFe=n(GNe,"STRONG",{});var Fyt=s(TFe);M1r=r(Fyt,"data2vec-vision"),Fyt.forEach(t),E1r=r(GNe," \u2014 "),JH=n(GNe,"A",{href:!0});var Tyt=s(JH);C1r=r(Tyt,"Data2VecVisionForSemanticSegmentation"),Tyt.forEach(t),w1r=r(GNe," (Data2VecVision model)"),GNe.forEach(t),A1r=i(Al),s9=n(Al,"LI",{});var ONe=s(s9);MFe=n(ONe,"STRONG",{});var Myt=s(MFe);L1r=r(Myt,"dpt"),Myt.forEach(t),y1r=r(ONe," \u2014 "),YH=n(ONe,"A",{href:!0});var Eyt=s(YH);x1r=r(Eyt,"DPTForSemanticSegmentation"),Eyt.forEach(t),$1r=r(ONe," (DPT model)"),ONe.forEach(t),k1r=i(Al),l9=n(Al,"LI",{});var VNe=s(l9);EFe=n(VNe,"STRONG",{});var Cyt=s(EFe);S1r=r(Cyt,"mobilevit"),Cyt.forEach(t),R1r=r(VNe," \u2014 "),KH=n(VNe,"A",{href:!0});var wyt=s(KH);P1r=r(wyt,"MobileViTForSemanticSegmentation"),wyt.forEach(t),B1r=r(VNe," (MobileViT model)"),VNe.forEach(t),I1r=i(Al),i9=n(Al,"LI",{});var XNe=s(i9);CFe=n(XNe,"STRONG",{});var Ayt=s(CFe);N1r=r(Ayt,"segformer"),Ayt.forEach(t),q1r=r(XNe," \u2014 "),ZH=n(XNe,"A",{href:!0});var Lyt=s(ZH);j1r=r(Lyt,"SegformerForSemanticSegmentation"),Lyt.forEach(t),D1r=r(XNe," (SegFormer model)"),XNe.forEach(t),Al.forEach(t),G1r=i(xa),d9=n(xa,"P",{});var zNe=s(d9);O1r=r(zNe,"The model is set in evaluation mode by default using "),wFe=n(zNe,"CODE",{});var yyt=s(wFe);V1r=r(yyt,"model.eval()"),yyt.forEach(t),X1r=r(zNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=n(zNe,"CODE",{});var xyt=s(AFe);z1r=r(xyt,"model.train()"),xyt.forEach(t),zNe.forEach(t),Q1r=i(xa),T(c9.$$.fragment,xa),xa.forEach(t),wl.forEach(t),WXe=i(f),rc=n(f,"H2",{class:!0});var oWe=s(rc);f9=n(oWe,"A",{id:!0,class:!0,href:!0});var $yt=s(f9);LFe=n($yt,"SPAN",{});var kyt=s(LFe);T(N8.$$.fragment,kyt),kyt.forEach(t),$yt.forEach(t),W1r=i(oWe),yFe=n(oWe,"SPAN",{});var Syt=s(yFe);H1r=r(Syt,"AutoModelForInstanceSegmentation"),Syt.forEach(t),oWe.forEach(t),HXe=i(f),Zo=n(f,"DIV",{class:!0});var Ll=s(Zo);T(q8.$$.fragment,Ll),U1r=i(Ll),tc=n(Ll,"P",{});var bte=s(tc);J1r=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),eU=n(bte,"A",{href:!0});var Ryt=s(eU);Y1r=r(Ryt,"from_pretrained()"),Ryt.forEach(t),K1r=r(bte," class method or the "),oU=n(bte,"A",{href:!0});var Pyt=s(oU);Z1r=r(Pyt,"from_config()"),Pyt.forEach(t),e4r=r(bte,` class
method.`),bte.forEach(t),o4r=i(Ll),j8=n(Ll,"P",{});var rWe=s(j8);r4r=r(rWe,"This class cannot be instantiated directly using "),xFe=n(rWe,"CODE",{});var Byt=s(xFe);t4r=r(Byt,"__init__()"),Byt.forEach(t),a4r=r(rWe," (throws an error)."),rWe.forEach(t),n4r=i(Ll),kt=n(Ll,"DIV",{class:!0});var KA=s(kt);T(D8.$$.fragment,KA),s4r=i(KA),$Fe=n(KA,"P",{});var Iyt=s($Fe);l4r=r(Iyt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Iyt.forEach(t),i4r=i(KA),ac=n(KA,"P",{});var vte=s(ac);d4r=r(vte,`Note:
Loading a model from its configuration file does `),kFe=n(vte,"STRONG",{});var Nyt=s(kFe);c4r=r(Nyt,"not"),Nyt.forEach(t),f4r=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rU=n(vte,"A",{href:!0});var qyt=s(rU);m4r=r(qyt,"from_pretrained()"),qyt.forEach(t),g4r=r(vte," to load the model weights."),vte.forEach(t),h4r=i(KA),T(m9.$$.fragment,KA),KA.forEach(t),p4r=i(Ll),Fo=n(Ll,"DIV",{class:!0});var $a=s(Fo);T(G8.$$.fragment,$a),_4r=i($a),SFe=n($a,"P",{});var jyt=s(SFe);u4r=r(jyt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jyt.forEach(t),b4r=i($a),nn=n($a,"P",{});var ZA=s(nn);v4r=r(ZA,"The model class to instantiate is selected based on the "),RFe=n(ZA,"CODE",{});var Dyt=s(RFe);F4r=r(Dyt,"model_type"),Dyt.forEach(t),T4r=r(ZA,` property of the config object (either
passed as an argument or loaded from `),PFe=n(ZA,"CODE",{});var Gyt=s(PFe);M4r=r(Gyt,"pretrained_model_name_or_path"),Gyt.forEach(t),E4r=r(ZA,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(ZA,"CODE",{});var Oyt=s(BFe);C4r=r(Oyt,"pretrained_model_name_or_path"),Oyt.forEach(t),w4r=r(ZA,":"),ZA.forEach(t),A4r=i($a),IFe=n($a,"UL",{});var Vyt=s(IFe);g9=n(Vyt,"LI",{});var QNe=s(g9);NFe=n(QNe,"STRONG",{});var Xyt=s(NFe);L4r=r(Xyt,"maskformer"),Xyt.forEach(t),y4r=r(QNe," \u2014 "),tU=n(QNe,"A",{href:!0});var zyt=s(tU);x4r=r(zyt,"MaskFormerForInstanceSegmentation"),zyt.forEach(t),$4r=r(QNe," (MaskFormer model)"),QNe.forEach(t),Vyt.forEach(t),k4r=i($a),h9=n($a,"P",{});var WNe=s(h9);S4r=r(WNe,"The model is set in evaluation mode by default using "),qFe=n(WNe,"CODE",{});var Qyt=s(qFe);R4r=r(Qyt,"model.eval()"),Qyt.forEach(t),P4r=r(WNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jFe=n(WNe,"CODE",{});var Wyt=s(jFe);B4r=r(Wyt,"model.train()"),Wyt.forEach(t),WNe.forEach(t),I4r=i($a),T(p9.$$.fragment,$a),$a.forEach(t),Ll.forEach(t),UXe=i(f),nc=n(f,"H2",{class:!0});var tWe=s(nc);_9=n(tWe,"A",{id:!0,class:!0,href:!0});var Hyt=s(_9);DFe=n(Hyt,"SPAN",{});var Uyt=s(DFe);T(O8.$$.fragment,Uyt),Uyt.forEach(t),Hyt.forEach(t),N4r=i(tWe),GFe=n(tWe,"SPAN",{});var Jyt=s(GFe);q4r=r(Jyt,"TFAutoModel"),Jyt.forEach(t),tWe.forEach(t),JXe=i(f),er=n(f,"DIV",{class:!0});var yl=s(er);T(V8.$$.fragment,yl),j4r=i(yl),sc=n(yl,"P",{});var Fte=s(sc);D4r=r(Fte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aU=n(Fte,"A",{href:!0});var Yyt=s(aU);G4r=r(Yyt,"from_pretrained()"),Yyt.forEach(t),O4r=r(Fte," class method or the "),nU=n(Fte,"A",{href:!0});var Kyt=s(nU);V4r=r(Kyt,"from_config()"),Kyt.forEach(t),X4r=r(Fte,` class
method.`),Fte.forEach(t),z4r=i(yl),X8=n(yl,"P",{});var aWe=s(X8);Q4r=r(aWe,"This class cannot be instantiated directly using "),OFe=n(aWe,"CODE",{});var Zyt=s(OFe);W4r=r(Zyt,"__init__()"),Zyt.forEach(t),H4r=r(aWe," (throws an error)."),aWe.forEach(t),U4r=i(yl),St=n(yl,"DIV",{class:!0});var e6=s(St);T(z8.$$.fragment,e6),J4r=i(e6),VFe=n(e6,"P",{});var e8t=s(VFe);Y4r=r(e8t,"Instantiates one of the base model classes of the library from a configuration."),e8t.forEach(t),K4r=i(e6),lc=n(e6,"P",{});var Tte=s(lc);Z4r=r(Tte,`Note:
Loading a model from its configuration file does `),XFe=n(Tte,"STRONG",{});var o8t=s(XFe);ebr=r(o8t,"not"),o8t.forEach(t),obr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(Tte,"A",{href:!0});var r8t=s(sU);rbr=r(r8t,"from_pretrained()"),r8t.forEach(t),tbr=r(Tte," to load the model weights."),Tte.forEach(t),abr=i(e6),T(u9.$$.fragment,e6),e6.forEach(t),nbr=i(yl),xr=n(yl,"DIV",{class:!0});var xl=s(xr);T(Q8.$$.fragment,xl),sbr=i(xl),zFe=n(xl,"P",{});var t8t=s(zFe);lbr=r(t8t,"Instantiate one of the base model classes of the library from a pretrained model."),t8t.forEach(t),ibr=i(xl),sn=n(xl,"P",{});var o6=s(sn);dbr=r(o6,"The model class to instantiate is selected based on the "),QFe=n(o6,"CODE",{});var a8t=s(QFe);cbr=r(a8t,"model_type"),a8t.forEach(t),fbr=r(o6,` property of the config object (either
passed as an argument or loaded from `),WFe=n(o6,"CODE",{});var n8t=s(WFe);mbr=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),gbr=r(o6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HFe=n(o6,"CODE",{});var s8t=s(HFe);hbr=r(s8t,"pretrained_model_name_or_path"),s8t.forEach(t),pbr=r(o6,":"),o6.forEach(t),_br=i(xl),q=n(xl,"UL",{});var D=s(q);b9=n(D,"LI",{});var HNe=s(b9);UFe=n(HNe,"STRONG",{});var l8t=s(UFe);ubr=r(l8t,"albert"),l8t.forEach(t),bbr=r(HNe," \u2014 "),lU=n(HNe,"A",{href:!0});var i8t=s(lU);vbr=r(i8t,"TFAlbertModel"),i8t.forEach(t),Fbr=r(HNe," (ALBERT model)"),HNe.forEach(t),Tbr=i(D),v9=n(D,"LI",{});var UNe=s(v9);JFe=n(UNe,"STRONG",{});var d8t=s(JFe);Mbr=r(d8t,"bart"),d8t.forEach(t),Ebr=r(UNe," \u2014 "),iU=n(UNe,"A",{href:!0});var c8t=s(iU);Cbr=r(c8t,"TFBartModel"),c8t.forEach(t),wbr=r(UNe," (BART model)"),UNe.forEach(t),Abr=i(D),F9=n(D,"LI",{});var JNe=s(F9);YFe=n(JNe,"STRONG",{});var f8t=s(YFe);Lbr=r(f8t,"bert"),f8t.forEach(t),ybr=r(JNe," \u2014 "),dU=n(JNe,"A",{href:!0});var m8t=s(dU);xbr=r(m8t,"TFBertModel"),m8t.forEach(t),$br=r(JNe," (BERT model)"),JNe.forEach(t),kbr=i(D),T9=n(D,"LI",{});var YNe=s(T9);KFe=n(YNe,"STRONG",{});var g8t=s(KFe);Sbr=r(g8t,"blenderbot"),g8t.forEach(t),Rbr=r(YNe," \u2014 "),cU=n(YNe,"A",{href:!0});var h8t=s(cU);Pbr=r(h8t,"TFBlenderbotModel"),h8t.forEach(t),Bbr=r(YNe," (Blenderbot model)"),YNe.forEach(t),Ibr=i(D),M9=n(D,"LI",{});var KNe=s(M9);ZFe=n(KNe,"STRONG",{});var p8t=s(ZFe);Nbr=r(p8t,"blenderbot-small"),p8t.forEach(t),qbr=r(KNe," \u2014 "),fU=n(KNe,"A",{href:!0});var _8t=s(fU);jbr=r(_8t,"TFBlenderbotSmallModel"),_8t.forEach(t),Dbr=r(KNe," (BlenderbotSmall model)"),KNe.forEach(t),Gbr=i(D),E9=n(D,"LI",{});var ZNe=s(E9);eTe=n(ZNe,"STRONG",{});var u8t=s(eTe);Obr=r(u8t,"camembert"),u8t.forEach(t),Vbr=r(ZNe," \u2014 "),mU=n(ZNe,"A",{href:!0});var b8t=s(mU);Xbr=r(b8t,"TFCamembertModel"),b8t.forEach(t),zbr=r(ZNe," (CamemBERT model)"),ZNe.forEach(t),Qbr=i(D),C9=n(D,"LI",{});var eqe=s(C9);oTe=n(eqe,"STRONG",{});var v8t=s(oTe);Wbr=r(v8t,"clip"),v8t.forEach(t),Hbr=r(eqe," \u2014 "),gU=n(eqe,"A",{href:!0});var F8t=s(gU);Ubr=r(F8t,"TFCLIPModel"),F8t.forEach(t),Jbr=r(eqe," (CLIP model)"),eqe.forEach(t),Ybr=i(D),w9=n(D,"LI",{});var oqe=s(w9);rTe=n(oqe,"STRONG",{});var T8t=s(rTe);Kbr=r(T8t,"convbert"),T8t.forEach(t),Zbr=r(oqe," \u2014 "),hU=n(oqe,"A",{href:!0});var M8t=s(hU);evr=r(M8t,"TFConvBertModel"),M8t.forEach(t),ovr=r(oqe," (ConvBERT model)"),oqe.forEach(t),rvr=i(D),A9=n(D,"LI",{});var rqe=s(A9);tTe=n(rqe,"STRONG",{});var E8t=s(tTe);tvr=r(E8t,"convnext"),E8t.forEach(t),avr=r(rqe," \u2014 "),pU=n(rqe,"A",{href:!0});var C8t=s(pU);nvr=r(C8t,"TFConvNextModel"),C8t.forEach(t),svr=r(rqe," (ConvNeXT model)"),rqe.forEach(t),lvr=i(D),L9=n(D,"LI",{});var tqe=s(L9);aTe=n(tqe,"STRONG",{});var w8t=s(aTe);ivr=r(w8t,"ctrl"),w8t.forEach(t),dvr=r(tqe," \u2014 "),_U=n(tqe,"A",{href:!0});var A8t=s(_U);cvr=r(A8t,"TFCTRLModel"),A8t.forEach(t),fvr=r(tqe," (CTRL model)"),tqe.forEach(t),mvr=i(D),y9=n(D,"LI",{});var aqe=s(y9);nTe=n(aqe,"STRONG",{});var L8t=s(nTe);gvr=r(L8t,"data2vec-vision"),L8t.forEach(t),hvr=r(aqe," \u2014 "),uU=n(aqe,"A",{href:!0});var y8t=s(uU);pvr=r(y8t,"TFData2VecVisionModel"),y8t.forEach(t),_vr=r(aqe," (Data2VecVision model)"),aqe.forEach(t),uvr=i(D),x9=n(D,"LI",{});var nqe=s(x9);sTe=n(nqe,"STRONG",{});var x8t=s(sTe);bvr=r(x8t,"deberta"),x8t.forEach(t),vvr=r(nqe," \u2014 "),bU=n(nqe,"A",{href:!0});var $8t=s(bU);Fvr=r($8t,"TFDebertaModel"),$8t.forEach(t),Tvr=r(nqe," (DeBERTa model)"),nqe.forEach(t),Mvr=i(D),$9=n(D,"LI",{});var sqe=s($9);lTe=n(sqe,"STRONG",{});var k8t=s(lTe);Evr=r(k8t,"deberta-v2"),k8t.forEach(t),Cvr=r(sqe," \u2014 "),vU=n(sqe,"A",{href:!0});var S8t=s(vU);wvr=r(S8t,"TFDebertaV2Model"),S8t.forEach(t),Avr=r(sqe," (DeBERTa-v2 model)"),sqe.forEach(t),Lvr=i(D),k9=n(D,"LI",{});var lqe=s(k9);iTe=n(lqe,"STRONG",{});var R8t=s(iTe);yvr=r(R8t,"distilbert"),R8t.forEach(t),xvr=r(lqe," \u2014 "),FU=n(lqe,"A",{href:!0});var P8t=s(FU);$vr=r(P8t,"TFDistilBertModel"),P8t.forEach(t),kvr=r(lqe," (DistilBERT model)"),lqe.forEach(t),Svr=i(D),S9=n(D,"LI",{});var iqe=s(S9);dTe=n(iqe,"STRONG",{});var B8t=s(dTe);Rvr=r(B8t,"dpr"),B8t.forEach(t),Pvr=r(iqe," \u2014 "),TU=n(iqe,"A",{href:!0});var I8t=s(TU);Bvr=r(I8t,"TFDPRQuestionEncoder"),I8t.forEach(t),Ivr=r(iqe," (DPR model)"),iqe.forEach(t),Nvr=i(D),R9=n(D,"LI",{});var dqe=s(R9);cTe=n(dqe,"STRONG",{});var N8t=s(cTe);qvr=r(N8t,"electra"),N8t.forEach(t),jvr=r(dqe," \u2014 "),MU=n(dqe,"A",{href:!0});var q8t=s(MU);Dvr=r(q8t,"TFElectraModel"),q8t.forEach(t),Gvr=r(dqe," (ELECTRA model)"),dqe.forEach(t),Ovr=i(D),P9=n(D,"LI",{});var cqe=s(P9);fTe=n(cqe,"STRONG",{});var j8t=s(fTe);Vvr=r(j8t,"flaubert"),j8t.forEach(t),Xvr=r(cqe," \u2014 "),EU=n(cqe,"A",{href:!0});var D8t=s(EU);zvr=r(D8t,"TFFlaubertModel"),D8t.forEach(t),Qvr=r(cqe," (FlauBERT model)"),cqe.forEach(t),Wvr=i(D),Js=n(D,"LI",{});var kS=s(Js);mTe=n(kS,"STRONG",{});var G8t=s(mTe);Hvr=r(G8t,"funnel"),G8t.forEach(t),Uvr=r(kS," \u2014 "),CU=n(kS,"A",{href:!0});var O8t=s(CU);Jvr=r(O8t,"TFFunnelModel"),O8t.forEach(t),Yvr=r(kS," or "),wU=n(kS,"A",{href:!0});var V8t=s(wU);Kvr=r(V8t,"TFFunnelBaseModel"),V8t.forEach(t),Zvr=r(kS," (Funnel Transformer model)"),kS.forEach(t),eFr=i(D),B9=n(D,"LI",{});var fqe=s(B9);gTe=n(fqe,"STRONG",{});var X8t=s(gTe);oFr=r(X8t,"gpt2"),X8t.forEach(t),rFr=r(fqe," \u2014 "),AU=n(fqe,"A",{href:!0});var z8t=s(AU);tFr=r(z8t,"TFGPT2Model"),z8t.forEach(t),aFr=r(fqe," (OpenAI GPT-2 model)"),fqe.forEach(t),nFr=i(D),I9=n(D,"LI",{});var mqe=s(I9);hTe=n(mqe,"STRONG",{});var Q8t=s(hTe);sFr=r(Q8t,"gptj"),Q8t.forEach(t),lFr=r(mqe," \u2014 "),LU=n(mqe,"A",{href:!0});var W8t=s(LU);iFr=r(W8t,"TFGPTJModel"),W8t.forEach(t),dFr=r(mqe," (GPT-J model)"),mqe.forEach(t),cFr=i(D),N9=n(D,"LI",{});var gqe=s(N9);pTe=n(gqe,"STRONG",{});var H8t=s(pTe);fFr=r(H8t,"hubert"),H8t.forEach(t),mFr=r(gqe," \u2014 "),yU=n(gqe,"A",{href:!0});var U8t=s(yU);gFr=r(U8t,"TFHubertModel"),U8t.forEach(t),hFr=r(gqe," (Hubert model)"),gqe.forEach(t),pFr=i(D),q9=n(D,"LI",{});var hqe=s(q9);_Te=n(hqe,"STRONG",{});var J8t=s(_Te);_Fr=r(J8t,"layoutlm"),J8t.forEach(t),uFr=r(hqe," \u2014 "),xU=n(hqe,"A",{href:!0});var Y8t=s(xU);bFr=r(Y8t,"TFLayoutLMModel"),Y8t.forEach(t),vFr=r(hqe," (LayoutLM model)"),hqe.forEach(t),FFr=i(D),j9=n(D,"LI",{});var pqe=s(j9);uTe=n(pqe,"STRONG",{});var K8t=s(uTe);TFr=r(K8t,"led"),K8t.forEach(t),MFr=r(pqe," \u2014 "),$U=n(pqe,"A",{href:!0});var Z8t=s($U);EFr=r(Z8t,"TFLEDModel"),Z8t.forEach(t),CFr=r(pqe," (LED model)"),pqe.forEach(t),wFr=i(D),D9=n(D,"LI",{});var _qe=s(D9);bTe=n(_qe,"STRONG",{});var ext=s(bTe);AFr=r(ext,"longformer"),ext.forEach(t),LFr=r(_qe," \u2014 "),kU=n(_qe,"A",{href:!0});var oxt=s(kU);yFr=r(oxt,"TFLongformerModel"),oxt.forEach(t),xFr=r(_qe," (Longformer model)"),_qe.forEach(t),$Fr=i(D),G9=n(D,"LI",{});var uqe=s(G9);vTe=n(uqe,"STRONG",{});var rxt=s(vTe);kFr=r(rxt,"lxmert"),rxt.forEach(t),SFr=r(uqe," \u2014 "),SU=n(uqe,"A",{href:!0});var txt=s(SU);RFr=r(txt,"TFLxmertModel"),txt.forEach(t),PFr=r(uqe," (LXMERT model)"),uqe.forEach(t),BFr=i(D),O9=n(D,"LI",{});var bqe=s(O9);FTe=n(bqe,"STRONG",{});var axt=s(FTe);IFr=r(axt,"marian"),axt.forEach(t),NFr=r(bqe," \u2014 "),RU=n(bqe,"A",{href:!0});var nxt=s(RU);qFr=r(nxt,"TFMarianModel"),nxt.forEach(t),jFr=r(bqe," (Marian model)"),bqe.forEach(t),DFr=i(D),V9=n(D,"LI",{});var vqe=s(V9);TTe=n(vqe,"STRONG",{});var sxt=s(TTe);GFr=r(sxt,"mbart"),sxt.forEach(t),OFr=r(vqe," \u2014 "),PU=n(vqe,"A",{href:!0});var lxt=s(PU);VFr=r(lxt,"TFMBartModel"),lxt.forEach(t),XFr=r(vqe," (mBART model)"),vqe.forEach(t),zFr=i(D),X9=n(D,"LI",{});var Fqe=s(X9);MTe=n(Fqe,"STRONG",{});var ixt=s(MTe);QFr=r(ixt,"mobilebert"),ixt.forEach(t),WFr=r(Fqe," \u2014 "),BU=n(Fqe,"A",{href:!0});var dxt=s(BU);HFr=r(dxt,"TFMobileBertModel"),dxt.forEach(t),UFr=r(Fqe," (MobileBERT model)"),Fqe.forEach(t),JFr=i(D),z9=n(D,"LI",{});var Tqe=s(z9);ETe=n(Tqe,"STRONG",{});var cxt=s(ETe);YFr=r(cxt,"mpnet"),cxt.forEach(t),KFr=r(Tqe," \u2014 "),IU=n(Tqe,"A",{href:!0});var fxt=s(IU);ZFr=r(fxt,"TFMPNetModel"),fxt.forEach(t),eTr=r(Tqe," (MPNet model)"),Tqe.forEach(t),oTr=i(D),Q9=n(D,"LI",{});var Mqe=s(Q9);CTe=n(Mqe,"STRONG",{});var mxt=s(CTe);rTr=r(mxt,"mt5"),mxt.forEach(t),tTr=r(Mqe," \u2014 "),NU=n(Mqe,"A",{href:!0});var gxt=s(NU);aTr=r(gxt,"TFMT5Model"),gxt.forEach(t),nTr=r(Mqe," (MT5 model)"),Mqe.forEach(t),sTr=i(D),W9=n(D,"LI",{});var Eqe=s(W9);wTe=n(Eqe,"STRONG",{});var hxt=s(wTe);lTr=r(hxt,"openai-gpt"),hxt.forEach(t),iTr=r(Eqe," \u2014 "),qU=n(Eqe,"A",{href:!0});var pxt=s(qU);dTr=r(pxt,"TFOpenAIGPTModel"),pxt.forEach(t),cTr=r(Eqe," (OpenAI GPT model)"),Eqe.forEach(t),fTr=i(D),H9=n(D,"LI",{});var Cqe=s(H9);ATe=n(Cqe,"STRONG",{});var _xt=s(ATe);mTr=r(_xt,"opt"),_xt.forEach(t),gTr=r(Cqe," \u2014 "),jU=n(Cqe,"A",{href:!0});var uxt=s(jU);hTr=r(uxt,"TFOPTModel"),uxt.forEach(t),pTr=r(Cqe," (OPT model)"),Cqe.forEach(t),_Tr=i(D),U9=n(D,"LI",{});var wqe=s(U9);LTe=n(wqe,"STRONG",{});var bxt=s(LTe);uTr=r(bxt,"pegasus"),bxt.forEach(t),bTr=r(wqe," \u2014 "),DU=n(wqe,"A",{href:!0});var vxt=s(DU);vTr=r(vxt,"TFPegasusModel"),vxt.forEach(t),FTr=r(wqe," (Pegasus model)"),wqe.forEach(t),TTr=i(D),J9=n(D,"LI",{});var Aqe=s(J9);yTe=n(Aqe,"STRONG",{});var Fxt=s(yTe);MTr=r(Fxt,"regnet"),Fxt.forEach(t),ETr=r(Aqe," \u2014 "),GU=n(Aqe,"A",{href:!0});var Txt=s(GU);CTr=r(Txt,"TFRegNetModel"),Txt.forEach(t),wTr=r(Aqe," (RegNet model)"),Aqe.forEach(t),ATr=i(D),Y9=n(D,"LI",{});var Lqe=s(Y9);xTe=n(Lqe,"STRONG",{});var Mxt=s(xTe);LTr=r(Mxt,"rembert"),Mxt.forEach(t),yTr=r(Lqe," \u2014 "),OU=n(Lqe,"A",{href:!0});var Ext=s(OU);xTr=r(Ext,"TFRemBertModel"),Ext.forEach(t),$Tr=r(Lqe," (RemBERT model)"),Lqe.forEach(t),kTr=i(D),K9=n(D,"LI",{});var yqe=s(K9);$Te=n(yqe,"STRONG",{});var Cxt=s($Te);STr=r(Cxt,"resnet"),Cxt.forEach(t),RTr=r(yqe," \u2014 "),VU=n(yqe,"A",{href:!0});var wxt=s(VU);PTr=r(wxt,"TFResNetModel"),wxt.forEach(t),BTr=r(yqe," (ResNet model)"),yqe.forEach(t),ITr=i(D),Z9=n(D,"LI",{});var xqe=s(Z9);kTe=n(xqe,"STRONG",{});var Axt=s(kTe);NTr=r(Axt,"roberta"),Axt.forEach(t),qTr=r(xqe," \u2014 "),XU=n(xqe,"A",{href:!0});var Lxt=s(XU);jTr=r(Lxt,"TFRobertaModel"),Lxt.forEach(t),DTr=r(xqe," (RoBERTa model)"),xqe.forEach(t),GTr=i(D),eM=n(D,"LI",{});var $qe=s(eM);STe=n($qe,"STRONG",{});var yxt=s(STe);OTr=r(yxt,"roformer"),yxt.forEach(t),VTr=r($qe," \u2014 "),zU=n($qe,"A",{href:!0});var xxt=s(zU);XTr=r(xxt,"TFRoFormerModel"),xxt.forEach(t),zTr=r($qe," (RoFormer model)"),$qe.forEach(t),QTr=i(D),oM=n(D,"LI",{});var kqe=s(oM);RTe=n(kqe,"STRONG",{});var $xt=s(RTe);WTr=r($xt,"speech_to_text"),$xt.forEach(t),HTr=r(kqe," \u2014 "),QU=n(kqe,"A",{href:!0});var kxt=s(QU);UTr=r(kxt,"TFSpeech2TextModel"),kxt.forEach(t),JTr=r(kqe," (Speech2Text model)"),kqe.forEach(t),YTr=i(D),rM=n(D,"LI",{});var Sqe=s(rM);PTe=n(Sqe,"STRONG",{});var Sxt=s(PTe);KTr=r(Sxt,"swin"),Sxt.forEach(t),ZTr=r(Sqe," \u2014 "),WU=n(Sqe,"A",{href:!0});var Rxt=s(WU);e7r=r(Rxt,"TFSwinModel"),Rxt.forEach(t),o7r=r(Sqe," (Swin Transformer model)"),Sqe.forEach(t),r7r=i(D),tM=n(D,"LI",{});var Rqe=s(tM);BTe=n(Rqe,"STRONG",{});var Pxt=s(BTe);t7r=r(Pxt,"t5"),Pxt.forEach(t),a7r=r(Rqe," \u2014 "),HU=n(Rqe,"A",{href:!0});var Bxt=s(HU);n7r=r(Bxt,"TFT5Model"),Bxt.forEach(t),s7r=r(Rqe," (T5 model)"),Rqe.forEach(t),l7r=i(D),aM=n(D,"LI",{});var Pqe=s(aM);ITe=n(Pqe,"STRONG",{});var Ixt=s(ITe);i7r=r(Ixt,"tapas"),Ixt.forEach(t),d7r=r(Pqe," \u2014 "),UU=n(Pqe,"A",{href:!0});var Nxt=s(UU);c7r=r(Nxt,"TFTapasModel"),Nxt.forEach(t),f7r=r(Pqe," (TAPAS model)"),Pqe.forEach(t),m7r=i(D),nM=n(D,"LI",{});var Bqe=s(nM);NTe=n(Bqe,"STRONG",{});var qxt=s(NTe);g7r=r(qxt,"transfo-xl"),qxt.forEach(t),h7r=r(Bqe," \u2014 "),JU=n(Bqe,"A",{href:!0});var jxt=s(JU);p7r=r(jxt,"TFTransfoXLModel"),jxt.forEach(t),_7r=r(Bqe," (Transformer-XL model)"),Bqe.forEach(t),u7r=i(D),sM=n(D,"LI",{});var Iqe=s(sM);qTe=n(Iqe,"STRONG",{});var Dxt=s(qTe);b7r=r(Dxt,"vit"),Dxt.forEach(t),v7r=r(Iqe," \u2014 "),YU=n(Iqe,"A",{href:!0});var Gxt=s(YU);F7r=r(Gxt,"TFViTModel"),Gxt.forEach(t),T7r=r(Iqe," (ViT model)"),Iqe.forEach(t),M7r=i(D),lM=n(D,"LI",{});var Nqe=s(lM);jTe=n(Nqe,"STRONG",{});var Oxt=s(jTe);E7r=r(Oxt,"vit_mae"),Oxt.forEach(t),C7r=r(Nqe," \u2014 "),KU=n(Nqe,"A",{href:!0});var Vxt=s(KU);w7r=r(Vxt,"TFViTMAEModel"),Vxt.forEach(t),A7r=r(Nqe," (ViTMAE model)"),Nqe.forEach(t),L7r=i(D),iM=n(D,"LI",{});var qqe=s(iM);DTe=n(qqe,"STRONG",{});var Xxt=s(DTe);y7r=r(Xxt,"wav2vec2"),Xxt.forEach(t),x7r=r(qqe," \u2014 "),ZU=n(qqe,"A",{href:!0});var zxt=s(ZU);$7r=r(zxt,"TFWav2Vec2Model"),zxt.forEach(t),k7r=r(qqe," (Wav2Vec2 model)"),qqe.forEach(t),S7r=i(D),dM=n(D,"LI",{});var jqe=s(dM);GTe=n(jqe,"STRONG",{});var Qxt=s(GTe);R7r=r(Qxt,"xlm"),Qxt.forEach(t),P7r=r(jqe," \u2014 "),eJ=n(jqe,"A",{href:!0});var Wxt=s(eJ);B7r=r(Wxt,"TFXLMModel"),Wxt.forEach(t),I7r=r(jqe," (XLM model)"),jqe.forEach(t),N7r=i(D),cM=n(D,"LI",{});var Dqe=s(cM);OTe=n(Dqe,"STRONG",{});var Hxt=s(OTe);q7r=r(Hxt,"xlm-roberta"),Hxt.forEach(t),j7r=r(Dqe," \u2014 "),oJ=n(Dqe,"A",{href:!0});var Uxt=s(oJ);D7r=r(Uxt,"TFXLMRobertaModel"),Uxt.forEach(t),G7r=r(Dqe," (XLM-RoBERTa model)"),Dqe.forEach(t),O7r=i(D),fM=n(D,"LI",{});var Gqe=s(fM);VTe=n(Gqe,"STRONG",{});var Jxt=s(VTe);V7r=r(Jxt,"xlnet"),Jxt.forEach(t),X7r=r(Gqe," \u2014 "),rJ=n(Gqe,"A",{href:!0});var Yxt=s(rJ);z7r=r(Yxt,"TFXLNetModel"),Yxt.forEach(t),Q7r=r(Gqe," (XLNet model)"),Gqe.forEach(t),D.forEach(t),W7r=i(xl),T(mM.$$.fragment,xl),xl.forEach(t),yl.forEach(t),YXe=i(f),ic=n(f,"H2",{class:!0});var nWe=s(ic);gM=n(nWe,"A",{id:!0,class:!0,href:!0});var Kxt=s(gM);XTe=n(Kxt,"SPAN",{});var Zxt=s(XTe);T(W8.$$.fragment,Zxt),Zxt.forEach(t),Kxt.forEach(t),H7r=i(nWe),zTe=n(nWe,"SPAN",{});var e$t=s(zTe);U7r=r(e$t,"TFAutoModelForPreTraining"),e$t.forEach(t),nWe.forEach(t),KXe=i(f),or=n(f,"DIV",{class:!0});var $l=s(or);T(H8.$$.fragment,$l),J7r=i($l),dc=n($l,"P",{});var Mte=s(dc);Y7r=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),tJ=n(Mte,"A",{href:!0});var o$t=s(tJ);K7r=r(o$t,"from_pretrained()"),o$t.forEach(t),Z7r=r(Mte," class method or the "),aJ=n(Mte,"A",{href:!0});var r$t=s(aJ);e9r=r(r$t,"from_config()"),r$t.forEach(t),o9r=r(Mte,` class
method.`),Mte.forEach(t),r9r=i($l),U8=n($l,"P",{});var sWe=s(U8);t9r=r(sWe,"This class cannot be instantiated directly using "),QTe=n(sWe,"CODE",{});var t$t=s(QTe);a9r=r(t$t,"__init__()"),t$t.forEach(t),n9r=r(sWe," (throws an error)."),sWe.forEach(t),s9r=i($l),Rt=n($l,"DIV",{class:!0});var r6=s(Rt);T(J8.$$.fragment,r6),l9r=i(r6),WTe=n(r6,"P",{});var a$t=s(WTe);i9r=r(a$t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a$t.forEach(t),d9r=i(r6),cc=n(r6,"P",{});var Ete=s(cc);c9r=r(Ete,`Note:
Loading a model from its configuration file does `),HTe=n(Ete,"STRONG",{});var n$t=s(HTe);f9r=r(n$t,"not"),n$t.forEach(t),m9r=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),nJ=n(Ete,"A",{href:!0});var s$t=s(nJ);g9r=r(s$t,"from_pretrained()"),s$t.forEach(t),h9r=r(Ete," to load the model weights."),Ete.forEach(t),p9r=i(r6),T(hM.$$.fragment,r6),r6.forEach(t),_9r=i($l),$r=n($l,"DIV",{class:!0});var kl=s($r);T(Y8.$$.fragment,kl),u9r=i(kl),UTe=n(kl,"P",{});var l$t=s(UTe);b9r=r(l$t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),l$t.forEach(t),v9r=i(kl),ln=n(kl,"P",{});var t6=s(ln);F9r=r(t6,"The model class to instantiate is selected based on the "),JTe=n(t6,"CODE",{});var i$t=s(JTe);T9r=r(i$t,"model_type"),i$t.forEach(t),M9r=r(t6,` property of the config object (either
passed as an argument or loaded from `),YTe=n(t6,"CODE",{});var d$t=s(YTe);E9r=r(d$t,"pretrained_model_name_or_path"),d$t.forEach(t),C9r=r(t6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(t6,"CODE",{});var c$t=s(KTe);w9r=r(c$t,"pretrained_model_name_or_path"),c$t.forEach(t),A9r=r(t6,":"),t6.forEach(t),L9r=i(kl),se=n(kl,"UL",{});var le=s(se);pM=n(le,"LI",{});var Oqe=s(pM);ZTe=n(Oqe,"STRONG",{});var f$t=s(ZTe);y9r=r(f$t,"albert"),f$t.forEach(t),x9r=r(Oqe," \u2014 "),sJ=n(Oqe,"A",{href:!0});var m$t=s(sJ);$9r=r(m$t,"TFAlbertForPreTraining"),m$t.forEach(t),k9r=r(Oqe," (ALBERT model)"),Oqe.forEach(t),S9r=i(le),_M=n(le,"LI",{});var Vqe=s(_M);e7e=n(Vqe,"STRONG",{});var g$t=s(e7e);R9r=r(g$t,"bart"),g$t.forEach(t),P9r=r(Vqe," \u2014 "),lJ=n(Vqe,"A",{href:!0});var h$t=s(lJ);B9r=r(h$t,"TFBartForConditionalGeneration"),h$t.forEach(t),I9r=r(Vqe," (BART model)"),Vqe.forEach(t),N9r=i(le),uM=n(le,"LI",{});var Xqe=s(uM);o7e=n(Xqe,"STRONG",{});var p$t=s(o7e);q9r=r(p$t,"bert"),p$t.forEach(t),j9r=r(Xqe," \u2014 "),iJ=n(Xqe,"A",{href:!0});var _$t=s(iJ);D9r=r(_$t,"TFBertForPreTraining"),_$t.forEach(t),G9r=r(Xqe," (BERT model)"),Xqe.forEach(t),O9r=i(le),bM=n(le,"LI",{});var zqe=s(bM);r7e=n(zqe,"STRONG",{});var u$t=s(r7e);V9r=r(u$t,"camembert"),u$t.forEach(t),X9r=r(zqe," \u2014 "),dJ=n(zqe,"A",{href:!0});var b$t=s(dJ);z9r=r(b$t,"TFCamembertForMaskedLM"),b$t.forEach(t),Q9r=r(zqe," (CamemBERT model)"),zqe.forEach(t),W9r=i(le),vM=n(le,"LI",{});var Qqe=s(vM);t7e=n(Qqe,"STRONG",{});var v$t=s(t7e);H9r=r(v$t,"ctrl"),v$t.forEach(t),U9r=r(Qqe," \u2014 "),cJ=n(Qqe,"A",{href:!0});var F$t=s(cJ);J9r=r(F$t,"TFCTRLLMHeadModel"),F$t.forEach(t),Y9r=r(Qqe," (CTRL model)"),Qqe.forEach(t),K9r=i(le),FM=n(le,"LI",{});var Wqe=s(FM);a7e=n(Wqe,"STRONG",{});var T$t=s(a7e);Z9r=r(T$t,"distilbert"),T$t.forEach(t),eMr=r(Wqe," \u2014 "),fJ=n(Wqe,"A",{href:!0});var M$t=s(fJ);oMr=r(M$t,"TFDistilBertForMaskedLM"),M$t.forEach(t),rMr=r(Wqe," (DistilBERT model)"),Wqe.forEach(t),tMr=i(le),TM=n(le,"LI",{});var Hqe=s(TM);n7e=n(Hqe,"STRONG",{});var E$t=s(n7e);aMr=r(E$t,"electra"),E$t.forEach(t),nMr=r(Hqe," \u2014 "),mJ=n(Hqe,"A",{href:!0});var C$t=s(mJ);sMr=r(C$t,"TFElectraForPreTraining"),C$t.forEach(t),lMr=r(Hqe," (ELECTRA model)"),Hqe.forEach(t),iMr=i(le),MM=n(le,"LI",{});var Uqe=s(MM);s7e=n(Uqe,"STRONG",{});var w$t=s(s7e);dMr=r(w$t,"flaubert"),w$t.forEach(t),cMr=r(Uqe," \u2014 "),gJ=n(Uqe,"A",{href:!0});var A$t=s(gJ);fMr=r(A$t,"TFFlaubertWithLMHeadModel"),A$t.forEach(t),mMr=r(Uqe," (FlauBERT model)"),Uqe.forEach(t),gMr=i(le),EM=n(le,"LI",{});var Jqe=s(EM);l7e=n(Jqe,"STRONG",{});var L$t=s(l7e);hMr=r(L$t,"funnel"),L$t.forEach(t),pMr=r(Jqe," \u2014 "),hJ=n(Jqe,"A",{href:!0});var y$t=s(hJ);_Mr=r(y$t,"TFFunnelForPreTraining"),y$t.forEach(t),uMr=r(Jqe," (Funnel Transformer model)"),Jqe.forEach(t),bMr=i(le),CM=n(le,"LI",{});var Yqe=s(CM);i7e=n(Yqe,"STRONG",{});var x$t=s(i7e);vMr=r(x$t,"gpt2"),x$t.forEach(t),FMr=r(Yqe," \u2014 "),pJ=n(Yqe,"A",{href:!0});var $$t=s(pJ);TMr=r($$t,"TFGPT2LMHeadModel"),$$t.forEach(t),MMr=r(Yqe," (OpenAI GPT-2 model)"),Yqe.forEach(t),EMr=i(le),wM=n(le,"LI",{});var Kqe=s(wM);d7e=n(Kqe,"STRONG",{});var k$t=s(d7e);CMr=r(k$t,"layoutlm"),k$t.forEach(t),wMr=r(Kqe," \u2014 "),_J=n(Kqe,"A",{href:!0});var S$t=s(_J);AMr=r(S$t,"TFLayoutLMForMaskedLM"),S$t.forEach(t),LMr=r(Kqe," (LayoutLM model)"),Kqe.forEach(t),yMr=i(le),AM=n(le,"LI",{});var Zqe=s(AM);c7e=n(Zqe,"STRONG",{});var R$t=s(c7e);xMr=r(R$t,"lxmert"),R$t.forEach(t),$Mr=r(Zqe," \u2014 "),uJ=n(Zqe,"A",{href:!0});var P$t=s(uJ);kMr=r(P$t,"TFLxmertForPreTraining"),P$t.forEach(t),SMr=r(Zqe," (LXMERT model)"),Zqe.forEach(t),RMr=i(le),LM=n(le,"LI",{});var eje=s(LM);f7e=n(eje,"STRONG",{});var B$t=s(f7e);PMr=r(B$t,"mobilebert"),B$t.forEach(t),BMr=r(eje," \u2014 "),bJ=n(eje,"A",{href:!0});var I$t=s(bJ);IMr=r(I$t,"TFMobileBertForPreTraining"),I$t.forEach(t),NMr=r(eje," (MobileBERT model)"),eje.forEach(t),qMr=i(le),yM=n(le,"LI",{});var oje=s(yM);m7e=n(oje,"STRONG",{});var N$t=s(m7e);jMr=r(N$t,"mpnet"),N$t.forEach(t),DMr=r(oje," \u2014 "),vJ=n(oje,"A",{href:!0});var q$t=s(vJ);GMr=r(q$t,"TFMPNetForMaskedLM"),q$t.forEach(t),OMr=r(oje," (MPNet model)"),oje.forEach(t),VMr=i(le),xM=n(le,"LI",{});var rje=s(xM);g7e=n(rje,"STRONG",{});var j$t=s(g7e);XMr=r(j$t,"openai-gpt"),j$t.forEach(t),zMr=r(rje," \u2014 "),FJ=n(rje,"A",{href:!0});var D$t=s(FJ);QMr=r(D$t,"TFOpenAIGPTLMHeadModel"),D$t.forEach(t),WMr=r(rje," (OpenAI GPT model)"),rje.forEach(t),HMr=i(le),$M=n(le,"LI",{});var tje=s($M);h7e=n(tje,"STRONG",{});var G$t=s(h7e);UMr=r(G$t,"roberta"),G$t.forEach(t),JMr=r(tje," \u2014 "),TJ=n(tje,"A",{href:!0});var O$t=s(TJ);YMr=r(O$t,"TFRobertaForMaskedLM"),O$t.forEach(t),KMr=r(tje," (RoBERTa model)"),tje.forEach(t),ZMr=i(le),kM=n(le,"LI",{});var aje=s(kM);p7e=n(aje,"STRONG",{});var V$t=s(p7e);eEr=r(V$t,"t5"),V$t.forEach(t),oEr=r(aje," \u2014 "),MJ=n(aje,"A",{href:!0});var X$t=s(MJ);rEr=r(X$t,"TFT5ForConditionalGeneration"),X$t.forEach(t),tEr=r(aje," (T5 model)"),aje.forEach(t),aEr=i(le),SM=n(le,"LI",{});var nje=s(SM);_7e=n(nje,"STRONG",{});var z$t=s(_7e);nEr=r(z$t,"tapas"),z$t.forEach(t),sEr=r(nje," \u2014 "),EJ=n(nje,"A",{href:!0});var Q$t=s(EJ);lEr=r(Q$t,"TFTapasForMaskedLM"),Q$t.forEach(t),iEr=r(nje," (TAPAS model)"),nje.forEach(t),dEr=i(le),RM=n(le,"LI",{});var sje=s(RM);u7e=n(sje,"STRONG",{});var W$t=s(u7e);cEr=r(W$t,"transfo-xl"),W$t.forEach(t),fEr=r(sje," \u2014 "),CJ=n(sje,"A",{href:!0});var H$t=s(CJ);mEr=r(H$t,"TFTransfoXLLMHeadModel"),H$t.forEach(t),gEr=r(sje," (Transformer-XL model)"),sje.forEach(t),hEr=i(le),PM=n(le,"LI",{});var lje=s(PM);b7e=n(lje,"STRONG",{});var U$t=s(b7e);pEr=r(U$t,"vit_mae"),U$t.forEach(t),_Er=r(lje," \u2014 "),wJ=n(lje,"A",{href:!0});var J$t=s(wJ);uEr=r(J$t,"TFViTMAEForPreTraining"),J$t.forEach(t),bEr=r(lje," (ViTMAE model)"),lje.forEach(t),vEr=i(le),BM=n(le,"LI",{});var ije=s(BM);v7e=n(ije,"STRONG",{});var Y$t=s(v7e);FEr=r(Y$t,"xlm"),Y$t.forEach(t),TEr=r(ije," \u2014 "),AJ=n(ije,"A",{href:!0});var K$t=s(AJ);MEr=r(K$t,"TFXLMWithLMHeadModel"),K$t.forEach(t),EEr=r(ije," (XLM model)"),ije.forEach(t),CEr=i(le),IM=n(le,"LI",{});var dje=s(IM);F7e=n(dje,"STRONG",{});var Z$t=s(F7e);wEr=r(Z$t,"xlm-roberta"),Z$t.forEach(t),AEr=r(dje," \u2014 "),LJ=n(dje,"A",{href:!0});var ekt=s(LJ);LEr=r(ekt,"TFXLMRobertaForMaskedLM"),ekt.forEach(t),yEr=r(dje," (XLM-RoBERTa model)"),dje.forEach(t),xEr=i(le),NM=n(le,"LI",{});var cje=s(NM);T7e=n(cje,"STRONG",{});var okt=s(T7e);$Er=r(okt,"xlnet"),okt.forEach(t),kEr=r(cje," \u2014 "),yJ=n(cje,"A",{href:!0});var rkt=s(yJ);SEr=r(rkt,"TFXLNetLMHeadModel"),rkt.forEach(t),REr=r(cje," (XLNet model)"),cje.forEach(t),le.forEach(t),PEr=i(kl),T(qM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),ZXe=i(f),fc=n(f,"H2",{class:!0});var lWe=s(fc);jM=n(lWe,"A",{id:!0,class:!0,href:!0});var tkt=s(jM);M7e=n(tkt,"SPAN",{});var akt=s(M7e);T(K8.$$.fragment,akt),akt.forEach(t),tkt.forEach(t),BEr=i(lWe),E7e=n(lWe,"SPAN",{});var nkt=s(E7e);IEr=r(nkt,"TFAutoModelForCausalLM"),nkt.forEach(t),lWe.forEach(t),eze=i(f),rr=n(f,"DIV",{class:!0});var Sl=s(rr);T(Z8.$$.fragment,Sl),NEr=i(Sl),mc=n(Sl,"P",{});var Cte=s(mc);qEr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),xJ=n(Cte,"A",{href:!0});var skt=s(xJ);jEr=r(skt,"from_pretrained()"),skt.forEach(t),DEr=r(Cte," class method or the "),$J=n(Cte,"A",{href:!0});var lkt=s($J);GEr=r(lkt,"from_config()"),lkt.forEach(t),OEr=r(Cte,` class
method.`),Cte.forEach(t),VEr=i(Sl),ex=n(Sl,"P",{});var iWe=s(ex);XEr=r(iWe,"This class cannot be instantiated directly using "),C7e=n(iWe,"CODE",{});var ikt=s(C7e);zEr=r(ikt,"__init__()"),ikt.forEach(t),QEr=r(iWe," (throws an error)."),iWe.forEach(t),WEr=i(Sl),Pt=n(Sl,"DIV",{class:!0});var a6=s(Pt);T(ox.$$.fragment,a6),HEr=i(a6),w7e=n(a6,"P",{});var dkt=s(w7e);UEr=r(dkt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),dkt.forEach(t),JEr=i(a6),gc=n(a6,"P",{});var wte=s(gc);YEr=r(wte,`Note:
Loading a model from its configuration file does `),A7e=n(wte,"STRONG",{});var ckt=s(A7e);KEr=r(ckt,"not"),ckt.forEach(t),ZEr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kJ=n(wte,"A",{href:!0});var fkt=s(kJ);eCr=r(fkt,"from_pretrained()"),fkt.forEach(t),oCr=r(wte," to load the model weights."),wte.forEach(t),rCr=i(a6),T(DM.$$.fragment,a6),a6.forEach(t),tCr=i(Sl),kr=n(Sl,"DIV",{class:!0});var Rl=s(kr);T(rx.$$.fragment,Rl),aCr=i(Rl),L7e=n(Rl,"P",{});var mkt=s(L7e);nCr=r(mkt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mkt.forEach(t),sCr=i(Rl),dn=n(Rl,"P",{});var n6=s(dn);lCr=r(n6,"The model class to instantiate is selected based on the "),y7e=n(n6,"CODE",{});var gkt=s(y7e);iCr=r(gkt,"model_type"),gkt.forEach(t),dCr=r(n6,` property of the config object (either
passed as an argument or loaded from `),x7e=n(n6,"CODE",{});var hkt=s(x7e);cCr=r(hkt,"pretrained_model_name_or_path"),hkt.forEach(t),fCr=r(n6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$7e=n(n6,"CODE",{});var pkt=s($7e);mCr=r(pkt,"pretrained_model_name_or_path"),pkt.forEach(t),gCr=r(n6,":"),n6.forEach(t),hCr=i(Rl),Me=n(Rl,"UL",{});var Ce=s(Me);GM=n(Ce,"LI",{});var fje=s(GM);k7e=n(fje,"STRONG",{});var _kt=s(k7e);pCr=r(_kt,"bert"),_kt.forEach(t),_Cr=r(fje," \u2014 "),SJ=n(fje,"A",{href:!0});var ukt=s(SJ);uCr=r(ukt,"TFBertLMHeadModel"),ukt.forEach(t),bCr=r(fje," (BERT model)"),fje.forEach(t),vCr=i(Ce),OM=n(Ce,"LI",{});var mje=s(OM);S7e=n(mje,"STRONG",{});var bkt=s(S7e);FCr=r(bkt,"camembert"),bkt.forEach(t),TCr=r(mje," \u2014 "),RJ=n(mje,"A",{href:!0});var vkt=s(RJ);MCr=r(vkt,"TFCamembertForCausalLM"),vkt.forEach(t),ECr=r(mje," (CamemBERT model)"),mje.forEach(t),CCr=i(Ce),VM=n(Ce,"LI",{});var gje=s(VM);R7e=n(gje,"STRONG",{});var Fkt=s(R7e);wCr=r(Fkt,"ctrl"),Fkt.forEach(t),ACr=r(gje," \u2014 "),PJ=n(gje,"A",{href:!0});var Tkt=s(PJ);LCr=r(Tkt,"TFCTRLLMHeadModel"),Tkt.forEach(t),yCr=r(gje," (CTRL model)"),gje.forEach(t),xCr=i(Ce),XM=n(Ce,"LI",{});var hje=s(XM);P7e=n(hje,"STRONG",{});var Mkt=s(P7e);$Cr=r(Mkt,"gpt2"),Mkt.forEach(t),kCr=r(hje," \u2014 "),BJ=n(hje,"A",{href:!0});var Ekt=s(BJ);SCr=r(Ekt,"TFGPT2LMHeadModel"),Ekt.forEach(t),RCr=r(hje," (OpenAI GPT-2 model)"),hje.forEach(t),PCr=i(Ce),zM=n(Ce,"LI",{});var pje=s(zM);B7e=n(pje,"STRONG",{});var Ckt=s(B7e);BCr=r(Ckt,"gptj"),Ckt.forEach(t),ICr=r(pje," \u2014 "),IJ=n(pje,"A",{href:!0});var wkt=s(IJ);NCr=r(wkt,"TFGPTJForCausalLM"),wkt.forEach(t),qCr=r(pje," (GPT-J model)"),pje.forEach(t),jCr=i(Ce),QM=n(Ce,"LI",{});var _je=s(QM);I7e=n(_je,"STRONG",{});var Akt=s(I7e);DCr=r(Akt,"openai-gpt"),Akt.forEach(t),GCr=r(_je," \u2014 "),NJ=n(_je,"A",{href:!0});var Lkt=s(NJ);OCr=r(Lkt,"TFOpenAIGPTLMHeadModel"),Lkt.forEach(t),VCr=r(_je," (OpenAI GPT model)"),_je.forEach(t),XCr=i(Ce),WM=n(Ce,"LI",{});var uje=s(WM);N7e=n(uje,"STRONG",{});var ykt=s(N7e);zCr=r(ykt,"opt"),ykt.forEach(t),QCr=r(uje," \u2014 "),qJ=n(uje,"A",{href:!0});var xkt=s(qJ);WCr=r(xkt,"TFOPTForCausalLM"),xkt.forEach(t),HCr=r(uje," (OPT model)"),uje.forEach(t),UCr=i(Ce),HM=n(Ce,"LI",{});var bje=s(HM);q7e=n(bje,"STRONG",{});var $kt=s(q7e);JCr=r($kt,"rembert"),$kt.forEach(t),YCr=r(bje," \u2014 "),jJ=n(bje,"A",{href:!0});var kkt=s(jJ);KCr=r(kkt,"TFRemBertForCausalLM"),kkt.forEach(t),ZCr=r(bje," (RemBERT model)"),bje.forEach(t),e3r=i(Ce),UM=n(Ce,"LI",{});var vje=s(UM);j7e=n(vje,"STRONG",{});var Skt=s(j7e);o3r=r(Skt,"roberta"),Skt.forEach(t),r3r=r(vje," \u2014 "),DJ=n(vje,"A",{href:!0});var Rkt=s(DJ);t3r=r(Rkt,"TFRobertaForCausalLM"),Rkt.forEach(t),a3r=r(vje," (RoBERTa model)"),vje.forEach(t),n3r=i(Ce),JM=n(Ce,"LI",{});var Fje=s(JM);D7e=n(Fje,"STRONG",{});var Pkt=s(D7e);s3r=r(Pkt,"roformer"),Pkt.forEach(t),l3r=r(Fje," \u2014 "),GJ=n(Fje,"A",{href:!0});var Bkt=s(GJ);i3r=r(Bkt,"TFRoFormerForCausalLM"),Bkt.forEach(t),d3r=r(Fje," (RoFormer model)"),Fje.forEach(t),c3r=i(Ce),YM=n(Ce,"LI",{});var Tje=s(YM);G7e=n(Tje,"STRONG",{});var Ikt=s(G7e);f3r=r(Ikt,"transfo-xl"),Ikt.forEach(t),m3r=r(Tje," \u2014 "),OJ=n(Tje,"A",{href:!0});var Nkt=s(OJ);g3r=r(Nkt,"TFTransfoXLLMHeadModel"),Nkt.forEach(t),h3r=r(Tje," (Transformer-XL model)"),Tje.forEach(t),p3r=i(Ce),KM=n(Ce,"LI",{});var Mje=s(KM);O7e=n(Mje,"STRONG",{});var qkt=s(O7e);_3r=r(qkt,"xlm"),qkt.forEach(t),u3r=r(Mje," \u2014 "),VJ=n(Mje,"A",{href:!0});var jkt=s(VJ);b3r=r(jkt,"TFXLMWithLMHeadModel"),jkt.forEach(t),v3r=r(Mje," (XLM model)"),Mje.forEach(t),F3r=i(Ce),ZM=n(Ce,"LI",{});var Eje=s(ZM);V7e=n(Eje,"STRONG",{});var Dkt=s(V7e);T3r=r(Dkt,"xlnet"),Dkt.forEach(t),M3r=r(Eje," \u2014 "),XJ=n(Eje,"A",{href:!0});var Gkt=s(XJ);E3r=r(Gkt,"TFXLNetLMHeadModel"),Gkt.forEach(t),C3r=r(Eje," (XLNet model)"),Eje.forEach(t),Ce.forEach(t),w3r=i(Rl),T(eE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),oze=i(f),hc=n(f,"H2",{class:!0});var dWe=s(hc);oE=n(dWe,"A",{id:!0,class:!0,href:!0});var Okt=s(oE);X7e=n(Okt,"SPAN",{});var Vkt=s(X7e);T(tx.$$.fragment,Vkt),Vkt.forEach(t),Okt.forEach(t),A3r=i(dWe),z7e=n(dWe,"SPAN",{});var Xkt=s(z7e);L3r=r(Xkt,"TFAutoModelForImageClassification"),Xkt.forEach(t),dWe.forEach(t),rze=i(f),tr=n(f,"DIV",{class:!0});var Pl=s(tr);T(ax.$$.fragment,Pl),y3r=i(Pl),pc=n(Pl,"P",{});var Ate=s(pc);x3r=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),zJ=n(Ate,"A",{href:!0});var zkt=s(zJ);$3r=r(zkt,"from_pretrained()"),zkt.forEach(t),k3r=r(Ate," class method or the "),QJ=n(Ate,"A",{href:!0});var Qkt=s(QJ);S3r=r(Qkt,"from_config()"),Qkt.forEach(t),R3r=r(Ate,` class
method.`),Ate.forEach(t),P3r=i(Pl),nx=n(Pl,"P",{});var cWe=s(nx);B3r=r(cWe,"This class cannot be instantiated directly using "),Q7e=n(cWe,"CODE",{});var Wkt=s(Q7e);I3r=r(Wkt,"__init__()"),Wkt.forEach(t),N3r=r(cWe," (throws an error)."),cWe.forEach(t),q3r=i(Pl),Bt=n(Pl,"DIV",{class:!0});var s6=s(Bt);T(sx.$$.fragment,s6),j3r=i(s6),W7e=n(s6,"P",{});var Hkt=s(W7e);D3r=r(Hkt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hkt.forEach(t),G3r=i(s6),_c=n(s6,"P",{});var Lte=s(_c);O3r=r(Lte,`Note:
Loading a model from its configuration file does `),H7e=n(Lte,"STRONG",{});var Ukt=s(H7e);V3r=r(Ukt,"not"),Ukt.forEach(t),X3r=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),WJ=n(Lte,"A",{href:!0});var Jkt=s(WJ);z3r=r(Jkt,"from_pretrained()"),Jkt.forEach(t),Q3r=r(Lte," to load the model weights."),Lte.forEach(t),W3r=i(s6),T(rE.$$.fragment,s6),s6.forEach(t),H3r=i(Pl),Sr=n(Pl,"DIV",{class:!0});var Bl=s(Sr);T(lx.$$.fragment,Bl),U3r=i(Bl),U7e=n(Bl,"P",{});var Ykt=s(U7e);J3r=r(Ykt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ykt.forEach(t),Y3r=i(Bl),cn=n(Bl,"P",{});var l6=s(cn);K3r=r(l6,"The model class to instantiate is selected based on the "),J7e=n(l6,"CODE",{});var Kkt=s(J7e);Z3r=r(Kkt,"model_type"),Kkt.forEach(t),e5r=r(l6,` property of the config object (either
passed as an argument or loaded from `),Y7e=n(l6,"CODE",{});var Zkt=s(Y7e);o5r=r(Zkt,"pretrained_model_name_or_path"),Zkt.forEach(t),r5r=r(l6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K7e=n(l6,"CODE",{});var eSt=s(K7e);t5r=r(eSt,"pretrained_model_name_or_path"),eSt.forEach(t),a5r=r(l6,":"),l6.forEach(t),n5r=i(Bl),ar=n(Bl,"UL",{});var ka=s(ar);tE=n(ka,"LI",{});var Cje=s(tE);Z7e=n(Cje,"STRONG",{});var oSt=s(Z7e);s5r=r(oSt,"convnext"),oSt.forEach(t),l5r=r(Cje," \u2014 "),HJ=n(Cje,"A",{href:!0});var rSt=s(HJ);i5r=r(rSt,"TFConvNextForImageClassification"),rSt.forEach(t),d5r=r(Cje," (ConvNeXT model)"),Cje.forEach(t),c5r=i(ka),aE=n(ka,"LI",{});var wje=s(aE);e9e=n(wje,"STRONG",{});var tSt=s(e9e);f5r=r(tSt,"data2vec-vision"),tSt.forEach(t),m5r=r(wje," \u2014 "),UJ=n(wje,"A",{href:!0});var aSt=s(UJ);g5r=r(aSt,"TFData2VecVisionForImageClassification"),aSt.forEach(t),h5r=r(wje," (Data2VecVision model)"),wje.forEach(t),p5r=i(ka),nE=n(ka,"LI",{});var Aje=s(nE);o9e=n(Aje,"STRONG",{});var nSt=s(o9e);_5r=r(nSt,"regnet"),nSt.forEach(t),u5r=r(Aje," \u2014 "),JJ=n(Aje,"A",{href:!0});var sSt=s(JJ);b5r=r(sSt,"TFRegNetForImageClassification"),sSt.forEach(t),v5r=r(Aje," (RegNet model)"),Aje.forEach(t),F5r=i(ka),sE=n(ka,"LI",{});var Lje=s(sE);r9e=n(Lje,"STRONG",{});var lSt=s(r9e);T5r=r(lSt,"resnet"),lSt.forEach(t),M5r=r(Lje," \u2014 "),YJ=n(Lje,"A",{href:!0});var iSt=s(YJ);E5r=r(iSt,"TFResNetForImageClassification"),iSt.forEach(t),C5r=r(Lje," (ResNet model)"),Lje.forEach(t),w5r=i(ka),lE=n(ka,"LI",{});var yje=s(lE);t9e=n(yje,"STRONG",{});var dSt=s(t9e);A5r=r(dSt,"swin"),dSt.forEach(t),L5r=r(yje," \u2014 "),KJ=n(yje,"A",{href:!0});var cSt=s(KJ);y5r=r(cSt,"TFSwinForImageClassification"),cSt.forEach(t),x5r=r(yje," (Swin Transformer model)"),yje.forEach(t),$5r=i(ka),iE=n(ka,"LI",{});var xje=s(iE);a9e=n(xje,"STRONG",{});var fSt=s(a9e);k5r=r(fSt,"vit"),fSt.forEach(t),S5r=r(xje," \u2014 "),ZJ=n(xje,"A",{href:!0});var mSt=s(ZJ);R5r=r(mSt,"TFViTForImageClassification"),mSt.forEach(t),P5r=r(xje," (ViT model)"),xje.forEach(t),ka.forEach(t),B5r=i(Bl),T(dE.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),tze=i(f),uc=n(f,"H2",{class:!0});var fWe=s(uc);cE=n(fWe,"A",{id:!0,class:!0,href:!0});var gSt=s(cE);n9e=n(gSt,"SPAN",{});var hSt=s(n9e);T(ix.$$.fragment,hSt),hSt.forEach(t),gSt.forEach(t),I5r=i(fWe),s9e=n(fWe,"SPAN",{});var pSt=s(s9e);N5r=r(pSt,"TFAutoModelForMaskedLM"),pSt.forEach(t),fWe.forEach(t),aze=i(f),nr=n(f,"DIV",{class:!0});var Il=s(nr);T(dx.$$.fragment,Il),q5r=i(Il),bc=n(Il,"P",{});var yte=s(bc);j5r=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),eY=n(yte,"A",{href:!0});var _St=s(eY);D5r=r(_St,"from_pretrained()"),_St.forEach(t),G5r=r(yte," class method or the "),oY=n(yte,"A",{href:!0});var uSt=s(oY);O5r=r(uSt,"from_config()"),uSt.forEach(t),V5r=r(yte,` class
method.`),yte.forEach(t),X5r=i(Il),cx=n(Il,"P",{});var mWe=s(cx);z5r=r(mWe,"This class cannot be instantiated directly using "),l9e=n(mWe,"CODE",{});var bSt=s(l9e);Q5r=r(bSt,"__init__()"),bSt.forEach(t),W5r=r(mWe," (throws an error)."),mWe.forEach(t),H5r=i(Il),It=n(Il,"DIV",{class:!0});var i6=s(It);T(fx.$$.fragment,i6),U5r=i(i6),i9e=n(i6,"P",{});var vSt=s(i9e);J5r=r(vSt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),vSt.forEach(t),Y5r=i(i6),vc=n(i6,"P",{});var xte=s(vc);K5r=r(xte,`Note:
Loading a model from its configuration file does `),d9e=n(xte,"STRONG",{});var FSt=s(d9e);Z5r=r(FSt,"not"),FSt.forEach(t),e0r=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),rY=n(xte,"A",{href:!0});var TSt=s(rY);o0r=r(TSt,"from_pretrained()"),TSt.forEach(t),r0r=r(xte," to load the model weights."),xte.forEach(t),t0r=i(i6),T(fE.$$.fragment,i6),i6.forEach(t),a0r=i(Il),Rr=n(Il,"DIV",{class:!0});var Nl=s(Rr);T(mx.$$.fragment,Nl),n0r=i(Nl),c9e=n(Nl,"P",{});var MSt=s(c9e);s0r=r(MSt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),MSt.forEach(t),l0r=i(Nl),fn=n(Nl,"P",{});var d6=s(fn);i0r=r(d6,"The model class to instantiate is selected based on the "),f9e=n(d6,"CODE",{});var ESt=s(f9e);d0r=r(ESt,"model_type"),ESt.forEach(t),c0r=r(d6,` property of the config object (either
passed as an argument or loaded from `),m9e=n(d6,"CODE",{});var CSt=s(m9e);f0r=r(CSt,"pretrained_model_name_or_path"),CSt.forEach(t),m0r=r(d6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g9e=n(d6,"CODE",{});var wSt=s(g9e);g0r=r(wSt,"pretrained_model_name_or_path"),wSt.forEach(t),h0r=r(d6,":"),d6.forEach(t),p0r=i(Nl),ie=n(Nl,"UL",{});var fe=s(ie);mE=n(fe,"LI",{});var $je=s(mE);h9e=n($je,"STRONG",{});var ASt=s(h9e);_0r=r(ASt,"albert"),ASt.forEach(t),u0r=r($je," \u2014 "),tY=n($je,"A",{href:!0});var LSt=s(tY);b0r=r(LSt,"TFAlbertForMaskedLM"),LSt.forEach(t),v0r=r($je," (ALBERT model)"),$je.forEach(t),F0r=i(fe),gE=n(fe,"LI",{});var kje=s(gE);p9e=n(kje,"STRONG",{});var ySt=s(p9e);T0r=r(ySt,"bert"),ySt.forEach(t),M0r=r(kje," \u2014 "),aY=n(kje,"A",{href:!0});var xSt=s(aY);E0r=r(xSt,"TFBertForMaskedLM"),xSt.forEach(t),C0r=r(kje," (BERT model)"),kje.forEach(t),w0r=i(fe),hE=n(fe,"LI",{});var Sje=s(hE);_9e=n(Sje,"STRONG",{});var $St=s(_9e);A0r=r($St,"camembert"),$St.forEach(t),L0r=r(Sje," \u2014 "),nY=n(Sje,"A",{href:!0});var kSt=s(nY);y0r=r(kSt,"TFCamembertForMaskedLM"),kSt.forEach(t),x0r=r(Sje," (CamemBERT model)"),Sje.forEach(t),$0r=i(fe),pE=n(fe,"LI",{});var Rje=s(pE);u9e=n(Rje,"STRONG",{});var SSt=s(u9e);k0r=r(SSt,"convbert"),SSt.forEach(t),S0r=r(Rje," \u2014 "),sY=n(Rje,"A",{href:!0});var RSt=s(sY);R0r=r(RSt,"TFConvBertForMaskedLM"),RSt.forEach(t),P0r=r(Rje," (ConvBERT model)"),Rje.forEach(t),B0r=i(fe),_E=n(fe,"LI",{});var Pje=s(_E);b9e=n(Pje,"STRONG",{});var PSt=s(b9e);I0r=r(PSt,"deberta"),PSt.forEach(t),N0r=r(Pje," \u2014 "),lY=n(Pje,"A",{href:!0});var BSt=s(lY);q0r=r(BSt,"TFDebertaForMaskedLM"),BSt.forEach(t),j0r=r(Pje," (DeBERTa model)"),Pje.forEach(t),D0r=i(fe),uE=n(fe,"LI",{});var Bje=s(uE);v9e=n(Bje,"STRONG",{});var ISt=s(v9e);G0r=r(ISt,"deberta-v2"),ISt.forEach(t),O0r=r(Bje," \u2014 "),iY=n(Bje,"A",{href:!0});var NSt=s(iY);V0r=r(NSt,"TFDebertaV2ForMaskedLM"),NSt.forEach(t),X0r=r(Bje," (DeBERTa-v2 model)"),Bje.forEach(t),z0r=i(fe),bE=n(fe,"LI",{});var Ije=s(bE);F9e=n(Ije,"STRONG",{});var qSt=s(F9e);Q0r=r(qSt,"distilbert"),qSt.forEach(t),W0r=r(Ije," \u2014 "),dY=n(Ije,"A",{href:!0});var jSt=s(dY);H0r=r(jSt,"TFDistilBertForMaskedLM"),jSt.forEach(t),U0r=r(Ije," (DistilBERT model)"),Ije.forEach(t),J0r=i(fe),vE=n(fe,"LI",{});var Nje=s(vE);T9e=n(Nje,"STRONG",{});var DSt=s(T9e);Y0r=r(DSt,"electra"),DSt.forEach(t),K0r=r(Nje," \u2014 "),cY=n(Nje,"A",{href:!0});var GSt=s(cY);Z0r=r(GSt,"TFElectraForMaskedLM"),GSt.forEach(t),ewr=r(Nje," (ELECTRA model)"),Nje.forEach(t),owr=i(fe),FE=n(fe,"LI",{});var qje=s(FE);M9e=n(qje,"STRONG",{});var OSt=s(M9e);rwr=r(OSt,"flaubert"),OSt.forEach(t),twr=r(qje," \u2014 "),fY=n(qje,"A",{href:!0});var VSt=s(fY);awr=r(VSt,"TFFlaubertWithLMHeadModel"),VSt.forEach(t),nwr=r(qje," (FlauBERT model)"),qje.forEach(t),swr=i(fe),TE=n(fe,"LI",{});var jje=s(TE);E9e=n(jje,"STRONG",{});var XSt=s(E9e);lwr=r(XSt,"funnel"),XSt.forEach(t),iwr=r(jje," \u2014 "),mY=n(jje,"A",{href:!0});var zSt=s(mY);dwr=r(zSt,"TFFunnelForMaskedLM"),zSt.forEach(t),cwr=r(jje," (Funnel Transformer model)"),jje.forEach(t),fwr=i(fe),ME=n(fe,"LI",{});var Dje=s(ME);C9e=n(Dje,"STRONG",{});var QSt=s(C9e);mwr=r(QSt,"layoutlm"),QSt.forEach(t),gwr=r(Dje," \u2014 "),gY=n(Dje,"A",{href:!0});var WSt=s(gY);hwr=r(WSt,"TFLayoutLMForMaskedLM"),WSt.forEach(t),pwr=r(Dje," (LayoutLM model)"),Dje.forEach(t),_wr=i(fe),EE=n(fe,"LI",{});var Gje=s(EE);w9e=n(Gje,"STRONG",{});var HSt=s(w9e);uwr=r(HSt,"longformer"),HSt.forEach(t),bwr=r(Gje," \u2014 "),hY=n(Gje,"A",{href:!0});var USt=s(hY);vwr=r(USt,"TFLongformerForMaskedLM"),USt.forEach(t),Fwr=r(Gje," (Longformer model)"),Gje.forEach(t),Twr=i(fe),CE=n(fe,"LI",{});var Oje=s(CE);A9e=n(Oje,"STRONG",{});var JSt=s(A9e);Mwr=r(JSt,"mobilebert"),JSt.forEach(t),Ewr=r(Oje," \u2014 "),pY=n(Oje,"A",{href:!0});var YSt=s(pY);Cwr=r(YSt,"TFMobileBertForMaskedLM"),YSt.forEach(t),wwr=r(Oje," (MobileBERT model)"),Oje.forEach(t),Awr=i(fe),wE=n(fe,"LI",{});var Vje=s(wE);L9e=n(Vje,"STRONG",{});var KSt=s(L9e);Lwr=r(KSt,"mpnet"),KSt.forEach(t),ywr=r(Vje," \u2014 "),_Y=n(Vje,"A",{href:!0});var ZSt=s(_Y);xwr=r(ZSt,"TFMPNetForMaskedLM"),ZSt.forEach(t),$wr=r(Vje," (MPNet model)"),Vje.forEach(t),kwr=i(fe),AE=n(fe,"LI",{});var Xje=s(AE);y9e=n(Xje,"STRONG",{});var eRt=s(y9e);Swr=r(eRt,"rembert"),eRt.forEach(t),Rwr=r(Xje," \u2014 "),uY=n(Xje,"A",{href:!0});var oRt=s(uY);Pwr=r(oRt,"TFRemBertForMaskedLM"),oRt.forEach(t),Bwr=r(Xje," (RemBERT model)"),Xje.forEach(t),Iwr=i(fe),LE=n(fe,"LI",{});var zje=s(LE);x9e=n(zje,"STRONG",{});var rRt=s(x9e);Nwr=r(rRt,"roberta"),rRt.forEach(t),qwr=r(zje," \u2014 "),bY=n(zje,"A",{href:!0});var tRt=s(bY);jwr=r(tRt,"TFRobertaForMaskedLM"),tRt.forEach(t),Dwr=r(zje," (RoBERTa model)"),zje.forEach(t),Gwr=i(fe),yE=n(fe,"LI",{});var Qje=s(yE);$9e=n(Qje,"STRONG",{});var aRt=s($9e);Owr=r(aRt,"roformer"),aRt.forEach(t),Vwr=r(Qje," \u2014 "),vY=n(Qje,"A",{href:!0});var nRt=s(vY);Xwr=r(nRt,"TFRoFormerForMaskedLM"),nRt.forEach(t),zwr=r(Qje," (RoFormer model)"),Qje.forEach(t),Qwr=i(fe),xE=n(fe,"LI",{});var Wje=s(xE);k9e=n(Wje,"STRONG",{});var sRt=s(k9e);Wwr=r(sRt,"tapas"),sRt.forEach(t),Hwr=r(Wje," \u2014 "),FY=n(Wje,"A",{href:!0});var lRt=s(FY);Uwr=r(lRt,"TFTapasForMaskedLM"),lRt.forEach(t),Jwr=r(Wje," (TAPAS model)"),Wje.forEach(t),Ywr=i(fe),$E=n(fe,"LI",{});var Hje=s($E);S9e=n(Hje,"STRONG",{});var iRt=s(S9e);Kwr=r(iRt,"xlm"),iRt.forEach(t),Zwr=r(Hje," \u2014 "),TY=n(Hje,"A",{href:!0});var dRt=s(TY);eAr=r(dRt,"TFXLMWithLMHeadModel"),dRt.forEach(t),oAr=r(Hje," (XLM model)"),Hje.forEach(t),rAr=i(fe),kE=n(fe,"LI",{});var Uje=s(kE);R9e=n(Uje,"STRONG",{});var cRt=s(R9e);tAr=r(cRt,"xlm-roberta"),cRt.forEach(t),aAr=r(Uje," \u2014 "),MY=n(Uje,"A",{href:!0});var fRt=s(MY);nAr=r(fRt,"TFXLMRobertaForMaskedLM"),fRt.forEach(t),sAr=r(Uje," (XLM-RoBERTa model)"),Uje.forEach(t),fe.forEach(t),lAr=i(Nl),T(SE.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),nze=i(f),Fc=n(f,"H2",{class:!0});var gWe=s(Fc);RE=n(gWe,"A",{id:!0,class:!0,href:!0});var mRt=s(RE);P9e=n(mRt,"SPAN",{});var gRt=s(P9e);T(gx.$$.fragment,gRt),gRt.forEach(t),mRt.forEach(t),iAr=i(gWe),B9e=n(gWe,"SPAN",{});var hRt=s(B9e);dAr=r(hRt,"TFAutoModelForSeq2SeqLM"),hRt.forEach(t),gWe.forEach(t),sze=i(f),sr=n(f,"DIV",{class:!0});var ql=s(sr);T(hx.$$.fragment,ql),cAr=i(ql),Tc=n(ql,"P",{});var $te=s(Tc);fAr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),EY=n($te,"A",{href:!0});var pRt=s(EY);mAr=r(pRt,"from_pretrained()"),pRt.forEach(t),gAr=r($te," class method or the "),CY=n($te,"A",{href:!0});var _Rt=s(CY);hAr=r(_Rt,"from_config()"),_Rt.forEach(t),pAr=r($te,` class
method.`),$te.forEach(t),_Ar=i(ql),px=n(ql,"P",{});var hWe=s(px);uAr=r(hWe,"This class cannot be instantiated directly using "),I9e=n(hWe,"CODE",{});var uRt=s(I9e);bAr=r(uRt,"__init__()"),uRt.forEach(t),vAr=r(hWe," (throws an error)."),hWe.forEach(t),FAr=i(ql),Nt=n(ql,"DIV",{class:!0});var c6=s(Nt);T(_x.$$.fragment,c6),TAr=i(c6),N9e=n(c6,"P",{});var bRt=s(N9e);MAr=r(bRt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),bRt.forEach(t),EAr=i(c6),Mc=n(c6,"P",{});var kte=s(Mc);CAr=r(kte,`Note:
Loading a model from its configuration file does `),q9e=n(kte,"STRONG",{});var vRt=s(q9e);wAr=r(vRt,"not"),vRt.forEach(t),AAr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),wY=n(kte,"A",{href:!0});var FRt=s(wY);LAr=r(FRt,"from_pretrained()"),FRt.forEach(t),yAr=r(kte," to load the model weights."),kte.forEach(t),xAr=i(c6),T(PE.$$.fragment,c6),c6.forEach(t),$Ar=i(ql),Pr=n(ql,"DIV",{class:!0});var jl=s(Pr);T(ux.$$.fragment,jl),kAr=i(jl),j9e=n(jl,"P",{});var TRt=s(j9e);SAr=r(TRt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),TRt.forEach(t),RAr=i(jl),mn=n(jl,"P",{});var f6=s(mn);PAr=r(f6,"The model class to instantiate is selected based on the "),D9e=n(f6,"CODE",{});var MRt=s(D9e);BAr=r(MRt,"model_type"),MRt.forEach(t),IAr=r(f6,` property of the config object (either
passed as an argument or loaded from `),G9e=n(f6,"CODE",{});var ERt=s(G9e);NAr=r(ERt,"pretrained_model_name_or_path"),ERt.forEach(t),qAr=r(f6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O9e=n(f6,"CODE",{});var CRt=s(O9e);jAr=r(CRt,"pretrained_model_name_or_path"),CRt.forEach(t),DAr=r(f6,":"),f6.forEach(t),GAr=i(jl),ye=n(jl,"UL",{});var Ie=s(ye);BE=n(Ie,"LI",{});var Jje=s(BE);V9e=n(Jje,"STRONG",{});var wRt=s(V9e);OAr=r(wRt,"bart"),wRt.forEach(t),VAr=r(Jje," \u2014 "),AY=n(Jje,"A",{href:!0});var ARt=s(AY);XAr=r(ARt,"TFBartForConditionalGeneration"),ARt.forEach(t),zAr=r(Jje," (BART model)"),Jje.forEach(t),QAr=i(Ie),IE=n(Ie,"LI",{});var Yje=s(IE);X9e=n(Yje,"STRONG",{});var LRt=s(X9e);WAr=r(LRt,"blenderbot"),LRt.forEach(t),HAr=r(Yje," \u2014 "),LY=n(Yje,"A",{href:!0});var yRt=s(LY);UAr=r(yRt,"TFBlenderbotForConditionalGeneration"),yRt.forEach(t),JAr=r(Yje," (Blenderbot model)"),Yje.forEach(t),YAr=i(Ie),NE=n(Ie,"LI",{});var Kje=s(NE);z9e=n(Kje,"STRONG",{});var xRt=s(z9e);KAr=r(xRt,"blenderbot-small"),xRt.forEach(t),ZAr=r(Kje," \u2014 "),yY=n(Kje,"A",{href:!0});var $Rt=s(yY);e6r=r($Rt,"TFBlenderbotSmallForConditionalGeneration"),$Rt.forEach(t),o6r=r(Kje," (BlenderbotSmall model)"),Kje.forEach(t),r6r=i(Ie),qE=n(Ie,"LI",{});var Zje=s(qE);Q9e=n(Zje,"STRONG",{});var kRt=s(Q9e);t6r=r(kRt,"encoder-decoder"),kRt.forEach(t),a6r=r(Zje," \u2014 "),xY=n(Zje,"A",{href:!0});var SRt=s(xY);n6r=r(SRt,"TFEncoderDecoderModel"),SRt.forEach(t),s6r=r(Zje," (Encoder decoder model)"),Zje.forEach(t),l6r=i(Ie),jE=n(Ie,"LI",{});var eDe=s(jE);W9e=n(eDe,"STRONG",{});var RRt=s(W9e);i6r=r(RRt,"led"),RRt.forEach(t),d6r=r(eDe," \u2014 "),$Y=n(eDe,"A",{href:!0});var PRt=s($Y);c6r=r(PRt,"TFLEDForConditionalGeneration"),PRt.forEach(t),f6r=r(eDe," (LED model)"),eDe.forEach(t),m6r=i(Ie),DE=n(Ie,"LI",{});var oDe=s(DE);H9e=n(oDe,"STRONG",{});var BRt=s(H9e);g6r=r(BRt,"marian"),BRt.forEach(t),h6r=r(oDe," \u2014 "),kY=n(oDe,"A",{href:!0});var IRt=s(kY);p6r=r(IRt,"TFMarianMTModel"),IRt.forEach(t),_6r=r(oDe," (Marian model)"),oDe.forEach(t),u6r=i(Ie),GE=n(Ie,"LI",{});var rDe=s(GE);U9e=n(rDe,"STRONG",{});var NRt=s(U9e);b6r=r(NRt,"mbart"),NRt.forEach(t),v6r=r(rDe," \u2014 "),SY=n(rDe,"A",{href:!0});var qRt=s(SY);F6r=r(qRt,"TFMBartForConditionalGeneration"),qRt.forEach(t),T6r=r(rDe," (mBART model)"),rDe.forEach(t),M6r=i(Ie),OE=n(Ie,"LI",{});var tDe=s(OE);J9e=n(tDe,"STRONG",{});var jRt=s(J9e);E6r=r(jRt,"mt5"),jRt.forEach(t),C6r=r(tDe," \u2014 "),RY=n(tDe,"A",{href:!0});var DRt=s(RY);w6r=r(DRt,"TFMT5ForConditionalGeneration"),DRt.forEach(t),A6r=r(tDe," (MT5 model)"),tDe.forEach(t),L6r=i(Ie),VE=n(Ie,"LI",{});var aDe=s(VE);Y9e=n(aDe,"STRONG",{});var GRt=s(Y9e);y6r=r(GRt,"pegasus"),GRt.forEach(t),x6r=r(aDe," \u2014 "),PY=n(aDe,"A",{href:!0});var ORt=s(PY);$6r=r(ORt,"TFPegasusForConditionalGeneration"),ORt.forEach(t),k6r=r(aDe," (Pegasus model)"),aDe.forEach(t),S6r=i(Ie),XE=n(Ie,"LI",{});var nDe=s(XE);K9e=n(nDe,"STRONG",{});var VRt=s(K9e);R6r=r(VRt,"t5"),VRt.forEach(t),P6r=r(nDe," \u2014 "),BY=n(nDe,"A",{href:!0});var XRt=s(BY);B6r=r(XRt,"TFT5ForConditionalGeneration"),XRt.forEach(t),I6r=r(nDe," (T5 model)"),nDe.forEach(t),Ie.forEach(t),N6r=i(jl),T(zE.$$.fragment,jl),jl.forEach(t),ql.forEach(t),lze=i(f),Ec=n(f,"H2",{class:!0});var pWe=s(Ec);QE=n(pWe,"A",{id:!0,class:!0,href:!0});var zRt=s(QE);Z9e=n(zRt,"SPAN",{});var QRt=s(Z9e);T(bx.$$.fragment,QRt),QRt.forEach(t),zRt.forEach(t),q6r=i(pWe),eMe=n(pWe,"SPAN",{});var WRt=s(eMe);j6r=r(WRt,"TFAutoModelForSequenceClassification"),WRt.forEach(t),pWe.forEach(t),ize=i(f),lr=n(f,"DIV",{class:!0});var Dl=s(lr);T(vx.$$.fragment,Dl),D6r=i(Dl),Cc=n(Dl,"P",{});var Ste=s(Cc);G6r=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),IY=n(Ste,"A",{href:!0});var HRt=s(IY);O6r=r(HRt,"from_pretrained()"),HRt.forEach(t),V6r=r(Ste," class method or the "),NY=n(Ste,"A",{href:!0});var URt=s(NY);X6r=r(URt,"from_config()"),URt.forEach(t),z6r=r(Ste,` class
method.`),Ste.forEach(t),Q6r=i(Dl),Fx=n(Dl,"P",{});var _We=s(Fx);W6r=r(_We,"This class cannot be instantiated directly using "),oMe=n(_We,"CODE",{});var JRt=s(oMe);H6r=r(JRt,"__init__()"),JRt.forEach(t),U6r=r(_We," (throws an error)."),_We.forEach(t),J6r=i(Dl),qt=n(Dl,"DIV",{class:!0});var m6=s(qt);T(Tx.$$.fragment,m6),Y6r=i(m6),rMe=n(m6,"P",{});var YRt=s(rMe);K6r=r(YRt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),YRt.forEach(t),Z6r=i(m6),wc=n(m6,"P",{});var Rte=s(wc);eLr=r(Rte,`Note:
Loading a model from its configuration file does `),tMe=n(Rte,"STRONG",{});var KRt=s(tMe);oLr=r(KRt,"not"),KRt.forEach(t),rLr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(Rte,"A",{href:!0});var ZRt=s(qY);tLr=r(ZRt,"from_pretrained()"),ZRt.forEach(t),aLr=r(Rte," to load the model weights."),Rte.forEach(t),nLr=i(m6),T(WE.$$.fragment,m6),m6.forEach(t),sLr=i(Dl),Br=n(Dl,"DIV",{class:!0});var Gl=s(Br);T(Mx.$$.fragment,Gl),lLr=i(Gl),aMe=n(Gl,"P",{});var ePt=s(aMe);iLr=r(ePt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ePt.forEach(t),dLr=i(Gl),gn=n(Gl,"P",{});var g6=s(gn);cLr=r(g6,"The model class to instantiate is selected based on the "),nMe=n(g6,"CODE",{});var oPt=s(nMe);fLr=r(oPt,"model_type"),oPt.forEach(t),mLr=r(g6,` property of the config object (either
passed as an argument or loaded from `),sMe=n(g6,"CODE",{});var rPt=s(sMe);gLr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),hLr=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lMe=n(g6,"CODE",{});var tPt=s(lMe);pLr=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),_Lr=r(g6,":"),g6.forEach(t),uLr=i(Gl),te=n(Gl,"UL",{});var ne=s(te);HE=n(ne,"LI",{});var sDe=s(HE);iMe=n(sDe,"STRONG",{});var aPt=s(iMe);bLr=r(aPt,"albert"),aPt.forEach(t),vLr=r(sDe," \u2014 "),jY=n(sDe,"A",{href:!0});var nPt=s(jY);FLr=r(nPt,"TFAlbertForSequenceClassification"),nPt.forEach(t),TLr=r(sDe," (ALBERT model)"),sDe.forEach(t),MLr=i(ne),UE=n(ne,"LI",{});var lDe=s(UE);dMe=n(lDe,"STRONG",{});var sPt=s(dMe);ELr=r(sPt,"bert"),sPt.forEach(t),CLr=r(lDe," \u2014 "),DY=n(lDe,"A",{href:!0});var lPt=s(DY);wLr=r(lPt,"TFBertForSequenceClassification"),lPt.forEach(t),ALr=r(lDe," (BERT model)"),lDe.forEach(t),LLr=i(ne),JE=n(ne,"LI",{});var iDe=s(JE);cMe=n(iDe,"STRONG",{});var iPt=s(cMe);yLr=r(iPt,"camembert"),iPt.forEach(t),xLr=r(iDe," \u2014 "),GY=n(iDe,"A",{href:!0});var dPt=s(GY);$Lr=r(dPt,"TFCamembertForSequenceClassification"),dPt.forEach(t),kLr=r(iDe," (CamemBERT model)"),iDe.forEach(t),SLr=i(ne),YE=n(ne,"LI",{});var dDe=s(YE);fMe=n(dDe,"STRONG",{});var cPt=s(fMe);RLr=r(cPt,"convbert"),cPt.forEach(t),PLr=r(dDe," \u2014 "),OY=n(dDe,"A",{href:!0});var fPt=s(OY);BLr=r(fPt,"TFConvBertForSequenceClassification"),fPt.forEach(t),ILr=r(dDe," (ConvBERT model)"),dDe.forEach(t),NLr=i(ne),KE=n(ne,"LI",{});var cDe=s(KE);mMe=n(cDe,"STRONG",{});var mPt=s(mMe);qLr=r(mPt,"ctrl"),mPt.forEach(t),jLr=r(cDe," \u2014 "),VY=n(cDe,"A",{href:!0});var gPt=s(VY);DLr=r(gPt,"TFCTRLForSequenceClassification"),gPt.forEach(t),GLr=r(cDe," (CTRL model)"),cDe.forEach(t),OLr=i(ne),ZE=n(ne,"LI",{});var fDe=s(ZE);gMe=n(fDe,"STRONG",{});var hPt=s(gMe);VLr=r(hPt,"deberta"),hPt.forEach(t),XLr=r(fDe," \u2014 "),XY=n(fDe,"A",{href:!0});var pPt=s(XY);zLr=r(pPt,"TFDebertaForSequenceClassification"),pPt.forEach(t),QLr=r(fDe," (DeBERTa model)"),fDe.forEach(t),WLr=i(ne),eC=n(ne,"LI",{});var mDe=s(eC);hMe=n(mDe,"STRONG",{});var _Pt=s(hMe);HLr=r(_Pt,"deberta-v2"),_Pt.forEach(t),ULr=r(mDe," \u2014 "),zY=n(mDe,"A",{href:!0});var uPt=s(zY);JLr=r(uPt,"TFDebertaV2ForSequenceClassification"),uPt.forEach(t),YLr=r(mDe," (DeBERTa-v2 model)"),mDe.forEach(t),KLr=i(ne),oC=n(ne,"LI",{});var gDe=s(oC);pMe=n(gDe,"STRONG",{});var bPt=s(pMe);ZLr=r(bPt,"distilbert"),bPt.forEach(t),eyr=r(gDe," \u2014 "),QY=n(gDe,"A",{href:!0});var vPt=s(QY);oyr=r(vPt,"TFDistilBertForSequenceClassification"),vPt.forEach(t),ryr=r(gDe," (DistilBERT model)"),gDe.forEach(t),tyr=i(ne),rC=n(ne,"LI",{});var hDe=s(rC);_Me=n(hDe,"STRONG",{});var FPt=s(_Me);ayr=r(FPt,"electra"),FPt.forEach(t),nyr=r(hDe," \u2014 "),WY=n(hDe,"A",{href:!0});var TPt=s(WY);syr=r(TPt,"TFElectraForSequenceClassification"),TPt.forEach(t),lyr=r(hDe," (ELECTRA model)"),hDe.forEach(t),iyr=i(ne),tC=n(ne,"LI",{});var pDe=s(tC);uMe=n(pDe,"STRONG",{});var MPt=s(uMe);dyr=r(MPt,"flaubert"),MPt.forEach(t),cyr=r(pDe," \u2014 "),HY=n(pDe,"A",{href:!0});var EPt=s(HY);fyr=r(EPt,"TFFlaubertForSequenceClassification"),EPt.forEach(t),myr=r(pDe," (FlauBERT model)"),pDe.forEach(t),gyr=i(ne),aC=n(ne,"LI",{});var _De=s(aC);bMe=n(_De,"STRONG",{});var CPt=s(bMe);hyr=r(CPt,"funnel"),CPt.forEach(t),pyr=r(_De," \u2014 "),UY=n(_De,"A",{href:!0});var wPt=s(UY);_yr=r(wPt,"TFFunnelForSequenceClassification"),wPt.forEach(t),uyr=r(_De," (Funnel Transformer model)"),_De.forEach(t),byr=i(ne),nC=n(ne,"LI",{});var uDe=s(nC);vMe=n(uDe,"STRONG",{});var APt=s(vMe);vyr=r(APt,"gpt2"),APt.forEach(t),Fyr=r(uDe," \u2014 "),JY=n(uDe,"A",{href:!0});var LPt=s(JY);Tyr=r(LPt,"TFGPT2ForSequenceClassification"),LPt.forEach(t),Myr=r(uDe," (OpenAI GPT-2 model)"),uDe.forEach(t),Eyr=i(ne),sC=n(ne,"LI",{});var bDe=s(sC);FMe=n(bDe,"STRONG",{});var yPt=s(FMe);Cyr=r(yPt,"gptj"),yPt.forEach(t),wyr=r(bDe," \u2014 "),YY=n(bDe,"A",{href:!0});var xPt=s(YY);Ayr=r(xPt,"TFGPTJForSequenceClassification"),xPt.forEach(t),Lyr=r(bDe," (GPT-J model)"),bDe.forEach(t),yyr=i(ne),lC=n(ne,"LI",{});var vDe=s(lC);TMe=n(vDe,"STRONG",{});var $Pt=s(TMe);xyr=r($Pt,"layoutlm"),$Pt.forEach(t),$yr=r(vDe," \u2014 "),KY=n(vDe,"A",{href:!0});var kPt=s(KY);kyr=r(kPt,"TFLayoutLMForSequenceClassification"),kPt.forEach(t),Syr=r(vDe," (LayoutLM model)"),vDe.forEach(t),Ryr=i(ne),iC=n(ne,"LI",{});var FDe=s(iC);MMe=n(FDe,"STRONG",{});var SPt=s(MMe);Pyr=r(SPt,"longformer"),SPt.forEach(t),Byr=r(FDe," \u2014 "),ZY=n(FDe,"A",{href:!0});var RPt=s(ZY);Iyr=r(RPt,"TFLongformerForSequenceClassification"),RPt.forEach(t),Nyr=r(FDe," (Longformer model)"),FDe.forEach(t),qyr=i(ne),dC=n(ne,"LI",{});var TDe=s(dC);EMe=n(TDe,"STRONG",{});var PPt=s(EMe);jyr=r(PPt,"mobilebert"),PPt.forEach(t),Dyr=r(TDe," \u2014 "),eK=n(TDe,"A",{href:!0});var BPt=s(eK);Gyr=r(BPt,"TFMobileBertForSequenceClassification"),BPt.forEach(t),Oyr=r(TDe," (MobileBERT model)"),TDe.forEach(t),Vyr=i(ne),cC=n(ne,"LI",{});var MDe=s(cC);CMe=n(MDe,"STRONG",{});var IPt=s(CMe);Xyr=r(IPt,"mpnet"),IPt.forEach(t),zyr=r(MDe," \u2014 "),oK=n(MDe,"A",{href:!0});var NPt=s(oK);Qyr=r(NPt,"TFMPNetForSequenceClassification"),NPt.forEach(t),Wyr=r(MDe," (MPNet model)"),MDe.forEach(t),Hyr=i(ne),fC=n(ne,"LI",{});var EDe=s(fC);wMe=n(EDe,"STRONG",{});var qPt=s(wMe);Uyr=r(qPt,"openai-gpt"),qPt.forEach(t),Jyr=r(EDe," \u2014 "),rK=n(EDe,"A",{href:!0});var jPt=s(rK);Yyr=r(jPt,"TFOpenAIGPTForSequenceClassification"),jPt.forEach(t),Kyr=r(EDe," (OpenAI GPT model)"),EDe.forEach(t),Zyr=i(ne),mC=n(ne,"LI",{});var CDe=s(mC);AMe=n(CDe,"STRONG",{});var DPt=s(AMe);e8r=r(DPt,"rembert"),DPt.forEach(t),o8r=r(CDe," \u2014 "),tK=n(CDe,"A",{href:!0});var GPt=s(tK);r8r=r(GPt,"TFRemBertForSequenceClassification"),GPt.forEach(t),t8r=r(CDe," (RemBERT model)"),CDe.forEach(t),a8r=i(ne),gC=n(ne,"LI",{});var wDe=s(gC);LMe=n(wDe,"STRONG",{});var OPt=s(LMe);n8r=r(OPt,"roberta"),OPt.forEach(t),s8r=r(wDe," \u2014 "),aK=n(wDe,"A",{href:!0});var VPt=s(aK);l8r=r(VPt,"TFRobertaForSequenceClassification"),VPt.forEach(t),i8r=r(wDe," (RoBERTa model)"),wDe.forEach(t),d8r=i(ne),hC=n(ne,"LI",{});var ADe=s(hC);yMe=n(ADe,"STRONG",{});var XPt=s(yMe);c8r=r(XPt,"roformer"),XPt.forEach(t),f8r=r(ADe," \u2014 "),nK=n(ADe,"A",{href:!0});var zPt=s(nK);m8r=r(zPt,"TFRoFormerForSequenceClassification"),zPt.forEach(t),g8r=r(ADe," (RoFormer model)"),ADe.forEach(t),h8r=i(ne),pC=n(ne,"LI",{});var LDe=s(pC);xMe=n(LDe,"STRONG",{});var QPt=s(xMe);p8r=r(QPt,"tapas"),QPt.forEach(t),_8r=r(LDe," \u2014 "),sK=n(LDe,"A",{href:!0});var WPt=s(sK);u8r=r(WPt,"TFTapasForSequenceClassification"),WPt.forEach(t),b8r=r(LDe," (TAPAS model)"),LDe.forEach(t),v8r=i(ne),_C=n(ne,"LI",{});var yDe=s(_C);$Me=n(yDe,"STRONG",{});var HPt=s($Me);F8r=r(HPt,"transfo-xl"),HPt.forEach(t),T8r=r(yDe," \u2014 "),lK=n(yDe,"A",{href:!0});var UPt=s(lK);M8r=r(UPt,"TFTransfoXLForSequenceClassification"),UPt.forEach(t),E8r=r(yDe," (Transformer-XL model)"),yDe.forEach(t),C8r=i(ne),uC=n(ne,"LI",{});var xDe=s(uC);kMe=n(xDe,"STRONG",{});var JPt=s(kMe);w8r=r(JPt,"xlm"),JPt.forEach(t),A8r=r(xDe," \u2014 "),iK=n(xDe,"A",{href:!0});var YPt=s(iK);L8r=r(YPt,"TFXLMForSequenceClassification"),YPt.forEach(t),y8r=r(xDe," (XLM model)"),xDe.forEach(t),x8r=i(ne),bC=n(ne,"LI",{});var $De=s(bC);SMe=n($De,"STRONG",{});var KPt=s(SMe);$8r=r(KPt,"xlm-roberta"),KPt.forEach(t),k8r=r($De," \u2014 "),dK=n($De,"A",{href:!0});var ZPt=s(dK);S8r=r(ZPt,"TFXLMRobertaForSequenceClassification"),ZPt.forEach(t),R8r=r($De," (XLM-RoBERTa model)"),$De.forEach(t),P8r=i(ne),vC=n(ne,"LI",{});var kDe=s(vC);RMe=n(kDe,"STRONG",{});var eBt=s(RMe);B8r=r(eBt,"xlnet"),eBt.forEach(t),I8r=r(kDe," \u2014 "),cK=n(kDe,"A",{href:!0});var oBt=s(cK);N8r=r(oBt,"TFXLNetForSequenceClassification"),oBt.forEach(t),q8r=r(kDe," (XLNet model)"),kDe.forEach(t),ne.forEach(t),j8r=i(Gl),T(FC.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),dze=i(f),Ac=n(f,"H2",{class:!0});var uWe=s(Ac);TC=n(uWe,"A",{id:!0,class:!0,href:!0});var rBt=s(TC);PMe=n(rBt,"SPAN",{});var tBt=s(PMe);T(Ex.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),D8r=i(uWe),BMe=n(uWe,"SPAN",{});var aBt=s(BMe);G8r=r(aBt,"TFAutoModelForMultipleChoice"),aBt.forEach(t),uWe.forEach(t),cze=i(f),ir=n(f,"DIV",{class:!0});var Ol=s(ir);T(Cx.$$.fragment,Ol),O8r=i(Ol),Lc=n(Ol,"P",{});var Pte=s(Lc);V8r=r(Pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),fK=n(Pte,"A",{href:!0});var nBt=s(fK);X8r=r(nBt,"from_pretrained()"),nBt.forEach(t),z8r=r(Pte," class method or the "),mK=n(Pte,"A",{href:!0});var sBt=s(mK);Q8r=r(sBt,"from_config()"),sBt.forEach(t),W8r=r(Pte,` class
method.`),Pte.forEach(t),H8r=i(Ol),wx=n(Ol,"P",{});var bWe=s(wx);U8r=r(bWe,"This class cannot be instantiated directly using "),IMe=n(bWe,"CODE",{});var lBt=s(IMe);J8r=r(lBt,"__init__()"),lBt.forEach(t),Y8r=r(bWe," (throws an error)."),bWe.forEach(t),K8r=i(Ol),jt=n(Ol,"DIV",{class:!0});var h6=s(jt);T(Ax.$$.fragment,h6),Z8r=i(h6),NMe=n(h6,"P",{});var iBt=s(NMe);exr=r(iBt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iBt.forEach(t),oxr=i(h6),yc=n(h6,"P",{});var Bte=s(yc);rxr=r(Bte,`Note:
Loading a model from its configuration file does `),qMe=n(Bte,"STRONG",{});var dBt=s(qMe);txr=r(dBt,"not"),dBt.forEach(t),axr=r(Bte,` load the model weights. It only affects the
model\u2019s configuration. Use `),gK=n(Bte,"A",{href:!0});var cBt=s(gK);nxr=r(cBt,"from_pretrained()"),cBt.forEach(t),sxr=r(Bte," to load the model weights."),Bte.forEach(t),lxr=i(h6),T(MC.$$.fragment,h6),h6.forEach(t),ixr=i(Ol),Ir=n(Ol,"DIV",{class:!0});var Vl=s(Ir);T(Lx.$$.fragment,Vl),dxr=i(Vl),jMe=n(Vl,"P",{});var fBt=s(jMe);cxr=r(fBt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fBt.forEach(t),fxr=i(Vl),hn=n(Vl,"P",{});var p6=s(hn);mxr=r(p6,"The model class to instantiate is selected based on the "),DMe=n(p6,"CODE",{});var mBt=s(DMe);gxr=r(mBt,"model_type"),mBt.forEach(t),hxr=r(p6,` property of the config object (either
passed as an argument or loaded from `),GMe=n(p6,"CODE",{});var gBt=s(GMe);pxr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),_xr=r(p6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OMe=n(p6,"CODE",{});var hBt=s(OMe);uxr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),bxr=r(p6,":"),p6.forEach(t),vxr=i(Vl),_e=n(Vl,"UL",{});var Fe=s(_e);EC=n(Fe,"LI",{});var SDe=s(EC);VMe=n(SDe,"STRONG",{});var pBt=s(VMe);Fxr=r(pBt,"albert"),pBt.forEach(t),Txr=r(SDe," \u2014 "),hK=n(SDe,"A",{href:!0});var _Bt=s(hK);Mxr=r(_Bt,"TFAlbertForMultipleChoice"),_Bt.forEach(t),Exr=r(SDe," (ALBERT model)"),SDe.forEach(t),Cxr=i(Fe),CC=n(Fe,"LI",{});var RDe=s(CC);XMe=n(RDe,"STRONG",{});var uBt=s(XMe);wxr=r(uBt,"bert"),uBt.forEach(t),Axr=r(RDe," \u2014 "),pK=n(RDe,"A",{href:!0});var bBt=s(pK);Lxr=r(bBt,"TFBertForMultipleChoice"),bBt.forEach(t),yxr=r(RDe," (BERT model)"),RDe.forEach(t),xxr=i(Fe),wC=n(Fe,"LI",{});var PDe=s(wC);zMe=n(PDe,"STRONG",{});var vBt=s(zMe);$xr=r(vBt,"camembert"),vBt.forEach(t),kxr=r(PDe," \u2014 "),_K=n(PDe,"A",{href:!0});var FBt=s(_K);Sxr=r(FBt,"TFCamembertForMultipleChoice"),FBt.forEach(t),Rxr=r(PDe," (CamemBERT model)"),PDe.forEach(t),Pxr=i(Fe),AC=n(Fe,"LI",{});var BDe=s(AC);QMe=n(BDe,"STRONG",{});var TBt=s(QMe);Bxr=r(TBt,"convbert"),TBt.forEach(t),Ixr=r(BDe," \u2014 "),uK=n(BDe,"A",{href:!0});var MBt=s(uK);Nxr=r(MBt,"TFConvBertForMultipleChoice"),MBt.forEach(t),qxr=r(BDe," (ConvBERT model)"),BDe.forEach(t),jxr=i(Fe),LC=n(Fe,"LI",{});var IDe=s(LC);WMe=n(IDe,"STRONG",{});var EBt=s(WMe);Dxr=r(EBt,"distilbert"),EBt.forEach(t),Gxr=r(IDe," \u2014 "),bK=n(IDe,"A",{href:!0});var CBt=s(bK);Oxr=r(CBt,"TFDistilBertForMultipleChoice"),CBt.forEach(t),Vxr=r(IDe," (DistilBERT model)"),IDe.forEach(t),Xxr=i(Fe),yC=n(Fe,"LI",{});var NDe=s(yC);HMe=n(NDe,"STRONG",{});var wBt=s(HMe);zxr=r(wBt,"electra"),wBt.forEach(t),Qxr=r(NDe," \u2014 "),vK=n(NDe,"A",{href:!0});var ABt=s(vK);Wxr=r(ABt,"TFElectraForMultipleChoice"),ABt.forEach(t),Hxr=r(NDe," (ELECTRA model)"),NDe.forEach(t),Uxr=i(Fe),xC=n(Fe,"LI",{});var qDe=s(xC);UMe=n(qDe,"STRONG",{});var LBt=s(UMe);Jxr=r(LBt,"flaubert"),LBt.forEach(t),Yxr=r(qDe," \u2014 "),FK=n(qDe,"A",{href:!0});var yBt=s(FK);Kxr=r(yBt,"TFFlaubertForMultipleChoice"),yBt.forEach(t),Zxr=r(qDe," (FlauBERT model)"),qDe.forEach(t),e$r=i(Fe),$C=n(Fe,"LI",{});var jDe=s($C);JMe=n(jDe,"STRONG",{});var xBt=s(JMe);o$r=r(xBt,"funnel"),xBt.forEach(t),r$r=r(jDe," \u2014 "),TK=n(jDe,"A",{href:!0});var $Bt=s(TK);t$r=r($Bt,"TFFunnelForMultipleChoice"),$Bt.forEach(t),a$r=r(jDe," (Funnel Transformer model)"),jDe.forEach(t),n$r=i(Fe),kC=n(Fe,"LI",{});var DDe=s(kC);YMe=n(DDe,"STRONG",{});var kBt=s(YMe);s$r=r(kBt,"longformer"),kBt.forEach(t),l$r=r(DDe," \u2014 "),MK=n(DDe,"A",{href:!0});var SBt=s(MK);i$r=r(SBt,"TFLongformerForMultipleChoice"),SBt.forEach(t),d$r=r(DDe," (Longformer model)"),DDe.forEach(t),c$r=i(Fe),SC=n(Fe,"LI",{});var GDe=s(SC);KMe=n(GDe,"STRONG",{});var RBt=s(KMe);f$r=r(RBt,"mobilebert"),RBt.forEach(t),m$r=r(GDe," \u2014 "),EK=n(GDe,"A",{href:!0});var PBt=s(EK);g$r=r(PBt,"TFMobileBertForMultipleChoice"),PBt.forEach(t),h$r=r(GDe," (MobileBERT model)"),GDe.forEach(t),p$r=i(Fe),RC=n(Fe,"LI",{});var ODe=s(RC);ZMe=n(ODe,"STRONG",{});var BBt=s(ZMe);_$r=r(BBt,"mpnet"),BBt.forEach(t),u$r=r(ODe," \u2014 "),CK=n(ODe,"A",{href:!0});var IBt=s(CK);b$r=r(IBt,"TFMPNetForMultipleChoice"),IBt.forEach(t),v$r=r(ODe," (MPNet model)"),ODe.forEach(t),F$r=i(Fe),PC=n(Fe,"LI",{});var VDe=s(PC);eEe=n(VDe,"STRONG",{});var NBt=s(eEe);T$r=r(NBt,"rembert"),NBt.forEach(t),M$r=r(VDe," \u2014 "),wK=n(VDe,"A",{href:!0});var qBt=s(wK);E$r=r(qBt,"TFRemBertForMultipleChoice"),qBt.forEach(t),C$r=r(VDe," (RemBERT model)"),VDe.forEach(t),w$r=i(Fe),BC=n(Fe,"LI",{});var XDe=s(BC);oEe=n(XDe,"STRONG",{});var jBt=s(oEe);A$r=r(jBt,"roberta"),jBt.forEach(t),L$r=r(XDe," \u2014 "),AK=n(XDe,"A",{href:!0});var DBt=s(AK);y$r=r(DBt,"TFRobertaForMultipleChoice"),DBt.forEach(t),x$r=r(XDe," (RoBERTa model)"),XDe.forEach(t),$$r=i(Fe),IC=n(Fe,"LI",{});var zDe=s(IC);rEe=n(zDe,"STRONG",{});var GBt=s(rEe);k$r=r(GBt,"roformer"),GBt.forEach(t),S$r=r(zDe," \u2014 "),LK=n(zDe,"A",{href:!0});var OBt=s(LK);R$r=r(OBt,"TFRoFormerForMultipleChoice"),OBt.forEach(t),P$r=r(zDe," (RoFormer model)"),zDe.forEach(t),B$r=i(Fe),NC=n(Fe,"LI",{});var QDe=s(NC);tEe=n(QDe,"STRONG",{});var VBt=s(tEe);I$r=r(VBt,"xlm"),VBt.forEach(t),N$r=r(QDe," \u2014 "),yK=n(QDe,"A",{href:!0});var XBt=s(yK);q$r=r(XBt,"TFXLMForMultipleChoice"),XBt.forEach(t),j$r=r(QDe," (XLM model)"),QDe.forEach(t),D$r=i(Fe),qC=n(Fe,"LI",{});var WDe=s(qC);aEe=n(WDe,"STRONG",{});var zBt=s(aEe);G$r=r(zBt,"xlm-roberta"),zBt.forEach(t),O$r=r(WDe," \u2014 "),xK=n(WDe,"A",{href:!0});var QBt=s(xK);V$r=r(QBt,"TFXLMRobertaForMultipleChoice"),QBt.forEach(t),X$r=r(WDe," (XLM-RoBERTa model)"),WDe.forEach(t),z$r=i(Fe),jC=n(Fe,"LI",{});var HDe=s(jC);nEe=n(HDe,"STRONG",{});var WBt=s(nEe);Q$r=r(WBt,"xlnet"),WBt.forEach(t),W$r=r(HDe," \u2014 "),$K=n(HDe,"A",{href:!0});var HBt=s($K);H$r=r(HBt,"TFXLNetForMultipleChoice"),HBt.forEach(t),U$r=r(HDe," (XLNet model)"),HDe.forEach(t),Fe.forEach(t),J$r=i(Vl),T(DC.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),fze=i(f),xc=n(f,"H2",{class:!0});var vWe=s(xc);GC=n(vWe,"A",{id:!0,class:!0,href:!0});var UBt=s(GC);sEe=n(UBt,"SPAN",{});var JBt=s(sEe);T(yx.$$.fragment,JBt),JBt.forEach(t),UBt.forEach(t),Y$r=i(vWe),lEe=n(vWe,"SPAN",{});var YBt=s(lEe);K$r=r(YBt,"TFAutoModelForNextSentencePrediction"),YBt.forEach(t),vWe.forEach(t),mze=i(f),dr=n(f,"DIV",{class:!0});var Xl=s(dr);T(xx.$$.fragment,Xl),Z$r=i(Xl),$c=n(Xl,"P",{});var Ite=s($c);ekr=r(Ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kK=n(Ite,"A",{href:!0});var KBt=s(kK);okr=r(KBt,"from_pretrained()"),KBt.forEach(t),rkr=r(Ite," class method or the "),SK=n(Ite,"A",{href:!0});var ZBt=s(SK);tkr=r(ZBt,"from_config()"),ZBt.forEach(t),akr=r(Ite,` class
method.`),Ite.forEach(t),nkr=i(Xl),$x=n(Xl,"P",{});var FWe=s($x);skr=r(FWe,"This class cannot be instantiated directly using "),iEe=n(FWe,"CODE",{});var eIt=s(iEe);lkr=r(eIt,"__init__()"),eIt.forEach(t),ikr=r(FWe," (throws an error)."),FWe.forEach(t),dkr=i(Xl),Dt=n(Xl,"DIV",{class:!0});var _6=s(Dt);T(kx.$$.fragment,_6),ckr=i(_6),dEe=n(_6,"P",{});var oIt=s(dEe);fkr=r(oIt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),oIt.forEach(t),mkr=i(_6),kc=n(_6,"P",{});var Nte=s(kc);gkr=r(Nte,`Note:
Loading a model from its configuration file does `),cEe=n(Nte,"STRONG",{});var rIt=s(cEe);hkr=r(rIt,"not"),rIt.forEach(t),pkr=r(Nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),RK=n(Nte,"A",{href:!0});var tIt=s(RK);_kr=r(tIt,"from_pretrained()"),tIt.forEach(t),ukr=r(Nte," to load the model weights."),Nte.forEach(t),bkr=i(_6),T(OC.$$.fragment,_6),_6.forEach(t),vkr=i(Xl),Nr=n(Xl,"DIV",{class:!0});var zl=s(Nr);T(Sx.$$.fragment,zl),Fkr=i(zl),fEe=n(zl,"P",{});var aIt=s(fEe);Tkr=r(aIt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),aIt.forEach(t),Mkr=i(zl),pn=n(zl,"P",{});var u6=s(pn);Ekr=r(u6,"The model class to instantiate is selected based on the "),mEe=n(u6,"CODE",{});var nIt=s(mEe);Ckr=r(nIt,"model_type"),nIt.forEach(t),wkr=r(u6,` property of the config object (either
passed as an argument or loaded from `),gEe=n(u6,"CODE",{});var sIt=s(gEe);Akr=r(sIt,"pretrained_model_name_or_path"),sIt.forEach(t),Lkr=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hEe=n(u6,"CODE",{});var lIt=s(hEe);ykr=r(lIt,"pretrained_model_name_or_path"),lIt.forEach(t),xkr=r(u6,":"),u6.forEach(t),$kr=i(zl),Rx=n(zl,"UL",{});var TWe=s(Rx);VC=n(TWe,"LI",{});var UDe=s(VC);pEe=n(UDe,"STRONG",{});var iIt=s(pEe);kkr=r(iIt,"bert"),iIt.forEach(t),Skr=r(UDe," \u2014 "),PK=n(UDe,"A",{href:!0});var dIt=s(PK);Rkr=r(dIt,"TFBertForNextSentencePrediction"),dIt.forEach(t),Pkr=r(UDe," (BERT model)"),UDe.forEach(t),Bkr=i(TWe),XC=n(TWe,"LI",{});var JDe=s(XC);_Ee=n(JDe,"STRONG",{});var cIt=s(_Ee);Ikr=r(cIt,"mobilebert"),cIt.forEach(t),Nkr=r(JDe," \u2014 "),BK=n(JDe,"A",{href:!0});var fIt=s(BK);qkr=r(fIt,"TFMobileBertForNextSentencePrediction"),fIt.forEach(t),jkr=r(JDe," (MobileBERT model)"),JDe.forEach(t),TWe.forEach(t),Dkr=i(zl),T(zC.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),gze=i(f),Sc=n(f,"H2",{class:!0});var MWe=s(Sc);QC=n(MWe,"A",{id:!0,class:!0,href:!0});var mIt=s(QC);uEe=n(mIt,"SPAN",{});var gIt=s(uEe);T(Px.$$.fragment,gIt),gIt.forEach(t),mIt.forEach(t),Gkr=i(MWe),bEe=n(MWe,"SPAN",{});var hIt=s(bEe);Okr=r(hIt,"TFAutoModelForTableQuestionAnswering"),hIt.forEach(t),MWe.forEach(t),hze=i(f),cr=n(f,"DIV",{class:!0});var Ql=s(cr);T(Bx.$$.fragment,Ql),Vkr=i(Ql),Rc=n(Ql,"P",{});var qte=s(Rc);Xkr=r(qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IK=n(qte,"A",{href:!0});var pIt=s(IK);zkr=r(pIt,"from_pretrained()"),pIt.forEach(t),Qkr=r(qte," class method or the "),NK=n(qte,"A",{href:!0});var _It=s(NK);Wkr=r(_It,"from_config()"),_It.forEach(t),Hkr=r(qte,` class
method.`),qte.forEach(t),Ukr=i(Ql),Ix=n(Ql,"P",{});var EWe=s(Ix);Jkr=r(EWe,"This class cannot be instantiated directly using "),vEe=n(EWe,"CODE",{});var uIt=s(vEe);Ykr=r(uIt,"__init__()"),uIt.forEach(t),Kkr=r(EWe," (throws an error)."),EWe.forEach(t),Zkr=i(Ql),Gt=n(Ql,"DIV",{class:!0});var b6=s(Gt);T(Nx.$$.fragment,b6),eSr=i(b6),FEe=n(b6,"P",{});var bIt=s(FEe);oSr=r(bIt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bIt.forEach(t),rSr=i(b6),Pc=n(b6,"P",{});var jte=s(Pc);tSr=r(jte,`Note:
Loading a model from its configuration file does `),TEe=n(jte,"STRONG",{});var vIt=s(TEe);aSr=r(vIt,"not"),vIt.forEach(t),nSr=r(jte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qK=n(jte,"A",{href:!0});var FIt=s(qK);sSr=r(FIt,"from_pretrained()"),FIt.forEach(t),lSr=r(jte," to load the model weights."),jte.forEach(t),iSr=i(b6),T(WC.$$.fragment,b6),b6.forEach(t),dSr=i(Ql),qr=n(Ql,"DIV",{class:!0});var Wl=s(qr);T(qx.$$.fragment,Wl),cSr=i(Wl),MEe=n(Wl,"P",{});var TIt=s(MEe);fSr=r(TIt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TIt.forEach(t),mSr=i(Wl),_n=n(Wl,"P",{});var v6=s(_n);gSr=r(v6,"The model class to instantiate is selected based on the "),EEe=n(v6,"CODE",{});var MIt=s(EEe);hSr=r(MIt,"model_type"),MIt.forEach(t),pSr=r(v6,` property of the config object (either
passed as an argument or loaded from `),CEe=n(v6,"CODE",{});var EIt=s(CEe);_Sr=r(EIt,"pretrained_model_name_or_path"),EIt.forEach(t),uSr=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wEe=n(v6,"CODE",{});var CIt=s(wEe);bSr=r(CIt,"pretrained_model_name_or_path"),CIt.forEach(t),vSr=r(v6,":"),v6.forEach(t),FSr=i(Wl),AEe=n(Wl,"UL",{});var wIt=s(AEe);HC=n(wIt,"LI",{});var YDe=s(HC);LEe=n(YDe,"STRONG",{});var AIt=s(LEe);TSr=r(AIt,"tapas"),AIt.forEach(t),MSr=r(YDe," \u2014 "),jK=n(YDe,"A",{href:!0});var LIt=s(jK);ESr=r(LIt,"TFTapasForQuestionAnswering"),LIt.forEach(t),CSr=r(YDe," (TAPAS model)"),YDe.forEach(t),wIt.forEach(t),wSr=i(Wl),T(UC.$$.fragment,Wl),Wl.forEach(t),Ql.forEach(t),pze=i(f),Bc=n(f,"H2",{class:!0});var CWe=s(Bc);JC=n(CWe,"A",{id:!0,class:!0,href:!0});var yIt=s(JC);yEe=n(yIt,"SPAN",{});var xIt=s(yEe);T(jx.$$.fragment,xIt),xIt.forEach(t),yIt.forEach(t),ASr=i(CWe),xEe=n(CWe,"SPAN",{});var $It=s(xEe);LSr=r($It,"TFAutoModelForTokenClassification"),$It.forEach(t),CWe.forEach(t),_ze=i(f),fr=n(f,"DIV",{class:!0});var Hl=s(fr);T(Dx.$$.fragment,Hl),ySr=i(Hl),Ic=n(Hl,"P",{});var Dte=s(Ic);xSr=r(Dte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DK=n(Dte,"A",{href:!0});var kIt=s(DK);$Sr=r(kIt,"from_pretrained()"),kIt.forEach(t),kSr=r(Dte," class method or the "),GK=n(Dte,"A",{href:!0});var SIt=s(GK);SSr=r(SIt,"from_config()"),SIt.forEach(t),RSr=r(Dte,` class
method.`),Dte.forEach(t),PSr=i(Hl),Gx=n(Hl,"P",{});var wWe=s(Gx);BSr=r(wWe,"This class cannot be instantiated directly using "),$Ee=n(wWe,"CODE",{});var RIt=s($Ee);ISr=r(RIt,"__init__()"),RIt.forEach(t),NSr=r(wWe," (throws an error)."),wWe.forEach(t),qSr=i(Hl),Ot=n(Hl,"DIV",{class:!0});var F6=s(Ot);T(Ox.$$.fragment,F6),jSr=i(F6),kEe=n(F6,"P",{});var PIt=s(kEe);DSr=r(PIt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PIt.forEach(t),GSr=i(F6),Nc=n(F6,"P",{});var Gte=s(Nc);OSr=r(Gte,`Note:
Loading a model from its configuration file does `),SEe=n(Gte,"STRONG",{});var BIt=s(SEe);VSr=r(BIt,"not"),BIt.forEach(t),XSr=r(Gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),OK=n(Gte,"A",{href:!0});var IIt=s(OK);zSr=r(IIt,"from_pretrained()"),IIt.forEach(t),QSr=r(Gte," to load the model weights."),Gte.forEach(t),WSr=i(F6),T(YC.$$.fragment,F6),F6.forEach(t),HSr=i(Hl),jr=n(Hl,"DIV",{class:!0});var Ul=s(jr);T(Vx.$$.fragment,Ul),USr=i(Ul),REe=n(Ul,"P",{});var NIt=s(REe);JSr=r(NIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),NIt.forEach(t),YSr=i(Ul),un=n(Ul,"P",{});var T6=s(un);KSr=r(T6,"The model class to instantiate is selected based on the "),PEe=n(T6,"CODE",{});var qIt=s(PEe);ZSr=r(qIt,"model_type"),qIt.forEach(t),eRr=r(T6,` property of the config object (either
passed as an argument or loaded from `),BEe=n(T6,"CODE",{});var jIt=s(BEe);oRr=r(jIt,"pretrained_model_name_or_path"),jIt.forEach(t),rRr=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),IEe=n(T6,"CODE",{});var DIt=s(IEe);tRr=r(DIt,"pretrained_model_name_or_path"),DIt.forEach(t),aRr=r(T6,":"),T6.forEach(t),nRr=i(Ul),de=n(Ul,"UL",{});var me=s(de);KC=n(me,"LI",{});var KDe=s(KC);NEe=n(KDe,"STRONG",{});var GIt=s(NEe);sRr=r(GIt,"albert"),GIt.forEach(t),lRr=r(KDe," \u2014 "),VK=n(KDe,"A",{href:!0});var OIt=s(VK);iRr=r(OIt,"TFAlbertForTokenClassification"),OIt.forEach(t),dRr=r(KDe," (ALBERT model)"),KDe.forEach(t),cRr=i(me),ZC=n(me,"LI",{});var ZDe=s(ZC);qEe=n(ZDe,"STRONG",{});var VIt=s(qEe);fRr=r(VIt,"bert"),VIt.forEach(t),mRr=r(ZDe," \u2014 "),XK=n(ZDe,"A",{href:!0});var XIt=s(XK);gRr=r(XIt,"TFBertForTokenClassification"),XIt.forEach(t),hRr=r(ZDe," (BERT model)"),ZDe.forEach(t),pRr=i(me),e3=n(me,"LI",{});var eGe=s(e3);jEe=n(eGe,"STRONG",{});var zIt=s(jEe);_Rr=r(zIt,"camembert"),zIt.forEach(t),uRr=r(eGe," \u2014 "),zK=n(eGe,"A",{href:!0});var QIt=s(zK);bRr=r(QIt,"TFCamembertForTokenClassification"),QIt.forEach(t),vRr=r(eGe," (CamemBERT model)"),eGe.forEach(t),FRr=i(me),o3=n(me,"LI",{});var oGe=s(o3);DEe=n(oGe,"STRONG",{});var WIt=s(DEe);TRr=r(WIt,"convbert"),WIt.forEach(t),MRr=r(oGe," \u2014 "),QK=n(oGe,"A",{href:!0});var HIt=s(QK);ERr=r(HIt,"TFConvBertForTokenClassification"),HIt.forEach(t),CRr=r(oGe," (ConvBERT model)"),oGe.forEach(t),wRr=i(me),r3=n(me,"LI",{});var rGe=s(r3);GEe=n(rGe,"STRONG",{});var UIt=s(GEe);ARr=r(UIt,"deberta"),UIt.forEach(t),LRr=r(rGe," \u2014 "),WK=n(rGe,"A",{href:!0});var JIt=s(WK);yRr=r(JIt,"TFDebertaForTokenClassification"),JIt.forEach(t),xRr=r(rGe," (DeBERTa model)"),rGe.forEach(t),$Rr=i(me),t3=n(me,"LI",{});var tGe=s(t3);OEe=n(tGe,"STRONG",{});var YIt=s(OEe);kRr=r(YIt,"deberta-v2"),YIt.forEach(t),SRr=r(tGe," \u2014 "),HK=n(tGe,"A",{href:!0});var KIt=s(HK);RRr=r(KIt,"TFDebertaV2ForTokenClassification"),KIt.forEach(t),PRr=r(tGe," (DeBERTa-v2 model)"),tGe.forEach(t),BRr=i(me),a3=n(me,"LI",{});var aGe=s(a3);VEe=n(aGe,"STRONG",{});var ZIt=s(VEe);IRr=r(ZIt,"distilbert"),ZIt.forEach(t),NRr=r(aGe," \u2014 "),UK=n(aGe,"A",{href:!0});var eNt=s(UK);qRr=r(eNt,"TFDistilBertForTokenClassification"),eNt.forEach(t),jRr=r(aGe," (DistilBERT model)"),aGe.forEach(t),DRr=i(me),n3=n(me,"LI",{});var nGe=s(n3);XEe=n(nGe,"STRONG",{});var oNt=s(XEe);GRr=r(oNt,"electra"),oNt.forEach(t),ORr=r(nGe," \u2014 "),JK=n(nGe,"A",{href:!0});var rNt=s(JK);VRr=r(rNt,"TFElectraForTokenClassification"),rNt.forEach(t),XRr=r(nGe," (ELECTRA model)"),nGe.forEach(t),zRr=i(me),s3=n(me,"LI",{});var sGe=s(s3);zEe=n(sGe,"STRONG",{});var tNt=s(zEe);QRr=r(tNt,"flaubert"),tNt.forEach(t),WRr=r(sGe," \u2014 "),YK=n(sGe,"A",{href:!0});var aNt=s(YK);HRr=r(aNt,"TFFlaubertForTokenClassification"),aNt.forEach(t),URr=r(sGe," (FlauBERT model)"),sGe.forEach(t),JRr=i(me),l3=n(me,"LI",{});var lGe=s(l3);QEe=n(lGe,"STRONG",{});var nNt=s(QEe);YRr=r(nNt,"funnel"),nNt.forEach(t),KRr=r(lGe," \u2014 "),KK=n(lGe,"A",{href:!0});var sNt=s(KK);ZRr=r(sNt,"TFFunnelForTokenClassification"),sNt.forEach(t),ePr=r(lGe," (Funnel Transformer model)"),lGe.forEach(t),oPr=i(me),i3=n(me,"LI",{});var iGe=s(i3);WEe=n(iGe,"STRONG",{});var lNt=s(WEe);rPr=r(lNt,"layoutlm"),lNt.forEach(t),tPr=r(iGe," \u2014 "),ZK=n(iGe,"A",{href:!0});var iNt=s(ZK);aPr=r(iNt,"TFLayoutLMForTokenClassification"),iNt.forEach(t),nPr=r(iGe," (LayoutLM model)"),iGe.forEach(t),sPr=i(me),d3=n(me,"LI",{});var dGe=s(d3);HEe=n(dGe,"STRONG",{});var dNt=s(HEe);lPr=r(dNt,"longformer"),dNt.forEach(t),iPr=r(dGe," \u2014 "),eZ=n(dGe,"A",{href:!0});var cNt=s(eZ);dPr=r(cNt,"TFLongformerForTokenClassification"),cNt.forEach(t),cPr=r(dGe," (Longformer model)"),dGe.forEach(t),fPr=i(me),c3=n(me,"LI",{});var cGe=s(c3);UEe=n(cGe,"STRONG",{});var fNt=s(UEe);mPr=r(fNt,"mobilebert"),fNt.forEach(t),gPr=r(cGe," \u2014 "),oZ=n(cGe,"A",{href:!0});var mNt=s(oZ);hPr=r(mNt,"TFMobileBertForTokenClassification"),mNt.forEach(t),pPr=r(cGe," (MobileBERT model)"),cGe.forEach(t),_Pr=i(me),f3=n(me,"LI",{});var fGe=s(f3);JEe=n(fGe,"STRONG",{});var gNt=s(JEe);uPr=r(gNt,"mpnet"),gNt.forEach(t),bPr=r(fGe," \u2014 "),rZ=n(fGe,"A",{href:!0});var hNt=s(rZ);vPr=r(hNt,"TFMPNetForTokenClassification"),hNt.forEach(t),FPr=r(fGe," (MPNet model)"),fGe.forEach(t),TPr=i(me),m3=n(me,"LI",{});var mGe=s(m3);YEe=n(mGe,"STRONG",{});var pNt=s(YEe);MPr=r(pNt,"rembert"),pNt.forEach(t),EPr=r(mGe," \u2014 "),tZ=n(mGe,"A",{href:!0});var _Nt=s(tZ);CPr=r(_Nt,"TFRemBertForTokenClassification"),_Nt.forEach(t),wPr=r(mGe," (RemBERT model)"),mGe.forEach(t),APr=i(me),g3=n(me,"LI",{});var gGe=s(g3);KEe=n(gGe,"STRONG",{});var uNt=s(KEe);LPr=r(uNt,"roberta"),uNt.forEach(t),yPr=r(gGe," \u2014 "),aZ=n(gGe,"A",{href:!0});var bNt=s(aZ);xPr=r(bNt,"TFRobertaForTokenClassification"),bNt.forEach(t),$Pr=r(gGe," (RoBERTa model)"),gGe.forEach(t),kPr=i(me),h3=n(me,"LI",{});var hGe=s(h3);ZEe=n(hGe,"STRONG",{});var vNt=s(ZEe);SPr=r(vNt,"roformer"),vNt.forEach(t),RPr=r(hGe," \u2014 "),nZ=n(hGe,"A",{href:!0});var FNt=s(nZ);PPr=r(FNt,"TFRoFormerForTokenClassification"),FNt.forEach(t),BPr=r(hGe," (RoFormer model)"),hGe.forEach(t),IPr=i(me),p3=n(me,"LI",{});var pGe=s(p3);eCe=n(pGe,"STRONG",{});var TNt=s(eCe);NPr=r(TNt,"xlm"),TNt.forEach(t),qPr=r(pGe," \u2014 "),sZ=n(pGe,"A",{href:!0});var MNt=s(sZ);jPr=r(MNt,"TFXLMForTokenClassification"),MNt.forEach(t),DPr=r(pGe," (XLM model)"),pGe.forEach(t),GPr=i(me),_3=n(me,"LI",{});var _Ge=s(_3);oCe=n(_Ge,"STRONG",{});var ENt=s(oCe);OPr=r(ENt,"xlm-roberta"),ENt.forEach(t),VPr=r(_Ge," \u2014 "),lZ=n(_Ge,"A",{href:!0});var CNt=s(lZ);XPr=r(CNt,"TFXLMRobertaForTokenClassification"),CNt.forEach(t),zPr=r(_Ge," (XLM-RoBERTa model)"),_Ge.forEach(t),QPr=i(me),u3=n(me,"LI",{});var uGe=s(u3);rCe=n(uGe,"STRONG",{});var wNt=s(rCe);WPr=r(wNt,"xlnet"),wNt.forEach(t),HPr=r(uGe," \u2014 "),iZ=n(uGe,"A",{href:!0});var ANt=s(iZ);UPr=r(ANt,"TFXLNetForTokenClassification"),ANt.forEach(t),JPr=r(uGe," (XLNet model)"),uGe.forEach(t),me.forEach(t),YPr=i(Ul),T(b3.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),uze=i(f),qc=n(f,"H2",{class:!0});var AWe=s(qc);v3=n(AWe,"A",{id:!0,class:!0,href:!0});var LNt=s(v3);tCe=n(LNt,"SPAN",{});var yNt=s(tCe);T(Xx.$$.fragment,yNt),yNt.forEach(t),LNt.forEach(t),KPr=i(AWe),aCe=n(AWe,"SPAN",{});var xNt=s(aCe);ZPr=r(xNt,"TFAutoModelForQuestionAnswering"),xNt.forEach(t),AWe.forEach(t),bze=i(f),mr=n(f,"DIV",{class:!0});var Jl=s(mr);T(zx.$$.fragment,Jl),eBr=i(Jl),jc=n(Jl,"P",{});var Ote=s(jc);oBr=r(Ote,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dZ=n(Ote,"A",{href:!0});var $Nt=s(dZ);rBr=r($Nt,"from_pretrained()"),$Nt.forEach(t),tBr=r(Ote," class method or the "),cZ=n(Ote,"A",{href:!0});var kNt=s(cZ);aBr=r(kNt,"from_config()"),kNt.forEach(t),nBr=r(Ote,` class
method.`),Ote.forEach(t),sBr=i(Jl),Qx=n(Jl,"P",{});var LWe=s(Qx);lBr=r(LWe,"This class cannot be instantiated directly using "),nCe=n(LWe,"CODE",{});var SNt=s(nCe);iBr=r(SNt,"__init__()"),SNt.forEach(t),dBr=r(LWe," (throws an error)."),LWe.forEach(t),cBr=i(Jl),Vt=n(Jl,"DIV",{class:!0});var M6=s(Vt);T(Wx.$$.fragment,M6),fBr=i(M6),sCe=n(M6,"P",{});var RNt=s(sCe);mBr=r(RNt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),RNt.forEach(t),gBr=i(M6),Dc=n(M6,"P",{});var Vte=s(Dc);hBr=r(Vte,`Note:
Loading a model from its configuration file does `),lCe=n(Vte,"STRONG",{});var PNt=s(lCe);pBr=r(PNt,"not"),PNt.forEach(t),_Br=r(Vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),fZ=n(Vte,"A",{href:!0});var BNt=s(fZ);uBr=r(BNt,"from_pretrained()"),BNt.forEach(t),bBr=r(Vte," to load the model weights."),Vte.forEach(t),vBr=i(M6),T(F3.$$.fragment,M6),M6.forEach(t),FBr=i(Jl),Dr=n(Jl,"DIV",{class:!0});var Yl=s(Dr);T(Hx.$$.fragment,Yl),TBr=i(Yl),iCe=n(Yl,"P",{});var INt=s(iCe);MBr=r(INt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),INt.forEach(t),EBr=i(Yl),bn=n(Yl,"P",{});var E6=s(bn);CBr=r(E6,"The model class to instantiate is selected based on the "),dCe=n(E6,"CODE",{});var NNt=s(dCe);wBr=r(NNt,"model_type"),NNt.forEach(t),ABr=r(E6,` property of the config object (either
passed as an argument or loaded from `),cCe=n(E6,"CODE",{});var qNt=s(cCe);LBr=r(qNt,"pretrained_model_name_or_path"),qNt.forEach(t),yBr=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(E6,"CODE",{});var jNt=s(fCe);xBr=r(jNt,"pretrained_model_name_or_path"),jNt.forEach(t),$Br=r(E6,":"),E6.forEach(t),kBr=i(Yl),ce=n(Yl,"UL",{});var ge=s(ce);T3=n(ge,"LI",{});var bGe=s(T3);mCe=n(bGe,"STRONG",{});var DNt=s(mCe);SBr=r(DNt,"albert"),DNt.forEach(t),RBr=r(bGe," \u2014 "),mZ=n(bGe,"A",{href:!0});var GNt=s(mZ);PBr=r(GNt,"TFAlbertForQuestionAnswering"),GNt.forEach(t),BBr=r(bGe," (ALBERT model)"),bGe.forEach(t),IBr=i(ge),M3=n(ge,"LI",{});var vGe=s(M3);gCe=n(vGe,"STRONG",{});var ONt=s(gCe);NBr=r(ONt,"bert"),ONt.forEach(t),qBr=r(vGe," \u2014 "),gZ=n(vGe,"A",{href:!0});var VNt=s(gZ);jBr=r(VNt,"TFBertForQuestionAnswering"),VNt.forEach(t),DBr=r(vGe," (BERT model)"),vGe.forEach(t),GBr=i(ge),E3=n(ge,"LI",{});var FGe=s(E3);hCe=n(FGe,"STRONG",{});var XNt=s(hCe);OBr=r(XNt,"camembert"),XNt.forEach(t),VBr=r(FGe," \u2014 "),hZ=n(FGe,"A",{href:!0});var zNt=s(hZ);XBr=r(zNt,"TFCamembertForQuestionAnswering"),zNt.forEach(t),zBr=r(FGe," (CamemBERT model)"),FGe.forEach(t),QBr=i(ge),C3=n(ge,"LI",{});var TGe=s(C3);pCe=n(TGe,"STRONG",{});var QNt=s(pCe);WBr=r(QNt,"convbert"),QNt.forEach(t),HBr=r(TGe," \u2014 "),pZ=n(TGe,"A",{href:!0});var WNt=s(pZ);UBr=r(WNt,"TFConvBertForQuestionAnswering"),WNt.forEach(t),JBr=r(TGe," (ConvBERT model)"),TGe.forEach(t),YBr=i(ge),w3=n(ge,"LI",{});var MGe=s(w3);_Ce=n(MGe,"STRONG",{});var HNt=s(_Ce);KBr=r(HNt,"deberta"),HNt.forEach(t),ZBr=r(MGe," \u2014 "),_Z=n(MGe,"A",{href:!0});var UNt=s(_Z);eIr=r(UNt,"TFDebertaForQuestionAnswering"),UNt.forEach(t),oIr=r(MGe," (DeBERTa model)"),MGe.forEach(t),rIr=i(ge),A3=n(ge,"LI",{});var EGe=s(A3);uCe=n(EGe,"STRONG",{});var JNt=s(uCe);tIr=r(JNt,"deberta-v2"),JNt.forEach(t),aIr=r(EGe," \u2014 "),uZ=n(EGe,"A",{href:!0});var YNt=s(uZ);nIr=r(YNt,"TFDebertaV2ForQuestionAnswering"),YNt.forEach(t),sIr=r(EGe," (DeBERTa-v2 model)"),EGe.forEach(t),lIr=i(ge),L3=n(ge,"LI",{});var CGe=s(L3);bCe=n(CGe,"STRONG",{});var KNt=s(bCe);iIr=r(KNt,"distilbert"),KNt.forEach(t),dIr=r(CGe," \u2014 "),bZ=n(CGe,"A",{href:!0});var ZNt=s(bZ);cIr=r(ZNt,"TFDistilBertForQuestionAnswering"),ZNt.forEach(t),fIr=r(CGe," (DistilBERT model)"),CGe.forEach(t),mIr=i(ge),y3=n(ge,"LI",{});var wGe=s(y3);vCe=n(wGe,"STRONG",{});var eqt=s(vCe);gIr=r(eqt,"electra"),eqt.forEach(t),hIr=r(wGe," \u2014 "),vZ=n(wGe,"A",{href:!0});var oqt=s(vZ);pIr=r(oqt,"TFElectraForQuestionAnswering"),oqt.forEach(t),_Ir=r(wGe," (ELECTRA model)"),wGe.forEach(t),uIr=i(ge),x3=n(ge,"LI",{});var AGe=s(x3);FCe=n(AGe,"STRONG",{});var rqt=s(FCe);bIr=r(rqt,"flaubert"),rqt.forEach(t),vIr=r(AGe," \u2014 "),FZ=n(AGe,"A",{href:!0});var tqt=s(FZ);FIr=r(tqt,"TFFlaubertForQuestionAnsweringSimple"),tqt.forEach(t),TIr=r(AGe," (FlauBERT model)"),AGe.forEach(t),MIr=i(ge),$3=n(ge,"LI",{});var LGe=s($3);TCe=n(LGe,"STRONG",{});var aqt=s(TCe);EIr=r(aqt,"funnel"),aqt.forEach(t),CIr=r(LGe," \u2014 "),TZ=n(LGe,"A",{href:!0});var nqt=s(TZ);wIr=r(nqt,"TFFunnelForQuestionAnswering"),nqt.forEach(t),AIr=r(LGe," (Funnel Transformer model)"),LGe.forEach(t),LIr=i(ge),k3=n(ge,"LI",{});var yGe=s(k3);MCe=n(yGe,"STRONG",{});var sqt=s(MCe);yIr=r(sqt,"gptj"),sqt.forEach(t),xIr=r(yGe," \u2014 "),MZ=n(yGe,"A",{href:!0});var lqt=s(MZ);$Ir=r(lqt,"TFGPTJForQuestionAnswering"),lqt.forEach(t),kIr=r(yGe," (GPT-J model)"),yGe.forEach(t),SIr=i(ge),S3=n(ge,"LI",{});var xGe=s(S3);ECe=n(xGe,"STRONG",{});var iqt=s(ECe);RIr=r(iqt,"longformer"),iqt.forEach(t),PIr=r(xGe," \u2014 "),EZ=n(xGe,"A",{href:!0});var dqt=s(EZ);BIr=r(dqt,"TFLongformerForQuestionAnswering"),dqt.forEach(t),IIr=r(xGe," (Longformer model)"),xGe.forEach(t),NIr=i(ge),R3=n(ge,"LI",{});var $Ge=s(R3);CCe=n($Ge,"STRONG",{});var cqt=s(CCe);qIr=r(cqt,"mobilebert"),cqt.forEach(t),jIr=r($Ge," \u2014 "),CZ=n($Ge,"A",{href:!0});var fqt=s(CZ);DIr=r(fqt,"TFMobileBertForQuestionAnswering"),fqt.forEach(t),GIr=r($Ge," (MobileBERT model)"),$Ge.forEach(t),OIr=i(ge),P3=n(ge,"LI",{});var kGe=s(P3);wCe=n(kGe,"STRONG",{});var mqt=s(wCe);VIr=r(mqt,"mpnet"),mqt.forEach(t),XIr=r(kGe," \u2014 "),wZ=n(kGe,"A",{href:!0});var gqt=s(wZ);zIr=r(gqt,"TFMPNetForQuestionAnswering"),gqt.forEach(t),QIr=r(kGe," (MPNet model)"),kGe.forEach(t),WIr=i(ge),B3=n(ge,"LI",{});var SGe=s(B3);ACe=n(SGe,"STRONG",{});var hqt=s(ACe);HIr=r(hqt,"rembert"),hqt.forEach(t),UIr=r(SGe," \u2014 "),AZ=n(SGe,"A",{href:!0});var pqt=s(AZ);JIr=r(pqt,"TFRemBertForQuestionAnswering"),pqt.forEach(t),YIr=r(SGe," (RemBERT model)"),SGe.forEach(t),KIr=i(ge),I3=n(ge,"LI",{});var RGe=s(I3);LCe=n(RGe,"STRONG",{});var _qt=s(LCe);ZIr=r(_qt,"roberta"),_qt.forEach(t),eNr=r(RGe," \u2014 "),LZ=n(RGe,"A",{href:!0});var uqt=s(LZ);oNr=r(uqt,"TFRobertaForQuestionAnswering"),uqt.forEach(t),rNr=r(RGe," (RoBERTa model)"),RGe.forEach(t),tNr=i(ge),N3=n(ge,"LI",{});var PGe=s(N3);yCe=n(PGe,"STRONG",{});var bqt=s(yCe);aNr=r(bqt,"roformer"),bqt.forEach(t),nNr=r(PGe," \u2014 "),yZ=n(PGe,"A",{href:!0});var vqt=s(yZ);sNr=r(vqt,"TFRoFormerForQuestionAnswering"),vqt.forEach(t),lNr=r(PGe," (RoFormer model)"),PGe.forEach(t),iNr=i(ge),q3=n(ge,"LI",{});var BGe=s(q3);xCe=n(BGe,"STRONG",{});var Fqt=s(xCe);dNr=r(Fqt,"xlm"),Fqt.forEach(t),cNr=r(BGe," \u2014 "),xZ=n(BGe,"A",{href:!0});var Tqt=s(xZ);fNr=r(Tqt,"TFXLMForQuestionAnsweringSimple"),Tqt.forEach(t),mNr=r(BGe," (XLM model)"),BGe.forEach(t),gNr=i(ge),j3=n(ge,"LI",{});var IGe=s(j3);$Ce=n(IGe,"STRONG",{});var Mqt=s($Ce);hNr=r(Mqt,"xlm-roberta"),Mqt.forEach(t),pNr=r(IGe," \u2014 "),$Z=n(IGe,"A",{href:!0});var Eqt=s($Z);_Nr=r(Eqt,"TFXLMRobertaForQuestionAnswering"),Eqt.forEach(t),uNr=r(IGe," (XLM-RoBERTa model)"),IGe.forEach(t),bNr=i(ge),D3=n(ge,"LI",{});var NGe=s(D3);kCe=n(NGe,"STRONG",{});var Cqt=s(kCe);vNr=r(Cqt,"xlnet"),Cqt.forEach(t),FNr=r(NGe," \u2014 "),kZ=n(NGe,"A",{href:!0});var wqt=s(kZ);TNr=r(wqt,"TFXLNetForQuestionAnsweringSimple"),wqt.forEach(t),MNr=r(NGe," (XLNet model)"),NGe.forEach(t),ge.forEach(t),ENr=i(Yl),T(G3.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),vze=i(f),Gc=n(f,"H2",{class:!0});var yWe=s(Gc);O3=n(yWe,"A",{id:!0,class:!0,href:!0});var Aqt=s(O3);SCe=n(Aqt,"SPAN",{});var Lqt=s(SCe);T(Ux.$$.fragment,Lqt),Lqt.forEach(t),Aqt.forEach(t),CNr=i(yWe),RCe=n(yWe,"SPAN",{});var yqt=s(RCe);wNr=r(yqt,"TFAutoModelForVision2Seq"),yqt.forEach(t),yWe.forEach(t),Fze=i(f),gr=n(f,"DIV",{class:!0});var Kl=s(gr);T(Jx.$$.fragment,Kl),ANr=i(Kl),Oc=n(Kl,"P",{});var Xte=s(Oc);LNr=r(Xte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),SZ=n(Xte,"A",{href:!0});var xqt=s(SZ);yNr=r(xqt,"from_pretrained()"),xqt.forEach(t),xNr=r(Xte," class method or the "),RZ=n(Xte,"A",{href:!0});var $qt=s(RZ);$Nr=r($qt,"from_config()"),$qt.forEach(t),kNr=r(Xte,` class
method.`),Xte.forEach(t),SNr=i(Kl),Yx=n(Kl,"P",{});var xWe=s(Yx);RNr=r(xWe,"This class cannot be instantiated directly using "),PCe=n(xWe,"CODE",{});var kqt=s(PCe);PNr=r(kqt,"__init__()"),kqt.forEach(t),BNr=r(xWe," (throws an error)."),xWe.forEach(t),INr=i(Kl),Xt=n(Kl,"DIV",{class:!0});var C6=s(Xt);T(Kx.$$.fragment,C6),NNr=i(C6),BCe=n(C6,"P",{});var Sqt=s(BCe);qNr=r(Sqt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Sqt.forEach(t),jNr=i(C6),Vc=n(C6,"P",{});var zte=s(Vc);DNr=r(zte,`Note:
Loading a model from its configuration file does `),ICe=n(zte,"STRONG",{});var Rqt=s(ICe);GNr=r(Rqt,"not"),Rqt.forEach(t),ONr=r(zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(zte,"A",{href:!0});var Pqt=s(PZ);VNr=r(Pqt,"from_pretrained()"),Pqt.forEach(t),XNr=r(zte," to load the model weights."),zte.forEach(t),zNr=i(C6),T(V3.$$.fragment,C6),C6.forEach(t),QNr=i(Kl),Gr=n(Kl,"DIV",{class:!0});var Zl=s(Gr);T(Zx.$$.fragment,Zl),WNr=i(Zl),NCe=n(Zl,"P",{});var Bqt=s(NCe);HNr=r(Bqt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Bqt.forEach(t),UNr=i(Zl),vn=n(Zl,"P",{});var w6=s(vn);JNr=r(w6,"The model class to instantiate is selected based on the "),qCe=n(w6,"CODE",{});var Iqt=s(qCe);YNr=r(Iqt,"model_type"),Iqt.forEach(t),KNr=r(w6,` property of the config object (either
passed as an argument or loaded from `),jCe=n(w6,"CODE",{});var Nqt=s(jCe);ZNr=r(Nqt,"pretrained_model_name_or_path"),Nqt.forEach(t),eqr=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DCe=n(w6,"CODE",{});var qqt=s(DCe);oqr=r(qqt,"pretrained_model_name_or_path"),qqt.forEach(t),rqr=r(w6,":"),w6.forEach(t),tqr=i(Zl),GCe=n(Zl,"UL",{});var jqt=s(GCe);X3=n(jqt,"LI",{});var qGe=s(X3);OCe=n(qGe,"STRONG",{});var Dqt=s(OCe);aqr=r(Dqt,"vision-encoder-decoder"),Dqt.forEach(t),nqr=r(qGe," \u2014 "),BZ=n(qGe,"A",{href:!0});var Gqt=s(BZ);sqr=r(Gqt,"TFVisionEncoderDecoderModel"),Gqt.forEach(t),lqr=r(qGe," (Vision Encoder decoder model)"),qGe.forEach(t),jqt.forEach(t),iqr=i(Zl),T(z3.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),Tze=i(f),Xc=n(f,"H2",{class:!0});var $We=s(Xc);Q3=n($We,"A",{id:!0,class:!0,href:!0});var Oqt=s(Q3);VCe=n(Oqt,"SPAN",{});var Vqt=s(VCe);T(e$.$$.fragment,Vqt),Vqt.forEach(t),Oqt.forEach(t),dqr=i($We),XCe=n($We,"SPAN",{});var Xqt=s(XCe);cqr=r(Xqt,"TFAutoModelForSpeechSeq2Seq"),Xqt.forEach(t),$We.forEach(t),Mze=i(f),hr=n(f,"DIV",{class:!0});var ei=s(hr);T(o$.$$.fragment,ei),fqr=i(ei),zc=n(ei,"P",{});var Qte=s(zc);mqr=r(Qte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IZ=n(Qte,"A",{href:!0});var zqt=s(IZ);gqr=r(zqt,"from_pretrained()"),zqt.forEach(t),hqr=r(Qte," class method or the "),NZ=n(Qte,"A",{href:!0});var Qqt=s(NZ);pqr=r(Qqt,"from_config()"),Qqt.forEach(t),_qr=r(Qte,` class
method.`),Qte.forEach(t),uqr=i(ei),r$=n(ei,"P",{});var kWe=s(r$);bqr=r(kWe,"This class cannot be instantiated directly using "),zCe=n(kWe,"CODE",{});var Wqt=s(zCe);vqr=r(Wqt,"__init__()"),Wqt.forEach(t),Fqr=r(kWe," (throws an error)."),kWe.forEach(t),Tqr=i(ei),zt=n(ei,"DIV",{class:!0});var A6=s(zt);T(t$.$$.fragment,A6),Mqr=i(A6),QCe=n(A6,"P",{});var Hqt=s(QCe);Eqr=r(Hqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hqt.forEach(t),Cqr=i(A6),Qc=n(A6,"P",{});var Wte=s(Qc);wqr=r(Wte,`Note:
Loading a model from its configuration file does `),WCe=n(Wte,"STRONG",{});var Uqt=s(WCe);Aqr=r(Uqt,"not"),Uqt.forEach(t),Lqr=r(Wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qZ=n(Wte,"A",{href:!0});var Jqt=s(qZ);yqr=r(Jqt,"from_pretrained()"),Jqt.forEach(t),xqr=r(Wte," to load the model weights."),Wte.forEach(t),$qr=i(A6),T(W3.$$.fragment,A6),A6.forEach(t),kqr=i(ei),Or=n(ei,"DIV",{class:!0});var oi=s(Or);T(a$.$$.fragment,oi),Sqr=i(oi),HCe=n(oi,"P",{});var Yqt=s(HCe);Rqr=r(Yqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Yqt.forEach(t),Pqr=i(oi),Fn=n(oi,"P",{});var L6=s(Fn);Bqr=r(L6,"The model class to instantiate is selected based on the "),UCe=n(L6,"CODE",{});var Kqt=s(UCe);Iqr=r(Kqt,"model_type"),Kqt.forEach(t),Nqr=r(L6,` property of the config object (either
passed as an argument or loaded from `),JCe=n(L6,"CODE",{});var Zqt=s(JCe);qqr=r(Zqt,"pretrained_model_name_or_path"),Zqt.forEach(t),jqr=r(L6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YCe=n(L6,"CODE",{});var ejt=s(YCe);Dqr=r(ejt,"pretrained_model_name_or_path"),ejt.forEach(t),Gqr=r(L6,":"),L6.forEach(t),Oqr=i(oi),KCe=n(oi,"UL",{});var ojt=s(KCe);H3=n(ojt,"LI",{});var jGe=s(H3);ZCe=n(jGe,"STRONG",{});var rjt=s(ZCe);Vqr=r(rjt,"speech_to_text"),rjt.forEach(t),Xqr=r(jGe," \u2014 "),jZ=n(jGe,"A",{href:!0});var tjt=s(jZ);zqr=r(tjt,"TFSpeech2TextForConditionalGeneration"),tjt.forEach(t),Qqr=r(jGe," (Speech2Text model)"),jGe.forEach(t),ojt.forEach(t),Wqr=i(oi),T(U3.$$.fragment,oi),oi.forEach(t),ei.forEach(t),Eze=i(f),Wc=n(f,"H2",{class:!0});var SWe=s(Wc);J3=n(SWe,"A",{id:!0,class:!0,href:!0});var ajt=s(J3);e3e=n(ajt,"SPAN",{});var njt=s(e3e);T(n$.$$.fragment,njt),njt.forEach(t),ajt.forEach(t),Hqr=i(SWe),o3e=n(SWe,"SPAN",{});var sjt=s(o3e);Uqr=r(sjt,"FlaxAutoModel"),sjt.forEach(t),SWe.forEach(t),Cze=i(f),pr=n(f,"DIV",{class:!0});var ri=s(pr);T(s$.$$.fragment,ri),Jqr=i(ri),Hc=n(ri,"P",{});var Hte=s(Hc);Yqr=r(Hte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DZ=n(Hte,"A",{href:!0});var ljt=s(DZ);Kqr=r(ljt,"from_pretrained()"),ljt.forEach(t),Zqr=r(Hte," class method or the "),GZ=n(Hte,"A",{href:!0});var ijt=s(GZ);ejr=r(ijt,"from_config()"),ijt.forEach(t),ojr=r(Hte,` class
method.`),Hte.forEach(t),rjr=i(ri),l$=n(ri,"P",{});var RWe=s(l$);tjr=r(RWe,"This class cannot be instantiated directly using "),r3e=n(RWe,"CODE",{});var djt=s(r3e);ajr=r(djt,"__init__()"),djt.forEach(t),njr=r(RWe," (throws an error)."),RWe.forEach(t),sjr=i(ri),Qt=n(ri,"DIV",{class:!0});var y6=s(Qt);T(i$.$$.fragment,y6),ljr=i(y6),t3e=n(y6,"P",{});var cjt=s(t3e);ijr=r(cjt,"Instantiates one of the base model classes of the library from a configuration."),cjt.forEach(t),djr=i(y6),Uc=n(y6,"P",{});var Ute=s(Uc);cjr=r(Ute,`Note:
Loading a model from its configuration file does `),a3e=n(Ute,"STRONG",{});var fjt=s(a3e);fjr=r(fjt,"not"),fjt.forEach(t),mjr=r(Ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),OZ=n(Ute,"A",{href:!0});var mjt=s(OZ);gjr=r(mjt,"from_pretrained()"),mjt.forEach(t),hjr=r(Ute," to load the model weights."),Ute.forEach(t),pjr=i(y6),T(Y3.$$.fragment,y6),y6.forEach(t),_jr=i(ri),Vr=n(ri,"DIV",{class:!0});var ti=s(Vr);T(d$.$$.fragment,ti),ujr=i(ti),n3e=n(ti,"P",{});var gjt=s(n3e);bjr=r(gjt,"Instantiate one of the base model classes of the library from a pretrained model."),gjt.forEach(t),vjr=i(ti),Tn=n(ti,"P",{});var x6=s(Tn);Fjr=r(x6,"The model class to instantiate is selected based on the "),s3e=n(x6,"CODE",{});var hjt=s(s3e);Tjr=r(hjt,"model_type"),hjt.forEach(t),Mjr=r(x6,` property of the config object (either
passed as an argument or loaded from `),l3e=n(x6,"CODE",{});var pjt=s(l3e);Ejr=r(pjt,"pretrained_model_name_or_path"),pjt.forEach(t),Cjr=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i3e=n(x6,"CODE",{});var _jt=s(i3e);wjr=r(_jt,"pretrained_model_name_or_path"),_jt.forEach(t),Ajr=r(x6,":"),x6.forEach(t),Ljr=i(ti),oe=n(ti,"UL",{});var ae=s(oe);K3=n(ae,"LI",{});var DGe=s(K3);d3e=n(DGe,"STRONG",{});var ujt=s(d3e);yjr=r(ujt,"albert"),ujt.forEach(t),xjr=r(DGe," \u2014 "),VZ=n(DGe,"A",{href:!0});var bjt=s(VZ);$jr=r(bjt,"FlaxAlbertModel"),bjt.forEach(t),kjr=r(DGe," (ALBERT model)"),DGe.forEach(t),Sjr=i(ae),Z3=n(ae,"LI",{});var GGe=s(Z3);c3e=n(GGe,"STRONG",{});var vjt=s(c3e);Rjr=r(vjt,"bart"),vjt.forEach(t),Pjr=r(GGe," \u2014 "),XZ=n(GGe,"A",{href:!0});var Fjt=s(XZ);Bjr=r(Fjt,"FlaxBartModel"),Fjt.forEach(t),Ijr=r(GGe," (BART model)"),GGe.forEach(t),Njr=i(ae),e5=n(ae,"LI",{});var OGe=s(e5);f3e=n(OGe,"STRONG",{});var Tjt=s(f3e);qjr=r(Tjt,"beit"),Tjt.forEach(t),jjr=r(OGe," \u2014 "),zZ=n(OGe,"A",{href:!0});var Mjt=s(zZ);Djr=r(Mjt,"FlaxBeitModel"),Mjt.forEach(t),Gjr=r(OGe," (BEiT model)"),OGe.forEach(t),Ojr=i(ae),o5=n(ae,"LI",{});var VGe=s(o5);m3e=n(VGe,"STRONG",{});var Ejt=s(m3e);Vjr=r(Ejt,"bert"),Ejt.forEach(t),Xjr=r(VGe," \u2014 "),QZ=n(VGe,"A",{href:!0});var Cjt=s(QZ);zjr=r(Cjt,"FlaxBertModel"),Cjt.forEach(t),Qjr=r(VGe," (BERT model)"),VGe.forEach(t),Wjr=i(ae),r5=n(ae,"LI",{});var XGe=s(r5);g3e=n(XGe,"STRONG",{});var wjt=s(g3e);Hjr=r(wjt,"big_bird"),wjt.forEach(t),Ujr=r(XGe," \u2014 "),WZ=n(XGe,"A",{href:!0});var Ajt=s(WZ);Jjr=r(Ajt,"FlaxBigBirdModel"),Ajt.forEach(t),Yjr=r(XGe," (BigBird model)"),XGe.forEach(t),Kjr=i(ae),t5=n(ae,"LI",{});var zGe=s(t5);h3e=n(zGe,"STRONG",{});var Ljt=s(h3e);Zjr=r(Ljt,"blenderbot"),Ljt.forEach(t),eDr=r(zGe," \u2014 "),HZ=n(zGe,"A",{href:!0});var yjt=s(HZ);oDr=r(yjt,"FlaxBlenderbotModel"),yjt.forEach(t),rDr=r(zGe," (Blenderbot model)"),zGe.forEach(t),tDr=i(ae),a5=n(ae,"LI",{});var QGe=s(a5);p3e=n(QGe,"STRONG",{});var xjt=s(p3e);aDr=r(xjt,"blenderbot-small"),xjt.forEach(t),nDr=r(QGe," \u2014 "),UZ=n(QGe,"A",{href:!0});var $jt=s(UZ);sDr=r($jt,"FlaxBlenderbotSmallModel"),$jt.forEach(t),lDr=r(QGe," (BlenderbotSmall model)"),QGe.forEach(t),iDr=i(ae),n5=n(ae,"LI",{});var WGe=s(n5);_3e=n(WGe,"STRONG",{});var kjt=s(_3e);dDr=r(kjt,"clip"),kjt.forEach(t),cDr=r(WGe," \u2014 "),JZ=n(WGe,"A",{href:!0});var Sjt=s(JZ);fDr=r(Sjt,"FlaxCLIPModel"),Sjt.forEach(t),mDr=r(WGe," (CLIP model)"),WGe.forEach(t),gDr=i(ae),s5=n(ae,"LI",{});var HGe=s(s5);u3e=n(HGe,"STRONG",{});var Rjt=s(u3e);hDr=r(Rjt,"distilbert"),Rjt.forEach(t),pDr=r(HGe," \u2014 "),YZ=n(HGe,"A",{href:!0});var Pjt=s(YZ);_Dr=r(Pjt,"FlaxDistilBertModel"),Pjt.forEach(t),uDr=r(HGe," (DistilBERT model)"),HGe.forEach(t),bDr=i(ae),l5=n(ae,"LI",{});var UGe=s(l5);b3e=n(UGe,"STRONG",{});var Bjt=s(b3e);vDr=r(Bjt,"electra"),Bjt.forEach(t),FDr=r(UGe," \u2014 "),KZ=n(UGe,"A",{href:!0});var Ijt=s(KZ);TDr=r(Ijt,"FlaxElectraModel"),Ijt.forEach(t),MDr=r(UGe," (ELECTRA model)"),UGe.forEach(t),EDr=i(ae),i5=n(ae,"LI",{});var JGe=s(i5);v3e=n(JGe,"STRONG",{});var Njt=s(v3e);CDr=r(Njt,"gpt2"),Njt.forEach(t),wDr=r(JGe," \u2014 "),ZZ=n(JGe,"A",{href:!0});var qjt=s(ZZ);ADr=r(qjt,"FlaxGPT2Model"),qjt.forEach(t),LDr=r(JGe," (OpenAI GPT-2 model)"),JGe.forEach(t),yDr=i(ae),d5=n(ae,"LI",{});var YGe=s(d5);F3e=n(YGe,"STRONG",{});var jjt=s(F3e);xDr=r(jjt,"gpt_neo"),jjt.forEach(t),$Dr=r(YGe," \u2014 "),eee=n(YGe,"A",{href:!0});var Djt=s(eee);kDr=r(Djt,"FlaxGPTNeoModel"),Djt.forEach(t),SDr=r(YGe," (GPT Neo model)"),YGe.forEach(t),RDr=i(ae),c5=n(ae,"LI",{});var KGe=s(c5);T3e=n(KGe,"STRONG",{});var Gjt=s(T3e);PDr=r(Gjt,"gptj"),Gjt.forEach(t),BDr=r(KGe," \u2014 "),oee=n(KGe,"A",{href:!0});var Ojt=s(oee);IDr=r(Ojt,"FlaxGPTJModel"),Ojt.forEach(t),NDr=r(KGe," (GPT-J model)"),KGe.forEach(t),qDr=i(ae),f5=n(ae,"LI",{});var ZGe=s(f5);M3e=n(ZGe,"STRONG",{});var Vjt=s(M3e);jDr=r(Vjt,"longt5"),Vjt.forEach(t),DDr=r(ZGe," \u2014 "),ree=n(ZGe,"A",{href:!0});var Xjt=s(ree);GDr=r(Xjt,"FlaxLongT5Model"),Xjt.forEach(t),ODr=r(ZGe," (LongT5 model)"),ZGe.forEach(t),VDr=i(ae),m5=n(ae,"LI",{});var eOe=s(m5);E3e=n(eOe,"STRONG",{});var zjt=s(E3e);XDr=r(zjt,"marian"),zjt.forEach(t),zDr=r(eOe," \u2014 "),tee=n(eOe,"A",{href:!0});var Qjt=s(tee);QDr=r(Qjt,"FlaxMarianModel"),Qjt.forEach(t),WDr=r(eOe," (Marian model)"),eOe.forEach(t),HDr=i(ae),g5=n(ae,"LI",{});var oOe=s(g5);C3e=n(oOe,"STRONG",{});var Wjt=s(C3e);UDr=r(Wjt,"mbart"),Wjt.forEach(t),JDr=r(oOe," \u2014 "),aee=n(oOe,"A",{href:!0});var Hjt=s(aee);YDr=r(Hjt,"FlaxMBartModel"),Hjt.forEach(t),KDr=r(oOe," (mBART model)"),oOe.forEach(t),ZDr=i(ae),h5=n(ae,"LI",{});var rOe=s(h5);w3e=n(rOe,"STRONG",{});var Ujt=s(w3e);eGr=r(Ujt,"mt5"),Ujt.forEach(t),oGr=r(rOe," \u2014 "),nee=n(rOe,"A",{href:!0});var Jjt=s(nee);rGr=r(Jjt,"FlaxMT5Model"),Jjt.forEach(t),tGr=r(rOe," (MT5 model)"),rOe.forEach(t),aGr=i(ae),p5=n(ae,"LI",{});var tOe=s(p5);A3e=n(tOe,"STRONG",{});var Yjt=s(A3e);nGr=r(Yjt,"opt"),Yjt.forEach(t),sGr=r(tOe," \u2014 "),see=n(tOe,"A",{href:!0});var Kjt=s(see);lGr=r(Kjt,"FlaxOPTModel"),Kjt.forEach(t),iGr=r(tOe," (OPT model)"),tOe.forEach(t),dGr=i(ae),_5=n(ae,"LI",{});var aOe=s(_5);L3e=n(aOe,"STRONG",{});var Zjt=s(L3e);cGr=r(Zjt,"pegasus"),Zjt.forEach(t),fGr=r(aOe," \u2014 "),lee=n(aOe,"A",{href:!0});var eDt=s(lee);mGr=r(eDt,"FlaxPegasusModel"),eDt.forEach(t),gGr=r(aOe," (Pegasus model)"),aOe.forEach(t),hGr=i(ae),u5=n(ae,"LI",{});var nOe=s(u5);y3e=n(nOe,"STRONG",{});var oDt=s(y3e);pGr=r(oDt,"roberta"),oDt.forEach(t),_Gr=r(nOe," \u2014 "),iee=n(nOe,"A",{href:!0});var rDt=s(iee);uGr=r(rDt,"FlaxRobertaModel"),rDt.forEach(t),bGr=r(nOe," (RoBERTa model)"),nOe.forEach(t),vGr=i(ae),b5=n(ae,"LI",{});var sOe=s(b5);x3e=n(sOe,"STRONG",{});var tDt=s(x3e);FGr=r(tDt,"roformer"),tDt.forEach(t),TGr=r(sOe," \u2014 "),dee=n(sOe,"A",{href:!0});var aDt=s(dee);MGr=r(aDt,"FlaxRoFormerModel"),aDt.forEach(t),EGr=r(sOe," (RoFormer model)"),sOe.forEach(t),CGr=i(ae),v5=n(ae,"LI",{});var lOe=s(v5);$3e=n(lOe,"STRONG",{});var nDt=s($3e);wGr=r(nDt,"t5"),nDt.forEach(t),AGr=r(lOe," \u2014 "),cee=n(lOe,"A",{href:!0});var sDt=s(cee);LGr=r(sDt,"FlaxT5Model"),sDt.forEach(t),yGr=r(lOe," (T5 model)"),lOe.forEach(t),xGr=i(ae),F5=n(ae,"LI",{});var iOe=s(F5);k3e=n(iOe,"STRONG",{});var lDt=s(k3e);$Gr=r(lDt,"vision-text-dual-encoder"),lDt.forEach(t),kGr=r(iOe," \u2014 "),fee=n(iOe,"A",{href:!0});var iDt=s(fee);SGr=r(iDt,"FlaxVisionTextDualEncoderModel"),iDt.forEach(t),RGr=r(iOe," (VisionTextDualEncoder model)"),iOe.forEach(t),PGr=i(ae),T5=n(ae,"LI",{});var dOe=s(T5);S3e=n(dOe,"STRONG",{});var dDt=s(S3e);BGr=r(dDt,"vit"),dDt.forEach(t),IGr=r(dOe," \u2014 "),mee=n(dOe,"A",{href:!0});var cDt=s(mee);NGr=r(cDt,"FlaxViTModel"),cDt.forEach(t),qGr=r(dOe," (ViT model)"),dOe.forEach(t),jGr=i(ae),M5=n(ae,"LI",{});var cOe=s(M5);R3e=n(cOe,"STRONG",{});var fDt=s(R3e);DGr=r(fDt,"wav2vec2"),fDt.forEach(t),GGr=r(cOe," \u2014 "),gee=n(cOe,"A",{href:!0});var mDt=s(gee);OGr=r(mDt,"FlaxWav2Vec2Model"),mDt.forEach(t),VGr=r(cOe," (Wav2Vec2 model)"),cOe.forEach(t),XGr=i(ae),E5=n(ae,"LI",{});var fOe=s(E5);P3e=n(fOe,"STRONG",{});var gDt=s(P3e);zGr=r(gDt,"xglm"),gDt.forEach(t),QGr=r(fOe," \u2014 "),hee=n(fOe,"A",{href:!0});var hDt=s(hee);WGr=r(hDt,"FlaxXGLMModel"),hDt.forEach(t),HGr=r(fOe," (XGLM model)"),fOe.forEach(t),UGr=i(ae),C5=n(ae,"LI",{});var mOe=s(C5);B3e=n(mOe,"STRONG",{});var pDt=s(B3e);JGr=r(pDt,"xlm-roberta"),pDt.forEach(t),YGr=r(mOe," \u2014 "),pee=n(mOe,"A",{href:!0});var _Dt=s(pee);KGr=r(_Dt,"FlaxXLMRobertaModel"),_Dt.forEach(t),ZGr=r(mOe," (XLM-RoBERTa model)"),mOe.forEach(t),ae.forEach(t),eOr=i(ti),T(w5.$$.fragment,ti),ti.forEach(t),ri.forEach(t),wze=i(f),Jc=n(f,"H2",{class:!0});var PWe=s(Jc);A5=n(PWe,"A",{id:!0,class:!0,href:!0});var uDt=s(A5);I3e=n(uDt,"SPAN",{});var bDt=s(I3e);T(c$.$$.fragment,bDt),bDt.forEach(t),uDt.forEach(t),oOr=i(PWe),N3e=n(PWe,"SPAN",{});var vDt=s(N3e);rOr=r(vDt,"FlaxAutoModelForCausalLM"),vDt.forEach(t),PWe.forEach(t),Aze=i(f),_r=n(f,"DIV",{class:!0});var ai=s(_r);T(f$.$$.fragment,ai),tOr=i(ai),Yc=n(ai,"P",{});var Jte=s(Yc);aOr=r(Jte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),_ee=n(Jte,"A",{href:!0});var FDt=s(_ee);nOr=r(FDt,"from_pretrained()"),FDt.forEach(t),sOr=r(Jte," class method or the "),uee=n(Jte,"A",{href:!0});var TDt=s(uee);lOr=r(TDt,"from_config()"),TDt.forEach(t),iOr=r(Jte,` class
method.`),Jte.forEach(t),dOr=i(ai),m$=n(ai,"P",{});var BWe=s(m$);cOr=r(BWe,"This class cannot be instantiated directly using "),q3e=n(BWe,"CODE",{});var MDt=s(q3e);fOr=r(MDt,"__init__()"),MDt.forEach(t),mOr=r(BWe," (throws an error)."),BWe.forEach(t),gOr=i(ai),Wt=n(ai,"DIV",{class:!0});var $6=s(Wt);T(g$.$$.fragment,$6),hOr=i($6),j3e=n($6,"P",{});var EDt=s(j3e);pOr=r(EDt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),EDt.forEach(t),_Or=i($6),Kc=n($6,"P",{});var Yte=s(Kc);uOr=r(Yte,`Note:
Loading a model from its configuration file does `),D3e=n(Yte,"STRONG",{});var CDt=s(D3e);bOr=r(CDt,"not"),CDt.forEach(t),vOr=r(Yte,` load the model weights. It only affects the
model\u2019s configuration. Use `),bee=n(Yte,"A",{href:!0});var wDt=s(bee);FOr=r(wDt,"from_pretrained()"),wDt.forEach(t),TOr=r(Yte," to load the model weights."),Yte.forEach(t),MOr=i($6),T(L5.$$.fragment,$6),$6.forEach(t),EOr=i(ai),Xr=n(ai,"DIV",{class:!0});var ni=s(Xr);T(h$.$$.fragment,ni),COr=i(ni),G3e=n(ni,"P",{});var ADt=s(G3e);wOr=r(ADt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ADt.forEach(t),AOr=i(ni),Mn=n(ni,"P",{});var k6=s(Mn);LOr=r(k6,"The model class to instantiate is selected based on the "),O3e=n(k6,"CODE",{});var LDt=s(O3e);yOr=r(LDt,"model_type"),LDt.forEach(t),xOr=r(k6,` property of the config object (either
passed as an argument or loaded from `),V3e=n(k6,"CODE",{});var yDt=s(V3e);$Or=r(yDt,"pretrained_model_name_or_path"),yDt.forEach(t),kOr=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(k6,"CODE",{});var xDt=s(X3e);SOr=r(xDt,"pretrained_model_name_or_path"),xDt.forEach(t),ROr=r(k6,":"),k6.forEach(t),POr=i(ni),xe=n(ni,"UL",{});var Ne=s(xe);y5=n(Ne,"LI",{});var gOe=s(y5);z3e=n(gOe,"STRONG",{});var $Dt=s(z3e);BOr=r($Dt,"bart"),$Dt.forEach(t),IOr=r(gOe," \u2014 "),vee=n(gOe,"A",{href:!0});var kDt=s(vee);NOr=r(kDt,"FlaxBartForCausalLM"),kDt.forEach(t),qOr=r(gOe," (BART model)"),gOe.forEach(t),jOr=i(Ne),x5=n(Ne,"LI",{});var hOe=s(x5);Q3e=n(hOe,"STRONG",{});var SDt=s(Q3e);DOr=r(SDt,"bert"),SDt.forEach(t),GOr=r(hOe," \u2014 "),Fee=n(hOe,"A",{href:!0});var RDt=s(Fee);OOr=r(RDt,"FlaxBertForCausalLM"),RDt.forEach(t),VOr=r(hOe," (BERT model)"),hOe.forEach(t),XOr=i(Ne),$5=n(Ne,"LI",{});var pOe=s($5);W3e=n(pOe,"STRONG",{});var PDt=s(W3e);zOr=r(PDt,"big_bird"),PDt.forEach(t),QOr=r(pOe," \u2014 "),Tee=n(pOe,"A",{href:!0});var BDt=s(Tee);WOr=r(BDt,"FlaxBigBirdForCausalLM"),BDt.forEach(t),HOr=r(pOe," (BigBird model)"),pOe.forEach(t),UOr=i(Ne),k5=n(Ne,"LI",{});var _Oe=s(k5);H3e=n(_Oe,"STRONG",{});var IDt=s(H3e);JOr=r(IDt,"electra"),IDt.forEach(t),YOr=r(_Oe," \u2014 "),Mee=n(_Oe,"A",{href:!0});var NDt=s(Mee);KOr=r(NDt,"FlaxElectraForCausalLM"),NDt.forEach(t),ZOr=r(_Oe," (ELECTRA model)"),_Oe.forEach(t),eVr=i(Ne),S5=n(Ne,"LI",{});var uOe=s(S5);U3e=n(uOe,"STRONG",{});var qDt=s(U3e);oVr=r(qDt,"gpt2"),qDt.forEach(t),rVr=r(uOe," \u2014 "),Eee=n(uOe,"A",{href:!0});var jDt=s(Eee);tVr=r(jDt,"FlaxGPT2LMHeadModel"),jDt.forEach(t),aVr=r(uOe," (OpenAI GPT-2 model)"),uOe.forEach(t),nVr=i(Ne),R5=n(Ne,"LI",{});var bOe=s(R5);J3e=n(bOe,"STRONG",{});var DDt=s(J3e);sVr=r(DDt,"gpt_neo"),DDt.forEach(t),lVr=r(bOe," \u2014 "),Cee=n(bOe,"A",{href:!0});var GDt=s(Cee);iVr=r(GDt,"FlaxGPTNeoForCausalLM"),GDt.forEach(t),dVr=r(bOe," (GPT Neo model)"),bOe.forEach(t),cVr=i(Ne),P5=n(Ne,"LI",{});var vOe=s(P5);Y3e=n(vOe,"STRONG",{});var ODt=s(Y3e);fVr=r(ODt,"gptj"),ODt.forEach(t),mVr=r(vOe," \u2014 "),wee=n(vOe,"A",{href:!0});var VDt=s(wee);gVr=r(VDt,"FlaxGPTJForCausalLM"),VDt.forEach(t),hVr=r(vOe," (GPT-J model)"),vOe.forEach(t),pVr=i(Ne),B5=n(Ne,"LI",{});var FOe=s(B5);K3e=n(FOe,"STRONG",{});var XDt=s(K3e);_Vr=r(XDt,"opt"),XDt.forEach(t),uVr=r(FOe," \u2014 "),Aee=n(FOe,"A",{href:!0});var zDt=s(Aee);bVr=r(zDt,"FlaxOPTForCausalLM"),zDt.forEach(t),vVr=r(FOe," (OPT model)"),FOe.forEach(t),FVr=i(Ne),I5=n(Ne,"LI",{});var TOe=s(I5);Z3e=n(TOe,"STRONG",{});var QDt=s(Z3e);TVr=r(QDt,"roberta"),QDt.forEach(t),MVr=r(TOe," \u2014 "),Lee=n(TOe,"A",{href:!0});var WDt=s(Lee);EVr=r(WDt,"FlaxRobertaForCausalLM"),WDt.forEach(t),CVr=r(TOe," (RoBERTa model)"),TOe.forEach(t),wVr=i(Ne),N5=n(Ne,"LI",{});var MOe=s(N5);e5e=n(MOe,"STRONG",{});var HDt=s(e5e);AVr=r(HDt,"xglm"),HDt.forEach(t),LVr=r(MOe," \u2014 "),yee=n(MOe,"A",{href:!0});var UDt=s(yee);yVr=r(UDt,"FlaxXGLMForCausalLM"),UDt.forEach(t),xVr=r(MOe," (XGLM model)"),MOe.forEach(t),Ne.forEach(t),$Vr=i(ni),T(q5.$$.fragment,ni),ni.forEach(t),ai.forEach(t),Lze=i(f),Zc=n(f,"H2",{class:!0});var IWe=s(Zc);j5=n(IWe,"A",{id:!0,class:!0,href:!0});var JDt=s(j5);o5e=n(JDt,"SPAN",{});var YDt=s(o5e);T(p$.$$.fragment,YDt),YDt.forEach(t),JDt.forEach(t),kVr=i(IWe),r5e=n(IWe,"SPAN",{});var KDt=s(r5e);SVr=r(KDt,"FlaxAutoModelForPreTraining"),KDt.forEach(t),IWe.forEach(t),yze=i(f),ur=n(f,"DIV",{class:!0});var si=s(ur);T(_$.$$.fragment,si),RVr=i(si),ef=n(si,"P",{});var Kte=s(ef);PVr=r(Kte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),xee=n(Kte,"A",{href:!0});var ZDt=s(xee);BVr=r(ZDt,"from_pretrained()"),ZDt.forEach(t),IVr=r(Kte," class method or the "),$ee=n(Kte,"A",{href:!0});var eGt=s($ee);NVr=r(eGt,"from_config()"),eGt.forEach(t),qVr=r(Kte,` class
method.`),Kte.forEach(t),jVr=i(si),u$=n(si,"P",{});var NWe=s(u$);DVr=r(NWe,"This class cannot be instantiated directly using "),t5e=n(NWe,"CODE",{});var oGt=s(t5e);GVr=r(oGt,"__init__()"),oGt.forEach(t),OVr=r(NWe," (throws an error)."),NWe.forEach(t),VVr=i(si),Ht=n(si,"DIV",{class:!0});var S6=s(Ht);T(b$.$$.fragment,S6),XVr=i(S6),a5e=n(S6,"P",{});var rGt=s(a5e);zVr=r(rGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rGt.forEach(t),QVr=i(S6),of=n(S6,"P",{});var Zte=s(of);WVr=r(Zte,`Note:
Loading a model from its configuration file does `),n5e=n(Zte,"STRONG",{});var tGt=s(n5e);HVr=r(tGt,"not"),tGt.forEach(t),UVr=r(Zte,` load the model weights. It only affects the
model\u2019s configuration. Use `),kee=n(Zte,"A",{href:!0});var aGt=s(kee);JVr=r(aGt,"from_pretrained()"),aGt.forEach(t),YVr=r(Zte," to load the model weights."),Zte.forEach(t),KVr=i(S6),T(D5.$$.fragment,S6),S6.forEach(t),ZVr=i(si),zr=n(si,"DIV",{class:!0});var li=s(zr);T(v$.$$.fragment,li),eXr=i(li),s5e=n(li,"P",{});var nGt=s(s5e);oXr=r(nGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),nGt.forEach(t),rXr=i(li),En=n(li,"P",{});var R6=s(En);tXr=r(R6,"The model class to instantiate is selected based on the "),l5e=n(R6,"CODE",{});var sGt=s(l5e);aXr=r(sGt,"model_type"),sGt.forEach(t),nXr=r(R6,` property of the config object (either
passed as an argument or loaded from `),i5e=n(R6,"CODE",{});var lGt=s(i5e);sXr=r(lGt,"pretrained_model_name_or_path"),lGt.forEach(t),lXr=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(R6,"CODE",{});var iGt=s(d5e);iXr=r(iGt,"pretrained_model_name_or_path"),iGt.forEach(t),dXr=r(R6,":"),R6.forEach(t),cXr=i(li),Ee=n(li,"UL",{});var we=s(Ee);G5=n(we,"LI",{});var EOe=s(G5);c5e=n(EOe,"STRONG",{});var dGt=s(c5e);fXr=r(dGt,"albert"),dGt.forEach(t),mXr=r(EOe," \u2014 "),See=n(EOe,"A",{href:!0});var cGt=s(See);gXr=r(cGt,"FlaxAlbertForPreTraining"),cGt.forEach(t),hXr=r(EOe," (ALBERT model)"),EOe.forEach(t),pXr=i(we),O5=n(we,"LI",{});var COe=s(O5);f5e=n(COe,"STRONG",{});var fGt=s(f5e);_Xr=r(fGt,"bart"),fGt.forEach(t),uXr=r(COe," \u2014 "),Ree=n(COe,"A",{href:!0});var mGt=s(Ree);bXr=r(mGt,"FlaxBartForConditionalGeneration"),mGt.forEach(t),vXr=r(COe," (BART model)"),COe.forEach(t),FXr=i(we),V5=n(we,"LI",{});var wOe=s(V5);m5e=n(wOe,"STRONG",{});var gGt=s(m5e);TXr=r(gGt,"bert"),gGt.forEach(t),MXr=r(wOe," \u2014 "),Pee=n(wOe,"A",{href:!0});var hGt=s(Pee);EXr=r(hGt,"FlaxBertForPreTraining"),hGt.forEach(t),CXr=r(wOe," (BERT model)"),wOe.forEach(t),wXr=i(we),X5=n(we,"LI",{});var AOe=s(X5);g5e=n(AOe,"STRONG",{});var pGt=s(g5e);AXr=r(pGt,"big_bird"),pGt.forEach(t),LXr=r(AOe," \u2014 "),Bee=n(AOe,"A",{href:!0});var _Gt=s(Bee);yXr=r(_Gt,"FlaxBigBirdForPreTraining"),_Gt.forEach(t),xXr=r(AOe," (BigBird model)"),AOe.forEach(t),$Xr=i(we),z5=n(we,"LI",{});var LOe=s(z5);h5e=n(LOe,"STRONG",{});var uGt=s(h5e);kXr=r(uGt,"electra"),uGt.forEach(t),SXr=r(LOe," \u2014 "),Iee=n(LOe,"A",{href:!0});var bGt=s(Iee);RXr=r(bGt,"FlaxElectraForPreTraining"),bGt.forEach(t),PXr=r(LOe," (ELECTRA model)"),LOe.forEach(t),BXr=i(we),Q5=n(we,"LI",{});var yOe=s(Q5);p5e=n(yOe,"STRONG",{});var vGt=s(p5e);IXr=r(vGt,"longt5"),vGt.forEach(t),NXr=r(yOe," \u2014 "),Nee=n(yOe,"A",{href:!0});var FGt=s(Nee);qXr=r(FGt,"FlaxLongT5ForConditionalGeneration"),FGt.forEach(t),jXr=r(yOe," (LongT5 model)"),yOe.forEach(t),DXr=i(we),W5=n(we,"LI",{});var xOe=s(W5);_5e=n(xOe,"STRONG",{});var TGt=s(_5e);GXr=r(TGt,"mbart"),TGt.forEach(t),OXr=r(xOe," \u2014 "),qee=n(xOe,"A",{href:!0});var MGt=s(qee);VXr=r(MGt,"FlaxMBartForConditionalGeneration"),MGt.forEach(t),XXr=r(xOe," (mBART model)"),xOe.forEach(t),zXr=i(we),H5=n(we,"LI",{});var $Oe=s(H5);u5e=n($Oe,"STRONG",{});var EGt=s(u5e);QXr=r(EGt,"mt5"),EGt.forEach(t),WXr=r($Oe," \u2014 "),jee=n($Oe,"A",{href:!0});var CGt=s(jee);HXr=r(CGt,"FlaxMT5ForConditionalGeneration"),CGt.forEach(t),UXr=r($Oe," (MT5 model)"),$Oe.forEach(t),JXr=i(we),U5=n(we,"LI",{});var kOe=s(U5);b5e=n(kOe,"STRONG",{});var wGt=s(b5e);YXr=r(wGt,"roberta"),wGt.forEach(t),KXr=r(kOe," \u2014 "),Dee=n(kOe,"A",{href:!0});var AGt=s(Dee);ZXr=r(AGt,"FlaxRobertaForMaskedLM"),AGt.forEach(t),ezr=r(kOe," (RoBERTa model)"),kOe.forEach(t),ozr=i(we),J5=n(we,"LI",{});var SOe=s(J5);v5e=n(SOe,"STRONG",{});var LGt=s(v5e);rzr=r(LGt,"roformer"),LGt.forEach(t),tzr=r(SOe," \u2014 "),Gee=n(SOe,"A",{href:!0});var yGt=s(Gee);azr=r(yGt,"FlaxRoFormerForMaskedLM"),yGt.forEach(t),nzr=r(SOe," (RoFormer model)"),SOe.forEach(t),szr=i(we),Y5=n(we,"LI",{});var ROe=s(Y5);F5e=n(ROe,"STRONG",{});var xGt=s(F5e);lzr=r(xGt,"t5"),xGt.forEach(t),izr=r(ROe," \u2014 "),Oee=n(ROe,"A",{href:!0});var $Gt=s(Oee);dzr=r($Gt,"FlaxT5ForConditionalGeneration"),$Gt.forEach(t),czr=r(ROe," (T5 model)"),ROe.forEach(t),fzr=i(we),K5=n(we,"LI",{});var POe=s(K5);T5e=n(POe,"STRONG",{});var kGt=s(T5e);mzr=r(kGt,"wav2vec2"),kGt.forEach(t),gzr=r(POe," \u2014 "),Vee=n(POe,"A",{href:!0});var SGt=s(Vee);hzr=r(SGt,"FlaxWav2Vec2ForPreTraining"),SGt.forEach(t),pzr=r(POe," (Wav2Vec2 model)"),POe.forEach(t),_zr=i(we),Z5=n(we,"LI",{});var BOe=s(Z5);M5e=n(BOe,"STRONG",{});var RGt=s(M5e);uzr=r(RGt,"xlm-roberta"),RGt.forEach(t),bzr=r(BOe," \u2014 "),Xee=n(BOe,"A",{href:!0});var PGt=s(Xee);vzr=r(PGt,"FlaxXLMRobertaForMaskedLM"),PGt.forEach(t),Fzr=r(BOe," (XLM-RoBERTa model)"),BOe.forEach(t),we.forEach(t),Tzr=i(li),T(e0.$$.fragment,li),li.forEach(t),si.forEach(t),xze=i(f),rf=n(f,"H2",{class:!0});var qWe=s(rf);o0=n(qWe,"A",{id:!0,class:!0,href:!0});var BGt=s(o0);E5e=n(BGt,"SPAN",{});var IGt=s(E5e);T(F$.$$.fragment,IGt),IGt.forEach(t),BGt.forEach(t),Mzr=i(qWe),C5e=n(qWe,"SPAN",{});var NGt=s(C5e);Ezr=r(NGt,"FlaxAutoModelForMaskedLM"),NGt.forEach(t),qWe.forEach(t),$ze=i(f),br=n(f,"DIV",{class:!0});var ii=s(br);T(T$.$$.fragment,ii),Czr=i(ii),tf=n(ii,"P",{});var eae=s(tf);wzr=r(eae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zee=n(eae,"A",{href:!0});var qGt=s(zee);Azr=r(qGt,"from_pretrained()"),qGt.forEach(t),Lzr=r(eae," class method or the "),Qee=n(eae,"A",{href:!0});var jGt=s(Qee);yzr=r(jGt,"from_config()"),jGt.forEach(t),xzr=r(eae,` class
method.`),eae.forEach(t),$zr=i(ii),M$=n(ii,"P",{});var jWe=s(M$);kzr=r(jWe,"This class cannot be instantiated directly using "),w5e=n(jWe,"CODE",{});var DGt=s(w5e);Szr=r(DGt,"__init__()"),DGt.forEach(t),Rzr=r(jWe," (throws an error)."),jWe.forEach(t),Pzr=i(ii),Ut=n(ii,"DIV",{class:!0});var P6=s(Ut);T(E$.$$.fragment,P6),Bzr=i(P6),A5e=n(P6,"P",{});var GGt=s(A5e);Izr=r(GGt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GGt.forEach(t),Nzr=i(P6),af=n(P6,"P",{});var oae=s(af);qzr=r(oae,`Note:
Loading a model from its configuration file does `),L5e=n(oae,"STRONG",{});var OGt=s(L5e);jzr=r(OGt,"not"),OGt.forEach(t),Dzr=r(oae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wee=n(oae,"A",{href:!0});var VGt=s(Wee);Gzr=r(VGt,"from_pretrained()"),VGt.forEach(t),Ozr=r(oae," to load the model weights."),oae.forEach(t),Vzr=i(P6),T(r0.$$.fragment,P6),P6.forEach(t),Xzr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(C$.$$.fragment,di),zzr=i(di),y5e=n(di,"P",{});var XGt=s(y5e);Qzr=r(XGt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XGt.forEach(t),Wzr=i(di),Cn=n(di,"P",{});var B6=s(Cn);Hzr=r(B6,"The model class to instantiate is selected based on the "),x5e=n(B6,"CODE",{});var zGt=s(x5e);Uzr=r(zGt,"model_type"),zGt.forEach(t),Jzr=r(B6,` property of the config object (either
passed as an argument or loaded from `),$5e=n(B6,"CODE",{});var QGt=s($5e);Yzr=r(QGt,"pretrained_model_name_or_path"),QGt.forEach(t),Kzr=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k5e=n(B6,"CODE",{});var WGt=s(k5e);Zzr=r(WGt,"pretrained_model_name_or_path"),WGt.forEach(t),eQr=r(B6,":"),B6.forEach(t),oQr=i(di),$e=n(di,"UL",{});var qe=s($e);t0=n(qe,"LI",{});var IOe=s(t0);S5e=n(IOe,"STRONG",{});var HGt=s(S5e);rQr=r(HGt,"albert"),HGt.forEach(t),tQr=r(IOe," \u2014 "),Hee=n(IOe,"A",{href:!0});var UGt=s(Hee);aQr=r(UGt,"FlaxAlbertForMaskedLM"),UGt.forEach(t),nQr=r(IOe," (ALBERT model)"),IOe.forEach(t),sQr=i(qe),a0=n(qe,"LI",{});var NOe=s(a0);R5e=n(NOe,"STRONG",{});var JGt=s(R5e);lQr=r(JGt,"bart"),JGt.forEach(t),iQr=r(NOe," \u2014 "),Uee=n(NOe,"A",{href:!0});var YGt=s(Uee);dQr=r(YGt,"FlaxBartForConditionalGeneration"),YGt.forEach(t),cQr=r(NOe," (BART model)"),NOe.forEach(t),fQr=i(qe),n0=n(qe,"LI",{});var qOe=s(n0);P5e=n(qOe,"STRONG",{});var KGt=s(P5e);mQr=r(KGt,"bert"),KGt.forEach(t),gQr=r(qOe," \u2014 "),Jee=n(qOe,"A",{href:!0});var ZGt=s(Jee);hQr=r(ZGt,"FlaxBertForMaskedLM"),ZGt.forEach(t),pQr=r(qOe," (BERT model)"),qOe.forEach(t),_Qr=i(qe),s0=n(qe,"LI",{});var jOe=s(s0);B5e=n(jOe,"STRONG",{});var eOt=s(B5e);uQr=r(eOt,"big_bird"),eOt.forEach(t),bQr=r(jOe," \u2014 "),Yee=n(jOe,"A",{href:!0});var oOt=s(Yee);vQr=r(oOt,"FlaxBigBirdForMaskedLM"),oOt.forEach(t),FQr=r(jOe," (BigBird model)"),jOe.forEach(t),TQr=i(qe),l0=n(qe,"LI",{});var DOe=s(l0);I5e=n(DOe,"STRONG",{});var rOt=s(I5e);MQr=r(rOt,"distilbert"),rOt.forEach(t),EQr=r(DOe," \u2014 "),Kee=n(DOe,"A",{href:!0});var tOt=s(Kee);CQr=r(tOt,"FlaxDistilBertForMaskedLM"),tOt.forEach(t),wQr=r(DOe," (DistilBERT model)"),DOe.forEach(t),AQr=i(qe),i0=n(qe,"LI",{});var GOe=s(i0);N5e=n(GOe,"STRONG",{});var aOt=s(N5e);LQr=r(aOt,"electra"),aOt.forEach(t),yQr=r(GOe," \u2014 "),Zee=n(GOe,"A",{href:!0});var nOt=s(Zee);xQr=r(nOt,"FlaxElectraForMaskedLM"),nOt.forEach(t),$Qr=r(GOe," (ELECTRA model)"),GOe.forEach(t),kQr=i(qe),d0=n(qe,"LI",{});var OOe=s(d0);q5e=n(OOe,"STRONG",{});var sOt=s(q5e);SQr=r(sOt,"mbart"),sOt.forEach(t),RQr=r(OOe," \u2014 "),eoe=n(OOe,"A",{href:!0});var lOt=s(eoe);PQr=r(lOt,"FlaxMBartForConditionalGeneration"),lOt.forEach(t),BQr=r(OOe," (mBART model)"),OOe.forEach(t),IQr=i(qe),c0=n(qe,"LI",{});var VOe=s(c0);j5e=n(VOe,"STRONG",{});var iOt=s(j5e);NQr=r(iOt,"roberta"),iOt.forEach(t),qQr=r(VOe," \u2014 "),ooe=n(VOe,"A",{href:!0});var dOt=s(ooe);jQr=r(dOt,"FlaxRobertaForMaskedLM"),dOt.forEach(t),DQr=r(VOe," (RoBERTa model)"),VOe.forEach(t),GQr=i(qe),f0=n(qe,"LI",{});var XOe=s(f0);D5e=n(XOe,"STRONG",{});var cOt=s(D5e);OQr=r(cOt,"roformer"),cOt.forEach(t),VQr=r(XOe," \u2014 "),roe=n(XOe,"A",{href:!0});var fOt=s(roe);XQr=r(fOt,"FlaxRoFormerForMaskedLM"),fOt.forEach(t),zQr=r(XOe," (RoFormer model)"),XOe.forEach(t),QQr=i(qe),m0=n(qe,"LI",{});var zOe=s(m0);G5e=n(zOe,"STRONG",{});var mOt=s(G5e);WQr=r(mOt,"xlm-roberta"),mOt.forEach(t),HQr=r(zOe," \u2014 "),toe=n(zOe,"A",{href:!0});var gOt=s(toe);UQr=r(gOt,"FlaxXLMRobertaForMaskedLM"),gOt.forEach(t),JQr=r(zOe," (XLM-RoBERTa model)"),zOe.forEach(t),qe.forEach(t),YQr=i(di),T(g0.$$.fragment,di),di.forEach(t),ii.forEach(t),kze=i(f),nf=n(f,"H2",{class:!0});var DWe=s(nf);h0=n(DWe,"A",{id:!0,class:!0,href:!0});var hOt=s(h0);O5e=n(hOt,"SPAN",{});var pOt=s(O5e);T(w$.$$.fragment,pOt),pOt.forEach(t),hOt.forEach(t),KQr=i(DWe),V5e=n(DWe,"SPAN",{});var _Ot=s(V5e);ZQr=r(_Ot,"FlaxAutoModelForSeq2SeqLM"),_Ot.forEach(t),DWe.forEach(t),Sze=i(f),vr=n(f,"DIV",{class:!0});var ci=s(vr);T(A$.$$.fragment,ci),eWr=i(ci),sf=n(ci,"P",{});var rae=s(sf);oWr=r(rae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aoe=n(rae,"A",{href:!0});var uOt=s(aoe);rWr=r(uOt,"from_pretrained()"),uOt.forEach(t),tWr=r(rae," class method or the "),noe=n(rae,"A",{href:!0});var bOt=s(noe);aWr=r(bOt,"from_config()"),bOt.forEach(t),nWr=r(rae,` class
method.`),rae.forEach(t),sWr=i(ci),L$=n(ci,"P",{});var GWe=s(L$);lWr=r(GWe,"This class cannot be instantiated directly using "),X5e=n(GWe,"CODE",{});var vOt=s(X5e);iWr=r(vOt,"__init__()"),vOt.forEach(t),dWr=r(GWe," (throws an error)."),GWe.forEach(t),cWr=i(ci),Jt=n(ci,"DIV",{class:!0});var I6=s(Jt);T(y$.$$.fragment,I6),fWr=i(I6),z5e=n(I6,"P",{});var FOt=s(z5e);mWr=r(FOt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),FOt.forEach(t),gWr=i(I6),lf=n(I6,"P",{});var tae=s(lf);hWr=r(tae,`Note:
Loading a model from its configuration file does `),Q5e=n(tae,"STRONG",{});var TOt=s(Q5e);pWr=r(TOt,"not"),TOt.forEach(t),_Wr=r(tae,` load the model weights. It only affects the
model\u2019s configuration. Use `),soe=n(tae,"A",{href:!0});var MOt=s(soe);uWr=r(MOt,"from_pretrained()"),MOt.forEach(t),bWr=r(tae," to load the model weights."),tae.forEach(t),vWr=i(I6),T(p0.$$.fragment,I6),I6.forEach(t),FWr=i(ci),Wr=n(ci,"DIV",{class:!0});var fi=s(Wr);T(x$.$$.fragment,fi),TWr=i(fi),W5e=n(fi,"P",{});var EOt=s(W5e);MWr=r(EOt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),EOt.forEach(t),EWr=i(fi),wn=n(fi,"P",{});var N6=s(wn);CWr=r(N6,"The model class to instantiate is selected based on the "),H5e=n(N6,"CODE",{});var COt=s(H5e);wWr=r(COt,"model_type"),COt.forEach(t),AWr=r(N6,` property of the config object (either
passed as an argument or loaded from `),U5e=n(N6,"CODE",{});var wOt=s(U5e);LWr=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),yWr=r(N6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J5e=n(N6,"CODE",{});var AOt=s(J5e);xWr=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),$Wr=r(N6,":"),N6.forEach(t),kWr=i(fi),ke=n(fi,"UL",{});var je=s(ke);_0=n(je,"LI",{});var QOe=s(_0);Y5e=n(QOe,"STRONG",{});var LOt=s(Y5e);SWr=r(LOt,"bart"),LOt.forEach(t),RWr=r(QOe," \u2014 "),loe=n(QOe,"A",{href:!0});var yOt=s(loe);PWr=r(yOt,"FlaxBartForConditionalGeneration"),yOt.forEach(t),BWr=r(QOe," (BART model)"),QOe.forEach(t),IWr=i(je),u0=n(je,"LI",{});var WOe=s(u0);K5e=n(WOe,"STRONG",{});var xOt=s(K5e);NWr=r(xOt,"blenderbot"),xOt.forEach(t),qWr=r(WOe," \u2014 "),ioe=n(WOe,"A",{href:!0});var $Ot=s(ioe);jWr=r($Ot,"FlaxBlenderbotForConditionalGeneration"),$Ot.forEach(t),DWr=r(WOe," (Blenderbot model)"),WOe.forEach(t),GWr=i(je),b0=n(je,"LI",{});var HOe=s(b0);Z5e=n(HOe,"STRONG",{});var kOt=s(Z5e);OWr=r(kOt,"blenderbot-small"),kOt.forEach(t),VWr=r(HOe," \u2014 "),doe=n(HOe,"A",{href:!0});var SOt=s(doe);XWr=r(SOt,"FlaxBlenderbotSmallForConditionalGeneration"),SOt.forEach(t),zWr=r(HOe," (BlenderbotSmall model)"),HOe.forEach(t),QWr=i(je),v0=n(je,"LI",{});var UOe=s(v0);e0e=n(UOe,"STRONG",{});var ROt=s(e0e);WWr=r(ROt,"encoder-decoder"),ROt.forEach(t),HWr=r(UOe," \u2014 "),coe=n(UOe,"A",{href:!0});var POt=s(coe);UWr=r(POt,"FlaxEncoderDecoderModel"),POt.forEach(t),JWr=r(UOe," (Encoder decoder model)"),UOe.forEach(t),YWr=i(je),F0=n(je,"LI",{});var JOe=s(F0);o0e=n(JOe,"STRONG",{});var BOt=s(o0e);KWr=r(BOt,"longt5"),BOt.forEach(t),ZWr=r(JOe," \u2014 "),foe=n(JOe,"A",{href:!0});var IOt=s(foe);eHr=r(IOt,"FlaxLongT5ForConditionalGeneration"),IOt.forEach(t),oHr=r(JOe," (LongT5 model)"),JOe.forEach(t),rHr=i(je),T0=n(je,"LI",{});var YOe=s(T0);r0e=n(YOe,"STRONG",{});var NOt=s(r0e);tHr=r(NOt,"marian"),NOt.forEach(t),aHr=r(YOe," \u2014 "),moe=n(YOe,"A",{href:!0});var qOt=s(moe);nHr=r(qOt,"FlaxMarianMTModel"),qOt.forEach(t),sHr=r(YOe," (Marian model)"),YOe.forEach(t),lHr=i(je),M0=n(je,"LI",{});var KOe=s(M0);t0e=n(KOe,"STRONG",{});var jOt=s(t0e);iHr=r(jOt,"mbart"),jOt.forEach(t),dHr=r(KOe," \u2014 "),goe=n(KOe,"A",{href:!0});var DOt=s(goe);cHr=r(DOt,"FlaxMBartForConditionalGeneration"),DOt.forEach(t),fHr=r(KOe," (mBART model)"),KOe.forEach(t),mHr=i(je),E0=n(je,"LI",{});var ZOe=s(E0);a0e=n(ZOe,"STRONG",{});var GOt=s(a0e);gHr=r(GOt,"mt5"),GOt.forEach(t),hHr=r(ZOe," \u2014 "),hoe=n(ZOe,"A",{href:!0});var OOt=s(hoe);pHr=r(OOt,"FlaxMT5ForConditionalGeneration"),OOt.forEach(t),_Hr=r(ZOe," (MT5 model)"),ZOe.forEach(t),uHr=i(je),C0=n(je,"LI",{});var eVe=s(C0);n0e=n(eVe,"STRONG",{});var VOt=s(n0e);bHr=r(VOt,"pegasus"),VOt.forEach(t),vHr=r(eVe," \u2014 "),poe=n(eVe,"A",{href:!0});var XOt=s(poe);FHr=r(XOt,"FlaxPegasusForConditionalGeneration"),XOt.forEach(t),THr=r(eVe," (Pegasus model)"),eVe.forEach(t),MHr=i(je),w0=n(je,"LI",{});var oVe=s(w0);s0e=n(oVe,"STRONG",{});var zOt=s(s0e);EHr=r(zOt,"t5"),zOt.forEach(t),CHr=r(oVe," \u2014 "),_oe=n(oVe,"A",{href:!0});var QOt=s(_oe);wHr=r(QOt,"FlaxT5ForConditionalGeneration"),QOt.forEach(t),AHr=r(oVe," (T5 model)"),oVe.forEach(t),je.forEach(t),LHr=i(fi),T(A0.$$.fragment,fi),fi.forEach(t),ci.forEach(t),Rze=i(f),df=n(f,"H2",{class:!0});var OWe=s(df);L0=n(OWe,"A",{id:!0,class:!0,href:!0});var WOt=s(L0);l0e=n(WOt,"SPAN",{});var HOt=s(l0e);T($$.$$.fragment,HOt),HOt.forEach(t),WOt.forEach(t),yHr=i(OWe),i0e=n(OWe,"SPAN",{});var UOt=s(i0e);xHr=r(UOt,"FlaxAutoModelForSequenceClassification"),UOt.forEach(t),OWe.forEach(t),Pze=i(f),Fr=n(f,"DIV",{class:!0});var mi=s(Fr);T(k$.$$.fragment,mi),$Hr=i(mi),cf=n(mi,"P",{});var aae=s(cf);kHr=r(aae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),uoe=n(aae,"A",{href:!0});var JOt=s(uoe);SHr=r(JOt,"from_pretrained()"),JOt.forEach(t),RHr=r(aae," class method or the "),boe=n(aae,"A",{href:!0});var YOt=s(boe);PHr=r(YOt,"from_config()"),YOt.forEach(t),BHr=r(aae,` class
method.`),aae.forEach(t),IHr=i(mi),S$=n(mi,"P",{});var VWe=s(S$);NHr=r(VWe,"This class cannot be instantiated directly using "),d0e=n(VWe,"CODE",{});var KOt=s(d0e);qHr=r(KOt,"__init__()"),KOt.forEach(t),jHr=r(VWe," (throws an error)."),VWe.forEach(t),DHr=i(mi),Yt=n(mi,"DIV",{class:!0});var q6=s(Yt);T(R$.$$.fragment,q6),GHr=i(q6),c0e=n(q6,"P",{});var ZOt=s(c0e);OHr=r(ZOt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ZOt.forEach(t),VHr=i(q6),ff=n(q6,"P",{});var nae=s(ff);XHr=r(nae,`Note:
Loading a model from its configuration file does `),f0e=n(nae,"STRONG",{});var eVt=s(f0e);zHr=r(eVt,"not"),eVt.forEach(t),QHr=r(nae,` load the model weights. It only affects the
model\u2019s configuration. Use `),voe=n(nae,"A",{href:!0});var oVt=s(voe);WHr=r(oVt,"from_pretrained()"),oVt.forEach(t),HHr=r(nae," to load the model weights."),nae.forEach(t),UHr=i(q6),T(y0.$$.fragment,q6),q6.forEach(t),JHr=i(mi),Hr=n(mi,"DIV",{class:!0});var gi=s(Hr);T(P$.$$.fragment,gi),YHr=i(gi),m0e=n(gi,"P",{});var rVt=s(m0e);KHr=r(rVt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rVt.forEach(t),ZHr=i(gi),An=n(gi,"P",{});var j6=s(An);eUr=r(j6,"The model class to instantiate is selected based on the "),g0e=n(j6,"CODE",{});var tVt=s(g0e);oUr=r(tVt,"model_type"),tVt.forEach(t),rUr=r(j6,` property of the config object (either
passed as an argument or loaded from `),h0e=n(j6,"CODE",{});var aVt=s(h0e);tUr=r(aVt,"pretrained_model_name_or_path"),aVt.forEach(t),aUr=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p0e=n(j6,"CODE",{});var nVt=s(p0e);nUr=r(nVt,"pretrained_model_name_or_path"),nVt.forEach(t),sUr=r(j6,":"),j6.forEach(t),lUr=i(gi),Se=n(gi,"UL",{});var De=s(Se);x0=n(De,"LI",{});var rVe=s(x0);_0e=n(rVe,"STRONG",{});var sVt=s(_0e);iUr=r(sVt,"albert"),sVt.forEach(t),dUr=r(rVe," \u2014 "),Foe=n(rVe,"A",{href:!0});var lVt=s(Foe);cUr=r(lVt,"FlaxAlbertForSequenceClassification"),lVt.forEach(t),fUr=r(rVe," (ALBERT model)"),rVe.forEach(t),mUr=i(De),$0=n(De,"LI",{});var tVe=s($0);u0e=n(tVe,"STRONG",{});var iVt=s(u0e);gUr=r(iVt,"bart"),iVt.forEach(t),hUr=r(tVe," \u2014 "),Toe=n(tVe,"A",{href:!0});var dVt=s(Toe);pUr=r(dVt,"FlaxBartForSequenceClassification"),dVt.forEach(t),_Ur=r(tVe," (BART model)"),tVe.forEach(t),uUr=i(De),k0=n(De,"LI",{});var aVe=s(k0);b0e=n(aVe,"STRONG",{});var cVt=s(b0e);bUr=r(cVt,"bert"),cVt.forEach(t),vUr=r(aVe," \u2014 "),Moe=n(aVe,"A",{href:!0});var fVt=s(Moe);FUr=r(fVt,"FlaxBertForSequenceClassification"),fVt.forEach(t),TUr=r(aVe," (BERT model)"),aVe.forEach(t),MUr=i(De),S0=n(De,"LI",{});var nVe=s(S0);v0e=n(nVe,"STRONG",{});var mVt=s(v0e);EUr=r(mVt,"big_bird"),mVt.forEach(t),CUr=r(nVe," \u2014 "),Eoe=n(nVe,"A",{href:!0});var gVt=s(Eoe);wUr=r(gVt,"FlaxBigBirdForSequenceClassification"),gVt.forEach(t),AUr=r(nVe," (BigBird model)"),nVe.forEach(t),LUr=i(De),R0=n(De,"LI",{});var sVe=s(R0);F0e=n(sVe,"STRONG",{});var hVt=s(F0e);yUr=r(hVt,"distilbert"),hVt.forEach(t),xUr=r(sVe," \u2014 "),Coe=n(sVe,"A",{href:!0});var pVt=s(Coe);$Ur=r(pVt,"FlaxDistilBertForSequenceClassification"),pVt.forEach(t),kUr=r(sVe," (DistilBERT model)"),sVe.forEach(t),SUr=i(De),P0=n(De,"LI",{});var lVe=s(P0);T0e=n(lVe,"STRONG",{});var _Vt=s(T0e);RUr=r(_Vt,"electra"),_Vt.forEach(t),PUr=r(lVe," \u2014 "),woe=n(lVe,"A",{href:!0});var uVt=s(woe);BUr=r(uVt,"FlaxElectraForSequenceClassification"),uVt.forEach(t),IUr=r(lVe," (ELECTRA model)"),lVe.forEach(t),NUr=i(De),B0=n(De,"LI",{});var iVe=s(B0);M0e=n(iVe,"STRONG",{});var bVt=s(M0e);qUr=r(bVt,"mbart"),bVt.forEach(t),jUr=r(iVe," \u2014 "),Aoe=n(iVe,"A",{href:!0});var vVt=s(Aoe);DUr=r(vVt,"FlaxMBartForSequenceClassification"),vVt.forEach(t),GUr=r(iVe," (mBART model)"),iVe.forEach(t),OUr=i(De),I0=n(De,"LI",{});var dVe=s(I0);E0e=n(dVe,"STRONG",{});var FVt=s(E0e);VUr=r(FVt,"roberta"),FVt.forEach(t),XUr=r(dVe," \u2014 "),Loe=n(dVe,"A",{href:!0});var TVt=s(Loe);zUr=r(TVt,"FlaxRobertaForSequenceClassification"),TVt.forEach(t),QUr=r(dVe," (RoBERTa model)"),dVe.forEach(t),WUr=i(De),N0=n(De,"LI",{});var cVe=s(N0);C0e=n(cVe,"STRONG",{});var MVt=s(C0e);HUr=r(MVt,"roformer"),MVt.forEach(t),UUr=r(cVe," \u2014 "),yoe=n(cVe,"A",{href:!0});var EVt=s(yoe);JUr=r(EVt,"FlaxRoFormerForSequenceClassification"),EVt.forEach(t),YUr=r(cVe," (RoFormer model)"),cVe.forEach(t),KUr=i(De),q0=n(De,"LI",{});var fVe=s(q0);w0e=n(fVe,"STRONG",{});var CVt=s(w0e);ZUr=r(CVt,"xlm-roberta"),CVt.forEach(t),eJr=r(fVe," \u2014 "),xoe=n(fVe,"A",{href:!0});var wVt=s(xoe);oJr=r(wVt,"FlaxXLMRobertaForSequenceClassification"),wVt.forEach(t),rJr=r(fVe," (XLM-RoBERTa model)"),fVe.forEach(t),De.forEach(t),tJr=i(gi),T(j0.$$.fragment,gi),gi.forEach(t),mi.forEach(t),Bze=i(f),mf=n(f,"H2",{class:!0});var XWe=s(mf);D0=n(XWe,"A",{id:!0,class:!0,href:!0});var AVt=s(D0);A0e=n(AVt,"SPAN",{});var LVt=s(A0e);T(B$.$$.fragment,LVt),LVt.forEach(t),AVt.forEach(t),aJr=i(XWe),L0e=n(XWe,"SPAN",{});var yVt=s(L0e);nJr=r(yVt,"FlaxAutoModelForQuestionAnswering"),yVt.forEach(t),XWe.forEach(t),Ize=i(f),Tr=n(f,"DIV",{class:!0});var hi=s(Tr);T(I$.$$.fragment,hi),sJr=i(hi),gf=n(hi,"P",{});var sae=s(gf);lJr=r(sae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),$oe=n(sae,"A",{href:!0});var xVt=s($oe);iJr=r(xVt,"from_pretrained()"),xVt.forEach(t),dJr=r(sae," class method or the "),koe=n(sae,"A",{href:!0});var $Vt=s(koe);cJr=r($Vt,"from_config()"),$Vt.forEach(t),fJr=r(sae,` class
method.`),sae.forEach(t),mJr=i(hi),N$=n(hi,"P",{});var zWe=s(N$);gJr=r(zWe,"This class cannot be instantiated directly using "),y0e=n(zWe,"CODE",{});var kVt=s(y0e);hJr=r(kVt,"__init__()"),kVt.forEach(t),pJr=r(zWe," (throws an error)."),zWe.forEach(t),_Jr=i(hi),Kt=n(hi,"DIV",{class:!0});var D6=s(Kt);T(q$.$$.fragment,D6),uJr=i(D6),x0e=n(D6,"P",{});var SVt=s(x0e);bJr=r(SVt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SVt.forEach(t),vJr=i(D6),hf=n(D6,"P",{});var lae=s(hf);FJr=r(lae,`Note:
Loading a model from its configuration file does `),$0e=n(lae,"STRONG",{});var RVt=s($0e);TJr=r(RVt,"not"),RVt.forEach(t),MJr=r(lae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Soe=n(lae,"A",{href:!0});var PVt=s(Soe);EJr=r(PVt,"from_pretrained()"),PVt.forEach(t),CJr=r(lae," to load the model weights."),lae.forEach(t),wJr=i(D6),T(G0.$$.fragment,D6),D6.forEach(t),AJr=i(hi),Ur=n(hi,"DIV",{class:!0});var pi=s(Ur);T(j$.$$.fragment,pi),LJr=i(pi),k0e=n(pi,"P",{});var BVt=s(k0e);yJr=r(BVt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BVt.forEach(t),xJr=i(pi),Ln=n(pi,"P",{});var G6=s(Ln);$Jr=r(G6,"The model class to instantiate is selected based on the "),S0e=n(G6,"CODE",{});var IVt=s(S0e);kJr=r(IVt,"model_type"),IVt.forEach(t),SJr=r(G6,` property of the config object (either
passed as an argument or loaded from `),R0e=n(G6,"CODE",{});var NVt=s(R0e);RJr=r(NVt,"pretrained_model_name_or_path"),NVt.forEach(t),PJr=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P0e=n(G6,"CODE",{});var qVt=s(P0e);BJr=r(qVt,"pretrained_model_name_or_path"),qVt.forEach(t),IJr=r(G6,":"),G6.forEach(t),NJr=i(pi),Re=n(pi,"UL",{});var Ge=s(Re);O0=n(Ge,"LI",{});var mVe=s(O0);B0e=n(mVe,"STRONG",{});var jVt=s(B0e);qJr=r(jVt,"albert"),jVt.forEach(t),jJr=r(mVe," \u2014 "),Roe=n(mVe,"A",{href:!0});var DVt=s(Roe);DJr=r(DVt,"FlaxAlbertForQuestionAnswering"),DVt.forEach(t),GJr=r(mVe," (ALBERT model)"),mVe.forEach(t),OJr=i(Ge),V0=n(Ge,"LI",{});var gVe=s(V0);I0e=n(gVe,"STRONG",{});var GVt=s(I0e);VJr=r(GVt,"bart"),GVt.forEach(t),XJr=r(gVe," \u2014 "),Poe=n(gVe,"A",{href:!0});var OVt=s(Poe);zJr=r(OVt,"FlaxBartForQuestionAnswering"),OVt.forEach(t),QJr=r(gVe," (BART model)"),gVe.forEach(t),WJr=i(Ge),X0=n(Ge,"LI",{});var hVe=s(X0);N0e=n(hVe,"STRONG",{});var VVt=s(N0e);HJr=r(VVt,"bert"),VVt.forEach(t),UJr=r(hVe," \u2014 "),Boe=n(hVe,"A",{href:!0});var XVt=s(Boe);JJr=r(XVt,"FlaxBertForQuestionAnswering"),XVt.forEach(t),YJr=r(hVe," (BERT model)"),hVe.forEach(t),KJr=i(Ge),z0=n(Ge,"LI",{});var pVe=s(z0);q0e=n(pVe,"STRONG",{});var zVt=s(q0e);ZJr=r(zVt,"big_bird"),zVt.forEach(t),eYr=r(pVe," \u2014 "),Ioe=n(pVe,"A",{href:!0});var QVt=s(Ioe);oYr=r(QVt,"FlaxBigBirdForQuestionAnswering"),QVt.forEach(t),rYr=r(pVe," (BigBird model)"),pVe.forEach(t),tYr=i(Ge),Q0=n(Ge,"LI",{});var _Ve=s(Q0);j0e=n(_Ve,"STRONG",{});var WVt=s(j0e);aYr=r(WVt,"distilbert"),WVt.forEach(t),nYr=r(_Ve," \u2014 "),Noe=n(_Ve,"A",{href:!0});var HVt=s(Noe);sYr=r(HVt,"FlaxDistilBertForQuestionAnswering"),HVt.forEach(t),lYr=r(_Ve," (DistilBERT model)"),_Ve.forEach(t),iYr=i(Ge),W0=n(Ge,"LI",{});var uVe=s(W0);D0e=n(uVe,"STRONG",{});var UVt=s(D0e);dYr=r(UVt,"electra"),UVt.forEach(t),cYr=r(uVe," \u2014 "),qoe=n(uVe,"A",{href:!0});var JVt=s(qoe);fYr=r(JVt,"FlaxElectraForQuestionAnswering"),JVt.forEach(t),mYr=r(uVe," (ELECTRA model)"),uVe.forEach(t),gYr=i(Ge),H0=n(Ge,"LI",{});var bVe=s(H0);G0e=n(bVe,"STRONG",{});var YVt=s(G0e);hYr=r(YVt,"mbart"),YVt.forEach(t),pYr=r(bVe," \u2014 "),joe=n(bVe,"A",{href:!0});var KVt=s(joe);_Yr=r(KVt,"FlaxMBartForQuestionAnswering"),KVt.forEach(t),uYr=r(bVe," (mBART model)"),bVe.forEach(t),bYr=i(Ge),U0=n(Ge,"LI",{});var vVe=s(U0);O0e=n(vVe,"STRONG",{});var ZVt=s(O0e);vYr=r(ZVt,"roberta"),ZVt.forEach(t),FYr=r(vVe," \u2014 "),Doe=n(vVe,"A",{href:!0});var eXt=s(Doe);TYr=r(eXt,"FlaxRobertaForQuestionAnswering"),eXt.forEach(t),MYr=r(vVe," (RoBERTa model)"),vVe.forEach(t),EYr=i(Ge),J0=n(Ge,"LI",{});var FVe=s(J0);V0e=n(FVe,"STRONG",{});var oXt=s(V0e);CYr=r(oXt,"roformer"),oXt.forEach(t),wYr=r(FVe," \u2014 "),Goe=n(FVe,"A",{href:!0});var rXt=s(Goe);AYr=r(rXt,"FlaxRoFormerForQuestionAnswering"),rXt.forEach(t),LYr=r(FVe," (RoFormer model)"),FVe.forEach(t),yYr=i(Ge),Y0=n(Ge,"LI",{});var TVe=s(Y0);X0e=n(TVe,"STRONG",{});var tXt=s(X0e);xYr=r(tXt,"xlm-roberta"),tXt.forEach(t),$Yr=r(TVe," \u2014 "),Ooe=n(TVe,"A",{href:!0});var aXt=s(Ooe);kYr=r(aXt,"FlaxXLMRobertaForQuestionAnswering"),aXt.forEach(t),SYr=r(TVe," (XLM-RoBERTa model)"),TVe.forEach(t),Ge.forEach(t),RYr=i(pi),T(K0.$$.fragment,pi),pi.forEach(t),hi.forEach(t),Nze=i(f),pf=n(f,"H2",{class:!0});var QWe=s(pf);Z0=n(QWe,"A",{id:!0,class:!0,href:!0});var nXt=s(Z0);z0e=n(nXt,"SPAN",{});var sXt=s(z0e);T(D$.$$.fragment,sXt),sXt.forEach(t),nXt.forEach(t),PYr=i(QWe),Q0e=n(QWe,"SPAN",{});var lXt=s(Q0e);BYr=r(lXt,"FlaxAutoModelForTokenClassification"),lXt.forEach(t),QWe.forEach(t),qze=i(f),Mr=n(f,"DIV",{class:!0});var _i=s(Mr);T(G$.$$.fragment,_i),IYr=i(_i),_f=n(_i,"P",{});var iae=s(_f);NYr=r(iae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Voe=n(iae,"A",{href:!0});var iXt=s(Voe);qYr=r(iXt,"from_pretrained()"),iXt.forEach(t),jYr=r(iae," class method or the "),Xoe=n(iae,"A",{href:!0});var dXt=s(Xoe);DYr=r(dXt,"from_config()"),dXt.forEach(t),GYr=r(iae,` class
method.`),iae.forEach(t),OYr=i(_i),O$=n(_i,"P",{});var WWe=s(O$);VYr=r(WWe,"This class cannot be instantiated directly using "),W0e=n(WWe,"CODE",{});var cXt=s(W0e);XYr=r(cXt,"__init__()"),cXt.forEach(t),zYr=r(WWe," (throws an error)."),WWe.forEach(t),QYr=i(_i),Zt=n(_i,"DIV",{class:!0});var O6=s(Zt);T(V$.$$.fragment,O6),WYr=i(O6),H0e=n(O6,"P",{});var fXt=s(H0e);HYr=r(fXt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fXt.forEach(t),UYr=i(O6),uf=n(O6,"P",{});var dae=s(uf);JYr=r(dae,`Note:
Loading a model from its configuration file does `),U0e=n(dae,"STRONG",{});var mXt=s(U0e);YYr=r(mXt,"not"),mXt.forEach(t),KYr=r(dae,` load the model weights. It only affects the
model\u2019s configuration. Use `),zoe=n(dae,"A",{href:!0});var gXt=s(zoe);ZYr=r(gXt,"from_pretrained()"),gXt.forEach(t),eKr=r(dae," to load the model weights."),dae.forEach(t),oKr=i(O6),T(ew.$$.fragment,O6),O6.forEach(t),rKr=i(_i),Jr=n(_i,"DIV",{class:!0});var ui=s(Jr);T(X$.$$.fragment,ui),tKr=i(ui),J0e=n(ui,"P",{});var hXt=s(J0e);aKr=r(hXt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),hXt.forEach(t),nKr=i(ui),yn=n(ui,"P",{});var V6=s(yn);sKr=r(V6,"The model class to instantiate is selected based on the "),Y0e=n(V6,"CODE",{});var pXt=s(Y0e);lKr=r(pXt,"model_type"),pXt.forEach(t),iKr=r(V6,` property of the config object (either
passed as an argument or loaded from `),K0e=n(V6,"CODE",{});var _Xt=s(K0e);dKr=r(_Xt,"pretrained_model_name_or_path"),_Xt.forEach(t),cKr=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(V6,"CODE",{});var uXt=s(Z0e);fKr=r(uXt,"pretrained_model_name_or_path"),uXt.forEach(t),mKr=r(V6,":"),V6.forEach(t),gKr=i(ui),Ve=n(ui,"UL",{});var To=s(Ve);ow=n(To,"LI",{});var MVe=s(ow);ewe=n(MVe,"STRONG",{});var bXt=s(ewe);hKr=r(bXt,"albert"),bXt.forEach(t),pKr=r(MVe," \u2014 "),Qoe=n(MVe,"A",{href:!0});var vXt=s(Qoe);_Kr=r(vXt,"FlaxAlbertForTokenClassification"),vXt.forEach(t),uKr=r(MVe," (ALBERT model)"),MVe.forEach(t),bKr=i(To),rw=n(To,"LI",{});var EVe=s(rw);owe=n(EVe,"STRONG",{});var FXt=s(owe);vKr=r(FXt,"bert"),FXt.forEach(t),FKr=r(EVe," \u2014 "),Woe=n(EVe,"A",{href:!0});var TXt=s(Woe);TKr=r(TXt,"FlaxBertForTokenClassification"),TXt.forEach(t),MKr=r(EVe," (BERT model)"),EVe.forEach(t),EKr=i(To),tw=n(To,"LI",{});var CVe=s(tw);rwe=n(CVe,"STRONG",{});var MXt=s(rwe);CKr=r(MXt,"big_bird"),MXt.forEach(t),wKr=r(CVe," \u2014 "),Hoe=n(CVe,"A",{href:!0});var EXt=s(Hoe);AKr=r(EXt,"FlaxBigBirdForTokenClassification"),EXt.forEach(t),LKr=r(CVe," (BigBird model)"),CVe.forEach(t),yKr=i(To),aw=n(To,"LI",{});var wVe=s(aw);twe=n(wVe,"STRONG",{});var CXt=s(twe);xKr=r(CXt,"distilbert"),CXt.forEach(t),$Kr=r(wVe," \u2014 "),Uoe=n(wVe,"A",{href:!0});var wXt=s(Uoe);kKr=r(wXt,"FlaxDistilBertForTokenClassification"),wXt.forEach(t),SKr=r(wVe," (DistilBERT model)"),wVe.forEach(t),RKr=i(To),nw=n(To,"LI",{});var AVe=s(nw);awe=n(AVe,"STRONG",{});var AXt=s(awe);PKr=r(AXt,"electra"),AXt.forEach(t),BKr=r(AVe," \u2014 "),Joe=n(AVe,"A",{href:!0});var LXt=s(Joe);IKr=r(LXt,"FlaxElectraForTokenClassification"),LXt.forEach(t),NKr=r(AVe," (ELECTRA model)"),AVe.forEach(t),qKr=i(To),sw=n(To,"LI",{});var LVe=s(sw);nwe=n(LVe,"STRONG",{});var yXt=s(nwe);jKr=r(yXt,"roberta"),yXt.forEach(t),DKr=r(LVe," \u2014 "),Yoe=n(LVe,"A",{href:!0});var xXt=s(Yoe);GKr=r(xXt,"FlaxRobertaForTokenClassification"),xXt.forEach(t),OKr=r(LVe," (RoBERTa model)"),LVe.forEach(t),VKr=i(To),lw=n(To,"LI",{});var yVe=s(lw);swe=n(yVe,"STRONG",{});var $Xt=s(swe);XKr=r($Xt,"roformer"),$Xt.forEach(t),zKr=r(yVe," \u2014 "),Koe=n(yVe,"A",{href:!0});var kXt=s(Koe);QKr=r(kXt,"FlaxRoFormerForTokenClassification"),kXt.forEach(t),WKr=r(yVe," (RoFormer model)"),yVe.forEach(t),HKr=i(To),iw=n(To,"LI",{});var xVe=s(iw);lwe=n(xVe,"STRONG",{});var SXt=s(lwe);UKr=r(SXt,"xlm-roberta"),SXt.forEach(t),JKr=r(xVe," \u2014 "),Zoe=n(xVe,"A",{href:!0});var RXt=s(Zoe);YKr=r(RXt,"FlaxXLMRobertaForTokenClassification"),RXt.forEach(t),KKr=r(xVe," (XLM-RoBERTa model)"),xVe.forEach(t),To.forEach(t),ZKr=i(ui),T(dw.$$.fragment,ui),ui.forEach(t),_i.forEach(t),jze=i(f),bf=n(f,"H2",{class:!0});var HWe=s(bf);cw=n(HWe,"A",{id:!0,class:!0,href:!0});var PXt=s(cw);iwe=n(PXt,"SPAN",{});var BXt=s(iwe);T(z$.$$.fragment,BXt),BXt.forEach(t),PXt.forEach(t),eZr=i(HWe),dwe=n(HWe,"SPAN",{});var IXt=s(dwe);oZr=r(IXt,"FlaxAutoModelForMultipleChoice"),IXt.forEach(t),HWe.forEach(t),Dze=i(f),Er=n(f,"DIV",{class:!0});var bi=s(Er);T(Q$.$$.fragment,bi),rZr=i(bi),vf=n(bi,"P",{});var cae=s(vf);tZr=r(cae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ere=n(cae,"A",{href:!0});var NXt=s(ere);aZr=r(NXt,"from_pretrained()"),NXt.forEach(t),nZr=r(cae," class method or the "),ore=n(cae,"A",{href:!0});var qXt=s(ore);sZr=r(qXt,"from_config()"),qXt.forEach(t),lZr=r(cae,` class
method.`),cae.forEach(t),iZr=i(bi),W$=n(bi,"P",{});var UWe=s(W$);dZr=r(UWe,"This class cannot be instantiated directly using "),cwe=n(UWe,"CODE",{});var jXt=s(cwe);cZr=r(jXt,"__init__()"),jXt.forEach(t),fZr=r(UWe," (throws an error)."),UWe.forEach(t),mZr=i(bi),ea=n(bi,"DIV",{class:!0});var X6=s(ea);T(H$.$$.fragment,X6),gZr=i(X6),fwe=n(X6,"P",{});var DXt=s(fwe);hZr=r(DXt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),DXt.forEach(t),pZr=i(X6),Ff=n(X6,"P",{});var fae=s(Ff);_Zr=r(fae,`Note:
Loading a model from its configuration file does `),mwe=n(fae,"STRONG",{});var GXt=s(mwe);uZr=r(GXt,"not"),GXt.forEach(t),bZr=r(fae,` load the model weights. It only affects the
model\u2019s configuration. Use `),rre=n(fae,"A",{href:!0});var OXt=s(rre);vZr=r(OXt,"from_pretrained()"),OXt.forEach(t),FZr=r(fae," to load the model weights."),fae.forEach(t),TZr=i(X6),T(fw.$$.fragment,X6),X6.forEach(t),MZr=i(bi),Yr=n(bi,"DIV",{class:!0});var vi=s(Yr);T(U$.$$.fragment,vi),EZr=i(vi),gwe=n(vi,"P",{});var VXt=s(gwe);CZr=r(VXt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),VXt.forEach(t),wZr=i(vi),xn=n(vi,"P",{});var z6=s(xn);AZr=r(z6,"The model class to instantiate is selected based on the "),hwe=n(z6,"CODE",{});var XXt=s(hwe);LZr=r(XXt,"model_type"),XXt.forEach(t),yZr=r(z6,` property of the config object (either
passed as an argument or loaded from `),pwe=n(z6,"CODE",{});var zXt=s(pwe);xZr=r(zXt,"pretrained_model_name_or_path"),zXt.forEach(t),$Zr=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_we=n(z6,"CODE",{});var QXt=s(_we);kZr=r(QXt,"pretrained_model_name_or_path"),QXt.forEach(t),SZr=r(z6,":"),z6.forEach(t),RZr=i(vi),Xe=n(vi,"UL",{});var Mo=s(Xe);mw=n(Mo,"LI",{});var $Ve=s(mw);uwe=n($Ve,"STRONG",{});var WXt=s(uwe);PZr=r(WXt,"albert"),WXt.forEach(t),BZr=r($Ve," \u2014 "),tre=n($Ve,"A",{href:!0});var HXt=s(tre);IZr=r(HXt,"FlaxAlbertForMultipleChoice"),HXt.forEach(t),NZr=r($Ve," (ALBERT model)"),$Ve.forEach(t),qZr=i(Mo),gw=n(Mo,"LI",{});var kVe=s(gw);bwe=n(kVe,"STRONG",{});var UXt=s(bwe);jZr=r(UXt,"bert"),UXt.forEach(t),DZr=r(kVe," \u2014 "),are=n(kVe,"A",{href:!0});var JXt=s(are);GZr=r(JXt,"FlaxBertForMultipleChoice"),JXt.forEach(t),OZr=r(kVe," (BERT model)"),kVe.forEach(t),VZr=i(Mo),hw=n(Mo,"LI",{});var SVe=s(hw);vwe=n(SVe,"STRONG",{});var YXt=s(vwe);XZr=r(YXt,"big_bird"),YXt.forEach(t),zZr=r(SVe," \u2014 "),nre=n(SVe,"A",{href:!0});var KXt=s(nre);QZr=r(KXt,"FlaxBigBirdForMultipleChoice"),KXt.forEach(t),WZr=r(SVe," (BigBird model)"),SVe.forEach(t),HZr=i(Mo),pw=n(Mo,"LI",{});var RVe=s(pw);Fwe=n(RVe,"STRONG",{});var ZXt=s(Fwe);UZr=r(ZXt,"distilbert"),ZXt.forEach(t),JZr=r(RVe," \u2014 "),sre=n(RVe,"A",{href:!0});var ezt=s(sre);YZr=r(ezt,"FlaxDistilBertForMultipleChoice"),ezt.forEach(t),KZr=r(RVe," (DistilBERT model)"),RVe.forEach(t),ZZr=i(Mo),_w=n(Mo,"LI",{});var PVe=s(_w);Twe=n(PVe,"STRONG",{});var ozt=s(Twe);eet=r(ozt,"electra"),ozt.forEach(t),oet=r(PVe," \u2014 "),lre=n(PVe,"A",{href:!0});var rzt=s(lre);ret=r(rzt,"FlaxElectraForMultipleChoice"),rzt.forEach(t),tet=r(PVe," (ELECTRA model)"),PVe.forEach(t),aet=i(Mo),uw=n(Mo,"LI",{});var BVe=s(uw);Mwe=n(BVe,"STRONG",{});var tzt=s(Mwe);net=r(tzt,"roberta"),tzt.forEach(t),set=r(BVe," \u2014 "),ire=n(BVe,"A",{href:!0});var azt=s(ire);iet=r(azt,"FlaxRobertaForMultipleChoice"),azt.forEach(t),det=r(BVe," (RoBERTa model)"),BVe.forEach(t),cet=i(Mo),bw=n(Mo,"LI",{});var IVe=s(bw);Ewe=n(IVe,"STRONG",{});var nzt=s(Ewe);fet=r(nzt,"roformer"),nzt.forEach(t),met=r(IVe," \u2014 "),dre=n(IVe,"A",{href:!0});var szt=s(dre);get=r(szt,"FlaxRoFormerForMultipleChoice"),szt.forEach(t),het=r(IVe," (RoFormer model)"),IVe.forEach(t),pet=i(Mo),vw=n(Mo,"LI",{});var NVe=s(vw);Cwe=n(NVe,"STRONG",{});var lzt=s(Cwe);_et=r(lzt,"xlm-roberta"),lzt.forEach(t),uet=r(NVe," \u2014 "),cre=n(NVe,"A",{href:!0});var izt=s(cre);bet=r(izt,"FlaxXLMRobertaForMultipleChoice"),izt.forEach(t),vet=r(NVe," (XLM-RoBERTa model)"),NVe.forEach(t),Mo.forEach(t),Fet=i(vi),T(Fw.$$.fragment,vi),vi.forEach(t),bi.forEach(t),Gze=i(f),Tf=n(f,"H2",{class:!0});var JWe=s(Tf);Tw=n(JWe,"A",{id:!0,class:!0,href:!0});var dzt=s(Tw);wwe=n(dzt,"SPAN",{});var czt=s(wwe);T(J$.$$.fragment,czt),czt.forEach(t),dzt.forEach(t),Tet=i(JWe),Awe=n(JWe,"SPAN",{});var fzt=s(Awe);Met=r(fzt,"FlaxAutoModelForNextSentencePrediction"),fzt.forEach(t),JWe.forEach(t),Oze=i(f),Cr=n(f,"DIV",{class:!0});var Fi=s(Cr);T(Y$.$$.fragment,Fi),Eet=i(Fi),Mf=n(Fi,"P",{});var mae=s(Mf);Cet=r(mae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),fre=n(mae,"A",{href:!0});var mzt=s(fre);wet=r(mzt,"from_pretrained()"),mzt.forEach(t),Aet=r(mae," class method or the "),mre=n(mae,"A",{href:!0});var gzt=s(mre);Let=r(gzt,"from_config()"),gzt.forEach(t),yet=r(mae,` class
method.`),mae.forEach(t),xet=i(Fi),K$=n(Fi,"P",{});var YWe=s(K$);$et=r(YWe,"This class cannot be instantiated directly using "),Lwe=n(YWe,"CODE",{});var hzt=s(Lwe);ket=r(hzt,"__init__()"),hzt.forEach(t),Set=r(YWe," (throws an error)."),YWe.forEach(t),Ret=i(Fi),oa=n(Fi,"DIV",{class:!0});var Q6=s(oa);T(Z$.$$.fragment,Q6),Pet=i(Q6),ywe=n(Q6,"P",{});var pzt=s(ywe);Bet=r(pzt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pzt.forEach(t),Iet=i(Q6),Ef=n(Q6,"P",{});var gae=s(Ef);Net=r(gae,`Note:
Loading a model from its configuration file does `),xwe=n(gae,"STRONG",{});var _zt=s(xwe);qet=r(_zt,"not"),_zt.forEach(t),jet=r(gae,` load the model weights. It only affects the
model\u2019s configuration. Use `),gre=n(gae,"A",{href:!0});var uzt=s(gre);Det=r(uzt,"from_pretrained()"),uzt.forEach(t),Get=r(gae," to load the model weights."),gae.forEach(t),Oet=i(Q6),T(Mw.$$.fragment,Q6),Q6.forEach(t),Vet=i(Fi),Kr=n(Fi,"DIV",{class:!0});var Ti=s(Kr);T(ek.$$.fragment,Ti),Xet=i(Ti),$we=n(Ti,"P",{});var bzt=s($we);zet=r(bzt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bzt.forEach(t),Qet=i(Ti),$n=n(Ti,"P",{});var W6=s($n);Wet=r(W6,"The model class to instantiate is selected based on the "),kwe=n(W6,"CODE",{});var vzt=s(kwe);Het=r(vzt,"model_type"),vzt.forEach(t),Uet=r(W6,` property of the config object (either
passed as an argument or loaded from `),Swe=n(W6,"CODE",{});var Fzt=s(Swe);Jet=r(Fzt,"pretrained_model_name_or_path"),Fzt.forEach(t),Yet=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rwe=n(W6,"CODE",{});var Tzt=s(Rwe);Ket=r(Tzt,"pretrained_model_name_or_path"),Tzt.forEach(t),Zet=r(W6,":"),W6.forEach(t),eot=i(Ti),Pwe=n(Ti,"UL",{});var Mzt=s(Pwe);Ew=n(Mzt,"LI",{});var qVe=s(Ew);Bwe=n(qVe,"STRONG",{});var Ezt=s(Bwe);oot=r(Ezt,"bert"),Ezt.forEach(t),rot=r(qVe," \u2014 "),hre=n(qVe,"A",{href:!0});var Czt=s(hre);tot=r(Czt,"FlaxBertForNextSentencePrediction"),Czt.forEach(t),aot=r(qVe," (BERT model)"),qVe.forEach(t),Mzt.forEach(t),not=i(Ti),T(Cw.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),Vze=i(f),Cf=n(f,"H2",{class:!0});var KWe=s(Cf);ww=n(KWe,"A",{id:!0,class:!0,href:!0});var wzt=s(ww);Iwe=n(wzt,"SPAN",{});var Azt=s(Iwe);T(ok.$$.fragment,Azt),Azt.forEach(t),wzt.forEach(t),sot=i(KWe),Nwe=n(KWe,"SPAN",{});var Lzt=s(Nwe);lot=r(Lzt,"FlaxAutoModelForImageClassification"),Lzt.forEach(t),KWe.forEach(t),Xze=i(f),wr=n(f,"DIV",{class:!0});var Mi=s(wr);T(rk.$$.fragment,Mi),iot=i(Mi),wf=n(Mi,"P",{});var hae=s(wf);dot=r(hae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pre=n(hae,"A",{href:!0});var yzt=s(pre);cot=r(yzt,"from_pretrained()"),yzt.forEach(t),fot=r(hae," class method or the "),_re=n(hae,"A",{href:!0});var xzt=s(_re);mot=r(xzt,"from_config()"),xzt.forEach(t),got=r(hae,` class
method.`),hae.forEach(t),hot=i(Mi),tk=n(Mi,"P",{});var ZWe=s(tk);pot=r(ZWe,"This class cannot be instantiated directly using "),qwe=n(ZWe,"CODE",{});var $zt=s(qwe);_ot=r($zt,"__init__()"),$zt.forEach(t),uot=r(ZWe," (throws an error)."),ZWe.forEach(t),bot=i(Mi),ra=n(Mi,"DIV",{class:!0});var H6=s(ra);T(ak.$$.fragment,H6),vot=i(H6),jwe=n(H6,"P",{});var kzt=s(jwe);Fot=r(kzt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kzt.forEach(t),Tot=i(H6),Af=n(H6,"P",{});var pae=s(Af);Mot=r(pae,`Note:
Loading a model from its configuration file does `),Dwe=n(pae,"STRONG",{});var Szt=s(Dwe);Eot=r(Szt,"not"),Szt.forEach(t),Cot=r(pae,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(pae,"A",{href:!0});var Rzt=s(ure);wot=r(Rzt,"from_pretrained()"),Rzt.forEach(t),Aot=r(pae," to load the model weights."),pae.forEach(t),Lot=i(H6),T(Aw.$$.fragment,H6),H6.forEach(t),yot=i(Mi),Zr=n(Mi,"DIV",{class:!0});var Ei=s(Zr);T(nk.$$.fragment,Ei),xot=i(Ei),Gwe=n(Ei,"P",{});var Pzt=s(Gwe);$ot=r(Pzt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pzt.forEach(t),kot=i(Ei),kn=n(Ei,"P",{});var U6=s(kn);Sot=r(U6,"The model class to instantiate is selected based on the "),Owe=n(U6,"CODE",{});var Bzt=s(Owe);Rot=r(Bzt,"model_type"),Bzt.forEach(t),Pot=r(U6,` property of the config object (either
passed as an argument or loaded from `),Vwe=n(U6,"CODE",{});var Izt=s(Vwe);Bot=r(Izt,"pretrained_model_name_or_path"),Izt.forEach(t),Iot=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xwe=n(U6,"CODE",{});var Nzt=s(Xwe);Not=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),qot=r(U6,":"),U6.forEach(t),jot=i(Ei),sk=n(Ei,"UL",{});var eHe=s(sk);Lw=n(eHe,"LI",{});var jVe=s(Lw);zwe=n(jVe,"STRONG",{});var qzt=s(zwe);Dot=r(qzt,"beit"),qzt.forEach(t),Got=r(jVe," \u2014 "),bre=n(jVe,"A",{href:!0});var jzt=s(bre);Oot=r(jzt,"FlaxBeitForImageClassification"),jzt.forEach(t),Vot=r(jVe," (BEiT model)"),jVe.forEach(t),Xot=i(eHe),yw=n(eHe,"LI",{});var DVe=s(yw);Qwe=n(DVe,"STRONG",{});var Dzt=s(Qwe);zot=r(Dzt,"vit"),Dzt.forEach(t),Qot=r(DVe," \u2014 "),vre=n(DVe,"A",{href:!0});var Gzt=s(vre);Wot=r(Gzt,"FlaxViTForImageClassification"),Gzt.forEach(t),Hot=r(DVe," (ViT model)"),DVe.forEach(t),eHe.forEach(t),Uot=i(Ei),T(xw.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),zze=i(f),Lf=n(f,"H2",{class:!0});var oHe=s(Lf);$w=n(oHe,"A",{id:!0,class:!0,href:!0});var Ozt=s($w);Wwe=n(Ozt,"SPAN",{});var Vzt=s(Wwe);T(lk.$$.fragment,Vzt),Vzt.forEach(t),Ozt.forEach(t),Jot=i(oHe),Hwe=n(oHe,"SPAN",{});var Xzt=s(Hwe);Yot=r(Xzt,"FlaxAutoModelForVision2Seq"),Xzt.forEach(t),oHe.forEach(t),Qze=i(f),Ar=n(f,"DIV",{class:!0});var Ci=s(Ar);T(ik.$$.fragment,Ci),Kot=i(Ci),yf=n(Ci,"P",{});var _ae=s(yf);Zot=r(_ae,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Fre=n(_ae,"A",{href:!0});var zzt=s(Fre);ert=r(zzt,"from_pretrained()"),zzt.forEach(t),ort=r(_ae," class method or the "),Tre=n(_ae,"A",{href:!0});var Qzt=s(Tre);rrt=r(Qzt,"from_config()"),Qzt.forEach(t),trt=r(_ae,` class
method.`),_ae.forEach(t),art=i(Ci),dk=n(Ci,"P",{});var rHe=s(dk);nrt=r(rHe,"This class cannot be instantiated directly using "),Uwe=n(rHe,"CODE",{});var Wzt=s(Uwe);srt=r(Wzt,"__init__()"),Wzt.forEach(t),lrt=r(rHe," (throws an error)."),rHe.forEach(t),irt=i(Ci),ta=n(Ci,"DIV",{class:!0});var J6=s(ta);T(ck.$$.fragment,J6),drt=i(J6),Jwe=n(J6,"P",{});var Hzt=s(Jwe);crt=r(Hzt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hzt.forEach(t),frt=i(J6),xf=n(J6,"P",{});var uae=s(xf);mrt=r(uae,`Note:
Loading a model from its configuration file does `),Ywe=n(uae,"STRONG",{});var Uzt=s(Ywe);grt=r(Uzt,"not"),Uzt.forEach(t),hrt=r(uae,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mre=n(uae,"A",{href:!0});var Jzt=s(Mre);prt=r(Jzt,"from_pretrained()"),Jzt.forEach(t),_rt=r(uae," to load the model weights."),uae.forEach(t),urt=i(J6),T(kw.$$.fragment,J6),J6.forEach(t),brt=i(Ci),et=n(Ci,"DIV",{class:!0});var wi=s(et);T(fk.$$.fragment,wi),vrt=i(wi),Kwe=n(wi,"P",{});var Yzt=s(Kwe);Frt=r(Yzt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Yzt.forEach(t),Trt=i(wi),Sn=n(wi,"P",{});var Y6=s(Sn);Mrt=r(Y6,"The model class to instantiate is selected based on the "),Zwe=n(Y6,"CODE",{});var Kzt=s(Zwe);Ert=r(Kzt,"model_type"),Kzt.forEach(t),Crt=r(Y6,` property of the config object (either
passed as an argument or loaded from `),eAe=n(Y6,"CODE",{});var Zzt=s(eAe);wrt=r(Zzt,"pretrained_model_name_or_path"),Zzt.forEach(t),Art=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oAe=n(Y6,"CODE",{});var eQt=s(oAe);Lrt=r(eQt,"pretrained_model_name_or_path"),eQt.forEach(t),yrt=r(Y6,":"),Y6.forEach(t),xrt=i(wi),rAe=n(wi,"UL",{});var oQt=s(rAe);Sw=n(oQt,"LI",{});var GVe=s(Sw);tAe=n(GVe,"STRONG",{});var rQt=s(tAe);$rt=r(rQt,"vision-encoder-decoder"),rQt.forEach(t),krt=r(GVe," \u2014 "),Ere=n(GVe,"A",{href:!0});var tQt=s(Ere);Srt=r(tQt,"FlaxVisionEncoderDecoderModel"),tQt.forEach(t),Rrt=r(GVe," (Vision Encoder decoder model)"),GVe.forEach(t),oQt.forEach(t),Prt=i(wi),T(Rw.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(dHt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Pn,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoConfig"),c(In,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoModel"),c(Nn,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoTokenizer"),c(Si,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertModel"),c(Nf,"id","extending-the-auto-classes"),c(Nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Nf,"href","#extending-the-auto-classes"),c(Ri,"class","relative group"),c(jf,"id","transformers.AutoConfig"),c(jf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jf,"href","#transformers.AutoConfig"),c(Pi,"class","relative group"),c(qS,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(jS,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertConfig"),c(DS,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartConfig"),c(GS,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitConfig"),c(OS,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertConfig"),c(VS,"href","/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(XS,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdConfig"),c(zS,"href","/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(QS,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(WS,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(HS,"href","/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomConfig"),c(US,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertConfig"),c(JS,"href","/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineConfig"),c(YS,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPConfig"),c(KS,"href","/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenConfig"),c(ZS,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertConfig"),c(eR,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextConfig"),c(oR,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLConfig"),c(rR,"href","/docs/transformers/pr_17924/en/model_doc/cvt#transformers.CvtConfig"),c(tR,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(aR,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(nR,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(sR,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaConfig"),c(lR,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(iR,"href","/docs/transformers/pr_17924/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(dR,"href","/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTConfig"),c(cR,"href","/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrConfig"),c(fR,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertConfig"),c(mR,"href","/docs/transformers/pr_17924/en/model_doc/dpr#transformers.DPRConfig"),c(gR,"href","/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTConfig"),c(hR,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraConfig"),c(pR,"href","/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(_R,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertConfig"),c(uR,"href","/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaConfig"),c(bR,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetConfig"),c(vR,"href","/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTConfig"),c(FR,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelConfig"),c(TR,"href","/docs/transformers/pr_17924/en/model_doc/glpn#transformers.GLPNConfig"),c(MR,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Config"),c(ER,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(CR,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(wR,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJConfig"),c(AR,"href","/docs/transformers/pr_17924/en/model_doc/groupvit#transformers.GroupViTConfig"),c(LR,"href","/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertConfig"),c(yR,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertConfig"),c(xR,"href","/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c($R,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(kR,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(SR,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(RR,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDConfig"),c(PR,"href","/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitConfig"),c(BR,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerConfig"),c(IR,"href","/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Config"),c(NR,"href","/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeConfig"),c(qR,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertConfig"),c(jR,"href","/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100Config"),c(DR,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianConfig"),c(GR,"href","/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(OR,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartConfig"),c(VR,"href","/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTConfig"),c(XR,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(zR,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(QR,"href","/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(WR,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetConfig"),c(HR,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Config"),c(UR,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpConfig"),c(JR,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaConfig"),c(YR,"href","/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(KR,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(ZR,"href","/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTConfig"),c(eP,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusConfig"),c(oP,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverConfig"),c(rP,"href","/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartConfig"),c(tP,"href","/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(aP,"href","/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(nP,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(sP,"href","/docs/transformers/pr_17924/en/model_doc/rag#transformers.RagConfig"),c(lP,"href","/docs/transformers/pr_17924/en/model_doc/realm#transformers.RealmConfig"),c(iP,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerConfig"),c(dP,"href","/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetConfig"),c(cP,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertConfig"),c(fP,"href","/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetConfig"),c(mP,"href","/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertConfig"),c(gP,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaConfig"),c(hP,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerConfig"),c(pP,"href","/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerConfig"),c(_P,"href","/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWConfig"),c(uP,"href","/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDConfig"),c(bP,"href","/docs/transformers/pr_17924/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(vP,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(FP,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(TP,"href","/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterConfig"),c(MP,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(EP,"href","/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinConfig"),c(CP,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Config"),c(wP,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasConfig"),c(AP,"href","/docs/transformers/pr_17924/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(LP,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(yP,"href","/docs/transformers/pr_17924/en/model_doc/trocr#transformers.TrOCRConfig"),c(xP,"href","/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechConfig"),c($P,"href","/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(kP,"href","/docs/transformers/pr_17924/en/model_doc/van#transformers.VanConfig"),c(SP,"href","/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltConfig"),c(RP,"href","/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(PP,"href","/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(BP,"href","/docs/transformers/pr_17924/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(IP,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTConfig"),c(NP,"href","/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(qP,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(jP,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(DP,"href","/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMConfig"),c(GP,"href","/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMConfig"),c(OP,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMConfig"),c(VP,"href","/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(XP,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(zP,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(QP,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetConfig"),c(WP,"href","/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosConfig"),c(HP,"href","/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoConfig"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kg,"id","transformers.AutoTokenizer"),c(Kg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kg,"href","#transformers.AutoTokenizer"),c(Ii,"class","relative group"),c(UP,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(JP,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertTokenizer"),c(YP,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(KP,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartTokenizer"),c(ZP,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartTokenizerFast"),c(eB,"href","/docs/transformers/pr_17924/en/model_doc/barthez#transformers.BarthezTokenizer"),c(oB,"href","/docs/transformers/pr_17924/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(rB,"href","/docs/transformers/pr_17924/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(tB,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizer"),c(aB,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizerFast"),c(nB,"href","/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(sB,"href","/docs/transformers/pr_17924/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(lB,"href","/docs/transformers/pr_17924/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(iB,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(dB,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(cB,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(fB,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(mB,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(gB,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(hB,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(pB,"href","/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(_B,"href","/docs/transformers/pr_17924/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(uB,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertTokenizer"),c(bB,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(vB,"href","/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineTokenizer"),c(FB,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPTokenizer"),c(TB,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(MB,"href","/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(EB,"href","/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(CB,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(wB,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(AB,"href","/docs/transformers/pr_17924/en/model_doc/cpm#transformers.CpmTokenizer"),c(LB,"href","/docs/transformers/pr_17924/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(yB,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(xB,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizer"),c($B,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(kB,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaTokenizer"),c(SB,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(PB,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(BB,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(IB,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(NB,"href","/docs/transformers/pr_17924/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(qB,"href","/docs/transformers/pr_17924/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(jB,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraTokenizer"),c(DB,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(GB,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(OB,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetTokenizer"),c(VB,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(XB,"href","/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(zB,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelTokenizer"),c(QB,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(WB,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HB,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(UB,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(JB,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(YB,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(KB,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(ZB,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(eI,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPTokenizer"),c(oI,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(rI,"href","/docs/transformers/pr_17924/en/model_doc/herbert#transformers.HerbertTokenizer"),c(tI,"href","/docs/transformers/pr_17924/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(aI,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(nI,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizer"),c(sI,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(lI,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(iI,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(dI,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(cI,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(fI,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(mI,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(gI,"href","/docs/transformers/pr_17924/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(hI,"href","/docs/transformers/pr_17924/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(pI,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDTokenizer"),c(_I,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDTokenizerFast"),c(uI,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerTokenizer"),c(bI,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(vI,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Tokenizer"),c(FI,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5TokenizerFast"),c(TI,"href","/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeTokenizer"),c(MI,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(EI,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(CI,"href","/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(wI,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianTokenizer"),c(AI,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartTokenizer"),c(LI,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(yI,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(xI,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c($I,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizer"),c(kI,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizerFast"),c(SI,"href","/docs/transformers/pr_17924/en/model_doc/mluke#transformers.MLukeTokenizer"),c(RI,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(PI,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(BI,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(II,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(NI,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Tokenizer"),c(qI,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5TokenizerFast"),c(jI,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpTokenizer"),c(DI,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(GI,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizer"),c(OI,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizerFast"),c(VI,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertTokenizer"),c(XI,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(zI,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(QI,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(WI,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(HI,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(UI,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(JI,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(YI,"href","/docs/transformers/pr_17924/en/model_doc/phobert#transformers.PhobertTokenizer"),c(KI,"href","/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartTokenizer"),c(ZI,"href","/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(eN,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizer"),c(oN,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizerFast"),c(rN,"href","/docs/transformers/pr_17924/en/model_doc/rag#transformers.RagTokenizer"),c(tN,"href","/docs/transformers/pr_17924/en/model_doc/realm#transformers.RealmTokenizer"),c(aN,"href","/docs/transformers/pr_17924/en/model_doc/realm#transformers.RealmTokenizerFast"),c(nN,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerTokenizer"),c(sN,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(lN,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertTokenizer"),c(iN,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(dN,"href","/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(cN,"href","/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(fN,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mN,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gN,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(hN,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(pN,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(_N,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uN,"href","/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterTokenizer"),c(bN,"href","/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(vN,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(FN,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(TN,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Tokenizer"),c(MN,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5TokenizerFast"),c(EN,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasTokenizer"),c(CN,"href","/docs/transformers/pr_17924/en/model_doc/tapex#transformers.TapexTokenizer"),c(wN,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(AN,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizer"),c(LN,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizerFast"),c(yN,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizer"),c(xN,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertTokenizerFast"),c($N,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(kN,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(SN,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(RN,"href","/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMTokenizer"),c(PN,"href","/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(BN,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMTokenizer"),c(IN,"href","/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(NN,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(qN,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(jN,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizer"),c(DN,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(GN,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ON,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(VN,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertTokenizer"),c(XN,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Rh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ph,"id","transformers.AutoFeatureExtractor"),c(Ph,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Ph,"href","#transformers.AutoFeatureExtractor"),c(Ni,"class","relative group"),c(zN,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(QN,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(WN,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(HN,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(UN,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JN,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(YN,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(KN,"href","/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(ZN,"href","/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(eq,"href","/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(oq,"href","/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(rq,"href","/docs/transformers/pr_17924/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(tq,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(aq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(nq,"href","/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(sq,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(lq,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(iq,"href","/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(dq,"href","/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(cq,"href","/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(fq,"href","/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(mq,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(gq,"href","/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(hq,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pq,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(_q,"href","/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(uq,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(bq,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vq,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Fq,"href","/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(Tq,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Mq,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(Eq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Cq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(wq,"href","/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(up,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bp,"id","transformers.AutoProcessor"),c(bp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bp,"href","#transformers.AutoProcessor"),c(qi,"class","relative group"),c(Aq,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(Lq,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPProcessor"),c(yq,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPProcessor"),c(xq,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c($q,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(kq,"href","/docs/transformers/pr_17924/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(Sq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Rq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Pq,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(Bq,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(Iq,"href","/docs/transformers/pr_17924/en/model_doc/trocr#transformers.TrOCRProcessor"),c(Nq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(jq,"href","/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltProcessor"),c(Dq,"href","/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(Gq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Oq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Vq,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dp,"id","transformers.AutoModel"),c(Dp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dp,"href","#transformers.AutoModel"),c(Di,"class","relative group"),c(Xq,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zq,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Qq,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wq,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertModel"),c(Hq,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartModel"),c(Uq,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitModel"),c(Jq,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertModel"),c(Yq,"href","/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(Kq,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdModel"),c(Zq,"href","/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(ej,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(oj,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(rj,"href","/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomModel"),c(tj,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertModel"),c(aj,"href","/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineModel"),c(nj,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.CLIPModel"),c(sj,"href","/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenModel"),c(lj,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertModel"),c(ij,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextModel"),c(dj,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLModel"),c(cj,"href","/docs/transformers/pr_17924/en/model_doc/cvt#transformers.CvtModel"),c(fj,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(mj,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(gj,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(hj,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaModel"),c(pj,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(_j,"href","/docs/transformers/pr_17924/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(uj,"href","/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTModel"),c(bj,"href","/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrModel"),c(vj,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertModel"),c(Fj,"href","/docs/transformers/pr_17924/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Tj,"href","/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTModel"),c(Mj,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraModel"),c(Ej,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertModel"),c(Cj,"href","/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaModel"),c(wj,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetModel"),c(Aj,"href","/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTModel"),c(Lj,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelModel"),c(yj,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelBaseModel"),c(xj,"href","/docs/transformers/pr_17924/en/model_doc/glpn#transformers.GLPNModel"),c($j,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2Model"),c(kj,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Sj,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Rj,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJModel"),c(Pj,"href","/docs/transformers/pr_17924/en/model_doc/groupvit#transformers.GroupViTModel"),c(Bj,"href","/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertModel"),c(Ij,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertModel"),c(Nj,"href","/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(qj,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(jj,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Dj,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Gj,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDModel"),c(Oj,"href","/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitModel"),c(Vj,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerModel"),c(Xj,"href","/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5Model"),c(zj,"href","/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeModel"),c(Qj,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertModel"),c(Wj,"href","/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100Model"),c(Hj,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianModel"),c(Uj,"href","/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Jj,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartModel"),c(Yj,"href","/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTModel"),c(Kj,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Zj,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertModel"),c(eD,"href","/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTModel"),c(oD,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetModel"),c(rD,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5Model"),c(tD,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpModel"),c(aD,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaModel"),c(nD,"href","/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerModel"),c(sD,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(lD,"href","/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTModel"),c(iD,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusModel"),c(dD,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverModel"),c(cD,"href","/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartModel"),c(fD,"href","/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerModel"),c(mD,"href","/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(gD,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertModel"),c(hD,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerModel"),c(pD,"href","/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetModel"),c(_D,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertModel"),c(uD,"href","/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetModel"),c(bD,"href","/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertModel"),c(vD,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaModel"),c(FD,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerModel"),c(TD,"href","/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerModel"),c(MD,"href","/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWModel"),c(ED,"href","/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDModel"),c(CD,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(wD,"href","/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterModel"),c(AD,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(LD,"href","/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinModel"),c(yD,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5Model"),c(xD,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasModel"),c($D,"href","/docs/transformers/pr_17924/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(kD,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(SD,"href","/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechModel"),c(RD,"href","/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(PD,"href","/docs/transformers/pr_17924/en/model_doc/van#transformers.VanModel"),c(BD,"href","/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltModel"),c(ID,"href","/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(ND,"href","/docs/transformers/pr_17924/en/model_doc/visual_bert#transformers.VisualBertModel"),c(qD,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTModel"),c(jD,"href","/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(DD,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(GD,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(OD,"href","/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMModel"),c(VD,"href","/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMModel"),c(XD,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMModel"),c(zD,"href","/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(QD,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(WD,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(HD,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetModel"),c(UD,"href","/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosModel"),c(JD,"href","/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qu,"id","transformers.AutoModelForPreTraining"),c(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qu,"href","#transformers.AutoModelForPreTraining"),c(Vi,"class","relative group"),c(YD,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KD,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZD,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eG,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForPreTraining"),c(oG,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(rG,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForPreTraining"),c(tG,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(aG,"href","/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForCausalLM"),c(nG,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(sG,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(lG,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(iG,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(dG,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(cG,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(fG,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForPreTraining"),c(mG,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(gG,"href","/docs/transformers/pr_17924/en/model_doc/flava#transformers.FlavaForPreTraining"),c(hG,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForPreTraining"),c(pG,"href","/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(_G,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(uG,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(bG,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(vG,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(FG,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(TG,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(MG,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(EG,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(CG,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(wG,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(AG,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(LG,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(yG,"href","/docs/transformers/pr_17924/en/model_doc/retribert#transformers.RetriBertModel"),c(xG,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c($G,"href","/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(kG,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(SG,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(RG,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(PG,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(BG,"href","/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(IG,"href","/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(NG,"href","/docs/transformers/pr_17924/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(qG,"href","/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(jG,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(DG,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(GG,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OG,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VG,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XG,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G2,"id","transformers.AutoModelForCausalLM"),c(G2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G2,"href","#transformers.AutoModelForCausalLM"),c(Qi,"class","relative group"),c(zG,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QG,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WG,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HG,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForCausalLM"),c(UG,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertLMHeadModel"),c(JG,"href","/docs/transformers/pr_17924/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(YG,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(KG,"href","/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(ZG,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(eO,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(oO,"href","/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForCausalLM"),c(rO,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(tO,"href","/docs/transformers/pr_17924/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(aO,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(nO,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(sO,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForCausalLM"),c(lO,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iO,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(dO,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(cO,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(fO,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianForCausalLM"),c(mO,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForCausalLM"),c(gO,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(hO,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForCausalLM"),c(pO,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(_O,"href","/docs/transformers/pr_17924/en/model_doc/opt#transformers.OPTForCausalLM"),c(uO,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(bO,"href","/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(vO,"href","/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(FO,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(TO,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(MO,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(EO,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(CO,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(wO,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(AO,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(LO,"href","/docs/transformers/pr_17924/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(yO,"href","/docs/transformers/pr_17924/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(xO,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($O,"href","/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(kO,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(SO,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(RO,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k1,"id","transformers.AutoModelForMaskedLM"),c(k1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k1,"href","#transformers.AutoModelForMaskedLM"),c(Ui,"class","relative group"),c(PO,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BO,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NO,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(qO,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(jO,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForMaskedLM"),c(DO,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(GO,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(OO,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(VO,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(XO,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(zO,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(QO,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WO,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(HO,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UO,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(JO,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(YO,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(KO,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(ZO,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(eV,"href","/docs/transformers/pr_17924/en/model_doc/luke#transformers.LukeForMaskedLM"),c(oV,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(rV,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(tV,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(aV,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(nV,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(sV,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(lV,"href","/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(iV,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(dV,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(cV,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(fV,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(mV,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(gV,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(hV,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(pV,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(_V,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uV,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(bV,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(vV,"href","/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.AutoModelForSeq2SeqLM"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ki,"class","relative group"),c(FV,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(CV,"href","/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(wV,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(AV,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(LV,"href","/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(yV,"href","/docs/transformers/pr_17924/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(xV,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDForConditionalGeneration"),c($V,"href","/docs/transformers/pr_17924/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(kV,"href","/docs/transformers/pr_17924/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(SV,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.MarianMTModel"),c(RV,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(PV,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(BV,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(IV,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(NV,"href","/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(qV,"href","/docs/transformers/pr_17924/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jV,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(DV,"href","/docs/transformers/pr_17924/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G4,"id","transformers.AutoModelForSequenceClassification"),c(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G4,"href","#transformers.AutoModelForSequenceClassification"),c(od,"class","relative group"),c(GV,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OV,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VV,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XV,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zV,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForSequenceClassification"),c(QV,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForSequenceClassification"),c(WV,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(HV,"href","/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(UV,"href","/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(JV,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(YV,"href","/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(KV,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(ZV,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eX,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oX,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rX,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tX,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aX,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nX,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sX,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lX,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iX,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dX,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cX,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(fX,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(mX,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gX,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hX,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(pX,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDForSequenceClassification"),c(_X,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(uX,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(bX,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(vX,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(FX,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(TX,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(MX,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(EX,"href","/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(CX,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(wX,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AX,"href","/docs/transformers/pr_17924/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(LX,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(yX,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xX,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($X,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kX,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SX,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RX,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(PX,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(BX,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(IX,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(NX,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(qX,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(jX,"href","/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gb,"id","transformers.AutoModelForMultipleChoice"),c(Gb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gb,"href","#transformers.AutoModelForMultipleChoice"),c(ad,"class","relative group"),c(DX,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GX,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OX,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VX,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(XX,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForMultipleChoice"),c(zX,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(QX,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(WX,"href","/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(HX,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(UX,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(JX,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(YX,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(KX,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(ZX,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(ez,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(oz,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(rz,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(tz,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(az,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(nz,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(sz,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(lz,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(iz,"href","/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dz,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cz,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(fz,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(mz,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gz,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hz,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(pz,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(_z,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(uz,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bz,"href","/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tv,"id","transformers.AutoModelForNextSentencePrediction"),c(Tv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tv,"href","#transformers.AutoModelForNextSentencePrediction"),c(ld,"class","relative group"),c(vz,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(Ez,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(Cz,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wz,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(Az,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(Lz,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kv,"id","transformers.AutoModelForTokenClassification"),c(kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kv,"href","#transformers.AutoModelForTokenClassification"),c(cd,"class","relative group"),c(yz,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xz,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($z,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kz,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(Sz,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForTokenClassification"),c(Rz,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(Pz,"href","/docs/transformers/pr_17924/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(Bz,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(Iz,"href","/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForTokenClassification"),c(Nz,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(qz,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(jz,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(Dz,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(Gz,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(Oz,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(Vz,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(Xz,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(zz,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(Qz,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(Wz,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(Hz,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(Uz,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(Jz,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Yz,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Kz,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Zz,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(eQ,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(oQ,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(rQ,"href","/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(tQ,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(aQ,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(nQ,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(sQ,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(lQ,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(iQ,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(dQ,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(cQ,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(fQ,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(mQ,"href","/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForQuestionAnswering"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForQuestionAnswering"),c(gd,"class","relative group"),c(gQ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hQ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pQ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_Q,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(uQ,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(bQ,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(vQ,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(FQ,"href","/docs/transformers/pr_17924/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(TQ,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(MQ,"href","/docs/transformers/pr_17924/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(EQ,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(CQ,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(wQ,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(AQ,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(LQ,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(yQ,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(xQ,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c($Q,"href","/docs/transformers/pr_17924/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(kQ,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(SQ,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(RQ,"href","/docs/transformers/pr_17924/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(PQ,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(BQ,"href","/docs/transformers/pr_17924/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(IQ,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(NQ,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(qQ,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(jQ,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(DQ,"href","/docs/transformers/pr_17924/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(GQ,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(OQ,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(VQ,"href","/docs/transformers/pr_17924/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(XQ,"href","/docs/transformers/pr_17924/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(zQ,"href","/docs/transformers/pr_17924/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(QQ,"href","/docs/transformers/pr_17924/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(WQ,"href","/docs/transformers/pr_17924/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(HQ,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(UQ,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(JQ,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(YQ,"href","/docs/transformers/pr_17924/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(KQ,"href","/docs/transformers/pr_17924/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(ZQ,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(eW,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(oW,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(rW,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(tW,"href","/docs/transformers/pr_17924/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForTableQuestionAnswering"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(_d,"class","relative group"),c(aW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hT,"id","transformers.AutoModelForImageClassification"),c(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hT,"href","#transformers.AutoModelForImageClassification"),c(vd,"class","relative group"),c(iW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fW,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitForImageClassification"),c(mW,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(gW,"href","/docs/transformers/pr_17924/en/model_doc/cvt#transformers.CvtForImageClassification"),c(hW,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(pW,"href","/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTForImageClassification"),c(_W,"href","/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(uW,"href","/docs/transformers/pr_17924/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(bW,"href","/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitForImageClassification"),c(vW,"href","/docs/transformers/pr_17924/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(FW,"href","/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(TW,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(MW,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(EW,"href","/docs/transformers/pr_17924/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(CW,"href","/docs/transformers/pr_17924/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(wW,"href","/docs/transformers/pr_17924/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(AW,"href","/docs/transformers/pr_17924/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(LW,"href","/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(yW,"href","/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinForImageClassification"),c(xW,"href","/docs/transformers/pr_17924/en/model_doc/van#transformers.VanForImageClassification"),c($W,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kT,"id","transformers.AutoModelForVision2Seq"),c(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kT,"href","#transformers.AutoModelForVision2Seq"),c(Md,"class","relative group"),c(kW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PW,"href","/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IT,"id","transformers.AutoModelForVisualQuestionAnswering"),c(IT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IT,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(wd,"class","relative group"),c(BW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qW,"href","/docs/transformers/pr_17924/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GT,"id","transformers.AutoModelForAudioClassification"),c(GT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GT,"href","#transformers.AutoModelForAudioClassification"),c(yd,"class","relative group"),c(jW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(VW,"href","/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(XW,"href","/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(zW,"href","/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(QW,"href","/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(WW,"href","/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(HW,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(UW,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(JW,"href","/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e7,"id","transformers.AutoModelForAudioFrameClassification"),c(e7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e7,"href","#transformers.AutoModelForAudioFrameClassification"),c(kd,"class","relative group"),c(YW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZW,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eH,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(oH,"href","/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(rH,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(tH,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(aH,"href","/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d7,"id","transformers.AutoModelForCTC"),c(d7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d7,"href","#transformers.AutoModelForCTC"),c(Pd,"class","relative group"),c(nH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iH,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(dH,"href","/docs/transformers/pr_17924/en/model_doc/hubert#transformers.HubertForCTC"),c(cH,"href","/docs/transformers/pr_17924/en/model_doc/mctct#transformers.MCTCTForCTC"),c(fH,"href","/docs/transformers/pr_17924/en/model_doc/sew#transformers.SEWForCTC"),c(mH,"href","/docs/transformers/pr_17924/en/model_doc/sew-d#transformers.SEWDForCTC"),c(gH,"href","/docs/transformers/pr_17924/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(hH,"href","/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(pH,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(_H,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(uH,"href","/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(E7,"id","transformers.AutoModelForSpeechSeq2Seq"),c(E7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(E7,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Nd,"class","relative group"),c(bH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TH,"href","/docs/transformers/pr_17924/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(MH,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(x7,"id","transformers.AutoModelForAudioXVector"),c(x7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(x7,"href","#transformers.AutoModelForAudioXVector"),c(Dd,"class","relative group"),c(EH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AH,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(LH,"href","/docs/transformers/pr_17924/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(yH,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(xH,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c($H,"href","/docs/transformers/pr_17924/en/model_doc/wavlm#transformers.WavLMForXVector"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.AutoModelForMaskedImageModeling"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.AutoModelForMaskedImageModeling"),c(Vd,"class","relative group"),c(kH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PH,"href","/docs/transformers/pr_17924/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(BH,"href","/docs/transformers/pr_17924/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(IH,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z7,"id","transformers.AutoModelForObjectDetection"),c(z7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z7,"href","#transformers.AutoModelForObjectDetection"),c(Wd,"class","relative group"),c(NH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrForObjectDetection"),c(GH,"href","/docs/transformers/pr_17924/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y7,"id","transformers.AutoModelForImageSegmentation"),c(Y7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y7,"href","#transformers.AutoModelForImageSegmentation"),c(Jd,"class","relative group"),c(OH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zH,"href","/docs/transformers/pr_17924/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r9,"id","transformers.AutoModelForSemanticSegmentation"),c(r9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r9,"href","#transformers.AutoModelForSemanticSegmentation"),c(Zd,"class","relative group"),c(QH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HH,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(JH,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(YH,"href","/docs/transformers/pr_17924/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(KH,"href","/docs/transformers/pr_17924/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(ZH,"href","/docs/transformers/pr_17924/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f9,"id","transformers.AutoModelForInstanceSegmentation"),c(f9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f9,"href","#transformers.AutoModelForInstanceSegmentation"),c(rc,"class","relative group"),c(eU,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oU,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rU,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tU,"href","/docs/transformers/pr_17924/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_9,"id","transformers.TFAutoModel"),c(_9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_9,"href","#transformers.TFAutoModel"),c(nc,"class","relative group"),c(aU,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nU,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sU,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lU,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertModel"),c(iU,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.TFBartModel"),c(dU,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertModel"),c(cU,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(fU,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(mU,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertModel"),c(gU,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.TFCLIPModel"),c(hU,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertModel"),c(pU,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.TFConvNextModel"),c(_U,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLModel"),c(uU,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(bU,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaModel"),c(vU,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(FU,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(TU,"href","/docs/transformers/pr_17924/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(MU,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraModel"),c(EU,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(CU,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelModel"),c(wU,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(AU,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2Model"),c(LU,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJModel"),c(yU,"href","/docs/transformers/pr_17924/en/model_doc/hubert#transformers.TFHubertModel"),c(xU,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c($U,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.TFLEDModel"),c(kU,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerModel"),c(SU,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.TFLxmertModel"),c(RU,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.TFMarianModel"),c(PU,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.TFMBartModel"),c(BU,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(IU,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetModel"),c(NU,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.TFMT5Model"),c(qU,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(jU,"href","/docs/transformers/pr_17924/en/model_doc/opt#transformers.TFOPTModel"),c(DU,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.TFPegasusModel"),c(GU,"href","/docs/transformers/pr_17924/en/model_doc/regnet#transformers.TFRegNetModel"),c(OU,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertModel"),c(VU,"href","/docs/transformers/pr_17924/en/model_doc/resnet#transformers.TFResNetModel"),c(XU,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaModel"),c(zU,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerModel"),c(QU,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(WU,"href","/docs/transformers/pr_17924/en/model_doc/swin#transformers.TFSwinModel"),c(HU,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.TFT5Model"),c(UU,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasModel"),c(JU,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(YU,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.TFViTModel"),c(KU,"href","/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(ZU,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(eJ,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMModel"),c(oJ,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(rJ,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gM,"id","transformers.TFAutoModelForPreTraining"),c(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gM,"href","#transformers.TFAutoModelForPreTraining"),c(ic,"class","relative group"),c(tJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sJ,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(lJ,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(iJ,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForPreTraining"),c(dJ,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(cJ,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(fJ,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(mJ,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(gJ,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(hJ,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(pJ,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(_J,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(uJ,"href","/docs/transformers/pr_17924/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(bJ,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(vJ,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(FJ,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(TJ,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(MJ,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(EJ,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(CJ,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(wJ,"href","/docs/transformers/pr_17924/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(AJ,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(LJ,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(yJ,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.TFAutoModelForCausalLM"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.TFAutoModelForCausalLM"),c(fc,"class","relative group"),c(xJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($J,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SJ,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(RJ,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(PJ,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BJ,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(IJ,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(NJ,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(qJ,"href","/docs/transformers/pr_17924/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(jJ,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(DJ,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(GJ,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(OJ,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VJ,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XJ,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.TFAutoModelForImageClassification"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.TFAutoModelForImageClassification"),c(hc,"class","relative group"),c(zJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WJ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HJ,"href","/docs/transformers/pr_17924/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(UJ,"href","/docs/transformers/pr_17924/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(JJ,"href","/docs/transformers/pr_17924/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(YJ,"href","/docs/transformers/pr_17924/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(KJ,"href","/docs/transformers/pr_17924/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(ZJ,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cE,"id","transformers.TFAutoModelForMaskedLM"),c(cE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cE,"href","#transformers.TFAutoModelForMaskedLM"),c(uc,"class","relative group"),c(eY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tY,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(aY,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(nY,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(sY,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(lY,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(iY,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(dY,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(cY,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(fY,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(mY,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(gY,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(hY,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(pY,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(_Y,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(uY,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(bY,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(vY,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(FY,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(TY,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(MY,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(RE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Fc,"class","relative group"),c(EY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AY,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(LY,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(yY,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(xY,"href","/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c($Y,"href","/docs/transformers/pr_17924/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(kY,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.TFMarianMTModel"),c(SY,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(RY,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(PY,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(BY,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QE,"id","transformers.TFAutoModelForSequenceClassification"),c(QE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QE,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ec,"class","relative group"),c(IY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jY,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(DY,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(GY,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(OY,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(VY,"href","/docs/transformers/pr_17924/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(XY,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(zY,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(QY,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(WY,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(HY,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(UY,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(JY,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(YY,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(KY,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(ZY,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(eK,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(oK,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(rK,"href","/docs/transformers/pr_17924/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(tK,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(aK,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(nK,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(sK,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(lK,"href","/docs/transformers/pr_17924/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(iK,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(dK,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(cK,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForMultipleChoice"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ac,"class","relative group"),c(fK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hK,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(pK,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(_K,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(uK,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(bK,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(vK,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(FK,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(TK,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(MK,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(EK,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(CK,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(wK,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(AK,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(LK,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(yK,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(xK,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c($K,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(GC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(xc,"class","relative group"),c(kK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PK,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(BK,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QC,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(QC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QC,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Sc,"class","relative group"),c(IK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jK,"href","/docs/transformers/pr_17924/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JC,"id","transformers.TFAutoModelForTokenClassification"),c(JC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JC,"href","#transformers.TFAutoModelForTokenClassification"),c(Bc,"class","relative group"),c(DK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OK,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VK,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(XK,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(zK,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(QK,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(WK,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(HK,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(UK,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(JK,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(YK,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(KK,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(ZK,"href","/docs/transformers/pr_17924/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(eZ,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(oZ,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(rZ,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(tZ,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(aZ,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(nZ,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(sZ,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(lZ,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(iZ,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v3,"id","transformers.TFAutoModelForQuestionAnswering"),c(v3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(qc,"class","relative group"),c(dZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mZ,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(gZ,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(hZ,"href","/docs/transformers/pr_17924/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(pZ,"href","/docs/transformers/pr_17924/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(_Z,"href","/docs/transformers/pr_17924/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(uZ,"href","/docs/transformers/pr_17924/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(bZ,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(vZ,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(FZ,"href","/docs/transformers/pr_17924/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(TZ,"href","/docs/transformers/pr_17924/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(MZ,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(EZ,"href","/docs/transformers/pr_17924/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(CZ,"href","/docs/transformers/pr_17924/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(wZ,"href","/docs/transformers/pr_17924/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(AZ,"href","/docs/transformers/pr_17924/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(LZ,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(yZ,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(xZ,"href","/docs/transformers/pr_17924/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c($Z,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(kZ,"href","/docs/transformers/pr_17924/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O3,"id","transformers.TFAutoModelForVision2Seq"),c(O3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O3,"href","#transformers.TFAutoModelForVision2Seq"),c(Gc,"class","relative group"),c(SZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Xc,"class","relative group"),c(IZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jZ,"href","/docs/transformers/pr_17924/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J3,"id","transformers.FlaxAutoModel"),c(J3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J3,"href","#transformers.FlaxAutoModel"),c(Wc,"class","relative group"),c(DZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OZ,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VZ,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertModel"),c(XZ,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartModel"),c(zZ,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.FlaxBeitModel"),c(QZ,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertModel"),c(WZ,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(HZ,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(UZ,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(JZ,"href","/docs/transformers/pr_17924/en/model_doc/clip#transformers.FlaxCLIPModel"),c(YZ,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(KZ,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraModel"),c(ZZ,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(eee,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(oee,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(ree,"href","/docs/transformers/pr_17924/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(tee,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.FlaxMarianModel"),c(aee,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartModel"),c(nee,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.FlaxMT5Model"),c(see,"href","/docs/transformers/pr_17924/en/model_doc/opt#transformers.FlaxOPTModel"),c(lee,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(iee,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(dee,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(cee,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.FlaxT5Model"),c(fee,"href","/docs/transformers/pr_17924/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(mee,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.FlaxViTModel"),c(gee,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(hee,"href","/docs/transformers/pr_17924/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(pee,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.FlaxAutoModelForCausalLM"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.FlaxAutoModelForCausalLM"),c(Jc,"class","relative group"),c(_ee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vee,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Fee,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Tee,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Mee,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Eee,"href","/docs/transformers/pr_17924/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Cee,"href","/docs/transformers/pr_17924/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(wee,"href","/docs/transformers/pr_17924/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Aee,"href","/docs/transformers/pr_17924/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(Lee,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(yee,"href","/docs/transformers/pr_17924/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForPreTraining"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForPreTraining"),c(Zc,"class","relative group"),c(xee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($ee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(See,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(Ree,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Pee,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(Bee,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(Iee,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(Nee,"href","/docs/transformers/pr_17924/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(qee,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(jee,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Dee,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(Gee,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(Oee,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vee,"href","/docs/transformers/pr_17924/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(Xee,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.FlaxAutoModelForMaskedLM"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.FlaxAutoModelForMaskedLM"),c(rf,"class","relative group"),c(zee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wee,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hee,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Uee,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Jee,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Yee,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(Kee,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Zee,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(eoe,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(ooe,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(roe,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(toe,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h0,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(h0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h0,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(nf,"class","relative group"),c(aoe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(noe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(soe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(loe,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(ioe,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(doe,"href","/docs/transformers/pr_17924/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(coe,"href","/docs/transformers/pr_17924/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(foe,"href","/docs/transformers/pr_17924/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(moe,"href","/docs/transformers/pr_17924/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(goe,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(hoe,"href","/docs/transformers/pr_17924/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(poe,"href","/docs/transformers/pr_17924/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(_oe,"href","/docs/transformers/pr_17924/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L0,"id","transformers.FlaxAutoModelForSequenceClassification"),c(L0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L0,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(df,"class","relative group"),c(uoe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(boe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(voe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Foe,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Toe,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Moe,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Eoe,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Coe,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(woe,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Aoe,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Loe,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(yoe,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(xoe,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D0,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(D0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D0,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(mf,"class","relative group"),c($oe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(koe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Soe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Roe,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Poe,"href","/docs/transformers/pr_17924/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Boe,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Ioe,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Noe,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(qoe,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(joe,"href","/docs/transformers/pr_17924/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(Doe,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(Goe,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(Ooe,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z0,"id","transformers.FlaxAutoModelForTokenClassification"),c(Z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z0,"href","#transformers.FlaxAutoModelForTokenClassification"),c(pf,"class","relative group"),c(Voe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xoe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zoe,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qoe,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Woe,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Hoe,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Uoe,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Joe,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Yoe,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Koe,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Zoe,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cw,"id","transformers.FlaxAutoModelForMultipleChoice"),c(cw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cw,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(bf,"class","relative group"),c(ere,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ore,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tre,"href","/docs/transformers/pr_17924/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(are,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(nre,"href","/docs/transformers/pr_17924/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(sre,"href","/docs/transformers/pr_17924/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(lre,"href","/docs/transformers/pr_17924/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(ire,"href","/docs/transformers/pr_17924/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(dre,"href","/docs/transformers/pr_17924/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(cre,"href","/docs/transformers/pr_17924/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tw,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(Tw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tw,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Tf,"class","relative group"),c(fre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hre,"href","/docs/transformers/pr_17924/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ww,"id","transformers.FlaxAutoModelForImageClassification"),c(ww,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ww,"href","#transformers.FlaxAutoModelForImageClassification"),c(Cf,"class","relative group"),c(pre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_re,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bre,"href","/docs/transformers/pr_17924/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(vre,"href","/docs/transformers/pr_17924/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($w,"id","transformers.FlaxAutoModelForVision2Seq"),c($w,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($w,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Lf,"class","relative group"),c(Fre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mre,"href","/docs/transformers/pr_17924/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ere,"href","/docs/transformers/pr_17924/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,u){e(document.head,g),b(f,v,u),b(f,p,u),e(p,m),e(m,_),M(d,_,null),e(p,h),e(p,Eo),e(Eo,Ai),b(f,Rf,u),b(f,st,u),e(st,Li),e(st,yi),e(yi,K6),e(st,Pf),b(f,Oe,u),b(f,Qe,u),e(Qe,xi),e(Qe,Pn),e(Pn,Z6),e(Qe,Bn),e(Qe,In),e(In,eL),e(Qe,$i),e(Qe,Nn),e(Nn,oL),e(Qe,ki),b(f,Bf,u),M(Sa,f,u),b(f,We,u),b(f,Ae,u),e(Ae,SS),e(Ae,Si),e(Si,RS),e(Ae,PS),b(f,Co,u),b(f,Ra,u),e(Ra,BS),e(Ra,If),e(If,IS),e(Ra,tHe),b(f,OVe,u),b(f,Ri,u),e(Ri,Nf),e(Nf,bae),M(rL,bae,null),e(Ri,aHe),e(Ri,vae),e(vae,nHe),b(f,VVe,u),b(f,qn,u),e(qn,sHe),e(qn,Fae),e(Fae,lHe),e(qn,iHe),e(qn,Tae),e(Tae,dHe),e(qn,cHe),b(f,XVe,u),M(tL,f,u),b(f,zVe,u),b(f,NS,u),e(NS,fHe),b(f,QVe,u),M(qf,f,u),b(f,WVe,u),b(f,Pi,u),e(Pi,jf),e(jf,Mae),M(aL,Mae,null),e(Pi,mHe),e(Pi,Eae),e(Eae,gHe),b(f,HVe,u),b(f,wo,u),M(nL,wo,null),e(wo,hHe),e(wo,sL),e(sL,pHe),e(sL,qS),e(qS,_He),e(sL,uHe),e(wo,bHe),e(wo,lL),e(lL,vHe),e(lL,Cae),e(Cae,FHe),e(lL,THe),e(wo,MHe),e(wo,Lr),M(iL,Lr,null),e(Lr,EHe),e(Lr,wae),e(wae,CHe),e(Lr,wHe),e(Lr,Bi),e(Bi,AHe),e(Bi,Aae),e(Aae,LHe),e(Bi,yHe),e(Bi,Lae),e(Lae,xHe),e(Bi,$He),e(Lr,kHe),e(Lr,A),e(A,Df),e(Df,yae),e(yae,SHe),e(Df,RHe),e(Df,jS),e(jS,PHe),e(Df,BHe),e(A,IHe),e(A,Gf),e(Gf,xae),e(xae,NHe),e(Gf,qHe),e(Gf,DS),e(DS,jHe),e(Gf,DHe),e(A,GHe),e(A,Of),e(Of,$ae),e($ae,OHe),e(Of,VHe),e(Of,GS),e(GS,XHe),e(Of,zHe),e(A,QHe),e(A,Vf),e(Vf,kae),e(kae,WHe),e(Vf,HHe),e(Vf,OS),e(OS,UHe),e(Vf,JHe),e(A,YHe),e(A,Xf),e(Xf,Sae),e(Sae,KHe),e(Xf,ZHe),e(Xf,VS),e(VS,eUe),e(Xf,oUe),e(A,rUe),e(A,zf),e(zf,Rae),e(Rae,tUe),e(zf,aUe),e(zf,XS),e(XS,nUe),e(zf,sUe),e(A,lUe),e(A,Qf),e(Qf,Pae),e(Pae,iUe),e(Qf,dUe),e(Qf,zS),e(zS,cUe),e(Qf,fUe),e(A,mUe),e(A,Wf),e(Wf,Bae),e(Bae,gUe),e(Wf,hUe),e(Wf,QS),e(QS,pUe),e(Wf,_Ue),e(A,uUe),e(A,Hf),e(Hf,Iae),e(Iae,bUe),e(Hf,vUe),e(Hf,WS),e(WS,FUe),e(Hf,TUe),e(A,MUe),e(A,Uf),e(Uf,Nae),e(Nae,EUe),e(Uf,CUe),e(Uf,HS),e(HS,wUe),e(Uf,AUe),e(A,LUe),e(A,Jf),e(Jf,qae),e(qae,yUe),e(Jf,xUe),e(Jf,US),e(US,$Ue),e(Jf,kUe),e(A,SUe),e(A,Yf),e(Yf,jae),e(jae,RUe),e(Yf,PUe),e(Yf,JS),e(JS,BUe),e(Yf,IUe),e(A,NUe),e(A,Kf),e(Kf,Dae),e(Dae,qUe),e(Kf,jUe),e(Kf,YS),e(YS,DUe),e(Kf,GUe),e(A,OUe),e(A,Zf),e(Zf,Gae),e(Gae,VUe),e(Zf,XUe),e(Zf,KS),e(KS,zUe),e(Zf,QUe),e(A,WUe),e(A,em),e(em,Oae),e(Oae,HUe),e(em,UUe),e(em,ZS),e(ZS,JUe),e(em,YUe),e(A,KUe),e(A,om),e(om,Vae),e(Vae,ZUe),e(om,eJe),e(om,eR),e(eR,oJe),e(om,rJe),e(A,tJe),e(A,rm),e(rm,Xae),e(Xae,aJe),e(rm,nJe),e(rm,oR),e(oR,sJe),e(rm,lJe),e(A,iJe),e(A,tm),e(tm,zae),e(zae,dJe),e(tm,cJe),e(tm,rR),e(rR,fJe),e(tm,mJe),e(A,gJe),e(A,am),e(am,Qae),e(Qae,hJe),e(am,pJe),e(am,tR),e(tR,_Je),e(am,uJe),e(A,bJe),e(A,nm),e(nm,Wae),e(Wae,vJe),e(nm,FJe),e(nm,aR),e(aR,TJe),e(nm,MJe),e(A,EJe),e(A,sm),e(sm,Hae),e(Hae,CJe),e(sm,wJe),e(sm,nR),e(nR,AJe),e(sm,LJe),e(A,yJe),e(A,lm),e(lm,Uae),e(Uae,xJe),e(lm,$Je),e(lm,sR),e(sR,kJe),e(lm,SJe),e(A,RJe),e(A,im),e(im,Jae),e(Jae,PJe),e(im,BJe),e(im,lR),e(lR,IJe),e(im,NJe),e(A,qJe),e(A,dm),e(dm,Yae),e(Yae,jJe),e(dm,DJe),e(dm,iR),e(iR,GJe),e(dm,OJe),e(A,VJe),e(A,cm),e(cm,Kae),e(Kae,XJe),e(cm,zJe),e(cm,dR),e(dR,QJe),e(cm,WJe),e(A,HJe),e(A,fm),e(fm,Zae),e(Zae,UJe),e(fm,JJe),e(fm,cR),e(cR,YJe),e(fm,KJe),e(A,ZJe),e(A,mm),e(mm,ene),e(ene,eYe),e(mm,oYe),e(mm,fR),e(fR,rYe),e(mm,tYe),e(A,aYe),e(A,gm),e(gm,one),e(one,nYe),e(gm,sYe),e(gm,mR),e(mR,lYe),e(gm,iYe),e(A,dYe),e(A,hm),e(hm,rne),e(rne,cYe),e(hm,fYe),e(hm,gR),e(gR,mYe),e(hm,gYe),e(A,hYe),e(A,pm),e(pm,tne),e(tne,pYe),e(pm,_Ye),e(pm,hR),e(hR,uYe),e(pm,bYe),e(A,vYe),e(A,_m),e(_m,ane),e(ane,FYe),e(_m,TYe),e(_m,pR),e(pR,MYe),e(_m,EYe),e(A,CYe),e(A,um),e(um,nne),e(nne,wYe),e(um,AYe),e(um,_R),e(_R,LYe),e(um,yYe),e(A,xYe),e(A,bm),e(bm,sne),e(sne,$Ye),e(bm,kYe),e(bm,uR),e(uR,SYe),e(bm,RYe),e(A,PYe),e(A,vm),e(vm,lne),e(lne,BYe),e(vm,IYe),e(vm,bR),e(bR,NYe),e(vm,qYe),e(A,jYe),e(A,Fm),e(Fm,ine),e(ine,DYe),e(Fm,GYe),e(Fm,vR),e(vR,OYe),e(Fm,VYe),e(A,XYe),e(A,Tm),e(Tm,dne),e(dne,zYe),e(Tm,QYe),e(Tm,FR),e(FR,WYe),e(Tm,HYe),e(A,UYe),e(A,Mm),e(Mm,cne),e(cne,JYe),e(Mm,YYe),e(Mm,TR),e(TR,KYe),e(Mm,ZYe),e(A,eKe),e(A,Em),e(Em,fne),e(fne,oKe),e(Em,rKe),e(Em,MR),e(MR,tKe),e(Em,aKe),e(A,nKe),e(A,Cm),e(Cm,mne),e(mne,sKe),e(Cm,lKe),e(Cm,ER),e(ER,iKe),e(Cm,dKe),e(A,cKe),e(A,wm),e(wm,gne),e(gne,fKe),e(wm,mKe),e(wm,CR),e(CR,gKe),e(wm,hKe),e(A,pKe),e(A,Am),e(Am,hne),e(hne,_Ke),e(Am,uKe),e(Am,wR),e(wR,bKe),e(Am,vKe),e(A,FKe),e(A,Lm),e(Lm,pne),e(pne,TKe),e(Lm,MKe),e(Lm,AR),e(AR,EKe),e(Lm,CKe),e(A,wKe),e(A,ym),e(ym,_ne),e(_ne,AKe),e(ym,LKe),e(ym,LR),e(LR,yKe),e(ym,xKe),e(A,$Ke),e(A,xm),e(xm,une),e(une,kKe),e(xm,SKe),e(xm,yR),e(yR,RKe),e(xm,PKe),e(A,BKe),e(A,$m),e($m,bne),e(bne,IKe),e($m,NKe),e($m,xR),e(xR,qKe),e($m,jKe),e(A,DKe),e(A,km),e(km,vne),e(vne,GKe),e(km,OKe),e(km,$R),e($R,VKe),e(km,XKe),e(A,zKe),e(A,Sm),e(Sm,Fne),e(Fne,QKe),e(Sm,WKe),e(Sm,kR),e(kR,HKe),e(Sm,UKe),e(A,JKe),e(A,Rm),e(Rm,Tne),e(Tne,YKe),e(Rm,KKe),e(Rm,SR),e(SR,ZKe),e(Rm,eZe),e(A,oZe),e(A,Pm),e(Pm,Mne),e(Mne,rZe),e(Pm,tZe),e(Pm,RR),e(RR,aZe),e(Pm,nZe),e(A,sZe),e(A,Bm),e(Bm,Ene),e(Ene,lZe),e(Bm,iZe),e(Bm,PR),e(PR,dZe),e(Bm,cZe),e(A,fZe),e(A,Im),e(Im,Cne),e(Cne,mZe),e(Im,gZe),e(Im,BR),e(BR,hZe),e(Im,pZe),e(A,_Ze),e(A,Nm),e(Nm,wne),e(wne,uZe),e(Nm,bZe),e(Nm,IR),e(IR,vZe),e(Nm,FZe),e(A,TZe),e(A,qm),e(qm,Ane),e(Ane,MZe),e(qm,EZe),e(qm,NR),e(NR,CZe),e(qm,wZe),e(A,AZe),e(A,jm),e(jm,Lne),e(Lne,LZe),e(jm,yZe),e(jm,qR),e(qR,xZe),e(jm,$Ze),e(A,kZe),e(A,Dm),e(Dm,yne),e(yne,SZe),e(Dm,RZe),e(Dm,jR),e(jR,PZe),e(Dm,BZe),e(A,IZe),e(A,Gm),e(Gm,xne),e(xne,NZe),e(Gm,qZe),e(Gm,DR),e(DR,jZe),e(Gm,DZe),e(A,GZe),e(A,Om),e(Om,$ne),e($ne,OZe),e(Om,VZe),e(Om,GR),e(GR,XZe),e(Om,zZe),e(A,QZe),e(A,Vm),e(Vm,kne),e(kne,WZe),e(Vm,HZe),e(Vm,OR),e(OR,UZe),e(Vm,JZe),e(A,YZe),e(A,Xm),e(Xm,Sne),e(Sne,KZe),e(Xm,ZZe),e(Xm,VR),e(VR,eeo),e(Xm,oeo),e(A,reo),e(A,zm),e(zm,Rne),e(Rne,teo),e(zm,aeo),e(zm,XR),e(XR,neo),e(zm,seo),e(A,leo),e(A,Qm),e(Qm,Pne),e(Pne,ieo),e(Qm,deo),e(Qm,zR),e(zR,ceo),e(Qm,feo),e(A,meo),e(A,Wm),e(Wm,Bne),e(Bne,geo),e(Wm,heo),e(Wm,QR),e(QR,peo),e(Wm,_eo),e(A,ueo),e(A,Hm),e(Hm,Ine),e(Ine,beo),e(Hm,veo),e(Hm,WR),e(WR,Feo),e(Hm,Teo),e(A,Meo),e(A,Um),e(Um,Nne),e(Nne,Eeo),e(Um,Ceo),e(Um,HR),e(HR,weo),e(Um,Aeo),e(A,Leo),e(A,Jm),e(Jm,qne),e(qne,yeo),e(Jm,xeo),e(Jm,UR),e(UR,$eo),e(Jm,keo),e(A,Seo),e(A,Ym),e(Ym,jne),e(jne,Reo),e(Ym,Peo),e(Ym,JR),e(JR,Beo),e(Ym,Ieo),e(A,Neo),e(A,Km),e(Km,Dne),e(Dne,qeo),e(Km,jeo),e(Km,YR),e(YR,Deo),e(Km,Geo),e(A,Oeo),e(A,Zm),e(Zm,Gne),e(Gne,Veo),e(Zm,Xeo),e(Zm,KR),e(KR,zeo),e(Zm,Qeo),e(A,Weo),e(A,eg),e(eg,One),e(One,Heo),e(eg,Ueo),e(eg,ZR),e(ZR,Jeo),e(eg,Yeo),e(A,Keo),e(A,og),e(og,Vne),e(Vne,Zeo),e(og,eoo),e(og,eP),e(eP,ooo),e(og,roo),e(A,too),e(A,rg),e(rg,Xne),e(Xne,aoo),e(rg,noo),e(rg,oP),e(oP,soo),e(rg,loo),e(A,ioo),e(A,tg),e(tg,zne),e(zne,doo),e(tg,coo),e(tg,rP),e(rP,foo),e(tg,moo),e(A,goo),e(A,ag),e(ag,Qne),e(Qne,hoo),e(ag,poo),e(ag,tP),e(tP,_oo),e(ag,uoo),e(A,boo),e(A,ng),e(ng,Wne),e(Wne,voo),e(ng,Foo),e(ng,aP),e(aP,Too),e(ng,Moo),e(A,Eoo),e(A,sg),e(sg,Hne),e(Hne,Coo),e(sg,woo),e(sg,nP),e(nP,Aoo),e(sg,Loo),e(A,yoo),e(A,lg),e(lg,Une),e(Une,xoo),e(lg,$oo),e(lg,sP),e(sP,koo),e(lg,Soo),e(A,Roo),e(A,ig),e(ig,Jne),e(Jne,Poo),e(ig,Boo),e(ig,lP),e(lP,Ioo),e(ig,Noo),e(A,qoo),e(A,dg),e(dg,Yne),e(Yne,joo),e(dg,Doo),e(dg,iP),e(iP,Goo),e(dg,Ooo),e(A,Voo),e(A,cg),e(cg,Kne),e(Kne,Xoo),e(cg,zoo),e(cg,dP),e(dP,Qoo),e(cg,Woo),e(A,Hoo),e(A,fg),e(fg,Zne),e(Zne,Uoo),e(fg,Joo),e(fg,cP),e(cP,Yoo),e(fg,Koo),e(A,Zoo),e(A,mg),e(mg,ese),e(ese,ero),e(mg,oro),e(mg,fP),e(fP,rro),e(mg,tro),e(A,aro),e(A,gg),e(gg,ose),e(ose,nro),e(gg,sro),e(gg,mP),e(mP,lro),e(gg,iro),e(A,dro),e(A,hg),e(hg,rse),e(rse,cro),e(hg,fro),e(hg,gP),e(gP,mro),e(hg,gro),e(A,hro),e(A,pg),e(pg,tse),e(tse,pro),e(pg,_ro),e(pg,hP),e(hP,uro),e(pg,bro),e(A,vro),e(A,_g),e(_g,ase),e(ase,Fro),e(_g,Tro),e(_g,pP),e(pP,Mro),e(_g,Ero),e(A,Cro),e(A,ug),e(ug,nse),e(nse,wro),e(ug,Aro),e(ug,_P),e(_P,Lro),e(ug,yro),e(A,xro),e(A,bg),e(bg,sse),e(sse,$ro),e(bg,kro),e(bg,uP),e(uP,Sro),e(bg,Rro),e(A,Pro),e(A,vg),e(vg,lse),e(lse,Bro),e(vg,Iro),e(vg,bP),e(bP,Nro),e(vg,qro),e(A,jro),e(A,Fg),e(Fg,ise),e(ise,Dro),e(Fg,Gro),e(Fg,vP),e(vP,Oro),e(Fg,Vro),e(A,Xro),e(A,Tg),e(Tg,dse),e(dse,zro),e(Tg,Qro),e(Tg,FP),e(FP,Wro),e(Tg,Hro),e(A,Uro),e(A,Mg),e(Mg,cse),e(cse,Jro),e(Mg,Yro),e(Mg,TP),e(TP,Kro),e(Mg,Zro),e(A,eto),e(A,Eg),e(Eg,fse),e(fse,oto),e(Eg,rto),e(Eg,MP),e(MP,tto),e(Eg,ato),e(A,nto),e(A,Cg),e(Cg,mse),e(mse,sto),e(Cg,lto),e(Cg,EP),e(EP,ito),e(Cg,dto),e(A,cto),e(A,wg),e(wg,gse),e(gse,fto),e(wg,mto),e(wg,CP),e(CP,gto),e(wg,hto),e(A,pto),e(A,Ag),e(Ag,hse),e(hse,_to),e(Ag,uto),e(Ag,wP),e(wP,bto),e(Ag,vto),e(A,Fto),e(A,Lg),e(Lg,pse),e(pse,Tto),e(Lg,Mto),e(Lg,AP),e(AP,Eto),e(Lg,Cto),e(A,wto),e(A,yg),e(yg,_se),e(_se,Ato),e(yg,Lto),e(yg,LP),e(LP,yto),e(yg,xto),e(A,$to),e(A,xg),e(xg,use),e(use,kto),e(xg,Sto),e(xg,yP),e(yP,Rto),e(xg,Pto),e(A,Bto),e(A,$g),e($g,bse),e(bse,Ito),e($g,Nto),e($g,xP),e(xP,qto),e($g,jto),e(A,Dto),e(A,kg),e(kg,vse),e(vse,Gto),e(kg,Oto),e(kg,$P),e($P,Vto),e(kg,Xto),e(A,zto),e(A,Sg),e(Sg,Fse),e(Fse,Qto),e(Sg,Wto),e(Sg,kP),e(kP,Hto),e(Sg,Uto),e(A,Jto),e(A,Rg),e(Rg,Tse),e(Tse,Yto),e(Rg,Kto),e(Rg,SP),e(SP,Zto),e(Rg,eao),e(A,oao),e(A,Pg),e(Pg,Mse),e(Mse,rao),e(Pg,tao),e(Pg,RP),e(RP,aao),e(Pg,nao),e(A,sao),e(A,Bg),e(Bg,Ese),e(Ese,lao),e(Bg,iao),e(Bg,PP),e(PP,dao),e(Bg,cao),e(A,fao),e(A,Ig),e(Ig,Cse),e(Cse,mao),e(Ig,gao),e(Ig,BP),e(BP,hao),e(Ig,pao),e(A,_ao),e(A,Ng),e(Ng,wse),e(wse,uao),e(Ng,bao),e(Ng,IP),e(IP,vao),e(Ng,Fao),e(A,Tao),e(A,qg),e(qg,Ase),e(Ase,Mao),e(qg,Eao),e(qg,NP),e(NP,Cao),e(qg,wao),e(A,Aao),e(A,jg),e(jg,Lse),e(Lse,Lao),e(jg,yao),e(jg,qP),e(qP,xao),e(jg,$ao),e(A,kao),e(A,Dg),e(Dg,yse),e(yse,Sao),e(Dg,Rao),e(Dg,jP),e(jP,Pao),e(Dg,Bao),e(A,Iao),e(A,Gg),e(Gg,xse),e(xse,Nao),e(Gg,qao),e(Gg,DP),e(DP,jao),e(Gg,Dao),e(A,Gao),e(A,Og),e(Og,$se),e($se,Oao),e(Og,Vao),e(Og,GP),e(GP,Xao),e(Og,zao),e(A,Qao),e(A,Vg),e(Vg,kse),e(kse,Wao),e(Vg,Hao),e(Vg,OP),e(OP,Uao),e(Vg,Jao),e(A,Yao),e(A,Xg),e(Xg,Sse),e(Sse,Kao),e(Xg,Zao),e(Xg,VP),e(VP,eno),e(Xg,ono),e(A,rno),e(A,zg),e(zg,Rse),e(Rse,tno),e(zg,ano),e(zg,XP),e(XP,nno),e(zg,sno),e(A,lno),e(A,Qg),e(Qg,Pse),e(Pse,ino),e(Qg,dno),e(Qg,zP),e(zP,cno),e(Qg,fno),e(A,mno),e(A,Wg),e(Wg,Bse),e(Bse,gno),e(Wg,hno),e(Wg,QP),e(QP,pno),e(Wg,_no),e(A,uno),e(A,Hg),e(Hg,Ise),e(Ise,bno),e(Hg,vno),e(Hg,WP),e(WP,Fno),e(Hg,Tno),e(A,Mno),e(A,Ug),e(Ug,Nse),e(Nse,Eno),e(Ug,Cno),e(Ug,HP),e(HP,wno),e(Ug,Ano),e(Lr,Lno),M(Jg,Lr,null),e(wo,yno),e(wo,Yg),M(dL,Yg,null),e(Yg,xno),e(Yg,qse),e(qse,$no),b(f,UVe,u),b(f,Ii,u),e(Ii,Kg),e(Kg,jse),M(cL,jse,null),e(Ii,kno),e(Ii,Dse),e(Dse,Sno),b(f,JVe,u),b(f,Ao,u),M(fL,Ao,null),e(Ao,Rno),e(Ao,mL),e(mL,Pno),e(mL,UP),e(UP,Bno),e(mL,Ino),e(Ao,Nno),e(Ao,gL),e(gL,qno),e(gL,Gse),e(Gse,jno),e(gL,Dno),e(Ao,Gno),e(Ao,yr),M(hL,yr,null),e(yr,Ono),e(yr,Ose),e(Ose,Vno),e(yr,Xno),e(yr,Pa),e(Pa,zno),e(Pa,Vse),e(Vse,Qno),e(Pa,Wno),e(Pa,Xse),e(Xse,Hno),e(Pa,Uno),e(Pa,zse),e(zse,Jno),e(Pa,Yno),e(yr,Kno),e(yr,k),e(k,jn),e(jn,Qse),e(Qse,Zno),e(jn,eso),e(jn,JP),e(JP,oso),e(jn,rso),e(jn,YP),e(YP,tso),e(jn,aso),e(k,nso),e(k,Dn),e(Dn,Wse),e(Wse,sso),e(Dn,lso),e(Dn,KP),e(KP,iso),e(Dn,dso),e(Dn,ZP),e(ZP,cso),e(Dn,fso),e(k,mso),e(k,Gn),e(Gn,Hse),e(Hse,gso),e(Gn,hso),e(Gn,eB),e(eB,pso),e(Gn,_so),e(Gn,oB),e(oB,uso),e(Gn,bso),e(k,vso),e(k,Zg),e(Zg,Use),e(Use,Fso),e(Zg,Tso),e(Zg,rB),e(rB,Mso),e(Zg,Eso),e(k,Cso),e(k,On),e(On,Jse),e(Jse,wso),e(On,Aso),e(On,tB),e(tB,Lso),e(On,yso),e(On,aB),e(aB,xso),e(On,$so),e(k,kso),e(k,eh),e(eh,Yse),e(Yse,Sso),e(eh,Rso),e(eh,nB),e(nB,Pso),e(eh,Bso),e(k,Iso),e(k,oh),e(oh,Kse),e(Kse,Nso),e(oh,qso),e(oh,sB),e(sB,jso),e(oh,Dso),e(k,Gso),e(k,rh),e(rh,Zse),e(Zse,Oso),e(rh,Vso),e(rh,lB),e(lB,Xso),e(rh,zso),e(k,Qso),e(k,Vn),e(Vn,ele),e(ele,Wso),e(Vn,Hso),e(Vn,iB),e(iB,Uso),e(Vn,Jso),e(Vn,dB),e(dB,Yso),e(Vn,Kso),e(k,Zso),e(k,Xn),e(Xn,ole),e(ole,elo),e(Xn,olo),e(Xn,cB),e(cB,rlo),e(Xn,tlo),e(Xn,fB),e(fB,alo),e(Xn,nlo),e(k,slo),e(k,zn),e(zn,rle),e(rle,llo),e(zn,ilo),e(zn,mB),e(mB,dlo),e(zn,clo),e(zn,gB),e(gB,flo),e(zn,mlo),e(k,glo),e(k,th),e(th,tle),e(tle,hlo),e(th,plo),e(th,hB),e(hB,_lo),e(th,ulo),e(k,blo),e(k,ah),e(ah,ale),e(ale,vlo),e(ah,Flo),e(ah,pB),e(pB,Tlo),e(ah,Mlo),e(k,Elo),e(k,nh),e(nh,nle),e(nle,Clo),e(nh,wlo),e(nh,_B),e(_B,Alo),e(nh,Llo),e(k,ylo),e(k,Qn),e(Qn,sle),e(sle,xlo),e(Qn,$lo),e(Qn,uB),e(uB,klo),e(Qn,Slo),e(Qn,bB),e(bB,Rlo),e(Qn,Plo),e(k,Blo),e(k,sh),e(sh,lle),e(lle,Ilo),e(sh,Nlo),e(sh,vB),e(vB,qlo),e(sh,jlo),e(k,Dlo),e(k,Wn),e(Wn,ile),e(ile,Glo),e(Wn,Olo),e(Wn,FB),e(FB,Vlo),e(Wn,Xlo),e(Wn,TB),e(TB,zlo),e(Wn,Qlo),e(k,Wlo),e(k,Hn),e(Hn,dle),e(dle,Hlo),e(Hn,Ulo),e(Hn,MB),e(MB,Jlo),e(Hn,Ylo),e(Hn,EB),e(EB,Klo),e(Hn,Zlo),e(k,eio),e(k,Un),e(Un,cle),e(cle,oio),e(Un,rio),e(Un,CB),e(CB,tio),e(Un,aio),e(Un,wB),e(wB,nio),e(Un,sio),e(k,lio),e(k,Jn),e(Jn,fle),e(fle,iio),e(Jn,dio),e(Jn,AB),e(AB,cio),e(Jn,fio),e(Jn,LB),e(LB,mio),e(Jn,gio),e(k,hio),e(k,lh),e(lh,mle),e(mle,pio),e(lh,_io),e(lh,yB),e(yB,uio),e(lh,bio),e(k,vio),e(k,Yn),e(Yn,gle),e(gle,Fio),e(Yn,Tio),e(Yn,xB),e(xB,Mio),e(Yn,Eio),e(Yn,$B),e($B,Cio),e(Yn,wio),e(k,Aio),e(k,Kn),e(Kn,hle),e(hle,Lio),e(Kn,yio),e(Kn,kB),e(kB,xio),e(Kn,$io),e(Kn,SB),e(SB,kio),e(Kn,Sio),e(k,Rio),e(k,Zn),e(Zn,ple),e(ple,Pio),e(Zn,Bio),e(Zn,RB),e(RB,Iio),e(Zn,Nio),e(Zn,PB),e(PB,qio),e(Zn,jio),e(k,Dio),e(k,es),e(es,_le),e(_le,Gio),e(es,Oio),e(es,BB),e(BB,Vio),e(es,Xio),e(es,IB),e(IB,zio),e(es,Qio),e(k,Wio),e(k,os),e(os,ule),e(ule,Hio),e(os,Uio),e(os,NB),e(NB,Jio),e(os,Yio),e(os,qB),e(qB,Kio),e(os,Zio),e(k,edo),e(k,rs),e(rs,ble),e(ble,odo),e(rs,rdo),e(rs,jB),e(jB,tdo),e(rs,ado),e(rs,DB),e(DB,ndo),e(rs,sdo),e(k,ldo),e(k,ih),e(ih,vle),e(vle,ido),e(ih,ddo),e(ih,GB),e(GB,cdo),e(ih,fdo),e(k,mdo),e(k,ts),e(ts,Fle),e(Fle,gdo),e(ts,hdo),e(ts,OB),e(OB,pdo),e(ts,_do),e(ts,VB),e(VB,udo),e(ts,bdo),e(k,vdo),e(k,dh),e(dh,Tle),e(Tle,Fdo),e(dh,Tdo),e(dh,XB),e(XB,Mdo),e(dh,Edo),e(k,Cdo),e(k,as),e(as,Mle),e(Mle,wdo),e(as,Ado),e(as,zB),e(zB,Ldo),e(as,ydo),e(as,QB),e(QB,xdo),e(as,$do),e(k,kdo),e(k,ns),e(ns,Ele),e(Ele,Sdo),e(ns,Rdo),e(ns,WB),e(WB,Pdo),e(ns,Bdo),e(ns,HB),e(HB,Ido),e(ns,Ndo),e(k,qdo),e(k,ss),e(ss,Cle),e(Cle,jdo),e(ss,Ddo),e(ss,UB),e(UB,Gdo),e(ss,Odo),e(ss,JB),e(JB,Vdo),e(ss,Xdo),e(k,zdo),e(k,ch),e(ch,wle),e(wle,Qdo),e(ch,Wdo),e(ch,YB),e(YB,Hdo),e(ch,Udo),e(k,Jdo),e(k,ls),e(ls,Ale),e(Ale,Ydo),e(ls,Kdo),e(ls,KB),e(KB,Zdo),e(ls,eco),e(ls,ZB),e(ZB,oco),e(ls,rco),e(k,tco),e(k,is),e(is,Lle),e(Lle,aco),e(is,nco),e(is,eI),e(eI,sco),e(is,lco),e(is,oI),e(oI,ico),e(is,dco),e(k,cco),e(k,ds),e(ds,yle),e(yle,fco),e(ds,mco),e(ds,rI),e(rI,gco),e(ds,hco),e(ds,tI),e(tI,pco),e(ds,_co),e(k,uco),e(k,fh),e(fh,xle),e(xle,bco),e(fh,vco),e(fh,aI),e(aI,Fco),e(fh,Tco),e(k,Mco),e(k,cs),e(cs,$le),e($le,Eco),e(cs,Cco),e(cs,nI),e(nI,wco),e(cs,Aco),e(cs,sI),e(sI,Lco),e(cs,yco),e(k,xco),e(k,fs),e(fs,kle),e(kle,$co),e(fs,kco),e(fs,lI),e(lI,Sco),e(fs,Rco),e(fs,iI),e(iI,Pco),e(fs,Bco),e(k,Ico),e(k,ms),e(ms,Sle),e(Sle,Nco),e(ms,qco),e(ms,dI),e(dI,jco),e(ms,Dco),e(ms,cI),e(cI,Gco),e(ms,Oco),e(k,Vco),e(k,gs),e(gs,Rle),e(Rle,Xco),e(gs,zco),e(gs,fI),e(fI,Qco),e(gs,Wco),e(gs,mI),e(mI,Hco),e(gs,Uco),e(k,Jco),e(k,hs),e(hs,Ple),e(Ple,Yco),e(hs,Kco),e(hs,gI),e(gI,Zco),e(hs,efo),e(hs,hI),e(hI,ofo),e(hs,rfo),e(k,tfo),e(k,ps),e(ps,Ble),e(Ble,afo),e(ps,nfo),e(ps,pI),e(pI,sfo),e(ps,lfo),e(ps,_I),e(_I,ifo),e(ps,dfo),e(k,cfo),e(k,_s),e(_s,Ile),e(Ile,ffo),e(_s,mfo),e(_s,uI),e(uI,gfo),e(_s,hfo),e(_s,bI),e(bI,pfo),e(_s,_fo),e(k,ufo),e(k,us),e(us,Nle),e(Nle,bfo),e(us,vfo),e(us,vI),e(vI,Ffo),e(us,Tfo),e(us,FI),e(FI,Mfo),e(us,Efo),e(k,Cfo),e(k,mh),e(mh,qle),e(qle,wfo),e(mh,Afo),e(mh,TI),e(TI,Lfo),e(mh,yfo),e(k,xfo),e(k,bs),e(bs,jle),e(jle,$fo),e(bs,kfo),e(bs,MI),e(MI,Sfo),e(bs,Rfo),e(bs,EI),e(EI,Pfo),e(bs,Bfo),e(k,Ifo),e(k,gh),e(gh,Dle),e(Dle,Nfo),e(gh,qfo),e(gh,CI),e(CI,jfo),e(gh,Dfo),e(k,Gfo),e(k,hh),e(hh,Gle),e(Gle,Ofo),e(hh,Vfo),e(hh,wI),e(wI,Xfo),e(hh,zfo),e(k,Qfo),e(k,vs),e(vs,Ole),e(Ole,Wfo),e(vs,Hfo),e(vs,AI),e(AI,Ufo),e(vs,Jfo),e(vs,LI),e(LI,Yfo),e(vs,Kfo),e(k,Zfo),e(k,Fs),e(Fs,Vle),e(Vle,emo),e(Fs,omo),e(Fs,yI),e(yI,rmo),e(Fs,tmo),e(Fs,xI),e(xI,amo),e(Fs,nmo),e(k,smo),e(k,Ts),e(Ts,Xle),e(Xle,lmo),e(Ts,imo),e(Ts,$I),e($I,dmo),e(Ts,cmo),e(Ts,kI),e(kI,fmo),e(Ts,mmo),e(k,gmo),e(k,ph),e(ph,zle),e(zle,hmo),e(ph,pmo),e(ph,SI),e(SI,_mo),e(ph,umo),e(k,bmo),e(k,Ms),e(Ms,Qle),e(Qle,vmo),e(Ms,Fmo),e(Ms,RI),e(RI,Tmo),e(Ms,Mmo),e(Ms,PI),e(PI,Emo),e(Ms,Cmo),e(k,wmo),e(k,Es),e(Es,Wle),e(Wle,Amo),e(Es,Lmo),e(Es,BI),e(BI,ymo),e(Es,xmo),e(Es,II),e(II,$mo),e(Es,kmo),e(k,Smo),e(k,Cs),e(Cs,Hle),e(Hle,Rmo),e(Cs,Pmo),e(Cs,NI),e(NI,Bmo),e(Cs,Imo),e(Cs,qI),e(qI,Nmo),e(Cs,qmo),e(k,jmo),e(k,ws),e(ws,Ule),e(Ule,Dmo),e(ws,Gmo),e(ws,jI),e(jI,Omo),e(ws,Vmo),e(ws,DI),e(DI,Xmo),e(ws,zmo),e(k,Qmo),e(k,As),e(As,Jle),e(Jle,Wmo),e(As,Hmo),e(As,GI),e(GI,Umo),e(As,Jmo),e(As,OI),e(OI,Ymo),e(As,Kmo),e(k,Zmo),e(k,Ls),e(Ls,Yle),e(Yle,ego),e(Ls,ogo),e(Ls,VI),e(VI,rgo),e(Ls,tgo),e(Ls,XI),e(XI,ago),e(Ls,ngo),e(k,sgo),e(k,ys),e(ys,Kle),e(Kle,lgo),e(ys,igo),e(ys,zI),e(zI,dgo),e(ys,cgo),e(ys,QI),e(QI,fgo),e(ys,mgo),e(k,ggo),e(k,_h),e(_h,Zle),e(Zle,hgo),e(_h,pgo),e(_h,WI),e(WI,_go),e(_h,ugo),e(k,bgo),e(k,xs),e(xs,eie),e(eie,vgo),e(xs,Fgo),e(xs,HI),e(HI,Tgo),e(xs,Mgo),e(xs,UI),e(UI,Ego),e(xs,Cgo),e(k,wgo),e(k,uh),e(uh,oie),e(oie,Ago),e(uh,Lgo),e(uh,JI),e(JI,ygo),e(uh,xgo),e(k,$go),e(k,bh),e(bh,rie),e(rie,kgo),e(bh,Sgo),e(bh,YI),e(YI,Rgo),e(bh,Pgo),e(k,Bgo),e(k,vh),e(vh,tie),e(tie,Igo),e(vh,Ngo),e(vh,KI),e(KI,qgo),e(vh,jgo),e(k,Dgo),e(k,Fh),e(Fh,aie),e(aie,Ggo),e(Fh,Ogo),e(Fh,ZI),e(ZI,Vgo),e(Fh,Xgo),e(k,zgo),e(k,$s),e($s,nie),e(nie,Qgo),e($s,Wgo),e($s,eN),e(eN,Hgo),e($s,Ugo),e($s,oN),e(oN,Jgo),e($s,Ygo),e(k,Kgo),e(k,Th),e(Th,sie),e(sie,Zgo),e(Th,eho),e(Th,rN),e(rN,oho),e(Th,rho),e(k,tho),e(k,ks),e(ks,lie),e(lie,aho),e(ks,nho),e(ks,tN),e(tN,sho),e(ks,lho),e(ks,aN),e(aN,iho),e(ks,dho),e(k,cho),e(k,Ss),e(Ss,iie),e(iie,fho),e(Ss,mho),e(Ss,nN),e(nN,gho),e(Ss,hho),e(Ss,sN),e(sN,pho),e(Ss,_ho),e(k,uho),e(k,Rs),e(Rs,die),e(die,bho),e(Rs,vho),e(Rs,lN),e(lN,Fho),e(Rs,Tho),e(Rs,iN),e(iN,Mho),e(Rs,Eho),e(k,Cho),e(k,Ps),e(Ps,cie),e(cie,who),e(Ps,Aho),e(Ps,dN),e(dN,Lho),e(Ps,yho),e(Ps,cN),e(cN,xho),e(Ps,$ho),e(k,kho),e(k,Bs),e(Bs,fie),e(fie,Sho),e(Bs,Rho),e(Bs,fN),e(fN,Pho),e(Bs,Bho),e(Bs,mN),e(mN,Iho),e(Bs,Nho),e(k,qho),e(k,Is),e(Is,mie),e(mie,jho),e(Is,Dho),e(Is,gN),e(gN,Gho),e(Is,Oho),e(Is,hN),e(hN,Vho),e(Is,Xho),e(k,zho),e(k,Mh),e(Mh,gie),e(gie,Qho),e(Mh,Who),e(Mh,pN),e(pN,Hho),e(Mh,Uho),e(k,Jho),e(k,Eh),e(Eh,hie),e(hie,Yho),e(Eh,Kho),e(Eh,_N),e(_N,Zho),e(Eh,epo),e(k,opo),e(k,Ns),e(Ns,pie),e(pie,rpo),e(Ns,tpo),e(Ns,uN),e(uN,apo),e(Ns,npo),e(Ns,bN),e(bN,spo),e(Ns,lpo),e(k,ipo),e(k,qs),e(qs,_ie),e(_ie,dpo),e(qs,cpo),e(qs,vN),e(vN,fpo),e(qs,mpo),e(qs,FN),e(FN,gpo),e(qs,hpo),e(k,ppo),e(k,js),e(js,uie),e(uie,_po),e(js,upo),e(js,TN),e(TN,bpo),e(js,vpo),e(js,MN),e(MN,Fpo),e(js,Tpo),e(k,Mpo),e(k,Ch),e(Ch,bie),e(bie,Epo),e(Ch,Cpo),e(Ch,EN),e(EN,wpo),e(Ch,Apo),e(k,Lpo),e(k,wh),e(wh,vie),e(vie,ypo),e(wh,xpo),e(wh,CN),e(CN,$po),e(wh,kpo),e(k,Spo),e(k,Ah),e(Ah,Fie),e(Fie,Rpo),e(Ah,Ppo),e(Ah,wN),e(wN,Bpo),e(Ah,Ipo),e(k,Npo),e(k,Ds),e(Ds,Tie),e(Tie,qpo),e(Ds,jpo),e(Ds,AN),e(AN,Dpo),e(Ds,Gpo),e(Ds,LN),e(LN,Opo),e(Ds,Vpo),e(k,Xpo),e(k,Gs),e(Gs,Mie),e(Mie,zpo),e(Gs,Qpo),e(Gs,yN),e(yN,Wpo),e(Gs,Hpo),e(Gs,xN),e(xN,Upo),e(Gs,Jpo),e(k,Ypo),e(k,Lh),e(Lh,Eie),e(Eie,Kpo),e(Lh,Zpo),e(Lh,$N),e($N,e_o),e(Lh,o_o),e(k,r_o),e(k,yh),e(yh,Cie),e(Cie,t_o),e(yh,a_o),e(yh,kN),e(kN,n_o),e(yh,s_o),e(k,l_o),e(k,xh),e(xh,wie),e(wie,i_o),e(xh,d_o),e(xh,SN),e(SN,c_o),e(xh,f_o),e(k,m_o),e(k,Os),e(Os,Aie),e(Aie,g_o),e(Os,h_o),e(Os,RN),e(RN,p_o),e(Os,__o),e(Os,PN),e(PN,u_o),e(Os,b_o),e(k,v_o),e(k,$h),e($h,Lie),e(Lie,F_o),e($h,T_o),e($h,BN),e(BN,M_o),e($h,E_o),e(k,C_o),e(k,kh),e(kh,yie),e(yie,w_o),e(kh,A_o),e(kh,IN),e(IN,L_o),e(kh,y_o),e(k,x_o),e(k,Vs),e(Vs,xie),e(xie,$_o),e(Vs,k_o),e(Vs,NN),e(NN,S_o),e(Vs,R_o),e(Vs,qN),e(qN,P_o),e(Vs,B_o),e(k,I_o),e(k,Xs),e(Xs,$ie),e($ie,N_o),e(Xs,q_o),e(Xs,jN),e(jN,j_o),e(Xs,D_o),e(Xs,DN),e(DN,G_o),e(Xs,O_o),e(k,V_o),e(k,zs),e(zs,kie),e(kie,X_o),e(zs,z_o),e(zs,GN),e(GN,Q_o),e(zs,W_o),e(zs,ON),e(ON,H_o),e(zs,U_o),e(k,J_o),e(k,Qs),e(Qs,Sie),e(Sie,Y_o),e(Qs,K_o),e(Qs,VN),e(VN,Z_o),e(Qs,euo),e(Qs,XN),e(XN,ouo),e(Qs,ruo),e(yr,tuo),M(Sh,yr,null),e(Ao,auo),e(Ao,Rh),M(pL,Rh,null),e(Rh,nuo),e(Rh,Rie),e(Rie,suo),b(f,YVe,u),b(f,Ni,u),e(Ni,Ph),e(Ph,Pie),M(_L,Pie,null),e(Ni,luo),e(Ni,Bie),e(Bie,iuo),b(f,KVe,u),b(f,Lo,u),M(uL,Lo,null),e(Lo,duo),e(Lo,bL),e(bL,cuo),e(bL,zN),e(zN,fuo),e(bL,muo),e(Lo,guo),e(Lo,vL),e(vL,huo),e(vL,Iie),e(Iie,puo),e(vL,_uo),e(Lo,uuo),e(Lo,He),M(FL,He,null),e(He,buo),e(He,Nie),e(Nie,vuo),e(He,Fuo),e(He,Ba),e(Ba,Tuo),e(Ba,qie),e(qie,Muo),e(Ba,Euo),e(Ba,jie),e(jie,Cuo),e(Ba,wuo),e(Ba,Die),e(Die,Auo),e(Ba,Luo),e(He,yuo),e(He,Y),e(Y,Bh),e(Bh,Gie),e(Gie,xuo),e(Bh,$uo),e(Bh,QN),e(QN,kuo),e(Bh,Suo),e(Y,Ruo),e(Y,Ih),e(Ih,Oie),e(Oie,Puo),e(Ih,Buo),e(Ih,WN),e(WN,Iuo),e(Ih,Nuo),e(Y,quo),e(Y,Nh),e(Nh,Vie),e(Vie,juo),e(Nh,Duo),e(Nh,HN),e(HN,Guo),e(Nh,Ouo),e(Y,Vuo),e(Y,qh),e(qh,Xie),e(Xie,Xuo),e(qh,zuo),e(qh,UN),e(UN,Quo),e(qh,Wuo),e(Y,Huo),e(Y,jh),e(jh,zie),e(zie,Uuo),e(jh,Juo),e(jh,JN),e(JN,Yuo),e(jh,Kuo),e(Y,Zuo),e(Y,Dh),e(Dh,Qie),e(Qie,e2o),e(Dh,o2o),e(Dh,YN),e(YN,r2o),e(Dh,t2o),e(Y,a2o),e(Y,Gh),e(Gh,Wie),e(Wie,n2o),e(Gh,s2o),e(Gh,KN),e(KN,l2o),e(Gh,i2o),e(Y,d2o),e(Y,Oh),e(Oh,Hie),e(Hie,c2o),e(Oh,f2o),e(Oh,ZN),e(ZN,m2o),e(Oh,g2o),e(Y,h2o),e(Y,Vh),e(Vh,Uie),e(Uie,p2o),e(Vh,_2o),e(Vh,eq),e(eq,u2o),e(Vh,b2o),e(Y,v2o),e(Y,Xh),e(Xh,Jie),e(Jie,F2o),e(Xh,T2o),e(Xh,oq),e(oq,M2o),e(Xh,E2o),e(Y,C2o),e(Y,zh),e(zh,Yie),e(Yie,w2o),e(zh,A2o),e(zh,rq),e(rq,L2o),e(zh,y2o),e(Y,x2o),e(Y,Qh),e(Qh,Kie),e(Kie,$2o),e(Qh,k2o),e(Qh,tq),e(tq,S2o),e(Qh,R2o),e(Y,P2o),e(Y,Wh),e(Wh,Zie),e(Zie,B2o),e(Wh,I2o),e(Wh,aq),e(aq,N2o),e(Wh,q2o),e(Y,j2o),e(Y,Hh),e(Hh,ede),e(ede,D2o),e(Hh,G2o),e(Hh,nq),e(nq,O2o),e(Hh,V2o),e(Y,X2o),e(Y,Uh),e(Uh,ode),e(ode,z2o),e(Uh,Q2o),e(Uh,sq),e(sq,W2o),e(Uh,H2o),e(Y,U2o),e(Y,Jh),e(Jh,rde),e(rde,J2o),e(Jh,Y2o),e(Jh,lq),e(lq,K2o),e(Jh,Z2o),e(Y,e1o),e(Y,Yh),e(Yh,tde),e(tde,o1o),e(Yh,r1o),e(Yh,iq),e(iq,t1o),e(Yh,a1o),e(Y,n1o),e(Y,Kh),e(Kh,ade),e(ade,s1o),e(Kh,l1o),e(Kh,dq),e(dq,i1o),e(Kh,d1o),e(Y,c1o),e(Y,Zh),e(Zh,nde),e(nde,f1o),e(Zh,m1o),e(Zh,cq),e(cq,g1o),e(Zh,h1o),e(Y,p1o),e(Y,ep),e(ep,sde),e(sde,_1o),e(ep,u1o),e(ep,fq),e(fq,b1o),e(ep,v1o),e(Y,F1o),e(Y,op),e(op,lde),e(lde,T1o),e(op,M1o),e(op,mq),e(mq,E1o),e(op,C1o),e(Y,w1o),e(Y,rp),e(rp,ide),e(ide,A1o),e(rp,L1o),e(rp,gq),e(gq,y1o),e(rp,x1o),e(Y,$1o),e(Y,tp),e(tp,dde),e(dde,k1o),e(tp,S1o),e(tp,hq),e(hq,R1o),e(tp,P1o),e(Y,B1o),e(Y,ap),e(ap,cde),e(cde,I1o),e(ap,N1o),e(ap,pq),e(pq,q1o),e(ap,j1o),e(Y,D1o),e(Y,np),e(np,fde),e(fde,G1o),e(np,O1o),e(np,_q),e(_q,V1o),e(np,X1o),e(Y,z1o),e(Y,sp),e(sp,mde),e(mde,Q1o),e(sp,W1o),e(sp,uq),e(uq,H1o),e(sp,U1o),e(Y,J1o),e(Y,lp),e(lp,gde),e(gde,Y1o),e(lp,K1o),e(lp,bq),e(bq,Z1o),e(lp,e4o),e(Y,o4o),e(Y,ip),e(ip,hde),e(hde,r4o),e(ip,t4o),e(ip,vq),e(vq,a4o),e(ip,n4o),e(Y,s4o),e(Y,dp),e(dp,pde),e(pde,l4o),e(dp,i4o),e(dp,Fq),e(Fq,d4o),e(dp,c4o),e(Y,f4o),e(Y,cp),e(cp,_de),e(_de,m4o),e(cp,g4o),e(cp,Tq),e(Tq,h4o),e(cp,p4o),e(Y,_4o),e(Y,fp),e(fp,ude),e(ude,u4o),e(fp,b4o),e(fp,Mq),e(Mq,v4o),e(fp,F4o),e(Y,T4o),e(Y,mp),e(mp,bde),e(bde,M4o),e(mp,E4o),e(mp,Eq),e(Eq,C4o),e(mp,w4o),e(Y,A4o),e(Y,gp),e(gp,vde),e(vde,L4o),e(gp,y4o),e(gp,Cq),e(Cq,x4o),e(gp,$4o),e(Y,k4o),e(Y,hp),e(hp,Fde),e(Fde,S4o),e(hp,R4o),e(hp,wq),e(wq,P4o),e(hp,B4o),e(He,I4o),M(pp,He,null),e(He,N4o),M(_p,He,null),e(Lo,q4o),e(Lo,up),M(TL,up,null),e(up,j4o),e(up,Tde),e(Tde,D4o),b(f,ZVe,u),b(f,qi,u),e(qi,bp),e(bp,Mde),M(ML,Mde,null),e(qi,G4o),e(qi,Ede),e(Ede,O4o),b(f,eXe,u),b(f,yo,u),M(EL,yo,null),e(yo,V4o),e(yo,CL),e(CL,X4o),e(CL,Aq),e(Aq,z4o),e(CL,Q4o),e(yo,W4o),e(yo,wL),e(wL,H4o),e(wL,Cde),e(Cde,U4o),e(wL,J4o),e(yo,Y4o),e(yo,Ue),M(AL,Ue,null),e(Ue,K4o),e(Ue,wde),e(wde,Z4o),e(Ue,ebo),e(Ue,ji),e(ji,obo),e(ji,Ade),e(Ade,rbo),e(ji,tbo),e(ji,Lde),e(Lde,abo),e(ji,nbo),e(Ue,sbo),e(Ue,he),e(he,vp),e(vp,yde),e(yde,lbo),e(vp,ibo),e(vp,Lq),e(Lq,dbo),e(vp,cbo),e(he,fbo),e(he,Fp),e(Fp,xde),e(xde,mbo),e(Fp,gbo),e(Fp,$de),e($de,hbo),e(Fp,pbo),e(he,_bo),e(he,Tp),e(Tp,kde),e(kde,ubo),e(Tp,bbo),e(Tp,yq),e(yq,vbo),e(Tp,Fbo),e(he,Tbo),e(he,Mp),e(Mp,Sde),e(Sde,Mbo),e(Mp,Ebo),e(Mp,xq),e(xq,Cbo),e(Mp,wbo),e(he,Abo),e(he,Ep),e(Ep,Rde),e(Rde,Lbo),e(Ep,ybo),e(Ep,$q),e($q,xbo),e(Ep,$bo),e(he,kbo),e(he,Cp),e(Cp,Pde),e(Pde,Sbo),e(Cp,Rbo),e(Cp,kq),e(kq,Pbo),e(Cp,Bbo),e(he,Ibo),e(he,wp),e(wp,Bde),e(Bde,Nbo),e(wp,qbo),e(wp,Sq),e(Sq,jbo),e(wp,Dbo),e(he,Gbo),e(he,Ap),e(Ap,Ide),e(Ide,Obo),e(Ap,Vbo),e(Ap,Rq),e(Rq,Xbo),e(Ap,zbo),e(he,Qbo),e(he,Lp),e(Lp,Nde),e(Nde,Wbo),e(Lp,Hbo),e(Lp,Pq),e(Pq,Ubo),e(Lp,Jbo),e(he,Ybo),e(he,yp),e(yp,qde),e(qde,Kbo),e(yp,Zbo),e(yp,Bq),e(Bq,evo),e(yp,ovo),e(he,rvo),e(he,xp),e(xp,jde),e(jde,tvo),e(xp,avo),e(xp,Iq),e(Iq,nvo),e(xp,svo),e(he,lvo),e(he,$p),e($p,Dde),e(Dde,ivo),e($p,dvo),e($p,Nq),e(Nq,cvo),e($p,fvo),e(he,mvo),e(he,kp),e(kp,Gde),e(Gde,gvo),e(kp,hvo),e(kp,qq),e(qq,pvo),e(kp,_vo),e(he,uvo),e(he,Sp),e(Sp,Ode),e(Ode,bvo),e(Sp,vvo),e(Sp,jq),e(jq,Fvo),e(Sp,Tvo),e(he,Mvo),e(he,Rp),e(Rp,Vde),e(Vde,Evo),e(Rp,Cvo),e(Rp,Dq),e(Dq,wvo),e(Rp,Avo),e(he,Lvo),e(he,Pp),e(Pp,Xde),e(Xde,yvo),e(Pp,xvo),e(Pp,Gq),e(Gq,$vo),e(Pp,kvo),e(he,Svo),e(he,Bp),e(Bp,zde),e(zde,Rvo),e(Bp,Pvo),e(Bp,Oq),e(Oq,Bvo),e(Bp,Ivo),e(he,Nvo),e(he,Ip),e(Ip,Qde),e(Qde,qvo),e(Ip,jvo),e(Ip,Vq),e(Vq,Dvo),e(Ip,Gvo),e(Ue,Ovo),M(Np,Ue,null),e(Ue,Vvo),M(qp,Ue,null),e(yo,Xvo),e(yo,jp),M(LL,jp,null),e(jp,zvo),e(jp,Wde),e(Wde,Qvo),b(f,oXe,u),b(f,Di,u),e(Di,Dp),e(Dp,Hde),M(yL,Hde,null),e(Di,Wvo),e(Di,Ude),e(Ude,Hvo),b(f,rXe,u),b(f,xo,u),M(xL,xo,null),e(xo,Uvo),e(xo,Gi),e(Gi,Jvo),e(Gi,Xq),e(Xq,Yvo),e(Gi,Kvo),e(Gi,zq),e(zq,Zvo),e(Gi,eFo),e(xo,oFo),e(xo,$L),e($L,rFo),e($L,Jde),e(Jde,tFo),e($L,aFo),e(xo,nFo),e(xo,lt),M(kL,lt,null),e(lt,sFo),e(lt,Yde),e(Yde,lFo),e(lt,iFo),e(lt,Oi),e(Oi,dFo),e(Oi,Kde),e(Kde,cFo),e(Oi,fFo),e(Oi,Qq),e(Qq,mFo),e(Oi,gFo),e(lt,hFo),M(Gp,lt,null),e(xo,pFo),e(xo,Je),M(SL,Je,null),e(Je,_Fo),e(Je,Zde),e(Zde,uFo),e(Je,bFo),e(Je,Ia),e(Ia,vFo),e(Ia,ece),e(ece,FFo),e(Ia,TFo),e(Ia,oce),e(oce,MFo),e(Ia,EFo),e(Ia,rce),e(rce,CFo),e(Ia,wFo),e(Je,AFo),e(Je,y),e(y,Op),e(Op,tce),e(tce,LFo),e(Op,yFo),e(Op,Wq),e(Wq,xFo),e(Op,$Fo),e(y,kFo),e(y,Vp),e(Vp,ace),e(ace,SFo),e(Vp,RFo),e(Vp,Hq),e(Hq,PFo),e(Vp,BFo),e(y,IFo),e(y,Xp),e(Xp,nce),e(nce,NFo),e(Xp,qFo),e(Xp,Uq),e(Uq,jFo),e(Xp,DFo),e(y,GFo),e(y,zp),e(zp,sce),e(sce,OFo),e(zp,VFo),e(zp,Jq),e(Jq,XFo),e(zp,zFo),e(y,QFo),e(y,Qp),e(Qp,lce),e(lce,WFo),e(Qp,HFo),e(Qp,Yq),e(Yq,UFo),e(Qp,JFo),e(y,YFo),e(y,Wp),e(Wp,ice),e(ice,KFo),e(Wp,ZFo),e(Wp,Kq),e(Kq,eTo),e(Wp,oTo),e(y,rTo),e(y,Hp),e(Hp,dce),e(dce,tTo),e(Hp,aTo),e(Hp,Zq),e(Zq,nTo),e(Hp,sTo),e(y,lTo),e(y,Up),e(Up,cce),e(cce,iTo),e(Up,dTo),e(Up,ej),e(ej,cTo),e(Up,fTo),e(y,mTo),e(y,Jp),e(Jp,fce),e(fce,gTo),e(Jp,hTo),e(Jp,oj),e(oj,pTo),e(Jp,_To),e(y,uTo),e(y,Yp),e(Yp,mce),e(mce,bTo),e(Yp,vTo),e(Yp,rj),e(rj,FTo),e(Yp,TTo),e(y,MTo),e(y,Kp),e(Kp,gce),e(gce,ETo),e(Kp,CTo),e(Kp,tj),e(tj,wTo),e(Kp,ATo),e(y,LTo),e(y,Zp),e(Zp,hce),e(hce,yTo),e(Zp,xTo),e(Zp,aj),e(aj,$To),e(Zp,kTo),e(y,STo),e(y,e_),e(e_,pce),e(pce,RTo),e(e_,PTo),e(e_,nj),e(nj,BTo),e(e_,ITo),e(y,NTo),e(y,o_),e(o_,_ce),e(_ce,qTo),e(o_,jTo),e(o_,sj),e(sj,DTo),e(o_,GTo),e(y,OTo),e(y,r_),e(r_,uce),e(uce,VTo),e(r_,XTo),e(r_,lj),e(lj,zTo),e(r_,QTo),e(y,WTo),e(y,t_),e(t_,bce),e(bce,HTo),e(t_,UTo),e(t_,ij),e(ij,JTo),e(t_,YTo),e(y,KTo),e(y,a_),e(a_,vce),e(vce,ZTo),e(a_,e7o),e(a_,dj),e(dj,o7o),e(a_,r7o),e(y,t7o),e(y,n_),e(n_,Fce),e(Fce,a7o),e(n_,n7o),e(n_,cj),e(cj,s7o),e(n_,l7o),e(y,i7o),e(y,s_),e(s_,Tce),e(Tce,d7o),e(s_,c7o),e(s_,fj),e(fj,f7o),e(s_,m7o),e(y,g7o),e(y,l_),e(l_,Mce),e(Mce,h7o),e(l_,p7o),e(l_,mj),e(mj,_7o),e(l_,u7o),e(y,b7o),e(y,i_),e(i_,Ece),e(Ece,v7o),e(i_,F7o),e(i_,gj),e(gj,T7o),e(i_,M7o),e(y,E7o),e(y,d_),e(d_,Cce),e(Cce,C7o),e(d_,w7o),e(d_,hj),e(hj,A7o),e(d_,L7o),e(y,y7o),e(y,c_),e(c_,wce),e(wce,x7o),e(c_,$7o),e(c_,pj),e(pj,k7o),e(c_,S7o),e(y,R7o),e(y,f_),e(f_,Ace),e(Ace,P7o),e(f_,B7o),e(f_,_j),e(_j,I7o),e(f_,N7o),e(y,q7o),e(y,m_),e(m_,Lce),e(Lce,j7o),e(m_,D7o),e(m_,uj),e(uj,G7o),e(m_,O7o),e(y,V7o),e(y,g_),e(g_,yce),e(yce,X7o),e(g_,z7o),e(g_,bj),e(bj,Q7o),e(g_,W7o),e(y,H7o),e(y,h_),e(h_,xce),e(xce,U7o),e(h_,J7o),e(h_,vj),e(vj,Y7o),e(h_,K7o),e(y,Z7o),e(y,p_),e(p_,$ce),e($ce,e9o),e(p_,o9o),e(p_,Fj),e(Fj,r9o),e(p_,t9o),e(y,a9o),e(y,__),e(__,kce),e(kce,n9o),e(__,s9o),e(__,Tj),e(Tj,l9o),e(__,i9o),e(y,d9o),e(y,u_),e(u_,Sce),e(Sce,c9o),e(u_,f9o),e(u_,Mj),e(Mj,m9o),e(u_,g9o),e(y,h9o),e(y,b_),e(b_,Rce),e(Rce,p9o),e(b_,_9o),e(b_,Ej),e(Ej,u9o),e(b_,b9o),e(y,v9o),e(y,v_),e(v_,Pce),e(Pce,F9o),e(v_,T9o),e(v_,Cj),e(Cj,M9o),e(v_,E9o),e(y,C9o),e(y,F_),e(F_,Bce),e(Bce,w9o),e(F_,A9o),e(F_,wj),e(wj,L9o),e(F_,y9o),e(y,x9o),e(y,T_),e(T_,Ice),e(Ice,$9o),e(T_,k9o),e(T_,Aj),e(Aj,S9o),e(T_,R9o),e(y,P9o),e(y,Ws),e(Ws,Nce),e(Nce,B9o),e(Ws,I9o),e(Ws,Lj),e(Lj,N9o),e(Ws,q9o),e(Ws,yj),e(yj,j9o),e(Ws,D9o),e(y,G9o),e(y,M_),e(M_,qce),e(qce,O9o),e(M_,V9o),e(M_,xj),e(xj,X9o),e(M_,z9o),e(y,Q9o),e(y,E_),e(E_,jce),e(jce,W9o),e(E_,H9o),e(E_,$j),e($j,U9o),e(E_,J9o),e(y,Y9o),e(y,C_),e(C_,Dce),e(Dce,K9o),e(C_,Z9o),e(C_,kj),e(kj,eMo),e(C_,oMo),e(y,rMo),e(y,w_),e(w_,Gce),e(Gce,tMo),e(w_,aMo),e(w_,Sj),e(Sj,nMo),e(w_,sMo),e(y,lMo),e(y,A_),e(A_,Oce),e(Oce,iMo),e(A_,dMo),e(A_,Rj),e(Rj,cMo),e(A_,fMo),e(y,mMo),e(y,L_),e(L_,Vce),e(Vce,gMo),e(L_,hMo),e(L_,Pj),e(Pj,pMo),e(L_,_Mo),e(y,uMo),e(y,y_),e(y_,Xce),e(Xce,bMo),e(y_,vMo),e(y_,Bj),e(Bj,FMo),e(y_,TMo),e(y,MMo),e(y,x_),e(x_,zce),e(zce,EMo),e(x_,CMo),e(x_,Ij),e(Ij,wMo),e(x_,AMo),e(y,LMo),e(y,$_),e($_,Qce),e(Qce,yMo),e($_,xMo),e($_,Nj),e(Nj,$Mo),e($_,kMo),e(y,SMo),e(y,k_),e(k_,Wce),e(Wce,RMo),e(k_,PMo),e(k_,qj),e(qj,BMo),e(k_,IMo),e(y,NMo),e(y,S_),e(S_,Hce),e(Hce,qMo),e(S_,jMo),e(S_,jj),e(jj,DMo),e(S_,GMo),e(y,OMo),e(y,R_),e(R_,Uce),e(Uce,VMo),e(R_,XMo),e(R_,Dj),e(Dj,zMo),e(R_,QMo),e(y,WMo),e(y,P_),e(P_,Jce),e(Jce,HMo),e(P_,UMo),e(P_,Gj),e(Gj,JMo),e(P_,YMo),e(y,KMo),e(y,B_),e(B_,Yce),e(Yce,ZMo),e(B_,eEo),e(B_,Oj),e(Oj,oEo),e(B_,rEo),e(y,tEo),e(y,I_),e(I_,Kce),e(Kce,aEo),e(I_,nEo),e(I_,Vj),e(Vj,sEo),e(I_,lEo),e(y,iEo),e(y,N_),e(N_,Zce),e(Zce,dEo),e(N_,cEo),e(N_,Xj),e(Xj,fEo),e(N_,mEo),e(y,gEo),e(y,q_),e(q_,efe),e(efe,hEo),e(q_,pEo),e(q_,zj),e(zj,_Eo),e(q_,uEo),e(y,bEo),e(y,j_),e(j_,ofe),e(ofe,vEo),e(j_,FEo),e(j_,Qj),e(Qj,TEo),e(j_,MEo),e(y,EEo),e(y,D_),e(D_,rfe),e(rfe,CEo),e(D_,wEo),e(D_,Wj),e(Wj,AEo),e(D_,LEo),e(y,yEo),e(y,G_),e(G_,tfe),e(tfe,xEo),e(G_,$Eo),e(G_,Hj),e(Hj,kEo),e(G_,SEo),e(y,REo),e(y,O_),e(O_,afe),e(afe,PEo),e(O_,BEo),e(O_,Uj),e(Uj,IEo),e(O_,NEo),e(y,qEo),e(y,V_),e(V_,nfe),e(nfe,jEo),e(V_,DEo),e(V_,Jj),e(Jj,GEo),e(V_,OEo),e(y,VEo),e(y,X_),e(X_,sfe),e(sfe,XEo),e(X_,zEo),e(X_,Yj),e(Yj,QEo),e(X_,WEo),e(y,HEo),e(y,z_),e(z_,lfe),e(lfe,UEo),e(z_,JEo),e(z_,Kj),e(Kj,YEo),e(z_,KEo),e(y,ZEo),e(y,Q_),e(Q_,ife),e(ife,eCo),e(Q_,oCo),e(Q_,Zj),e(Zj,rCo),e(Q_,tCo),e(y,aCo),e(y,W_),e(W_,dfe),e(dfe,nCo),e(W_,sCo),e(W_,eD),e(eD,lCo),e(W_,iCo),e(y,dCo),e(y,H_),e(H_,cfe),e(cfe,cCo),e(H_,fCo),e(H_,oD),e(oD,mCo),e(H_,gCo),e(y,hCo),e(y,U_),e(U_,ffe),e(ffe,pCo),e(U_,_Co),e(U_,rD),e(rD,uCo),e(U_,bCo),e(y,vCo),e(y,J_),e(J_,mfe),e(mfe,FCo),e(J_,TCo),e(J_,tD),e(tD,MCo),e(J_,ECo),e(y,CCo),e(y,Y_),e(Y_,gfe),e(gfe,wCo),e(Y_,ACo),e(Y_,aD),e(aD,LCo),e(Y_,yCo),e(y,xCo),e(y,K_),e(K_,hfe),e(hfe,$Co),e(K_,kCo),e(K_,nD),e(nD,SCo),e(K_,RCo),e(y,PCo),e(y,Z_),e(Z_,pfe),e(pfe,BCo),e(Z_,ICo),e(Z_,sD),e(sD,NCo),e(Z_,qCo),e(y,jCo),e(y,eu),e(eu,_fe),e(_fe,DCo),e(eu,GCo),e(eu,lD),e(lD,OCo),e(eu,VCo),e(y,XCo),e(y,ou),e(ou,ufe),e(ufe,zCo),e(ou,QCo),e(ou,iD),e(iD,WCo),e(ou,HCo),e(y,UCo),e(y,ru),e(ru,bfe),e(bfe,JCo),e(ru,YCo),e(ru,dD),e(dD,KCo),e(ru,ZCo),e(y,e3o),e(y,tu),e(tu,vfe),e(vfe,o3o),e(tu,r3o),e(tu,cD),e(cD,t3o),e(tu,a3o),e(y,n3o),e(y,au),e(au,Ffe),e(Ffe,s3o),e(au,l3o),e(au,fD),e(fD,i3o),e(au,d3o),e(y,c3o),e(y,nu),e(nu,Tfe),e(Tfe,f3o),e(nu,m3o),e(nu,mD),e(mD,g3o),e(nu,h3o),e(y,p3o),e(y,su),e(su,Mfe),e(Mfe,_3o),e(su,u3o),e(su,gD),e(gD,b3o),e(su,v3o),e(y,F3o),e(y,lu),e(lu,Efe),e(Efe,T3o),e(lu,M3o),e(lu,hD),e(hD,E3o),e(lu,C3o),e(y,w3o),e(y,iu),e(iu,Cfe),e(Cfe,A3o),e(iu,L3o),e(iu,pD),e(pD,y3o),e(iu,x3o),e(y,$3o),e(y,du),e(du,wfe),e(wfe,k3o),e(du,S3o),e(du,_D),e(_D,R3o),e(du,P3o),e(y,B3o),e(y,cu),e(cu,Afe),e(Afe,I3o),e(cu,N3o),e(cu,uD),e(uD,q3o),e(cu,j3o),e(y,D3o),e(y,fu),e(fu,Lfe),e(Lfe,G3o),e(fu,O3o),e(fu,bD),e(bD,V3o),e(fu,X3o),e(y,z3o),e(y,mu),e(mu,yfe),e(yfe,Q3o),e(mu,W3o),e(mu,vD),e(vD,H3o),e(mu,U3o),e(y,J3o),e(y,gu),e(gu,xfe),e(xfe,Y3o),e(gu,K3o),e(gu,FD),e(FD,Z3o),e(gu,e5o),e(y,o5o),e(y,hu),e(hu,$fe),e($fe,r5o),e(hu,t5o),e(hu,TD),e(TD,a5o),e(hu,n5o),e(y,s5o),e(y,pu),e(pu,kfe),e(kfe,l5o),e(pu,i5o),e(pu,MD),e(MD,d5o),e(pu,c5o),e(y,f5o),e(y,_u),e(_u,Sfe),e(Sfe,m5o),e(_u,g5o),e(_u,ED),e(ED,h5o),e(_u,p5o),e(y,_5o),e(y,uu),e(uu,Rfe),e(Rfe,u5o),e(uu,b5o),e(uu,CD),e(CD,v5o),e(uu,F5o),e(y,T5o),e(y,bu),e(bu,Pfe),e(Pfe,M5o),e(bu,E5o),e(bu,wD),e(wD,C5o),e(bu,w5o),e(y,A5o),e(y,vu),e(vu,Bfe),e(Bfe,L5o),e(vu,y5o),e(vu,AD),e(AD,x5o),e(vu,$5o),e(y,k5o),e(y,Fu),e(Fu,Ife),e(Ife,S5o),e(Fu,R5o),e(Fu,LD),e(LD,P5o),e(Fu,B5o),e(y,I5o),e(y,Tu),e(Tu,Nfe),e(Nfe,N5o),e(Tu,q5o),e(Tu,yD),e(yD,j5o),e(Tu,D5o),e(y,G5o),e(y,Mu),e(Mu,qfe),e(qfe,O5o),e(Mu,V5o),e(Mu,xD),e(xD,X5o),e(Mu,z5o),e(y,Q5o),e(y,Eu),e(Eu,jfe),e(jfe,W5o),e(Eu,H5o),e(Eu,$D),e($D,U5o),e(Eu,J5o),e(y,Y5o),e(y,Cu),e(Cu,Dfe),e(Dfe,K5o),e(Cu,Z5o),e(Cu,kD),e(kD,e0o),e(Cu,o0o),e(y,r0o),e(y,wu),e(wu,Gfe),e(Gfe,t0o),e(wu,a0o),e(wu,SD),e(SD,n0o),e(wu,s0o),e(y,l0o),e(y,Au),e(Au,Ofe),e(Ofe,i0o),e(Au,d0o),e(Au,RD),e(RD,c0o),e(Au,f0o),e(y,m0o),e(y,Lu),e(Lu,Vfe),e(Vfe,g0o),e(Lu,h0o),e(Lu,PD),e(PD,p0o),e(Lu,_0o),e(y,u0o),e(y,yu),e(yu,Xfe),e(Xfe,b0o),e(yu,v0o),e(yu,BD),e(BD,F0o),e(yu,T0o),e(y,M0o),e(y,xu),e(xu,zfe),e(zfe,E0o),e(xu,C0o),e(xu,ID),e(ID,w0o),e(xu,A0o),e(y,L0o),e(y,$u),e($u,Qfe),e(Qfe,y0o),e($u,x0o),e($u,ND),e(ND,$0o),e($u,k0o),e(y,S0o),e(y,ku),e(ku,Wfe),e(Wfe,R0o),e(ku,P0o),e(ku,qD),e(qD,B0o),e(ku,I0o),e(y,N0o),e(y,Su),e(Su,Hfe),e(Hfe,q0o),e(Su,j0o),e(Su,jD),e(jD,D0o),e(Su,G0o),e(y,O0o),e(y,Ru),e(Ru,Ufe),e(Ufe,V0o),e(Ru,X0o),e(Ru,DD),e(DD,z0o),e(Ru,Q0o),e(y,W0o),e(y,Pu),e(Pu,Jfe),e(Jfe,H0o),e(Pu,U0o),e(Pu,GD),e(GD,J0o),e(Pu,Y0o),e(y,K0o),e(y,Bu),e(Bu,Yfe),e(Yfe,Z0o),e(Bu,ewo),e(Bu,OD),e(OD,owo),e(Bu,rwo),e(y,two),e(y,Iu),e(Iu,Kfe),e(Kfe,awo),e(Iu,nwo),e(Iu,VD),e(VD,swo),e(Iu,lwo),e(y,iwo),e(y,Nu),e(Nu,Zfe),e(Zfe,dwo),e(Nu,cwo),e(Nu,XD),e(XD,fwo),e(Nu,mwo),e(y,gwo),e(y,qu),e(qu,eme),e(eme,hwo),e(qu,pwo),e(qu,zD),e(zD,_wo),e(qu,uwo),e(y,bwo),e(y,ju),e(ju,ome),e(ome,vwo),e(ju,Fwo),e(ju,QD),e(QD,Two),e(ju,Mwo),e(y,Ewo),e(y,Du),e(Du,rme),e(rme,Cwo),e(Du,wwo),e(Du,WD),e(WD,Awo),e(Du,Lwo),e(y,ywo),e(y,Gu),e(Gu,tme),e(tme,xwo),e(Gu,$wo),e(Gu,HD),e(HD,kwo),e(Gu,Swo),e(y,Rwo),e(y,Ou),e(Ou,ame),e(ame,Pwo),e(Ou,Bwo),e(Ou,UD),e(UD,Iwo),e(Ou,Nwo),e(y,qwo),e(y,Vu),e(Vu,nme),e(nme,jwo),e(Vu,Dwo),e(Vu,JD),e(JD,Gwo),e(Vu,Owo),e(Je,Vwo),e(Je,Xu),e(Xu,Xwo),e(Xu,sme),e(sme,zwo),e(Xu,Qwo),e(Xu,lme),e(lme,Wwo),e(Je,Hwo),M(zu,Je,null),b(f,tXe,u),b(f,Vi,u),e(Vi,Qu),e(Qu,ime),M(RL,ime,null),e(Vi,Uwo),e(Vi,dme),e(dme,Jwo),b(f,aXe,u),b(f,$o,u),M(PL,$o,null),e($o,Ywo),e($o,Xi),e(Xi,Kwo),e(Xi,YD),e(YD,Zwo),e(Xi,eAo),e(Xi,KD),e(KD,oAo),e(Xi,rAo),e($o,tAo),e($o,BL),e(BL,aAo),e(BL,cme),e(cme,nAo),e(BL,sAo),e($o,lAo),e($o,it),M(IL,it,null),e(it,iAo),e(it,fme),e(fme,dAo),e(it,cAo),e(it,zi),e(zi,fAo),e(zi,mme),e(mme,mAo),e(zi,gAo),e(zi,ZD),e(ZD,hAo),e(zi,pAo),e(it,_Ao),M(Wu,it,null),e($o,uAo),e($o,Ye),M(NL,Ye,null),e(Ye,bAo),e(Ye,gme),e(gme,vAo),e(Ye,FAo),e(Ye,Na),e(Na,TAo),e(Na,hme),e(hme,MAo),e(Na,EAo),e(Na,pme),e(pme,CAo),e(Na,wAo),e(Na,_me),e(_me,AAo),e(Na,LAo),e(Ye,yAo),e(Ye,G),e(G,Hu),e(Hu,ume),e(ume,xAo),e(Hu,$Ao),e(Hu,eG),e(eG,kAo),e(Hu,SAo),e(G,RAo),e(G,Uu),e(Uu,bme),e(bme,PAo),e(Uu,BAo),e(Uu,oG),e(oG,IAo),e(Uu,NAo),e(G,qAo),e(G,Ju),e(Ju,vme),e(vme,jAo),e(Ju,DAo),e(Ju,rG),e(rG,GAo),e(Ju,OAo),e(G,VAo),e(G,Yu),e(Yu,Fme),e(Fme,XAo),e(Yu,zAo),e(Yu,tG),e(tG,QAo),e(Yu,WAo),e(G,HAo),e(G,Ku),e(Ku,Tme),e(Tme,UAo),e(Ku,JAo),e(Ku,aG),e(aG,YAo),e(Ku,KAo),e(G,ZAo),e(G,Zu),e(Zu,Mme),e(Mme,e6o),e(Zu,o6o),e(Zu,nG),e(nG,r6o),e(Zu,t6o),e(G,a6o),e(G,e2),e(e2,Eme),e(Eme,n6o),e(e2,s6o),e(e2,sG),e(sG,l6o),e(e2,i6o),e(G,d6o),e(G,o2),e(o2,Cme),e(Cme,c6o),e(o2,f6o),e(o2,lG),e(lG,m6o),e(o2,g6o),e(G,h6o),e(G,r2),e(r2,wme),e(wme,p6o),e(r2,_6o),e(r2,iG),e(iG,u6o),e(r2,b6o),e(G,v6o),e(G,t2),e(t2,Ame),e(Ame,F6o),e(t2,T6o),e(t2,dG),e(dG,M6o),e(t2,E6o),e(G,C6o),e(G,a2),e(a2,Lme),e(Lme,w6o),e(a2,A6o),e(a2,cG),e(cG,L6o),e(a2,y6o),e(G,x6o),e(G,n2),e(n2,yme),e(yme,$6o),e(n2,k6o),e(n2,fG),e(fG,S6o),e(n2,R6o),e(G,P6o),e(G,s2),e(s2,xme),e(xme,B6o),e(s2,I6o),e(s2,mG),e(mG,N6o),e(s2,q6o),e(G,j6o),e(G,l2),e(l2,$me),e($me,D6o),e(l2,G6o),e(l2,gG),e(gG,O6o),e(l2,V6o),e(G,X6o),e(G,i2),e(i2,kme),e(kme,z6o),e(i2,Q6o),e(i2,hG),e(hG,W6o),e(i2,H6o),e(G,U6o),e(G,d2),e(d2,Sme),e(Sme,J6o),e(d2,Y6o),e(d2,pG),e(pG,K6o),e(d2,Z6o),e(G,eLo),e(G,c2),e(c2,Rme),e(Rme,oLo),e(c2,rLo),e(c2,_G),e(_G,tLo),e(c2,aLo),e(G,nLo),e(G,f2),e(f2,Pme),e(Pme,sLo),e(f2,lLo),e(f2,uG),e(uG,iLo),e(f2,dLo),e(G,cLo),e(G,m2),e(m2,Bme),e(Bme,fLo),e(m2,mLo),e(m2,bG),e(bG,gLo),e(m2,hLo),e(G,pLo),e(G,g2),e(g2,Ime),e(Ime,_Lo),e(g2,uLo),e(g2,vG),e(vG,bLo),e(g2,vLo),e(G,FLo),e(G,h2),e(h2,Nme),e(Nme,TLo),e(h2,MLo),e(h2,FG),e(FG,ELo),e(h2,CLo),e(G,wLo),e(G,p2),e(p2,qme),e(qme,ALo),e(p2,LLo),e(p2,TG),e(TG,yLo),e(p2,xLo),e(G,$Lo),e(G,_2),e(_2,jme),e(jme,kLo),e(_2,SLo),e(_2,MG),e(MG,RLo),e(_2,PLo),e(G,BLo),e(G,u2),e(u2,Dme),e(Dme,ILo),e(u2,NLo),e(u2,EG),e(EG,qLo),e(u2,jLo),e(G,DLo),e(G,b2),e(b2,Gme),e(Gme,GLo),e(b2,OLo),e(b2,CG),e(CG,VLo),e(b2,XLo),e(G,zLo),e(G,v2),e(v2,Ome),e(Ome,QLo),e(v2,WLo),e(v2,wG),e(wG,HLo),e(v2,ULo),e(G,JLo),e(G,F2),e(F2,Vme),e(Vme,YLo),e(F2,KLo),e(F2,AG),e(AG,ZLo),e(F2,eyo),e(G,oyo),e(G,T2),e(T2,Xme),e(Xme,ryo),e(T2,tyo),e(T2,LG),e(LG,ayo),e(T2,nyo),e(G,syo),e(G,M2),e(M2,zme),e(zme,lyo),e(M2,iyo),e(M2,yG),e(yG,dyo),e(M2,cyo),e(G,fyo),e(G,E2),e(E2,Qme),e(Qme,myo),e(E2,gyo),e(E2,xG),e(xG,hyo),e(E2,pyo),e(G,_yo),e(G,C2),e(C2,Wme),e(Wme,uyo),e(C2,byo),e(C2,$G),e($G,vyo),e(C2,Fyo),e(G,Tyo),e(G,w2),e(w2,Hme),e(Hme,Myo),e(w2,Eyo),e(w2,kG),e(kG,Cyo),e(w2,wyo),e(G,Ayo),e(G,A2),e(A2,Ume),e(Ume,Lyo),e(A2,yyo),e(A2,SG),e(SG,xyo),e(A2,$yo),e(G,kyo),e(G,L2),e(L2,Jme),e(Jme,Syo),e(L2,Ryo),e(L2,RG),e(RG,Pyo),e(L2,Byo),e(G,Iyo),e(G,y2),e(y2,Yme),e(Yme,Nyo),e(y2,qyo),e(y2,PG),e(PG,jyo),e(y2,Dyo),e(G,Gyo),e(G,x2),e(x2,Kme),e(Kme,Oyo),e(x2,Vyo),e(x2,BG),e(BG,Xyo),e(x2,zyo),e(G,Qyo),e(G,$2),e($2,Zme),e(Zme,Wyo),e($2,Hyo),e($2,IG),e(IG,Uyo),e($2,Jyo),e(G,Yyo),e(G,k2),e(k2,ege),e(ege,Kyo),e(k2,Zyo),e(k2,NG),e(NG,e8o),e(k2,o8o),e(G,r8o),e(G,S2),e(S2,oge),e(oge,t8o),e(S2,a8o),e(S2,qG),e(qG,n8o),e(S2,s8o),e(G,l8o),e(G,R2),e(R2,rge),e(rge,i8o),e(R2,d8o),e(R2,jG),e(jG,c8o),e(R2,f8o),e(G,m8o),e(G,P2),e(P2,tge),e(tge,g8o),e(P2,h8o),e(P2,DG),e(DG,p8o),e(P2,_8o),e(G,u8o),e(G,B2),e(B2,age),e(age,b8o),e(B2,v8o),e(B2,GG),e(GG,F8o),e(B2,T8o),e(G,M8o),e(G,I2),e(I2,nge),e(nge,E8o),e(I2,C8o),e(I2,OG),e(OG,w8o),e(I2,A8o),e(G,L8o),e(G,N2),e(N2,sge),e(sge,y8o),e(N2,x8o),e(N2,VG),e(VG,$8o),e(N2,k8o),e(G,S8o),e(G,q2),e(q2,lge),e(lge,R8o),e(q2,P8o),e(q2,XG),e(XG,B8o),e(q2,I8o),e(Ye,N8o),e(Ye,j2),e(j2,q8o),e(j2,ige),e(ige,j8o),e(j2,D8o),e(j2,dge),e(dge,G8o),e(Ye,O8o),M(D2,Ye,null),b(f,nXe,u),b(f,Qi,u),e(Qi,G2),e(G2,cge),M(qL,cge,null),e(Qi,V8o),e(Qi,fge),e(fge,X8o),b(f,sXe,u),b(f,ko,u),M(jL,ko,null),e(ko,z8o),e(ko,Wi),e(Wi,Q8o),e(Wi,zG),e(zG,W8o),e(Wi,H8o),e(Wi,QG),e(QG,U8o),e(Wi,J8o),e(ko,Y8o),e(ko,DL),e(DL,K8o),e(DL,mge),e(mge,Z8o),e(DL,exo),e(ko,oxo),e(ko,dt),M(GL,dt,null),e(dt,rxo),e(dt,gge),e(gge,txo),e(dt,axo),e(dt,Hi),e(Hi,nxo),e(Hi,hge),e(hge,sxo),e(Hi,lxo),e(Hi,WG),e(WG,ixo),e(Hi,dxo),e(dt,cxo),M(O2,dt,null),e(ko,fxo),e(ko,Ke),M(OL,Ke,null),e(Ke,mxo),e(Ke,pge),e(pge,gxo),e(Ke,hxo),e(Ke,qa),e(qa,pxo),e(qa,_ge),e(_ge,_xo),e(qa,uxo),e(qa,uge),e(uge,bxo),e(qa,vxo),e(qa,bge),e(bge,Fxo),e(qa,Txo),e(Ke,Mxo),e(Ke,z),e(z,V2),e(V2,vge),e(vge,Exo),e(V2,Cxo),e(V2,HG),e(HG,wxo),e(V2,Axo),e(z,Lxo),e(z,X2),e(X2,Fge),e(Fge,yxo),e(X2,xxo),e(X2,UG),e(UG,$xo),e(X2,kxo),e(z,Sxo),e(z,z2),e(z2,Tge),e(Tge,Rxo),e(z2,Pxo),e(z2,JG),e(JG,Bxo),e(z2,Ixo),e(z,Nxo),e(z,Q2),e(Q2,Mge),e(Mge,qxo),e(Q2,jxo),e(Q2,YG),e(YG,Dxo),e(Q2,Gxo),e(z,Oxo),e(z,W2),e(W2,Ege),e(Ege,Vxo),e(W2,Xxo),e(W2,KG),e(KG,zxo),e(W2,Qxo),e(z,Wxo),e(z,H2),e(H2,Cge),e(Cge,Hxo),e(H2,Uxo),e(H2,ZG),e(ZG,Jxo),e(H2,Yxo),e(z,Kxo),e(z,U2),e(U2,wge),e(wge,Zxo),e(U2,e$o),e(U2,eO),e(eO,o$o),e(U2,r$o),e(z,t$o),e(z,J2),e(J2,Age),e(Age,a$o),e(J2,n$o),e(J2,oO),e(oO,s$o),e(J2,l$o),e(z,i$o),e(z,Y2),e(Y2,Lge),e(Lge,d$o),e(Y2,c$o),e(Y2,rO),e(rO,f$o),e(Y2,m$o),e(z,g$o),e(z,K2),e(K2,yge),e(yge,h$o),e(K2,p$o),e(K2,tO),e(tO,_$o),e(K2,u$o),e(z,b$o),e(z,Z2),e(Z2,xge),e(xge,v$o),e(Z2,F$o),e(Z2,aO),e(aO,T$o),e(Z2,M$o),e(z,E$o),e(z,e1),e(e1,$ge),e($ge,C$o),e(e1,w$o),e(e1,nO),e(nO,A$o),e(e1,L$o),e(z,y$o),e(z,o1),e(o1,kge),e(kge,x$o),e(o1,$$o),e(o1,sO),e(sO,k$o),e(o1,S$o),e(z,R$o),e(z,r1),e(r1,Sge),e(Sge,P$o),e(r1,B$o),e(r1,lO),e(lO,I$o),e(r1,N$o),e(z,q$o),e(z,t1),e(t1,Rge),e(Rge,j$o),e(t1,D$o),e(t1,iO),e(iO,G$o),e(t1,O$o),e(z,V$o),e(z,a1),e(a1,Pge),e(Pge,X$o),e(a1,z$o),e(a1,dO),e(dO,Q$o),e(a1,W$o),e(z,H$o),e(z,n1),e(n1,Bge),e(Bge,U$o),e(n1,J$o),e(n1,cO),e(cO,Y$o),e(n1,K$o),e(z,Z$o),e(z,s1),e(s1,Ige),e(Ige,eko),e(s1,oko),e(s1,fO),e(fO,rko),e(s1,tko),e(z,ako),e(z,l1),e(l1,Nge),e(Nge,nko),e(l1,sko),e(l1,mO),e(mO,lko),e(l1,iko),e(z,dko),e(z,i1),e(i1,qge),e(qge,cko),e(i1,fko),e(i1,gO),e(gO,mko),e(i1,gko),e(z,hko),e(z,d1),e(d1,jge),e(jge,pko),e(d1,_ko),e(d1,hO),e(hO,uko),e(d1,bko),e(z,vko),e(z,c1),e(c1,Dge),e(Dge,Fko),e(c1,Tko),e(c1,pO),e(pO,Mko),e(c1,Eko),e(z,Cko),e(z,f1),e(f1,Gge),e(Gge,wko),e(f1,Ako),e(f1,_O),e(_O,Lko),e(f1,yko),e(z,xko),e(z,m1),e(m1,Oge),e(Oge,$ko),e(m1,kko),e(m1,uO),e(uO,Sko),e(m1,Rko),e(z,Pko),e(z,g1),e(g1,Vge),e(Vge,Bko),e(g1,Iko),e(g1,bO),e(bO,Nko),e(g1,qko),e(z,jko),e(z,h1),e(h1,Xge),e(Xge,Dko),e(h1,Gko),e(h1,vO),e(vO,Oko),e(h1,Vko),e(z,Xko),e(z,p1),e(p1,zge),e(zge,zko),e(p1,Qko),e(p1,FO),e(FO,Wko),e(p1,Hko),e(z,Uko),e(z,_1),e(_1,Qge),e(Qge,Jko),e(_1,Yko),e(_1,TO),e(TO,Kko),e(_1,Zko),e(z,eSo),e(z,u1),e(u1,Wge),e(Wge,oSo),e(u1,rSo),e(u1,MO),e(MO,tSo),e(u1,aSo),e(z,nSo),e(z,b1),e(b1,Hge),e(Hge,sSo),e(b1,lSo),e(b1,EO),e(EO,iSo),e(b1,dSo),e(z,cSo),e(z,v1),e(v1,Uge),e(Uge,fSo),e(v1,mSo),e(v1,CO),e(CO,gSo),e(v1,hSo),e(z,pSo),e(z,F1),e(F1,Jge),e(Jge,_So),e(F1,uSo),e(F1,wO),e(wO,bSo),e(F1,vSo),e(z,FSo),e(z,T1),e(T1,Yge),e(Yge,TSo),e(T1,MSo),e(T1,AO),e(AO,ESo),e(T1,CSo),e(z,wSo),e(z,M1),e(M1,Kge),e(Kge,ASo),e(M1,LSo),e(M1,LO),e(LO,ySo),e(M1,xSo),e(z,$So),e(z,E1),e(E1,Zge),e(Zge,kSo),e(E1,SSo),e(E1,yO),e(yO,RSo),e(E1,PSo),e(z,BSo),e(z,C1),e(C1,ehe),e(ehe,ISo),e(C1,NSo),e(C1,xO),e(xO,qSo),e(C1,jSo),e(z,DSo),e(z,w1),e(w1,ohe),e(ohe,GSo),e(w1,OSo),e(w1,$O),e($O,VSo),e(w1,XSo),e(z,zSo),e(z,A1),e(A1,rhe),e(rhe,QSo),e(A1,WSo),e(A1,kO),e(kO,HSo),e(A1,USo),e(z,JSo),e(z,L1),e(L1,the),e(the,YSo),e(L1,KSo),e(L1,SO),e(SO,ZSo),e(L1,eRo),e(z,oRo),e(z,y1),e(y1,ahe),e(ahe,rRo),e(y1,tRo),e(y1,RO),e(RO,aRo),e(y1,nRo),e(Ke,sRo),e(Ke,x1),e(x1,lRo),e(x1,nhe),e(nhe,iRo),e(x1,dRo),e(x1,she),e(she,cRo),e(Ke,fRo),M($1,Ke,null),b(f,lXe,u),b(f,Ui,u),e(Ui,k1),e(k1,lhe),M(VL,lhe,null),e(Ui,mRo),e(Ui,ihe),e(ihe,gRo),b(f,iXe,u),b(f,So,u),M(XL,So,null),e(So,hRo),e(So,Ji),e(Ji,pRo),e(Ji,PO),e(PO,_Ro),e(Ji,uRo),e(Ji,BO),e(BO,bRo),e(Ji,vRo),e(So,FRo),e(So,zL),e(zL,TRo),e(zL,dhe),e(dhe,MRo),e(zL,ERo),e(So,CRo),e(So,ct),M(QL,ct,null),e(ct,wRo),e(ct,che),e(che,ARo),e(ct,LRo),e(ct,Yi),e(Yi,yRo),e(Yi,fhe),e(fhe,xRo),e(Yi,$Ro),e(Yi,IO),e(IO,kRo),e(Yi,SRo),e(ct,RRo),M(S1,ct,null),e(So,PRo),e(So,Ze),M(WL,Ze,null),e(Ze,BRo),e(Ze,mhe),e(mhe,IRo),e(Ze,NRo),e(Ze,ja),e(ja,qRo),e(ja,ghe),e(ghe,jRo),e(ja,DRo),e(ja,hhe),e(hhe,GRo),e(ja,ORo),e(ja,phe),e(phe,VRo),e(ja,XRo),e(Ze,zRo),e(Ze,W),e(W,R1),e(R1,_he),e(_he,QRo),e(R1,WRo),e(R1,NO),e(NO,HRo),e(R1,URo),e(W,JRo),e(W,P1),e(P1,uhe),e(uhe,YRo),e(P1,KRo),e(P1,qO),e(qO,ZRo),e(P1,ePo),e(W,oPo),e(W,B1),e(B1,bhe),e(bhe,rPo),e(B1,tPo),e(B1,jO),e(jO,aPo),e(B1,nPo),e(W,sPo),e(W,I1),e(I1,vhe),e(vhe,lPo),e(I1,iPo),e(I1,DO),e(DO,dPo),e(I1,cPo),e(W,fPo),e(W,N1),e(N1,Fhe),e(Fhe,mPo),e(N1,gPo),e(N1,GO),e(GO,hPo),e(N1,pPo),e(W,_Po),e(W,q1),e(q1,The),e(The,uPo),e(q1,bPo),e(q1,OO),e(OO,vPo),e(q1,FPo),e(W,TPo),e(W,j1),e(j1,Mhe),e(Mhe,MPo),e(j1,EPo),e(j1,VO),e(VO,CPo),e(j1,wPo),e(W,APo),e(W,D1),e(D1,Ehe),e(Ehe,LPo),e(D1,yPo),e(D1,XO),e(XO,xPo),e(D1,$Po),e(W,kPo),e(W,G1),e(G1,Che),e(Che,SPo),e(G1,RPo),e(G1,zO),e(zO,PPo),e(G1,BPo),e(W,IPo),e(W,O1),e(O1,whe),e(whe,NPo),e(O1,qPo),e(O1,QO),e(QO,jPo),e(O1,DPo),e(W,GPo),e(W,V1),e(V1,Ahe),e(Ahe,OPo),e(V1,VPo),e(V1,WO),e(WO,XPo),e(V1,zPo),e(W,QPo),e(W,X1),e(X1,Lhe),e(Lhe,WPo),e(X1,HPo),e(X1,HO),e(HO,UPo),e(X1,JPo),e(W,YPo),e(W,z1),e(z1,yhe),e(yhe,KPo),e(z1,ZPo),e(z1,UO),e(UO,eBo),e(z1,oBo),e(W,rBo),e(W,Q1),e(Q1,xhe),e(xhe,tBo),e(Q1,aBo),e(Q1,JO),e(JO,nBo),e(Q1,sBo),e(W,lBo),e(W,W1),e(W1,$he),e($he,iBo),e(W1,dBo),e(W1,YO),e(YO,cBo),e(W1,fBo),e(W,mBo),e(W,H1),e(H1,khe),e(khe,gBo),e(H1,hBo),e(H1,KO),e(KO,pBo),e(H1,_Bo),e(W,uBo),e(W,U1),e(U1,She),e(She,bBo),e(U1,vBo),e(U1,ZO),e(ZO,FBo),e(U1,TBo),e(W,MBo),e(W,J1),e(J1,Rhe),e(Rhe,EBo),e(J1,CBo),e(J1,eV),e(eV,wBo),e(J1,ABo),e(W,LBo),e(W,Y1),e(Y1,Phe),e(Phe,yBo),e(Y1,xBo),e(Y1,oV),e(oV,$Bo),e(Y1,kBo),e(W,SBo),e(W,K1),e(K1,Bhe),e(Bhe,RBo),e(K1,PBo),e(K1,rV),e(rV,BBo),e(K1,IBo),e(W,NBo),e(W,Z1),e(Z1,Ihe),e(Ihe,qBo),e(Z1,jBo),e(Z1,tV),e(tV,DBo),e(Z1,GBo),e(W,OBo),e(W,e4),e(e4,Nhe),e(Nhe,VBo),e(e4,XBo),e(e4,aV),e(aV,zBo),e(e4,QBo),e(W,WBo),e(W,o4),e(o4,qhe),e(qhe,HBo),e(o4,UBo),e(o4,nV),e(nV,JBo),e(o4,YBo),e(W,KBo),e(W,r4),e(r4,jhe),e(jhe,ZBo),e(r4,eIo),e(r4,sV),e(sV,oIo),e(r4,rIo),e(W,tIo),e(W,t4),e(t4,Dhe),e(Dhe,aIo),e(t4,nIo),e(t4,lV),e(lV,sIo),e(t4,lIo),e(W,iIo),e(W,a4),e(a4,Ghe),e(Ghe,dIo),e(a4,cIo),e(a4,iV),e(iV,fIo),e(a4,mIo),e(W,gIo),e(W,n4),e(n4,Ohe),e(Ohe,hIo),e(n4,pIo),e(n4,dV),e(dV,_Io),e(n4,uIo),e(W,bIo),e(W,s4),e(s4,Vhe),e(Vhe,vIo),e(s4,FIo),e(s4,cV),e(cV,TIo),e(s4,MIo),e(W,EIo),e(W,l4),e(l4,Xhe),e(Xhe,CIo),e(l4,wIo),e(l4,fV),e(fV,AIo),e(l4,LIo),e(W,yIo),e(W,i4),e(i4,zhe),e(zhe,xIo),e(i4,$Io),e(i4,mV),e(mV,kIo),e(i4,SIo),e(W,RIo),e(W,d4),e(d4,Qhe),e(Qhe,PIo),e(d4,BIo),e(d4,gV),e(gV,IIo),e(d4,NIo),e(W,qIo),e(W,c4),e(c4,Whe),e(Whe,jIo),e(c4,DIo),e(c4,hV),e(hV,GIo),e(c4,OIo),e(W,VIo),e(W,f4),e(f4,Hhe),e(Hhe,XIo),e(f4,zIo),e(f4,pV),e(pV,QIo),e(f4,WIo),e(W,HIo),e(W,m4),e(m4,Uhe),e(Uhe,UIo),e(m4,JIo),e(m4,Jhe),e(Jhe,YIo),e(m4,KIo),e(W,ZIo),e(W,g4),e(g4,Yhe),e(Yhe,eNo),e(g4,oNo),e(g4,_V),e(_V,rNo),e(g4,tNo),e(W,aNo),e(W,h4),e(h4,Khe),e(Khe,nNo),e(h4,sNo),e(h4,uV),e(uV,lNo),e(h4,iNo),e(W,dNo),e(W,p4),e(p4,Zhe),e(Zhe,cNo),e(p4,fNo),e(p4,bV),e(bV,mNo),e(p4,gNo),e(W,hNo),e(W,_4),e(_4,epe),e(epe,pNo),e(_4,_No),e(_4,vV),e(vV,uNo),e(_4,bNo),e(Ze,vNo),e(Ze,u4),e(u4,FNo),e(u4,ope),e(ope,TNo),e(u4,MNo),e(u4,rpe),e(rpe,ENo),e(Ze,CNo),M(b4,Ze,null),b(f,dXe,u),b(f,Ki,u),e(Ki,v4),e(v4,tpe),M(HL,tpe,null),e(Ki,wNo),e(Ki,ape),e(ape,ANo),b(f,cXe,u),b(f,Ro,u),M(UL,Ro,null),e(Ro,LNo),e(Ro,Zi),e(Zi,yNo),e(Zi,FV),e(FV,xNo),e(Zi,$No),e(Zi,TV),e(TV,kNo),e(Zi,SNo),e(Ro,RNo),e(Ro,JL),e(JL,PNo),e(JL,npe),e(npe,BNo),e(JL,INo),e(Ro,NNo),e(Ro,ft),M(YL,ft,null),e(ft,qNo),e(ft,spe),e(spe,jNo),e(ft,DNo),e(ft,ed),e(ed,GNo),e(ed,lpe),e(lpe,ONo),e(ed,VNo),e(ed,MV),e(MV,XNo),e(ed,zNo),e(ft,QNo),M(F4,ft,null),e(Ro,WNo),e(Ro,eo),M(KL,eo,null),e(eo,HNo),e(eo,ipe),e(ipe,UNo),e(eo,JNo),e(eo,Da),e(Da,YNo),e(Da,dpe),e(dpe,KNo),e(Da,ZNo),e(Da,cpe),e(cpe,eqo),e(Da,oqo),e(Da,fpe),e(fpe,rqo),e(Da,tqo),e(eo,aqo),e(eo,pe),e(pe,T4),e(T4,mpe),e(mpe,nqo),e(T4,sqo),e(T4,EV),e(EV,lqo),e(T4,iqo),e(pe,dqo),e(pe,M4),e(M4,gpe),e(gpe,cqo),e(M4,fqo),e(M4,CV),e(CV,mqo),e(M4,gqo),e(pe,hqo),e(pe,E4),e(E4,hpe),e(hpe,pqo),e(E4,_qo),e(E4,wV),e(wV,uqo),e(E4,bqo),e(pe,vqo),e(pe,C4),e(C4,ppe),e(ppe,Fqo),e(C4,Tqo),e(C4,AV),e(AV,Mqo),e(C4,Eqo),e(pe,Cqo),e(pe,w4),e(w4,_pe),e(_pe,wqo),e(w4,Aqo),e(w4,LV),e(LV,Lqo),e(w4,yqo),e(pe,xqo),e(pe,A4),e(A4,upe),e(upe,$qo),e(A4,kqo),e(A4,yV),e(yV,Sqo),e(A4,Rqo),e(pe,Pqo),e(pe,L4),e(L4,bpe),e(bpe,Bqo),e(L4,Iqo),e(L4,xV),e(xV,Nqo),e(L4,qqo),e(pe,jqo),e(pe,y4),e(y4,vpe),e(vpe,Dqo),e(y4,Gqo),e(y4,$V),e($V,Oqo),e(y4,Vqo),e(pe,Xqo),e(pe,x4),e(x4,Fpe),e(Fpe,zqo),e(x4,Qqo),e(x4,kV),e(kV,Wqo),e(x4,Hqo),e(pe,Uqo),e(pe,$4),e($4,Tpe),e(Tpe,Jqo),e($4,Yqo),e($4,SV),e(SV,Kqo),e($4,Zqo),e(pe,ejo),e(pe,k4),e(k4,Mpe),e(Mpe,ojo),e(k4,rjo),e(k4,RV),e(RV,tjo),e(k4,ajo),e(pe,njo),e(pe,S4),e(S4,Epe),e(Epe,sjo),e(S4,ljo),e(S4,PV),e(PV,ijo),e(S4,djo),e(pe,cjo),e(pe,R4),e(R4,Cpe),e(Cpe,fjo),e(R4,mjo),e(R4,BV),e(BV,gjo),e(R4,hjo),e(pe,pjo),e(pe,P4),e(P4,wpe),e(wpe,_jo),e(P4,ujo),e(P4,IV),e(IV,bjo),e(P4,vjo),e(pe,Fjo),e(pe,B4),e(B4,Ape),e(Ape,Tjo),e(B4,Mjo),e(B4,NV),e(NV,Ejo),e(B4,Cjo),e(pe,wjo),e(pe,I4),e(I4,Lpe),e(Lpe,Ajo),e(I4,Ljo),e(I4,qV),e(qV,yjo),e(I4,xjo),e(pe,$jo),e(pe,N4),e(N4,ype),e(ype,kjo),e(N4,Sjo),e(N4,jV),e(jV,Rjo),e(N4,Pjo),e(pe,Bjo),e(pe,q4),e(q4,xpe),e(xpe,Ijo),e(q4,Njo),e(q4,DV),e(DV,qjo),e(q4,jjo),e(eo,Djo),e(eo,j4),e(j4,Gjo),e(j4,$pe),e($pe,Ojo),e(j4,Vjo),e(j4,kpe),e(kpe,Xjo),e(eo,zjo),M(D4,eo,null),b(f,fXe,u),b(f,od,u),e(od,G4),e(G4,Spe),M(ZL,Spe,null),e(od,Qjo),e(od,Rpe),e(Rpe,Wjo),b(f,mXe,u),b(f,Po,u),M(ey,Po,null),e(Po,Hjo),e(Po,rd),e(rd,Ujo),e(rd,GV),e(GV,Jjo),e(rd,Yjo),e(rd,OV),e(OV,Kjo),e(rd,Zjo),e(Po,eDo),e(Po,oy),e(oy,oDo),e(oy,Ppe),e(Ppe,rDo),e(oy,tDo),e(Po,aDo),e(Po,mt),M(ry,mt,null),e(mt,nDo),e(mt,Bpe),e(Bpe,sDo),e(mt,lDo),e(mt,td),e(td,iDo),e(td,Ipe),e(Ipe,dDo),e(td,cDo),e(td,VV),e(VV,fDo),e(td,mDo),e(mt,gDo),M(O4,mt,null),e(Po,hDo),e(Po,oo),M(ty,oo,null),e(oo,pDo),e(oo,Npe),e(Npe,_Do),e(oo,uDo),e(oo,Ga),e(Ga,bDo),e(Ga,qpe),e(qpe,vDo),e(Ga,FDo),e(Ga,jpe),e(jpe,TDo),e(Ga,MDo),e(Ga,Dpe),e(Dpe,EDo),e(Ga,CDo),e(oo,wDo),e(oo,N),e(N,V4),e(V4,Gpe),e(Gpe,ADo),e(V4,LDo),e(V4,XV),e(XV,yDo),e(V4,xDo),e(N,$Do),e(N,X4),e(X4,Ope),e(Ope,kDo),e(X4,SDo),e(X4,zV),e(zV,RDo),e(X4,PDo),e(N,BDo),e(N,z4),e(z4,Vpe),e(Vpe,IDo),e(z4,NDo),e(z4,QV),e(QV,qDo),e(z4,jDo),e(N,DDo),e(N,Q4),e(Q4,Xpe),e(Xpe,GDo),e(Q4,ODo),e(Q4,WV),e(WV,VDo),e(Q4,XDo),e(N,zDo),e(N,W4),e(W4,zpe),e(zpe,QDo),e(W4,WDo),e(W4,HV),e(HV,HDo),e(W4,UDo),e(N,JDo),e(N,H4),e(H4,Qpe),e(Qpe,YDo),e(H4,KDo),e(H4,UV),e(UV,ZDo),e(H4,eGo),e(N,oGo),e(N,U4),e(U4,Wpe),e(Wpe,rGo),e(U4,tGo),e(U4,JV),e(JV,aGo),e(U4,nGo),e(N,sGo),e(N,J4),e(J4,Hpe),e(Hpe,lGo),e(J4,iGo),e(J4,YV),e(YV,dGo),e(J4,cGo),e(N,fGo),e(N,Y4),e(Y4,Upe),e(Upe,mGo),e(Y4,gGo),e(Y4,KV),e(KV,hGo),e(Y4,pGo),e(N,_Go),e(N,K4),e(K4,Jpe),e(Jpe,uGo),e(K4,bGo),e(K4,ZV),e(ZV,vGo),e(K4,FGo),e(N,TGo),e(N,Z4),e(Z4,Ype),e(Ype,MGo),e(Z4,EGo),e(Z4,eX),e(eX,CGo),e(Z4,wGo),e(N,AGo),e(N,eb),e(eb,Kpe),e(Kpe,LGo),e(eb,yGo),e(eb,oX),e(oX,xGo),e(eb,$Go),e(N,kGo),e(N,ob),e(ob,Zpe),e(Zpe,SGo),e(ob,RGo),e(ob,rX),e(rX,PGo),e(ob,BGo),e(N,IGo),e(N,rb),e(rb,e_e),e(e_e,NGo),e(rb,qGo),e(rb,tX),e(tX,jGo),e(rb,DGo),e(N,GGo),e(N,tb),e(tb,o_e),e(o_e,OGo),e(tb,VGo),e(tb,aX),e(aX,XGo),e(tb,zGo),e(N,QGo),e(N,ab),e(ab,r_e),e(r_e,WGo),e(ab,HGo),e(ab,nX),e(nX,UGo),e(ab,JGo),e(N,YGo),e(N,nb),e(nb,t_e),e(t_e,KGo),e(nb,ZGo),e(nb,sX),e(sX,eOo),e(nb,oOo),e(N,rOo),e(N,sb),e(sb,a_e),e(a_e,tOo),e(sb,aOo),e(sb,lX),e(lX,nOo),e(sb,sOo),e(N,lOo),e(N,lb),e(lb,n_e),e(n_e,iOo),e(lb,dOo),e(lb,iX),e(iX,cOo),e(lb,fOo),e(N,mOo),e(N,ib),e(ib,s_e),e(s_e,gOo),e(ib,hOo),e(ib,dX),e(dX,pOo),e(ib,_Oo),e(N,uOo),e(N,db),e(db,l_e),e(l_e,bOo),e(db,vOo),e(db,cX),e(cX,FOo),e(db,TOo),e(N,MOo),e(N,cb),e(cb,i_e),e(i_e,EOo),e(cb,COo),e(cb,fX),e(fX,wOo),e(cb,AOo),e(N,LOo),e(N,fb),e(fb,d_e),e(d_e,yOo),e(fb,xOo),e(fb,mX),e(mX,$Oo),e(fb,kOo),e(N,SOo),e(N,mb),e(mb,c_e),e(c_e,ROo),e(mb,POo),e(mb,gX),e(gX,BOo),e(mb,IOo),e(N,NOo),e(N,gb),e(gb,f_e),e(f_e,qOo),e(gb,jOo),e(gb,hX),e(hX,DOo),e(gb,GOo),e(N,OOo),e(N,hb),e(hb,m_e),e(m_e,VOo),e(hb,XOo),e(hb,pX),e(pX,zOo),e(hb,QOo),e(N,WOo),e(N,pb),e(pb,g_e),e(g_e,HOo),e(pb,UOo),e(pb,_X),e(_X,JOo),e(pb,YOo),e(N,KOo),e(N,_b),e(_b,h_e),e(h_e,ZOo),e(_b,eVo),e(_b,uX),e(uX,oVo),e(_b,rVo),e(N,tVo),e(N,ub),e(ub,p_e),e(p_e,aVo),e(ub,nVo),e(ub,bX),e(bX,sVo),e(ub,lVo),e(N,iVo),e(N,bb),e(bb,__e),e(__e,dVo),e(bb,cVo),e(bb,vX),e(vX,fVo),e(bb,mVo),e(N,gVo),e(N,vb),e(vb,u_e),e(u_e,hVo),e(vb,pVo),e(vb,FX),e(FX,_Vo),e(vb,uVo),e(N,bVo),e(N,Fb),e(Fb,b_e),e(b_e,vVo),e(Fb,FVo),e(Fb,TX),e(TX,TVo),e(Fb,MVo),e(N,EVo),e(N,Tb),e(Tb,v_e),e(v_e,CVo),e(Tb,wVo),e(Tb,MX),e(MX,AVo),e(Tb,LVo),e(N,yVo),e(N,Mb),e(Mb,F_e),e(F_e,xVo),e(Mb,$Vo),e(Mb,EX),e(EX,kVo),e(Mb,SVo),e(N,RVo),e(N,Eb),e(Eb,T_e),e(T_e,PVo),e(Eb,BVo),e(Eb,CX),e(CX,IVo),e(Eb,NVo),e(N,qVo),e(N,Cb),e(Cb,M_e),e(M_e,jVo),e(Cb,DVo),e(Cb,wX),e(wX,GVo),e(Cb,OVo),e(N,VVo),e(N,wb),e(wb,E_e),e(E_e,XVo),e(wb,zVo),e(wb,AX),e(AX,QVo),e(wb,WVo),e(N,HVo),e(N,Ab),e(Ab,C_e),e(C_e,UVo),e(Ab,JVo),e(Ab,LX),e(LX,YVo),e(Ab,KVo),e(N,ZVo),e(N,Lb),e(Lb,w_e),e(w_e,eXo),e(Lb,oXo),e(Lb,yX),e(yX,rXo),e(Lb,tXo),e(N,aXo),e(N,yb),e(yb,A_e),e(A_e,nXo),e(yb,sXo),e(yb,xX),e(xX,lXo),e(yb,iXo),e(N,dXo),e(N,xb),e(xb,L_e),e(L_e,cXo),e(xb,fXo),e(xb,$X),e($X,mXo),e(xb,gXo),e(N,hXo),e(N,$b),e($b,y_e),e(y_e,pXo),e($b,_Xo),e($b,kX),e(kX,uXo),e($b,bXo),e(N,vXo),e(N,kb),e(kb,x_e),e(x_e,FXo),e(kb,TXo),e(kb,SX),e(SX,MXo),e(kb,EXo),e(N,CXo),e(N,Sb),e(Sb,$_e),e($_e,wXo),e(Sb,AXo),e(Sb,RX),e(RX,LXo),e(Sb,yXo),e(N,xXo),e(N,Rb),e(Rb,k_e),e(k_e,$Xo),e(Rb,kXo),e(Rb,PX),e(PX,SXo),e(Rb,RXo),e(N,PXo),e(N,Pb),e(Pb,S_e),e(S_e,BXo),e(Pb,IXo),e(Pb,BX),e(BX,NXo),e(Pb,qXo),e(N,jXo),e(N,Bb),e(Bb,R_e),e(R_e,DXo),e(Bb,GXo),e(Bb,IX),e(IX,OXo),e(Bb,VXo),e(N,XXo),e(N,Ib),e(Ib,P_e),e(P_e,zXo),e(Ib,QXo),e(Ib,NX),e(NX,WXo),e(Ib,HXo),e(N,UXo),e(N,Nb),e(Nb,B_e),e(B_e,JXo),e(Nb,YXo),e(Nb,qX),e(qX,KXo),e(Nb,ZXo),e(N,ezo),e(N,qb),e(qb,I_e),e(I_e,ozo),e(qb,rzo),e(qb,jX),e(jX,tzo),e(qb,azo),e(oo,nzo),e(oo,jb),e(jb,szo),e(jb,N_e),e(N_e,lzo),e(jb,izo),e(jb,q_e),e(q_e,dzo),e(oo,czo),M(Db,oo,null),b(f,gXe,u),b(f,ad,u),e(ad,Gb),e(Gb,j_e),M(ay,j_e,null),e(ad,fzo),e(ad,D_e),e(D_e,mzo),b(f,hXe,u),b(f,Bo,u),M(ny,Bo,null),e(Bo,gzo),e(Bo,nd),e(nd,hzo),e(nd,DX),e(DX,pzo),e(nd,_zo),e(nd,GX),e(GX,uzo),e(nd,bzo),e(Bo,vzo),e(Bo,sy),e(sy,Fzo),e(sy,G_e),e(G_e,Tzo),e(sy,Mzo),e(Bo,Ezo),e(Bo,gt),M(ly,gt,null),e(gt,Czo),e(gt,O_e),e(O_e,wzo),e(gt,Azo),e(gt,sd),e(sd,Lzo),e(sd,V_e),e(V_e,yzo),e(sd,xzo),e(sd,OX),e(OX,$zo),e(sd,kzo),e(gt,Szo),M(Ob,gt,null),e(Bo,Rzo),e(Bo,ro),M(iy,ro,null),e(ro,Pzo),e(ro,X_e),e(X_e,Bzo),e(ro,Izo),e(ro,Oa),e(Oa,Nzo),e(Oa,z_e),e(z_e,qzo),e(Oa,jzo),e(Oa,Q_e),e(Q_e,Dzo),e(Oa,Gzo),e(Oa,W_e),e(W_e,Ozo),e(Oa,Vzo),e(ro,Xzo),e(ro,Z),e(Z,Vb),e(Vb,H_e),e(H_e,zzo),e(Vb,Qzo),e(Vb,VX),e(VX,Wzo),e(Vb,Hzo),e(Z,Uzo),e(Z,Xb),e(Xb,U_e),e(U_e,Jzo),e(Xb,Yzo),e(Xb,XX),e(XX,Kzo),e(Xb,Zzo),e(Z,eQo),e(Z,zb),e(zb,J_e),e(J_e,oQo),e(zb,rQo),e(zb,zX),e(zX,tQo),e(zb,aQo),e(Z,nQo),e(Z,Qb),e(Qb,Y_e),e(Y_e,sQo),e(Qb,lQo),e(Qb,QX),e(QX,iQo),e(Qb,dQo),e(Z,cQo),e(Z,Wb),e(Wb,K_e),e(K_e,fQo),e(Wb,mQo),e(Wb,WX),e(WX,gQo),e(Wb,hQo),e(Z,pQo),e(Z,Hb),e(Hb,Z_e),e(Z_e,_Qo),e(Hb,uQo),e(Hb,HX),e(HX,bQo),e(Hb,vQo),e(Z,FQo),e(Z,Ub),e(Ub,eue),e(eue,TQo),e(Ub,MQo),e(Ub,UX),e(UX,EQo),e(Ub,CQo),e(Z,wQo),e(Z,Jb),e(Jb,oue),e(oue,AQo),e(Jb,LQo),e(Jb,JX),e(JX,yQo),e(Jb,xQo),e(Z,$Qo),e(Z,Yb),e(Yb,rue),e(rue,kQo),e(Yb,SQo),e(Yb,YX),e(YX,RQo),e(Yb,PQo),e(Z,BQo),e(Z,Kb),e(Kb,tue),e(tue,IQo),e(Kb,NQo),e(Kb,KX),e(KX,qQo),e(Kb,jQo),e(Z,DQo),e(Z,Zb),e(Zb,aue),e(aue,GQo),e(Zb,OQo),e(Zb,ZX),e(ZX,VQo),e(Zb,XQo),e(Z,zQo),e(Z,ev),e(ev,nue),e(nue,QQo),e(ev,WQo),e(ev,ez),e(ez,HQo),e(ev,UQo),e(Z,JQo),e(Z,ov),e(ov,sue),e(sue,YQo),e(ov,KQo),e(ov,oz),e(oz,ZQo),e(ov,eWo),e(Z,oWo),e(Z,rv),e(rv,lue),e(lue,rWo),e(rv,tWo),e(rv,rz),e(rz,aWo),e(rv,nWo),e(Z,sWo),e(Z,tv),e(tv,iue),e(iue,lWo),e(tv,iWo),e(tv,tz),e(tz,dWo),e(tv,cWo),e(Z,fWo),e(Z,av),e(av,due),e(due,mWo),e(av,gWo),e(av,az),e(az,hWo),e(av,pWo),e(Z,_Wo),e(Z,nv),e(nv,cue),e(cue,uWo),e(nv,bWo),e(nv,nz),e(nz,vWo),e(nv,FWo),e(Z,TWo),e(Z,sv),e(sv,fue),e(fue,MWo),e(sv,EWo),e(sv,sz),e(sz,CWo),e(sv,wWo),e(Z,AWo),e(Z,lv),e(lv,mue),e(mue,LWo),e(lv,yWo),e(lv,lz),e(lz,xWo),e(lv,$Wo),e(Z,kWo),e(Z,iv),e(iv,gue),e(gue,SWo),e(iv,RWo),e(iv,iz),e(iz,PWo),e(iv,BWo),e(Z,IWo),e(Z,dv),e(dv,hue),e(hue,NWo),e(dv,qWo),e(dv,dz),e(dz,jWo),e(dv,DWo),e(Z,GWo),e(Z,cv),e(cv,pue),e(pue,OWo),e(cv,VWo),e(cv,cz),e(cz,XWo),e(cv,zWo),e(Z,QWo),e(Z,fv),e(fv,_ue),e(_ue,WWo),e(fv,HWo),e(fv,fz),e(fz,UWo),e(fv,JWo),e(Z,YWo),e(Z,mv),e(mv,uue),e(uue,KWo),e(mv,ZWo),e(mv,mz),e(mz,eHo),e(mv,oHo),e(Z,rHo),e(Z,gv),e(gv,bue),e(bue,tHo),e(gv,aHo),e(gv,gz),e(gz,nHo),e(gv,sHo),e(Z,lHo),e(Z,hv),e(hv,vue),e(vue,iHo),e(hv,dHo),e(hv,hz),e(hz,cHo),e(hv,fHo),e(Z,mHo),e(Z,pv),e(pv,Fue),e(Fue,gHo),e(pv,hHo),e(pv,pz),e(pz,pHo),e(pv,_Ho),e(Z,uHo),e(Z,_v),e(_v,Tue),e(Tue,bHo),e(_v,vHo),e(_v,_z),e(_z,FHo),e(_v,THo),e(Z,MHo),e(Z,uv),e(uv,Mue),e(Mue,EHo),e(uv,CHo),e(uv,uz),e(uz,wHo),e(uv,AHo),e(Z,LHo),e(Z,bv),e(bv,Eue),e(Eue,yHo),e(bv,xHo),e(bv,bz),e(bz,$Ho),e(bv,kHo),e(ro,SHo),e(ro,vv),e(vv,RHo),e(vv,Cue),e(Cue,PHo),e(vv,BHo),e(vv,wue),e(wue,IHo),e(ro,NHo),M(Fv,ro,null),b(f,pXe,u),b(f,ld,u),e(ld,Tv),e(Tv,Aue),M(dy,Aue,null),e(ld,qHo),e(ld,Lue),e(Lue,jHo),b(f,_Xe,u),b(f,Io,u),M(cy,Io,null),e(Io,DHo),e(Io,id),e(id,GHo),e(id,vz),e(vz,OHo),e(id,VHo),e(id,Fz),e(Fz,XHo),e(id,zHo),e(Io,QHo),e(Io,fy),e(fy,WHo),e(fy,yue),e(yue,HHo),e(fy,UHo),e(Io,JHo),e(Io,ht),M(my,ht,null),e(ht,YHo),e(ht,xue),e(xue,KHo),e(ht,ZHo),e(ht,dd),e(dd,eUo),e(dd,$ue),e($ue,oUo),e(dd,rUo),e(dd,Tz),e(Tz,tUo),e(dd,aUo),e(ht,nUo),M(Mv,ht,null),e(Io,sUo),e(Io,to),M(gy,to,null),e(to,lUo),e(to,kue),e(kue,iUo),e(to,dUo),e(to,Va),e(Va,cUo),e(Va,Sue),e(Sue,fUo),e(Va,mUo),e(Va,Rue),e(Rue,gUo),e(Va,hUo),e(Va,Pue),e(Pue,pUo),e(Va,_Uo),e(to,uUo),e(to,No),e(No,Ev),e(Ev,Bue),e(Bue,bUo),e(Ev,vUo),e(Ev,Mz),e(Mz,FUo),e(Ev,TUo),e(No,MUo),e(No,Cv),e(Cv,Iue),e(Iue,EUo),e(Cv,CUo),e(Cv,Ez),e(Ez,wUo),e(Cv,AUo),e(No,LUo),e(No,wv),e(wv,Nue),e(Nue,yUo),e(wv,xUo),e(wv,Cz),e(Cz,$Uo),e(wv,kUo),e(No,SUo),e(No,Av),e(Av,que),e(que,RUo),e(Av,PUo),e(Av,wz),e(wz,BUo),e(Av,IUo),e(No,NUo),e(No,Lv),e(Lv,jue),e(jue,qUo),e(Lv,jUo),e(Lv,Az),e(Az,DUo),e(Lv,GUo),e(No,OUo),e(No,yv),e(yv,Due),e(Due,VUo),e(yv,XUo),e(yv,Lz),e(Lz,zUo),e(yv,QUo),e(to,WUo),e(to,xv),e(xv,HUo),e(xv,Gue),e(Gue,UUo),e(xv,JUo),e(xv,Oue),e(Oue,YUo),e(to,KUo),M($v,to,null),b(f,uXe,u),b(f,cd,u),e(cd,kv),e(kv,Vue),M(hy,Vue,null),e(cd,ZUo),e(cd,Xue),e(Xue,eJo),b(f,bXe,u),b(f,qo,u),M(py,qo,null),e(qo,oJo),e(qo,fd),e(fd,rJo),e(fd,yz),e(yz,tJo),e(fd,aJo),e(fd,xz),e(xz,nJo),e(fd,sJo),e(qo,lJo),e(qo,_y),e(_y,iJo),e(_y,zue),e(zue,dJo),e(_y,cJo),e(qo,fJo),e(qo,pt),M(uy,pt,null),e(pt,mJo),e(pt,Que),e(Que,gJo),e(pt,hJo),e(pt,md),e(md,pJo),e(md,Wue),e(Wue,_Jo),e(md,uJo),e(md,$z),e($z,bJo),e(md,vJo),e(pt,FJo),M(Sv,pt,null),e(qo,TJo),e(qo,ao),M(by,ao,null),e(ao,MJo),e(ao,Hue),e(Hue,EJo),e(ao,CJo),e(ao,Xa),e(Xa,wJo),e(Xa,Uue),e(Uue,AJo),e(Xa,LJo),e(Xa,Jue),e(Jue,yJo),e(Xa,xJo),e(Xa,Yue),e(Yue,$Jo),e(Xa,kJo),e(ao,SJo),e(ao,U),e(U,Rv),e(Rv,Kue),e(Kue,RJo),e(Rv,PJo),e(Rv,kz),e(kz,BJo),e(Rv,IJo),e(U,NJo),e(U,Pv),e(Pv,Zue),e(Zue,qJo),e(Pv,jJo),e(Pv,Sz),e(Sz,DJo),e(Pv,GJo),e(U,OJo),e(U,Bv),e(Bv,e2e),e(e2e,VJo),e(Bv,XJo),e(Bv,Rz),e(Rz,zJo),e(Bv,QJo),e(U,WJo),e(U,Iv),e(Iv,o2e),e(o2e,HJo),e(Iv,UJo),e(Iv,Pz),e(Pz,JJo),e(Iv,YJo),e(U,KJo),e(U,Nv),e(Nv,r2e),e(r2e,ZJo),e(Nv,eYo),e(Nv,Bz),e(Bz,oYo),e(Nv,rYo),e(U,tYo),e(U,qv),e(qv,t2e),e(t2e,aYo),e(qv,nYo),e(qv,Iz),e(Iz,sYo),e(qv,lYo),e(U,iYo),e(U,jv),e(jv,a2e),e(a2e,dYo),e(jv,cYo),e(jv,Nz),e(Nz,fYo),e(jv,mYo),e(U,gYo),e(U,Dv),e(Dv,n2e),e(n2e,hYo),e(Dv,pYo),e(Dv,qz),e(qz,_Yo),e(Dv,uYo),e(U,bYo),e(U,Gv),e(Gv,s2e),e(s2e,vYo),e(Gv,FYo),e(Gv,jz),e(jz,TYo),e(Gv,MYo),e(U,EYo),e(U,Ov),e(Ov,l2e),e(l2e,CYo),e(Ov,wYo),e(Ov,Dz),e(Dz,AYo),e(Ov,LYo),e(U,yYo),e(U,Vv),e(Vv,i2e),e(i2e,xYo),e(Vv,$Yo),e(Vv,Gz),e(Gz,kYo),e(Vv,SYo),e(U,RYo),e(U,Xv),e(Xv,d2e),e(d2e,PYo),e(Xv,BYo),e(Xv,Oz),e(Oz,IYo),e(Xv,NYo),e(U,qYo),e(U,zv),e(zv,c2e),e(c2e,jYo),e(zv,DYo),e(zv,Vz),e(Vz,GYo),e(zv,OYo),e(U,VYo),e(U,Qv),e(Qv,f2e),e(f2e,XYo),e(Qv,zYo),e(Qv,Xz),e(Xz,QYo),e(Qv,WYo),e(U,HYo),e(U,Wv),e(Wv,m2e),e(m2e,UYo),e(Wv,JYo),e(Wv,zz),e(zz,YYo),e(Wv,KYo),e(U,ZYo),e(U,Hv),e(Hv,g2e),e(g2e,eKo),e(Hv,oKo),e(Hv,Qz),e(Qz,rKo),e(Hv,tKo),e(U,aKo),e(U,Uv),e(Uv,h2e),e(h2e,nKo),e(Uv,sKo),e(Uv,Wz),e(Wz,lKo),e(Uv,iKo),e(U,dKo),e(U,Jv),e(Jv,p2e),e(p2e,cKo),e(Jv,fKo),e(Jv,Hz),e(Hz,mKo),e(Jv,gKo),e(U,hKo),e(U,Yv),e(Yv,_2e),e(_2e,pKo),e(Yv,_Ko),e(Yv,Uz),e(Uz,uKo),e(Yv,bKo),e(U,vKo),e(U,Kv),e(Kv,u2e),e(u2e,FKo),e(Kv,TKo),e(Kv,Jz),e(Jz,MKo),e(Kv,EKo),e(U,CKo),e(U,Zv),e(Zv,b2e),e(b2e,wKo),e(Zv,AKo),e(Zv,Yz),e(Yz,LKo),e(Zv,yKo),e(U,xKo),e(U,eF),e(eF,v2e),e(v2e,$Ko),e(eF,kKo),e(eF,Kz),e(Kz,SKo),e(eF,RKo),e(U,PKo),e(U,oF),e(oF,F2e),e(F2e,BKo),e(oF,IKo),e(oF,Zz),e(Zz,NKo),e(oF,qKo),e(U,jKo),e(U,rF),e(rF,T2e),e(T2e,DKo),e(rF,GKo),e(rF,eQ),e(eQ,OKo),e(rF,VKo),e(U,XKo),e(U,tF),e(tF,M2e),e(M2e,zKo),e(tF,QKo),e(tF,oQ),e(oQ,WKo),e(tF,HKo),e(U,UKo),e(U,aF),e(aF,E2e),e(E2e,JKo),e(aF,YKo),e(aF,rQ),e(rQ,KKo),e(aF,ZKo),e(U,eZo),e(U,nF),e(nF,C2e),e(C2e,oZo),e(nF,rZo),e(nF,tQ),e(tQ,tZo),e(nF,aZo),e(U,nZo),e(U,sF),e(sF,w2e),e(w2e,sZo),e(sF,lZo),e(sF,aQ),e(aQ,iZo),e(sF,dZo),e(U,cZo),e(U,lF),e(lF,A2e),e(A2e,fZo),e(lF,mZo),e(lF,nQ),e(nQ,gZo),e(lF,hZo),e(U,pZo),e(U,iF),e(iF,L2e),e(L2e,_Zo),e(iF,uZo),e(iF,sQ),e(sQ,bZo),e(iF,vZo),e(U,FZo),e(U,dF),e(dF,y2e),e(y2e,TZo),e(dF,MZo),e(dF,lQ),e(lQ,EZo),e(dF,CZo),e(U,wZo),e(U,cF),e(cF,x2e),e(x2e,AZo),e(cF,LZo),e(cF,iQ),e(iQ,yZo),e(cF,xZo),e(U,$Zo),e(U,fF),e(fF,$2e),e($2e,kZo),e(fF,SZo),e(fF,dQ),e(dQ,RZo),e(fF,PZo),e(U,BZo),e(U,mF),e(mF,k2e),e(k2e,IZo),e(mF,NZo),e(mF,cQ),e(cQ,qZo),e(mF,jZo),e(U,DZo),e(U,gF),e(gF,S2e),e(S2e,GZo),e(gF,OZo),e(gF,fQ),e(fQ,VZo),e(gF,XZo),e(U,zZo),e(U,hF),e(hF,R2e),e(R2e,QZo),e(hF,WZo),e(hF,mQ),e(mQ,HZo),e(hF,UZo),e(ao,JZo),e(ao,pF),e(pF,YZo),e(pF,P2e),e(P2e,KZo),e(pF,ZZo),e(pF,B2e),e(B2e,eer),e(ao,oer),M(_F,ao,null),b(f,vXe,u),b(f,gd,u),e(gd,uF),e(uF,I2e),M(vy,I2e,null),e(gd,rer),e(gd,N2e),e(N2e,ter),b(f,FXe,u),b(f,jo,u),M(Fy,jo,null),e(jo,aer),e(jo,hd),e(hd,ner),e(hd,gQ),e(gQ,ser),e(hd,ler),e(hd,hQ),e(hQ,ier),e(hd,der),e(jo,cer),e(jo,Ty),e(Ty,fer),e(Ty,q2e),e(q2e,mer),e(Ty,ger),e(jo,her),e(jo,_t),M(My,_t,null),e(_t,per),e(_t,j2e),e(j2e,_er),e(_t,uer),e(_t,pd),e(pd,ber),e(pd,D2e),e(D2e,ver),e(pd,Fer),e(pd,pQ),e(pQ,Ter),e(pd,Mer),e(_t,Eer),M(bF,_t,null),e(jo,Cer),e(jo,no),M(Ey,no,null),e(no,wer),e(no,G2e),e(G2e,Aer),e(no,Ler),e(no,za),e(za,yer),e(za,O2e),e(O2e,xer),e(za,$er),e(za,V2e),e(V2e,ker),e(za,Ser),e(za,X2e),e(X2e,Rer),e(za,Per),e(no,Ber),e(no,V),e(V,vF),e(vF,z2e),e(z2e,Ier),e(vF,Ner),e(vF,_Q),e(_Q,qer),e(vF,jer),e(V,Der),e(V,FF),e(FF,Q2e),e(Q2e,Ger),e(FF,Oer),e(FF,uQ),e(uQ,Ver),e(FF,Xer),e(V,zer),e(V,TF),e(TF,W2e),e(W2e,Qer),e(TF,Wer),e(TF,bQ),e(bQ,Her),e(TF,Uer),e(V,Jer),e(V,MF),e(MF,H2e),e(H2e,Yer),e(MF,Ker),e(MF,vQ),e(vQ,Zer),e(MF,eor),e(V,oor),e(V,EF),e(EF,U2e),e(U2e,ror),e(EF,tor),e(EF,FQ),e(FQ,aor),e(EF,nor),e(V,sor),e(V,CF),e(CF,J2e),e(J2e,lor),e(CF,ior),e(CF,TQ),e(TQ,dor),e(CF,cor),e(V,mor),e(V,wF),e(wF,Y2e),e(Y2e,gor),e(wF,hor),e(wF,MQ),e(MQ,por),e(wF,_or),e(V,uor),e(V,AF),e(AF,K2e),e(K2e,bor),e(AF,vor),e(AF,EQ),e(EQ,For),e(AF,Tor),e(V,Mor),e(V,LF),e(LF,Z2e),e(Z2e,Eor),e(LF,Cor),e(LF,CQ),e(CQ,wor),e(LF,Aor),e(V,Lor),e(V,yF),e(yF,e1e),e(e1e,yor),e(yF,xor),e(yF,wQ),e(wQ,$or),e(yF,kor),e(V,Sor),e(V,xF),e(xF,o1e),e(o1e,Ror),e(xF,Por),e(xF,AQ),e(AQ,Bor),e(xF,Ior),e(V,Nor),e(V,$F),e($F,r1e),e(r1e,qor),e($F,jor),e($F,LQ),e(LQ,Dor),e($F,Gor),e(V,Oor),e(V,kF),e(kF,t1e),e(t1e,Vor),e(kF,Xor),e(kF,yQ),e(yQ,zor),e(kF,Qor),e(V,Wor),e(V,SF),e(SF,a1e),e(a1e,Hor),e(SF,Uor),e(SF,xQ),e(xQ,Jor),e(SF,Yor),e(V,Kor),e(V,RF),e(RF,n1e),e(n1e,Zor),e(RF,err),e(RF,$Q),e($Q,orr),e(RF,rrr),e(V,trr),e(V,PF),e(PF,s1e),e(s1e,arr),e(PF,nrr),e(PF,kQ),e(kQ,srr),e(PF,lrr),e(V,irr),e(V,BF),e(BF,l1e),e(l1e,drr),e(BF,crr),e(BF,SQ),e(SQ,frr),e(BF,mrr),e(V,grr),e(V,IF),e(IF,i1e),e(i1e,hrr),e(IF,prr),e(IF,RQ),e(RQ,_rr),e(IF,urr),e(V,brr),e(V,NF),e(NF,d1e),e(d1e,vrr),e(NF,Frr),e(NF,PQ),e(PQ,Trr),e(NF,Mrr),e(V,Err),e(V,qF),e(qF,c1e),e(c1e,Crr),e(qF,wrr),e(qF,BQ),e(BQ,Arr),e(qF,Lrr),e(V,yrr),e(V,jF),e(jF,f1e),e(f1e,xrr),e(jF,$rr),e(jF,IQ),e(IQ,krr),e(jF,Srr),e(V,Rrr),e(V,DF),e(DF,m1e),e(m1e,Prr),e(DF,Brr),e(DF,NQ),e(NQ,Irr),e(DF,Nrr),e(V,qrr),e(V,GF),e(GF,g1e),e(g1e,jrr),e(GF,Drr),e(GF,qQ),e(qQ,Grr),e(GF,Orr),e(V,Vrr),e(V,OF),e(OF,h1e),e(h1e,Xrr),e(OF,zrr),e(OF,jQ),e(jQ,Qrr),e(OF,Wrr),e(V,Hrr),e(V,VF),e(VF,p1e),e(p1e,Urr),e(VF,Jrr),e(VF,DQ),e(DQ,Yrr),e(VF,Krr),e(V,Zrr),e(V,XF),e(XF,_1e),e(_1e,etr),e(XF,otr),e(XF,GQ),e(GQ,rtr),e(XF,ttr),e(V,atr),e(V,zF),e(zF,u1e),e(u1e,ntr),e(zF,str),e(zF,OQ),e(OQ,ltr),e(zF,itr),e(V,dtr),e(V,QF),e(QF,b1e),e(b1e,ctr),e(QF,ftr),e(QF,VQ),e(VQ,mtr),e(QF,gtr),e(V,htr),e(V,WF),e(WF,v1e),e(v1e,ptr),e(WF,_tr),e(WF,XQ),e(XQ,utr),e(WF,btr),e(V,vtr),e(V,HF),e(HF,F1e),e(F1e,Ftr),e(HF,Ttr),e(HF,zQ),e(zQ,Mtr),e(HF,Etr),e(V,Ctr),e(V,UF),e(UF,T1e),e(T1e,wtr),e(UF,Atr),e(UF,QQ),e(QQ,Ltr),e(UF,ytr),e(V,xtr),e(V,JF),e(JF,M1e),e(M1e,$tr),e(JF,ktr),e(JF,WQ),e(WQ,Str),e(JF,Rtr),e(V,Ptr),e(V,YF),e(YF,E1e),e(E1e,Btr),e(YF,Itr),e(YF,HQ),e(HQ,Ntr),e(YF,qtr),e(V,jtr),e(V,KF),e(KF,C1e),e(C1e,Dtr),e(KF,Gtr),e(KF,UQ),e(UQ,Otr),e(KF,Vtr),e(V,Xtr),e(V,ZF),e(ZF,w1e),e(w1e,ztr),e(ZF,Qtr),e(ZF,JQ),e(JQ,Wtr),e(ZF,Htr),e(V,Utr),e(V,eT),e(eT,A1e),e(A1e,Jtr),e(eT,Ytr),e(eT,YQ),e(YQ,Ktr),e(eT,Ztr),e(V,ear),e(V,oT),e(oT,L1e),e(L1e,oar),e(oT,rar),e(oT,KQ),e(KQ,tar),e(oT,aar),e(V,nar),e(V,rT),e(rT,y1e),e(y1e,sar),e(rT,lar),e(rT,ZQ),e(ZQ,iar),e(rT,dar),e(V,car),e(V,tT),e(tT,x1e),e(x1e,far),e(tT,mar),e(tT,eW),e(eW,gar),e(tT,har),e(V,par),e(V,aT),e(aT,$1e),e($1e,_ar),e(aT,uar),e(aT,oW),e(oW,bar),e(aT,Far),e(V,Tar),e(V,nT),e(nT,k1e),e(k1e,Mar),e(nT,Ear),e(nT,rW),e(rW,Car),e(nT,war),e(V,Aar),e(V,sT),e(sT,S1e),e(S1e,Lar),e(sT,yar),e(sT,tW),e(tW,xar),e(sT,$ar),e(no,kar),e(no,lT),e(lT,Sar),e(lT,R1e),e(R1e,Rar),e(lT,Par),e(lT,P1e),e(P1e,Bar),e(no,Iar),M(iT,no,null),b(f,TXe,u),b(f,_d,u),e(_d,dT),e(dT,B1e),M(Cy,B1e,null),e(_d,Nar),e(_d,I1e),e(I1e,qar),b(f,MXe,u),b(f,Do,u),M(wy,Do,null),e(Do,jar),e(Do,ud),e(ud,Dar),e(ud,aW),e(aW,Gar),e(ud,Oar),e(ud,nW),e(nW,Var),e(ud,Xar),e(Do,zar),e(Do,Ay),e(Ay,Qar),e(Ay,N1e),e(N1e,War),e(Ay,Har),e(Do,Uar),e(Do,ut),M(Ly,ut,null),e(ut,Jar),e(ut,q1e),e(q1e,Yar),e(ut,Kar),e(ut,bd),e(bd,Zar),e(bd,j1e),e(j1e,enr),e(bd,onr),e(bd,sW),e(sW,rnr),e(bd,tnr),e(ut,anr),M(cT,ut,null),e(Do,nnr),e(Do,so),M(yy,so,null),e(so,snr),e(so,D1e),e(D1e,lnr),e(so,inr),e(so,Qa),e(Qa,dnr),e(Qa,G1e),e(G1e,cnr),e(Qa,fnr),e(Qa,O1e),e(O1e,mnr),e(Qa,gnr),e(Qa,V1e),e(V1e,hnr),e(Qa,pnr),e(so,_nr),e(so,X1e),e(X1e,fT),e(fT,z1e),e(z1e,unr),e(fT,bnr),e(fT,lW),e(lW,vnr),e(fT,Fnr),e(so,Tnr),e(so,mT),e(mT,Mnr),e(mT,Q1e),e(Q1e,Enr),e(mT,Cnr),e(mT,W1e),e(W1e,wnr),e(so,Anr),M(gT,so,null),b(f,EXe,u),b(f,vd,u),e(vd,hT),e(hT,H1e),M(xy,H1e,null),e(vd,Lnr),e(vd,U1e),e(U1e,ynr),b(f,CXe,u),b(f,Go,u),M($y,Go,null),e(Go,xnr),e(Go,Fd),e(Fd,$nr),e(Fd,iW),e(iW,knr),e(Fd,Snr),e(Fd,dW),e(dW,Rnr),e(Fd,Pnr),e(Go,Bnr),e(Go,ky),e(ky,Inr),e(ky,J1e),e(J1e,Nnr),e(ky,qnr),e(Go,jnr),e(Go,bt),M(Sy,bt,null),e(bt,Dnr),e(bt,Y1e),e(Y1e,Gnr),e(bt,Onr),e(bt,Td),e(Td,Vnr),e(Td,K1e),e(K1e,Xnr),e(Td,znr),e(Td,cW),e(cW,Qnr),e(Td,Wnr),e(bt,Hnr),M(pT,bt,null),e(Go,Unr),e(Go,lo),M(Ry,lo,null),e(lo,Jnr),e(lo,Z1e),e(Z1e,Ynr),e(lo,Knr),e(lo,Wa),e(Wa,Znr),e(Wa,e4e),e(e4e,esr),e(Wa,osr),e(Wa,o4e),e(o4e,rsr),e(Wa,tsr),e(Wa,r4e),e(r4e,asr),e(Wa,nsr),e(lo,ssr),e(lo,ve),e(ve,_T),e(_T,t4e),e(t4e,lsr),e(_T,isr),e(_T,fW),e(fW,dsr),e(_T,csr),e(ve,fsr),e(ve,uT),e(uT,a4e),e(a4e,msr),e(uT,gsr),e(uT,mW),e(mW,hsr),e(uT,psr),e(ve,_sr),e(ve,bT),e(bT,n4e),e(n4e,usr),e(bT,bsr),e(bT,gW),e(gW,vsr),e(bT,Fsr),e(ve,Tsr),e(ve,vT),e(vT,s4e),e(s4e,Msr),e(vT,Esr),e(vT,hW),e(hW,Csr),e(vT,wsr),e(ve,Asr),e(ve,Hs),e(Hs,l4e),e(l4e,Lsr),e(Hs,ysr),e(Hs,pW),e(pW,xsr),e(Hs,$sr),e(Hs,_W),e(_W,ksr),e(Hs,Ssr),e(ve,Rsr),e(ve,FT),e(FT,i4e),e(i4e,Psr),e(FT,Bsr),e(FT,uW),e(uW,Isr),e(FT,Nsr),e(ve,qsr),e(ve,Us),e(Us,d4e),e(d4e,jsr),e(Us,Dsr),e(Us,bW),e(bW,Gsr),e(Us,Osr),e(Us,vW),e(vW,Vsr),e(Us,Xsr),e(ve,zsr),e(ve,TT),e(TT,c4e),e(c4e,Qsr),e(TT,Wsr),e(TT,FW),e(FW,Hsr),e(TT,Usr),e(ve,Jsr),e(ve,vt),e(vt,f4e),e(f4e,Ysr),e(vt,Ksr),e(vt,TW),e(TW,Zsr),e(vt,elr),e(vt,MW),e(MW,olr),e(vt,rlr),e(vt,EW),e(EW,tlr),e(vt,alr),e(ve,nlr),e(ve,MT),e(MT,m4e),e(m4e,slr),e(MT,llr),e(MT,CW),e(CW,ilr),e(MT,dlr),e(ve,clr),e(ve,ET),e(ET,g4e),e(g4e,flr),e(ET,mlr),e(ET,wW),e(wW,glr),e(ET,hlr),e(ve,plr),e(ve,CT),e(CT,h4e),e(h4e,_lr),e(CT,ulr),e(CT,AW),e(AW,blr),e(CT,vlr),e(ve,Flr),e(ve,wT),e(wT,p4e),e(p4e,Tlr),e(wT,Mlr),e(wT,LW),e(LW,Elr),e(wT,Clr),e(ve,wlr),e(ve,AT),e(AT,_4e),e(_4e,Alr),e(AT,Llr),e(AT,yW),e(yW,ylr),e(AT,xlr),e(ve,$lr),e(ve,LT),e(LT,u4e),e(u4e,klr),e(LT,Slr),e(LT,xW),e(xW,Rlr),e(LT,Plr),e(ve,Blr),e(ve,yT),e(yT,b4e),e(b4e,Ilr),e(yT,Nlr),e(yT,$W),e($W,qlr),e(yT,jlr),e(lo,Dlr),e(lo,xT),e(xT,Glr),e(xT,v4e),e(v4e,Olr),e(xT,Vlr),e(xT,F4e),e(F4e,Xlr),e(lo,zlr),M($T,lo,null),b(f,wXe,u),b(f,Md,u),e(Md,kT),e(kT,T4e),M(Py,T4e,null),e(Md,Qlr),e(Md,M4e),e(M4e,Wlr),b(f,AXe,u),b(f,Oo,u),M(By,Oo,null),e(Oo,Hlr),e(Oo,Ed),e(Ed,Ulr),e(Ed,kW),e(kW,Jlr),e(Ed,Ylr),e(Ed,SW),e(SW,Klr),e(Ed,Zlr),e(Oo,eir),e(Oo,Iy),e(Iy,oir),e(Iy,E4e),e(E4e,rir),e(Iy,tir),e(Oo,air),e(Oo,Ft),M(Ny,Ft,null),e(Ft,nir),e(Ft,C4e),e(C4e,sir),e(Ft,lir),e(Ft,Cd),e(Cd,iir),e(Cd,w4e),e(w4e,dir),e(Cd,cir),e(Cd,RW),e(RW,fir),e(Cd,mir),e(Ft,gir),M(ST,Ft,null),e(Oo,hir),e(Oo,io),M(qy,io,null),e(io,pir),e(io,A4e),e(A4e,_ir),e(io,uir),e(io,Ha),e(Ha,bir),e(Ha,L4e),e(L4e,vir),e(Ha,Fir),e(Ha,y4e),e(y4e,Tir),e(Ha,Mir),e(Ha,x4e),e(x4e,Eir),e(Ha,Cir),e(io,wir),e(io,$4e),e($4e,RT),e(RT,k4e),e(k4e,Air),e(RT,Lir),e(RT,PW),e(PW,yir),e(RT,xir),e(io,$ir),e(io,PT),e(PT,kir),e(PT,S4e),e(S4e,Sir),e(PT,Rir),e(PT,R4e),e(R4e,Pir),e(io,Bir),M(BT,io,null),b(f,LXe,u),b(f,wd,u),e(wd,IT),e(IT,P4e),M(jy,P4e,null),e(wd,Iir),e(wd,B4e),e(B4e,Nir),b(f,yXe,u),b(f,Vo,u),M(Dy,Vo,null),e(Vo,qir),e(Vo,Ad),e(Ad,jir),e(Ad,BW),e(BW,Dir),e(Ad,Gir),e(Ad,IW),e(IW,Oir),e(Ad,Vir),e(Vo,Xir),e(Vo,Gy),e(Gy,zir),e(Gy,I4e),e(I4e,Qir),e(Gy,Wir),e(Vo,Hir),e(Vo,Tt),M(Oy,Tt,null),e(Tt,Uir),e(Tt,N4e),e(N4e,Jir),e(Tt,Yir),e(Tt,Ld),e(Ld,Kir),e(Ld,q4e),e(q4e,Zir),e(Ld,edr),e(Ld,NW),e(NW,odr),e(Ld,rdr),e(Tt,tdr),M(NT,Tt,null),e(Vo,adr),e(Vo,co),M(Vy,co,null),e(co,ndr),e(co,j4e),e(j4e,sdr),e(co,ldr),e(co,Ua),e(Ua,idr),e(Ua,D4e),e(D4e,ddr),e(Ua,cdr),e(Ua,G4e),e(G4e,fdr),e(Ua,mdr),e(Ua,O4e),e(O4e,gdr),e(Ua,hdr),e(co,pdr),e(co,V4e),e(V4e,qT),e(qT,X4e),e(X4e,_dr),e(qT,udr),e(qT,qW),e(qW,bdr),e(qT,vdr),e(co,Fdr),e(co,jT),e(jT,Tdr),e(jT,z4e),e(z4e,Mdr),e(jT,Edr),e(jT,Q4e),e(Q4e,Cdr),e(co,wdr),M(DT,co,null),b(f,xXe,u),b(f,yd,u),e(yd,GT),e(GT,W4e),M(Xy,W4e,null),e(yd,Adr),e(yd,H4e),e(H4e,Ldr),b(f,$Xe,u),b(f,Xo,u),M(zy,Xo,null),e(Xo,ydr),e(Xo,xd),e(xd,xdr),e(xd,jW),e(jW,$dr),e(xd,kdr),e(xd,DW),e(DW,Sdr),e(xd,Rdr),e(Xo,Pdr),e(Xo,Qy),e(Qy,Bdr),e(Qy,U4e),e(U4e,Idr),e(Qy,Ndr),e(Xo,qdr),e(Xo,Mt),M(Wy,Mt,null),e(Mt,jdr),e(Mt,J4e),e(J4e,Ddr),e(Mt,Gdr),e(Mt,$d),e($d,Odr),e($d,Y4e),e(Y4e,Vdr),e($d,Xdr),e($d,GW),e(GW,zdr),e($d,Qdr),e(Mt,Wdr),M(OT,Mt,null),e(Xo,Hdr),e(Xo,fo),M(Hy,fo,null),e(fo,Udr),e(fo,K4e),e(K4e,Jdr),e(fo,Ydr),e(fo,Ja),e(Ja,Kdr),e(Ja,Z4e),e(Z4e,Zdr),e(Ja,ecr),e(Ja,ebe),e(ebe,ocr),e(Ja,rcr),e(Ja,obe),e(obe,tcr),e(Ja,acr),e(fo,ncr),e(fo,Pe),e(Pe,VT),e(VT,rbe),e(rbe,scr),e(VT,lcr),e(VT,OW),e(OW,icr),e(VT,dcr),e(Pe,ccr),e(Pe,XT),e(XT,tbe),e(tbe,fcr),e(XT,mcr),e(XT,VW),e(VW,gcr),e(XT,hcr),e(Pe,pcr),e(Pe,zT),e(zT,abe),e(abe,_cr),e(zT,ucr),e(zT,XW),e(XW,bcr),e(zT,vcr),e(Pe,Fcr),e(Pe,QT),e(QT,nbe),e(nbe,Tcr),e(QT,Mcr),e(QT,zW),e(zW,Ecr),e(QT,Ccr),e(Pe,wcr),e(Pe,WT),e(WT,sbe),e(sbe,Acr),e(WT,Lcr),e(WT,QW),e(QW,ycr),e(WT,xcr),e(Pe,$cr),e(Pe,HT),e(HT,lbe),e(lbe,kcr),e(HT,Scr),e(HT,WW),e(WW,Rcr),e(HT,Pcr),e(Pe,Bcr),e(Pe,UT),e(UT,ibe),e(ibe,Icr),e(UT,Ncr),e(UT,HW),e(HW,qcr),e(UT,jcr),e(Pe,Dcr),e(Pe,JT),e(JT,dbe),e(dbe,Gcr),e(JT,Ocr),e(JT,UW),e(UW,Vcr),e(JT,Xcr),e(Pe,zcr),e(Pe,YT),e(YT,cbe),e(cbe,Qcr),e(YT,Wcr),e(YT,JW),e(JW,Hcr),e(YT,Ucr),e(fo,Jcr),e(fo,KT),e(KT,Ycr),e(KT,fbe),e(fbe,Kcr),e(KT,Zcr),e(KT,mbe),e(mbe,efr),e(fo,ofr),M(ZT,fo,null),b(f,kXe,u),b(f,kd,u),e(kd,e7),e(e7,gbe),M(Uy,gbe,null),e(kd,rfr),e(kd,hbe),e(hbe,tfr),b(f,SXe,u),b(f,zo,u),M(Jy,zo,null),e(zo,afr),e(zo,Sd),e(Sd,nfr),e(Sd,YW),e(YW,sfr),e(Sd,lfr),e(Sd,KW),e(KW,ifr),e(Sd,dfr),e(zo,cfr),e(zo,Yy),e(Yy,ffr),e(Yy,pbe),e(pbe,mfr),e(Yy,gfr),e(zo,hfr),e(zo,Et),M(Ky,Et,null),e(Et,pfr),e(Et,_be),e(_be,_fr),e(Et,ufr),e(Et,Rd),e(Rd,bfr),e(Rd,ube),e(ube,vfr),e(Rd,Ffr),e(Rd,ZW),e(ZW,Tfr),e(Rd,Mfr),e(Et,Efr),M(o7,Et,null),e(zo,Cfr),e(zo,mo),M(Zy,mo,null),e(mo,wfr),e(mo,bbe),e(bbe,Afr),e(mo,Lfr),e(mo,Ya),e(Ya,yfr),e(Ya,vbe),e(vbe,xfr),e(Ya,$fr),e(Ya,Fbe),e(Fbe,kfr),e(Ya,Sfr),e(Ya,Tbe),e(Tbe,Rfr),e(Ya,Pfr),e(mo,Bfr),e(mo,ot),e(ot,r7),e(r7,Mbe),e(Mbe,Ifr),e(r7,Nfr),e(r7,eH),e(eH,qfr),e(r7,jfr),e(ot,Dfr),e(ot,t7),e(t7,Ebe),e(Ebe,Gfr),e(t7,Ofr),e(t7,oH),e(oH,Vfr),e(t7,Xfr),e(ot,zfr),e(ot,a7),e(a7,Cbe),e(Cbe,Qfr),e(a7,Wfr),e(a7,rH),e(rH,Hfr),e(a7,Ufr),e(ot,Jfr),e(ot,n7),e(n7,wbe),e(wbe,Yfr),e(n7,Kfr),e(n7,tH),e(tH,Zfr),e(n7,emr),e(ot,omr),e(ot,s7),e(s7,Abe),e(Abe,rmr),e(s7,tmr),e(s7,aH),e(aH,amr),e(s7,nmr),e(mo,smr),e(mo,l7),e(l7,lmr),e(l7,Lbe),e(Lbe,imr),e(l7,dmr),e(l7,ybe),e(ybe,cmr),e(mo,fmr),M(i7,mo,null),b(f,RXe,u),b(f,Pd,u),e(Pd,d7),e(d7,xbe),M(e8,xbe,null),e(Pd,mmr),e(Pd,$be),e($be,gmr),b(f,PXe,u),b(f,Qo,u),M(o8,Qo,null),e(Qo,hmr),e(Qo,Bd),e(Bd,pmr),e(Bd,nH),e(nH,_mr),e(Bd,umr),e(Bd,sH),e(sH,bmr),e(Bd,vmr),e(Qo,Fmr),e(Qo,r8),e(r8,Tmr),e(r8,kbe),e(kbe,Mmr),e(r8,Emr),e(Qo,Cmr),e(Qo,Ct),M(t8,Ct,null),e(Ct,wmr),e(Ct,Sbe),e(Sbe,Amr),e(Ct,Lmr),e(Ct,Id),e(Id,ymr),e(Id,Rbe),e(Rbe,xmr),e(Id,$mr),e(Id,lH),e(lH,kmr),e(Id,Smr),e(Ct,Rmr),M(c7,Ct,null),e(Qo,Pmr),e(Qo,go),M(a8,go,null),e(go,Bmr),e(go,Pbe),e(Pbe,Imr),e(go,Nmr),e(go,Ka),e(Ka,qmr),e(Ka,Bbe),e(Bbe,jmr),e(Ka,Dmr),e(Ka,Ibe),e(Ibe,Gmr),e(Ka,Omr),e(Ka,Nbe),e(Nbe,Vmr),e(Ka,Xmr),e(go,zmr),e(go,Le),e(Le,f7),e(f7,qbe),e(qbe,Qmr),e(f7,Wmr),e(f7,iH),e(iH,Hmr),e(f7,Umr),e(Le,Jmr),e(Le,m7),e(m7,jbe),e(jbe,Ymr),e(m7,Kmr),e(m7,dH),e(dH,Zmr),e(m7,egr),e(Le,ogr),e(Le,g7),e(g7,Dbe),e(Dbe,rgr),e(g7,tgr),e(g7,cH),e(cH,agr),e(g7,ngr),e(Le,sgr),e(Le,h7),e(h7,Gbe),e(Gbe,lgr),e(h7,igr),e(h7,fH),e(fH,dgr),e(h7,cgr),e(Le,fgr),e(Le,p7),e(p7,Obe),e(Obe,mgr),e(p7,ggr),e(p7,mH),e(mH,hgr),e(p7,pgr),e(Le,_gr),e(Le,_7),e(_7,Vbe),e(Vbe,ugr),e(_7,bgr),e(_7,gH),e(gH,vgr),e(_7,Fgr),e(Le,Tgr),e(Le,u7),e(u7,Xbe),e(Xbe,Mgr),e(u7,Egr),e(u7,hH),e(hH,Cgr),e(u7,wgr),e(Le,Agr),e(Le,b7),e(b7,zbe),e(zbe,Lgr),e(b7,ygr),e(b7,pH),e(pH,xgr),e(b7,$gr),e(Le,kgr),e(Le,v7),e(v7,Qbe),e(Qbe,Sgr),e(v7,Rgr),e(v7,_H),e(_H,Pgr),e(v7,Bgr),e(Le,Igr),e(Le,F7),e(F7,Wbe),e(Wbe,Ngr),e(F7,qgr),e(F7,uH),e(uH,jgr),e(F7,Dgr),e(go,Ggr),e(go,T7),e(T7,Ogr),e(T7,Hbe),e(Hbe,Vgr),e(T7,Xgr),e(T7,Ube),e(Ube,zgr),e(go,Qgr),M(M7,go,null),b(f,BXe,u),b(f,Nd,u),e(Nd,E7),e(E7,Jbe),M(n8,Jbe,null),e(Nd,Wgr),e(Nd,Ybe),e(Ybe,Hgr),b(f,IXe,u),b(f,Wo,u),M(s8,Wo,null),e(Wo,Ugr),e(Wo,qd),e(qd,Jgr),e(qd,bH),e(bH,Ygr),e(qd,Kgr),e(qd,vH),e(vH,Zgr),e(qd,ehr),e(Wo,ohr),e(Wo,l8),e(l8,rhr),e(l8,Kbe),e(Kbe,thr),e(l8,ahr),e(Wo,nhr),e(Wo,wt),M(i8,wt,null),e(wt,shr),e(wt,Zbe),e(Zbe,lhr),e(wt,ihr),e(wt,jd),e(jd,dhr),e(jd,eve),e(eve,chr),e(jd,fhr),e(jd,FH),e(FH,mhr),e(jd,ghr),e(wt,hhr),M(C7,wt,null),e(Wo,phr),e(Wo,ho),M(d8,ho,null),e(ho,_hr),e(ho,ove),e(ove,uhr),e(ho,bhr),e(ho,Za),e(Za,vhr),e(Za,rve),e(rve,Fhr),e(Za,Thr),e(Za,tve),e(tve,Mhr),e(Za,Ehr),e(Za,ave),e(ave,Chr),e(Za,whr),e(ho,Ahr),e(ho,c8),e(c8,w7),e(w7,nve),e(nve,Lhr),e(w7,yhr),e(w7,TH),e(TH,xhr),e(w7,$hr),e(c8,khr),e(c8,A7),e(A7,sve),e(sve,Shr),e(A7,Rhr),e(A7,MH),e(MH,Phr),e(A7,Bhr),e(ho,Ihr),e(ho,L7),e(L7,Nhr),e(L7,lve),e(lve,qhr),e(L7,jhr),e(L7,ive),e(ive,Dhr),e(ho,Ghr),M(y7,ho,null),b(f,NXe,u),b(f,Dd,u),e(Dd,x7),e(x7,dve),M(f8,dve,null),e(Dd,Ohr),e(Dd,cve),e(cve,Vhr),b(f,qXe,u),b(f,Ho,u),M(m8,Ho,null),e(Ho,Xhr),e(Ho,Gd),e(Gd,zhr),e(Gd,EH),e(EH,Qhr),e(Gd,Whr),e(Gd,CH),e(CH,Hhr),e(Gd,Uhr),e(Ho,Jhr),e(Ho,g8),e(g8,Yhr),e(g8,fve),e(fve,Khr),e(g8,Zhr),e(Ho,epr),e(Ho,At),M(h8,At,null),e(At,opr),e(At,mve),e(mve,rpr),e(At,tpr),e(At,Od),e(Od,apr),e(Od,gve),e(gve,npr),e(Od,spr),e(Od,wH),e(wH,lpr),e(Od,ipr),e(At,dpr),M($7,At,null),e(Ho,cpr),e(Ho,po),M(p8,po,null),e(po,fpr),e(po,hve),e(hve,mpr),e(po,gpr),e(po,en),e(en,hpr),e(en,pve),e(pve,ppr),e(en,_pr),e(en,_ve),e(_ve,upr),e(en,bpr),e(en,uve),e(uve,vpr),e(en,Fpr),e(po,Tpr),e(po,rt),e(rt,k7),e(k7,bve),e(bve,Mpr),e(k7,Epr),e(k7,AH),e(AH,Cpr),e(k7,wpr),e(rt,Apr),e(rt,S7),e(S7,vve),e(vve,Lpr),e(S7,ypr),e(S7,LH),e(LH,xpr),e(S7,$pr),e(rt,kpr),e(rt,R7),e(R7,Fve),e(Fve,Spr),e(R7,Rpr),e(R7,yH),e(yH,Ppr),e(R7,Bpr),e(rt,Ipr),e(rt,P7),e(P7,Tve),e(Tve,Npr),e(P7,qpr),e(P7,xH),e(xH,jpr),e(P7,Dpr),e(rt,Gpr),e(rt,B7),e(B7,Mve),e(Mve,Opr),e(B7,Vpr),e(B7,$H),e($H,Xpr),e(B7,zpr),e(po,Qpr),e(po,I7),e(I7,Wpr),e(I7,Eve),e(Eve,Hpr),e(I7,Upr),e(I7,Cve),e(Cve,Jpr),e(po,Ypr),M(N7,po,null),b(f,jXe,u),b(f,Vd,u),e(Vd,q7),e(q7,wve),M(_8,wve,null),e(Vd,Kpr),e(Vd,Ave),e(Ave,Zpr),b(f,DXe,u),b(f,Uo,u),M(u8,Uo,null),e(Uo,e_r),e(Uo,Xd),e(Xd,o_r),e(Xd,kH),e(kH,r_r),e(Xd,t_r),e(Xd,SH),e(SH,a_r),e(Xd,n_r),e(Uo,s_r),e(Uo,b8),e(b8,l_r),e(b8,Lve),e(Lve,i_r),e(b8,d_r),e(Uo,c_r),e(Uo,Lt),M(v8,Lt,null),e(Lt,f_r),e(Lt,yve),e(yve,m_r),e(Lt,g_r),e(Lt,zd),e(zd,h_r),e(zd,xve),e(xve,p_r),e(zd,__r),e(zd,RH),e(RH,u_r),e(zd,b_r),e(Lt,v_r),M(j7,Lt,null),e(Uo,F_r),e(Uo,_o),M(F8,_o,null),e(_o,T_r),e(_o,$ve),e($ve,M_r),e(_o,E_r),e(_o,on),e(on,C_r),e(on,kve),e(kve,w_r),e(on,A_r),e(on,Sve),e(Sve,L_r),e(on,y_r),e(on,Rve),e(Rve,x_r),e(on,$_r),e(_o,k_r),e(_o,Qd),e(Qd,D7),e(D7,Pve),e(Pve,S_r),e(D7,R_r),e(D7,PH),e(PH,P_r),e(D7,B_r),e(Qd,I_r),e(Qd,G7),e(G7,Bve),e(Bve,N_r),e(G7,q_r),e(G7,BH),e(BH,j_r),e(G7,D_r),e(Qd,G_r),e(Qd,O7),e(O7,Ive),e(Ive,O_r),e(O7,V_r),e(O7,IH),e(IH,X_r),e(O7,z_r),e(_o,Q_r),e(_o,V7),e(V7,W_r),e(V7,Nve),e(Nve,H_r),e(V7,U_r),e(V7,qve),e(qve,J_r),e(_o,Y_r),M(X7,_o,null),b(f,GXe,u),b(f,Wd,u),e(Wd,z7),e(z7,jve),M(T8,jve,null),e(Wd,K_r),e(Wd,Dve),e(Dve,Z_r),b(f,OXe,u),b(f,Jo,u),M(M8,Jo,null),e(Jo,eur),e(Jo,Hd),e(Hd,our),e(Hd,NH),e(NH,rur),e(Hd,tur),e(Hd,qH),e(qH,aur),e(Hd,nur),e(Jo,sur),e(Jo,E8),e(E8,lur),e(E8,Gve),e(Gve,iur),e(E8,dur),e(Jo,cur),e(Jo,yt),M(C8,yt,null),e(yt,fur),e(yt,Ove),e(Ove,mur),e(yt,gur),e(yt,Ud),e(Ud,hur),e(Ud,Vve),e(Vve,pur),e(Ud,_ur),e(Ud,jH),e(jH,uur),e(Ud,bur),e(yt,vur),M(Q7,yt,null),e(Jo,Fur),e(Jo,uo),M(w8,uo,null),e(uo,Tur),e(uo,Xve),e(Xve,Mur),e(uo,Eur),e(uo,rn),e(rn,Cur),e(rn,zve),e(zve,wur),e(rn,Aur),e(rn,Qve),e(Qve,Lur),e(rn,yur),e(rn,Wve),e(Wve,xur),e(rn,$ur),e(uo,kur),e(uo,A8),e(A8,W7),e(W7,Hve),e(Hve,Sur),e(W7,Rur),e(W7,DH),e(DH,Pur),e(W7,Bur),e(A8,Iur),e(A8,H7),e(H7,Uve),e(Uve,Nur),e(H7,qur),e(H7,GH),e(GH,jur),e(H7,Dur),e(uo,Gur),e(uo,U7),e(U7,Our),e(U7,Jve),e(Jve,Vur),e(U7,Xur),e(U7,Yve),e(Yve,zur),e(uo,Qur),M(J7,uo,null),b(f,VXe,u),b(f,Jd,u),e(Jd,Y7),e(Y7,Kve),M(L8,Kve,null),e(Jd,Wur),e(Jd,Zve),e(Zve,Hur),b(f,XXe,u),b(f,Yo,u),M(y8,Yo,null),e(Yo,Uur),e(Yo,Yd),e(Yd,Jur),e(Yd,OH),e(OH,Yur),e(Yd,Kur),e(Yd,VH),e(VH,Zur),e(Yd,e2r),e(Yo,o2r),e(Yo,x8),e(x8,r2r),e(x8,eFe),e(eFe,t2r),e(x8,a2r),e(Yo,n2r),e(Yo,xt),M($8,xt,null),e(xt,s2r),e(xt,oFe),e(oFe,l2r),e(xt,i2r),e(xt,Kd),e(Kd,d2r),e(Kd,rFe),e(rFe,c2r),e(Kd,f2r),e(Kd,XH),e(XH,m2r),e(Kd,g2r),e(xt,h2r),M(K7,xt,null),e(Yo,p2r),e(Yo,bo),M(k8,bo,null),e(bo,_2r),e(bo,tFe),e(tFe,u2r),e(bo,b2r),e(bo,tn),e(tn,v2r),e(tn,aFe),e(aFe,F2r),e(tn,T2r),e(tn,nFe),e(nFe,M2r),e(tn,E2r),e(tn,sFe),e(sFe,C2r),e(tn,w2r),e(bo,A2r),e(bo,lFe),e(lFe,Z7),e(Z7,iFe),e(iFe,L2r),e(Z7,y2r),e(Z7,zH),e(zH,x2r),e(Z7,$2r),e(bo,k2r),e(bo,e9),e(e9,S2r),e(e9,dFe),e(dFe,R2r),e(e9,P2r),e(e9,cFe),e(cFe,B2r),e(bo,I2r),M(o9,bo,null),b(f,zXe,u),b(f,Zd,u),e(Zd,r9),e(r9,fFe),M(S8,fFe,null),e(Zd,N2r),e(Zd,mFe),e(mFe,q2r),b(f,QXe,u),b(f,Ko,u),M(R8,Ko,null),e(Ko,j2r),e(Ko,ec),e(ec,D2r),e(ec,QH),e(QH,G2r),e(ec,O2r),e(ec,WH),e(WH,V2r),e(ec,X2r),e(Ko,z2r),e(Ko,P8),e(P8,Q2r),e(P8,gFe),e(gFe,W2r),e(P8,H2r),e(Ko,U2r),e(Ko,$t),M(B8,$t,null),e($t,J2r),e($t,hFe),e(hFe,Y2r),e($t,K2r),e($t,oc),e(oc,Z2r),e(oc,pFe),e(pFe,e1r),e(oc,o1r),e(oc,HH),e(HH,r1r),e(oc,t1r),e($t,a1r),M(t9,$t,null),e(Ko,n1r),e(Ko,vo),M(I8,vo,null),e(vo,s1r),e(vo,_Fe),e(_Fe,l1r),e(vo,i1r),e(vo,an),e(an,d1r),e(an,uFe),e(uFe,c1r),e(an,f1r),e(an,bFe),e(bFe,m1r),e(an,g1r),e(an,vFe),e(vFe,h1r),e(an,p1r),e(vo,_1r),e(vo,tt),e(tt,a9),e(a9,FFe),e(FFe,u1r),e(a9,b1r),e(a9,UH),e(UH,v1r),e(a9,F1r),e(tt,T1r),e(tt,n9),e(n9,TFe),e(TFe,M1r),e(n9,E1r),e(n9,JH),e(JH,C1r),e(n9,w1r),e(tt,A1r),e(tt,s9),e(s9,MFe),e(MFe,L1r),e(s9,y1r),e(s9,YH),e(YH,x1r),e(s9,$1r),e(tt,k1r),e(tt,l9),e(l9,EFe),e(EFe,S1r),e(l9,R1r),e(l9,KH),e(KH,P1r),e(l9,B1r),e(tt,I1r),e(tt,i9),e(i9,CFe),e(CFe,N1r),e(i9,q1r),e(i9,ZH),e(ZH,j1r),e(i9,D1r),e(vo,G1r),e(vo,d9),e(d9,O1r),e(d9,wFe),e(wFe,V1r),e(d9,X1r),e(d9,AFe),e(AFe,z1r),e(vo,Q1r),M(c9,vo,null),b(f,WXe,u),b(f,rc,u),e(rc,f9),e(f9,LFe),M(N8,LFe,null),e(rc,W1r),e(rc,yFe),e(yFe,H1r),b(f,HXe,u),b(f,Zo,u),M(q8,Zo,null),e(Zo,U1r),e(Zo,tc),e(tc,J1r),e(tc,eU),e(eU,Y1r),e(tc,K1r),e(tc,oU),e(oU,Z1r),e(tc,e4r),e(Zo,o4r),e(Zo,j8),e(j8,r4r),e(j8,xFe),e(xFe,t4r),e(j8,a4r),e(Zo,n4r),e(Zo,kt),M(D8,kt,null),e(kt,s4r),e(kt,$Fe),e($Fe,l4r),e(kt,i4r),e(kt,ac),e(ac,d4r),e(ac,kFe),e(kFe,c4r),e(ac,f4r),e(ac,rU),e(rU,m4r),e(ac,g4r),e(kt,h4r),M(m9,kt,null),e(Zo,p4r),e(Zo,Fo),M(G8,Fo,null),e(Fo,_4r),e(Fo,SFe),e(SFe,u4r),e(Fo,b4r),e(Fo,nn),e(nn,v4r),e(nn,RFe),e(RFe,F4r),e(nn,T4r),e(nn,PFe),e(PFe,M4r),e(nn,E4r),e(nn,BFe),e(BFe,C4r),e(nn,w4r),e(Fo,A4r),e(Fo,IFe),e(IFe,g9),e(g9,NFe),e(NFe,L4r),e(g9,y4r),e(g9,tU),e(tU,x4r),e(g9,$4r),e(Fo,k4r),e(Fo,h9),e(h9,S4r),e(h9,qFe),e(qFe,R4r),e(h9,P4r),e(h9,jFe),e(jFe,B4r),e(Fo,I4r),M(p9,Fo,null),b(f,UXe,u),b(f,nc,u),e(nc,_9),e(_9,DFe),M(O8,DFe,null),e(nc,N4r),e(nc,GFe),e(GFe,q4r),b(f,JXe,u),b(f,er,u),M(V8,er,null),e(er,j4r),e(er,sc),e(sc,D4r),e(sc,aU),e(aU,G4r),e(sc,O4r),e(sc,nU),e(nU,V4r),e(sc,X4r),e(er,z4r),e(er,X8),e(X8,Q4r),e(X8,OFe),e(OFe,W4r),e(X8,H4r),e(er,U4r),e(er,St),M(z8,St,null),e(St,J4r),e(St,VFe),e(VFe,Y4r),e(St,K4r),e(St,lc),e(lc,Z4r),e(lc,XFe),e(XFe,ebr),e(lc,obr),e(lc,sU),e(sU,rbr),e(lc,tbr),e(St,abr),M(u9,St,null),e(er,nbr),e(er,xr),M(Q8,xr,null),e(xr,sbr),e(xr,zFe),e(zFe,lbr),e(xr,ibr),e(xr,sn),e(sn,dbr),e(sn,QFe),e(QFe,cbr),e(sn,fbr),e(sn,WFe),e(WFe,mbr),e(sn,gbr),e(sn,HFe),e(HFe,hbr),e(sn,pbr),e(xr,_br),e(xr,q),e(q,b9),e(b9,UFe),e(UFe,ubr),e(b9,bbr),e(b9,lU),e(lU,vbr),e(b9,Fbr),e(q,Tbr),e(q,v9),e(v9,JFe),e(JFe,Mbr),e(v9,Ebr),e(v9,iU),e(iU,Cbr),e(v9,wbr),e(q,Abr),e(q,F9),e(F9,YFe),e(YFe,Lbr),e(F9,ybr),e(F9,dU),e(dU,xbr),e(F9,$br),e(q,kbr),e(q,T9),e(T9,KFe),e(KFe,Sbr),e(T9,Rbr),e(T9,cU),e(cU,Pbr),e(T9,Bbr),e(q,Ibr),e(q,M9),e(M9,ZFe),e(ZFe,Nbr),e(M9,qbr),e(M9,fU),e(fU,jbr),e(M9,Dbr),e(q,Gbr),e(q,E9),e(E9,eTe),e(eTe,Obr),e(E9,Vbr),e(E9,mU),e(mU,Xbr),e(E9,zbr),e(q,Qbr),e(q,C9),e(C9,oTe),e(oTe,Wbr),e(C9,Hbr),e(C9,gU),e(gU,Ubr),e(C9,Jbr),e(q,Ybr),e(q,w9),e(w9,rTe),e(rTe,Kbr),e(w9,Zbr),e(w9,hU),e(hU,evr),e(w9,ovr),e(q,rvr),e(q,A9),e(A9,tTe),e(tTe,tvr),e(A9,avr),e(A9,pU),e(pU,nvr),e(A9,svr),e(q,lvr),e(q,L9),e(L9,aTe),e(aTe,ivr),e(L9,dvr),e(L9,_U),e(_U,cvr),e(L9,fvr),e(q,mvr),e(q,y9),e(y9,nTe),e(nTe,gvr),e(y9,hvr),e(y9,uU),e(uU,pvr),e(y9,_vr),e(q,uvr),e(q,x9),e(x9,sTe),e(sTe,bvr),e(x9,vvr),e(x9,bU),e(bU,Fvr),e(x9,Tvr),e(q,Mvr),e(q,$9),e($9,lTe),e(lTe,Evr),e($9,Cvr),e($9,vU),e(vU,wvr),e($9,Avr),e(q,Lvr),e(q,k9),e(k9,iTe),e(iTe,yvr),e(k9,xvr),e(k9,FU),e(FU,$vr),e(k9,kvr),e(q,Svr),e(q,S9),e(S9,dTe),e(dTe,Rvr),e(S9,Pvr),e(S9,TU),e(TU,Bvr),e(S9,Ivr),e(q,Nvr),e(q,R9),e(R9,cTe),e(cTe,qvr),e(R9,jvr),e(R9,MU),e(MU,Dvr),e(R9,Gvr),e(q,Ovr),e(q,P9),e(P9,fTe),e(fTe,Vvr),e(P9,Xvr),e(P9,EU),e(EU,zvr),e(P9,Qvr),e(q,Wvr),e(q,Js),e(Js,mTe),e(mTe,Hvr),e(Js,Uvr),e(Js,CU),e(CU,Jvr),e(Js,Yvr),e(Js,wU),e(wU,Kvr),e(Js,Zvr),e(q,eFr),e(q,B9),e(B9,gTe),e(gTe,oFr),e(B9,rFr),e(B9,AU),e(AU,tFr),e(B9,aFr),e(q,nFr),e(q,I9),e(I9,hTe),e(hTe,sFr),e(I9,lFr),e(I9,LU),e(LU,iFr),e(I9,dFr),e(q,cFr),e(q,N9),e(N9,pTe),e(pTe,fFr),e(N9,mFr),e(N9,yU),e(yU,gFr),e(N9,hFr),e(q,pFr),e(q,q9),e(q9,_Te),e(_Te,_Fr),e(q9,uFr),e(q9,xU),e(xU,bFr),e(q9,vFr),e(q,FFr),e(q,j9),e(j9,uTe),e(uTe,TFr),e(j9,MFr),e(j9,$U),e($U,EFr),e(j9,CFr),e(q,wFr),e(q,D9),e(D9,bTe),e(bTe,AFr),e(D9,LFr),e(D9,kU),e(kU,yFr),e(D9,xFr),e(q,$Fr),e(q,G9),e(G9,vTe),e(vTe,kFr),e(G9,SFr),e(G9,SU),e(SU,RFr),e(G9,PFr),e(q,BFr),e(q,O9),e(O9,FTe),e(FTe,IFr),e(O9,NFr),e(O9,RU),e(RU,qFr),e(O9,jFr),e(q,DFr),e(q,V9),e(V9,TTe),e(TTe,GFr),e(V9,OFr),e(V9,PU),e(PU,VFr),e(V9,XFr),e(q,zFr),e(q,X9),e(X9,MTe),e(MTe,QFr),e(X9,WFr),e(X9,BU),e(BU,HFr),e(X9,UFr),e(q,JFr),e(q,z9),e(z9,ETe),e(ETe,YFr),e(z9,KFr),e(z9,IU),e(IU,ZFr),e(z9,eTr),e(q,oTr),e(q,Q9),e(Q9,CTe),e(CTe,rTr),e(Q9,tTr),e(Q9,NU),e(NU,aTr),e(Q9,nTr),e(q,sTr),e(q,W9),e(W9,wTe),e(wTe,lTr),e(W9,iTr),e(W9,qU),e(qU,dTr),e(W9,cTr),e(q,fTr),e(q,H9),e(H9,ATe),e(ATe,mTr),e(H9,gTr),e(H9,jU),e(jU,hTr),e(H9,pTr),e(q,_Tr),e(q,U9),e(U9,LTe),e(LTe,uTr),e(U9,bTr),e(U9,DU),e(DU,vTr),e(U9,FTr),e(q,TTr),e(q,J9),e(J9,yTe),e(yTe,MTr),e(J9,ETr),e(J9,GU),e(GU,CTr),e(J9,wTr),e(q,ATr),e(q,Y9),e(Y9,xTe),e(xTe,LTr),e(Y9,yTr),e(Y9,OU),e(OU,xTr),e(Y9,$Tr),e(q,kTr),e(q,K9),e(K9,$Te),e($Te,STr),e(K9,RTr),e(K9,VU),e(VU,PTr),e(K9,BTr),e(q,ITr),e(q,Z9),e(Z9,kTe),e(kTe,NTr),e(Z9,qTr),e(Z9,XU),e(XU,jTr),e(Z9,DTr),e(q,GTr),e(q,eM),e(eM,STe),e(STe,OTr),e(eM,VTr),e(eM,zU),e(zU,XTr),e(eM,zTr),e(q,QTr),e(q,oM),e(oM,RTe),e(RTe,WTr),e(oM,HTr),e(oM,QU),e(QU,UTr),e(oM,JTr),e(q,YTr),e(q,rM),e(rM,PTe),e(PTe,KTr),e(rM,ZTr),e(rM,WU),e(WU,e7r),e(rM,o7r),e(q,r7r),e(q,tM),e(tM,BTe),e(BTe,t7r),e(tM,a7r),e(tM,HU),e(HU,n7r),e(tM,s7r),e(q,l7r),e(q,aM),e(aM,ITe),e(ITe,i7r),e(aM,d7r),e(aM,UU),e(UU,c7r),e(aM,f7r),e(q,m7r),e(q,nM),e(nM,NTe),e(NTe,g7r),e(nM,h7r),e(nM,JU),e(JU,p7r),e(nM,_7r),e(q,u7r),e(q,sM),e(sM,qTe),e(qTe,b7r),e(sM,v7r),e(sM,YU),e(YU,F7r),e(sM,T7r),e(q,M7r),e(q,lM),e(lM,jTe),e(jTe,E7r),e(lM,C7r),e(lM,KU),e(KU,w7r),e(lM,A7r),e(q,L7r),e(q,iM),e(iM,DTe),e(DTe,y7r),e(iM,x7r),e(iM,ZU),e(ZU,$7r),e(iM,k7r),e(q,S7r),e(q,dM),e(dM,GTe),e(GTe,R7r),e(dM,P7r),e(dM,eJ),e(eJ,B7r),e(dM,I7r),e(q,N7r),e(q,cM),e(cM,OTe),e(OTe,q7r),e(cM,j7r),e(cM,oJ),e(oJ,D7r),e(cM,G7r),e(q,O7r),e(q,fM),e(fM,VTe),e(VTe,V7r),e(fM,X7r),e(fM,rJ),e(rJ,z7r),e(fM,Q7r),e(xr,W7r),M(mM,xr,null),b(f,YXe,u),b(f,ic,u),e(ic,gM),e(gM,XTe),M(W8,XTe,null),e(ic,H7r),e(ic,zTe),e(zTe,U7r),b(f,KXe,u),b(f,or,u),M(H8,or,null),e(or,J7r),e(or,dc),e(dc,Y7r),e(dc,tJ),e(tJ,K7r),e(dc,Z7r),e(dc,aJ),e(aJ,e9r),e(dc,o9r),e(or,r9r),e(or,U8),e(U8,t9r),e(U8,QTe),e(QTe,a9r),e(U8,n9r),e(or,s9r),e(or,Rt),M(J8,Rt,null),e(Rt,l9r),e(Rt,WTe),e(WTe,i9r),e(Rt,d9r),e(Rt,cc),e(cc,c9r),e(cc,HTe),e(HTe,f9r),e(cc,m9r),e(cc,nJ),e(nJ,g9r),e(cc,h9r),e(Rt,p9r),M(hM,Rt,null),e(or,_9r),e(or,$r),M(Y8,$r,null),e($r,u9r),e($r,UTe),e(UTe,b9r),e($r,v9r),e($r,ln),e(ln,F9r),e(ln,JTe),e(JTe,T9r),e(ln,M9r),e(ln,YTe),e(YTe,E9r),e(ln,C9r),e(ln,KTe),e(KTe,w9r),e(ln,A9r),e($r,L9r),e($r,se),e(se,pM),e(pM,ZTe),e(ZTe,y9r),e(pM,x9r),e(pM,sJ),e(sJ,$9r),e(pM,k9r),e(se,S9r),e(se,_M),e(_M,e7e),e(e7e,R9r),e(_M,P9r),e(_M,lJ),e(lJ,B9r),e(_M,I9r),e(se,N9r),e(se,uM),e(uM,o7e),e(o7e,q9r),e(uM,j9r),e(uM,iJ),e(iJ,D9r),e(uM,G9r),e(se,O9r),e(se,bM),e(bM,r7e),e(r7e,V9r),e(bM,X9r),e(bM,dJ),e(dJ,z9r),e(bM,Q9r),e(se,W9r),e(se,vM),e(vM,t7e),e(t7e,H9r),e(vM,U9r),e(vM,cJ),e(cJ,J9r),e(vM,Y9r),e(se,K9r),e(se,FM),e(FM,a7e),e(a7e,Z9r),e(FM,eMr),e(FM,fJ),e(fJ,oMr),e(FM,rMr),e(se,tMr),e(se,TM),e(TM,n7e),e(n7e,aMr),e(TM,nMr),e(TM,mJ),e(mJ,sMr),e(TM,lMr),e(se,iMr),e(se,MM),e(MM,s7e),e(s7e,dMr),e(MM,cMr),e(MM,gJ),e(gJ,fMr),e(MM,mMr),e(se,gMr),e(se,EM),e(EM,l7e),e(l7e,hMr),e(EM,pMr),e(EM,hJ),e(hJ,_Mr),e(EM,uMr),e(se,bMr),e(se,CM),e(CM,i7e),e(i7e,vMr),e(CM,FMr),e(CM,pJ),e(pJ,TMr),e(CM,MMr),e(se,EMr),e(se,wM),e(wM,d7e),e(d7e,CMr),e(wM,wMr),e(wM,_J),e(_J,AMr),e(wM,LMr),e(se,yMr),e(se,AM),e(AM,c7e),e(c7e,xMr),e(AM,$Mr),e(AM,uJ),e(uJ,kMr),e(AM,SMr),e(se,RMr),e(se,LM),e(LM,f7e),e(f7e,PMr),e(LM,BMr),e(LM,bJ),e(bJ,IMr),e(LM,NMr),e(se,qMr),e(se,yM),e(yM,m7e),e(m7e,jMr),e(yM,DMr),e(yM,vJ),e(vJ,GMr),e(yM,OMr),e(se,VMr),e(se,xM),e(xM,g7e),e(g7e,XMr),e(xM,zMr),e(xM,FJ),e(FJ,QMr),e(xM,WMr),e(se,HMr),e(se,$M),e($M,h7e),e(h7e,UMr),e($M,JMr),e($M,TJ),e(TJ,YMr),e($M,KMr),e(se,ZMr),e(se,kM),e(kM,p7e),e(p7e,eEr),e(kM,oEr),e(kM,MJ),e(MJ,rEr),e(kM,tEr),e(se,aEr),e(se,SM),e(SM,_7e),e(_7e,nEr),e(SM,sEr),e(SM,EJ),e(EJ,lEr),e(SM,iEr),e(se,dEr),e(se,RM),e(RM,u7e),e(u7e,cEr),e(RM,fEr),e(RM,CJ),e(CJ,mEr),e(RM,gEr),e(se,hEr),e(se,PM),e(PM,b7e),e(b7e,pEr),e(PM,_Er),e(PM,wJ),e(wJ,uEr),e(PM,bEr),e(se,vEr),e(se,BM),e(BM,v7e),e(v7e,FEr),e(BM,TEr),e(BM,AJ),e(AJ,MEr),e(BM,EEr),e(se,CEr),e(se,IM),e(IM,F7e),e(F7e,wEr),e(IM,AEr),e(IM,LJ),e(LJ,LEr),e(IM,yEr),e(se,xEr),e(se,NM),e(NM,T7e),e(T7e,$Er),e(NM,kEr),e(NM,yJ),e(yJ,SEr),e(NM,REr),e($r,PEr),M(qM,$r,null),b(f,ZXe,u),b(f,fc,u),e(fc,jM),e(jM,M7e),M(K8,M7e,null),e(fc,BEr),e(fc,E7e),e(E7e,IEr),b(f,eze,u),b(f,rr,u),M(Z8,rr,null),e(rr,NEr),e(rr,mc),e(mc,qEr),e(mc,xJ),e(xJ,jEr),e(mc,DEr),e(mc,$J),e($J,GEr),e(mc,OEr),e(rr,VEr),e(rr,ex),e(ex,XEr),e(ex,C7e),e(C7e,zEr),e(ex,QEr),e(rr,WEr),e(rr,Pt),M(ox,Pt,null),e(Pt,HEr),e(Pt,w7e),e(w7e,UEr),e(Pt,JEr),e(Pt,gc),e(gc,YEr),e(gc,A7e),e(A7e,KEr),e(gc,ZEr),e(gc,kJ),e(kJ,eCr),e(gc,oCr),e(Pt,rCr),M(DM,Pt,null),e(rr,tCr),e(rr,kr),M(rx,kr,null),e(kr,aCr),e(kr,L7e),e(L7e,nCr),e(kr,sCr),e(kr,dn),e(dn,lCr),e(dn,y7e),e(y7e,iCr),e(dn,dCr),e(dn,x7e),e(x7e,cCr),e(dn,fCr),e(dn,$7e),e($7e,mCr),e(dn,gCr),e(kr,hCr),e(kr,Me),e(Me,GM),e(GM,k7e),e(k7e,pCr),e(GM,_Cr),e(GM,SJ),e(SJ,uCr),e(GM,bCr),e(Me,vCr),e(Me,OM),e(OM,S7e),e(S7e,FCr),e(OM,TCr),e(OM,RJ),e(RJ,MCr),e(OM,ECr),e(Me,CCr),e(Me,VM),e(VM,R7e),e(R7e,wCr),e(VM,ACr),e(VM,PJ),e(PJ,LCr),e(VM,yCr),e(Me,xCr),e(Me,XM),e(XM,P7e),e(P7e,$Cr),e(XM,kCr),e(XM,BJ),e(BJ,SCr),e(XM,RCr),e(Me,PCr),e(Me,zM),e(zM,B7e),e(B7e,BCr),e(zM,ICr),e(zM,IJ),e(IJ,NCr),e(zM,qCr),e(Me,jCr),e(Me,QM),e(QM,I7e),e(I7e,DCr),e(QM,GCr),e(QM,NJ),e(NJ,OCr),e(QM,VCr),e(Me,XCr),e(Me,WM),e(WM,N7e),e(N7e,zCr),e(WM,QCr),e(WM,qJ),e(qJ,WCr),e(WM,HCr),e(Me,UCr),e(Me,HM),e(HM,q7e),e(q7e,JCr),e(HM,YCr),e(HM,jJ),e(jJ,KCr),e(HM,ZCr),e(Me,e3r),e(Me,UM),e(UM,j7e),e(j7e,o3r),e(UM,r3r),e(UM,DJ),e(DJ,t3r),e(UM,a3r),e(Me,n3r),e(Me,JM),e(JM,D7e),e(D7e,s3r),e(JM,l3r),e(JM,GJ),e(GJ,i3r),e(JM,d3r),e(Me,c3r),e(Me,YM),e(YM,G7e),e(G7e,f3r),e(YM,m3r),e(YM,OJ),e(OJ,g3r),e(YM,h3r),e(Me,p3r),e(Me,KM),e(KM,O7e),e(O7e,_3r),e(KM,u3r),e(KM,VJ),e(VJ,b3r),e(KM,v3r),e(Me,F3r),e(Me,ZM),e(ZM,V7e),e(V7e,T3r),e(ZM,M3r),e(ZM,XJ),e(XJ,E3r),e(ZM,C3r),e(kr,w3r),M(eE,kr,null),b(f,oze,u),b(f,hc,u),e(hc,oE),e(oE,X7e),M(tx,X7e,null),e(hc,A3r),e(hc,z7e),e(z7e,L3r),b(f,rze,u),b(f,tr,u),M(ax,tr,null),e(tr,y3r),e(tr,pc),e(pc,x3r),e(pc,zJ),e(zJ,$3r),e(pc,k3r),e(pc,QJ),e(QJ,S3r),e(pc,R3r),e(tr,P3r),e(tr,nx),e(nx,B3r),e(nx,Q7e),e(Q7e,I3r),e(nx,N3r),e(tr,q3r),e(tr,Bt),M(sx,Bt,null),e(Bt,j3r),e(Bt,W7e),e(W7e,D3r),e(Bt,G3r),e(Bt,_c),e(_c,O3r),e(_c,H7e),e(H7e,V3r),e(_c,X3r),e(_c,WJ),e(WJ,z3r),e(_c,Q3r),e(Bt,W3r),M(rE,Bt,null),e(tr,H3r),e(tr,Sr),M(lx,Sr,null),e(Sr,U3r),e(Sr,U7e),e(U7e,J3r),e(Sr,Y3r),e(Sr,cn),e(cn,K3r),e(cn,J7e),e(J7e,Z3r),e(cn,e5r),e(cn,Y7e),e(Y7e,o5r),e(cn,r5r),e(cn,K7e),e(K7e,t5r),e(cn,a5r),e(Sr,n5r),e(Sr,ar),e(ar,tE),e(tE,Z7e),e(Z7e,s5r),e(tE,l5r),e(tE,HJ),e(HJ,i5r),e(tE,d5r),e(ar,c5r),e(ar,aE),e(aE,e9e),e(e9e,f5r),e(aE,m5r),e(aE,UJ),e(UJ,g5r),e(aE,h5r),e(ar,p5r),e(ar,nE),e(nE,o9e),e(o9e,_5r),e(nE,u5r),e(nE,JJ),e(JJ,b5r),e(nE,v5r),e(ar,F5r),e(ar,sE),e(sE,r9e),e(r9e,T5r),e(sE,M5r),e(sE,YJ),e(YJ,E5r),e(sE,C5r),e(ar,w5r),e(ar,lE),e(lE,t9e),e(t9e,A5r),e(lE,L5r),e(lE,KJ),e(KJ,y5r),e(lE,x5r),e(ar,$5r),e(ar,iE),e(iE,a9e),e(a9e,k5r),e(iE,S5r),e(iE,ZJ),e(ZJ,R5r),e(iE,P5r),e(Sr,B5r),M(dE,Sr,null),b(f,tze,u),b(f,uc,u),e(uc,cE),e(cE,n9e),M(ix,n9e,null),e(uc,I5r),e(uc,s9e),e(s9e,N5r),b(f,aze,u),b(f,nr,u),M(dx,nr,null),e(nr,q5r),e(nr,bc),e(bc,j5r),e(bc,eY),e(eY,D5r),e(bc,G5r),e(bc,oY),e(oY,O5r),e(bc,V5r),e(nr,X5r),e(nr,cx),e(cx,z5r),e(cx,l9e),e(l9e,Q5r),e(cx,W5r),e(nr,H5r),e(nr,It),M(fx,It,null),e(It,U5r),e(It,i9e),e(i9e,J5r),e(It,Y5r),e(It,vc),e(vc,K5r),e(vc,d9e),e(d9e,Z5r),e(vc,e0r),e(vc,rY),e(rY,o0r),e(vc,r0r),e(It,t0r),M(fE,It,null),e(nr,a0r),e(nr,Rr),M(mx,Rr,null),e(Rr,n0r),e(Rr,c9e),e(c9e,s0r),e(Rr,l0r),e(Rr,fn),e(fn,i0r),e(fn,f9e),e(f9e,d0r),e(fn,c0r),e(fn,m9e),e(m9e,f0r),e(fn,m0r),e(fn,g9e),e(g9e,g0r),e(fn,h0r),e(Rr,p0r),e(Rr,ie),e(ie,mE),e(mE,h9e),e(h9e,_0r),e(mE,u0r),e(mE,tY),e(tY,b0r),e(mE,v0r),e(ie,F0r),e(ie,gE),e(gE,p9e),e(p9e,T0r),e(gE,M0r),e(gE,aY),e(aY,E0r),e(gE,C0r),e(ie,w0r),e(ie,hE),e(hE,_9e),e(_9e,A0r),e(hE,L0r),e(hE,nY),e(nY,y0r),e(hE,x0r),e(ie,$0r),e(ie,pE),e(pE,u9e),e(u9e,k0r),e(pE,S0r),e(pE,sY),e(sY,R0r),e(pE,P0r),e(ie,B0r),e(ie,_E),e(_E,b9e),e(b9e,I0r),e(_E,N0r),e(_E,lY),e(lY,q0r),e(_E,j0r),e(ie,D0r),e(ie,uE),e(uE,v9e),e(v9e,G0r),e(uE,O0r),e(uE,iY),e(iY,V0r),e(uE,X0r),e(ie,z0r),e(ie,bE),e(bE,F9e),e(F9e,Q0r),e(bE,W0r),e(bE,dY),e(dY,H0r),e(bE,U0r),e(ie,J0r),e(ie,vE),e(vE,T9e),e(T9e,Y0r),e(vE,K0r),e(vE,cY),e(cY,Z0r),e(vE,ewr),e(ie,owr),e(ie,FE),e(FE,M9e),e(M9e,rwr),e(FE,twr),e(FE,fY),e(fY,awr),e(FE,nwr),e(ie,swr),e(ie,TE),e(TE,E9e),e(E9e,lwr),e(TE,iwr),e(TE,mY),e(mY,dwr),e(TE,cwr),e(ie,fwr),e(ie,ME),e(ME,C9e),e(C9e,mwr),e(ME,gwr),e(ME,gY),e(gY,hwr),e(ME,pwr),e(ie,_wr),e(ie,EE),e(EE,w9e),e(w9e,uwr),e(EE,bwr),e(EE,hY),e(hY,vwr),e(EE,Fwr),e(ie,Twr),e(ie,CE),e(CE,A9e),e(A9e,Mwr),e(CE,Ewr),e(CE,pY),e(pY,Cwr),e(CE,wwr),e(ie,Awr),e(ie,wE),e(wE,L9e),e(L9e,Lwr),e(wE,ywr),e(wE,_Y),e(_Y,xwr),e(wE,$wr),e(ie,kwr),e(ie,AE),e(AE,y9e),e(y9e,Swr),e(AE,Rwr),e(AE,uY),e(uY,Pwr),e(AE,Bwr),e(ie,Iwr),e(ie,LE),e(LE,x9e),e(x9e,Nwr),e(LE,qwr),e(LE,bY),e(bY,jwr),e(LE,Dwr),e(ie,Gwr),e(ie,yE),e(yE,$9e),e($9e,Owr),e(yE,Vwr),e(yE,vY),e(vY,Xwr),e(yE,zwr),e(ie,Qwr),e(ie,xE),e(xE,k9e),e(k9e,Wwr),e(xE,Hwr),e(xE,FY),e(FY,Uwr),e(xE,Jwr),e(ie,Ywr),e(ie,$E),e($E,S9e),e(S9e,Kwr),e($E,Zwr),e($E,TY),e(TY,eAr),e($E,oAr),e(ie,rAr),e(ie,kE),e(kE,R9e),e(R9e,tAr),e(kE,aAr),e(kE,MY),e(MY,nAr),e(kE,sAr),e(Rr,lAr),M(SE,Rr,null),b(f,nze,u),b(f,Fc,u),e(Fc,RE),e(RE,P9e),M(gx,P9e,null),e(Fc,iAr),e(Fc,B9e),e(B9e,dAr),b(f,sze,u),b(f,sr,u),M(hx,sr,null),e(sr,cAr),e(sr,Tc),e(Tc,fAr),e(Tc,EY),e(EY,mAr),e(Tc,gAr),e(Tc,CY),e(CY,hAr),e(Tc,pAr),e(sr,_Ar),e(sr,px),e(px,uAr),e(px,I9e),e(I9e,bAr),e(px,vAr),e(sr,FAr),e(sr,Nt),M(_x,Nt,null),e(Nt,TAr),e(Nt,N9e),e(N9e,MAr),e(Nt,EAr),e(Nt,Mc),e(Mc,CAr),e(Mc,q9e),e(q9e,wAr),e(Mc,AAr),e(Mc,wY),e(wY,LAr),e(Mc,yAr),e(Nt,xAr),M(PE,Nt,null),e(sr,$Ar),e(sr,Pr),M(ux,Pr,null),e(Pr,kAr),e(Pr,j9e),e(j9e,SAr),e(Pr,RAr),e(Pr,mn),e(mn,PAr),e(mn,D9e),e(D9e,BAr),e(mn,IAr),e(mn,G9e),e(G9e,NAr),e(mn,qAr),e(mn,O9e),e(O9e,jAr),e(mn,DAr),e(Pr,GAr),e(Pr,ye),e(ye,BE),e(BE,V9e),e(V9e,OAr),e(BE,VAr),e(BE,AY),e(AY,XAr),e(BE,zAr),e(ye,QAr),e(ye,IE),e(IE,X9e),e(X9e,WAr),e(IE,HAr),e(IE,LY),e(LY,UAr),e(IE,JAr),e(ye,YAr),e(ye,NE),e(NE,z9e),e(z9e,KAr),e(NE,ZAr),e(NE,yY),e(yY,e6r),e(NE,o6r),e(ye,r6r),e(ye,qE),e(qE,Q9e),e(Q9e,t6r),e(qE,a6r),e(qE,xY),e(xY,n6r),e(qE,s6r),e(ye,l6r),e(ye,jE),e(jE,W9e),e(W9e,i6r),e(jE,d6r),e(jE,$Y),e($Y,c6r),e(jE,f6r),e(ye,m6r),e(ye,DE),e(DE,H9e),e(H9e,g6r),e(DE,h6r),e(DE,kY),e(kY,p6r),e(DE,_6r),e(ye,u6r),e(ye,GE),e(GE,U9e),e(U9e,b6r),e(GE,v6r),e(GE,SY),e(SY,F6r),e(GE,T6r),e(ye,M6r),e(ye,OE),e(OE,J9e),e(J9e,E6r),e(OE,C6r),e(OE,RY),e(RY,w6r),e(OE,A6r),e(ye,L6r),e(ye,VE),e(VE,Y9e),e(Y9e,y6r),e(VE,x6r),e(VE,PY),e(PY,$6r),e(VE,k6r),e(ye,S6r),e(ye,XE),e(XE,K9e),e(K9e,R6r),e(XE,P6r),e(XE,BY),e(BY,B6r),e(XE,I6r),e(Pr,N6r),M(zE,Pr,null),b(f,lze,u),b(f,Ec,u),e(Ec,QE),e(QE,Z9e),M(bx,Z9e,null),e(Ec,q6r),e(Ec,eMe),e(eMe,j6r),b(f,ize,u),b(f,lr,u),M(vx,lr,null),e(lr,D6r),e(lr,Cc),e(Cc,G6r),e(Cc,IY),e(IY,O6r),e(Cc,V6r),e(Cc,NY),e(NY,X6r),e(Cc,z6r),e(lr,Q6r),e(lr,Fx),e(Fx,W6r),e(Fx,oMe),e(oMe,H6r),e(Fx,U6r),e(lr,J6r),e(lr,qt),M(Tx,qt,null),e(qt,Y6r),e(qt,rMe),e(rMe,K6r),e(qt,Z6r),e(qt,wc),e(wc,eLr),e(wc,tMe),e(tMe,oLr),e(wc,rLr),e(wc,qY),e(qY,tLr),e(wc,aLr),e(qt,nLr),M(WE,qt,null),e(lr,sLr),e(lr,Br),M(Mx,Br,null),e(Br,lLr),e(Br,aMe),e(aMe,iLr),e(Br,dLr),e(Br,gn),e(gn,cLr),e(gn,nMe),e(nMe,fLr),e(gn,mLr),e(gn,sMe),e(sMe,gLr),e(gn,hLr),e(gn,lMe),e(lMe,pLr),e(gn,_Lr),e(Br,uLr),e(Br,te),e(te,HE),e(HE,iMe),e(iMe,bLr),e(HE,vLr),e(HE,jY),e(jY,FLr),e(HE,TLr),e(te,MLr),e(te,UE),e(UE,dMe),e(dMe,ELr),e(UE,CLr),e(UE,DY),e(DY,wLr),e(UE,ALr),e(te,LLr),e(te,JE),e(JE,cMe),e(cMe,yLr),e(JE,xLr),e(JE,GY),e(GY,$Lr),e(JE,kLr),e(te,SLr),e(te,YE),e(YE,fMe),e(fMe,RLr),e(YE,PLr),e(YE,OY),e(OY,BLr),e(YE,ILr),e(te,NLr),e(te,KE),e(KE,mMe),e(mMe,qLr),e(KE,jLr),e(KE,VY),e(VY,DLr),e(KE,GLr),e(te,OLr),e(te,ZE),e(ZE,gMe),e(gMe,VLr),e(ZE,XLr),e(ZE,XY),e(XY,zLr),e(ZE,QLr),e(te,WLr),e(te,eC),e(eC,hMe),e(hMe,HLr),e(eC,ULr),e(eC,zY),e(zY,JLr),e(eC,YLr),e(te,KLr),e(te,oC),e(oC,pMe),e(pMe,ZLr),e(oC,eyr),e(oC,QY),e(QY,oyr),e(oC,ryr),e(te,tyr),e(te,rC),e(rC,_Me),e(_Me,ayr),e(rC,nyr),e(rC,WY),e(WY,syr),e(rC,lyr),e(te,iyr),e(te,tC),e(tC,uMe),e(uMe,dyr),e(tC,cyr),e(tC,HY),e(HY,fyr),e(tC,myr),e(te,gyr),e(te,aC),e(aC,bMe),e(bMe,hyr),e(aC,pyr),e(aC,UY),e(UY,_yr),e(aC,uyr),e(te,byr),e(te,nC),e(nC,vMe),e(vMe,vyr),e(nC,Fyr),e(nC,JY),e(JY,Tyr),e(nC,Myr),e(te,Eyr),e(te,sC),e(sC,FMe),e(FMe,Cyr),e(sC,wyr),e(sC,YY),e(YY,Ayr),e(sC,Lyr),e(te,yyr),e(te,lC),e(lC,TMe),e(TMe,xyr),e(lC,$yr),e(lC,KY),e(KY,kyr),e(lC,Syr),e(te,Ryr),e(te,iC),e(iC,MMe),e(MMe,Pyr),e(iC,Byr),e(iC,ZY),e(ZY,Iyr),e(iC,Nyr),e(te,qyr),e(te,dC),e(dC,EMe),e(EMe,jyr),e(dC,Dyr),e(dC,eK),e(eK,Gyr),e(dC,Oyr),e(te,Vyr),e(te,cC),e(cC,CMe),e(CMe,Xyr),e(cC,zyr),e(cC,oK),e(oK,Qyr),e(cC,Wyr),e(te,Hyr),e(te,fC),e(fC,wMe),e(wMe,Uyr),e(fC,Jyr),e(fC,rK),e(rK,Yyr),e(fC,Kyr),e(te,Zyr),e(te,mC),e(mC,AMe),e(AMe,e8r),e(mC,o8r),e(mC,tK),e(tK,r8r),e(mC,t8r),e(te,a8r),e(te,gC),e(gC,LMe),e(LMe,n8r),e(gC,s8r),e(gC,aK),e(aK,l8r),e(gC,i8r),e(te,d8r),e(te,hC),e(hC,yMe),e(yMe,c8r),e(hC,f8r),e(hC,nK),e(nK,m8r),e(hC,g8r),e(te,h8r),e(te,pC),e(pC,xMe),e(xMe,p8r),e(pC,_8r),e(pC,sK),e(sK,u8r),e(pC,b8r),e(te,v8r),e(te,_C),e(_C,$Me),e($Me,F8r),e(_C,T8r),e(_C,lK),e(lK,M8r),e(_C,E8r),e(te,C8r),e(te,uC),e(uC,kMe),e(kMe,w8r),e(uC,A8r),e(uC,iK),e(iK,L8r),e(uC,y8r),e(te,x8r),e(te,bC),e(bC,SMe),e(SMe,$8r),e(bC,k8r),e(bC,dK),e(dK,S8r),e(bC,R8r),e(te,P8r),e(te,vC),e(vC,RMe),e(RMe,B8r),e(vC,I8r),e(vC,cK),e(cK,N8r),e(vC,q8r),e(Br,j8r),M(FC,Br,null),b(f,dze,u),b(f,Ac,u),e(Ac,TC),e(TC,PMe),M(Ex,PMe,null),e(Ac,D8r),e(Ac,BMe),e(BMe,G8r),b(f,cze,u),b(f,ir,u),M(Cx,ir,null),e(ir,O8r),e(ir,Lc),e(Lc,V8r),e(Lc,fK),e(fK,X8r),e(Lc,z8r),e(Lc,mK),e(mK,Q8r),e(Lc,W8r),e(ir,H8r),e(ir,wx),e(wx,U8r),e(wx,IMe),e(IMe,J8r),e(wx,Y8r),e(ir,K8r),e(ir,jt),M(Ax,jt,null),e(jt,Z8r),e(jt,NMe),e(NMe,exr),e(jt,oxr),e(jt,yc),e(yc,rxr),e(yc,qMe),e(qMe,txr),e(yc,axr),e(yc,gK),e(gK,nxr),e(yc,sxr),e(jt,lxr),M(MC,jt,null),e(ir,ixr),e(ir,Ir),M(Lx,Ir,null),e(Ir,dxr),e(Ir,jMe),e(jMe,cxr),e(Ir,fxr),e(Ir,hn),e(hn,mxr),e(hn,DMe),e(DMe,gxr),e(hn,hxr),e(hn,GMe),e(GMe,pxr),e(hn,_xr),e(hn,OMe),e(OMe,uxr),e(hn,bxr),e(Ir,vxr),e(Ir,_e),e(_e,EC),e(EC,VMe),e(VMe,Fxr),e(EC,Txr),e(EC,hK),e(hK,Mxr),e(EC,Exr),e(_e,Cxr),e(_e,CC),e(CC,XMe),e(XMe,wxr),e(CC,Axr),e(CC,pK),e(pK,Lxr),e(CC,yxr),e(_e,xxr),e(_e,wC),e(wC,zMe),e(zMe,$xr),e(wC,kxr),e(wC,_K),e(_K,Sxr),e(wC,Rxr),e(_e,Pxr),e(_e,AC),e(AC,QMe),e(QMe,Bxr),e(AC,Ixr),e(AC,uK),e(uK,Nxr),e(AC,qxr),e(_e,jxr),e(_e,LC),e(LC,WMe),e(WMe,Dxr),e(LC,Gxr),e(LC,bK),e(bK,Oxr),e(LC,Vxr),e(_e,Xxr),e(_e,yC),e(yC,HMe),e(HMe,zxr),e(yC,Qxr),e(yC,vK),e(vK,Wxr),e(yC,Hxr),e(_e,Uxr),e(_e,xC),e(xC,UMe),e(UMe,Jxr),e(xC,Yxr),e(xC,FK),e(FK,Kxr),e(xC,Zxr),e(_e,e$r),e(_e,$C),e($C,JMe),e(JMe,o$r),e($C,r$r),e($C,TK),e(TK,t$r),e($C,a$r),e(_e,n$r),e(_e,kC),e(kC,YMe),e(YMe,s$r),e(kC,l$r),e(kC,MK),e(MK,i$r),e(kC,d$r),e(_e,c$r),e(_e,SC),e(SC,KMe),e(KMe,f$r),e(SC,m$r),e(SC,EK),e(EK,g$r),e(SC,h$r),e(_e,p$r),e(_e,RC),e(RC,ZMe),e(ZMe,_$r),e(RC,u$r),e(RC,CK),e(CK,b$r),e(RC,v$r),e(_e,F$r),e(_e,PC),e(PC,eEe),e(eEe,T$r),e(PC,M$r),e(PC,wK),e(wK,E$r),e(PC,C$r),e(_e,w$r),e(_e,BC),e(BC,oEe),e(oEe,A$r),e(BC,L$r),e(BC,AK),e(AK,y$r),e(BC,x$r),e(_e,$$r),e(_e,IC),e(IC,rEe),e(rEe,k$r),e(IC,S$r),e(IC,LK),e(LK,R$r),e(IC,P$r),e(_e,B$r),e(_e,NC),e(NC,tEe),e(tEe,I$r),e(NC,N$r),e(NC,yK),e(yK,q$r),e(NC,j$r),e(_e,D$r),e(_e,qC),e(qC,aEe),e(aEe,G$r),e(qC,O$r),e(qC,xK),e(xK,V$r),e(qC,X$r),e(_e,z$r),e(_e,jC),e(jC,nEe),e(nEe,Q$r),e(jC,W$r),e(jC,$K),e($K,H$r),e(jC,U$r),e(Ir,J$r),M(DC,Ir,null),b(f,fze,u),b(f,xc,u),e(xc,GC),e(GC,sEe),M(yx,sEe,null),e(xc,Y$r),e(xc,lEe),e(lEe,K$r),b(f,mze,u),b(f,dr,u),M(xx,dr,null),e(dr,Z$r),e(dr,$c),e($c,ekr),e($c,kK),e(kK,okr),e($c,rkr),e($c,SK),e(SK,tkr),e($c,akr),e(dr,nkr),e(dr,$x),e($x,skr),e($x,iEe),e(iEe,lkr),e($x,ikr),e(dr,dkr),e(dr,Dt),M(kx,Dt,null),e(Dt,ckr),e(Dt,dEe),e(dEe,fkr),e(Dt,mkr),e(Dt,kc),e(kc,gkr),e(kc,cEe),e(cEe,hkr),e(kc,pkr),e(kc,RK),e(RK,_kr),e(kc,ukr),e(Dt,bkr),M(OC,Dt,null),e(dr,vkr),e(dr,Nr),M(Sx,Nr,null),e(Nr,Fkr),e(Nr,fEe),e(fEe,Tkr),e(Nr,Mkr),e(Nr,pn),e(pn,Ekr),e(pn,mEe),e(mEe,Ckr),e(pn,wkr),e(pn,gEe),e(gEe,Akr),e(pn,Lkr),e(pn,hEe),e(hEe,ykr),e(pn,xkr),e(Nr,$kr),e(Nr,Rx),e(Rx,VC),e(VC,pEe),e(pEe,kkr),e(VC,Skr),e(VC,PK),e(PK,Rkr),e(VC,Pkr),e(Rx,Bkr),e(Rx,XC),e(XC,_Ee),e(_Ee,Ikr),e(XC,Nkr),e(XC,BK),e(BK,qkr),e(XC,jkr),e(Nr,Dkr),M(zC,Nr,null),b(f,gze,u),b(f,Sc,u),e(Sc,QC),e(QC,uEe),M(Px,uEe,null),e(Sc,Gkr),e(Sc,bEe),e(bEe,Okr),b(f,hze,u),b(f,cr,u),M(Bx,cr,null),e(cr,Vkr),e(cr,Rc),e(Rc,Xkr),e(Rc,IK),e(IK,zkr),e(Rc,Qkr),e(Rc,NK),e(NK,Wkr),e(Rc,Hkr),e(cr,Ukr),e(cr,Ix),e(Ix,Jkr),e(Ix,vEe),e(vEe,Ykr),e(Ix,Kkr),e(cr,Zkr),e(cr,Gt),M(Nx,Gt,null),e(Gt,eSr),e(Gt,FEe),e(FEe,oSr),e(Gt,rSr),e(Gt,Pc),e(Pc,tSr),e(Pc,TEe),e(TEe,aSr),e(Pc,nSr),e(Pc,qK),e(qK,sSr),e(Pc,lSr),e(Gt,iSr),M(WC,Gt,null),e(cr,dSr),e(cr,qr),M(qx,qr,null),e(qr,cSr),e(qr,MEe),e(MEe,fSr),e(qr,mSr),e(qr,_n),e(_n,gSr),e(_n,EEe),e(EEe,hSr),e(_n,pSr),e(_n,CEe),e(CEe,_Sr),e(_n,uSr),e(_n,wEe),e(wEe,bSr),e(_n,vSr),e(qr,FSr),e(qr,AEe),e(AEe,HC),e(HC,LEe),e(LEe,TSr),e(HC,MSr),e(HC,jK),e(jK,ESr),e(HC,CSr),e(qr,wSr),M(UC,qr,null),b(f,pze,u),b(f,Bc,u),e(Bc,JC),e(JC,yEe),M(jx,yEe,null),e(Bc,ASr),e(Bc,xEe),e(xEe,LSr),b(f,_ze,u),b(f,fr,u),M(Dx,fr,null),e(fr,ySr),e(fr,Ic),e(Ic,xSr),e(Ic,DK),e(DK,$Sr),e(Ic,kSr),e(Ic,GK),e(GK,SSr),e(Ic,RSr),e(fr,PSr),e(fr,Gx),e(Gx,BSr),e(Gx,$Ee),e($Ee,ISr),e(Gx,NSr),e(fr,qSr),e(fr,Ot),M(Ox,Ot,null),e(Ot,jSr),e(Ot,kEe),e(kEe,DSr),e(Ot,GSr),e(Ot,Nc),e(Nc,OSr),e(Nc,SEe),e(SEe,VSr),e(Nc,XSr),e(Nc,OK),e(OK,zSr),e(Nc,QSr),e(Ot,WSr),M(YC,Ot,null),e(fr,HSr),e(fr,jr),M(Vx,jr,null),e(jr,USr),e(jr,REe),e(REe,JSr),e(jr,YSr),e(jr,un),e(un,KSr),e(un,PEe),e(PEe,ZSr),e(un,eRr),e(un,BEe),e(BEe,oRr),e(un,rRr),e(un,IEe),e(IEe,tRr),e(un,aRr),e(jr,nRr),e(jr,de),e(de,KC),e(KC,NEe),e(NEe,sRr),e(KC,lRr),e(KC,VK),e(VK,iRr),e(KC,dRr),e(de,cRr),e(de,ZC),e(ZC,qEe),e(qEe,fRr),e(ZC,mRr),e(ZC,XK),e(XK,gRr),e(ZC,hRr),e(de,pRr),e(de,e3),e(e3,jEe),e(jEe,_Rr),e(e3,uRr),e(e3,zK),e(zK,bRr),e(e3,vRr),e(de,FRr),e(de,o3),e(o3,DEe),e(DEe,TRr),e(o3,MRr),e(o3,QK),e(QK,ERr),e(o3,CRr),e(de,wRr),e(de,r3),e(r3,GEe),e(GEe,ARr),e(r3,LRr),e(r3,WK),e(WK,yRr),e(r3,xRr),e(de,$Rr),e(de,t3),e(t3,OEe),e(OEe,kRr),e(t3,SRr),e(t3,HK),e(HK,RRr),e(t3,PRr),e(de,BRr),e(de,a3),e(a3,VEe),e(VEe,IRr),e(a3,NRr),e(a3,UK),e(UK,qRr),e(a3,jRr),e(de,DRr),e(de,n3),e(n3,XEe),e(XEe,GRr),e(n3,ORr),e(n3,JK),e(JK,VRr),e(n3,XRr),e(de,zRr),e(de,s3),e(s3,zEe),e(zEe,QRr),e(s3,WRr),e(s3,YK),e(YK,HRr),e(s3,URr),e(de,JRr),e(de,l3),e(l3,QEe),e(QEe,YRr),e(l3,KRr),e(l3,KK),e(KK,ZRr),e(l3,ePr),e(de,oPr),e(de,i3),e(i3,WEe),e(WEe,rPr),e(i3,tPr),e(i3,ZK),e(ZK,aPr),e(i3,nPr),e(de,sPr),e(de,d3),e(d3,HEe),e(HEe,lPr),e(d3,iPr),e(d3,eZ),e(eZ,dPr),e(d3,cPr),e(de,fPr),e(de,c3),e(c3,UEe),e(UEe,mPr),e(c3,gPr),e(c3,oZ),e(oZ,hPr),e(c3,pPr),e(de,_Pr),e(de,f3),e(f3,JEe),e(JEe,uPr),e(f3,bPr),e(f3,rZ),e(rZ,vPr),e(f3,FPr),e(de,TPr),e(de,m3),e(m3,YEe),e(YEe,MPr),e(m3,EPr),e(m3,tZ),e(tZ,CPr),e(m3,wPr),e(de,APr),e(de,g3),e(g3,KEe),e(KEe,LPr),e(g3,yPr),e(g3,aZ),e(aZ,xPr),e(g3,$Pr),e(de,kPr),e(de,h3),e(h3,ZEe),e(ZEe,SPr),e(h3,RPr),e(h3,nZ),e(nZ,PPr),e(h3,BPr),e(de,IPr),e(de,p3),e(p3,eCe),e(eCe,NPr),e(p3,qPr),e(p3,sZ),e(sZ,jPr),e(p3,DPr),e(de,GPr),e(de,_3),e(_3,oCe),e(oCe,OPr),e(_3,VPr),e(_3,lZ),e(lZ,XPr),e(_3,zPr),e(de,QPr),e(de,u3),e(u3,rCe),e(rCe,WPr),e(u3,HPr),e(u3,iZ),e(iZ,UPr),e(u3,JPr),e(jr,YPr),M(b3,jr,null),b(f,uze,u),b(f,qc,u),e(qc,v3),e(v3,tCe),M(Xx,tCe,null),e(qc,KPr),e(qc,aCe),e(aCe,ZPr),b(f,bze,u),b(f,mr,u),M(zx,mr,null),e(mr,eBr),e(mr,jc),e(jc,oBr),e(jc,dZ),e(dZ,rBr),e(jc,tBr),e(jc,cZ),e(cZ,aBr),e(jc,nBr),e(mr,sBr),e(mr,Qx),e(Qx,lBr),e(Qx,nCe),e(nCe,iBr),e(Qx,dBr),e(mr,cBr),e(mr,Vt),M(Wx,Vt,null),e(Vt,fBr),e(Vt,sCe),e(sCe,mBr),e(Vt,gBr),e(Vt,Dc),e(Dc,hBr),e(Dc,lCe),e(lCe,pBr),e(Dc,_Br),e(Dc,fZ),e(fZ,uBr),e(Dc,bBr),e(Vt,vBr),M(F3,Vt,null),e(mr,FBr),e(mr,Dr),M(Hx,Dr,null),e(Dr,TBr),e(Dr,iCe),e(iCe,MBr),e(Dr,EBr),e(Dr,bn),e(bn,CBr),e(bn,dCe),e(dCe,wBr),e(bn,ABr),e(bn,cCe),e(cCe,LBr),e(bn,yBr),e(bn,fCe),e(fCe,xBr),e(bn,$Br),e(Dr,kBr),e(Dr,ce),e(ce,T3),e(T3,mCe),e(mCe,SBr),e(T3,RBr),e(T3,mZ),e(mZ,PBr),e(T3,BBr),e(ce,IBr),e(ce,M3),e(M3,gCe),e(gCe,NBr),e(M3,qBr),e(M3,gZ),e(gZ,jBr),e(M3,DBr),e(ce,GBr),e(ce,E3),e(E3,hCe),e(hCe,OBr),e(E3,VBr),e(E3,hZ),e(hZ,XBr),e(E3,zBr),e(ce,QBr),e(ce,C3),e(C3,pCe),e(pCe,WBr),e(C3,HBr),e(C3,pZ),e(pZ,UBr),e(C3,JBr),e(ce,YBr),e(ce,w3),e(w3,_Ce),e(_Ce,KBr),e(w3,ZBr),e(w3,_Z),e(_Z,eIr),e(w3,oIr),e(ce,rIr),e(ce,A3),e(A3,uCe),e(uCe,tIr),e(A3,aIr),e(A3,uZ),e(uZ,nIr),e(A3,sIr),e(ce,lIr),e(ce,L3),e(L3,bCe),e(bCe,iIr),e(L3,dIr),e(L3,bZ),e(bZ,cIr),e(L3,fIr),e(ce,mIr),e(ce,y3),e(y3,vCe),e(vCe,gIr),e(y3,hIr),e(y3,vZ),e(vZ,pIr),e(y3,_Ir),e(ce,uIr),e(ce,x3),e(x3,FCe),e(FCe,bIr),e(x3,vIr),e(x3,FZ),e(FZ,FIr),e(x3,TIr),e(ce,MIr),e(ce,$3),e($3,TCe),e(TCe,EIr),e($3,CIr),e($3,TZ),e(TZ,wIr),e($3,AIr),e(ce,LIr),e(ce,k3),e(k3,MCe),e(MCe,yIr),e(k3,xIr),e(k3,MZ),e(MZ,$Ir),e(k3,kIr),e(ce,SIr),e(ce,S3),e(S3,ECe),e(ECe,RIr),e(S3,PIr),e(S3,EZ),e(EZ,BIr),e(S3,IIr),e(ce,NIr),e(ce,R3),e(R3,CCe),e(CCe,qIr),e(R3,jIr),e(R3,CZ),e(CZ,DIr),e(R3,GIr),e(ce,OIr),e(ce,P3),e(P3,wCe),e(wCe,VIr),e(P3,XIr),e(P3,wZ),e(wZ,zIr),e(P3,QIr),e(ce,WIr),e(ce,B3),e(B3,ACe),e(ACe,HIr),e(B3,UIr),e(B3,AZ),e(AZ,JIr),e(B3,YIr),e(ce,KIr),e(ce,I3),e(I3,LCe),e(LCe,ZIr),e(I3,eNr),e(I3,LZ),e(LZ,oNr),e(I3,rNr),e(ce,tNr),e(ce,N3),e(N3,yCe),e(yCe,aNr),e(N3,nNr),e(N3,yZ),e(yZ,sNr),e(N3,lNr),e(ce,iNr),e(ce,q3),e(q3,xCe),e(xCe,dNr),e(q3,cNr),e(q3,xZ),e(xZ,fNr),e(q3,mNr),e(ce,gNr),e(ce,j3),e(j3,$Ce),e($Ce,hNr),e(j3,pNr),e(j3,$Z),e($Z,_Nr),e(j3,uNr),e(ce,bNr),e(ce,D3),e(D3,kCe),e(kCe,vNr),e(D3,FNr),e(D3,kZ),e(kZ,TNr),e(D3,MNr),e(Dr,ENr),M(G3,Dr,null),b(f,vze,u),b(f,Gc,u),e(Gc,O3),e(O3,SCe),M(Ux,SCe,null),e(Gc,CNr),e(Gc,RCe),e(RCe,wNr),b(f,Fze,u),b(f,gr,u),M(Jx,gr,null),e(gr,ANr),e(gr,Oc),e(Oc,LNr),e(Oc,SZ),e(SZ,yNr),e(Oc,xNr),e(Oc,RZ),e(RZ,$Nr),e(Oc,kNr),e(gr,SNr),e(gr,Yx),e(Yx,RNr),e(Yx,PCe),e(PCe,PNr),e(Yx,BNr),e(gr,INr),e(gr,Xt),M(Kx,Xt,null),e(Xt,NNr),e(Xt,BCe),e(BCe,qNr),e(Xt,jNr),e(Xt,Vc),e(Vc,DNr),e(Vc,ICe),e(ICe,GNr),e(Vc,ONr),e(Vc,PZ),e(PZ,VNr),e(Vc,XNr),e(Xt,zNr),M(V3,Xt,null),e(gr,QNr),e(gr,Gr),M(Zx,Gr,null),e(Gr,WNr),e(Gr,NCe),e(NCe,HNr),e(Gr,UNr),e(Gr,vn),e(vn,JNr),e(vn,qCe),e(qCe,YNr),e(vn,KNr),e(vn,jCe),e(jCe,ZNr),e(vn,eqr),e(vn,DCe),e(DCe,oqr),e(vn,rqr),e(Gr,tqr),e(Gr,GCe),e(GCe,X3),e(X3,OCe),e(OCe,aqr),e(X3,nqr),e(X3,BZ),e(BZ,sqr),e(X3,lqr),e(Gr,iqr),M(z3,Gr,null),b(f,Tze,u),b(f,Xc,u),e(Xc,Q3),e(Q3,VCe),M(e$,VCe,null),e(Xc,dqr),e(Xc,XCe),e(XCe,cqr),b(f,Mze,u),b(f,hr,u),M(o$,hr,null),e(hr,fqr),e(hr,zc),e(zc,mqr),e(zc,IZ),e(IZ,gqr),e(zc,hqr),e(zc,NZ),e(NZ,pqr),e(zc,_qr),e(hr,uqr),e(hr,r$),e(r$,bqr),e(r$,zCe),e(zCe,vqr),e(r$,Fqr),e(hr,Tqr),e(hr,zt),M(t$,zt,null),e(zt,Mqr),e(zt,QCe),e(QCe,Eqr),e(zt,Cqr),e(zt,Qc),e(Qc,wqr),e(Qc,WCe),e(WCe,Aqr),e(Qc,Lqr),e(Qc,qZ),e(qZ,yqr),e(Qc,xqr),e(zt,$qr),M(W3,zt,null),e(hr,kqr),e(hr,Or),M(a$,Or,null),e(Or,Sqr),e(Or,HCe),e(HCe,Rqr),e(Or,Pqr),e(Or,Fn),e(Fn,Bqr),e(Fn,UCe),e(UCe,Iqr),e(Fn,Nqr),e(Fn,JCe),e(JCe,qqr),e(Fn,jqr),e(Fn,YCe),e(YCe,Dqr),e(Fn,Gqr),e(Or,Oqr),e(Or,KCe),e(KCe,H3),e(H3,ZCe),e(ZCe,Vqr),e(H3,Xqr),e(H3,jZ),e(jZ,zqr),e(H3,Qqr),e(Or,Wqr),M(U3,Or,null),b(f,Eze,u),b(f,Wc,u),e(Wc,J3),e(J3,e3e),M(n$,e3e,null),e(Wc,Hqr),e(Wc,o3e),e(o3e,Uqr),b(f,Cze,u),b(f,pr,u),M(s$,pr,null),e(pr,Jqr),e(pr,Hc),e(Hc,Yqr),e(Hc,DZ),e(DZ,Kqr),e(Hc,Zqr),e(Hc,GZ),e(GZ,ejr),e(Hc,ojr),e(pr,rjr),e(pr,l$),e(l$,tjr),e(l$,r3e),e(r3e,ajr),e(l$,njr),e(pr,sjr),e(pr,Qt),M(i$,Qt,null),e(Qt,ljr),e(Qt,t3e),e(t3e,ijr),e(Qt,djr),e(Qt,Uc),e(Uc,cjr),e(Uc,a3e),e(a3e,fjr),e(Uc,mjr),e(Uc,OZ),e(OZ,gjr),e(Uc,hjr),e(Qt,pjr),M(Y3,Qt,null),e(pr,_jr),e(pr,Vr),M(d$,Vr,null),e(Vr,ujr),e(Vr,n3e),e(n3e,bjr),e(Vr,vjr),e(Vr,Tn),e(Tn,Fjr),e(Tn,s3e),e(s3e,Tjr),e(Tn,Mjr),e(Tn,l3e),e(l3e,Ejr),e(Tn,Cjr),e(Tn,i3e),e(i3e,wjr),e(Tn,Ajr),e(Vr,Ljr),e(Vr,oe),e(oe,K3),e(K3,d3e),e(d3e,yjr),e(K3,xjr),e(K3,VZ),e(VZ,$jr),e(K3,kjr),e(oe,Sjr),e(oe,Z3),e(Z3,c3e),e(c3e,Rjr),e(Z3,Pjr),e(Z3,XZ),e(XZ,Bjr),e(Z3,Ijr),e(oe,Njr),e(oe,e5),e(e5,f3e),e(f3e,qjr),e(e5,jjr),e(e5,zZ),e(zZ,Djr),e(e5,Gjr),e(oe,Ojr),e(oe,o5),e(o5,m3e),e(m3e,Vjr),e(o5,Xjr),e(o5,QZ),e(QZ,zjr),e(o5,Qjr),e(oe,Wjr),e(oe,r5),e(r5,g3e),e(g3e,Hjr),e(r5,Ujr),e(r5,WZ),e(WZ,Jjr),e(r5,Yjr),e(oe,Kjr),e(oe,t5),e(t5,h3e),e(h3e,Zjr),e(t5,eDr),e(t5,HZ),e(HZ,oDr),e(t5,rDr),e(oe,tDr),e(oe,a5),e(a5,p3e),e(p3e,aDr),e(a5,nDr),e(a5,UZ),e(UZ,sDr),e(a5,lDr),e(oe,iDr),e(oe,n5),e(n5,_3e),e(_3e,dDr),e(n5,cDr),e(n5,JZ),e(JZ,fDr),e(n5,mDr),e(oe,gDr),e(oe,s5),e(s5,u3e),e(u3e,hDr),e(s5,pDr),e(s5,YZ),e(YZ,_Dr),e(s5,uDr),e(oe,bDr),e(oe,l5),e(l5,b3e),e(b3e,vDr),e(l5,FDr),e(l5,KZ),e(KZ,TDr),e(l5,MDr),e(oe,EDr),e(oe,i5),e(i5,v3e),e(v3e,CDr),e(i5,wDr),e(i5,ZZ),e(ZZ,ADr),e(i5,LDr),e(oe,yDr),e(oe,d5),e(d5,F3e),e(F3e,xDr),e(d5,$Dr),e(d5,eee),e(eee,kDr),e(d5,SDr),e(oe,RDr),e(oe,c5),e(c5,T3e),e(T3e,PDr),e(c5,BDr),e(c5,oee),e(oee,IDr),e(c5,NDr),e(oe,qDr),e(oe,f5),e(f5,M3e),e(M3e,jDr),e(f5,DDr),e(f5,ree),e(ree,GDr),e(f5,ODr),e(oe,VDr),e(oe,m5),e(m5,E3e),e(E3e,XDr),e(m5,zDr),e(m5,tee),e(tee,QDr),e(m5,WDr),e(oe,HDr),e(oe,g5),e(g5,C3e),e(C3e,UDr),e(g5,JDr),e(g5,aee),e(aee,YDr),e(g5,KDr),e(oe,ZDr),e(oe,h5),e(h5,w3e),e(w3e,eGr),e(h5,oGr),e(h5,nee),e(nee,rGr),e(h5,tGr),e(oe,aGr),e(oe,p5),e(p5,A3e),e(A3e,nGr),e(p5,sGr),e(p5,see),e(see,lGr),e(p5,iGr),e(oe,dGr),e(oe,_5),e(_5,L3e),e(L3e,cGr),e(_5,fGr),e(_5,lee),e(lee,mGr),e(_5,gGr),e(oe,hGr),e(oe,u5),e(u5,y3e),e(y3e,pGr),e(u5,_Gr),e(u5,iee),e(iee,uGr),e(u5,bGr),e(oe,vGr),e(oe,b5),e(b5,x3e),e(x3e,FGr),e(b5,TGr),e(b5,dee),e(dee,MGr),e(b5,EGr),e(oe,CGr),e(oe,v5),e(v5,$3e),e($3e,wGr),e(v5,AGr),e(v5,cee),e(cee,LGr),e(v5,yGr),e(oe,xGr),e(oe,F5),e(F5,k3e),e(k3e,$Gr),e(F5,kGr),e(F5,fee),e(fee,SGr),e(F5,RGr),e(oe,PGr),e(oe,T5),e(T5,S3e),e(S3e,BGr),e(T5,IGr),e(T5,mee),e(mee,NGr),e(T5,qGr),e(oe,jGr),e(oe,M5),e(M5,R3e),e(R3e,DGr),e(M5,GGr),e(M5,gee),e(gee,OGr),e(M5,VGr),e(oe,XGr),e(oe,E5),e(E5,P3e),e(P3e,zGr),e(E5,QGr),e(E5,hee),e(hee,WGr),e(E5,HGr),e(oe,UGr),e(oe,C5),e(C5,B3e),e(B3e,JGr),e(C5,YGr),e(C5,pee),e(pee,KGr),e(C5,ZGr),e(Vr,eOr),M(w5,Vr,null),b(f,wze,u),b(f,Jc,u),e(Jc,A5),e(A5,I3e),M(c$,I3e,null),e(Jc,oOr),e(Jc,N3e),e(N3e,rOr),b(f,Aze,u),b(f,_r,u),M(f$,_r,null),e(_r,tOr),e(_r,Yc),e(Yc,aOr),e(Yc,_ee),e(_ee,nOr),e(Yc,sOr),e(Yc,uee),e(uee,lOr),e(Yc,iOr),e(_r,dOr),e(_r,m$),e(m$,cOr),e(m$,q3e),e(q3e,fOr),e(m$,mOr),e(_r,gOr),e(_r,Wt),M(g$,Wt,null),e(Wt,hOr),e(Wt,j3e),e(j3e,pOr),e(Wt,_Or),e(Wt,Kc),e(Kc,uOr),e(Kc,D3e),e(D3e,bOr),e(Kc,vOr),e(Kc,bee),e(bee,FOr),e(Kc,TOr),e(Wt,MOr),M(L5,Wt,null),e(_r,EOr),e(_r,Xr),M(h$,Xr,null),e(Xr,COr),e(Xr,G3e),e(G3e,wOr),e(Xr,AOr),e(Xr,Mn),e(Mn,LOr),e(Mn,O3e),e(O3e,yOr),e(Mn,xOr),e(Mn,V3e),e(V3e,$Or),e(Mn,kOr),e(Mn,X3e),e(X3e,SOr),e(Mn,ROr),e(Xr,POr),e(Xr,xe),e(xe,y5),e(y5,z3e),e(z3e,BOr),e(y5,IOr),e(y5,vee),e(vee,NOr),e(y5,qOr),e(xe,jOr),e(xe,x5),e(x5,Q3e),e(Q3e,DOr),e(x5,GOr),e(x5,Fee),e(Fee,OOr),e(x5,VOr),e(xe,XOr),e(xe,$5),e($5,W3e),e(W3e,zOr),e($5,QOr),e($5,Tee),e(Tee,WOr),e($5,HOr),e(xe,UOr),e(xe,k5),e(k5,H3e),e(H3e,JOr),e(k5,YOr),e(k5,Mee),e(Mee,KOr),e(k5,ZOr),e(xe,eVr),e(xe,S5),e(S5,U3e),e(U3e,oVr),e(S5,rVr),e(S5,Eee),e(Eee,tVr),e(S5,aVr),e(xe,nVr),e(xe,R5),e(R5,J3e),e(J3e,sVr),e(R5,lVr),e(R5,Cee),e(Cee,iVr),e(R5,dVr),e(xe,cVr),e(xe,P5),e(P5,Y3e),e(Y3e,fVr),e(P5,mVr),e(P5,wee),e(wee,gVr),e(P5,hVr),e(xe,pVr),e(xe,B5),e(B5,K3e),e(K3e,_Vr),e(B5,uVr),e(B5,Aee),e(Aee,bVr),e(B5,vVr),e(xe,FVr),e(xe,I5),e(I5,Z3e),e(Z3e,TVr),e(I5,MVr),e(I5,Lee),e(Lee,EVr),e(I5,CVr),e(xe,wVr),e(xe,N5),e(N5,e5e),e(e5e,AVr),e(N5,LVr),e(N5,yee),e(yee,yVr),e(N5,xVr),e(Xr,$Vr),M(q5,Xr,null),b(f,Lze,u),b(f,Zc,u),e(Zc,j5),e(j5,o5e),M(p$,o5e,null),e(Zc,kVr),e(Zc,r5e),e(r5e,SVr),b(f,yze,u),b(f,ur,u),M(_$,ur,null),e(ur,RVr),e(ur,ef),e(ef,PVr),e(ef,xee),e(xee,BVr),e(ef,IVr),e(ef,$ee),e($ee,NVr),e(ef,qVr),e(ur,jVr),e(ur,u$),e(u$,DVr),e(u$,t5e),e(t5e,GVr),e(u$,OVr),e(ur,VVr),e(ur,Ht),M(b$,Ht,null),e(Ht,XVr),e(Ht,a5e),e(a5e,zVr),e(Ht,QVr),e(Ht,of),e(of,WVr),e(of,n5e),e(n5e,HVr),e(of,UVr),e(of,kee),e(kee,JVr),e(of,YVr),e(Ht,KVr),M(D5,Ht,null),e(ur,ZVr),e(ur,zr),M(v$,zr,null),e(zr,eXr),e(zr,s5e),e(s5e,oXr),e(zr,rXr),e(zr,En),e(En,tXr),e(En,l5e),e(l5e,aXr),e(En,nXr),e(En,i5e),e(i5e,sXr),e(En,lXr),e(En,d5e),e(d5e,iXr),e(En,dXr),e(zr,cXr),e(zr,Ee),e(Ee,G5),e(G5,c5e),e(c5e,fXr),e(G5,mXr),e(G5,See),e(See,gXr),e(G5,hXr),e(Ee,pXr),e(Ee,O5),e(O5,f5e),e(f5e,_Xr),e(O5,uXr),e(O5,Ree),e(Ree,bXr),e(O5,vXr),e(Ee,FXr),e(Ee,V5),e(V5,m5e),e(m5e,TXr),e(V5,MXr),e(V5,Pee),e(Pee,EXr),e(V5,CXr),e(Ee,wXr),e(Ee,X5),e(X5,g5e),e(g5e,AXr),e(X5,LXr),e(X5,Bee),e(Bee,yXr),e(X5,xXr),e(Ee,$Xr),e(Ee,z5),e(z5,h5e),e(h5e,kXr),e(z5,SXr),e(z5,Iee),e(Iee,RXr),e(z5,PXr),e(Ee,BXr),e(Ee,Q5),e(Q5,p5e),e(p5e,IXr),e(Q5,NXr),e(Q5,Nee),e(Nee,qXr),e(Q5,jXr),e(Ee,DXr),e(Ee,W5),e(W5,_5e),e(_5e,GXr),e(W5,OXr),e(W5,qee),e(qee,VXr),e(W5,XXr),e(Ee,zXr),e(Ee,H5),e(H5,u5e),e(u5e,QXr),e(H5,WXr),e(H5,jee),e(jee,HXr),e(H5,UXr),e(Ee,JXr),e(Ee,U5),e(U5,b5e),e(b5e,YXr),e(U5,KXr),e(U5,Dee),e(Dee,ZXr),e(U5,ezr),e(Ee,ozr),e(Ee,J5),e(J5,v5e),e(v5e,rzr),e(J5,tzr),e(J5,Gee),e(Gee,azr),e(J5,nzr),e(Ee,szr),e(Ee,Y5),e(Y5,F5e),e(F5e,lzr),e(Y5,izr),e(Y5,Oee),e(Oee,dzr),e(Y5,czr),e(Ee,fzr),e(Ee,K5),e(K5,T5e),e(T5e,mzr),e(K5,gzr),e(K5,Vee),e(Vee,hzr),e(K5,pzr),e(Ee,_zr),e(Ee,Z5),e(Z5,M5e),e(M5e,uzr),e(Z5,bzr),e(Z5,Xee),e(Xee,vzr),e(Z5,Fzr),e(zr,Tzr),M(e0,zr,null),b(f,xze,u),b(f,rf,u),e(rf,o0),e(o0,E5e),M(F$,E5e,null),e(rf,Mzr),e(rf,C5e),e(C5e,Ezr),b(f,$ze,u),b(f,br,u),M(T$,br,null),e(br,Czr),e(br,tf),e(tf,wzr),e(tf,zee),e(zee,Azr),e(tf,Lzr),e(tf,Qee),e(Qee,yzr),e(tf,xzr),e(br,$zr),e(br,M$),e(M$,kzr),e(M$,w5e),e(w5e,Szr),e(M$,Rzr),e(br,Pzr),e(br,Ut),M(E$,Ut,null),e(Ut,Bzr),e(Ut,A5e),e(A5e,Izr),e(Ut,Nzr),e(Ut,af),e(af,qzr),e(af,L5e),e(L5e,jzr),e(af,Dzr),e(af,Wee),e(Wee,Gzr),e(af,Ozr),e(Ut,Vzr),M(r0,Ut,null),e(br,Xzr),e(br,Qr),M(C$,Qr,null),e(Qr,zzr),e(Qr,y5e),e(y5e,Qzr),e(Qr,Wzr),e(Qr,Cn),e(Cn,Hzr),e(Cn,x5e),e(x5e,Uzr),e(Cn,Jzr),e(Cn,$5e),e($5e,Yzr),e(Cn,Kzr),e(Cn,k5e),e(k5e,Zzr),e(Cn,eQr),e(Qr,oQr),e(Qr,$e),e($e,t0),e(t0,S5e),e(S5e,rQr),e(t0,tQr),e(t0,Hee),e(Hee,aQr),e(t0,nQr),e($e,sQr),e($e,a0),e(a0,R5e),e(R5e,lQr),e(a0,iQr),e(a0,Uee),e(Uee,dQr),e(a0,cQr),e($e,fQr),e($e,n0),e(n0,P5e),e(P5e,mQr),e(n0,gQr),e(n0,Jee),e(Jee,hQr),e(n0,pQr),e($e,_Qr),e($e,s0),e(s0,B5e),e(B5e,uQr),e(s0,bQr),e(s0,Yee),e(Yee,vQr),e(s0,FQr),e($e,TQr),e($e,l0),e(l0,I5e),e(I5e,MQr),e(l0,EQr),e(l0,Kee),e(Kee,CQr),e(l0,wQr),e($e,AQr),e($e,i0),e(i0,N5e),e(N5e,LQr),e(i0,yQr),e(i0,Zee),e(Zee,xQr),e(i0,$Qr),e($e,kQr),e($e,d0),e(d0,q5e),e(q5e,SQr),e(d0,RQr),e(d0,eoe),e(eoe,PQr),e(d0,BQr),e($e,IQr),e($e,c0),e(c0,j5e),e(j5e,NQr),e(c0,qQr),e(c0,ooe),e(ooe,jQr),e(c0,DQr),e($e,GQr),e($e,f0),e(f0,D5e),e(D5e,OQr),e(f0,VQr),e(f0,roe),e(roe,XQr),e(f0,zQr),e($e,QQr),e($e,m0),e(m0,G5e),e(G5e,WQr),e(m0,HQr),e(m0,toe),e(toe,UQr),e(m0,JQr),e(Qr,YQr),M(g0,Qr,null),b(f,kze,u),b(f,nf,u),e(nf,h0),e(h0,O5e),M(w$,O5e,null),e(nf,KQr),e(nf,V5e),e(V5e,ZQr),b(f,Sze,u),b(f,vr,u),M(A$,vr,null),e(vr,eWr),e(vr,sf),e(sf,oWr),e(sf,aoe),e(aoe,rWr),e(sf,tWr),e(sf,noe),e(noe,aWr),e(sf,nWr),e(vr,sWr),e(vr,L$),e(L$,lWr),e(L$,X5e),e(X5e,iWr),e(L$,dWr),e(vr,cWr),e(vr,Jt),M(y$,Jt,null),e(Jt,fWr),e(Jt,z5e),e(z5e,mWr),e(Jt,gWr),e(Jt,lf),e(lf,hWr),e(lf,Q5e),e(Q5e,pWr),e(lf,_Wr),e(lf,soe),e(soe,uWr),e(lf,bWr),e(Jt,vWr),M(p0,Jt,null),e(vr,FWr),e(vr,Wr),M(x$,Wr,null),e(Wr,TWr),e(Wr,W5e),e(W5e,MWr),e(Wr,EWr),e(Wr,wn),e(wn,CWr),e(wn,H5e),e(H5e,wWr),e(wn,AWr),e(wn,U5e),e(U5e,LWr),e(wn,yWr),e(wn,J5e),e(J5e,xWr),e(wn,$Wr),e(Wr,kWr),e(Wr,ke),e(ke,_0),e(_0,Y5e),e(Y5e,SWr),e(_0,RWr),e(_0,loe),e(loe,PWr),e(_0,BWr),e(ke,IWr),e(ke,u0),e(u0,K5e),e(K5e,NWr),e(u0,qWr),e(u0,ioe),e(ioe,jWr),e(u0,DWr),e(ke,GWr),e(ke,b0),e(b0,Z5e),e(Z5e,OWr),e(b0,VWr),e(b0,doe),e(doe,XWr),e(b0,zWr),e(ke,QWr),e(ke,v0),e(v0,e0e),e(e0e,WWr),e(v0,HWr),e(v0,coe),e(coe,UWr),e(v0,JWr),e(ke,YWr),e(ke,F0),e(F0,o0e),e(o0e,KWr),e(F0,ZWr),e(F0,foe),e(foe,eHr),e(F0,oHr),e(ke,rHr),e(ke,T0),e(T0,r0e),e(r0e,tHr),e(T0,aHr),e(T0,moe),e(moe,nHr),e(T0,sHr),e(ke,lHr),e(ke,M0),e(M0,t0e),e(t0e,iHr),e(M0,dHr),e(M0,goe),e(goe,cHr),e(M0,fHr),e(ke,mHr),e(ke,E0),e(E0,a0e),e(a0e,gHr),e(E0,hHr),e(E0,hoe),e(hoe,pHr),e(E0,_Hr),e(ke,uHr),e(ke,C0),e(C0,n0e),e(n0e,bHr),e(C0,vHr),e(C0,poe),e(poe,FHr),e(C0,THr),e(ke,MHr),e(ke,w0),e(w0,s0e),e(s0e,EHr),e(w0,CHr),e(w0,_oe),e(_oe,wHr),e(w0,AHr),e(Wr,LHr),M(A0,Wr,null),b(f,Rze,u),b(f,df,u),e(df,L0),e(L0,l0e),M($$,l0e,null),e(df,yHr),e(df,i0e),e(i0e,xHr),b(f,Pze,u),b(f,Fr,u),M(k$,Fr,null),e(Fr,$Hr),e(Fr,cf),e(cf,kHr),e(cf,uoe),e(uoe,SHr),e(cf,RHr),e(cf,boe),e(boe,PHr),e(cf,BHr),e(Fr,IHr),e(Fr,S$),e(S$,NHr),e(S$,d0e),e(d0e,qHr),e(S$,jHr),e(Fr,DHr),e(Fr,Yt),M(R$,Yt,null),e(Yt,GHr),e(Yt,c0e),e(c0e,OHr),e(Yt,VHr),e(Yt,ff),e(ff,XHr),e(ff,f0e),e(f0e,zHr),e(ff,QHr),e(ff,voe),e(voe,WHr),e(ff,HHr),e(Yt,UHr),M(y0,Yt,null),e(Fr,JHr),e(Fr,Hr),M(P$,Hr,null),e(Hr,YHr),e(Hr,m0e),e(m0e,KHr),e(Hr,ZHr),e(Hr,An),e(An,eUr),e(An,g0e),e(g0e,oUr),e(An,rUr),e(An,h0e),e(h0e,tUr),e(An,aUr),e(An,p0e),e(p0e,nUr),e(An,sUr),e(Hr,lUr),e(Hr,Se),e(Se,x0),e(x0,_0e),e(_0e,iUr),e(x0,dUr),e(x0,Foe),e(Foe,cUr),e(x0,fUr),e(Se,mUr),e(Se,$0),e($0,u0e),e(u0e,gUr),e($0,hUr),e($0,Toe),e(Toe,pUr),e($0,_Ur),e(Se,uUr),e(Se,k0),e(k0,b0e),e(b0e,bUr),e(k0,vUr),e(k0,Moe),e(Moe,FUr),e(k0,TUr),e(Se,MUr),e(Se,S0),e(S0,v0e),e(v0e,EUr),e(S0,CUr),e(S0,Eoe),e(Eoe,wUr),e(S0,AUr),e(Se,LUr),e(Se,R0),e(R0,F0e),e(F0e,yUr),e(R0,xUr),e(R0,Coe),e(Coe,$Ur),e(R0,kUr),e(Se,SUr),e(Se,P0),e(P0,T0e),e(T0e,RUr),e(P0,PUr),e(P0,woe),e(woe,BUr),e(P0,IUr),e(Se,NUr),e(Se,B0),e(B0,M0e),e(M0e,qUr),e(B0,jUr),e(B0,Aoe),e(Aoe,DUr),e(B0,GUr),e(Se,OUr),e(Se,I0),e(I0,E0e),e(E0e,VUr),e(I0,XUr),e(I0,Loe),e(Loe,zUr),e(I0,QUr),e(Se,WUr),e(Se,N0),e(N0,C0e),e(C0e,HUr),e(N0,UUr),e(N0,yoe),e(yoe,JUr),e(N0,YUr),e(Se,KUr),e(Se,q0),e(q0,w0e),e(w0e,ZUr),e(q0,eJr),e(q0,xoe),e(xoe,oJr),e(q0,rJr),e(Hr,tJr),M(j0,Hr,null),b(f,Bze,u),b(f,mf,u),e(mf,D0),e(D0,A0e),M(B$,A0e,null),e(mf,aJr),e(mf,L0e),e(L0e,nJr),b(f,Ize,u),b(f,Tr,u),M(I$,Tr,null),e(Tr,sJr),e(Tr,gf),e(gf,lJr),e(gf,$oe),e($oe,iJr),e(gf,dJr),e(gf,koe),e(koe,cJr),e(gf,fJr),e(Tr,mJr),e(Tr,N$),e(N$,gJr),e(N$,y0e),e(y0e,hJr),e(N$,pJr),e(Tr,_Jr),e(Tr,Kt),M(q$,Kt,null),e(Kt,uJr),e(Kt,x0e),e(x0e,bJr),e(Kt,vJr),e(Kt,hf),e(hf,FJr),e(hf,$0e),e($0e,TJr),e(hf,MJr),e(hf,Soe),e(Soe,EJr),e(hf,CJr),e(Kt,wJr),M(G0,Kt,null),e(Tr,AJr),e(Tr,Ur),M(j$,Ur,null),e(Ur,LJr),e(Ur,k0e),e(k0e,yJr),e(Ur,xJr),e(Ur,Ln),e(Ln,$Jr),e(Ln,S0e),e(S0e,kJr),e(Ln,SJr),e(Ln,R0e),e(R0e,RJr),e(Ln,PJr),e(Ln,P0e),e(P0e,BJr),e(Ln,IJr),e(Ur,NJr),e(Ur,Re),e(Re,O0),e(O0,B0e),e(B0e,qJr),e(O0,jJr),e(O0,Roe),e(Roe,DJr),e(O0,GJr),e(Re,OJr),e(Re,V0),e(V0,I0e),e(I0e,VJr),e(V0,XJr),e(V0,Poe),e(Poe,zJr),e(V0,QJr),e(Re,WJr),e(Re,X0),e(X0,N0e),e(N0e,HJr),e(X0,UJr),e(X0,Boe),e(Boe,JJr),e(X0,YJr),e(Re,KJr),e(Re,z0),e(z0,q0e),e(q0e,ZJr),e(z0,eYr),e(z0,Ioe),e(Ioe,oYr),e(z0,rYr),e(Re,tYr),e(Re,Q0),e(Q0,j0e),e(j0e,aYr),e(Q0,nYr),e(Q0,Noe),e(Noe,sYr),e(Q0,lYr),e(Re,iYr),e(Re,W0),e(W0,D0e),e(D0e,dYr),e(W0,cYr),e(W0,qoe),e(qoe,fYr),e(W0,mYr),e(Re,gYr),e(Re,H0),e(H0,G0e),e(G0e,hYr),e(H0,pYr),e(H0,joe),e(joe,_Yr),e(H0,uYr),e(Re,bYr),e(Re,U0),e(U0,O0e),e(O0e,vYr),e(U0,FYr),e(U0,Doe),e(Doe,TYr),e(U0,MYr),e(Re,EYr),e(Re,J0),e(J0,V0e),e(V0e,CYr),e(J0,wYr),e(J0,Goe),e(Goe,AYr),e(J0,LYr),e(Re,yYr),e(Re,Y0),e(Y0,X0e),e(X0e,xYr),e(Y0,$Yr),e(Y0,Ooe),e(Ooe,kYr),e(Y0,SYr),e(Ur,RYr),M(K0,Ur,null),b(f,Nze,u),b(f,pf,u),e(pf,Z0),e(Z0,z0e),M(D$,z0e,null),e(pf,PYr),e(pf,Q0e),e(Q0e,BYr),b(f,qze,u),b(f,Mr,u),M(G$,Mr,null),e(Mr,IYr),e(Mr,_f),e(_f,NYr),e(_f,Voe),e(Voe,qYr),e(_f,jYr),e(_f,Xoe),e(Xoe,DYr),e(_f,GYr),e(Mr,OYr),e(Mr,O$),e(O$,VYr),e(O$,W0e),e(W0e,XYr),e(O$,zYr),e(Mr,QYr),e(Mr,Zt),M(V$,Zt,null),e(Zt,WYr),e(Zt,H0e),e(H0e,HYr),e(Zt,UYr),e(Zt,uf),e(uf,JYr),e(uf,U0e),e(U0e,YYr),e(uf,KYr),e(uf,zoe),e(zoe,ZYr),e(uf,eKr),e(Zt,oKr),M(ew,Zt,null),e(Mr,rKr),e(Mr,Jr),M(X$,Jr,null),e(Jr,tKr),e(Jr,J0e),e(J0e,aKr),e(Jr,nKr),e(Jr,yn),e(yn,sKr),e(yn,Y0e),e(Y0e,lKr),e(yn,iKr),e(yn,K0e),e(K0e,dKr),e(yn,cKr),e(yn,Z0e),e(Z0e,fKr),e(yn,mKr),e(Jr,gKr),e(Jr,Ve),e(Ve,ow),e(ow,ewe),e(ewe,hKr),e(ow,pKr),e(ow,Qoe),e(Qoe,_Kr),e(ow,uKr),e(Ve,bKr),e(Ve,rw),e(rw,owe),e(owe,vKr),e(rw,FKr),e(rw,Woe),e(Woe,TKr),e(rw,MKr),e(Ve,EKr),e(Ve,tw),e(tw,rwe),e(rwe,CKr),e(tw,wKr),e(tw,Hoe),e(Hoe,AKr),e(tw,LKr),e(Ve,yKr),e(Ve,aw),e(aw,twe),e(twe,xKr),e(aw,$Kr),e(aw,Uoe),e(Uoe,kKr),e(aw,SKr),e(Ve,RKr),e(Ve,nw),e(nw,awe),e(awe,PKr),e(nw,BKr),e(nw,Joe),e(Joe,IKr),e(nw,NKr),e(Ve,qKr),e(Ve,sw),e(sw,nwe),e(nwe,jKr),e(sw,DKr),e(sw,Yoe),e(Yoe,GKr),e(sw,OKr),e(Ve,VKr),e(Ve,lw),e(lw,swe),e(swe,XKr),e(lw,zKr),e(lw,Koe),e(Koe,QKr),e(lw,WKr),e(Ve,HKr),e(Ve,iw),e(iw,lwe),e(lwe,UKr),e(iw,JKr),e(iw,Zoe),e(Zoe,YKr),e(iw,KKr),e(Jr,ZKr),M(dw,Jr,null),b(f,jze,u),b(f,bf,u),e(bf,cw),e(cw,iwe),M(z$,iwe,null),e(bf,eZr),e(bf,dwe),e(dwe,oZr),b(f,Dze,u),b(f,Er,u),M(Q$,Er,null),e(Er,rZr),e(Er,vf),e(vf,tZr),e(vf,ere),e(ere,aZr),e(vf,nZr),e(vf,ore),e(ore,sZr),e(vf,lZr),e(Er,iZr),e(Er,W$),e(W$,dZr),e(W$,cwe),e(cwe,cZr),e(W$,fZr),e(Er,mZr),e(Er,ea),M(H$,ea,null),e(ea,gZr),e(ea,fwe),e(fwe,hZr),e(ea,pZr),e(ea,Ff),e(Ff,_Zr),e(Ff,mwe),e(mwe,uZr),e(Ff,bZr),e(Ff,rre),e(rre,vZr),e(Ff,FZr),e(ea,TZr),M(fw,ea,null),e(Er,MZr),e(Er,Yr),M(U$,Yr,null),e(Yr,EZr),e(Yr,gwe),e(gwe,CZr),e(Yr,wZr),e(Yr,xn),e(xn,AZr),e(xn,hwe),e(hwe,LZr),e(xn,yZr),e(xn,pwe),e(pwe,xZr),e(xn,$Zr),e(xn,_we),e(_we,kZr),e(xn,SZr),e(Yr,RZr),e(Yr,Xe),e(Xe,mw),e(mw,uwe),e(uwe,PZr),e(mw,BZr),e(mw,tre),e(tre,IZr),e(mw,NZr),e(Xe,qZr),e(Xe,gw),e(gw,bwe),e(bwe,jZr),e(gw,DZr),e(gw,are),e(are,GZr),e(gw,OZr),e(Xe,VZr),e(Xe,hw),e(hw,vwe),e(vwe,XZr),e(hw,zZr),e(hw,nre),e(nre,QZr),e(hw,WZr),e(Xe,HZr),e(Xe,pw),e(pw,Fwe),e(Fwe,UZr),e(pw,JZr),e(pw,sre),e(sre,YZr),e(pw,KZr),e(Xe,ZZr),e(Xe,_w),e(_w,Twe),e(Twe,eet),e(_w,oet),e(_w,lre),e(lre,ret),e(_w,tet),e(Xe,aet),e(Xe,uw),e(uw,Mwe),e(Mwe,net),e(uw,set),e(uw,ire),e(ire,iet),e(uw,det),e(Xe,cet),e(Xe,bw),e(bw,Ewe),e(Ewe,fet),e(bw,met),e(bw,dre),e(dre,get),e(bw,het),e(Xe,pet),e(Xe,vw),e(vw,Cwe),e(Cwe,_et),e(vw,uet),e(vw,cre),e(cre,bet),e(vw,vet),e(Yr,Fet),M(Fw,Yr,null),b(f,Gze,u),b(f,Tf,u),e(Tf,Tw),e(Tw,wwe),M(J$,wwe,null),e(Tf,Tet),e(Tf,Awe),e(Awe,Met),b(f,Oze,u),b(f,Cr,u),M(Y$,Cr,null),e(Cr,Eet),e(Cr,Mf),e(Mf,Cet),e(Mf,fre),e(fre,wet),e(Mf,Aet),e(Mf,mre),e(mre,Let),e(Mf,yet),e(Cr,xet),e(Cr,K$),e(K$,$et),e(K$,Lwe),e(Lwe,ket),e(K$,Set),e(Cr,Ret),e(Cr,oa),M(Z$,oa,null),e(oa,Pet),e(oa,ywe),e(ywe,Bet),e(oa,Iet),e(oa,Ef),e(Ef,Net),e(Ef,xwe),e(xwe,qet),e(Ef,jet),e(Ef,gre),e(gre,Det),e(Ef,Get),e(oa,Oet),M(Mw,oa,null),e(Cr,Vet),e(Cr,Kr),M(ek,Kr,null),e(Kr,Xet),e(Kr,$we),e($we,zet),e(Kr,Qet),e(Kr,$n),e($n,Wet),e($n,kwe),e(kwe,Het),e($n,Uet),e($n,Swe),e(Swe,Jet),e($n,Yet),e($n,Rwe),e(Rwe,Ket),e($n,Zet),e(Kr,eot),e(Kr,Pwe),e(Pwe,Ew),e(Ew,Bwe),e(Bwe,oot),e(Ew,rot),e(Ew,hre),e(hre,tot),e(Ew,aot),e(Kr,not),M(Cw,Kr,null),b(f,Vze,u),b(f,Cf,u),e(Cf,ww),e(ww,Iwe),M(ok,Iwe,null),e(Cf,sot),e(Cf,Nwe),e(Nwe,lot),b(f,Xze,u),b(f,wr,u),M(rk,wr,null),e(wr,iot),e(wr,wf),e(wf,dot),e(wf,pre),e(pre,cot),e(wf,fot),e(wf,_re),e(_re,mot),e(wf,got),e(wr,hot),e(wr,tk),e(tk,pot),e(tk,qwe),e(qwe,_ot),e(tk,uot),e(wr,bot),e(wr,ra),M(ak,ra,null),e(ra,vot),e(ra,jwe),e(jwe,Fot),e(ra,Tot),e(ra,Af),e(Af,Mot),e(Af,Dwe),e(Dwe,Eot),e(Af,Cot),e(Af,ure),e(ure,wot),e(Af,Aot),e(ra,Lot),M(Aw,ra,null),e(wr,yot),e(wr,Zr),M(nk,Zr,null),e(Zr,xot),e(Zr,Gwe),e(Gwe,$ot),e(Zr,kot),e(Zr,kn),e(kn,Sot),e(kn,Owe),e(Owe,Rot),e(kn,Pot),e(kn,Vwe),e(Vwe,Bot),e(kn,Iot),e(kn,Xwe),e(Xwe,Not),e(kn,qot),e(Zr,jot),e(Zr,sk),e(sk,Lw),e(Lw,zwe),e(zwe,Dot),e(Lw,Got),e(Lw,bre),e(bre,Oot),e(Lw,Vot),e(sk,Xot),e(sk,yw),e(yw,Qwe),e(Qwe,zot),e(yw,Qot),e(yw,vre),e(vre,Wot),e(yw,Hot),e(Zr,Uot),M(xw,Zr,null),b(f,zze,u),b(f,Lf,u),e(Lf,$w),e($w,Wwe),M(lk,Wwe,null),e(Lf,Jot),e(Lf,Hwe),e(Hwe,Yot),b(f,Qze,u),b(f,Ar,u),M(ik,Ar,null),e(Ar,Kot),e(Ar,yf),e(yf,Zot),e(yf,Fre),e(Fre,ert),e(yf,ort),e(yf,Tre),e(Tre,rrt),e(yf,trt),e(Ar,art),e(Ar,dk),e(dk,nrt),e(dk,Uwe),e(Uwe,srt),e(dk,lrt),e(Ar,irt),e(Ar,ta),M(ck,ta,null),e(ta,drt),e(ta,Jwe),e(Jwe,crt),e(ta,frt),e(ta,xf),e(xf,mrt),e(xf,Ywe),e(Ywe,grt),e(xf,hrt),e(xf,Mre),e(Mre,prt),e(xf,_rt),e(ta,urt),M(kw,ta,null),e(Ar,brt),e(Ar,et),M(fk,et,null),e(et,vrt),e(et,Kwe),e(Kwe,Frt),e(et,Trt),e(et,Sn),e(Sn,Mrt),e(Sn,Zwe),e(Zwe,Ert),e(Sn,Crt),e(Sn,eAe),e(eAe,wrt),e(Sn,Art),e(Sn,oAe),e(oAe,Lrt),e(Sn,yrt),e(et,xrt),e(et,rAe),e(rAe,Sw),e(Sw,tAe),e(tAe,$rt),e(Sw,krt),e(Sw,Ere),e(Ere,Srt),e(Sw,Rrt),e(et,Prt),M(Rw,et,null),Wze=!0},p(f,[u]){const mk={};u&2&&(mk.$$scope={dirty:u,ctx:f}),qf.$set(mk);const aAe={};u&2&&(aAe.$$scope={dirty:u,ctx:f}),Jg.$set(aAe);const nAe={};u&2&&(nAe.$$scope={dirty:u,ctx:f}),Sh.$set(nAe);const sAe={};u&2&&(sAe.$$scope={dirty:u,ctx:f}),pp.$set(sAe);const gk={};u&2&&(gk.$$scope={dirty:u,ctx:f}),_p.$set(gk);const lAe={};u&2&&(lAe.$$scope={dirty:u,ctx:f}),Np.$set(lAe);const Rn={};u&2&&(Rn.$$scope={dirty:u,ctx:f}),qp.$set(Rn);const iAe={};u&2&&(iAe.$$scope={dirty:u,ctx:f}),Gp.$set(iAe);const dAe={};u&2&&(dAe.$$scope={dirty:u,ctx:f}),zu.$set(dAe);const cAe={};u&2&&(cAe.$$scope={dirty:u,ctx:f}),Wu.$set(cAe);const hk={};u&2&&(hk.$$scope={dirty:u,ctx:f}),D2.$set(hk);const fAe={};u&2&&(fAe.$$scope={dirty:u,ctx:f}),O2.$set(fAe);const pk={};u&2&&(pk.$$scope={dirty:u,ctx:f}),$1.$set(pk);const mAe={};u&2&&(mAe.$$scope={dirty:u,ctx:f}),S1.$set(mAe);const _k={};u&2&&(_k.$$scope={dirty:u,ctx:f}),b4.$set(_k);const gAe={};u&2&&(gAe.$$scope={dirty:u,ctx:f}),F4.$set(gAe);const hAe={};u&2&&(hAe.$$scope={dirty:u,ctx:f}),D4.$set(hAe);const pAe={};u&2&&(pAe.$$scope={dirty:u,ctx:f}),O4.$set(pAe);const $f={};u&2&&($f.$$scope={dirty:u,ctx:f}),Db.$set($f);const _Ae={};u&2&&(_Ae.$$scope={dirty:u,ctx:f}),Ob.$set(_Ae);const uAe={};u&2&&(uAe.$$scope={dirty:u,ctx:f}),Fv.$set(uAe);const bAe={};u&2&&(bAe.$$scope={dirty:u,ctx:f}),Mv.$set(bAe);const uk={};u&2&&(uk.$$scope={dirty:u,ctx:f}),$v.$set(uk);const vAe={};u&2&&(vAe.$$scope={dirty:u,ctx:f}),Sv.$set(vAe);const FAe={};u&2&&(FAe.$$scope={dirty:u,ctx:f}),_F.$set(FAe);const TAe={};u&2&&(TAe.$$scope={dirty:u,ctx:f}),bF.$set(TAe);const at={};u&2&&(at.$$scope={dirty:u,ctx:f}),iT.$set(at);const bk={};u&2&&(bk.$$scope={dirty:u,ctx:f}),cT.$set(bk);const MAe={};u&2&&(MAe.$$scope={dirty:u,ctx:f}),gT.$set(MAe);const vk={};u&2&&(vk.$$scope={dirty:u,ctx:f}),pT.$set(vk);const EAe={};u&2&&(EAe.$$scope={dirty:u,ctx:f}),$T.$set(EAe);const nt={};u&2&&(nt.$$scope={dirty:u,ctx:f}),ST.$set(nt);const CAe={};u&2&&(CAe.$$scope={dirty:u,ctx:f}),BT.$set(CAe);const kf={};u&2&&(kf.$$scope={dirty:u,ctx:f}),NT.$set(kf);const wAe={};u&2&&(wAe.$$scope={dirty:u,ctx:f}),DT.$set(wAe);const AAe={};u&2&&(AAe.$$scope={dirty:u,ctx:f}),OT.$set(AAe);const L={};u&2&&(L.$$scope={dirty:u,ctx:f}),ZT.$set(L);const Pw={};u&2&&(Pw.$$scope={dirty:u,ctx:f}),o7.$set(Pw);const LAe={};u&2&&(LAe.$$scope={dirty:u,ctx:f}),i7.$set(LAe);const yAe={};u&2&&(yAe.$$scope={dirty:u,ctx:f}),c7.$set(yAe);const Bw={};u&2&&(Bw.$$scope={dirty:u,ctx:f}),M7.$set(Bw);const xAe={};u&2&&(xAe.$$scope={dirty:u,ctx:f}),C7.$set(xAe);const $Ae={};u&2&&($Ae.$$scope={dirty:u,ctx:f}),y7.$set($Ae);const Iw={};u&2&&(Iw.$$scope={dirty:u,ctx:f}),$7.$set(Iw);const kAe={};u&2&&(kAe.$$scope={dirty:u,ctx:f}),N7.$set(kAe);const SAe={};u&2&&(SAe.$$scope={dirty:u,ctx:f}),j7.$set(SAe);const Nw={};u&2&&(Nw.$$scope={dirty:u,ctx:f}),X7.$set(Nw);const RAe={};u&2&&(RAe.$$scope={dirty:u,ctx:f}),Q7.$set(RAe);const PAe={};u&2&&(PAe.$$scope={dirty:u,ctx:f}),J7.$set(PAe);const qw={};u&2&&(qw.$$scope={dirty:u,ctx:f}),K7.$set(qw);const BAe={};u&2&&(BAe.$$scope={dirty:u,ctx:f}),o9.$set(BAe);const IAe={};u&2&&(IAe.$$scope={dirty:u,ctx:f}),t9.$set(IAe);const jw={};u&2&&(jw.$$scope={dirty:u,ctx:f}),c9.$set(jw);const NAe={};u&2&&(NAe.$$scope={dirty:u,ctx:f}),m9.$set(NAe);const qAe={};u&2&&(qAe.$$scope={dirty:u,ctx:f}),p9.$set(qAe);const Dw={};u&2&&(Dw.$$scope={dirty:u,ctx:f}),u9.$set(Dw);const jAe={};u&2&&(jAe.$$scope={dirty:u,ctx:f}),mM.$set(jAe);const DAe={};u&2&&(DAe.$$scope={dirty:u,ctx:f}),hM.$set(DAe);const Gw={};u&2&&(Gw.$$scope={dirty:u,ctx:f}),qM.$set(Gw);const GAe={};u&2&&(GAe.$$scope={dirty:u,ctx:f}),DM.$set(GAe);const OAe={};u&2&&(OAe.$$scope={dirty:u,ctx:f}),eE.$set(OAe);const Ow={};u&2&&(Ow.$$scope={dirty:u,ctx:f}),rE.$set(Ow);const VAe={};u&2&&(VAe.$$scope={dirty:u,ctx:f}),dE.$set(VAe);const XAe={};u&2&&(XAe.$$scope={dirty:u,ctx:f}),fE.$set(XAe);const Vw={};u&2&&(Vw.$$scope={dirty:u,ctx:f}),SE.$set(Vw);const zAe={};u&2&&(zAe.$$scope={dirty:u,ctx:f}),PE.$set(zAe);const QAe={};u&2&&(QAe.$$scope={dirty:u,ctx:f}),zE.$set(QAe);const Xw={};u&2&&(Xw.$$scope={dirty:u,ctx:f}),WE.$set(Xw);const WAe={};u&2&&(WAe.$$scope={dirty:u,ctx:f}),FC.$set(WAe);const HAe={};u&2&&(HAe.$$scope={dirty:u,ctx:f}),MC.$set(HAe);const zw={};u&2&&(zw.$$scope={dirty:u,ctx:f}),DC.$set(zw);const UAe={};u&2&&(UAe.$$scope={dirty:u,ctx:f}),OC.$set(UAe);const JAe={};u&2&&(JAe.$$scope={dirty:u,ctx:f}),zC.$set(JAe);const Qw={};u&2&&(Qw.$$scope={dirty:u,ctx:f}),WC.$set(Qw);const YAe={};u&2&&(YAe.$$scope={dirty:u,ctx:f}),UC.$set(YAe);const KAe={};u&2&&(KAe.$$scope={dirty:u,ctx:f}),YC.$set(KAe);const Ww={};u&2&&(Ww.$$scope={dirty:u,ctx:f}),b3.$set(Ww);const ZAe={};u&2&&(ZAe.$$scope={dirty:u,ctx:f}),F3.$set(ZAe);const e6e={};u&2&&(e6e.$$scope={dirty:u,ctx:f}),G3.$set(e6e);const Hw={};u&2&&(Hw.$$scope={dirty:u,ctx:f}),V3.$set(Hw);const o6e={};u&2&&(o6e.$$scope={dirty:u,ctx:f}),z3.$set(o6e);const r6e={};u&2&&(r6e.$$scope={dirty:u,ctx:f}),W3.$set(r6e);const Uw={};u&2&&(Uw.$$scope={dirty:u,ctx:f}),U3.$set(Uw);const t6e={};u&2&&(t6e.$$scope={dirty:u,ctx:f}),Y3.$set(t6e);const a6e={};u&2&&(a6e.$$scope={dirty:u,ctx:f}),w5.$set(a6e);const Jw={};u&2&&(Jw.$$scope={dirty:u,ctx:f}),L5.$set(Jw);const n6e={};u&2&&(n6e.$$scope={dirty:u,ctx:f}),q5.$set(n6e);const s6e={};u&2&&(s6e.$$scope={dirty:u,ctx:f}),D5.$set(s6e);const Yw={};u&2&&(Yw.$$scope={dirty:u,ctx:f}),e0.$set(Yw);const l6e={};u&2&&(l6e.$$scope={dirty:u,ctx:f}),r0.$set(l6e);const i6e={};u&2&&(i6e.$$scope={dirty:u,ctx:f}),g0.$set(i6e);const Kw={};u&2&&(Kw.$$scope={dirty:u,ctx:f}),p0.$set(Kw);const d6e={};u&2&&(d6e.$$scope={dirty:u,ctx:f}),A0.$set(d6e);const c6e={};u&2&&(c6e.$$scope={dirty:u,ctx:f}),y0.$set(c6e);const Zw={};u&2&&(Zw.$$scope={dirty:u,ctx:f}),j0.$set(Zw);const f6e={};u&2&&(f6e.$$scope={dirty:u,ctx:f}),G0.$set(f6e);const m6e={};u&2&&(m6e.$$scope={dirty:u,ctx:f}),K0.$set(m6e);const eA={};u&2&&(eA.$$scope={dirty:u,ctx:f}),ew.$set(eA);const g6e={};u&2&&(g6e.$$scope={dirty:u,ctx:f}),dw.$set(g6e);const h6e={};u&2&&(h6e.$$scope={dirty:u,ctx:f}),fw.$set(h6e);const oA={};u&2&&(oA.$$scope={dirty:u,ctx:f}),Fw.$set(oA);const p6e={};u&2&&(p6e.$$scope={dirty:u,ctx:f}),Mw.$set(p6e);const _6e={};u&2&&(_6e.$$scope={dirty:u,ctx:f}),Cw.$set(_6e);const rA={};u&2&&(rA.$$scope={dirty:u,ctx:f}),Aw.$set(rA);const u6e={};u&2&&(u6e.$$scope={dirty:u,ctx:f}),xw.$set(u6e);const b6e={};u&2&&(b6e.$$scope={dirty:u,ctx:f}),kw.$set(b6e);const tA={};u&2&&(tA.$$scope={dirty:u,ctx:f}),Rw.$set(tA)},i(f){Wze||(E(d.$$.fragment,f),E(Sa.$$.fragment,f),E(rL.$$.fragment,f),E(tL.$$.fragment,f),E(qf.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(iL.$$.fragment,f),E(Jg.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(hL.$$.fragment,f),E(Sh.$$.fragment,f),E(pL.$$.fragment,f),E(_L.$$.fragment,f),E(uL.$$.fragment,f),E(FL.$$.fragment,f),E(pp.$$.fragment,f),E(_p.$$.fragment,f),E(TL.$$.fragment,f),E(ML.$$.fragment,f),E(EL.$$.fragment,f),E(AL.$$.fragment,f),E(Np.$$.fragment,f),E(qp.$$.fragment,f),E(LL.$$.fragment,f),E(yL.$$.fragment,f),E(xL.$$.fragment,f),E(kL.$$.fragment,f),E(Gp.$$.fragment,f),E(SL.$$.fragment,f),E(zu.$$.fragment,f),E(RL.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(Wu.$$.fragment,f),E(NL.$$.fragment,f),E(D2.$$.fragment,f),E(qL.$$.fragment,f),E(jL.$$.fragment,f),E(GL.$$.fragment,f),E(O2.$$.fragment,f),E(OL.$$.fragment,f),E($1.$$.fragment,f),E(VL.$$.fragment,f),E(XL.$$.fragment,f),E(QL.$$.fragment,f),E(S1.$$.fragment,f),E(WL.$$.fragment,f),E(b4.$$.fragment,f),E(HL.$$.fragment,f),E(UL.$$.fragment,f),E(YL.$$.fragment,f),E(F4.$$.fragment,f),E(KL.$$.fragment,f),E(D4.$$.fragment,f),E(ZL.$$.fragment,f),E(ey.$$.fragment,f),E(ry.$$.fragment,f),E(O4.$$.fragment,f),E(ty.$$.fragment,f),E(Db.$$.fragment,f),E(ay.$$.fragment,f),E(ny.$$.fragment,f),E(ly.$$.fragment,f),E(Ob.$$.fragment,f),E(iy.$$.fragment,f),E(Fv.$$.fragment,f),E(dy.$$.fragment,f),E(cy.$$.fragment,f),E(my.$$.fragment,f),E(Mv.$$.fragment,f),E(gy.$$.fragment,f),E($v.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(uy.$$.fragment,f),E(Sv.$$.fragment,f),E(by.$$.fragment,f),E(_F.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(bF.$$.fragment,f),E(Ey.$$.fragment,f),E(iT.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(Ly.$$.fragment,f),E(cT.$$.fragment,f),E(yy.$$.fragment,f),E(gT.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(pT.$$.fragment,f),E(Ry.$$.fragment,f),E($T.$$.fragment,f),E(Py.$$.fragment,f),E(By.$$.fragment,f),E(Ny.$$.fragment,f),E(ST.$$.fragment,f),E(qy.$$.fragment,f),E(BT.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(NT.$$.fragment,f),E(Vy.$$.fragment,f),E(DT.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(OT.$$.fragment,f),E(Hy.$$.fragment,f),E(ZT.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(o7.$$.fragment,f),E(Zy.$$.fragment,f),E(i7.$$.fragment,f),E(e8.$$.fragment,f),E(o8.$$.fragment,f),E(t8.$$.fragment,f),E(c7.$$.fragment,f),E(a8.$$.fragment,f),E(M7.$$.fragment,f),E(n8.$$.fragment,f),E(s8.$$.fragment,f),E(i8.$$.fragment,f),E(C7.$$.fragment,f),E(d8.$$.fragment,f),E(y7.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E($7.$$.fragment,f),E(p8.$$.fragment,f),E(N7.$$.fragment,f),E(_8.$$.fragment,f),E(u8.$$.fragment,f),E(v8.$$.fragment,f),E(j7.$$.fragment,f),E(F8.$$.fragment,f),E(X7.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(Q7.$$.fragment,f),E(w8.$$.fragment,f),E(J7.$$.fragment,f),E(L8.$$.fragment,f),E(y8.$$.fragment,f),E($8.$$.fragment,f),E(K7.$$.fragment,f),E(k8.$$.fragment,f),E(o9.$$.fragment,f),E(S8.$$.fragment,f),E(R8.$$.fragment,f),E(B8.$$.fragment,f),E(t9.$$.fragment,f),E(I8.$$.fragment,f),E(c9.$$.fragment,f),E(N8.$$.fragment,f),E(q8.$$.fragment,f),E(D8.$$.fragment,f),E(m9.$$.fragment,f),E(G8.$$.fragment,f),E(p9.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(u9.$$.fragment,f),E(Q8.$$.fragment,f),E(mM.$$.fragment,f),E(W8.$$.fragment,f),E(H8.$$.fragment,f),E(J8.$$.fragment,f),E(hM.$$.fragment,f),E(Y8.$$.fragment,f),E(qM.$$.fragment,f),E(K8.$$.fragment,f),E(Z8.$$.fragment,f),E(ox.$$.fragment,f),E(DM.$$.fragment,f),E(rx.$$.fragment,f),E(eE.$$.fragment,f),E(tx.$$.fragment,f),E(ax.$$.fragment,f),E(sx.$$.fragment,f),E(rE.$$.fragment,f),E(lx.$$.fragment,f),E(dE.$$.fragment,f),E(ix.$$.fragment,f),E(dx.$$.fragment,f),E(fx.$$.fragment,f),E(fE.$$.fragment,f),E(mx.$$.fragment,f),E(SE.$$.fragment,f),E(gx.$$.fragment,f),E(hx.$$.fragment,f),E(_x.$$.fragment,f),E(PE.$$.fragment,f),E(ux.$$.fragment,f),E(zE.$$.fragment,f),E(bx.$$.fragment,f),E(vx.$$.fragment,f),E(Tx.$$.fragment,f),E(WE.$$.fragment,f),E(Mx.$$.fragment,f),E(FC.$$.fragment,f),E(Ex.$$.fragment,f),E(Cx.$$.fragment,f),E(Ax.$$.fragment,f),E(MC.$$.fragment,f),E(Lx.$$.fragment,f),E(DC.$$.fragment,f),E(yx.$$.fragment,f),E(xx.$$.fragment,f),E(kx.$$.fragment,f),E(OC.$$.fragment,f),E(Sx.$$.fragment,f),E(zC.$$.fragment,f),E(Px.$$.fragment,f),E(Bx.$$.fragment,f),E(Nx.$$.fragment,f),E(WC.$$.fragment,f),E(qx.$$.fragment,f),E(UC.$$.fragment,f),E(jx.$$.fragment,f),E(Dx.$$.fragment,f),E(Ox.$$.fragment,f),E(YC.$$.fragment,f),E(Vx.$$.fragment,f),E(b3.$$.fragment,f),E(Xx.$$.fragment,f),E(zx.$$.fragment,f),E(Wx.$$.fragment,f),E(F3.$$.fragment,f),E(Hx.$$.fragment,f),E(G3.$$.fragment,f),E(Ux.$$.fragment,f),E(Jx.$$.fragment,f),E(Kx.$$.fragment,f),E(V3.$$.fragment,f),E(Zx.$$.fragment,f),E(z3.$$.fragment,f),E(e$.$$.fragment,f),E(o$.$$.fragment,f),E(t$.$$.fragment,f),E(W3.$$.fragment,f),E(a$.$$.fragment,f),E(U3.$$.fragment,f),E(n$.$$.fragment,f),E(s$.$$.fragment,f),E(i$.$$.fragment,f),E(Y3.$$.fragment,f),E(d$.$$.fragment,f),E(w5.$$.fragment,f),E(c$.$$.fragment,f),E(f$.$$.fragment,f),E(g$.$$.fragment,f),E(L5.$$.fragment,f),E(h$.$$.fragment,f),E(q5.$$.fragment,f),E(p$.$$.fragment,f),E(_$.$$.fragment,f),E(b$.$$.fragment,f),E(D5.$$.fragment,f),E(v$.$$.fragment,f),E(e0.$$.fragment,f),E(F$.$$.fragment,f),E(T$.$$.fragment,f),E(E$.$$.fragment,f),E(r0.$$.fragment,f),E(C$.$$.fragment,f),E(g0.$$.fragment,f),E(w$.$$.fragment,f),E(A$.$$.fragment,f),E(y$.$$.fragment,f),E(p0.$$.fragment,f),E(x$.$$.fragment,f),E(A0.$$.fragment,f),E($$.$$.fragment,f),E(k$.$$.fragment,f),E(R$.$$.fragment,f),E(y0.$$.fragment,f),E(P$.$$.fragment,f),E(j0.$$.fragment,f),E(B$.$$.fragment,f),E(I$.$$.fragment,f),E(q$.$$.fragment,f),E(G0.$$.fragment,f),E(j$.$$.fragment,f),E(K0.$$.fragment,f),E(D$.$$.fragment,f),E(G$.$$.fragment,f),E(V$.$$.fragment,f),E(ew.$$.fragment,f),E(X$.$$.fragment,f),E(dw.$$.fragment,f),E(z$.$$.fragment,f),E(Q$.$$.fragment,f),E(H$.$$.fragment,f),E(fw.$$.fragment,f),E(U$.$$.fragment,f),E(Fw.$$.fragment,f),E(J$.$$.fragment,f),E(Y$.$$.fragment,f),E(Z$.$$.fragment,f),E(Mw.$$.fragment,f),E(ek.$$.fragment,f),E(Cw.$$.fragment,f),E(ok.$$.fragment,f),E(rk.$$.fragment,f),E(ak.$$.fragment,f),E(Aw.$$.fragment,f),E(nk.$$.fragment,f),E(xw.$$.fragment,f),E(lk.$$.fragment,f),E(ik.$$.fragment,f),E(ck.$$.fragment,f),E(kw.$$.fragment,f),E(fk.$$.fragment,f),E(Rw.$$.fragment,f),Wze=!0)},o(f){C(d.$$.fragment,f),C(Sa.$$.fragment,f),C(rL.$$.fragment,f),C(tL.$$.fragment,f),C(qf.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(iL.$$.fragment,f),C(Jg.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(hL.$$.fragment,f),C(Sh.$$.fragment,f),C(pL.$$.fragment,f),C(_L.$$.fragment,f),C(uL.$$.fragment,f),C(FL.$$.fragment,f),C(pp.$$.fragment,f),C(_p.$$.fragment,f),C(TL.$$.fragment,f),C(ML.$$.fragment,f),C(EL.$$.fragment,f),C(AL.$$.fragment,f),C(Np.$$.fragment,f),C(qp.$$.fragment,f),C(LL.$$.fragment,f),C(yL.$$.fragment,f),C(xL.$$.fragment,f),C(kL.$$.fragment,f),C(Gp.$$.fragment,f),C(SL.$$.fragment,f),C(zu.$$.fragment,f),C(RL.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(Wu.$$.fragment,f),C(NL.$$.fragment,f),C(D2.$$.fragment,f),C(qL.$$.fragment,f),C(jL.$$.fragment,f),C(GL.$$.fragment,f),C(O2.$$.fragment,f),C(OL.$$.fragment,f),C($1.$$.fragment,f),C(VL.$$.fragment,f),C(XL.$$.fragment,f),C(QL.$$.fragment,f),C(S1.$$.fragment,f),C(WL.$$.fragment,f),C(b4.$$.fragment,f),C(HL.$$.fragment,f),C(UL.$$.fragment,f),C(YL.$$.fragment,f),C(F4.$$.fragment,f),C(KL.$$.fragment,f),C(D4.$$.fragment,f),C(ZL.$$.fragment,f),C(ey.$$.fragment,f),C(ry.$$.fragment,f),C(O4.$$.fragment,f),C(ty.$$.fragment,f),C(Db.$$.fragment,f),C(ay.$$.fragment,f),C(ny.$$.fragment,f),C(ly.$$.fragment,f),C(Ob.$$.fragment,f),C(iy.$$.fragment,f),C(Fv.$$.fragment,f),C(dy.$$.fragment,f),C(cy.$$.fragment,f),C(my.$$.fragment,f),C(Mv.$$.fragment,f),C(gy.$$.fragment,f),C($v.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(uy.$$.fragment,f),C(Sv.$$.fragment,f),C(by.$$.fragment,f),C(_F.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(bF.$$.fragment,f),C(Ey.$$.fragment,f),C(iT.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(Ly.$$.fragment,f),C(cT.$$.fragment,f),C(yy.$$.fragment,f),C(gT.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(pT.$$.fragment,f),C(Ry.$$.fragment,f),C($T.$$.fragment,f),C(Py.$$.fragment,f),C(By.$$.fragment,f),C(Ny.$$.fragment,f),C(ST.$$.fragment,f),C(qy.$$.fragment,f),C(BT.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(NT.$$.fragment,f),C(Vy.$$.fragment,f),C(DT.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(OT.$$.fragment,f),C(Hy.$$.fragment,f),C(ZT.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(o7.$$.fragment,f),C(Zy.$$.fragment,f),C(i7.$$.fragment,f),C(e8.$$.fragment,f),C(o8.$$.fragment,f),C(t8.$$.fragment,f),C(c7.$$.fragment,f),C(a8.$$.fragment,f),C(M7.$$.fragment,f),C(n8.$$.fragment,f),C(s8.$$.fragment,f),C(i8.$$.fragment,f),C(C7.$$.fragment,f),C(d8.$$.fragment,f),C(y7.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C($7.$$.fragment,f),C(p8.$$.fragment,f),C(N7.$$.fragment,f),C(_8.$$.fragment,f),C(u8.$$.fragment,f),C(v8.$$.fragment,f),C(j7.$$.fragment,f),C(F8.$$.fragment,f),C(X7.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(Q7.$$.fragment,f),C(w8.$$.fragment,f),C(J7.$$.fragment,f),C(L8.$$.fragment,f),C(y8.$$.fragment,f),C($8.$$.fragment,f),C(K7.$$.fragment,f),C(k8.$$.fragment,f),C(o9.$$.fragment,f),C(S8.$$.fragment,f),C(R8.$$.fragment,f),C(B8.$$.fragment,f),C(t9.$$.fragment,f),C(I8.$$.fragment,f),C(c9.$$.fragment,f),C(N8.$$.fragment,f),C(q8.$$.fragment,f),C(D8.$$.fragment,f),C(m9.$$.fragment,f),C(G8.$$.fragment,f),C(p9.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(u9.$$.fragment,f),C(Q8.$$.fragment,f),C(mM.$$.fragment,f),C(W8.$$.fragment,f),C(H8.$$.fragment,f),C(J8.$$.fragment,f),C(hM.$$.fragment,f),C(Y8.$$.fragment,f),C(qM.$$.fragment,f),C(K8.$$.fragment,f),C(Z8.$$.fragment,f),C(ox.$$.fragment,f),C(DM.$$.fragment,f),C(rx.$$.fragment,f),C(eE.$$.fragment,f),C(tx.$$.fragment,f),C(ax.$$.fragment,f),C(sx.$$.fragment,f),C(rE.$$.fragment,f),C(lx.$$.fragment,f),C(dE.$$.fragment,f),C(ix.$$.fragment,f),C(dx.$$.fragment,f),C(fx.$$.fragment,f),C(fE.$$.fragment,f),C(mx.$$.fragment,f),C(SE.$$.fragment,f),C(gx.$$.fragment,f),C(hx.$$.fragment,f),C(_x.$$.fragment,f),C(PE.$$.fragment,f),C(ux.$$.fragment,f),C(zE.$$.fragment,f),C(bx.$$.fragment,f),C(vx.$$.fragment,f),C(Tx.$$.fragment,f),C(WE.$$.fragment,f),C(Mx.$$.fragment,f),C(FC.$$.fragment,f),C(Ex.$$.fragment,f),C(Cx.$$.fragment,f),C(Ax.$$.fragment,f),C(MC.$$.fragment,f),C(Lx.$$.fragment,f),C(DC.$$.fragment,f),C(yx.$$.fragment,f),C(xx.$$.fragment,f),C(kx.$$.fragment,f),C(OC.$$.fragment,f),C(Sx.$$.fragment,f),C(zC.$$.fragment,f),C(Px.$$.fragment,f),C(Bx.$$.fragment,f),C(Nx.$$.fragment,f),C(WC.$$.fragment,f),C(qx.$$.fragment,f),C(UC.$$.fragment,f),C(jx.$$.fragment,f),C(Dx.$$.fragment,f),C(Ox.$$.fragment,f),C(YC.$$.fragment,f),C(Vx.$$.fragment,f),C(b3.$$.fragment,f),C(Xx.$$.fragment,f),C(zx.$$.fragment,f),C(Wx.$$.fragment,f),C(F3.$$.fragment,f),C(Hx.$$.fragment,f),C(G3.$$.fragment,f),C(Ux.$$.fragment,f),C(Jx.$$.fragment,f),C(Kx.$$.fragment,f),C(V3.$$.fragment,f),C(Zx.$$.fragment,f),C(z3.$$.fragment,f),C(e$.$$.fragment,f),C(o$.$$.fragment,f),C(t$.$$.fragment,f),C(W3.$$.fragment,f),C(a$.$$.fragment,f),C(U3.$$.fragment,f),C(n$.$$.fragment,f),C(s$.$$.fragment,f),C(i$.$$.fragment,f),C(Y3.$$.fragment,f),C(d$.$$.fragment,f),C(w5.$$.fragment,f),C(c$.$$.fragment,f),C(f$.$$.fragment,f),C(g$.$$.fragment,f),C(L5.$$.fragment,f),C(h$.$$.fragment,f),C(q5.$$.fragment,f),C(p$.$$.fragment,f),C(_$.$$.fragment,f),C(b$.$$.fragment,f),C(D5.$$.fragment,f),C(v$.$$.fragment,f),C(e0.$$.fragment,f),C(F$.$$.fragment,f),C(T$.$$.fragment,f),C(E$.$$.fragment,f),C(r0.$$.fragment,f),C(C$.$$.fragment,f),C(g0.$$.fragment,f),C(w$.$$.fragment,f),C(A$.$$.fragment,f),C(y$.$$.fragment,f),C(p0.$$.fragment,f),C(x$.$$.fragment,f),C(A0.$$.fragment,f),C($$.$$.fragment,f),C(k$.$$.fragment,f),C(R$.$$.fragment,f),C(y0.$$.fragment,f),C(P$.$$.fragment,f),C(j0.$$.fragment,f),C(B$.$$.fragment,f),C(I$.$$.fragment,f),C(q$.$$.fragment,f),C(G0.$$.fragment,f),C(j$.$$.fragment,f),C(K0.$$.fragment,f),C(D$.$$.fragment,f),C(G$.$$.fragment,f),C(V$.$$.fragment,f),C(ew.$$.fragment,f),C(X$.$$.fragment,f),C(dw.$$.fragment,f),C(z$.$$.fragment,f),C(Q$.$$.fragment,f),C(H$.$$.fragment,f),C(fw.$$.fragment,f),C(U$.$$.fragment,f),C(Fw.$$.fragment,f),C(J$.$$.fragment,f),C(Y$.$$.fragment,f),C(Z$.$$.fragment,f),C(Mw.$$.fragment,f),C(ek.$$.fragment,f),C(Cw.$$.fragment,f),C(ok.$$.fragment,f),C(rk.$$.fragment,f),C(ak.$$.fragment,f),C(Aw.$$.fragment,f),C(nk.$$.fragment,f),C(xw.$$.fragment,f),C(lk.$$.fragment,f),C(ik.$$.fragment,f),C(ck.$$.fragment,f),C(kw.$$.fragment,f),C(fk.$$.fragment,f),C(Rw.$$.fragment,f),Wze=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(Rf),f&&t(st),f&&t(Oe),f&&t(Qe),f&&t(Bf),w(Sa,f),f&&t(We),f&&t(Ae),f&&t(Co),f&&t(Ra),f&&t(OVe),f&&t(Ri),w(rL),f&&t(VVe),f&&t(qn),f&&t(XVe),w(tL,f),f&&t(zVe),f&&t(NS),f&&t(QVe),w(qf,f),f&&t(WVe),f&&t(Pi),w(aL),f&&t(HVe),f&&t(wo),w(nL),w(iL),w(Jg),w(dL),f&&t(UVe),f&&t(Ii),w(cL),f&&t(JVe),f&&t(Ao),w(fL),w(hL),w(Sh),w(pL),f&&t(YVe),f&&t(Ni),w(_L),f&&t(KVe),f&&t(Lo),w(uL),w(FL),w(pp),w(_p),w(TL),f&&t(ZVe),f&&t(qi),w(ML),f&&t(eXe),f&&t(yo),w(EL),w(AL),w(Np),w(qp),w(LL),f&&t(oXe),f&&t(Di),w(yL),f&&t(rXe),f&&t(xo),w(xL),w(kL),w(Gp),w(SL),w(zu),f&&t(tXe),f&&t(Vi),w(RL),f&&t(aXe),f&&t($o),w(PL),w(IL),w(Wu),w(NL),w(D2),f&&t(nXe),f&&t(Qi),w(qL),f&&t(sXe),f&&t(ko),w(jL),w(GL),w(O2),w(OL),w($1),f&&t(lXe),f&&t(Ui),w(VL),f&&t(iXe),f&&t(So),w(XL),w(QL),w(S1),w(WL),w(b4),f&&t(dXe),f&&t(Ki),w(HL),f&&t(cXe),f&&t(Ro),w(UL),w(YL),w(F4),w(KL),w(D4),f&&t(fXe),f&&t(od),w(ZL),f&&t(mXe),f&&t(Po),w(ey),w(ry),w(O4),w(ty),w(Db),f&&t(gXe),f&&t(ad),w(ay),f&&t(hXe),f&&t(Bo),w(ny),w(ly),w(Ob),w(iy),w(Fv),f&&t(pXe),f&&t(ld),w(dy),f&&t(_Xe),f&&t(Io),w(cy),w(my),w(Mv),w(gy),w($v),f&&t(uXe),f&&t(cd),w(hy),f&&t(bXe),f&&t(qo),w(py),w(uy),w(Sv),w(by),w(_F),f&&t(vXe),f&&t(gd),w(vy),f&&t(FXe),f&&t(jo),w(Fy),w(My),w(bF),w(Ey),w(iT),f&&t(TXe),f&&t(_d),w(Cy),f&&t(MXe),f&&t(Do),w(wy),w(Ly),w(cT),w(yy),w(gT),f&&t(EXe),f&&t(vd),w(xy),f&&t(CXe),f&&t(Go),w($y),w(Sy),w(pT),w(Ry),w($T),f&&t(wXe),f&&t(Md),w(Py),f&&t(AXe),f&&t(Oo),w(By),w(Ny),w(ST),w(qy),w(BT),f&&t(LXe),f&&t(wd),w(jy),f&&t(yXe),f&&t(Vo),w(Dy),w(Oy),w(NT),w(Vy),w(DT),f&&t(xXe),f&&t(yd),w(Xy),f&&t($Xe),f&&t(Xo),w(zy),w(Wy),w(OT),w(Hy),w(ZT),f&&t(kXe),f&&t(kd),w(Uy),f&&t(SXe),f&&t(zo),w(Jy),w(Ky),w(o7),w(Zy),w(i7),f&&t(RXe),f&&t(Pd),w(e8),f&&t(PXe),f&&t(Qo),w(o8),w(t8),w(c7),w(a8),w(M7),f&&t(BXe),f&&t(Nd),w(n8),f&&t(IXe),f&&t(Wo),w(s8),w(i8),w(C7),w(d8),w(y7),f&&t(NXe),f&&t(Dd),w(f8),f&&t(qXe),f&&t(Ho),w(m8),w(h8),w($7),w(p8),w(N7),f&&t(jXe),f&&t(Vd),w(_8),f&&t(DXe),f&&t(Uo),w(u8),w(v8),w(j7),w(F8),w(X7),f&&t(GXe),f&&t(Wd),w(T8),f&&t(OXe),f&&t(Jo),w(M8),w(C8),w(Q7),w(w8),w(J7),f&&t(VXe),f&&t(Jd),w(L8),f&&t(XXe),f&&t(Yo),w(y8),w($8),w(K7),w(k8),w(o9),f&&t(zXe),f&&t(Zd),w(S8),f&&t(QXe),f&&t(Ko),w(R8),w(B8),w(t9),w(I8),w(c9),f&&t(WXe),f&&t(rc),w(N8),f&&t(HXe),f&&t(Zo),w(q8),w(D8),w(m9),w(G8),w(p9),f&&t(UXe),f&&t(nc),w(O8),f&&t(JXe),f&&t(er),w(V8),w(z8),w(u9),w(Q8),w(mM),f&&t(YXe),f&&t(ic),w(W8),f&&t(KXe),f&&t(or),w(H8),w(J8),w(hM),w(Y8),w(qM),f&&t(ZXe),f&&t(fc),w(K8),f&&t(eze),f&&t(rr),w(Z8),w(ox),w(DM),w(rx),w(eE),f&&t(oze),f&&t(hc),w(tx),f&&t(rze),f&&t(tr),w(ax),w(sx),w(rE),w(lx),w(dE),f&&t(tze),f&&t(uc),w(ix),f&&t(aze),f&&t(nr),w(dx),w(fx),w(fE),w(mx),w(SE),f&&t(nze),f&&t(Fc),w(gx),f&&t(sze),f&&t(sr),w(hx),w(_x),w(PE),w(ux),w(zE),f&&t(lze),f&&t(Ec),w(bx),f&&t(ize),f&&t(lr),w(vx),w(Tx),w(WE),w(Mx),w(FC),f&&t(dze),f&&t(Ac),w(Ex),f&&t(cze),f&&t(ir),w(Cx),w(Ax),w(MC),w(Lx),w(DC),f&&t(fze),f&&t(xc),w(yx),f&&t(mze),f&&t(dr),w(xx),w(kx),w(OC),w(Sx),w(zC),f&&t(gze),f&&t(Sc),w(Px),f&&t(hze),f&&t(cr),w(Bx),w(Nx),w(WC),w(qx),w(UC),f&&t(pze),f&&t(Bc),w(jx),f&&t(_ze),f&&t(fr),w(Dx),w(Ox),w(YC),w(Vx),w(b3),f&&t(uze),f&&t(qc),w(Xx),f&&t(bze),f&&t(mr),w(zx),w(Wx),w(F3),w(Hx),w(G3),f&&t(vze),f&&t(Gc),w(Ux),f&&t(Fze),f&&t(gr),w(Jx),w(Kx),w(V3),w(Zx),w(z3),f&&t(Tze),f&&t(Xc),w(e$),f&&t(Mze),f&&t(hr),w(o$),w(t$),w(W3),w(a$),w(U3),f&&t(Eze),f&&t(Wc),w(n$),f&&t(Cze),f&&t(pr),w(s$),w(i$),w(Y3),w(d$),w(w5),f&&t(wze),f&&t(Jc),w(c$),f&&t(Aze),f&&t(_r),w(f$),w(g$),w(L5),w(h$),w(q5),f&&t(Lze),f&&t(Zc),w(p$),f&&t(yze),f&&t(ur),w(_$),w(b$),w(D5),w(v$),w(e0),f&&t(xze),f&&t(rf),w(F$),f&&t($ze),f&&t(br),w(T$),w(E$),w(r0),w(C$),w(g0),f&&t(kze),f&&t(nf),w(w$),f&&t(Sze),f&&t(vr),w(A$),w(y$),w(p0),w(x$),w(A0),f&&t(Rze),f&&t(df),w($$),f&&t(Pze),f&&t(Fr),w(k$),w(R$),w(y0),w(P$),w(j0),f&&t(Bze),f&&t(mf),w(B$),f&&t(Ize),f&&t(Tr),w(I$),w(q$),w(G0),w(j$),w(K0),f&&t(Nze),f&&t(pf),w(D$),f&&t(qze),f&&t(Mr),w(G$),w(V$),w(ew),w(X$),w(dw),f&&t(jze),f&&t(bf),w(z$),f&&t(Dze),f&&t(Er),w(Q$),w(H$),w(fw),w(U$),w(Fw),f&&t(Gze),f&&t(Tf),w(J$),f&&t(Oze),f&&t(Cr),w(Y$),w(Z$),w(Mw),w(ek),w(Cw),f&&t(Vze),f&&t(Cf),w(ok),f&&t(Xze),f&&t(wr),w(rk),w(ak),w(Aw),w(nk),w(xw),f&&t(zze),f&&t(Lf),w(lk),f&&t(Qze),f&&t(Ar),w(ik),w(ck),w(kw),w(fk),w(Rw)}}}const dHt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function cHt($){return iQt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class uHt extends aQt{constructor(g){super();nQt(this,g,cHt,iHt,sQt,{})}}export{uHt as default,dHt as metadata};
